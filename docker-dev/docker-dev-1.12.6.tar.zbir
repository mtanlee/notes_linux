stants, if you don't want to have to remember to add the
C<, RESET> at the end of each print line, you can set
$Term::ANSIColor::AUTORESET to a true value.  Then, the display mode will
automatically be reset if there is no comma after the constant.  In other
words, with that variable set:

    print BOLD BLUE "Text\n";

will reset the display mode afterward, whereas:

    print BOLD, BLUE, "Text\n";

will not.  If you are using background colors, you will probably want to
either use say() (in newer versions of Perl) or print the newline with a
separate print statement to avoid confusing the terminal.

If $Term::ANSIColor::AUTOLOCAL is set (see below), it takes precedence
over $Term::ANSIColor::AUTORESET, and the latter is ignored.

The subroutine interface has the advantage over the constants interface in
that only two subroutines are exported into your namespace, versus
thirty-eight in the constants interface.  On the flip side, the constants
interface has the advantage of better compile time error checking, since
misspelled names of colors or attributes in calls to color() and colored()
won't be caught until runtime whereas misspelled names of constants will
be caught at compile time.  So, pollute your namespace with almost two
dozen subroutines that you may not even use that often, or risk a silly
bug by mistyping an attribute.  Your choice, TMTOWTDI after all.

=head2 The Color Stack

You can import C<:pushpop> and maintain a stack of colors using PUSHCOLOR,
POPCOLOR, and LOCALCOLOR.  PUSHCOLOR takes the attribute string that
starts its argument and pushes it onto a stack of attributes.  POPCOLOR
removes the top of the stack and restores the previous attributes set by
the argument of a prior PUSHCOLOR.  LOCALCOLOR surrounds its argument in a
PUSHCOLOR and POPCOLOR so that the color resets afterward.

If $Term::ANSIColor::AUTOLOCAL is set, each sequence of color constants
will be implicitly preceded by LOCALCOLOR.  In other words, the following:

    {
        local $Term::ANSIColor::AUTOLOCAL = 1;
        print BLUE "Text\n";
    }

is equivalent to:

    print LOCALCOLOR BLUE "Text\n";

If $Term::ANSIColor::AUTOLOCAL is set, it takes precedence over
$Term::ANSIColor::AUTORESET, and the latter is ignored.

When using PUSHCOLOR, POPCOLOR, and LOCALCOLOR, it's particularly
important to not put commas between the constants.

    print PUSHCOLOR BLUE "Text\n";

will correctly push BLUE onto the top of the stack.

    print PUSHCOLOR, BLUE, "Text\n";    # wrong!

will not, and a subsequent pop won't restore the correct attributes.
PUSHCOLOR pushes the attributes set by its argument, which is normally a
string of color constants.  It can't ask the terminal what the current
attributes are.

=head1 DIAGNOSTICS

=over 4

=item Bad color mapping %s

(W) The specified color mapping from ANSI_COLORS_ALIASES is not valid and
could not be parsed.  It was ignored.

=item Bad escape sequence %s

(F) You passed an invalid ANSI escape sequence to uncolor().

=item Bareword "%s" not allowed while "strict subs" in use

(F) You probably mistyped a constant color name such as:

    $Foobar = FOOBAR . "This line should be blue\n";

or:

    @Foobar = FOOBAR, "This line should be blue\n";

This will only show up under use strict (another good reason to run under
use strict).

=item Cannot alias standard color %s

(F) The alias name passed to coloralias() matches a standard color name.
Standard color names cannot be aliased.

=item Cannot alias standard color %s in %s

(W) The same, but in ANSI_COLORS_ALIASES.  The color mapping was ignored.

=item Invalid alias name %s

(F) You passed an invalid alias name to coloralias().  Alias names must
consist only of alphanumerics, C<.>, C<->, and C<_>.

=item Invalid alias name %s in %s

(W) You specified an invalid alias name on the left hand of the equal sign
in a color mapping in ANSI_COLORS_ALIASES.  The color mapping was ignored.

=item Invalid attribute name %s

(F) You passed an invalid attribute name to color(), colored(), or
coloralias().

=item Invalid attribute name %s in %s

(W) You specified an invalid attribute name on the right hand of the equal
sign in a color mapping in ANSI_COLORS_ALIASES.  The color mapping was
ignored.

=item Name "%s" used only once: possible typo

(W) You probably mistyped a constant color name such as:

    print FOOBAR "This text is color FOOBAR\n";

It's probably better to always use commas after constant names in order to
force the next error.

=item No comma allowed after filehandle

(F) You probably mistyped a constant color name such as:

    print FOOBAR, "This text is color FOOBAR\n";

Generating this fatal compile error is one of the main advantages of using
the constants interface, since you'll immediately know if you mistype a
color name.

=item No name for escape sequence %s

(F) The ANSI escape sequence passed to uncolor() contains escapes which
aren't recognized and can't be translated to names.

=back

=head1 ENVIRONMENT

=over 4

=item ANSI_COLORS_ALIASES

This environment variable allows the user to specify custom color aliases
that will be understood by color(), colored(), and colorvalid().  None of
the other functions will be affected, and no new color constants will be
created.  The custom colors are aliases for existing color names; no new
escape sequences can be introduced.  Only alphanumerics, C<.>, C<_>, and
C<-> are allowed in alias names.

The format is:

    ANSI_COLORS_ALIASES='newcolor1=oldcolor1,newcolor2=oldcolor2'

Whitespace is ignored.

For example the L<Solarized|http://ethanschoonover.com/solarized> colors
can be mapped with:

    ANSI_COLORS_ALIASES='\
        base00=bright_yellow, on_base00=on_bright_yellow,\
        base01=bright_green,  on_base01=on_bright_green, \
        base02=black,         on_base02=on_black,        \
        base03=bright_black,  on_base03=on_bright_black, \
        base0=bright_blue,    on_base0=on_bright_blue,   \
        base1=bright_cyan,    on_base1=on_bright_cyan,   \
        base2=white,          on_base2=on_white,         \
        base3=bright_white,   on_base3=on_bright_white,  \
        orange=bright_red,    on_orange=on_bright_red,   \
        violet=bright_magenta,on_violet=on_bright_magenta'

This environment variable is read and applied when the Term::ANSIColor
module is loaded and is then subsequently ignored.  Changes to
ANSI_COLORS_ALIASES after the module is loaded will have no effect.  See
coloralias() for an equivalent facility that can be used at runtime.

=item ANSI_COLORS_DISABLED

If this environment variable is set to a true value, all of the functions
defined by this module (color(), colored(), and all of the constants not
previously used in the program) will not output any escape sequences and
instead will just return the empty string or pass through the original
text as appropriate.  This is intended to support easy use of scripts
using this module on platforms that don't support ANSI escape sequences.

=back

=head1 COMPATIBILITY

Term::ANSIColor was first included with Perl in Perl 5.6.0.

The uncolor() function and support for ANSI_COLORS_DISABLED were added in
Term::ANSIColor 1.04, included in Perl 5.8.0.

Support for dark was added in Term::ANSIColor 1.08, included in Perl
5.8.4.

The color stack, including the C<:pushpop> import tag, PUSHCOLOR,
POPCOLOR, LOCALCOLOR, and the $Term::ANSIColor::AUTOLOCAL variable, was
added in Term::ANSIColor 2.00, included in Perl 5.10.1.

colorstrip() was added in Term::ANSIColor 2.01 and colorvalid() was added
in Term::ANSIColor 2.02, both included in Perl 5.11.0.

Support for colors 8 through 15 (the C<bright_> variants) was added in
Term::ANSIColor 3.00, included in Perl 5.13.3.

Support for italic was added in Term::ANSIColor 3.02, included in Perl
5.17.1.

Support for colors 16 through 256 (the C<ansi>, C<rgb>, and C<grey>
colors), the C<:constants256> import tag, the coloralias() function, and
support for the ANSI_COLORS_ALIASES environment variable were added in
Term::ANSIColor 4.00.

$Term::ANSIColor::AUTOLOCAL was changed to take precedence over
$Term::ANSIColor::AUTORESET, rather than the other way around, in
Term::ANSIColor 4.00.

=head1 RESTRICTIONS

It would be nice if one could leave off the commas around the constants
entirely and just say:

    print BOLD BLUE ON_WHITE "Text\n" RESET;

but the syntax of Perl doesn't allow this.  You need a comma after the
string.  (Of course, you may consider it a bug that commas between all the
constants aren't required, in which case you may feel free to insert
commas unless you're using $Term::ANSIColor::AUTORESET or
PUSHCOLOR/POPCOLOR.)

For easier debugging, you may prefer to always use the commas when not
setting $Term::ANSIColor::AUTORESET or PUSHCOLOR/POPCOLOR so that you'll
get a fatal compile error rather than a warning.

It's not possible to use this module to embed formatting and color
attributes using Perl formats.  They replace the escape character with a
space (as documented in L<perlform(1)>), resulting in garbled output from
the unrecognized attribute.  Even if there were a way around that problem,
the format doesn't know that the non-printing escape sequence is
zero-length and would incorrectly format the output.  For formatted output
using color or other attributes, either use sprintf() instead or use
formline() and then add the color or other attributes after formatting and
before output.

=head1 NOTES

The codes generated by this module are standard terminal control codes,
complying with ECMA-048 and ISO 6429 (generally referred to as "ANSI
color" for the color codes).  The non-color control codes (bold, dark,
italic, underline, and reverse) are part of the earlier ANSI X3.64
standard for control sequences for video terminals and peripherals.

Note that not all displays are ISO 6429-compliant, or even X3.64-compliant
(or are even attempting to be so).  This module will not work as expected
on displays that do not honor these escape sequences, such as cmd.exe,
4nt.exe, and command.com under either Windows NT or Windows 2000.  They
may just be ignored, or they may display as an ESC character followed by
some apparent garbage.

Jean Delvare provided the following table of different common terminal
emulators and their support for the various attributes and others have
helped me flesh it out:

              clear    bold     faint   under    blink   reverse  conceal
 ------------------------------------------------------------------------
 xterm         yes      yes      no      yes      yes      yes      yes
 linux         yes      yes      yes    bold      yes      yes      no
 rxvt          yes      yes      no      yes  bold/black   yes      no
 dtterm        yes      yes      yes     yes    reverse    yes      yes
 teraterm      yes    reverse    no      yes    rev/red    yes      no
 aixterm      kinda   normal     no      yes      no       yes      yes
 PuTTY         yes     color     no      yes      no       yes      no
 Windows       yes      no       no      no       no       yes      no
 Cygwin SSH    yes      yes      no     color    color    color     yes
 Terminal.app  yes      yes      no      yes      yes      yes      yes

Windows is Windows telnet, Cygwin SSH is the OpenSSH implementation under
Cygwin on Windows NT, and Mac Terminal is the Terminal application in Mac
OS X.  Where the entry is other than yes or no, that emulator displays the
given attribute as something else instead.  Note that on an aixterm, clear
doesn't reset colors; you have to explicitly set the colors back to what
you want.  More entries in this table are welcome.

Support for code 3 (italic) is rare and therefore not mentioned in that
table.  It is not believed to be fully supported by any of the terminals
listed, although it's displayed as green in the Linux console, but it is
reportedly supported by urxvt.

Note that codes 6 (rapid blink) and 9 (strike-through) are specified in
ANSI X3.64 and ECMA-048 but are not commonly supported by most displays
and emulators and therefore aren't supported by this module at the present
time.  ECMA-048 also specifies a large number of other attributes,
including a sequence of attributes for font changes, Fraktur characters,
double-underlining, framing, circling, and overlining.  As none of these
attributes are widely supported or useful, they also aren't currently
supported by this module.

Most modern X terminal emulators support 256 colors.  Known to not support
those colors are aterm, rxvt, Terminal.app, and TTY/VC.

=head1 SEE ALSO

ECMA-048 is available on-line (at least at the time of this writing) at
L<http://www.ecma-international.org/publications/standards/Ecma-048.htm>.

ISO 6429 is available from ISO for a charge; the author of this module
does not own a copy of it.  Since the source material for ISO 6429 was
ECMA-048 and the latter is available for free, there seems little reason
to obtain the ISO standard.

The 256-color control sequences are documented at
L<http://www.xfree86.org/current/ctlseqs.html> (search for 256-color).

The CPAN module Term::ExtendedColor provides a different and more
comprehensive interface for 256-color emulators that may be more
convenient.

The current version of this module is always available from its web site
at L<http://www.eyrie.org/~eagle/software/ansicolor/>.  It is also part of
the Perl core distribution as of 5.6.0.

=head1 AUTHORS

Original idea (using constants) by Zenin, reimplemented using subs by Russ
Allbery <rra@stanford.edu>, and then combined with the original idea by
Russ with input from Zenin.  256-color support is based on work by Kurt
Starsinic.  Russ Allbery now maintains this module.

PUSHCOLOR, POPCOLOR, and LOCALCOLOR were contributed by openmethods.com
voice solutions.

=head1 COPYRIGHT AND LICENSE

Copyright 1996 Zenin.  Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2005,
2006, 2008, 2009, 2010, 2011, 2012 Russ Allbery <rra@stanford.edu>.
Copyright 2012 Kurt Starsinic <kstarsinic@gmail.com>.  This program is
free software; you may redistribute it and/or modify it under the same
terms as Perl itself.

=cut
                                                                                                                                                                                                                 usr/share/perl/5.20.2/Term/Cap.pm                                                                   0100644 0000000 0000000 00000052471 12744441327 014637  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Term::Cap;

# Since the debugger uses Term::ReadLine which uses Term::Cap, we want
# to load as few modules as possible.  This includes Carp.pm.
sub carp
{
    require Carp;
    goto &Carp::carp;
}

sub croak
{
    require Carp;
    goto &Carp::croak;
}

use strict;

use vars qw($VERSION $VMS_TERMCAP);
use vars qw($termpat $state $first $entry);

$VERSION = '1.15';

# Version undef: Thu Dec 14 20:02:42 CST 1995 by sanders@bsdi.com
# Version 1.00:  Thu Nov 30 23:34:29 EST 2000 by schwern@pobox.com
#	[PATCH] $VERSION crusade, strict, tests, etc... all over lib/
# Version 1.01:  Wed May 23 00:00:00 CST 2001 by d-lewart@uiuc.edu
#	Avoid warnings in Tgetent and Tputs
# Version 1.02:  Sat Nov 17 13:50:39 GMT 2001 by jns@gellyfish.com
#       Altered layout of the POD
#       Added Test::More to PREREQ_PM in Makefile.PL
#       Fixed no argument Tgetent()
# Version 1.03:  Wed Nov 28 10:09:38 GMT 2001
#       VMS Support from Charles Lane <lane@DUPHY4.Physics.Drexel.Edu>
# Version 1.04:  Thu Nov 29 16:22:03 GMT 2001
#       Fixed warnings in test
# Version 1.05:  Mon Dec  3 15:33:49 GMT 2001
#       Don't try to fall back on infocmp if it's not there. From chromatic.
# Version 1.06:  Thu Dec  6 18:43:22 GMT 2001
#       Preload the default VMS termcap from Charles Lane
#       Don't carp at setting OSPEED unless warnings are on.
# Version 1.07:  Wed Jan  2 21:35:09 GMT 2002
#       Sanity check on infocmp output from Norton Allen
#       Repaired INSTALLDIRS thanks to Michael Schwern
# Version 1.08:  Sat Sep 28 11:33:15 BST 2002
#       Late loading of 'Carp' as per Michael Schwern
# Version 1.09:  Tue Apr 20 12:06:51 BST 2004
#       Merged in changes from and to Core
#       Core (Fri Aug 30 14:15:55 CEST 2002):
#       Cope with comments lines from 'infocmp' from Brendan O'Dea
#       Allow for EBCDIC in Tgoto magic test.
# Version 1.10: Thu Oct 18 16:52:20 BST 2007
#       Don't use try to use $ENV{HOME} if it doesn't exist
#       Give Win32 'dumb' if TERM isn't set
#       Provide fallback 'dumb' termcap entry as last resort
# Version 1.11: Thu Oct 25 09:33:07 BST 2007
#       EBDIC fixes from Chun Bing Ge <gecb@cn.ibm.com>
# Version 1.12: Sat Dec  8 00:10:21 GMT 2007
#       QNX test fix from Matt Kraai <kraai@ftbfs.org>
# Version 1.13: Thu Dec 22 22:21:09 GMT 2011
#       POD error fix from Domin Hargreaves <dom@earth.li>
# Version 1.14 Sat Oct 26 19:16:38 BST 2013
#       Applied all patches from RT and updated contact details
# Version 1.15 Sat Oct 26 21:32:24 BST 2013
#        Metadata change from David Steinbrunner
#        Forgot to update the email somewhere
# TODO:
# support Berkeley DB termcaps
# force $FH into callers package?
# keep $FH in object at Tgetent time?

=head1 NAME

Term::Cap - Perl termcap interface

=head1 SYNOPSIS

    require Term::Cap;
    $terminal = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };
    $terminal->Trequire(qw/ce ku kd/);
    $terminal->Tgoto('cm', $col, $row, $FH);
    $terminal->Tputs('dl', $count, $FH);
    $terminal->Tpad($string, $count, $FH);

=head1 DESCRIPTION

These are low-level functions to extract and use capabilities from
a terminal capability (termcap) database.

More information on the terminal capabilities will be found in the
termcap manpage on most Unix-like systems.

=head2 METHODS

The output strings for B<Tputs> are cached for counts of 1 for performance.
B<Tgoto> and B<Tpad> do not cache.  C<$self-E<gt>{_xx}> is the raw termcap
data and C<$self-E<gt>{xx}> is the cached version.

    print $terminal->Tpad($self->{_xx}, 1);

B<Tgoto>, B<Tputs>, and B<Tpad> return the string and will also
output the string to $FH if specified.


=cut

# Preload the default VMS termcap.
# If a different termcap is required then the text of one can be supplied
# in $Term::Cap::VMS_TERMCAP before Tgetent is called.

if ( $^O eq 'VMS' )
{
    chomp( my @entry = <DATA> );
    $VMS_TERMCAP = join '', @entry;
}

# Returns a list of termcap files to check.

sub termcap_path
{    ## private
    my @termcap_path;

    # $TERMCAP, if it's a filespec
    push( @termcap_path, $ENV{TERMCAP} )
      if (
        ( exists $ENV{TERMCAP} )
        && (
            ( $^O eq 'os2' || $^O eq 'MSWin32' || $^O eq 'dos' )
            ? $ENV{TERMCAP} =~ /^[a-z]:[\\\/]/is
            : $ENV{TERMCAP} =~ /^\//s
        )
      );
    if ( ( exists $ENV{TERMPATH} ) && ( $ENV{TERMPATH} ) )
    {

        # Add the users $TERMPATH
        push( @termcap_path, split( /(:|\s+)/, $ENV{TERMPATH} ) );
    }
    else
    {

        # Defaults
        push( @termcap_path,
            exists $ENV{'HOME'} ? $ENV{'HOME'} . '/.termcap' : undef,
            '/etc/termcap', '/usr/share/misc/termcap', );
    }

    # return the list of those termcaps that exist
    return grep { defined $_ && -f $_ } @termcap_path;
}

=over 4

=item B<Tgetent>

Returns a blessed object reference which the user can
then use to send the control strings to the terminal using B<Tputs>
and B<Tgoto>.

The function extracts the entry of the specified terminal
type I<TERM> (defaults to the environment variable I<TERM>) from the
database.

It will look in the environment for a I<TERMCAP> variable.  If
found, and the value does not begin with a slash, and the terminal
type name is the same as the environment string I<TERM>, the
I<TERMCAP> string is used instead of reading a termcap file.  If
it does begin with a slash, the string is used as a path name of
the termcap file to search.  If I<TERMCAP> does not begin with a
slash and name is different from I<TERM>, B<Tgetent> searches the
files F<$HOME/.termcap>, F</etc/termcap>, and F</usr/share/misc/termcap>,
in that order, unless the environment variable I<TERMPATH> exists,
in which case it specifies a list of file pathnames (separated by
spaces or colons) to be searched B<instead>.  Whenever multiple
files are searched and a tc field occurs in the requested entry,
the entry it names must be found in the same file or one of the
succeeding files.  If there is a C<:tc=...:> in the I<TERMCAP>
environment variable string it will continue the search in the
files as above.

The extracted termcap entry is available in the object
as C<$self-E<gt>{TERMCAP}>.

It takes a hash reference as an argument with two optional keys:

=over 2

=item OSPEED

The terminal output bit rate (often mistakenly called the baud rate)
for this terminal - if not set a warning will be generated
and it will be defaulted to 9600.  I<OSPEED> can be specified as
either a POSIX termios/SYSV termio speeds (where 9600 equals 9600) or
an old DSD-style speed ( where 13 equals 9600).


=item TERM

The terminal type whose termcap entry will be used - if not supplied it will
default to $ENV{TERM}: if that is not set then B<Tgetent> will croak.

=back

It calls C<croak> on failure.

=cut

sub Tgetent
{    ## public -- static method
    my $class = shift;
    my ($self) = @_;

    $self = {} unless defined $self;
    bless $self, $class;

    my ( $term, $cap, $search, $field, $max, $tmp_term, $TERMCAP );
    local ( $termpat, $state, $first, $entry );    # used inside eval
    local $_;

    # Compute PADDING factor from OSPEED (to be used by Tpad)
    if ( !$self->{OSPEED} )
    {
        if ($^W)
        {
            carp "OSPEED was not set, defaulting to 9600";
        }
        $self->{OSPEED} = 9600;
    }
    if ( $self->{OSPEED} < 16 )
    {

        # delays for old style speeds
        my @pad = (
            0,    200, 133.3, 90.9, 74.3, 66.7, 50, 33.3,
            16.7, 8.3, 5.5,   4.1,  2,    1,    .5, .2
        );
        $self->{PADDING} = $pad[ $self->{OSPEED} ];
    }
    else
    {
        $self->{PADDING} = 10000 / $self->{OSPEED};
    }

    unless ( $self->{TERM} )
    {
       if ( $ENV{TERM} )
       {
         $self->{TERM} =  $ENV{TERM} ;
       }
       else
       {
          if ( $^O eq 'MSWin32' )
          {
             $self->{TERM} =  'dumb';
          }
          else
          {
             croak "TERM not set";
          }
       }
    }

    $term = $self->{TERM};    # $term is the term type we are looking for

    # $tmp_term is always the next term (possibly :tc=...:) we are looking for
    $tmp_term = $self->{TERM};

    # protect any pattern metacharacters in $tmp_term
    $termpat = $tmp_term;
    $termpat =~ s/(\W)/\\$1/g;

    my $foo = ( exists $ENV{TERMCAP} ? $ENV{TERMCAP} : '' );

    # $entry is the extracted termcap entry
    if ( ( $foo !~ m:^/:s ) && ( $foo =~ m/(^|\|)${termpat}[:|]/s ) )
    {
        $entry = $foo;
    }

    my @termcap_path = termcap_path();

    unless ( @termcap_path || $entry )
    {

        # last resort--fake up a termcap from terminfo
        local $ENV{TERM} = $term;

        if ( $^O eq 'VMS' )
        {
            $entry = $VMS_TERMCAP;
        }
        else
        {
            if ( grep { -x "$_/infocmp" } split /:/, $ENV{PATH} )
            {
                eval {
                    my $tmp = `infocmp -C 2>/dev/null`;
                    $tmp =~ s/^#.*\n//gm;    # remove comments
                    if (   ( $tmp !~ m%^/%s )
                        && ( $tmp =~ /(^|\|)${termpat}[:|]/s ) )
                    {
                        $entry = $tmp;
                    }
                };
                warn "Can't run infocmp to get a termcap entry: $@" if $@;
            }
            else
            {
               # this is getting desperate now
               if ( $self->{TERM} eq 'dumb' )
               {
                  $entry = 'dumb|80-column dumb tty::am::co#80::bl=^G:cr=^M:do=^J:sf=^J:';
               }
            }
        }
    }

    croak "Can't find a valid termcap file" unless @termcap_path || $entry;

    $state = 1;    # 0 == finished
                   # 1 == next file
                   # 2 == search again

    $first = 0;    # first entry (keeps term name)

    $max = 32;     # max :tc=...:'s

    if ($entry)
    {

        # ok, we're starting with $TERMCAP
        $first++;    # we're the first entry
                     # do we need to continue?
        if ( $entry =~ s/:tc=([^:]+):/:/ )
        {
            $tmp_term = $1;

            # protect any pattern metacharacters in $tmp_term
            $termpat = $tmp_term;
            $termpat =~ s/(\W)/\\$1/g;
        }
        else
        {
            $state = 0;    # we're already finished
        }
    }

    # This is eval'ed inside the while loop for each file
    $search = q{
	while (<TERMCAP>) {
	    next if /^\\t/ || /^#/;
	    if ($_ =~ m/(^|\\|)${termpat}[:|]/o) {
		chomp;
		s/^[^:]*:// if $first++;
		$state = 0;
		while ($_ =~ s/\\\\$//) {
		    defined(my $x = <TERMCAP>) or last;
		    $_ .= $x; chomp;
		}
		last;
	    }
	}
	defined $entry or $entry = '';
	$entry .= $_ if $_;
    };

    while ( $state != 0 )
    {
        if ( $state == 1 )
        {

            # get the next TERMCAP
            $TERMCAP = shift @termcap_path
              || croak "failed termcap lookup on $tmp_term";
        }
        else
        {

            # do the same file again
            # prevent endless recursion
            $max-- || croak "failed termcap loop at $tmp_term";
            $state = 1;    # ok, maybe do a new file next time
        }

        open( TERMCAP, "< $TERMCAP\0" ) || croak "open $TERMCAP: $!";
        eval $search;
        die $@ if $@;
        close TERMCAP;

        # If :tc=...: found then search this file again
        $entry =~ s/:tc=([^:]+):/:/ && ( $tmp_term = $1, $state = 2 );

        # protect any pattern metacharacters in $tmp_term
        $termpat = $tmp_term;
        $termpat =~ s/(\W)/\\$1/g;
    }

    croak "Can't find $term" if $entry eq '';
    $entry =~ s/:+\s*:+/:/g;    # cleanup $entry
    $entry =~ s/:+/:/g;         # cleanup $entry
    $self->{TERMCAP} = $entry;  # save it
                                # print STDERR "DEBUG: $entry = ", $entry, "\n";

    # Precompile $entry into the object
    $entry =~ s/^[^:]*://;
    foreach $field ( split( /:[\s:\\]*/, $entry ) )
    {
        if ( defined $field && $field =~ /^(\w\w)$/ )
        {
            $self->{ '_' . $field } = 1 unless defined $self->{ '_' . $1 };

            # print STDERR "DEBUG: flag $1\n";
        }
        elsif ( defined $field && $field =~ /^(\w\w)\@/ )
        {
            $self->{ '_' . $1 } = "";

            # print STDERR "DEBUG: unset $1\n";
        }
        elsif ( defined $field && $field =~ /^(\w\w)#(.*)/ )
        {
            $self->{ '_' . $1 } = $2 unless defined $self->{ '_' . $1 };

            # print STDERR "DEBUG: numeric $1 = $2\n";
        }
        elsif ( defined $field && $field =~ /^(\w\w)=(.*)/ )
        {

            # print STDERR "DEBUG: string $1 = $2\n";
            next if defined $self->{ '_' . ( $cap = $1 ) };
            $_ = $2;
            if ( ord('A') == 193 )
            {
               s/\\E/\047/g;
               s/\\(\d\d\d)/pack('c',oct($1) & 0177)/eg;
               s/\\n/\n/g;
               s/\\r/\r/g;
               s/\\t/\t/g;
               s/\\b/\b/g;
               s/\\f/\f/g;
               s/\\\^/\337/g;
               s/\^\?/\007/g;
               s/\^(.)/pack('c',ord($1) & 31)/eg;
               s/\\(.)/$1/g;
               s/\337/^/g;
            }
            else
            {
               s/\\E/\033/g;
               s/\\(\d\d\d)/pack('c',oct($1) & 0177)/eg;
               s/\\n/\n/g;
               s/\\r/\r/g;
               s/\\t/\t/g;
               s/\\b/\b/g;
               s/\\f/\f/g;
               s/\\\^/\377/g;
               s/\^\?/\177/g;
               s/\^(.)/pack('c',ord($1) & 31)/eg;
               s/\\(.)/$1/g;
               s/\377/^/g;
            }
            $self->{ '_' . $cap } = $_;
        }

        # else { carp "junk in $term ignored: $field"; }
    }
    $self->{'_pc'} = "\0" unless defined $self->{'_pc'};
    $self->{'_bc'} = "\b" unless defined $self->{'_bc'};
    $self;
}

# $terminal->Tpad($string, $cnt, $FH);

=item B<Tpad>

Outputs a literal string with appropriate padding for the current terminal.

It takes three arguments:

=over 2

=item B<$string>

The literal string to be output.  If it starts with a number and an optional
'*' then the padding will be increased by an amount relative to this number,
if the '*' is present then this amount will be multiplied by $cnt.  This part
of $string is removed before output/

=item B<$cnt>

Will be used to modify the padding applied to string as described above.

=item B<$FH>

An optional filehandle (or IO::Handle ) that output will be printed to.

=back

The padded $string is returned.

=cut

sub Tpad
{    ## public
    my $self = shift;
    my ( $string, $cnt, $FH ) = @_;
    my ( $decr, $ms );

    if ( defined $string && $string =~ /(^[\d.]+)(\*?)(.*)$/ )
    {
        $ms = $1;
        $ms *= $cnt if $2;
        $string = $3;
        $decr   = $self->{PADDING};
        if ( $decr > .1 )
        {
            $ms += $decr / 2;
            $string .= $self->{'_pc'} x ( $ms / $decr );
        }
    }
    print $FH $string if $FH;
    $string;
}

# $terminal->Tputs($cap, $cnt, $FH);

=item B<Tputs>

Output the string for the given capability padded as appropriate without
any parameter substitution.

It takes three arguments:

=over 2

=item B<$cap>

The capability whose string is to be output.

=item B<$cnt>

A count passed to Tpad to modify the padding applied to the output string.
If $cnt is zero or one then the resulting string will be cached.

=item B<$FH>

An optional filehandle (or IO::Handle ) that output will be printed to.

=back

The appropriate string for the capability will be returned.

=cut

sub Tputs
{    ## public
    my $self = shift;
    my ( $cap, $cnt, $FH ) = @_;
    my $string;

    $cnt = 0 unless $cnt;

    if ( $cnt > 1 )
    {
        $string = Tpad( $self, $self->{ '_' . $cap }, $cnt );
    }
    else
    {

        # cache result because Tpad can be slow
        unless ( exists $self->{$cap} )
        {
            $self->{$cap} =
              exists $self->{"_$cap"}
              ? Tpad( $self, $self->{"_$cap"}, 1 )
              : undef;
        }
        $string = $self->{$cap};
    }
    print $FH $string if $FH;
    $string;
}

# $terminal->Tgoto($cap, $col, $row, $FH);

=item B<Tgoto>

B<Tgoto> decodes a cursor addressing string with the given parameters.

There are four arguments:

=over 2

=item B<$cap>

The name of the capability to be output.

=item B<$col>

The first value to be substituted in the output string ( usually the column
in a cursor addressing capability )

=item B<$row>

The second value to be substituted in the output string (usually the row
in cursor addressing capabilities)

=item B<$FH>

An optional filehandle (or IO::Handle ) to which the output string will be
printed.

=back

Substitutions are made with $col and $row in the output string with the
following sprintf() line formats:

 %%   output `%'
 %d   output value as in printf %d
 %2   output value as in printf %2d
 %3   output value as in printf %3d
 %.   output value as in printf %c
 %+x  add x to value, then do %.

 %>xy if value > x then add y, no output
 %r   reverse order of two parameters, no output
 %i   increment by one, no output
 %B   BCD (16*(value/10)) + (value%10), no output

 %n   exclusive-or all parameters with 0140 (Datamedia 2500)
 %D   Reverse coding (value - 2*(value%16)), no output (Delta Data)

The output string will be returned.

=cut

sub Tgoto
{    ## public
    my $self = shift;
    my ( $cap, $code, $tmp, $FH ) = @_;
    my $string = $self->{ '_' . $cap };
    my $result = '';
    my $after  = '';
    my $online = 0;
    my @tmp    = ( $tmp, $code );
    my $cnt    = $code;

    while ( $string =~ /^([^%]*)%(.)(.*)/ )
    {
        $result .= $1;
        $code   = $2;
        $string = $3;
        if ( $code eq 'd' )
        {
            $result .= sprintf( "%d", shift(@tmp) );
        }
        elsif ( $code eq '.' )
        {
            $tmp = shift(@tmp);
            if ( $tmp == 0 || $tmp == 4 || $tmp == 10 )
            {
                if ($online)
                {
                    ++$tmp, $after .= $self->{'_up'} if $self->{'_up'};
                }
                else
                {
                    ++$tmp, $after .= $self->{'_bc'};
                }
            }
            $result .= sprintf( "%c", $tmp );
            $online = !$online;
        }
        elsif ( $code eq '+' )
        {
            $result .= sprintf( "%c", shift(@tmp) + ord($string) );
            $string = substr( $string, 1, 99 );
            $online = !$online;
        }
        elsif ( $code eq 'r' )
        {
            ( $code, $tmp ) = @tmp;
            @tmp = ( $tmp, $code );
            $online = !$online;
        }
        elsif ( $code eq '>' )
        {
            ( $code, $tmp, $string ) = unpack( "CCa99", $string );
            if ( $tmp[0] > $code )
            {
                $tmp[0] += $tmp;
            }
        }
        elsif ( $code eq '2' )
        {
            $result .= sprintf( "%02d", shift(@tmp) );
            $online = !$online;
        }
        elsif ( $code eq '3' )
        {
            $result .= sprintf( "%03d", shift(@tmp) );
            $online = !$online;
        }
        elsif ( $code eq 'i' )
        {
            ( $code, $tmp ) = @tmp;
            @tmp = ( $code + 1, $tmp + 1 );
        }
        else
        {
            return "OOPS";
        }
    }
    $string = Tpad( $self, $result . $string . $after, $cnt );
    print $FH $string if $FH;
    $string;
}

# $terminal->Trequire(qw/ce ku kd/);

=item B<Trequire>

Takes a list of capabilities as an argument and will croak if one is not
found.

=cut

sub Trequire
{    ## public
    my $self = shift;
    my ( $cap, @undefined );
    foreach $cap (@_)
    {
        push( @undefined, $cap )
          unless defined $self->{ '_' . $cap } && $self->{ '_' . $cap };
    }
    croak "Terminal does not support: (@undefined)" if @undefined;
}

=back

=head1 EXAMPLES

    use Term::Cap;

    # Get terminal output speed
    require POSIX;
    my $termios = new POSIX::Termios;
    $termios->getattr;
    my $ospeed = $termios->getospeed;

    # Old-style ioctl code to get ospeed:
    #     require 'ioctl.pl';
    #     ioctl(TTY,$TIOCGETP,$sgtty);
    #     ($ispeed,$ospeed) = unpack('cc',$sgtty);

    # allocate and initialize a terminal structure
    $terminal = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };

    # require certain capabilities to be available
    $terminal->Trequire(qw/ce ku kd/);

    # Output Routines, if $FH is undefined these just return the string

    # Tgoto does the % expansion stuff with the given args
    $terminal->Tgoto('cm', $col, $row, $FH);

    # Tputs doesn't do any % expansion.
    $terminal->Tputs('dl', $count = 1, $FH);

=head1 COPYRIGHT AND LICENSE

Please see the README file in distribution.

=head1 AUTHOR

This module is part of the core Perl distribution and is also maintained
for CPAN by Jonathan Stowe <jns@gellyfish.co.uk>.

The code is hosted on Github: https://github.com/jonathanstowe/Term-Cap
please feel free to fork, submit patches etc, etc there.

=head1 SEE ALSO

termcap(5)

=cut

# Below is a default entry for systems where there are terminals but no
# termcap
1;
__DATA__
vt220|vt200|DEC VT220 in vt100 emulation mode:
am:mi:xn:xo:
co#80:li#24:
RA=\E[?7l:SA=\E[?7h:
ac=kkllmmjjnnwwqquuttvvxx:ae=\E(B:al=\E[L:as=\E(0:
bl=^G:cd=\E[J:ce=\E[K:cl=\E[H\E[2J:cm=\E[%i%d;%dH:
cr=^M:cs=\E[%i%d;%dr:dc=\E[P:dl=\E[M:do=\E[B:
ei=\E[4l:ho=\E[H:im=\E[4h:
is=\E[1;24r\E[24;1H:
nd=\E[C:
kd=\E[B::kl=\E[D:kr=\E[C:ku=\E[A:le=^H:
mb=\E[5m:md=\E[1m:me=\E[m:mr=\E[7m:
kb=\0177:
r2=\E>\E[24;1H\E[?3l\E[?4l\E[?5l\E[?7h\E[?8h\E=:rc=\E8:
sc=\E7:se=\E[27m:sf=\ED:so=\E[7m:sr=\EM:ta=^I:
ue=\E[24m:up=\E[A:us=\E[4m:ve=\E[?25h:vi=\E[?25l:

                                                                                                                                                                                                       usr/share/perl/5.20.2/Term/Complete.pm                                                              0100644 0000000 0000000 00000010702 12744441327 015673  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Term::Complete;
require 5.000;
require Exporter;

use strict;
our @ISA = qw(Exporter);
our @EXPORT = qw(Complete);
our $VERSION = '1.402';

#      @(#)complete.pl,v1.2            (me@anywhere.EBay.Sun.COM) 09/23/91

=head1 NAME

Term::Complete - Perl word completion module

=head1 SYNOPSIS

    $input = Complete('prompt_string', \@completion_list);
    $input = Complete('prompt_string', @completion_list);

=head1 DESCRIPTION

This routine provides word completion on the list of words in
the array (or array ref).

The tty driver is put into raw mode and restored using an operating
system specific command, in UNIX-like environments C<stty>.

The following command characters are defined:

=over 4

=item E<lt>tabE<gt>

Attempts word completion.
Cannot be changed.

=item ^D

Prints completion list.
Defined by I<$Term::Complete::complete>.

=item ^U

Erases the current input.
Defined by I<$Term::Complete::kill>.

=item E<lt>delE<gt>, E<lt>bsE<gt>

Erases one character.
Defined by I<$Term::Complete::erase1> and I<$Term::Complete::erase2>.

=back

=head1 DIAGNOSTICS

Bell sounds when word completion fails.

=head1 BUGS

The completion character E<lt>tabE<gt> cannot be changed.

=head1 AUTHOR

Wayne Thompson

=cut

our($complete, $kill, $erase1, $erase2, $tty_raw_noecho, $tty_restore, $stty, $tty_safe_restore);
our($tty_saved_state) = '';
CONFIG: {
    $complete = "\004";
    $kill     = "\025";
    $erase1 =   "\177";
    $erase2 =   "\010";
    foreach my $s (qw(/bin/stty /usr/bin/stty)) {
	if (-x $s) {
	    $tty_raw_noecho = "$s raw -echo";
	    $tty_restore    = "$s -raw echo";
	    $tty_safe_restore = $tty_restore;
	    $stty = $s;
	    last;
	}
    }
}

sub Complete {
    my($prompt, @cmp_lst, $cmp, $test, $l, @match);
    my ($return, $r) = ("", 0);

    $return = "";
    $r      = 0;

    $prompt = shift;
    if (ref $_[0] || $_[0] =~ /^\*/) {
	@cmp_lst = sort @{$_[0]};
    }
    else {
	@cmp_lst = sort(@_);
    }

    # Attempt to save the current stty state, to be restored later
    if (defined $stty && defined $tty_saved_state && $tty_saved_state eq '') {
	$tty_saved_state = qx($stty -g 2>/dev/null);
	if ($?) {
	    # stty -g not supported
	    $tty_saved_state = undef;
	}
	else {
	    $tty_saved_state =~ s/\s+$//g;
	    $tty_restore = qq($stty "$tty_saved_state" 2>/dev/null);
	}
    }
    system $tty_raw_noecho if defined $tty_raw_noecho;
    LOOP: {
        local $_;
        print($prompt, $return);
        while (($_ = getc(STDIN)) ne "\r") {
            CASE: {
                # (TAB) attempt completion
                $_ eq "\t" && do {
                    @match = grep(/^\Q$return/, @cmp_lst);
                    unless ($#match < 0) {
                        $l = length($test = shift(@match));
                        foreach $cmp (@match) {
                            until (substr($cmp, 0, $l) eq substr($test, 0, $l)) {
                                $l--;
                            }
                        }
                        print("\a");
                        print($test = substr($test, $r, $l - $r));
                        $r = length($return .= $test);
                    }
                    last CASE;
                };

                # (^D) completion list
                $_ eq $complete && do {
                    print(join("\r\n", '', grep(/^\Q$return/, @cmp_lst)), "\r\n");
                    redo LOOP;
                };

                # (^U) kill
                $_ eq $kill && do {
                    if ($r) {
                        $r	= 0;
			$return	= "";
                        print("\r\n");
                        redo LOOP;
                    }
                    last CASE;
                };

                # (DEL) || (BS) erase
                ($_ eq $erase1 || $_ eq $erase2) && do {
                    if($r) {
                        print("\b \b");
                        chop($return);
                        $r--;
                    }
                    last CASE;
                };

                # printable char
                ord >= 32 && do {
                    $return .= $_;
                    $r++;
                    print;
                    last CASE;
                };
            }
        }
    }

    # system $tty_restore if defined $tty_restore;
    if (defined $tty_saved_state && defined $tty_restore && defined $tty_safe_restore)
    {
	system $tty_restore;
	if ($?) {
	    # tty_restore caused error
	    system $tty_safe_restore;
	}
    }
    print("\n");
    $return;
}

1;
                                                              usr/share/perl/5.20.2/Term/ReadLine.pm                                                              0100644 0000000 0000000 00000033132 12744441327 015610  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

Term::ReadLine - Perl interface to various C<readline> packages.
If no real package is found, substitutes stubs instead of basic functions.

=head1 SYNOPSIS

  use Term::ReadLine;
  my $term = Term::ReadLine->new('Simple Perl calc');
  my $prompt = "Enter your arithmetic expression: ";
  my $OUT = $term->OUT || \*STDOUT;
  while ( defined ($_ = $term->readline($prompt)) ) {
    my $res = eval($_);
    warn $@ if $@;
    print $OUT $res, "\n" unless $@;
    $term->addhistory($_) if /\S/;
  }

=head1 DESCRIPTION

This package is just a front end to some other packages. It's a stub to
set up a common interface to the various ReadLine implementations found on
CPAN (under the C<Term::ReadLine::*> namespace).

=head1 Minimal set of supported functions

All the supported functions should be called as methods, i.e., either as 

  $term = Term::ReadLine->new('name');

or as 

  $term->addhistory('row');

where $term is a return value of Term::ReadLine-E<gt>new().

=over 12

=item C<ReadLine>

returns the actual package that executes the commands. Among possible
values are C<Term::ReadLine::Gnu>, C<Term::ReadLine::Perl>,
C<Term::ReadLine::Stub>.

=item C<new>

returns the handle for subsequent calls to following
functions. Argument is the name of the application. Optionally can be
followed by two arguments for C<IN> and C<OUT> filehandles. These
arguments should be globs.

=item C<readline>

gets an input line, I<possibly> with actual C<readline>
support. Trailing newline is removed. Returns C<undef> on C<EOF>.

=item C<addhistory>

adds the line to the history of input, from where it can be used if
the actual C<readline> is present.

=item C<IN>, C<OUT>

return the filehandles for input and output or C<undef> if C<readline>
input and output cannot be used for Perl.

=item C<MinLine>

If argument is specified, it is an advice on minimal size of line to
be included into history.  C<undef> means do not include anything into
history. Returns the old value.

=item C<findConsole>

returns an array with two strings that give most appropriate names for
files for input and output using conventions C<"E<lt>$in">, C<"E<gt>out">.

=item Attribs

returns a reference to a hash which describes internal configuration
of the package. Names of keys in this hash conform to standard
conventions with the leading C<rl_> stripped.

=item C<Features>

Returns a reference to a hash with keys being features present in
current implementation. Several optional features are used in the
minimal interface: C<appname> should be present if the first argument
to C<new> is recognized, and C<minline> should be present if
C<MinLine> method is not dummy.  C<autohistory> should be present if
lines are put into history automatically (maybe subject to
C<MinLine>), and C<addhistory> if C<addhistory> method is not dummy.

If C<Features> method reports a feature C<attribs> as present, the
method C<Attribs> is not dummy.

=back

=head1 Additional supported functions

Actually C<Term::ReadLine> can use some other package, that will
support a richer set of commands.

All these commands are callable via method interface and have names
which conform to standard conventions with the leading C<rl_> stripped.

The stub package included with the perl distribution allows some
additional methods: 

=over 12

=item C<tkRunning>

makes Tk event loop run when waiting for user input (i.e., during
C<readline> method).

=item C<event_loop>

Registers call-backs to wait for user input (i.e., during C<readline>
method).  This supersedes tkRunning.

The first call-back registered is the call back for waiting.  It is
expected that the callback will call the current event loop until
there is something waiting to get on the input filehandle.  The parameter
passed in is the return value of the second call back.

The second call-back registered is the call back for registration.  The
input filehandle (often STDIN, but not necessarily) will be passed in.

For example, with AnyEvent:

  $term->event_loop(sub {
    my $data = shift;
    $data->[1] = AE::cv();
    $data->[1]->recv();
  }, sub {
    my $fh = shift;
    my $data = [];
    $data->[0] = AE::io($fh, 0, sub { $data->[1]->send() });
    $data;
  });

The second call-back is optional if the call back is registered prior to
the call to $term-E<gt>readline.

Deregistration is done in this case by calling event_loop with C<undef>
as its parameter:

    $term->event_loop(undef);

This will cause the data array ref to be removed, allowing normal garbage
collection to clean it up.  With AnyEvent, that will cause $data->[0] to
be cleaned up, and AnyEvent will automatically cancel the watcher at that
time.  If another loop requires more than that to clean up a file watcher,
that will be up to the caller to handle.

=item C<ornaments>

makes the command line stand out by using termcap data.  The argument
to C<ornaments> should be 0, 1, or a string of a form
C<"aa,bb,cc,dd">.  Four components of this string should be names of
I<terminal capacities>, first two will be issued to make the prompt
standout, last two to make the input line standout.

=item C<newTTY>

takes two arguments which are input filehandle and output filehandle.
Switches to use these filehandles.

=back

One can check whether the currently loaded ReadLine package supports
these methods by checking for corresponding C<Features>.

=head1 EXPORTS

None

=head1 ENVIRONMENT

The environment variable C<PERL_RL> governs which ReadLine clone is
loaded. If the value is false, a dummy interface is used. If the value
is true, it should be tail of the name of the package to use, such as
C<Perl> or C<Gnu>.  

As a special case, if the value of this variable is space-separated,
the tail might be used to disable the ornaments by setting the tail to
be C<o=0> or C<ornaments=0>.  The head should be as described above, say

If the variable is not set, or if the head of space-separated list is
empty, the best available package is loaded.

  export "PERL_RL=Perl o=0" # Use Perl ReadLine sans ornaments
  export "PERL_RL= o=0"     # Use best available ReadLine sans ornaments

(Note that processing of C<PERL_RL> for ornaments is in the discretion of the 
particular used C<Term::ReadLine::*> package).

=cut

use strict;

package Term::ReadLine::Stub;
our @ISA = qw'Term::ReadLine::Tk Term::ReadLine::TermCap';

$DB::emacs = $DB::emacs;	# To pacify -w
our @rl_term_set;
*rl_term_set = \@Term::ReadLine::TermCap::rl_term_set;

sub PERL_UNICODE_STDIN () { 0x0001 }

sub ReadLine {'Term::ReadLine::Stub'}
sub readline {
  my $self = shift;
  my ($in,$out,$str) = @$self;
  my $prompt = shift;
  print $out $rl_term_set[0], $prompt, $rl_term_set[1], $rl_term_set[2]; 
  $self->register_Tk 
     if not $Term::ReadLine::registered and $Term::ReadLine::toloop;
  #$str = scalar <$in>;
  $str = $self->get_line;
  utf8::upgrade($str)
      if (${^UNICODE} & PERL_UNICODE_STDIN || defined ${^ENCODING}) &&
         utf8::valid($str);
  print $out $rl_term_set[3]; 
  # bug in 5.000: chomping empty string creates length -1:
  chomp $str if defined $str;
  $str;
}
sub addhistory {}

sub findConsole {
    my $console;
    my $consoleOUT;

    if (-e "/dev/tty" and $^O ne 'MSWin32') {
	$console = "/dev/tty";
    } elsif (-e "con" or $^O eq 'MSWin32' or $^O eq 'msys') {
       $console = 'CONIN$';
       $consoleOUT = 'CONOUT$';
    } elsif ($^O eq 'VMS') {
	$console = "sys\$command";
    } elsif ($^O eq 'os2' && !$DB::emacs) {
	$console = "/dev/con";
    } else {
	$console = undef;
    }

    $consoleOUT = $console unless defined $consoleOUT;
    $console = "&STDIN" unless defined $console;
    if ($console eq "/dev/tty" && !open(my $fh, "<", $console)) {
      $console = "&STDIN";
      undef($consoleOUT);
    }
    if (!defined $consoleOUT) {
      $consoleOUT = defined fileno(STDERR) && $^O ne 'MSWin32' ? "&STDERR" : "&STDOUT";
    }
    ($console,$consoleOUT);
}

sub new {
  die "method new called with wrong number of arguments" 
    unless @_==2 or @_==4;
  #local (*FIN, *FOUT);
  my ($FIN, $FOUT, $ret);
  if (@_==2) {
    my($console, $consoleOUT) = $_[0]->findConsole;


    # the Windows CONIN$ needs GENERIC_WRITE mode to allow
    # a SetConsoleMode() if we end up using Term::ReadKey
    open FIN, (  $^O eq 'MSWin32' && $console eq 'CONIN$' ) ? "+<$console" :
                                                              "<$console";
    open FOUT,">$consoleOUT";

    #OUT->autoflush(1);		# Conflicts with debugger?
    my $sel = select(FOUT);
    $| = 1;				# for DB::OUT
    select($sel);
    $ret = bless [\*FIN, \*FOUT];
  } else {			# Filehandles supplied
    $FIN = $_[2]; $FOUT = $_[3];
    #OUT->autoflush(1);		# Conflicts with debugger?
    my $sel = select($FOUT);
    $| = 1;				# for DB::OUT
    select($sel);
    $ret = bless [$FIN, $FOUT];
  }
  if ($ret->Features->{ornaments} 
      and not ($ENV{PERL_RL} and $ENV{PERL_RL} =~ /\bo\w*=0/)) {
    local $Term::ReadLine::termcap_nowarn = 1;
    $ret->ornaments(1);
  }
  return $ret;
}

sub newTTY {
  my ($self, $in, $out) = @_;
  $self->[0] = $in;
  $self->[1] = $out;
  my $sel = select($out);
  $| = 1;				# for DB::OUT
  select($sel);
}

sub IN { shift->[0] }
sub OUT { shift->[1] }
sub MinLine { undef }
sub Attribs { {} }

my %features = (tkRunning => 1, ornaments => 1, 'newTTY' => 1);
sub Features { \%features }

#sub get_line {
#  my $self = shift;
#  my $in = $self->IN;
#  local ($/) = "\n";
#  return scalar <$in>;
#}

package Term::ReadLine;		# So late to allow the above code be defined?

our $VERSION = '1.14';

my ($which) = exists $ENV{PERL_RL} ? split /\s+/, $ENV{PERL_RL} : undef;
if ($which) {
  if ($which =~ /\bgnu\b/i){
    eval "use Term::ReadLine::Gnu;";
  } elsif ($which =~ /\bperl\b/i) {
    eval "use Term::ReadLine::Perl;";
  } elsif ($which =~ /^(Stub|TermCap|Tk)$/) {
    # it is already in memory to avoid false exception as seen in:
    # PERL_RL=Stub perl -e'$SIG{__DIE__} = sub { print @_ }; require Term::ReadLine'
  } else {
    eval "use Term::ReadLine::$which;";
  }
} elsif (defined $which and $which ne '') {	# Defined but false
  # Do nothing fancy
} else {
  eval "use Term::ReadLine::Gnu; 1" or eval "use Term::ReadLine::EditLine; 1" or eval "use Term::ReadLine::Perl; 1";
}

#require FileHandle;

# To make possible switch off RL in debugger: (Not needed, work done
# in debugger).
our @ISA;
if (defined &Term::ReadLine::Gnu::readline) {
  @ISA = qw(Term::ReadLine::Gnu Term::ReadLine::Stub);
} elsif (defined &Term::ReadLine::EditLine::readline) {
  @ISA = qw(Term::ReadLine::EditLine Term::ReadLine::Stub);
} elsif (defined &Term::ReadLine::Perl::readline) {
  @ISA = qw(Term::ReadLine::Perl Term::ReadLine::Stub);
} elsif (defined $which && defined &{"Term::ReadLine::$which\::readline"}) {
  @ISA = "Term::ReadLine::$which";
} else {
  @ISA = qw(Term::ReadLine::Stub);
}

package Term::ReadLine::TermCap;

# Prompt-start, prompt-end, command-line-start, command-line-end
#     -- zero-width beautifies to emit around prompt and the command line.
our @rl_term_set = ("","","","");
# string encoded:
our $rl_term_set = ',,,';

our $terminal;
sub LoadTermCap {
  return if defined $terminal;
  
  require Term::Cap;
  $terminal = Tgetent Term::Cap ({OSPEED => 9600}); # Avoid warning.
}

sub ornaments {
  shift;
  return $rl_term_set unless @_;
  $rl_term_set = shift;
  $rl_term_set ||= ',,,';
  $rl_term_set = 'us,ue,md,me' if $rl_term_set eq '1';
  my @ts = split /,/, $rl_term_set, 4;
  eval { LoadTermCap };
  unless (defined $terminal) {
    warn("Cannot find termcap: $@\n") unless $Term::ReadLine::termcap_nowarn;
    $rl_term_set = ',,,';
    return;
  }
  @rl_term_set = map {$_ ? $terminal->Tputs($_,1) || '' : ''} @ts;
  return $rl_term_set;
}


package Term::ReadLine::Tk;

# This package inserts a Tk->fileevent() before the diamond operator.
# The Tk watcher dispatches Tk events until the filehandle returned by
# the$term->IN() accessor becomes ready for reading.  It's assumed
# that the diamond operator will return a line of input immediately at
# that point.

my ($giveup);

# maybe in the future the Tk-specific aspects will be removed.
sub Tk_loop{
    if (ref $Term::ReadLine::toloop)
    {
        $Term::ReadLine::toloop->[0]->($Term::ReadLine::toloop->[2]);
    }
    else
    {
        Tk::DoOneEvent(0) until $giveup;
        $giveup = 0;
    }
};

sub register_Tk {
    my $self = shift;
    unless ($Term::ReadLine::registered++)
    {
        if (ref $Term::ReadLine::toloop)
        {
            $Term::ReadLine::toloop->[2] = $Term::ReadLine::toloop->[1]->($self->IN) if $Term::ReadLine::toloop->[1];
        }
        else
        {
            Tk->fileevent($self->IN,'readable',sub { $giveup = 1});
        }
    }
};

sub tkRunning {
  $Term::ReadLine::toloop = $_[1] if @_ > 1;
  $Term::ReadLine::toloop;
}

sub event_loop {
    shift;

    # T::RL::Gnu and T::RL::Perl check that this exists, if not,
    # it doesn't call the loop.  Those modules will need to be
    # fixed before this can be removed.
    if (not defined &Tk::DoOneEvent)
    {
        *Tk::DoOneEvent = sub {
            die "what?"; # this shouldn't be called.
        }
    }

    # store the callback in toloop, again so that other modules will
    # recognise it and call us for the loop.
    $Term::ReadLine::toloop = [ @_ ] if @_ > 0; # 0 because we shifted off $self.
    $Term::ReadLine::toloop;
}

sub PERL_UNICODE_STDIN () { 0x0001 }

sub get_line {
  my $self = shift;
  my ($in,$out,$str) = @$self;

  if ($Term::ReadLine::toloop) {
    $self->register_Tk if not $Term::ReadLine::registered;
    $self->Tk_loop;
  }

  local ($/) = "\n";
  $str = <$in>;

  utf8::upgrade($str)
      if (${^UNICODE} & PERL_UNICODE_STDIN || defined ${^ENCODING}) &&
         utf8::valid($str);
  print $out $rl_term_set[3];
  # bug in 5.000: chomping empty string creates length -1:
  chomp $str if defined $str;

  $str;
}

1;

                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/share/perl/5.20.2/Test/                                                                         0040755 0000000 0000000 00000000000 13077704254 013601  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Test/Builder/                                                                 0040755 0000000 0000000 00000000000 13077704254 015167  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Test/Builder/Module.pm                                                        0100644 0000000 0000000 00000007361 12744441327 016755  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Builder::Module;

use strict;

use Test::Builder 0.99;

require Exporter;
our @ISA = qw(Exporter);

our $VERSION = '1.001002';
$VERSION = eval $VERSION;      ## no critic (BuiltinFunctions::ProhibitStringyEval)


=head1 NAME

Test::Builder::Module - Base class for test modules

=head1 SYNOPSIS

  # Emulates Test::Simple
  package Your::Module;

  my $CLASS = __PACKAGE__;

  use base 'Test::Builder::Module';
  @EXPORT = qw(ok);

  sub ok ($;$) {
      my $tb = $CLASS->builder;
      return $tb->ok(@_);
  }
  
  1;


=head1 DESCRIPTION

This is a superclass for Test::Builder-based modules.  It provides a
handful of common functionality and a method of getting at the underlying
Test::Builder object.


=head2 Importing

Test::Builder::Module is a subclass of Exporter which means your
module is also a subclass of Exporter.  @EXPORT, @EXPORT_OK, etc...
all act normally.

A few methods are provided to do the C<use Your::Module tests => 23> part
for you.

=head3 import

Test::Builder::Module provides an import() method which acts in the
same basic way as Test::More's, setting the plan and controlling
exporting of functions and variables.  This allows your module to set
the plan independent of Test::More.

All arguments passed to import() are passed onto 
C<< Your::Module->builder->plan() >> with the exception of 
C<< import =>[qw(things to import)] >>.

    use Your::Module import => [qw(this that)], tests => 23;

says to import the functions this() and that() as well as set the plan
to be 23 tests.

import() also sets the exported_to() attribute of your builder to be
the caller of the import() function.

Additional behaviors can be added to your import() method by overriding
import_extra().

=cut

sub import {
    my($class) = shift;

    # Don't run all this when loading ourself.
    return 1 if $class eq 'Test::Builder::Module';

    my $test = $class->builder;

    my $caller = caller;

    $test->exported_to($caller);

    $class->import_extra( \@_ );
    my(@imports) = $class->_strip_imports( \@_ );

    $test->plan(@_);

    $class->export_to_level( 1, $class, @imports );
}

sub _strip_imports {
    my $class = shift;
    my $list  = shift;

    my @imports = ();
    my @other   = ();
    my $idx     = 0;
    while( $idx <= $#{$list} ) {
        my $item = $list->[$idx];

        if( defined $item and $item eq 'import' ) {
            push @imports, @{ $list->[ $idx + 1 ] };
            $idx++;
        }
        else {
            push @other, $item;
        }

        $idx++;
    }

    @$list = @other;

    return @imports;
}

=head3 import_extra

    Your::Module->import_extra(\@import_args);

import_extra() is called by import().  It provides an opportunity for you
to add behaviors to your module based on its import list.

Any extra arguments which shouldn't be passed on to plan() should be 
stripped off by this method.

See Test::More for an example of its use.

B<NOTE> This mechanism is I<VERY ALPHA AND LIKELY TO CHANGE> as it
feels like a bit of an ugly hack in its current form.

=cut

sub import_extra { }

=head2 Builder

Test::Builder::Module provides some methods of getting at the underlying
Test::Builder object.

=head3 builder

  my $builder = Your::Class->builder;

This method returns the Test::Builder object associated with Your::Class.
It is not a constructor so you can call it as often as you like.

This is the preferred way to get the Test::Builder object.  You should
I<not> get it via C<< Test::Builder->new >> as was previously
recommended.

The object returned by builder() may change at runtime so you should
call builder() inside each function rather than store it in a global.

  sub ok {
      my $builder = Your::Class->builder;

      return $builder->ok(@_);
  }


=cut

sub builder {
    return Test::Builder->new;
}

1;
                                                                                                                                                                                                                                                                               usr/share/perl/5.20.2/Test/Builder/Tester/                                                          0040755 0000000 0000000 00000000000 13077704254 016435  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Test/Builder/Tester/Color.pm                                                  0100644 0000000 0000000 00000001715 12744441327 020051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Builder::Tester::Color;

use strict;
our $VERSION = "1.23_002";

require Test::Builder::Tester;


=head1 NAME

Test::Builder::Tester::Color - turn on colour in Test::Builder::Tester

=head1 SYNOPSIS

   When running a test script

     perl -MTest::Builder::Tester::Color test.t

=head1 DESCRIPTION

Importing this module causes the subroutine color in Test::Builder::Tester
to be called with a true value causing colour highlighting to be turned
on in debug output.

The sole purpose of this module is to enable colour highlighting
from the command line.

=cut

sub import {
    Test::Builder::Tester::color(1);
}

=head1 AUTHOR

Copyright Mark Fowler E<lt>mark@twoshortplanks.comE<gt> 2002.

This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.

=head1 BUGS

This module will have no effect unless Term::ANSIColor is installed.

=head1 SEE ALSO

L<Test::Builder::Tester>, L<Term::ANSIColor>

=cut

1;
                                                   usr/share/perl/5.20.2/Test/Builder/Tester.pm                                                        0100644 0000000 0000000 00000036777 12744441327 017013  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Builder::Tester;

use strict;
our $VERSION = "1.23_002";

use Test::Builder 0.98;
use Symbol;
use Carp;

=head1 NAME

Test::Builder::Tester - test testsuites that have been built with
Test::Builder

=head1 SYNOPSIS

    use Test::Builder::Tester tests => 1;
    use Test::More;

    test_out("not ok 1 - foo");
    test_fail(+1);
    fail("foo");
    test_test("fail works");

=head1 DESCRIPTION

A module that helps you test testing modules that are built with
B<Test::Builder>.

The testing system is designed to be used by performing a three step
process for each test you wish to test.  This process starts with using
C<test_out> and C<test_err> in advance to declare what the testsuite you
are testing will output with B<Test::Builder> to stdout and stderr.

You then can run the test(s) from your test suite that call
B<Test::Builder>.  At this point the output of B<Test::Builder> is
safely captured by B<Test::Builder::Tester> rather than being
interpreted as real test output.

The final stage is to call C<test_test> that will simply compare what you
predeclared to what B<Test::Builder> actually outputted, and report the
results back with a "ok" or "not ok" (with debugging) to the normal
output.

=cut

####
# set up testing
####

my $t = Test::Builder->new;

###
# make us an exporter
###

use Exporter;
our @ISA = qw(Exporter);

our @EXPORT = qw(test_out test_err test_fail test_diag test_test line_num);

sub import {
    my $class = shift;
    my(@plan) = @_;

    my $caller = caller;

    $t->exported_to($caller);
    $t->plan(@plan);

    my @imports = ();
    foreach my $idx ( 0 .. $#plan ) {
        if( $plan[$idx] eq 'import' ) {
            @imports = @{ $plan[ $idx + 1 ] };
            last;
        }
    }

    __PACKAGE__->export_to_level( 1, __PACKAGE__, @imports );
}

###
# set up file handles
###

# create some private file handles
my $output_handle = gensym;
my $error_handle  = gensym;

# and tie them to this package
my $out = tie *$output_handle, "Test::Builder::Tester::Tie", "STDOUT";
my $err = tie *$error_handle,  "Test::Builder::Tester::Tie", "STDERR";

####
# exported functions
####

# for remembering that we're testing and where we're testing at
my $testing = 0;
my $testing_num;
my $original_is_passing;

# remembering where the file handles were originally connected
my $original_output_handle;
my $original_failure_handle;
my $original_todo_handle;

my $original_harness_env;

# function that starts testing and redirects the filehandles for now
sub _start_testing {
    # even if we're running under Test::Harness pretend we're not
    # for now.  This needed so Test::Builder doesn't add extra spaces
    $original_harness_env = $ENV{HARNESS_ACTIVE} || 0;
    $ENV{HARNESS_ACTIVE} = 0;

    # remember what the handles were set to
    $original_output_handle  = $t->output();
    $original_failure_handle = $t->failure_output();
    $original_todo_handle    = $t->todo_output();

    # switch out to our own handles
    $t->output($output_handle);
    $t->failure_output($error_handle);
    $t->todo_output($output_handle);

    # clear the expected list
    $out->reset();
    $err->reset();

    # remember that we're testing
    $testing     = 1;
    $testing_num = $t->current_test;
    $t->current_test(0);
    $original_is_passing  = $t->is_passing;
    $t->is_passing(1);

    # look, we shouldn't do the ending stuff
    $t->no_ending(1);
}

=head2 Functions

These are the six methods that are exported as default.

=over 4

=item test_out

=item test_err

Procedures for predeclaring the output that your test suite is
expected to produce until C<test_test> is called.  These procedures
automatically assume that each line terminates with "\n".  So

   test_out("ok 1","ok 2");

is the same as

   test_out("ok 1\nok 2");

which is even the same as

   test_out("ok 1");
   test_out("ok 2");

Once C<test_out> or C<test_err> (or C<test_fail> or C<test_diag>) have
been called, all further output from B<Test::Builder> will be
captured by B<Test::Builder::Tester>.  This means that you will not
be able perform further tests to the normal output in the normal way
until you call C<test_test> (well, unless you manually meddle with the
output filehandles)

=cut

sub test_out {
    # do we need to do any setup?
    _start_testing() unless $testing;

    $out->expect(@_);
}

sub test_err {
    # do we need to do any setup?
    _start_testing() unless $testing;

    $err->expect(@_);
}

=item test_fail

Because the standard failure message that B<Test::Builder> produces
whenever a test fails will be a common occurrence in your test error
output, and because it has changed between Test::Builder versions, rather
than forcing you to call C<test_err> with the string all the time like
so

    test_err("# Failed test ($0 at line ".line_num(+1).")");

C<test_fail> exists as a convenience function that can be called
instead.  It takes one argument, the offset from the current line that
the line that causes the fail is on.

    test_fail(+1);

This means that the example in the synopsis could be rewritten
more simply as:

   test_out("not ok 1 - foo");
   test_fail(+1);
   fail("foo");
   test_test("fail works");

=cut

sub test_fail {
    # do we need to do any setup?
    _start_testing() unless $testing;

    # work out what line we should be on
    my( $package, $filename, $line ) = caller;
    $line = $line + ( shift() || 0 );    # prevent warnings

    # expect that on stderr
    $err->expect("#     Failed test ($filename at line $line)");
}

=item test_diag

As most of the remaining expected output to the error stream will be
created by Test::Builder's C<diag> function, B<Test::Builder::Tester>
provides a convenience function C<test_diag> that you can use instead of
C<test_err>.

The C<test_diag> function prepends comment hashes and spacing to the
start and newlines to the end of the expected output passed to it and
adds it to the list of expected error output.  So, instead of writing

   test_err("# Couldn't open file");

you can write

   test_diag("Couldn't open file");

Remember that B<Test::Builder>'s diag function will not add newlines to
the end of output and test_diag will. So to check

   Test::Builder->new->diag("foo\n","bar\n");

You would do

  test_diag("foo","bar")

without the newlines.

=cut

sub test_diag {
    # do we need to do any setup?
    _start_testing() unless $testing;

    # expect the same thing, but prepended with "#     "
    local $_;
    $err->expect( map { "# $_" } @_ );
}

=item test_test

Actually performs the output check testing the tests, comparing the
data (with C<eq>) that we have captured from B<Test::Builder> against
what was declared with C<test_out> and C<test_err>.

This takes name/value pairs that effect how the test is run.

=over

=item title (synonym 'name', 'label')

The name of the test that will be displayed after the C<ok> or C<not
ok>.

=item skip_out

Setting this to a true value will cause the test to ignore if the
output sent by the test to the output stream does not match that
declared with C<test_out>.

=item skip_err

Setting this to a true value will cause the test to ignore if the
output sent by the test to the error stream does not match that
declared with C<test_err>.

=back

As a convenience, if only one argument is passed then this argument
is assumed to be the name of the test (as in the above examples.)

Once C<test_test> has been run test output will be redirected back to
the original filehandles that B<Test::Builder> was connected to
(probably STDOUT and STDERR,) meaning any further tests you run
will function normally and cause success/errors for B<Test::Harness>.

=cut

sub test_test {
    # decode the arguments as described in the pod
    my $mess;
    my %args;
    if( @_ == 1 ) {
        $mess = shift
    }
    else {
        %args = @_;
        $mess = $args{name} if exists( $args{name} );
        $mess = $args{title} if exists( $args{title} );
        $mess = $args{label} if exists( $args{label} );
    }

    # er, are we testing?
    croak "Not testing.  You must declare output with a test function first."
      unless $testing;

    # okay, reconnect the test suite back to the saved handles
    $t->output($original_output_handle);
    $t->failure_output($original_failure_handle);
    $t->todo_output($original_todo_handle);

    # restore the test no, etc, back to the original point
    $t->current_test($testing_num);
    $testing = 0;
    $t->is_passing($original_is_passing);

    # re-enable the original setting of the harness
    $ENV{HARNESS_ACTIVE} = $original_harness_env;

    # check the output we've stashed
    unless( $t->ok( ( $args{skip_out} || $out->check ) &&
                    ( $args{skip_err} || $err->check ), $mess ) 
    )
    {
        # print out the diagnostic information about why this
        # test failed

        local $_;

        $t->diag( map { "$_\n" } $out->complaint )
          unless $args{skip_out} || $out->check;

        $t->diag( map { "$_\n" } $err->complaint )
          unless $args{skip_err} || $err->check;
    }
}

=item line_num

A utility function that returns the line number that the function was
called on.  You can pass it an offset which will be added to the
result.  This is very useful for working out the correct text of
diagnostic functions that contain line numbers.

Essentially this is the same as the C<__LINE__> macro, but the
C<line_num(+3)> idiom is arguably nicer.

=cut

sub line_num {
    my( $package, $filename, $line ) = caller;
    return $line + ( shift() || 0 );    # prevent warnings
}

=back

In addition to the six exported functions there exists one
function that can only be accessed with a fully qualified function
call.

=over 4

=item color

When C<test_test> is called and the output that your tests generate
does not match that which you declared, C<test_test> will print out
debug information showing the two conflicting versions.  As this
output itself is debug information it can be confusing which part of
the output is from C<test_test> and which was the original output from
your original tests.  Also, it may be hard to spot things like
extraneous whitespace at the end of lines that may cause your test to
fail even though the output looks similar.

To assist you C<test_test> can colour the background of the debug
information to disambiguate the different types of output. The debug
output will have its background coloured green and red.  The green
part represents the text which is the same between the executed and
actual output, the red shows which part differs.

The C<color> function determines if colouring should occur or not.
Passing it a true or false value will enable or disable colouring
respectively, and the function called with no argument will return the
current setting.

To enable colouring from the command line, you can use the
B<Text::Builder::Tester::Color> module like so:

   perl -Mlib=Text::Builder::Tester::Color test.t

Or by including the B<Test::Builder::Tester::Color> module directly in
the PERL5LIB.

=cut

my $color;

sub color {
    $color = shift if @_;
    $color;
}

=back

=head1 BUGS

Calls C<<Test::Builder->no_ending>> turning off the ending tests.
This is needed as otherwise it will trip out because we've run more
tests than we strictly should have and it'll register any failures we
had that we were testing for as real failures.

The color function doesn't work unless B<Term::ANSIColor> is
compatible with your terminal.

Bugs (and requests for new features) can be reported to the author
though the CPAN RT system:
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Builder-Tester>

=head1 AUTHOR

Copyright Mark Fowler E<lt>mark@twoshortplanks.comE<gt> 2002, 2004.

Some code taken from B<Test::More> and B<Test::Catch>, written by
Michael G Schwern E<lt>schwern@pobox.comE<gt>.  Hence, those parts
Copyright Micheal G Schwern 2001.  Used and distributed with
permission.

This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.

=head1 NOTES

Thanks to Richard Clamp E<lt>richardc@unixbeard.netE<gt> for letting
me use his testing system to try this module out on.

=head1 SEE ALSO

L<Test::Builder>, L<Test::Builder::Tester::Color>, L<Test::More>.

=cut

1;

####################################################################
# Helper class that is used to remember expected and received data

package Test::Builder::Tester::Tie;

##
# add line(s) to be expected

sub expect {
    my $self = shift;

    my @checks = @_;
    foreach my $check (@checks) {
        $check = $self->_account_for_subtest($check);
        $check = $self->_translate_Failed_check($check);
        push @{ $self->{wanted} }, ref $check ? $check : "$check\n";
    }
}

sub _account_for_subtest {
    my( $self, $check ) = @_;

    # Since we ship with Test::Builder, calling a private method is safe...ish.
    return ref($check) ? $check : $t->_indent . $check;
}

sub _translate_Failed_check {
    my( $self, $check ) = @_;

    if( $check =~ /\A(.*)#     (Failed .*test) \((.*?) at line (\d+)\)\Z(?!\n)/ ) {
        $check = "/\Q$1\E#\\s+\Q$2\E.*?\\n?.*?\Qat $3\E line \Q$4\E.*\\n?/";
    }

    return $check;
}

##
# return true iff the expected data matches the got data

sub check {
    my $self = shift;

    # turn off warnings as these might be undef
    local $^W = 0;

    my @checks = @{ $self->{wanted} };
    my $got    = $self->{got};
    foreach my $check (@checks) {
        $check = "\Q$check\E" unless( $check =~ s,^/(.*)/$,$1, or ref $check );
        return 0 unless $got =~ s/^$check//;
    }

    return length $got == 0;
}

##
# a complaint message about the inputs not matching (to be
# used for debugging messages)

sub complaint {
    my $self   = shift;
    my $type   = $self->type;
    my $got    = $self->got;
    my $wanted = join '', @{ $self->wanted };

    # are we running in colour mode?
    if(Test::Builder::Tester::color) {
        # get color
        eval { require Term::ANSIColor };
        unless($@) {
            # colours

            my $green = Term::ANSIColor::color("black") . Term::ANSIColor::color("on_green");
            my $red   = Term::ANSIColor::color("black") . Term::ANSIColor::color("on_red");
            my $reset = Term::ANSIColor::color("reset");

            # work out where the two strings start to differ
            my $char = 0;
            $char++ while substr( $got, $char, 1 ) eq substr( $wanted, $char, 1 );

            # get the start string and the two end strings
            my $start = $green . substr( $wanted, 0, $char );
            my $gotend    = $red . substr( $got,    $char ) . $reset;
            my $wantedend = $red . substr( $wanted, $char ) . $reset;

            # make the start turn green on and off
            $start =~ s/\n/$reset\n$green/g;

            # make the ends turn red on and off
            $gotend    =~ s/\n/$reset\n$red/g;
            $wantedend =~ s/\n/$reset\n$red/g;

            # rebuild the strings
            $got    = $start . $gotend;
            $wanted = $start . $wantedend;
        }
    }

    return "$type is:\n" . "$got\nnot:\n$wanted\nas expected";
}

##
# forget all expected and got data

sub reset {
    my $self = shift;
    %$self = (
        type   => $self->{type},
        got    => '',
        wanted => [],
    );
}

sub got {
    my $self = shift;
    return $self->{got};
}

sub wanted {
    my $self = shift;
    return $self->{wanted};
}

sub type {
    my $self = shift;
    return $self->{type};
}

###
# tie interface
###

sub PRINT {
    my $self = shift;
    $self->{got} .= join '', @_;
}

sub TIEHANDLE {
    my( $class, $type ) = @_;

    my $self = bless { type => $type }, $class;

    $self->reset;

    return $self;
}

sub READ     { }
sub READLINE { }
sub GETC     { }
sub FILENO   { }

1;
 usr/share/perl/5.20.2/Test/Builder.pm                                                               0100644 0000000 0000000 00000172213 12744441327 015527  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Builder;

use 5.006;
use strict;
use warnings;

our $VERSION = '1.001002';
$VERSION = eval $VERSION;    ## no critic (BuiltinFunctions::ProhibitStringyEval)

BEGIN {
    if( $] < 5.008 ) {
        require Test::Builder::IO::Scalar;
    }
}


# Make Test::Builder thread-safe for ithreads.
BEGIN {
    use Config;
    # Load threads::shared when threads are turned on.
    # 5.8.0's threads are so busted we no longer support them.
    if( $] >= 5.008001 && $Config{useithreads} && $INC{'threads.pm'} ) {
        require threads::shared;

        # Hack around YET ANOTHER threads::shared bug.  It would
        # occasionally forget the contents of the variable when sharing it.
        # So we first copy the data, then share, then put our copy back.
        *share = sub (\[$@%]) {
            my $type = ref $_[0];
            my $data;

            if( $type eq 'HASH' ) {
                %$data = %{ $_[0] };
            }
            elsif( $type eq 'ARRAY' ) {
                @$data = @{ $_[0] };
            }
            elsif( $type eq 'SCALAR' ) {
                $$data = ${ $_[0] };
            }
            else {
                die( "Unknown type: " . $type );
            }

            $_[0] = &threads::shared::share( $_[0] );

            if( $type eq 'HASH' ) {
                %{ $_[0] } = %$data;
            }
            elsif( $type eq 'ARRAY' ) {
                @{ $_[0] } = @$data;
            }
            elsif( $type eq 'SCALAR' ) {
                ${ $_[0] } = $$data;
            }
            else {
                die( "Unknown type: " . $type );
            }

            return $_[0];
        };
    }
    # 5.8.0's threads::shared is busted when threads are off
    # and earlier Perls just don't have that module at all.
    else {
        *share = sub { return $_[0] };
        *lock  = sub { 0 };
    }
}

=head1 NAME

Test::Builder - Backend for building test libraries

=head1 SYNOPSIS

  package My::Test::Module;
  use base 'Test::Builder::Module';

  my $CLASS = __PACKAGE__;

  sub ok {
      my($test, $name) = @_;
      my $tb = $CLASS->builder;

      $tb->ok($test, $name);
  }


=head1 DESCRIPTION

Test::Simple and Test::More have proven to be popular testing modules,
but they're not always flexible enough.  Test::Builder provides a
building block upon which to write your own test libraries I<which can
work together>.

=head2 Construction

=over 4

=item B<new>

  my $Test = Test::Builder->new;

Returns a Test::Builder object representing the current state of the
test.

Since you only run one test per program C<new> always returns the same
Test::Builder object.  No matter how many times you call C<new()>, you're
getting the same object.  This is called a singleton.  This is done so that
multiple modules share such global information as the test counter and
where test output is going.

If you want a completely new Test::Builder object different from the
singleton, use C<create>.

=cut

our $Test = Test::Builder->new;

sub new {
    my($class) = shift;
    $Test ||= $class->create;
    return $Test;
}

=item B<create>

  my $Test = Test::Builder->create;

Ok, so there can be more than one Test::Builder object and this is how
you get it.  You might use this instead of C<new()> if you're testing
a Test::Builder based module, but otherwise you probably want C<new>.

B<NOTE>: the implementation is not complete.  C<level>, for example, is
still shared amongst B<all> Test::Builder objects, even ones created using
this method.  Also, the method name may change in the future.

=cut

sub create {
    my $class = shift;

    my $self = bless {}, $class;
    $self->reset;

    return $self;
}


# Copy an object, currently a shallow.
# This does *not* bless the destination.  This keeps the destructor from
# firing when we're just storing a copy of the object to restore later.
sub _copy {
    my($src, $dest) = @_;

    %$dest = %$src;
    _share_keys($dest);

    return;
}


=item B<child>

  my $child = $builder->child($name_of_child);
  $child->plan( tests => 4 );
  $child->ok(some_code());
  ...
  $child->finalize;

Returns a new instance of C<Test::Builder>.  Any output from this child will
be indented four spaces more than the parent's indentation.  When done, the
C<finalize> method I<must> be called explicitly.

Trying to create a new child with a previous child still active (i.e.,
C<finalize> not called) will C<croak>.

Trying to run a test when you have an open child will also C<croak> and cause
the test suite to fail.

=cut

sub child {
    my( $self, $name ) = @_;

    if( $self->{Child_Name} ) {
        $self->croak("You already have a child named ($self->{Child_Name}) running");
    }

    my $parent_in_todo = $self->in_todo;

    # Clear $TODO for the child.
    my $orig_TODO = $self->find_TODO(undef, 1, undef);

    my $class = ref $self;
    my $child = $class->create;

    # Add to our indentation
    $child->_indent( $self->_indent . '    ' );

    # Make the child use the same outputs as the parent
    for my $method (qw(output failure_output todo_output)) {
        $child->$method( $self->$method );
    }

    # Ensure the child understands if they're inside a TODO
    if( $parent_in_todo ) {
        $child->failure_output( $self->todo_output );
    }

    # This will be reset in finalize. We do this here lest one child failure
    # cause all children to fail.
    $child->{Child_Error} = $?;
    $?                    = 0;
    $child->{Parent}      = $self;
    $child->{Parent_TODO} = $orig_TODO;
    $child->{Name}        = $name || "Child of " . $self->name;
    $self->{Child_Name}   = $child->name;
    return $child;
}


=item B<subtest>

    $builder->subtest($name, \&subtests);

See documentation of C<subtest> in Test::More.

=cut

sub subtest {
    my $self = shift;
    my($name, $subtests) = @_;

    if ('CODE' ne ref $subtests) {
        $self->croak("subtest()'s second argument must be a code ref");
    }

    # Turn the child into the parent so anyone who has stored a copy of
    # the Test::Builder singleton will get the child.
    my $error;
    my $child;
    my $parent = {};
    {
        # child() calls reset() which sets $Level to 1, so we localize
        # $Level first to limit the scope of the reset to the subtest.
        local $Test::Builder::Level = $Test::Builder::Level + 1;

        # Store the guts of $self as $parent and turn $child into $self.
        $child  = $self->child($name);
        _copy($self,  $parent);
        _copy($child, $self);

        my $run_the_subtests = sub {
            # Add subtest name for clarification of starting point
            $self->note("Subtest: $name");
            $subtests->();
            $self->done_testing unless $self->_plan_handled;
            1;
        };

        if( !eval { $run_the_subtests->() } ) {
            $error = $@;
        }
    }

    # Restore the parent and the copied child.
    _copy($self,   $child);
    _copy($parent, $self);

    # Restore the parent's $TODO
    $self->find_TODO(undef, 1, $child->{Parent_TODO});

    # Die *after* we restore the parent.
    die $error if $error and !eval { $error->isa('Test::Builder::Exception') };

    local $Test::Builder::Level = $Test::Builder::Level + 1;
    my $finalize = $child->finalize;

    $self->BAIL_OUT($child->{Bailed_Out_Reason}) if $child->{Bailed_Out};

    return $finalize;
}

=begin _private

=item B<_plan_handled>

    if ( $Test->_plan_handled ) { ... }

Returns true if the developer has explicitly handled the plan via:

=over 4

=item * Explicitly setting the number of tests

=item * Setting 'no_plan'

=item * Set 'skip_all'.

=back

This is currently used in subtests when we implicitly call C<< $Test->done_testing >>
if the developer has not set a plan.

=end _private

=cut

sub _plan_handled {
    my $self = shift;
    return $self->{Have_Plan} || $self->{No_Plan} || $self->{Skip_All};
}


=item B<finalize>

  my $ok = $child->finalize;

When your child is done running tests, you must call C<finalize> to clean up
and tell the parent your pass/fail status.

Calling finalize on a child with open children will C<croak>.

If the child falls out of scope before C<finalize> is called, a failure
diagnostic will be issued and the child is considered to have failed.

No attempt to call methods on a child after C<finalize> is called is
guaranteed to succeed.

Calling this on the root builder is a no-op.

=cut

sub finalize {
    my $self = shift;

    return unless $self->parent;
    if( $self->{Child_Name} ) {
        $self->croak("Can't call finalize() with child ($self->{Child_Name}) active");
    }

    local $? = 0;     # don't fail if $subtests happened to set $? nonzero
    $self->_ending;

    # XXX This will only be necessary for TAP envelopes (we think)
    #$self->_print( $self->is_passing ? "PASS\n" : "FAIL\n" );

    local $Test::Builder::Level = $Test::Builder::Level + 1;
    my $ok = 1;
    $self->parent->{Child_Name} = undef;
    unless ($self->{Bailed_Out}) {
        if ( $self->{Skip_All} ) {
            $self->parent->skip($self->{Skip_All});
        }
        elsif ( not @{ $self->{Test_Results} } ) {
            $self->parent->ok( 0, sprintf q[No tests run for subtest "%s"], $self->name );
        }
        else {
            $self->parent->ok( $self->is_passing, $self->name );
        }
    }
    $? = $self->{Child_Error};
    delete $self->{Parent};

    return $self->is_passing;
}

sub _indent      {
    my $self = shift;

    if( @_ ) {
        $self->{Indent} = shift;
    }

    return $self->{Indent};
}

=item B<parent>

 if ( my $parent = $builder->parent ) {
     ...
 }

Returns the parent C<Test::Builder> instance, if any.  Only used with child
builders for nested TAP.

=cut

sub parent { shift->{Parent} }

=item B<name>

 diag $builder->name;

Returns the name of the current builder.  Top level builders default to C<$0>
(the name of the executable).  Child builders are named via the C<child>
method.  If no name is supplied, will be named "Child of $parent->name".

=cut

sub name { shift->{Name} }

sub DESTROY {
    my $self = shift;
    if ( $self->parent and $$ == $self->{Original_Pid} ) {
        my $name = $self->name;
        $self->diag(<<"FAIL");
Child ($name) exited without calling finalize()
FAIL
        $self->parent->{In_Destroy} = 1;
        $self->parent->ok(0, $name);
    }
}

=item B<reset>

  $Test->reset;

Reinitializes the Test::Builder singleton to its original state.
Mostly useful for tests run in persistent environments where the same
test might be run multiple times in the same process.

=cut

our $Level;

sub reset {    ## no critic (Subroutines::ProhibitBuiltinHomonyms)
    my($self) = @_;

    # We leave this a global because it has to be localized and localizing
    # hash keys is just asking for pain.  Also, it was documented.
    $Level = 1;

    $self->{Name}         = $0;
    $self->is_passing(1);
    $self->{Ending}       = 0;
    $self->{Have_Plan}    = 0;
    $self->{No_Plan}      = 0;
    $self->{Have_Output_Plan} = 0;
    $self->{Done_Testing} = 0;

    $self->{Original_Pid} = $$;
    $self->{Child_Name}   = undef;
    $self->{Indent}     ||= '';

    $self->{Curr_Test} = 0;
    $self->{Test_Results} = &share( [] );

    $self->{Exported_To}    = undef;
    $self->{Expected_Tests} = 0;

    $self->{Skip_All} = 0;

    $self->{Use_Nums} = 1;

    $self->{No_Header} = 0;
    $self->{No_Ending} = 0;

    $self->{Todo}       = undef;
    $self->{Todo_Stack} = [];
    $self->{Start_Todo} = 0;
    $self->{Opened_Testhandles} = 0;

    $self->_share_keys;
    $self->_dup_stdhandles;

    return;
}


# Shared scalar values are lost when a hash is copied, so we have
# a separate method to restore them.
# Shared references are retained across copies.
sub _share_keys {
    my $self = shift;

    share( $self->{Curr_Test} );

    return;
}


=back

=head2 Setting up tests

These methods are for setting up tests and declaring how many there
are.  You usually only want to call one of these methods.

=over 4

=item B<plan>

  $Test->plan('no_plan');
  $Test->plan( skip_all => $reason );
  $Test->plan( tests => $num_tests );

A convenient way to set up your tests.  Call this and Test::Builder
will print the appropriate headers and take the appropriate actions.

If you call C<plan()>, don't call any of the other methods below.

If a child calls "skip_all" in the plan, a C<Test::Builder::Exception> is
thrown.  Trap this error, call C<finalize()> and don't run any more tests on
the child.

 my $child = $Test->child('some child');
 eval { $child->plan( $condition ? ( skip_all => $reason ) : ( tests => 3 )  ) };
 if ( eval { $@->isa('Test::Builder::Exception') } ) {
    $child->finalize;
    return;
 }
 # run your tests

=cut

my %plan_cmds = (
    no_plan     => \&no_plan,
    skip_all    => \&skip_all,
    tests       => \&_plan_tests,
);

sub plan {
    my( $self, $cmd, $arg ) = @_;

    return unless $cmd;

    local $Level = $Level + 1;

    $self->croak("You tried to plan twice") if $self->{Have_Plan};

    if( my $method = $plan_cmds{$cmd} ) {
        local $Level = $Level + 1;
        $self->$method($arg);
    }
    else {
        my @args = grep { defined } ( $cmd, $arg );
        $self->croak("plan() doesn't understand @args");
    }

    return 1;
}


sub _plan_tests {
    my($self, $arg) = @_;

    if($arg) {
        local $Level = $Level + 1;
        return $self->expected_tests($arg);
    }
    elsif( !defined $arg ) {
        $self->croak("Got an undefined number of tests");
    }
    else {
        $self->croak("You said to run 0 tests");
    }

    return;
}

=item B<expected_tests>

    my $max = $Test->expected_tests;
    $Test->expected_tests($max);

Gets/sets the number of tests we expect this test to run and prints out
the appropriate headers.

=cut

sub expected_tests {
    my $self = shift;
    my($max) = @_;

    if(@_) {
        $self->croak("Number of tests must be a positive integer.  You gave it '$max'")
          unless $max =~ /^\+?\d+$/;

        $self->{Expected_Tests} = $max;
        $self->{Have_Plan}      = 1;

        $self->_output_plan($max) unless $self->no_header;
    }
    return $self->{Expected_Tests};
}

=item B<no_plan>

  $Test->no_plan;

Declares that this test will run an indeterminate number of tests.

=cut

sub no_plan {
    my($self, $arg) = @_;

    $self->carp("no_plan takes no arguments") if $arg;

    $self->{No_Plan}   = 1;
    $self->{Have_Plan} = 1;

    return 1;
}

=begin private

=item B<_output_plan>

  $tb->_output_plan($max);
  $tb->_output_plan($max, $directive);
  $tb->_output_plan($max, $directive => $reason);

Handles displaying the test plan.

If a C<$directive> and/or C<$reason> are given they will be output with the
plan.  So here's what skipping all tests looks like:

    $tb->_output_plan(0, "SKIP", "Because I said so");

It sets C<< $tb->{Have_Output_Plan} >> and will croak if the plan was already
output.

=end private

=cut

sub _output_plan {
    my($self, $max, $directive, $reason) = @_;

    $self->carp("The plan was already output") if $self->{Have_Output_Plan};

    my $plan = "1..$max";
    $plan .= " # $directive" if defined $directive;
    $plan .= " $reason"      if defined $reason;

    $self->_print("$plan\n");

    $self->{Have_Output_Plan} = 1;

    return;
}


=item B<done_testing>

  $Test->done_testing();
  $Test->done_testing($num_tests);

Declares that you are done testing, no more tests will be run after this point.

If a plan has not yet been output, it will do so.

$num_tests is the number of tests you planned to run.  If a numbered
plan was already declared, and if this contradicts, a failing test
will be run to reflect the planning mistake.  If C<no_plan> was declared,
this will override.

If C<done_testing()> is called twice, the second call will issue a
failing test.

If C<$num_tests> is omitted, the number of tests run will be used, like
no_plan.

C<done_testing()> is, in effect, used when you'd want to use C<no_plan>, but
safer. You'd use it like so:

    $Test->ok($a == $b);
    $Test->done_testing();

Or to plan a variable number of tests:

    for my $test (@tests) {
        $Test->ok($test);
    }
    $Test->done_testing(scalar @tests);

=cut

sub done_testing {
    my($self, $num_tests) = @_;

    # If done_testing() specified the number of tests, shut off no_plan.
    if( defined $num_tests ) {
        $self->{No_Plan} = 0;
    }
    else {
        $num_tests = $self->current_test;
    }

    if( $self->{Done_Testing} ) {
        my($file, $line) = @{$self->{Done_Testing}}[1,2];
        $self->ok(0, "done_testing() was already called at $file line $line");
        return;
    }

    $self->{Done_Testing} = [caller];

    if( $self->expected_tests && $num_tests != $self->expected_tests ) {
        $self->ok(0, "planned to run @{[ $self->expected_tests ]} ".
                     "but done_testing() expects $num_tests");
    }
    else {
        $self->{Expected_Tests} = $num_tests;
    }

    $self->_output_plan($num_tests) unless $self->{Have_Output_Plan};

    $self->{Have_Plan} = 1;

    # The wrong number of tests were run
    $self->is_passing(0) if $self->{Expected_Tests} != $self->{Curr_Test};

    # No tests were run
    $self->is_passing(0) if $self->{Curr_Test} == 0;

    return 1;
}


=item B<has_plan>

  $plan = $Test->has_plan

Find out whether a plan has been defined. C<$plan> is either C<undef> (no plan
has been set), C<no_plan> (indeterminate # of tests) or an integer (the number
of expected tests).

=cut

sub has_plan {
    my $self = shift;

    return( $self->{Expected_Tests} ) if $self->{Expected_Tests};
    return('no_plan') if $self->{No_Plan};
    return(undef);
}

=item B<skip_all>

  $Test->skip_all;
  $Test->skip_all($reason);

Skips all the tests, using the given C<$reason>.  Exits immediately with 0.

=cut

sub skip_all {
    my( $self, $reason ) = @_;

    $self->{Skip_All} = $self->parent ? $reason : 1;

    $self->_output_plan(0, "SKIP", $reason) unless $self->no_header;
    if ( $self->parent ) {
        die bless {} => 'Test::Builder::Exception';
    }
    exit(0);
}

=item B<exported_to>

  my $pack = $Test->exported_to;
  $Test->exported_to($pack);

Tells Test::Builder what package you exported your functions to.

This method isn't terribly useful since modules which share the same
Test::Builder object might get exported to different packages and only
the last one will be honored.

=cut

sub exported_to {
    my( $self, $pack ) = @_;

    if( defined $pack ) {
        $self->{Exported_To} = $pack;
    }
    return $self->{Exported_To};
}

=back

=head2 Running tests

These actually run the tests, analogous to the functions in Test::More.

They all return true if the test passed, false if the test failed.

C<$name> is always optional.

=over 4

=item B<ok>

  $Test->ok($test, $name);

Your basic test.  Pass if C<$test> is true, fail if $test is false.  Just
like Test::Simple's C<ok()>.

=cut

sub ok {
    my( $self, $test, $name ) = @_;

    if ( $self->{Child_Name} and not $self->{In_Destroy} ) {
        $name = 'unnamed test' unless defined $name;
        $self->is_passing(0);
        $self->croak("Cannot run test ($name) with active children");
    }
    # $test might contain an object which we don't want to accidentally
    # store, so we turn it into a boolean.
    $test = $test ? 1 : 0;

    lock $self->{Curr_Test};
    $self->{Curr_Test}++;

    # In case $name is a string overloaded object, force it to stringify.
    $self->_unoverload_str( \$name );

    $self->diag(<<"ERR") if defined $name and $name =~ /^[\d\s]+$/;
    You named your test '$name'.  You shouldn't use numbers for your test names.
    Very confusing.
ERR

    # Capture the value of $TODO for the rest of this ok() call
    # so it can more easily be found by other routines.
    my $todo    = $self->todo();
    my $in_todo = $self->in_todo;
    local $self->{Todo} = $todo if $in_todo;

    $self->_unoverload_str( \$todo );

    my $out;
    my $result = &share( {} );

    unless($test) {
        $out .= "not ";
        @$result{ 'ok', 'actual_ok' } = ( ( $self->in_todo ? 1 : 0 ), 0 );
    }
    else {
        @$result{ 'ok', 'actual_ok' } = ( 1, $test );
    }

    $out .= "ok";
    $out .= " $self->{Curr_Test}" if $self->use_numbers;

    if( defined $name ) {
        $name =~ s|#|\\#|g;    # # in a name can confuse Test::Harness.
        $out .= " - $name";
        $result->{name} = $name;
    }
    else {
        $result->{name} = '';
    }

    if( $self->in_todo ) {
        $out .= " # TODO $todo";
        $result->{reason} = $todo;
        $result->{type}   = 'todo';
    }
    else {
        $result->{reason} = '';
        $result->{type}   = '';
    }

    $self->{Test_Results}[ $self->{Curr_Test} - 1 ] = $result;
    $out .= "\n";

    $self->_print($out);

    unless($test) {
        my $msg = $self->in_todo ? "Failed (TODO)" : "Failed";
        $self->_print_to_fh( $self->_diag_fh, "\n" ) if $ENV{HARNESS_ACTIVE};

        my( undef, $file, $line ) = $self->caller;
        if( defined $name ) {
            $self->diag(qq[  $msg test '$name'\n]);
            $self->diag(qq[  at $file line $line.\n]);
        }
        else {
            $self->diag(qq[  $msg test at $file line $line.\n]);
        }
    }

    $self->is_passing(0) unless $test || $self->in_todo;

    # Check that we haven't violated the plan
    $self->_check_is_passing_plan();

    return $test ? 1 : 0;
}


# Check that we haven't yet violated the plan and set
# is_passing() accordingly
sub _check_is_passing_plan {
    my $self = shift;

    my $plan = $self->has_plan;
    return unless defined $plan;        # no plan yet defined
    return unless $plan !~ /\D/;        # no numeric plan
    $self->is_passing(0) if $plan < $self->{Curr_Test};
}


sub _unoverload {
    my $self = shift;
    my $type = shift;

    $self->_try(sub { require overload; }, die_on_fail => 1);

    foreach my $thing (@_) {
        if( $self->_is_object($$thing) ) {
            if( my $string_meth = overload::Method( $$thing, $type ) ) {
                $$thing = $$thing->$string_meth();
            }
        }
    }

    return;
}

sub _is_object {
    my( $self, $thing ) = @_;

    return $self->_try( sub { ref $thing && $thing->isa('UNIVERSAL') } ) ? 1 : 0;
}

sub _unoverload_str {
    my $self = shift;

    return $self->_unoverload( q[""], @_ );
}

sub _unoverload_num {
    my $self = shift;

    $self->_unoverload( '0+', @_ );

    for my $val (@_) {
        next unless $self->_is_dualvar($$val);
        $$val = $$val + 0;
    }

    return;
}

# This is a hack to detect a dualvar such as $!
sub _is_dualvar {
    my( $self, $val ) = @_;

    # Objects are not dualvars.
    return 0 if ref $val;

    no warnings 'numeric';
    my $numval = $val + 0;
    return ($numval != 0 and $numval ne $val ? 1 : 0);
}

=item B<is_eq>

  $Test->is_eq($got, $expected, $name);

Like Test::More's C<is()>.  Checks if C<$got eq $expected>.  This is the
string version.

C<undef> only ever matches another C<undef>.

=item B<is_num>

  $Test->is_num($got, $expected, $name);

Like Test::More's C<is()>.  Checks if C<$got == $expected>.  This is the
numeric version.

C<undef> only ever matches another C<undef>.

=cut

sub is_eq {
    my( $self, $got, $expect, $name ) = @_;
    local $Level = $Level + 1;

    if( !defined $got || !defined $expect ) {
        # undef only matches undef and nothing else
        my $test = !defined $got && !defined $expect;

        $self->ok( $test, $name );
        $self->_is_diag( $got, 'eq', $expect ) unless $test;
        return $test;
    }

    return $self->cmp_ok( $got, 'eq', $expect, $name );
}

sub is_num {
    my( $self, $got, $expect, $name ) = @_;
    local $Level = $Level + 1;

    if( !defined $got || !defined $expect ) {
        # undef only matches undef and nothing else
        my $test = !defined $got && !defined $expect;

        $self->ok( $test, $name );
        $self->_is_diag( $got, '==', $expect ) unless $test;
        return $test;
    }

    return $self->cmp_ok( $got, '==', $expect, $name );
}

sub _diag_fmt {
    my( $self, $type, $val ) = @_;

    if( defined $$val ) {
        if( $type eq 'eq' or $type eq 'ne' ) {
            # quote and force string context
            $$val = "'$$val'";
        }
        else {
            # force numeric context
            $self->_unoverload_num($val);
        }
    }
    else {
        $$val = 'undef';
    }

    return;
}

sub _is_diag {
    my( $self, $got, $type, $expect ) = @_;

    $self->_diag_fmt( $type, $_ ) for \$got, \$expect;

    local $Level = $Level + 1;
    return $self->diag(<<"DIAGNOSTIC");
         got: $got
    expected: $expect
DIAGNOSTIC

}

sub _isnt_diag {
    my( $self, $got, $type ) = @_;

    $self->_diag_fmt( $type, \$got );

    local $Level = $Level + 1;
    return $self->diag(<<"DIAGNOSTIC");
         got: $got
    expected: anything else
DIAGNOSTIC
}

=item B<isnt_eq>

  $Test->isnt_eq($got, $dont_expect, $name);

Like Test::More's C<isnt()>.  Checks if C<$got ne $dont_expect>.  This is
the string version.

=item B<isnt_num>

  $Test->isnt_num($got, $dont_expect, $name);

Like Test::More's C<isnt()>.  Checks if C<$got ne $dont_expect>.  This is
the numeric version.

=cut

sub isnt_eq {
    my( $self, $got, $dont_expect, $name ) = @_;
    local $Level = $Level + 1;

    if( !defined $got || !defined $dont_expect ) {
        # undef only matches undef and nothing else
        my $test = defined $got || defined $dont_expect;

        $self->ok( $test, $name );
        $self->_isnt_diag( $got, 'ne' ) unless $test;
        return $test;
    }

    return $self->cmp_ok( $got, 'ne', $dont_expect, $name );
}

sub isnt_num {
    my( $self, $got, $dont_expect, $name ) = @_;
    local $Level = $Level + 1;

    if( !defined $got || !defined $dont_expect ) {
        # undef only matches undef and nothing else
        my $test = defined $got || defined $dont_expect;

        $self->ok( $test, $name );
        $self->_isnt_diag( $got, '!=' ) unless $test;
        return $test;
    }

    return $self->cmp_ok( $got, '!=', $dont_expect, $name );
}

=item B<like>

  $Test->like($thing, qr/$regex/, $name);
  $Test->like($thing, '/$regex/', $name);

Like Test::More's C<like()>.  Checks if $thing matches the given C<$regex>.

=item B<unlike>

  $Test->unlike($thing, qr/$regex/, $name);
  $Test->unlike($thing, '/$regex/', $name);

Like Test::More's C<unlike()>.  Checks if $thing B<does not match> the
given C<$regex>.

=cut

sub like {
    my( $self, $thing, $regex, $name ) = @_;

    local $Level = $Level + 1;
    return $self->_regex_ok( $thing, $regex, '=~', $name );
}

sub unlike {
    my( $self, $thing, $regex, $name ) = @_;

    local $Level = $Level + 1;
    return $self->_regex_ok( $thing, $regex, '!~', $name );
}

=item B<cmp_ok>

  $Test->cmp_ok($thing, $type, $that, $name);

Works just like Test::More's C<cmp_ok()>.

    $Test->cmp_ok($big_num, '!=', $other_big_num);

=cut

my %numeric_cmps = map { ( $_, 1 ) } ( "<", "<=", ">", ">=", "==", "!=", "<=>" );

# Bad, these are not comparison operators. Should we include more?
my %cmp_ok_bl = map { ( $_, 1 ) } ( "=", "+=", ".=", "x=", "^=", "|=", "||=", "&&=", "...");

sub cmp_ok {
    my( $self, $got, $type, $expect, $name ) = @_;

    if ($cmp_ok_bl{$type}) {
        $self->croak("$type is not a valid comparison operator in cmp_ok()");
    }

    my $test;
    my $error;
    {
        ## no critic (BuiltinFunctions::ProhibitStringyEval)

        local( $@, $!, $SIG{__DIE__} );    # isolate eval

        my($pack, $file, $line) = $self->caller();

        # This is so that warnings come out at the caller's level
        $test = eval qq[
#line $line "(eval in cmp_ok) $file"
\$got $type \$expect;
];
        $error = $@;
    }
    local $Level = $Level + 1;
    my $ok = $self->ok( $test, $name );

    # Treat overloaded objects as numbers if we're asked to do a
    # numeric comparison.
    my $unoverload
      = $numeric_cmps{$type}
      ? '_unoverload_num'
      : '_unoverload_str';

    $self->diag(<<"END") if $error;
An error occurred while using $type:
------------------------------------
$error
------------------------------------
END

    unless($ok) {
        $self->$unoverload( \$got, \$expect );

        if( $type =~ /^(eq|==)$/ ) {
            $self->_is_diag( $got, $type, $expect );
        }
        elsif( $type =~ /^(ne|!=)$/ ) {
            $self->_isnt_diag( $got, $type );
        }
        else {
            $self->_cmp_diag( $got, $type, $expect );
        }
    }
    return $ok;
}

sub _cmp_diag {
    my( $self, $got, $type, $expect ) = @_;

    $got    = defined $got    ? "'$got'"    : 'undef';
    $expect = defined $expect ? "'$expect'" : 'undef';

    local $Level = $Level + 1;
    return $self->diag(<<"DIAGNOSTIC");
    $got
        $type
    $expect
DIAGNOSTIC
}

sub _caller_context {
    my $self = shift;

    my( $pack, $file, $line ) = $self->caller(1);

    my $code = '';
    $code .= "#line $line $file\n" if defined $file and defined $line;

    return $code;
}

=back


=head2 Other Testing Methods

These are methods which are used in the course of writing a test but are not themselves tests.

=over 4

=item B<BAIL_OUT>

    $Test->BAIL_OUT($reason);

Indicates to the Test::Harness that things are going so badly all
testing should terminate.  This includes running any additional test
scripts.

It will exit with 255.

=cut

sub BAIL_OUT {
    my( $self, $reason ) = @_;

    $self->{Bailed_Out} = 1;

    if ($self->parent) {
        $self->{Bailed_Out_Reason} = $reason;
        $self->no_ending(1);
        die bless {} => 'Test::Builder::Exception';
    }

    $self->_print("Bail out!  $reason");
    exit 255;
}

=for deprecated
BAIL_OUT() used to be BAILOUT()

=cut

{
    no warnings 'once';
    *BAILOUT = \&BAIL_OUT;
}

=item B<skip>

    $Test->skip;
    $Test->skip($why);

Skips the current test, reporting C<$why>.

=cut

sub skip {
    my( $self, $why ) = @_;
    $why ||= '';
    $self->_unoverload_str( \$why );

    lock( $self->{Curr_Test} );
    $self->{Curr_Test}++;

    $self->{Test_Results}[ $self->{Curr_Test} - 1 ] = &share(
        {
            'ok'      => 1,
            actual_ok => 1,
            name      => '',
            type      => 'skip',
            reason    => $why,
        }
    );

    my $out = "ok";
    $out .= " $self->{Curr_Test}" if $self->use_numbers;
    $out .= " # skip";
    $out .= " $why"               if length $why;
    $out .= "\n";

    $self->_print($out);

    return 1;
}

=item B<todo_skip>

  $Test->todo_skip;
  $Test->todo_skip($why);

Like C<skip()>, only it will declare the test as failing and TODO.  Similar
to

    print "not ok $tnum # TODO $why\n";

=cut

sub todo_skip {
    my( $self, $why ) = @_;
    $why ||= '';

    lock( $self->{Curr_Test} );
    $self->{Curr_Test}++;

    $self->{Test_Results}[ $self->{Curr_Test} - 1 ] = &share(
        {
            'ok'      => 1,
            actual_ok => 0,
            name      => '',
            type      => 'todo_skip',
            reason    => $why,
        }
    );

    my $out = "not ok";
    $out .= " $self->{Curr_Test}" if $self->use_numbers;
    $out .= " # TODO & SKIP $why\n";

    $self->_print($out);

    return 1;
}

=begin _unimplemented

=item B<skip_rest>

  $Test->skip_rest;
  $Test->skip_rest($reason);

Like C<skip()>, only it skips all the rest of the tests you plan to run
and terminates the test.

If you're running under C<no_plan>, it skips once and terminates the
test.

=end _unimplemented

=back


=head2 Test building utility methods

These methods are useful when writing your own test methods.

=over 4

=item B<maybe_regex>

  $Test->maybe_regex(qr/$regex/);
  $Test->maybe_regex('/$regex/');

This method used to be useful back when Test::Builder worked on Perls
before 5.6 which didn't have qr//.  Now its pretty useless.

Convenience method for building testing functions that take regular
expressions as arguments.

Takes a quoted regular expression produced by C<qr//>, or a string
representing a regular expression.

Returns a Perl value which may be used instead of the corresponding
regular expression, or C<undef> if its argument is not recognised.

For example, a version of C<like()>, sans the useful diagnostic messages,
could be written as:

  sub laconic_like {
      my ($self, $thing, $regex, $name) = @_;
      my $usable_regex = $self->maybe_regex($regex);
      die "expecting regex, found '$regex'\n"
          unless $usable_regex;
      $self->ok($thing =~ m/$usable_regex/, $name);
  }

=cut

sub maybe_regex {
    my( $self, $regex ) = @_;
    my $usable_regex = undef;

    return $usable_regex unless defined $regex;

    my( $re, $opts );

    # Check for qr/foo/
    if( _is_qr($regex) ) {
        $usable_regex = $regex;
    }
    # Check for '/foo/' or 'm,foo,'
    elsif(( $re, $opts )        = $regex =~ m{^ /(.*)/ (\w*) $ }sx              or
          ( undef, $re, $opts ) = $regex =~ m,^ m([^\w\s]) (.+) \1 (\w*) $,sx
    )
    {
        $usable_regex = length $opts ? "(?$opts)$re" : $re;
    }

    return $usable_regex;
}

sub _is_qr {
    my $regex = shift;

    # is_regexp() checks for regexes in a robust manner, say if they're
    # blessed.
    return re::is_regexp($regex) if defined &re::is_regexp;
    return ref $regex eq 'Regexp';
}

sub _regex_ok {
    my( $self, $thing, $regex, $cmp, $name ) = @_;

    my $ok           = 0;
    my $usable_regex = $self->maybe_regex($regex);
    unless( defined $usable_regex ) {
        local $Level = $Level + 1;
        $ok = $self->ok( 0, $name );
        $self->diag("    '$regex' doesn't look much like a regex to me.");
        return $ok;
    }

    {
        my $test;
        my $context = $self->_caller_context;

        {
            ## no critic (BuiltinFunctions::ProhibitStringyEval)

            local( $@, $!, $SIG{__DIE__} );    # isolate eval

            # No point in issuing an uninit warning, they'll see it in the diagnostics
            no warnings 'uninitialized';

            $test = eval $context . q{$test = $thing =~ /$usable_regex/ ? 1 : 0};
        }

        $test = !$test if $cmp eq '!~';

        local $Level = $Level + 1;
        $ok = $self->ok( $test, $name );
    }

    unless($ok) {
        $thing = defined $thing ? "'$thing'" : 'undef';
        my $match = $cmp eq '=~' ? "doesn't match" : "matches";

        local $Level = $Level + 1;
        $self->diag( sprintf <<'DIAGNOSTIC', $thing, $match, $regex );
                  %s
    %13s '%s'
DIAGNOSTIC

    }

    return $ok;
}

# I'm not ready to publish this.  It doesn't deal with array return
# values from the code or context.

=begin private

=item B<_try>

    my $return_from_code          = $Test->try(sub { code });
    my($return_from_code, $error) = $Test->try(sub { code });

Works like eval BLOCK except it ensures it has no effect on the rest
of the test (ie. C<$@> is not set) nor is effected by outside
interference (ie. C<$SIG{__DIE__}>) and works around some quirks in older
Perls.

C<$error> is what would normally be in C<$@>.

It is suggested you use this in place of eval BLOCK.

=cut

sub _try {
    my( $self, $code, %opts ) = @_;

    my $error;
    my $return;
    {
        local $!;               # eval can mess up $!
        local $@;               # don't set $@ in the test
        local $SIG{__DIE__};    # don't trip an outside DIE handler.
        $return = eval { $code->() };
        $error = $@;
    }

    die $error if $error and $opts{die_on_fail};

    return wantarray ? ( $return, $error ) : $return;
}

=end private


=item B<is_fh>

    my $is_fh = $Test->is_fh($thing);

Determines if the given C<$thing> can be used as a filehandle.

=cut

sub is_fh {
    my $self     = shift;
    my $maybe_fh = shift;
    return 0 unless defined $maybe_fh;

    return 1 if ref $maybe_fh  eq 'GLOB';    # its a glob ref
    return 1 if ref \$maybe_fh eq 'GLOB';    # its a glob

    return eval { $maybe_fh->isa("IO::Handle") } ||
           eval { tied($maybe_fh)->can('TIEHANDLE') };
}

=back


=head2 Test style


=over 4

=item B<level>

    $Test->level($how_high);

How far up the call stack should C<$Test> look when reporting where the
test failed.

Defaults to 1.

Setting L<$Test::Builder::Level> overrides.  This is typically useful
localized:

    sub my_ok {
        my $test = shift;

        local $Test::Builder::Level = $Test::Builder::Level + 1;
        $TB->ok($test);
    }

To be polite to other functions wrapping your own you usually want to increment C<$Level> rather than set it to a constant.

=cut

sub level {
    my( $self, $level ) = @_;

    if( defined $level ) {
        $Level = $level;
    }
    return $Level;
}

=item B<use_numbers>

    $Test->use_numbers($on_or_off);

Whether or not the test should output numbers.  That is, this if true:

  ok 1
  ok 2
  ok 3

or this if false

  ok
  ok
  ok

Most useful when you can't depend on the test output order, such as
when threads or forking is involved.

Defaults to on.

=cut

sub use_numbers {
    my( $self, $use_nums ) = @_;

    if( defined $use_nums ) {
        $self->{Use_Nums} = $use_nums;
    }
    return $self->{Use_Nums};
}

=item B<no_diag>

    $Test->no_diag($no_diag);

If set true no diagnostics will be printed.  This includes calls to
C<diag()>.

=item B<no_ending>

    $Test->no_ending($no_ending);

Normally, Test::Builder does some extra diagnostics when the test
ends.  It also changes the exit code as described below.

If this is true, none of that will be done.

=item B<no_header>

    $Test->no_header($no_header);

If set to true, no "1..N" header will be printed.

=cut

foreach my $attribute (qw(No_Header No_Ending No_Diag)) {
    my $method = lc $attribute;

    my $code = sub {
        my( $self, $no ) = @_;

        if( defined $no ) {
            $self->{$attribute} = $no;
        }
        return $self->{$attribute};
    };

    no strict 'refs';    ## no critic
    *{ __PACKAGE__ . '::' . $method } = $code;
}

=back

=head2 Output

Controlling where the test output goes.

It's ok for your test to change where STDOUT and STDERR point to,
Test::Builder's default output settings will not be affected.

=over 4

=item B<diag>

    $Test->diag(@msgs);

Prints out the given C<@msgs>.  Like C<print>, arguments are simply
appended together.

Normally, it uses the C<failure_output()> handle, but if this is for a
TODO test, the C<todo_output()> handle is used.

Output will be indented and marked with a # so as not to interfere
with test output.  A newline will be put on the end if there isn't one
already.

We encourage using this rather than calling print directly.

Returns false.  Why?  Because C<diag()> is often used in conjunction with
a failing test (C<ok() || diag()>) it "passes through" the failure.

    return ok(...) || diag(...);

=for blame transfer
Mark Fowler <mark@twoshortplanks.com>

=cut

sub diag {
    my $self = shift;

    $self->_print_comment( $self->_diag_fh, @_ );
}

=item B<note>

    $Test->note(@msgs);

Like C<diag()>, but it prints to the C<output()> handle so it will not
normally be seen by the user except in verbose mode.

=cut

sub note {
    my $self = shift;

    $self->_print_comment( $self->output, @_ );
}

sub _diag_fh {
    my $self = shift;

    local $Level = $Level + 1;
    return $self->in_todo ? $self->todo_output : $self->failure_output;
}

sub _print_comment {
    my( $self, $fh, @msgs ) = @_;

    return if $self->no_diag;
    return unless @msgs;

    # Prevent printing headers when compiling (i.e. -c)
    return if $^C;

    # Smash args together like print does.
    # Convert undef to 'undef' so its readable.
    my $msg = join '', map { defined($_) ? $_ : 'undef' } @msgs;

    # Escape the beginning, _print will take care of the rest.
    $msg =~ s/^/# /;

    local $Level = $Level + 1;
    $self->_print_to_fh( $fh, $msg );

    return 0;
}

=item B<explain>

    my @dump = $Test->explain(@msgs);

Will dump the contents of any references in a human readable format.
Handy for things like...

    is_deeply($have, $want) || diag explain $have;

or

    is_deeply($have, $want) || note explain $have;

=cut

sub explain {
    my $self = shift;

    return map {
        ref $_
          ? do {
            $self->_try(sub { require Data::Dumper }, die_on_fail => 1);

            my $dumper = Data::Dumper->new( [$_] );
            $dumper->Indent(1)->Terse(1);
            $dumper->Sortkeys(1) if $dumper->can("Sortkeys");
            $dumper->Dump;
          }
          : $_
    } @_;
}

=begin _private

=item B<_print>

    $Test->_print(@msgs);

Prints to the C<output()> filehandle.

=end _private

=cut

sub _print {
    my $self = shift;
    return $self->_print_to_fh( $self->output, @_ );
}

sub _print_to_fh {
    my( $self, $fh, @msgs ) = @_;

    # Prevent printing headers when only compiling.  Mostly for when
    # tests are deparsed with B::Deparse
    return if $^C;

    my $msg = join '', @msgs;
    my $indent = $self->_indent;

    local( $\, $", $, ) = ( undef, ' ', '' );

    # Escape each line after the first with a # so we don't
    # confuse Test::Harness.
    $msg =~ s{\n(?!\z)}{\n$indent# }sg;

    # Stick a newline on the end if it needs it.
    $msg .= "\n" unless $msg =~ /\n\z/;

    return print $fh $indent, $msg;
}

=item B<output>

=item B<failure_output>

=item B<todo_output>

    my $filehandle = $Test->output;
    $Test->output($filehandle);
    $Test->output($filename);
    $Test->output(\$scalar);

These methods control where Test::Builder will print its output.
They take either an open C<$filehandle>, a C<$filename> to open and write to
or a C<$scalar> reference to append to.  It will always return a C<$filehandle>.

B<output> is where normal "ok/not ok" test output goes.

Defaults to STDOUT.

B<failure_output> is where diagnostic output on test failures and
C<diag()> goes.  It is normally not read by Test::Harness and instead is
displayed to the user.

Defaults to STDERR.

C<todo_output> is used instead of C<failure_output()> for the
diagnostics of a failing TODO test.  These will not be seen by the
user.

Defaults to STDOUT.

=cut

sub output {
    my( $self, $fh ) = @_;

    if( defined $fh ) {
        $self->{Out_FH} = $self->_new_fh($fh);
    }
    return $self->{Out_FH};
}

sub failure_output {
    my( $self, $fh ) = @_;

    if( defined $fh ) {
        $self->{Fail_FH} = $self->_new_fh($fh);
    }
    return $self->{Fail_FH};
}

sub todo_output {
    my( $self, $fh ) = @_;

    if( defined $fh ) {
        $self->{Todo_FH} = $self->_new_fh($fh);
    }
    return $self->{Todo_FH};
}

sub _new_fh {
    my $self = shift;
    my($file_or_fh) = shift;

    my $fh;
    if( $self->is_fh($file_or_fh) ) {
        $fh = $file_or_fh;
    }
    elsif( ref $file_or_fh eq 'SCALAR' ) {
        # Scalar refs as filehandles was added in 5.8.
        if( $] >= 5.008 ) {
            open $fh, ">>", $file_or_fh
              or $self->croak("Can't open scalar ref $file_or_fh: $!");
        }
        # Emulate scalar ref filehandles with a tie.
        else {
            $fh = Test::Builder::IO::Scalar->new($file_or_fh)
              or $self->croak("Can't tie scalar ref $file_or_fh");
        }
    }
    else {
        open $fh, ">", $file_or_fh
          or $self->croak("Can't open test output log $file_or_fh: $!");
        _autoflush($fh);
    }

    return $fh;
}

sub _autoflush {
    my($fh) = shift;
    my $old_fh = select $fh;
    $| = 1;
    select $old_fh;

    return;
}

my( $Testout, $Testerr );

sub _dup_stdhandles {
    my $self = shift;

    $self->_open_testhandles;

    # Set everything to unbuffered else plain prints to STDOUT will
    # come out in the wrong order from our own prints.
    _autoflush($Testout);
    _autoflush( \*STDOUT );
    _autoflush($Testerr);
    _autoflush( \*STDERR );

    $self->reset_outputs;

    return;
}

sub _open_testhandles {
    my $self = shift;

    return if $self->{Opened_Testhandles};

    # We dup STDOUT and STDERR so people can change them in their
    # test suites while still getting normal test output.
    open( $Testout, ">&STDOUT" ) or die "Can't dup STDOUT:  $!";
    open( $Testerr, ">&STDERR" ) or die "Can't dup STDERR:  $!";

    $self->_copy_io_layers( \*STDOUT, $Testout );
    $self->_copy_io_layers( \*STDERR, $Testerr );

    $self->{Opened_Testhandles} = 1;

    return;
}

sub _copy_io_layers {
    my( $self, $src, $dst ) = @_;

    $self->_try(
        sub {
            require PerlIO;
            my @src_layers = PerlIO::get_layers($src);

            _apply_layers($dst, @src_layers) if @src_layers;
        }
    );

    return;
}

sub _apply_layers {
    my ($fh, @layers) = @_;
    my %seen;
    my @unique = grep { $_ ne 'unix' and !$seen{$_}++ } @layers;
    binmode($fh, join(":", "", "raw", @unique));
}


=item reset_outputs

  $tb->reset_outputs;

Resets all the output filehandles back to their defaults.

=cut

sub reset_outputs {
    my $self = shift;

    $self->output        ($Testout);
    $self->failure_output($Testerr);
    $self->todo_output   ($Testout);

    return;
}

=item carp

  $tb->carp(@message);

Warns with C<@message> but the message will appear to come from the
point where the original test function was called (C<< $tb->caller >>).

=item croak

  $tb->croak(@message);

Dies with C<@message> but the message will appear to come from the
point where the original test function was called (C<< $tb->caller >>).

=cut

sub _message_at_caller {
    my $self = shift;

    local $Level = $Level + 1;
    my( $pack, $file, $line ) = $self->caller;
    return join( "", @_ ) . " at $file line $line.\n";
}

sub carp {
    my $self = shift;
    return warn $self->_message_at_caller(@_);
}

sub croak {
    my $self = shift;
    return die $self->_message_at_caller(@_);
}


=back


=head2 Test Status and Info

=over 4

=item B<current_test>

    my $curr_test = $Test->current_test;
    $Test->current_test($num);

Gets/sets the current test number we're on.  You usually shouldn't
have to set this.

If set forward, the details of the missing tests are filled in as 'unknown'.
if set backward, the details of the intervening tests are deleted.  You
can erase history if you really want to.

=cut

sub current_test {
    my( $self, $num ) = @_;

    lock( $self->{Curr_Test} );
    if( defined $num ) {
        $self->{Curr_Test} = $num;

        # If the test counter is being pushed forward fill in the details.
        my $test_results = $self->{Test_Results};
        if( $num > @$test_results ) {
            my $start = @$test_results ? @$test_results : 0;
            for( $start .. $num - 1 ) {
                $test_results->[$_] = &share(
                    {
                        'ok'      => 1,
                        actual_ok => undef,
                        reason    => 'incrementing test number',
                        type      => 'unknown',
                        name      => undef
                    }
                );
            }
        }
        # If backward, wipe history.  Its their funeral.
        elsif( $num < @$test_results ) {
            $#{$test_results} = $num - 1;
        }
    }
    return $self->{Curr_Test};
}

=item B<is_passing>

   my $ok = $builder->is_passing;

Indicates if the test suite is currently passing.

More formally, it will be false if anything has happened which makes
it impossible for the test suite to pass.  True otherwise.

For example, if no tests have run C<is_passing()> will be true because
even though a suite with no tests is a failure you can add a passing
test to it and start passing.

Don't think about it too much.

=cut

sub is_passing {
    my $self = shift;

    if( @_ ) {
        $self->{Is_Passing} = shift;
    }

    return $self->{Is_Passing};
}


=item B<summary>

    my @tests = $Test->summary;

A simple summary of the tests so far.  True for pass, false for fail.
This is a logical pass/fail, so todos are passes.

Of course, test #1 is $tests[0], etc...

=cut

sub summary {
    my($self) = shift;

    return map { $_->{'ok'} } @{ $self->{Test_Results} };
}

=item B<details>

    my @tests = $Test->details;

Like C<summary()>, but with a lot more detail.

    $tests[$test_num - 1] = 
            { 'ok'       => is the test considered a pass?
              actual_ok  => did it literally say 'ok'?
              name       => name of the test (if any)
              type       => type of test (if any, see below).
              reason     => reason for the above (if any)
            };

'ok' is true if Test::Harness will consider the test to be a pass.

'actual_ok' is a reflection of whether or not the test literally
printed 'ok' or 'not ok'.  This is for examining the result of 'todo'
tests.

'name' is the name of the test.

'type' indicates if it was a special test.  Normal tests have a type
of ''.  Type can be one of the following:

    skip        see skip()
    todo        see todo()
    todo_skip   see todo_skip()
    unknown     see below

Sometimes the Test::Builder test counter is incremented without it
printing any test output, for example, when C<current_test()> is changed.
In these cases, Test::Builder doesn't know the result of the test, so
its type is 'unknown'.  These details for these tests are filled in.
They are considered ok, but the name and actual_ok is left C<undef>.

For example "not ok 23 - hole count # TODO insufficient donuts" would
result in this structure:

    $tests[22] =    # 23 - 1, since arrays start from 0.
      { ok        => 1,   # logically, the test passed since its todo
        actual_ok => 0,   # in absolute terms, it failed
        name      => 'hole count',
        type      => 'todo',
        reason    => 'insufficient donuts'
      };

=cut

sub details {
    my $self = shift;
    return @{ $self->{Test_Results} };
}

=item B<todo>

    my $todo_reason = $Test->todo;
    my $todo_reason = $Test->todo($pack);

If the current tests are considered "TODO" it will return the reason,
if any.  This reason can come from a C<$TODO> variable or the last call
to C<todo_start()>.

Since a TODO test does not need a reason, this function can return an
empty string even when inside a TODO block.  Use C<< $Test->in_todo >>
to determine if you are currently inside a TODO block.

C<todo()> is about finding the right package to look for C<$TODO> in.  It's
pretty good at guessing the right package to look at.  It first looks for
the caller based on C<$Level + 1>, since C<todo()> is usually called inside
a test function.  As a last resort it will use C<exported_to()>.

Sometimes there is some confusion about where todo() should be looking
for the C<$TODO> variable.  If you want to be sure, tell it explicitly
what $pack to use.

=cut

sub todo {
    my( $self, $pack ) = @_;

    return $self->{Todo} if defined $self->{Todo};

    local $Level = $Level + 1;
    my $todo = $self->find_TODO($pack);
    return $todo if defined $todo;

    return '';
}

=item B<find_TODO>

    my $todo_reason = $Test->find_TODO();
    my $todo_reason = $Test->find_TODO($pack);

Like C<todo()> but only returns the value of C<$TODO> ignoring
C<todo_start()>.

Can also be used to set C<$TODO> to a new value while returning the
old value:

    my $old_reason = $Test->find_TODO($pack, 1, $new_reason);

=cut

sub find_TODO {
    my( $self, $pack, $set, $new_value ) = @_;

    $pack = $pack || $self->caller(1) || $self->exported_to;
    return unless $pack;

    no strict 'refs';    ## no critic
    my $old_value = ${ $pack . '::TODO' };
    $set and ${ $pack . '::TODO' } = $new_value;
    return $old_value;
}

=item B<in_todo>

    my $in_todo = $Test->in_todo;

Returns true if the test is currently inside a TODO block.

=cut

sub in_todo {
    my $self = shift;

    local $Level = $Level + 1;
    return( defined $self->{Todo} || $self->find_TODO ) ? 1 : 0;
}

=item B<todo_start>

    $Test->todo_start();
    $Test->todo_start($message);

This method allows you declare all subsequent tests as TODO tests, up until
the C<todo_end> method has been called.

The C<TODO:> and C<$TODO> syntax is generally pretty good about figuring out
whether or not we're in a TODO test.  However, often we find that this is not
possible to determine (such as when we want to use C<$TODO> but
the tests are being executed in other packages which can't be inferred
beforehand).

Note that you can use this to nest "todo" tests

 $Test->todo_start('working on this');
 # lots of code
 $Test->todo_start('working on that');
 # more code
 $Test->todo_end;
 $Test->todo_end;

This is generally not recommended, but large testing systems often have weird
internal needs.

We've tried to make this also work with the TODO: syntax, but it's not
guaranteed and its use is also discouraged:

 TODO: {
     local $TODO = 'We have work to do!';
     $Test->todo_start('working on this');
     # lots of code
     $Test->todo_start('working on that');
     # more code
     $Test->todo_end;
     $Test->todo_end;
 }

Pick one style or another of "TODO" to be on the safe side.

=cut

sub todo_start {
    my $self = shift;
    my $message = @_ ? shift : '';

    $self->{Start_Todo}++;
    if( $self->in_todo ) {
        push @{ $self->{Todo_Stack} } => $self->todo;
    }
    $self->{Todo} = $message;

    return;
}

=item C<todo_end>

 $Test->todo_end;

Stops running tests as "TODO" tests.  This method is fatal if called without a
preceding C<todo_start> method call.

=cut

sub todo_end {
    my $self = shift;

    if( !$self->{Start_Todo} ) {
        $self->croak('todo_end() called without todo_start()');
    }

    $self->{Start_Todo}--;

    if( $self->{Start_Todo} && @{ $self->{Todo_Stack} } ) {
        $self->{Todo} = pop @{ $self->{Todo_Stack} };
    }
    else {
        delete $self->{Todo};
    }

    return;
}

=item B<caller>

    my $package = $Test->caller;
    my($pack, $file, $line) = $Test->caller;
    my($pack, $file, $line) = $Test->caller($height);

Like the normal C<caller()>, except it reports according to your C<level()>.

C<$height> will be added to the C<level()>.

If C<caller()> winds up off the top of the stack it report the highest context.

=cut

sub caller {    ## no critic (Subroutines::ProhibitBuiltinHomonyms)
    my( $self, $height ) = @_;
    $height ||= 0;

    my $level = $self->level + $height + 1;
    my @caller;
    do {
        @caller = CORE::caller( $level );
        $level--;
    } until @caller;
    return wantarray ? @caller : $caller[0];
}

=back

=cut

=begin _private

=over 4

=item B<_sanity_check>

  $self->_sanity_check();

Runs a bunch of end of test sanity checks to make sure reality came
through ok.  If anything is wrong it will die with a fairly friendly
error message.

=cut

#'#
sub _sanity_check {
    my $self = shift;

    $self->_whoa( $self->{Curr_Test} < 0, 'Says here you ran a negative number of tests!' );
    $self->_whoa( $self->{Curr_Test} != @{ $self->{Test_Results} },
        'Somehow you got a different number of results than tests ran!' );

    return;
}

=item B<_whoa>

  $self->_whoa($check, $description);

A sanity check, similar to C<assert()>.  If the C<$check> is true, something
has gone horribly wrong.  It will die with the given C<$description> and
a note to contact the author.

=cut

sub _whoa {
    my( $self, $check, $desc ) = @_;
    if($check) {
        local $Level = $Level + 1;
        $self->croak(<<"WHOA");
WHOA!  $desc
This should never happen!  Please contact the author immediately!
WHOA
    }

    return;
}

=item B<_my_exit>

  _my_exit($exit_num);

Perl seems to have some trouble with exiting inside an C<END> block.
5.6.1 does some odd things.  Instead, this function edits C<$?>
directly.  It should B<only> be called from inside an C<END> block.
It doesn't actually exit, that's your job.

=cut

sub _my_exit {
    $? = $_[0];    ## no critic (Variables::RequireLocalizedPunctuationVars)

    return 1;
}

=back

=end _private

=cut

sub _ending {
    my $self = shift;
    return if $self->no_ending;
    return if $self->{Ending}++;

    my $real_exit_code = $?;

    # Don't bother with an ending if this is a forked copy.  Only the parent
    # should do the ending.
    if( $self->{Original_Pid} != $$ ) {
        return;
    }

    # Ran tests but never declared a plan or hit done_testing
    if( !$self->{Have_Plan} and $self->{Curr_Test} ) {
        $self->is_passing(0);
        $self->diag("Tests were run but no plan was declared and done_testing() was not seen.");

        if($real_exit_code) {
            $self->diag(<<"FAIL");
Looks like your test exited with $real_exit_code just after $self->{Curr_Test}.
FAIL
            $self->is_passing(0);
            _my_exit($real_exit_code) && return;
        }

        # But if the tests ran, handle exit code.
        my $test_results = $self->{Test_Results};
        if(@$test_results) {
            my $num_failed = grep !$_->{'ok'}, @{$test_results}[ 0 .. $self->{Curr_Test} - 1 ];
            if ($num_failed > 0) {

                my $exit_code = $num_failed <= 254 ? $num_failed : 254;
                _my_exit($exit_code) && return;
            }
        }
        _my_exit(254) && return;
    }

    # Exit if plan() was never called.  This is so "require Test::Simple"
    # doesn't puke.
    if( !$self->{Have_Plan} ) {
        return;
    }

    # Don't do an ending if we bailed out.
    if( $self->{Bailed_Out} ) {
        $self->is_passing(0);
        return;
    }
    # Figure out if we passed or failed and print helpful messages.
    my $test_results = $self->{Test_Results};
    if(@$test_results) {
        # The plan?  We have no plan.
        if( $self->{No_Plan} ) {
            $self->_output_plan($self->{Curr_Test}) unless $self->no_header;
            $self->{Expected_Tests} = $self->{Curr_Test};
        }

        # Auto-extended arrays and elements which aren't explicitly
        # filled in with a shared reference will puke under 5.8.0
        # ithreads.  So we have to fill them in by hand. :(
        my $empty_result = &share( {} );
        for my $idx ( 0 .. $self->{Expected_Tests} - 1 ) {
            $test_results->[$idx] = $empty_result
              unless defined $test_results->[$idx];
        }

        my $num_failed = grep !$_->{'ok'}, @{$test_results}[ 0 .. $self->{Curr_Test} - 1 ];

        my $num_extra = $self->{Curr_Test} - $self->{Expected_Tests};

        if( $num_extra != 0 ) {
            my $s = $self->{Expected_Tests} == 1 ? '' : 's';
            $self->diag(<<"FAIL");
Looks like you planned $self->{Expected_Tests} test$s but ran $self->{Curr_Test}.
FAIL
            $self->is_passing(0);
        }

        if($num_failed) {
            my $num_tests = $self->{Curr_Test};
            my $s = $num_failed == 1 ? '' : 's';

            my $qualifier = $num_extra == 0 ? '' : ' run';

            $self->diag(<<"FAIL");
Looks like you failed $num_failed test$s of $num_tests$qualifier.
FAIL
            $self->is_passing(0);
        }

        if($real_exit_code) {
            $self->diag(<<"FAIL");
Looks like your test exited with $real_exit_code just after $self->{Curr_Test}.
FAIL
            $self->is_passing(0);
            _my_exit($real_exit_code) && return;
        }

        my $exit_code;
        if($num_failed) {
            $exit_code = $num_failed <= 254 ? $num_failed : 254;
        }
        elsif( $num_extra != 0 ) {
            $exit_code = 255;
        }
        else {
            $exit_code = 0;
        }

        _my_exit($exit_code) && return;
    }
    elsif( $self->{Skip_All} ) {
        _my_exit(0) && return;
    }
    elsif($real_exit_code) {
        $self->diag(<<"FAIL");
Looks like your test exited with $real_exit_code before it could output anything.
FAIL
        $self->is_passing(0);
        _my_exit($real_exit_code) && return;
    }
    else {
        $self->diag("No tests run!\n");
        $self->is_passing(0);
        _my_exit(255) && return;
    }

    $self->is_passing(0);
    $self->_whoa( 1, "We fell off the end of _ending()" );
}

END {
    $Test->_ending if defined $Test;
}

=head1 EXIT CODES

If all your tests passed, Test::Builder will exit with zero (which is
normal).  If anything failed it will exit with how many failed.  If
you run less (or more) tests than you planned, the missing (or extras)
will be considered failures.  If no tests were ever run Test::Builder
will throw a warning and exit with 255.  If the test died, even after
having successfully completed all its tests, it will still be
considered a failure and will exit with 255.

So the exit codes are...

    0                   all tests successful
    255                 test died or all passed but wrong # of tests run
    any other number    how many failed (including missing or extras)

If you fail more than 254 tests, it will be reported as 254.

=head1 THREADS

In perl 5.8.1 and later, Test::Builder is thread-safe.  The test
number is shared amongst all threads.  This means if one thread sets
the test number using C<current_test()> they will all be effected.

While versions earlier than 5.8.1 had threads they contain too many
bugs to support.

Test::Builder is only thread-aware if threads.pm is loaded I<before>
Test::Builder.

=head1 MEMORY

An informative hash, accessible via C<<details()>>, is stored for each
test you perform.  So memory usage will scale linearly with each test
run. Although this is not a problem for most test suites, it can
become an issue if you do large (hundred thousands to million)
combinatorics tests in the same run.

In such cases, you are advised to either split the test file into smaller
ones, or use a reverse approach, doing "normal" (code) compares and
triggering fail() should anything go unexpected.

Future versions of Test::Builder will have a way to turn history off.


=head1 EXAMPLES

CPAN can provide the best examples.  Test::Simple, Test::More,
Test::Exception and Test::Differences all use Test::Builder.

=head1 SEE ALSO

Test::Simple, Test::More, Test::Harness

=head1 AUTHORS

Original code by chromatic, maintained by Michael G Schwern
E<lt>schwern@pobox.comE<gt>

=head1 COPYRIGHT

Copyright 2002-2008 by chromatic E<lt>chromatic@wgz.orgE<gt> and
                       Michael G Schwern E<lt>schwern@pobox.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See F<http://www.perl.com/perl/misc/Artistic.html>

=cut

1;

                                                                                                                                                                                                                                                                                                                                                                                     usr/share/perl/5.20.2/Test/Harness.pm                                                               0100644 0000000 0000000 00000040147 12744441327 015544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Harness;

use 5.006;

use strict;
use warnings;

use constant IS_WIN32 => ( $^O =~ /^(MS)?Win32$/ );
use constant IS_VMS => ( $^O eq 'VMS' );

use TAP::Harness                     ();
use TAP::Parser::Aggregator          ();
use TAP::Parser::Source              ();
use TAP::Parser::SourceHandler::Perl ();

use Text::ParseWords qw(shellwords);

use Config;
use base 'Exporter';

# $ML $Last_ML_Print

BEGIN {
    eval q{use Time::HiRes 'time'};
    our $has_time_hires = !$@;
}

=head1 NAME

Test::Harness - Run Perl standard test scripts with statistics

=head1 VERSION

Version 3.30

=cut

our $VERSION = '3.30';

# Backwards compatibility for exportable variable names.
*verbose  = *Verbose;
*switches = *Switches;
*debug    = *Debug;

$ENV{HARNESS_ACTIVE}  = 1;
$ENV{HARNESS_VERSION} = $VERSION;

END {

    # For VMS.
    delete $ENV{HARNESS_ACTIVE};
    delete $ENV{HARNESS_VERSION};
}

our @EXPORT    = qw(&runtests);
our @EXPORT_OK = qw(&execute_tests $verbose $switches);

our $Verbose = $ENV{HARNESS_VERBOSE} || 0;
our $Debug   = $ENV{HARNESS_DEBUG}   || 0;
our $Switches = '-w';
our $Columns = $ENV{HARNESS_COLUMNS} || $ENV{COLUMNS} || 80;
$Columns--;    # Some shells have trouble with a full line of text.
our $Timer      = $ENV{HARNESS_TIMER}       || 0;
our $Color      = $ENV{HARNESS_COLOR}       || 0;
our $IgnoreExit = $ENV{HARNESS_IGNORE_EXIT} || 0;

=head1 SYNOPSIS

  use Test::Harness;

  runtests(@test_files);

=head1 DESCRIPTION

Although, for historical reasons, the L<Test::Harness> distribution
takes its name from this module it now exists only to provide
L<TAP::Harness> with an interface that is somewhat backwards compatible
with L<Test::Harness> 2.xx. If you're writing new code consider using
L<TAP::Harness> directly instead.

Emulation is provided for C<runtests> and C<execute_tests> but the
pluggable 'Straps' interface that previous versions of L<Test::Harness>
supported is not reproduced here. Straps is now available as a stand
alone module: L<Test::Harness::Straps>.

See L<TAP::Parser>, L<TAP::Harness> for the main documentation for this
distribution.

=head1 FUNCTIONS

The following functions are available.

=head2 runtests( @test_files )

This runs all the given I<@test_files> and divines whether they passed
or failed based on their output to STDOUT (details above).  It prints
out each individual test which failed along with a summary report and
a how long it all took.

It returns true if everything was ok.  Otherwise it will C<die()> with
one of the messages in the DIAGNOSTICS section.

=cut

sub _has_taint {
    my $test = shift;
    return TAP::Parser::SourceHandler::Perl->get_taint(
        TAP::Parser::Source->shebang($test) );
}

sub _aggregate {
    my ( $harness, $aggregate, @tests ) = @_;

    # Don't propagate to our children
    local $ENV{HARNESS_OPTIONS};

    _apply_extra_INC($harness);
    _aggregate_tests( $harness, $aggregate, @tests );
}

# Make sure the child sees all the extra junk in @INC
sub _apply_extra_INC {
    my $harness = shift;

    $harness->callback(
        parser_args => sub {
            my ( $args, $test ) = @_;
            push @{ $args->{switches} }, map {"-I$_"} _filtered_inc();
        }
    );
}

sub _aggregate_tests {
    my ( $harness, $aggregate, @tests ) = @_;
    $aggregate->start();
    $harness->aggregate_tests( $aggregate, @tests );
    $aggregate->stop();

}

sub runtests {
    my @tests = @_;

    # shield against -l
    local ( $\, $, );

    my $harness   = _new_harness();
    my $aggregate = TAP::Parser::Aggregator->new();

    _aggregate( $harness, $aggregate, @tests );

    $harness->formatter->summary($aggregate);

    my $total  = $aggregate->total;
    my $passed = $aggregate->passed;
    my $failed = $aggregate->failed;

    my @parsers = $aggregate->parsers;

    my $num_bad = 0;
    for my $parser (@parsers) {
        $num_bad++ if $parser->has_problems;
    }

    die(sprintf(
            "Failed %d/%d test programs. %d/%d subtests failed.\n",
            $num_bad, scalar @parsers, $failed, $total
        )
    ) if $num_bad;

    return $total && $total == $passed;
}

sub _canon {
    my @list   = sort { $a <=> $b } @_;
    my @ranges = ();
    my $count  = scalar @list;
    my $pos    = 0;

    while ( $pos < $count ) {
        my $end = $pos + 1;
        $end++ while $end < $count && $list[$end] <= $list[ $end - 1 ] + 1;
        push @ranges, ( $end == $pos + 1 )
          ? $list[$pos]
          : join( '-', $list[$pos], $list[ $end - 1 ] );
        $pos = $end;
    }

    return join( ' ', @ranges );
}

sub _new_harness {
    my $sub_args = shift || {};

    my ( @lib, @switches );
    my @opt = map { shellwords($_) } grep { defined } $Switches, $ENV{HARNESS_PERL_SWITCHES};
    while ( my $opt = shift @opt ) {
        if ( $opt =~ /^ -I (.*) $ /x ) {
            push @lib, length($1) ? $1 : shift @opt;
        }
        else {
            push @switches, $opt;
        }
    }

    # Do things the old way on VMS...
    push @lib, _filtered_inc() if IS_VMS;

    # If $Verbose isn't numeric default to 1. This helps core.
    my $verbosity = ( $Verbose ? ( $Verbose !~ /\d/ ) ? 1 : $Verbose : 0 );

    my $args = {
        timer       => $Timer,
        directives  => our $Directives,
        lib         => \@lib,
        switches    => \@switches,
        color       => $Color,
        verbosity   => $verbosity,
        ignore_exit => $IgnoreExit,
    };

    $args->{stdout} = $sub_args->{out}
      if exists $sub_args->{out};

    my $class = $ENV{HARNESS_SUBCLASS} || 'TAP::Harness';
    if ( defined( my $env_opt = $ENV{HARNESS_OPTIONS} ) ) {
        for my $opt ( split /:/, $env_opt ) {
            if ( $opt =~ /^j(\d*)$/ ) {
                $args->{jobs} = $1 || 9;
            }
            elsif ( $opt eq 'c' ) {
                $args->{color} = 1;
            }
            elsif ( $opt =~ m/^f(.*)$/ ) {
                my $fmt = $1;
                $fmt =~ s/-/::/g;
                $args->{formatter_class} = $fmt;
            }
            elsif ( $opt =~ m/^a(.*)$/ ) {
                my $archive = $1;
                $class = "TAP::Harness::Archive";
                $args->{archive} = $archive;
            }
            else {
                die "Unknown HARNESS_OPTIONS item: $opt\n";
            }
        }
    }

    return TAP::Harness->_construct( $class, $args );
}

# Get the parts of @INC which are changed from the stock list AND
# preserve reordering of stock directories.
sub _filtered_inc {
    my @inc = grep { !ref } @INC;    #28567

    if (IS_VMS) {

        # VMS has a 255-byte limit on the length of %ENV entries, so
        # toss the ones that involve perl_root, the install location
        @inc = grep !/perl_root/i, @inc;

    }
    elsif (IS_WIN32) {

        # Lose any trailing backslashes in the Win32 paths
        s/[\\\/]+$// for @inc;
    }

    my @default_inc = _default_inc();

    my @new_inc;
    my %seen;
    for my $dir (@inc) {
        next if $seen{$dir}++;

        if ( $dir eq ( $default_inc[0] || '' ) ) {
            shift @default_inc;
        }
        else {
            push @new_inc, $dir;
        }

        shift @default_inc while @default_inc and $seen{ $default_inc[0] };
    }

    return @new_inc;
}

{

    # Cache this to avoid repeatedly shelling out to Perl.
    my @inc;

    sub _default_inc {
        return @inc if @inc;

        local $ENV{PERL5LIB};
        local $ENV{PERLLIB};

        my $perl = $ENV{HARNESS_PERL} || $^X;

        # Avoid using -l for the benefit of Perl 6
        chomp( @inc = `"$perl" -e "print join qq[\\n], \@INC, q[]"` );
        return @inc;
    }
}

sub _check_sequence {
    my @list = @_;
    my $prev;
    while ( my $next = shift @list ) {
        return if defined $prev && $next <= $prev;
        $prev = $next;
    }

    return 1;
}

sub execute_tests {
    my %args = @_;

    my $harness   = _new_harness( \%args );
    my $aggregate = TAP::Parser::Aggregator->new();

    my %tot = (
        bonus       => 0,
        max         => 0,
        ok          => 0,
        bad         => 0,
        good        => 0,
        files       => 0,
        tests       => 0,
        sub_skipped => 0,
        todo        => 0,
        skipped     => 0,
        bench       => undef,
    );

    # Install a callback so we get to see any plans the
    # harness executes.
    $harness->callback(
        made_parser => sub {
            my $parser = shift;
            $parser->callback(
                plan => sub {
                    my $plan = shift;
                    if ( $plan->directive eq 'SKIP' ) {
                        $tot{skipped}++;
                    }
                }
            );
        }
    );

    _aggregate( $harness, $aggregate, @{ $args{tests} } );

    $tot{bench} = $aggregate->elapsed;
    my @tests = $aggregate->descriptions;

    # TODO: Work out the circumstances under which the files
    # and tests totals can differ.
    $tot{files} = $tot{tests} = scalar @tests;

    my %failedtests = ();
    my %todo_passed = ();

    for my $test (@tests) {
        my ($parser) = $aggregate->parsers($test);

        my @failed = $parser->failed;

        my $wstat         = $parser->wait;
        my $estat         = $parser->exit;
        my $planned       = $parser->tests_planned;
        my @errors        = $parser->parse_errors;
        my $passed        = $parser->passed;
        my $actual_passed = $parser->actual_passed;

        my $ok_seq = _check_sequence( $parser->actual_passed );

        # Duplicate exit, wait status semantics of old version
        $estat ||= '' unless $wstat;
        $wstat ||= '';

        $tot{max} += ( $planned || 0 );
        $tot{bonus} += $parser->todo_passed;
        $tot{ok} += $passed > $actual_passed ? $passed : $actual_passed;
        $tot{sub_skipped} += $parser->skipped;
        $tot{todo}        += $parser->todo;

        if ( @failed || $estat || @errors ) {
            $tot{bad}++;

            my $huh_planned = $planned ? undef : '??';
            my $huh_errors  = $ok_seq  ? undef : '??';

            $failedtests{$test} = {
                'canon' => $huh_planned
                  || $huh_errors
                  || _canon(@failed)
                  || '??',
                'estat'  => $estat,
                'failed' => $huh_planned
                  || $huh_errors
                  || scalar @failed,
                'max' => $huh_planned || $planned,
                'name'  => $test,
                'wstat' => $wstat
            };
        }
        else {
            $tot{good}++;
        }

        my @todo = $parser->todo_passed;
        if (@todo) {
            $todo_passed{$test} = {
                'canon'  => _canon(@todo),
                'estat'  => $estat,
                'failed' => scalar @todo,
                'max'    => scalar $parser->todo,
                'name'   => $test,
                'wstat'  => $wstat
            };
        }
    }

    return ( \%tot, \%failedtests, \%todo_passed );
}

=head2 execute_tests( tests => \@test_files, out => \*FH )

Runs all the given C<@test_files> (just like C<runtests()>) but
doesn't generate the final report.  During testing, progress
information will be written to the currently selected output
filehandle (usually C<STDOUT>), or to the filehandle given by the
C<out> parameter.  The I<out> is optional.

Returns a list of two values, C<$total> and C<$failed>, describing the
results.  C<$total> is a hash ref summary of all the tests run.  Its
keys and values are this:

    bonus           Number of individual todo tests unexpectedly passed
    max             Number of individual tests ran
    ok              Number of individual tests passed
    sub_skipped     Number of individual tests skipped
    todo            Number of individual todo tests

    files           Number of test files ran
    good            Number of test files passed
    bad             Number of test files failed
    tests           Number of test files originally given
    skipped         Number of test files skipped

If C<< $total->{bad} == 0 >> and C<< $total->{max} > 0 >>, you've
got a successful test.

C<$failed> is a hash ref of all the test scripts that failed.  Each key
is the name of a test script, each value is another hash representing
how that script failed.  Its keys are these:

    name        Name of the test which failed
    estat       Script's exit value
    wstat       Script's wait status
    max         Number of individual tests
    failed      Number which failed
    canon       List of tests which failed (as string).

C<$failed> should be empty if everything passed.

=cut

1;
__END__

=head1 EXPORT

C<&runtests> is exported by C<Test::Harness> by default.

C<&execute_tests>, C<$verbose>, C<$switches> and C<$debug> are
exported upon request.

=head1 ENVIRONMENT VARIABLES THAT TAP::HARNESS::COMPATIBLE SETS

C<Test::Harness> sets these before executing the individual tests.

=over 4

=item C<HARNESS_ACTIVE>

This is set to a true value.  It allows the tests to determine if they
are being executed through the harness or by any other means.

=item C<HARNESS_VERSION>

This is the version of C<Test::Harness>.

=back

=head1 ENVIRONMENT VARIABLES THAT AFFECT TEST::HARNESS

=over 4

=item C<HARNESS_PERL_SWITCHES>

Setting this adds perl command line switches to each test file run.

For example, C<HARNESS_PERL_SWITCHES=-T> will turn on taint mode.
C<HARNESS_PERL_SWITCHES=-MDevel::Cover> will run C<Devel::Cover> for
each test.

C<-w> is always set.  You can turn this off in the test with C<BEGIN {
$^W = 0 }>.

=item C<HARNESS_TIMER>

Setting this to true will make the harness display the number of
milliseconds each test took.  You can also use F<prove>'s C<--timer>
switch.

=item C<HARNESS_VERBOSE>

If true, C<Test::Harness> will output the verbose results of running
its tests.  Setting C<$Test::Harness::verbose> will override this,
or you can use the C<-v> switch in the F<prove> utility.

=item C<HARNESS_OPTIONS>

Provide additional options to the harness. Currently supported options are:

=over

=item C<< j<n> >>

Run <n> (default 9) parallel jobs.

=item C<< c >>

Try to color output. See L<TAP::Formatter::Base/"new">.

=item C<< a<file.tgz> >>

Will use L<TAP::Harness::Archive> as the harness class, and save the TAP to
C<file.tgz>

=item C<< fPackage-With-Dashes >>

Set the formatter_class of the harness being run. Since the C<HARNESS_OPTIONS>
is seperated by C<:>, we use C<-> instead.

=back

Multiple options may be separated by colons:

    HARNESS_OPTIONS=j9:c make test

=item C<HARNESS_SUBCLASS>

Specifies a TAP::Harness subclass to be used in place of TAP::Harness.

=item C<HARNESS_SUMMARY_COLOR_SUCCESS>

Determines the L<Term::ANSIColor> for the summary in case it is successful.
This color defaults to C<'green'>.

=item C<HARNESS_SUMMARY_COLOR_FAIL>

Determines the L<Term::ANSIColor> for the failure in case it is successful.
This color defaults to C<'red'>.

=back

=head1 Taint Mode

Normally when a Perl program is run in taint mode the contents of the
C<PERL5LIB> environment variable do not appear in C<@INC>.

Because C<PERL5LIB> is often used during testing to add build
directories to C<@INC> C<Test::Harness> passes the names of any
directories found in C<PERL5LIB> as -I switches. The net effect of this
is that C<PERL5LIB> is honoured even in taint mode.

=head1 SEE ALSO

L<TAP::Harness>

=head1 BUGS

Please report any bugs or feature requests to
C<bug-test-harness at rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness>.  I will be 
notified, and then you'll automatically be notified of progress on your bug 
as I make changes.

=head1 AUTHORS

Andy Armstrong  C<< <andy@hexten.net> >>

L<Test::Harness> 2.64 (maintained by Andy Lester and on which this
module is based) has this attribution:

    Either Tim Bunce or Andreas Koenig, we don't know. What we know for
    sure is, that it was inspired by Larry Wall's F<TEST> script that came
    with perl distributions for ages. Numerous anonymous contributors
    exist.  Andreas Koenig held the torch for many years, and then
    Michael G Schwern.

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2007-2011, Andy Armstrong C<< <andy@hexten.net> >>. All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

                                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/perl/5.20.2/Test/More.pm                                                                  0100644 0000000 0000000 00000141271 12744441327 015043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::More;

use 5.006;
use strict;
use warnings;

#---- perlcritic exemptions. ----#

# We use a lot of subroutine prototypes
## no critic (Subroutines::ProhibitSubroutinePrototypes)

# Can't use Carp because it might cause use_ok() to accidentally succeed
# even though the module being used forgot to use Carp.  Yes, this
# actually happened.
sub _carp {
    my( $file, $line ) = ( caller(1) )[ 1, 2 ];
    return warn @_, " at $file line $line\n";
}

our $VERSION = '1.001002';
$VERSION = eval $VERSION;    ## no critic (BuiltinFunctions::ProhibitStringyEval)

use Test::Builder::Module 0.99;
our @ISA    = qw(Test::Builder::Module);
our @EXPORT = qw(ok use_ok require_ok
  is isnt like unlike is_deeply
  cmp_ok
  skip todo todo_skip
  pass fail
  eq_array eq_hash eq_set
  $TODO
  plan
  done_testing
  can_ok isa_ok new_ok
  diag note explain
  subtest
  BAIL_OUT
);

=head1 NAME

Test::More - yet another framework for writing test scripts

=head1 SYNOPSIS

  use Test::More tests => 23;
  # or
  use Test::More skip_all => $reason;
  # or
  use Test::More;   # see done_testing()

  require_ok( 'Some::Module' );

  # Various ways to say "ok"
  ok($got eq $expected, $test_name);

  is  ($got, $expected, $test_name);
  isnt($got, $expected, $test_name);

  # Rather than print STDERR "# here's what went wrong\n"
  diag("here's what went wrong");

  like  ($got, qr/expected/, $test_name);
  unlike($got, qr/expected/, $test_name);

  cmp_ok($got, '==', $expected, $test_name);

  is_deeply($got_complex_structure, $expected_complex_structure, $test_name);

  SKIP: {
      skip $why, $how_many unless $have_some_feature;

      ok( foo(),       $test_name );
      is( foo(42), 23, $test_name );
  };

  TODO: {
      local $TODO = $why;

      ok( foo(),       $test_name );
      is( foo(42), 23, $test_name );
  };

  can_ok($module, @methods);
  isa_ok($object, $class);

  pass($test_name);
  fail($test_name);

  BAIL_OUT($why);

  # UNIMPLEMENTED!!!
  my @status = Test::More::status;


=head1 DESCRIPTION

B<STOP!> If you're just getting started writing tests, have a look at
L<Test::Simple> first.  This is a drop in replacement for Test::Simple
which you can switch to once you get the hang of basic testing.

The purpose of this module is to provide a wide range of testing
utilities.  Various ways to say "ok" with better diagnostics,
facilities to skip tests, test future features and compare complicated
data structures.  While you can do almost anything with a simple
C<ok()> function, it doesn't provide good diagnostic output.


=head2 I love it when a plan comes together

Before anything else, you need a testing plan.  This basically declares
how many tests your script is going to run to protect against premature
failure.

The preferred way to do this is to declare a plan when you C<use Test::More>.

  use Test::More tests => 23;

There are cases when you will not know beforehand how many tests your
script is going to run.  In this case, you can declare your tests at
the end.

  use Test::More;

  ... run your tests ...

  done_testing( $number_of_tests_run );

Sometimes you really don't know how many tests were run, or it's too
difficult to calculate.  In which case you can leave off
$number_of_tests_run.

In some cases, you'll want to completely skip an entire testing script.

  use Test::More skip_all => $skip_reason;

Your script will declare a skip with the reason why you skipped and
exit immediately with a zero (success).  See L<Test::Harness> for
details.

If you want to control what functions Test::More will export, you
have to use the 'import' option.  For example, to import everything
but 'fail', you'd do:

  use Test::More tests => 23, import => ['!fail'];

Alternatively, you can use the plan() function.  Useful for when you
have to calculate the number of tests.

  use Test::More;
  plan tests => keys %Stuff * 3;

or for deciding between running the tests at all:

  use Test::More;
  if( $^O eq 'MacOS' ) {
      plan skip_all => 'Test irrelevant on MacOS';
  }
  else {
      plan tests => 42;
  }

=cut

sub plan {
    my $tb = Test::More->builder;

    return $tb->plan(@_);
}

# This implements "use Test::More 'no_diag'" but the behavior is
# deprecated.
sub import_extra {
    my $class = shift;
    my $list  = shift;

    my @other = ();
    my $idx   = 0;
    while( $idx <= $#{$list} ) {
        my $item = $list->[$idx];

        if( defined $item and $item eq 'no_diag' ) {
            $class->builder->no_diag(1);
        }
        else {
            push @other, $item;
        }

        $idx++;
    }

    @$list = @other;

    return;
}

=over 4

=item B<done_testing>

    done_testing();
    done_testing($number_of_tests);

If you don't know how many tests you're going to run, you can issue
the plan when you're done running tests.

$number_of_tests is the same as plan(), it's the number of tests you
expected to run.  You can omit this, in which case the number of tests
you ran doesn't matter, just the fact that your tests ran to
conclusion.

This is safer than and replaces the "no_plan" plan.

=back

=cut

sub done_testing {
    my $tb = Test::More->builder;
    $tb->done_testing(@_);
}

=head2 Test names

By convention, each test is assigned a number in order.  This is
largely done automatically for you.  However, it's often very useful to
assign a name to each test.  Which would you rather see:

  ok 4
  not ok 5
  ok 6

or

  ok 4 - basic multi-variable
  not ok 5 - simple exponential
  ok 6 - force == mass * acceleration

The later gives you some idea of what failed.  It also makes it easier
to find the test in your script, simply search for "simple
exponential".

All test functions take a name argument.  It's optional, but highly
suggested that you use it.

=head2 I'm ok, you're not ok.

The basic purpose of this module is to print out either "ok #" or "not
ok #" depending on if a given test succeeded or failed.  Everything
else is just gravy.

All of the following print "ok" or "not ok" depending on if the test
succeeded or failed.  They all also return true or false,
respectively.

=over 4

=item B<ok>

  ok($got eq $expected, $test_name);

This simply evaluates any expression (C<$got eq $expected> is just a
simple example) and uses that to determine if the test succeeded or
failed.  A true expression passes, a false one fails.  Very simple.

For example:

    ok( $exp{9} == 81,                   'simple exponential' );
    ok( Film->can('db_Main'),            'set_db()' );
    ok( $p->tests == 4,                  'saw tests' );
    ok( !grep(!defined $_, @items),      'all items defined' );

(Mnemonic:  "This is ok.")

$test_name is a very short description of the test that will be printed
out.  It makes it very easy to find a test in your script when it fails
and gives others an idea of your intentions.  $test_name is optional,
but we B<very> strongly encourage its use.

Should an ok() fail, it will produce some diagnostics:

    not ok 18 - sufficient mucus
    #   Failed test 'sufficient mucus'
    #   in foo.t at line 42.

This is the same as Test::Simple's ok() routine.

=cut

sub ok ($;$) {
    my( $test, $name ) = @_;
    my $tb = Test::More->builder;

    return $tb->ok( $test, $name );
}

=item B<is>

=item B<isnt>

  is  ( $got, $expected, $test_name );
  isnt( $got, $expected, $test_name );

Similar to ok(), is() and isnt() compare their two arguments
with C<eq> and C<ne> respectively and use the result of that to
determine if the test succeeded or failed.  So these:

    # Is the ultimate answer 42?
    is( ultimate_answer(), 42,          "Meaning of Life" );

    # $foo isn't empty
    isnt( $foo, '',     "Got some foo" );

are similar to these:

    ok( ultimate_answer() eq 42,        "Meaning of Life" );
    ok( $foo ne '',     "Got some foo" );

C<undef> will only ever match C<undef>.  So you can test a value
against C<undef> like this:

    is($not_defined, undef, "undefined as expected");

(Mnemonic:  "This is that."  "This isn't that.")

So why use these?  They produce better diagnostics on failure.  ok()
cannot know what you are testing for (beyond the name), but is() and
isnt() know what the test was and why it failed.  For example this
test:

    my $foo = 'waffle';  my $bar = 'yarblokos';
    is( $foo, $bar,   'Is foo the same as bar?' );

Will produce something like this:

    not ok 17 - Is foo the same as bar?
    #   Failed test 'Is foo the same as bar?'
    #   in foo.t at line 139.
    #          got: 'waffle'
    #     expected: 'yarblokos'

So you can figure out what went wrong without rerunning the test.

You are encouraged to use is() and isnt() over ok() where possible,
however do not be tempted to use them to find out if something is
true or false!

  # XXX BAD!
  is( exists $brooklyn{tree}, 1, 'A tree grows in Brooklyn' );

This does not check if C<exists $brooklyn{tree}> is true, it checks if
it returns 1.  Very different.  Similar caveats exist for false and 0.
In these cases, use ok().

  ok( exists $brooklyn{tree},    'A tree grows in Brooklyn' );

A simple call to isnt() usually does not provide a strong test but there
are cases when you cannot say much more about a value than that it is
different from some other value:

  new_ok $obj, "Foo";

  my $clone = $obj->clone;
  isa_ok $obj, "Foo", "Foo->clone";

  isnt $obj, $clone, "clone() produces a different object";

For those grammatical pedants out there, there's an C<isn't()>
function which is an alias of isnt().

=cut

sub is ($$;$) {
    my $tb = Test::More->builder;

    return $tb->is_eq(@_);
}

sub isnt ($$;$) {
    my $tb = Test::More->builder;

    return $tb->isnt_eq(@_);
}

*isn't = \&isnt;

=item B<like>

  like( $got, qr/expected/, $test_name );

Similar to ok(), like() matches $got against the regex C<qr/expected/>.

So this:

    like($got, qr/expected/, 'this is like that');

is similar to:

    ok( $got =~ m/expected/, 'this is like that');

(Mnemonic "This is like that".)

The second argument is a regular expression.  It may be given as a
regex reference (i.e. C<qr//>) or (for better compatibility with older
perls) as a string that looks like a regex (alternative delimiters are
currently not supported):

    like( $got, '/expected/', 'this is like that' );

Regex options may be placed on the end (C<'/expected/i'>).

Its advantages over ok() are similar to that of is() and isnt().  Better
diagnostics on failure.

=cut

sub like ($$;$) {
    my $tb = Test::More->builder;

    return $tb->like(@_);
}

=item B<unlike>

  unlike( $got, qr/expected/, $test_name );

Works exactly as like(), only it checks if $got B<does not> match the
given pattern.

=cut

sub unlike ($$;$) {
    my $tb = Test::More->builder;

    return $tb->unlike(@_);
}

=item B<cmp_ok>

  cmp_ok( $got, $op, $expected, $test_name );

Halfway between C<ok()> and C<is()> lies C<cmp_ok()>.  This allows you
to compare two arguments using any binary perl operator.  The test
passes if the comparison is true and fails otherwise.

    # ok( $got eq $expected );
    cmp_ok( $got, 'eq', $expected, 'this eq that' );

    # ok( $got == $expected );
    cmp_ok( $got, '==', $expected, 'this == that' );

    # ok( $got && $expected );
    cmp_ok( $got, '&&', $expected, 'this && that' );
    ...etc...

Its advantage over ok() is when the test fails you'll know what $got
and $expected were:

    not ok 1
    #   Failed test in foo.t at line 12.
    #     '23'
    #         &&
    #     undef

It's also useful in those cases where you are comparing numbers and
is()'s use of C<eq> will interfere:

    cmp_ok( $big_hairy_number, '==', $another_big_hairy_number );

It's especially useful when comparing greater-than or smaller-than 
relation between values:

    cmp_ok( $some_value, '<=', $upper_limit );


=cut

sub cmp_ok($$$;$) {
    my $tb = Test::More->builder;

    return $tb->cmp_ok(@_);
}

=item B<can_ok>

  can_ok($module, @methods);
  can_ok($object, @methods);

Checks to make sure the $module or $object can do these @methods
(works with functions, too).

    can_ok('Foo', qw(this that whatever));

is almost exactly like saying:

    ok( Foo->can('this') && 
        Foo->can('that') && 
        Foo->can('whatever') 
      );

only without all the typing and with a better interface.  Handy for
quickly testing an interface.

No matter how many @methods you check, a single can_ok() call counts
as one test.  If you desire otherwise, use:

    foreach my $meth (@methods) {
        can_ok('Foo', $meth);
    }

=cut

sub can_ok ($@) {
    my( $proto, @methods ) = @_;
    my $class = ref $proto || $proto;
    my $tb = Test::More->builder;

    unless($class) {
        my $ok = $tb->ok( 0, "->can(...)" );
        $tb->diag('    can_ok() called with empty class or reference');
        return $ok;
    }

    unless(@methods) {
        my $ok = $tb->ok( 0, "$class->can(...)" );
        $tb->diag('    can_ok() called with no methods');
        return $ok;
    }

    my @nok = ();
    foreach my $method (@methods) {
        $tb->_try( sub { $proto->can($method) } ) or push @nok, $method;
    }

    my $name = (@methods == 1) ? "$class->can('$methods[0]')" :
                                 "$class->can(...)"           ;

    my $ok = $tb->ok( !@nok, $name );

    $tb->diag( map "    $class->can('$_') failed\n", @nok );

    return $ok;
}

=item B<isa_ok>

  isa_ok($object,   $class, $object_name);
  isa_ok($subclass, $class, $object_name);
  isa_ok($ref,      $type,  $ref_name);

Checks to see if the given C<< $object->isa($class) >>.  Also checks to make
sure the object was defined in the first place.  Handy for this sort
of thing:

    my $obj = Some::Module->new;
    isa_ok( $obj, 'Some::Module' );

where you'd otherwise have to write

    my $obj = Some::Module->new;
    ok( defined $obj && $obj->isa('Some::Module') );

to safeguard against your test script blowing up.

You can also test a class, to make sure that it has the right ancestor:

    isa_ok( 'Vole', 'Rodent' );

It works on references, too:

    isa_ok( $array_ref, 'ARRAY' );

The diagnostics of this test normally just refer to 'the object'.  If
you'd like them to be more specific, you can supply an $object_name
(for example 'Test customer').

=cut

sub isa_ok ($$;$) {
    my( $thing, $class, $thing_name ) = @_;
    my $tb = Test::More->builder;

    my $whatami;
    if( !defined $thing ) {
        $whatami = 'undef';
    }
    elsif( ref $thing ) {
        $whatami = 'reference';

        local($@,$!);
        require Scalar::Util;
        if( Scalar::Util::blessed($thing) ) {
            $whatami = 'object';
        }
    }
    else {
        $whatami = 'class';
    }

    # We can't use UNIVERSAL::isa because we want to honor isa() overrides
    my( $rslt, $error ) = $tb->_try( sub { $thing->isa($class) } );

    if($error) {
        die <<WHOA unless $error =~ /^Can't (locate|call) method "isa"/;
WHOA! I tried to call ->isa on your $whatami and got some weird error.
Here's the error.
$error
WHOA
    }

    # Special case for isa_ok( [], "ARRAY" ) and like
    if( $whatami eq 'reference' ) {
        $rslt = UNIVERSAL::isa($thing, $class);
    }

    my($diag, $name);
    if( defined $thing_name ) {
        $name = "'$thing_name' isa '$class'";
        $diag = defined $thing ? "'$thing_name' isn't a '$class'" : "'$thing_name' isn't defined";
    }
    elsif( $whatami eq 'object' ) {
        my $my_class = ref $thing;
        $thing_name = qq[An object of class '$my_class'];
        $name = "$thing_name isa '$class'";
        $diag = "The object of class '$my_class' isn't a '$class'";
    }
    elsif( $whatami eq 'reference' ) {
        my $type = ref $thing;
        $thing_name = qq[A reference of type '$type'];
        $name = "$thing_name isa '$class'";
        $diag = "The reference of type '$type' isn't a '$class'";
    }
    elsif( $whatami eq 'undef' ) {
        $thing_name = 'undef';
        $name = "$thing_name isa '$class'";
        $diag = "$thing_name isn't defined";
    }
    elsif( $whatami eq 'class' ) {
        $thing_name = qq[The class (or class-like) '$thing'];
        $name = "$thing_name isa '$class'";
        $diag = "$thing_name isn't a '$class'";
    }
    else {
        die;
    }

    my $ok;
    if($rslt) {
        $ok = $tb->ok( 1, $name );
    }
    else {
        $ok = $tb->ok( 0, $name );
        $tb->diag("    $diag\n");
    }

    return $ok;
}

=item B<new_ok>

  my $obj = new_ok( $class );
  my $obj = new_ok( $class => \@args );
  my $obj = new_ok( $class => \@args, $object_name );

A convenience function which combines creating an object and calling
isa_ok() on that object.

It is basically equivalent to:

    my $obj = $class->new(@args);
    isa_ok $obj, $class, $object_name;

If @args is not given, an empty list will be used.

This function only works on new() and it assumes new() will return
just a single object which isa C<$class>.

=cut

sub new_ok {
    my $tb = Test::More->builder;
    $tb->croak("new_ok() must be given at least a class") unless @_;

    my( $class, $args, $object_name ) = @_;

    $args ||= [];

    my $obj;
    my( $success, $error ) = $tb->_try( sub { $obj = $class->new(@$args); 1 } );
    if($success) {
        local $Test::Builder::Level = $Test::Builder::Level + 1;
        isa_ok $obj, $class, $object_name;
    }
    else {
        $class = 'undef' if !defined $class;
        $tb->ok( 0, "$class->new() died" );
        $tb->diag("    Error was:  $error");
    }

    return $obj;
}

=item B<subtest>

    subtest $name => \&code;

subtest() runs the &code as its own little test with its own plan and
its own result.  The main test counts this as a single test using the
result of the whole subtest to determine if its ok or not ok.

For example...

  use Test::More tests => 3;
 
  pass("First test");

  subtest 'An example subtest' => sub {
      plan tests => 2;

      pass("This is a subtest");
      pass("So is this");
  };

  pass("Third test");

This would produce.

  1..3
  ok 1 - First test
      # Subtest: An example subtest
      1..2
      ok 1 - This is a subtest
      ok 2 - So is this
  ok 2 - An example subtest
  ok 3 - Third test

A subtest may call "skip_all".  No tests will be run, but the subtest is
considered a skip.

  subtest 'skippy' => sub {
      plan skip_all => 'cuz I said so';
      pass('this test will never be run');
  };

Returns true if the subtest passed, false otherwise.

Due to how subtests work, you may omit a plan if you desire.  This adds an
implicit C<done_testing()> to the end of your subtest.  The following two
subtests are equivalent:

  subtest 'subtest with implicit done_testing()', sub {
      ok 1, 'subtests with an implicit done testing should work';
      ok 1, '... and support more than one test';
      ok 1, '... no matter how many tests are run';
  };

  subtest 'subtest with explicit done_testing()', sub {
      ok 1, 'subtests with an explicit done testing should work';
      ok 1, '... and support more than one test';
      ok 1, '... no matter how many tests are run';
      done_testing();
  };

=cut

sub subtest {
    my ($name, $subtests) = @_;

    my $tb = Test::More->builder;
    return $tb->subtest(@_);
}

=item B<pass>

=item B<fail>

  pass($test_name);
  fail($test_name);

Sometimes you just want to say that the tests have passed.  Usually
the case is you've got some complicated condition that is difficult to
wedge into an ok().  In this case, you can simply use pass() (to
declare the test ok) or fail (for not ok).  They are synonyms for
ok(1) and ok(0).

Use these very, very, very sparingly.

=cut

sub pass (;$) {
    my $tb = Test::More->builder;

    return $tb->ok( 1, @_ );
}

sub fail (;$) {
    my $tb = Test::More->builder;

    return $tb->ok( 0, @_ );
}

=back


=head2 Module tests

Sometimes you want to test if a module, or a list of modules, can
successfully load.  For example, you'll often want a first test which
simply loads all the modules in the distribution to make sure they
work before going on to do more complicated testing.

For such purposes we have C<use_ok> and C<require_ok>.

=over 4

=item B<require_ok>

   require_ok($module);
   require_ok($file);

Tries to C<require> the given $module or $file.  If it loads
successfully, the test will pass.  Otherwise it fails and displays the
load error.

C<require_ok> will guess whether the input is a module name or a
filename.

No exception will be thrown if the load fails.

    # require Some::Module
    require_ok "Some::Module";

    # require "Some/File.pl";
    require_ok "Some/File.pl";

    # stop testing if any of your modules will not load
    for my $module (@module) {
        require_ok $module or BAIL_OUT "Can't load $module";
    }

=cut

sub require_ok ($) {
    my($module) = shift;
    my $tb = Test::More->builder;

    my $pack = caller;

    # Try to determine if we've been given a module name or file.
    # Module names must be barewords, files not.
    $module = qq['$module'] unless _is_module_name($module);

    my $code = <<REQUIRE;
package $pack;
require $module;
1;
REQUIRE

    my( $eval_result, $eval_error ) = _eval($code);
    my $ok = $tb->ok( $eval_result, "require $module;" );

    unless($ok) {
        chomp $eval_error;
        $tb->diag(<<DIAGNOSTIC);
    Tried to require '$module'.
    Error:  $eval_error
DIAGNOSTIC

    }

    return $ok;
}

sub _is_module_name {
    my $module = shift;

    # Module names start with a letter.
    # End with an alphanumeric.
    # The rest is an alphanumeric or ::
    $module =~ s/\b::\b//g;

    return $module =~ /^[a-zA-Z]\w*$/ ? 1 : 0;
}


=item B<use_ok>

   BEGIN { use_ok($module); }
   BEGIN { use_ok($module, @imports); }

Like C<require_ok>, but it will C<use> the $module in question and
only loads modules, not files.

If you just want to test a module can be loaded, use C<require_ok>.

If you just want to load a module in a test, we recommend simply using
C<use> directly.  It will cause the test to stop.

It's recommended that you run use_ok() inside a BEGIN block so its
functions are exported at compile-time and prototypes are properly
honored.

If @imports are given, they are passed through to the use.  So this:

   BEGIN { use_ok('Some::Module', qw(foo bar)) }

is like doing this:

   use Some::Module qw(foo bar);

Version numbers can be checked like so:

   # Just like "use Some::Module 1.02"
   BEGIN { use_ok('Some::Module', 1.02) }

Don't try to do this:

   BEGIN {
       use_ok('Some::Module');

       ...some code that depends on the use...
       ...happening at compile time...
   }

because the notion of "compile-time" is relative.  Instead, you want:

  BEGIN { use_ok('Some::Module') }
  BEGIN { ...some code that depends on the use... }

If you want the equivalent of C<use Foo ()>, use a module but not
import anything, use C<require_ok>.

  BEGIN { require_ok "Foo" }

=cut

sub use_ok ($;@) {
    my( $module, @imports ) = @_;
    @imports = () unless @imports;
    my $tb = Test::More->builder;

    my( $pack, $filename, $line ) = caller;
    $filename =~ y/\n\r/_/; # so it doesn't run off the "#line $line $f" line

    my $code;
    if( @imports == 1 and $imports[0] =~ /^\d+(?:\.\d+)?$/ ) {
        # probably a version check.  Perl needs to see the bare number
        # for it to work with non-Exporter based modules.
        $code = <<USE;
package $pack;

#line $line $filename
use $module $imports[0];
1;
USE
    }
    else {
        $code = <<USE;
package $pack;

#line $line $filename
use $module \@{\$args[0]};
1;
USE
    }

    my( $eval_result, $eval_error ) = _eval( $code, \@imports );
    my $ok = $tb->ok( $eval_result, "use $module;" );

    unless($ok) {
        chomp $eval_error;
        $@ =~ s{^BEGIN failed--compilation aborted at .*$}
                {BEGIN failed--compilation aborted at $filename line $line.}m;
        $tb->diag(<<DIAGNOSTIC);
    Tried to use '$module'.
    Error:  $eval_error
DIAGNOSTIC

    }

    return $ok;
}

sub _eval {
    my( $code, @args ) = @_;

    # Work around oddities surrounding resetting of $@ by immediately
    # storing it.
    my( $sigdie, $eval_result, $eval_error );
    {
        local( $@, $!, $SIG{__DIE__} );    # isolate eval
        $eval_result = eval $code;              ## no critic (BuiltinFunctions::ProhibitStringyEval)
        $eval_error  = $@;
        $sigdie      = $SIG{__DIE__} || undef;
    }
    # make sure that $code got a chance to set $SIG{__DIE__}
    $SIG{__DIE__} = $sigdie if defined $sigdie;

    return( $eval_result, $eval_error );
}


=back


=head2 Complex data structures

Not everything is a simple eq check or regex.  There are times you
need to see if two data structures are equivalent.  For these
instances Test::More provides a handful of useful functions.

B<NOTE> I'm not quite sure what will happen with filehandles.

=over 4

=item B<is_deeply>

  is_deeply( $got, $expected, $test_name );

Similar to is(), except that if $got and $expected are references, it
does a deep comparison walking each data structure to see if they are
equivalent.  If the two structures are different, it will display the
place where they start differing.

is_deeply() compares the dereferenced values of references, the
references themselves (except for their type) are ignored.  This means
aspects such as blessing and ties are not considered "different".

is_deeply() currently has very limited handling of function reference
and globs.  It merely checks if they have the same referent.  This may
improve in the future.

L<Test::Differences> and L<Test::Deep> provide more in-depth functionality
along these lines.

=cut

our( @Data_Stack, %Refs_Seen );
my $DNE = bless [], 'Does::Not::Exist';

sub _dne {
    return ref $_[0] eq ref $DNE;
}

## no critic (Subroutines::RequireArgUnpacking)
sub is_deeply {
    my $tb = Test::More->builder;

    unless( @_ == 2 or @_ == 3 ) {
        my $msg = <<'WARNING';
is_deeply() takes two or three args, you gave %d.
This usually means you passed an array or hash instead 
of a reference to it
WARNING
        chop $msg;    # clip off newline so carp() will put in line/file

        _carp sprintf $msg, scalar @_;

        return $tb->ok(0);
    }

    my( $got, $expected, $name ) = @_;

    $tb->_unoverload_str( \$expected, \$got );

    my $ok;
    if( !ref $got and !ref $expected ) {    # neither is a reference
        $ok = $tb->is_eq( $got, $expected, $name );
    }
    elsif( !ref $got xor !ref $expected ) {    # one's a reference, one isn't
        $ok = $tb->ok( 0, $name );
        $tb->diag( _format_stack({ vals => [ $got, $expected ] }) );
    }
    else {                                     # both references
        local @Data_Stack = ();
        if( _deep_check( $got, $expected ) ) {
            $ok = $tb->ok( 1, $name );
        }
        else {
            $ok = $tb->ok( 0, $name );
            $tb->diag( _format_stack(@Data_Stack) );
        }
    }

    return $ok;
}

sub _format_stack {
    my(@Stack) = @_;

    my $var       = '$FOO';
    my $did_arrow = 0;
    foreach my $entry (@Stack) {
        my $type = $entry->{type} || '';
        my $idx = $entry->{'idx'};
        if( $type eq 'HASH' ) {
            $var .= "->" unless $did_arrow++;
            $var .= "{$idx}";
        }
        elsif( $type eq 'ARRAY' ) {
            $var .= "->" unless $did_arrow++;
            $var .= "[$idx]";
        }
        elsif( $type eq 'REF' ) {
            $var = "\${$var}";
        }
    }

    my @vals = @{ $Stack[-1]{vals} }[ 0, 1 ];
    my @vars = ();
    ( $vars[0] = $var ) =~ s/\$FOO/     \$got/;
    ( $vars[1] = $var ) =~ s/\$FOO/\$expected/;

    my $out = "Structures begin differing at:\n";
    foreach my $idx ( 0 .. $#vals ) {
        my $val = $vals[$idx];
        $vals[$idx]
          = !defined $val ? 'undef'
          : _dne($val)    ? "Does not exist"
          : ref $val      ? "$val"
          :                 "'$val'";
    }

    $out .= "$vars[0] = $vals[0]\n";
    $out .= "$vars[1] = $vals[1]\n";

    $out =~ s/^/    /msg;
    return $out;
}

sub _type {
    my $thing = shift;

    return '' if !ref $thing;

    for my $type (qw(Regexp ARRAY HASH REF SCALAR GLOB CODE)) {
        return $type if UNIVERSAL::isa( $thing, $type );
    }

    return '';
}

=back


=head2 Diagnostics

If you pick the right test function, you'll usually get a good idea of
what went wrong when it failed.  But sometimes it doesn't work out
that way.  So here we have ways for you to write your own diagnostic
messages which are safer than just C<print STDERR>.

=over 4

=item B<diag>

  diag(@diagnostic_message);

Prints a diagnostic message which is guaranteed not to interfere with
test output.  Like C<print> @diagnostic_message is simply concatenated
together.

Returns false, so as to preserve failure.

Handy for this sort of thing:

    ok( grep(/foo/, @users), "There's a foo user" ) or
        diag("Since there's no foo, check that /etc/bar is set up right");

which would produce:

    not ok 42 - There's a foo user
    #   Failed test 'There's a foo user'
    #   in foo.t at line 52.
    # Since there's no foo, check that /etc/bar is set up right.

You might remember C<ok() or diag()> with the mnemonic C<open() or
die()>.

B<NOTE> The exact formatting of the diagnostic output is still
changing, but it is guaranteed that whatever you throw at it won't
interfere with the test.

=item B<note>

  note(@diagnostic_message);

Like diag(), except the message will not be seen when the test is run
in a harness.  It will only be visible in the verbose TAP stream.

Handy for putting in notes which might be useful for debugging, but
don't indicate a problem.

    note("Tempfile is $tempfile");

=cut

sub diag {
    return Test::More->builder->diag(@_);
}

sub note {
    return Test::More->builder->note(@_);
}

=item B<explain>

  my @dump = explain @diagnostic_message;

Will dump the contents of any references in a human readable format.
Usually you want to pass this into C<note> or C<diag>.

Handy for things like...

    is_deeply($have, $want) || diag explain $have;

or

    note explain \%args;
    Some::Class->method(%args);

=cut

sub explain {
    return Test::More->builder->explain(@_);
}

=back


=head2 Conditional tests

Sometimes running a test under certain conditions will cause the
test script to die.  A certain function or method isn't implemented
(such as fork() on MacOS), some resource isn't available (like a 
net connection) or a module isn't available.  In these cases it's
necessary to skip tests, or declare that they are supposed to fail
but will work in the future (a todo test).

For more details on the mechanics of skip and todo tests see
L<Test::Harness>.

The way Test::More handles this is with a named block.  Basically, a
block of tests which can be skipped over or made todo.  It's best if I
just show you...

=over 4

=item B<SKIP: BLOCK>

  SKIP: {
      skip $why, $how_many if $condition;

      ...normal testing code goes here...
  }

This declares a block of tests that might be skipped, $how_many tests
there are, $why and under what $condition to skip them.  An example is
the easiest way to illustrate:

    SKIP: {
        eval { require HTML::Lint };

        skip "HTML::Lint not installed", 2 if $@;

        my $lint = new HTML::Lint;
        isa_ok( $lint, "HTML::Lint" );

        $lint->parse( $html );
        is( $lint->errors, 0, "No errors found in HTML" );
    }

If the user does not have HTML::Lint installed, the whole block of
code I<won't be run at all>.  Test::More will output special ok's
which Test::Harness interprets as skipped, but passing, tests.

It's important that $how_many accurately reflects the number of tests
in the SKIP block so the # of tests run will match up with your plan.
If your plan is C<no_plan> $how_many is optional and will default to 1.

It's perfectly safe to nest SKIP blocks.  Each SKIP block must have
the label C<SKIP>, or Test::More can't work its magic.

You don't skip tests which are failing because there's a bug in your
program, or for which you don't yet have code written.  For that you
use TODO.  Read on.

=cut

## no critic (Subroutines::RequireFinalReturn)
sub skip {
    my( $why, $how_many ) = @_;
    my $tb = Test::More->builder;

    unless( defined $how_many ) {
        # $how_many can only be avoided when no_plan is in use.
        _carp "skip() needs to know \$how_many tests are in the block"
          unless $tb->has_plan eq 'no_plan';
        $how_many = 1;
    }

    if( defined $how_many and $how_many =~ /\D/ ) {
        _carp
          "skip() was passed a non-numeric number of tests.  Did you get the arguments backwards?";
        $how_many = 1;
    }

    for( 1 .. $how_many ) {
        $tb->skip($why);
    }

    no warnings 'exiting';
    last SKIP;
}

=item B<TODO: BLOCK>

    TODO: {
        local $TODO = $why if $condition;

        ...normal testing code goes here...
    }

Declares a block of tests you expect to fail and $why.  Perhaps it's
because you haven't fixed a bug or haven't finished a new feature:

    TODO: {
        local $TODO = "URI::Geller not finished";

        my $card = "Eight of clubs";
        is( URI::Geller->your_card, $card, 'Is THIS your card?' );

        my $spoon;
        URI::Geller->bend_spoon;
        is( $spoon, 'bent',    "Spoon bending, that's original" );
    }

With a todo block, the tests inside are expected to fail.  Test::More
will run the tests normally, but print out special flags indicating
they are "todo".  Test::Harness will interpret failures as being ok.
Should anything succeed, it will report it as an unexpected success.
You then know the thing you had todo is done and can remove the
TODO flag.

The nice part about todo tests, as opposed to simply commenting out a
block of tests, is it's like having a programmatic todo list.  You know
how much work is left to be done, you're aware of what bugs there are,
and you'll know immediately when they're fixed.

Once a todo test starts succeeding, simply move it outside the block.
When the block is empty, delete it.


=item B<todo_skip>

    TODO: {
        todo_skip $why, $how_many if $condition;

        ...normal testing code...
    }

With todo tests, it's best to have the tests actually run.  That way
you'll know when they start passing.  Sometimes this isn't possible.
Often a failing test will cause the whole program to die or hang, even
inside an C<eval BLOCK> with and using C<alarm>.  In these extreme
cases you have no choice but to skip over the broken tests entirely.

The syntax and behavior is similar to a C<SKIP: BLOCK> except the
tests will be marked as failing but todo.  Test::Harness will
interpret them as passing.

=cut

sub todo_skip {
    my( $why, $how_many ) = @_;
    my $tb = Test::More->builder;

    unless( defined $how_many ) {
        # $how_many can only be avoided when no_plan is in use.
        _carp "todo_skip() needs to know \$how_many tests are in the block"
          unless $tb->has_plan eq 'no_plan';
        $how_many = 1;
    }

    for( 1 .. $how_many ) {
        $tb->todo_skip($why);
    }

    no warnings 'exiting';
    last TODO;
}

=item When do I use SKIP vs. TODO?

B<If it's something the user might not be able to do>, use SKIP.
This includes optional modules that aren't installed, running under
an OS that doesn't have some feature (like fork() or symlinks), or maybe
you need an Internet connection and one isn't available.

B<If it's something the programmer hasn't done yet>, use TODO.  This
is for any code you haven't written yet, or bugs you have yet to fix,
but want to put tests in your testing script (always a good idea).


=back


=head2 Test control

=over 4

=item B<BAIL_OUT>

    BAIL_OUT($reason);

Indicates to the harness that things are going so badly all testing
should terminate.  This includes the running of any additional test scripts.

This is typically used when testing cannot continue such as a critical
module failing to compile or a necessary external utility not being
available such as a database connection failing.

The test will exit with 255.

For even better control look at L<Test::Most>.

=cut

sub BAIL_OUT {
    my $reason = shift;
    my $tb     = Test::More->builder;

    $tb->BAIL_OUT($reason);
}

=back


=head2 Discouraged comparison functions

The use of the following functions is discouraged as they are not
actually testing functions and produce no diagnostics to help figure
out what went wrong.  They were written before is_deeply() existed
because I couldn't figure out how to display a useful diff of two
arbitrary data structures.

These functions are usually used inside an ok().

    ok( eq_array(\@got, \@expected) );

C<is_deeply()> can do that better and with diagnostics.  

    is_deeply( \@got, \@expected );

They may be deprecated in future versions.

=over 4

=item B<eq_array>

  my $is_eq = eq_array(\@got, \@expected);

Checks if two arrays are equivalent.  This is a deep check, so
multi-level structures are handled correctly.

=cut

#'#
sub eq_array {
    local @Data_Stack = ();
    _deep_check(@_);
}

sub _eq_array {
    my( $a1, $a2 ) = @_;

    if( grep _type($_) ne 'ARRAY', $a1, $a2 ) {
        warn "eq_array passed a non-array ref";
        return 0;
    }

    return 1 if $a1 eq $a2;

    my $ok = 1;
    my $max = $#$a1 > $#$a2 ? $#$a1 : $#$a2;
    for( 0 .. $max ) {
        my $e1 = $_ > $#$a1 ? $DNE : $a1->[$_];
        my $e2 = $_ > $#$a2 ? $DNE : $a2->[$_];

        next if _equal_nonrefs($e1, $e2);

        push @Data_Stack, { type => 'ARRAY', idx => $_, vals => [ $e1, $e2 ] };
        $ok = _deep_check( $e1, $e2 );
        pop @Data_Stack if $ok;

        last unless $ok;
    }

    return $ok;
}

sub _equal_nonrefs {
    my( $e1, $e2 ) = @_;

    return if ref $e1 or ref $e2;

    if ( defined $e1 ) {
        return 1 if defined $e2 and $e1 eq $e2;
    }
    else {
        return 1 if !defined $e2;
    }

    return;
}

sub _deep_check {
    my( $e1, $e2 ) = @_;
    my $tb = Test::More->builder;

    my $ok = 0;

    # Effectively turn %Refs_Seen into a stack.  This avoids picking up
    # the same referenced used twice (such as [\$a, \$a]) to be considered
    # circular.
    local %Refs_Seen = %Refs_Seen;

    {
        $tb->_unoverload_str( \$e1, \$e2 );

        # Either they're both references or both not.
        my $same_ref = !( !ref $e1 xor !ref $e2 );
        my $not_ref = ( !ref $e1 and !ref $e2 );

        if( defined $e1 xor defined $e2 ) {
            $ok = 0;
        }
        elsif( !defined $e1 and !defined $e2 ) {
            # Shortcut if they're both undefined.
            $ok = 1;
        }
        elsif( _dne($e1) xor _dne($e2) ) {
            $ok = 0;
        }
        elsif( $same_ref and( $e1 eq $e2 ) ) {
            $ok = 1;
        }
        elsif($not_ref) {
            push @Data_Stack, { type => '', vals => [ $e1, $e2 ] };
            $ok = 0;
        }
        else {
            if( $Refs_Seen{$e1} ) {
                return $Refs_Seen{$e1} eq $e2;
            }
            else {
                $Refs_Seen{$e1} = "$e2";
            }

            my $type = _type($e1);
            $type = 'DIFFERENT' unless _type($e2) eq $type;

            if( $type eq 'DIFFERENT' ) {
                push @Data_Stack, { type => $type, vals => [ $e1, $e2 ] };
                $ok = 0;
            }
            elsif( $type eq 'ARRAY' ) {
                $ok = _eq_array( $e1, $e2 );
            }
            elsif( $type eq 'HASH' ) {
                $ok = _eq_hash( $e1, $e2 );
            }
            elsif( $type eq 'REF' ) {
                push @Data_Stack, { type => $type, vals => [ $e1, $e2 ] };
                $ok = _deep_check( $$e1, $$e2 );
                pop @Data_Stack if $ok;
            }
            elsif( $type eq 'SCALAR' ) {
                push @Data_Stack, { type => 'REF', vals => [ $e1, $e2 ] };
                $ok = _deep_check( $$e1, $$e2 );
                pop @Data_Stack if $ok;
            }
            elsif($type) {
                push @Data_Stack, { type => $type, vals => [ $e1, $e2 ] };
                $ok = 0;
            }
            else {
                _whoa( 1, "No type in _deep_check" );
            }
        }
    }

    return $ok;
}

sub _whoa {
    my( $check, $desc ) = @_;
    if($check) {
        die <<"WHOA";
WHOA!  $desc
This should never happen!  Please contact the author immediately!
WHOA
    }
}

=item B<eq_hash>

  my $is_eq = eq_hash(\%got, \%expected);

Determines if the two hashes contain the same keys and values.  This
is a deep check.

=cut

sub eq_hash {
    local @Data_Stack = ();
    return _deep_check(@_);
}

sub _eq_hash {
    my( $a1, $a2 ) = @_;

    if( grep _type($_) ne 'HASH', $a1, $a2 ) {
        warn "eq_hash passed a non-hash ref";
        return 0;
    }

    return 1 if $a1 eq $a2;

    my $ok = 1;
    my $bigger = keys %$a1 > keys %$a2 ? $a1 : $a2;
    foreach my $k ( keys %$bigger ) {
        my $e1 = exists $a1->{$k} ? $a1->{$k} : $DNE;
        my $e2 = exists $a2->{$k} ? $a2->{$k} : $DNE;

        next if _equal_nonrefs($e1, $e2);

        push @Data_Stack, { type => 'HASH', idx => $k, vals => [ $e1, $e2 ] };
        $ok = _deep_check( $e1, $e2 );
        pop @Data_Stack if $ok;

        last unless $ok;
    }

    return $ok;
}

=item B<eq_set>

  my $is_eq = eq_set(\@got, \@expected);

Similar to eq_array(), except the order of the elements is B<not>
important.  This is a deep check, but the irrelevancy of order only
applies to the top level.

    ok( eq_set(\@got, \@expected) );

Is better written:

    is_deeply( [sort @got], [sort @expected] );

B<NOTE> By historical accident, this is not a true set comparison.
While the order of elements does not matter, duplicate elements do.

B<NOTE> eq_set() does not know how to deal with references at the top
level.  The following is an example of a comparison which might not work:

    eq_set([\1, \2], [\2, \1]);

L<Test::Deep> contains much better set comparison functions.

=cut

sub eq_set {
    my( $a1, $a2 ) = @_;
    return 0 unless @$a1 == @$a2;

    no warnings 'uninitialized';

    # It really doesn't matter how we sort them, as long as both arrays are
    # sorted with the same algorithm.
    #
    # Ensure that references are not accidentally treated the same as a
    # string containing the reference.
    #
    # Have to inline the sort routine due to a threading/sort bug.
    # See [rt.cpan.org 6782]
    #
    # I don't know how references would be sorted so we just don't sort
    # them.  This means eq_set doesn't really work with refs.
    return eq_array(
        [ grep( ref, @$a1 ), sort( grep( !ref, @$a1 ) ) ],
        [ grep( ref, @$a2 ), sort( grep( !ref, @$a2 ) ) ],
    );
}

=back


=head2 Extending and Embedding Test::More

Sometimes the Test::More interface isn't quite enough.  Fortunately,
Test::More is built on top of Test::Builder which provides a single,
unified backend for any test library to use.  This means two test
libraries which both use Test::Builder B<can be used together in the
same program>.

If you simply want to do a little tweaking of how the tests behave,
you can access the underlying Test::Builder object like so:

=over 4

=item B<builder>

    my $test_builder = Test::More->builder;

Returns the Test::Builder object underlying Test::More for you to play
with.


=back


=head1 EXIT CODES

If all your tests passed, Test::Builder will exit with zero (which is
normal).  If anything failed it will exit with how many failed.  If
you run less (or more) tests than you planned, the missing (or extras)
will be considered failures.  If no tests were ever run Test::Builder
will throw a warning and exit with 255.  If the test died, even after
having successfully completed all its tests, it will still be
considered a failure and will exit with 255.

So the exit codes are...

    0                   all tests successful
    255                 test died or all passed but wrong # of tests run
    any other number    how many failed (including missing or extras)

If you fail more than 254 tests, it will be reported as 254.

B<NOTE>  This behavior may go away in future versions.


=head1 COMPATIBILITY

Test::More works with Perls as old as 5.8.1.

Thread support is not very reliable before 5.10.1, but that's
because threads are not very reliable before 5.10.1.

Although Test::More has been a core module in versions of Perl since 5.6.2, Test::More has evolved since then, and not all of the features you're used to will be present in the shipped version of Test::More. If you are writing a module, don't forget to indicate in your package metadata the minimum version of Test::More that you require. For instance, if you want to use C<done_testing()> but want your test script to run on Perl 5.10.0, you will need to explicitly require Test::More > 0.88.

Key feature milestones include:

=over 4

=item subtests

Subtests were released in Test::More 0.94, which came with Perl 5.12.0. Subtests did not implicitly call C<done_testing()> until 0.96; the first Perl with that fix was Perl 5.14.0 with 0.98.

=item C<done_testing()>

This was released in Test::More 0.88 and first shipped with Perl in 5.10.1 as part of Test::More 0.92. 

=item C<cmp_ok()>

Although C<cmp_ok()> was introduced in 0.40, 0.86 fixed an important bug to make it safe for overloaded objects; the fixed first shipped with Perl in 5.10.1 as part of Test::More 0.92.

=item C<new_ok()> C<note()> and C<explain()>

These were was released in Test::More 0.82, and first shipped with Perl in 5.10.1 as part of Test::More 0.92. 

=back

There is a full version history in the Changes file, and the Test::More versions included as core can be found using L<Module::CoreList>:

    $ corelist -a Test::More


=head1 CAVEATS and NOTES

=over 4

=item utf8 / "Wide character in print"

If you use utf8 or other non-ASCII characters with Test::More you
might get a "Wide character in print" warning.  Using C<binmode
STDOUT, ":utf8"> will not fix it.  Test::Builder (which powers
Test::More) duplicates STDOUT and STDERR.  So any changes to them,
including changing their output disciplines, will not be seem by
Test::More.

One work around is to apply encodings to STDOUT and STDERR as early
as possible and before Test::More (or any other Test module) loads.

    use open ':std', ':encoding(utf8)';
    use Test::More;

A more direct work around is to change the filehandles used by
Test::Builder.

    my $builder = Test::More->builder;
    binmode $builder->output,         ":encoding(utf8)";
    binmode $builder->failure_output, ":encoding(utf8)";
    binmode $builder->todo_output,    ":encoding(utf8)";


=item Overloaded objects

String overloaded objects are compared B<as strings> (or in cmp_ok()'s
case, strings or numbers as appropriate to the comparison op).  This
prevents Test::More from piercing an object's interface allowing
better blackbox testing.  So if a function starts returning overloaded
objects instead of bare strings your tests won't notice the
difference.  This is good.

However, it does mean that functions like is_deeply() cannot be used to
test the internals of string overloaded objects.  In this case I would
suggest L<Test::Deep> which contains more flexible testing functions for
complex data structures.


=item Threads

Test::More will only be aware of threads if "use threads" has been done
I<before> Test::More is loaded.  This is ok:

    use threads;
    use Test::More;

This may cause problems:

    use Test::More
    use threads;

5.8.1 and above are supported.  Anything below that has too many bugs.

=back


=head1 HISTORY

This is a case of convergent evolution with Joshua Pritikin's Test
module.  I was largely unaware of its existence when I'd first
written my own ok() routines.  This module exists because I can't
figure out how to easily wedge test names into Test's interface (along
with a few other problems).

The goal here is to have a testing utility that's simple to learn,
quick to use and difficult to trip yourself up with while still
providing more flexibility than the existing Test.pm.  As such, the
names of the most common routines are kept tiny, special cases and
magic side-effects are kept to a minimum.  WYSIWYG.


=head1 SEE ALSO

L<Test::Simple> if all this confuses you and you just want to write
some tests.  You can upgrade to Test::More later (it's forward
compatible).

L<Test::Harness> is the test runner and output interpreter for Perl.
It's the thing that powers C<make test> and where the C<prove> utility
comes from.

L<Test::Legacy> tests written with Test.pm, the original testing
module, do not play well with other testing libraries.  Test::Legacy
emulates the Test.pm interface and does play well with others.

L<Test::Differences> for more ways to test complex data structures.
And it plays well with Test::More.

L<Test::Class> is like xUnit but more perlish.

L<Test::Deep> gives you more powerful complex data structure testing.

L<Test::Inline> shows the idea of embedded testing.

L<Bundle::Test> installs a whole bunch of useful test modules.


=head1 AUTHORS

Michael G Schwern E<lt>schwern@pobox.comE<gt> with much inspiration
from Joshua Pritikin's Test module and lots of help from Barrie
Slaymaker, Tony Bowden, blackstar.co.uk, chromatic, Fergal Daly and
the perl-qa gang.


=head1 BUGS

See F<http://rt.cpan.org> to report and view bugs.


=head1 SOURCE

The source code repository for Test::More can be found at
F<http://github.com/schwern/test-more/>.


=head1 COPYRIGHT

Copyright 2001-2008 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See F<http://www.perl.com/perl/misc/Artistic.html>

=cut

1;
                                                                                                                                                                                                                                                                                                                                       usr/share/perl/5.20.2/Test/Simple.pm                                                                0100644 0000000 0000000 00000014507 12744441327 015373  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Test::Simple;

use 5.006;

use strict;

our $VERSION = '1.001002';
$VERSION = eval $VERSION;    ## no critic (BuiltinFunctions::ProhibitStringyEval)

use Test::Builder::Module 0.99;
our @ISA    = qw(Test::Builder::Module);
our @EXPORT = qw(ok);

my $CLASS = __PACKAGE__;

=head1 NAME

Test::Simple - Basic utilities for writing tests.

=head1 SYNOPSIS

  use Test::Simple tests => 1;

  ok( $foo eq $bar, 'foo is bar' );


=head1 DESCRIPTION

** If you are unfamiliar with testing B<read Test::Tutorial> first! **

This is an extremely simple, extremely basic module for writing tests
suitable for CPAN modules and other pursuits.  If you wish to do more
complicated testing, use the Test::More module (a drop-in replacement
for this one).

The basic unit of Perl testing is the ok.  For each thing you want to
test your program will print out an "ok" or "not ok" to indicate pass
or fail.  You do this with the ok() function (see below).

The only other constraint is you must pre-declare how many tests you
plan to run.  This is in case something goes horribly wrong during the
test and your test program aborts, or skips a test or whatever.  You
do this like so:

    use Test::Simple tests => 23;

You must have a plan.


=over 4

=item B<ok>

  ok( $foo eq $bar, $name );
  ok( $foo eq $bar );

ok() is given an expression (in this case C<$foo eq $bar>).  If it's
true, the test passed.  If it's false, it didn't.  That's about it.

ok() prints out either "ok" or "not ok" along with a test number (it
keeps track of that for you).

  # This produces "ok 1 - Hell not yet frozen over" (or not ok)
  ok( get_temperature($hell) > 0, 'Hell not yet frozen over' );

If you provide a $name, that will be printed along with the "ok/not
ok" to make it easier to find your test when if fails (just search for
the name).  It also makes it easier for the next guy to understand
what your test is for.  It's highly recommended you use test names.

All tests are run in scalar context.  So this:

    ok( @stuff, 'I have some stuff' );

will do what you mean (fail if stuff is empty)

=cut

sub ok ($;$) {    ## no critic (Subroutines::ProhibitSubroutinePrototypes)
    return $CLASS->builder->ok(@_);
}

=back

Test::Simple will start by printing number of tests run in the form
"1..M" (so "1..5" means you're going to run 5 tests).  This strange
format lets Test::Harness know how many tests you plan on running in
case something goes horribly wrong.

If all your tests passed, Test::Simple will exit with zero (which is
normal).  If anything failed it will exit with how many failed.  If
you run less (or more) tests than you planned, the missing (or extras)
will be considered failures.  If no tests were ever run Test::Simple
will throw a warning and exit with 255.  If the test died, even after
having successfully completed all its tests, it will still be
considered a failure and will exit with 255.

So the exit codes are...

    0                   all tests successful
    255                 test died or all passed but wrong # of tests run
    any other number    how many failed (including missing or extras)

If you fail more than 254 tests, it will be reported as 254.

This module is by no means trying to be a complete testing system.
It's just to get you started.  Once you're off the ground its
recommended you look at L<Test::More>.


=head1 EXAMPLE

Here's an example of a simple .t file for the fictional Film module.

    use Test::Simple tests => 5;

    use Film;  # What you're testing.

    my $btaste = Film->new({ Title    => 'Bad Taste',
                             Director => 'Peter Jackson',
                             Rating   => 'R',
                             NumExplodingSheep => 1
                           });
    ok( defined($btaste) && ref $btaste eq 'Film',     'new() works' );

    ok( $btaste->Title      eq 'Bad Taste',     'Title() get'    );
    ok( $btaste->Director   eq 'Peter Jackson', 'Director() get' );
    ok( $btaste->Rating     eq 'R',             'Rating() get'   );
    ok( $btaste->NumExplodingSheep == 1,        'NumExplodingSheep() get' );

It will produce output like this:

    1..5
    ok 1 - new() works
    ok 2 - Title() get
    ok 3 - Director() get
    not ok 4 - Rating() get
    #   Failed test 'Rating() get'
    #   in t/film.t at line 14.
    ok 5 - NumExplodingSheep() get
    # Looks like you failed 1 tests of 5

Indicating the Film::Rating() method is broken.


=head1 CAVEATS

Test::Simple will only report a maximum of 254 failures in its exit
code.  If this is a problem, you probably have a huge test script.
Split it into multiple files.  (Otherwise blame the Unix folks for
using an unsigned short integer as the exit status).

Because VMS's exit codes are much, much different than the rest of the
universe, and perl does horrible mangling to them that gets in my way,
it works like this on VMS.

    0     SS$_NORMAL        all tests successful
    4     SS$_ABORT         something went wrong

Unfortunately, I can't differentiate any further.


=head1 NOTES

Test::Simple is B<explicitly> tested all the way back to perl 5.6.0.

Test::Simple is thread-safe in perl 5.8.1 and up.

=head1 HISTORY

This module was conceived while talking with Tony Bowden in his
kitchen one night about the problems I was having writing some really
complicated feature into the new Testing module.  He observed that the
main problem is not dealing with these edge cases but that people hate
to write tests B<at all>.  What was needed was a dead simple module
that took all the hard work out of testing and was really, really easy
to learn.  Paul Johnson simultaneously had this idea (unfortunately,
he wasn't in Tony's kitchen).  This is it.


=head1 SEE ALSO

=over 4

=item L<Test::More>

More testing functions!  Once you outgrow Test::Simple, look at
Test::More.  Test::Simple is 100% forward compatible with Test::More
(i.e. you can just use Test::More instead of Test::Simple in your
programs and things will still work).

=back

Look in Test::More's SEE ALSO for more testing modules.


=head1 AUTHORS

Idea by Tony Bowden and Paul Johnson, code by Michael G Schwern
E<lt>schwern@pobox.comE<gt>, wardrobe by Calvin Klein.


=head1 COPYRIGHT

Copyright 2001-2008 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.

This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.

See F<http://www.perl.com/perl/misc/Artistic.html>

=cut

1;
                                                                                                                                                                                         usr/share/perl/5.20.2/Test/Tutorial.pod                                                             0100644 0000000 0000000 00000045475 12744441327 016123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

Test::Tutorial - A tutorial about writing really basic tests

=head1 DESCRIPTION


I<AHHHHHHH!!!!  NOT TESTING!  Anything but testing!
Beat me, whip me, send me to Detroit, but don't make
me write tests!>

I<*sob*>

I<Besides, I don't know how to write the damned things.>


Is this you?  Is writing tests right up there with writing
documentation and having your fingernails pulled out?  Did you open up
a test and read

    ######## We start with some black magic

and decide that's quite enough for you?

It's ok.  That's all gone now.  We've done all the black magic for
you.  And here are the tricks...


=head2 Nuts and bolts of testing.

Here's the most basic test program.

    #!/usr/bin/perl -w

    print "1..1\n";

    print 1 + 1 == 2 ? "ok 1\n" : "not ok 1\n";

Because 1 + 1 is 2, it prints:

    1..1
    ok 1

What this says is: C<1..1> "I'm going to run one test." [1] C<ok 1>
"The first test passed".  And that's about all magic there is to
testing.  Your basic unit of testing is the I<ok>.  For each thing you
test, an C<ok> is printed.  Simple.  L<Test::Harness> interprets your test
results to determine if you succeeded or failed (more on that later).

Writing all these print statements rapidly gets tedious.  Fortunately,
there's L<Test::Simple>.  It has one function, C<ok()>.

    #!/usr/bin/perl -w

    use Test::Simple tests => 1;

    ok( 1 + 1 == 2 );

That does the same thing as the previous code.  C<ok()> is the backbone
of Perl testing, and we'll be using it instead of roll-your-own from
here on.  If C<ok()> gets a true value, the test passes.  False, it
fails.

    #!/usr/bin/perl -w

    use Test::Simple tests => 2;
    ok( 1 + 1 == 2 );
    ok( 2 + 2 == 5 );

From that comes:

    1..2
    ok 1
    not ok 2
    #     Failed test (test.pl at line 5)
    # Looks like you failed 1 tests of 2.

C<1..2> "I'm going to run two tests."  This number is a I<plan>. It helps to
ensure your test program ran all the way through and didn't die or skip some
tests.  C<ok 1> "The first test passed."  C<not ok 2> "The second test failed".
Test::Simple helpfully prints out some extra commentary about your tests.

It's not scary.  Come, hold my hand.  We're going to give an example
of testing a module.  For our example, we'll be testing a date
library, L<Date::ICal>.  It's on CPAN, so download a copy and follow
along. [2]


=head2 Where to start?

This is the hardest part of testing, where do you start?  People often get
overwhelmed at the apparent enormity of the task of testing a whole module.
The best place to start is at the beginning.  C<Date::ICal> is an
object-oriented module, and that means you start by making an object.  Test
C<new()>.

    #!/usr/bin/perl -w

    # assume these two lines are in all subsequent examples
    use strict;
    use warnings;

    use Test::Simple tests => 2;

    use Date::ICal;

    my $ical = Date::ICal->new;         # create an object
    ok( defined $ical );                # check that we got something
    ok( $ical->isa('Date::ICal') );     # and it's the right class

Run that and you should get:

    1..2
    ok 1
    ok 2

Congratulations! You've written your first useful test.


=head2 Names

That output isn't terribly descriptive, is it?  When you have two tests you can
figure out which one is #2, but what if you have 102 tests?

Each test can be given a little descriptive name as the second
argument to C<ok()>.

    use Test::Simple tests => 2;

    ok( defined $ical,              'new() returned something' );
    ok( $ical->isa('Date::ICal'),   "  and it's the right class" );

Now you'll see:

    1..2
    ok 1 - new() returned something
    ok 2 -   and it's the right class


=head2 Test the manual

The simplest way to build up a decent testing suite is to just test what
the manual says it does. [3] Let's pull something out of the
L<Date::ICal/SYNOPSIS> and test that all its bits work.

    #!/usr/bin/perl -w

    use Test::Simple tests => 8;

    use Date::ICal;

    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );

    ok( defined $ical,            'new() returned something' );
    ok( $ical->isa('Date::ICal'), "  and it's the right class" );
    ok( $ical->sec   == 47,       '  sec()'   );
    ok( $ical->min   == 12,       '  min()'   );
    ok( $ical->hour  == 16,       '  hour()'  );
    ok( $ical->day   == 17,       '  day()'   );
    ok( $ical->month == 10,       '  month()' );
    ok( $ical->year  == 1964,     '  year()'  );

Run that and you get:

    1..8
    ok 1 - new() returned something
    ok 2 -   and it's the right class
    ok 3 -   sec()
    ok 4 -   min()
    ok 5 -   hour()
    not ok 6 -   day()
    #     Failed test (- at line 16)
    ok 7 -   month()
    ok 8 -   year()
    # Looks like you failed 1 tests of 8.

Whoops, a failure! [4] C<Test::Simple> helpfully lets us know on what line the
failure occurred, but not much else.  We were supposed to get 17, but we
didn't.  What did we get??  Dunno.  You could re-run the test in the debugger
or throw in some print statements to find out.

Instead, switch from L<Test::Simple> to L<Test::More>.  C<Test::More>
does everything C<Test::Simple> does, and more!  In fact, C<Test::More> does
things I<exactly> the way C<Test::Simple> does.  You can literally swap
C<Test::Simple> out and put C<Test::More> in its place.  That's just what
we're going to do.

C<Test::More> does more than C<Test::Simple>.  The most important difference at
this point is it provides more informative ways to say "ok".  Although you can
write almost any test with a generic C<ok()>, it can't tell you what went
wrong.  The C<is()> function lets us declare that something is supposed to be
the same as something else:

    use Test::More tests => 8;

    use Date::ICal;

    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );

    ok( defined $ical,            'new() returned something' );
    ok( $ical->isa('Date::ICal'), "  and it's the right class" );
    is( $ical->sec,     47,       '  sec()'   );
    is( $ical->min,     12,       '  min()'   );
    is( $ical->hour,    16,       '  hour()'  );
    is( $ical->day,     17,       '  day()'   );
    is( $ical->month,   10,       '  month()' );
    is( $ical->year,    1964,     '  year()'  );

"Is C<$ical-E<gt>sec> 47?"  "Is C<$ical-E<gt>min> 12?"  With C<is()> in place,
you get more information:

    1..8
    ok 1 - new() returned something
    ok 2 -   and it's the right class
    ok 3 -   sec()
    ok 4 -   min()
    ok 5 -   hour()
    not ok 6 -   day()
    #     Failed test (- at line 16)
    #          got: '16'
    #     expected: '17'
    ok 7 -   month()
    ok 8 -   year()
    # Looks like you failed 1 tests of 8.

Aha. C<$ical-E<gt>day> returned 16, but we expected 17.  A
quick check shows that the code is working fine, we made a mistake
when writing the tests.  Change it to:

    is( $ical->day,     16,       '  day()'   );

... and everything works.

Any time you're doing a "this equals that" sort of test, use C<is()>.
It even works on arrays.  The test is always in scalar context, so you
can test how many elements are in an array this way. [5]

    is( @foo, 5, 'foo has 5 elements' );


=head2 Sometimes the tests are wrong

This brings up a very important lesson.  Code has bugs.  Tests are
code.  Ergo, tests have bugs.  A failing test could mean a bug in the
code, but don't discount the possibility that the test is wrong.

On the flip side, don't be tempted to prematurely declare a test
incorrect just because you're having trouble finding the bug.
Invalidating a test isn't something to be taken lightly, and don't use
it as a cop out to avoid work.


=head2 Testing lots of values

We're going to be wanting to test a lot of dates here, trying to trick
the code with lots of different edge cases.  Does it work before 1970?
After 2038?  Before 1904?  Do years after 10,000 give it trouble?
Does it get leap years right?  We could keep repeating the code above,
or we could set up a little try/expect loop.

    use Test::More tests => 32;
    use Date::ICal;

    my %ICal_Dates = (
            # An ICal string     And the year, month, day
            #                    hour, minute and second we expect.
            '19971024T120000' =>    # from the docs.
                                [ 1997, 10, 24, 12,  0,  0 ],
            '20390123T232832' =>    # after the Unix epoch
                                [ 2039,  1, 23, 23, 28, 32 ],
            '19671225T000000' =>    # before the Unix epoch
                                [ 1967, 12, 25,  0,  0,  0 ],
            '18990505T232323' =>    # before the MacOS epoch
                                [ 1899,  5,  5, 23, 23, 23 ],
    );


    while( my($ical_str, $expect) = each %ICal_Dates ) {
        my $ical = Date::ICal->new( ical => $ical_str );

        ok( defined $ical,            "new(ical => '$ical_str')" );
        ok( $ical->isa('Date::ICal'), "  and it's the right class" );

        is( $ical->year,    $expect->[0],     '  year()'  );
        is( $ical->month,   $expect->[1],     '  month()' );
        is( $ical->day,     $expect->[2],     '  day()'   );
        is( $ical->hour,    $expect->[3],     '  hour()'  );
        is( $ical->min,     $expect->[4],     '  min()'   );
        is( $ical->sec,     $expect->[5],     '  sec()'   );
    }

Now we can test bunches of dates by just adding them to
C<%ICal_Dates>.  Now that it's less work to test with more dates, you'll
be inclined to just throw more in as you think of them.
Only problem is, every time we add to that we have to keep adjusting
the C<use Test::More tests =E<gt> ##> line.  That can rapidly get
annoying.  There are ways to make this work better.

First, we can calculate the plan dynamically using the C<plan()>
function.

    use Test::More;
    use Date::ICal;

    my %ICal_Dates = (
        ...same as before...
    );

    # For each key in the hash we're running 8 tests.
    plan tests => keys(%ICal_Dates) * 8;

    ...and then your tests...

To be even more flexible, use C<done_testing>.  This means we're just
running some tests, don't know how many. [6]

    use Test::More;   # instead of tests => 32

    ... # tests here

    done_testing();   # reached the end safely

If you don't specify a plan, C<Test::More> expects to see C<done_testing()>
before your program exits. It will warn you if you forget it. You can give
C<done_testing()> an optional number of tests you expected to run, and if the
number ran differs, C<Test::More> will give you another kind of warning.


=head2 Informative names

Take a look at the line:

    ok( defined $ical,            "new(ical => '$ical_str')" );

We've added more detail about what we're testing and the ICal string
itself we're trying out to the name.  So you get results like:

    ok 25 - new(ical => '19971024T120000')
    ok 26 -   and it's the right class
    ok 27 -   year()
    ok 28 -   month()
    ok 29 -   day()
    ok 30 -   hour()
    ok 31 -   min()
    ok 32 -   sec()

If something in there fails, you'll know which one it was and that
will make tracking down the problem easier.  Try to put a bit of
debugging information into the test names.

Describe what the tests test, to make debugging a failed test easier
for you or for the next person who runs your test.


=head2 Skipping tests

Poking around in the existing Date::ICal tests, I found this in
F<t/01sanity.t> [7]

    #!/usr/bin/perl -w

    use Test::More tests => 7;
    use Date::ICal;

    # Make sure epoch time is being handled sanely.
    my $t1 = Date::ICal->new( epoch => 0 );
    is( $t1->epoch, 0,          "Epoch time of 0" );

    # XXX This will only work on unix systems.
    is( $t1->ical, '19700101Z', "  epoch to ical" );

    is( $t1->year,  1970,       "  year()"  );
    is( $t1->month, 1,          "  month()" );
    is( $t1->day,   1,          "  day()"   );

    # like the tests above, but starting with ical instead of epoch
    my $t2 = Date::ICal->new( ical => '19700101Z' );
    is( $t2->ical, '19700101Z', "Start of epoch in ICal notation" );

    is( $t2->epoch, 0,          "  and back to ICal" );

The beginning of the epoch is different on most non-Unix operating systems [8].
Even though Perl smooths out the differences for the most part, certain ports
do it differently.  MacPerl is one off the top of my head. [9]  Rather than
putting a comment in the test and hoping someone will read the test while
debugging the failure, we can explicitly say it's never going to work and skip
the test.

    use Test::More tests => 7;
    use Date::ICal;

    # Make sure epoch time is being handled sanely.
    my $t1 = Date::ICal->new( epoch => 0 );
    is( $t1->epoch, 0,          "Epoch time of 0" );

    SKIP: {
        skip('epoch to ICal not working on Mac OS', 6)
            if $^O eq 'MacOS';

        is( $t1->ical, '19700101Z', "  epoch to ical" );

        is( $t1->year,  1970,       "  year()"  );
        is( $t1->month, 1,          "  month()" );
        is( $t1->day,   1,          "  day()"   );

        # like the tests above, but starting with ical instead of epoch
        my $t2 = Date::ICal->new( ical => '19700101Z' );
        is( $t2->ical, '19700101Z', "Start of epoch in ICal notation" );

        is( $t2->epoch, 0,          "  and back to ICal" );
    }

A little bit of magic happens here.  When running on anything but MacOS, all
the tests run normally.  But when on MacOS, C<skip()> causes the entire
contents of the SKIP block to be jumped over.  It never runs.  Instead,
C<skip()> prints special output that tells C<Test::Harness> that the tests have
been skipped.

    1..7
    ok 1 - Epoch time of 0
    ok 2 # skip epoch to ICal not working on MacOS
    ok 3 # skip epoch to ICal not working on MacOS
    ok 4 # skip epoch to ICal not working on MacOS
    ok 5 # skip epoch to ICal not working on MacOS
    ok 6 # skip epoch to ICal not working on MacOS
    ok 7 # skip epoch to ICal not working on MacOS

This means your tests won't fail on MacOS.  This means fewer emails
from MacPerl users telling you about failing tests that you know will
never work.  You've got to be careful with skip tests.  These are for
tests which don't work and I<never will>.  It is not for skipping
genuine bugs (we'll get to that in a moment).

The tests are wholly and completely skipped. [10]  This will work.

    SKIP: {
        skip("I don't wanna die!");

        die, die, die, die, die;
    }


=head2 Todo tests

While thumbing through the C<Date::ICal> man page, I came across this:

   ical

       $ical_string = $ical->ical;

   Retrieves, or sets, the date on the object, using any
   valid ICal date/time string.

"Retrieves or sets".  Hmmm. I didn't see a test for using C<ical()> to set
the date in the Date::ICal test suite.  So I wrote one:

    use Test::More tests => 1;
    use Date::ICal;

    my $ical = Date::ICal->new;
    $ical->ical('20201231Z');
    is( $ical->ical, '20201231Z',   'Setting via ical()' );

Run that. I saw:

    1..1
    not ok 1 - Setting via ical()
    #     Failed test (- at line 6)
    #          got: '20010814T233649Z'
    #     expected: '20201231Z'
    # Looks like you failed 1 tests of 1.

Whoops!  Looks like it's unimplemented.  Assume you don't have the time to fix
this. [11] Normally, you'd just comment out the test and put a note in a todo
list somewhere.  Instead, explicitly state "this test will fail" by wrapping it
in a C<TODO> block:

    use Test::More tests => 1;

    TODO: {
        local $TODO = 'ical($ical) not yet implemented';

        my $ical = Date::ICal->new;
        $ical->ical('20201231Z');

        is( $ical->ical, '20201231Z',   'Setting via ical()' );
    }

Now when you run, it's a little different:

    1..1
    not ok 1 - Setting via ical() # TODO ical($ical) not yet implemented
    #          got: '20010822T201551Z'
    #     expected: '20201231Z'

C<Test::More> doesn't say "Looks like you failed 1 tests of 1".  That '#
TODO' tells C<Test::Harness> "this is supposed to fail" and it treats a
failure as a successful test.  You can write tests even before
you've fixed the underlying code.

If a TODO test passes, C<Test::Harness> will report it "UNEXPECTEDLY
SUCCEEDED".  When that happens, remove the TODO block with C<local $TODO> and
turn it into a real test.


=head2 Testing with taint mode.

Taint mode is a funny thing.  It's the globalest of all global
features.  Once you turn it on, it affects I<all> code in your program
and I<all> modules used (and all the modules they use).  If a single
piece of code isn't taint clean, the whole thing explodes.  With that
in mind, it's very important to ensure your module works under taint
mode.

It's very simple to have your tests run under taint mode.  Just throw
a C<-T> into the C<#!> line.  C<Test::Harness> will read the switches
in C<#!> and use them to run your tests.

    #!/usr/bin/perl -Tw

    ...test normally here...

When you say C<make test> it will run with taint mode on.


=head1 FOOTNOTES

=over 4

=item 1

The first number doesn't really mean anything, but it has to be 1.
It's the second number that's important.

=item 2

For those following along at home, I'm using version 1.31.  It has
some bugs, which is good -- we'll uncover them with our tests.

=item 3

You can actually take this one step further and test the manual
itself.  Have a look at L<Test::Inline> (formerly L<Pod::Tests>).

=item 4

Yes, there's a mistake in the test suite.  What!  Me, contrived?

=item 5

We'll get to testing the contents of lists later.

=item 6

But what happens if your test program dies halfway through?!  Since we
didn't say how many tests we're going to run, how can we know it
failed?  No problem, C<Test::More> employs some magic to catch that death
and turn the test into a failure, even if every test passed up to that
point.

=item 7

I cleaned it up a little.

=item 8

Most Operating Systems record time as the number of seconds since a
certain date.  This date is the beginning of the epoch.  Unix's starts
at midnight January 1st, 1970 GMT.

=item 9

MacOS's epoch is midnight January 1st, 1904.  VMS's is midnight,
November 17th, 1858, but vmsperl emulates the Unix epoch so it's not a
problem.

=item 10

As long as the code inside the SKIP block at least compiles.  Please
don't ask how.  No, it's not a filter.

=item 11

Do NOT be tempted to use TODO tests as a way to avoid fixing simple
bugs!

=back

=head1 AUTHORS

Michael G Schwern E<lt>schwern@pobox.comE<gt> and the perl-qa dancers!

=head1 COPYRIGHT

Copyright 2001 by Michael G Schwern E<lt>schwern@pobox.comE<gt>.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in these files
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.

=cut
                                                                                                                                                                                                   usr/share/perl/5.20.2/Test.pm                                                                       0100644 0000000 0000000 00000070334 12744441327 014142  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
require 5.004;
package Test;

use strict;

use Carp;
use vars (qw($VERSION @ISA @EXPORT @EXPORT_OK $ntest $TestLevel), #public-ish
          qw($TESTOUT $TESTERR %Program_Lines $told_about_diff
             $ONFAIL %todo %history $planned @FAILDETAIL) #private-ish
         );

# In case a test is run in a persistent environment.
sub _reset_globals {
    %todo       = ();
    %history    = ();
    @FAILDETAIL = ();
    $ntest      = 1;
    $TestLevel  = 0;		# how many extra stack frames to skip
    $planned    = 0;
}

$VERSION = '1.26';
require Exporter;
@ISA=('Exporter');

@EXPORT    = qw(&plan &ok &skip);
@EXPORT_OK = qw($ntest $TESTOUT $TESTERR);

$|=1;
$TESTOUT = *STDOUT{IO};
$TESTERR = *STDERR{IO};

# Use of this variable is strongly discouraged.  It is set mainly to
# help test coverage analyzers know which test is running.
$ENV{REGRESSION_TEST} = $0;


=head1 NAME

Test - provides a simple framework for writing test scripts

=head1 SYNOPSIS

  use strict;
  use Test;

  # use a BEGIN block so we print our plan before MyModule is loaded
  BEGIN { plan tests => 14, todo => [3,4] }

  # load your module...
  use MyModule;

  # Helpful notes.  All note-lines must start with a "#".
  print "# I'm testing MyModule version $MyModule::VERSION\n";

  ok(0); # failure
  ok(1); # success

  ok(0); # ok, expected failure (see todo list, above)
  ok(1); # surprise success!

  ok(0,1);             # failure: '0' ne '1'
  ok('broke','fixed'); # failure: 'broke' ne 'fixed'
  ok('fixed','fixed'); # success: 'fixed' eq 'fixed'
  ok('fixed',qr/x/);   # success: 'fixed' =~ qr/x/

  ok(sub { 1+1 }, 2);  # success: '2' eq '2'
  ok(sub { 1+1 }, 3);  # failure: '2' ne '3'

  my @list = (0,0);
  ok @list, 3, "\@list=".join(',',@list);      #extra notes
  ok 'segmentation fault', '/(?i)success/';    #regex match

  skip(
    $^O =~ m/MSWin/ ? "Skip if MSWin" : 0,  # whether to skip
    $foo, $bar  # arguments just like for ok(...)
  );
  skip(
    $^O =~ m/MSWin/ ? 0 : "Skip unless MSWin",  # whether to skip
    $foo, $bar  # arguments just like for ok(...)
  );

=head1 DESCRIPTION

This module simplifies the task of writing test files for Perl modules,
such that their output is in the format that
L<Test::Harness|Test::Harness> expects to see.

=head1 QUICK START GUIDE

To write a test for your new (and probably not even done) module, create
a new file called F<t/test.t> (in a new F<t> directory). If you have
multiple test files, to test the "foo", "bar", and "baz" feature sets,
then feel free to call your files F<t/foo.t>, F<t/bar.t>, and
F<t/baz.t>

=head2 Functions

This module defines three public functions, C<plan(...)>, C<ok(...)>,
and C<skip(...)>.  By default, all three are exported by
the C<use Test;> statement.

=over 4

=item C<plan(...)>

     BEGIN { plan %theplan; }

This should be the first thing you call in your test script.  It
declares your testing plan, how many there will be, if any of them
should be allowed to fail, and so on.

Typical usage is just:

     use Test;
     BEGIN { plan tests => 23 }

These are the things that you can put in the parameters to plan:

=over

=item C<tests =E<gt> I<number>>

The number of tests in your script.
This means all ok() and skip() calls.

=item C<todo =E<gt> [I<1,5,14>]>

A reference to a list of tests which are allowed to fail.
See L</TODO TESTS>.

=item C<onfail =E<gt> sub { ... }>

=item C<onfail =E<gt> \&some_sub>

A subroutine reference to be run at the end of the test script, if
any of the tests fail.  See L</ONFAIL>.

=back

You must call C<plan(...)> once and only once.  You should call it
in a C<BEGIN {...}> block, like so:

     BEGIN { plan tests => 23 }

=cut

sub plan {
    croak "Test::plan(%args): odd number of arguments" if @_ & 1;
    croak "Test::plan(): should not be called more than once" if $planned;

    local($\, $,);   # guard against -l and other things that screw with
                     # print

    _reset_globals();

    _read_program( (caller)[1] );

    my $max=0;
    while (@_) {
	my ($k,$v) = splice(@_, 0, 2);
	if ($k =~ /^test(s)?$/) { $max = $v; }
	elsif ($k eq 'todo' or
	       $k eq 'failok') { for (@$v) { $todo{$_}=1; }; }
	elsif ($k eq 'onfail') {
	    ref $v eq 'CODE' or croak "Test::plan(onfail => $v): must be CODE";
	    $ONFAIL = $v;
	}
	else { carp "Test::plan(): skipping unrecognized directive '$k'" }
    }
    my @todo = sort { $a <=> $b } keys %todo;
    if (@todo) {
	print $TESTOUT "1..$max todo ".join(' ', @todo).";\n";
    } else {
	print $TESTOUT "1..$max\n";
    }
    ++$planned;
    print $TESTOUT "# Running under perl version $] for $^O",
      (chr(65) eq 'A') ? "\n" : " in a non-ASCII world\n";

    print $TESTOUT "# Win32::BuildNumber ", &Win32::BuildNumber(), "\n"
      if defined(&Win32::BuildNumber) and defined &Win32::BuildNumber();

    print $TESTOUT "# MacPerl version $MacPerl::Version\n"
      if defined $MacPerl::Version;

    printf $TESTOUT
      "# Current time local: %s\n# Current time GMT:   %s\n",
      scalar(localtime($^T)), scalar(gmtime($^T));

    print $TESTOUT "# Using Test.pm version $VERSION\n";

    # Retval never used:
    return undef;
}

sub _read_program {
  my($file) = shift;
  return unless defined $file and length $file
    and -e $file and -f _ and -r _;
  open(SOURCEFILE, "<$file") || return;
  $Program_Lines{$file} = [<SOURCEFILE>];
  close(SOURCEFILE);

  foreach my $x (@{$Program_Lines{$file}})
   { $x =~ tr/\cm\cj\n\r//d }

  unshift @{$Program_Lines{$file}}, '';
  return 1;
}

=begin _private

=item B<_to_value>

  my $value = _to_value($input);

Converts an C<ok> parameter to its value.  Typically this just means
running it, if it's a code reference.  You should run all inputted
values through this.

=cut

sub _to_value {
    my ($v) = @_;
    return ref $v eq 'CODE' ? $v->() : $v;
}

sub _quote {
    my $str = $_[0];
    return "<UNDEF>" unless defined $str;
    $str =~ s/\\/\\\\/g;
    $str =~ s/"/\\"/g;
    $str =~ s/\a/\\a/g;
    $str =~ s/[\b]/\\b/g;
    $str =~ s/\e/\\e/g;
    $str =~ s/\f/\\f/g;
    $str =~ s/\n/\\n/g;
    $str =~ s/\r/\\r/g;
    $str =~ s/\t/\\t/g;
    $str =~ s/([\0-\037])(?!\d)/sprintf('\\%o',ord($1))/eg;
    $str =~ s/([\0-\037\177-\377])/sprintf('\\x%02X',ord($1))/eg;
    $str =~ s/([^\0-\176])/sprintf('\\x{%X}',ord($1))/eg;
    #if( $_[1] ) {
    #  substr( $str , 218-3 ) = "..."
    #   if length($str) >= 218 and !$ENV{PERL_TEST_NO_TRUNC};
    #}
    return qq("$str");
}


=end _private

=item C<ok(...)>

  ok(1 + 1 == 2);
  ok($have, $expect);
  ok($have, $expect, $diagnostics);

This function is the reason for C<Test>'s existence.  It's
the basic function that
handles printing "C<ok>" or "C<not ok>", along with the
current test number.  (That's what C<Test::Harness> wants to see.)

In its most basic usage, C<ok(...)> simply takes a single scalar
expression.  If its value is true, the test passes; if false,
the test fails.  Examples:

    # Examples of ok(scalar)

    ok( 1 + 1 == 2 );           # ok if 1 + 1 == 2
    ok( $foo =~ /bar/ );        # ok if $foo contains 'bar'
    ok( baz($x + $y) eq 'Armondo' );    # ok if baz($x + $y) returns
                                        # 'Armondo'
    ok( @a == @b );             # ok if @a and @b are the same length

The expression is evaluated in scalar context.  So the following will
work:

    ok( @stuff );                       # ok if @stuff has any elements
    ok( !grep !defined $_, @stuff );    # ok if everything in @stuff is
                                        # defined.

A special case is if the expression is a subroutine reference (in either
C<sub {...}> syntax or C<\&foo> syntax).  In
that case, it is executed and its value (true or false) determines if
the test passes or fails.  For example,

    ok( sub {   # See whether sleep works at least passably
      my $start_time = time;
      sleep 5;
      time() - $start_time  >= 4
    });

In its two-argument form, C<ok(I<arg1>, I<arg2>)> compares the two
scalar values to see if they match.  They match if both are undefined,
or if I<arg2> is a regex that matches I<arg1>, or if they compare equal
with C<eq>.

    # Example of ok(scalar, scalar)

    ok( "this", "that" );               # not ok, 'this' ne 'that'
    ok( "", undef );                    # not ok, "" is defined

The second argument is considered a regex if it is either a regex
object or a string that looks like a regex.  Regex objects are
constructed with the qr// operator in recent versions of perl.  A
string is considered to look like a regex if its first and last
characters are "/", or if the first character is "m"
and its second and last characters are both the
same non-alphanumeric non-whitespace character.  These regexp

Regex examples:

    ok( 'JaffO', '/Jaff/' );    # ok, 'JaffO' =~ /Jaff/
    ok( 'JaffO', 'm|Jaff|' );   # ok, 'JaffO' =~ m|Jaff|
    ok( 'JaffO', qr/Jaff/ );    # ok, 'JaffO' =~ qr/Jaff/;
    ok( 'JaffO', '/(?i)jaff/ ); # ok, 'JaffO' =~ /jaff/i;

If either (or both!) is a subroutine reference, it is run and used
as the value for comparing.  For example:

    ok sub {
        open(OUT, ">x.dat") || die $!;
        print OUT "\x{e000}";
        close OUT;
        my $bytecount = -s 'x.dat';
        unlink 'x.dat' or warn "Can't unlink : $!";
        return $bytecount;
      },
      4
    ;

The above test passes two values to C<ok(arg1, arg2)> -- the first 
a coderef, and the second is the number 4.  Before C<ok> compares them,
it calls the coderef, and uses its return value as the real value of
this parameter. Assuming that C<$bytecount> returns 4, C<ok> ends up
testing C<4 eq 4>.  Since that's true, this test passes.

Finally, you can append an optional third argument, in
C<ok(I<arg1>,I<arg2>, I<note>)>, where I<note> is a string value that
will be printed if the test fails.  This should be some useful
information about the test, pertaining to why it failed, and/or
a description of the test.  For example:

    ok( grep($_ eq 'something unique', @stuff), 1,
        "Something that should be unique isn't!\n".
        '@stuff = '.join ', ', @stuff
      );

Unfortunately, a note cannot be used with the single argument
style of C<ok()>.  That is, if you try C<ok(I<arg1>, I<note>)>, then
C<Test> will interpret this as C<ok(I<arg1>, I<arg2>)>, and probably
end up testing C<I<arg1> eq I<arg2>> -- and that's not what you want!

All of the above special cases can occasionally cause some
problems.  See L</BUGS and CAVEATS>.

=cut

# A past maintainer of this module said:
# <<ok(...)'s special handling of subroutine references is an unfortunate
#   "feature" that can't be removed due to compatibility.>>
#

sub ok ($;$$) {
    croak "ok: plan before you test!" if !$planned;

    local($\,$,);   # guard against -l and other things that screw with
                    # print

    my ($pkg,$file,$line) = caller($TestLevel);
    my $repetition = ++$history{"$file:$line"};
    my $context = ("$file at line $line".
		   ($repetition > 1 ? " fail \#$repetition" : ''));

    # Are we comparing two values?
    my $compare = 0;

    my $ok=0;
    my $result = _to_value(shift);
    my ($expected, $isregex, $regex);
    if (@_ == 0) {
	$ok = $result;
    } else {
        $compare = 1;
	$expected = _to_value(shift);
	if (!defined $expected) {
	    $ok = !defined $result;
	} elsif (!defined $result) {
	    $ok = 0;
	} elsif (ref($expected) eq 'Regexp') {
	    $ok = $result =~ /$expected/;
            $regex = $expected;
	} elsif (($regex) = ($expected =~ m,^ / (.+) / $,sx) or
	    (undef, $regex) = ($expected =~ m,^ m([^\w\s]) (.+) \1 $,sx)) {
	    $ok = $result =~ /$regex/;
	} else {
	    $ok = $result eq $expected;
	}
    }
    my $todo = $todo{$ntest};
    if ($todo and $ok) {
	$context .= ' TODO?!' if $todo;
	print $TESTOUT "ok $ntest # ($context)\n";
    } else {
        # Issuing two seperate prints() causes problems on VMS.
        if (!$ok) {
            print $TESTOUT "not ok $ntest\n";
        }
	else {
            print $TESTOUT "ok $ntest\n";
        }

        $ok or _complain($result, $expected,
        {
          'repetition' => $repetition, 'package' => $pkg,
          'result' => $result, 'todo' => $todo,
          'file' => $file, 'line' => $line,
          'context' => $context, 'compare' => $compare,
          @_ ? ('diagnostic' =>  _to_value(shift)) : (),
        });

    }
    ++ $ntest;
    $ok;
}


sub _complain {
    my($result, $expected, $detail) = @_;
    $$detail{expected} = $expected if defined $expected;

    # Get the user's diagnostic, protecting against multi-line
    # diagnostics.
    my $diag = $$detail{diagnostic};
    $diag =~ s/\n/\n#/g if defined $diag;

    $$detail{context} .= ' *TODO*' if $$detail{todo};
    if (!$$detail{compare}) {
        if (!$diag) {
            print $TESTERR "# Failed test $ntest in $$detail{context}\n";
        } else {
            print $TESTERR "# Failed test $ntest in $$detail{context}: $diag\n";
        }
    } else {
        my $prefix = "Test $ntest";

        print $TESTERR "# $prefix got: " . _quote($result) .
                       " ($$detail{context})\n";
        $prefix = ' ' x (length($prefix) - 5);
        my $expected_quoted = (defined $$detail{regex})
         ?  'qr{'.($$detail{regex}).'}'  :  _quote($expected);

        print $TESTERR "# $prefix Expected: $expected_quoted",
           $diag ? " ($diag)" : (), "\n";

        _diff_complain( $result, $expected, $detail, $prefix )
          if defined($expected) and 2 < ($expected =~ tr/\n//);
    }

    if(defined $Program_Lines{ $$detail{file} }[ $$detail{line} ]) {
        print $TESTERR
          "#  $$detail{file} line $$detail{line} is: $Program_Lines{ $$detail{file} }[ $$detail{line} ]\n"
         if $Program_Lines{ $$detail{file} }[ $$detail{line} ]
          =~ m/[^\s\#\(\)\{\}\[\]\;]/;  # Otherwise it's uninformative

        undef $Program_Lines{ $$detail{file} }[ $$detail{line} ];
         # So we won't repeat it.
    }

    push @FAILDETAIL, $detail;
    return;
}



sub _diff_complain {
    my($result, $expected, $detail, $prefix) = @_;
    return _diff_complain_external(@_) if $ENV{PERL_TEST_DIFF};
    return _diff_complain_algdiff(@_)
      if eval {
          local @INC = @INC;
          pop @INC if $INC[-1] eq '.';
          require Algorithm::Diff; Algorithm::Diff->VERSION(1.15);
          1;
      };

    $told_about_diff++ or print $TESTERR <<"EOT";
# $prefix   (Install the Algorithm::Diff module to have differences in multiline
# $prefix    output explained.  You might also set the PERL_TEST_DIFF environment
# $prefix    variable to run a diff program on the output.)
EOT
    ;
    return;
}



sub _diff_complain_external {
    my($result, $expected, $detail, $prefix) = @_;
    my $diff = $ENV{PERL_TEST_DIFF} || die "WHAAAA?";

    require File::Temp;
    my($got_fh, $got_filename) = File::Temp::tempfile("test-got-XXXXX");
    my($exp_fh, $exp_filename) = File::Temp::tempfile("test-exp-XXXXX");
    unless ($got_fh && $exp_fh) {
      warn "Can't get tempfiles";
      return;
    }

    print $got_fh $result;
    print $exp_fh $expected;
    if (close($got_fh) && close($exp_fh)) {
        my $diff_cmd = "$diff $exp_filename $got_filename";
        print $TESTERR "#\n# $prefix $diff_cmd\n";
        if (open(DIFF, "$diff_cmd |")) {
            local $_;
            while (<DIFF>) {
                print $TESTERR "# $prefix $_";
            }
            close(DIFF);
        }
        else {
            warn "Can't run diff: $!";
        }
    } else {
        warn "Can't write to tempfiles: $!";
    }
    unlink($got_filename);
    unlink($exp_filename);
    return;
}



sub _diff_complain_algdiff {
    my($result, $expected, $detail, $prefix) = @_;

    my @got = split(/^/, $result);
    my @exp = split(/^/, $expected);

    my $diff_kind;
    my @diff_lines;

    my $diff_flush = sub {
        return unless $diff_kind;

        my $count_lines = @diff_lines;
        my $s = $count_lines == 1 ? "" : "s";
        my $first_line = $diff_lines[0][0] + 1;

        print $TESTERR "# $prefix ";
        if ($diff_kind eq "GOT") {
            print $TESTERR "Got $count_lines extra line$s at line $first_line:\n";
            for my $i (@diff_lines) {
                print $TESTERR "# $prefix  + " . _quote($got[$i->[0]]) . "\n";
            }
        } elsif ($diff_kind eq "EXP") {
            if ($count_lines > 1) {
                my $last_line = $diff_lines[-1][0] + 1;
                print $TESTERR "Lines $first_line-$last_line are";
            }
            else {
                print $TESTERR "Line $first_line is";
            }
            print $TESTERR " missing:\n";
            for my $i (@diff_lines) {
                print $TESTERR "# $prefix  - " . _quote($exp[$i->[1]]) . "\n";
            }
        } elsif ($diff_kind eq "CH") {
            if ($count_lines > 1) {
                my $last_line = $diff_lines[-1][0] + 1;
                print $TESTERR "Lines $first_line-$last_line are";
            }
            else {
                print $TESTERR "Line $first_line is";
            }
            print $TESTERR " changed:\n";
            for my $i (@diff_lines) {
                print $TESTERR "# $prefix  - " . _quote($exp[$i->[1]]) . "\n";
                print $TESTERR "# $prefix  + " . _quote($got[$i->[0]]) . "\n";
            }
        }

        # reset
        $diff_kind = undef;
        @diff_lines = ();
    };

    my $diff_collect = sub {
        my $kind = shift;
        &$diff_flush() if $diff_kind && $diff_kind ne $kind;
        $diff_kind = $kind;
        push(@diff_lines, [@_]);
    };


    Algorithm::Diff::traverse_balanced(
        \@got, \@exp,
        {
            DISCARD_A => sub { &$diff_collect("GOT", @_) },
            DISCARD_B => sub { &$diff_collect("EXP", @_) },
            CHANGE    => sub { &$diff_collect("CH",  @_) },
            MATCH     => sub { &$diff_flush() },
        },
    );
    &$diff_flush();

    return;
}




#~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~`~


=item C<skip(I<skip_if_true>, I<args...>)>

This is used for tests that under some conditions can be skipped.  It's
basically equivalent to:

  if( $skip_if_true ) {
    ok(1);
  } else {
    ok( args... );
  }

...except that the C<ok(1)> emits not just "C<ok I<testnum>>" but
actually "C<ok I<testnum> # I<skip_if_true_value>>".

The arguments after the I<skip_if_true> are what is fed to C<ok(...)> if
this test isn't skipped.

Example usage:

  my $if_MSWin =
    $^O =~ m/MSWin/ ? 'Skip if under MSWin' : '';

  # A test to be skipped if under MSWin (i.e., run except under MSWin)
  skip($if_MSWin, thing($foo), thing($bar) );

Or, going the other way:

  my $unless_MSWin =
    $^O =~ m/MSWin/ ? '' : 'Skip unless under MSWin';

  # A test to be skipped unless under MSWin (i.e., run only under MSWin)
  skip($unless_MSWin, thing($foo), thing($bar) );

The tricky thing to remember is that the first parameter is true if
you want to I<skip> the test, not I<run> it; and it also doubles as a
note about why it's being skipped. So in the first codeblock above, read
the code as "skip if MSWin -- (otherwise) test whether C<thing($foo)> is
C<thing($bar)>" or for the second case, "skip unless MSWin...".

Also, when your I<skip_if_reason> string is true, it really should (for
backwards compatibility with older Test.pm versions) start with the
string "Skip", as shown in the above examples.

Note that in the above cases, C<thing($foo)> and C<thing($bar)>
I<are> evaluated -- but as long as the C<skip_if_true> is true,
then we C<skip(...)> just tosses out their value (i.e., not
bothering to treat them like values to C<ok(...)>.  But if
you need to I<not> eval the arguments when skipping the
test, use
this format:

  skip( $unless_MSWin,
    sub {
      # This code returns true if the test passes.
      # (But it doesn't even get called if the test is skipped.)
      thing($foo) eq thing($bar)
    }
  );

or even this, which is basically equivalent:

  skip( $unless_MSWin,
    sub { thing($foo) }, sub { thing($bar) }
  );

That is, both are like this:

  if( $unless_MSWin ) {
    ok(1);  # but it actually appends "# $unless_MSWin"
            #  so that Test::Harness can tell it's a skip
  } else {
    # Not skipping, so actually call and evaluate...
    ok( sub { thing($foo) }, sub { thing($bar) } );
  }

=cut

sub skip ($;$$$) {
    local($\, $,);   # guard against -l and other things that screw with
                     # print

    my $whyskip = _to_value(shift);
    if (!@_ or $whyskip) {
	$whyskip = '' if $whyskip =~ m/^\d+$/;
        $whyskip =~ s/^[Ss]kip(?:\s+|$)//;  # backwards compatibility, old
                                            # versions required the reason
                                            # to start with 'skip'
        # We print in one shot for VMSy reasons.
        my $ok = "ok $ntest # skip";
        $ok .= " $whyskip" if length $whyskip;
        $ok .= "\n";
        print $TESTOUT $ok;
        ++ $ntest;
        return 1;
    } else {
        # backwards compatibility (I think).  skip() used to be
        # called like ok(), which is weird.  I haven't decided what to do with
        # this yet.
#        warn <<WARN if $^W;
#This looks like a skip() using the very old interface.  Please upgrade to
#the documented interface as this has been deprecated.
#WARN

	local($TestLevel) = $TestLevel+1;  #to ignore this stack frame
        return &ok(@_);
    }
}

=back

=cut

END {
    $ONFAIL->(\@FAILDETAIL) if @FAILDETAIL && $ONFAIL;
}

1;
__END__

=head1 TEST TYPES

=over 4

=item * NORMAL TESTS

These tests are expected to succeed.  Usually, most or all of your tests
are in this category.  If a normal test doesn't succeed, then that
means that something is I<wrong>.

=item * SKIPPED TESTS

The C<skip(...)> function is for tests that might or might not be
possible to run, depending
on the availability of platform-specific features.  The first argument
should evaluate to true (think "yes, please skip") if the required
feature is I<not> available.  After the first argument, C<skip(...)> works
exactly the same way as C<ok(...)> does.

=item * TODO TESTS

TODO tests are designed for maintaining an B<executable TODO list>.
These tests are I<expected to fail.>  If a TODO test does succeed,
then the feature in question shouldn't be on the TODO list, now
should it?

Packages should NOT be released with succeeding TODO tests.  As soon
as a TODO test starts working, it should be promoted to a normal test,
and the newly working feature should be documented in the release
notes or in the change log.

=back

=head1 ONFAIL

  BEGIN { plan test => 4, onfail => sub { warn "CALL 911!" } }

Although test failures should be enough, extra diagnostics can be
triggered at the end of a test run.  C<onfail> is passed an array ref
of hash refs that describe each test failure.  Each hash will contain
at least the following fields: C<package>, C<repetition>, and
C<result>.  (You shouldn't rely on any other fields being present.)  If the test
had an expected value or a diagnostic (or "note") string, these will also be
included.

The I<optional> C<onfail> hook might be used simply to print out the
version of your package and/or how to report problems.  It might also
be used to generate extremely sophisticated diagnostics for a
particularly bizarre test failure.  However it's not a panacea.  Core
dumps or other unrecoverable errors prevent the C<onfail> hook from
running.  (It is run inside an C<END> block.)  Besides, C<onfail> is
probably over-kill in most cases.  (Your test code should be simpler
than the code it is testing, yes?)


=head1 BUGS and CAVEATS

=over

=item *

C<ok(...)>'s special handing of strings which look like they might be
regexes can also cause unexpected behavior.  An innocent:

    ok( $fileglob, '/path/to/some/*stuff/' );

will fail, since Test.pm considers the second argument to be a regex!
The best bet is to use the one-argument form:

    ok( $fileglob eq '/path/to/some/*stuff/' );

=item *

C<ok(...)>'s use of string C<eq> can sometimes cause odd problems
when comparing
numbers, especially if you're casting a string to a number:

    $foo = "1.0";
    ok( $foo, 1 );      # not ok, "1.0" ne 1

Your best bet is to use the single argument form:

    ok( $foo == 1 );    # ok "1.0" == 1

=item *

As you may have inferred from the above documentation and examples,
C<ok>'s prototype is C<($;$$)> (and, incidentally, C<skip>'s is
C<($;$$$)>). This means, for example, that you can do C<ok @foo, @bar>
to compare the I<size> of the two arrays. But don't be fooled into
thinking that C<ok @foo, @bar> means a comparison of the contents of two
arrays -- you're comparing I<just> the number of elements of each. It's
so easy to make that mistake in reading C<ok @foo, @bar> that you might
want to be very explicit about it, and instead write C<ok scalar(@foo),
scalar(@bar)>.

=item *

This almost definitely doesn't do what you expect:

     ok $thingy->can('some_method');

Why?  Because C<can> returns a coderef to mean "yes it can (and the
method is this...)", and then C<ok> sees a coderef and thinks you're
passing a function that you want it to call and consider the truth of
the result of!  I.e., just like:

     ok $thingy->can('some_method')->();

What you probably want instead is this:

     ok $thingy->can('some_method') && 1;

If the C<can> returns false, then that is passed to C<ok>.  If it
returns true, then the larger expression S<< C<<
$thingy->can('some_method') && 1 >> >> returns 1, which C<ok> sees as
a simple signal of success, as you would expect.


=item *

The syntax for C<skip> is about the only way it can be, but it's still
quite confusing.  Just start with the above examples and you'll
be okay.

Moreover, users may expect this:

  skip $unless_mswin, foo($bar), baz($quux);

to not evaluate C<foo($bar)> and C<baz($quux)> when the test is being
skipped.  But in reality, they I<are> evaluated, but C<skip> just won't
bother comparing them if C<$unless_mswin> is true.

You could do this:

  skip $unless_mswin, sub{foo($bar)}, sub{baz($quux)};

But that's not terribly pretty.  You may find it simpler or clearer in
the long run to just do things like this:

  if( $^O =~ m/MSWin/ ) {
    print "# Yay, we're under $^O\n";
    ok foo($bar), baz($quux);
    ok thing($whatever), baz($stuff);
    ok blorp($quux, $whatever);
    ok foo($barzbarz), thang($quux);
  } else {
    print "# Feh, we're under $^O.  Watch me skip some tests...\n";
    for(1 .. 4) { skip "Skip unless under MSWin" }
  }

But be quite sure that C<ok> is called exactly as many times in the
first block as C<skip> is called in the second block.

=back


=head1 ENVIRONMENT

If C<PERL_TEST_DIFF> environment variable is set, it will be used as a
command for comparing unexpected multiline results.  If you have GNU
diff installed, you might want to set C<PERL_TEST_DIFF> to C<diff -u>.
If you don't have a suitable program, you might install the
C<Text::Diff> module and then set C<PERL_TEST_DIFF> to be C<perl
-MText::Diff -e 'print diff(@ARGV)'>.  If C<PERL_TEST_DIFF> isn't set
but the C<Algorithm::Diff> module is available, then it will be used
to show the differences in multiline results.

=for comment
If C<PERL_TEST_NO_TRUNC> is set, then the initial "Got 'something' but
expected 'something_else'" readings for long multiline output values aren't
truncated at about the 230th column, as they normally could be in some
cases.  Normally you won't need to use this, unless you were carefully
parsing the output of your test programs.


=head1 NOTE

A past developer of this module once said that it was no longer being
actively developed.  However, rumors of its demise were greatly
exaggerated.  Feedback and suggestions are quite welcome.

Be aware that the main value of this module is its simplicity.  Note
that there are already more ambitious modules out there, such as
L<Test::More> and L<Test::Unit>.

Some earlier versions of this module had docs with some confusing
typos in the description of C<skip(...)>.


=head1 SEE ALSO

L<Test::Harness>

L<Test::Simple>, L<Test::More>, L<Devel::Cover>

L<Test::Builder> for building your own testing library.

L<Test::Unit> is an interesting XUnit-style testing library.

L<Test::Inline> and L<SelfTest> let you embed tests in code.


=head1 AUTHOR

Copyright (c) 1998-2000 Joshua Nathaniel Pritikin. 

Copyright (c) 2001-2002 Michael G. Schwern.

Copyright (c) 2002-2004 Sean M. Burke.

Current maintainer: Jesse Vincent. E<lt>jesse@bestpractical.comE<gt>

This package is free software and is provided "as is" without express
or implied warranty.  It may be used, redistributed and/or modified
under the same terms as Perl itself.

=cut

# "Your mistake was a hidden intention."
#  -- /Oblique Strategies/,  Brian Eno and Peter Schmidt
                                                                                                                                                                                                                                                                                                    usr/share/perl/5.20.2/Text/                                                                         0040755 0000000 0000000 00000000000 13077704254 013606  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Text/Abbrev.pm                                                                0100644 0000000 0000000 00000003771 12744441327 015351  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Text::Abbrev;
require 5.005;		# Probably works on earlier versions too.
require Exporter;

our $VERSION = '1.02';

=head1 NAME

Text::Abbrev - abbrev - create an abbreviation table from a list

=head1 SYNOPSIS

    use Text::Abbrev;
    abbrev $hashref, LIST


=head1 DESCRIPTION

Stores all unambiguous truncations of each element of LIST
as keys in the associative array referenced by C<$hashref>.
The values are the original list elements.

=head1 EXAMPLE

    $hashref = abbrev qw(list edit send abort gripe);

    %hash = abbrev qw(list edit send abort gripe);

    abbrev $hashref, qw(list edit send abort gripe);

    abbrev(*hash, qw(list edit send abort gripe));

=cut

@ISA = qw(Exporter);
@EXPORT = qw(abbrev);

# Usage:
#	abbrev \%foo, LIST;
#	...
#	$long = $foo{$short};

sub abbrev {
    my ($word, $hashref, $glob, %table, $returnvoid);

    @_ or return;   # So we don't autovivify onto @_ and trigger warning
    if (ref($_[0])) {           # hash reference preferably
      $hashref = shift;
      $returnvoid = 1;
    } elsif (ref \$_[0] eq 'GLOB') {  # is actually a glob (deprecated)
      $hashref = \%{shift()};
      $returnvoid = 1;
    }
    %{$hashref} = ();

    WORD: foreach $word (@_) {
        for (my $len = (length $word) - 1; $len > 0; --$len) {
	    my $abbrev = substr($word,0,$len);
	    my $seen = ++$table{$abbrev};
	    if ($seen == 1) {	    # We're the first word so far to have
	    			    # this abbreviation.
	        $hashref->{$abbrev} = $word;
	    } elsif ($seen == 2) {  # We're the second word to have this
	    			    # abbreviation, so we can't use it.
	        delete $hashref->{$abbrev};
	    } else {		    # We're the third word to have this
	    			    # abbreviation, so skip to the next word.
	        next WORD;
	    }
	}
    }
    # Non-abbreviations always get entered, even if they aren't unique
    foreach $word (@_) {
        $hashref->{$word} = $word;
    }
    return if $returnvoid;
    if (wantarray) {
      %{$hashref};
    } else {
      $hashref;
    }
}

1;
       usr/share/perl/5.20.2/Text/Balanced.pm                                                              0100644 0000000 0000000 00000204156 12744441327 015641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Text::Balanced;

# EXTRACT VARIOUSLY DELIMITED TEXT SEQUENCES FROM STRINGS.
# FOR FULL DOCUMENTATION SEE Balanced.pod

use 5.005;
use strict;
use Exporter ();
use SelfLoader;

use vars qw { $VERSION @ISA %EXPORT_TAGS };
BEGIN {
	$VERSION     = '2.02';
	@ISA         = 'Exporter';
	%EXPORT_TAGS = (
		ALL => [ qw{
			&extract_delimited
			&extract_bracketed
			&extract_quotelike
			&extract_codeblock
			&extract_variable
			&extract_tagged
			&extract_multiple
			&gen_delimited_pat
			&gen_extract_tagged
			&delimited_pat
		} ],
	);
}

Exporter::export_ok_tags('ALL');

# PROTOTYPES

sub _match_bracketed($$$$$$);
sub _match_variable($$);
sub _match_codeblock($$$$$$$);
sub _match_quotelike($$$$);

# HANDLE RETURN VALUES IN VARIOUS CONTEXTS

sub _failmsg {
	my ($message, $pos) = @_;
	$@ = bless {
		error => $message,
		pos   => $pos,
	}, 'Text::Balanced::ErrorMsg';
}

sub _fail {
	my ($wantarray, $textref, $message, $pos) = @_;
	_failmsg $message, $pos if $message;
	return (undef, $$textref, undef) if $wantarray;
	return undef;
}

sub _succeed {
	$@ = undef;
	my ($wantarray,$textref) = splice @_, 0, 2;
	my ($extrapos, $extralen) = @_ > 18
		? splice(@_, -2, 2)
		: (0, 0);
	my ($startlen, $oppos) = @_[5,6];
	my $remainderpos = $_[2];
	if ( $wantarray ) {
		my @res;
		while (my ($from, $len) = splice @_, 0, 2) {
			push @res, substr($$textref, $from, $len);
		}
		if ( $extralen ) { # CORRECT FILLET
			my $extra = substr($res[0], $extrapos-$oppos, $extralen, "\n");
			$res[1] = "$extra$res[1]";
			eval { substr($$textref,$remainderpos,0) = $extra;
			       substr($$textref,$extrapos,$extralen,"\n")} ;
				#REARRANGE HERE DOC AND FILLET IF POSSIBLE
			pos($$textref) = $remainderpos-$extralen+1; # RESET \G
		} else {
			pos($$textref) = $remainderpos;		    # RESET \G
		}
		return @res;
	} else {
		my $match = substr($$textref,$_[0],$_[1]);
		substr($match,$extrapos-$_[0]-$startlen,$extralen,"") if $extralen;
		my $extra = $extralen
			? substr($$textref, $extrapos, $extralen)."\n" : "";
		eval {substr($$textref,$_[4],$_[1]+$_[5])=$extra} ;	#CHOP OUT PREFIX & MATCH, IF POSSIBLE
		pos($$textref) = $_[4];				# RESET \G
		return $match;
	}
}

# BUILD A PATTERN MATCHING A SIMPLE DELIMITED STRING

sub gen_delimited_pat($;$)  # ($delimiters;$escapes)
{
	my ($dels, $escs) = @_;
	return "" unless $dels =~ /\S/;
	$escs = '\\' unless $escs;
	$escs .= substr($escs,-1) x (length($dels)-length($escs));
	my @pat = ();
	my $i;
	for ($i=0; $i<length $dels; $i++)
	{
		my $del = quotemeta substr($dels,$i,1);
		my $esc = quotemeta substr($escs,$i,1);
		if ($del eq $esc)
		{
			push @pat, "$del(?:[^$del]*(?:(?:$del$del)[^$del]*)*)$del";
		}
		else
		{
			push @pat, "$del(?:[^$esc$del]*(?:$esc.[^$esc$del]*)*)$del";
		}
	}
	my $pat = join '|', @pat;
	return "(?:$pat)";
}

*delimited_pat = \&gen_delimited_pat;

# THE EXTRACTION FUNCTIONS

sub extract_delimited (;$$$$)
{
	my $textref = defined $_[0] ? \$_[0] : \$_;
	my $wantarray = wantarray;
	my $del  = defined $_[1] ? $_[1] : qq{\'\"\`};
	my $pre  = defined $_[2] ? $_[2] : '\s*';
	my $esc  = defined $_[3] ? $_[3] : qq{\\};
	my $pat = gen_delimited_pat($del, $esc);
	my $startpos = pos $$textref || 0;
	return _fail($wantarray, $textref, "Not a delimited pattern", 0)
		unless $$textref =~ m/\G($pre)($pat)/gc;
	my $prelen = length($1);
	my $matchpos = $startpos+$prelen;
	my $endpos = pos $$textref;
	return _succeed $wantarray, $textref,
			$matchpos, $endpos-$matchpos,		# MATCH
			$endpos,   length($$textref)-$endpos,	# REMAINDER
			$startpos, $prelen;			# PREFIX
}

sub extract_bracketed (;$$$)
{
	my $textref = defined $_[0] ? \$_[0] : \$_;
	my $ldel = defined $_[1] ? $_[1] : '{([<';
	my $pre  = defined $_[2] ? $_[2] : '\s*';
	my $wantarray = wantarray;
	my $qdel = "";
	my $quotelike;
	$ldel =~ s/'//g and $qdel .= q{'};
	$ldel =~ s/"//g and $qdel .= q{"};
	$ldel =~ s/`//g and $qdel .= q{`};
	$ldel =~ s/q//g and $quotelike = 1;
	$ldel =~ tr/[](){}<>\0-\377/[[(({{<</ds;
	my $rdel = $ldel;
	unless ($rdel =~ tr/[({</])}>/)
        {
		return _fail $wantarray, $textref,
			     "Did not find a suitable bracket in delimiter: \"$_[1]\"",
			     0;
	}
	my $posbug = pos;
	$ldel = join('|', map { quotemeta $_ } split('', $ldel));
	$rdel = join('|', map { quotemeta $_ } split('', $rdel));
	pos = $posbug;

	my $startpos = pos $$textref || 0;
	my @match = _match_bracketed($textref,$pre, $ldel, $qdel, $quotelike, $rdel);

	return _fail ($wantarray, $textref) unless @match;

	return _succeed ( $wantarray, $textref,
			  $match[2], $match[5]+2,	# MATCH
			  @match[8,9],			# REMAINDER
			  @match[0,1],			# PREFIX
			);
}

sub _match_bracketed($$$$$$)	# $textref, $pre, $ldel, $qdel, $quotelike, $rdel
{
	my ($textref, $pre, $ldel, $qdel, $quotelike, $rdel) = @_;
	my ($startpos, $ldelpos, $endpos) = (pos $$textref = pos $$textref||0);
	unless ($$textref =~ m/\G$pre/gc)
	{
		_failmsg "Did not find prefix: /$pre/", $startpos;
		return;
	}

	$ldelpos = pos $$textref;

	unless ($$textref =~ m/\G($ldel)/gc)
	{
		_failmsg "Did not find opening bracket after prefix: \"$pre\"",
		         pos $$textref;
		pos $$textref = $startpos;
		return;
	}

	my @nesting = ( $1 );
	my $textlen = length $$textref;
	while (pos $$textref < $textlen)
	{
		next if $$textref =~ m/\G\\./gcs;

		if ($$textref =~ m/\G($ldel)/gc)
		{
			push @nesting, $1;
		}
		elsif ($$textref =~ m/\G($rdel)/gc)
		{
			my ($found, $brackettype) = ($1, $1);
			if ($#nesting < 0)
			{
				_failmsg "Unmatched closing bracket: \"$found\"",
					 pos $$textref;
				pos $$textref = $startpos;
			        return;
			}
			my $expected = pop(@nesting);
			$expected =~ tr/({[</)}]>/;
			if ($expected ne $brackettype)
			{
				_failmsg qq{Mismatched closing bracket: expected "$expected" but found "$found"},
					 pos $$textref;
				pos $$textref = $startpos;
			        return;
			}
			last if $#nesting < 0;
		}
		elsif ($qdel && $$textref =~ m/\G([$qdel])/gc)
		{
			$$textref =~ m/\G[^\\$1]*(?:\\.[^\\$1]*)*(\Q$1\E)/gsc and next;
			_failmsg "Unmatched embedded quote ($1)",
				 pos $$textref;
			pos $$textref = $startpos;
			return;
		}
		elsif ($quotelike && _match_quotelike($textref,"",1,0))
		{
			next;
		}

		else { $$textref =~ m/\G(?:[a-zA-Z0-9]+|.)/gcs }
	}
	if ($#nesting>=0)
	{
		_failmsg "Unmatched opening bracket(s): "
				. join("..",@nesting)."..",
		         pos $$textref;
		pos $$textref = $startpos;
		return;
	}

	$endpos = pos $$textref;
	
	return (
		$startpos,  $ldelpos-$startpos,		# PREFIX
		$ldelpos,   1,				# OPENING BRACKET
		$ldelpos+1, $endpos-$ldelpos-2,		# CONTENTS
		$endpos-1,  1,				# CLOSING BRACKET
		$endpos,    length($$textref)-$endpos,	# REMAINDER
	       );
}

sub _revbracket($)
{
	my $brack = reverse $_[0];
	$brack =~ tr/[({</])}>/;
	return $brack;
}

my $XMLNAME = q{[a-zA-Z_:][a-zA-Z0-9_:.-]*};

sub extract_tagged (;$$$$$) # ($text, $opentag, $closetag, $pre, \%options)
{
	my $textref = defined $_[0] ? \$_[0] : \$_;
	my $ldel    = $_[1];
	my $rdel    = $_[2];
	my $pre     = defined $_[3] ? $_[3] : '\s*';
	my %options = defined $_[4] ? %{$_[4]} : ();
	my $omode   = defined $options{fail} ? $options{fail} : '';
	my $bad     = ref($options{reject}) eq 'ARRAY' ? join('|', @{$options{reject}})
		    : defined($options{reject})	       ? $options{reject}
		    :					 ''
		    ;
	my $ignore  = ref($options{ignore}) eq 'ARRAY' ? join('|', @{$options{ignore}})
		    : defined($options{ignore})	       ? $options{ignore}
		    :					 ''
		    ;

	if (!defined $ldel) { $ldel = '<\w+(?:' . gen_delimited_pat(q{'"}) . '|[^>])*>'; }
	$@ = undef;

	my @match = _match_tagged($textref, $pre, $ldel, $rdel, $omode, $bad, $ignore);

	return _fail(wantarray, $textref) unless @match;
	return _succeed wantarray, $textref,
			$match[2], $match[3]+$match[5]+$match[7],	# MATCH
			@match[8..9,0..1,2..7];				# REM, PRE, BITS
}

sub _match_tagged	# ($$$$$$$)
{
	my ($textref, $pre, $ldel, $rdel, $omode, $bad, $ignore) = @_;
	my $rdelspec;

	my ($startpos, $opentagpos, $textpos, $parapos, $closetagpos, $endpos) = ( pos($$textref) = pos($$textref)||0 );

	unless ($$textref =~ m/\G($pre)/gc)
	{
		_failmsg "Did not find prefix: /$pre/", pos $$textref;
		goto failed;
	}

	$opentagpos = pos($$textref);

	unless ($$textref =~ m/\G$ldel/gc)
	{
		_failmsg "Did not find opening tag: /$ldel/", pos $$textref;
		goto failed;
	}

	$textpos = pos($$textref);

	if (!defined $rdel)
	{
		$rdelspec = substr($$textref, $-[0], $+[0] - $-[0]);
		unless ($rdelspec =~ s/\A([[(<{]+)($XMLNAME).*/ quotemeta "$1\/$2". _revbracket($1) /oes)
		{
			_failmsg "Unable to construct closing tag to match: $rdel",
				 pos $$textref;
			goto failed;
		}
	}
	else
	{
		$rdelspec = eval "qq{$rdel}" || do {
			my $del;
			for (qw,~ ! ^ & * ) _ + - = } ] : " ; ' > . ? / | ',)
				{ next if $rdel =~ /\Q$_/; $del = $_; last }
			unless ($del) {
				use Carp;
				croak "Can't interpolate right delimiter $rdel"
			}
			eval "qq$del$rdel$del";
		};
	}

	while (pos($$textref) < length($$textref))
	{
		next if $$textref =~ m/\G\\./gc;

		if ($$textref =~ m/\G(\n[ \t]*\n)/gc )
		{
			$parapos = pos($$textref) - length($1)
				unless defined $parapos;
		}
		elsif ($$textref =~ m/\G($rdelspec)/gc )
		{
			$closetagpos = pos($$textref)-length($1);
			goto matched;
		}
		elsif ($ignore && $$textref =~ m/\G(?:$ignore)/gc)
		{
			next;
		}
		elsif ($bad && $$textref =~ m/\G($bad)/gcs)
		{
			pos($$textref) -= length($1);	# CUT OFF WHATEVER CAUSED THE SHORTNESS
			goto short if ($omode eq 'PARA' || $omode eq 'MAX');
			_failmsg "Found invalid nested tag: $1", pos $$textref;
			goto failed;
		}
		elsif ($$textref =~ m/\G($ldel)/gc)
		{
			my $tag = $1;
			pos($$textref) -= length($tag);	# REWIND TO NESTED TAG
			unless (_match_tagged(@_))	# MATCH NESTED TAG
			{
				goto short if $omode eq 'PARA' || $omode eq 'MAX';
				_failmsg "Found unbalanced nested tag: $tag",
					 pos $$textref;
				goto failed;
			}
		}
		else { $$textref =~ m/./gcs }
	}

short:
	$closetagpos = pos($$textref);
	goto matched if $omode eq 'MAX';
	goto failed unless $omode eq 'PARA';

	if (defined $parapos) { pos($$textref) = $parapos }
	else		      { $parapos = pos($$textref) }

	return (
		$startpos,    $opentagpos-$startpos,		# PREFIX
		$opentagpos,  $textpos-$opentagpos,		# OPENING TAG
		$textpos,     $parapos-$textpos,		# TEXT
		$parapos,     0,				# NO CLOSING TAG
		$parapos,     length($$textref)-$parapos,	# REMAINDER
	       );
	
matched:
	$endpos = pos($$textref);
	return (
		$startpos,    $opentagpos-$startpos,		# PREFIX
		$opentagpos,  $textpos-$opentagpos,		# OPENING TAG
		$textpos,     $closetagpos-$textpos,		# TEXT
		$closetagpos, $endpos-$closetagpos,		# CLOSING TAG
		$endpos,      length($$textref)-$endpos,	# REMAINDER
	       );

failed:
	_failmsg "Did not find closing tag", pos $$textref unless $@;
	pos($$textref) = $startpos;
	return;
}

sub extract_variable (;$$)
{
	my $textref = defined $_[0] ? \$_[0] : \$_;
	return ("","","") unless defined $$textref;
	my $pre  = defined $_[1] ? $_[1] : '\s*';

	my @match = _match_variable($textref,$pre);

	return _fail wantarray, $textref unless @match;

	return _succeed wantarray, $textref,
			@match[2..3,4..5,0..1];		# MATCH, REMAINDER, PREFIX
}

sub _match_variable($$)
{
#  $#
#  $^
#  $$
	my ($textref, $pre) = @_;
	my $startpos = pos($$textref) = pos($$textref)||0;
	unless ($$textref =~ m/\G($pre)/gc)
	{
		_failmsg "Did not find prefix: /$pre/", pos $$textref;
		return;
	}
	my $varpos = pos($$textref);
        unless ($$textref =~ m{\G\$\s*(?!::)(\d+|[][&`'+*./|,";%=~:?!\@<>()-]|\^[a-z]?)}gci)
	{
	    unless ($$textref =~ m/\G((\$#?|[*\@\%]|\\&)+)/gc)
	    {
		_failmsg "Did not find leading dereferencer", pos $$textref;
		pos $$textref = $startpos;
		return;
	    }
	    my $deref = $1;

	    unless ($$textref =~ m/\G\s*(?:::|')?(?:[_a-z]\w*(?:::|'))*[_a-z]\w*/gci
	    	or _match_codeblock($textref, "", '\{', '\}', '\{', '\}', 0)
		or $deref eq '$#' or $deref eq '$$' )
	    {
		_failmsg "Bad identifier after dereferencer", pos $$textref;
		pos $$textref = $startpos;
		return;
	    }
	}

	while (1)
	{
		next if $$textref =~ m/\G\s*(?:->)?\s*[{]\w+[}]/gc;
		next if _match_codeblock($textref,
					 qr/\s*->\s*(?:[_a-zA-Z]\w+\s*)?/,
					 qr/[({[]/, qr/[)}\]]/,
					 qr/[({[]/, qr/[)}\]]/, 0);
		next if _match_codeblock($textref,
					 qr/\s*/, qr/[{[]/, qr/[}\]]/,
					 qr/[{[]/, qr/[}\]]/, 0);
		next if _match_variable($textref,'\s*->\s*');
		next if $$textref =~ m/\G\s*->\s*\w+(?![{([])/gc;
		last;
	}
	
	my $endpos = pos($$textref);
	return ($startpos, $varpos-$startpos,
		$varpos,   $endpos-$varpos,
		$endpos,   length($$textref)-$endpos
		);
}

sub extract_codeblock (;$$$$$)
{
	my $textref = defined $_[0] ? \$_[0] : \$_;
	my $wantarray = wantarray;
	my $ldel_inner = defined $_[1] ? $_[1] : '{';
	my $pre        = defined $_[2] ? $_[2] : '\s*';
	my $ldel_outer = defined $_[3] ? $_[3] : $ldel_inner;
	my $rd         = $_[4];
	my $rdel_inner = $ldel_inner;
	my $rdel_outer = $ldel_outer;
	my $posbug = pos;
	for ($ldel_inner, $ldel_outer) { tr/[]()<>{}\0-\377/[[((<<{{/ds }
	for ($rdel_inner, $rdel_outer) { tr/[]()<>{}\0-\377/]]))>>}}/ds }
	for ($ldel_inner, $ldel_outer, $rdel_inner, $rdel_outer)
	{
		$_ = '('.join('|',map { quotemeta $_ } split('',$_)).')'
	}
	pos = $posbug;

	my @match = _match_codeblock($textref, $pre,
				     $ldel_outer, $rdel_outer,
				     $ldel_inner, $rdel_inner,
				     $rd);
	return _fail($wantarray, $textref) unless @match;
	return _succeed($wantarray, $textref,
			@match[2..3,4..5,0..1]	# MATCH, REMAINDER, PREFIX
		       );

}

sub _match_codeblock($$$$$$$)
{
	my ($textref, $pre, $ldel_outer, $rdel_outer, $ldel_inner, $rdel_inner, $rd) = @_;
	my $startpos = pos($$textref) = pos($$textref) || 0;
	unless ($$textref =~ m/\G($pre)/gc)
	{
		_failmsg qq{Did not match prefix /$pre/ at"} .
			    substr($$textref,pos($$textref),20) .
			    q{..."},
		         pos $$textref;
		return; 
	}
	my $codepos = pos($$textref);
	unless ($$textref =~ m/\G($ldel_outer)/gc)	# OUTERMOST DELIMITER
	{
		_failmsg qq{Did not find expected opening bracket at "} .
			     substr($$textref,pos($$textref),20) .
			     q{..."},
		         pos $$textref;
		pos $$textref = $startpos;
		return;
	}
	my $closing = $1;
	   $closing =~ tr/([<{/)]>}/;
	my $matched;
	my $patvalid = 1;
	while (pos($$textref) < length($$textref))
	{
		$matched = '';
		if ($rd && $$textref =~ m#\G(\Q(?)\E|\Q(s?)\E|\Q(s)\E)#gc)
		{
			$patvalid = 0;
			next;
		}

		if ($$textref =~ m/\G\s*#.*/gc)
		{
			next;
		}

		if ($$textref =~ m/\G\s*($rdel_outer)/gc)
		{
			unless ($matched = ($closing && $1 eq $closing) )
			{
				next if $1 eq '>';	# MIGHT BE A "LESS THAN"
				_failmsg q{Mismatched closing bracket at "} .
					     substr($$textref,pos($$textref),20) .
					     qq{...". Expected '$closing'},
					 pos $$textref;
			}
			last;
		}

		if (_match_variable($textref,'\s*') ||
		    _match_quotelike($textref,'\s*',$patvalid,$patvalid) )
		{
			$patvalid = 0;
			next;
		}


		# NEED TO COVER MANY MORE CASES HERE!!!
		if ($$textref =~ m#\G\s*(?!$ldel_inner)
					( [-+*x/%^&|.]=?
					| [!=]~
					| =(?!>)
					| (\*\*|&&|\|\||<<|>>)=?
					| split|grep|map|return
					| [([]
					)#gcx)
		{
			$patvalid = 1;
			next;
		}

		if ( _match_codeblock($textref, '\s*', $ldel_inner, $rdel_inner, $ldel_inner, $rdel_inner, $rd) )
		{
			$patvalid = 1;
			next;
		}

		if ($$textref =~ m/\G\s*$ldel_outer/gc)
		{
			_failmsg q{Improperly nested codeblock at "} .
				     substr($$textref,pos($$textref),20) .
				     q{..."},
				 pos $$textref;
			last;
		}

		$patvalid = 0;
		$$textref =~ m/\G\s*(\w+|[-=>]>|.|\Z)/gc;
	}
	continue { $@ = undef }

	unless ($matched)
	{
		_failmsg 'No match found for opening bracket', pos $$textref
			unless $@;
		return;
	}

	my $endpos = pos($$textref);
	return ( $startpos, $codepos-$startpos,
		 $codepos, $endpos-$codepos,
		 $endpos,  length($$textref)-$endpos,
	       );
}


my %mods   = (
		'none'	=> '[cgimsox]*',
		'm'	=> '[cgimsox]*',
		's'	=> '[cegimsox]*',
		'tr'	=> '[cds]*',
		'y'	=> '[cds]*',
		'qq'	=> '',
		'qx'	=> '',
		'qw'	=> '',
		'qr'	=> '[imsx]*',
		'q'	=> '',
	     );

sub extract_quotelike (;$$)
{
	my $textref = $_[0] ? \$_[0] : \$_;
	my $wantarray = wantarray;
	my $pre  = defined $_[1] ? $_[1] : '\s*';

	my @match = _match_quotelike($textref,$pre,1,0);
	return _fail($wantarray, $textref) unless @match;
	return _succeed($wantarray, $textref,
			$match[2], $match[18]-$match[2],	# MATCH
			@match[18,19],				# REMAINDER
			@match[0,1],				# PREFIX
			@match[2..17],				# THE BITS
			@match[20,21],				# ANY FILLET?
		       );
};

sub _match_quotelike($$$$)	# ($textref, $prepat, $allow_raw_match)
{
	my ($textref, $pre, $rawmatch, $qmark) = @_;

	my ($textlen,$startpos,
	    $oppos,
	    $preld1pos,$ld1pos,$str1pos,$rd1pos,
	    $preld2pos,$ld2pos,$str2pos,$rd2pos,
	    $modpos) = ( length($$textref), pos($$textref) = pos($$textref) || 0 );

	unless ($$textref =~ m/\G($pre)/gc)
	{
		_failmsg qq{Did not find prefix /$pre/ at "} .
			     substr($$textref, pos($$textref), 20) .
			     q{..."},
		         pos $$textref;
		return; 
	}
	$oppos = pos($$textref);

	my $initial = substr($$textref,$oppos,1);

	if ($initial && $initial =~ m|^[\"\'\`]|
		     || $rawmatch && $initial =~ m|^/|
		     || $qmark && $initial =~ m|^\?|)
	{
		unless ($$textref =~ m/ \Q$initial\E [^\\$initial]* (\\.[^\\$initial]*)* \Q$initial\E /gcsx)
		{
			_failmsg qq{Did not find closing delimiter to match '$initial' at "} .
				     substr($$textref, $oppos, 20) .
				     q{..."},
				 pos $$textref;
			pos $$textref = $startpos;
			return;
		}
		$modpos= pos($$textref);
		$rd1pos = $modpos-1;

		if ($initial eq '/' || $initial eq '?') 
		{
			$$textref =~ m/\G$mods{none}/gc
		}

		my $endpos = pos($$textref);
		return (
			$startpos,	$oppos-$startpos,	# PREFIX
			$oppos,		0,			# NO OPERATOR
			$oppos,		1,			# LEFT DEL
			$oppos+1,	$rd1pos-$oppos-1,	# STR/PAT
			$rd1pos,	1,			# RIGHT DEL
			$modpos,	0,			# NO 2ND LDEL
			$modpos,	0,			# NO 2ND STR
			$modpos,	0,			# NO 2ND RDEL
			$modpos,	$endpos-$modpos,	# MODIFIERS
			$endpos, 	$textlen-$endpos,	# REMAINDER
		       );
	}

	unless ($$textref =~ m{\G(\b(?:m|s|qq|qx|qw|q|qr|tr|y)\b(?=\s*\S)|<<)}gc)
	{
		_failmsg q{No quotelike operator found after prefix at "} .
			     substr($$textref, pos($$textref), 20) .
			     q{..."},
		         pos $$textref;
		pos $$textref = $startpos;
		return;
	}

	my $op = $1;
	$preld1pos = pos($$textref);
	if ($op eq '<<') {
		$ld1pos = pos($$textref);
		my $label;
		if ($$textref =~ m{\G([A-Za-z_]\w*)}gc) {
			$label = $1;
		}
		elsif ($$textref =~ m{ \G ' ([^'\\]* (?:\\.[^'\\]*)*) '
				     | \G " ([^"\\]* (?:\\.[^"\\]*)*) "
				     | \G ` ([^`\\]* (?:\\.[^`\\]*)*) `
				     }gcsx) {
			$label = $+;
		}
		else {
			$label = "";
		}
		my $extrapos = pos($$textref);
		$$textref =~ m{.*\n}gc;
		$str1pos = pos($$textref)--;
		unless ($$textref =~ m{.*?\n(?=\Q$label\E\n)}gc) {
			_failmsg qq{Missing here doc terminator ('$label') after "} .
				     substr($$textref, $startpos, 20) .
				     q{..."},
				 pos $$textref;
			pos $$textref = $startpos;
			return;
		}
		$rd1pos = pos($$textref);
        $$textref =~ m{\Q$label\E\n}gc;
		$ld2pos = pos($$textref);
		return (
			$startpos,	$oppos-$startpos,	# PREFIX
			$oppos,		length($op),		# OPERATOR
			$ld1pos,	$extrapos-$ld1pos,	# LEFT DEL
			$str1pos,	$rd1pos-$str1pos,	# STR/PAT
			$rd1pos,	$ld2pos-$rd1pos,	# RIGHT DEL
			$ld2pos,	0,			# NO 2ND LDEL
			$ld2pos,	0,                	# NO 2ND STR
			$ld2pos,	0,	                # NO 2ND RDEL
			$ld2pos,	0,                      # NO MODIFIERS
			$ld2pos,	$textlen-$ld2pos,	# REMAINDER
			$extrapos,      $str1pos-$extrapos,	# FILLETED BIT
		       );
	}

	$$textref =~ m/\G\s*/gc;
	$ld1pos = pos($$textref);
	$str1pos = $ld1pos+1;

	unless ($$textref =~ m/\G(\S)/gc)	# SHOULD USE LOOKAHEAD
	{
		_failmsg "No block delimiter found after quotelike $op",
		         pos $$textref;
		pos $$textref = $startpos;
		return;
	}
	pos($$textref) = $ld1pos;	# HAVE TO DO THIS BECAUSE LOOKAHEAD BROKEN
	my ($ldel1, $rdel1) = ("\Q$1","\Q$1");
	if ($ldel1 =~ /[[(<{]/)
	{
		$rdel1 =~ tr/[({</])}>/;
		defined(_match_bracketed($textref,"",$ldel1,"","",$rdel1))
		|| do { pos $$textref = $startpos; return };
        $ld2pos = pos($$textref);
        $rd1pos = $ld2pos-1;
	}
	else
	{
		$$textref =~ /\G$ldel1[^\\$ldel1]*(\\.[^\\$ldel1]*)*$ldel1/gcs
		|| do { pos $$textref = $startpos; return };
        $ld2pos = $rd1pos = pos($$textref)-1;
	}

	my $second_arg = $op =~ /s|tr|y/ ? 1 : 0;
	if ($second_arg)
	{
		my ($ldel2, $rdel2);
		if ($ldel1 =~ /[[(<{]/)
		{
			unless ($$textref =~ /\G\s*(\S)/gc)	# SHOULD USE LOOKAHEAD
			{
				_failmsg "Missing second block for quotelike $op",
					 pos $$textref;
				pos $$textref = $startpos;
				return;
			}
			$ldel2 = $rdel2 = "\Q$1";
			$rdel2 =~ tr/[({</])}>/;
		}
		else
		{
			$ldel2 = $rdel2 = $ldel1;
		}
		$str2pos = $ld2pos+1;

		if ($ldel2 =~ /[[(<{]/)
		{
			pos($$textref)--;	# OVERCOME BROKEN LOOKAHEAD 
			defined(_match_bracketed($textref,"",$ldel2,"","",$rdel2))
			|| do { pos $$textref = $startpos; return };
		}
		else
		{
			$$textref =~ /[^\\$ldel2]*(\\.[^\\$ldel2]*)*$ldel2/gcs
			|| do { pos $$textref = $startpos; return };
		}
		$rd2pos = pos($$textref)-1;
	}
	else
	{
		$ld2pos = $str2pos = $rd2pos = $rd1pos;
	}

	$modpos = pos $$textref;

	$$textref =~ m/\G($mods{$op})/gc;
	my $endpos = pos $$textref;

	return (
		$startpos,	$oppos-$startpos,	# PREFIX
		$oppos,		length($op),		# OPERATOR
		$ld1pos,	1,			# LEFT DEL
		$str1pos,	$rd1pos-$str1pos,	# STR/PAT
		$rd1pos,	1,			# RIGHT DEL
		$ld2pos,	$second_arg,		# 2ND LDEL (MAYBE)
		$str2pos,	$rd2pos-$str2pos,	# 2ND STR (MAYBE)
		$rd2pos,	$second_arg,		# 2ND RDEL (MAYBE)
		$modpos,	$endpos-$modpos,	# MODIFIERS
		$endpos,	$textlen-$endpos,	# REMAINDER
	       );
}

my $def_func = [
	sub { extract_variable($_[0], '') },
	sub { extract_quotelike($_[0],'') },
	sub { extract_codeblock($_[0],'{}','') },
];

sub extract_multiple (;$$$$)	# ($text, $functions_ref, $max_fields, $ignoreunknown)
{
	my $textref = defined($_[0]) ? \$_[0] : \$_;
	my $posbug = pos;
	my ($lastpos, $firstpos);
	my @fields = ();

	#for ($$textref)
	{
		my @func = defined $_[1] ? @{$_[1]} : @{$def_func};
		my $max  = defined $_[2] && $_[2]>0 ? $_[2] : 1_000_000_000;
		my $igunk = $_[3];

		pos $$textref ||= 0;

		unless (wantarray)
		{
			use Carp;
			carp "extract_multiple reset maximal count to 1 in scalar context"
				if $^W && defined($_[2]) && $max > 1;
			$max = 1
		}

		my $unkpos;
		my $func;
		my $class;

		my @class;
		foreach $func ( @func )
		{
			if (ref($func) eq 'HASH')
			{
				push @class, (keys %$func)[0];
				$func = (values %$func)[0];
			}
			else
			{
				push @class, undef;
			}
		}

		FIELD: while (pos($$textref) < length($$textref))
		{
			my ($field, $rem);
			my @bits;
			foreach my $i ( 0..$#func )
			{
				my $pref;
				$func = $func[$i];
				$class = $class[$i];
				$lastpos = pos $$textref;
				if (ref($func) eq 'CODE')
					{ ($field,$rem,$pref) = @bits = $func->($$textref) }
				elsif (ref($func) eq 'Text::Balanced::Extractor')
					{ @bits = $field = $func->extract($$textref) }
				elsif( $$textref =~ m/\G$func/gc )
					{ @bits = $field = defined($1)
                                ? $1
                                : substr($$textref, $-[0], $+[0] - $-[0])
                    }
				$pref ||= "";
				if (defined($field) && length($field))
				{
					if (!$igunk) {
						$unkpos = $lastpos
							if length($pref) && !defined($unkpos);
						if (defined $unkpos)
						{
							push @fields, substr($$textref, $unkpos, $lastpos-$unkpos).$pref;
							$firstpos = $unkpos unless defined $firstpos;
							undef $unkpos;
							last FIELD if @fields == $max;
						}
					}
					push @fields, $class
						? bless (\$field, $class)
						: $field;
					$firstpos = $lastpos unless defined $firstpos;
					$lastpos = pos $$textref;
					last FIELD if @fields == $max;
					next FIELD;
				}
			}
			if ($$textref =~ /\G(.)/gcs)
			{
				$unkpos = pos($$textref)-1
					unless $igunk || defined $unkpos;
			}
		}
		
		if (defined $unkpos)
		{
			push @fields, substr($$textref, $unkpos);
			$firstpos = $unkpos unless defined $firstpos;
			$lastpos = length $$textref;
		}
		last;
	}

	pos $$textref = $lastpos;
	return @fields if wantarray;

	$firstpos ||= 0;
	eval { substr($$textref,$firstpos,$lastpos-$firstpos)="";
	       pos $$textref = $firstpos };
	return $fields[0];
}

sub gen_extract_tagged # ($opentag, $closetag, $pre, \%options)
{
	my $ldel    = $_[0];
	my $rdel    = $_[1];
	my $pre     = defined $_[2] ? $_[2] : '\s*';
	my %options = defined $_[3] ? %{$_[3]} : ();
	my $omode   = defined $options{fail} ? $options{fail} : '';
	my $bad     = ref($options{reject}) eq 'ARRAY' ? join('|', @{$options{reject}})
		    : defined($options{reject})	       ? $options{reject}
		    :					 ''
		    ;
	my $ignore  = ref($options{ignore}) eq 'ARRAY' ? join('|', @{$options{ignore}})
		    : defined($options{ignore})	       ? $options{ignore}
		    :					 ''
		    ;

	if (!defined $ldel) { $ldel = '<\w+(?:' . gen_delimited_pat(q{'"}) . '|[^>])*>'; }

	my $posbug = pos;
	for ($ldel, $pre, $bad, $ignore) { $_ = qr/$_/ if $_ }
	pos = $posbug;

	my $closure = sub
	{
		my $textref = defined $_[0] ? \$_[0] : \$_;
		my @match = Text::Balanced::_match_tagged($textref, $pre, $ldel, $rdel, $omode, $bad, $ignore);

		return _fail(wantarray, $textref) unless @match;
		return _succeed wantarray, $textref,
				$match[2], $match[3]+$match[5]+$match[7],	# MATCH
				@match[8..9,0..1,2..7];				# REM, PRE, BITS
	};

	bless $closure, 'Text::Balanced::Extractor';
}

package Text::Balanced::Extractor;

sub extract($$)	# ($self, $text)
{
	&{$_[0]}($_[1]);
}

package Text::Balanced::ErrorMsg;

use overload '""' => sub { "$_[0]->{error}, detected at offset $_[0]->{pos}" };

1;

__END__

=pod

=head1 NAME

Text::Balanced - Extract delimited text sequences from strings.

=head1 SYNOPSIS

 use Text::Balanced qw (
			extract_delimited
			extract_bracketed
			extract_quotelike
			extract_codeblock
			extract_variable
			extract_tagged
			extract_multiple
			gen_delimited_pat
			gen_extract_tagged
		       );

 # Extract the initial substring of $text that is delimited by
 # two (unescaped) instances of the first character in $delim.

	($extracted, $remainder) = extract_delimited($text,$delim);


 # Extract the initial substring of $text that is bracketed
 # with a delimiter(s) specified by $delim (where the string
 # in $delim contains one or more of '(){}[]<>').

	($extracted, $remainder) = extract_bracketed($text,$delim);


 # Extract the initial substring of $text that is bounded by
 # an XML tag.

	($extracted, $remainder) = extract_tagged($text);


 # Extract the initial substring of $text that is bounded by
 # a C<BEGIN>...C<END> pair. Don't allow nested C<BEGIN> tags

	($extracted, $remainder) =
		extract_tagged($text,"BEGIN","END",undef,{bad=>["BEGIN"]});


 # Extract the initial substring of $text that represents a
 # Perl "quote or quote-like operation"

	($extracted, $remainder) = extract_quotelike($text);


 # Extract the initial substring of $text that represents a block
 # of Perl code, bracketed by any of character(s) specified by $delim
 # (where the string $delim contains one or more of '(){}[]<>').

	($extracted, $remainder) = extract_codeblock($text,$delim);


 # Extract the initial substrings of $text that would be extracted by
 # one or more sequential applications of the specified functions
 # or regular expressions

	@extracted = extract_multiple($text,
				      [ \&extract_bracketed,
					\&extract_quotelike,
					\&some_other_extractor_sub,
					qr/[xyz]*/,
					'literal',
				      ]);

# Create a string representing an optimized pattern (a la Friedl)
# that matches a substring delimited by any of the specified characters
# (in this case: any type of quote or a slash)

	$patstring = gen_delimited_pat(q{'"`/});

# Generate a reference to an anonymous sub that is just like extract_tagged
# but pre-compiled and optimized for a specific pair of tags, and consequently
# much faster (i.e. 3 times faster). It uses qr// for better performance on
# repeated calls, so it only works under Perl 5.005 or later.

	$extract_head = gen_extract_tagged('<HEAD>','</HEAD>');

	($extracted, $remainder) = $extract_head->($text);

=head1 DESCRIPTION

The various C<extract_...> subroutines may be used to
extract a delimited substring, possibly after skipping a
specified prefix string. By default, that prefix is
optional whitespace (C</\s*/>), but you can change it to whatever
you wish (see below).

The substring to be extracted must appear at the
current C<pos> location of the string's variable
(or at index zero, if no C<pos> position is defined).
In other words, the C<extract_...> subroutines I<don't>
extract the first occurrence of a substring anywhere
in a string (like an unanchored regex would). Rather,
they extract an occurrence of the substring appearing
immediately at the current matching position in the
string (like a C<\G>-anchored regex would).

=head2 General behaviour in list contexts

In a list context, all the subroutines return a list, the first three
elements of which are always:

=over 4

=item [0]

The extracted string, including the specified delimiters.
If the extraction fails C<undef> is returned.

=item [1]

The remainder of the input string (i.e. the characters after the
extracted string). On failure, the entire string is returned.

=item [2]

The skipped prefix (i.e. the characters before the extracted string).
On failure, C<undef> is returned.

=back 

Note that in a list context, the contents of the original input text (the first
argument) are not modified in any way. 

However, if the input text was passed in a variable, that variable's
C<pos> value is updated to point at the first character after the
extracted text. That means that in a list context the various
subroutines can be used much like regular expressions. For example:

	while ( $next = (extract_quotelike($text))[0] )
	{
		# process next quote-like (in $next)
	}

=head2 General behaviour in scalar and void contexts

In a scalar context, the extracted string is returned, having first been
removed from the input text. Thus, the following code also processes
each quote-like operation, but actually removes them from $text:

	while ( $next = extract_quotelike($text) )
	{
		# process next quote-like (in $next)
	}

Note that if the input text is a read-only string (i.e. a literal),
no attempt is made to remove the extracted text.

In a void context the behaviour of the extraction subroutines is
exactly the same as in a scalar context, except (of course) that the
extracted substring is not returned.

=head2 A note about prefixes

Prefix patterns are matched without any trailing modifiers (C</gimsox> etc.)
This can bite you if you're expecting a prefix specification like
'.*?(?=<H1>)' to skip everything up to the first <H1> tag. Such a prefix
pattern will only succeed if the <H1> tag is on the current line, since
. normally doesn't match newlines.

To overcome this limitation, you need to turn on /s matching within
the prefix pattern, using the C<(?s)> directive: '(?s).*?(?=<H1>)'

=head2 C<extract_delimited>

The C<extract_delimited> function formalizes the common idiom
of extracting a single-character-delimited substring from the start of
a string. For example, to extract a single-quote delimited string, the
following code is typically used:

	($remainder = $text) =~ s/\A('(\\.|[^'])*')//s;
	$extracted = $1;

but with C<extract_delimited> it can be simplified to:

	($extracted,$remainder) = extract_delimited($text, "'");

C<extract_delimited> takes up to four scalars (the input text, the
delimiters, a prefix pattern to be skipped, and any escape characters)
and extracts the initial substring of the text that
is appropriately delimited. If the delimiter string has multiple
characters, the first one encountered in the text is taken to delimit
the substring.
The third argument specifies a prefix pattern that is to be skipped
(but must be present!) before the substring is extracted.
The final argument specifies the escape character to be used for each
delimiter.

All arguments are optional. If the escape characters are not specified,
every delimiter is escaped with a backslash (C<\>).
If the prefix is not specified, the
pattern C<'\s*'> - optional whitespace - is used. If the delimiter set
is also not specified, the set C</["'`]/> is used. If the text to be processed
is not specified either, C<$_> is used.

In list context, C<extract_delimited> returns a array of three
elements, the extracted substring (I<including the surrounding
delimiters>), the remainder of the text, and the skipped prefix (if
any). If a suitable delimited substring is not found, the first
element of the array is the empty string, the second is the complete
original text, and the prefix returned in the third element is an
empty string.

In a scalar context, just the extracted substring is returned. In
a void context, the extracted substring (and any prefix) are simply
removed from the beginning of the first argument.

Examples:

	# Remove a single-quoted substring from the very beginning of $text:

		$substring = extract_delimited($text, "'", '');

	# Remove a single-quoted Pascalish substring (i.e. one in which
	# doubling the quote character escapes it) from the very
	# beginning of $text:

		$substring = extract_delimited($text, "'", '', "'");

	# Extract a single- or double- quoted substring from the
	# beginning of $text, optionally after some whitespace
	# (note the list context to protect $text from modification):

		($substring) = extract_delimited $text, q{"'};

	# Delete the substring delimited by the first '/' in $text:

		$text = join '', (extract_delimited($text,'/','[^/]*')[2,1];

Note that this last example is I<not> the same as deleting the first
quote-like pattern. For instance, if C<$text> contained the string:

	"if ('./cmd' =~ m/$UNIXCMD/s) { $cmd = $1; }"
	
then after the deletion it would contain:

	"if ('.$UNIXCMD/s) { $cmd = $1; }"

not:

	"if ('./cmd' =~ ms) { $cmd = $1; }"
	
See L<"extract_quotelike"> for a (partial) solution to this problem.

=head2 C<extract_bracketed>

Like C<"extract_delimited">, the C<extract_bracketed> function takes
up to three optional scalar arguments: a string to extract from, a delimiter
specifier, and a prefix pattern. As before, a missing prefix defaults to
optional whitespace and a missing text defaults to C<$_>. However, a missing
delimiter specifier defaults to C<'{}()[]E<lt>E<gt>'> (see below).

C<extract_bracketed> extracts a balanced-bracket-delimited
substring (using any one (or more) of the user-specified delimiter
brackets: '(..)', '{..}', '[..]', or '<..>'). Optionally it will also
respect quoted unbalanced brackets (see below).

A "delimiter bracket" is a bracket in list of delimiters passed as
C<extract_bracketed>'s second argument. Delimiter brackets are
specified by giving either the left or right (or both!) versions
of the required bracket(s). Note that the order in which
two or more delimiter brackets are specified is not significant.

A "balanced-bracket-delimited substring" is a substring bounded by
matched brackets, such that any other (left or right) delimiter
bracket I<within> the substring is also matched by an opposite
(right or left) delimiter bracket I<at the same level of nesting>. Any
type of bracket not in the delimiter list is treated as an ordinary
character.

In other words, each type of bracket specified as a delimiter must be
balanced and correctly nested within the substring, and any other kind of
("non-delimiter") bracket in the substring is ignored.

For example, given the string:

	$text = "{ an '[irregularly :-(] {} parenthesized >:-)' string }";

then a call to C<extract_bracketed> in a list context:

	@result = extract_bracketed( $text, '{}' );

would return:

	( "{ an '[irregularly :-(] {} parenthesized >:-)' string }" , "" , "" )

since both sets of C<'{..}'> brackets are properly nested and evenly balanced.
(In a scalar context just the first element of the array would be returned. In
a void context, C<$text> would be replaced by an empty string.)

Likewise the call in:

	@result = extract_bracketed( $text, '{[' );

would return the same result, since all sets of both types of specified
delimiter brackets are correctly nested and balanced.

However, the call in:

	@result = extract_bracketed( $text, '{([<' );

would fail, returning:

	( undef , "{ an '[irregularly :-(] {} parenthesized >:-)' string }"  );

because the embedded pairs of C<'(..)'>s and C<'[..]'>s are "cross-nested" and
the embedded C<'E<gt>'> is unbalanced. (In a scalar context, this call would
return an empty string. In a void context, C<$text> would be unchanged.)

Note that the embedded single-quotes in the string don't help in this
case, since they have not been specified as acceptable delimiters and are
therefore treated as non-delimiter characters (and ignored).

However, if a particular species of quote character is included in the
delimiter specification, then that type of quote will be correctly handled.
for example, if C<$text> is:

	$text = '<A HREF=">>>>">link</A>';

then

	@result = extract_bracketed( $text, '<">' );

returns:

	( '<A HREF=">>>>">', 'link</A>', "" )

as expected. Without the specification of C<"> as an embedded quoter:

	@result = extract_bracketed( $text, '<>' );

the result would be:

	( '<A HREF=">', '>>>">link</A>', "" )

In addition to the quote delimiters C<'>, C<">, and C<`>, full Perl quote-like
quoting (i.e. q{string}, qq{string}, etc) can be specified by including the
letter 'q' as a delimiter. Hence:

	@result = extract_bracketed( $text, '<q>' );

would correctly match something like this:

	$text = '<leftop: conj /and/ conj>';

See also: C<"extract_quotelike"> and C<"extract_codeblock">.

=head2 C<extract_variable>

C<extract_variable> extracts any valid Perl variable or
variable-involved expression, including scalars, arrays, hashes, array
accesses, hash look-ups, method calls through objects, subroutine calls
through subroutine references, etc.

The subroutine takes up to two optional arguments:

=over 4

=item 1.

A string to be processed (C<$_> if the string is omitted or C<undef>)

=item 2.

A string specifying a pattern to be matched as a prefix (which is to be
skipped). If omitted, optional whitespace is skipped.

=back

On success in a list context, an array of 3 elements is returned. The
elements are:

=over 4

=item [0]

the extracted variable, or variablish expression

=item [1]

the remainder of the input text,

=item [2]

the prefix substring (if any),

=back

On failure, all of these values (except the remaining text) are C<undef>.

In a scalar context, C<extract_variable> returns just the complete
substring that matched a variablish expression. C<undef> is returned on
failure. In addition, the original input text has the returned substring
(and any prefix) removed from it.

In a void context, the input text just has the matched substring (and
any specified prefix) removed.


=head2 C<extract_tagged>

C<extract_tagged> extracts and segments text between (balanced)
specified tags. 

The subroutine takes up to five optional arguments:

=over 4

=item 1.

A string to be processed (C<$_> if the string is omitted or C<undef>)

=item 2.

A string specifying a pattern to be matched as the opening tag.
If the pattern string is omitted (or C<undef>) then a pattern
that matches any standard XML tag is used.

=item 3.

A string specifying a pattern to be matched at the closing tag. 
If the pattern string is omitted (or C<undef>) then the closing
tag is constructed by inserting a C</> after any leading bracket
characters in the actual opening tag that was matched (I<not> the pattern
that matched the tag). For example, if the opening tag pattern
is specified as C<'{{\w+}}'> and actually matched the opening tag 
C<"{{DATA}}">, then the constructed closing tag would be C<"{{/DATA}}">.

=item 4.

A string specifying a pattern to be matched as a prefix (which is to be
skipped). If omitted, optional whitespace is skipped.

=item 5.

A hash reference containing various parsing options (see below)

=back

The various options that can be specified are:

=over 4

=item C<reject =E<gt> $listref>

The list reference contains one or more strings specifying patterns
that must I<not> appear within the tagged text.

For example, to extract
an HTML link (which should not contain nested links) use:

        extract_tagged($text, '<A>', '</A>', undef, {reject => ['<A>']} );

=item C<ignore =E<gt> $listref>

The list reference contains one or more strings specifying patterns
that are I<not> be be treated as nested tags within the tagged text
(even if they would match the start tag pattern).

For example, to extract an arbitrary XML tag, but ignore "empty" elements:

        extract_tagged($text, undef, undef, undef, {ignore => ['<[^>]*/>']} );

(also see L<"gen_delimited_pat"> below).

=item C<fail =E<gt> $str>

The C<fail> option indicates the action to be taken if a matching end
tag is not encountered (i.e. before the end of the string or some
C<reject> pattern matches). By default, a failure to match a closing
tag causes C<extract_tagged> to immediately fail.

However, if the string value associated with <reject> is "MAX", then
C<extract_tagged> returns the complete text up to the point of failure.
If the string is "PARA", C<extract_tagged> returns only the first paragraph
after the tag (up to the first line that is either empty or contains
only whitespace characters).
If the string is "", the the default behaviour (i.e. failure) is reinstated.

For example, suppose the start tag "/para" introduces a paragraph, which then
continues until the next "/endpara" tag or until another "/para" tag is
encountered:

        $text = "/para line 1\n\nline 3\n/para line 4";

        extract_tagged($text, '/para', '/endpara', undef,
                                {reject => '/para', fail => MAX );

        # EXTRACTED: "/para line 1\n\nline 3\n"

Suppose instead, that if no matching "/endpara" tag is found, the "/para"
tag refers only to the immediately following paragraph:

        $text = "/para line 1\n\nline 3\n/para line 4";

        extract_tagged($text, '/para', '/endpara', undef,
                        {reject => '/para', fail => MAX );

        # EXTRACTED: "/para line 1\n"

Note that the specified C<fail> behaviour applies to nested tags as well.

=back

On success in a list context, an array of 6 elements is returned. The elements are:

=over 4

=item [0]

the extracted tagged substring (including the outermost tags),

=item [1]

the remainder of the input text,

=item [2]

the prefix substring (if any),

=item [3]

the opening tag

=item [4]

the text between the opening and closing tags

=item [5]

the closing tag (or "" if no closing tag was found)

=back

On failure, all of these values (except the remaining text) are C<undef>.

In a scalar context, C<extract_tagged> returns just the complete
substring that matched a tagged text (including the start and end
tags). C<undef> is returned on failure. In addition, the original input
text has the returned substring (and any prefix) removed from it.

In a void context, the input text just has the matched substring (and
any specified prefix) removed.

=head2 C<gen_extract_tagged>

(Note: This subroutine is only available under Perl5.005)

C<gen_extract_tagged> generates a new anonymous subroutine which
extracts text between (balanced) specified tags. In other words,
it generates a function identical in function to C<extract_tagged>.

The difference between C<extract_tagged> and the anonymous
subroutines generated by
C<gen_extract_tagged>, is that those generated subroutines:

=over 4

=item * 

do not have to reparse tag specification or parsing options every time
they are called (whereas C<extract_tagged> has to effectively rebuild
its tag parser on every call);

=item *

make use of the new qr// construct to pre-compile the regexes they use
(whereas C<extract_tagged> uses standard string variable interpolation 
to create tag-matching patterns).

=back

The subroutine takes up to four optional arguments (the same set as
C<extract_tagged> except for the string to be processed). It returns
a reference to a subroutine which in turn takes a single argument (the text to
be extracted from).

In other words, the implementation of C<extract_tagged> is exactly
equivalent to:

        sub extract_tagged
        {
                my $text = shift;
                $extractor = gen_extract_tagged(@_);
                return $extractor->($text);
        }

(although C<extract_tagged> is not currently implemented that way, in order
to preserve pre-5.005 compatibility).

Using C<gen_extract_tagged> to create extraction functions for specific tags 
is a good idea if those functions are going to be called more than once, since
their performance is typically twice as good as the more general-purpose
C<extract_tagged>.


=head2 C<extract_quotelike>

C<extract_quotelike> attempts to recognize, extract, and segment any
one of the various Perl quotes and quotelike operators (see
L<perlop(3)>) Nested backslashed delimiters, embedded balanced bracket
delimiters (for the quotelike operators), and trailing modifiers are
all caught. For example, in:

        extract_quotelike 'q # an octothorpe: \# (not the end of the q!) #'
        
        extract_quotelike '  "You said, \"Use sed\"."  '

        extract_quotelike ' s{([A-Z]{1,8}\.[A-Z]{3})} /\L$1\E/; '

        extract_quotelike ' tr/\\\/\\\\/\\\//ds; '

the full Perl quotelike operations are all extracted correctly.

Note too that, when using the /x modifier on a regex, any comment
containing the current pattern delimiter will cause the regex to be
immediately terminated. In other words:

        'm /
                (?i)            # CASE INSENSITIVE
                [a-z_]          # LEADING ALPHABETIC/UNDERSCORE
                [a-z0-9]*       # FOLLOWED BY ANY NUMBER OF ALPHANUMERICS
           /x'

will be extracted as if it were:

        'm /
                (?i)            # CASE INSENSITIVE
                [a-z_]          # LEADING ALPHABETIC/'

This behaviour is identical to that of the actual compiler.

C<extract_quotelike> takes two arguments: the text to be processed and
a prefix to be matched at the very beginning of the text. If no prefix 
is specified, optional whitespace is the default. If no text is given,
C<$_> is used.

In a list context, an array of 11 elements is returned. The elements are:

=over 4

=item [0]

the extracted quotelike substring (including trailing modifiers),

=item [1]

the remainder of the input text,

=item [2]

the prefix substring (if any),

=item [3]

the name of the quotelike operator (if any),

=item [4]

the left delimiter of the first block of the operation,

=item [5]

the text of the first block of the operation
(that is, the contents of
a quote, the regex of a match or substitution or the target list of a
translation),

=item [6]

the right delimiter of the first block of the operation,

=item [7]

the left delimiter of the second block of the operation
(that is, if it is a C<s>, C<tr>, or C<y>),

=item [8]

the text of the second block of the operation 
(that is, the replacement of a substitution or the translation list
of a translation),

=item [9]

the right delimiter of the second block of the operation (if any),

=item [10]

the trailing modifiers on the operation (if any).

=back

For each of the fields marked "(if any)" the default value on success is
an empty string.
On failure, all of these values (except the remaining text) are C<undef>.

In a scalar context, C<extract_quotelike> returns just the complete substring
that matched a quotelike operation (or C<undef> on failure). In a scalar or
void context, the input text has the same substring (and any specified
prefix) removed.

Examples:

        # Remove the first quotelike literal that appears in text

                $quotelike = extract_quotelike($text,'.*?');

        # Replace one or more leading whitespace-separated quotelike
        # literals in $_ with "<QLL>"

                do { $_ = join '<QLL>', (extract_quotelike)[2,1] } until $@;


        # Isolate the search pattern in a quotelike operation from $text

                ($op,$pat) = (extract_quotelike $text)[3,5];
                if ($op =~ /[ms]/)
                {
                        print "search pattern: $pat\n";
                }
                else
                {
                        print "$op is not a pattern matching operation\n";
                }

=head2 C<extract_quotelike> and "here documents"

C<extract_quotelike> can successfully extract "here documents" from an input
string, but with an important caveat in list contexts.

Unlike other types of quote-like literals, a here document is rarely
a contiguous substring. For example, a typical piece of code using
here document might look like this:

        <<'EOMSG' || die;
        This is the message.
        EOMSG
        exit;

Given this as an input string in a scalar context, C<extract_quotelike>
would correctly return the string "<<'EOMSG'\nThis is the message.\nEOMSG",
leaving the string " || die;\nexit;" in the original variable. In other words,
the two separate pieces of the here document are successfully extracted and
concatenated.

In a list context, C<extract_quotelike> would return the list

=over 4

=item [0]

"<<'EOMSG'\nThis is the message.\nEOMSG\n" (i.e. the full extracted here document,
including fore and aft delimiters),

=item [1]

" || die;\nexit;" (i.e. the remainder of the input text, concatenated),

=item [2]

"" (i.e. the prefix substring -- trivial in this case),

=item [3]

"<<" (i.e. the "name" of the quotelike operator)

=item [4]

"'EOMSG'" (i.e. the left delimiter of the here document, including any quotes),

=item [5]

"This is the message.\n" (i.e. the text of the here document),

=item [6]

"EOMSG" (i.e. the right delimiter of the here document),

=item [7..10]

"" (a here document has no second left delimiter, second text, second right
delimiter, or trailing modifiers).

=back

However, the matching position of the input variable would be set to
"exit;" (i.e. I<after> the closing delimiter of the here document),
which would cause the earlier " || die;\nexit;" to be skipped in any
sequence of code fragment extractions.

To avoid this problem, when it encounters a here document whilst
extracting from a modifiable string, C<extract_quotelike> silently
rearranges the string to an equivalent piece of Perl:

        <<'EOMSG'
        This is the message.
        EOMSG
        || die;
        exit;

in which the here document I<is> contiguous. It still leaves the
matching position after the here document, but now the rest of the line
on which the here document starts is not skipped.

To prevent <extract_quotelike> from mucking about with the input in this way
(this is the only case where a list-context C<extract_quotelike> does so),
you can pass the input variable as an interpolated literal:

        $quotelike = extract_quotelike("$var");

=head2 C<extract_codeblock>

C<extract_codeblock> attempts to recognize and extract a balanced
bracket delimited substring that may contain unbalanced brackets
inside Perl quotes or quotelike operations. That is, C<extract_codeblock>
is like a combination of C<"extract_bracketed"> and
C<"extract_quotelike">.

C<extract_codeblock> takes the same initial three parameters as C<extract_bracketed>:
a text to process, a set of delimiter brackets to look for, and a prefix to
match first. It also takes an optional fourth parameter, which allows the
outermost delimiter brackets to be specified separately (see below).

Omitting the first argument (input text) means process C<$_> instead.
Omitting the second argument (delimiter brackets) indicates that only C<'{'> is to be used.
Omitting the third argument (prefix argument) implies optional whitespace at the start.
Omitting the fourth argument (outermost delimiter brackets) indicates that the
value of the second argument is to be used for the outermost delimiters.

Once the prefix an dthe outermost opening delimiter bracket have been
recognized, code blocks are extracted by stepping through the input text and
trying the following alternatives in sequence:

=over 4

=item 1.

Try and match a closing delimiter bracket. If the bracket was the same
species as the last opening bracket, return the substring to that
point. If the bracket was mismatched, return an error.

=item 2.

Try to match a quote or quotelike operator. If found, call
C<extract_quotelike> to eat it. If C<extract_quotelike> fails, return
the error it returned. Otherwise go back to step 1.

=item 3.

Try to match an opening delimiter bracket. If found, call
C<extract_codeblock> recursively to eat the embedded block. If the
recursive call fails, return an error. Otherwise, go back to step 1.

=item 4.

Unconditionally match a bareword or any other single character, and
then go back to step 1.

=back

Examples:

        # Find a while loop in the text

                if ($text =~ s/.*?while\s*\{/{/)
                {
                        $loop = "while " . extract_codeblock($text);
                }

        # Remove the first round-bracketed list (which may include
        # round- or curly-bracketed code blocks or quotelike operators)

                extract_codeblock $text, "(){}", '[^(]*';


The ability to specify a different outermost delimiter bracket is useful
in some circumstances. For example, in the Parse::RecDescent module,
parser actions which are to be performed only on a successful parse
are specified using a C<E<lt>defer:...E<gt>> directive. For example:

        sentence: subject verb object
                        <defer: {$::theVerb = $item{verb}} >

Parse::RecDescent uses C<extract_codeblock($text, '{}E<lt>E<gt>')> to extract the code
within the C<E<lt>defer:...E<gt>> directive, but there's a problem.

A deferred action like this:

                        <defer: {if ($count>10) {$count--}} >

will be incorrectly parsed as:

                        <defer: {if ($count>

because the "less than" operator is interpreted as a closing delimiter.

But, by extracting the directive using
S<C<extract_codeblock($text, '{}', undef, 'E<lt>E<gt>')>>
the '>' character is only treated as a delimited at the outermost
level of the code block, so the directive is parsed correctly.

=head2 C<extract_multiple>

The C<extract_multiple> subroutine takes a string to be processed and a 
list of extractors (subroutines or regular expressions) to apply to that string.

In an array context C<extract_multiple> returns an array of substrings
of the original string, as extracted by the specified extractors.
In a scalar context, C<extract_multiple> returns the first
substring successfully extracted from the original string. In both
scalar and void contexts the original string has the first successfully
extracted substring removed from it. In all contexts
C<extract_multiple> starts at the current C<pos> of the string, and
sets that C<pos> appropriately after it matches.

Hence, the aim of of a call to C<extract_multiple> in a list context
is to split the processed string into as many non-overlapping fields as
possible, by repeatedly applying each of the specified extractors
to the remainder of the string. Thus C<extract_multiple> is
a generalized form of Perl's C<split> subroutine.

The subroutine takes up to four optional arguments:

=over 4

=item 1.

A string to be processed (C<$_> if the string is omitted or C<undef>)

=item 2.

A reference to a list of subroutine references and/or qr// objects and/or
literal strings and/or hash references, specifying the extractors
to be used to split the string. If this argument is omitted (or
C<undef>) the list:

        [
                sub { extract_variable($_[0], '') },
                sub { extract_quotelike($_[0],'') },
                sub { extract_codeblock($_[0],'{}','') },
        ]

is used.

=item 3.

An number specifying the maximum number of fields to return. If this
argument is omitted (or C<undef>), split continues as long as possible.

If the third argument is I<N>, then extraction continues until I<N> fields
have been successfully extracted, or until the string has been completely 
processed.

Note that in scalar and void contexts the value of this argument is 
automatically reset to 1 (under C<-w>, a warning is issued if the argument 
has to be reset).

=item 4.

A value indicating whether unmatched substrings (see below) within the
text should be skipped or returned as fields. If the value is true,
such substrings are skipped. Otherwise, they are returned.

=back

The extraction process works by applying each extractor in
sequence to the text string.

If the extractor is a subroutine it is called in a list context and is
expected to return a list of a single element, namely the extracted
text. It may optionally also return two further arguments: a string
representing the text left after extraction (like $' for a pattern
match), and a string representing any prefix skipped before the
extraction (like $` in a pattern match). Note that this is designed
to facilitate the use of other Text::Balanced subroutines with
C<extract_multiple>. Note too that the value returned by an extractor
subroutine need not bear any relationship to the corresponding substring
of the original text (see examples below).

If the extractor is a precompiled regular expression or a string,
it is matched against the text in a scalar context with a leading
'\G' and the gc modifiers enabled. The extracted value is either
$1 if that variable is defined after the match, or else the
complete match (i.e. $&).

If the extractor is a hash reference, it must contain exactly one element.
The value of that element is one of the
above extractor types (subroutine reference, regular expression, or string).
The key of that element is the name of a class into which the successful
return value of the extractor will be blessed.

If an extractor returns a defined value, that value is immediately
treated as the next extracted field and pushed onto the list of fields.
If the extractor was specified in a hash reference, the field is also
blessed into the appropriate class, 

If the extractor fails to match (in the case of a regex extractor), or returns an empty list or an undefined value (in the case of a subroutine extractor), it is
assumed to have failed to extract.
If none of the extractor subroutines succeeds, then one
character is extracted from the start of the text and the extraction
subroutines reapplied. Characters which are thus removed are accumulated and
eventually become the next field (unless the fourth argument is true, in which
case they are discarded).

For example, the following extracts substrings that are valid Perl variables:

        @fields = extract_multiple($text,
                                   [ sub { extract_variable($_[0]) } ],
                                   undef, 1);

This example separates a text into fields which are quote delimited,
curly bracketed, and anything else. The delimited and bracketed
parts are also blessed to identify them (the "anything else" is unblessed):

        @fields = extract_multiple($text,
                   [
                        { Delim => sub { extract_delimited($_[0],q{'"}) } },
                        { Brack => sub { extract_bracketed($_[0],'{}') } },
                   ]);

This call extracts the next single substring that is a valid Perl quotelike
operator (and removes it from $text):

        $quotelike = extract_multiple($text,
                                      [
                                        sub { extract_quotelike($_[0]) },
                                      ], undef, 1);

Finally, here is yet another way to do comma-separated value parsing:

        @fields = extract_multiple($csv_text,
                                  [
                                        sub { extract_delimited($_[0],q{'"}) },
                                        qr/([^,]+)(.*)/,
                                  ],
                                  undef,1);

The list in the second argument means:
I<"Try and extract a ' or " delimited string, otherwise extract anything up to a comma...">.
The undef third argument means:
I<"...as many times as possible...">,
and the true value in the fourth argument means
I<"...discarding anything else that appears (i.e. the commas)">.

If you wanted the commas preserved as separate fields (i.e. like split
does if your split pattern has capturing parentheses), you would
just make the last parameter undefined (or remove it).

=head2 C<gen_delimited_pat>

The C<gen_delimited_pat> subroutine takes a single (string) argument and
   > builds a Friedl-style optimized regex that matches a string delimited
by any one of the characters in the single argument. For example:

        gen_delimited_pat(q{'"})

returns the regex:

        (?:\"(?:\\\"|(?!\").)*\"|\'(?:\\\'|(?!\').)*\')

Note that the specified delimiters are automatically quotemeta'd.

A typical use of C<gen_delimited_pat> would be to build special purpose tags
for C<extract_tagged>. For example, to properly ignore "empty" XML elements
(which might contain quoted strings):

        my $empty_tag = '<(' . gen_delimited_pat(q{'"}) . '|.)+/>';

        extract_tagged($text, undef, undef, undef, {ignore => [$empty_tag]} );

C<gen_delimited_pat> may also be called with an optional second argument,
which specifies the "escape" character(s) to be used for each delimiter.
For example to match a Pascal-style string (where ' is the delimiter
and '' is a literal ' within the string):

        gen_delimited_pat(q{'},q{'});

Different escape characters can be specified for different delimiters.
For example, to specify that '/' is the escape for single quotes
and '%' is the escape for double quotes:

        gen_delimited_pat(q{'"},q{/%});

If more delimiters than escape chars are specified, the last escape char
is used for the remaining delimiters.
If no escape char is specified for a given specified delimiter, '\' is used.

=head2 C<delimited_pat>

Note that C<gen_delimited_pat> was previously called C<delimited_pat>.
That name may still be used, but is now deprecated.
        

=head1 DIAGNOSTICS

In a list context, all the functions return C<(undef,$original_text)>
on failure. In a scalar context, failure is indicated by returning C<undef>
(in this case the input text is not modified in any way).

In addition, on failure in I<any> context, the C<$@> variable is set.
Accessing C<$@-E<gt>{error}> returns one of the error diagnostics listed
below.
Accessing C<$@-E<gt>{pos}> returns the offset into the original string at
which the error was detected (although not necessarily where it occurred!)
Printing C<$@> directly produces the error message, with the offset appended.
On success, the C<$@> variable is guaranteed to be C<undef>.

The available diagnostics are:

=over 4

=item  C<Did not find a suitable bracket: "%s">

The delimiter provided to C<extract_bracketed> was not one of
C<'()[]E<lt>E<gt>{}'>.

=item  C<Did not find prefix: /%s/>

A non-optional prefix was specified but wasn't found at the start of the text.

=item  C<Did not find opening bracket after prefix: "%s">

C<extract_bracketed> or C<extract_codeblock> was expecting a
particular kind of bracket at the start of the text, and didn't find it.

=item  C<No quotelike operator found after prefix: "%s">

C<extract_quotelike> didn't find one of the quotelike operators C<q>,
C<qq>, C<qw>, C<qx>, C<s>, C<tr> or C<y> at the start of the substring
it was extracting.

=item  C<Unmatched closing bracket: "%c">

C<extract_bracketed>, C<extract_quotelike> or C<extract_codeblock> encountered
a closing bracket where none was expected.

=item  C<Unmatched opening bracket(s): "%s">

C<extract_bracketed>, C<extract_quotelike> or C<extract_codeblock> ran 
out of characters in the text before closing one or more levels of nested
brackets.

=item C<Unmatched embedded quote (%s)>

C<extract_bracketed> attempted to match an embedded quoted substring, but
failed to find a closing quote to match it.

=item C<Did not find closing delimiter to match '%s'>

C<extract_quotelike> was unable to find a closing delimiter to match the
one that opened the quote-like operation.

=item  C<Mismatched closing bracket: expected "%c" but found "%s">

C<extract_bracketed>, C<extract_quotelike> or C<extract_codeblock> found
a valid bracket delimiter, but it was the wrong species. This usually
indicates a nesting error, but may indicate incorrect quoting or escaping.

=item  C<No block delimiter found after quotelike "%s">

C<extract_quotelike> or C<extract_codeblock> found one of the
quotelike operators C<q>, C<qq>, C<qw>, C<qx>, C<s>, C<tr> or C<y>
without a suitable block after it.

=item C<Did not find leading dereferencer>

C<extract_variable> was expecting one of '$', '@', or '%' at the start of
a variable, but didn't find any of them.

=item C<Bad identifier after dereferencer>

C<extract_variable> found a '$', '@', or '%' indicating a variable, but that
character was not followed by a legal Perl identifier.

=item C<Did not find expected opening bracket at %s>

C<extract_codeblock> failed to find any of the outermost opening brackets
that were specified.

=item C<Improperly nested codeblock at %s>

A nested code block was found that started with a delimiter that was specified
as being only to be used as an outermost bracket.

=item  C<Missing second block for quotelike "%s">

C<extract_codeblock> or C<extract_quotelike> found one of the
quotelike operators C<s>, C<tr> or C<y> followed by only one block.

=item C<No match found for opening bracket>

C<extract_codeblock> failed to find a closing bracket to match the outermost
opening bracket.

=item C<Did not find opening tag: /%s/>

C<extract_tagged> did not find a suitable opening tag (after any specified
prefix was removed).

=item C<Unable to construct closing tag to match: /%s/>

C<extract_tagged> matched the specified opening tag and tried to
modify the matched text to produce a matching closing tag (because
none was specified). It failed to generate the closing tag, almost
certainly because the opening tag did not start with a
bracket of some kind.

=item C<Found invalid nested tag: %s>

C<extract_tagged> found a nested tag that appeared in the "reject" list
(and the failure mode was not "MAX" or "PARA").

=item C<Found unbalanced nested tag: %s>

C<extract_tagged> found a nested opening tag that was not matched by a
corresponding nested closing tag (and the failure mode was not "MAX" or "PARA").

=item C<Did not find closing tag>

C<extract_tagged> reached the end of the text without finding a closing tag
to match the original opening tag (and the failure mode was not
"MAX" or "PARA").

=back

=head1 AUTHOR

Damian Conway (damian@conway.org)

=head1 BUGS AND IRRITATIONS

There are undoubtedly serious bugs lurking somewhere in this code, if
only because parts of it give the impression of understanding a great deal
more about Perl than they really do. 

Bug reports and other feedback are most welcome.

=head1 COPYRIGHT

Copyright 1997 - 2001 Damian Conway. All Rights Reserved.

Some (minor) parts copyright 2009 Adam Kennedy.

This module is free software. It may be used, redistributed
and/or modified under the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                  usr/share/perl/5.20.2/Thread/                                                                       0040755 0000000 0000000 00000000000 13077704254 014071  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Thread/Queue.pm                                                               0100644 0000000 0000000 00000037245 12744441327 015522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Thread::Queue;

use strict;
use warnings;

our $VERSION = '3.05';
$VERSION = eval $VERSION;

use threads::shared 1.21;
use Scalar::Util 1.10 qw(looks_like_number blessed reftype refaddr);

# Carp errors from threads::shared calls should complain about caller
our @CARP_NOT = ("threads::shared");

# Create a new queue possibly pre-populated with items
sub new
{
    my $class = shift;
    my @queue :shared = map { shared_clone($_) } @_;
    my %self :shared = ( 'queue' => \@queue );
    return bless(\%self, $class);
}

# Add items to the tail of a queue
sub enqueue
{
    my $self = shift;
    lock(%$self);
    if ($$self{'ENDED'}) {
        require Carp;
        Carp::croak("'enqueue' method called on queue that has been 'end'ed");
    }
    push(@{$$self{'queue'}}, map { shared_clone($_) } @_)
        and cond_signal(%$self);
}

# Return a count of the number of items on a queue
sub pending
{
    my $self = shift;
    lock(%$self);
    return if ($$self{'ENDED'} && ! @{$$self{'queue'}});
    return scalar(@{$$self{'queue'}});
}

# Indicate that no more data will enter the queue
sub end
{
    my $self = shift;
    lock $self;
    # No more data is coming
    $$self{'ENDED'} = 1;
    # Try to release at least one blocked thread
    cond_signal(%$self);
}

# Return 1 or more items from the head of a queue, blocking if needed
sub dequeue
{
    my $self = shift;
    lock(%$self);
    my $queue = $$self{'queue'};

    my $count = @_ ? $self->_validate_count(shift) : 1;

    # Wait for requisite number of items
    cond_wait(%$self) while ((@$queue < $count) && ! $$self{'ENDED'});
    cond_signal(%$self) if ((@$queue > $count) || $$self{'ENDED'});

    # If no longer blocking, try getting whatever is left on the queue
    return $self->dequeue_nb($count) if ($$self{'ENDED'});

    # Return single item
    return shift(@$queue) if ($count == 1);

    # Return multiple items
    my @items;
    push(@items, shift(@$queue)) for (1..$count);
    return @items;
}

# Return items from the head of a queue with no blocking
sub dequeue_nb
{
    my $self = shift;
    lock(%$self);
    my $queue = $$self{'queue'};

    my $count = @_ ? $self->_validate_count(shift) : 1;

    # Return single item
    return shift(@$queue) if ($count == 1);

    # Return multiple items
    my @items;
    for (1..$count) {
        last if (! @$queue);
        push(@items, shift(@$queue));
    }
    return @items;
}

# Return items from the head of a queue, blocking if needed up to a timeout
sub dequeue_timed
{
    my $self = shift;
    lock(%$self);
    my $queue = $$self{'queue'};

    # Timeout may be relative or absolute
    my $timeout = @_ ? $self->_validate_timeout(shift) : -1;
    # Convert to an absolute time for use with cond_timedwait()
    if ($timeout < 32000000) {   # More than one year
        $timeout += time();
    }

    my $count = @_ ? $self->_validate_count(shift) : 1;

    # Wait for requisite number of items, or until timeout
    while ((@$queue < $count) && ! $$self{'ENDED'}) {
        last if (! cond_timedwait(%$self, $timeout));
    }
    cond_signal(%$self) if ((@$queue > $count) || $$self{'ENDED'});

    # Get whatever we need off the queue if available
    return $self->dequeue_nb($count);
}

# Return an item without removing it from a queue
sub peek
{
    my $self = shift;
    lock(%$self);
    my $index = @_ ? $self->_validate_index(shift) : 0;
    return $$self{'queue'}[$index];
}

# Insert items anywhere into a queue
sub insert
{
    my $self = shift;
    lock(%$self);

    if ($$self{'ENDED'}) {
        require Carp;
        Carp::croak("'insert' method called on queue that has been 'end'ed");
    }

    my $queue = $$self{'queue'};

    my $index = $self->_validate_index(shift);

    return if (! @_);   # Nothing to insert

    # Support negative indices
    if ($index < 0) {
        $index += @$queue;
        if ($index < 0) {
            $index = 0;
        }
    }

    # Dequeue items from $index onward
    my @tmp;
    while (@$queue > $index) {
        unshift(@tmp, pop(@$queue))
    }

    # Add new items to the queue
    push(@$queue, map { shared_clone($_) } @_);

    # Add previous items back onto the queue
    push(@$queue, @tmp);

    # Soup's up
    cond_signal(%$self);
}

# Remove items from anywhere in a queue
sub extract
{
    my $self = shift;
    lock(%$self);
    my $queue = $$self{'queue'};

    my $index = @_ ? $self->_validate_index(shift) : 0;
    my $count = @_ ? $self->_validate_count(shift) : 1;

    # Support negative indices
    if ($index < 0) {
        $index += @$queue;
        if ($index < 0) {
            $count += $index;
            return if ($count <= 0);            # Beyond the head of the queue
            return $self->dequeue_nb($count);  # Extract from the head
        }
    }

    # Dequeue items from $index+$count onward
    my @tmp;
    while (@$queue > ($index+$count)) {
        unshift(@tmp, pop(@$queue))
    }

    # Extract desired items
    my @items;
    unshift(@items, pop(@$queue)) while (@$queue > $index);

    # Add back any removed items
    push(@$queue, @tmp);

    # Return single item
    return $items[0] if ($count == 1);

    # Return multiple items
    return @items;
}

### Internal Methods ###

# Check value of the requested index
sub _validate_index
{
    my $self = shift;
    my $index = shift;

    if (! defined($index) ||
        ! looks_like_number($index) ||
        (int($index) != $index))
    {
        require Carp;
        my ($method) = (caller(1))[3];
        my $class_name = ref($self);
        $method =~ s/$class_name\:://;
        $index = 'undef' if (! defined($index));
        Carp::croak("Invalid 'index' argument ($index) to '$method' method");
    }

    return $index;
};

# Check value of the requested count
sub _validate_count
{
    my $self = shift;
    my $count = shift;

    if (! defined($count) ||
        ! looks_like_number($count) ||
        (int($count) != $count) ||
        ($count < 1))
    {
        require Carp;
        my ($method) = (caller(1))[3];
        my $class_name = ref($self);
        $method =~ s/$class_name\:://;
        $count = 'undef' if (! defined($count));
        Carp::croak("Invalid 'count' argument ($count) to '$method' method");
    }

    return $count;
};

# Check value of the requested timeout
sub _validate_timeout
{
    my $self = shift;
    my $timeout = shift;

    if (! defined($timeout) ||
        ! looks_like_number($timeout))
    {
        require Carp;
        my ($method) = (caller(1))[3];
        my $class_name = ref($self);
        $method =~ s/$class_name\:://;
        $timeout = 'undef' if (! defined($timeout));
        Carp::croak("Invalid 'timeout' argument ($timeout) to '$method' method");
    }

    return $timeout;
};

1;

=head1 NAME

Thread::Queue - Thread-safe queues

=head1 VERSION

This document describes Thread::Queue version 3.05

=head1 SYNOPSIS

    use strict;
    use warnings;

    use threads;
    use Thread::Queue;

    my $q = Thread::Queue->new();    # A new empty queue

    # Worker thread
    my $thr = threads->create(
        sub {
            # Thread will loop until no more work
            while (defined(my $item = $q->dequeue())) {
                # Do work on $item
                ...
            }
        }
    );

    # Send work to the thread
    $q->enqueue($item1, ...);
    # Signal that there is no more work to be sent
    $q->end();
    # Join up with the thread when it finishes
    $thr->join();

    ...

    # Count of items in the queue
    my $left = $q->pending();

    # Non-blocking dequeue
    if (defined(my $item = $q->dequeue_nb())) {
        # Work on $item
    }

    # Blocking dequeue with 5-second timeout
    if (defined(my $item = $q->dequeue_timed(5))) {
        # Work on $item
    }

    # Get the second item in the queue without dequeuing anything
    my $item = $q->peek(1);

    # Insert two items into the queue just behind the head
    $q->insert(1, $item1, $item2);

    # Extract the last two items on the queue
    my ($item1, $item2) = $q->extract(-2, 2);

=head1 DESCRIPTION

This module provides thread-safe FIFO queues that can be accessed safely by
any number of threads.

Any data types supported by L<threads::shared> can be passed via queues:

=over

=item Ordinary scalars

=item Array refs

=item Hash refs

=item Scalar refs

=item Objects based on the above

=back

Ordinary scalars are added to queues as they are.

If not already thread-shared, the other complex data types will be cloned
(recursively, if needed, and including any C<bless>ings and read-only
settings) into thread-shared structures before being placed onto a queue.

For example, the following would cause L<Thread::Queue> to create a empty,
shared array reference via C<&shared([])>, copy the elements 'foo', 'bar'
and 'baz' from C<@ary> into it, and then place that shared reference onto
the queue:

    my @ary = qw/foo bar baz/;
    $q->enqueue(\@ary);

However, for the following, the items are already shared, so their references
are added directly to the queue, and no cloning takes place:

    my @ary :shared = qw/foo bar baz/;
    $q->enqueue(\@ary);

    my $obj = &shared({});
    $$obj{'foo'} = 'bar';
    $$obj{'qux'} = 99;
    bless($obj, 'My::Class');
    $q->enqueue($obj);

See L</"LIMITATIONS"> for caveats related to passing objects via queues.

=head1 QUEUE CREATION

=over

=item ->new()

Creates a new empty queue.

=item ->new(LIST)

Creates a new queue pre-populated with the provided list of items.

=back

=head1 BASIC METHODS

The following methods deal with queues on a FIFO basis.

=over

=item ->enqueue(LIST)

Adds a list of items onto the end of the queue.

=item ->dequeue()

=item ->dequeue(COUNT)

Removes the requested number of items (default is 1) from the head of the
queue, and returns them.  If the queue contains fewer than the requested
number of items, then the thread will be blocked until the requisite number
of items are available (i.e., until other threads <enqueue> more items).

=item ->dequeue_nb()

=item ->dequeue_nb(COUNT)

Removes the requested number of items (default is 1) from the head of the
queue, and returns them.  If the queue contains fewer than the requested
number of items, then it immediately (i.e., non-blocking) returns whatever
items there are on the queue.  If the queue is empty, then C<undef> is
returned.

=item ->dequeue_timed(TIMEOUT)

=item ->dequeue_timed(TIMEOUT, COUNT)

Removes the requested number of items (default is 1) from the head of the
queue, and returns them.  If the queue contains fewer than the requested
number of items, then the thread will be blocked until the requisite number of
items are available, or until the timeout is reached.  If the timeout is
reached, it returns whatever items there are on the queue, or C<undef> if the
queue is empty.

The timeout may be a number of seconds relative to the current time (e.g., 5
seconds from when the call is made), or may be an absolute timeout in I<epoch>
seconds the same as would be used with
L<cond_timedwait()|threads::shared/"cond_timedwait VARIABLE, ABS_TIMEOUT">.
Fractional seconds (e.g., 2.5 seconds) are also supported (to the extent of
the underlying implementation).

If C<TIMEOUT> is missing, C<undef>, or less than or equal to 0, then this call
behaves the same as C<dequeue_nb>.

=item ->pending()

Returns the number of items still in the queue.  Returns C<undef> if the queue
has been ended (see below), and there are no more items in the queue.

=item ->end()

Declares that no more items will be added to the queue.

All threads blocking on C<dequeue()> calls will be unblocked with any
remaining items in the queue and/or C<undef> being returned.  Any subsequent
calls to C<dequeue()> will behave like C<dequeue_nb()>.

Once ended, no more items may be placed in the queue.

=back

=head1 ADVANCED METHODS

The following methods can be used to manipulate items anywhere in a queue.

To prevent the contents of a queue from being modified by another thread
while it is being examined and/or changed, L<lock|threads::shared/"lock
VARIABLE"> the queue inside a local block:

    {
        lock($q);   # Keep other threads from changing the queue's contents
        my $item = $q->peek();
        if ($item ...) {
            ...
        }
    }
    # Queue is now unlocked

=over

=item ->peek()

=item ->peek(INDEX)

Returns an item from the queue without dequeuing anything.  Defaults to the
the head of queue (at index position 0) if no index is specified.  Negative
index values are supported as with L<arrays|perldata/"Subscripts"> (i.e., -1
is the end of the queue, -2 is next to last, and so on).

If no items exists at the specified index (i.e., the queue is empty, or the
index is beyond the number of items on the queue), then C<undef> is returned.

Remember, the returned item is not removed from the queue, so manipulating a
C<peek>ed at reference affects the item on the queue.

=item ->insert(INDEX, LIST)

Adds the list of items to the queue at the specified index position (0
is the head of the list).  Any existing items at and beyond that position are
pushed back past the newly added items:

    $q->enqueue(1, 2, 3, 4);
    $q->insert(1, qw/foo bar/);
    # Queue now contains:  1, foo, bar, 2, 3, 4

Specifying an index position greater than the number of items in the queue
just adds the list to the end.

Negative index positions are supported:

    $q->enqueue(1, 2, 3, 4);
    $q->insert(-2, qw/foo bar/);
    # Queue now contains:  1, 2, foo, bar, 3, 4

Specifying a negative index position greater than the number of items in the
queue adds the list to the head of the queue.

=item ->extract()

=item ->extract(INDEX)

=item ->extract(INDEX, COUNT)

Removes and returns the specified number of items (defaults to 1) from the
specified index position in the queue (0 is the head of the queue).  When
called with no arguments, C<extract> operates the same as C<dequeue_nb>.

This method is non-blocking, and will return only as many items as are
available to fulfill the request:

    $q->enqueue(1, 2, 3, 4);
    my $item  = $q->extract(2)     # Returns 3
                                   # Queue now contains:  1, 2, 4
    my @items = $q->extract(1, 3)  # Returns (2, 4)
                                   # Queue now contains:  1

Specifying an index position greater than the number of items in the
queue results in C<undef> or an empty list being returned.

    $q->enqueue('foo');
    my $nada = $q->extract(3)      # Returns undef
    my @nada = $q->extract(1, 3)   # Returns ()

Negative index positions are supported.  Specifying a negative index position
greater than the number of items in the queue may return items from the head
of the queue (similar to C<dequeue_nb>) if the count overlaps the head of the
queue from the specified position (i.e. if queue size + index + count is
greater than zero):

    $q->enqueue(qw/foo bar baz/);
    my @nada = $q->extract(-6, 2);   # Returns ()         - (3+(-6)+2) <= 0
    my @some = $q->extract(-6, 4);   # Returns (foo)      - (3+(-6)+4) > 0
                                     # Queue now contains:  bar, baz
    my @rest = $q->extract(-3, 4);   # Returns (bar, baz) - (2+(-3)+4) > 0

=back

=head1 NOTES

Queues created by L<Thread::Queue> can be used in both threaded and
non-threaded applications.

=head1 LIMITATIONS

Passing objects on queues may not work if the objects' classes do not support
sharing.  See L<threads::shared/"BUGS AND LIMITATIONS"> for more.

Passing array/hash refs that contain objects may not work for Perl prior to
5.10.0.

=head1 SEE ALSO

Thread::Queue Discussion Forum on CPAN:
L<http://www.cpanforum.com/dist/Thread-Queue>

L<threads>, L<threads::shared>

Sample code in the I<examples> directory of this distribution on CPAN.

=head1 MAINTAINER

Jerry D. Hedden, S<E<lt>jdhedden AT cpan DOT orgE<gt>>

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                           usr/share/perl/5.20.2/Thread/Semaphore.pm                                                           0100644 0000000 0000000 00000014340 12744441327 016350  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Thread::Semaphore;

use strict;
use warnings;

our $VERSION = '2.12';
$VERSION = eval $VERSION;

use threads::shared;
use Scalar::Util 1.10 qw(looks_like_number);

# Predeclarations for internal functions
my ($validate_arg);

# Create a new semaphore optionally with specified count (count defaults to 1)
sub new {
    my $class = shift;

    my $val :shared = 1;
    if (@_) {
        $val = shift;
        if (! defined($val) ||
            ! looks_like_number($val) ||
            (int($val) != $val))
        {
            require Carp;
            $val = 'undef' if (! defined($val));
            Carp::croak("Semaphore initializer is not an integer: $val");
        }
    }

    return bless(\$val, $class);
}

# Decrement a semaphore's count (decrement amount defaults to 1)
sub down {
    my $sema = shift;
    my $dec = @_ ? $validate_arg->(shift) : 1;

    lock($$sema);
    cond_wait($$sema) until ($$sema >= $dec);
    $$sema -= $dec;
}

# Decrement a semaphore's count only if count >= decrement value
#  (decrement amount defaults to 1)
sub down_nb {
    my $sema = shift;
    my $dec = @_ ? $validate_arg->(shift) : 1;

    lock($$sema);
    my $ok = ($$sema >= $dec);
    $$sema -= $dec if $ok;
    return $ok;
}

# Decrement a semaphore's count even if the count goes below 0
#  (decrement amount defaults to 1)
sub down_force {
    my $sema = shift;
    my $dec = @_ ? $validate_arg->(shift) : 1;

    lock($$sema);
    $$sema -= $dec;
}

# Increment a semaphore's count (increment amount defaults to 1)
sub up {
    my $sema = shift;
    my $inc = @_ ? $validate_arg->(shift) : 1;

    lock($$sema);
    ($$sema += $inc) > 0 and cond_broadcast($$sema);
}

### Internal Functions ###

# Validate method argument
$validate_arg = sub {
    my $arg = shift;

    if (! defined($arg) ||
        ! looks_like_number($arg) ||
        (int($arg) != $arg) ||
        ($arg < 1))
    {
        require Carp;
        my ($method) = (caller(1))[3];
        $method =~ s/Thread::Semaphore:://;
        $arg = 'undef' if (! defined($arg));
        Carp::croak("Argument to semaphore method '$method' is not a positive integer: $arg");
    }

    return $arg;
};

1;

=head1 NAME

Thread::Semaphore - Thread-safe semaphores

=head1 VERSION

This document describes Thread::Semaphore version 2.12

=head1 SYNOPSIS

    use Thread::Semaphore;
    my $s = Thread::Semaphore->new();
    $s->down();   # Also known as the semaphore P operation.
    # The guarded section is here
    $s->up();     # Also known as the semaphore V operation.

    # Decrement the semaphore only if it would immediately succeed.
    if ($s->down_nb()) {
        # The guarded section is here
        $s->up();
    }

    # Forcefully decrement the semaphore even if its count goes below 0.
    $s->down_force();

    # The default value for semaphore operations is 1
    my $s = Thread::Semaphore->new($initial_value);
    $s->down($down_value);
    $s->up($up_value);
    if ($s->down_nb($down_value)) {
        ...
        $s->up($up_value);
    }
    $s->down_force($down_value);

=head1 DESCRIPTION

Semaphores provide a mechanism to regulate access to resources.  Unlike
locks, semaphores aren't tied to particular scalars, and so may be used to
control access to anything you care to use them for.

Semaphores don't limit their values to zero and one, so they can be used to
control access to some resource that there may be more than one of (e.g.,
filehandles).  Increment and decrement amounts aren't fixed at one either,
so threads can reserve or return multiple resources at once.

=head1 METHODS

=over 8

=item ->new()

=item ->new(NUMBER)

C<new> creates a new semaphore, and initializes its count to the specified
number (which must be an integer).  If no number is specified, the
semaphore's count defaults to 1.

=item ->down()

=item ->down(NUMBER)

The C<down> method decreases the semaphore's count by the specified number
(which must be an integer >= 1), or by one if no number is specified.

If the semaphore's count would drop below zero, this method will block
until such time as the semaphore's count is greater than or equal to the
amount you're C<down>ing the semaphore's count by.

This is the semaphore "P operation" (the name derives from the Dutch
word "pak", which means "capture" -- the semaphore operations were
named by the late Dijkstra, who was Dutch).

=item ->down_nb()

=item ->down_nb(NUMBER)

The C<down_nb> method attempts to decrease the semaphore's count by the
specified number (which must be an integer >= 1), or by one if no number
is specified.

If the semaphore's count would drop below zero, this method will return
I<false>, and the semaphore's count remains unchanged.  Otherwise, the
semaphore's count is decremented and this method returns I<true>.

=item ->down_force()

=item ->down_force(NUMBER)

The C<down_force> method decreases the semaphore's count by the specified
number (which must be an integer >= 1), or by one if no number is specified.
This method does not block, and may cause the semaphore's count to drop
below zero.

=item ->up()

=item ->up(NUMBER)

The C<up> method increases the semaphore's count by the number specified
(which must be an integer >= 1), or by one if no number is specified.

This will unblock any thread that is blocked trying to C<down> the
semaphore if the C<up> raises the semaphore's count above the amount that
the C<down> is trying to decrement it by.  For example, if three threads
are blocked trying to C<down> a semaphore by one, and another thread C<up>s
the semaphore by two, then two of the blocked threads (which two is
indeterminate) will become unblocked.

This is the semaphore "V operation" (the name derives from the Dutch
word "vrij", which means "release").

=back

=head1 NOTES

Semaphores created by L<Thread::Semaphore> can be used in both threaded and
non-threaded applications.  This allows you to write modules and packages
that potentially make use of semaphores, and that will function in either
environment.

=head1 SEE ALSO

Thread::Semaphore Discussion Forum on CPAN:
L<http://www.cpanforum.com/dist/Thread-Semaphore>

L<threads>, L<threads::shared>

=head1 MAINTAINER

Jerry D. Hedden, S<E<lt>jdhedden AT cpan DOT orgE<gt>>

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                usr/share/perl/5.20.2/Thread.pm                                                                     0100644 0000000 0000000 00000020137 12744441327 014426  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Thread;

use strict;
use warnings;
no warnings 'redefine';

our $VERSION = '3.04';
$VERSION = eval $VERSION;

BEGIN {
    use Config;
    if (! $Config{useithreads}) {
        die("This Perl not built to support threads\n");
    }
}

use threads 'yield';
use threads::shared;

require Exporter;
our @ISA = qw(Exporter threads);
our @EXPORT = qw(cond_wait cond_broadcast cond_signal);
our @EXPORT_OK = qw(async yield);

sub async (&;@) { return Thread->new(shift); }

sub done { return ! shift->is_running(); }

sub eval  { die("'eval' not implemented with 'ithreads'\n"); };
sub flags { die("'flags' not implemented with 'ithreads'\n"); };

1;

__END__

=head1 NAME

Thread - Manipulate threads in Perl (for old code only)

=head1 DEPRECATED

The C<Thread> module served as the frontend to the old-style thread model,
called I<5005threads>, that was introduced in release 5.005.  That model was
deprecated, and has been removed in version 5.10.

For old code and interim backwards compatibility, the C<Thread> module has
been reworked to function as a frontend for the new interpreter threads
(I<ithreads>) model.  However, some previous functionality is not available.
Further, the data sharing models between the two thread models are completely
different, and anything to do with data sharing has to be thought differently.
With I<ithreads>, you must explicitly C<share()> variables between the
threads.

You are strongly encouraged to migrate any existing threaded code to the new
model (i.e., use the C<threads> and C<threads::shared> modules) as soon as
possible.

=head1 HISTORY

In Perl 5.005, the thread model was that all data is implicitly shared, and
shared access to data has to be explicitly synchronized.  This model is called
I<5005threads>.

In Perl 5.6, a new model was introduced in which all is was thread local and
shared access to data has to be explicitly declared.  This model is called
I<ithreads>, for "interpreter threads".

In Perl 5.6, the I<ithreads> model was not available as a public API; only as
an internal API that was available for extension writers, and to implement
fork() emulation on Win32 platforms.

In Perl 5.8, the I<ithreads> model became available through the C<threads>
module, and the I<5005threads> model was deprecated.

In Perl 5.10, the I<5005threads> model was removed from the Perl interpreter.

=head1 SYNOPSIS

    use Thread qw(:DEFAULT async yield);

    my $t = Thread->new(\&start_sub, @start_args);

    $result = $t->join;
    $t->detach;

    if ($t->done) {
        $t->join;
    }

    if($t->equal($another_thread)) {
        # ...
    }

    yield();

    my $tid = Thread->self->tid;

    lock($scalar);
    lock(@array);
    lock(%hash);

    my @list = Thread->list;

=head1 DESCRIPTION

The C<Thread> module provides multithreading support for Perl.

=head1 FUNCTIONS

=over 8

=item $thread = Thread->new(\&start_sub)

=item $thread = Thread->new(\&start_sub, LIST)

C<new> starts a new thread of execution in the referenced subroutine. The
optional list is passed as parameters to the subroutine. Execution
continues in both the subroutine and the code after the C<new> call.

C<Thread-&gt;new> returns a thread object representing the newly created
thread.

=item lock VARIABLE

C<lock> places a lock on a variable until the lock goes out of scope.

If the variable is locked by another thread, the C<lock> call will
block until it's available.  C<lock> is recursive, so multiple calls
to C<lock> are safe--the variable will remain locked until the
outermost lock on the variable goes out of scope.

Locks on variables only affect C<lock> calls--they do I<not> affect normal
access to a variable. (Locks on subs are different, and covered in a bit.)
If you really, I<really> want locks to block access, then go ahead and tie
them to something and manage this yourself.  This is done on purpose.
While managing access to variables is a good thing, Perl doesn't force
you out of its living room...

If a container object, such as a hash or array, is locked, all the
elements of that container are not locked. For example, if a thread
does a C<lock @a>, any other thread doing a C<lock($a[12])> won't
block.

Finally, C<lock> will traverse up references exactly I<one> level.
C<lock(\$a)> is equivalent to C<lock($a)>, while C<lock(\\$a)> is not.

=item async BLOCK;

C<async> creates a thread to execute the block immediately following
it.  This block is treated as an anonymous sub, and so must have a
semi-colon after the closing brace. Like C<Thread-&gt;new>, C<async>
returns a thread object.

=item Thread->self

The C<Thread-E<gt>self> function returns a thread object that represents
the thread making the C<Thread-E<gt>self> call.

=item Thread->list

Returns a list of all non-joined, non-detached Thread objects.

=item cond_wait VARIABLE

The C<cond_wait> function takes a B<locked> variable as
a parameter, unlocks the variable, and blocks until another thread
does a C<cond_signal> or C<cond_broadcast> for that same locked
variable. The variable that C<cond_wait> blocked on is relocked
after the C<cond_wait> is satisfied.  If there are multiple threads
C<cond_wait>ing on the same variable, all but one will reblock waiting
to re-acquire the lock on the variable.  (So if you're only using
C<cond_wait> for synchronization, give up the lock as soon as
possible.)

=item cond_signal VARIABLE

The C<cond_signal> function takes a locked variable as a parameter and
unblocks one thread that's C<cond_wait>ing on that variable. If more than
one thread is blocked in a C<cond_wait> on that variable, only one (and
which one is indeterminate) will be unblocked.

If there are no threads blocked in a C<cond_wait> on the variable,
the signal is discarded.

=item cond_broadcast VARIABLE

The C<cond_broadcast> function works similarly to C<cond_signal>.
C<cond_broadcast>, though, will unblock B<all> the threads that are
blocked in a C<cond_wait> on the locked variable, rather than only
one.

=item yield

The C<yield> function allows another thread to take control of the
CPU. The exact results are implementation-dependent.

=back

=head1 METHODS

=over 8

=item join

C<join> waits for a thread to end and returns any values the thread
exited with.  C<join> will block until the thread has ended, though
it won't block if the thread has already terminated.

If the thread being C<join>ed C<die>d, the error it died with will
be returned at this time. If you don't want the thread performing
the C<join> to die as well, you should either wrap the C<join> in
an C<eval> or use the C<eval> thread method instead of C<join>.

=item detach

C<detach> tells a thread that it is never going to be joined i.e.
that all traces of its existence can be removed once it stops running.
Errors in detached threads will not be visible anywhere - if you want
to catch them, you should use $SIG{__DIE__} or something like that.

=item equal

C<equal> tests whether two thread objects represent the same thread and
returns true if they do.

=item tid

The C<tid> method returns the tid of a thread. The tid is
a monotonically increasing integer assigned when a thread is
created. The main thread of a program will have a tid of zero,
while subsequent threads will have tids assigned starting with one.

=item done

The C<done> method returns true if the thread you're checking has
finished, and false otherwise.

=back

=head1 DEFUNCT

The following were implemented with I<5005threads>, but are no longer
available with I<ithreads>.

=over 8

=item lock(\&sub)

With 5005threads, you could also C<lock> a sub such that any calls to that sub
from another thread would block until the lock was released.

Also, subroutines could be declared with the C<:locked> attribute which would
serialize access to the subroutine, but allowed different threads
non-simultaneous access.

=item eval

The C<eval> method wrapped an C<eval> around a C<join>, and so waited for a
thread to exit, passing along any values the thread might have returned and
placing any errors into C<$@>.

=item flags

The C<flags> method returned the flags for the thread - an integer value
corresponding to the internal flags for the thread.

=back

=head1 SEE ALSO

L<threads>, L<threads::shared>, L<Thread::Queue>, L<Thread::Semaphore>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/perl/5.20.2/Tie/                                                                          0040755 0000000 0000000 00000000000 13077704254 013403  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Tie/Array.pm                                                                  0100644 0000000 0000000 00000016226 12744441327 015022  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::Array;

use 5.006_001;
use strict;
use Carp;
our $VERSION = '1.06';

# Pod documentation after __END__ below.

sub DESTROY { }
sub EXTEND  { }
sub UNSHIFT { scalar shift->SPLICE(0,0,@_) }
sub SHIFT { shift->SPLICE(0,1) }
sub CLEAR   { shift->STORESIZE(0) }

sub PUSH
{
 my $obj = shift;
 my $i   = $obj->FETCHSIZE;
 $obj->STORE($i++, shift) while (@_);
}

sub POP
{
 my $obj = shift;
 my $newsize = $obj->FETCHSIZE - 1;
 my $val;
 if ($newsize >= 0)
  {
   $val = $obj->FETCH($newsize);
   $obj->STORESIZE($newsize);
  }
 $val;
}

sub SPLICE {
    my $obj = shift;
    my $sz  = $obj->FETCHSIZE;
    my $off = (@_) ? shift : 0;
    $off += $sz if ($off < 0);
    my $len = (@_) ? shift : $sz - $off;
    $len += $sz - $off if $len < 0;
    my @result;
    for (my $i = 0; $i < $len; $i++) {
        push(@result,$obj->FETCH($off+$i));
    }
    $off = $sz if $off > $sz;
    $len -= $off + $len - $sz if $off + $len > $sz;
    if (@_ > $len) {
        # Move items up to make room
        my $d = @_ - $len;
        my $e = $off+$len;
        $obj->EXTEND($sz+$d);
        for (my $i=$sz-1; $i >= $e; $i--) {
            my $val = $obj->FETCH($i);
            $obj->STORE($i+$d,$val);
        }
    }
    elsif (@_ < $len) {
        # Move items down to close the gap
        my $d = $len - @_;
        my $e = $off+$len;
        for (my $i=$off+$len; $i < $sz; $i++) {
            my $val = $obj->FETCH($i);
            $obj->STORE($i-$d,$val);
        }
        $obj->STORESIZE($sz-$d);
    }
    for (my $i=0; $i < @_; $i++) {
        $obj->STORE($off+$i,$_[$i]);
    }
    return wantarray ? @result : pop @result;
}

sub EXISTS {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define an EXISTS method";
}

sub DELETE {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a DELETE method";
}

package Tie::StdArray;
use vars qw(@ISA);
@ISA = 'Tie::Array';

sub TIEARRAY  { bless [], $_[0] }
sub FETCHSIZE { scalar @{$_[0]} }
sub STORESIZE { $#{$_[0]} = $_[1]-1 }
sub STORE     { $_[0]->[$_[1]] = $_[2] }
sub FETCH     { $_[0]->[$_[1]] }
sub CLEAR     { @{$_[0]} = () }
sub POP       { pop(@{$_[0]}) }
sub PUSH      { my $o = shift; push(@$o,@_) }
sub SHIFT     { shift(@{$_[0]}) }
sub UNSHIFT   { my $o = shift; unshift(@$o,@_) }
sub EXISTS    { exists $_[0]->[$_[1]] }
sub DELETE    { delete $_[0]->[$_[1]] }

sub SPLICE
{
 my $ob  = shift;
 my $sz  = $ob->FETCHSIZE;
 my $off = @_ ? shift : 0;
 $off   += $sz if $off < 0;
 my $len = @_ ? shift : $sz-$off;
 return splice(@$ob,$off,$len,@_);
}

1;

__END__

=head1 NAME

Tie::Array - base class for tied arrays

=head1 SYNOPSIS

    package Tie::NewArray;
    use Tie::Array;
    @ISA = ('Tie::Array');

    # mandatory methods
    sub TIEARRAY { ... }
    sub FETCH { ... }
    sub FETCHSIZE { ... }

    sub STORE { ... }       # mandatory if elements writeable
    sub STORESIZE { ... }   # mandatory if elements can be added/deleted
    sub EXISTS { ... }      # mandatory if exists() expected to work
    sub DELETE { ... }      # mandatory if delete() expected to work

    # optional methods - for efficiency
    sub CLEAR { ... }
    sub PUSH { ... }
    sub POP { ... }
    sub SHIFT { ... }
    sub UNSHIFT { ... }
    sub SPLICE { ... }
    sub EXTEND { ... }
    sub DESTROY { ... }

    package Tie::NewStdArray;
    use Tie::Array;

    @ISA = ('Tie::StdArray');

    # all methods provided by default

    package main;

    $object = tie @somearray,'Tie::NewArray';
    $object = tie @somearray,'Tie::StdArray';
    $object = tie @somearray,'Tie::NewStdArray';



=head1 DESCRIPTION

This module provides methods for array-tying classes. See
L<perltie> for a list of the functions required in order to tie an array
to a package. The basic B<Tie::Array> package provides stub C<DESTROY>,
and C<EXTEND> methods that do nothing, stub C<DELETE> and C<EXISTS>
methods that croak() if the delete() or exists() builtins are ever called
on the tied array, and implementations of C<PUSH>, C<POP>, C<SHIFT>,
C<UNSHIFT>, C<SPLICE> and C<CLEAR> in terms of basic C<FETCH>, C<STORE>,
C<FETCHSIZE>, C<STORESIZE>.

The B<Tie::StdArray> package provides efficient methods required for tied arrays
which are implemented as blessed references to an "inner" perl array.
It inherits from B<Tie::Array>, and should cause tied arrays to behave exactly
like standard arrays, allowing for selective overloading of methods.

For developers wishing to write their own tied arrays, the required methods
are briefly defined below. See the L<perltie> section for more detailed
descriptive, as well as example code:

=over 4

=item TIEARRAY classname, LIST

The class method is invoked by the command C<tie @array, classname>. Associates
an array instance with the specified class. C<LIST> would represent
additional arguments (along the lines of L<AnyDBM_File> and compatriots) needed
to complete the association. The method should return an object of a class which
provides the methods below.

=item STORE this, index, value

Store datum I<value> into I<index> for the tied array associated with
object I<this>. If this makes the array larger then
class's mapping of C<undef> should be returned for new positions.

=item FETCH this, index

Retrieve the datum in I<index> for the tied array associated with
object I<this>.

=item FETCHSIZE this

Returns the total number of items in the tied array associated with
object I<this>. (Equivalent to C<scalar(@array)>).

=item STORESIZE this, count

Sets the total number of items in the tied array associated with
object I<this> to be I<count>. If this makes the array larger then
class's mapping of C<undef> should be returned for new positions.
If the array becomes smaller then entries beyond count should be
deleted.

=item EXTEND this, count

Informative call that array is likely to grow to have I<count> entries.
Can be used to optimize allocation. This method need do nothing.

=item EXISTS this, key

Verify that the element at index I<key> exists in the tied array I<this>.

The B<Tie::Array> implementation is a stub that simply croaks.

=item DELETE this, key

Delete the element at index I<key> from the tied array I<this>.

The B<Tie::Array> implementation is a stub that simply croaks.

=item CLEAR this

Clear (remove, delete, ...) all values from the tied array associated with
object I<this>.

=item DESTROY this

Normal object destructor method.

=item PUSH this, LIST

Append elements of LIST to the array.

=item POP this

Remove last element of the array and return it.

=item SHIFT this

Remove the first element of the array (shifting other elements down)
and return it.

=item UNSHIFT this, LIST

Insert LIST elements at the beginning of the array, moving existing elements
up to make room.

=item SPLICE this, offset, length, LIST

Perform the equivalent of C<splice> on the array.

I<offset> is optional and defaults to zero, negative values count back
from the end of the array.

I<length> is optional and defaults to rest of the array.

I<LIST> may be empty.

Returns a list of the original I<length> elements at I<offset>.

=back

=head1 CAVEATS

There is no support at present for tied @ISA. There is a potential conflict
between magic entries needed to notice setting of @ISA, and those needed to
implement 'tie'.

=head1 AUTHOR

Nick Ing-Simmons E<lt>nik@tiuk.ti.comE<gt>

=cut
                                                                                                                                                                                                                                                                                                                                                                          usr/share/perl/5.20.2/Tie/File.pm                                                                   0100644 0000000 0000000 00000227077 12744441327 014633  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
package Tie::File;
require 5.005;
use Carp ':DEFAULT', 'confess';
use POSIX 'SEEK_SET';
use Fcntl 'O_CREAT', 'O_RDWR', 'LOCK_EX', 'LOCK_SH', 'O_WRONLY', 'O_RDONLY';
sub O_ACCMODE () { O_RDONLY | O_RDWR | O_WRONLY }


$VERSION = "1.00";
my $DEFAULT_MEMORY_SIZE = 1<<21;    # 2 megabytes
my $DEFAULT_AUTODEFER_THRESHHOLD = 3; # 3 records
my $DEFAULT_AUTODEFER_FILELEN_THRESHHOLD = 65536; # 16 disk blocksful

my %good_opt = map {$_ => 1, "-$_" => 1}
                 qw(memory dw_size mode recsep discipline 
                    autodefer autochomp autodefer_threshhold concurrent);

sub TIEARRAY {
  if (@_ % 2 != 0) {
    croak "usage: tie \@array, $_[0], filename, [option => value]...";
  }
  my ($pack, $file, %opts) = @_;

  # transform '-foo' keys into 'foo' keys
  for my $key (keys %opts) {
    unless ($good_opt{$key}) {
      croak("$pack: Unrecognized option '$key'\n");
    }
    my $okey = $key;
    if ($key =~ s/^-+//) {
      $opts{$key} = delete $opts{$okey};
    }
  }

  if ($opts{concurrent}) {
    croak("$pack: concurrent access not supported yet\n");
  }

  unless (defined $opts{memory}) {
    # default is the larger of the default cache size and the 
    # deferred-write buffer size (if specified)
    $opts{memory} = $DEFAULT_MEMORY_SIZE;
    $opts{memory} = $opts{dw_size}
      if defined $opts{dw_size} && $opts{dw_size} > $DEFAULT_MEMORY_SIZE;
    # Dora Winifred Read
  }
  $opts{dw_size} = $opts{memory} unless defined $opts{dw_size};
  if ($opts{dw_size} > $opts{memory}) {
      croak("$pack: dw_size may not be larger than total memory allocation\n");
  }
  # are we in deferred-write mode?
  $opts{defer} = 0 unless defined $opts{defer};
  $opts{deferred} = {};         # no records are presently deferred
  $opts{deferred_s} = 0;        # count of total bytes in ->{deferred}
  $opts{deferred_max} = -1;     # empty

  # What's a good way to arrange that this class can be overridden?
  $opts{cache} = Tie::File::Cache->new($opts{memory});

  # autodeferment is enabled by default
  $opts{autodefer} = 1 unless defined $opts{autodefer};
  $opts{autodeferring} = 0;     # but is not initially active
  $opts{ad_history} = [];
  $opts{autodefer_threshhold} = $DEFAULT_AUTODEFER_THRESHHOLD
    unless defined $opts{autodefer_threshhold};
  $opts{autodefer_filelen_threshhold} = $DEFAULT_AUTODEFER_FILELEN_THRESHHOLD
    unless defined $opts{autodefer_filelen_threshhold};

  $opts{offsets} = [0];
  $opts{filename} = $file;
  unless (defined $opts{recsep}) { 
    $opts{recsep} = _default_recsep();
  }
  $opts{recseplen} = length($opts{recsep});
  if ($opts{recseplen} == 0) {
    croak "Empty record separator not supported by $pack";
  }

  $opts{autochomp} = 1 unless defined $opts{autochomp};

  $opts{mode} = O_CREAT|O_RDWR unless defined $opts{mode};
  $opts{rdonly} = (($opts{mode} & O_ACCMODE) == O_RDONLY);
  $opts{sawlastrec} = undef;

  my $fh;

  if (UNIVERSAL::isa($file, 'GLOB')) {
    # We use 1 here on the theory that some systems 
    # may not indicate failure if we use 0.
    # MSWin32 does not indicate failure with 0, but I don't know if
    # it will indicate failure with 1 or not.
    unless (seek $file, 1, SEEK_SET) {
      croak "$pack: your filehandle does not appear to be seekable";
    }
    seek $file, 0, SEEK_SET;    # put it back
    $fh = $file;                # setting binmode is the user's problem
  } elsif (ref $file) {
    croak "usage: tie \@array, $pack, filename, [option => value]...";
  } else {
    # $fh = \do { local *FH };  # XXX this is buggy
    if ($] < 5.006) {
	# perl 5.005 and earlier don't autovivify filehandles
	require Symbol;
	$fh = Symbol::gensym();
    }
    sysopen $fh, $file, $opts{mode}, 0666 or return;
    binmode $fh;
    ++$opts{ourfh};
  }
  { my $ofh = select $fh; $| = 1; select $ofh } # autoflush on write
  if (defined $opts{discipline} && $] >= 5.006) {
    # This avoids a compile-time warning under 5.005
    eval 'binmode($fh, $opts{discipline})';
    croak $@ if $@ =~ /unknown discipline/i;
    die if $@;
  }
  $opts{fh} = $fh;

  bless \%opts => $pack;
}

sub FETCH {
  my ($self, $n) = @_;
  my $rec;

  # check the defer buffer
  $rec = $self->{deferred}{$n} if exists $self->{deferred}{$n};
  $rec = $self->_fetch($n) unless defined $rec;

  # inlined _chomp1
  substr($rec, - $self->{recseplen}) = ""
    if defined $rec && $self->{autochomp};
  $rec;
}

# Chomp many records in-place; return nothing useful
sub _chomp {
  my $self = shift;
  return unless $self->{autochomp};
  if ($self->{autochomp}) {
    for (@_) {
      next unless defined;
      substr($_, - $self->{recseplen}) = "";
    }
  }
}

# Chomp one record in-place; return modified record
sub _chomp1 {
  my ($self, $rec) = @_;
  return $rec unless $self->{autochomp};
  return unless defined $rec;
  substr($rec, - $self->{recseplen}) = "";
  $rec;
}

sub _fetch {
  my ($self, $n) = @_;

  # check the record cache
  { my $cached = $self->{cache}->lookup($n);
    return $cached if defined $cached;
  }

  if ($#{$self->{offsets}} < $n) {
    return if $self->{eof};  # request for record beyond end of file
    my $o = $self->_fill_offsets_to($n);
    # If it's still undefined, there is no such record, so return 'undef'
    return unless defined $o;
  }

  my $fh = $self->{FH};
  $self->_seek($n);             # we can do this now that offsets is populated
  my $rec = $self->_read_record;

# If we happen to have just read the first record, check to see if
# the length of the record matches what 'tell' says.  If not, Tie::File
# won't work, and should drop dead.
#
#  if ($n == 0 && defined($rec) && tell($self->{fh}) != length($rec)) {
#    if (defined $self->{discipline}) {
#      croak "I/O discipline $self->{discipline} not supported";
#    } else {
#      croak "File encoding not supported";
#    }
#  }

  $self->{cache}->insert($n, $rec) if defined $rec && not $self->{flushing};
  $rec;
}

sub STORE {
  my ($self, $n, $rec) = @_;
  die "STORE called from _check_integrity!" if $DIAGNOSTIC;

  $self->_fixrecs($rec);

  if ($self->{autodefer}) {
    $self->_annotate_ad_history($n);
  }

  return $self->_store_deferred($n, $rec) if $self->_is_deferring;


  # We need this to decide whether the new record will fit
  # It incidentally populates the offsets table 
  # Note we have to do this before we alter the cache
  # 20020324 Wait, but this DOES alter the cache.  TODO BUG?
  my $oldrec = $self->_fetch($n);

  if (not defined $oldrec) {
    # We're storing a record beyond the end of the file
    $self->_extend_file_to($n+1);
    $oldrec = $self->{recsep};
  }
#  return if $oldrec eq $rec;    # don't bother
  my $len_diff = length($rec) - length($oldrec);

  # length($oldrec) here is not consistent with text mode  TODO XXX BUG
  $self->_mtwrite($rec, $self->{offsets}[$n], length($oldrec));
  $self->_oadjust([$n, 1, $rec]);
  $self->{cache}->update($n, $rec);
}

sub _store_deferred {
  my ($self, $n, $rec) = @_;
  $self->{cache}->remove($n);
  my $old_deferred = $self->{deferred}{$n};

  if (defined $self->{deferred_max} && $n > $self->{deferred_max}) {
    $self->{deferred_max} = $n;
  }
  $self->{deferred}{$n} = $rec;

  my $len_diff = length($rec);
  $len_diff -= length($old_deferred) if defined $old_deferred;
  $self->{deferred_s} += $len_diff;
  $self->{cache}->adj_limit(-$len_diff);
  if ($self->{deferred_s} > $self->{dw_size}) {
    $self->_flush;
  } elsif ($self->_cache_too_full) {
    $self->_cache_flush;
  }
}

# Remove a single record from the deferred-write buffer without writing it
# The record need not be present
sub _delete_deferred {
  my ($self, $n) = @_;
  my $rec = delete $self->{deferred}{$n};
  return unless defined $rec;

  if (defined $self->{deferred_max} 
      && $n == $self->{deferred_max}) {
    undef $self->{deferred_max};
  }

  $self->{deferred_s} -= length $rec;
  $self->{cache}->adj_limit(length $rec);
}

sub FETCHSIZE {
  my $self = shift;
  my $n = $self->{eof} ? $#{$self->{offsets}} : $self->_fill_offsets;

  my $top_deferred = $self->_defer_max;
  $n = $top_deferred+1 if defined $top_deferred && $n < $top_deferred+1;
  $n;
}

sub STORESIZE {
  my ($self, $len) = @_;

  if ($self->{autodefer}) {
    $self->_annotate_ad_history('STORESIZE');
  }

  my $olen = $self->FETCHSIZE;
  return if $len == $olen;      # Woo-hoo!

  # file gets longer
  if ($len > $olen) {
    if ($self->_is_deferring) {
      for ($olen .. $len-1) {
        $self->_store_deferred($_, $self->{recsep});
      }
    } else {
      $self->_extend_file_to($len);
    }
    return;
  }

  # file gets shorter
  if ($self->_is_deferring) {
    # TODO maybe replace this with map-plus-assignment?
    for (grep $_ >= $len, keys %{$self->{deferred}}) {
      $self->_delete_deferred($_);
    }
    $self->{deferred_max} = $len-1;
  }

  $self->_seek($len);
  $self->_chop_file;
  $#{$self->{offsets}} = $len;
#  $self->{offsets}[0] = 0;      # in case we just chopped this

  $self->{cache}->remove(grep $_ >= $len, $self->{cache}->ckeys);
}

### OPTIMIZE ME
### It should not be necessary to do FETCHSIZE
### Just seek to the end of the file.
sub PUSH {
  my $self = shift;
  $self->SPLICE($self->FETCHSIZE, scalar(@_), @_);

  # No need to return:
  #  $self->FETCHSIZE;  # because av.c takes care of this for me
}

sub POP {
  my $self = shift;
  my $size = $self->FETCHSIZE;
  return if $size == 0;
#  print STDERR "# POPPITY POP POP POP\n";
  scalar $self->SPLICE($size-1, 1);
}

sub SHIFT {
  my $self = shift;
  scalar $self->SPLICE(0, 1);
}

sub UNSHIFT {
  my $self = shift;
  $self->SPLICE(0, 0, @_);
  # $self->FETCHSIZE; # av.c takes care of this for me
}

sub CLEAR {
  my $self = shift;

  if ($self->{autodefer}) {
    $self->_annotate_ad_history('CLEAR');
  }

  $self->_seekb(0);
  $self->_chop_file;
    $self->{cache}->set_limit($self->{memory});
    $self->{cache}->empty;
  @{$self->{offsets}} = (0);
  %{$self->{deferred}}= ();
    $self->{deferred_s} = 0;
    $self->{deferred_max} = -1;
}

sub EXTEND {
  my ($self, $n) = @_;

  # No need to pre-extend anything in this case
  return if $self->_is_deferring;

  $self->_fill_offsets_to($n);
  $self->_extend_file_to($n);
}

sub DELETE {
  my ($self, $n) = @_;

  if ($self->{autodefer}) {
    $self->_annotate_ad_history('DELETE');
  }

  my $lastrec = $self->FETCHSIZE-1;
  my $rec = $self->FETCH($n);
  $self->_delete_deferred($n) if $self->_is_deferring;
  if ($n == $lastrec) {
    $self->_seek($n);
    $self->_chop_file;
    $#{$self->{offsets}}--;
    $self->{cache}->remove($n);
    # perhaps in this case I should also remove trailing null records?
    # 20020316
    # Note that delete @a[-3..-1] deletes the records in the wrong order,
    # so we only chop the very last one out of the file.  We could repair this
    # by tracking deleted records inside the object.
  } elsif ($n < $lastrec) {
    $self->STORE($n, "");
  }
  $rec;
}

sub EXISTS {
  my ($self, $n) = @_;
  return 1 if exists $self->{deferred}{$n};
  $n < $self->FETCHSIZE;
}

sub SPLICE {
  my $self = shift;

  if ($self->{autodefer}) {
    $self->_annotate_ad_history('SPLICE');
  }

  $self->_flush if $self->_is_deferring; # move this up?
  if (wantarray) {
    $self->_chomp(my @a = $self->_splice(@_));
    @a;
  } else {
    $self->_chomp1(scalar $self->_splice(@_));
  }
}

sub DESTROY {
  my $self = shift;
  $self->flush if $self->_is_deferring;
  $self->{cache}->delink if defined $self->{cache}; # break circular link
  if ($self->{fh} and $self->{ourfh}) {
      delete $self->{ourfh};
      close delete $self->{fh};
  }
}

sub _splice {
  my ($self, $pos, $nrecs, @data) = @_;
  my @result;

  $pos = 0 unless defined $pos;

  # Deal with negative and other out-of-range positions
  # Also set default for $nrecs 
  {
    my $oldsize = $self->FETCHSIZE;
    $nrecs = $oldsize unless defined $nrecs;
    my $oldpos = $pos;

    if ($pos < 0) {
      $pos += $oldsize;
      if ($pos < 0) {
        croak "Modification of non-creatable array value attempted, subscript $oldpos";
      }
    }

    if ($pos > $oldsize) {
      return unless @data;
      $pos = $oldsize;          # This is what perl does for normal arrays
    }

    # The manual is very unclear here
    if ($nrecs < 0) {
      $nrecs = $oldsize - $pos + $nrecs;
      $nrecs = 0 if $nrecs < 0;
    }

    # nrecs is too big---it really means "until the end"
    # 20030507
    if ($nrecs + $pos > $oldsize) {
      $nrecs = $oldsize - $pos;
    }
  }

  $self->_fixrecs(@data);
  my $data = join '', @data;
  my $datalen = length $data;
  my $oldlen = 0;

  # compute length of data being removed
  for ($pos .. $pos+$nrecs-1) {
    last unless defined $self->_fill_offsets_to($_);
    my $rec = $self->_fetch($_);
    last unless defined $rec;
    push @result, $rec;

    # Why don't we just use length($rec) here?
    # Because that record might have come from the cache.  _splice
    # might have been called to flush out the deferred-write records,
    # and in this case length($rec) is the length of the record to be
    # *written*, not the length of the actual record in the file.  But
    # the offsets are still true. 20020322
    $oldlen += $self->{offsets}[$_+1] - $self->{offsets}[$_]
      if defined $self->{offsets}[$_+1];
  }
  $self->_fill_offsets_to($pos+$nrecs);

  # Modify the file
  $self->_mtwrite($data, $self->{offsets}[$pos], $oldlen);
  # Adjust the offsets table
  $self->_oadjust([$pos, $nrecs, @data]);

  { # Take this read cache stuff out into a separate function
    # You made a half-attempt to put it into _oadjust.  
    # Finish something like that up eventually.
    # STORE also needs to do something similarish

    # update the read cache, part 1
    # modified records
    for ($pos .. $pos+$nrecs-1) {
      my $new = $data[$_-$pos];
      if (defined $new) {
        $self->{cache}->update($_, $new);
      } else {
        $self->{cache}->remove($_);
      }
    }
    
    # update the read cache, part 2
    # moved records - records past the site of the change
    # need to be renumbered
    # Maybe merge this with the previous block?
    {
      my @oldkeys = grep $_ >= $pos + $nrecs, $self->{cache}->ckeys;
      my @newkeys = map $_-$nrecs+@data, @oldkeys;
      $self->{cache}->rekey(\@oldkeys, \@newkeys);
    }

    # Now there might be too much data in the cache, if we spliced out
    # some short records and spliced in some long ones.  If so, flush
    # the cache.
    $self->_cache_flush;
  }

  # Yes, the return value of 'splice' *is* actually this complicated
  wantarray ? @result : @result ? $result[-1] : undef;
}


# write data into the file
# $data is the data to be written.
# it should be written at position $pos, and should overwrite
# exactly $len of the following bytes.  
# Note that if length($data) > $len, the subsequent bytes will have to 
# be moved up, and if length($data) < $len, they will have to
# be moved down
sub _twrite {
  my ($self, $data, $pos, $len) = @_;

  unless (defined $pos) {
    die "\$pos was undefined in _twrite";
  }

  my $len_diff = length($data) - $len;

  if ($len_diff == 0) {          # Woo-hoo!
    my $fh = $self->{fh};
    $self->_seekb($pos);
    $self->_write_record($data);
    return;                     # well, that was easy.
  }

  # the two records are of different lengths
  # our strategy here: rewrite the tail of the file,
  # reading ahead one buffer at a time
  # $bufsize is required to be at least as large as the data we're overwriting
  my $bufsize = _bufsize($len_diff);
  my ($writepos, $readpos) = ($pos, $pos+$len);
  my $next_block;
  my $more_data;

  # Seems like there ought to be a way to avoid the repeated code
  # and the special case here.  The read(1) is also a little weird.
  # Think about this.
  do {
    $self->_seekb($readpos);
    my $br = read $self->{fh}, $next_block, $bufsize;
    $more_data = read $self->{fh}, my($dummy), 1;
    $self->_seekb($writepos);
    $self->_write_record($data);
    $readpos += $br;
    $writepos += length $data;
    $data = $next_block;
  } while $more_data;
  $self->_seekb($writepos);
  $self->_write_record($next_block);

  # There might be leftover data at the end of the file
  $self->_chop_file if $len_diff < 0;
}

# _iwrite(D, S, E)
# Insert text D at position S.
# Let C = E-S-|D|.  If C < 0; die.  
# Data in [S,S+C) is copied to [S+D,S+D+C) = [S+D,E).
# Data in [S+C = E-D, E) is returned.  Data in [E, oo) is untouched.
#
# In a later version, don't read the entire intervening area into
# memory at once; do the copying block by block.
sub _iwrite {
  my $self = shift;
  my ($D, $s, $e) = @_;
  my $d = length $D;
  my $c = $e-$s-$d;
  local *FH = $self->{fh};
  confess "Not enough space to insert $d bytes between $s and $e"
    if $c < 0;
  confess "[$s,$e) is an invalid insertion range" if $e < $s;

  $self->_seekb($s);
  read FH, my $buf, $e-$s;

  $D .= substr($buf, 0, $c, "");

  $self->_seekb($s);
  $self->_write_record($D);

  return $buf;
}

# Like _twrite, but the data-pos-len triple may be repeated; you may
# write several chunks.  All the writing will be done in
# one pass.   Chunks SHALL be in ascending order and SHALL NOT overlap.
sub _mtwrite {
  my $self = shift;
  my $unwritten = "";
  my $delta = 0;

  @_ % 3 == 0 
    or die "Arguments to _mtwrite did not come in groups of three";

  while (@_) {
    my ($data, $pos, $len) = splice @_, 0, 3;
    my $end = $pos + $len;  # The OLD end of the segment to be replaced
    $data = $unwritten . $data;
    $delta -= length($unwritten);
    $unwritten  = "";
    $pos += $delta;             # This is where the data goes now
    my $dlen = length $data;
    $self->_seekb($pos);
    if ($len >= $dlen) {        # the data will fit
      $self->_write_record($data);
      $delta += ($dlen - $len); # everything following moves down by this much
      $data = ""; # All the data in the buffer has been written
    } else {                    # won't fit
      my $writable = substr($data, 0, $len - $delta, "");
      $self->_write_record($writable);
      $delta += ($dlen - $len); # everything following moves down by this much
    } 

    # At this point we've written some but maybe not all of the data.
    # There might be a gap to close up, or $data might still contain a
    # bunch of unwritten data that didn't fit.
    my $ndlen = length $data;
    if ($delta == 0) {
      $self->_write_record($data);
    } elsif ($delta < 0) {
      # upcopy (close up gap)
      if (@_) {
        $self->_upcopy($end, $end + $delta, $_[1] - $end);  
      } else {
        $self->_upcopy($end, $end + $delta);  
      }
    } else {
      # downcopy (insert data that didn't fit; replace this data in memory
      # with _later_ data that doesn't fit)
      if (@_) {
        $unwritten = $self->_downcopy($data, $end, $_[1] - $end);
      } else {
        # Make the file longer to accommodate the last segment that doesn't
        $unwritten = $self->_downcopy($data, $end);
      }
    }
  }
}

# Copy block of data of length $len from position $spos to position $dpos
# $dpos must be <= $spos
#
# If $len is undefined, go all the way to the end of the file
# and then truncate it ($spos - $dpos bytes will be removed)
sub _upcopy {
  my $blocksize = 8192;
  my ($self, $spos, $dpos, $len) = @_;
  if ($dpos > $spos) {
    die "source ($spos) was upstream of destination ($dpos) in _upcopy";
  } elsif ($dpos == $spos) {
    return;
  }
  
  while (! defined ($len) || $len > 0) {
    my $readsize = ! defined($len) ? $blocksize
               : $len > $blocksize ? $blocksize
               : $len;
      
    my $fh = $self->{fh};
    $self->_seekb($spos);
    my $bytes_read = read $fh, my($data), $readsize;
    $self->_seekb($dpos);
    if ($data eq "") { 
      $self->_chop_file;
      last;
    }
    $self->_write_record($data);
    $spos += $bytes_read;
    $dpos += $bytes_read;
    $len -= $bytes_read if defined $len;
  }
}

# Write $data into a block of length $len at position $pos,
# moving everything in the block forwards to make room.
# Instead of writing the last length($data) bytes from the block
# (because there isn't room for them any longer) return them.
#
# Undefined $len means 'until the end of the file'
sub _downcopy {
  my $blocksize = 8192;
  my ($self, $data, $pos, $len) = @_;
  my $fh = $self->{fh};

  while (! defined $len || $len > 0) {
    my $readsize = ! defined($len) ? $blocksize 
      : $len > $blocksize? $blocksize : $len;
    $self->_seekb($pos);
    read $fh, my($old), $readsize;
    my $last_read_was_short = length($old) < $readsize;
    $data .= $old;
    my $writable;
    if ($last_read_was_short) {
      # If last read was short, then $data now contains the entire rest
      # of the file, so there's no need to write only one block of it
      $writable = $data;
      $data = "";
    } else {
      $writable = substr($data, 0, $readsize, "");
    }
    last if $writable eq "";
    $self->_seekb($pos);
    $self->_write_record($writable);
    last if $last_read_was_short && $data eq "";
    $len -= $readsize if defined $len;
    $pos += $readsize;
  }
  return $data;
}

# Adjust the object data structures following an '_mtwrite'
# Arguments are
#  [$pos, $nrecs, @length]  items
# indicating that $nrecs records were removed at $recpos (a record offset)
# and replaced with records of length @length...
# Arguments guarantee that $recpos is strictly increasing.
# No return value
sub _oadjust {
  my $self = shift;
  my $delta = 0;
  my $delta_recs = 0;
  my $prev_end = -1;
  my %newkeys;

  for (@_) {
    my ($pos, $nrecs, @data) = @$_;
    $pos += $delta_recs;

    # Adjust the offsets of the records after the previous batch up
    # to the first new one of this batch
    for my $i ($prev_end+2 .. $pos - 1) {
      $self->{offsets}[$i] += $delta;
      $newkey{$i} = $i + $delta_recs;
    }

    $prev_end = $pos + @data - 1; # last record moved on this pass 

    # Remove the offsets for the removed records;
    # replace with the offsets for the inserted records
    my @newoff = ($self->{offsets}[$pos] + $delta);
    for my $i (0 .. $#data) {
      my $newlen = length $data[$i];
      push @newoff, $newoff[$i] + $newlen;
      $delta += $newlen;
    }

    for my $i ($pos .. $pos+$nrecs-1) {
      last if $i+1 > $#{$self->{offsets}};
      my $oldlen = $self->{offsets}[$i+1] - $self->{offsets}[$i];
      $delta -= $oldlen;
    }

#    # also this data has changed, so update it in the cache
#    for (0 .. $#data) {
#      $self->{cache}->update($pos + $_, $data[$_]);
#    }
#    if ($delta_recs) {
#      my @oldkeys = grep $_ >= $pos + @data, $self->{cache}->ckeys;
#      my @newkeys = map $_ + $delta_recs, @oldkeys;
#      $self->{cache}->rekey(\@oldkeys, \@newkeys);
#    }

    # replace old offsets with new
    splice @{$self->{offsets}}, $pos, $nrecs+1, @newoff;
    # What if we just spliced out the end of the offsets table?
    # shouldn't we clear $self->{eof}?   Test for this XXX BUG TODO

    $delta_recs += @data - $nrecs; # net change in total number of records
  }

  # The trailing records at the very end of the file
  if ($delta) {
    for my $i ($prev_end+2 .. $#{$self->{offsets}}) {
      $self->{offsets}[$i] += $delta;
    }
  }

  # If we scrubbed out all known offsets, regenerate the trivial table
  # that knows that the file does indeed start at 0.
  $self->{offsets}[0] = 0 unless @{$self->{offsets}};
  # If the file got longer, the offsets table is no longer complete
  # $self->{eof} = 0 if $delta_recs > 0;

  # Now there might be too much data in the cache, if we spliced out
  # some short records and spliced in some long ones.  If so, flush
  # the cache.
  $self->_cache_flush;
}

# If a record does not already end with the appropriate terminator
# string, append one.
sub _fixrecs {
  my $self = shift;
  for (@_) {
    $_ = "" unless defined $_;
    $_ .= $self->{recsep}
      unless substr($_, - $self->{recseplen}) eq $self->{recsep};
  }
}


################################################################
#
# Basic read, write, and seek
#

# seek to the beginning of record #$n
# Assumes that the offsets table is already correctly populated
#
# Note that $n=-1 has a special meaning here: It means the start of
# the last known record; this may or may not be the very last record
# in the file, depending on whether the offsets table is fully populated.
#
sub _seek {
  my ($self, $n) = @_;
  my $o = $self->{offsets}[$n];
  defined($o)
    or confess("logic error: undefined offset for record $n");
  seek $self->{fh}, $o, SEEK_SET
    or confess "Couldn't seek filehandle: $!";  # "Should never happen."
}

# seek to byte $b in the file
sub _seekb {
  my ($self, $b) = @_;
  seek $self->{fh}, $b, SEEK_SET
    or die "Couldn't seek filehandle: $!";  # "Should never happen."
}

# populate the offsets table up to the beginning of record $n
# return the offset of record $n
sub _fill_offsets_to {
  my ($self, $n) = @_;

  return $self->{offsets}[$n] if $self->{eof};

  my $fh = $self->{fh};
  local *OFF = $self->{offsets};
  my $rec;

  until ($#OFF >= $n) {
    $self->_seek(-1);           # tricky -- see comment at _seek
    $rec = $self->_read_record;
    if (defined $rec) {
      push @OFF, int(tell $fh);  # Tels says that int() saves memory here
    } else {
      $self->{eof} = 1;
      return;                   # It turns out there is no such record
    }
  }

  # we have now read all the records up to record n-1,
  # so we can return the offset of record n
  $OFF[$n];
}

sub _fill_offsets {
  my ($self) = @_;

  my $fh = $self->{fh};
  local *OFF = $self->{offsets};
  
  $self->_seek(-1);           # tricky -- see comment at _seek

  # Tels says that inlining read_record() would make this loop
  # five times faster. 20030508
  while ( defined $self->_read_record()) {
    # int() saves us memory here
    push @OFF, int(tell $fh);
  }

  $self->{eof} = 1;
  $#OFF;
}

# assumes that $rec is already suitably terminated
sub _write_record {
  my ($self, $rec) = @_;
  my $fh = $self->{fh};
  local $\ = "";
  print $fh $rec
    or die "Couldn't write record: $!";  # "Should never happen."
#  $self->{_written} += length($rec);
}

sub _read_record {
  my $self = shift;
  my $rec;
  { local $/ = $self->{recsep};
    my $fh = $self->{fh};
    $rec = <$fh>;
  }
  return unless defined $rec;
  if (substr($rec, -$self->{recseplen}) ne $self->{recsep}) {
    # improperly terminated final record --- quietly fix it.
#    my $ac = substr($rec, -$self->{recseplen});
#    $ac =~ s/\n/\\n/g;
    $self->{sawlastrec} = 1;
    unless ($self->{rdonly}) {
      local $\ = "";
      my $fh = $self->{fh};
      print $fh $self->{recsep};
    }
    $rec .= $self->{recsep};
  }
#  $self->{_read} += length($rec) if defined $rec;
  $rec;
}

sub _rw_stats {
  my $self = shift;
  @{$self}{'_read', '_written'};
}

################################################################
#
# Read cache management

sub _cache_flush {
  my ($self) = @_;
  $self->{cache}->reduce_size_to($self->{memory} - $self->{deferred_s});
}

sub _cache_too_full {
  my $self = shift;
  $self->{cache}->bytes + $self->{deferred_s} >= $self->{memory};
}

################################################################
#
# File custodial services
#


# We have read to the end of the file and have the offsets table
# entirely populated.  Now we need to write a new record beyond
# the end of the file.  We prepare for this by writing
# empty records into the file up to the position we want
#
# assumes that the offsets table already contains the offset of record $n,
# if it exists, and extends to the end of the file if not.
sub _extend_file_to {
  my ($self, $n) = @_;
  $self->_seek(-1);             # position after the end of the last record
  my $pos = $self->{offsets}[-1];

  # the offsets table has one entry more than the total number of records
  my $extras = $n - $#{$self->{offsets}};

  # Todo : just use $self->{recsep} x $extras here?
  while ($extras-- > 0) {
    $self->_write_record($self->{recsep});
    push @{$self->{offsets}}, int(tell $self->{fh});
  }
}

# Truncate the file at the current position
sub _chop_file {
  my $self = shift;
  truncate $self->{fh}, tell($self->{fh});
}


# compute the size of a buffer suitable for moving
# all the data in a file forward $n bytes
# ($n may be negative)
# The result should be at least $n.
sub _bufsize {
  my $n = shift;
  return 8192 if $n <= 0;
  my $b = $n & ~8191;
  $b += 8192 if $n & 8191;
  $b;
}

################################################################
#
# Miscellaneous public methods
#

# Lock the file
sub flock {
  my ($self, $op) = @_;
  unless (@_ <= 3) {
    my $pack = ref $self;
    croak "Usage: $pack\->flock([OPERATION])";
  }
  my $fh = $self->{fh};
  $op = LOCK_EX unless defined $op;
  my $locked = flock $fh, $op;
  
  if ($locked && ($op & (LOCK_EX | LOCK_SH))) {
    # If you're locking the file, then presumably it's because
    # there might have been a write access by another process.
    # In that case, the read cache contents and the offsets table
    # might be invalid, so discard them.  20030508
    $self->{offsets} = [0];
    $self->{cache}->empty;
  }

  $locked;
}

# Get/set autochomp option
sub autochomp {
  my $self = shift;
  if (@_) {
    my $old = $self->{autochomp};
    $self->{autochomp} = shift;
    $old;
  } else {
    $self->{autochomp};
  }
}

# Get offset table entries; returns offset of nth record
sub offset {
  my ($self, $n) = @_;

  if ($#{$self->{offsets}} < $n) {
    return if $self->{eof};     # request for record beyond the end of file
    my $o = $self->_fill_offsets_to($n);
    # If it's still undefined, there is no such record, so return 'undef'
    return unless defined $o;
   }
 
  $self->{offsets}[$n];
}

sub discard_offsets {
  my $self = shift;
  $self->{offsets} = [0];
}

################################################################
#
# Matters related to deferred writing
#

# Defer writes
sub defer {
  my $self = shift;
  $self->_stop_autodeferring;
  @{$self->{ad_history}} = ();
  $self->{defer} = 1;
}

# Flush deferred writes
#
# This could be better optimized to write the file in one pass, instead
# of one pass per block of records.  But that will require modifications
# to _twrite, so I should have a good _twrite test suite first.
sub flush {
  my $self = shift;

  $self->_flush;
  $self->{defer} = 0;
}

sub _old_flush {
  my $self = shift;
  my @writable = sort {$a<=>$b} (keys %{$self->{deferred}});

  while (@writable) {
    # gather all consecutive records from the front of @writable
    my $first_rec = shift @writable;
    my $last_rec = $first_rec+1;
    ++$last_rec, shift @writable while @writable && $last_rec == $writable[0];
    --$last_rec;
    $self->_fill_offsets_to($last_rec);
    $self->_extend_file_to($last_rec);
    $self->_splice($first_rec, $last_rec-$first_rec+1, 
                   @{$self->{deferred}}{$first_rec .. $last_rec});
  }

  $self->_discard;               # clear out defered-write-cache
}

sub _flush {
  my $self = shift;
  my @writable = sort {$a<=>$b} (keys %{$self->{deferred}});
  my @args;
  my @adjust;

  while (@writable) {
    # gather all consecutive records from the front of @writable
    my $first_rec = shift @writable;
    my $last_rec = $first_rec+1;
    ++$last_rec, shift @writable while @writable && $last_rec == $writable[0];
    --$last_rec;
    my $end = $self->_fill_offsets_to($last_rec+1);
    if (not defined $end) {
      $self->_extend_file_to($last_rec);
      $end = $self->{offsets}[$last_rec];
    }
    my ($start) = $self->{offsets}[$first_rec];
    push @args,
         join("", @{$self->{deferred}}{$first_rec .. $last_rec}), # data
         $start,                                                  # position
         $end-$start;                                             # length
    push @adjust, [$first_rec, # starting at this position...
                   $last_rec-$first_rec+1,  # this many records...
                   # are replaced with these...
                   @{$self->{deferred}}{$first_rec .. $last_rec},
                  ];
  }

  $self->_mtwrite(@args);  # write multiple record groups
  $self->_discard;               # clear out defered-write-cache
  $self->_oadjust(@adjust);
}

# Discard deferred writes and disable future deferred writes
sub discard {
  my $self = shift;
  $self->_discard;
  $self->{defer} = 0;
}

# Discard deferred writes, but retain old deferred writing mode
sub _discard {
  my $self = shift;
  %{$self->{deferred}} = ();
  $self->{deferred_s}  = 0;
  $self->{deferred_max}  = -1;
  $self->{cache}->set_limit($self->{memory});
}

# Deferred writing is enabled, either explicitly ($self->{defer})
# or automatically ($self->{autodeferring})
sub _is_deferring {
  my $self = shift;
  $self->{defer} || $self->{autodeferring};
}

# The largest record number of any deferred record
sub _defer_max {
  my $self = shift;
  return $self->{deferred_max} if defined $self->{deferred_max};
  my $max = -1;
  for my $key (keys %{$self->{deferred}}) {
    $max = $key if $key > $max;
  }
  $self->{deferred_max} = $max;
  $max;
}

################################################################
#
# Matters related to autodeferment
#

# Get/set autodefer option
sub autodefer {
  my $self = shift;
  if (@_) {
    my $old = $self->{autodefer};
    $self->{autodefer} = shift;
    if ($old) {
      $self->_stop_autodeferring;
      @{$self->{ad_history}} = ();
    }
    $old;
  } else {
    $self->{autodefer};
  }
}

# The user is trying to store record #$n Record that in the history,
# and then enable (or disable) autodeferment if that seems useful.
# Note that it's OK for $n to be a non-number, as long as the function
# is prepared to deal with that.  Nobody else looks at the ad_history.
#
# Now, what does the ad_history mean, and what is this function doing?
# Essentially, the idea is to enable autodeferring when we see that the
# user has made three consecutive STORE calls to three consecutive records.
# ("Three" is actually ->{autodefer_threshhold}.)
# A STORE call for record #$n inserts $n into the autodefer history,
# and if the history contains three consecutive records, we enable 
# autodeferment.  An ad_history of [X, Y] means that the most recent
# STOREs were for records X, X+1, ..., Y, in that order.  
#
# Inserting a nonconsecutive number erases the history and starts over.
#
# Performing a special operation like SPLICE erases the history.
#
# There's one special case: CLEAR means that CLEAR was just called.
# In this case, we prime the history with [-2, -1] so that if the next
# write is for record 0, autodeferring goes on immediately.  This is for
# the common special case of "@a = (...)".
#
sub _annotate_ad_history {
  my ($self, $n) = @_;
  return unless $self->{autodefer}; # feature is disabled
  return if $self->{defer};     # already in explicit defer mode
  return unless $self->{offsets}[-1] >= $self->{autodefer_filelen_threshhold};

  local *H = $self->{ad_history};
  if ($n eq 'CLEAR') {
    @H = (-2, -1);              # prime the history with fake records
    $self->_stop_autodeferring;
  } elsif ($n =~ /^\d+$/) {
    if (@H == 0) {
      @H =  ($n, $n);
    } else {                    # @H == 2
      if ($H[1] == $n-1) {      # another consecutive record
        $H[1]++;
        if ($H[1] - $H[0] + 1 >= $self->{autodefer_threshhold}) {
          $self->{autodeferring} = 1;
        }
      } else {                  # nonconsecutive- erase and start over
        @H = ($n, $n);
        $self->_stop_autodeferring;
      }
    }
  } else {                      # SPLICE or STORESIZE or some such
    @H = ();
    $self->_stop_autodeferring;
  }
}

# If autodeferring was enabled, cut it out and discard the history
sub _stop_autodeferring {
  my $self = shift;
  if ($self->{autodeferring}) {
    $self->_flush;
  }
  $self->{autodeferring} = 0;
}

################################################################


# This is NOT a method.  It is here for two reasons:
#  1. To factor a fairly complicated block out of the constructor
#  2. To provide access for the test suite, which need to be sure
#     files are being written properly.
sub _default_recsep {
  my $recsep = $/;
  if ($^O eq 'MSWin32') {       # Dos too?
    # Windows users expect files to be terminated with \r\n
    # But $/ is set to \n instead
    # Note that this also transforms \n\n into \r\n\r\n.
    # That is a feature.
    $recsep =~ s/\n/\r\n/g;
  }
  $recsep;
}

# Utility function for _check_integrity
sub _ci_warn {
  my $msg = shift;
  $msg =~ s/\n/\\n/g;
  $msg =~ s/\r/\\r/g;
  print "# $msg\n";
}

# Given a file, make sure the cache is consistent with the
# file contents and the internal data structures are consistent with
# each other.  Returns true if everything checks out, false if not
#
# The $file argument is no longer used.  It is retained for compatibility
# with the existing test suite.
sub _check_integrity {
  my ($self, $file, $warn) = @_;
  my $rsl = $self->{recseplen};
  my $rs  = $self->{recsep};
  my $good = 1; 
  local *_;                     # local $_ does not work here
  local $DIAGNOSTIC = 1;

  if (not defined $rs) {
    _ci_warn("recsep is undef!");
    $good = 0;
  } elsif ($rs eq "") {
    _ci_warn("recsep is empty!");
    $good = 0;
  } elsif ($rsl != length $rs) {
    my $ln = length $rs;
    _ci_warn("recsep <$rs> has length $ln, should be $rsl");
    $good = 0;
  }

  if (not defined $self->{offsets}[0]) {
    _ci_warn("offset 0 is missing!");
    $good = 0;

  } elsif ($self->{offsets}[0] != 0) {
    _ci_warn("rec 0: offset <$self->{offsets}[0]> s/b 0!");
    $good = 0;
  }

  my $cached = 0;
  {
    local *F = $self->{fh};
    seek F, 0, SEEK_SET;
    local $. = 0;
    local $/ = $rs;

    while (<F>) {
      my $n = $. - 1;
      my $cached = $self->{cache}->_produce($n);
      my $offset = $self->{offsets}[$.];
      my $ao = tell F;
      if (defined $offset && $offset != $ao) {
        _ci_warn("rec $n: offset <$offset> actual <$ao>");
        $good = 0;
      }
      if (defined $cached && $_ ne $cached && ! $self->{deferred}{$n}) {
        $good = 0;
        _ci_warn("rec $n: cached <$cached> actual <$_>");
      }
      if (defined $cached && substr($cached, -$rsl) ne $rs) {
        $good = 0;
        _ci_warn("rec $n in the cache is missing the record separator");
      }
      if (! defined $offset && $self->{eof}) {
        $good = 0;
        _ci_warn("The offset table was marked complete, but it is missing element $.");
      }
    }
    if (@{$self->{offsets}} > $.+1) {
        $good = 0;
        my $n = @{$self->{offsets}};
        _ci_warn("The offset table has $n items, but the file has only $.");
    }

    my $deferring = $self->_is_deferring;
    for my $n ($self->{cache}->ckeys) {
      my $r = $self->{cache}->_produce($n);
      $cached += length($r);
      next if $n+1 <= $.;         # checked this already
      _ci_warn("spurious caching of record $n");
      $good = 0;
    }
    my $b = $self->{cache}->bytes;
    if ($cached != $b) {
      _ci_warn("cache size is $b, should be $cached");
      $good = 0;
    }
  }

  # That cache has its own set of tests
  $good = 0 unless $self->{cache}->_check_integrity;

  # Now let's check the deferbuffer
  # Unless deferred writing is enabled, it should be empty
  if (! $self->_is_deferring && %{$self->{deferred}}) {
    _ci_warn("deferred writing disabled, but deferbuffer nonempty");
    $good = 0;
  }

  # Any record in the deferbuffer should *not* be present in the readcache
  my $deferred_s = 0;
  while (my ($n, $r) = each %{$self->{deferred}}) {
    $deferred_s += length($r);
    if (defined $self->{cache}->_produce($n)) {
      _ci_warn("record $n is in the deferbuffer *and* the readcache");
      $good = 0;
    }
    if (substr($r, -$rsl) ne $rs) {
      _ci_warn("rec $n in the deferbuffer is missing the record separator");
      $good = 0;
    }
  }

  # Total size of deferbuffer should match internal total
  if ($deferred_s != $self->{deferred_s}) {
    _ci_warn("buffer size is $self->{deferred_s}, should be $deferred_s");
    $good = 0;
  }

  # Total size of deferbuffer should not exceed the specified limit
  if ($deferred_s > $self->{dw_size}) {
    _ci_warn("buffer size is $self->{deferred_s} which exceeds the limit of $self->{dw_size}");
    $good = 0;
  }

  # Total size of cached data should not exceed the specified limit
  if ($deferred_s + $cached > $self->{memory}) {
    my $total = $deferred_s + $cached;
    _ci_warn("total stored data size is $total which exceeds the limit of $self->{memory}");
    $good = 0;
  }

  # Stuff related to autodeferment
  if (!$self->{autodefer} && @{$self->{ad_history}}) {
    _ci_warn("autodefer is disabled, but ad_history is nonempty");
    $good = 0;
  }
  if ($self->{autodeferring} && $self->{defer}) {
    _ci_warn("both autodeferring and explicit deferring are active");
    $good = 0;
  }
  if (@{$self->{ad_history}} == 0) {
    # That's OK, no additional tests required
  } elsif (@{$self->{ad_history}} == 2) {
    my @non_number = grep !/^-?\d+$/, @{$self->{ad_history}};
    if (@non_number) {
      my $msg;
      { local $" = ')(';
        $msg = "ad_history contains non-numbers (@{$self->{ad_history}})";
      }
      _ci_warn($msg);
      $good = 0;
    } elsif ($self->{ad_history}[1] < $self->{ad_history}[0]) {
      _ci_warn("ad_history has nonsensical values @{$self->{ad_history}}");
      $good = 0;
    }
  } else {
    _ci_warn("ad_history has bad length <@{$self->{ad_history}}>");
    $good = 0;
  }

  $good;
}

################################################################
#
# Tie::File::Cache
#
# Read cache

package Tie::File::Cache;
$Tie::File::Cache::VERSION = $Tie::File::VERSION;
use Carp ':DEFAULT', 'confess';

sub HEAP () { 0 }
sub HASH () { 1 }
sub MAX  () { 2 }
sub BYTES() { 3 }
#sub STAT () { 4 } # Array with request statistics for each record
#sub MISS () { 5 } # Total number of cache misses
#sub REQ  () { 6 } # Total number of cache requests 
use strict 'vars';

sub new {
  my ($pack, $max) = @_;
  local *_;
  croak "missing argument to ->new" unless defined $max;
  my $self = [];
  bless $self => $pack;
  @$self = (Tie::File::Heap->new($self), {}, $max, 0);
  $self;
}

sub adj_limit {
  my ($self, $n) = @_;
  $self->[MAX] += $n;
}

sub set_limit {
  my ($self, $n) = @_;
  $self->[MAX] = $n;
}

# For internal use only
# Will be called by the heap structure to notify us that a certain 
# piece of data has moved from one heap element to another.
# $k is the hash key of the item
# $n is the new index into the heap at which it is stored
# If $n is undefined, the item has been removed from the heap.
sub _heap_move {
  my ($self, $k, $n) = @_;
  if (defined $n) {
    $self->[HASH]{$k} = $n;
  } else {
    delete $self->[HASH]{$k};
  }
}

sub insert {
  my ($self, $key, $val) = @_;
  local *_;
  croak "missing argument to ->insert" unless defined $key;
  unless (defined $self->[MAX]) {
    confess "undefined max" ;
  }
  confess "undefined val" unless defined $val;
  return if length($val) > $self->[MAX];

#  if ($self->[STAT]) {
#    $self->[STAT][$key] = 1;
#    return;
#  }

  my $oldnode = $self->[HASH]{$key};
  if (defined $oldnode) {
    my $oldval = $self->[HEAP]->set_val($oldnode, $val);
    $self->[BYTES] -= length($oldval);
  } else {
    $self->[HEAP]->insert($key, $val);
  }
  $self->[BYTES] += length($val);
  $self->flush if $self->[BYTES] > $self->[MAX];
}

sub expire {
  my $self = shift;
  my $old_data = $self->[HEAP]->popheap;
  return unless defined $old_data;
  $self->[BYTES] -= length $old_data;
  $old_data;
}

sub remove {
  my ($self, @keys) = @_;
  my @result;

#  if ($self->[STAT]) {
#    for my $key (@keys) {
#      $self->[STAT][$key] = 0;
#    }
#    return;
#  }

  for my $key (@keys) {
    next unless exists $self->[HASH]{$key};
    my $old_data = $self->[HEAP]->remove($self->[HASH]{$key});
    $self->[BYTES] -= length $old_data;
    push @result, $old_data;
  }
  @result;
}

sub lookup {
  my ($self, $key) = @_;
  local *_;
  croak "missing argument to ->lookup" unless defined $key;

#  if ($self->[STAT]) {
#    $self->[MISS]++  if $self->[STAT][$key]++ == 0;
#    $self->[REQ]++;
#    my $hit_rate = 1 - $self->[MISS] / $self->[REQ];
#    # Do some testing to determine this threshhold
#    $#$self = STAT - 1 if $hit_rate > 0.20; 
#  }

  if (exists $self->[HASH]{$key}) {
    $self->[HEAP]->lookup($self->[HASH]{$key});
  } else {
    return;
  }
}

# For internal use only
sub _produce {
  my ($self, $key) = @_;
  my $loc = $self->[HASH]{$key};
  return unless defined $loc;
  $self->[HEAP][$loc][2];
}

# For internal use only
sub _promote {
  my ($self, $key) = @_;
  $self->[HEAP]->promote($self->[HASH]{$key});
}

sub empty {
  my ($self) = @_;
  %{$self->[HASH]} = ();
    $self->[BYTES] = 0;
    $self->[HEAP]->empty;
#  @{$self->[STAT]} = ();
#    $self->[MISS] = 0;
#    $self->[REQ] = 0;
}

sub is_empty {
  my ($self) = @_;
  keys %{$self->[HASH]} == 0;
}

sub update {
  my ($self, $key, $val) = @_;
  local *_;
  croak "missing argument to ->update" unless defined $key;
  if (length($val) > $self->[MAX]) {
    my ($oldval) = $self->remove($key);
    $self->[BYTES] -= length($oldval) if defined $oldval;
  } elsif (exists $self->[HASH]{$key}) {
    my $oldval = $self->[HEAP]->set_val($self->[HASH]{$key}, $val);
    $self->[BYTES] += length($val);
    $self->[BYTES] -= length($oldval) if defined $oldval;
  } else {
    $self->[HEAP]->insert($key, $val);
    $self->[BYTES] += length($val);
  }
  $self->flush;
}

sub rekey {
  my ($self, $okeys, $nkeys) = @_;
  local *_;
  my %map;
  @map{@$okeys} = @$nkeys;
  croak "missing argument to ->rekey" unless defined $nkeys;
  croak "length mismatch in ->rekey arguments" unless @$nkeys == @$okeys;
  my %adjusted;                 # map new keys to heap indices
  # You should be able to cut this to one loop TODO XXX
  for (0 .. $#$okeys) {
    $adjusted{$nkeys->[$_]} = delete $self->[HASH]{$okeys->[$_]};
  }
  while (my ($nk, $ix) = each %adjusted) {
    # @{$self->[HASH]}{keys %adjusted} = values %adjusted;
    $self->[HEAP]->rekey($ix, $nk);
    $self->[HASH]{$nk} = $ix;
  }
}

sub ckeys {
  my $self = shift;
  my @a = keys %{$self->[HASH]};
  @a;
}

# Return total amount of cached data
sub bytes {
  my $self = shift;
  $self->[BYTES];
}

# Expire oldest item from cache until cache size is smaller than $max
sub reduce_size_to {
  my ($self, $max) = @_;
  until ($self->[BYTES] <= $max) {
    # Note that Tie::File::Cache::expire has been inlined here
    my $old_data = $self->[HEAP]->popheap;
    return unless defined $old_data;
    $self->[BYTES] -= length $old_data;
  }
}

# Why not just $self->reduce_size_to($self->[MAX])?
# Try this when things stabilize   TODO XXX
# If the cache is too full, expire the oldest records
sub flush {
  my $self = shift;
  $self->reduce_size_to($self->[MAX]) if $self->[BYTES] > $self->[MAX];
}

# For internal use only
sub _produce_lru {
  my $self = shift;
  $self->[HEAP]->expire_order;
}

BEGIN { *_ci_warn = \&Tie::File::_ci_warn }

sub _check_integrity {          # For CACHE
  my $self = shift;
  my $good = 1;

  # Test HEAP
  $self->[HEAP]->_check_integrity or $good = 0;

  # Test HASH
  my $bytes = 0;
  for my $k (keys %{$self->[HASH]}) {
    if ($k ne '0' && $k !~ /^[1-9][0-9]*$/) {
      $good = 0;
      _ci_warn "Cache hash key <$k> is non-numeric";
    }

    my $h = $self->[HASH]{$k};
    if (! defined $h) {
      $good = 0;
      _ci_warn "Heap index number for key $k is undefined";
    } elsif ($h == 0) {
      $good = 0;
      _ci_warn "Heap index number for key $k is zero";
    } else {
      my $j = $self->[HEAP][$h];
      if (! defined $j) {
        $good = 0;
        _ci_warn "Heap contents key $k (=> $h) are undefined";
      } else {
        $bytes += length($j->[2]);
        if ($k ne $j->[1]) {
          $good = 0;
          _ci_warn "Heap contents key $k (=> $h) is $j->[1], should be $k";
        }
      }
    }
  }

  # Test BYTES
  if ($bytes != $self->[BYTES]) {
    $good = 0;
    _ci_warn "Total data in cache is $bytes, expected $self->[BYTES]";
  }

  # Test MAX
  if ($bytes > $self->[MAX]) {
    $good = 0;
    _ci_warn "Total data in cache is $bytes, exceeds maximum $self->[MAX]";
  }

  return $good;
}

sub delink {
  my $self = shift;
  $self->[HEAP] = undef;        # Bye bye heap
}

################################################################
#
# Tie::File::Heap
#
# Heap data structure for use by cache LRU routines

package Tie::File::Heap;
use Carp ':DEFAULT', 'confess';
$Tie::File::Heap::VERSION = $Tie::File::Cache::VERSION;
sub SEQ () { 0 };
sub KEY () { 1 };
sub DAT () { 2 };

sub new {
  my ($pack, $cache) = @_;
  die "$pack: Parent cache object $cache does not support _heap_move method"
    unless eval { $cache->can('_heap_move') };
  my $self = [[0,$cache,0]];
  bless $self => $pack;
}

# Allocate a new sequence number, larger than all previously allocated numbers
sub _nseq {
  my $self = shift;
  $self->[0][0]++;
}

sub _cache {
  my $self = shift;
  $self->[0][1];
}

sub _nelts {
  my $self = shift;
  $self->[0][2];
}

sub _nelts_inc {
  my $self = shift;
  ++$self->[0][2];
}  

sub _nelts_dec {
  my $self = shift;
  --$self->[0][2];
}  

sub is_empty {
  my $self = shift;
  $self->_nelts == 0;
}

sub empty {
  my $self = shift;
  $#$self = 0;
  $self->[0][2] = 0;
  $self->[0][0] = 0;            # might as well reset the sequence numbers
}

# notify the parent cache object that we moved something
sub _heap_move {
  my $self = shift;
  $self->_cache->_heap_move(@_);
}

# Insert a piece of data into the heap with the indicated sequence number.
# The item with the smallest sequence number is always at the top.
# If no sequence number is specified, allocate a new one and insert the
# item at the bottom.
sub insert {
  my ($self, $key, $data, $seq) = @_;
  $seq = $self->_nseq unless defined $seq;
  $self->_insert_new([$seq, $key, $data]);
}

# Insert a new, fresh item at the bottom of the heap
sub _insert_new {
  my ($self, $item) = @_;
  my $i = @$self;
  $i = int($i/2) until defined $self->[$i/2];
  $self->[$i] = $item;
  $self->[0][1]->_heap_move($self->[$i][KEY], $i);
  $self->_nelts_inc;
}

# Insert [$data, $seq] pair at or below item $i in the heap.
# If $i is omitted, default to 1 (the top element.)
sub _insert {
  my ($self, $item, $i) = @_;
#  $self->_check_loc($i) if defined $i;
  $i = 1 unless defined $i;
  until (! defined $self->[$i]) {
    if ($self->[$i][SEQ] > $item->[SEQ]) { # inserted item is older
      ($self->[$i], $item) = ($item, $self->[$i]);
      $self->[0][1]->_heap_move($self->[$i][KEY], $i);
    }
    # If either is undefined, go that way.  Otherwise, choose at random
    my $dir;
    $dir = 0 if !defined $self->[2*$i];
    $dir = 1 if !defined $self->[2*$i+1];
    $dir = int(rand(2)) unless defined $dir;
    $i = 2*$i + $dir;
  }
  $self->[$i] = $item;
  $self->[0][1]->_heap_move($self->[$i][KEY], $i);
  $self->_nelts_inc;
}

# Remove the item at node $i from the heap, moving child items upwards.
# The item with the smallest sequence number is always at the top.
# Moving items upwards maintains this condition.
# Return the removed item.  Return undef if there was no item at node $i.
sub remove {
  my ($self, $i) = @_;
  $i = 1 unless defined $i;
  my $top = $self->[$i];
  return unless defined $top;
  while (1) {
    my $ii;
    my ($L, $R) = (2*$i, 2*$i+1);

    # If either is undefined, go the other way.
    # Otherwise, go towards the smallest.
    last unless defined $self->[$L] || defined $self->[$R];
    $ii = $R if not defined $self->[$L];
    $ii = $L if not defined $self->[$R];
    unless (defined $ii) {
      $ii = $self->[$L][SEQ] < $self->[$R][SEQ] ? $L : $R;
    }

    $self->[$i] = $self->[$ii]; # Promote child to fill vacated spot
    $self->[0][1]->_heap_move($self->[$i][KEY], $i);
    $i = $ii; # Fill new vacated spot
  }
  $self->[0][1]->_heap_move($top->[KEY], undef);
  undef $self->[$i];
  $self->_nelts_dec;
  return $top->[DAT];
}

sub popheap {
  my $self = shift;
  $self->remove(1);
}

# set the sequence number of the indicated item to a higher number
# than any other item in the heap, and bubble the item down to the
# bottom.
sub promote {
  my ($self, $n) = @_;
#  $self->_check_loc($n);
  $self->[$n][SEQ] = $self->_nseq;
  my $i = $n;
  while (1) {
    my ($L, $R) = (2*$i, 2*$i+1);
    my $dir;
    last unless defined $self->[$L] || defined $self->[$R];
    $dir = $R unless defined $self->[$L];
    $dir = $L unless defined $self->[$R];
    unless (defined $dir) {
      $dir = $self->[$L][SEQ] < $self->[$R][SEQ] ? $L : $R;
    }
    @{$self}[$i, $dir] = @{$self}[$dir, $i];
    for ($i, $dir) {
      $self->[0][1]->_heap_move($self->[$_][KEY], $_) if defined $self->[$_];
    }
    $i = $dir;
  }
}

# Return item $n from the heap, promoting its LRU status
sub lookup {
  my ($self, $n) = @_;
#  $self->_check_loc($n);
  my $val = $self->[$n];
  $self->promote($n);
  $val->[DAT];
}


# Assign a new value for node $n, promoting it to the bottom of the heap
sub set_val {
  my ($self, $n, $val) = @_;
#  $self->_check_loc($n);
  my $oval = $self->[$n][DAT];
  $self->[$n][DAT] = $val;
  $self->promote($n);
  return $oval;
}

# The hash key has changed for an item;
# alter the heap's record of the hash key
sub rekey {
  my ($self, $n, $new_key) = @_;
#  $self->_check_loc($n);
  $self->[$n][KEY] = $new_key;
}

sub _check_loc {
  my ($self, $n) = @_;
  unless (1 || defined $self->[$n]) {
    confess "_check_loc($n) failed";
  }
}

BEGIN { *_ci_warn = \&Tie::File::_ci_warn }

sub _check_integrity {
  my $self = shift;
  my $good = 1;
  my %seq;

  unless (eval {$self->[0][1]->isa("Tie::File::Cache")}) {
    _ci_warn "Element 0 of heap corrupt";
    $good = 0;
  }
  $good = 0 unless $self->_satisfies_heap_condition(1);
  for my $i (2 .. $#{$self}) {
    my $p = int($i/2);          # index of parent node
    if (defined $self->[$i] && ! defined $self->[$p]) {
      _ci_warn "Element $i of heap defined, but parent $p isn't";
      $good = 0;
    }

    if (defined $self->[$i]) {
      if ($seq{$self->[$i][SEQ]}) {
        my $seq = $self->[$i][SEQ];
        _ci_warn "Nodes $i and $seq{$seq} both have SEQ=$seq";
        $good = 0;
      } else {
        $seq{$self->[$i][SEQ]} = $i;
      }
    }
  }

  return $good;
}

sub _satisfies_heap_condition {
  my $self = shift;
  my $n = shift || 1;
  my $good = 1;
  for (0, 1) {
    my $c = $n*2 + $_;
    next unless defined $self->[$c];
    if ($self->[$n][SEQ] >= $self->[$c]) {
      _ci_warn "Node $n of heap does not predate node $c";
      $good = 0 ;
    }
    $good = 0 unless $self->_satisfies_heap_condition($c);
  }
  return $good;
}

# Return a list of all the values, sorted by expiration order
sub expire_order {
  my $self = shift;
  my @nodes = sort {$a->[SEQ] <=> $b->[SEQ]} $self->_nodes;
  map { $_->[KEY] } @nodes;
}

sub _nodes {
  my $self = shift;
  my $i = shift || 1;
  return unless defined $self->[$i];
  ($self->[$i], $self->_nodes($i*2), $self->_nodes($i*2+1));
}

"Cogito, ergo sum.";  # don't forget to return a true value from the file

__END__

=head1 NAME

Tie::File - Access the lines of a disk file via a Perl array

=head1 SYNOPSIS

	# This file documents Tie::File version 0.98
	use Tie::File;

	tie @array, 'Tie::File', filename or die ...;

	$array[13] = 'blah';     # line 13 of the file is now 'blah'
	print $array[42];        # display line 42 of the file

	$n_recs = @array;        # how many records are in the file?
	$#array -= 2;            # chop two records off the end


	for (@array) {
	  s/PERL/Perl/g;         # Replace PERL with Perl everywhere in the file
	}

	# These are just like regular push, pop, unshift, shift, and splice
	# Except that they modify the file in the way you would expect

	push @array, new recs...;
	my $r1 = pop @array;
	unshift @array, new recs...;
	my $r2 = shift @array;
	@old_recs = splice @array, 3, 7, new recs...;

	untie @array;            # all finished


=head1 DESCRIPTION

C<Tie::File> represents a regular text file as a Perl array.  Each
element in the array corresponds to a record in the file.  The first
line of the file is element 0 of the array; the second line is element
1, and so on.

The file is I<not> loaded into memory, so this will work even for
gigantic files.

Changes to the array are reflected in the file immediately.

Lazy people and beginners may now stop reading the manual.

=head2 C<recsep>

What is a 'record'?  By default, the meaning is the same as for the
C<E<lt>...E<gt>> operator: It's a string terminated by C<$/>, which is
probably C<"\n">.  (Minor exception: on DOS and Win32 systems, a
'record' is a string terminated by C<"\r\n">.)  You may change the
definition of "record" by supplying the C<recsep> option in the C<tie>
call:

	tie @array, 'Tie::File', $file, recsep => 'es';

This says that records are delimited by the string C<es>.  If the file
contained the following data:

	Curse these pesky flies!\n

then the C<@array> would appear to have four elements:

	"Curse th"
	"e p"
	"ky fli"
	"!\n"

An undefined value is not permitted as a record separator.  Perl's
special "paragraph mode" semantics (E<agrave> la C<$/ = "">) are not
emulated.

Records read from the tied array do not have the record separator
string on the end; this is to allow

	$array[17] .= "extra";

to work as expected.

(See L<"autochomp">, below.)  Records stored into the array will have
the record separator string appended before they are written to the
file, if they don't have one already.  For example, if the record
separator string is C<"\n">, then the following two lines do exactly
the same thing:

	$array[17] = "Cherry pie";
	$array[17] = "Cherry pie\n";

The result is that the contents of line 17 of the file will be
replaced with "Cherry pie"; a newline character will separate line 17
from line 18.  This means that this code will do nothing:

	chomp $array[17];

Because the C<chomp>ed value will have the separator reattached when
it is written back to the file.  There is no way to create a file
whose trailing record separator string is missing.

Inserting records that I<contain> the record separator string is not
supported by this module.  It will probably produce a reasonable
result, but what this result will be may change in a future version.
Use 'splice' to insert records or to replace one record with several.

=head2 C<autochomp>

Normally, array elements have the record separator removed, so that if
the file contains the text

	Gold
	Frankincense
	Myrrh

the tied array will appear to contain C<("Gold", "Frankincense",
"Myrrh")>.  If you set C<autochomp> to a false value, the record
separator will not be removed.  If the file above was tied with

	tie @gifts, "Tie::File", $gifts, autochomp => 0;

then the array C<@gifts> would appear to contain C<("Gold\n",
"Frankincense\n", "Myrrh\n")>, or (on Win32 systems) C<("Gold\r\n",
"Frankincense\r\n", "Myrrh\r\n")>.

=head2 C<mode>

Normally, the specified file will be opened for read and write access,
and will be created if it does not exist.  (That is, the flags
C<O_RDWR | O_CREAT> are supplied in the C<open> call.)  If you want to
change this, you may supply alternative flags in the C<mode> option.
See L<Fcntl> for a listing of available flags.
For example:

	# open the file if it exists, but fail if it does not exist
	use Fcntl 'O_RDWR';
	tie @array, 'Tie::File', $file, mode => O_RDWR;

	# create the file if it does not exist
	use Fcntl 'O_RDWR', 'O_CREAT';
	tie @array, 'Tie::File', $file, mode => O_RDWR | O_CREAT;

	# open an existing file in read-only mode
	use Fcntl 'O_RDONLY';
	tie @array, 'Tie::File', $file, mode => O_RDONLY;

Opening the data file in write-only or append mode is not supported.

=head2 C<memory>

This is an upper limit on the amount of memory that C<Tie::File> will
consume at any time while managing the file.  This is used for two
things: managing the I<read cache> and managing the I<deferred write
buffer>.

Records read in from the file are cached, to avoid having to re-read
them repeatedly.  If you read the same record twice, the first time it
will be stored in memory, and the second time it will be fetched from
the I<read cache>.  The amount of data in the read cache will not
exceed the value you specified for C<memory>.  If C<Tie::File> wants
to cache a new record, but the read cache is full, it will make room
by expiring the least-recently visited records from the read cache.

The default memory limit is 2Mib.  You can adjust the maximum read
cache size by supplying the C<memory> option.  The argument is the
desired cache size, in bytes.

	# I have a lot of memory, so use a large cache to speed up access
	tie @array, 'Tie::File', $file, memory => 20_000_000;

Setting the memory limit to 0 will inhibit caching; records will be
fetched from disk every time you examine them.

The C<memory> value is not an absolute or exact limit on the memory
used.  C<Tie::File> objects contains some structures besides the read
cache and the deferred write buffer, whose sizes are not charged
against C<memory>. 

The cache itself consumes about 310 bytes per cached record, so if
your file has many short records, you may want to decrease the cache
memory limit, or else the cache overhead may exceed the size of the
cached data.


=head2 C<dw_size>

(This is an advanced feature.  Skip this section on first reading.)

If you use deferred writing (See L<"Deferred Writing">, below) then
data you write into the array will not be written directly to the
file; instead, it will be saved in the I<deferred write buffer> to be
written out later.  Data in the deferred write buffer is also charged
against the memory limit you set with the C<memory> option.

You may set the C<dw_size> option to limit the amount of data that can
be saved in the deferred write buffer.  This limit may not exceed the
total memory limit.  For example, if you set C<dw_size> to 1000 and
C<memory> to 2500, that means that no more than 1000 bytes of deferred
writes will be saved up.  The space available for the read cache will
vary, but it will always be at least 1500 bytes (if the deferred write
buffer is full) and it could grow as large as 2500 bytes (if the
deferred write buffer is empty.)

If you don't specify a C<dw_size>, it defaults to the entire memory
limit.

=head2 Option Format

C<-mode> is a synonym for C<mode>.  C<-recsep> is a synonym for
C<recsep>.  C<-memory> is a synonym for C<memory>.  You get the
idea.

=head1 Public Methods

The C<tie> call returns an object, say C<$o>.  You may call

	$rec = $o->FETCH($n);
	$o->STORE($n, $rec);

to fetch or store the record at line C<$n>, respectively; similarly
the other tied array methods.  (See L<perltie> for details.)  You may
also call the following methods on this object:

=head2 C<flock>

	$o->flock(MODE)

will lock the tied file.  C<MODE> has the same meaning as the second
argument to the Perl built-in C<flock> function; for example
C<LOCK_SH> or C<LOCK_EX | LOCK_NB>.  (These constants are provided by
the C<use Fcntl ':flock'> declaration.)

C<MODE> is optional; the default is C<LOCK_EX>.

C<Tie::File> maintains an internal table of the byte offset of each
record it has seen in the file.  

When you use C<flock> to lock the file, C<Tie::File> assumes that the
read cache is no longer trustworthy, because another process might
have modified the file since the last time it was read.  Therefore, a
successful call to C<flock> discards the contents of the read cache
and the internal record offset table.

C<Tie::File> promises that the following sequence of operations will
be safe:

	my $o = tie @array, "Tie::File", $filename;
	$o->flock;

In particular, C<Tie::File> will I<not> read or write the file during
the C<tie> call.  (Exception: Using C<mode =E<gt> O_TRUNC> will, of
course, erase the file during the C<tie> call.  If you want to do this
safely, then open the file without C<O_TRUNC>, lock the file, and use
C<@array = ()>.)

The best way to unlock a file is to discard the object and untie the
array.  It is probably unsafe to unlock the file without also untying
it, because if you do, changes may remain unwritten inside the object.
That is why there is no shortcut for unlocking.  If you really want to
unlock the file prematurely, you know what to do; if you don't know
what to do, then don't do it.

All the usual warnings about file locking apply here.  In particular,
note that file locking in Perl is B<advisory>, which means that
holding a lock will not prevent anyone else from reading, writing, or
erasing the file; it only prevents them from getting another lock at
the same time.  Locks are analogous to green traffic lights: If you
have a green light, that does not prevent the idiot coming the other
way from plowing into you sideways; it merely guarantees to you that
the idiot does not also have a green light at the same time.

=head2 C<autochomp>

	my $old_value = $o->autochomp(0);    # disable autochomp option
	my $old_value = $o->autochomp(1);    #  enable autochomp option

	my $ac = $o->autochomp();   # recover current value

See L<"autochomp">, above.

=head2 C<defer>, C<flush>, C<discard>, and C<autodefer>

See L<"Deferred Writing">, below.

=head2 C<offset>

	$off = $o->offset($n);

This method returns the byte offset of the start of the C<$n>th record
in the file.  If there is no such record, it returns an undefined
value.

=head1 Tying to an already-opened filehandle

If C<$fh> is a filehandle, such as is returned by C<IO::File> or one
of the other C<IO> modules, you may use:

	tie @array, 'Tie::File', $fh, ...;

Similarly if you opened that handle C<FH> with regular C<open> or
C<sysopen>, you may use:

	tie @array, 'Tie::File', \*FH, ...;

Handles that were opened write-only won't work.  Handles that were
opened read-only will work as long as you don't try to modify the
array.  Handles must be attached to seekable sources of data---that
means no pipes or sockets.  If C<Tie::File> can detect that you
supplied a non-seekable handle, the C<tie> call will throw an
exception.  (On Unix systems, it can detect this.)

Note that Tie::File will only close any filehandles that it opened
internally.  If you passed it a filehandle as above, you "own" the
filehandle, and are responsible for closing it after you have untied
the @array.

=head1 Deferred Writing

(This is an advanced feature.  Skip this section on first reading.)

Normally, modifying a C<Tie::File> array writes to the underlying file
immediately.  Every assignment like C<$a[3] = ...> rewrites as much of
the file as is necessary; typically, everything from line 3 through
the end will need to be rewritten.  This is the simplest and most
transparent behavior.  Performance even for large files is reasonably
good.

However, under some circumstances, this behavior may be excessively
slow.  For example, suppose you have a million-record file, and you
want to do:

	for (@FILE) {
	  $_ = "> $_";
	}

The first time through the loop, you will rewrite the entire file,
from line 0 through the end.  The second time through the loop, you
will rewrite the entire file from line 1 through the end.  The third
time through the loop, you will rewrite the entire file from line 2 to
the end.  And so on.

If the performance in such cases is unacceptable, you may defer the
actual writing, and then have it done all at once.  The following loop
will perform much better for large files:

	(tied @a)->defer;
	for (@a) {
	  $_ = "> $_";
	}
	(tied @a)->flush;

If C<Tie::File>'s memory limit is large enough, all the writing will
done in memory.  Then, when you call C<-E<gt>flush>, the entire file
will be rewritten in a single pass.

(Actually, the preceding discussion is something of a fib.  You don't
need to enable deferred writing to get good performance for this
common case, because C<Tie::File> will do it for you automatically
unless you specifically tell it not to.  See L<"Autodeferring">,
below.)

Calling C<-E<gt>flush> returns the array to immediate-write mode.  If
you wish to discard the deferred writes, you may call C<-E<gt>discard>
instead of C<-E<gt>flush>.  Note that in some cases, some of the data
will have been written already, and it will be too late for
C<-E<gt>discard> to discard all the changes.  Support for
C<-E<gt>discard> may be withdrawn in a future version of C<Tie::File>.

Deferred writes are cached in memory up to the limit specified by the
C<dw_size> option (see above).  If the deferred-write buffer is full
and you try to write still more deferred data, the buffer will be
flushed.  All buffered data will be written immediately, the buffer
will be emptied, and the now-empty space will be used for future
deferred writes.

If the deferred-write buffer isn't yet full, but the total size of the
buffer and the read cache would exceed the C<memory> limit, the oldest
records will be expired from the read cache until the total size is
under the limit.

C<push>, C<pop>, C<shift>, C<unshift>, and C<splice> cannot be
deferred.  When you perform one of these operations, any deferred data
is written to the file and the operation is performed immediately.
This may change in a future version.

If you resize the array with deferred writing enabled, the file will
be resized immediately, but deferred records will not be written.
This has a surprising consequence: C<@a = (...)> erases the file
immediately, but the writing of the actual data is deferred.  This
might be a bug.  If it is a bug, it will be fixed in a future version.

=head2 Autodeferring

C<Tie::File> tries to guess when deferred writing might be helpful,
and to turn it on and off automatically. 

	for (@a) {
	  $_ = "> $_";
	}

In this example, only the first two assignments will be done
immediately; after this, all the changes to the file will be deferred
up to the user-specified memory limit.

You should usually be able to ignore this and just use the module
without thinking about deferring.  However, special applications may
require fine control over which writes are deferred, or may require
that all writes be immediate.  To disable the autodeferment feature,
use

	(tied @o)->autodefer(0);

or

       	tie @array, 'Tie::File', $file, autodefer => 0;


Similarly, C<-E<gt>autodefer(1)> re-enables autodeferment, and 
C<-E<gt>autodefer()> recovers the current value of the autodefer setting.


=head1 CONCURRENT ACCESS TO FILES

Caching and deferred writing are inappropriate if you want the same
file to be accessed simultaneously from more than one process.  Other
optimizations performed internally by this module are also
incompatible with concurrent access.  A future version of this module will
support a C<concurrent =E<gt> 1> option that enables safe concurrent access.

Previous versions of this documentation suggested using C<memory
=E<gt> 0> for safe concurrent access.  This was mistaken.  Tie::File
will not support safe concurrent access before version 0.96.

=head1 CAVEATS

(That's Latin for 'warnings'.)

=over 4

=item *

Reasonable effort was made to make this module efficient.  Nevertheless,
changing the size of a record in the middle of a large file will
always be fairly slow, because everything after the new record must be
moved.

=item *

The behavior of tied arrays is not precisely the same as for regular
arrays.  For example:

	# This DOES print "How unusual!"
	undef $a[10];  print "How unusual!\n" if defined $a[10];

C<undef>-ing a C<Tie::File> array element just blanks out the
corresponding record in the file.  When you read it back again, you'll
get the empty string, so the supposedly-C<undef>'ed value will be
defined.  Similarly, if you have C<autochomp> disabled, then

	# This DOES print "How unusual!" if 'autochomp' is disabled
	undef $a[10];
        print "How unusual!\n" if $a[10];

Because when C<autochomp> is disabled, C<$a[10]> will read back as
C<"\n"> (or whatever the record separator string is.)  

There are other minor differences, particularly regarding C<exists>
and C<delete>, but in general, the correspondence is extremely close.

=item *

I have supposed that since this module is concerned with file I/O,
almost all normal use of it will be heavily I/O bound.  This means
that the time to maintain complicated data structures inside the
module will be dominated by the time to actually perform the I/O.
When there was an opportunity to spend CPU time to avoid doing I/O, I
usually tried to take it.

=item *

You might be tempted to think that deferred writing is like
transactions, with C<flush> as C<commit> and C<discard> as
C<rollback>, but it isn't, so don't.

=item *

There is a large memory overhead for each record offset and for each
cache entry: about 310 bytes per cached data record, and about 21 bytes per offset table entry.

The per-record overhead will limit the maximum number of records you
can access per file. Note that I<accessing> the length of the array
via C<$x = scalar @tied_file> accesses B<all> records and stores their
offsets.  The same for C<foreach (@tied_file)>, even if you exit the
loop early.

=back

=head1 SUBCLASSING

This version promises absolutely nothing about the internals, which
may change without notice.  A future version of the module will have a
well-defined and stable subclassing API.

=head1 WHAT ABOUT C<DB_File>?

People sometimes point out that L<DB_File> will do something similar,
and ask why C<Tie::File> module is necessary.

There are a number of reasons that you might prefer C<Tie::File>.
A list is available at C<http://perl.plover.com/TieFile/why-not-DB_File>.

=head1 AUTHOR

Mark Jason Dominus

To contact the author, send email to: C<mjd-perl-tiefile+@plover.com>

To receive an announcement whenever a new version of this module is
released, send a blank email message to
C<mjd-perl-tiefile-subscribe@plover.com>.

The most recent version of this module, including documentation and
any news of importance, will be available at

	http://perl.plover.com/TieFile/


=head1 LICENSE

C<Tie::File> version 0.96 is copyright (C) 2003 Mark Jason Dominus.

This library is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

These terms are your choice of any of (1) the Perl Artistic Licence,
or (2) version 2 of the GNU General Public License as published by the
Free Software Foundation, or (3) any later version of the GNU General
Public License.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library program; it should be in the file C<COPYING>.
If not, write to the Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, MA  02110-1301, USA

For licensing inquiries, contact the author at:

	Mark Jason Dominus
	255 S. Warnock St.
	Philadelphia, PA 19107

=head1 WARRANTY

C<Tie::File> version 0.98 comes with ABSOLUTELY NO WARRANTY.
For details, see the license.

=head1 THANKS

Gigantic thanks to Jarkko Hietaniemi, for agreeing to put this in the
core when I hadn't written it yet, and for generally being helpful,
supportive, and competent.  (Usually the rule is "choose any one.")
Also big thanks to Abhijit Menon-Sen for all of the same things.

Special thanks to Craig Berry and Peter Prymmer (for VMS portability
help), Randy Kobes (for Win32 portability help), Clinton Pierce and
Autrijus Tang (for heroic eleventh-hour Win32 testing above and beyond
the call of duty), Michael G Schwern (for testing advice), and the
rest of the CPAN testers (for testing generally).

Special thanks to Tels for suggesting several speed and memory
optimizations.

Additional thanks to:
Edward Avis /
Mattia Barbon /
Tom Christiansen /
Gerrit Haase /
Gurusamy Sarathy /
Jarkko Hietaniemi (again) /
Nikola Knezevic /
John Kominetz /
Nick Ing-Simmons /
Tassilo von Parseval /
H. Dieter Pearcey /
Slaven Rezic /
Eric Roode /
Peter Scott /
Peter Somu /
Autrijus Tang (again) /
Tels (again) /
Juerd Waalboer /
Todd Rinaldo

=head1 TODO

More tests.  (Stuff I didn't think of yet.)

Paragraph mode?

Fixed-length mode.  Leave-blanks mode.

Maybe an autolocking mode?

For many common uses of the module, the read cache is a liability.
For example, a program that inserts a single record, or that scans the
file once, will have a cache hit rate of zero.  This suggests a major
optimization: The cache should be initially disabled.  Here's a hybrid
approach: Initially, the cache is disabled, but the cache code
maintains statistics about how high the hit rate would be *if* it were
enabled.  When it sees the hit rate get high enough, it enables
itself.  The STAT comments in this code are the beginning of an
implementation of this.

Record locking with fcntl()?  Then the module might support an undo
log and get real transactions.  What a tour de force that would be.

Keeping track of the highest cached record. This would allow reads-in-a-row
to skip the cache lookup faster (if reading from 1..N with empty cache at
start, the last cached value will be always N-1).

More tests.

=cut

                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/perl/5.20.2/Tie/Handle.pm                                                                 0100644 0000000 0000000 00000010152 12744441327 015127  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::Handle;

use 5.006_001;
our $VERSION = '4.2';

# Tie::StdHandle used to be inside Tie::Handle.  For backwards compatibility
# loading Tie::Handle has to make Tie::StdHandle available.
use Tie::StdHandle;

=head1 NAME

Tie::Handle - base class definitions for tied handles

=head1 SYNOPSIS

    package NewHandle;
    require Tie::Handle;

    @ISA = qw(Tie::Handle);

    sub READ { ... }		# Provide a needed method
    sub TIEHANDLE { ... }	# Overrides inherited method


    package main;

    tie *FH, 'NewHandle';

=head1 DESCRIPTION

This module provides some skeletal methods for handle-tying classes. See
L<perltie> for a list of the functions required in tying a handle to a package.
The basic B<Tie::Handle> package provides a C<new> method, as well as methods
C<TIEHANDLE>, C<PRINT>, C<PRINTF> and C<GETC>. 

For developers wishing to write their own tied-handle classes, the methods
are summarized below. The L<perltie> section not only documents these, but
has sample code as well:

=over 4

=item TIEHANDLE classname, LIST

The method invoked by the command C<tie *glob, classname>. Associates a new
glob instance with the specified class. C<LIST> would represent additional
arguments (along the lines of L<AnyDBM_File> and compatriots) needed to
complete the association.

=item WRITE this, scalar, length, offset

Write I<length> bytes of data from I<scalar> starting at I<offset>.

=item PRINT this, LIST

Print the values in I<LIST>

=item PRINTF this, format, LIST

Print the values in I<LIST> using I<format>

=item READ this, scalar, length, offset

Read I<length> bytes of data into I<scalar> starting at I<offset>.

=item READLINE this

Read a single line

=item GETC this

Get a single character

=item CLOSE this

Close the handle

=item OPEN this, filename

(Re-)open the handle

=item BINMODE this

Specify content is binary

=item EOF this

Test for end of file.

=item TELL this

Return position in the file.

=item SEEK this, offset, whence

Position the file.

Test for end of file.

=item DESTROY this

Free the storage associated with the tied handle referenced by I<this>.
This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.

=back

=head1 MORE INFORMATION

The L<perltie> section contains an example of tying handles.

=head1 COMPATIBILITY

This version of Tie::Handle is neither related to nor compatible with
the Tie::Handle (3.0) module available on CPAN. It was due to an
accident that two modules with the same name appeared. The namespace
clash has been cleared in favor of this module that comes with the
perl core in September 2000 and accordingly the version number has
been bumped up to 4.0.

=cut

use Carp;
use warnings::register;

sub new {
    my $pkg = shift;
    $pkg->TIEHANDLE(@_);
}

# "Grandfather" the new, a la Tie::Hash

sub TIEHANDLE {
    my $pkg = shift;
    if (defined &{"{$pkg}::new"}) {
	warnings::warnif("WARNING: calling ${pkg}->new since ${pkg}->TIEHANDLE is missing");
	$pkg->new(@_);
    }
    else {
	croak "$pkg doesn't define a TIEHANDLE method";
    }
}

sub PRINT {
    my $self = shift;
    if($self->can('WRITE') != \&WRITE) {
	my $buf = join(defined $, ? $, : "",@_);
	$buf .= $\ if defined $\;
	$self->WRITE($buf,length($buf),0);
    }
    else {
	croak ref($self)," doesn't define a PRINT method";
    }
}

sub PRINTF {
    my $self = shift;
    
    if($self->can('WRITE') != \&WRITE) {
	my $buf = sprintf(shift,@_);
	$self->WRITE($buf,length($buf),0);
    }
    else {
	croak ref($self)," doesn't define a PRINTF method";
    }
}

sub READLINE {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a READLINE method";
}

sub GETC {
    my $self = shift;
    
    if($self->can('READ') != \&READ) {
	my $buf;
	$self->READ($buf,1);
	return $buf;
    }
    else {
	croak ref($self)," doesn't define a GETC method";
    }
}

sub READ {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a READ method";
}

sub WRITE {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a WRITE method";
}

sub CLOSE {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a CLOSE method";
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                      usr/share/perl/5.20.2/Tie/Memoize.pm                                                                0100644 0000000 0000000 00000010233 12744441327 015341  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        use strict;
package Tie::Memoize;
use Tie::Hash;
our @ISA = 'Tie::ExtraHash';
our $VERSION = '1.1';

our $exists_token = \undef;

sub croak {require Carp; goto &Carp::croak}

# Format: [0: STORAGE, 1: EXISTS-CACHE, 2: FETCH_function;
#	   3: EXISTS_function, 4: DATA, 5: EXISTS_different ]

sub FETCH {
  my ($h,$key) = ($_[0][0], $_[1]);
  my $res = $h->{$key};
  return $res if defined $res;	# Shortcut if accessible
  return $res if exists $h->{$key}; # Accessible, but undef
  my $cache = $_[0][1]{$key};
  return if defined $cache and not $cache; # Known to not exist
  my @res = $_[0][2]->($key, $_[0][4]);	# Autoload
  $_[0][1]{$key} = 0, return unless @res; # Cache non-existence
  delete $_[0][1]{$key};	# Clear existence cache, not needed any more
  $_[0][0]{$key} = $res[0];	# Store data and return
}

sub EXISTS   {
  my ($a,$key) = (shift, shift);
  return 1 if exists $a->[0]{$key}; # Have data
  my $cache = $a->[1]{$key};
  return $cache if defined $cache; # Existence cache
  my @res = $a->[3]($key,$a->[4]);
  $a->[1]{$key} = 0, return unless @res; # Cache non-existence
  # Now we know it exists
  return ($a->[1]{$key} = 1) if $a->[5]; # Only existence reported
  # Now know the value
  $a->[0]{$key} = $res[0];    # Store data
  return 1
}

sub TIEHASH  {
  croak 'syntax: tie %hash, \'Tie::AutoLoad\', \&fetch_subr' if @_ < 2;
  croak 'syntax: tie %hash, \'Tie::AutoLoad\', \&fetch_subr, $data, \&exists_subr, \%data_cache, \%existence_cache' if @_ > 6;
  push @_, undef if @_ < 3;	# Data
  push @_, $_[1] if @_ < 4;	# exists
  push @_, {} while @_ < 6;	# initial value and caches
  bless [ @_[4,5,1,3,2], $_[1] ne $_[3]], $_[0]
}

1;

=head1 NAME

Tie::Memoize - add data to hash when needed

=head1 SYNOPSIS

  require Tie::Memoize;
  tie %hash, 'Tie::Memoize',
      \&fetch,			# The rest is optional
      $DATA, \&exists,
      {%ini_value}, {%ini_existence};

=head1 DESCRIPTION

This package allows a tied hash to autoload its values on the first access,
and to use the cached value on the following accesses.

Only read-accesses (via fetching the value or C<exists>) result in calls to
the functions; the modify-accesses are performed as on a normal hash.

The required arguments during C<tie> are the hash, the package, and
the reference to the C<FETCH>ing function.  The optional arguments are
an arbitrary scalar $data, the reference to the C<EXISTS> function,
and initial values of the hash and of the existence cache.

Both the C<FETCH>ing function and the C<EXISTS> functions have the
same signature: the arguments are C<$key, $data>; $data is the same
value as given as argument during tie()ing.  Both functions should
return an empty list if the value does not exist.  If C<EXISTS>
function is different from the C<FETCH>ing function, it should return
a TRUE value on success.  The C<FETCH>ing function should return the
intended value if the key is valid.

=head1 Inheriting from B<Tie::Memoize>

The structure of the tied() data is an array reference with elements

  0:  cache of known values
  1:  cache of known existence of keys
  2:  FETCH  function
  3:  EXISTS function
  4:  $data

The rest is for internal usage of this package.  In particular, if
TIEHASH is overwritten, it should call SUPER::TIEHASH.

=head1 EXAMPLE

  sub slurp {
    my ($key, $dir) = shift;
    open my $h, '<', "$dir/$key" or return;
    local $/; <$h>			# slurp it all
  }
  sub exists { my ($key, $dir) = shift; return -f "$dir/$key" }

  tie %hash, 'Tie::Memoize', \&slurp, $directory, \&exists,
      { fake_file1 => $content1, fake_file2 => $content2 },
      { pretend_does_not_exists => 0, known_to_exist => 1 };

This example treats the slightly modified contents of $directory as a
hash.  The modifications are that the keys F<fake_file1> and
F<fake_file2> fetch values $content1 and $content2, and
F<pretend_does_not_exists> will never be accessed.  Additionally, the
existence of F<known_to_exist> is never checked (so if it does not
exists when its content is needed, the user of %hash may be confused).

=head1 BUGS

FIRSTKEY and NEXTKEY methods go through the keys which were already read,
not all the possible keys of the hash.

=head1 AUTHOR

Ilya Zakharevich L<mailto:perl-module-hash-memoize@ilyaz.org>.

=cut

                                                                                                                                                                                                                                                                                                                                                                     usr/share/perl/5.20.2/Tie/RefHash.pm                                                                0100644 0000000 0000000 00000014135 12744441327 015261  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::RefHash;

use vars qw/$VERSION/;

$VERSION = "1.39";

use 5.005;

=head1 NAME

Tie::RefHash - use references as hash keys

=head1 SYNOPSIS

    require 5.004;
    use Tie::RefHash;
    tie HASHVARIABLE, 'Tie::RefHash', LIST;
    tie HASHVARIABLE, 'Tie::RefHash::Nestable', LIST;

    untie HASHVARIABLE;

=head1 DESCRIPTION

This module provides the ability to use references as hash keys if you
first C<tie> the hash variable to this module.  Normally, only the
keys of the tied hash itself are preserved as references; to use
references as keys in hashes-of-hashes, use Tie::RefHash::Nestable,
included as part of Tie::RefHash.

It is implemented using the standard perl TIEHASH interface.  Please
see the C<tie> entry in perlfunc(1) and perltie(1) for more information.

The Nestable version works by looking for hash references being stored
and converting them to tied hashes so that they too can have
references as keys.  This will happen without warning whenever you
store a reference to one of your own hashes in the tied hash.

=head1 EXAMPLE

    use Tie::RefHash;
    tie %h, 'Tie::RefHash';
    $a = [];
    $b = {};
    $c = \*main;
    $d = \"gunk";
    $e = sub { 'foo' };
    %h = ($a => 1, $b => 2, $c => 3, $d => 4, $e => 5);
    $a->[0] = 'foo';
    $b->{foo} = 'bar';
    for (keys %h) {
       print ref($_), "\n";
    }

    tie %h, 'Tie::RefHash::Nestable';
    $h{$a}->{$b} = 1;
    for (keys %h, keys %{$h{$a}}) {
       print ref($_), "\n";
    }

=head1 THREAD SUPPORT

L<Tie::RefHash> fully supports threading using the C<CLONE> method.

=head1 STORABLE SUPPORT

L<Storable> hooks are provided for semantically correct serialization and
cloning of tied refhashes.

=head1 RELIC SUPPORT

This version of Tie::RefHash seems to no longer work with 5.004. This has not
been throughly investigated. Patches welcome ;-)

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself

=head1 MAINTAINER

Yuval Kogman E<lt>nothingmuch@woobling.orgE<gt>

=head1 AUTHOR

Gurusamy Sarathy        gsar@activestate.com

'Nestable' by Ed Avis   ed@membled.com

=head1 SEE ALSO

perl(1), perlfunc(1), perltie(1)

=cut

use Tie::Hash;
use vars '@ISA';
@ISA = qw(Tie::Hash);
use strict;
use Carp qw/croak/;

BEGIN {
  local $@;
  # determine whether we need to take care of threads
  use Config ();
  my $usethreads = $Config::Config{usethreads}; # && exists $INC{"threads.pm"}
  *_HAS_THREADS = $usethreads ? sub () { 1 } : sub () { 0 };
  *_HAS_SCALAR_UTIL = eval { require Scalar::Util; 1 } ? sub () { 1 } : sub () { 0 };
  *_HAS_WEAKEN = defined(&Scalar::Util::weaken) ? sub () { 1 } : sub () { 0 };
}

BEGIN {
  # create a refaddr function

  local $@;

  if ( _HAS_SCALAR_UTIL ) {
    Scalar::Util->import("refaddr");
  } else {
    require overload;

    *refaddr = sub {
      if ( overload::StrVal($_[0]) =~ /\( 0x ([a-zA-Z0-9]+) \)$/x) {
          return $1;
      } else {
        die "couldn't parse StrVal: " . overload::StrVal($_[0]);
      }
    };
  }
}

my (@thread_object_registry, $count); # used by the CLONE method to rehash the keys after their refaddr changed

sub TIEHASH {
  my $c = shift;
  my $s = [];
  bless $s, $c;
  while (@_) {
    $s->STORE(shift, shift);
  }

  if (_HAS_THREADS ) {

    if ( _HAS_WEAKEN ) {
      # remember the object so that we can rekey it on CLONE
      push @thread_object_registry, $s;
      # but make this a weak reference, so that there are no leaks
      Scalar::Util::weaken( $thread_object_registry[-1] );

      if ( ++$count > 1000 ) {
        # this ensures we don't fill up with a huge array dead weakrefs
        @thread_object_registry = grep { defined } @thread_object_registry;
        $count = 0;
      }
    } else {
      $count++; # used in the warning
    }
  }

  return $s;
}

my $storable_format_version = join("/", __PACKAGE__, "0.01");

sub STORABLE_freeze {
  my ( $self, $is_cloning ) = @_;
  my ( $refs, $reg ) = @$self;
  return ( $storable_format_version, [ values %$refs ], $reg || {} );
}

sub STORABLE_thaw {
  my ( $self, $is_cloning, $version, $refs, $reg ) = @_;
  croak "incompatible versions of Tie::RefHash between freeze and thaw"
    unless $version eq $storable_format_version;

  @$self = ( {}, $reg );
  $self->_reindex_keys( $refs );
}

sub CLONE {
  my $pkg = shift;

  if ( $count and not _HAS_WEAKEN ) {
    warn "Tie::RefHash is not threadsafe without Scalar::Util::weaken";
  }

  # when the thread has been cloned all the objects need to be updated.
  # dead weakrefs are undefined, so we filter them out
  @thread_object_registry = grep { defined && do { $_->_reindex_keys; 1 } } @thread_object_registry;
  $count = 0; # we just cleaned up
}

sub _reindex_keys {
  my ( $self, $extra_keys ) = @_;
  # rehash all the ref keys based on their new StrVal
  %{ $self->[0] } = map { refaddr($_->[0]) => $_ } (values(%{ $self->[0] }), @{ $extra_keys || [] });
}

sub FETCH {
  my($s, $k) = @_;
  if (ref $k) {
      my $kstr = refaddr($k);
      if (defined $s->[0]{$kstr}) {
        $s->[0]{$kstr}[1];
      }
      else {
        undef;
      }
  }
  else {
      $s->[1]{$k};
  }
}

sub STORE {
  my($s, $k, $v) = @_;
  if (ref $k) {
    $s->[0]{refaddr($k)} = [$k, $v];
  }
  else {
    $s->[1]{$k} = $v;
  }
  $v;
}

sub DELETE {
  my($s, $k) = @_;
  (ref $k)
    ? (delete($s->[0]{refaddr($k)}) || [])->[1]
    : delete($s->[1]{$k});
}

sub EXISTS {
  my($s, $k) = @_;
  (ref $k) ? exists($s->[0]{refaddr($k)}) : exists($s->[1]{$k});
}

sub FIRSTKEY {
  my $s = shift;
  keys %{$s->[0]};  # reset iterator
  keys %{$s->[1]};  # reset iterator
  $s->[2] = 0;      # flag for iteration, see NEXTKEY
  $s->NEXTKEY;
}

sub NEXTKEY {
  my $s = shift;
  my ($k, $v);
  if (!$s->[2]) {
    if (($k, $v) = each %{$s->[0]}) {
      return $v->[0];
    }
    else {
      $s->[2] = 1;
    }
  }
  return each %{$s->[1]};
}

sub CLEAR {
  my $s = shift;
  $s->[2] = 0;
  %{$s->[0]} = ();
  %{$s->[1]} = ();
}

package Tie::RefHash::Nestable;
use vars '@ISA';
@ISA = 'Tie::RefHash';

sub STORE {
  my($s, $k, $v) = @_;
  if (ref($v) eq 'HASH' and not tied %$v) {
      my @elems = %$v;
      tie %$v, ref($s), @elems;
  }
  $s->SUPER::STORE($k, $v);
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/share/perl/5.20.2/Tie/Scalar.pm                                                                 0100644 0000000 0000000 00000010100 12744441327 015132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::Scalar;

our $VERSION = '1.03';

=head1 NAME

Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars

=head1 SYNOPSIS

    package NewScalar;
    require Tie::Scalar;

    @ISA = qw(Tie::Scalar);

    sub FETCH { ... }		# Provide a needed method
    sub TIESCALAR { ... }	# Overrides inherited method


    package NewStdScalar;
    require Tie::Scalar;

    @ISA = qw(Tie::StdScalar);

    # All methods provided by default, so define
    # only what needs be overridden
    sub FETCH { ... }


    package main;

    tie $new_scalar, 'NewScalar';
    tie $new_std_scalar, 'NewStdScalar';

=head1 DESCRIPTION

This module provides some skeletal methods for scalar-tying classes. See
L<perltie> for a list of the functions required in tying a scalar to a
package. The basic B<Tie::Scalar> package provides a C<new> method, as well
as methods C<TIESCALAR>, C<FETCH> and C<STORE>. The B<Tie::StdScalar>
package provides all the methods specified in  L<perltie>. It inherits from
B<Tie::Scalar> and causes scalars tied to it to behave exactly like the
built-in scalars, allowing for selective overloading of methods. The C<new>
method is provided as a means of grandfathering, for classes that forget to
provide their own C<TIESCALAR> method.

For developers wishing to write their own tied-scalar classes, the methods
are summarized below. The L<perltie> section not only documents these, but
has sample code as well:

=over 4

=item TIESCALAR classname, LIST

The method invoked by the command C<tie $scalar, classname>. Associates a new
scalar instance with the specified class. C<LIST> would represent additional
arguments (along the lines of L<AnyDBM_File> and compatriots) needed to
complete the association.

=item FETCH this

Retrieve the value of the tied scalar referenced by I<this>.

=item STORE this, value

Store data I<value> in the tied scalar referenced by I<this>.

=item DESTROY this

Free the storage associated with the tied scalar referenced by I<this>.
This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.

=back

=head2 Tie::Scalar vs Tie::StdScalar

C<< Tie::Scalar >> provides all the necessary methods, but one should realize
they do not do anything useful. Calling C<< Tie::Scalar::FETCH >> or 
C<< Tie::Scalar::STORE >> results in a (trappable) croak. And if you inherit
from C<< Tie::Scalar >>, you I<must> provide either a C<< new >> or a
C<< TIESCALAR >> method. 

If you are looking for a class that does everything for you you don't
define yourself, use the C<< Tie::StdScalar >> class, not the
C<< Tie::Scalar >> one.

=head1 MORE INFORMATION

The L<perltie> section uses a good example of tying scalars by associating
process IDs with priority.

=cut

use Carp;
use warnings::register;

sub new {
    my $pkg = shift;
    $pkg->TIESCALAR(@_);
}

# "Grandfather" the new, a la Tie::Hash

sub TIESCALAR {
    my $pkg = shift;
    my $pkg_new = $pkg -> can ('new');

    if ($pkg_new and $pkg ne __PACKAGE__) {
        my $my_new = __PACKAGE__ -> can ('new');
        if ($pkg_new == $my_new) {  
            #
            # Prevent recursion
            #
            croak "$pkg must define either a TIESCALAR() or a new() method";
        }

	warnings::warnif ("WARNING: calling ${pkg}->new since " .
                          "${pkg}->TIESCALAR is missing");
	$pkg -> new (@_);
    }
    else {
	croak "$pkg doesn't define a TIESCALAR method";
    }
}

sub FETCH {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a FETCH method";
}

sub STORE {
    my $pkg = ref $_[0];
    croak "$pkg doesn't define a STORE method";
}

#
# The Tie::StdScalar package provides scalars that behave exactly like
# Perl's built-in scalars. Good base to inherit from, if you're only going to
# tweak a small bit.
#
package Tie::StdScalar;
@ISA = qw(Tie::Scalar);

sub TIESCALAR {
    my $class = shift;
    my $instance = shift || undef;
    return bless \$instance => $class;
}

sub FETCH {
    return ${$_[0]};
}

sub STORE {
    ${$_[0]} = $_[1];
}

sub DESTROY {
    undef ${$_[0]};
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/share/perl/5.20.2/Tie/StdHandle.pm                                                              0100644 0000000 0000000 00000002566 12744441327 015614  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::StdHandle; 

use strict;

use Tie::Handle;
use vars qw(@ISA $VERSION);
@ISA = 'Tie::Handle';
$VERSION = '4.4';

=head1 NAME

Tie::StdHandle - base class definitions for tied handles

=head1 SYNOPSIS

    package NewHandle;
    require Tie::Handle;

    @ISA = qw(Tie::Handle);

    sub READ { ... }		# Provide a needed method
    sub TIEHANDLE { ... }	# Overrides inherited method


    package main;

    tie *FH, 'NewHandle';

=head1 DESCRIPTION

The B<Tie::StdHandle> package provide most methods for file handles described
in L<perltie> (the exceptions are C<UNTIE> and C<DESTROY>).  It causes tied
file handles to behave exactly like standard file handles and allow for
selective overwriting of methods.

=cut

sub TIEHANDLE 
{
 my $class = shift;
 my $fh    = \do { local *HANDLE};
 bless $fh,$class;
 $fh->OPEN(@_) if (@_);
 return $fh;
}

sub EOF     { eof($_[0]) }
sub TELL    { tell($_[0]) }
sub FILENO  { fileno($_[0]) }
sub SEEK    { seek($_[0],$_[1],$_[2]) }
sub CLOSE   { close($_[0]) }
sub BINMODE { binmode($_[0]) }

sub OPEN
{
 $_[0]->CLOSE if defined($_[0]->FILENO);
 @_ == 2 ? open($_[0], $_[1]) : open($_[0], $_[1], $_[2]);
}

sub READ     { &CORE::read(shift, \shift, @_) }
sub READLINE { my $fh = $_[0]; <$fh> }
sub GETC     { getc($_[0]) }

sub WRITE
{
 my $fh = $_[0];
 local $\; # don't print any line terminator
 print $fh substr($_[1], $_[3], $_[2]);
}


1;
                                                                                                                                          usr/share/perl/5.20.2/Tie/SubstrHash.pm                                                             0100644 0000000 0000000 00000012434 12744441327 016027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Tie::SubstrHash;

our $VERSION = '1.00';

=head1 NAME

Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing

=head1 SYNOPSIS

    require Tie::SubstrHash;

    tie %myhash, 'Tie::SubstrHash', $key_len, $value_len, $table_size;

=head1 DESCRIPTION

The B<Tie::SubstrHash> package provides a hash-table-like interface to
an array of determinate size, with constant key size and record size.

Upon tying a new hash to this package, the developer must specify the
size of the keys that will be used, the size of the value fields that the
keys will index, and the size of the overall table (in terms of key-value
pairs, not size in hard memory). I<These values will not change for the
duration of the tied hash>. The newly-allocated hash table may now have
data stored and retrieved. Efforts to store more than C<$table_size>
elements will result in a fatal error, as will efforts to store a value
not exactly C<$value_len> characters in length, or reference through a
key not exactly C<$key_len> characters in length. While these constraints
may seem excessive, the result is a hash table using much less internal
memory than an equivalent freely-allocated hash table.

=head1 CAVEATS

Because the current implementation uses the table and key sizes for the
hashing algorithm, there is no means by which to dynamically change the
value of any of the initialization parameters.

The hash does not support exists().

=cut

use Carp;

sub TIEHASH {
    my $pack = shift;
    my ($klen, $vlen, $tsize) = @_;
    my $rlen = 1 + $klen + $vlen;
    $tsize = [$tsize,
	      findgteprime($tsize * 1.1)]; # Allow 10% empty.
    local $self = bless ["\0", $klen, $vlen, $tsize, $rlen, 0, -1];
    $$self[0] x= $rlen * $tsize->[1];
    $self;
}

sub CLEAR {
    local($self) = @_;
    $$self[0] = "\0" x ($$self[4] * $$self[3]->[1]);
    $$self[5] =  0;
    $$self[6] = -1;
}

sub FETCH {
    local($self,$key) = @_;
    local($klen, $vlen, $tsize, $rlen) = @$self[1..4];
    &hashkey;
    for (;;) {
	$offset = $hash * $rlen;
	$record = substr($$self[0], $offset, $rlen);
	if (ord($record) == 0) {
	    return undef;
	}
	elsif (ord($record) == 1) {
	}
	elsif (substr($record, 1, $klen) eq $key) {
	    return substr($record, 1+$klen, $vlen);
	}
	&rehash;
    }
}

sub STORE {
    local($self,$key,$val) = @_;
    local($klen, $vlen, $tsize, $rlen) = @$self[1..4];
    croak("Table is full ($tsize->[0] elements)") if $$self[5] > $tsize->[0];
    croak(qq/Value "$val" is not $vlen characters long/)
	if length($val) != $vlen;
    my $writeoffset;

    &hashkey;
    for (;;) {
	$offset = $hash * $rlen;
	$record = substr($$self[0], $offset, $rlen);
	if (ord($record) == 0) {
	    $record = "\2". $key . $val;
	    die "panic" unless length($record) == $rlen;
	    $writeoffset = $offset unless defined $writeoffset;
	    substr($$self[0], $writeoffset, $rlen) = $record;
	    ++$$self[5];
	    return;
	}
	elsif (ord($record) == 1) {
	    $writeoffset = $offset unless defined $writeoffset;
	}
	elsif (substr($record, 1, $klen) eq $key) {
	    $record = "\2". $key . $val;
	    die "panic" unless length($record) == $rlen;
	    substr($$self[0], $offset, $rlen) = $record;
	    return;
	}
	&rehash;
    }
}

sub DELETE {
    local($self,$key) = @_;
    local($klen, $vlen, $tsize, $rlen) = @$self[1..4];
    &hashkey;
    for (;;) {
	$offset = $hash * $rlen;
	$record = substr($$self[0], $offset, $rlen);
	if (ord($record) == 0) {
	    return undef;
	}
	elsif (ord($record) == 1) {
	}
	elsif (substr($record, 1, $klen) eq $key) {
	    substr($$self[0], $offset, 1) = "\1";
	    return substr($record, 1+$klen, $vlen);
	    --$$self[5];
	}
	&rehash;
    }
}

sub FIRSTKEY {
    local($self) = @_;
    $$self[6] = -1;
    &NEXTKEY;
}

sub NEXTKEY {
    local($self) = @_;
    local($klen, $vlen, $tsize, $rlen, $entries, $iterix) = @$self[1..6];
    for (++$iterix; $iterix < $tsize->[1]; ++$iterix) {
	next unless substr($$self[0], $iterix * $rlen, 1) eq "\2";
	$$self[6] = $iterix;
	return substr($$self[0], $iterix * $rlen + 1, $klen);
    }
    $$self[6] = -1;
    undef;
}

sub EXISTS {
    croak "Tie::SubstrHash does not support exists()";
}

sub hashkey {
    croak(qq/Key "$key" is not $klen characters long/)
	if length($key) != $klen;
    $hash = 2;
    for (unpack('C*', $key)) {
	$hash = $hash * 33 + $_;
	&_hashwrap if $hash >= 1e13;
    }
    &_hashwrap if $hash >= $tsize->[1];
    $hash = 1 unless $hash;
    $hashbase = $hash;
}

sub _hashwrap {
    $hash -= int($hash / $tsize->[1]) * $tsize->[1];
}

sub rehash {
    $hash += $hashbase;
    $hash -= $tsize->[1] if $hash >= $tsize->[1];
}

# using POSIX::ceil() would be too heavy, and not all platforms have it.
sub ceil {
    my $num = shift;
    $num = int($num + 1) unless $num == int $num;
    return $num;
}

# See:
#
# http://www-groups.dcs.st-andrews.ac.uk/~history/HistTopics/Prime_numbers.html
#

sub findgteprime { # find the smallest prime integer greater than or equal to
    use integer;

    my $num = ceil(shift);
    return 2 if $num <= 2;

    $num++ unless $num % 2;
    my $i;
    my $sqrtnum = int sqrt $num;
    my $sqrtnumsquared = $sqrtnum * $sqrtnum;

  NUM:
    for (;; $num += 2) {
	if ($sqrtnumsquared < $num) {
	    $sqrtnum++;
	    $sqrtnumsquared = $sqrtnum * $sqrtnum;
	}
        for ($i = 3; $i <= $sqrtnum; $i += 2) {
            next NUM unless $num % $i;
        }
        return $num;
    }
}

1;
                                                                                                                                                                                                                                    usr/share/perl/5.20.2/Time/                                                                         0040755 0000000 0000000 00000000000 13077704254 013560  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Time/Local.pm                                                                 0100644 0000000 0000000 00000027474 12744441327 015162  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::Local;

require Exporter;
use Carp;
use Config;
use strict;

use vars qw( $VERSION @ISA @EXPORT @EXPORT_OK );
$VERSION   = '1.2300';

@ISA       = qw( Exporter );
@EXPORT    = qw( timegm timelocal );
@EXPORT_OK = qw( timegm_nocheck timelocal_nocheck );

my @MonthDays = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );

# Determine breakpoint for rolling century
my $ThisYear    = ( localtime() )[5];
my $Breakpoint  = ( $ThisYear + 50 ) % 100;
my $NextCentury = $ThisYear - $ThisYear % 100;
$NextCentury += 100 if $Breakpoint < 50;
my $Century = $NextCentury - 100;
my $SecOff  = 0;

my ( %Options, %Cheat );

use constant SECS_PER_MINUTE => 60;
use constant SECS_PER_HOUR   => 3600;
use constant SECS_PER_DAY    => 86400;

my $MaxDay;
if ($] < 5.012000) {
    my $MaxInt;
    if ( $^O eq 'MacOS' ) {
        # time_t is unsigned...
        $MaxInt = ( 1 << ( 8 * $Config{ivsize} ) ) - 1;
    }
    else {
        $MaxInt = ( ( 1 << ( 8 * $Config{ivsize} - 2 ) ) - 1 ) * 2 + 1;
    }

    $MaxDay = int( ( $MaxInt - ( SECS_PER_DAY / 2 ) ) / SECS_PER_DAY ) - 1;
}
else {
    # recent localtime()'s limit is the year 2**31
    $MaxDay = 365 * (2**31);
}

# Determine the EPOC day for this machine
my $Epoc = 0;
if ( $^O eq 'vos' ) {
    # work around posix-977 -- VOS doesn't handle dates in the range
    # 1970-1980.
    $Epoc = _daygm( 0, 0, 0, 1, 0, 70, 4, 0 );
}
elsif ( $^O eq 'MacOS' ) {
    $MaxDay *=2 if $^O eq 'MacOS';  # time_t unsigned ... quick hack?
    # MacOS time() is seconds since 1 Jan 1904, localtime
    # so we need to calculate an offset to apply later
    $Epoc = 693901;
    $SecOff = timelocal( localtime(0)) - timelocal( gmtime(0) ) ;
    $Epoc += _daygm( gmtime(0) );
}
else {
    $Epoc = _daygm( gmtime(0) );
}

%Cheat = ();    # clear the cache as epoc has changed

sub _daygm {

    # This is written in such a byzantine way in order to avoid
    # lexical variables and sub calls, for speed
    return $_[3] + (
        $Cheat{ pack( 'ss', @_[ 4, 5 ] ) } ||= do {
            my $month = ( $_[4] + 10 ) % 12;
            my $year  = $_[5] + 1900 - int($month / 10);

            ( ( 365 * $year )
              + int( $year / 4 )
              - int( $year / 100 )
              + int( $year / 400 )
              + int( ( ( $month * 306 ) + 5 ) / 10 )
            )
            - $Epoc;
        }
    );
}

sub _timegm {
    my $sec =
        $SecOff + $_[0] + ( SECS_PER_MINUTE * $_[1] ) + ( SECS_PER_HOUR * $_[2] );

    return $sec + ( SECS_PER_DAY * &_daygm );
}

sub timegm {
    my ( $sec, $min, $hour, $mday, $month, $year ) = @_;

    if ( $year >= 1000 ) {
        $year -= 1900;
    }
    elsif ( $year < 100 and $year >= 0 ) {
        $year += ( $year > $Breakpoint ) ? $Century : $NextCentury;
    }

    unless ( $Options{no_range_check} ) {
        croak "Month '$month' out of range 0..11"
            if $month > 11
            or $month < 0;

    my $md = $MonthDays[$month];
        ++$md
            if $month == 1 && _is_leap_year( $year + 1900 );

        croak "Day '$mday' out of range 1..$md"  if $mday > $md or $mday < 1;
        croak "Hour '$hour' out of range 0..23"  if $hour > 23  or $hour < 0;
        croak "Minute '$min' out of range 0..59" if $min > 59   or $min < 0;
        croak "Second '$sec' out of range 0..59" if $sec >= 60  or $sec < 0;
    }

    my $days = _daygm( undef, undef, undef, $mday, $month, $year );

    unless ($Options{no_range_check} or abs($days) < $MaxDay) {
        my $msg = '';
        $msg .= "Day too big - $days > $MaxDay\n" if $days > $MaxDay;

        $year += 1900;
        $msg .=  "Cannot handle date ($sec, $min, $hour, $mday, $month, $year)";

        croak $msg;
    }

    return $sec
           + $SecOff
           + ( SECS_PER_MINUTE * $min )
           + ( SECS_PER_HOUR * $hour )
           + ( SECS_PER_DAY * $days );
}

sub _is_leap_year {
    return 0 if $_[0] % 4;
    return 1 if $_[0] % 100;
    return 0 if $_[0] % 400;

    return 1;
}

sub timegm_nocheck {
    local $Options{no_range_check} = 1;
    return &timegm;
}

sub timelocal {
    my $ref_t = &timegm;
    my $loc_for_ref_t = _timegm( localtime($ref_t) );

    my $zone_off = $loc_for_ref_t - $ref_t
        or return $loc_for_ref_t;

    # Adjust for timezone
    my $loc_t = $ref_t - $zone_off;

    # Are we close to a DST change or are we done
    my $dst_off = $ref_t - _timegm( localtime($loc_t) );

    # If this evaluates to true, it means that the value in $loc_t is
    # the _second_ hour after a DST change where the local time moves
    # backward.
    if ( ! $dst_off &&
         ( ( $ref_t - SECS_PER_HOUR ) - _timegm( localtime( $loc_t - SECS_PER_HOUR ) ) < 0 )
       ) {
        return $loc_t - SECS_PER_HOUR;
    }

    # Adjust for DST change
    $loc_t += $dst_off;

    return $loc_t if $dst_off > 0;

    # If the original date was a non-extent gap in a forward DST jump,
    # we should now have the wrong answer - undo the DST adjustment
    my ( $s, $m, $h ) = localtime($loc_t);
    $loc_t -= $dst_off if $s != $_[0] || $m != $_[1] || $h != $_[2];

    return $loc_t;
}

sub timelocal_nocheck {
    local $Options{no_range_check} = 1;
    return &timelocal;
}

1;

__END__

=head1 NAME

Time::Local - efficiently compute time from local and GMT time

=head1 SYNOPSIS

    $time = timelocal( $sec, $min, $hour, $mday, $mon, $year );
    $time = timegm( $sec, $min, $hour, $mday, $mon, $year );

=head1 DESCRIPTION

This module provides functions that are the inverse of built-in perl
functions C<localtime()> and C<gmtime()>. They accept a date as a
six-element array, and return the corresponding C<time(2)> value in
seconds since the system epoch (Midnight, January 1, 1970 GMT on Unix,
for example). This value can be positive or negative, though POSIX
only requires support for positive values, so dates before the
system's epoch may not work on all operating systems.

It is worth drawing particular attention to the expected ranges for
the values provided. The value for the day of the month is the actual
day (ie 1..31), while the month is the number of months since January
(0..11). This is consistent with the values returned from
C<localtime()> and C<gmtime()>.

=head1 FUNCTIONS

=head2 C<timelocal()> and C<timegm()>

This module exports two functions by default, C<timelocal()> and
C<timegm()>.

The C<timelocal()> and C<timegm()> functions perform range checking on
the input $sec, $min, $hour, $mday, and $mon values by default.

=head2 C<timelocal_nocheck()> and C<timegm_nocheck()>

If you are working with data you know to be valid, you can speed your
code up by using the "nocheck" variants, C<timelocal_nocheck()> and
C<timegm_nocheck()>. These variants must be explicitly imported.

    use Time::Local 'timelocal_nocheck';

    # The 365th day of 1999
    print scalar localtime timelocal_nocheck( 0, 0, 0, 365, 0, 99 );

If you supply data which is not valid (month 27, second 1,000) the
results will be unpredictable (so don't do that).

=head2 Year Value Interpretation

Strictly speaking, the year should be specified in a form consistent
with C<localtime()>, i.e. the offset from 1900. In order to make the
interpretation of the year easier for humans, however, who are more
accustomed to seeing years as two-digit or four-digit values, the
following conventions are followed:

=over 4

=item *

Years greater than 999 are interpreted as being the actual year,
rather than the offset from 1900. Thus, 1964 would indicate the year
Martin Luther King won the Nobel prize, not the year 3864.

=item *

Years in the range 100..999 are interpreted as offset from 1900, so
that 112 indicates 2012. This rule also applies to years less than
zero (but see note below regarding date range).

=item *

Years in the range 0..99 are interpreted as shorthand for years in the
rolling "current century," defined as 50 years on either side of the
current year. Thus, today, in 1999, 0 would refer to 2000, and 45 to
2045, but 55 would refer to 1955. Twenty years from now, 55 would
instead refer to 2055. This is messy, but matches the way people
currently think about two digit dates. Whenever possible, use an
absolute four digit year instead.

=back

The scheme above allows interpretation of a wide range of dates,
particularly if 4-digit years are used.

=head2 Limits of time_t

On perl versions older than 5.12.0, the range of dates that can be
actually be handled depends on the size of C<time_t> (usually a signed
integer) on the given platform. Currently, this is 32 bits for most
systems, yielding an approximate range from Dec 1901 to Jan 2038.

Both C<timelocal()> and C<timegm()> croak if given dates outside the
supported range.

As of version 5.12.0, perl has stopped using the underlying time
library of the operating system it's running on and has its own
implementation of those routines with a safe range of at least
+/ 2**52 (about 142 million years).

=head2 Ambiguous Local Times (DST)

Because of DST changes, there are many time zones where the same local
time occurs for two different GMT times on the same day. For example,
in the "Europe/Paris" time zone, the local time of 2001-10-28 02:30:00
can represent either 2001-10-28 00:30:00 GMT, B<or> 2001-10-28
01:30:00 GMT.

When given an ambiguous local time, the timelocal() function should
always return the epoch for the I<earlier> of the two possible GMT
times.

=head2 Non-Existent Local Times (DST)

When a DST change causes a locale clock to skip one hour forward,
there will be an hour's worth of local times that don't exist. Again,
for the "Europe/Paris" time zone, the local clock jumped from
2001-03-25 01:59:59 to 2001-03-25 03:00:00.

If the C<timelocal()> function is given a non-existent local time, it
will simply return an epoch value for the time one hour later.

=head2 Negative Epoch Values

On perl version 5.12.0 and newer, negative epoch values are fully
supported.

On older versions of perl, negative epoch (C<time_t>) values, which
are not officially supported by the POSIX standards, are known not to
work on some systems. These include MacOS (pre-OSX) and Win32.

On systems which do support negative epoch values, this module should
be able to cope with dates before the start of the epoch, down the
minimum value of time_t for the system.

=head1 IMPLEMENTATION

These routines are quite efficient and yet are always guaranteed to
agree with C<localtime()> and C<gmtime()>. We manage this by caching
the start times of any months we've seen before. If we know the start
time of the month, we can always calculate any time within the month.
The start times are calculated using a mathematical formula. Unlike
other algorithms that do multiple calls to C<gmtime()>.

The C<timelocal()> function is implemented using the same cache. We
just assume that we're translating a GMT time, and then fudge it when
we're done for the timezone and daylight savings arguments. Note that
the timezone is evaluated for each date because countries occasionally
change their official timezones. Assuming that C<localtime()> corrects
for these changes, this routine will also be correct.

=head1 BUGS

The whole scheme for interpreting two-digit years can be considered a
bug.

=head1 SUPPORT

Support for this module is provided via the datetime@perl.org email
list. See http://lists.perl.org/ for more details.

Please submit bugs to the CPAN RT system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local or via email
at bug-time-local@rt.cpan.org.

=head1 COPYRIGHT

Copyright (c) 1997-2003 Graham Barr, 2003-2007 David Rolsky.  All
rights reserved.  This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the LICENSE file included
with this module.

=head1 AUTHOR

This module is based on a Perl 4 library, timelocal.pl, that was
included with Perl 4.036, and was most likely written by Tom
Christiansen.

The current version was written by Graham Barr.

It is now being maintained separately from the Perl core by Dave
Rolsky, <autarch@urth.org>.

=cut
                                                                                                                                                                                                    usr/share/perl/5.20.2/Time/gmtime.pm                                                                0100644 0000000 0000000 00000004745 12744441327 015406  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::gmtime;
use strict;
use 5.006_001;

use Time::tm;

our(@ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS, $VERSION);
BEGIN { 
    use Exporter   ();
    @ISA         = qw(Exporter Time::tm);
    @EXPORT      = qw(gmtime gmctime);
    @EXPORT_OK   = qw(  
			$tm_sec $tm_min $tm_hour $tm_mday 
			$tm_mon $tm_year $tm_wday $tm_yday 
			$tm_isdst
		    );
    %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );
    $VERSION     = 1.03;
}
use vars      @EXPORT_OK;

sub populate (@) {
    return unless @_;
    my $tmob = Time::tm->new();
    @$tmob = (
		$tm_sec, $tm_min, $tm_hour, $tm_mday, 
		$tm_mon, $tm_year, $tm_wday, $tm_yday, 
		$tm_isdst )
	    = @_;
    return $tmob;
} 

sub gmtime (;$)    { populate CORE::gmtime(@_ ? shift : time)}
sub gmctime (;$)   { scalar   CORE::gmtime(@_ ? shift : time)} 

1;
__END__

=head1 NAME

Time::gmtime - by-name interface to Perl's built-in gmtime() function

=head1 SYNOPSIS

 use Time::gmtime;
 $gm = gmtime();
 printf "The day in Greenwich is %s\n", 
    (qw(Sun Mon Tue Wed Thu Fri Sat Sun))[ $gm->wday() ];

 use Time::gmtime qw(:FIELDS);
 gmtime();
 printf "The day in Greenwich is %s\n", 
    (qw(Sun Mon Tue Wed Thu Fri Sat Sun))[ $tm_wday ];

 $now = gmctime();

 use Time::gmtime;
 use File::stat;
 $date_string = gmctime(stat($file)->mtime);

=head1 DESCRIPTION

This module's default exports override the core gmtime() function,
replacing it with a version that returns "Time::tm" objects.
This object has methods that return the similarly named structure field
name from the C's tm structure from F<time.h>; namely sec, min, hour,
mday, mon, year, wday, yday, and isdst.

You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this
still overrides your core functions.)  Access these fields as variables
named with a preceding C<tm_> in front their method names.  Thus,
C<$tm_obj-E<gt>mday()> corresponds to $tm_mday if you import the fields.

The gmctime() function provides a way of getting at the 
scalar sense of the original CORE::gmtime() function.

To access this functionality without the core overrides,
pass the C<use> an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the C<CORE::> pseudo-package.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen
                           usr/share/perl/5.20.2/Time/localtime.pm                                                             0100644 0000000 0000000 00000004456 12744441327 016074  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::localtime;
use strict;
use 5.006_001;

use Time::tm;

our(@ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS, $VERSION);
BEGIN {
    use Exporter   ();
    @ISA         = qw(Exporter Time::tm);
    @EXPORT      = qw(localtime ctime);
    @EXPORT_OK   = qw(  
			$tm_sec $tm_min $tm_hour $tm_mday 
			$tm_mon $tm_year $tm_wday $tm_yday 
			$tm_isdst
		    );
    %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );
    $VERSION     = 1.02;
}
use vars      @EXPORT_OK;

sub populate (@) {
    return unless @_;
    my $tmob = Time::tm->new();
    @$tmob = (
		$tm_sec, $tm_min, $tm_hour, $tm_mday, 
		$tm_mon, $tm_year, $tm_wday, $tm_yday, 
		$tm_isdst )
	    = @_;
    return $tmob;
} 

sub localtime (;$) { populate CORE::localtime(@_ ? shift : time)}
sub ctime (;$)     { scalar   CORE::localtime(@_ ? shift : time) } 

1;

__END__

=head1 NAME

Time::localtime - by-name interface to Perl's built-in localtime() function

=head1 SYNOPSIS

 use Time::localtime;
 printf "Year is %d\n", localtime->year() + 1900;

 $now = ctime();

 use Time::localtime;
 use File::stat;
 $date_string = ctime(stat($file)->mtime);

=head1 DESCRIPTION

This module's default exports override the core localtime() function,
replacing it with a version that returns "Time::tm" objects.
This object has methods that return the similarly named structure field
name from the C's tm structure from F<time.h>; namely sec, min, hour,
mday, mon, year, wday, yday, and isdst.

You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as
variables named with a preceding C<tm_> in front their method names.
Thus, C<$tm_obj-E<gt>mday()> corresponds to $tm_mday if you import
the fields.

The ctime() function provides a way of getting at the 
scalar sense of the original CORE::localtime() function.

To access this functionality without the core overrides,
pass the C<use> an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the C<CORE::> pseudo-package.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen
                                                                                                                                                                                                                  usr/share/perl/5.20.2/Time/tm.pm                                                                    0100644 0000000 0000000 00000001263 12744441327 014534  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::tm;
use strict;

our $VERSION = '1.00';

use Class::Struct qw(struct);
struct('Time::tm' => [
     map { $_ => '$' } qw{ sec min hour mday mon year wday yday isdst }
]);

1;
__END__

=head1 NAME

Time::tm - internal object used by Time::gmtime and Time::localtime

=head1 SYNOPSIS

Don't use this module directly.

=head1 DESCRIPTION

This module is used internally as a base class by Time::localtime And
Time::gmtime functions.  It creates a Time::tm struct object which is
addressable just like's C's tm structure from F<time.h>; namely with sec,
min, hour, mday, mon, year, wday, yday, and isdst.

This class is an internal interface only. 

=head1 AUTHOR

Tom Christiansen
                                                                                                                                                                                                                                                                                                                                             usr/share/perl/5.20.2/UNIVERSAL.pm                                                                  0100644 0000000 0000000 00000015736 12744441327 014600  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package UNIVERSAL;

our $VERSION = '1.11';

# UNIVERSAL should not contain any extra subs/methods beyond those
# that it exists to define. The use of Exporter below is a historical
# accident that can't be fixed without breaking code.  Note that we
# *don't* set @ISA here, as we don't want all classes/objects inheriting from
# Exporter.  It's bad enough that all classes have a import() method
# whenever UNIVERSAL.pm is loaded.
require Exporter;
@EXPORT_OK = qw(isa can VERSION);

# Make sure that even though the import method is called, it doesn't do
# anything unless called on UNIVERSAL.
sub import {
    return unless $_[0] eq __PACKAGE__;
    return unless @_ > 1;
    require warnings;
    warnings::warnif(
      'deprecated',
      'UNIVERSAL->import is deprecated and will be removed in a future perl',
    );
    goto &Exporter::import;
}

1;
__END__

=head1 NAME

UNIVERSAL - base class for ALL classes (blessed references)

=head1 SYNOPSIS

    $is_io    = $fd->isa("IO::Handle");
    $is_io    = Class->isa("IO::Handle");

    $does_log = $obj->DOES("Logger");
    $does_log = Class->DOES("Logger");

    $sub      = $obj->can("print");
    $sub      = Class->can("print");

    $sub      = eval { $ref->can("fandango") };
    $ver      = $obj->VERSION;

    # but never do this!
    $is_io    = UNIVERSAL::isa($fd, "IO::Handle");
    $sub      = UNIVERSAL::can($obj, "print");

=head1 DESCRIPTION

C<UNIVERSAL> is the base class from which all blessed references inherit.
See L<perlobj>.

C<UNIVERSAL> provides the following methods:

=over 4

=item C<< $obj->isa( TYPE ) >>

=item C<< CLASS->isa( TYPE ) >>

=item C<< eval { VAL->isa( TYPE ) } >>

Where

=over 4

=item C<TYPE>

is a package name

=item C<$obj>

is a blessed reference or a package name

=item C<CLASS>

is a package name

=item C<VAL>

is any of the above or an unblessed reference

=back

When used as an instance or class method (C<< $obj->isa( TYPE ) >>),
C<isa> returns I<true> if $obj is blessed into package C<TYPE> or
inherits from package C<TYPE>.

When used as a class method (C<< CLASS->isa( TYPE ) >>, sometimes
referred to as a static method), C<isa> returns I<true> if C<CLASS>
inherits from (or is itself) the name of the package C<TYPE> or
inherits from package C<TYPE>.

If you're not sure what you have (the C<VAL> case), wrap the method call in an
C<eval> block to catch the exception if C<VAL> is undefined.

If you want to be sure that you're calling C<isa> as a method, not a class,
check the invocand with C<blessed> from L<Scalar::Util> first:

  use Scalar::Util 'blessed';

  if ( blessed( $obj ) && $obj->isa("Some::Class") ) {
      ...
  }

=item C<< $obj->DOES( ROLE ) >>

=item C<< CLASS->DOES( ROLE ) >>

C<DOES> checks if the object or class performs the role C<ROLE>.  A role is a
named group of specific behavior (often methods of particular names and
signatures), similar to a class, but not necessarily a complete class by
itself.  For example, logging or serialization may be roles.

C<DOES> and C<isa> are similar, in that if either is true, you know that the
object or class on which you call the method can perform specific behavior.
However, C<DOES> is different from C<isa> in that it does not care I<how> the
invocand performs the operations, merely that it does.  (C<isa> of course
mandates an inheritance relationship.  Other relationships include aggregation,
delegation, and mocking.)

By default, classes in Perl only perform the C<UNIVERSAL> role, as well as the
role of all classes in their inheritance.  In other words, by default C<DOES>
responds identically to C<isa>.

There is a relationship between roles and classes, as each class implies the
existence of a role of the same name.  There is also a relationship between
inheritance and roles, in that a subclass that inherits from an ancestor class
implicitly performs any roles its parent performs.  Thus you can use C<DOES> in
place of C<isa> safely, as it will return true in all places where C<isa> will
return true (provided that any overridden C<DOES> I<and> C<isa> methods behave
appropriately).

=item C<< $obj->can( METHOD ) >>

=item C<< CLASS->can( METHOD ) >>

=item C<< eval { VAL->can( METHOD ) } >>

C<can> checks if the object or class has a method called C<METHOD>. If it does,
then it returns a reference to the sub.  If it does not, then it returns
I<undef>.  This includes methods inherited or imported by C<$obj>, C<CLASS>, or
C<VAL>.

C<can> cannot know whether an object will be able to provide a method through
AUTOLOAD (unless the object's class has overridden C<can> appropriately), so a
return value of I<undef> does not necessarily mean the object will not be able
to handle the method call. To get around this some module authors use a forward
declaration (see L<perlsub>) for methods they will handle via AUTOLOAD. For
such 'dummy' subs, C<can> will still return a code reference, which, when
called, will fall through to the AUTOLOAD. If no suitable AUTOLOAD is provided,
calling the coderef will cause an error.

You may call C<can> as a class (static) method or an object method.

Again, the same rule about having a valid invocand applies -- use an C<eval>
block or C<blessed> if you need to be extra paranoid.

=item C<VERSION ( [ REQUIRE ] )>

C<VERSION> will return the value of the variable C<$VERSION> in the
package the object is blessed into. If C<REQUIRE> is given then
it will do a comparison and die if the package version is not
greater than or equal to C<REQUIRE>, or if either C<$VERSION> or C<REQUIRE>
is not a "lax" version number (as defined by the L<version> module).

The return from C<VERSION> will actually be the stringified version object
using the package C<$VERSION> scalar, which is guaranteed to be equivalent
but may not be precisely the contents of the C<$VERSION> scalar.  If you want
the actual contents of C<$VERSION>, use C<$CLASS::VERSION> instead.

C<VERSION> can be called as either a class (static) method or an object
method.

=back

=head1 WARNINGS

B<NOTE:> C<can> directly uses Perl's internal code for method lookup, and
C<isa> uses a very similar method and cache-ing strategy. This may cause
strange effects if the Perl code dynamically changes @ISA in any package.

You may add other methods to the UNIVERSAL class via Perl or XS code.
You do not need to C<use UNIVERSAL> to make these methods
available to your program (and you should not do so).

=head1 EXPORTS

None by default.

You may request the import of three functions (C<isa>, C<can>, and C<VERSION>),
B<but this feature is deprecated and will be removed>.  Please don't do this in
new code.

For example, previous versions of this documentation suggested using C<isa> as
a function to determine the type of a reference:

  use UNIVERSAL 'isa';

  $yes = isa $h, "HASH";
  $yes = isa "Foo", "Bar";

The problem is that this code will I<never> call an overridden C<isa> method in
any class.  Instead, use C<reftype> from L<Scalar::Util> for the first case:

  use Scalar::Util 'reftype';

  $yes = reftype( $h ) eq "HASH";

and the method form of C<isa> for the second:

  $yes = Foo->isa("Bar");

=cut
                                  usr/share/perl/5.20.2/Unicode/                                                                      0040755 0000000 0000000 00000000000 13077704254 014250  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Unicode/Collate/                                                              0040755 0000000 0000000 00000000000 13077704254 015633  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Unicode/Collate/CJK/                                                          0040755 0000000 0000000 00000000000 13077704254 016242  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Unicode/Collate/CJK/Big5.pm                                                   0100644 0000000 0000000 00000201626 12744441327 017371  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Big5;

use 5.006;
use strict;

our $VERSION = '0.65';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt;
	$wt++;
    }
}

sub weightBig5 {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
5159 515B 515E 515D 5161 5163 55E7 74E9 7CCE 4E00
4E59 4E01 4E03 4E43 4E5D 4E86 4E8C 4EBA 513F 5165
516B 51E0 5200 5201 529B 5315 5341 535C 53C8 4E09
4E0B 4E08 4E0A 4E2B 4E38 51E1 4E45 4E48 4E5F 4E5E
4E8E 4EA1 5140 5203 52FA 5343 53C9 53E3 571F 58EB
5915 5927 5973 5B50 5B51 5B53 5BF8 5C0F 5C22 5C38
5C71 5DDD 5DE5 5DF1 5DF2 5DF3 5DFE 5E72 5EFE 5F0B
5F13 624D 4E11 4E10 4E0D 4E2D 4E30 4E39 4E4B 5C39
4E88 4E91 4E95 4E92 4E94 4EA2 4EC1 4EC0 4EC3 4EC6
4EC7 4ECD 4ECA 4ECB 4EC4 5143 5141 5167 516D 516E
516C 5197 51F6 5206 5207 5208 52FB 52FE 52FF 5316
5339 5348 5347 5345 535E 5384 53CB 53CA 53CD 58EC
5929 592B 592A 592D 5B54 5C11 5C24 5C3A 5C6F 5DF4
5E7B 5EFF 5F14 5F15 5FC3 6208 6236 624B 624E 652F
6587 6597 65A4 65B9 65E5 66F0 6708 6728 6B20 6B62
6B79 6BCB 6BD4 6BDB 6C0F 6C34 706B 722A 7236 723B
7247 7259 725B 72AC 738B 4E19 4E16 4E15 4E14 4E18
4E3B 4E4D 4E4F 4E4E 4EE5 4ED8 4ED4 4ED5 4ED6 4ED7
4EE3 4EE4 4ED9 4EDE 5145 5144 5189 518A 51AC 51F9
51FA 51F8 520A 52A0 529F 5305 5306 5317 531D 4EDF
534A 5349 5361 5360 536F 536E 53BB 53EF 53E4 53F3
53EC 53EE 53E9 53E8 53FC 53F8 53F5 53EB 53E6 53EA
53F2 53F1 53F0 53E5 53ED 53FB 56DB 56DA 5916 592E
5931 5974 5976 5B55 5B83 5C3C 5DE8 5DE7 5DE6 5E02
5E03 5E73 5E7C 5F01 5F18 5F17 5FC5 620A 6253 6254
6252 6251 65A5 65E6 672E 672C 672A 672B 672D 6B63
6BCD 6C11 6C10 6C38 6C41 6C40 6C3E 72AF 7384 7389
74DC 74E6 7518 751F 7528 7529 7530 7531 7532 7533
758B 767D 76AE 76BF 76EE 77DB 77E2 77F3 793A 79BE
7A74 7ACB 4E1E 4E1F 4E52 4E53 4E69 4E99 4EA4 4EA6
4EA5 4EFF 4F09 4F19 4F0A 4F15 4F0D 4F10 4F11 4F0F
4EF2 4EF6 4EFB 4EF0 4EF3 4EFD 4F01 4F0B 5149 5147
5146 5148 5168 5171 518D 51B0 5217 5211 5212 520E
5216 52A3 5308 5321 5320 5370 5371 5409 540F 540C
540A 5410 5401 540B 5404 5411 540D 5408 5403 540E
5406 5412 56E0 56DE 56DD 5733 5730 5728 572D 572C
572F 5729 5919 591A 5937 5938 5984 5978 5983 597D
5979 5982 5981 5B57 5B58 5B87 5B88 5B85 5B89 5BFA
5C16 5C79 5DDE 5E06 5E76 5E74 5F0F 5F1B 5FD9 5FD6
620E 620C 620D 6210 6263 625B 6258 6536 65E9 65E8
65EC 65ED 66F2 66F3 6709 673D 6734 6731 6735 6B21
6B64 6B7B 6C16 6C5D 6C57 6C59 6C5F 6C60 6C50 6C55
6C61 6C5B 6C4D 6C4E 7070 725F 725D 767E 7AF9 7C73
7CF8 7F36 7F8A 7FBD 8001 8003 800C 8012 8033 807F
8089 808B 808C 81E3 81EA 81F3 81FC 820C 821B 821F
826E 8272 827E 866B 8840 884C 8863 897F 9621 4E32
4EA8 4F4D 4F4F 4F47 4F57 4F5E 4F34 4F5B 4F55 4F30
4F50 4F51 4F3D 4F3A 4F38 4F43 4F54 4F3C 4F46 4F63
4F5C 4F60 4F2F 4F4E 4F36 4F59 4F5D 4F48 4F5A 514C
514B 514D 5175 51B6 51B7 5225 5224 5229 522A 5228
52AB 52A9 52AA 52AC 5323 5373 5375 541D 542D 541E
543E 5426 544E 5427 5446 5443 5433 5448 5442 541B
5429 544A 5439 543B 5438 542E 5435 5436 5420 543C
5440 5431 542B 541F 542C 56EA 56F0 56E4 56EB 574A
5751 5740 574D 5747 574E 573E 5750 574F 573B 58EF
593E 599D 5992 59A8 599E 59A3 5999 5996 598D 59A4
5993 598A 59A5 5B5D 5B5C 5B5A 5B5B 5B8C 5B8B 5B8F
5C2C 5C40 5C41 5C3F 5C3E 5C90 5C91 5C94 5C8C 5DEB
5E0C 5E8F 5E87 5E8A 5EF7 5F04 5F1F 5F64 5F62 5F77
5F79 5FD8 5FCC 5FD7 5FCD 5FF1 5FEB 5FF8 5FEA 6212
6211 6284 6297 6296 6280 6276 6289 626D 628A 627C
627E 6279 6273 6292 626F 6298 626E 6295 6293 6291
6286 6539 653B 6538 65F1 66F4 675F 674E 674F 6750
6751 675C 6756 675E 6749 6746 6760 6753 6757 6B65
6BCF 6C42 6C5E 6C99 6C81 6C88 6C89 6C85 6C9B 6C6A
6C7A 6C90 6C70 6C8C 6C68 6C96 6C92 6C7D 6C83 6C72
6C7E 6C74 6C86 6C76 6C8D 6C94 6C98 6C82 7076 707C
707D 7078 7262 7261 7260 72C4 72C2 7396 752C 752B
7537 7538 7682 76EF 77E3 79C1 79C0 79BF 7A76 7CFB
7F55 8096 8093 809D 8098 809B 809A 80B2 826F 8292
828B 828D 898B 89D2 8A00 8C37 8C46 8C55 8C9D 8D64
8D70 8DB3 8EAB 8ECA 8F9B 8FB0 8FC2 8FC6 8FC5 8FC4
5DE1 9091 90A2 90AA 90A6 90A3 9149 91C6 91CC 9632
962E 9631 962A 962C 4E26 4E56 4E73 4E8B 4E9B 4E9E
4EAB 4EAC 4F6F 4F9D 4F8D 4F73 4F7F 4F6C 4F9B 4F8B
4F86 4F83 4F70 4F75 4F88 4F69 4F7B 4F96 4F7E 4F8F
4F91 4F7A 5154 5152 5155 5169 5177 5176 5178 51BD
51FD 523B 5238 5237 523A 5230 522E 5236 5241 52BE
52BB 5352 5354 5353 5351 5366 5377 5378 5379 53D6
53D4 53D7 5473 5475 5496 5478 5495 5480 547B 5477
5484 5492 5486 547C 5490 5471 5476 548C 549A 5462
5468 548B 547D 548E 56FA 5783 5777 576A 5769 5761
5766 5764 577C 591C 5949 5947 5948 5944 5954 59BE
59BB 59D4 59B9 59AE 59D1 59C6 59D0 59CD 59CB 59D3
59CA 59AF 59B3 59D2 59C5 5B5F 5B64 5B63 5B97 5B9A
5B98 5B9C 5B99 5B9B 5C1A 5C48 5C45 5C46 5CB7 5CA1
5CB8 5CA9 5CAB 5CB1 5CB3 5E18 5E1A 5E16 5E15 5E1B
5E11 5E78 5E9A 5E97 5E9C 5E95 5E96 5EF6 5F26 5F27
5F29 5F80 5F81 5F7F 5F7C 5FDD 5FE0 5FFD 5FF5 5FFF
600F 6014 602F 6035 6016 602A 6015 6021 6027 6029
602B 601B 6216 6215 623F 623E 6240 627F 62C9 62CC
62C4 62BF 62C2 62B9 62D2 62DB 62AB 62D3 62D4 62CB
62C8 62A8 62BD 62BC 62D0 62D9 62C7 62CD 62B5 62DA
62B1 62D8 62D6 62D7 62C6 62AC 62CE 653E 65A7 65BC
65FA 6614 6613 660C 6606 6602 660E 6600 660F 6615
660A 6607 670D 670B 676D 678B 6795 6771 679C 6773
6777 6787 679D 6797 676F 6770 677F 6789 677E 6790
6775 679A 6793 677C 676A 6772 6B23 6B66 6B67 6B7F
6C13 6C1B 6CE3 6CE8 6CF3 6CB1 6CCC 6CE5 6CB3 6CBD
6CBE 6CBC 6CE2 6CAB 6CD5 6CD3 6CB8 6CC4 6CB9 6CC1
6CAE 6CD7 6CC5 6CF1 6CBF 6CBB 6CE1 6CDB 6CCA 6CAC
6CEF 6CDC 6CD6 6CE0 7095 708E 7092 708A 7099 722C
722D 7238 7248 7267 7269 72C0 72CE 72D9 72D7 72D0
73A9 73A8 739F 73AB 73A5 753D 759D 7599 759A 7684
76C2 76F2 76F4 77E5 77FD 793E 7940 7941 79C9 79C8
7A7A 7A79 7AFA 7CFE 7F54 7F8C 7F8B 8005 80BA 80A5
80A2 80B1 80A1 80AB 80A9 80B4 80AA 80AF 81E5 81FE
820D 82B3 829D 8299 82AD 82BD 829F 82B9 82B1 82AC
82A5 82AF 82B8 82A3 82B0 82BE 82B7 864E 8671 521D
8868 8ECB 8FCE 8FD4 8FD1 90B5 90B8 90B1 90B6 91C7
91D1 9577 9580 961C 9640 963F 963B 9644 9642 96B9
96E8 9752 975E 4E9F 4EAD 4EAE 4FE1 4FB5 4FAF 4FBF
4FE0 4FD1 4FCF 4FDD 4FC3 4FB6 4FD8 4FDF 4FCA 4FD7
4FAE 4FD0 4FC4 4FC2 4FDA 4FCE 4FDE 4FB7 5157 5192
5191 51A0 524E 5243 524A 524D 524C 524B 5247 52C7
52C9 52C3 52C1 530D 5357 537B 539A 53DB 54AC 54C0
54A8 54CE 54C9 54B8 54A6 54B3 54C7 54C2 54BD 54AA
54C1 54C4 54C8 54AF 54AB 54B1 54BB 54A9 54A7 54BF
56FF 5782 578B 57A0 57A3 57A2 57CE 57AE 5793 5955
5951 594F 594E 5950 59DC 59D8 59FF 59E3 59E8 5A03
59E5 59EA 59DA 59E6 5A01 59FB 5B69 5BA3 5BA6 5BA4
5BA2 5BA5 5C01 5C4E 5C4F 5C4D 5C4B 5CD9 5CD2 5DF7
5E1D 5E25 5E1F 5E7D 5EA0 5EA6 5EFA 5F08 5F2D 5F65
5F88 5F85 5F8A 5F8B 5F87 5F8C 5F89 6012 601D 6020
6025 600E 6028 604D 6070 6068 6062 6046 6043 606C
606B 606A 6064 6241 62DC 6316 6309 62FC 62ED 6301
62EE 62FD 6307 62F1 62F7 62EF 62EC 62FE 62F4 6311
6302 653F 6545 65AB 65BD 65E2 6625 662D 6620 6627
662F 661F 6628 6631 6624 66F7 67FF 67D3 67F1 67D4
67D0 67EC 67B6 67AF 67F5 67E9 67EF 67C4 67D1 67B4
67DA 67E5 67B8 67CF 67DE 67F3 67B0 67D9 67E2 67DD
67D2 6B6A 6B83 6B86 6BB5 6BD2 6BD7 6C1F 6CC9 6D0B
6D32 6D2A 6D41 6D25 6D0C 6D31 6D1E 6D17 6D3B 6D3D
6D3E 6D36 6D1B 6CF5 6D39 6D27 6D38 6D29 6D2E 6D35
6D0E 6D2B 70AB 70BA 70B3 70AC 70AF 70AD 70B8 70AE
70A4 7230 7272 726F 7274 72E9 72E0 72E1 73B7 73CA
73BB 73B2 73CD 73C0 73B3 751A 752D 754F 754C 754E
754B 75AB 75A4 75A5 75A2 75A3 7678 7686 7687 7688
76C8 76C6 76C3 76C5 7701 76F9 76F8 7709 770B 76FE
76FC 7707 77DC 7802 7814 780C 780D 7946 7949 7948
7947 79B9 79BA 79D1 79D2 79CB 7A7F 7A81 7AFF 7AFD
7C7D 7D02 7D05 7D00 7D09 7D07 7D04 7D06 7F38 7F8E
7FBF 8004 8010 800D 8011 8036 80D6 80E5 80DA 80C3
80C4 80CC 80E1 80DB 80CE 80DE 80E4 80DD 81F4 8222
82E7 8303 8305 82E3 82DB 82E6 8304 82E5 8302 8309
82D2 82D7 82F1 8301 82DC 82D4 82D1 82DE 82D3 82DF
82EF 8306 8650 8679 867B 867A 884D 886B 8981 89D4
8A08 8A02 8A03 8C9E 8CA0 8D74 8D73 8DB4 8ECD 8ECC
8FF0 8FE6 8FE2 8FEA 8FE5 8FED 8FEB 8FE4 8FE8 90CA
90CE 90C1 90C3 914B 914A 91CD 9582 9650 964B 964C
964D 9762 9769 97CB 97ED 97F3 9801 98A8 98DB 98DF
9996 9999 4E58 4EB3 500C 500D 5023 4FEF 5026 5025
4FF8 5029 5016 5006 503C 501F 501A 5012 5011 4FFA
5000 5014 5028 4FF1 5021 500B 5019 5018 4FF3 4FEE
502D 502A 4FFE 502B 5009 517C 51A4 51A5 51A2 51CD
51CC 51C6 51CB 5256 525C 5254 525B 525D 532A 537F
539F 539D 53DF 54E8 5510 5501 5537 54FC 54E5 54F2
5506 54FA 5514 54E9 54ED 54E1 5509 54EE 54EA 54E6
5527 5507 54FD 550F 5703 5704 57C2 57D4 57CB 57C3
5809 590F 5957 5958 595A 5A11 5A18 5A1C 5A1F 5A1B
5A13 59EC 5A20 5A23 5A29 5A25 5A0C 5A09 5B6B 5C58
5BB0 5BB3 5BB6 5BB4 5BAE 5BB5 5BB9 5BB8 5C04 5C51
5C55 5C50 5CED 5CFD 5CFB 5CEA 5CE8 5CF0 5CF6 5D01
5CF4 5DEE 5E2D 5E2B 5EAB 5EAD 5EA7 5F31 5F92 5F91
5F90 6059 6063 6065 6050 6055 606D 6069 606F 6084
609F 609A 608D 6094 608C 6085 6096 6247 62F3 6308
62FF 634E 633E 632F 6355 6342 6346 634F 6349 633A
6350 633D 632A 632B 6328 634D 634C 6548 6549 6599
65C1 65C5 6642 6649 664F 6643 6652 664C 6645 6641
66F8 6714 6715 6717 6821 6838 6848 6846 6853 6839
6842 6854 6829 68B3 6817 684C 6851 683D 67F4 6850
6840 683C 6843 682A 6845 6813 6818 6841 6B8A 6B89
6BB7 6C23 6C27 6C28 6C26 6C24 6CF0 6D6A 6D95 6D88
6D87 6D66 6D78 6D77 6D59 6D93 6D6C 6D89 6D6E 6D5A
6D74 6D69 6D8C 6D8A 6D79 6D85 6D65 6D94 70CA 70D8
70E4 70D9 70C8 70CF 7239 7279 72FC 72F9 72FD 72F8
72F7 7386 73ED 7409 73EE 73E0 73EA 73DE 7554 755D
755C 755A 7559 75BE 75C5 75C7 75B2 75B3 75BD 75BC
75B9 75C2 75B8 768B 76B0 76CA 76CD 76CE 7729 771F
7720 7728 77E9 7830 7827 7838 781D 7834 7837 7825
782D 7820 781F 7832 7955 7950 7960 795F 7956 795E
795D 7957 795A 79E4 79E3 79E7 79DF 79E6 79E9 79D8
7A84 7A88 7AD9 7B06 7B11 7C89 7D21 7D17 7D0B 7D0A
7D20 7D22 7D14 7D10 7D15 7D1A 7D1C 7D0D 7D19 7D1B
7F3A 7F5F 7F94 7FC5 7FC1 8006 8018 8015 8019 8017
803D 803F 80F1 8102 80F0 8105 80ED 80F4 8106 80F8
80F3 8108 80FD 810A 80FC 80EF 81ED 81EC 8200 8210
822A 822B 8228 822C 82BB 832B 8352 8354 834A 8338
8350 8349 8335 8334 834F 8332 8339 8336 8317 8340
8331 8328 8343 8654 868A 86AA 8693 86A4 86A9 868C
86A3 869C 8870 8877 8881 8882 887D 8879 8A18 8A10
8A0E 8A0C 8A15 8A0A 8A17 8A13 8A16 8A0F 8A11 8C48
8C7A 8C79 8CA1 8CA2 8D77 8EAC 8ED2 8ED4 8ECF 8FB1
9001 9006 8FF7 9000 8FFA 8FF4 9003 8FFD 9005 8FF8
9095 90E1 90DD 90E2 9152 914D 914C 91D8 91DD 91D7
91DC 91D9 9583 9662 9663 9661 965B 965D 9664 9658
965E 96BB 98E2 99AC 9AA8 9AD8 9B25 9B32 9B3C 4E7E
507A 507D 505C 5047 5043 504C 505A 5049 5065 5076
504E 5055 5075 5074 5077 504F 500F 506F 506D 515C
5195 51F0 526A 526F 52D2 52D9 52D8 52D5 5310 530F
5319 533F 5340 533E 53C3 66FC 5546 556A 5566 5544
555E 5561 5543 554A 5531 5556 554F 5555 552F 5564
5538 552E 555C 552C 5563 5533 5541 5557 5708 570B
5709 57DF 5805 580A 5806 57E0 57E4 57FA 5802 5835
57F7 57F9 5920 5962 5A36 5A41 5A49 5A66 5A6A 5A40
5A3C 5A62 5A5A 5A46 5A4A 5B70 5BC7 5BC5 5BC4 5BC2
5BBF 5BC6 5C09 5C08 5C07 5C60 5C5C 5C5D 5D07 5D06
5D0E 5D1B 5D16 5D22 5D11 5D29 5D14 5D19 5D24 5D27
5D17 5DE2 5E38 5E36 5E33 5E37 5EB7 5EB8 5EB6 5EB5
5EBE 5F35 5F37 5F57 5F6C 5F69 5F6B 5F97 5F99 5F9E
5F98 5FA1 5FA0 5F9C 607F 60A3 6089 60A0 60A8 60CB
60B4 60E6 60BD 60C5 60BB 60B5 60DC 60BC 60D8 60D5
60C6 60DF 60B8 60DA 60C7 621A 621B 6248 63A0 63A7
6372 6396 63A2 63A5 6377 6367 6398 63AA 6371 63A9
6389 6383 639B 636B 63A8 6384 6388 6399 63A1 63AC
6392 638F 6380 637B 6369 6368 637A 655D 6556 6551
6559 6557 555F 654F 6558 6555 6554 659C 659B 65AC
65CF 65CB 65CC 65CE 665D 665A 6664 6668 6666 665E
66F9 52D7 671B 6881 68AF 68A2 6893 68B5 687F 6876
68B1 68A7 6897 68B0 6883 68C4 68AD 6886 6885 6894
689D 68A8 689F 68A1 6882 6B32 6BBA 6BEB 6BEC 6C2B
6D8E 6DBC 6DF3 6DD9 6DB2 6DE1 6DCC 6DE4 6DFB 6DFA
6E05 6DC7 6DCB 6DAF 6DD1 6DAE 6DDE 6DF9 6DB8 6DF7
6DF5 6DC5 6DD2 6E1A 6DB5 6DDA 6DEB 6DD8 6DEA 6DF1
6DEE 6DE8 6DC6 6DC4 6DAA 6DEC 6DBF 6DE6 70F9 7109
710A 70FD 70EF 723D 727D 7281 731C 731B 7316 7313
7319 7387 7405 740A 7403 7406 73FE 740D 74E0 74F6
74F7 751C 7522 7565 7566 7562 7570 758F 75D4 75D5
75B5 75CA 75CD 768E 76D4 76D2 76DB 7737 773E 773C
7736 7738 773A 786B 7843 784E 7965 7968 796D 79FB
7A92 7A95 7B20 7B28 7B1B 7B2C 7B26 7B19 7B1E 7B2E
7C92 7C97 7C95 7D46 7D43 7D71 7D2E 7D39 7D3C 7D40
7D30 7D33 7D44 7D2F 7D42 7D32 7D31 7F3D 7F9E 7F9A
7FCC 7FCE 7FD2 801C 804A 8046 812F 8116 8123 812B
8129 8130 8124 8202 8235 8237 8236 8239 838E 839E
8398 8378 83A2 8396 83BD 83AB 8392 838A 8393 8389
83A0 8377 837B 837C 8386 83A7 8655 5F6A 86C7 86C0
86B6 86C4 86B5 86C6 86CB 86B1 86AF 86C9 8853 889E
8888 88AB 8892 8896 888D 888B 8993 898F 8A2A 8A1D
8A23 8A25 8A31 8A2D 8A1F 8A1B 8A22 8C49 8C5A 8CA9
8CAC 8CAB 8CA8 8CAA 8CA7 8D67 8D66 8DBE 8DBA 8EDB
8EDF 9019 900D 901A 9017 9023 901F 901D 9010 9015
901E 9020 900F 9022 9016 901B 9014 90E8 90ED 90FD
9157 91CE 91F5 91E6 91E3 91E7 91ED 91E9 9589 966A
9675 9673 9678 9670 9674 9676 9677 966C 96C0 96EA
96E9 7AE0 7ADF 9802 9803 9B5A 9CE5 9E75 9E7F 9EA5
9EBB 50A2 508D 5085 5099 5091 5080 5096 5098 509A
6700 51F1 5272 5274 5275 5269 52DE 52DD 52DB 535A
53A5 557B 5580 55A7 557C 558A 559D 5598 5582 559C
55AA 5594 5587 558B 5583 55B3 55AE 559F 553E 55B2
559A 55BB 55AC 55B1 557E 5589 55AB 5599 570D 582F
582A 5834 5824 5830 5831 5821 581D 5820 58F9 58FA
5960 5A77 5A9A 5A7F 5A92 5A9B 5AA7 5B73 5B71 5BD2
5BCC 5BD3 5BD0 5C0A 5C0B 5C31 5D4C 5D50 5D34 5D47
5DFD 5E45 5E3D 5E40 5E43 5E7E 5ECA 5EC1 5EC2 5EC4
5F3C 5F6D 5FA9 5FAA 5FA8 60D1 60E1 60B2 60B6 60E0
611C 6123 60FA 6115 60F0 60FB 60F4 6168 60F1 610E
60F6 6109 6100 6112 621F 6249 63A3 638C 63CF 63C0
63E9 63C9 63C6 63CD 63D2 63E3 63D0 63E1 63D6 63ED
63EE 6376 63F4 63EA 63DB 6452 63DA 63F9 655E 6566
6562 6563 6591 6590 65AF 666E 6670 6674 6676 666F
6691 667A 667E 6677 66FE 66FF 671F 671D 68FA 68D5
68E0 68D8 68D7 6905 68DF 68F5 68EE 68E7 68F9 68D2
68F2 68E3 68CB 68CD 690D 6912 690E 68C9 68DA 696E
68FB 6B3E 6B3A 6B3D 6B98 6B96 6BBC 6BEF 6C2E 6C2F
6C2C 6E2F 6E38 6E54 6E21 6E32 6E67 6E4A 6E20 6E25
6E23 6E1B 6E5B 6E58 6E24 6E56 6E6E 6E2D 6E26 6E6F
6E34 6E4D 6E3A 6E2C 6E43 6E1D 6E3E 6ECB 6E89 6E19
6E4E 6E63 6E44 6E72 6E69 6E5F 7119 711A 7126 7130
7121 7136 716E 711C 724C 7284 7280 7336 7325 7334
7329 743A 742A 7433 7422 7425 7435 7436 7434 742F
741B 7426 7428 7525 7526 756B 756A 75E2 75DB 75E3
75D9 75D8 75DE 75E0 767B 767C 7696 7693 76B4 76DC
774F 77ED 785D 786C 786F 7A0D 7A08 7A0B 7A05 7A00
7A98 7A97 7A96 7AE5 7AE3 7B49 7B56 7B46 7B50 7B52
7B54 7B4D 7B4B 7B4F 7B51 7C9F 7CA5 7D5E 7D50 7D68
7D55 7D2B 7D6E 7D72 7D61 7D66 7D62 7D70 7D73 5584
7FD4 7FD5 800B 8052 8085 8155 8154 814B 8151 814E
8139 8146 813E 814C 8153 8174 8212 821C 83E9 8403
83F8 840D 83E0 83C5 840B 83C1 83EF 83F1 83F4 8457
840A 83F0 840C 83CC 83FD 83F2 83CA 8438 840E 8404
83DC 8407 83D4 83DF 865B 86DF 86D9 86ED 86D4 86DB
86E4 86D0 86DE 8857 88C1 88C2 88B1 8983 8996 8A3B
8A60 8A55 8A5E 8A3C 8A41 8A54 8A5B 8A50 8A46 8A34
8A3A 8A36 8A56 8C61 8C82 8CAF 8CBC 8CB3 8CBD 8CC1
8CBB 8CC0 8CB4 8CB7 8CB6 8CBF 8CB8 8D8A 8D85 8D81
8DCE 8DDD 8DCB 8DDA 8DD1 8DCC 8DDB 8DC6 8EFB 8EF8
8EFC 8F9C 902E 9035 9031 9038 9032 9036 9102 90F5
9109 90FE 9163 9165 91CF 9214 9215 9223 9209 921E
920D 9210 9207 9211 9594 958F 958B 9591 9593 9592
958E 968A 968E 968B 967D 9685 9686 968D 9672 9684
96C1 96C5 96C4 96C6 96C7 96EF 96F2 97CC 9805 9806
9808 98E7 98EA 98EF 98E9 98F2 98ED 99AE 99AD 9EC3
9ECD 9ED1 4E82 50AD 50B5 50B2 50B3 50C5 50BE 50AC
50B7 50BB 50AF 50C7 527F 5277 527D 52DF 52E6 52E4
52E2 52E3 532F 55DF 55E8 55D3 55E6 55CE 55DC 55C7
55D1 55E3 55E4 55EF 55DA 55E1 55C5 55C6 55E5 55C9
5712 5713 585E 5851 5858 5857 585A 5854 586B 584C
586D 584A 5862 5852 584B 5967 5AC1 5AC9 5ACC 5ABE
5ABD 5ABC 5AB3 5AC2 5AB2 5D69 5D6F 5E4C 5E79 5EC9
5EC8 5F12 5F59 5FAC 5FAE 611A 610F 6148 611F 60F3
611B 60F9 6101 6108 614E 614C 6144 614D 613E 6134
6127 610D 6106 6137 6221 6222 6413 643E 641E 642A
642D 643D 642C 640F 641C 6414 640D 6436 6416 6417
6406 656C 659F 65B0 6697 6689 6687 6688 6696 6684
6698 668D 6703 6994 696D 695A 6977 6960 6954 6975
6930 6982 694A 6968 696B 695E 6953 6979 6986 695D
6963 695B 6B47 6B72 6BC0 6BBF 6BD3 6BFD 6EA2 6EAF
6ED3 6EB6 6EC2 6E90 6E9D 6EC7 6EC5 6EA5 6E98 6EBC
6EBA 6EAB 6ED1 6E96 6E9C 6EC4 6ED4 6EAA 6EA7 6EB4
714E 7159 7169 7164 7149 7167 715C 716C 7166 714C
7165 715E 7146 7168 7156 723A 7252 7337 7345 733F
733E 746F 745A 7455 745F 745E 7441 743F 7459 745B
745C 7576 7578 7600 75F0 7601 75F2 75F1 75FA 75FF
75F4 75F3 76DE 76DF 775B 776B 7766 775E 7763 7779
776A 776C 775C 7765 7768 7762 77EE 788E 78B0 7897
7898 788C 7889 787C 7891 7893 787F 797A 797F 7981
842C 79BD 7A1C 7A1A 7A20 7A14 7A1F 7A1E 7A9F 7AA0
7B77 7BC0 7B60 7B6E 7B67 7CB1 7CB3 7CB5 7D93 7D79
7D91 7D81 7D8F 7D5B 7F6E 7F69 7F6A 7F72 7FA9 7FA8
7FA4 8056 8058 8086 8084 8171 8170 8178 8165 816E
8173 816B 8179 817A 8166 8205 8247 8482 8477 843D
8431 8475 8466 846B 8449 846C 845B 843C 8435 8461
8463 8469 846D 8446 865E 865C 865F 86F9 8713 8708
8707 8700 86FE 86FB 8702 8703 8706 870A 8859 88DF
88D4 88D9 88DC 88D8 88DD 88E1 88CA 88D5 88D2 899C
89E3 8A6B 8A72 8A73 8A66 8A69 8A70 8A87 8A7C 8A63
8AA0 8A71 8A85 8A6D 8A62 8A6E 8A6C 8A79 8A7B 8A3E
8A68 8C62 8C8A 8C89 8CCA 8CC7 8CC8 8CC4 8CB2 8CC3
8CC2 8CC5 8DE1 8DDF 8DE8 8DEF 8DF3 8DFA 8DEA 8DE4
8DE6 8EB2 8F03 8F09 8EFE 8F0A 8F9F 8FB2 904B 904A
9053 9042 9054 903C 9055 9050 9047 904F 904E 904D
9051 903E 9041 9112 9117 916C 916A 9169 91C9 9237
9257 9238 923D 9240 923E 925B 924B 9264 9251 9234
9249 924D 9245 9239 923F 925A 9598 9698 9694 9695
96CD 96CB 96C9 96CA 96F7 96FB 96F9 96F6 9756 9774
9776 9810 9811 9813 980A 9812 980C 98FC 98F4 98FD
98FE 99B3 99B1 99B4 9AE1 9CE9 9E82 9F0E 9F13 9F20
50E7 50EE 50E5 50D6 50ED 50DA 50D5 50CF 50D1 50F1
50CE 50E9 5162 51F3 5283 5282 5331 53AD 55FE 5600
561B 5617 55FD 5614 5606 5609 560D 560E 55F7 5616
561F 5608 5610 55F6 5718 5716 5875 587E 5883 5893
588A 5879 5885 587D 58FD 5925 5922 5924 596A 5969
5AE1 5AE6 5AE9 5AD7 5AD6 5AD8 5AE3 5B75 5BDE 5BE7
5BE1 5BE5 5BE6 5BE8 5BE2 5BE4 5BDF 5C0D 5C62 5D84
5D87 5E5B 5E63 5E55 5E57 5E54 5ED3 5ED6 5F0A 5F46
5F70 5FB9 6147 613F 614B 6177 6162 6163 615F 615A
6158 6175 622A 6487 6458 6454 64A4 6478 645F 647A
6451 6467 6434 646D 647B 6572 65A1 65D7 65D6 66A2
66A8 669D 699C 69A8 6995 69C1 69AE 69D3 69CB 699B
69B7 69BB 69AB 69B4 69D0 69CD 69AD 69CC 69A6 69C3
69A3 6B49 6B4C 6C33 6F33 6F14 6EFE 6F13 6EF4 6F29
6F3E 6F20 6F2C 6F0F 6F02 6F22 6EFF 6EEF 6F06 6F31
6F38 6F32 6F23 6F15 6F2B 6F2F 6F88 6F2A 6EEC 6F01
6EF2 6ECC 6EF7 7194 7199 717D 718A 7184 7192 723E
7292 7296 7344 7350 7464 7463 746A 7470 746D 7504
7591 7627 760D 760B 7609 7613 76E1 76E3 7784 777D
777F 7761 78C1 789F 78A7 78B3 78A9 78A3 798E 798F
798D 7A2E 7A31 7AAA 7AA9 7AED 7AEF 7BA1 7B95 7B8B
7B75 7B97 7B9D 7B94 7B8F 7BB8 7B87 7B84 7CB9 7CBD
7CBE 7DBB 7DB0 7D9C 7DBD 7DBE 7DA0 7DCA 7DB4 7DB2
7DB1 7DBA 7DA2 7DBF 7DB5 7DB8 7DAD 7DD2 7DC7 7DAC
7F70 7FE0 7FE1 7FDF 805E 805A 8087 8150 8180 818F
8188 818A 817F 8182 81E7 81FA 8207 8214 821E 824B
84C9 84BF 84C6 84C4 8499 849E 84B2 849C 84CB 84B8
84C0 84D3 8490 84BC 84D1 84CA 873F 871C 873B 8722
8725 8734 8718 8755 8737 8729 88F3 8902 88F4 88F9
88F8 88FD 88E8 891A 88EF 8AA6 8A8C 8A9E 8AA3 8A8D
8AA1 8A93 8AA4 8AAA 8AA5 8AA8 8A98 8A91 8A9A 8AA7
8C6A 8C8D 8C8C 8CD3 8CD1 8CD2 8D6B 8D99 8D95 8DFC
8F14 8F12 8F15 8F13 8FA3 9060 9058 905C 9063 9059
905E 9062 905D 905B 9119 9118 911E 9175 9178 9177
9174 9278 9280 9285 9298 9296 927B 9293 929C 92A8
927C 9291 95A1 95A8 95A9 95A3 95A5 95A4 9699 969C
969B 96CC 96D2 9700 977C 9785 97F6 9817 9818 98AF
98B1 9903 9905 990C 9909 99C1 9AAF 9AB0 9AE6 9B41
9B42 9CF4 9CF6 9CF3 9EBC 9F3B 9F4A 5104 5100 50FB
50F5 50F9 5102 5108 5109 5105 51DC 5287 5288 5289
528D 528A 52F0 53B2 562E 563B 5639 5632 563F 5634
5629 5653 564E 5657 5674 5636 562F 5630 5880 589F
589E 58B3 589C 58AE 58A9 58A6 596D 5B09 5AFB 5B0B
5AF5 5B0C 5B08 5BEE 5BEC 5BE9 5BEB 5C64 5C65 5D9D
5D94 5E62 5E5F 5E61 5EE2 5EDA 5EDF 5EDD 5EE3 5EE0
5F48 5F71 5FB7 5FB5 6176 6167 616E 615D 6155 6182
617C 6170 616B 617E 61A7 6190 61AB 618E 61AC 619A
61A4 6194 61AE 622E 6469 646F 6479 649E 64B2 6488
6490 64B0 64A5 6493 6495 64A9 6492 64AE 64AD 64AB
649A 64AC 6499 64A2 64B3 6575 6577 6578 66AE 66AB
66B4 66B1 6A23 6A1F 69E8 6A01 6A1E 6A19 69FD 6A21
6A13 6A0A 69F3 6A02 6A05 69ED 6A11 6B50 6B4E 6BA4
6BC5 6BC6 6F3F 6F7C 6F84 6F51 6F66 6F54 6F86 6F6D
6F5B 6F78 6F6E 6F8E 6F7A 6F70 6F64 6F97 6F58 6ED5
6F6F 6F60 6F5F 719F 71AC 71B1 71A8 7256 729B 734E
7357 7469 748B 7483 747E 7480 757F 7620 7629 761F
7624 7626 7621 7622 769A 76BA 76E4 778E 7787 778C
7791 778B 78CB 78C5 78BA 78CA 78BE 78D5 78BC 78D0
7A3F 7A3C 7A40 7A3D 7A37 7A3B 7AAF 7AAE 7BAD 7BB1
7BC4 7BB4 7BC6 7BC7 7BC1 7BA0 7BCC 7CCA 7DE0 7DF4
7DEF 7DFB 7DD8 7DEC 7DDD 7DE8 7DE3 7DDA 7DDE 7DE9
7D9E 7DD9 7DF2 7DF9 7F75 7F77 7FAF 7FE9 8026 819B
819C 819D 81A0 819A 8198 8517 853D 851A 84EE 852C
852D 8513 8511 8523 8521 8514 84EC 8525 84FF 8506
8782 8774 8776 8760 8766 8778 8768 8759 8757 874C
8753 885B 885D 8910 8907 8912 8913 8915 890A 8ABC
8AD2 8AC7 8AC4 8A95 8ACB 8AF8 8AB2 8AC9 8AC2 8ABF
8AB0 8AD6 8ACD 8AB6 8AB9 8ADB 8C4C 8C4E 8C6C 8CE0
8CDE 8CE6 8CE4 8CEC 8CED 8CE2 8CE3 8CDC 8CEA 8CE1
8D6D 8D9F 8DA3 8E2B 8E10 8E1D 8E22 8E0F 8E29 8E1F
8E21 8E1E 8EBA 8F1D 8F1B 8F1F 8F29 8F26 8F2A 8F1C
8F1E 8F25 9069 906E 9068 906D 9077 9130 912D 9127
9131 9187 9189 918B 9183 92C5 92BB 92B7 92EA 92AC
92E4 92C1 92B3 92BC 92D2 92C7 92F0 92B2 95AD 95B1
9704 9706 9707 9709 9760 978D 978B 978F 9821 982B
981C 98B3 990A 9913 9912 9918 99DD 99D0 99DF 99DB
99D1 99D5 99D2 99D9 9AB7 9AEE 9AEF 9B27 9B45 9B44
9B77 9B6F 9D06 9D09 9D03 9EA9 9EBE 9ECE 58A8 9F52
5112 5118 5114 5110 5115 5180 51AA 51DD 5291 5293
52F3 5659 566B 5679 5669 5664 5678 566A 5668 5665
5671 566F 566C 5662 5676 58C1 58BE 58C7 58C5 596E
5B1D 5B34 5B78 5BF0 5C0E 5F4A 61B2 6191 61A9 618A
61CD 61B6 61BE 61CA 61C8 6230 64C5 64C1 64CB 64BB
64BC 64DA 64C4 64C7 64C2 64CD 64BF 64D2 64D4 64BE
6574 66C6 66C9 66B9 66C4 66C7 66B8 6A3D 6A38 6A3A
6A59 6A6B 6A58 6A39 6A44 6A62 6A61 6A4B 6A47 6A35
6A5F 6A48 6B59 6B77 6C05 6FC2 6FB1 6FA1 6FC3 6FA4
6FC1 6FA7 6FB3 6FC0 6FB9 6FB6 6FA6 6FA0 6FB4 71BE
71C9 71D0 71D2 71C8 71D5 71B9 71CE 71D9 71DC 71C3
71C4 7368 749C 74A3 7498 749F 749E 74E2 750C 750D
7634 7638 763A 76E7 76E5 77A0 779E 779F 77A5 78E8
78DA 78EC 78E7 79A6 7A4D 7A4E 7A46 7A4C 7A4B 7ABA
7BD9 7C11 7BC9 7BE4 7BDB 7BE1 7BE9 7BE6 7CD5 7CD6
7E0A 7E11 7E08 7E1B 7E23 7E1E 7E1D 7E09 7E10 7F79
7FB2 7FF0 7FF1 7FEE 8028 81B3 81A9 81A8 81FB 8208
8258 8259 854A 8559 8548 8568 8569 8543 8549 856D
856A 855E 8783 879F 879E 87A2 878D 8861 892A 8932
8925 892B 8921 89AA 89A6 8AE6 8AFA 8AEB 8AF1 8B00
8ADC 8AE7 8AEE 8AFE 8B01 8B02 8AF7 8AED 8AF3 8AF6
8AFC 8C6B 8C6D 8C93 8CF4 8E44 8E31 8E34 8E42 8E39
8E35 8F3B 8F2F 8F38 8F33 8FA8 8FA6 9075 9074 9078
9072 907C 907A 9134 9192 9320 9336 92F8 9333 932F
9322 92FC 932B 9304 931A 9310 9326 9321 9315 932E
9319 95BB 96A7 96A8 96AA 96D5 970E 9711 9716 970D
9713 970F 975B 975C 9766 9798 9830 9838 983B 9837
982D 9839 9824 9910 9928 991E 991B 9921 991A 99ED
99E2 99F1 9AB8 9ABC 9AFB 9AED 9B28 9B91 9D15 9D23
9D26 9D28 9D12 9D1B 9ED8 9ED4 9F8D 9F9C 512A 511F
5121 5132 52F5 568E 5680 5690 5685 5687 568F 58D5
58D3 58D1 58CE 5B30 5B2A 5B24 5B7A 5C37 5C68 5DBC
5DBA 5DBD 5DB8 5E6B 5F4C 5FBD 61C9 61C2 61C7 61E6
61CB 6232 6234 64CE 64CA 64D8 64E0 64F0 64E6 64EC
64F1 64E2 64ED 6582 6583 66D9 66D6 6A80 6A94 6A84
6AA2 6A9C 6ADB 6AA3 6A7E 6A97 6A90 6AA0 6B5C 6BAE
6BDA 6C08 6FD8 6FF1 6FDF 6FE0 6FDB 6FE4 6FEB 6FEF
6F80 6FEC 6FE1 6FE9 6FD5 6FEE 6FF0 71E7 71DF 71EE
71E6 71E5 71ED 71EC 71F4 71E0 7235 7246 7370 7372
74A9 74B0 74A6 74A8 7646 7642 764C 76EA 77B3 77AA
77B0 77AC 77A7 77AD 77EF 78F7 78FA 78F4 78EF 7901
79A7 79AA 7A57 7ABF 7C07 7C0D 7BFE 7BF7 7C0C 7BE0
7CE0 7CDC 7CDE 7CE2 7CDF 7CD9 7CDD 7E2E 7E3E 7E46
7E37 7E32 7E43 7E2B 7E3D 7E31 7E45 7E41 7E34 7E39
7E48 7E35 7E3F 7E2F 7F44 7FF3 7FFC 8071 8072 8070
806F 8073 81C6 81C3 81BA 81C2 81C0 81BF 81BD 81C9
81BE 81E8 8209 8271 85AA 8584 857E 859C 8591 8594
85AF 859B 8587 85A8 858A 8667 87C0 87D1 87B3 87D2
87C6 87AB 87BB 87BA 87C8 87CB 893B 8936 8944 8938
893D 89AC 8B0E 8B17 8B19 8B1B 8B0A 8B20 8B1D 8B04
8B10 8C41 8C3F 8C73 8CFA 8CFD 8CFC 8CF8 8CFB 8DA8
8E49 8E4B 8E48 8E4A 8F44 8F3E 8F42 8F45 8F3F 907F
907D 9084 9081 9082 9080 9139 91A3 919E 919C 934D
9382 9328 9375 934A 9365 934B 9318 937E 936C 935B
9370 935A 9354 95CA 95CB 95CC 95C8 95C6 96B1 96B8
96D6 971C 971E 97A0 97D3 9846 98B6 9935 9A01 99FF
9BAE 9BAB 9BAA 9BAD 9D3B 9D3F 9E8B 9ECF 9EDE 9EDC
9EDD 9EDB 9F3E 9F4B 53E2 5695 56AE 58D9 58D8 5B38
5F5D 61E3 6233 64F4 64F2 64FE 6506 64FA 64FB 64F7
65B7 66DC 6726 6AB3 6AAC 6AC3 6ABB 6AB8 6AC2 6AAE
6AAF 6B5F 6B78 6BAF 7009 700B 6FFE 7006 6FFA 7011
700F 71FB 71FC 71FE 71F8 7377 7375 74A7 74BF 7515
7656 7658 7652 77BD 77BF 77BB 77BC 790E 79AE 7A61
7A62 7A60 7AC4 7AC5 7C2B 7C27 7C2A 7C1E 7C23 7C21
7CE7 7E54 7E55 7E5E 7E5A 7E61 7E52 7E59 7F48 7FF9
7FFB 8077 8076 81CD 81CF 820A 85CF 85A9 85CD 85D0
85C9 85B0 85BA 85B9 85A6 87EF 87EC 87F2 87E0 8986
89B2 89F4 8B28 8B39 8B2C 8B2B 8C50 8D05 8E59 8E63
8E66 8E64 8E5F 8E55 8EC0 8F49 8F4D 9087 9083 9088
91AB 91AC 91D0 9394 938A 9396 93A2 93B3 93AE 93AC
93B0 9398 939A 9397 95D4 95D6 95D0 95D5 96E2 96DC
96D9 96DB 96DE 9724 97A3 97A6 97AD 97F9 984D 984F
984C 984E 9853 98BA 993E 993F 993D 992E 99A5 9A0E
9AC1 9B03 9B06 9B4F 9B4E 9B4D 9BCA 9BC9 9BFD 9BC8
9BC0 9D51 9D5D 9D60 9EE0 9F15 9F2C 5133 56A5 58DE
58DF 58E2 5BF5 9F90 5EEC 61F2 61F7 61F6 61F5 6500
650F 66E0 66DD 6AE5 6ADD 6ADA 6AD3 701B 701F 7028
701A 701D 7015 7018 7206 720D 7258 72A2 7378 737A
74BD 74CA 74E3 7587 7586 765F 7661 77C7 7919 79B1
7A6B 7A69 7C3E 7C3F 7C38 7C3D 7C37 7C40 7E6B 7E6D
7E79 7E69 7E6A 7F85 7E73 7FB6 7FB9 7FB8 81D8 85E9
85DD 85EA 85D5 85E4 85E5 85F7 87FB 8805 880D 87F9
87FE 8960 895F 8956 895E 8B41 8B5C 8B58 8B49 8B5A
8B4E 8B4F 8B46 8B59 8D08 8D0A 8E7C 8E72 8E87 8E76
8E6C 8E7A 8E74 8F54 8F4E 8FAD 908A 908B 91B1 91AE
93E1 93D1 93DF 93C3 93C8 93DC 93DD 93D6 93E2 93CD
93D8 93E4 93D7 93E8 95DC 96B4 96E3 972A 9727 9761
97DC 97FB 985E 9858 985B 98BC 9945 9949 9A16 9A19
9B0D 9BE8 9BE7 9BD6 9BDB 9D89 9D61 9D72 9D6A 9D6C
9E92 9E97 9E93 9EB4 52F8 56A8 56B7 56B6 56B4 56BC
58E4 5B40 5B43 5B7D 5BF6 5DC9 61F8 61FA 6518 6514
6519 66E6 6727 6AEC 703E 7030 7032 7210 737B 74CF
7662 7665 7926 792A 792C 792B 7AC7 7AF6 7C4C 7C43
7C4D 7CEF 7CF0 8FAE 7E7D 7E7C 7E82 7F4C 8000 81DA
8266 85FB 85F9 8611 85FA 8606 860B 8607 860A 8814
8815 8964 89BA 89F8 8B70 8B6C 8B66 8B6F 8B5F 8B6B
8D0F 8D0D 8E89 8E81 8E85 8E82 91B4 91CB 9418 9403
93FD 95E1 9730 98C4 9952 9951 99A8 9A2B 9A30 9A37
9A35 9C13 9C0D 9E79 9EB5 9EE8 9F2F 9F5F 9F63 9F61
5137 5138 56C1 56C0 56C2 5914 5C6C 5DCD 61FC 61FE
651D 651C 6595 66E9 6AFB 6B04 6AFA 6BB2 704C 721B
72A7 74D6 74D4 7669 77D3 7C50 7E8F 7E8C 7FBC 8617
862D 861A 8823 8822 8821 881F 896A 896C 89BD 8B74
8B77 8B7D 8D13 8E8A 8E8D 8E8B 8F5F 8FAF 91BA 942E
9433 9435 943A 9438 9432 942B 95E2 9738 9739 9732
97FF 9867 9865 9957 9A45 9A43 9A40 9A3E 9ACF 9B54
9B51 9C2D 9C25 9DAF 9DB4 9DC2 9DB8 9E9D 9EEF 9F19
9F5C 9F66 9F67 513C 513B 56C8 56CA 56C9 5B7F 5DD4
5DD2 5F4E 61FF 6524 6B0A 6B61 7051 7058 7380 74E4
758A 766E 766C 79B3 7C60 7C5F 807E 807D 81DF 8972
896F 89FC 8B80 8D16 8D17 8E91 8E93 8F61 9148 9444
9451 9452 973D 973E 97C3 97C1 986B 9955 9A55 9A4D
9AD2 9B1A 9C49 9C31 9C3E 9C3B 9DD3 9DD7 9F34 9F6C
9F6A 9F94 56CC 5DD6 6200 6523 652B 652A 66EC 6B10
74DA 7ACA 7C64 7C63 7C65 7E93 7E96 7E94 81E2 8638
863F 8831 8B8A 9090 908F 9463 9460 9464 9768 986F
995C 9A5A 9A5B 9A57 9AD3 9AD4 9AD1 9C54 9C57 9C56
9DE5 9E9F 9EF4 56D1 58E9 652C 705E 7671 7672 77D7
7F50 7F88 8836 8839 8862 8B93 8B92 8B96 8277 8D1B
91C0 946A 9742 9748 9744 97C6 9870 9A5F 9B22 9B58
9C5F 9DF9 9DFA 9E7C 9E7D 9F07 9F77 9F72 5EF3 6B16
7063 7C6C 7C6E 883B 89C0 8EA1 91C1 9472 9470 9871
995E 9AD6 9B23 9ECC 7064 77DA 8B9A 9477 97C9 9A62
9A65 7E9C 8B9C 8EAA 91C5 947D 947E 947C 9C77 9C78
9EF7 8C54 947F 9E1A 7228 9A6A 9B31 9E1B 9E1E 7C72
4E42 4E5C 51F5 531A 5382 4E07 4E0C 4E47 4E8D 56D7
5C6E 5F73 4E0F 5187 4E0E 4E2E 4E93 4EC2 4EC9 4EC8
5198 52FC 536C 53B9 5720 5903 592C 5C10 5DFF 65E1
6BB3 6BCC 6C14 723F 4E31 4E3C 4EE8 4EDC 4EE9 4EE1
4EDD 4EDA 520C 531C 534C 5722 5723 5917 592F 5B81
5B84 5C12 5C3B 5C74 5C73 5E04 5E80 5E82 5FC9 6209
6250 6C15 6C36 6C43 6C3F 6C3B 72AE 72B0 738A 79B8
808A 961E 4F0E 4F18 4F2C 4EF5 4F14 4EF1 4F00 4EF7
4F08 4F1D 4F02 4F05 4F22 4F13 4F04 4EF4 4F12 51B1
5213 5209 5210 52A6 5322 531F 534D 538A 5407 56E1
56DF 572E 572A 5734 593C 5980 597C 5985 597B 597E
5977 597F 5B56 5C15 5C25 5C7C 5C7A 5C7B 5C7E 5DDF
5E75 5E84 5F02 5F1A 5F74 5FD5 5FD4 5FCF 625C 625E
6264 6261 6266 6262 6259 6260 625A 6265 65EF 65EE
673E 6739 6738 673B 673A 673F 673C 6733 6C18 6C46
6C52 6C5C 6C4F 6C4A 6C54 6C4B 6C4C 7071 725E 72B4
72B5 738E 752A 767F 7A75 7F51 8278 827C 8280 827D
827F 864D 897E 9099 9097 9098 909B 9094 9622 9624
9620 9623 4F56 4F3B 4F62 4F49 4F53 4F64 4F3E 4F67
4F52 4F5F 4F41 4F58 4F2D 4F33 4F3F 4F61 518F 51B9
521C 521E 5221 52AD 52AE 5309 5363 5372 538E 538F
5430 5437 542A 5454 5445 5419 541C 5425 5418 543D
544F 5441 5428 5424 5447 56EE 56E7 56E5 5741 5745
574C 5749 574B 5752 5906 5940 59A6 5998 59A0 5997
598E 59A2 5990 598F 59A7 59A1 5B8E 5B92 5C28 5C2A
5C8D 5C8F 5C88 5C8B 5C89 5C92 5C8A 5C86 5C93 5C95
5DE0 5E0A 5E0E 5E8B 5E89 5E8C 5E88 5E8D 5F05 5F1D
5F78 5F76 5FD2 5FD1 5FD0 5FED 5FE8 5FEE 5FF3 5FE1
5FE4 5FE3 5FFA 5FEF 5FF7 5FFB 6000 5FF4 623A 6283
628C 628E 628F 6294 6287 6271 627B 627A 6270 6281
6288 6277 627D 6272 6274 6537 65F0 65F4 65F3 65F2
65F5 6745 6747 6759 6755 674C 6748 675D 674D 675A
674B 6BD0 6C19 6C1A 6C78 6C67 6C6B 6C84 6C8B 6C8F
6C71 6C6F 6C69 6C9A 6C6D 6C87 6C95 6C9C 6C66 6C73
6C65 6C7B 6C8E 7074 707A 7263 72BF 72BD 72C3 72C6
72C1 72BA 72C5 7395 7397 7393 7394 7392 753A 7539
7594 7595 7681 793D 8034 8095 8099 8090 8092 809C
8290 828F 8285 828E 8291 8293 828A 8283 8284 8C78
8FC9 8FBF 909F 90A1 90A5 909E 90A7 90A0 9630 9628
962F 962D 4E33 4F98 4F7C 4F85 4F7D 4F80 4F87 4F76
4F74 4F89 4F84 4F77 4F4C 4F97 4F6A 4F9A 4F79 4F81
4F78 4F90 4F9C 4F94 4F9E 4F92 4F82 4F95 4F6B 4F6E
519E 51BC 51BE 5235 5232 5233 5246 5231 52BC 530A
530B 533C 5392 5394 5487 547F 5481 5491 5482 5488
546B 547A 547E 5465 546C 5474 5466 548D 546F 5461
5460 5498 5463 5467 5464 56F7 56F9 576F 5772 576D
576B 5771 5770 5776 5780 5775 577B 5773 5774 5762
5768 577D 590C 5945 59B5 59BA 59CF 59CE 59B2 59CC
59C1 59B6 59BC 59C3 59D6 59B1 59BD 59C0 59C8 59B4
59C7 5B62 5B65 5B93 5B95 5C44 5C47 5CAE 5CA4 5CA0
5CB5 5CAF 5CA8 5CAC 5C9F 5CA3 5CAD 5CA2 5CAA 5CA7
5C9D 5CA5 5CB6 5CB0 5CA6 5E17 5E14 5E19 5F28 5F22
5F23 5F24 5F54 5F82 5F7E 5F7D 5FDE 5FE5 602D 6026
6019 6032 600B 6034 600A 6017 6033 601A 601E 602C
6022 600D 6010 602E 6013 6011 600C 6009 601C 6214
623D 62AD 62B4 62D1 62BE 62AA 62B6 62CA 62AE 62B3
62AF 62BB 62A9 62B0 62B8 653D 65A8 65BB 6609 65FC
6604 6612 6608 65FB 6603 660B 660D 6605 65FD 6611
6610 66F6 670A 6785 676C 678E 6792 6776 677B 6798
6786 6784 6774 678D 678C 677A 679F 6791 6799 6783
677D 6781 6778 6779 6794 6B25 6B80 6B7E 6BDE 6C1D
6C93 6CEC 6CEB 6CEE 6CD9 6CB6 6CD4 6CAD 6CE7 6CB7
6CD0 6CC2 6CBA 6CC3 6CC6 6CED 6CF2 6CD2 6CDD 6CB4
6C8A 6C9D 6C80 6CDE 6CC0 6D30 6CCD 6CC7 6CB0 6CF9
6CCF 6CE9 6CD1 7094 7098 7085 7093 7086 7084 7091
7096 7082 709A 7083 726A 72D6 72CB 72D8 72C9 72DC
72D2 72D4 72DA 72CC 72D1 73A4 73A1 73AD 73A6 73A2
73A0 73AC 739D 74DD 74E8 753F 7540 753E 758C 7598
76AF 76F3 76F1 76F0 76F5 77F8 77FC 77F9 77FB 77FA
77F7 7942 793F 79C5 7A78 7A7B 7AFB 7C75 7CFD 8035
808F 80AE 80A3 80B8 80B5 80AD 8220 82A0 82C0 82AB
829A 8298 829B 82B5 82A7 82AE 82BC 829E 82BA 82B4
82A8 82A1 82A9 82C2 82A4 82C3 82B6 82A2 8670 866F
866D 866E 8C56 8FD2 8FCB 8FD3 8FCD 8FD6 8FD5 8FD7
90B2 90B4 90AF 90B3 90B0 9639 963D 963C 963A 9643
4FCD 4FC5 4FD3 4FB2 4FC9 4FCB 4FC1 4FD4 4FDC 4FD9
4FBB 4FB3 4FDB 4FC7 4FD6 4FBA 4FC0 4FB9 4FEC 5244
5249 52C0 52C2 533D 537C 5397 5396 5399 5398 54BA
54A1 54AD 54A5 54CF 54C3 830D 54B7 54AE 54D6 54B6
54C5 54C6 54A0 5470 54BC 54A2 54BE 5472 54DE 54B0
57B5 579E 579F 57A4 578C 5797 579D 579B 5794 5798
578F 5799 57A5 579A 5795 58F4 590D 5953 59E1 59DE
59EE 5A00 59F1 59DD 59FA 59FD 59FC 59F6 59E4 59F2
59F7 59DB 59E9 59F3 59F5 59E0 59FE 59F4 59ED 5BA8
5C4C 5CD0 5CD8 5CCC 5CD7 5CCB 5CDB 5CDE 5CDA 5CC9
5CC7 5CCA 5CD6 5CD3 5CD4 5CCF 5CC8 5CC6 5CCE 5CDF
5CF8 5DF9 5E21 5E22 5E23 5E20 5E24 5EB0 5EA4 5EA2
5E9B 5EA3 5EA5 5F07 5F2E 5F56 5F86 6037 6039 6054
6072 605E 6045 6053 6047 6049 605B 604C 6040 6042
605F 6024 6044 6058 6066 606E 6242 6243 62CF 630D
630B 62F5 630E 6303 62EB 62F9 630F 630C 62F8 62F6
6300 6313 6314 62FA 6315 62FB 62F0 6541 6543 65AA
65BF 6636 6621 6632 6635 661C 6626 6622 6633 662B
663A 661D 6634 6639 662E 670F 6710 67C1 67F2 67C8
67BA 67DC 67BB 67F8 67D8 67C0 67B7 67C5 67EB 67E4
67DF 67B5 67CD 67B3 67F7 67F6 67EE 67E3 67C2 67B9
67CE 67E7 67F0 67B2 67FC 67C6 67ED 67CC 67AE 67E6
67DB 67FA 67C9 67CA 67C3 67EA 67CB 6B28 6B82 6B84
6BB6 6BD6 6BD8 6BE0 6C20 6C21 6D28 6D34 6D2D 6D1F
6D3C 6D3F 6D12 6D0A 6CDA 6D33 6D04 6D19 6D3A 6D1A
6D11 6D00 6D1D 6D42 6D01 6D18 6D37 6D03 6D0F 6D40
6D07 6D20 6D2C 6D08 6D22 6D09 6D10 70B7 709F 70BE
70B1 70B0 70A1 70B4 70B5 70A9 7241 7249 724A 726C
7270 7273 726E 72CA 72E4 72E8 72EB 72DF 72EA 72E6
72E3 7385 73CC 73C2 73C8 73C5 73B9 73B6 73B5 73B4
73EB 73BF 73C7 73BE 73C3 73C6 73B8 73CB 74EC 74EE
752E 7547 7548 75A7 75AA 7679 76C4 7708 7703 7704
7705 770A 76F7 76FB 76FA 77E7 77E8 7806 7811 7812
7805 7810 780F 780E 7809 7803 7813 794A 794C 794B
7945 7944 79D5 79CD 79CF 79D6 79CE 7A80 7A7E 7AD1
7B00 7B01 7C7A 7C78 7C79 7C7F 7C80 7C81 7D03 7D08
7D01 7F58 7F91 7F8D 7FBE 8007 800E 800F 8014 8037
80D8 80C7 80E0 80D1 80C8 80C2 80D0 80C5 80E3 80D9
80DC 80CA 80D5 80C9 80CF 80D7 80E6 80CD 81FF 8221
8294 82D9 82FE 82F9 8307 82E8 8300 82D5 833A 82EB
82D6 82F4 82EC 82E1 82F2 82F5 830C 82FB 82F6 82F0
82EA 82E4 82E0 82FA 82F3 82ED 8677 8674 867C 8673
8841 884E 8867 886A 8869 89D3 8A04 8A07 8D72 8FE3
8FE1 8FEE 8FE0 90F1 90BD 90BF 90D5 90C5 90BE 90C7
90CB 90C8 91D4 91D3 9654 964F 9651 9653 964A 964E
501E 5005 5007 5013 5022 5030 501B 4FF5 4FF4 5033
5037 502C 4FF6 4FF7 5017 501C 5020 5027 5035 502F
5031 500E 515A 5194 5193 51CA 51C4 51C5 51C8 51CE
5261 525A 5252 525E 525F 5255 5262 52CD 530E 539E
5526 54E2 5517 5512 54E7 54F3 54E4 551A 54FF 5504
5508 54EB 5511 5505 54F1 550A 54FB 54F7 54F8 54E0
550E 5503 550B 5701 5702 57CC 5832 57D5 57D2 57BA
57C6 57BD 57BC 57B8 57B6 57BF 57C7 57D0 57B9 57C1
590E 594A 5A19 5A16 5A2D 5A2E 5A15 5A0F 5A17 5A0A
5A1E 5A33 5B6C 5BA7 5BAD 5BAC 5C03 5C56 5C54 5CEC
5CFF 5CEE 5CF1 5CF7 5D00 5CF9 5E29 5E28 5EA8 5EAE
5EAA 5EAC 5F33 5F30 5F67 605D 605A 6067 6041 60A2
6088 6080 6092 6081 609D 6083 6095 609B 6097 6087
609C 608E 6219 6246 62F2 6310 6356 632C 6344 6345
6336 6343 63E4 6339 634B 634A 633C 6329 6341 6334
6358 6354 6359 632D 6347 6333 635A 6351 6338 6357
6340 6348 654A 6546 65C6 65C3 65C4 65C2 664A 665F
6647 6651 6712 6713 681F 681A 6849 6832 6833 683B
684B 684F 6816 6831 681C 6835 682B 682D 682F 684E
6844 6834 681D 6812 6814 6826 6828 682E 684D 683A
6825 6820 6B2C 6B2F 6B2D 6B31 6B34 6B6D 8082 6B88
6BE6 6BE4 6BE8 6BE3 6BE2 6BE7 6C25 6D7A 6D63 6D64
6D76 6D0D 6D61 6D92 6D58 6D62 6D6D 6D6F 6D91 6D8D
6DEF 6D7F 6D86 6D5E 6D67 6D60 6D97 6D70 6D7C 6D5F
6D82 6D98 6D2F 6D68 6D8B 6D7E 6D80 6D84 6D16 6D83
6D7B 6D7D 6D75 6D90 70DC 70D3 70D1 70DD 70CB 7F39
70E2 70D7 70D2 70DE 70E0 70D4 70CD 70C5 70C6 70C7
70DA 70CE 70E1 7242 7278 7277 7276 7300 72FA 72F4
72FE 72F6 72F3 72FB 7301 73D3 73D9 73E5 73D6 73BC
73E7 73E3 73E9 73DC 73D2 73DB 73D4 73DD 73DA 73D7
73D8 73E8 74DE 74DF 74F4 74F5 7521 755B 755F 75B0
75C1 75BB 75C4 75C0 75BF 75B6 75BA 768A 76C9 771D
771B 7710 7713 7712 7723 7711 7715 7719 771A 7722
7727 7823 782C 7822 7835 782F 7828 782E 782B 7821
7829 7833 782A 7831 7954 795B 794F 795C 7953 7952
7951 79EB 79EC 79E0 79EE 79ED 79EA 79DC 79DE 79DD
7A86 7A89 7A85 7A8B 7A8C 7A8A 7A87 7AD8 7B10 7B04
7B13 7B05 7B0F 7B08 7B0A 7B0E 7B09 7B12 7C84 7C91
7C8A 7C8C 7C88 7C8D 7C85 7D1E 7D1D 7D11 7D0E 7D18
7D16 7D13 7D1F 7D12 7D0F 7D0C 7F5C 7F61 7F5E 7F60
7F5D 7F5B 7F96 7F92 7FC3 7FC2 7FC0 8016 803E 8039
80FA 80F2 80F9 80F5 8101 80FB 8100 8201 822F 8225
8333 832D 8344 8319 8351 8325 8356 833F 8341 8326
831C 8322 8342 834E 831B 832A 8308 833C 834D 8316
8324 8320 8337 832F 8329 8347 8345 834C 8353 831E
832C 834B 8327 8348 8653 8652 86A2 86A8 8696 868D
8691 869E 8687 8697 8686 868B 869A 8685 86A5 8699
86A1 86A7 8695 8698 868E 869D 8690 8694 8843 8844
886D 8875 8876 8872 8880 8871 887F 886F 8883 887E
8874 887C 8A12 8C47 8C57 8C7B 8CA4 8CA3 8D76 8D78
8DB5 8DB7 8DB6 8ED1 8ED3 8FFE 8FF5 9002 8FFF 8FFB
9004 8FFC 8FF6 90D6 90E0 90D9 90DA 90E3 90DF 90E5
90D8 90DB 90D7 90DC 90E4 9150 914E 914F 91D5 91E2
91DA 965C 965F 96BC 98E3 9ADF 9B2F 4E7F 5070 506A
5061 505E 5060 5053 504B 505D 5072 5048 504D 5041
505B 504A 5062 5015 5045 505F 5069 506B 5063 5064
5046 5040 506E 5073 5057 5051 51D0 526B 526D 526C
526E 52D6 52D3 532D 539C 5575 5576 553C 554D 5550
5534 552A 5551 5562 5536 5535 5530 5552 5545 550C
5532 5565 554E 5539 5548 552D 553B 5540 554B 570A
5707 57FB 5814 57E2 57F6 57DC 57F4 5800 57ED 57FD
5808 57F8 580B 57F3 57CF 5807 57EE 57E3 57F2 57E5
57EC 57E1 580E 57FC 5810 57E7 5801 580C 57F1 57E9
57F0 580D 5804 595C 5A60 5A58 5A55 5A67 5A5E 5A38
5A35 5A6D 5A50 5A5F 5A65 5A6C 5A53 5A64 5A57 5A43
5A5D 5A52 5A44 5A5B 5A48 5A8E 5A3E 5A4D 5A39 5A4C
5A70 5A69 5A47 5A51 5A56 5A42 5A5C 5B72 5B6E 5BC1
5BC0 5C59 5D1E 5D0B 5D1D 5D1A 5D20 5D0C 5D28 5D0D
5D26 5D25 5D0F 5D30 5D12 5D23 5D1F 5D2E 5E3E 5E34
5EB1 5EB4 5EB9 5EB2 5EB3 5F36 5F38 5F9B 5F96 5F9F
608A 6090 6086 60BE 60B0 60BA 60D3 60D4 60CF 60E4
60D9 60DD 60C8 60B1 60DB 60B7 60CA 60BF 60C3 60CD
60C0 6332 6365 638A 6382 637D 63BD 639E 63AD 639D
6397 63AB 638E 636F 6387 6390 636E 63AF 6375 639C
636D 63AE 637C 63A4 633B 639F 6378 6385 6381 6391
638D 6370 6553 65CD 6665 6661 665B 6659 665C 6662
6718 6879 6887 6890 689C 686D 686E 68AE 68AB 6956
686F 68A3 68AC 68A9 6875 6874 68B2 688F 6877 6892
687C 686B 6872 68AA 6880 6871 687E 689B 6896 688B
68A0 6889 68A4 6878 687B 6891 688C 688A 687D 6B36
6B33 6B37 6B38 6B91 6B8F 6B8D 6B8E 6B8C 6C2A 6DC0
6DAB 6DB4 6DB3 6E74 6DAC 6DE9 6DE2 6DB7 6DF6 6DD4
6E00 6DC8 6DE0 6DDF 6DD6 6DBE 6DE5 6DDC 6DDD 6DDB
6DF4 6DCA 6DBD 6DED 6DF0 6DBA 6DD5 6DC2 6DCF 6DC9
6DD0 6DF2 6DD3 6DFD 6DD7 6DCD 6DE3 6DBB 70FA 710D
70F7 7117 70F4 710C 70F0 7104 70F3 7110 70FC 70FF
7106 7113 7100 70F8 70F6 710B 7102 710E 727E 727B
727C 727F 731D 7317 7307 7311 7318 730A 7308 72FF
730F 731E 7388 73F6 73F8 73F5 7404 7401 73FD 7407
7400 73FA 73FC 73FF 740C 740B 73F4 7408 7564 7563
75CE 75D2 75CF 75CB 75CC 75D1 75D0 768F 7689 76D3
7739 772F 772D 7731 7732 7734 7733 773D 7725 773B
7735 7848 7852 7849 784D 784A 784C 7826 7845 7850
7964 7967 7969 796A 7963 796B 7961 79BB 79FA 79F8
79F6 79F7 7A8F 7A94 7A90 7B35 7B47 7B34 7B25 7B30
7B22 7B24 7B33 7B18 7B2A 7B1D 7B31 7B2B 7B2D 7B2F
7B32 7B38 7B1A 7B23 7C94 7C98 7C96 7CA3 7D35 7D3D
7D38 7D36 7D3A 7D45 7D2C 7D29 7D41 7D47 7D3E 7D3F
7D4A 7D3B 7D28 7F63 7F95 7F9C 7F9D 7F9B 7FCA 7FCB
7FCD 7FD0 7FD1 7FC7 7FCF 7FC9 801F 801E 801B 8047
8043 8048 8118 8125 8119 811B 812D 811F 812C 811E
8121 8115 8127 811D 8122 8211 8238 8233 823A 8234
8232 8274 8390 83A3 83A8 838D 837A 8373 83A4 8374
838F 8381 8395 8399 8375 8394 83A9 837D 8383 838C
839D 839B 83AA 838B 837E 83A5 83AF 8388 8397 83B0
837F 83A6 8387 83AE 8376 839A 8659 8656 86BF 86B7
86C2 86C1 86C5 86BA 86B0 86C8 86B9 86B3 86B8 86CC
86B4 86BB 86BC 86C3 86BD 86BE 8852 8889 8895 88A8
88A2 88AA 889A 8891 88A1 889F 8898 88A7 8899 889B
8897 88A4 88AC 888C 8893 888E 8982 89D6 89D9 89D5
8A30 8A27 8A2C 8A1E 8C39 8C3B 8C5C 8C5D 8C7D 8CA5
8D7D 8D7B 8D79 8DBC 8DC2 8DB9 8DBF 8DC1 8ED8 8EDE
8EDD 8EDC 8ED7 8EE0 8EE1 9024 900B 9011 901C 900C
9021 90EF 90EA 90F0 90F4 90F2 90F3 90D4 90EB 90EC
90E9 9156 9158 915A 9153 9155 91EC 91F4 91F1 91F3
91F8 91E4 91F9 91EA 91EB 91F7 91E8 91EE 957A 9586
9588 967C 966D 966B 9671 966F 96BF 976A 9804 98E5
9997 509B 5095 5094 509E 508B 50A3 5083 508C 508E
509D 5068 509C 5092 5082 5087 515F 51D4 5312 5311
53A4 53A7 5591 55A8 55A5 55AD 5577 5645 55A2 5593
5588 558F 55B5 5581 55A3 5592 55A4 557D 558C 55A6
557F 5595 55A1 558E 570C 5829 5837 5819 581E 5827
5823 5828 57F5 5848 5825 581C 581B 5833 583F 5836
582E 5839 5838 582D 582C 583B 5961 5AAF 5A94 5A9F
5A7A 5AA2 5A9E 5A78 5AA6 5A7C 5AA5 5AAC 5A95 5AAE
5A37 5A84 5A8A 5A97 5A83 5A8B 5AA9 5A7B 5A7D 5A8C
5A9C 5A8F 5A93 5A9D 5BEA 5BCD 5BCB 5BD4 5BD1 5BCA
5BCE 5C0C 5C30 5D37 5D43 5D6B 5D41 5D4B 5D3F 5D35
5D51 5D4E 5D55 5D33 5D3A 5D52 5D3D 5D31 5D59 5D42
5D39 5D49 5D38 5D3C 5D32 5D36 5D40 5D45 5E44 5E41
5F58 5FA6 5FA5 5FAB 60C9 60B9 60CC 60E2 60CE 60C4
6114 60F2 610A 6116 6105 60F5 6113 60F8 60FC 60FE
60C1 6103 6118 611D 6110 60FF 6104 610B 624A 6394
63B1 63B0 63CE 63E5 63E8 63EF 63C3 649D 63F3 63CA
63E0 63F6 63D5 63F2 63F5 6461 63DF 63BE 63DD 63DC
63C4 63D8 63D3 63C2 63C7 63CC 63CB 63C8 63F0 63D7
63D9 6532 6567 656A 6564 655C 6568 6565 658C 659D
659E 65AE 65D0 65D2 667C 666C 667B 6680 6671 6679
666A 6672 6701 690C 68D3 6904 68DC 692A 68EC 68EA
68F1 690F 68D6 68F7 68EB 68E4 68F6 6913 6910 68F3
68E1 6907 68CC 6908 6970 68B4 6911 68EF 68C6 6914
68F8 68D0 68FD 68FC 68E8 690B 690A 6917 68CE 68C8
68DD 68DE 68E6 68F4 68D1 6906 68D4 68E9 6915 6925
68C7 6B39 6B3B 6B3F 6B3C 6B94 6B97 6B99 6B95 6BBD
6BF0 6BF2 6BF3 6C30 6DFC 6E46 6E47 6E1F 6E49 6E88
6E3C 6E3D 6E45 6E62 6E2B 6E3F 6E41 6E5D 6E73 6E1C
6E33 6E4B 6E40 6E51 6E3B 6E03 6E2E 6E5E 6E68 6E5C
6E61 6E31 6E28 6E60 6E71 6E6B 6E39 6E22 6E30 6E53
6E65 6E27 6E78 6E64 6E77 6E55 6E79 6E52 6E66 6E35
6E36 6E5A 7120 711E 712F 70FB 712E 7131 7123 7125
7122 7132 711F 7128 713A 711B 724B 725A 7288 7289
7286 7285 728B 7312 730B 7330 7322 7331 7333 7327
7332 732D 7326 7323 7335 730C 742E 742C 7430 742B
7416 741A 7421 742D 7431 7424 7423 741D 7429 7420
7432 74FB 752F 756F 756C 75E7 75DA 75E1 75E6 75DD
75DF 75E4 75D7 7695 7692 76DA 7746 7747 7744 774D
7745 774A 774E 774B 774C 77DE 77EC 7860 7864 7865
785C 786D 7871 786A 786E 7870 7869 7868 785E 7862
7974 7973 7972 7970 7A02 7A0A 7A03 7A0C 7A04 7A99
7AE6 7AE4 7B4A 7B3B 7B44 7B48 7B4C 7B4E 7B40 7B58
7B45 7CA2 7C9E 7CA8 7CA1 7D58 7D6F 7D63 7D53 7D56
7D67 7D6A 7D4F 7D6D 7D5C 7D6B 7D52 7D54 7D69 7D51
7D5F 7D4E 7F3E 7F3F 7F65 7F66 7FA2 7FA0 7FA1 7FD7
8051 804F 8050 80FE 80D4 8143 814A 8152 814F 8147
813D 814D 813A 81E6 81EE 81F7 81F8 81F9 8204 823C
823D 823F 8275 833B 83CF 83F9 8423 83C0 83E8 8412
83E7 83E4 83FC 83F6 8410 83C6 83C8 83EB 83E3 83BF
8401 83DD 83E5 83D8 83FF 83E1 83CB 83CE 83D6 83F5
83C9 8409 840F 83DE 8411 8406 83C2 83F3 83D5 83FA
83C7 83D1 83EA 8413 83C3 83EC 83EE 83C4 83FB 83D7
83E2 841B 83DB 83FE 86D8 86E2 86E6 86D3 86E3 86DA
86EA 86DD 86EB 86DC 86EC 86E9 86D7 86E8 86D1 8848
8856 8855 88BA 88D7 88B9 88B8 88C0 88BE 88B6 88BC
88B7 88BD 88B2 8901 88C9 8995 8998 8997 89DD 89DA
89DB 8A4E 8A4D 8A39 8A59 8A40 8A57 8A58 8A44 8A45
8A52 8A48 8A51 8A4A 8A4C 8A4F 8C5F 8C81 8C80 8CBA
8CBE 8CB0 8CB9 8CB5 8D84 8D80 8D89 8DD8 8DD3 8DCD
8DC7 8DD6 8DDC 8DCF 8DD5 8DD9 8DC8 8DD7 8DC5 8EEF
8EF7 8EFA 8EF9 8EE6 8EEE 8EE5 8EF5 8EE7 8EE8 8EF6
8EEB 8EF1 8EEC 8EF4 8EE9 902D 9034 902F 9106 912C
9104 90FF 90FC 9108 90F9 90FB 9101 9100 9107 9105
9103 9161 9164 915F 9162 9160 9201 920A 9225 9203
921A 9226 920F 920C 9200 9212 91FF 91FD 9206 9204
9227 9202 921C 9224 9219 9217 9205 9216 957B 958D
958C 9590 9687 967E 9688 9689 9683 9680 96C2 96C8
96C3 96F1 96F0 976C 9770 976E 9807 98A9 98EB 9CE6
9EF9 4E83 4E84 4EB6 50BD 50BF 50C6 50AE 50C4 50CA
50B4 50C8 50C2 50B0 50C1 50BA 50B1 50CB 50C9 50B6
50B8 51D7 527A 5278 527B 527C 55C3 55DB 55CC 55D0
55CB 55CA 55DD 55C0 55D4 55C4 55E9 55BF 55D2 558D
55CF 55D5 55E2 55D6 55C8 55F2 55CD 55D9 55C2 5714
5853 5868 5864 584F 584D 5849 586F 5855 584E 585D
5859 5865 585B 583D 5863 5871 58FC 5AC7 5AC4 5ACB
5ABA 5AB8 5AB1 5AB5 5AB0 5ABF 5AC8 5ABB 5AC6 5AB7
5AC0 5ACA 5AB4 5AB6 5ACD 5AB9 5A90 5BD6 5BD8 5BD9
5C1F 5C33 5D71 5D63 5D4A 5D65 5D72 5D6C 5D5E 5D68
5D67 5D62 5DF0 5E4F 5E4E 5E4A 5E4D 5E4B 5EC5 5ECC
5EC6 5ECB 5EC7 5F40 5FAF 5FAD 60F7 6149 614A 612B
6145 6136 6132 612E 6146 612F 614F 6129 6140 6220
9168 6223 6225 6224 63C5 63F1 63EB 6410 6412 6409
6420 6424 6433 6443 641F 6415 6418 6439 6437 6422
6423 640C 6426 6430 6428 6441 6435 642F 640A 641A
6440 6425 6427 640B 63E7 641B 642E 6421 640E 656F
6592 65D3 6686 668C 6695 6690 668B 668A 6699 6694
6678 6720 6966 695F 6938 694E 6962 6971 693F 6945
696A 6939 6942 6957 6959 697A 6948 6949 6935 696C
6933 693D 6965 68F0 6978 6934 6969 6940 696F 6944
6976 6958 6941 6974 694C 693B 694B 6937 695C 694F
6951 6932 6952 692F 697B 693C 6B46 6B45 6B43 6B42
6B48 6B41 6B9B 6BFB 6BFC 6BF9 6BF7 6BF8 6E9B 6ED6
6EC8 6E8F 6EC0 6E9F 6E93 6E94 6EA0 6EB1 6EB9 6EC6
6ED2 6EBD 6EC1 6E9E 6EC9 6EB7 6EB0 6ECD 6EA6 6ECF
6EB2 6EBE 6EC3 6EDC 6ED8 6E99 6E92 6E8E 6E8D 6EA4
6EA1 6EBF 6EB3 6ED0 6ECA 6E97 6EAE 6EA3 7147 7154
7152 7163 7160 7141 715D 7162 7172 7178 716A 7161
7142 7158 7143 714B 7170 715F 7150 7153 7144 714D
715A 724F 728D 728C 7291 7290 728E 733C 7342 733B
733A 7340 734A 7349 7444 744A 744B 7452 7451 7457
7440 744F 7450 744E 7442 7446 744D 7454 74E1 74FF
74FE 74FD 751D 7579 7577 6983 75EF 760F 7603 75F7
75FE 75FC 75F9 75F8 7610 75FB 75F6 75ED 75F5 75FD
7699 76B5 76DD 7755 775F 7760 7752 7756 775A 7769
7767 7754 7759 776D 77E0 7887 789A 7894 788F 7884
7895 7885 7886 78A1 7883 7879 7899 7880 7896 787B
797C 7982 797D 7979 7A11 7A18 7A19 7A12 7A17 7A15
7A22 7A13 7A1B 7A10 7AA3 7AA2 7A9E 7AEB 7B66 7B64
7B6D 7B74 7B69 7B72 7B65 7B73 7B71 7B70 7B61 7B78
7B76 7B63 7CB2 7CB4 7CAF 7D88 7D86 7D80 7D8D 7D7F
7D85 7D7A 7D8E 7D7B 7D83 7D7C 7D8C 7D94 7D84 7D7D
7D92 7F6D 7F6B 7F67 7F68 7F6C 7FA6 7FA5 7FA7 7FDB
7FDC 8021 8164 8160 8177 815C 8169 815B 8162 8172
6721 815E 8176 8167 816F 8144 8161 821D 8249 8244
8240 8242 8245 84F1 843F 8456 8476 8479 848F 848D
8465 8451 8440 8486 8467 8430 844D 847D 845A 8459
8474 8473 845D 8507 845E 8437 843A 8434 847A 8443
8478 8432 8445 8429 83D9 844B 842F 8442 842D 845F
8470 8439 844E 844C 8452 846F 84C5 848E 843B 8447
8436 8433 8468 847E 8444 842B 8460 8454 846E 8450
870B 8704 86F7 870C 86FA 86D6 86F5 874D 86F8 870E
8709 8701 86F6 870D 8705 88D6 88CB 88CD 88CE 88DE
88DB 88DA 88CC 88D0 8985 899B 89DF 89E5 89E4 89E1
89E0 89E2 89DC 89E6 8A76 8A86 8A7F 8A61 8A3F 8A77
8A82 8A84 8A75 8A83 8A81 8A74 8A7A 8C3C 8C4B 8C4A
8C65 8C64 8C66 8C86 8C84 8C85 8CCC 8D68 8D69 8D91
8D8C 8D8E 8D8F 8D8D 8D93 8D94 8D90 8D92 8DF0 8DE0
8DEC 8DF1 8DEE 8DD0 8DE9 8DE3 8DE2 8DE7 8DF2 8DEB
8DF4 8F06 8EFF 8F01 8F00 8F05 8F07 8F08 8F02 8F0B
9052 903F 9044 9049 903D 9110 910D 910F 9111 9116
9114 910B 910E 916E 916F 9248 9252 9230 923A 9266
9233 9265 925E 9283 922E 924A 9246 926D 926C 924F
9260 9267 926F 9236 9261 9270 9231 9254 9263 9250
9272 924E 9253 924C 9256 9232 959F 959C 959E 959B
9692 9693 9691 9697 96CE 96FA 96FD 96F8 96F5 9773
9777 9778 9772 980F 980D 980E 98AC 98F6 98F9 99AF
99B2 99B0 99B5 9AAD 9AAB 9B5B 9CEA 9CED 9CE7 9E80
9EFD 50E6 50D4 50D7 50E8 50F3 50DB 50EA 50DD 50E4
50D3 50EC 50F0 50EF 50E3 50E0 51D8 5280 5281 52E9
52EB 5330 53AC 5627 5615 560C 5612 55FC 560F 561C
5601 5613 5602 55FA 561D 5604 55FF 55F9 5889 587C
5890 5898 5886 5881 587F 5874 588B 587A 5887 5891
588E 5876 5882 5888 587B 5894 588F 58FE 596B 5ADC
5AEE 5AE5 5AD5 5AEA 5ADA 5AED 5AEB 5AF3 5AE2 5AE0
5ADB 5AEC 5ADE 5ADD 5AD9 5AE8 5ADF 5B77 5BE0 5BE3
5C63 5D82 5D80 5D7D 5D86 5D7A 5D81 5D77 5D8A 5D89
5D88 5D7E 5D7C 5D8D 5D79 5D7F 5E58 5E59 5E53 5ED8
5ED1 5ED7 5ECE 5EDC 5ED5 5ED9 5ED2 5ED4 5F44 5F43
5F6F 5FB6 612C 6128 6141 615E 6171 6173 6152 6153
6172 616C 6180 6174 6154 617A 615B 6165 613B 616A
6161 6156 6229 6227 622B 642B 644D 645B 645D 6474
6476 6472 6473 647D 6475 6466 64A6 644E 6482 645E
645C 644B 6453 6460 6450 647F 643F 646C 646B 6459
6465 6477 6573 65A0 66A1 66A0 669F 6705 6704 6722
69B1 69B6 69C9 69A0 69CE 6996 69B0 69AC 69BC 6991
6999 698E 69A7 698D 69A9 69BE 69AF 69BF 69C4 69BD
69A4 69D4 69B9 69CA 699A 69CF 69B3 6993 69AA 69A1
699E 69D9 6997 6990 69C2 69B5 69A5 69C6 6B4A 6B4D
6B4B 6B9E 6B9F 6BA0 6BC3 6BC4 6BFE 6ECE 6EF5 6EF1
6F03 6F25 6EF8 6F37 6EFB 6F2E 6F09 6F4E 6F19 6F1A
6F27 6F18 6F3B 6F12 6EED 6F0A 6F36 6F73 6EF9 6EEE
6F2D 6F40 6F30 6F3C 6F35 6EEB 6F07 6F0E 6F43 6F05
6EFD 6EF6 6F39 6F1C 6EFC 6F3A 6F1F 6F0D 6F1E 6F08
6F21 7187 7190 7189 7180 7185 7182 718F 717B 7186
7181 7197 7244 7253 7297 7295 7293 7343 734D 7351
734C 7462 7473 7471 7475 7472 7467 746E 7500 7502
7503 757D 7590 7616 7608 760C 7615 7611 760A 7614
76B8 7781 777C 7785 7782 776E 7780 776F 777E 7783
78B2 78AA 78B4 78AD 78A8 787E 78AB 789E 78A5 78A0
78AC 78A2 78A4 7998 798A 798B 7996 7995 7994 7993
7997 7988 7992 7990 7A2B 7A4A 7A30 7A2F 7A28 7A26
7AA8 7AAB 7AAC 7AEE 7B88 7B9C 7B8A 7B91 7B90 7B96
7B8D 7B8C 7B9B 7B8E 7B85 7B98 5284 7B99 7BA4 7B82
7CBB 7CBF 7CBC 7CBA 7DA7 7DB7 7DC2 7DA3 7DAA 7DC1
7DC0 7DC5 7D9D 7DCE 7DC4 7DC6 7DCB 7DCC 7DAF 7DB9
7D96 7DBC 7D9F 7DA6 7DAE 7DA9 7DA1 7DC9 7F73 7FE2
7FE3 7FE5 7FDE 8024 805D 805C 8189 8186 8183 8187
818D 818C 818B 8215 8497 84A4 84A1 849F 84BA 84CE
84C2 84AC 84AE 84AB 84B9 84B4 84C1 84CD 84AA 849A
84B1 84D0 849D 84A7 84BB 84A2 8494 84C7 84CC 849B
84A9 84AF 84A8 84D6 8498 84B6 84CF 84A0 84D7 84D4
84D2 84DB 84B0 8491 8661 8733 8723 8728 876B 8740
872E 871E 8721 8719 871B 8743 872C 8741 873E 8746
8720 8732 872A 872D 873C 8712 873A 8731 8735 8742
8726 8727 8738 8724 871A 8730 8711 88F7 88E7 88F1
88F2 88FA 88FE 88EE 88FC 88F6 88FB 88F0 88EC 88EB
899D 89A1 899F 899E 89E9 89EB 89E8 8AAB 8A99 8A8B
8A92 8A8F 8A96 8C3D 8C68 8C69 8CD5 8CCF 8CD7 8D96
8E09 8E02 8DFF 8E0D 8DFD 8E0A 8E03 8E07 8E06 8E05
8DFE 8E00 8E04 8F10 8F11 8F0E 8F0D 9123 911C 9120
9122 911F 911D 911A 9124 9121 911B 917A 9172 9179
9173 92A5 92A4 9276 929B 927A 92A0 9294 92AA 928D
92A6 929A 92AB 9279 9297 927F 92A3 92EE 928E 9282
9295 92A2 927D 9288 92A1 928A 9286 928C 9299 92A7
927E 9287 92A9 929D 928B 922D 969E 96A1 96FF 9758
977D 977A 977E 9783 9780 9782 977B 9784 9781 977F
97CE 97CD 9816 98AD 98AE 9902 9900 9907 999D 999C
99C3 99B9 99BB 99BA 99C2 99BD 99C7 9AB1 9AE3 9AE7
9B3E 9B3F 9B60 9B61 9B5F 9CF1 9CF2 9CF5 9EA7 50FF
5103 5130 50F8 5106 5107 50F6 50FE 510B 510C 50FD
510A 528B 528C 52F1 52EF 5648 5642 564C 5635 5641
564A 5649 5646 5658 565A 5640 5633 563D 562C 563E
5638 562A 563A 571A 58AB 589D 58B1 58A0 58A3 58AF
58AC 58A5 58A1 58FF 5AFF 5AF4 5AFD 5AF7 5AF6 5B03
5AF8 5B02 5AF9 5B01 5B07 5B05 5B0F 5C67 5D99 5D97
5D9F 5D92 5DA2 5D93 5D95 5DA0 5D9C 5DA1 5D9A 5D9E
5E69 5E5D 5E60 5E5C 7DF3 5EDB 5EDE 5EE1 5F49 5FB2
618B 6183 6179 61B1 61B0 61A2 6189 619B 6193 61AF
61AD 619F 6192 61AA 61A1 618D 6166 61B3 622D 646E
6470 6496 64A0 6485 6497 649C 648F 648B 648A 648C
64A3 649F 6468 64B1 6498 6576 657A 6579 657B 65B2
65B3 66B5 66B0 66A9 66B2 66B7 66AA 66AF 6A00 6A06
6A17 69E5 69F8 6A15 69F1 69E4 6A20 69FF 69EC 69E2
6A1B 6A1D 69FE 6A27 69F2 69EE 6A14 69F7 69E7 6A40
6A08 69E6 69FB 6A0D 69FC 69EB 6A09 6A04 6A18 6A25
6A0F 69F6 6A26 6A07 69F4 6A16 6B51 6BA5 6BA3 6BA2
6BA6 6C01 6C00 6BFF 6C02 6F41 6F26 6F7E 6F87 6FC6
6F92 6F8D 6F89 6F8C 6F62 6F4F 6F85 6F5A 6F96 6F76
6F6C 6F82 6F55 6F72 6F52 6F50 6F57 6F94 6F93 6F5D
6F00 6F61 6F6B 6F7D 6F67 6F90 6F53 6F8B 6F69 6F7F
6F95 6F63 6F77 6F6A 6F7B 71B2 71AF 719B 71B0 71A0
719A 71A9 71B5 719D 71A5 719E 71A4 71A1 71AA 719C
71A7 71B3 7298 729A 7358 7352 735E 735F 7360 735D
735B 7361 735A 7359 7362 7487 7489 748A 7486 7481
747D 7485 7488 747C 7479 7508 7507 757E 7625 761E
7619 761D 761C 7623 761A 7628 761B 769C 769D 769E
769B 778D 778F 7789 7788 78CD 78BB 78CF 78CC 78D1
78CE 78D4 78C8 78C3 78C4 78C9 799A 79A1 79A0 799C
79A2 799B 6B76 7A39 7AB2 7AB4 7AB3 7BB7 7BCB 7BBE
7BAC 7BCE 7BAF 7BB9 7BCA 7BB5 7CC5 7CC8 7CCC 7CCB
7DF7 7DDB 7DEA 7DE7 7DD7 7DE1 7E03 7DFA 7DE6 7DF6
7DF1 7DF0 7DEE 7DDF 7F76 7FAC 7FB0 7FAD 7FED 7FEB
7FEA 7FEC 7FE6 7FE8 8064 8067 81A3 819F 819E 8195
81A2 8199 8197 8216 824F 8253 8252 8250 824E 8251
8524 853B 850F 8500 8529 850E 8509 850D 851F 850A
8527 851C 84FB 852B 84FA 8508 850C 84F4 852A 84F2
8515 84F7 84EB 84F3 84FC 8512 84EA 84E9 8516 84FE
8528 851D 852E 8502 84FD 851E 84F6 8531 8526 84E7
84E8 84F0 84EF 84F9 8518 8520 8530 850B 8519 852F
8662 8756 8763 8764 8777 87E1 8773 8758 8754 875B
8752 8761 875A 8751 875E 876D 876A 8750 874E 875F
875D 876F 876C 877A 876E 875C 8765 874F 877B 8775
8762 8767 8769 885A 8905 890C 8914 890B 8917 8918
8919 8906 8916 8911 890E 8909 89A2 89A4 89A3 89ED
89F0 89EC 8ACF 8AC6 8AB8 8AD3 8AD1 8AD4 8AD5 8ABB
8AD7 8ABE 8AC0 8AC5 8AD8 8AC3 8ABA 8ABD 8AD9 8C3E
8C4D 8C8F 8CE5 8CDF 8CD9 8CE8 8CDA 8CDD 8CE7 8DA0
8D9C 8DA1 8D9B 8E20 8E23 8E25 8E24 8E2E 8E15 8E1B
8E16 8E11 8E19 8E26 8E27 8E14 8E12 8E18 8E13 8E1C
8E17 8E1A 8F2C 8F24 8F18 8F1A 8F20 8F23 8F16 8F17
9073 9070 906F 9067 906B 912F 912B 9129 912A 9132
9126 912E 9185 9186 918A 9181 9182 9184 9180 92D0
92C3 92C4 92C0 92D9 92B6 92CF 92F1 92DF 92D8 92E9
92D7 92DD 92CC 92EF 92C2 92E8 92CA 92C8 92CE 92E6
92CD 92D5 92C9 92E0 92DE 92E7 92D1 92D3 92B5 92E1
92C6 92B4 957C 95AC 95AB 95AE 95B0 96A4 96A2 96D3
9705 9708 9702 975A 978A 978E 9788 97D0 97CF 981E
981D 9826 9829 9828 9820 981B 9827 98B2 9908 98FA
9911 9914 9916 9917 9915 99DC 99CD 99CF 99D3 99D4
99CE 99C9 99D6 99D8 99CB 99D7 99CC 9AB3 9AEC 9AEB
9AF3 9AF2 9AF1 9B46 9B43 9B67 9B74 9B71 9B66 9B76
9B75 9B70 9B68 9B64 9B6C 9CFC 9CFA 9CFD 9CFF 9CF7
9D07 9D00 9CF9 9CFB 9D08 9D05 9D04 9E83 9ED3 9F0F
9F10 511C 5113 5117 511A 5111 51DE 5334 53E1 5670
5660 566E 5673 5666 5663 566D 5672 565E 5677 571C
571B 58C8 58BD 58C9 58BF 58BA 58C2 58BC 58C6 5B17
5B19 5B1B 5B21 5B14 5B13 5B10 5B16 5B28 5B1A 5B20
5B1E 5BEF 5DAC 5DB1 5DA9 5DA7 5DB5 5DB0 5DAE 5DAA
5DA8 5DB2 5DAD 5DAF 5DB4 5E67 5E68 5E66 5E6F 5EE9
5EE7 5EE6 5EE8 5EE5 5F4B 5FBC 619D 61A8 6196 61C5
61B4 61C6 61C1 61CC 61BA 61BF 61B8 618C 64D7 64D6
64D0 64CF 64C9 64BD 6489 64C3 64DB 64F3 64D9 6533
657F 657C 65A2 66C8 66BE 66C0 66CA 66CB 66CF 66BD
66BB 66BA 66CC 6723 6A34 6A66 6A49 6A67 6A32 6A68
6A3E 6A5D 6A6D 6A76 6A5B 6A51 6A28 6A5A 6A3B 6A3F
6A41 6A6A 6A64 6A50 6A4F 6A54 6A6F 6A69 6A60 6A3C
6A5E 6A56 6A55 6A4D 6A4E 6A46 6B55 6B54 6B56 6BA7
6BAA 6BAB 6BC8 6BC7 6C04 6C03 6C06 6FAD 6FCB 6FA3
6FC7 6FBC 6FCE 6FC8 6F5E 6FC4 6FBD 6F9E 6FCA 6FA8
7004 6FA5 6FAE 6FBA 6FAC 6FAA 6FCF 6FBF 6FB8 6FA2
6FC9 6FAB 6FCD 6FAF 6FB2 6FB0 71C5 71C2 71BF 71B8
71D6 71C0 71C1 71CB 71D4 71CA 71C7 71CF 71BD 71D8
71BC 71C6 71DA 71DB 729D 729E 7369 7366 7367 736C
7365 736B 736A 747F 749A 74A0 7494 7492 7495 74A1
750B 7580 762F 762D 7631 763D 7633 763C 7635 7632
7630 76BB 76E6 779A 779D 77A1 779C 779B 77A2 77A3
7795 7799 7797 78DD 78E9 78E5 78EA 78DE 78E3 78DB
78E1 78E2 78ED 78DF 78E0 79A4 7A44 7A48 7A47 7AB6
7AB8 7AB5 7AB1 7AB7 7BDE 7BE3 7BE7 7BDD 7BD5 7BE5
7BDA 7BE8 7BF9 7BD4 7BEA 7BE2 7BDC 7BEB 7BD8 7BDF
7CD2 7CD4 7CD7 7CD0 7CD1 7E12 7E21 7E17 7E0C 7E1F
7E20 7E13 7E0E 7E1C 7E15 7E1A 7E22 7E0B 7E0F 7E16
7E0D 7E14 7E25 7E24 7F43 7F7B 7F7C 7F7A 7FB1 7FEF
802A 8029 806C 81B1 81A6 81AE 81B9 81B5 81AB 81B0
81AC 81B4 81B2 81B7 81A7 81F2 8255 8256 8257 8556
8545 856B 854D 8553 8561 8558 8540 8546 8564 8541
8562 8544 8551 8547 8563 853E 855B 8571 854E 856E
8575 8555 8567 8560 858C 8566 855D 8554 8565 856C
8663 8665 8664 879B 878F 8797 8793 8792 8788 8781
8796 8798 8779 8787 87A3 8785 8790 8791 879D 8784
8794 879C 879A 8789 891E 8926 8930 892D 892E 8927
8931 8922 8929 8923 892F 892C 891F 89F1 8AE0 8AE2
8AF2 8AF4 8AF5 8ADD 8B14 8AE4 8ADF 8AF0 8AC8 8ADE
8AE1 8AE8 8AFF 8AEF 8AFB 8C91 8C92 8C90 8CF5 8CEE
8CF1 8CF0 8CF3 8D6C 8D6E 8DA5 8DA7 8E33 8E3E 8E38
8E40 8E45 8E36 8E3C 8E3D 8E41 8E30 8E3F 8EBD 8F36
8F2E 8F35 8F32 8F39 8F37 8F34 9076 9079 907B 9086
90FA 9133 9135 9136 9193 9190 9191 918D 918F 9327
931E 9308 931F 9306 930F 937A 9338 933C 931B 9323
9312 9301 9346 932D 930E 930D 92CB 931D 92FA 9325
9313 92F9 92F7 9334 9302 9324 92FF 9329 9339 9335
932A 9314 930C 930B 92FE 9309 9300 92FB 9316 95BC
95CD 95BE 95B9 95BA 95B6 95BF 95B5 95BD 96A9 96D4
970B 9712 9710 9799 9797 9794 97F0 97F8 9835 982F
9832 9924 991F 9927 9929 999E 99EE 99EC 99E5 99E4
99F0 99E3 99EA 99E9 99E7 9AB9 9ABF 9AB4 9ABB 9AF6
9AFA 9AF9 9AF7 9B33 9B80 9B85 9B87 9B7C 9B7E 9B7B
9B82 9B93 9B92 9B90 9B7A 9B95 9B7D 9B88 9D25 9D17
9D20 9D1E 9D14 9D29 9D1D 9D18 9D22 9D10 9D19 9D1F
9E88 9E86 9E87 9EAE 9EAD 9ED5 9ED6 9EFA 9F12 9F3D
5126 5125 5122 5124 5120 5129 52F4 5693 568C 568D
5686 5684 5683 567E 5682 567F 5681 58D6 58D4 58CF
58D2 5B2D 5B25 5B32 5B23 5B2C 5B27 5B26 5B2F 5B2E
5B7B 5BF1 5BF2 5DB7 5E6C 5E6A 5FBE 5FBB 61C3 61B5
61BC 61E7 61E0 61E5 61E4 61E8 61DE 64EF 64E9 64E3
64EB 64E4 64E8 6581 6580 65B6 65DA 66D2 6A8D 6A96
6A81 6AA5 6A89 6A9F 6A9B 6AA1 6A9E 6A87 6A93 6A8E
6A95 6A83 6AA8 6AA4 6A91 6A7F 6AA6 6A9A 6A85 6A8C
6A92 6B5B 6BAD 6C09 6FCC 6FA9 6FF4 6FD4 6FE3 6FDC
6FED 6FE7 6FE6 6FDE 6FF2 6FDD 6FE2 6FE8 71E1 71F1
71E8 71F2 71E4 71F0 71E2 7373 736E 736F 7497 74B2
74AB 7490 74AA 74AD 74B1 74A5 74AF 7510 7511 7512
750F 7584 7643 7648 7649 7647 76A4 76E9 77B5 77AB
77B2 77B7 77B6 77B4 77B1 77A8 77F0 78F3 78FD 7902
78FB 78FC 78F2 7905 78F9 78FE 7904 79AB 79A8 7A5C
7A5B 7A56 7A58 7A54 7A5A 7ABE 7AC0 7AC1 7C05 7C0F
7BF2 7C00 7BFF 7BFB 7C0E 7BF4 7C0B 7BF3 7C02 7C09
7C03 7C01 7BF8 7BFD 7C06 7BF0 7BF1 7C10 7C0A 7CE8
7E2D 7E3C 7E42 7E33 9848 7E38 7E2A 7E49 7E40 7E47
7E29 7E4C 7E30 7E3B 7E36 7E44 7E3A 7F45 7F7F 7F7E
7F7D 7FF4 7FF2 802C 81BB 81C4 81CC 81CA 81C5 81C7
81BC 81E9 825B 825A 825C 8583 8580 858F 85A7 8595
85A0 858B 85A3 857B 85A4 859A 859E 8577 857C 8589
85A1 857A 8578 8557 858E 8596 8586 858D 8599 859D
8581 85A2 8582 8588 8585 8579 8576 8598 8590 859F
8668 87BE 87AA 87AD 87C5 87B0 87AC 87B9 87B5 87BC
87AE 87C9 87C3 87C2 87CC 87B7 87AF 87C4 87CA 87B4
87B6 87BF 87B8 87BD 87DE 87B2 8935 8933 893C 893E
8941 8952 8937 8942 89AD 89AF 89AE 89F2 89F3 8B1E
8B18 8B16 8B11 8B05 8B0B 8B22 8B0F 8B12 8B15 8B07
8B0D 8B08 8B06 8B1C 8B13 8B1A 8C4F 8C70 8C72 8C71
8C6F 8C95 8C94 8CF9 8D6F 8E4E 8E4D 8E53 8E50 8E4C
8E47 8F43 8F40 9085 907E 9138 919A 91A2 919B 9199
919F 91A1 919D 91A0 93A1 9383 93AF 9364 9356 9347
937C 9358 935C 9376 9349 9350 9351 9360 936D 938F
934C 936A 9379 9357 9355 9352 934F 9371 9377 937B
9361 935E 9363 9367 9380 934E 9359 95C7 95C0 95C9
95C3 95C5 95B7 96AE 96B0 96AC 9720 971F 9718 971D
9719 979A 97A1 979C 979E 979D 97D5 97D4 97F1 9841
9844 984A 9849 9845 9843 9925 992B 992C 992A 9933
9932 992F 992D 9931 9930 9998 99A3 99A1 9A02 99FA
99F4 99F7 99F9 99F8 99F6 99FB 99FD 99FE 99FC 9A03
9ABE 9AFE 9AFD 9B01 9AFC 9B48 9B9A 9BA8 9B9E 9B9B
9BA6 9BA1 9BA5 9BA4 9B86 9BA2 9BA0 9BAF 9D33 9D41
9D67 9D36 9D2E 9D2F 9D31 9D38 9D30 9D45 9D42 9D43
9D3E 9D37 9D40 9D3D 7FF5 9D2D 9E8A 9E89 9E8D 9EB0
9EC8 9EDA 9EFB 9EFF 9F24 9F23 9F22 9F54 9FA0 5131
512D 512E 5698 569C 5697 569A 569D 5699 5970 5B3C
5C69 5C6A 5DC0 5E6D 5E6E 61D8 61DF 61ED 61EE 61F1
61EA 61F0 61EB 61D6 61E9 64FF 6504 64FD 64F8 6501
6503 64FC 6594 65DB 66DA 66DB 66D8 6AC5 6AB9 6ABD
6AE1 6AC6 6ABA 6AB6 6AB7 6AC7 6AB4 6AAD 6B5E 6BC9
6C0B 7007 700C 700D 7001 7005 7014 700E 6FFF 7000
6FFB 7026 6FFC 6FF7 700A 7201 71FF 71F9 7203 71FD
7376 74B8 74C0 74B5 74C1 74BE 74B6 74BB 74C2 7514
7513 765C 7664 7659 7650 7653 7657 765A 76A6 76BD
76EC 77C2 77BA 78FF 790C 7913 7914 7909 7910 7912
7911 79AD 79AC 7A5F 7C1C 7C29 7C19 7C20 7C1F 7C2D
7C1D 7C26 7C28 7C22 7C25 7C30 7E5C 7E50 7E56 7E63
7E58 7E62 7E5F 7E51 7E60 7E57 7E53 7FB5 7FB3 7FF7
7FF8 8075 81D1 81D2 81D0 825F 825E 85B4 85C6 85C0
85C3 85C2 85B3 85B5 85BD 85C7 85C4 85BF 85CB 85CE
85C8 85C5 85B1 85B6 85D2 8624 85B8 85B7 85BE 8669
87E7 87E6 87E2 87DB 87EB 87EA 87E5 87DF 87F3 87E4
87D4 87DC 87D3 87ED 87D8 87E3 87A4 87D7 87D9 8801
87F4 87E8 87DD 8953 894B 894F 894C 8946 8950 8951
8949 8B2A 8B27 8B23 8B33 8B30 8B35 8B47 8B2F 8B3C
8B3E 8B31 8B25 8B37 8B26 8B36 8B2E 8B24 8B3B 8B3D
8B3A 8C42 8C75 8C99 8C98 8C97 8CFE 8D04 8D02 8D00
8E5C 8E62 8E60 8E57 8E56 8E5E 8E65 8E67 8E5B 8E5A
8E61 8E5D 8E69 8E54 8F46 8F47 8F48 8F4B 9128 913A
913B 913E 91A8 91A5 91A7 91AF 91AA 93B5 938C 9392
93B7 939B 939D 9389 93A7 938E 93AA 939E 93A6 9395
9388 9399 939F 938D 93B1 9391 93B2 93A4 93A8 93B4
93A3 93A5 95D2 95D3 95D1 96B3 96D7 96DA 5DC2 96DF
96D8 96DD 9723 9722 9725 97AC 97AE 97A8 97AB 97A4
97AA 97A2 97A5 97D7 97D9 97D6 97D8 97FA 9850 9851
9852 98B8 9941 993C 993A 9A0F 9A0B 9A09 9A0D 9A04
9A11 9A0A 9A05 9A07 9A06 9AC0 9ADC 9B08 9B04 9B05
9B29 9B35 9B4A 9B4C 9B4B 9BC7 9BC6 9BC3 9BBF 9BC1
9BB5 9BB8 9BD3 9BB6 9BC4 9BB9 9BBD 9D5C 9D53 9D4F
9D4A 9D5B 9D4B 9D59 9D56 9D4C 9D57 9D52 9D54 9D5F
9D58 9D5A 9E8E 9E8C 9EDF 9F01 9F00 9F16 9F25 9F2B
9F2A 9F29 9F28 9F4C 9F55 5134 5135 5296 52F7 53B4
56AB 56AD 56A6 56A7 56AA 56AC 58DA 58DD 58DB 5912
5B3D 5B3E 5B3F 5DC3 5E70 5FBF 61FB 6507 6510 650D
6509 650C 650E 6584 65DE 65DD 66DE 6AE7 6AE0 6ACC
6AD1 6AD9 6ACB 6ADF 6ADC 6AD0 6AEB 6ACF 6ACD 6ADE
6B60 6BB0 6C0C 7019 7027 7020 7016 702B 7021 7022
7023 7029 7017 7024 701C 702A 720C 720A 7207 7202
7205 72A5 72A6 72A4 72A3 72A1 74CB 74C5 74B7 74C3
7516 7660 77C9 77CA 77C4 77F1 791D 791B 7921 791C
7917 791E 79B0 7A67 7A68 7C33 7C3C 7C39 7C2C 7C3B
7CEC 7CEA 7E76 7E75 7E78 7E70 7E77 7E6F 7E7A 7E72
7E74 7E68 7F4B 7F4A 7F83 7F86 7FB7 7FFD 7FFE 8078
81D7 81D5 8264 8261 8263 85EB 85F1 85ED 85D9 85E1
85E8 85DA 85D7 85EC 85F2 85F8 85D8 85DF 85E3 85DC
85D1 85F0 85E6 85EF 85DE 85E2 8800 87FA 8803 87F6
87F7 8809 880C 880B 8806 87FC 8808 87FF 880A 8802
8962 895A 895B 8957 8961 895C 8958 895D 8959 8988
89B7 89B6 89F6 8B50 8B48 8B4A 8B40 8B53 8B56 8B54
8B4B 8B55 8B51 8B42 8B52 8B57 8C43 8C77 8C76 8C9A
8D06 8D07 8D09 8DAC 8DAA 8DAD 8DAB 8E6D 8E78 8E73
8E6A 8E6F 8E7B 8EC2 8F52 8F51 8F4F 8F50 8F53 8FB4
9140 913F 91B0 91AD 93DE 93C7 93CF 93C2 93DA 93D0
93F9 93EC 93CC 93D9 93A9 93E6 93CA 93D4 93EE 93E3
93D5 93C4 93CE 93C0 93D2 93E7 957D 95DA 95DB 96E1
9729 972B 972C 9728 9726 97B3 97B7 97B6 97DD 97DE
97DF 985C 9859 985D 9857 98BF 98BD 98BB 98BE 9948
9947 9943 99A6 99A7 9A1A 9A15 9A25 9A1D 9A24 9A1B
9A22 9A20 9A27 9A23 9A1E 9A1C 9A14 9AC2 9B0B 9B0A
9B0E 9B0C 9B37 9BEA 9BEB 9BE0 9BDE 9BE4 9BE6 9BE2
9BF0 9BD4 9BD7 9BEC 9BDC 9BD9 9BE5 9BD5 9BE1 9BDA
9D77 9D81 9D8A 9D84 9D88 9D71 9D80 9D78 9D86 9D8B
9D8C 9D7D 9D6B 9D74 9D75 9D70 9D69 9D85 9D73 9D7B
9D82 9D6F 9D79 9D7F 9D87 9D68 9E94 9E91 9EC0 9EFC
9F2D 9F40 9F41 9F4D 9F56 9F57 9F58 5337 56B2 56B5
56B3 58E3 5B45 5DC6 5DC7 5EEE 5EEF 5FC0 5FC1 61F9
6517 6516 6515 6513 65DF 66E8 66E3 66E4 6AF3 6AF0
6AEA 6AE8 6AF9 6AF1 6AEE 6AEF 703C 7035 702F 7037
7034 7031 7042 7038 703F 703A 7039 7040 703B 7033
7041 7213 7214 72A8 737D 737C 74BA 76AB 76AA 76BE
76ED 77CC 77CE 77CF 77CD 77F2 7925 7923 7927 7928
7924 7929 79B2 7A6E 7A6C 7A6D 7AF7 7C49 7C48 7C4A
7C47 7C45 7CEE 7E7B 7E7E 7E81 7E80 7FBA 7FFF 8079
81DB 81D9 820B 8268 8269 8622 85FF 8601 85FE 861B
8600 85F6 8604 8609 8605 860C 85FD 8819 8810 8811
8817 8813 8816 8963 8966 89B9 89F7 8B60 8B6A 8B5D
8B68 8B63 8B65 8B67 8B6D 8DAE 8E86 8E88 8E84 8F59
8F56 8F57 8F55 8F58 8F5A 908D 9143 9141 91B7 91B5
91B2 91B3 940B 9413 93FB 9420 940F 9414 93FE 9415
9410 9428 9419 940D 93F5 9400 93F7 9407 940E 9416
9412 93FA 9409 93F8 940A 93FF 93FC 940C 93F6 9411
9406 95DE 95E0 95DF 972E 972F 97B9 97BB 97FD 97FE
9860 9862 9863 985F 98C1 98C2 9950 994E 9959 994C
994B 9953 9A32 9A34 9A31 9A2C 9A2A 9A36 9A29 9A2E
9A38 9A2D 9AC7 9ACA 9AC6 9B10 9B12 9B11 9C0B 9C08
9BF7 9C05 9C12 9BF8 9C40 9C07 9C0E 9C06 9C17 9C14
9C09 9D9F 9D99 9DA4 9D9D 9D92 9D98 9D90 9D9B 9DA0
9D94 9D9C 9DAA 9D97 9DA1 9D9A 9DA2 9DA8 9D9E 9DA3
9DBF 9DA9 9D96 9DA6 9DA7 9E99 9E9B 9E9A 9EE5 9EE4
9EE7 9EE6 9F30 9F2E 9F5B 9F60 9F5E 9F5D 9F59 9F91
513A 5139 5298 5297 56C3 56BD 56BE 5B48 5B47 5DCB
5DCF 5EF1 61FD 651B 6B02 6AFC 6B03 6AF8 6B00 7043
7044 704A 7048 7049 7045 7046 721D 721A 7219 737E
7517 766A 77D0 792D 7931 792F 7C54 7C53 7CF2 7E8A
7E87 7E88 7E8B 7E86 7E8D 7F4D 7FBB 8030 81DD 8618
862A 8626 861F 8623 861C 8619 8627 862E 8621 8620
8629 861E 8625 8829 881D 881B 8820 8824 881C 882B
884A 896D 8969 896E 896B 89FA 8B79 8B78 8B45 8B7A
8B7B 8D10 8D14 8DAF 8E8E 8E8C 8F5E 8F5B 8F5D 9146
9144 9145 91B9 943F 943B 9436 9429 943D 943C 9430
9439 942A 9437 942C 9440 9431 95E5 95E4 95E3 9735
973A 97BF 97E1 9864 98C9 98C6 98C0 9958 9956 9A39
9A3D 9A46 9A44 9A42 9A41 9A3A 9A3F 9ACD 9B15 9B17
9B18 9B16 9B3A 9B52 9C2B 9C1D 9C1C 9C2C 9C23 9C28
9C29 9C24 9C21 9DB7 9DB6 9DBC 9DC1 9DC7 9DCA 9DCF
9DBE 9DC5 9DC3 9DBB 9DB5 9DCE 9DB9 9DBA 9DAC 9DC8
9DB1 9DAD 9DCC 9DB3 9DCD 9DB2 9E7A 9E9C 9EEB 9EEE
9EED 9F1B 9F18 9F1A 9F31 9F4E 9F65 9F64 9F92 4EB9
56C6 56C5 56CB 5971 5B4B 5B4C 5DD5 5DD1 5EF2 6521
6520 6526 6522 6B0B 6B08 6B09 6C0D 7055 7056 7057
7052 721E 721F 72A9 737F 74D8 74D5 74D9 74D7 766D
76AD 7935 79B4 7A70 7A71 7C57 7C5C 7C59 7C5B 7C5A
7CF4 7CF1 7E91 7F4F 7F87 81DE 826B 8634 8635 8633
862C 8632 8636 882C 8828 8826 882A 8825 8971 89BF
89BE 89FB 8B7E 8B84 8B82 8B86 8B85 8B7F 8D15 8E95
8E94 8E9A 8E92 8E90 8E96 8E97 8F60 8F62 9147 944C
9450 944A 944B 944F 9447 9445 9448 9449 9446 973F
97E3 986A 9869 98CB 9954 995B 9A4E 9A53 9A54 9A4C
9A4F 9A48 9A4A 9A49 9A52 9A50 9AD0 9B19 9B2B 9B3B
9B56 9B55 9C46 9C48 9C3F 9C44 9C39 9C33 9C41 9C3C
9C37 9C34 9C32 9C3D 9C36 9DDB 9DD2 9DDE 9DDA 9DCB
9DD0 9DDC 9DD1 9DDF 9DE9 9DD9 9DD8 9DD6 9DF5 9DD5
9DDD 9EB6 9EF0 9F35 9F33 9F32 9F42 9F6B 9F95 9FA2
513D 5299 58E8 58E7 5972 5B4D 5DD8 882F 5F4F 6201
6203 6204 6529 6525 6596 66EB 6B11 6B12 6B0F 6BCA
705B 705A 7222 7382 7381 7383 7670 77D4 7C67 7C66
7E95 826C 863A 8640 8639 863C 8631 863B 863E 8830
8832 882E 8833 8976 8974 8973 89FE 8B8C 8B8E 8B8B
8B88 8C45 8D19 8E98 8F64 8F63 91BC 9462 9455 945D
9457 945E 97C4 97C5 9800 9A56 9A59 9B1E 9B1F 9B20
9C52 9C58 9C50 9C4A 9C4D 9C4B 9C55 9C59 9C4C 9C4E
9DFB 9DF7 9DEF 9DE3 9DEB 9DF8 9DE4 9DF6 9DE1 9DEE
9DE6 9DF2 9DF0 9DE2 9DEC 9DF4 9DF3 9DE8 9DED 9EC2
9ED0 9EF2 9EF3 9F06 9F1C 9F38 9F37 9F36 9F43 9F4F
9F71 9F70 9F6E 9F6F 56D3 56CD 5B4E 5C6D 652D 66ED
66EE 6B13 705F 7061 705D 7060 7223 74DB 74E5 77D5
7938 79B7 79B6 7C6A 7E97 7F89 826D 8643 8838 8837
8835 884B 8B94 8B95 8E9E 8E9F 8EA0 8E9D 91BE 91BD
91C2 946B 9468 9469 96E5 9746 9743 9747 97C7 97E5
9A5E 9AD5 9B59 9C63 9C67 9C66 9C62 9C5E 9C60 9E02
9DFE 9E07 9E03 9E06 9E05 9E00 9E01 9E09 9DFF 9DFD
9E04 9EA0 9F1E 9F46 9F74 9F75 9F76 56D4 652E 65B8
6B18 6B19 6B17 6B1A 7062 7226 72AA 77D8 77D9 7939
7C69 7C6B 7CF6 7E9A 7E98 7E9B 7E99 81E0 81E1 8646
8647 8648 8979 897A 897C 897B 89FF 8B98 8B99 8EA5
8EA4 8EA3 946E 946D 946F 9471 9473 9749 9872 995F
9C68 9C6E 9C6D 9E0B 9E0D 9E10 9E0F 9E12 9E11 9EA1
9EF5 9F09 9F47 9F78 9F7B 9F7A 9F79 571E 7066 7C6F
883C 8DB2 8EA6 91C3 9474 9478 9476 9475 9A60 9C74
9C73 9C71 9C75 9E14 9E13 9EF6 9F0A 9FA4 7068 7065
7CF7 866A 883E 883D 883F 8B9E 8C9C 8EA9 8EC9 974B
9873 9874 98CC 9961 99AB 9A64 9A66 9A67 9B24 9E15
9E17 9F48 6207 6B1E 7227 864C 8EA8 9482 9480 9481
9A69 9A68 9B2E 9E19 7229 864B 8B9F 9483 9C79 9EB7
7675 9A6B 9C7A 9E1D 7069 706A 9EA4 9F7E 9F49 9F98
__END__

=head1 NAME

Unicode::Collate::CJK::Big5 - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::Big5;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::Big5::weightBig5
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::Big5> provides C<weightBig5()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's big5han ordering.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                          usr/share/perl/5.20.2/Unicode/Collate/CJK/GB2312.pm                                                 0100644 0000000 0000000 00000104570 12744441327 017403  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::GB2312;

use 5.006;
use strict;

our $VERSION = '0.65';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt;
	$wt++;
    }
}

sub weightGB2312 {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
554A 963F 57C3 6328 54CE 5509 54C0 7691 764C 853C
77EE 827E 788D 7231 9698 978D 6C28 5B89 4FFA 6309
6697 5CB8 80FA 6848 80AE 6602 76CE 51F9 6556 71AC
7FF1 8884 50B2 5965 61CA 6FB3 82AD 634C 6252 53ED
5427 7B06 516B 75A4 5DF4 62D4 8DCB 9776 628A 8019
575D 9738 7F62 7238 767D 67CF 767E 6446 4F70 8D25
62DC 7A17 6591 73ED 642C 6273 822C 9881 677F 7248
626E 62CC 4F34 74E3 534A 529E 7ECA 90A6 5E2E 6886
699C 8180 7ED1 68D2 78C5 868C 9551 508D 8C24 82DE
80DE 5305 8912 5265 8584 96F9 4FDD 5821 9971 5B9D
62B1 62A5 66B4 8C79 9C8D 7206 676F 7891 60B2 5351
5317 8F88 80CC 8D1D 94A1 500D 72C8 5907 60EB 7119
88AB 5954 82EF 672C 7B28 5D29 7EF7 752D 6CF5 8E66
8FF8 903C 9F3B 6BD4 9119 7B14 5F7C 78A7 84D6 853D
6BD5 6BD9 6BD6 5E01 5E87 75F9 95ED 655D 5F0A 5FC5
8F9F 58C1 81C2 907F 965B 97AD 8FB9 7F16 8D2C 6241
4FBF 53D8 535E 8FA8 8FA9 8FAB 904D 6807 5F6A 8198
8868 9CD6 618B 522B 762A 5F6C 658C 6FD2 6EE8 5BBE
6448 5175 51B0 67C4 4E19 79C9 997C 70B3 75C5 5E76
73BB 83E0 64AD 62E8 94B5 6CE2 535A 52C3 640F 94C2
7B94 4F2F 5E1B 8236 8116 818A 6E24 6CCA 9A73 6355
535C 54FA 8865 57E0 4E0D 5E03 6B65 7C3F 90E8 6016
64E6 731C 88C1 6750 624D 8D22 776C 8E29 91C7 5F69
83DC 8521 9910 53C2 8695 6B8B 60ED 60E8 707F 82CD
8231 4ED3 6CA7 85CF 64CD 7CD9 69FD 66F9 8349 5395
7B56 4FA7 518C 6D4B 5C42 8E6D 63D2 53C9 832C 8336
67E5 78B4 643D 5BDF 5C94 5DEE 8BE7 62C6 67F4 8C7A
6400 63BA 8749 998B 8C17 7F20 94F2 4EA7 9610 98A4
660C 7316 573A 5C1D 5E38 957F 507F 80A0 5382 655E
7545 5531 5021 8D85 6284 949E 671D 5632 6F6E 5DE2
5435 7092 8F66 626F 64A4 63A3 5F7B 6F88 90F4 81E3
8FB0 5C18 6668 5FF1 6C89 9648 8D81 886C 6491 79F0
57CE 6A59 6210 5448 4E58 7A0B 60E9 6F84 8BDA 627F
901E 9A8B 79E4 5403 75F4 6301 5319 6C60 8FDF 5F1B
9A70 803B 9F7F 4F88 5C3A 8D64 7FC5 65A5 70BD 5145
51B2 866B 5D07 5BA0 62BD 916C 7574 8E0C 7A20 6101
7B79 4EC7 7EF8 7785 4E11 81ED 521D 51FA 6A71 53A8
8E87 9504 96CF 6EC1 9664 695A 7840 50A8 77D7 6410
89E6 5904 63E3 5DDD 7A7F 693D 4F20 8239 5598 4E32
75AE 7A97 5E62 5E8A 95EF 521B 5439 708A 6376 9524
5782 6625 693F 9187 5507 6DF3 7EAF 8822 6233 7EF0
75B5 8328 78C1 96CC 8F9E 6148 74F7 8BCD 6B64 523A
8D50 6B21 806A 8471 56F1 5306 4ECE 4E1B 51D1 7C97
918B 7C07 4FC3 8E7F 7BE1 7A9C 6467 5D14 50AC 8106
7601 7CB9 6DEC 7FE0 6751 5B58 5BF8 78CB 64AE 6413
63AA 632B 9519 642D 8FBE 7B54 7629 6253 5927 5446
6B79 50A3 6234 5E26 6B86 4EE3 8D37 888B 5F85 902E
6020 803D 62C5 4E39 5355 90F8 63B8 80C6 65E6 6C2E
4F46 60EE 6DE1 8BDE 5F39 86CB 5F53 6321 515A 8361
6863 5200 6363 8E48 5012 5C9B 7977 5BFC 5230 7A3B
60BC 9053 76D7 5FB7 5F97 7684 8E6C 706F 767B 7B49
77AA 51F3 9093 5824 4F4E 6EF4 8FEA 654C 7B1B 72C4
6DA4 7FDF 5AE1 62B5 5E95 5730 8482 7B2C 5E1D 5F1F
9012 7F14 98A0 6382 6EC7 7898 70B9 5178 975B 57AB
7535 4F43 7538 5E97 60E6 5960 6DC0 6BBF 7889 53FC
96D5 51CB 5201 6389 540A 9493 8C03 8DCC 7239 789F
8776 8FED 8C0D 53E0 4E01 76EF 53EE 9489 9876 9F0E
952D 5B9A 8BA2 4E22 4E1C 51AC 8463 61C2 52A8 680B
4F97 606B 51BB 6D1E 515C 6296 6597 9661 8C46 9017
75D8 90FD 7763 6BD2 728A 72EC 8BFB 5835 7779 8D4C
675C 9540 809A 5EA6 6E21 5992 7AEF 77ED 953B 6BB5
65AD 7F0E 5806 5151 961F 5BF9 58A9 5428 8E72 6566
987F 56E4 949D 76FE 9041 6387 54C6 591A 593A 579B
8EB2 6735 8DFA 8235 5241 60F0 5815 86FE 5CE8 9E45
4FC4 989D 8BB9 5A25 6076 5384 627C 904F 9102 997F
6069 800C 513F 8033 5C14 9975 6D31 4E8C 8D30 53D1
7F5A 7B4F 4F10 4E4F 9600 6CD5 73D0 85E9 5E06 756A
7FFB 6A0A 77FE 9492 7E41 51E1 70E6 53CD 8FD4 8303
8D29 72AF 996D 6CDB 574A 82B3 65B9 80AA 623F 9632
59A8 4EFF 8BBF 7EBA 653E 83F2 975E 5561 98DE 80A5
532A 8BFD 5420 80BA 5E9F 6CB8 8D39 82AC 915A 5429
6C1B 5206 7EB7 575F 711A 6C7E 7C89 594B 4EFD 5FFF
6124 7CAA 4E30 5C01 67AB 8702 5CF0 950B 98CE 75AF
70FD 9022 51AF 7F1D 8BBD 5949 51E4 4F5B 5426 592B
6577 80A4 5B75 6276 62C2 8F90 5E45 6C1F 7B26 4F0F
4FD8 670D 6D6E 6DAA 798F 88B1 5F17 752B 629A 8F85
4FEF 91DC 65A7 812F 8151 5E9C 8150 8D74 526F 8986
8D4B 590D 5085 4ED8 961C 7236 8179 8D1F 5BCC 8BA3
9644 5987 7F1A 5490 5676 560E 8BE5 6539 6982 9499
76D6 6E89 5E72 7518 6746 67D1 7AFF 809D 8D76 611F
79C6 6562 8D63 5188 521A 94A2 7F38 809B 7EB2 5C97
6E2F 6760 7BD9 768B 9AD8 818F 7F94 7CD5 641E 9550
7A3F 544A 54E5 6B4C 6401 6208 9E3D 80F3 7599 5272
9769 845B 683C 86E4 9601 9694 94EC 4E2A 5404 7ED9
6839 8DDF 8015 66F4 5E9A 7FB9 57C2 803F 6897 5DE5
653B 529F 606D 9F9A 4F9B 8EAC 516C 5BAB 5F13 5DE9
6C5E 62F1 8D21 5171 94A9 52FE 6C9F 82DF 72D7 57A2
6784 8D2D 591F 8F9C 83C7 5495 7B8D 4F30 6CBD 5B64
59D1 9F13 53E4 86CA 9AA8 8C37 80A1 6545 987E 56FA
96C7 522E 74DC 5250 5BE1 6302 8902 4E56 62D0 602A
68FA 5173 5B98 51A0 89C2 7BA1 9986 7F50 60EF 704C
8D2F 5149 5E7F 901B 7470 89C4 572D 7845 5F52 9F9F
95FA 8F68 9B3C 8BE1 7678 6842 67DC 8DEA 8D35 523D
8F8A 6EDA 68CD 9505 90ED 56FD 679C 88F9 8FC7 54C8
9AB8 5B69 6D77 6C26 4EA5 5BB3 9A87 9163 61A8 90AF
97E9 542B 6DB5 5BD2 51FD 558A 7F55 7FF0 64BC 634D
65F1 61BE 608D 710A 6C57 6C49 592F 676D 822A 58D5
568E 8C6A 6BEB 90DD 597D 8017 53F7 6D69 5475 559D
8377 83CF 6838 79BE 548C 4F55 5408 76D2 8C89 9602
6CB3 6DB8 8D6B 8910 9E64 8D3A 563F 9ED1 75D5 5F88
72E0 6068 54FC 4EA8 6A2A 8861 6052 8F70 54C4 70D8
8679 9E3F 6D2A 5B8F 5F18 7EA2 5589 4FAF 7334 543C
539A 5019 540E 547C 4E4E 5FFD 745A 58F6 846B 80E1
8774 72D0 7CCA 6E56 5F27 864E 552C 62A4 4E92 6CAA
6237 82B1 54D7 534E 733E 6ED1 753B 5212 5316 8BDD
69D0 5F8A 6000 6DEE 574F 6B22 73AF 6853 8FD8 7F13
6362 60A3 5524 75EA 8C62 7115 6DA3 5BA6 5E7B 8352
614C 9EC4 78FA 8757 7C27 7687 51F0 60F6 714C 6643
5E4C 604D 8C0E 7070 6325 8F89 5FBD 6062 86D4 56DE
6BC1 6094 6167 5349 60E0 6666 8D3F 79FD 4F1A 70E9
6C47 8BB3 8BF2 7ED8 8364 660F 5A5A 9B42 6D51 6DF7
8C41 6D3B 4F19 706B 83B7 6216 60D1 970D 8D27 7978
51FB 573E 57FA 673A 7578 7A3D 79EF 7B95 808C 9965
8FF9 6FC0 8BA5 9E21 59EC 7EE9 7F09 5409 6781 68D8
8F91 7C4D 96C6 53CA 6025 75BE 6C72 5373 5AC9 7EA7
6324 51E0 810A 5DF1 84DF 6280 5180 5B63 4F0E 796D
5242 60B8 6D4E 5BC4 5BC2 8BA1 8BB0 65E2 5FCC 9645
5993 7EE7 7EAA 5609 67B7 5939 4F73 5BB6 52A0 835A
988A 8D3E 7532 94BE 5047 7A3C 4EF7 67B6 9A7E 5AC1
6B7C 76D1 575A 5C16 7B3A 95F4 714E 517C 80A9 8270
5978 7F04 8327 68C0 67EC 78B1 7877 62E3 6361 7B80
4FED 526A 51CF 8350 69DB 9274 8DF5 8D31 89C1 952E
7BAD 4EF6 5065 8230 5251 996F 6E10 6E85 6DA7 5EFA
50F5 59DC 5C06 6D46 6C5F 7586 848B 6868 5956 8BB2
5320 9171 964D 8549 6912 7901 7126 80F6 4EA4 90CA
6D47 9A84 5A07 56BC 6405 94F0 77EB 4FA5 811A 72E1
89D2 997A 7F34 7EDE 527F 6559 9175 8F7F 8F83 53EB
7A96 63ED 63A5 7686 79F8 8857 9636 622A 52AB 8282
6854 6770 6377 776B 7AED 6D01 7ED3 89E3 59D0 6212
85C9 82A5 754C 501F 4ECB 75A5 8BEB 5C4A 5DFE 7B4B
65A4 91D1 4ECA 6D25 895F 7D27 9526 4EC5 8C28 8FDB
9773 664B 7981 8FD1 70EC 6D78 5C3D 52B2 8346 5162
830E 775B 6676 9CB8 4EAC 60CA 7CBE 7CB3 7ECF 4E95
8B66 666F 9888 9759 5883 656C 955C 5F84 75C9 9756
7ADF 7ADE 51C0 70AF 7A98 63EA 7A76 7EA0 7396 97ED
4E45 7078 4E5D 9152 53A9 6551 65E7 81FC 8205 548E
5C31 759A 97A0 62D8 72D9 75BD 5C45 9A79 83CA 5C40
5480 77E9 4E3E 6CAE 805A 62D2 636E 5DE8 5177 8DDD
8E1E 952F 4FF1 53E5 60E7 70AC 5267 6350 9E43 5A1F
5026 7737 5377 7EE2 6485 652B 6289 6398 5014 7235
89C9 51B3 8BC0 7EDD 5747 83CC 94A7 519B 541B 5CFB
4FCA 7AE3 6D5A 90E1 9A8F 5580 5496 5361 54AF 5F00
63E9 6977 51EF 6168 520A 582A 52D8 574E 780D 770B
5EB7 6177 7CE0 625B 6297 4EA2 7095 8003 62F7 70E4
9760 5777 82DB 67EF 68F5 78D5 9897 79D1 58F3 54B3
53EF 6E34 514B 523B 5BA2 8BFE 80AF 5543 57A6 6073
5751 542D 7A7A 6050 5B54 63A7 62A0 53E3 6263 5BC7
67AF 54ED 7A9F 82E6 9177 5E93 88E4 5938 57AE 630E
8DE8 80EF 5757 7B77 4FA9 5FEB 5BBD 6B3E 5321 7B50
72C2 6846 77FF 7736 65F7 51B5 4E8F 76D4 5CBF 7AA5
8475 594E 9B41 5080 9988 6127 6E83 5764 6606 6346
56F0 62EC 6269 5ED3 9614 5783 62C9 5587 8721 814A
8FA3 5566 83B1 6765 8D56 84DD 5A6A 680F 62E6 7BEE
9611 5170 6F9C 8C30 63FD 89C8 61D2 7F06 70C2 6EE5
7405 6994 72FC 5ECA 90CE 6717 6D6A 635E 52B3 7262
8001 4F6C 59E5 916A 70D9 6D9D 52D2 4E50 96F7 956D
857E 78CA 7D2F 5121 5792 64C2 808B 7C7B 6CEA 68F1
695E 51B7 5398 68A8 7281 9ECE 7BF1 72F8 79BB 6F13
7406 674E 91CC 9CA4 793C 8389 8354 540F 6817 4E3D
5389 52B1 783E 5386 5229 5088 4F8B 4FD0 75E2 7ACB
7C92 6CA5 96B6 529B 7483 54E9 4FE9 8054 83B2 8FDE
9570 5EC9 601C 6D9F 5E18 655B 8138 94FE 604B 70BC
7EC3 7CAE 51C9 6881 7CB1 826F 4E24 8F86 91CF 667E
4EAE 8C05 64A9 804A 50DA 7597 71CE 5BE5 8FBD 6F66
4E86 6482 9563 5ED6 6599 5217 88C2 70C8 52A3 730E
7433 6797 78F7 9716 4E34 90BB 9CDE 6DCB 51DB 8D41
541D 62CE 73B2 83F1 96F6 9F84 94C3 4F36 7F9A 51CC
7075 9675 5CAD 9886 53E6 4EE4 6E9C 7409 69B4 786B
998F 7559 5218 7624 6D41 67F3 516D 9F99 804B 5499
7B3C 7ABF 9686 5784 62E2 9647 697C 5A04 6402 7BD3
6F0F 964B 82A6 5362 9885 5E90 7089 63B3 5364 864F
9C81 9E93 788C 9732 8DEF 8D42 9E7F 6F5E 7984 5F55
9646 622E 9A74 5415 94DD 4FA3 65C5 5C65 5C61 7F15
8651 6C2F 5F8B 7387 6EE4 7EFF 5CE6 631B 5B6A 6EE6
5375 4E71 63A0 7565 62A1 8F6E 4F26 4ED1 6CA6 7EB6
8BBA 841D 87BA 7F57 903B 9523 7BA9 9AA1 88F8 843D
6D1B 9A86 7EDC 5988 9EBB 739B 7801 8682 9A6C 9A82
561B 5417 57CB 4E70 9EA6 5356 8FC8 8109 7792 9992
86EE 6EE1 8513 66FC 6162 6F2B 8C29 8292 832B 76F2
6C13 5FD9 83BD 732B 8305 951A 6BDB 77DB 94C6 536F
8302 5192 5E3D 8C8C 8D38 4E48 73AB 679A 6885 9176
9709 7164 6CA1 7709 5A92 9541 6BCF 7F8E 6627 5BD0
59B9 5A9A 95E8 95F7 4EEC 840C 8499 6AAC 76DF 9530
731B 68A6 5B5F 772F 919A 9761 7CDC 8FF7 8C1C 5F25
7C73 79D8 89C5 6CCC 871C 5BC6 5E42 68C9 7720 7EF5
5195 514D 52C9 5A29 7F05 9762 82D7 63CF 7784 85D0
79D2 6E3A 5E99 5999 8511 706D 6C11 62BF 76BF 654F
60AF 95FD 660E 879F 9E23 94ED 540D 547D 8C2C 6478
6479 8611 6A21 819C 78E8 6469 9B54 62B9 672B 83AB
58A8 9ED8 6CAB 6F20 5BDE 964C 8C0B 725F 67D0 62C7
7261 4EA9 59C6 6BCD 5893 66AE 5E55 52DF 6155 6728
76EE 7766 7267 7A46 62FF 54EA 5450 94A0 90A3 5A1C
7EB3 6C16 4E43 5976 8010 5948 5357 7537 96BE 56CA
6320 8111 607C 95F9 6DD6 5462 9981 5185 5AE9 80FD
59AE 9713 502A 6CE5 5C3C 62DF 4F60 533F 817B 9006
6EBA 852B 62C8 5E74 78BE 64B5 637B 5FF5 5A18 917F
9E1F 5C3F 634F 8042 5B7D 556E 954A 954D 6D85 60A8
67E0 72DE 51DD 5B81 62E7 6CDE 725B 626D 94AE 7EBD
8113 6D53 519C 5F04 5974 52AA 6012 5973 6696 8650
759F 632A 61E6 7CEF 8BFA 54E6 6B27 9E25 6BB4 85D5
5455 5076 6CA4 556A 8DB4 722C 5E15 6015 7436 62CD
6392 724C 5F98 6E43 6D3E 6500 6F58 76D8 78D0 76FC
7554 5224 53DB 4E53 5E9E 65C1 802A 80D6 629B 5486
5228 70AE 888D 8DD1 6CE1 5478 80DA 57F9 88F4 8D54
966A 914D 4F69 6C9B 55B7 76C6 7830 62A8 70F9 6F8E
5F6D 84EC 68DA 787C 7BF7 81A8 670B 9E4F 6367 78B0
576F 7812 9739 6279 62AB 5288 7435 6BD7 5564 813E
75B2 76AE 5339 75DE 50FB 5C41 8B6C 7BC7 504F 7247
9A97 98D8 6F02 74E2 7968 6487 77A5 62FC 9891 8D2B
54C1 8058 4E52 576A 82F9 840D 5E73 51ED 74F6 8BC4
5C4F 5761 6CFC 9887 5A46 7834 9B44 8FEB 7C95 5256
6251 94FA 4EC6 8386 8461 83E9 84B2 57D4 6734 5703
666E 6D66 8C31 66DD 7011 671F 6B3A 6816 621A 59BB
4E03 51C4 6F06 67D2 6C8F 5176 68CB 5947 6B67 7566
5D0E 8110 9F50 65D7 7948 7941 9A91 8D77 5C82 4E5E
4F01 542F 5951 780C 5668 6C14 8FC4 5F03 6C7D 6CE3
8BAB 6390 6070 6D3D 7275 6266 948E 94C5 5343 8FC1
7B7E 4EDF 8C26 4E7E 9ED4 94B1 94B3 524D 6F5C 9063
6D45 8C34 5811 5D4C 6B20 6B49 67AA 545B 8154 7F8C
5899 8537 5F3A 62A2 6A47 9539 6572 6084 6865 77A7
4E54 4FA8 5DE7 9798 64AC 7FD8 5CED 4FCF 7A8D 5207
8304 4E14 602F 7A83 94A6 4FB5 4EB2 79E6 7434 52E4
82B9 64D2 79BD 5BDD 6C81 9752 8F7B 6C22 503E 537F
6E05 64CE 6674 6C30 60C5 9877 8BF7 5E86 743C 7A77
79CB 4E18 90B1 7403 6C42 56DA 914B 6CC5 8D8B 533A
86C6 66F2 8EAF 5C48 9A71 6E20 53D6 5A36 9F8B 8DA3
53BB 5708 98A7 6743 919B 6CC9 5168 75CA 62F3 72AC
5238 529D 7F3A 7094 7638 5374 9E4A 69B7 786E 96C0
88D9 7FA4 7136 71C3 5189 67D3 74E4 58E4 6518 56B7
8BA9 9976 6270 7ED5 60F9 70ED 58EC 4EC1 4EBA 5FCD
97E7 4EFB 8BA4 5203 598A 7EAB 6254 4ECD 65E5 620E
8338 84C9 8363 878D 7194 6EB6 5BB9 7ED2 5197 63C9
67D4 8089 8339 8815 5112 5B7A 5982 8FB1 4E73 6C5D
5165 8925 8F6F 962E 854A 745E 9510 95F0 6DA6 82E5
5F31 6492 6D12 8428 816E 9CC3 585E 8D5B 4E09 53C1
4F1E 6563 6851 55D3 4E27 6414 9A9A 626B 5AC2 745F
8272 6DA9 68EE 50E7 838E 7802 6740 5239 6C99 7EB1
50BB 5565 715E 7B5B 6652 73CA 82EB 6749 5C71 5220
717D 886B 95EA 9655 64C5 8D61 81B3 5584 6C55 6247
7F2E 5892 4F24 5546 8D4F 664C 4E0A 5C1A 88F3 68A2
634E 7A0D 70E7 828D 52FA 97F6 5C11 54E8 90B5 7ECD
5962 8D4A 86C7 820C 820D 8D66 6444 5C04 6151 6D89
793E 8BBE 7837 7533 547B 4F38 8EAB 6DF1 5A20 7EC5
795E 6C88 5BA1 5A76 751A 80BE 614E 6E17 58F0 751F
7525 7272 5347 7EF3 7701 76DB 5269 80DC 5723 5E08
5931 72EE 65BD 6E7F 8BD7 5C38 8671 5341 77F3 62FE
65F6 4EC0 98DF 8680 5B9E 8BC6 53F2 77E2 4F7F 5C4E
9A76 59CB 5F0F 793A 58EB 4E16 67FF 4E8B 62ED 8A93
901D 52BF 662F 55DC 566C 9002 4ED5 4F8D 91CA 9970
6C0F 5E02 6043 5BA4 89C6 8BD5 6536 624B 9996 5B88
5BFF 6388 552E 53D7 7626 517D 852C 67A2 68B3 6B8A
6292 8F93 53D4 8212 6DD1 758F 4E66 8D4E 5B70 719F
85AF 6691 66D9 7F72 8700 9ECD 9F20 5C5E 672F 8FF0
6811 675F 620D 7AD6 5885 5EB6 6570 6F31 6055 5237
800D 6454 8870 7529 5E05 6813 62F4 971C 53CC 723D
8C01 6C34 7761 7A0E 542E 77AC 987A 821C 8BF4 7855
6714 70C1 65AF 6495 5636 601D 79C1 53F8 4E1D 6B7B
8086 5BFA 55E3 56DB 4F3A 4F3C 9972 5DF3 677E 8038
6002 9882 9001 5B8B 8BBC 8BF5 641C 8258 64DE 55FD
82CF 9165 4FD7 7D20 901F 7C9F 50F3 5851 6EAF 5BBF
8BC9 8083 9178 849C 7B97 867D 968B 968F 7EE5 9AD3
788E 5C81 7A57 9042 96A7 795F 5B59 635F 7B0B 84D1
68AD 5506 7F29 7410 7D22 9501 6240 584C 4ED6 5B83
5979 5854 736D 631E 8E4B 8E0F 80CE 82D4 62AC 53F0
6CF0 915E 592A 6001 6C70 574D 644A 8D2A 762B 6EE9
575B 6A80 75F0 6F6D 8C2D 8C08 5766 6BEF 8892 78B3
63A2 53F9 70AD 6C64 5858 642A 5802 68E0 819B 5510
7CD6 5018 8EBA 6DCC 8D9F 70EB 638F 6D9B 6ED4 7EE6
8404 6843 9003 6DD8 9676 8BA8 5957 7279 85E4 817E
75BC 8A8A 68AF 5254 8E22 9511 63D0 9898 8E44 557C
4F53 66FF 568F 60D5 6D95 5243 5C49 5929 6DFB 586B
7530 751C 606C 8214 8146 6311 6761 8FE2 773A 8DF3
8D34 94C1 5E16 5385 542C 70C3 6C40 5EF7 505C 4EAD
5EAD 633A 8247 901A 6850 916E 77B3 540C 94DC 5F64
7AE5 6876 6345 7B52 7EDF 75DB 5077 6295 5934 900F
51F8 79C3 7A81 56FE 5F92 9014 6D82 5C60 571F 5410
5154 6E4D 56E2 63A8 9893 817F 8715 892A 9000 541E
5C6F 81C0 62D6 6258 8131 9E35 9640 9A6E 9A7C 692D
59A5 62D3 553E 6316 54C7 86D9 6D3C 5A03 74E6 889C
6B6A 5916 8C4C 5F2F 6E7E 73A9 987D 4E38 70F7 5B8C
7897 633D 665A 7696 60CB 5B9B 5A49 4E07 8155 6C6A
738B 4EA1 6789 7F51 5F80 65FA 671B 5FD8 5984 5A01
5DCD 5FAE 5371 97E6 8FDD 6845 56F4 552F 60DF 4E3A
6F4D 7EF4 82C7 840E 59D4 4F1F 4F2A 5C3E 7EAC 672A
851A 5473 754F 80C3 5582 9B4F 4F4D 6E2D 8C13 5C09
6170 536B 761F 6E29 868A 6587 95FB 7EB9 543B 7A33
7D0A 95EE 55E1 7FC1 74EE 631D 8717 6DA1 7A9D 6211
65A1 5367 63E1 6C83 5DEB 545C 94A8 4E4C 6C61 8BEC
5C4B 65E0 829C 68A7 543E 5434 6BCB 6B66 4E94 6342
5348 821E 4F0D 4FAE 575E 620A 96FE 6664 7269 52FF
52A1 609F 8BEF 6614 7199 6790 897F 7852 77FD 6670
563B 5438 9521 727A 7A00 606F 5E0C 6089 819D 5915
60DC 7184 70EF 6EAA 6C50 7280 6A84 88AD 5E2D 4E60
5AB3 559C 94E3 6D17 7CFB 9699 620F 7EC6 778E 867E
5323 971E 8F96 6687 5CE1 4FA0 72ED 4E0B 53A6 590F
5413 6380 9528 5148 4ED9 9C9C 7EA4 54B8 8D24 8854
8237 95F2 6D8E 5F26 5ACC 663E 9669 73B0 732E 53BF
817A 9985 7FA1 5BAA 9677 9650 7EBF 76F8 53A2 9576
9999 7BB1 8944 6E58 4E61 7FD4 7965 8BE6 60F3 54CD
4EAB 9879 5DF7 6A61 50CF 5411 8C61 8427 785D 9704
524A 54EE 56A3 9500 6D88 5BB5 6DC6 6653 5C0F 5B5D
6821 8096 5578 7B11 6548 6954 4E9B 6B47 874E 978B
534F 631F 643A 90AA 659C 80C1 8C10 5199 68B0 5378
87F9 61C8 6CC4 6CFB 8C22 5C51 85AA 82AF 950C 6B23
8F9B 65B0 5FFB 5FC3 4FE1 8845 661F 8165 7329 60FA
5174 5211 578B 5F62 90A2 884C 9192 5E78 674F 6027
59D3 5144 51F6 80F8 5308 6C79 96C4 718A 4F11 4FEE
7F9E 673D 55C5 9508 79C0 8896 7EE3 589F 620C 9700
865A 5618 987B 5F90 8BB8 84C4 9157 53D9 65ED 5E8F
755C 6064 7D6E 5A7F 7EEA 7EED 8F69 55A7 5BA3 60AC
65CB 7384 9009 7663 7729 7EDA 9774 859B 5B66 7A74
96EA 8840 52CB 718F 5FAA 65EC 8BE2 5BFB 9A6F 5DE1
6B89 6C5B 8BAD 8BAF 900A 8FC5 538B 62BC 9E26 9E2D
5440 4E2B 82BD 7259 869C 5D16 8859 6DAF 96C5 54D1
4E9A 8BB6 7109 54BD 9609 70DF 6DF9 76D0 4E25 7814
8712 5CA9 5EF6 8A00 989C 960E 708E 6CBF 5944 63A9
773C 884D 6F14 8273 5830 71D5 538C 781A 96C1 5501
5F66 7130 5BB4 8C1A 9A8C 6B83 592E 9E2F 79E7 6768
626C 4F6F 75A1 7F8A 6D0B 9633 6C27 4EF0 75D2 517B
6837 6F3E 9080 8170 5996 7476 6447 5C27 9065 7A91
8C23 59DA 54AC 8200 836F 8981 8000 6930 564E 8036
7237 91CE 51B6 4E5F 9875 6396 4E1A 53F6 66F3 814B
591C 6DB2 4E00 58F9 533B 63D6 94F1 4F9D 4F0A 8863
9890 5937 9057 79FB 4EEA 80F0 7591 6C82 5B9C 59E8
5F5D 6905 8681 501A 5DF2 4E59 77E3 4EE5 827A 6291
6613 9091 5C79 4EBF 5F79 81C6 9038 8084 75AB 4EA6
88D4 610F 6BC5 5FC6 4E49 76CA 6EA2 8BE3 8BAE 8C0A
8BD1 5F02 7FFC 7FCC 7ECE 8335 836B 56E0 6BB7 97F3
9634 59FB 541F 94F6 6DEB 5BC5 996E 5C39 5F15 9690
5370 82F1 6A31 5A74 9E70 5E94 7F28 83B9 8424 8425
8367 8747 8FCE 8D62 76C8 5F71 9896 786C 6620 54DF
62E5 4F63 81C3 75C8 5EB8 96CD 8E0A 86F9 548F 6CF3
6D8C 6C38 607F 52C7 7528 5E7D 4F18 60A0 5FE7 5C24
7531 90AE 94C0 72B9 6CB9 6E38 9149 6709 53CB 53F3
4F51 91C9 8BF1 53C8 5E7C 8FC2 6DE4 4E8E 76C2 6986
865E 611A 8206 4F59 4FDE 903E 9C7C 6109 6E1D 6E14
9685 4E88 5A31 96E8 4E0E 5C7F 79B9 5B87 8BED 7FBD
7389 57DF 828B 90C1 5401 9047 55BB 5CEA 5FA1 6108
6B32 72F1 80B2 8A89 6D74 5BD3 88D5 9884 8C6B 9A6D
9E33 6E0A 51A4 5143 57A3 8881 539F 63F4 8F95 56ED
5458 5706 733F 6E90 7F18 8FDC 82D1 613F 6028 9662
66F0 7EA6 8D8A 8DC3 94A5 5CB3 7CA4 6708 60A6 9605
8018 4E91 90E7 5300 9668 5141 8FD0 8574 915D 6655
97F5 5B55 531D 7838 6742 683D 54C9 707E 5BB0 8F7D
518D 5728 54B1 6512 6682 8D5E 8D43 810F 846C 906D
7CDF 51FF 85FB 67A3 65E9 6FA1 86A4 8E81 566A 9020
7682 7076 71E5 8D23 62E9 5219 6CFD 8D3C 600E 589E
618E 66FE 8D60 624E 55B3 6E23 672D 8F67 94E1 95F8
7728 6805 69A8 548B 4E4D 70B8 8BC8 6458 658B 5B85
7A84 503A 5BE8 77BB 6BE1 8A79 7C98 6CBE 76CF 65A9
8F97 5D2D 5C55 8638 6808 5360 6218 7AD9 6E5B 7EFD
6A1F 7AE0 5F70 6F33 5F20 638C 6DA8 6756 4E08 5E10
8D26 4ED7 80C0 7634 969C 62DB 662D 627E 6CBC 8D75
7167 7F69 5146 8087 53EC 906E 6298 54F2 86F0 8F99
8005 9517 8517 8FD9 6D59 73CD 659F 771F 7504 7827
81FB 8D1E 9488 4FA6 6795 75B9 8BCA 9707 632F 9547
9635 84B8 6323 7741 5F81 72F0 4E89 6014 6574 62EF
6B63 653F 5E27 75C7 90D1 8BC1 829D 679D 652F 5431
8718 77E5 80A2 8102 6C41 4E4B 7EC7 804C 76F4 690D
6B96 6267 503C 4F84 5740 6307 6B62 8DBE 53EA 65E8
7EB8 5FD7 631A 63B7 81F3 81F4 7F6E 5E1C 5CD9 5236
667A 79E9 7A1A 8D28 7099 75D4 6EDE 6CBB 7A92 4E2D
76C5 5FE0 949F 8877 7EC8 79CD 80BF 91CD 4EF2 4F17
821F 5468 5DDE 6D32 8BCC 7CA5 8F74 8098 5E1A 5492
76B1 5B99 663C 9AA4 73E0 682A 86DB 6731 732A 8BF8
8BDB 9010 7AF9 70DB 716E 62C4 77A9 5631 4E3B 8457
67F1 52A9 86C0 8D2E 94F8 7B51 4F4F 6CE8 795D 9A7B
6293 722A 62FD 4E13 7816 8F6C 64B0 8D5A 7BC6 6869
5E84 88C5 5986 649E 58EE 72B6 690E 9525 8FFD 8D58
5760 7F00 8C06 51C6 6349 62D9 5353 684C 7422 8301
914C 5544 7740 707C 6D4A 5179 54A8 8D44 59FF 6ECB
6DC4 5B5C 7D2B 4ED4 7C7D 6ED3 5B50 81EA 6E0D 5B57
9B03 68D5 8E2A 5B97 7EFC 603B 7EB5 90B9 8D70 594F
63CD 79DF 8DB3 5352 65CF 7956 8BC5 963B 7EC4 94BB
7E82 5634 9189 6700 7F6A 5C0A 9075 6628 5DE6 4F50
67DE 505A 4F5C 5750 5EA7 E2D8 E2D9 E2DA E2DB E2DC
4E8D 4E0C 5140 4E10 5EFF 5345 4E15 4E98 4E1E 9B32
5B6C 5669 4E28 79BA 4E3F 5315 4E47 592D 723B 536E
6C10 56DF 80E4 9997 6BD3 777E 9F17 4E36 4E9F 9F10
4E5C 4E69 4E93 8288 5B5B 556C 560F 4EC4 538D 539D
53A3 53A5 53AE 9765 8D5D 531A 53F5 5326 532E 533E
8D5C 5366 5363 5202 5208 520E 522D 5233 523F 5240
524C 525E 5261 525C 84AF 527D 5282 5281 5290 5293
5182 7F54 4EBB 4EC3 4EC9 4EC2 4EE8 4EE1 4EEB 4EDE
4F1B 4EF3 4F22 4F64 4EF5 4F25 4F27 4F09 4F2B 4F5E
4F67 6538 4F5A 4F5D 4F5F 4F57 4F32 4F3D 4F76 4F74
4F91 4F89 4F83 4F8F 4F7E 4F7B 4FAA 4F7C 4FAC 4F94
4FE6 4FE8 4FEA 4FC5 4FDA 4FE3 4FDC 4FD1 4FDF 4FF8
5029 504C 4FF3 502C 500F 502E 502D 4FFE 501C 500C
5025 5028 507E 5043 5055 5048 504E 506C 507B 50A5
50A7 50A9 50BA 50D6 5106 50ED 50EC 50E6 50EE 5107
510B 4EDD 6C3D 4F58 4F65 4FCE 9FA0 6C46 7C74 516E
5DFD 9EC9 9998 5181 5914 52F9 530D 8A07 5310 51EB
5919 5155 4EA0 5156 4EB3 886E 88A4 4EB5 8114 88D2
7980 5B34 8803 7FB8 51AB 51B1 51BD 51BC 51C7 5196
51A2 51A5 8BA0 8BA6 8BA7 8BAA 8BB4 8BB5 8BB7 8BC2
8BC3 8BCB 8BCF 8BCE 8BD2 8BD3 8BD4 8BD6 8BD8 8BD9
8BDC 8BDF 8BE0 8BE4 8BE8 8BE9 8BEE 8BF0 8BF3 8BF6
8BF9 8BFC 8BFF 8C00 8C02 8C04 8C07 8C0C 8C0F 8C11
8C12 8C14 8C15 8C16 8C19 8C1B 8C18 8C1D 8C1F 8C20
8C21 8C25 8C27 8C2A 8C2B 8C2E 8C2F 8C32 8C33 8C35
8C36 5369 537A 961D 9622 9621 9631 962A 963D 963C
9642 9649 9654 965F 9667 966C 9672 9674 9688 968D
9697 96B0 9097 909B 909D 9099 90AC 90A1 90B4 90B3
90B6 90BA 90B8 90B0 90CF 90C5 90BE 90D0 90C4 90C7
90D3 90E6 90E2 90DC 90D7 90DB 90EB 90EF 90FE 9104
9122 911E 9123 9131 912F 9139 9143 9146 520D 5942
52A2 52AC 52AD 52BE 54FF 52D0 52D6 52F0 53DF 71EE
77CD 5EF4 51F5 51FC 9B2F 53B6 5F01 755A 5DEF 574C
57A9 57A1 587E 58BC 58C5 58D1 5729 572C 572A 5733
5739 572E 572F 575C 573B 5742 5769 5785 576B 5786
577C 577B 5768 576D 5776 5773 57AD 57A4 578C 57B2
57CF 57A7 57B4 5793 57A0 57D5 57D8 57DA 57D9 57D2
57B8 57F4 57EF 57F8 57E4 57DD 580B 580D 57FD 57ED
5800 581E 5819 5844 5820 5865 586C 5881 5889 589A
5880 99A8 9F19 61FF 8279 827D 827F 828F 828A 82A8
8284 828E 8291 8297 8299 82AB 82B8 82BE 82B0 82C8
82CA 82E3 8298 82B7 82AE 82CB 82CC 82C1 82A9 82B4
82A1 82AA 829F 82C4 82CE 82A4 82E1 8309 82F7 82E4
830F 8307 82DC 82F4 82D2 82D8 830C 82FB 82D3 8311
831A 8306 8314 8315 82E0 82D5 831C 8351 835B 835C
8308 8392 833C 8334 8331 839B 835E 832F 834F 8347
8343 835F 8340 8317 8360 832D 833A 8333 8366 8365
8368 831B 8369 836C 836A 836D 836E 83B0 8378 83B3
83B4 83A0 83AA 8393 839C 8385 837C 83B6 83A9 837D
83B8 837B 8398 839E 83A8 83BA 83BC 83C1 8401 83E5
83D8 5807 8418 840B 83DD 83FD 83D6 841C 8438 8411
8406 83D4 83DF 840F 8403 83F8 83F9 83EA 83C5 83C0
8426 83F0 83E1 845C 8451 845A 8459 8473 8487 8488
847A 8489 8478 843C 8446 8469 8476 848C 848E 8431
846D 84C1 84CD 84D0 84E6 84BD 84D3 84CA 84BF 84BA
84E0 84A1 84B9 84B4 8497 84E5 84E3 850C 750D 8538
84F0 8539 851F 853A 8556 853B 84FF 84FC 8559 8548
8568 8564 855E 857A 77A2 8543 8572 857B 85A4 85A8
8587 858F 8579 85AE 859C 8585 85B9 85B7 85B0 85D3
85C1 85DC 85FF 8627 8605 8629 8616 863C 5EFE 5F08
593C 5941 8037 5955 595A 5958 530F 5C22 5C25 5C2C
5C34 624C 626A 629F 62BB 62CA 62DA 62D7 62EE 6322
62F6 6339 634B 6343 63AD 63F6 6371 637A 638E 63B4
636D 63AC 638A 6369 63AE 63BC 63F2 63F8 63E0 63FF
63C4 63DE 63CE 6452 63C6 63BE 6445 6441 640B 641B
6420 640C 6426 6421 645E 6484 646D 6496 647A 64B7
64B8 6499 64BA 64C0 64D0 64D7 64E4 64E2 6509 6525
652E 5F0B 5FD2 7519 5F11 535F 53F1 53FD 53E9 53E8
53FB 5412 5416 5406 544B 5452 5453 5454 5456 5443
5421 5457 5459 5423 5432 5482 5494 5477 5471 5464
549A 549B 5484 5476 5466 549D 54D0 54AD 54C2 54B4
54D2 54A7 54A6 54D3 54D4 5472 54A3 54D5 54BB 54BF
54CC 54D9 54DA 54DC 54A9 54AA 54A4 54DD 54CF 54DE
551B 54E7 5520 54FD 5514 54F3 5522 5523 550F 5511
5527 552A 5567 558F 55B5 5549 556D 5541 5555 553F
5550 553C 5537 5556 5575 5576 5577 5533 5530 555C
558B 55D2 5583 55B1 55B9 5588 5581 559F 557E 55D6
5591 557B 55DF 55BD 55BE 5594 5599 55EA 55F7 55C9
561F 55D1 55EB 55EC 55D4 55E6 55DD 55C4 55EF 55E5
55F2 55F3 55CC 55CD 55E8 55F5 55E4 8F94 561E 5608
560C 5601 5624 5623 55FE 5600 5627 562D 5658 5639
5657 562C 564D 5662 5659 565C 564C 5654 5686 5664
5671 566B 567B 567C 5685 5693 56AF 56D4 56D7 56DD
56E1 56F5 56EB 56F9 56FF 5704 570A 5709 571C 5E0F
5E19 5E14 5E11 5E31 5E3B 5E3C 5E37 5E44 5E54 5E5B
5E5E 5E61 5C8C 5C7A 5C8D 5C90 5C96 5C88 5C98 5C99
5C91 5C9A 5C9C 5CB5 5CA2 5CBD 5CAC 5CAB 5CB1 5CA3
5CC1 5CB7 5CC4 5CD2 5CE4 5CCB 5CE5 5D02 5D03 5D27
5D26 5D2E 5D24 5D1E 5D06 5D1B 5D58 5D3E 5D34 5D3D
5D6C 5D5B 5D6F 5D5D 5D6B 5D4B 5D4A 5D69 5D74 5D82
5D99 5D9D 8C73 5DB7 5DC5 5F73 5F77 5F82 5F87 5F89
5F8C 5F95 5F99 5F9C 5FA8 5FAD 5FB5 5FBC 8862 5F61
72AD 72B0 72B4 72B7 72B8 72C3 72C1 72CE 72CD 72D2
72E8 72EF 72E9 72F2 72F4 72F7 7301 72F3 7303 72FA
72FB 7317 7313 7321 730A 731E 731D 7315 7322 7339
7325 732C 7338 7331 7350 734D 7357 7360 736C 736F
737E 821B 5925 98E7 5924 5902 9963 9967 9968 9969
996A 996B 996C 9974 9977 997D 9980 9984 9987 998A
998D 9990 9991 9993 9994 9995 5E80 5E91 5E8B 5E96
5EA5 5EA0 5EB9 5EB5 5EBE 5EB3 8D53 5ED2 5ED1 5EDB
5EE8 5EEA 81BA 5FC4 5FC9 5FD6 5FCF 6003 5FEE 6004
5FE1 5FE4 5FFE 6005 6006 5FEA 5FED 5FF8 6019 6035
6026 601B 600F 600D 6029 602B 600A 603F 6021 6078
6079 607B 607A 6042 606A 607D 6096 609A 60AD 609D
6083 6092 608C 609B 60EC 60BB 60B1 60DD 60D8 60C6
60DA 60B4 6120 6126 6115 6123 60F4 6100 610E 612B
614A 6175 61AC 6194 61A7 61B7 61D4 61F5 5FDD 96B3
95E9 95EB 95F1 95F3 95F5 95F6 95FC 95FE 9603 9604
9606 9608 960A 960B 960C 960D 960F 9612 9615 9616
9617 9619 961A 4E2C 723F 6215 6C35 6C54 6C5C 6C4A
6CA3 6C85 6C90 6C94 6C8C 6C68 6C69 6C74 6C76 6C86
6CA9 6CD0 6CD4 6CAD 6CF7 6CF8 6CF1 6CD7 6CB2 6CE0
6CD6 6CFA 6CEB 6CEE 6CB1 6CD3 6CEF 6CFE 6D39 6D27
6D0C 6D43 6D48 6D07 6D04 6D19 6D0E 6D2B 6D4D 6D2E
6D35 6D1A 6D4F 6D52 6D54 6D33 6D91 6D6F 6D9E 6DA0
6D5E 6D93 6D94 6D5C 6D60 6D7C 6D63 6E1A 6DC7 6DC5
6DDE 6E0E 6DBF 6DE0 6E11 6DE6 6DDD 6DD9 6E16 6DAB
6E0C 6DAE 6E2B 6E6E 6E4E 6E6B 6EB2 6E5F 6E86 6E53
6E54 6E32 6E25 6E44 6EDF 6EB1 6E98 6EE0 6F2D 6EE2
6EA5 6EA7 6EBD 6EBB 6EB7 6ED7 6EB4 6ECF 6E8F 6EC2
6E9F 6F62 6F46 6F47 6F24 6F15 6EF9 6F2F 6F36 6F4B
6F74 6F2A 6F09 6F29 6F89 6F8D 6F8C 6F78 6F72 6F7C
6F7A 6FD1 6FC9 6FA7 6FB9 6FB6 6FC2 6FE1 6FEE 6FDE
6FE0 6FEF 701A 7023 701B 7039 7035 704F 705E 5B80
5B84 5B95 5B93 5BA5 5BB8 752F 9A9E 6434 5BE4 5BEE
8930 5BF0 8E47 8B07 8FB6 8FD3 8FD5 8FE5 8FEE 8FE4
8FE9 8FE6 8FF3 8FE8 9005 9004 900B 9026 9011 900D
9016 9021 9035 9036 902D 902F 9044 9051 9052 9050
9068 9058 9062 905B 66B9 9074 907D 9082 9088 9083
908B 5F50 5F57 5F56 5F58 5C3B 54AB 5C50 5C59 5B71
5C63 5C66 7FBC 5F2A 5F29 5F2D 8274 5F3C 9B3B 5C6E
5981 5983 598D 59A9 59AA 59A3 5997 59CA 59AB 599E
59A4 59D2 59B2 59AF 59D7 59BE 5A05 5A06 59DD 5A08
59E3 59D8 59F9 5A0C 5A09 5A32 5A34 5A11 5A23 5A13
5A40 5A67 5A4A 5A55 5A3C 5A62 5A75 80EC 5AAA 5A9B
5A77 5A7A 5ABE 5AEB 5AB2 5AD2 5AD4 5AB8 5AE0 5AE3
5AF1 5AD6 5AE6 5AD8 5ADC 5B09 5B17 5B16 5B32 5B37
5B40 5C15 5C1C 5B5A 5B65 5B73 5B51 5B53 5B62 9A75
9A77 9A78 9A7A 9A7F 9A7D 9A80 9A81 9A85 9A88 9A8A
9A90 9A92 9A93 9A96 9A98 9A9B 9A9C 9A9D 9A9F 9AA0
9AA2 9AA3 9AA5 9AA7 7E9F 7EA1 7EA3 7EA5 7EA8 7EA9
7EAD 7EB0 7EBE 7EC0 7EC1 7EC2 7EC9 7ECB 7ECC 7ED0
7ED4 7ED7 7EDB 7EE0 7EE1 7EE8 7EEB 7EEE 7EEF 7EF1
7EF2 7F0D 7EF6 7EFA 7EFB 7EFE 7F01 7F02 7F03 7F07
7F08 7F0B 7F0C 7F0F 7F11 7F12 7F17 7F19 7F1C 7F1B
7F1F 7F21 7F22 7F23 7F24 7F25 7F26 7F27 7F2A 7F2B
7F2C 7F2D 7F2F 7F30 7F31 7F32 7F33 7F35 5E7A 757F
5DDB 753E 9095 738E 7391 73AE 73A2 739F 73CF 73C2
73D1 73B7 73B3 73C0 73C9 73C8 73E5 73D9 987C 740A
73E9 73E7 73DE 73BA 73F2 740F 742A 745B 7426 7425
7428 7430 742E 742C 741B 741A 7441 745C 7457 7455
7459 7477 746D 747E 749C 748E 7480 7481 7487 748B
749E 74A8 74A9 7490 74A7 74D2 74BA 97EA 97EB 97EC
674C 6753 675E 6748 6769 67A5 6787 676A 6773 6798
67A7 6775 67A8 679E 67AD 678B 6777 677C 67F0 6809
67D8 680A 67E9 67B0 680C 67D9 67B5 67DA 67B3 67DD
6800 67C3 67B8 67E2 680E 67C1 67FD 6832 6833 6860
6861 684E 6862 6844 6864 6883 681D 6855 6866 6841
6867 6840 683E 684A 6849 6829 68B5 688F 6874 6877
6893 686B 68C2 696E 68FC 691F 6920 68F9 6924 68F0
690B 6901 6957 68E3 6910 6971 6939 6960 6942 695D
6984 696B 6980 6998 6978 6934 69CC 6987 6988 69CE
6989 6966 6963 6979 699B 69A7 69BB 69AB 69AD 69D4
69B1 69C1 69CA 69DF 6995 69E0 698D 69FF 6A2F 69ED
6A17 6A18 6A65 69F2 6A44 6A3E 6AA0 6A50 6A5B 6A35
6A8E 6A79 6A3D 6A28 6A58 6A7C 6A91 6A90 6AA9 6A97
6AAB 7337 7352 6B81 6B82 6B87 6B84 6B92 6B93 6B8D
6B9A 6B9B 6BA1 6BAA 8F6B 8F6D 8F71 8F72 8F73 8F75
8F76 8F78 8F77 8F79 8F7A 8F7C 8F7E 8F81 8F82 8F84
8F87 8F8B 8F8D 8F8E 8F8F 8F98 8F9A 8ECE 620B 6217
621B 621F 6222 6221 6225 6224 622C 81E7 74EF 74F4
74FF 750F 7511 7513 6534 65EE 65EF 65F0 660A 6619
6772 6603 6615 6600 7085 66F7 661D 6634 6631 6636
6635 8006 665F 6654 6641 664F 6656 6661 6657 6677
6684 668C 66A7 669D 66BE 66DB 66DC 66E6 66E9 8D32
8D33 8D36 8D3B 8D3D 8D40 8D45 8D46 8D48 8D49 8D47
8D4D 8D55 8D59 89C7 89CA 89CB 89CC 89CE 89CF 89D0
89D1 726E 729F 725D 7266 726F 727E 727F 7284 728B
728D 728F 7292 6308 6332 63B0 643F 64D8 8004 6BEA
6BF3 6BFD 6BF5 6BF9 6C05 6C07 6C06 6C0D 6C15 6C18
6C19 6C1A 6C21 6C29 6C24 6C2A 6C32 6535 6555 656B
724D 7252 7256 7230 8662 5216 809F 809C 8093 80BC
670A 80BD 80B1 80AB 80AD 80B4 80B7 80E7 80E8 80E9
80EA 80DB 80C2 80C4 80D9 80CD 80D7 6710 80DD 80EB
80F1 80F4 80ED 810D 810E 80F2 80FC 6715 8112 8C5A
8136 811E 812C 8118 8132 8148 814C 8153 8174 8159
815A 8171 8160 8169 817C 817D 816D 8167 584D 5AB5
8188 8182 8191 6ED5 81A3 81AA 81CC 6726 81CA 81BB
81C1 81A6 6B24 6B37 6B39 6B43 6B46 6B59 98D1 98D2
98D3 98D5 98D9 98DA 6BB3 5F40 6BC2 89F3 6590 9F51
6593 65BC 65C6 65C4 65C3 65CC 65CE 65D2 65D6 7080
709C 7096 709D 70BB 70C0 70B7 70AB 70B1 70E8 70CA
7110 7113 7116 712F 7131 7173 715C 7168 7145 7172
714A 7178 717A 7198 71B3 71B5 71A8 71A0 71E0 71D4
71E7 71F9 721D 7228 706C 7118 7166 71B9 623E 623D
6243 6248 6249 793B 7940 7946 7949 795B 795C 7953
795A 7962 7957 7960 796F 7967 797A 7985 798A 799A
79A7 79B3 5FD1 5FD0 603C 605D 605A 6067 6041 6059
6063 60AB 6106 610D 615D 61A9 619D 61CB 61D1 6206
8080 807F 6C93 6CF6 6DFC 77F6 77F8 7800 7809 7817
7818 7811 65AB 782D 781C 781D 7839 783A 783B 781F
783C 7825 782C 7823 7829 784E 786D 7856 7857 7826
7850 7847 784C 786A 789B 7893 789A 7887 789C 78A1
78A3 78B2 78B9 78A5 78D4 78D9 78C9 78EC 78F2 7905
78F4 7913 7924 791E 7934 9F9B 9EF9 9EFB 9EFC 76F1
7704 770D 76F9 7707 7708 771A 7722 7719 772D 7726
7735 7738 7750 7751 7747 7743 775A 7768 7762 7765
777F 778D 777D 7780 778C 7791 779F 77A0 77B0 77B5
77BD 753A 7540 754E 754B 7548 755B 7572 7579 7583
7F58 7F61 7F5F 8A48 7F68 7F74 7F71 7F79 7F81 7F7E
76CD 76E5 8832 9485 9486 9487 948B 948A 948C 948D
948F 9490 9494 9497 9495 949A 949B 949C 94A3 94A4
94AB 94AA 94AD 94AC 94AF 94B0 94B2 94B4 94B6 94B7
94B8 94B9 94BA 94BC 94BD 94BF 94C4 94C8 94C9 94CA
94CB 94CC 94CD 94CE 94D0 94D1 94D2 94D5 94D6 94D7
94D9 94D8 94DB 94DE 94DF 94E0 94E2 94E4 94E5 94E7
94E8 94EA 94E9 94EB 94EE 94EF 94F3 94F4 94F5 94F7
94F9 94FC 94FD 94FF 9503 9502 9506 9507 9509 950A
950D 950E 950F 9512 9513 9514 9515 9516 9518 951B
951D 951E 951F 9522 952A 952B 9529 952C 9531 9532
9534 9536 9537 9538 953C 953E 953F 9542 9535 9544
9545 9546 9549 954C 954E 954F 9552 9553 9554 9556
9557 9558 9559 955B 955E 955F 955D 9561 9562 9564
9565 9566 9567 9568 9569 956A 956B 956C 956F 9571
9572 9573 953A 77E7 77EC 96C9 79D5 79ED 79E3 79EB
7A06 5D47 7A03 7A02 7A1E 7A14 7A39 7A37 7A51 9ECF
99A5 7A70 7688 768E 7693 7699 76A4 74DE 74E0 752C
9E20 9E22 9E28 9E29 9E2A 9E2B 9E2C 9E32 9E31 9E36
9E38 9E37 9E39 9E3A 9E3E 9E41 9E42 9E44 9E46 9E47
9E48 9E49 9E4B 9E4C 9E4E 9E51 9E55 9E57 9E5A 9E5B
9E5C 9E5E 9E63 9E66 9E67 9E68 9E69 9E6A 9E6B 9E6C
9E71 9E6D 9E73 7592 7594 7596 75A0 759D 75AC 75A3
75B3 75B4 75B8 75C4 75B1 75B0 75C3 75C2 75D6 75CD
75E3 75E8 75E6 75E4 75EB 75E7 7603 75F1 75FC 75FF
7610 7600 7605 760C 7617 760A 7625 7618 7615 7619
761B 763C 7622 7620 7640 762D 7630 763F 7635 7643
763E 7633 764D 765E 7654 765C 7656 766B 766F 7FCA
7AE6 7A78 7A79 7A80 7A86 7A88 7A95 7AA6 7AA0 7AAC
7AA8 7AAD 7AB3 8864 8869 8872 887D 887F 8882 88A2
88C6 88B7 88BC 88C9 88E2 88CE 88E3 88E5 88F1 891A
88FC 88E8 88FE 88F0 8921 8919 8913 891B 890A 8934
892B 8936 8941 8966 897B 758B 80E5 76B2 76B4 77DC
8012 8014 8016 801C 8020 8022 8025 8026 8027 8029
8028 8031 800B 8035 8043 8046 804D 8052 8069 8071
8983 9878 9880 9883 9889 988C 988D 988F 9894 989A
989B 989E 989F 98A1 98A2 98A5 98A6 864D 8654 866C
866E 867F 867A 867C 867B 86A8 868D 868B 86AC 869D
86A7 86A3 86AA 8693 86A9 86B6 86C4 86B5 86CE 86B0
86BA 86B1 86AF 86C9 86CF 86B4 86E9 86F1 86F2 86ED
86F3 86D0 8713 86DE 86F4 86DF 86D8 86D1 8703 8707
86F8 8708 870A 870D 8709 8723 873B 871E 8725 872E
871A 873E 8748 8734 8731 8729 8737 873F 8782 8722
877D 877E 877B 8760 8770 874C 876E 878B 8753 8763
877C 8764 8759 8765 8793 87AF 87A8 87D2 87C6 8788
8785 87AD 8797 8783 87AB 87E5 87AC 87B5 87B3 87CB
87D3 87BD 87D1 87C0 87CA 87DB 87EA 87E0 87EE 8816
8813 87FE 880A 881B 8821 8839 883C 7F36 7F42 7F44
7F45 8210 7AFA 7AFD 7B08 7B03 7B04 7B15 7B0A 7B2B
7B0F 7B47 7B38 7B2A 7B19 7B2E 7B31 7B20 7B25 7B24
7B33 7B3E 7B1E 7B58 7B5A 7B45 7B75 7B4C 7B5D 7B60
7B6E 7B7B 7B62 7B72 7B71 7B90 7BA6 7BA7 7BB8 7BAC
7B9D 7BA8 7B85 7BAA 7B9C 7BA2 7BAB 7BB4 7BD1 7BC1
7BCC 7BDD 7BDA 7BE5 7BE6 7BEA 7C0C 7BFE 7BFC 7C0F
7C16 7C0B 7C1F 7C2A 7C26 7C38 7C41 7C40 81FE 8201
8202 8204 81EC 8844 8221 8222 8223 822D 822F 8228
822B 8238 823B 8233 8234 823E 8244 8249 824B 824F
825A 825F 8268 887E 8885 8888 88D8 88DF 895E 7F9D
7F9F 7FA7 7FAF 7FB0 7FB2 7C7C 6549 7C91 7C9D 7C9C
7C9E 7CA2 7CB2 7CBC 7CBD 7CC1 7CC7 7CCC 7CCD 7CC8
7CC5 7CD7 7CE8 826E 66A8 7FBF 7FCE 7FD5 7FE5 7FE1
7FE6 7FE9 7FEE 7FF3 7CF8 7D77 7DA6 7DAE 7E47 7E9B
9EB8 9EB4 8D73 8D84 8D94 8D91 8DB1 8D67 8D6D 8C47
8C49 914A 9150 914E 914F 9164 9162 9161 9170 9169
916F 917D 917E 9172 9174 9179 918C 9185 9190 918D
9191 91A2 91A3 91AA 91AD 91AE 91AF 91B5 91B4 91BA
8C55 9E7E 8DB8 8DEB 8E05 8E59 8E69 8DB5 8DBF 8DBC
8DBA 8DC4 8DD6 8DD7 8DDA 8DDE 8DCE 8DCF 8DDB 8DC6
8DEC 8DF7 8DF8 8DE3 8DF9 8DFB 8DE4 8E09 8DFD 8E14
8E1D 8E1F 8E2C 8E2E 8E23 8E2F 8E3A 8E40 8E39 8E35
8E3D 8E31 8E49 8E41 8E42 8E51 8E52 8E4A 8E70 8E76
8E7C 8E6F 8E74 8E85 8E8F 8E94 8E90 8E9C 8E9E 8C78
8C82 8C8A 8C85 8C98 8C94 659B 89D6 89DE 89DA 89DC
89E5 89EB 89EF 8A3E 8B26 9753 96E9 96F3 96EF 9706
9701 9708 970F 970E 972A 972D 9730 973E 9F80 9F83
9F85 9F86 9F87 9F88 9F89 9F8A 9F8C 9EFE 9F0B 9F0D
96B9 96BC 96BD 96CE 96D2 77BF 96E0 928E 92AE 92C8
933E 936A 93CA 938F 943E 946B 9C7F 9C82 9C85 9C86
9C87 9C88 7A23 9C8B 9C8E 9C90 9C91 9C92 9C94 9C95
9C9A 9C9B 9C9E 9C9F 9CA0 9CA1 9CA2 9CA3 9CA5 9CA6
9CA7 9CA8 9CA9 9CAB 9CAD 9CAE 9CB0 9CB1 9CB2 9CB3
9CB4 9CB5 9CB6 9CB7 9CBA 9CBB 9CBC 9CBD 9CC4 9CC5
9CC6 9CC7 9CCA 9CCB 9CCC 9CCD 9CCE 9CCF 9CD0 9CD3
9CD4 9CD5 9CD7 9CD8 9CD9 9CDC 9CDD 9CDF 9CE2 977C
9785 9791 9792 9794 97AF 97AB 97A3 97B2 97B4 9AB1
9AB0 9AB7 9E58 9AB6 9ABA 9ABC 9AC1 9AC0 9AC5 9AC2
9ACB 9ACC 9AD1 9B45 9B43 9B47 9B49 9B48 9B4D 9B51
98E8 990D 992E 9955 9954 9ADF 9AE1 9AE6 9AEF 9AEB
9AFB 9AED 9AF9 9B08 9B0F 9B13 9B1F 9B23 9EBD 9EBE
7E3B 9E82 9E87 9E88 9E8B 9E92 93D6 9E9D 9E9F 9EDB
9EDC 9EDD 9EE0 9EDF 9EE2 9EE9 9EE7 9EE5 9EEA 9EEF
9F22 9F2C 9F2F 9F39 9F37 9F3D 9F3E 9F44
__END__

=head1 NAME

Unicode::Collate::CJK::GB2312 - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::GB2312;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::GB2312::weightGB2312
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::GB2312> provides C<weightGB2312()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's gb2312han ordering.

=head1 CAVEAT

The gb2312han ordering includes 5 code points in private use area
(E2D8..E2DC), that can't utilize C<weightGB2312()> for collation.
For them, use C<entry> instead.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                                                        usr/share/perl/5.20.2/Unicode/Collate/CJK/JISX0208.pm                                               0100644 0000000 0000000 00000077773 12744441327 017710  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::JISX0208;

use 5.006;
use strict;

our $VERSION = '0.64';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt;
	$wt++;
    }
}

sub weightJISX0208 {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
4E9C 5516 5A03 963F 54C0 611B 6328 59F6 9022 8475
831C 7A50 60AA 63E1 6E25 65ED 8466 82A6 9BF5 6893
5727 65A1 6271 5B9B 59D0 867B 98F4 7D62 7DBE 9B8E
6216 7C9F 88B7 5B89 5EB5 6309 6697 6848 95C7 978D
674F 4EE5 4F0A 4F4D 4F9D 5049 56F2 5937 59D4 5A01
5C09 60DF 610F 6170 6613 6905 70BA 754F 7570 79FB
7DAD 7DEF 80C3 840E 8863 8B02 9055 907A 533B 4E95
4EA5 57DF 80B2 90C1 78EF 4E00 58F1 6EA2 9038 7A32
8328 828B 9C2F 5141 5370 54BD 54E1 56E0 59FB 5F15
98F2 6DEB 80E4 852D 9662 9670 96A0 97FB 540B 53F3
5B87 70CF 7FBD 8FC2 96E8 536F 9D5C 7ABA 4E11 7893
81FC 6E26 5618 5504 6B1D 851A 9C3B 59E5 53A9 6D66
74DC 958F 5642 4E91 904B 96F2 834F 990C 53E1 55B6
5B30 5F71 6620 66F3 6804 6C38 6CF3 6D29 745B 76C8
7A4E 9834 82F1 885B 8A60 92ED 6DB2 75AB 76CA 99C5
60A6 8B01 8D8A 95B2 698E 53AD 5186 5712 5830 5944
5BB4 5EF6 6028 63A9 63F4 6CBF 6F14 708E 7114 7159
71D5 733F 7E01 8276 82D1 8597 9060 925B 9D1B 5869
65BC 6C5A 7525 51F9 592E 5965 5F80 5FDC 62BC 65FA
6A2A 6B27 6BB4 738B 7FC1 8956 9D2C 9D0E 9EC4 5CA1
6C96 837B 5104 5C4B 61B6 81C6 6876 7261 4E59 4FFA
5378 6069 6E29 7A4F 97F3 4E0B 5316 4EEE 4F55 4F3D
4FA1 4F73 52A0 53EF 5609 590F 5AC1 5BB6 5BE1 79D1
6687 679C 67B6 6B4C 6CB3 706B 73C2 798D 79BE 7A3C
7B87 82B1 82DB 8304 8377 83EF 83D3 8766 8AB2 5629
8CA8 8FE6 904E 971E 868A 4FC4 5CE8 6211 7259 753B
81E5 82BD 86FE 8CC0 96C5 9913 99D5 4ECB 4F1A 89E3
56DE 584A 58CA 5EFB 5FEB 602A 6094 6062 61D0 6212
62D0 6539 9B41 6666 68B0 6D77 7070 754C 7686 7D75
82A5 87F9 958B 968E 8C9D 51F1 52BE 5916 54B3 5BB3
5D16 6168 6982 6DAF 788D 84CB 8857 8A72 93A7 9AB8
6D6C 99A8 86D9 57A3 67FF 86CE 920E 5283 5687 5404
5ED3 62E1 64B9 683C 6838 6BBB 7372 78BA 7A6B 899A
89D2 8D6B 8F03 90ED 95A3 9694 9769 5B66 5CB3 697D
984D 984E 639B 7B20 6A2B 6A7F 68B6 9C0D 6F5F 5272
559D 6070 62EC 6D3B 6E07 6ED1 845B 8910 8F44 4E14
9C39 53F6 691B 6A3A 9784 682A 515C 7AC3 84B2 91DC
938C 565B 9D28 6822 8305 8431 7CA5 5208 82C5 74E6
4E7E 4F83 51A0 5BD2 520A 52D8 52E7 5DFB 559A 582A
59E6 5B8C 5B98 5BDB 5E72 5E79 60A3 611F 6163 61BE
63DB 6562 67D1 6853 68FA 6B3E 6B53 6C57 6F22 6F97
6F45 74B0 7518 76E3 770B 7AFF 7BA1 7C21 7DE9 7F36
7FF0 809D 8266 839E 89B3 8ACC 8CAB 9084 9451 9593
9591 95A2 9665 97D3 9928 8218 4E38 542B 5CB8 5DCC
73A9 764C 773C 5CA9 7FEB 8D0B 96C1 9811 9854 9858
4F01 4F0E 5371 559C 5668 57FA 5947 5B09 5BC4 5C90
5E0C 5E7E 5FCC 63EE 673A 65D7 65E2 671F 68CB 68C4
6A5F 5E30 6BC5 6C17 6C7D 757F 7948 5B63 7A00 7D00
5FBD 898F 8A18 8CB4 8D77 8ECC 8F1D 98E2 9A0E 9B3C
4E80 507D 5100 5993 5B9C 622F 6280 64EC 6B3A 72A0
7591 7947 7FA9 87FB 8ABC 8B70 63AC 83CA 97A0 5409
5403 55AB 6854 6A58 8A70 7827 6775 9ECD 5374 5BA2
811A 8650 9006 4E18 4E45 4EC7 4F11 53CA 5438 5BAE
5F13 6025 6551 673D 6C42 6C72 6CE3 7078 7403 7A76
7AAE 7B08 7D1A 7CFE 7D66 65E7 725B 53BB 5C45 5DE8
62D2 62E0 6319 6E20 865A 8A31 8DDD 92F8 6F01 79A6
9B5A 4EA8 4EAB 4EAC 4F9B 4FA0 50D1 5147 7AF6 5171
51F6 5354 5321 537F 53EB 55AC 5883 5CE1 5F37 5F4A
602F 6050 606D 631F 6559 6A4B 6CC1 72C2 72ED 77EF
80F8 8105 8208 854E 90F7 93E1 97FF 9957 9A5A 4EF0
51DD 5C2D 6681 696D 5C40 66F2 6975 7389 6850 7C81
50C5 52E4 5747 5DFE 9326 65A4 6B23 6B3D 7434 7981
79BD 7B4B 7DCA 82B9 83CC 887F 895F 8B39 8FD1 91D1
541F 9280 4E5D 5036 53E5 533A 72D7 7396 77E9 82E6
8EAF 99C6 99C8 99D2 5177 611A 865E 55B0 7A7A 5076
5BD3 9047 9685 4E32 6ADB 91E7 5C51 5C48 6398 7A9F
6C93 9774 8F61 7AAA 718A 9688 7C82 6817 7E70 6851
936C 52F2 541B 85AB 8A13 7FA4 8ECD 90E1 5366 8888
7941 4FC2 50BE 5211 5144 5553 572D 73EA 578B 5951
5F62 5F84 6075 6176 6167 61A9 63B2 643A 656C 666F
6842 6E13 7566 7A3D 7CFB 7D4C 7D99 7E4B 7F6B 830E
834A 86CD 8A08 8A63 8B66 8EFD 981A 9D8F 82B8 8FCE
9BE8 5287 621F 6483 6FC0 9699 6841 5091 6B20 6C7A
6F54 7A74 7D50 8840 8A23 6708 4EF6 5039 5026 5065
517C 5238 5263 55A7 570F 5805 5ACC 5EFA 61B2 61F8
62F3 6372 691C 6A29 727D 72AC 732E 7814 786F 7D79
770C 80A9 898B 8B19 8CE2 8ED2 9063 9375 967A 9855
9A13 9E78 5143 539F 53B3 5E7B 5F26 6E1B 6E90 7384
73FE 7D43 8237 8A00 8AFA 9650 4E4E 500B 53E4 547C
56FA 59D1 5B64 5DF1 5EAB 5F27 6238 6545 67AF 6E56
72D0 7CCA 88B4 80A1 80E1 83F0 864E 8A87 8DE8 9237
96C7 9867 9F13 4E94 4E92 4F0D 5348 5449 543E 5A2F
5F8C 5FA1 609F 68A7 6A8E 745A 7881 8A9E 8AA4 8B77
9190 4E5E 9BC9 4EA4 4F7C 4FAF 5019 5016 5149 516C
529F 52B9 52FE 539A 53E3 5411 540E 5589 5751 57A2
597D 5B54 5B5D 5B8F 5DE5 5DE7 5DF7 5E78 5E83 5E9A
5EB7 5F18 6052 614C 6297 62D8 63A7 653B 6602 6643
66F4 676D 6821 6897 69CB 6C5F 6D2A 6D69 6E2F 6E9D
7532 7687 786C 7A3F 7CE0 7D05 7D18 7D5E 7DB1 8015
8003 80AF 80B1 8154 818F 822A 8352 884C 8861 8B1B
8CA2 8CFC 90CA 9175 9271 783F 92FC 95A4 964D 9805
9999 9AD8 9D3B 525B 52AB 53F7 5408 58D5 62F7 6FE0
8C6A 8F5F 9EB9 514B 523B 544A 56FD 7A40 9177 9D60
9ED2 7344 6F09 8170 7511 5FFD 60DA 9AA8 72DB 8FBC
6B64 9803 4ECA 56F0 5764 58BE 5A5A 6068 61C7 660F
6606 6839 68B1 6DF7 75D5 7D3A 826E 9B42 4E9B 4F50
53C9 5506 5D6F 5DE6 5DEE 67FB 6C99 7473 7802 8A50
9396 88DF 5750 5EA7 632B 50B5 50AC 518D 6700 54C9
585E 59BB 5BB0 5F69 624D 63A1 683D 6B73 6E08 707D
91C7 7280 7815 7826 796D 658E 7D30 83DC 88C1 8F09
969B 5264 5728 6750 7F6A 8CA1 51B4 5742 962A 583A
698A 80B4 54B2 5D0E 57FC 7895 9DFA 4F5C 524A 548B
643E 6628 6714 67F5 7A84 7B56 7D22 932F 685C 9BAD
7B39 5319 518A 5237 5BDF 62F6 64AE 64E6 672D 6BBA
85A9 96D1 7690 9BD6 634C 9306 9BAB 76BF 6652 4E09
5098 53C2 5C71 60E8 6492 6563 685F 71E6 73CA 7523
7B97 7E82 8695 8B83 8CDB 9178 9910 65AC 66AB 6B8B
4ED5 4ED4 4F3A 4F7F 523A 53F8 53F2 55E3 56DB 58EB
59CB 59C9 59FF 5B50 5C4D 5E02 5E2B 5FD7 601D 6307
652F 5B5C 65AF 65BD 65E8 679D 6B62 6B7B 6C0F 7345
7949 79C1 7CF8 7D19 7D2B 80A2 8102 81F3 8996 8A5E
8A69 8A66 8A8C 8AEE 8CC7 8CDC 96CC 98FC 6B6F 4E8B
4F3C 4F8D 5150 5B57 5BFA 6148 6301 6642 6B21 6ECB
6CBB 723E 74BD 75D4 78C1 793A 800C 8033 81EA 8494
8F9E 6C50 9E7F 5F0F 8B58 9D2B 7AFA 8EF8 5B8D 96EB
4E03 53F1 57F7 5931 5AC9 5BA4 6089 6E7F 6F06 75BE
8CEA 5B9F 8500 7BE0 5072 67F4 829D 5C61 854A 7E1E
820E 5199 5C04 6368 8D66 659C 716E 793E 7D17 8005
8B1D 8ECA 906E 86C7 90AA 501F 52FA 5C3A 6753 707C
7235 914C 91C8 932B 82E5 5BC2 5F31 60F9 4E3B 53D6
5B88 624B 6731 6B8A 72E9 73E0 7A2E 816B 8DA3 9152
9996 5112 53D7 546A 5BFF 6388 6A39 7DAC 9700 56DA
53CE 5468 5B97 5C31 5DDE 4FEE 6101 62FE 6D32 79C0
79CB 7D42 7E4D 7FD2 81ED 821F 8490 8846 8972 8B90
8E74 8F2F 9031 914B 916C 96C6 919C 4EC0 4F4F 5145
5341 5F93 620E 67D4 6C41 6E0B 7363 7E26 91CD 9283
53D4 5919 5BBF 6DD1 795D 7E2E 7C9B 587E 719F 51FA
8853 8FF0 4FCA 5CFB 6625 77AC 7AE3 821C 99FF 51C6
5FAA 65EC 696F 6B89 6DF3 6E96 6F64 76FE 7D14 5DE1
9075 9187 9806 51E6 521D 6240 6691 66D9 6E1A 5EB6
7DD2 7F72 66F8 85AF 85F7 8AF8 52A9 53D9 5973 5E8F
5F90 6055 92E4 9664 50B7 511F 52DD 5320 5347 53EC
54E8 5546 5531 5617 5968 59BE 5A3C 5BB5 5C06 5C0F
5C11 5C1A 5E84 5E8A 5EE0 5F70 627F 6284 62DB 638C
6377 6607 660C 662D 6676 677E 68A2 6A1F 6A35 6CBC
6D88 6E09 6E58 713C 7126 7167 75C7 7701 785D 7901
7965 79F0 7AE0 7B11 7CA7 7D39 8096 83D6 848B 8549
885D 88F3 8A1F 8A3C 8A54 8A73 8C61 8CDE 91A4 9266
937E 9418 969C 9798 4E0A 4E08 4E1E 4E57 5197 5270
57CE 5834 58CC 5B22 5E38 60C5 64FE 6761 6756 6D44
72B6 7573 7A63 84B8 8B72 91B8 9320 5631 57F4 98FE
62ED 690D 6B96 71ED 7E54 8077 8272 89E6 98DF 8755
8FB1 5C3B 4F38 4FE1 4FB5 5507 5A20 5BDD 5BE9 5FC3
614E 632F 65B0 664B 68EE 699B 6D78 6DF1 7533 75B9
771F 795E 79E6 7D33 81E3 82AF 85AA 89AA 8A3A 8EAB
8F9B 9032 91DD 9707 4EBA 4EC1 5203 5875 58EC 5C0B
751A 5C3D 814E 8A0A 8FC5 9663 976D 7B25 8ACF 9808
9162 56F3 53A8 9017 5439 5782 5E25 63A8 6C34 708A
7761 7C8B 7FE0 8870 9042 9154 9310 9318 968F 745E
9AC4 5D07 5D69 6570 67A2 8DA8 96DB 636E 6749 6919
83C5 9817 96C0 88FE 6F84 647A 5BF8 4E16 702C 755D
662F 51C4 5236 52E2 59D3 5F81 6027 6210 653F 6574
661F 6674 68F2 6816 6B63 6E05 7272 751F 76DB 7CBE
8056 58F0 88FD 897F 8AA0 8A93 8ACB 901D 9192 9752
9759 6589 7A0E 8106 96BB 5E2D 60DC 621A 65A5 6614
6790 77F3 7A4D 7C4D 7E3E 810A 8CAC 8D64 8DE1 8E5F
78A9 5207 62D9 63A5 6442 6298 8A2D 7A83 7BC0 8AAC
96EA 7D76 820C 8749 4ED9 5148 5343 5360 5BA3 5C02
5C16 5DDD 6226 6247 64B0 6813 6834 6CC9 6D45 6D17
67D3 6F5C 714E 717D 65CB 7A7F 7BAD 7DDA 7E4A 7FA8
817A 821B 8239 85A6 8A6E 8CCE 8DF5 9078 9077 92AD
9291 9583 9BAE 524D 5584 6F38 7136 5168 7985 7E55
81B3 7CCE 564C 5851 5CA8 63AA 66FE 66FD 695A 72D9
758F 758E 790E 7956 79DF 7C97 7D20 7D44 8607 8A34
963B 9061 9F20 50E7 5275 53CC 53E2 5009 55AA 58EE
594F 723D 5B8B 5C64 531D 60E3 60F3 635C 6383 633F
63BB 64CD 65E9 66F9 5DE3 69CD 69FD 6F15 71E5 4E89
75E9 76F8 7A93 7CDF 7DCF 7D9C 8061 8349 8358 846C
84BC 85FB 88C5 8D70 9001 906D 9397 971C 9A12 50CF
5897 618E 81D3 8535 8D08 9020 4FC3 5074 5247 5373
606F 6349 675F 6E2C 8DB3 901F 4FD7 5C5E 8CCA 65CF
7D9A 5352 8896 5176 63C3 5B58 5B6B 5C0A 640D 6751
905C 4ED6 591A 592A 6C70 8A51 553E 5815 59A5 60F0
6253 67C1 8235 6955 9640 99C4 9A28 4F53 5806 5BFE
8010 5CB1 5E2F 5F85 6020 614B 6234 66FF 6CF0 6EDE
80CE 817F 82D4 888B 8CB8 9000 902E 968A 9EDB 9BDB
4EE3 53F0 5927 7B2C 918D 984C 9DF9 6EDD 7027 5353
5544 5B85 6258 629E 62D3 6CA2 6FEF 7422 8A17 9438
6FC1 8AFE 8338 51E7 86F8 53EA 53E9 4F46 9054 8FB0
596A 8131 5DFD 7AEA 8FBF 68DA 8C37 72F8 9C48 6A3D
8AB0 4E39 5358 5606 5766 62C5 63A2 65E6 6B4E 6DE1
6E5B 70AD 77ED 7AEF 7BAA 7DBB 803D 80C6 86CB 8A95
935B 56E3 58C7 5F3E 65AD 6696 6A80 6BB5 7537 8AC7
5024 77E5 5730 5F1B 6065 667A 6C60 75F4 7A1A 7F6E
81F4 8718 9045 99B3 7BC9 755C 7AF9 7B51 84C4 9010
79E9 7A92 8336 5AE1 7740 4E2D 4EF2 5B99 5FE0 62BD
663C 67F1 6CE8 866B 8877 8A3B 914E 92F3 99D0 6A17
7026 732A 82E7 8457 8CAF 4E01 5146 51CB 558B 5BF5
5E16 5E33 5E81 5F14 5F35 5F6B 5FB4 61F2 6311 66A2
671D 6F6E 7252 753A 773A 8074 8139 8178 8776 8ABF
8ADC 8D85 8DF3 929A 9577 9802 9CE5 52C5 6357 76F4
6715 6C88 73CD 8CC3 93AE 9673 6D25 589C 690E 69CC
8FFD 939A 75DB 901A 585A 6802 63B4 69FB 4F43 6F2C
67D8 8FBB 8526 7DB4 9354 693F 6F70 576A 58F7 5B2C
7D2C 722A 540A 91E3 9DB4 4EAD 4F4E 505C 5075 5243
8C9E 5448 5824 5B9A 5E1D 5E95 5EAD 5EF7 5F1F 608C
62B5 633A 63D0 68AF 6C40 7887 798E 7A0B 7DE0 8247
8A02 8AE6 8E44 9013 90B8 912D 91D8 9F0E 6CE5 6458
64E2 6575 6EF4 7684 7B1B 9069 93D1 6EBA 54F2 5FB9
64A4 8F4D 8FED 9244 5178 586B 5929 5C55 5E97 6DFB
7E8F 751C 8CBC 8EE2 985B 70B9 4F1D 6BBF 6FB1 7530
96FB 514E 5410 5835 5857 59AC 5C60 5F92 6597 675C
6E21 767B 83DF 8CED 9014 90FD 934D 7825 783A 52AA
5EA6 571F 5974 6012 5012 515A 51AC 51CD 5200 5510
5854 5858 5957 5B95 5CF6 5D8B 60BC 6295 642D 6771
6843 68BC 68DF 76D7 6DD8 6E6F 6D9B 706F 71C8 5F53
75D8 7977 7B49 7B54 7B52 7CD6 7D71 5230 8463 8569
85E4 8A0E 8B04 8C46 8E0F 9003 900F 9419 9676 982D
9A30 95D8 50CD 52D5 540C 5802 5C0E 61A7 649E 6D1E
77B3 7AE5 80F4 8404 9053 9285 5CE0 9D07 533F 5F97
5FB3 6D9C 7279 7763 79BF 7BE4 6BD2 72EC 8AAD 6803
6A61 51F8 7A81 6934 5C4A 9CF6 82EB 5BC5 9149 701E
5678 5C6F 60C7 6566 6C8C 8C5A 9041 9813 5451 66C7
920D 5948 90A3 5185 4E4D 51EA 8599 8B0E 7058 637A
934B 6962 99B4 7E04 7577 5357 6960 8EDF 96E3 6C5D
4E8C 5C3C 5F10 8FE9 5302 8CD1 8089 8679 5EFF 65E5
4E73 5165 5982 5C3F 97EE 4EFB 598A 5FCD 8A8D 6FE1
79B0 7962 5BE7 8471 732B 71B1 5E74 5FF5 637B 649A
71C3 7C98 4E43 5EFC 4E4B 57DC 56A2 60A9 6FC3 7D0D
80FD 8133 81BF 8FB2 8997 86A4 5DF4 628A 64AD 8987
6777 6CE2 6D3E 7436 7834 5A46 7F75 82AD 99AC 4FF3
5EC3 62DD 6392 6557 676F 76C3 724C 80CC 80BA 8F29
914D 500D 57F9 5A92 6885 6973 7164 72FD 8CB7 58F2
8CE0 966A 9019 877F 79E4 77E7 8429 4F2F 5265 535A
62CD 67CF 6CCA 767D 7B94 7C95 8236 8584 8FEB 66DD
6F20 7206 7E1B 83AB 99C1 9EA6 51FD 7BB1 7872 7BB8
8087 7B48 6AE8 5E61 808C 7551 7560 516B 9262 6E8C
767A 9197 9AEA 4F10 7F70 629C 7B4F 95A5 9CE9 567A
5859 86E4 96BC 4F34 5224 534A 53CD 53DB 5E06 642C
6591 677F 6C3E 6C4E 7248 72AF 73ED 7554 7E41 822C
85E9 8CA9 7BC4 91C6 7169 9812 98EF 633D 6669 756A
76E4 78D0 8543 86EE 532A 5351 5426 5983 5E87 5F7C
60B2 6249 6279 62AB 6590 6BD4 6CCC 75B2 76AE 7891
79D8 7DCB 7F77 80A5 88AB 8AB9 8CBB 907F 975E 98DB
6A0B 7C38 5099 5C3E 5FAE 6787 6BD8 7435 7709 7F8E
9F3B 67CA 7A17 5339 758B 9AED 5F66 819D 83F1 8098
5F3C 5FC5 7562 7B46 903C 6867 59EB 5A9B 7D10 767E
8B2C 4FF5 5F6A 6A19 6C37 6F02 74E2 7968 8868 8A55
8C79 5EDF 63CF 75C5 79D2 82D7 9328 92F2 849C 86ED
9C2D 54C1 5F6C 658C 6D5C 7015 8CA7 8CD3 983B 654F
74F6 4E0D 4ED8 57E0 592B 5A66 5BCC 51A8 5E03 5E9C
6016 6276 6577 65A7 666E 6D6E 7236 7B26 8150 819A
8299 8B5C 8CA0 8CE6 8D74 961C 9644 4FAE 64AB 6B66
821E 8461 856A 90E8 5C01 6953 98A8 847A 8557 4F0F
526F 5FA9 5E45 670D 798F 8179 8907 8986 6DF5 5F17
6255 6CB8 4ECF 7269 9B92 5206 543B 5674 58B3 61A4
626E 711A 596E 7C89 7CDE 7D1B 96F0 6587 805E 4E19
4F75 5175 5840 5E63 5E73 5F0A 67C4 4E26 853D 9589
965B 7C73 9801 50FB 58C1 7656 78A7 5225 77A5 8511
7B86 504F 5909 7247 7BC7 7DE8 8FBA 8FD4 904D 4FBF
52C9 5A29 5F01 97AD 4FDD 8217 92EA 5703 6355 6B69
752B 88DC 8F14 7A42 52DF 5893 6155 620A 66AE 6BCD
7C3F 83E9 5023 4FF8 5305 5446 5831 5949 5B9D 5CF0
5CEF 5D29 5E96 62B1 6367 653E 65B9 670B 6CD5 6CE1
70F9 7832 7E2B 80DE 82B3 840C 84EC 8702 8912 8A2A
8C4A 90A6 92D2 98FD 9CF3 9D6C 4E4F 4EA1 508D 5256
574A 59A8 5E3D 5FD8 5FD9 623F 66B4 671B 67D0 68D2
5192 7D21 80AA 81A8 8B00 8C8C 8CBF 927E 9632 5420
982C 5317 50D5 535C 58A8 64B2 6734 7267 7766 7A46
91E6 52C3 6CA1 6B86 5800 5E4C 5954 672C 7FFB 51E1
76C6 6469 78E8 9B54 9EBB 57CB 59B9 6627 679A 6BCE
54E9 69D9 5E55 819C 6795 9BAA 67FE 9C52 685D 4EA6
4FE3 53C8 62B9 672B 6CAB 8FC4 4FAD 7E6D 9EBF 4E07
6162 6E80 6F2B 8513 5473 672A 9B45 5DF3 7B95 5CAC
5BC6 871C 6E4A 84D1 7A14 8108 5999 7C8D 6C11 7720
52D9 5922 7121 725F 77DB 9727 9D61 690B 5A7F 5A18
51A5 540D 547D 660E 76DF 8FF7 9298 9CF4 59EA 725D
6EC5 514D 68C9 7DBF 7DEC 9762 9EBA 6478 6A21 8302
5984 5B5F 6BDB 731B 76F2 7DB2 8017 8499 5132 6728
9ED9 76EE 6762 52FF 9905 5C24 623B 7C7E 8CB0 554F
60B6 7D0B 9580 5301 4E5F 51B6 591C 723A 8036 91CE
5F25 77E2 5384 5F79 7D04 85AC 8A33 8E8D 9756 67F3
85AE 9453 6109 6108 6CB9 7652 8AED 8F38 552F 4F51
512A 52C7 53CB 5BA5 5E7D 60A0 6182 63D6 6709 67DA
6E67 6D8C 7336 7337 7531 7950 88D5 8A98 904A 9091
90F5 96C4 878D 5915 4E88 4F59 4E0E 8A89 8F3F 9810
50AD 5E7C 5996 5BB9 5EB8 63DA 63FA 64C1 66DC 694A
69D8 6D0B 6EB6 7194 7528 7AAF 7F8A 8000 8449 84C9
8981 8B21 8E0A 9065 967D 990A 617E 6291 6B32 6C83
6D74 7FCC 7FFC 6DC0 7F85 87BA 88F8 6765 83B1 983C
96F7 6D1B 7D61 843D 916A 4E71 5375 5D50 6B04 6FEB
85CD 862D 89A7 5229 540F 5C65 674E 68A8 7406 7483
75E2 88CF 88E1 91CC 96E2 9678 5F8B 7387 7ACB 844E
63A0 7565 5289 6D41 6E9C 7409 7559 786B 7C92 9686
7ADC 9F8D 4FB6 616E 65C5 865C 4E86 4EAE 50DA 4E21
51CC 5BEE 6599 6881 6DBC 731F 7642 77AD 7A1C 7CE7
826F 8AD2 907C 91CF 9675 9818 529B 7DD1 502B 5398
6797 6DCB 71D0 7433 81E8 8F2A 96A3 9C57 9E9F 7460
5841 6D99 7D2F 985E 4EE4 4F36 4F8B 51B7 52B1 5DBA
601C 73B2 793C 82D3 9234 96B7 96F6 970A 9E97 9F62
66A6 6B74 5217 52A3 70C8 88C2 5EC9 604B 6190 6F23
7149 7C3E 7DF4 806F 84EE 9023 932C 5442 9B6F 6AD3
7089 8CC2 8DEF 9732 52B4 5A41 5ECA 5F04 6717 697C
6994 6D6A 6F0F 7262 72FC 7BED 8001 807E 874B 90CE
516D 9E93 7984 808B 9332 8AD6 502D 548C 8A71 6B6A
8CC4 8107 60D1 67A0 9DF2 4E99 4E98 9C10 8A6B 85C1
8568 6900 6E7E 7897 8155 5F0C 4E10 4E15 4E2A 4E31
4E36 4E3C 4E3F 4E42 4E56 4E58 4E82 4E85 8C6B 4E8A
8212 5F0D 4E8E 4E9E 4E9F 4EA0 4EA2 4EB0 4EB3 4EB6
4ECE 4ECD 4EC4 4EC6 4EC2 4ED7 4EDE 4EED 4EDF 4EF7
4F09 4F5A 4F30 4F5B 4F5D 4F57 4F47 4F76 4F88 4F8F
4F98 4F7B 4F69 4F70 4F91 4F6F 4F86 4F96 5118 4FD4
4FDF 4FCE 4FD8 4FDB 4FD1 4FDA 4FD0 4FE4 4FE5 501A
5028 5014 502A 5025 5005 4F1C 4FF6 5021 5029 502C
4FFE 4FEF 5011 5006 5043 5047 6703 5055 5050 5048
505A 5056 506C 5078 5080 509A 5085 50B4 50B2 50C9
50CA 50B3 50C2 50D6 50DE 50E5 50ED 50E3 50EE 50F9
50F5 5109 5101 5102 5116 5115 5114 511A 5121 513A
5137 513C 513B 513F 5140 5152 514C 5154 5162 7AF8
5169 516A 516E 5180 5182 56D8 518C 5189 518F 5191
5193 5195 5196 51A4 51A6 51A2 51A9 51AA 51AB 51B3
51B1 51B2 51B0 51B5 51BD 51C5 51C9 51DB 51E0 8655
51E9 51ED 51F0 51F5 51FE 5204 520B 5214 520E 5227
522A 522E 5233 5239 524F 5244 524B 524C 525E 5254
526A 5274 5269 5273 527F 527D 528D 5294 5292 5271
5288 5291 8FA8 8FA7 52AC 52AD 52BC 52B5 52C1 52CD
52D7 52DE 52E3 52E6 98ED 52E0 52F3 52F5 52F8 52F9
5306 5308 7538 530D 5310 530F 5315 531A 5323 532F
5331 5333 5338 5340 5346 5345 4E17 5349 534D 51D6
535E 5369 536E 5918 537B 5377 5382 5396 53A0 53A6
53A5 53AE 53B0 53B6 53C3 7C12 96D9 53DF 66FC 71EE
53EE 53E8 53ED 53FA 5401 543D 5440 542C 542D 543C
542E 5436 5429 541D 544E 548F 5475 548E 545F 5471
5477 5470 5492 547B 5480 5476 5484 5490 5486 54C7
54A2 54B8 54A5 54AC 54C4 54C8 54A8 54AB 54C2 54A4
54BE 54BC 54D8 54E5 54E6 550F 5514 54FD 54EE 54ED
54FA 54E2 5539 5540 5563 554C 552E 555C 5545 5556
5557 5538 5533 555D 5599 5580 54AF 558A 559F 557B
557E 5598 559E 55AE 557C 5583 55A9 5587 55A8 55DA
55C5 55DF 55C4 55DC 55E4 55D4 5614 55F7 5616 55FE
55FD 561B 55F9 564E 5650 71DF 5634 5636 5632 5638
566B 5664 562F 566C 566A 5686 5680 568A 56A0 5694
568F 56A5 56AE 56B6 56B4 56C2 56BC 56C1 56C3 56C0
56C8 56CE 56D1 56D3 56D7 56EE 56F9 5700 56FF 5704
5709 5708 570B 570D 5713 5718 5716 55C7 571C 5726
5737 5738 574E 573B 5740 574F 5769 57C0 5788 5761
577F 5789 5793 57A0 57B3 57A4 57AA 57B0 57C3 57C6
57D4 57D2 57D3 580A 57D6 57E3 580B 5819 581D 5872
5821 5862 584B 5870 6BC0 5852 583D 5879 5885 58B9
589F 58AB 58BA 58DE 58BB 58B8 58AE 58C5 58D3 58D1
58D7 58D9 58D8 58E5 58DC 58E4 58DF 58EF 58FA 58F9
58FB 58FC 58FD 5902 590A 5910 591B 68A6 5925 592C
592D 5932 5938 593E 7AD2 5955 5950 594E 595A 5958
5962 5960 5967 596C 5969 5978 5981 599D 4F5E 4FAB
59A3 59B2 59C6 59E8 59DC 598D 59D9 59DA 5A25 5A1F
5A11 5A1C 5A09 5A1A 5A40 5A6C 5A49 5A35 5A36 5A62
5A6A 5A9A 5ABC 5ABE 5ACB 5AC2 5ABD 5AE3 5AD7 5AE6
5AE9 5AD6 5AFA 5AFB 5B0C 5B0B 5B16 5B32 5AD0 5B2A
5B36 5B3E 5B43 5B45 5B40 5B51 5B55 5B5A 5B5B 5B65
5B69 5B70 5B73 5B75 5B78 6588 5B7A 5B80 5B83 5BA6
5BB8 5BC3 5BC7 5BC9 5BD4 5BD0 5BE4 5BE6 5BE2 5BDE
5BE5 5BEB 5BF0 5BF6 5BF3 5C05 5C07 5C08 5C0D 5C13
5C20 5C22 5C28 5C38 5C39 5C41 5C46 5C4E 5C53 5C50
5C4F 5B71 5C6C 5C6E 4E62 5C76 5C79 5C8C 5C91 5C94
599B 5CAB 5CBB 5CB6 5CBC 5CB7 5CC5 5CBE 5CC7 5CD9
5CE9 5CFD 5CFA 5CED 5D8C 5CEA 5D0B 5D15 5D17 5D5C
5D1F 5D1B 5D11 5D14 5D22 5D1A 5D19 5D18 5D4C 5D52
5D4E 5D4B 5D6C 5D73 5D76 5D87 5D84 5D82 5DA2 5D9D
5DAC 5DAE 5DBD 5D90 5DB7 5DBC 5DC9 5DCD 5DD3 5DD2
5DD6 5DDB 5DEB 5DF2 5DF5 5E0B 5E1A 5E19 5E11 5E1B
5E36 5E37 5E44 5E43 5E40 5E4E 5E57 5E54 5E5F 5E62
5E64 5E47 5E75 5E76 5E7A 9EBC 5E7F 5EA0 5EC1 5EC2
5EC8 5ED0 5ECF 5ED6 5EE3 5EDD 5EDA 5EDB 5EE2 5EE1
5EE8 5EE9 5EEC 5EF1 5EF3 5EF0 5EF4 5EF8 5EFE 5F03
5F09 5F5D 5F5C 5F0B 5F11 5F16 5F29 5F2D 5F38 5F41
5F48 5F4C 5F4E 5F2F 5F51 5F56 5F57 5F59 5F61 5F6D
5F73 5F77 5F83 5F82 5F7F 5F8A 5F88 5F91 5F87 5F9E
5F99 5F98 5FA0 5FA8 5FAD 5FBC 5FD6 5FFB 5FE4 5FF8
5FF1 5FDD 60B3 5FFF 6021 6060 6019 6010 6029 600E
6031 601B 6015 602B 6026 600F 603A 605A 6041 606A
6077 605F 604A 6046 604D 6063 6043 6064 6042 606C
606B 6059 6081 608D 60E7 6083 609A 6084 609B 6096
6097 6092 60A7 608B 60E1 60B8 60E0 60D3 60B4 5FF0
60BD 60C6 60B5 60D8 614D 6115 6106 60F6 60F7 6100
60F4 60FA 6103 6121 60FB 60F1 610D 610E 6147 613E
6128 6127 614A 613F 613C 612C 6134 613D 6142 6144
6173 6177 6158 6159 615A 616B 6174 616F 6165 6171
615F 615D 6153 6175 6199 6196 6187 61AC 6194 619A
618A 6191 61AB 61AE 61CC 61CA 61C9 61F7 61C8 61C3
61C6 61BA 61CB 7F79 61CD 61E6 61E3 61F6 61FA 61F4
61FF 61FD 61FC 61FE 6200 6208 6209 620D 620C 6214
621B 621E 6221 622A 622E 6230 6232 6233 6241 624E
625E 6263 625B 6260 6268 627C 6282 6289 627E 6292
6293 6296 62D4 6283 6294 62D7 62D1 62BB 62CF 62FF
62C6 64D4 62C8 62DC 62CC 62CA 62C2 62C7 629B 62C9
630C 62EE 62F1 6327 6302 6308 62EF 62F5 6350 633E
634D 641C 634F 6396 638E 6380 63AB 6376 63A3 638F
6389 639F 63B5 636B 6369 63BE 63E9 63C0 63C6 63E3
63C9 63D2 63F6 63C4 6416 6434 6406 6413 6426 6436
651D 6417 6428 640F 6467 646F 6476 644E 652A 6495
6493 64A5 64A9 6488 64BC 64DA 64D2 64C5 64C7 64BB
64D8 64C2 64F1 64E7 8209 64E0 64E1 62AC 64E3 64EF
652C 64F6 64F4 64F2 64FA 6500 64FD 6518 651C 6505
6524 6523 652B 6534 6535 6537 6536 6538 754B 6548
6556 6555 654D 6558 655E 655D 6572 6578 6582 6583
8B8A 659B 659F 65AB 65B7 65C3 65C6 65C1 65C4 65CC
65D2 65DB 65D9 65E0 65E1 65F1 6772 660A 6603 65FB
6773 6635 6636 6634 661C 664F 6644 6649 6641 665E
665D 6664 6667 6668 665F 6662 6670 6683 6688 668E
6689 6684 6698 669D 66C1 66B9 66C9 66BE 66BC 66C4
66B8 66D6 66DA 66E0 663F 66E6 66E9 66F0 66F5 66F7
670F 6716 671E 6726 6727 9738 672E 673F 6736 6741
6738 6737 6746 675E 6760 6759 6763 6764 6789 6770
67A9 677C 676A 678C 678B 67A6 67A1 6785 67B7 67EF
67B4 67EC 67B3 67E9 67B8 67E4 67DE 67DD 67E2 67EE
67B9 67CE 67C6 67E7 6A9C 681E 6846 6829 6840 684D
6832 684E 68B3 682B 6859 6863 6877 687F 689F 688F
68AD 6894 689D 689B 6883 6AAE 68B9 6874 68B5 68A0
68BA 690F 688D 687E 6901 68CA 6908 68D8 6922 6926
68E1 690C 68CD 68D4 68E7 68D5 6936 6912 6904 68D7
68E3 6925 68F9 68E0 68EF 6928 692A 691A 6923 6921
68C6 6979 6977 695C 6978 696B 6954 697E 696E 6939
6974 693D 6959 6930 6961 695E 695D 6981 696A 69B2
69AE 69D0 69BF 69C1 69D3 69BE 69CE 5BE8 69CA 69DD
69BB 69C3 69A7 6A2E 6991 69A0 699C 6995 69B4 69DE
69E8 6A02 6A1B 69FF 6B0A 69F9 69F2 69E7 6A05 69B1
6A1E 69ED 6A14 69EB 6A0A 6A12 6AC1 6A23 6A13 6A44
6A0C 6A72 6A36 6A78 6A47 6A62 6A59 6A66 6A48 6A38
6A22 6A90 6A8D 6AA0 6A84 6AA2 6AA3 6A97 8617 6ABB
6AC3 6AC2 6AB8 6AB3 6AAC 6ADE 6AD1 6ADF 6AAA 6ADA
6AEA 6AFB 6B05 8616 6AFA 6B12 6B16 9B31 6B1F 6B38
6B37 76DC 6B39 98EE 6B47 6B43 6B49 6B50 6B59 6B54
6B5B 6B5F 6B61 6B78 6B79 6B7F 6B80 6B84 6B83 6B8D
6B98 6B95 6B9E 6BA4 6BAA 6BAB 6BAF 6BB2 6BB1 6BB3
6BB7 6BBC 6BC6 6BCB 6BD3 6BDF 6BEC 6BEB 6BF3 6BEF
9EBE 6C08 6C13 6C14 6C1B 6C24 6C23 6C5E 6C55 6C62
6C6A 6C82 6C8D 6C9A 6C81 6C9B 6C7E 6C68 6C73 6C92
6C90 6CC4 6CF1 6CD3 6CBD 6CD7 6CC5 6CDD 6CAE 6CB1
6CBE 6CBA 6CDB 6CEF 6CD9 6CEA 6D1F 884D 6D36 6D2B
6D3D 6D38 6D19 6D35 6D33 6D12 6D0C 6D63 6D93 6D64
6D5A 6D79 6D59 6D8E 6D95 6FE4 6D85 6DF9 6E15 6E0A
6DB5 6DC7 6DE6 6DB8 6DC6 6DEC 6DDE 6DCC 6DE8 6DD2
6DC5 6DFA 6DD9 6DE4 6DD5 6DEA 6DEE 6E2D 6E6E 6E2E
6E19 6E72 6E5F 6E3E 6E23 6E6B 6E2B 6E76 6E4D 6E1F
6E43 6E3A 6E4E 6E24 6EFF 6E1D 6E38 6E82 6EAA 6E98
6EC9 6EB7 6ED3 6EBD 6EAF 6EC4 6EB2 6ED4 6ED5 6E8F
6EA5 6EC2 6E9F 6F41 6F11 704C 6EEC 6EF8 6EFE 6F3F
6EF2 6F31 6EEF 6F32 6ECC 6F3E 6F13 6EF7 6F86 6F7A
6F78 6F81 6F80 6F6F 6F5B 6FF3 6F6D 6F82 6F7C 6F58
6F8E 6F91 6FC2 6F66 6FB3 6FA3 6FA1 6FA4 6FB9 6FC6
6FAA 6FDF 6FD5 6FEC 6FD4 6FD8 6FF1 6FEE 6FDB 7009
700B 6FFA 7011 7001 700F 6FFE 701B 701A 6F74 701D
7018 701F 7030 703E 7032 7051 7063 7099 7092 70AF
70F1 70AC 70B8 70B3 70AE 70DF 70CB 70DD 70D9 7109
70FD 711C 7119 7165 7155 7188 7166 7162 714C 7156
716C 718F 71FB 7184 7195 71A8 71AC 71D7 71B9 71BE
71D2 71C9 71D4 71CE 71E0 71EC 71E7 71F5 71FC 71F9
71FF 720D 7210 721B 7228 722D 722C 7230 7232 723B
723C 723F 7240 7246 724B 7258 7274 727E 7282 7281
7287 7292 7296 72A2 72A7 72B9 72B2 72C3 72C6 72C4
72CE 72D2 72E2 72E0 72E1 72F9 72F7 500F 7317 730A
731C 7316 731D 7334 732F 7329 7325 733E 734E 734F
9ED8 7357 736A 7368 7370 7378 7375 737B 737A 73C8
73B3 73CE 73BB 73C0 73E5 73EE 73DE 74A2 7405 746F
7425 73F8 7432 743A 7455 743F 745F 7459 7441 745C
7469 7470 7463 746A 7476 747E 748B 749E 74A7 74CA
74CF 74D4 73F1 74E0 74E3 74E7 74E9 74EE 74F2 74F0
74F1 74F8 74F7 7504 7503 7505 750C 750E 750D 7515
7513 751E 7526 752C 753C 7544 754D 754A 7549 755B
7546 755A 7569 7564 7567 756B 756D 7578 7576 7586
7587 7574 758A 7589 7582 7594 759A 759D 75A5 75A3
75C2 75B3 75C3 75B5 75BD 75B8 75BC 75B1 75CD 75CA
75D2 75D9 75E3 75DE 75FE 75FF 75FC 7601 75F0 75FA
75F2 75F3 760B 760D 7609 761F 7627 7620 7621 7622
7624 7634 7630 763B 7647 7648 7646 765C 7658 7661
7662 7668 7669 766A 7667 766C 7670 7672 7676 7678
767C 7680 7683 7688 768B 768E 7696 7693 7699 769A
76B0 76B4 76B8 76B9 76BA 76C2 76CD 76D6 76D2 76DE
76E1 76E5 76E7 76EA 862F 76FB 7708 7707 7704 7729
7724 771E 7725 7726 771B 7737 7738 7747 775A 7768
776B 775B 7765 777F 777E 7779 778E 778B 7791 77A0
779E 77B0 77B6 77B9 77BF 77BC 77BD 77BB 77C7 77CD
77D7 77DA 77DC 77E3 77EE 77FC 780C 7812 7926 7820
792A 7845 788E 7874 7886 787C 789A 788C 78A3 78B5
78AA 78AF 78D1 78C6 78CB 78D4 78BE 78BC 78C5 78CA
78EC 78E7 78DA 78FD 78F4 7907 7912 7911 7919 792C
792B 7940 7960 7957 795F 795A 7955 7953 797A 797F
798A 799D 79A7 9F4B 79AA 79AE 79B3 79B9 79BA 79C9
79D5 79E7 79EC 79E1 79E3 7A08 7A0D 7A18 7A19 7A20
7A1F 7980 7A31 7A3B 7A3E 7A37 7A43 7A57 7A49 7A61
7A62 7A69 9F9D 7A70 7A79 7A7D 7A88 7A97 7A95 7A98
7A96 7AA9 7AC8 7AB0 7AB6 7AC5 7AC4 7ABF 9083 7AC7
7ACA 7ACD 7ACF 7AD5 7AD3 7AD9 7ADA 7ADD 7AE1 7AE2
7AE6 7AED 7AF0 7B02 7B0F 7B0A 7B06 7B33 7B18 7B19
7B1E 7B35 7B28 7B36 7B50 7B7A 7B04 7B4D 7B0B 7B4C
7B45 7B75 7B65 7B74 7B67 7B70 7B71 7B6C 7B6E 7B9D
7B98 7B9F 7B8D 7B9C 7B9A 7B8B 7B92 7B8F 7B5D 7B99
7BCB 7BC1 7BCC 7BCF 7BB4 7BC6 7BDD 7BE9 7C11 7C14
7BE6 7BE5 7C60 7C00 7C07 7C13 7BF3 7BF7 7C17 7C0D
7BF6 7C23 7C27 7C2A 7C1F 7C37 7C2B 7C3D 7C4C 7C43
7C54 7C4F 7C40 7C50 7C58 7C5F 7C64 7C56 7C65 7C6C
7C75 7C83 7C90 7CA4 7CAD 7CA2 7CAB 7CA1 7CA8 7CB3
7CB2 7CB1 7CAE 7CB9 7CBD 7CC0 7CC5 7CC2 7CD8 7CD2
7CDC 7CE2 9B3B 7CEF 7CF2 7CF4 7CF6 7CFA 7D06 7D02
7D1C 7D15 7D0A 7D45 7D4B 7D2E 7D32 7D3F 7D35 7D46
7D73 7D56 7D4E 7D72 7D68 7D6E 7D4F 7D63 7D93 7D89
7D5B 7D8F 7D7D 7D9B 7DBA 7DAE 7DA3 7DB5 7DC7 7DBD
7DAB 7E3D 7DA2 7DAF 7DDC 7DB8 7D9F 7DB0 7DD8 7DDD
7DE4 7DDE 7DFB 7DF2 7DE1 7E05 7E0A 7E23 7E21 7E12
7E31 7E1F 7E09 7E0B 7E22 7E46 7E66 7E3B 7E35 7E39
7E43 7E37 7E32 7E3A 7E67 7E5D 7E56 7E5E 7E59 7E5A
7E79 7E6A 7E69 7E7C 7E7B 7E83 7DD5 7E7D 8FAE 7E7F
7E88 7E89 7E8C 7E92 7E90 7E93 7E94 7E96 7E8E 7E9B
7E9C 7F38 7F3A 7F45 7F4C 7F4D 7F4E 7F50 7F51 7F55
7F54 7F58 7F5F 7F60 7F68 7F69 7F67 7F78 7F82 7F86
7F83 7F88 7F87 7F8C 7F94 7F9E 7F9D 7F9A 7FA3 7FAF
7FB2 7FB9 7FAE 7FB6 7FB8 8B71 7FC5 7FC6 7FCA 7FD5
7FD4 7FE1 7FE6 7FE9 7FF3 7FF9 98DC 8006 8004 800B
8012 8018 8019 801C 8021 8028 803F 803B 804A 8046
8052 8058 805A 805F 8062 8068 8073 8072 8070 8076
8079 807D 807F 8084 8086 8085 809B 8093 809A 80AD
5190 80AC 80DB 80E5 80D9 80DD 80C4 80DA 80D6 8109
80EF 80F1 811B 8129 8123 812F 814B 968B 8146 813E
8153 8151 80FC 8171 816E 8165 8166 8174 8183 8188
818A 8180 8182 81A0 8195 81A4 81A3 815F 8193 81A9
81B0 81B5 81BE 81B8 81BD 81C0 81C2 81BA 81C9 81CD
81D1 81D9 81D8 81C8 81DA 81DF 81E0 81E7 81FA 81FB
81FE 8201 8202 8205 8207 820A 820D 8210 8216 8229
822B 8238 8233 8240 8259 8258 825D 825A 825F 8264
8262 8268 826A 826B 822E 8271 8277 8278 827E 828D
8292 82AB 829F 82BB 82AC 82E1 82E3 82DF 82D2 82F4
82F3 82FA 8393 8303 82FB 82F9 82DE 8306 82DC 8309
82D9 8335 8334 8316 8332 8331 8340 8339 8350 8345
832F 832B 8317 8318 8385 839A 83AA 839F 83A2 8396
8323 838E 8387 838A 837C 83B5 8373 8375 83A0 8389
83A8 83F4 8413 83EB 83CE 83FD 8403 83D8 840B 83C1
83F7 8407 83E0 83F2 840D 8422 8420 83BD 8438 8506
83FB 846D 842A 843C 855A 8484 8477 846B 84AD 846E
8482 8469 8446 842C 846F 8479 8435 84CA 8462 84B9
84BF 849F 84D9 84CD 84BB 84DA 84D0 84C1 84C6 84D6
84A1 8521 84FF 84F4 8517 8518 852C 851F 8515 8514
84FC 8540 8563 8558 8548 8541 8602 854B 8555 8580
85A4 8588 8591 858A 85A8 856D 8594 859B 85EA 8587
859C 8577 857E 8590 85C9 85BA 85CF 85B9 85D0 85D5
85DD 85E5 85DC 85F9 860A 8613 860B 85FE 85FA 8606
8622 861A 8630 863F 864D 4E55 8654 865F 8667 8671
8693 86A3 86A9 86AA 868B 868C 86B6 86AF 86C4 86C6
86B0 86C9 8823 86AB 86D4 86DE 86E9 86EC 86DF 86DB
86EF 8712 8706 8708 8700 8703 86FB 8711 8709 870D
86F9 870A 8734 873F 8737 873B 8725 8729 871A 8760
875F 8778 874C 874E 8774 8757 8768 876E 8759 8753
8763 876A 8805 87A2 879F 8782 87AF 87CB 87BD 87C0
87D0 96D6 87AB 87C4 87B3 87C7 87C6 87BB 87EF 87F2
87E0 880F 880D 87FE 87F6 87F7 880E 87D2 8811 8816
8815 8822 8821 8831 8836 8839 8827 883B 8844 8842
8852 8859 885E 8862 886B 8881 887E 889E 8875 887D
88B5 8872 8882 8897 8892 88AE 8899 88A2 888D 88A4
88B0 88BF 88B1 88C3 88C4 88D4 88D8 88D9 88DD 88F9
8902 88FC 88F4 88E8 88F2 8904 890C 890A 8913 8943
891E 8925 892A 892B 8941 8944 893B 8936 8938 894C
891D 8960 895E 8966 8964 896D 896A 896F 8974 8977
897E 8983 8988 898A 8993 8998 89A1 89A9 89A6 89AC
89AF 89B2 89BA 89BD 89BF 89C0 89DA 89DC 89DD 89E7
89F4 89F8 8A03 8A16 8A10 8A0C 8A1B 8A1D 8A25 8A36
8A41 8A5B 8A52 8A46 8A48 8A7C 8A6D 8A6C 8A62 8A85
8A82 8A84 8AA8 8AA1 8A91 8AA5 8AA6 8A9A 8AA3 8AC4
8ACD 8AC2 8ADA 8AEB 8AF3 8AE7 8AE4 8AF1 8B14 8AE0
8AE2 8AF7 8ADE 8ADB 8B0C 8B07 8B1A 8AE1 8B16 8B10
8B17 8B20 8B33 97AB 8B26 8B2B 8B3E 8B28 8B41 8B4C
8B4F 8B4E 8B49 8B56 8B5B 8B5A 8B6B 8B5F 8B6C 8B6F
8B74 8B7D 8B80 8B8C 8B8E 8B92 8B93 8B96 8B99 8B9A
8C3A 8C41 8C3F 8C48 8C4C 8C4E 8C50 8C55 8C62 8C6C
8C78 8C7A 8C82 8C89 8C85 8C8A 8C8D 8C8E 8C94 8C7C
8C98 621D 8CAD 8CAA 8CBD 8CB2 8CB3 8CAE 8CB6 8CC8
8CC1 8CE4 8CE3 8CDA 8CFD 8CFA 8CFB 8D04 8D05 8D0A
8D07 8D0F 8D0D 8D10 9F4E 8D13 8CCD 8D14 8D16 8D67
8D6D 8D71 8D73 8D81 8D99 8DC2 8DBE 8DBA 8DCF 8DDA
8DD6 8DCC 8DDB 8DCB 8DEA 8DEB 8DDF 8DE3 8DFC 8E08
8E09 8DFF 8E1D 8E1E 8E10 8E1F 8E42 8E35 8E30 8E34
8E4A 8E47 8E49 8E4C 8E50 8E48 8E59 8E64 8E60 8E2A
8E63 8E55 8E76 8E72 8E7C 8E81 8E87 8E85 8E84 8E8B
8E8A 8E93 8E91 8E94 8E99 8EAA 8EA1 8EAC 8EB0 8EC6
8EB1 8EBE 8EC5 8EC8 8ECB 8EDB 8EE3 8EFC 8EFB 8EEB
8EFE 8F0A 8F05 8F15 8F12 8F19 8F13 8F1C 8F1F 8F1B
8F0C 8F26 8F33 8F3B 8F39 8F45 8F42 8F3E 8F4C 8F49
8F46 8F4E 8F57 8F5C 8F62 8F63 8F64 8F9C 8F9F 8FA3
8FAD 8FAF 8FB7 8FDA 8FE5 8FE2 8FEA 8FEF 9087 8FF4
9005 8FF9 8FFA 9011 9015 9021 900D 901E 9016 900B
9027 9036 9035 9039 8FF8 904F 9050 9051 9052 900E
9049 903E 9056 9058 905E 9068 906F 9076 96A8 9072
9082 907D 9081 9080 908A 9089 908F 90A8 90AF 90B1
90B5 90E2 90E4 6248 90DB 9102 9112 9119 9132 9130
914A 9156 9158 9163 9165 9169 9173 9172 918B 9189
9182 91A2 91AB 91AF 91AA 91B5 91B4 91BA 91C0 91C1
91C9 91CB 91D0 91D6 91DF 91E1 91DB 91FC 91F5 91F6
921E 91FF 9214 922C 9215 9211 925E 9257 9245 9249
9264 9248 9295 923F 924B 9250 929C 9296 9293 929B
925A 92CF 92B9 92B7 92E9 930F 92FA 9344 932E 9319
9322 931A 9323 933A 9335 933B 935C 9360 937C 936E
9356 93B0 93AC 93AD 9394 93B9 93D6 93D7 93E8 93E5
93D8 93C3 93DD 93D0 93C8 93E4 941A 9414 9413 9403
9407 9410 9436 942B 9435 9421 943A 9441 9452 9444
945B 9460 9462 945E 946A 9229 9470 9475 9477 947D
945A 947C 947E 9481 947F 9582 9587 958A 9594 9596
9598 9599 95A0 95A8 95A7 95AD 95BC 95BB 95B9 95BE
95CA 6FF6 95C3 95CD 95CC 95D5 95D4 95D6 95DC 95E1
95E5 95E2 9621 9628 962E 962F 9642 964C 964F 964B
9677 965C 965E 965D 965F 9666 9672 966C 968D 9698
9695 9697 96AA 96A7 96B1 96B2 96B0 96B4 96B6 96B8
96B9 96CE 96CB 96C9 96CD 894D 96DC 970D 96D5 96F9
9704 9706 9708 9713 970E 9711 970F 9716 9719 9724
972A 9730 9739 973D 973E 9744 9746 9748 9742 9749
975C 9760 9764 9766 9768 52D2 976B 9771 9779 9785
977C 9781 977A 9786 978B 978F 9790 979C 97A8 97A6
97A3 97B3 97B4 97C3 97C6 97C8 97CB 97DC 97ED 9F4F
97F2 7ADF 97F6 97F5 980F 980C 9838 9824 9821 9837
983D 9846 984F 984B 986B 986F 9870 9871 9874 9873
98AA 98AF 98B1 98B6 98C4 98C3 98C6 98E9 98EB 9903
9909 9912 9914 9918 9921 991D 991E 9924 9920 992C
992E 993D 993E 9942 9949 9945 9950 994B 9951 9952
994C 9955 9997 9998 99A5 99AD 99AE 99BC 99DF 99DB
99DD 99D8 99D1 99ED 99EE 99F1 99F2 99FB 99F8 9A01
9A0F 9A05 99E2 9A19 9A2B 9A37 9A45 9A42 9A40 9A43
9A3E 9A55 9A4D 9A5B 9A57 9A5F 9A62 9A65 9A64 9A69
9A6B 9A6A 9AAD 9AB0 9ABC 9AC0 9ACF 9AD1 9AD3 9AD4
9ADE 9ADF 9AE2 9AE3 9AE6 9AEF 9AEB 9AEE 9AF4 9AF1
9AF7 9AFB 9B06 9B18 9B1A 9B1F 9B22 9B23 9B25 9B27
9B28 9B29 9B2A 9B2E 9B2F 9B32 9B44 9B43 9B4F 9B4D
9B4E 9B51 9B58 9B74 9B93 9B83 9B91 9B96 9B97 9B9F
9BA0 9BA8 9BB4 9BC0 9BCA 9BB9 9BC6 9BCF 9BD1 9BD2
9BE3 9BE2 9BE4 9BD4 9BE1 9C3A 9BF2 9BF1 9BF0 9C15
9C14 9C09 9C13 9C0C 9C06 9C08 9C12 9C0A 9C04 9C2E
9C1B 9C25 9C24 9C21 9C30 9C47 9C32 9C46 9C3E 9C5A
9C60 9C67 9C76 9C78 9CE7 9CEC 9CF0 9D09 9D08 9CEB
9D03 9D06 9D2A 9D26 9DAF 9D23 9D1F 9D44 9D15 9D12
9D41 9D3F 9D3E 9D46 9D48 9D5D 9D5E 9D64 9D51 9D50
9D59 9D72 9D89 9D87 9DAB 9D6F 9D7A 9D9A 9DA4 9DA9
9DB2 9DC4 9DC1 9DBB 9DB8 9DBA 9DC6 9DCF 9DC2 9DD9
9DD3 9DF8 9DE6 9DED 9DEF 9DFD 9E1A 9E1B 9E1E 9E75
9E79 9E7D 9E81 9E88 9E8B 9E8C 9E92 9E95 9E91 9E9D
9EA5 9EA9 9EB8 9EAA 9EAD 9761 9ECC 9ECE 9ECF 9ED0
9ED4 9EDC 9EDE 9EDD 9EE0 9EE5 9EE8 9EEF 9EF4 9EF6
9EF7 9EF9 9EFB 9EFC 9EFD 9F07 9F08 76B7 9F15 9F21
9F2C 9F3E 9F4A 9F52 9F54 9F63 9F5F 9F60 9F61 9F66
9F67 9F6C 9F6A 9F77 9F72 9F76 9F95 9F9C 9FA0 582F
69C7 9059 7464 51DC 7199
__END__

=head1 NAME

Unicode::Collate::CJK::JISX0208 - weighting JIS KANJI for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::JISX0208;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::JISX0208::weightJISX0208
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::JISX0208> provides C<weightJISX0208()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of 6355 kanji (CJK Unified Ideographs)
in the JIS X 0208 order.

=head1 SEE ALSO

=over 4

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
     usr/share/perl/5.20.2/Unicode/Collate/CJK/Korean.pm                                                 0100644 0000000 0000000 00000122140 12744441327 020013  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Korean;

use 5.006;
use strict;
use Unicode::Collate;

our $VERSION = '1.02';

my %jamo2prim = (
    0x1100, 0x3152,   0x1101, 0x3153,   0x1102, 0x3154,   0x1103, 0x3155,
    0x1105, 0x3157,   0x1106, 0x3158,   0x1107, 0x3159,   0x1109, 0x315B,
    0x110A, 0x315C,   0x110B, 0x315D,   0x110C, 0x315E,   0x110E, 0x3160,
    0x110F, 0x3161,   0x1110, 0x3162,   0x1111, 0x3163,   0x1112, 0x3164,
    0x1161, 0x31D0,   0x1162, 0x31D1,   0x1163, 0x31D2,   0x1165, 0x31D4,
    0x1166, 0x31D5,   0x1167, 0x31D6,   0x1168, 0x31D7,   0x1169, 0x31D8,
    0x116A, 0x31D9,   0x116B, 0x31DA,   0x116C, 0x31DB,   0x116D, 0x31DC,
    0x116E, 0x31DD,   0x116F, 0x31DE,   0x1170, 0x31DF,   0x1171, 0x31E0,
    0x1172, 0x31E1,   0x1173, 0x31E2,   0x1174, 0x31E3,   0x1175, 0x31E4,
    0x11A8, 0x322E,   0x11AB, 0x3231,   0x11AF, 0x3235,   0x11B7, 0x323D,
    0x11B8, 0x323E,   0x11BC, 0x3242,   0x11BD, 0x3243,
); # for DUCET v6.3.0

my(%u2e, $prim, $wt);
while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    if (@c == 1 && $c[0] =~ /^[A-D]/) {
	my $u = hex $c[0];
	my @h = Unicode::Collate::_decompHangul($u);
	$prim = [ map $jamo2prim{$_}, @h ];
	$wt = 0x20;
    } else {
	for my $c (@c) {
	    next if !$c;
	    $wt++;
	    $u2e{hex($c)} = [ $wt, @$prim ];
	}
    }
}

sub weightKorean {
    my $u = shift;
    return undef if !exists $u2e{$u};
    my @a = @{ $u2e{$u} };
    my $s = shift @a;
    my $p = shift @a;
    return([ $p, $s, 0x2, $u ], @a);
}

1;
__DATA__
AC00
4F3D 4F73 5047 50F9 52A0 53EF 5475 54E5 5609 5AC1
5BB6 6687 67B6 67B7 67EF 6B4C 73C2 75C2 7A3C 82DB
8304 8857 8888 8A36 8CC8 8DCF 8EFB 8FE6 99D5 4EEE
50A2 5496 54FF 5777 5B8A 659D 698E 6A9F 73C8 7B33
801E 8238 846D 8B0C
AC01
523B 5374 5404 606A 6164 6BBC 73CF 811A 89BA 89D2
95A3 537B 54AF 57C6 6409 64F1 6877
AC04
4F83 520A 58BE 5978 59E6 5E72 5E79 61C7 63C0 6746
67EC 687F 6F97 764E 770B 78F5 7A08 7AFF 7C21 809D
826E 8271 8AEB 9593 5058 6173 681E 69A6 7395 79C6
831B 884E 8D76 8FC0 9F66
AC08
4E6B 559D 66F7 6E34 78A3 7AED 845B 8910 874E 97A8
5676 696C 79F8 7FAF 880D 9DA1
AC10
52D8 574E 582A 5D4C 611F 61BE 6221 6562 67D1 6A44
6E1B 7518 75B3 76E3 77B0 7D3A 90AF 9451 9452 9F95
5769 57F3 5D41 5F07 61A8 64BC 6B3F 6B5B 6CD4 6DE6
6F89 77D9 8F57 9163 9E7B
AC11
5323 5CAC 7532 80DB 9240 9598 97D0
AC15
525B 5808 59DC 5CA1 5D17 5EB7 5F3A 5F4A 6177 6C5F
757A 7586 7CE0 7D73 7DB1 7F8C 8154 8221 8591 8941
8B1B 92FC 964D 9C47 508B 50F5 58C3 5FFC 625B 6760
6A7F 6BAD 77FC 7A45 7E48 7F61 7F97 7FAB 8333 8C47
97C1
AC1C
4ECB 4EF7 500B 51F1 584F 6137 613E 6168 6539 69EA
6F11 75A5 7686 76D6 7B87 82A5 84CB 93A7 958B 5274
5303 63E9 69E9 73A0 78D5 95D3
AC1D
5580 5BA2
AC31
5751 7CB3 7FB9 785C 8CE1 93D7
AC39
91B5
AC70
5028 53BB 5C45 5DE8 62D2 636E 64DA 64E7 6E20 70AC
795B 8DDD 8E1E 907D 9245 92F8 547F 661B 79EC 7B65
7C67 80E0 8152 82E3 8392 8556 8627 88AA 88FE 99CF
AC74
4E7E 4EF6 5065 5DFE 5EFA 6106 6957 8171 8654 8E47
9375 9A2B 63F5 728D 7777 8930 8B07 97AC
AC78
4E5E 5091 6770 6840 4E6C 6705 69A4
AC80
5109 528D 5292 6AA2 77BC 9210 9ED4 64BF 82A1
AC81
52AB 602F 8FF2 5226 5227
AC8C
5048 61A9 63ED
ACA9
64CA 683C 6A84 6FC0 8188 89A1 9694 630C 6BC4 95C3
9ABC 9B32 9D03
ACAC
5805 727D 72AC 7504 7D79 7E6D 80A9 898B 8B74 9063
9D51 6A2B 72F7 754E 7B67 7E33 7E7E 7F82 8832 9C39
ACB0
6289 6C7A 6F54 7D50 7F3A 8A23 73A6 89D6 95CB
ACB8
517C 614A 7B9D 8B19 9257 938C 5094 55DB 5C92 62D1
6B49 7E11 84B9 9EDA 9F38
ACBD
4EAC 4FD3 501E 50BE 5106 52C1 52CD 537F 5770 5883
5E9A 5F91 6176 61AC 64CE 656C 666F 66BB 66F4 6897
6D87 7085 70F1 749F 74A5 74CA 75D9 786C 78EC 7ADF
7AF6 7D45 7D93 8015 803F 811B 8396 8B66 8F15 9015
93E1 9803 9838 9A5A 9BE8 518F 5244 54FD 60F8 61BC
6243 6AA0 7162 712D 71B2 754A 7AF8 7D86 9848 7F44
8927 8B26 99C9 9BC1 9EE5
ACC4
4FC2 5553 583A 5951 5B63 5C46 60B8 6212 6842 68B0
68E8 6EAA 754C 7678 78CE 7A3D 7CFB 7E6B 7E7C 8A08
8AA1 8C3F 968E 9DC4 5826 70D3 7608 798A 7B53 7DAE
7E18 7F7D 846A 858A 96DE 9AFB
ACE0
53E4 53E9 544A 5471 56FA 59D1 5B64 5C3B 5EAB 62F7
6537 6545 6572 66A0 67AF 69C1 6CBD 75FC 7690 777E
7A3F 7F94 8003 80A1 818F 82E6 82FD 83F0 85C1 8831
88B4 8AA5 8F9C 932E 96C7 9867 9AD8 9F13 4F30 51C5
5233 5859 6772 6832 69C0 69F9 6ADC 726F 768B 76EC
77BD 7A01 7B8D 7BD9 7CD5 7F5F 7F96 7FFA 80EF 89DA
8A41 90DC 9164 9237 9760 9D23 9DF1
ACE1
54ED 659B 66F2 688F 7A40 8C37 9D60 56B3 69F2 7E20
89F3 8F42
ACE4
56F0 5764 5D11 6606 68B1 68CD 6EFE 7428 889E 9BE4
5803 5D10 6083 6346 7DC4 886E 88CD 890C 9315 95AB
9AE1 9D7E 9DA4 9F6B
ACE8
6C68 9AA8 6430 69BE 77FB 9DBB
ACF5
4F9B 516C 5171 529F 5B54 5DE5 6050 606D 62F1 63A7
653B 73D9 7A7A 86A3 8CA2 978F 5025 5D06 60BE 6831
69D3 7B9C 86E9 86EC 8D1B 8DEB 91ED 9F94
ACF6
4E32
ACFC
5BE1 6208 679C 74DC 79D1 83D3 8A87 8AB2 8DE8 904E
934B 9846 4F89 581D 5925 5938 64BE 7313 7A1E 7AA0
874C 88F9 8E1D 9299 9A0D
ACFD
5ED3 69E8 85FF 90ED 6901 7668 8EA9 970D 97B9
AD00
51A0 5B98 5BEC 6163 68FA 6B3E 704C 742F 74D8 7BA1
7F50 83C5 89C0 8CAB 95DC 9928 4E31 6DAB 721F 76E5
797C 7ABE 7B66 7DB0 8F28 9327 9475 96DA 9874 9AD6
9E1B
AD04
522E 605D 62EC 9002 4F78 681D 7B48 8052 9AFA 9D30
AD11
4F8A 5149 5321 58D9 5EE3 66E0 6D38 709A 72C2 73D6
7B50 80F1 945B 6047 6844 6846 720C 7377 78FA 7D56
7E8A 832A 8A86 8A91
AD18
5366 639B 7F6B 54BC 6302 7F63 8A7F
AD34
4E56 5080 584A 58DE 602A 6127 62D0 69D0 9B41 5ABF
5EE5 6060 7470 749D 84AF 8958
AD35
9998
AD49
5B8F 7D18 80B1 8F5F 6D64 89E5 8A07 958E
AD50
4EA4 50D1 54AC 55AC 5B0C 5DA0 5DE7 652A 654E 6821
6A4B 72E1 768E 77EF 7D5E 7FF9 81A0 854E 86DF 8F03
8F4E 90CA 9903 9A55 9BAB 4F7C 5604 5610 566D 5699
59E3 618D 649F 6648 669E 69B7 78FD 7A96 8DAB 8E7B
9278 9AB9 9D41 9F69
AD6C
4E18 4E45 4E5D 4EC7 4FF1 5177 52FE 5340 53E3 53E5
548E 5614 5775 57A2 5BC7 5D87 5ED0 61FC 62D8 6551
67B8 67E9 69CB 6B50 6BC6 6BEC 6C42 6E9D 7078 72D7
7396 7403 77BF 77E9 7A76 7D7F 8009 81FC 8205 820A
82DF 8862 8B33 8CFC 8EC0 9011 90B1 9264 92B6 99D2
9A45 9CE9 9DD7 9F9C 4F49 4F5D 4FC5 50B4 5193 52AC
5336 53B9 53F4 5778 59E4 5ABE 5AD7 5C68 5CA3 5F40
6235 6263 6344 6406 6473 662B 6998 6F1A 7486 750C
759A 75C0 766F 7A9B 7AB6 7BDD 7CD7 80CA 849F 86AF
88D8 89AF 8A6C 9058 91E6 97DD 97ED 97EE 98B6 99C8
9B2E 9DC7 9E1C
AD6D
570B 5C40 83CA 97A0 97AB 9EB4 530A 63AC 8DFC 9EAF
AD70
541B 7A98 7FA4 88D9 8ECD 90E1 6343 687E 76B8
AD74
5800 5C48 6398 7A9F 5014 5D1B 6DC8 8A58
AD81
5BAE 5F13 7A79 7AAE 828E 8EAC 8EB3
AD8C
5026 5238 52F8 5377 5708 62F3 6372 6B0A 6DC3 7737
52CC 60D3 68EC 7760 7DA3 8737
AD90
53A5 7357 8568 8E76 95D5
ADA4
673A 6AC3 6F70 8A6D 8ECC 994B 4F79 51E0 5282 5331
6192 6485 6A3B 6C3F 7C0B 7E62 8DEA 95E0 993D 9E82
ADC0
6677 6B78 8CB4 9B3C
ADDC
53EB 572D 594E 63C6 69FB 73EA 7845 7ABA 7AC5 7CFE
8475 898F 8D73 9035 95A8 5232 5AE2 5B00 5DCB 668C
694F 6A1B 6F59 777D 7CFA 866C 866F 8DEC 90BD 95DA
980D 9997
ADE0
52FB 5747 7547 7B60 83CC 921E 56F7 9E8F
ADE4
6A58
ADF9
514B 524B 5287 621F 68D8 6975 9699 4E9F 5C05 5C50
90C4
ADFC
50C5 52A4 52E4 61C3 65A4 6839 69FF 747E 7B4B 82B9
83EB 89B2 8B39 8FD1 9949 537A 53AA 5890 5DF9 5ED1
6F0C 89D4 8DDF 91FF 9773
AE08
4ECA 5997 64D2 6611 6A8E 7434 7981 79BD 82A9 887E
887F 895F 9326 552B 5664 5D94 7B12 9EC5
AE09
4F0B 53CA 6025 6271 6C72 7D1A 7D66 573E 5C8C 7680
790F 7B08 82A8
AE0D
4E98 5162 77DC 80AF 4E99 6B91
AE30
4F01 4F0E 5176 5180 55DC 5668 573B 57FA 57FC 5914
5947 5993 5BC4 5C90 5D0E 5DF1 5E7E 5FCC 6280 65D7
65E3 671E 671F 675E 68CB 68C4 6A5F 6B3A 6C23 6C7D
6C82 6DC7 7398 7426 742A 7482 74A3 7578 757F 7881
78EF 7941 7947 7948 797A 7B95 7D00 7DBA 7F88 8006
802D 808C 8A18 8B4F 8C48 8D77 9321 9324 98E2 9951
9A0E 9A0F 9A65 9E92 50DB 525E 588D 5C7A 5E8B 5F03
5FEE 612D 638E 6532 65C2 66A3 66C1 68CA 6B67 7081
7309 79A8 7DA5 7DA6 7F87 80B5 82AA 82B0 8604 8641
871D 87E3 8989 89AC 8DC2 9691 980E 9B10 9C2D 9ED6
AE34
7DCA
AE38
4F76 5409 62EE 6854 59DE 86E3
AE40
91D1
B07D
55AB
B098
513A 5A1C 61E6 62CF 62FF 90A3 6310 632A 689B 7CE5
7CEF
B099
8AFE
B09C
6696 7156 96E3 5044 7157 8D67 992A
B0A0
634F 637A
B0A8
5357 678F 6960 6E73 7537 5583 67DF
B0A9
7D0D 8872
B0AD
56CA 5A18 66E9
B0B4
4E43 5167 5948 67F0 8010 5302 5976 5B2D 8FFA 9F10
B140
5973
B141
60C4
B144
5E74 649A 79CA 78BE
B150
5FF5 606C 62C8 637B
B155
5BE7 5BD7 4F5E 511C 5680 6FD8
B178
52AA 5974 5F29 6012 7459 99D1 5476 5B65 5CF1 7331
7B2F 81D1
B18D
6FC3 81BF 8FB2 5102 5665 7A60 91B2
B1CC
60F1 8166 9912
B1E8
5C3F 5ACB 5B32 6DD6 78E0 88CA 9403
B204
5542 8028
B208
5AE9
B20C
8A25 5436 80AD
B274
677B 7D10 5FF8 9775
B275
8844
B2A5
80FD
B2C8
5C3C 6CE5 5462 6029 67C5 7962 79B0 81A9
B2C9
533F 6EBA 6635 66B1
B2E4
591A 8336 7239
B2E8
4E39 4EB6 4F46 55AE 5718 58C7 5F56 65B7 65E6 6A80
6BB5 6E4D 77ED 7AEF 7C1E 7DDE 86CB 8892 9132 935B
6171 62C5 6934 6F19 7649 8011 80C6 8176 8711
B2EC
64BB 6FBE 737A 75B8 9054 59B2 601B 95E5 977C 97C3
B2F4
5556 574D 61BA 64D4 66C7 6DE1 6E5B 6F6D 6FB9 75F0
8043 81BD 8541 8983 8AC7 8B5A 931F 510B 5557 5649
58B0 58DC 6BEF 79AB 7F4E 859D 90EF 9EEE 9EF5
B2F5
6C93 7553 7B54 8E0F 905D
B2F9
5510 5802 5858 5E62 6207 649E 68E0 7576 7CD6 87B3
9EE8 5018 513B 515A 642A 6A94 6E8F 746D 74AB 77A0
7911 87F7 8960 8B9C 93DC 943A 9933 9939
B300
4EE3 5788 576E 5927 5C0D 5CB1 5E36 5F85 6234 64E1
73B3 81FA 888B 8CB8 968A 9EDB 5113 61DF 65F2 6C4F
7893 9413
B301
5B85
B355
5FB7 60B3
B3C4
5012 5200 5230 5716 5835 5857 5C0E 5C60 5CF6 5D8B
5EA6 5F92 60BC 6311 6389 6417 6843 68F9 6AC2 6DD8
6E21 6ED4 6FE4 71FE 76DC 7779 79B1 7A3B 8404 89A9
8CED 8DF3 8E48 9003 9014 9053 90FD 934D 9676 97DC
53E8 58D4 5F22 5FC9 6146 638F 642F 64E3 6AAE 6D2E
6D82 7A0C 83DF 9174 95CD 9780 97B1 9955 9F17
B3C5
6BD2 7006 7258 72A2 7368 7763 79BF 7BE4 7E9B 8B80
6ADD 9EF7
B3C8
58A9 60C7 6566 65FD 66BE 6C8C 711E 71C9 8C5A 9813
5F34 6F61 8E89
B3CC
4E6D 7A81 5484 5817
B3D9
4EDD 51AC 51CD 52D5 540C 61A7 6771 6850 68DF 6D1E
6F7C 75BC 77B3 7AE5 80F4 8463 9285 4F97 50EE 54C3
578C 5CD2 5F64 6723 6A66 6DB7 825F 82F3 833C 856B
8740 932C 9B97
B450
515C 6597 675C 6793 75D8 7AC7 8373 8C46 9017 982D
6296 6581 809A 8130 86AA 8839 9661
B454
5C6F 81C0 829A 9041 906F 920D 7A80 8FCD
B458
4E67
B4DD
5F97
B4F1
5D9D 6A59 71C8 767B 7B49 85E4 8B04 9127 9A30 51F3
58B1 6ED5 78F4 7C50 7E22 87A3 9419
B77C
5587 61F6 7669 7F85 863F 87BA 88F8 908F 502E 56C9
66EA 7630 7822 81DD 947C 9A3E 9A58
B77D
6D1B 70D9 73DE 7D61 843D 916A 99F1 55E0 7296
B780
4E82 5375 6B04 6B12 703E 721B 862D 9E1E 5B3E 5E71
6514 7053 8974 947E 95CC
B784
524C 8FA3 57D2 8FA2
B78C
5D50 64E5 652C 6B16 6FEB 7C43 7E9C 85CD 8964 89BD
5A6A 60CF
B78D
62C9 81D8 881F 945E
B791
5ECA 6717 6D6A 72FC 7405 746F 8782 90DE 6994 7860
7A02 83A8 870B 95AC
B798
4F86 5D0D 5FA0 840A 6DF6 9A0B
B7AD
51B7
B7B5
63A0 7565 7567
B7C9
4EAE 5006 5169 51C9 6881 6A11 7CAE 7CB1 7CE7 826F
8AD2 8F1B 91CF 55A8 60A2 690B 6DBC 8E09 9B4E
B824
4FB6 5137 52F5 5442 5EEC 616E 623E 65C5 6ADA 6FFE
792A 85DC 8823 95AD 9A62 9A6A 9E97 9ECE 5122 53B2
5533 68A0 7658 7CF2 8182 81DA 8821 908C 9462
B825
529B 66C6 6B77 701D 792B 8F62 9742 650A 6ADF 6AEA
7667 8F63 9148
B828
6190 6200 6523 6F23 7149 7489 7DF4 806F 84EE 8F26
9023 934A 5B4C 695D 6E45 81E0 93C8 9C0A 9C31
B82C
51BD 5217 52A3 6D0C 70C8 88C2 6312 6369 98B2
B834
5EC9 6582 6BAE 6FC2 7C3E 5969 7032 78CF
B835
7375 8E90 9B23
B839
4EE4 4F36 56F9 5CBA 5DBA 601C 73B2 7B2D 7F9A 7FCE
8046 901E 9234 96F6 9748 9818 9F61 53E6 5464 59C8
5CAD 6624 6B1E 6CE0 79E2 82D3 86C9 8EE8 9D12 9E77
B840
4F8B 6FA7 79AE 91B4 96B7 96B8 9C67
B85C
52DE 6488 64C4 6AD3 6F5E 7018 7210 76E7 8001 8606
865C 8DEF 8F05 9732 9B6F 9DFA 9E75 58DA 6EF7 7388
7646 7A82 826A 826B 8F64 942A 946A 9871 9AD7 9C78
9E15
B85D
788C 797F 7DA0 83C9 9304 9E7F 9E93 5725 5F54 6DE5
6F09 7C0F 8F46 9A04
B860
8AD6
B871
58DF 5F04 6727 7027 74CF 7C60 807E 5131 650F 66E8
7931 8622 96B4 9F8E
B8B0
5121 7028 7262 78CA 8CC2 8CDA 8CF4 96F7 6502 790C
7927 7C5F 7E87 7F4D 8012 857E 8A84 9179 9842
B8CC
4E86 50DA 5BEE 5ED6 6599 71CE 7642 77AD 804A 84FC
907C 9B27 5639 5AFD 64A9 66B8 6F66 7360 7E5A 818B
91AA 9410 98C2 98C9
B8E1
9F8D 9F92
B8E8
58D8 5A41 5C62 6A13 6DDA 6F0F 763B 7D2F 7E37 851E
8938 93E4 964B 50C2 560D 5D81 617A 802C 87BB 9ACF
B958
5289 65D2 67F3 69B4 6D41 6E9C 700F 7409 7460 7559
7624 786B 8B2C 985E 6A4A 7E32 7E8D 905B 9DB9
B959
516D 622E 9678 52E0
B95C
4F96 502B 5D19 6DEA 7DB8 8F2A 6384
B960
5F8B 6144 6817 5D42 6EA7
B96D
9686 7643 7ABF
B975
52D2 808B 6CD0
B984
51DC 51DB 5EE9 6F9F
B989
51CC 695E 7A1C 7DBE 83F1 9675 5030 8506
B9AC
4FDA 5229 5398 540F 550E 5C65 60A7 674E 68A8 6D6C
7281 72F8 7406 7483 75E2 7C6C 7F79 7FB8 8389 88CF
88E1 91CC 91D0 96E2 9BC9 4FD0 527A 54E9 5AE0 6D96
6F13 79BB 8385 870A 87AD 8C8D 9090 9B51 9ED0
B9B0
541D 6F7E 71D0 7498 85FA 8EAA 96A3 9C57 9E9F 5D99
608B 735C 78F7 7CA6 7CBC 7E57 8E99 8F54 9130 93FB
9A4E
B9BC
6797 6DCB 7433 81E8 9716 75F3
B9BD
782C 7ACB 7B20 7C92 5CA6
B9C8
6469 746A 75F2 78BC 78E8 99AC 9B54 9EBB 5298 5ABD
879E 87C7 9EBD 9EBF
B9C9
5BDE 5E55 6F20 819C 83AB 9088 7799 93CC
B9CC
4E07 534D 5A29 5DD2 5F4E 6162 633D 6669 66FC 6EFF
6F2B 7063 779E 842C 8513 883B 8F13 9945 9C3B 5881
5ADA 5E54 7E35 8B3E 8E63 93CB 93DD 9B18
B9D0
551C 62B9 672B 6CAB 8309 896A 977A 5E15 79E3
B9DD
4EA1 5984 5FD8 5FD9 671B 7DB2 7F54 8292 832B 83BD
8F1E 9099 60D8 6C52 6F2D 83BE 87D2 9B4D
B9E4
57CB 59B9 5A92 5BD0 6627 679A 6885 6BCF 7164 7F75
8CB7 8CE3 9081 9B45 5446 6973 6CAC 73AB 771B 82FA
8393 9176 9709
B9E5
8108 8C8A 964C 9A40 9EA5 8109 8C83 8C98
B9F9
5B5F 6C13 731B 76F2 76DF 840C 511A 750D 753F 867B
BA71
51AA 8993 5E4E 7CF8
BA74
514D 5195 52C9 68C9 6C94 7704 7720 7DBF 7DEC 9762
9EB5 4FDB 6E4E 7CC6 7DDC 9EAA
BA78
6EC5 8511 7BFE 884A
BA85
51A5 540D 547D 660E 669D 6927 6E9F 76BF 7791 8317
84C2 879F 9169 9298 9CF4 6D3A
BA8C
8882
BAA8
4FAE 5192 52DF 59C6 5E3D 6155 6478 6479 66AE 67D0
6A21 6BCD 6BDB 725F 7261 7441 7738 77DB 8017 82BC
8305 8B00 8B28 8C8C 4F94 59E5 5AA2 5AEB 6048 65C4
7683 770A 7C8D 7CE2 8004 8765 87CA 927E 9AE6
BAA9
6728 6C90 7267 76EE 7766 7A46 9DA9 51E9 82DC
BAB0
6B7F 6C92
BABD
5922 6726 8499 5E6A 61DE 66DA 6E95 6FDB 77A2 77C7
8268 96FA 9E0F
BB18
536F 5893 5999 5EDF 63CF 6634 6773 6E3A 732B 7AD7
82D7 9328 6DFC 7707 85D0 8C93
BB34
52D9 5DEB 61AE 61CB 620A 62C7 64AB 65E0 6959 6B66
6BCB 7121 73F7 755D 7E46 821E 8302 856A 8AA3 8CBF
9727 9D61 511B 5638 5EE1 81B4 9A16
BB35
58A8 9ED8 563F
BB38
5011 520E 543B 554F 6587 6C76 7D0A 7D0B 805E 868A
9580 96EF 5301 6097 61E3 6286 636B 7086 748A
BB3C
52FF 6C95 7269
BBF8
5473 5A9A 5C3E 5D4B 5F4C 5FAE 672A 68B6 6963 6E3C
6E44 7709 7C73 7F8E 8587 8B0E 8FF7 9761 9EF4 4EB9
5A13 5A84 5ABA 5F25 5F2D 6549 7030 737C 7CDC 7E3B
82FF 863C 9E8B
BBFC
5CB7 60B6 610D 61AB 654F 65FB 65FC 6C11 6CEF 739F
73C9 7DE1 9594 5FDE 5FDF 668B 6E63 7DCD 7F60 82E0
95A9 9C35 9EFD
BC00
5BC6 871C 8B10 6A12 6EF5
BC15
525D 535A 62CD 640F 64B2 6734 6A38 6CCA 73C0 749E
7B94 7C95 7E1B 818A 8236 8584 8FEB 96F9 99C1 4EB3
6B02 7254 939B 99EE 9AC6
BC18
4F34 534A 53CD 53DB 62CC 642C 6500 6591 69C3 6CEE
6F58 73ED 7554 7622 76E4 76FC 78D0 78FB 792C 7D46
822C 87E0 8FD4 9812 98EF 5ABB 6273 642B 653D 670C
80D6 878C 9816
BC1C
52C3 62D4 64A5 6E24 6F51 767C 8DCB 91B1 9262 9AEE
9B43 54F1 6D61 8116 9238 9D53
BC29
5023 508D 574A 59A8 5C28 5E47 5F77 623F 653E 65B9
65C1 6609 678B 699C 6EC2 78C5 7D21 80AA 8180 822B
82B3 84A1 868C 8A2A 8B17 90A6 9632 9F90 4EFF 5396
5E6B 5FAC 6412 65CA 6886 7253 823D 8783 938A 9AE3
9B74
BC30
500D 4FF3 57F9 5F98 62DC 6392 676F 6E43 7119 76C3
80CC 80DA 88F4 88F5 8919 8CE0 8F29 914D 966A 574F
576F 6252 7432 84D3
BC31
4F2F 4F70 5E1B 67CF 6822 767D 767E 9B44 7CA8
BC88
5E61 6A0A 7169 71D4 756A 7E41 8543 85E9 98DC 7E59
7FFB 81B0 8629 88A2
BC8C
4F10 7B4F 7F70 95A5 6A43 7F78
BC94
51E1 5E06 68B5 6C3E 6C4E 6CDB 72AF 7BC4 8303 7B35
8A09 98BF
BC95
6CD5 743A
BCBD
50FB 5288 58C1 64D8 6A97 74A7 7656 78A7 8617 95E2
9739 64D7 7513 7588 895E 9DFF 9F0A
BCC0
535E 5F01 8B8A 8FA8 8FAF 908A 5FED 6283 7C69 8FAE
8141 8CC6 99E2 9ABF 9D18
BCC4
5225 77A5 9C49 9F08 5F46 9DE9
BCD1
4E19 5002 5175 5C5B 5E77 661E 663A 67C4 68C5 70B3
7501 75C5 79C9 7ADD 8F27 9920 9A08 4E26 5840 7D63
7F3E 8FF8 9235 92F2 927C
BCF4
4FDD 5821 5831 5BF6 666E 6B65 6D11 6E7A 6F7D 73E4
752B 83E9 88DC 8913 8B5C 8F14 4FCC 76D9 7C20 8446
974C 9D07 9EFC
BCF5
4F0F 50D5 5310 535C 5B93 5FA9 670D 798F 8179 832F
8514 8907 8986 8F39 8F3B 99A5 9C12 58A3 5E5E 6251
6FEE 7B99 83D4 8760 876E 9D69
BCF8
672C
BCFC
4E76
BD09
4FF8 5949 5C01 5CEF 5CF0 6367 68D2 70FD 71A2 742B
7E2B 84EC 8702 9022 92D2 9CF3 4E30 5906 7BF7 7D98
83F6 9D0C
BD80
4E0D 4ED8 4FEF 5085 5256 526F 5426 5490 57E0 592B
5A66 5B5A 5B75 5BCC 5E9C 6276 6577 65A7 6D6E 6EA5
7236 7B26 7C3F 7F36 8150 8151 819A 8240 8299 83A9
8A03 8CA0 8CE6 8CFB 8D74 8DBA 90E8 91DC 961C 9644
99D9 9CE7 4EC6 4FD8 5A8D 6294 62CA 638A 6874 6991
6DAA 739E 7954 7B5F 7F58 7F66 80D5 82A3 82FB 8500
86A8 8709 889D 88D2 8DD7 9207 982B 9B92 9EA9
BD81
5317
BD84
5206 5429 5674 58B3 5954 596E 5FFF 61A4 626E 6610
6C7E 711A 76C6 7C89 7CDE 7D1B 82AC 8CC1 96F0 4F53
574C 5E09 678C 68FB 68FC 6C1B 6E53 6FC6 7287 755A
780F 7B28 80A6 81B9 8561 8F52 9EFA 9F22
BD88
4F5B 5F17 5F7F 62C2 5CAA 7953 7D31 8274 8300 97CD
9AF4 9EFB
BD95
5D29 670B 68DA 787C 7E43 9D6C 580B 6F30 9B05
BE44
4E15 5099 5315 532A 5351 5983 5A62 5E87 60B2 618A
6249 6279 6590 6787 69A7 6BD4 6BD6 6BD7 6BD8 6CB8
7435 75FA 7812 7891 79D5 79D8 7C83 7DCB 7FE1 80A5
813E 81C2 83F2 871A 88E8 8AB9 8B6C 8CBB 9119 975E
98DB 9F3B 4EF3 4FFE 5255 572E 57E4 59A3 5C41 5EB3
60B1 68D0 6911 6C98 6DDD 6DE0 6FDE 72C9 72D2 75DE
75F9 7765 7955 7BE6 7D15 7F86 8153 8298 82BE 8406
84D6 868D 8C94 8D14 8F61 90B3 90EB 959F 9674 970F
97B4 9A11 9A1B 9AC0 9F19
BE48
56AC 5B2A 5F6C 658C 6AB3 6BAF 6D5C 6FF1 7015 725D
73AD 8CA7 8CD3 983B 5110 64EF 77C9 7E7D 81CF 860B
8C73 90A0 944C 9726 9870 9B02 9B22
BE59
6191 6C37 8058 9A01 51B0 51ED 51F4 5A09
C0AC
4E4D 4E8B 4E9B 4ED5 4F3A 4F3C 4F7F 4FDF 50FF 53F2
53F8 5506 55E3 56DB 58EB 5962 5A11 5BEB 5BFA 5C04
5DF3 5E2B 5F99 601D 6368 659C 65AF 67F6 67FB 68AD
6B7B 6C99 6CD7 6E23 7009 7345 7802 793E 7940 7960
79C1 7BE9 7D17 7D72 8086 820D 838E 84D1 86C7 88DF
8A50 8A5E 8B1D 8CDC 8D66 8FAD 90AA 98FC 99DF 9E9D
509E 525A 5378 548B 59D2 6942 69AD 6C5C 75E7 76B6
7AE2 7B25 7F37 8721 8997 99DB 9B66 9BCA 9C24
C0AD
524A 6714 69CA 720D 84B4 9460
C0B0
5098 522A 5C71 6563 6C55 73CA 7523 759D 7B97 849C
9178 9730 5277 59CD 5B7F 6A75 6F78 6F98 72FB 7E56
8A15 93DF 958A 6BFF
C0B4
4E77 6492 6BBA 715E 85A9
C0BC
4E09 6749 68EE 6E17 829F 8518 886B 7CDD 91E4 9B16
C0BD
63F7 6F81 9212 98AF 5345 553C 6B43 7FE3 9364 9705
970E
C0C1
4E0A 50B7 50CF 511F 5546 55AA 5617 5B40 5C19 5CE0
5E38 5E8A 5EA0 5EC2 60F3 6851 6A61 6E58 723D 7240
72C0 76F8 7965 7BB1 7FD4 88F3 89F4 8A73 8C61 8CDE
971C 587D 5F9C 664C 6BA4 751E 7DD7 939F 9859 9B3A
C0C8
585E 74BD 8CFD 9C13
C0C9
55C7 7A61 7D22 8272 69ED 6FC7 7012
C0DD
7272 751F 7525 7B19 771A 924E
C11C
5885 58FB 5DBC 5E8F 5EB6 5F90 6055 6292 637F 654D
6691 66D9 66F8 6816 68F2 7280 745E 7B6E 7D6E 7DD6
7F72 80E5 8212 85AF 897F 8A93 901D 92E4 9ECD 9F20
566C 5A7F 63DF 6495 6E51 6FA8 7D13 8021 82A7 924F
C11D
5915 596D 5E2D 60DC 6614 6673 6790 6C50 6DC5 6F5F
77F3 78A9 84C6 91CB 932B 6670 77FD 814A 8203 8725
9250 9F2B
C120
4ED9 50CA 5148 5584 5B0B 5BA3 6247 657E 65CB 6E32
717D 7401 7444 7487 74BF 766C 79AA 7DDA 7E55 7FA8
817A 81B3 8239 861A 87EC 8A75 8DE3 9078 9291 9425
994D 9BAE 58A1 5AD9 5C1F 5C20 5C73 6103 6B5A 71AF
7B45 7DAB 8B54 8B71 93C7 9A38 9C53 9C7B
C124
5368 5C51 6954 6CC4 6D29 6E2B 820C 859B 893B 8A2D
8AAA 96EA 9F67 5070 5A9F 63F2 66AC 7207 789F 7A27
7D32
C12C
5261 66B9 6BB2 7E96 87FE 8D0D 9583 965D 5B45 61B8
647B 7752 8B6B 929B 97F1
C12D
651D 6D89 71EE 56C1 61FE 7044 8076 8EA1 9477 9873
C131
57CE 59D3 5BAC 6027 60FA 6210 661F 665F 7329 73F9
76DB 7701 7B6C 8056 8072 8165 8AA0 9192 7446 9A02
C138
4E16 52E2 6B72 6D17 7A05 7B39 7D30 8CB0 5E28 6D12
7E50 86FB
C18C
53EC 562F 5851 5BB5 5C0F 5C11 5DE2 6240 6383 6414
662D 68B3 6CBC 6D88 6EAF 701F 70A4 71D2 7526 758F
758E 7619 7B11 7BE0 7C2B 7D20 7D39 852C 856D 8607
8A34 900D 9061 90B5 92B7 97F6 9A37 4F4B 4FCF 5372
55C9 57FD 5850 612C 634E 6A14 6CDD 7B71 7BBE 7E45
7FDB 8186 8258 86F8 8E08 9165 9704 9B48 9BB9 9C3A
C18D
4FD7 5C6C 675F 6D91 7C9F 7E8C 8B16 8D16 901F 6D2C
906C
C190
5B6B 5DFD 640D 84C0 905C 98E1 98E7 98F1
C194
7387 7AA3 87C0
C1A1
5B8B 609A 677E 6DDE 8A1F 8AA6 9001 980C 67D7 7AE6
9B06
C1C4
5237 7051 788E 9396 60E2 66EC 7463
C1E0
8870 91D7
C218
4FEE 53D7 55FD 56DA 5782 58FD 5AC2 5B88 5CAB 5CC0
5E25 6101 620D 624B 6388 641C 6536 6578 6A39 6B8A
6C34 6D19 6F31 71E7 72E9 7378 7407 74B2 7626 7761
79C0 7A57 7AEA 7CB9 7D8F 7DAC 7E61 7F9E 8129 8331
8490 84DA 85EA 8896 8AB0 8B90 8F38 9042 9083 916C
9296 92B9 968B 96A7 96A8 96D6 9700 9808 9996 9AD3
9B1A 53DF 552E 5ECB 666C 6BB3 6CC5 6EB2 6FC9 775F
7762 778D 795F 7C54 813A 8184 81B8 8B8E 8C4E 9672
98BC 9948
C219
53D4 587E 5919 5B70 5BBF 6DD1 6F5A 719F 7421 74B9
8085 83FD 4FF6 500F 5135 5A4C 6A5A 9A4C 9DEB
C21C
5DE1 5F87 5FAA 6042 65EC 6812 696F 6A53 6B89 6D35
6DF3 73E3 76FE 77AC 7B4D 7D14 8123 821C 8340 84F4
8563 8A62 8AC4 9187 931E 9806 99B4 4F9A 72E5 76F9
7734 7D03 80AB 99E8 9B0A 9D89
C220
620C 8853 8FF0 9265 7D49
C22D
5D07 5D27 5D69 83D8
C26C
5005 6DEC 7120
C2AC
745F 819D 8768 8671
C2B5
6FD5 62FE 7FD2 8936 8972 6174 71A0 96B0
C2B9
4E1E 4E58 50E7 52DD 5347 627F 6607 7E69 8805 965E
584D 9B19
C2DC
4F8D 5319 5636 59CB 5AA4 5C38 5C4E 5C4D 5E02 5F11
6043 65BD 662F 6642 67BE 67F4 731C 77E2 793A 7FC5
8494 84CD 8996 8A66 8A69 8AE1 8C55 8C7A 5072 5155
53AE 557B 5852 5EDD 67B2 67F9 6F8C 7DE6 7FE4 8ADF
8AF0 8C49 91C3 9349 984B
C2DD
57F4 5BD4 5F0F 606F 62ED 690D 6B96 6E5C 7184 7BD2
8755 8B58 8EFE 98DF 98FE 55B0 5AB3 683B
C2E0
4F38 4F81 4FE1 547B 5A20 5BB8 613C 65B0 6668 71FC
7533 795E 7D33 814E 81E3 8398 85AA 85CE 8703 8A0A
8EAB 8F9B 8FC5 54C2 567A 56DF 59FA 6C5B 77E7 8124
8D10 9823 99EA
C2E4
5931 5BA4 5BE6 6089 87CB 98CB
C2EC
5BE9 5C0B 5FC3 6C81 6DF1 700B 751A 82AF 8AF6 68A3
6F6F 71D6 845A 9414 9C4F
C2ED
4EC0 5341 8FBB
C30D
96D9
C528
6C0F
C544
4E9E 4FC4 5152 555E 5A25 5CE8 6211 7259 82BD 83AA
86FE 8859 8A1D 963F 96C5 9913 9D09 9D5D 4E2B 54E6
5A3F 5A40 5CE9 75B4 7811 7B0C 8FD3 930F 9D5E
C545
580A 5CB3 5DBD 5E44 60E1 6115 63E1 6A02 6E25 9102
9354 984E 9C10 9F77 5053 537E 54A2 5594 5669 816D
843C 89A8 8AE4 9D9A 9F76
C548
5B89 5CB8 6309 664F 6848 773C 96C1 978D 9854 9B9F
6849 72B4 8D0B 9D08
C54C
65A1 8B01 8ECB 95BC 560E 621E 63E0 7A75 8A10 904F
981E 9D36
C554
5535 5CA9 5DD6 5EB5 6697 764C 83F4 95C7 557D 5A95
5D53 667B 8164 844A 84ED 8AF3 9837 99A3 9EEF
C555
58D3 62BC 72CE 9D28
C559
4EF0 592E 600F 663B 6B83 79E7 9D26 536C 5771 6CF1
76CE 9785
C560
5393 54C0 57C3 5D16 611B 66D6 6DAF 788D 827E 9698
9744 50FE 5509 5540 566F 5A2D 5D15 6328 6371 6B38
6F04 7343 769A 775A 77B9 78D1 7919 8586 85F9 9749
9A03
C561
5384 627C 6396 6DB2 7E0A 814B 984D 545D 6239 6424
9628
C575
6AFB 7F4C 9DAF 9E1A 56B6 5AC8 7F43 9DEA
C57C
4E5F 503B 51B6 591C 60F9 63F6 6930 723A 8036 91CE
57DC
C57D
5F31 7D04 82E5 846F 84BB 85E5 8E8D 721A 79B4 7BDB
7C65 9470 9C2F 9DB8 9FA0
C591
4F6F 58E4 5B43 6059 63DA 6518 656D 6698 694A 6A23
6D0B 7001 716C 75D2 760D 79B3 7A70 7F8A 8944 8B93
91C0 967D 990A 5F89 6F3E 703C 70CA 7662 773B 8618
8F30 9472 98BA 9A64
C5B4
5704 5FA1 65BC 6F01 7600 79A6 8A9E 99AD 9B5A 9F6C
5709 6554 6DE4 98EB
C5B5
5104 61B6 6291 6A8D 81C6 7E76
C5B8
5043 5830 5F66 7109 8A00 8AFA 50BF 533D 5AE3 8B9E
9122 9F34 9F39
C5BC
5B7C 8616 81EC
C5C4
4FFA 513C 56B4 5944 63A9 6DF9 5D26 5E7F 66EE 7F68
9183 95B9
C5C5
5DAA 696D 5DAB 9134
C5D0
605A 66C0
C5D4
5186
C5EC
4E88 4F59 5982 6B5F 6C5D 74B5 7916 8207 8245 8339
8F3F 8F5D 9918 8201
C5ED
4EA6 57DF 5F79 6613 75AB 7E79 8B6F 9006 9A5B 5DA7
61CC 6DE2 95BE
C5F0
56A5 5827 59F8 5A1F 5BB4 5EF6 6350 633B 693D 6C87
6CBF 6D8E 6D93 6DF5 6F14 70DF 7136 7159 71C3 71D5
784F 786F 7B75 7DE3 7E2F 884D 8EDF 925B 9CF6 5157
56E6 57CF 5B3F 6081 63BE 66E3 6ADE 6E37 81D9 839A
8735 8815 8B8C 9DF0
C5F4
6085 6D85 71B1 95B1 564E
C5FC
53AD 67D3 708E 7130 7430 8276 82D2 95BB 9AE5 9E7D
5189 5869 61D5 624A 6ABF 6AB6 704E 7069 91C5 995C
9B58 9EF6
C5FD
66C4 71C1 8449 66C5 7180 7217 9768
C601
584B 5DB8 5F71 6620 668E 6979 69AE 6C38 6CF3 6E36
6F41 6FDA 701B 702F 7150 71DF 7370 745B 74D4 76C8
7A4E 7E93 82F1 8A60 8FCE 9348 9719 548F 5B34 5B30
6D67 6FF4 766D 78A4 7E08 8811 8D0F 90E2 97FA
C608
4E42 502A 5208 53E1 66F3 6C6D 6FCA 730A 777F 7A62
82AE 85DD 8602 88D4 8A63 8B7D 8C6B 92B3 9713 9810
56C8 5ADB 62FD 639C 6798 7369 7768 7796 7E44 7FF3
82C5 854A 854B 8589 868B 873A 9BE2 9DD6 9E91
C624
4E94 4F0D 4FC9 50B2 5348 543E 5433 55DA 5862 58BA
5967 5A1B 5BE4 609F 61CA 6556 65FF 6664 68A7 6C5A
6FB3 70CF 71AC 7352 7B7D 8708 8AA4 9C32 9F07 4EF5
4FE3 5514 55F7 5641 572C 5AAA 5AEF 5FE4 6160 6342
6C59 7AB9 8071 8323 8956 8B37 8FC3 8FD5 9068 93CA
93D6 96A9 9A41 9F2F
C625
5C4B 6C83 7344 7389 923A
C628
6EAB 7465 761F 7A69 7E15 860A 5ABC 614D 6637 6C33
7185 8580 8F40 919E 97DE 9942 9C2E
C62C
5140 55E2 8183
C639
58C5 64C1 74EE 7515 7670 7FC1 9095 96CD 9954 5581
5EF1 6EC3 7655 79BA 7F4B 84CA 96DD 9852
C640
6E26 74E6 7AA9 7AAA 81E5 86D9 8778 8A1B 54C7 56EE
5A50 6799 6D3C 7327 7A8A 8435 8B4C
C644
5A49 5B8C 5B9B 68A1 6900 6D63 73A9 7413 742C 7897
7DE9 7FEB 8118 8155 839E 8C4C 962E 9811 5213 57B8
59A7 5C8F 5FE8 60CB 6DB4 76CC
C648
66F0
C655
5F80 65FA 6789 6C6A 738B 5C2B 7007 8FEC
C65C
502D 5A03 6B6A 77EE 5AA7
C678
5916 5D6C 5DCD 7325 754F 504E 5D34 5D54 6E28 7168
78A8 78C8 8075 9697
C694
50E5 51F9 582F 592D 5996 59DA 5BE5 5DA2 62D7 6416
6493 64FE 66DC 6A48 71FF 7464 7A88 7AAF 7E47 7E5E
8000 8170 87EF 8981 8B20 9059 9080 9952 5060 5593
5773 589D 5B08 5E7A 5FAD 5FBC 6B80 6F86 7945 7A7E
7A85 8558 9076 9DC2
C695
617E 6B32 6D74 7E1F 8925 8FB1 6EBD 84D0
C6A9
4FD1 50AD 5197 52C7 57C7 5889 5BB9 5EB8 6142 6995
6D8C 6E67 6EB6 7194 7462 7528 752C 8073 8338 84C9
8E0A 9394 93DE 509B 5B82 5D71 6175 6183 69E6 7867
8202 86F9 8E34
C6B0
4E8E 4F51 5076 512A 53C8 53CB 53F3 5B87 5BD3 5C24
611A 6182 65F4 725B 7397 7440 76C2 7950 7991 79B9
7D06 7FBD 828B 85D5 865E 8FC2 9047 90F5 91EA 9685
96E8 96E9 4E8F 4EB4 4FC1 504A 5401 5823 5D4E 5EBD
6745 75A3 76F1 7AFD 8026 8030 8B23 8E3D 935D 9E80
9E8C 9F72
C6B1
52D6 5F67 65ED 6631 682F 715C 7A36 90C1 980A 71E0
C6B4
4E91 6A52 6B9E 6F90 7189 8018 82B8 8553 904B 9695
96F2 97FB 60F2 6C84 7BD4 7D1C 9723 97F5
C6B8
851A 9B31 4E90
C6C5
718A 96C4
C6D0
5143 539F 54E1 5713 5712 57A3 5A9B 5AC4 5BC3 6028
613F 63F4 6C85 6D39 6E72 6E90 7230 733F 7457 82D1
8881 8F45 9060 9662 9858 9D1B 51A4 571C 676C 6965
7328 7DA9 82AB 8597 873F 8B1C 92FA 9A35 9D77 9EFF
C6D4
6708 8D8A 925E 5216 7CA4
C704
4F4D 5049 50DE 5371 570D 59D4 5A01 5C09 6170 6690
6E2D 7232 744B 7DEF 80C3 840E 8466 853F 875F 885B
8918 8B02 9055 97CB 9B4F 559F 5E43 7152 71A8 75FF
8473 885E 8AC9 9036 95C8 97D9 97E1 9927 9AAA
C720
4E73 4F91 5112 516A 552F 55A9 5B7A 5BA5 5E7C 5E7D
5EBE 60A0 60DF 6108 6109 63C4 6538 6709 67D4 67DA
6961 6962 6CB9 6D27 6E38 6FE1 7336 7337 745C 7531
7652 7DAD 81FE 8438 88D5 8A98 8ADB 8AED 8E30 8E42
904A 903E 907A 9149 91C9 936E 5198 5466 56FF 58DD
5E37 63C9 65BF 6CD1 7256 7609 7610 7AAC 7AB3 7C72
7CC5 7DCC 8174 83A0 8555 8564 86B0 86B4 8764 8915
8B89 900C 97A3 9BAA 9EDD 9F2C 9FA5
C721
5809 6BD3 8089 80B2 5125
C724
5141 596B 5C39 6F64 73A7 80E4 8D07 9217 958F 6600
92C6
C728
807F 6F4F 77DE
C735
620E 701C 7D68 878D 72E8
C740
57A0 6069 6147 6BB7 8ABE 9280 96B1 542C 569A 5701
57BD 6196 6ABC 6EB5 72FA 73E2 766E 8A14 911E 9F57
C744
4E59 9CE6
C74C
541F 6DEB 852D 9670 97F3 98EE 5591 5D1F 5ED5 6114
972A
C74D
63D6 6CE3 9091 6092 6339 6D65
C751
51DD 61C9 81BA 9DF9
C758
4F9D 501A 5100 5B9C 610F 61FF 64EC 6905 6BC5 7591
77E3 7FA9 8264 858F 87FB 8863 8ABC 8B70 91AB 5117
51D2 5293 5DB7 6B39 6F2A 7317 7912 8798 9950
C774
4E8C 4EE5 4F0A 5937 59E8 5DF2 5F1B 5F5B 6021 723E
73E5 7570 75CD 79FB 800C 8033 8084 82E1 8351 8CBD
8CB3 9087 98F4 990C 54BF 5768 5C14 5F5D 682E 6D1F
73C6 8A11 8A51 8FE4 96B6
C775
7037 76CA 7FCA 7FCC 7FFC 8B1A 5F0B 71A4 9DC1
C778
4EBA 4EC1 5203 5370 54BD 56E0 59FB 5BC5 5F15 5FCD
6E6E 7D6A 8335 8693 8A8D 976D 9777 4EDE 5819 5924
5A63 6268 6C24 6D07 798B 7C7E 82A2 88C0
C77C
4E00 4F5A 4F7E 58F9 65E5 6EA2 9038 93B0 99B9 6CC6
8EFC
C784
4EFB 58EC 598A 59D9 6041 7A14 834F 8CC3 7D4D 887D
928B 98EA
C785
5165 5344 5EFF
C789
4ECD 5269 5B55 82BF 5AB5
C790
4ED4 523A 54A8 59C9 59FF 5B50 5B57 5B5C 6063 6148
6ECB 7099 716E 7386 74F7 75B5 78C1 7D2B 8005 81EA
8328 8517 85C9 8AEE 8CC7 96CC 5470 5B28 5B56 5B76
67D8 6CDA 7278 7725 7726 7CA2 8014 80FE 8308 8332
83BF 8678 89DC 8A3E 8CB2 8D6D 93A1 983F 9AED 9B93
9DBF 9DD3
C791
4F5C 52FA 56BC 65AB 6628 707C 70B8 7235 7DBD 828D
914C 96C0 9D72 5C9D 600D 65B1 67DE 6C4B 712F 72B3
788F
C794
5B71 68E7 6B98 6F7A 76DE 5257 6214 9A4F
C7A0
5C91 66AB 6F5B 7BB4 7C2A 8836 6D94 6F5C 6FF3
C7A1
96DC 5361 56C3 7728 78FC 894D
C7A5
4E08 4ED7 5320 5834 58BB 58EF 596C 5C07 5E33 5E84
5F35 638C 66B2 6756 6A1F 6AA3 6B0C 6F3F 7246 7350
748B 7AE0 7CA7 8178 81DF 81E7 838A 846C 8523 8594
85CF 88DD 8D13 91AC 9577 969C 50BD 5958 599D 5B19
5D82 5EE7 6215 6F33 7242 7634 7CDA 7F98 8407 88C5
8CEC 9123 93D8 9926 9E9E
C7AC
518D 54C9 5728 5BB0 624D 6750 683D 6893 6E3D 6ED3
707D 7E21 88C1 8CA1 8F09 9F4B 9F4E 5908 5D3D 6257
699F 707E 7E94
C7C1
722D 7B8F 8ACD 931A 5D22 7319 7424 9397
C800
4F47 4F4E 5132 5480 59D0 5E95 62B5 6775 696E 6A17
6CAE 6E1A 72D9 732A 75BD 7BB8 7D35 82E7 83F9 8457
85F7 8A5B 8CAF 8E87 9019 90B8 96CE 9F5F 5B81 5CA8
677C 67E2 6C10 6F74 7026 7274 7F5D 7F9D 82F4 86C6
889B 891A 89DD 8A46 8C6C 967C
C801
52E3 540A 5AE1 5BC2 6458 6575 6EF4 72C4 7684 7A4D
7B1B 7C4D 7E3E 7FDF 837B 8B2B 8CCA 8D64 8DE1 8E5F
8FEA 8FF9 9069 93D1 6A00 78E7 7CF4 83C2 89BF 9016
99B0
C804
4F43 4F7A 50B3 5168 5178 524D 526A 5861 587C 5960
5C08 5C55 5EDB 609B 6230 6813 6BBF 6C08 6FB1 714E
7420 7530 7538 7551 7672 7B4C 7B8B 7BAD 7BC6 7E8F
8A6E 8F3E 8F49 923F 9293 9322 942B 96FB 985A 986B
991E 542E 56C0 5AE5 5C47 5DD3 6229 63C3 65C3 6834
69C7 6E54 6FB6 724B 7471 750E 754B 7560 75CA 765C
78DA 7C5B 7FB6 7FE6 8146 819E 8343 8E94 8F07 9085
913D 92D1 932A 975B 9766 9853 98E6 9930 9B0B 9C63
9E07
C808
5207 622A 6298 6D59 7664 7ACA 7BC0 7D76 5C8A 6662
7A83
C810
5360 5CBE 5E97 6F38 70B9 7C98 9711 9B8E 9EDE 4F54
588A 73B7 7B18 7C1F 82EB 852A 86C5 8998 98AD 9ECF
C811
63A5 647A 8776 6904 696A 8728 8DD5 8E40 9C08
C815
4E01 4E95 4EAD 505C 5075 5448 59C3 5B9A 5E40 5EAD
5EF7 5F81 60C5 633A 653F 6574 65CC 6676 6678 67FE
6968 6A89 6B63 6C40 6DC0 6DE8 6E1F 6E5E 701E 70A1
738E 73FD 753A 775B 7887 798E 7A0B 7A7D 7CBE 7D8E
8247 8A02 8AEA 8C9E 912D 914A 91D8 9266 92CC 9320
9706 9756 975C 9802 9F0E 4F42 53EE 5A67 5A77 6014
639F 686F 6883 68D6 706F 73F5 7594 7B73 839B 8A3C
9049 9172 92E5 975A
C81C
5236 5291 557C 5824 5E1D 5F1F 608C 63D0 68AF 6FDF
796D 7B2C 81CD 85BA 88FD 8AF8 8E44 918D 9664 969B
973D 984C 9F4A 5115 5A23 64E0 7318 7445 7747 7994
7A0A 7DF9 8E36 8E4F 8E8B 9357 9684 97F2 9BA7 9BF7
C870
4FCE 5146 51CB 52A9 5632 5F14 5F6B 63AA 64CD 65E9
6641 66FA 66F9 671D 689D 68D7 69FD 6F15 6F6E 7167
71E5 722A 74AA 773A 7956 795A 79DF 7A20 7A95 7C97
7CDF 7D44 7E70 8087 85FB 86A4 8A54 8ABF 8D99 8E81
9020 906D 91E3 963B 96D5 9CE5 4F7B 50AE 5201 539D
5608 566A 5B25 5F82 61C6 627E 6B82 6FA1 7431 7681
7967 7AC8 7B0A 7CD9 7CF6 7D69 7D5B 80D9 81CA 825A
8526 8729 8A82 8B5F 921F 929A 92FD 9BDB 9D70 9F02
C871
65CF 7C07 8DB3 93C3 762F
C874
5B58 5C0A 62F5
C878
5352 62D9 731D
C885
5027 5B97 5F9E 60B0 616B 68D5 6DD9 742E 7A2E 7D42
7D9C 7E31 816B 8E2A 8E35 937E 9418 4F00 6152 67CA
6936 6A05 747D 7607 7CBD 87BD 8E64
C88C
4F50 5750 5DE6 5EA7 632B 5249 75E4 839D 9AFD
C8C4
7F6A
C8FC
4E3B 4F4F 4F8F 505A 59DD 80C4 546A 5468 55FE 594F
5B99 5DDE 5EDA 665D 6731 67F1 682A 6CE8 6D32 6E4A
6F8D 70B7 73E0 7587 7C4C 7D02 7D2C 7DA2 821F 86DB
8A3B 8A85 8D70 8E8A 8F33 9031 914E 9152 9444 99D0
4E1F 4F9C 5114 5C0C 5E6C 62C4 7843 7C52 8098 8160
851F 86C0 88EF 8A4B 8CD9 8D8E 8F08 9052 9252 970C
9714 9F04
C8FD
7AF9 7CA5
C900
4FCA 5101 51C6 57C8 5BEF 5CFB 6659 6A3D 6D5A 6E96
6FEC 710C 756F 7AE3 8822 9021 9075 96CB 99FF 5642
57FB 58AB 60F7 6499 76B4 7DA7 7F47 8E06 8E72 940F
96BC 9915 9C52 9D54
C904
8301 4E7C
C911
4E2D 4EF2 8846 91CD 773E
C989
537D 5373 559E
C990
6ADB 9A2D
C999
696B 6C41 847A 6A9D 857A
C99D
589E 618E 66FE 62EF 70DD 7511 75C7 7E52 84B8 8B49
8D08 5D92 77F0 7F7E
C9C0
4E4B 53EA 54AB 5730 5740 5FD7 6301 6307 646F 652F
65E8 667A 679D 67B3 6B62 6C60 6C9A 6F2C 77E5 7825
7949 7957 7D19 80A2 8102 81F3 829D 82B7 8718 8A8C
8D04 8DBE 9072 577B 5880 627A 69B0 6CDC 75E3 79EA
7BEA 8210 8E1F 8E93 8EF9 962F 9BA8 9DD9
C9C1
76F4 7A19 7A37 7E54 8077 799D
C9C4
5507 55D4 5875 632F 6422 6649 664B 686D 699B 6B84
6D25 6EB1 73CD 7468 74A1 755B 75B9 76E1 771E 778B
79E6 7E09 7E1D 81FB 852F 8897 8A3A 8CD1 8EEB 8FB0
9032 93AD 9663 9673 9707 4FB2 5118 73D2 7A39 84C1
87B4 8D81 9241 9B12
C9C8
4F84 53F1 59EA 5AC9 5E19 684E 74C6 75BE 79E9 7A92
81A3 86ED 8CEA 8DCC 8FED 57A4 7D70 84BA 90C5 9455
C9D0
659F 6715 9D06
C9D1
57F7 6F57 7DDD 8F2F 93F6 96C6 54A0 6222
C9D5
5FB5 61F2 6F84 6F82 7013 7665 77AA
CC28
4E14 4F98 501F 53C9 55DF 5D6F 5DEE 6B21 6B64 78CB
7B9A 8E49 8ECA 906E 4F7D 5056 5953 5C94 5FA3 69CE
7473 7868
CC29
6349 643E 7740 7A84 932F 947F 9F6A 6233 64C9 65B2
CC2C
64B0 6FAF 71E6 74A8 74DA 7AC4 7C12 7E82 7CB2 7E98
8B9A 8D0A 947D 9910 994C 5127 5139 5297 5DD1 6522
6B11 7228 8DB2
CC30
5239 5BDF 64E6 672D 7D2E 624E 62F6
CC38
50ED 53C3 5879 6158 6159 61FA 65AC 7AD9 8B92 8B96
5133 53C5 5D84 5DC9 615A 61AF 6519 69E7 6B03 6BDA
8B56 93E8 9471 995E 9A42 9EF2
CC3D
5009 5021 5275 5531 5A3C 5EE0 5F70 6134 655E 660C
6636 66A2 69CD 6EC4 6F32 7316 7621 7A93 8139 8259
83D6 84BC 5000 5096 51D4 5231 60B5 60DD 6227 6436
6919 6C05 7472 7A97 7ABB 8E4C 92F9 9306 95B6 9B2F
9DAC
CC44
50B5 57F0 5BC0 5BE8 5F69 63A1 7826 7DB5 83DC 8521
91C7 91F5 68CC 831D
CC45
518A 67F5 7B56 8CAC 5616 5E58 78D4 7B27 7C00 86B1
CC98
51C4 59BB 60BD 8655 6DD2 840B 8904 89B7 90EA
CC99
501C 5254 5C3A 617D 621A 62D3 64F2 65A5 6ECC 7620
810A 8E60 965F 96BB 544E 5767 5849 60D5 6357 646D
8734 8DD6 8E91
CC9C
4EDF 5343 5598 5929 5DDD 64C5 6CC9 6DFA 7394 7A7F
821B 85A6 8CE4 8E10 9077 91E7 95E1 9621 97C6 4FF4
5029 50E2 5103 6D0A 6FFA 74E9 7946 7C81 81F6 828A
831C 8350 84A8 8546 8695 8FBF 975D
CCA0
51F8 54F2 5586 5FB9 64A4 6F88 7DB4 8F1F 8F4D 9435
525F 555C 57D1 60D9 6387 6B60 9295 9323 98FB 992E
CCA8
50C9 5C16 6CBE 6DFB 751B 77BB 7C3D 7C64 8A79 8AC2
5E68 5FDD 60C9 6A90 6AFC 7038 7C37 895C
CCA9
581E 59BE 5E16 6377 7252 758A 776B 8ADC 8CBC 8F12
5022 546B 558B 6017 893A
CCAD
5EF3 6674 6DF8 807D 83C1 8ACB 9751 9BD6 51CA 570A
873B 9D84
CCB4
5243 66FF 6D95 6EEF 7DE0 8AE6 902E 905E 9AD4 568F
5F58 68E3 6BA2 780C 8482 8515 855E 8EC6 9746 9AF0
CD08
521D 527F 54E8 6194 6284 62DB 68A2 6912 695A 6A35
7092 7126 785D 7901 790E 79D2 7A0D 8096 8278 82D5
8349 8549 8C82 8D85 9162 918B 91AE 5062 50EC 52AD
52E6 564D 5AF6 5CA7 5CED 5D95 600A 6084 6100 676A
71CB 7D83 8016 8A9A 8B59 8DA0 8EFA 8FE2 9214 936B
936C 9798 9866 9AEB 9DE6 9F60
CD09
4FC3 56D1 71ED 77D7 8700 89F8 66EF 7225 77DA 85A5
8E85 9AD1
CD0C
5BF8 5FD6 6751 90A8 540B
CD1D
53E2 585A 5BF5 60A4 6181 6460 7E3D 8070 8525 9283
8471 84EF 93E6 9A18 9A44
CD2C
64AE
CD5C
50AC 5D14 6700 562C 6467 69B1 6F3C 7480 78EA 7E17
8127
CD94
589C 62BD 63A8 690E 6978 6A1E 6E6B 76BA 79CB 82BB
8429 8ACF 8DA8 8FFD 9112 914B 919C 9310 9318 939A
96DB 9A36 9C0D 50E6 557E 5A35 5E1A 60C6 6376 63EB
6425 7503 7633 9F9D 7B92 7BA0 7C09 7E0B 7E10 84AD
966C 96B9 97A6 9A05 9B4B 9C0C 9D7B 9D96 9DB5 9E84
9EA4
CD95
4E11 755C 795D 7AFA 7B51 7BC9 7E2E 84C4 8E59 8E74
8EF8 9010 59AF 8233 8C56 8E5C 9F00
CD98
6625 693F 7443
CD9C
51FA 672E 9EDC 79EB
CDA9
5145 5FE0 6C96 87F2 885D 8877 51B2 5FE1 73EB
CDCC
60B4 81B5 8403 8D05 60F4 63E3 75A9 7601 9847
CDE8
53D6 5439 5634 5A36 5C31 708A 7FE0 805A 8106 81ED
8DA3 9189 9A5F 9DF2 51A3 6A47 6BF3
CE21
5074 4EC4 53A0 60FB 6E2C 5EC1 6603
CE35
5C64
CE58
4F88 5024 55E4 5CD9 5E5F 6065 6894 6CBB 6DC4 71BE
75D4 75F4 7661 7A1A 7A49 7DC7 7DFB 7F6E 81F4 86A9
8F1C 96C9 99B3 9F52 536E 54C6 5BD8 5DF5 7564 75D3
7D7A 83D1 8599 892B 8C78 8DF1 9319 9624 9BD4 9D19
9D1F 9D44
CE59
5247 52C5 98ED 6555
CE5C
89AA 6AEC 85FD 896F 9F54
CE60
4E03 67D2 6F06
CE68
4FB5 5BE2 6795 6C88 6D78 741B 7827 91DD 937C 5BD6
5FF1 6939 6C89 90F4 92DF 99F8
CE69
87C4
CE6D
79E4 7A31
CF8C
5FEB 5672 592C
D0C0
4ED6 54A4 553E 58AE 59A5 60F0 6253 62D6 6736 6955
8235 9640 99B1 99DD 4F57 579E 62D5 67C1 6A62 6CB1
8A6B 8DCE 8EB1 99DE 9B80 9D15 9F09
D0C1
502C 5353 5544 577C 6258 64E2 666B 67DD 6FC1 6FEF
7422 7438 8A17 9438 62C6 6A50 6CB0 6DBF 77FA 7C5C
8600 8E14 9034
D0C4
5451 5606 5766 5F48 619A 6B4E 7058 70AD 7DBB 8A95
61BB 6524 6BAB 7671 9A52
D0C8
596A 812B 4FBB
D0D0
63A2 7708 803D 8CAA 55FF 5FD0 9156
D0D1
5854 642D 69BB 509D 584C 6428
D0D5
5B95 5E11 6E6F 8569 71D9 76EA 78AD 862F
D0DC
514C 53F0 592A 6020 614B 6B86 6C70 6CF0 7B1E 80CE
82D4 8DC6 90B0 98B1 57ED 5A27 5B61 62AC 8FE8 99C4
99D8
D0DD
64C7 6FA4
D0F1
6491 6490 725A
D130
6504
D1A0
514E 5410 571F 8A0E
D1A4
564B 5678 74F2
D1B5
615F 6876 75DB 7B52 7D71 901A 606B 6A0B 7B69
D1F4
5806 69CC 817F 892A 9000 9839 96A4
D22C
5078 5957 59AC 6295 900F 9B2A 5992 6E1D 9AB0
D241
4F5F
D2B9
615D 7279 5FD2
D2C8
95D6
D30C
5761 5A46 5DF4 628A 64AD 64FA 6777 6CE2 6D3E 722C
7436 7834 7F77 82AD 8DDB 9817 53F5 5991 5CA5 6015
705E 7238 73BB 76A4 7B06 7C38 8019 83E0 8469 9131
D310
5224 5742 677F 7248 74E3 8CA9 8FA6 9211 962A 6C74
D314
516B 53ED 634C 6733 6C43
D328
4F69 5504 6096 6557 6C9B 6D7F 724C 72FD 7A17 8987
8C9D 5B5B 65C6 73EE 9708 9738
D33D
5F6D 6F8E 70F9 81A8 7830 794A 87DA 87DB
D345
610E
D3B8
4FBF 504F 6241 7247 7BC7 7DE8 7FE9 904D 97AD 9A19
533E 5FA7 60FC 7DF6 8251 8439 8759 890A 8ADE
D3C4
8CB6 782D 7A86
D3C9
576A 5E73 67B0 840D 8A55 6026 62A8 6CD9 82F9 84F1
9B83
D3D0
5420 5B16 5E63 5EE2 5F0A 6583 80BA 853D 9589 965B
655D 72F4 7358 7648
D3EC
4F48 5305 530D 530F 5486 54FA 5703 5E03 6016 629B
62B1 6355 6CE1 6D66 75B1 7832 80DE 812F 82DE 8461
84B2 888D 8912 900B 92EA 98FD 9B91 5124 5E96 6661
66D3 70AE 70B0 8216 8AA7 924B 9784 9914 9BC6
D3ED
5E45 66B4 66DD 7011 7206
D45C
4FF5 527D 5F6A 6153 6753 6A19 6F02 74E2 7968 8868
8C79 98C7 98C4 9A43 50C4 52E1 560C 5AD6 647D 6B8D
719B 7E39 88F1 93E2 9463 9ADF 9C3E
D488
54C1 7A1F 7980
D48D
6953 8AF7 8C4A 98A8 99AE 760B 8451
D53C
5F7C 62AB 75B2 76AE 88AB 907F 9642 8A56 8F9F 9781
9AF2
D53D
8177
D544
5339 5F3C 5FC5 6CCC 73CC 7562 758B 7B46 82FE 999D
4F56 5487 6EED 7BF3 7F7C 84FD 89F1 8E55 97B8 97E0
99DC 9D6F
D54D
4E4F 903C 506A
D558
4E0B 4F55 53A6 590F 5EC8 6630 6CB3 7455 8377 8766
8CC0 9050 971E 9C15 5440 5687 5C88 61D7 7146 7615
7F45 935C
D559
58D1 5B78 8650 8B14 9DB4 72E2 7627 76AC 786E 90DD
9DFD
D55C
5BD2 6068 608D 65F1 6C57 6F22 6FA3 701A 7F55 7FF0
9591 9592 9650 97D3 50E9 5AFA 5AFB 634D 66B5 9588
99FB 9DF3 9F3E
D560
5272 8F44 778E
D568
51FD 542B 54B8 5563 558A 6ABB 6DB5 7DD8 8266 929C
9677 9E79 839F 83E1 8AF4 8F5E 95DE
D569
5408 54C8 76D2 86E4 95A4 95D4 965C 530C 55D1 67D9
69BC 6E98 76CD 90C3
D56D
4EA2 4F09 59EE 5AE6 5DF7 6052 6297 676D 6841 6C86
6E2F 7F38 809B 822A 9805 592F 6046 7095 7F3F 980F
D574
4EA5 5055 54B3 5793 595A 5B69 5BB3 61C8 6977 6D77
7023 87F9 89E3 8A72 8AE7 9082 99ED 9AB8 548D 5DB0
5EE8 6B2C 736C 744E 75CE 85A4 91A2 9826 9BAD
D575
52BE 6838 7FEE 8988
D589
5016 5E78 674F 8347 884C 60BB
D5A5
4EAB 5411 56AE 73E6 9115 97FF 9909 9957 9999 858C
D5C8
5653 589F 865B 8A31 6B54
D5CC
61B2 6AF6 737B 8ED2 5DDA 5E70 6507
D5D0
6B47
D5D8
96AA 9A57 5DAE 736B 7381
D601
5955 7200 8D6B 9769 5F08 6D2B 7131 9B29
D604
4FD4 5CF4 5F26 61F8 665B 6CEB 70AB 7384 73B9 73FE
7729 774D 7D43 7D62 7E23 8237 8852 8CE2 9249 986F
5107 5B1B 6621 7404 75C3 770C 7E6F 7FFE 8706 8AA2
92D7 99FD
D608
5B51 7A74 8840 9801 7D5C 8D90
D610
5ACC
D611
4FE0 5354 593E 5CFD 633E 6D79 72F9 8105 8107 83A2
92CF 9830 5327 53F6 57C9 604A 608F 611C 7BCB
D615
4EA8 5144 5211 578B 5F62 6CC2 6ECE 7005 7050 70AF
7192 73E9 7469 834A 87A2 8861 9008 90A2 93A3 99A8
5910 5A19 8A57 8FE5 9658
D61C
516E 5F57 60E0 6167 66B3 8559 8E4A 91AF 978B 5092
5612 5BED 5FAF 69E5 76FB 8B11 8B7F
D638
4E4E 4E92 547C 58D5 58FA 597D 5CB5 5F27 6236 6248
660A 6667 6BEB 6D69 6DCF 6E56 6EF8 6F94 6FE0 6FE9
705D 72D0 7425 745A 74E0 7693 795C 7CCA 7E1E 80E1
82A6 846B 84BF 864E 865F 8774 8B77 8C6A 93AC 9800
9865 512B 51B1 5637 5AED 5AEE 6019 6C8D 6EC8 6EEC
7292 7322 769C 769E 7B8E 8055 9190 992C 9B0D
D639
60D1 6216 9177
D63C
5A5A 660F 6DF7 6E3E 743F 9B42 5702 60DB 6EB7 711C
95BD
D640
5FFD 60DA 7B0F 56EB
D64D
54C4 5F18 6C5E 6CD3 6D2A 70D8 7D05 8679 8A0C 9D3B
664E 6F92 7BCA 9277 9B28
D654
5316 548C 5B05 6A3A 706B 7575 798D 79BE 82B1 83EF
8A71 8B41 8CA8 9774 4FF0 5629 5A72 64ED 756B 9A4A
9FA2
D655
64F4 652B 78BA 78BB 7A6B 77CD 77E1 792D 944A
D658
4E38 559A 5950 5BA6 5E7B 60A3 63DB 6B61 6665 6853
6E19 7165 74B0 7D08 9084 9A69 9C25 5BF0 61FD 64D0
74DB 7696 7746 7D59 8C62 8F58 9370 9436 9B1F
D65C
6D3B 6ED1 733E 8C41 95CA 86DE
D669
51F0 5E4C 5FA8 604D 60F6 6130 614C 6643 6644 69A5
6CC1 6E5F 6EC9 6F62 714C 749C 7687 7BC1 7C27 8352
8757 9051 968D 9EC3 55A4 5A93 6033 745D 8093 8CBA
93A4
D68C
532F 56DE 5EFB 5F8A 6062 6094 61F7 6666 6703 6A9C
6DEE 6FAE 7070 736A 7E6A 81BE 8334 86D4 8AA8 8CC4
4F6A 6803 6D04 6ED9 76D4 8A7C 8FF4 982E 9C60
D68D
5283 7372 5684
D6A1
5B96 6A6B 9404 6F8B 921C 9ECC
D6A8
54EE 5686 5B5D 6548 6585 66C9 689F 6D8D 6DC6 723B
80B4 9175 9A4D 509A 56C2 5D24 6BBD 7187 769B 8653
991A
D6C4
4FAF 5019 539A 540E 543C 5589 55C5 5E3F 5F8C 673D
7166 73DD 9005 543D 55A3 5795 5820 6DB8 7334 7BCC
8A61 8B43 9157 9931
D6C8
52DB 52F3 5864 58CE 7104 718F 71FB 85B0 8A13 6688
66DB 720B 736F 7E81 8477 9442
D6CC
6B3B
D6D9
85A8
D6E4
55A7 6684 714A 8431 70DC 8AE0 8AFC
D6FC
5349 5599 6BC1 71EC 8294 866B 867A
D718
5F59 5FBD 63EE 6689 7147 8AF1 8F1D 9EBE 649D 7FEC
D734
4F11 643A 70CB 7566 8667 54BB 64D5 96B3 9AF9 9D42
D73C
6064 8B4E 9DF8 5379
D749
5147 51F6 5308 6D36 80F8 605F 80F7
D751
9ED1
D754
6615 6B23 7098 75D5 5F88 5FFB 6380 712E 8A22 91C1
D758
5403 5C79 7D07 8A16 4EE1 6C54 7599 8FC4 9F55
D760
6B20 6B3D 6B46 5EDE
D761
5438 6070 6D3D 7FD5 564F 6B59 6F5D 7FD6
D765
8208
D76C
50D6 51DE 559C 566B 56CD 59EC 5B09 5E0C 6199 6198
6231 665E 66E6 7199 71B9 71BA 72A7 79A7 7A00 7FB2
54A5 550F 563B 6095 6232 66BF 6B37 71F9 7214 8C68
993C
D790
8A70 72B5 7E88 896D 9821 9EE0
__END__

=head1 NAME

Unicode::Collate::CJK::Korean - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::Korean;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::Korean::weightKorean
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::Korean> provides C<weightKorean()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's Korean ordering.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                usr/share/perl/5.20.2/Unicode/Collate/CJK/Pinyin.pm                                                 0100644 0000000 0000000 00000317111 12744441327 020046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Pinyin;

use 5.006;
use strict;

our $VERSION = '0.85';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt if $c !~ /-/;
	$wt++;
    }
}

sub weightPinyin {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
FDD0-0041
963F 5475 9515
55C4
554A
54CE 54C0 5509 57C3 5A2D 6328 6B38 6EBE 55F3 92B0
953F 566F 9384
5540 6371 7691 6EB0 560A 6571 6573 769A 764C 9A03
6BD0 6639 5A3E 77EE 853C 8EB7 6FED 85F9 972D 9744
827E 4F0C 7231 7839 784B 9698 55CC 5867 5AD2 611B
788D 53C6 66A7 7477 95A1 50FE 58D2 5B21 61D3 8586
9D31 61DD 66D6 74A6 9932 76A7 77B9 99A4 7919 8B6A
8B7A 9440 9749
9C6B
5B89 4F92 5CD6 6849 6C28 5EB5 83F4 8C19 5A95 843B
844A 75F7 8164 9E4C 84ED 8A9D 978C 978D 76E6 8AF3
99A3 76EB 9D6A 97FD 9D95
73B5 557D 96F8 5111
57B5 4FFA 5535 57EF 94F5 968C 63DE 7F6F 92A8
72B4 5CB8 6309 6D1D 834C 6848 80FA 8C7B 5813 5A69
667B 6697 930C 95C7 9B9F 9EEF
80AE 9AAF
536C 5C87 6602 663B
678A 76CE 91A0
51F9 67EA 688E 8EEA 720A
6556 53AB 969E 55F7 55F8 5D85 5ED2 6EF6 7353 851C
9068 646E 71AC 7352 7488 78DD 7FF1 8071 87AF 8B37
8B38 7FFA 9CCC 93D6 9C32 9DD4 9F07
629D 82BA 62D7 8884 957A 5AAA 5ABC 8956
5C99 6277 5773 5787 5CB0 50B2 5961 5965 5967 5AEF
6160 9A9C 96A9 58BA 5DB4 61CA 6FB3 64D9 93CA 9A41
7FF6
FDD0-0042
516B 4EC8 6252 6733 7390 593F 5C9C 82AD 5CC7 67ED
75A4 54F5 5DFC 634C 7C91 7F93 8686 91DB 91DF 8C5D
9C83
53D0 72AE 629C 577A 59AD 62D4 8307 70A6 7679 80C8
83DD 8A59 8DCB 8EF7 98B0 9B43 58A2 9F25
628A 94AF 9200 9776
575D 5F1D 7238 57BB 8019 8DC1 9C85 9C8C 9B8A 8987
77F2 9738 58E9 705E 6B1B
5DF4 53ED 5427 7B06 7D26 7F62 9B5E 7F77
6300 63B0 64D8
767D
767E 4F70 67CF 6822 636D 74F8 7CA8 7D54 6446 64FA
896C
5E8D 62DD 8D25 62DC 6557 7308 7A17 86FD 7CBA 8D01
97DB
7AE1 85AD
6273 653D 73ED 822C 9881 6591 642C 6592 9812 7622
9CFB 878C 8929 764D 8FAC
962A 5742 5C85 6604 677F 7248 74EA 94A3 7C84 8228
9211 8742 9B6C 95C6
529E 534A 4F34 5762 59C5 6011 62CC 7ECA 67C8 79DA
6E74 7D46 9261 977D 8FA6 74E3
626E 8781
90A6 57B9 5E2E 6360 6886 6D5C 90AB 5E47 5E5A 7E0D
5E6B 97A4
7ED1 7D81 699C 7253 8180 9AC8
73A4 868C 508D 68D2 68D3 8C24 585D 6412 7A16 84A1
872F 78C5 9551 8255 8B17 938A
52F9 5305 5B62 82DE 67B9 80DE 7B23 7172 9F85 8554
8912 8943 95C1 9F59
7A87 5AD1 96F9 8584
5B9D 6009 9971 4FDD 9E28 5BB2 73E4 5821 5822 5AAC
8446 5BDA 98FD 8913 99C2 9CF5 7DE5 9D07 8CF2 5BF3
5BF6 974C
52FD 62A5 62B1 8C79 8DB5 94C7 83E2 86AB 888C 5831
924B 9C8D 9764 9AB2 66B4 9AF1 8663 9B91 5124 66D3
7206 5FC1 9464 9E14
4F68 85F5
9642 5351 676F 76C3 686E 60B2 63F9 6911 7986 7891
9E4E 9303 85E3 9D6F
5317 9273
8D1D 5B5B 72C8 8C9D 90B6 5907 6601 726C 82DD 80CC
90E5 94A1 4FFB 500D 6096 72FD 88AB 505D 5079 6896
73FC 9101 5099 50C3 60EB 7119 7432 8EF0 8F88 6102
789A 84D3 7295 8919 8A96 9781 9AB3 8F29 92C7 618A
7CD2 97B4 943E
5457 5504 7999
5954 6CCD 8D32 681F 7287 951B 931B
672C 82EF 5959 755A 7FC9 694D
574B 574C 5034 6379 6873 6E00 7B28 9029 64AA 7356
8F3D
4F3B 794A 595F 5D29 7D63 958D 50B0 5D6D 75ED 5623
7DB3
752D
57C4 57F2 7EF7 83F6 7423 742B 7E43 979B
6CF5 8FF8 902C 5874 750F 955A 8E66 93F0 882F
63FC
5C44 506A 6BF4 903C 6945 8C4D 8795 9D56 9CBE 939E
9C0F
8378 9F3B
5315 6BD4 5936 673C 4F4A 5421 59A3 6C98 7595 5F7C
67C0 79D5 4FFE 7B14 7C83 822D 555A 7B46 9119 7B84
805B 8C8F
5E01 5FC5 6BD5 95ED 4F56 5752 5E87 8BD0 90B2 59BC
602D 6036 6788 7540 82FE 54D4 67F2 6BD6 73CC 75AA
835C 965B 6BD9 72F4 7562 7B13 7C8A 8890 94CB 5A62
5EB3 655D 6890 8406 9587 9589 581B 5F3B 5F3C 610A
610E 6E62 7695 7B5A 8A56 8CB1 8CC1 8D51 55F6 5F43
6ED7 6EED 714F 75F9 75FA 7764 8177 84D6 84FD 870C
88E8 8DF8 924D 959F 98F6 5E63 5F0A 719A 7359 78A7
7B85 7B86 7DBC 853D 912A 999D 6F77 7358 7F7C 99DC
9AF2 58C1 5B16 5EE6 7BE6 7BF3 7E2A 859C 89F1 907F
9B85 6583 6FDE 81C2 8E55 9AC0 5970 74A7 9128 93CE
9946 7E74 895E 8963 97B8 97E0 9B53 8E83 8E84 9A46
8D14 9434 9DDD 9DE9 9F0A
5302 841E 5E64 8945 5B36
8FB9 8FBA 782D 7B3E 63D9 7335 7F16 7178 7251 7502
7BAF 7DE8 8759 9089 937D 9CCA 908A 97AD 9BFE 9BFF
7C69
8D2C 6241 7A86 533E 8CB6 60FC 8439 78A5 7A28 890A
7CC4 9D18 85CA
535E 5F01 5325 5FED 6283 6C73 6C74 82C4 91C6 53D8
73A3 4FBF 5909 662A 898D 5FA7 7F0F 904D 959E 8FA1
7DF6 8251 8FA7 8FA8 8FA9 8FAB 8FAE 8FAF 8B8A
5CC5 709E
706C 6753 6807 98D1 9A89 9ADF 6DF2 5F6A 730B 813F
98A9 5882 5E56 647D 6EEE 8508 98AE 9AA0 6A19 719B
8198 762D 78E6 9556 98D9 98DA 5126 98B7 700C 85E8
8B24 7202 81D5 8D06 93E2 7A6E 9573 98C6 98C7 98C8
9A43 9463 9A6B
8868 5A4A 88F1 8AD8 893E 9336 6AA6
4FF5 9CD4 9C3E
98CA
618B 87DE 9CD6 9C49 9F08 864C 9F9E
5225 522B 5487 8382 86C2 5FB6 8952 8E69
762A 765F
5F46
6C43 90A0 73A2 780F 5BBE 5F6C 68B9 50A7 658C 6915
6EE8 7F24 69DF 7478 8C69 8CD3 8CD4 9554 5110 6FD2
6FF1 8668 8C73 6AB3 74B8 7015 9726 7E7D 944C 986E
6448 6BA1 8191 9AE9 64EF 9B02 6BAF 81CF 9ACC 9B13
9AD5 9B22
6C1E 6FF5
51AB 4ECC 4ED2 6C37 51B0 5175 63A4
4E19 90B4 9643 6032 62A6 79C9 82EA 661E 663A 67C4
70B3 997C 772A 7A89 86C3 6452 7980 7A1F 9235 927C
9905 9920 979E
5E76 4E26 4F75 5E77 5EB0 5002 6824 75C5 7ADD 504B
50A1 5BCE 68C5 8A81 9BA9 9750
57AA 9786 92F2
7676 5E17 62E8 6CE2 7677 73BB 525D 5265 54F1 76CB
7835 889A 94B5 997D 7D34 7F3D 83E0 88B0 7886 9262
50E0 5D93 64A5 64AD 9911 9B81 8E73 9A4B 9C4D
4EE2 4F2F 72BB 8091 9A73 5E1B 72DB 74DD 82E9 4FBC
52C3 80C9 90E3 4EB3 632C 6D61 74DF 79E1 88AF 94B9
94C2 8116 8236 88B9 535A 6E24 8467 9E41 613D 640F
733C 9238 9251 998E 50F0 717F 7254 7B94 824A 8514
999B 99C1 8E23 92CD 9548 999E 99EE 894F 8C70 5697
61EA 7921 7C19 939B 993A 9D53 72A6 9AC6 9AC9 6B02
896E 7934 946E
8DDB 7BA5 7C38
5B79 6A97 7CEA 8B52 8617
535C 5575 8421 818A
5CEC 5EAF 900B 6661 923D 8AA7
9CEA 8F50 91AD
535F 8865 54FA 6355 55B8 88DC 9D4F
4E0D 5E03 4F48 5425 6B65 5498 6016 62AA 6B68 6B69
67E8 949A 52CF 57D4 57D7 6091 6357 8379 90E8 94B8
57E0 74FF 8500 8E04 90F6 9914 7BF0 9922 7C3F
FDD0-0043
5693 64E6 6503
7924
906A 56C3
5072 5A47 731C
624D 72B2 6750 8D22 8CA1 88C1 6EA8 7E94
6BDD 91C7 5038 554B 5BC0 5F69 63A1 776C 8DF4 7DB5
8E29
57F0 83DC 68CC 8521 7E29
53C2 53C3 53C4 98E1 9A96 53C5 55B0 6E4C 50AA 5B20
9910 9A42
6B8B 8695 60ED 6B98 615A 8745 6159 5B31 8836 883A
60E8 6701 6158 61AF 7A47 7BF8 9EEA 9EF2
707F 63BA 5B71 7CB2 647B 6FAF 8592 71E6 74A8 8B32
510F 7218
4ED3 4EFA 4F27 6CA7 82CD 9E27 5009 8231 5096 5D62
6EC4 734A 84BC 8259 87A5 9DAC
85CF 9476
8CF6
6FF8 7F49 6B0C
64A1 64CD 7CD9
66FA 66F9 5608 5D86 6F15 84F8 69FD 893F 825A 87AC
93EA
8278 8349 613A 61C6 9A32
808F 9135 8959
8279
518A 518C 4FA7 5395 607B 62FA 6D4B 6547 755F 5074
53A0 7B27 7CA3 8417 5EC1 60FB 6E2C 7B56 8434 7B5E
7B74 84DB 5884 7BA3 61A1 7C0E
5D7E
5C91 6D94 7B12 68A3
66FD 564C
5C42 66FE 5C64 5D92 7AF2 9A53
8E6D
53C9 6260 6748 809E 81FF 633F 505B 55CF 63D2 63F7
9987 929F 9538 8256 7580 9364 9937
79C5 579E 67E5 832C 8336 5D56 643D 7339 976B 69CE
8A67 5BDF 78B4 6AAB
8869 8E45 9572 9454
597C 6C4A 5C94 4F98 8BE7 59F9 5DEE 7D01 8A6B
8286 62C6 9497 91F5
4FAA 67F4 8C7A 7961 558D 5115 9F5C
831D
867F 8883 8A0D 7625 8806 56C6
8FBF 89C7 68B4 6400 8998 88E7 9246 92D3 5E68 895C
6519
5A75 8C17 68CE 6E79 7985 998B 7158 7F20 50DD 7351
8749 8A97 92CB 5103 5B0B 5EDB 6F79 6F7A 7DFE 6FB6
78DB 79AA 6BDA 913D 9561 700D 87EC 5133 5296 87FE
9141 56B5 5DC9 703A 6B03 7E8F 7E92 8E94 9575 826C
8B92 9471 995E
4EA7 522C 65F5 4E33 65BA 6D50 5257 8C04 5574 7522
7523 94F2 9610 8487 5277 5D7C 644C 6EFB 563D 5E5D
8546 8AC2 95B3 9AA3 71C0 7C05 5181 7E5F 8B42 8FB4
93DF 95E1 56C5 705B 8B87
5FCF 785F 6472 61F4 98A4 61FA 7FBC 97C2 986B
58E5
4F25 660C 5000 5A3C 6DD0 7316 83D6 960A 667F 7429
88EE 9520 9329 95B6 9CB3 9BE7 9F1A
4EE7 514F 80A0 82CC 9578 5C1D 507F 5E38 5F9C 74FA
8407 751E 8178 5617 5872 5AE6 747A 8193 92FF 511F
5690 9CBF 93DB 9C68
5382 573A 6636 60DD 5834 50D8 53B0 5EE0 6C05 92F9
6005 739A 7545 5021 9B2F 5531 60B5 713B 7452 66A2
757C 8AAF 97D4
655E 6919 87D0
6284 5F28 600A 6B29 949E 8A2C 712F 8D85 9214 52E6
724A 6641 5DE2 5DE3 671D 911B 9F0C 6F05 5632 6A14
6F6E 7AB2 7F7A 8F48 9F02 8B3F
5435 7092 7727 7123 717C 9EA8 5DD0
4EE6 4EEF 8016 89D8
8F66 4F21 8ECA 4FE5 7817 5513 8397 7868 86FC
626F 5056 64A6
5C6E 5F7B 577C 8FE0 70E2 8045 63A3 7869 9819 5FB9
64A4 6F88 52F6 77AE 7221
62BB 90F4 6375 741B 55D4 7D9D 778B 8AC3 8CDD 7E1D
8B13
5C18 81E3 5FF1 6C88 6C89 8FB0 9648 8FE7 831E 5BB8
8380 8390 9673 6550 8A26 8C0C 8ED9 6116 63E8 9202
7141 852F 5875 6A04 760E 9703 87B4 8AF6 85BC 9E8E
66DF 9DD0
8DBB 7876 789C 588B 5926 78E3 8E38 9356 8D02 91A6
886C 75A2 9F80 8D81 8D82 6987 9F53 512C 9F54 512D
56AB 8C36 6AEC 896F 8B96
70E5 6668
9637 6CDF 67FD 722F 68E6 6D7E 7424 79F0 5041 86CF
6E5E 725A 8D6A 50DC 6186 645A 7A31 9757 6490 6491
7DFD 6A55 77A0 8D6C 9833 6A89 7AC0 7A6A 87F6 93F3
93FF 9953
4E1E 6210 673E 5448 627F 67A8 8BDA 90D5 4E57 57CE
5A0D 5BAC 5CF8 6D06 837F 4E58 57D5 6330 665F 73F9
8100 6381 73F5 7880 7A9A 812D 94D6 5818 60E9 68D6
6909 7A0B 7B6C 7D7E 88CE 584D 5856 6E97 8AA0 757B
9172 92EE 6195 6F82 6F84 6A59 6A99 7013 61F2 9A2C
4FB1 5F8E 609C 901E 9A8B 5EB1 7748 9A01
79E4
9BCE
5403 4F99 54E7 5F68 80F5 86A9 9E31 74FB 7735 7B1E
55AB 8A35 55E4 5AB8 645B 75F4 7D7A 5644 779D 8ABA
87AD 9D1F 7661 9B51 9F5D 5F72 9ED0
5F1B 6C60 9A70 8FDF 577B 5CBB 830C 6301 7AFE 834E
6B6D 86B3 8D7F 7B42 8CBE 9045 8D8D 905F 99B3 7B8E
5880 6F26 8E1F 9072 7BEA 8B18
5C3A 53FA 544E 4F88 5376 9F7F 5791 80E3 6065 7C8E
803B 8687 88B3 6B3C 6B6F 88B2 88ED 9279 892B 9F52
5F73 53F1 65A5 6758 707B 8D64 996C 62B6 52C5 605C
70BD 52D1 7FC4 7FC5 6555 70FE 75D3 557B 6E41 7873
98ED 50BA 75F8 815F 8DEE 9253 96F4 618F 7608 7FE4
906B 9290 6157 761B 7FE8 71BE 61D8 8DA9 994E 9D92
9DD8
599B 9EB6
5145 51B2 5FE1 6C96 833A 6D7A 73EB 7FC0 8202 5603
644F 5FB8 6183 61A7 885D 7F7F 825F 8E56
866B 5D07 5D08 9680 8908 7DDF 8769 87F2 721E
5BA0 57EB 5BF5
94F3 63F0 9283
62BD 5A64 640A 7633 7BD8 72A8 72AB
4EC7 601E 4FE6 5E31 6826 60C6 7D2C 7EF8 83D7 6906
7574 7D52 6101 7697 7A20 7B79 88EF 9167 7DA2 8E0C
5114 96D4 568B 5B26 5E6C 61E4 85B5 71FD 96E0 7587
7C4C 8E8A 91BB 8B8E 8B90
4E11 4E12 541C 677B 677D 4FB4 5062 7785 919C 77C1
9B57
81ED 81F0 905A 6BA0
916C
51FA 5C80 521D 6474 6A17 8C99 9F63
520D 9664 82BB 53A8 6EC1 84A2 8C60 9504 5AB0 8021
84AD 870D 8D8E 924F 96CF 7293 854F 5EDA 7BE8 92E4
6A71 5E6E 6AC9 85F8 8E87 96DB 6AE5 8E70 9DB5 8E95
51E6 6775 7840 6918 50A8 696E 891A 6FCB 5132 6A9A
790E 9F6D 9E00 9F7C
4E8D 5904 7ACC 6035 62C0 7ECC 8C56 67F7 6B2A 7AD0
4FF6 654A 755C 57F1 73FF 7D40 8655 5097 7421 9110
6410 6EC0 84EB 89E6 8E00 95A6 510A 563C 8AD4 61B7
65B6 6B5C 81C5 9EDC 89F8 77D7
695A 698B 6A7B 74B4 87F5
6B3B 6B58
63E3 640B
8197
555C 562C 81AA 8E39
5DDB 5DDD 6C1A 7A7F 5276 732D 744F
4F1D 4F20 8221 8229 8239 570C 9044 50B3 693D 66B7
7BC5 8F32
821B 8348 5598 6B42 50E2 8E33
6C4C 4E32 7394 948F 91E7 8CD7 9DA8
5205 75AE 7A93 7A97 724E 6450 7255 7621 7ABB
5E8A 7240 5647 5E62
95EF 50B8 6464 78E2 95D6
521B 6006 5231 524F 5259 51D4 5275 6134
5439 708A
5782 5015 57C0 9672 6376 83D9 6425 68F0 690E 8144
69CC 9524 7BA0 9318 939A 9840
9FA1
65FE 6776 6625 8405 583E 5A8B 6699 693F 7443 7BBA
877D 6A41 8F34 81A5 6AC4 9C06 9D9E
7EAF 9659 5507 6D71 7D14 83BC 6DF3 8123 6E7B 7289
6EE3 8493 6F18 84F4 9187 9195 931E 9BD9
5046 8436 60F7 7776 8CF0 8822
9E51 9D89
9034 8E14 6233
8FB6 8FB5 5A15 5A16 5A7C 60D9 6DB0 7EF0 814F 8F8D
916B 7DBD 8DA0 8F1F 9F8A 64C9 78ED 7E5B 6B60 56BD
9F6A 9461
5472 75B5 8D7C 8D80 5068 8DD0 7E12 9AB4 9ACA 8800
9F79
8BCD 73C1 5790 67CC 7960 8308 8328 5832 74F7 8A5E
8F9D 6148 7506 8F9E 78C1 96CC 9E5A 7CCD 8FA4 98FA
9908 5B28 6FE8 858B 9D1C 7920 8FAD 9DBF 9DC0
6B64 4F4C 6CDA 73BC 7689 7D2A 9B86
673F 6B21 4F3A 4F7D 523A 523E 5E9B 8326 6828 83BF
7D58 86D3 8D50 8786 8CDC
5306 56EA 56F1 82C1 5FE9 679E 6031 60A4 68C7 7127
8471 6F17 8061 84EF 8525 9AA2 66B0 6A05 6A2C 719C
747D 7481 7DEB 8066 806A 71EA 779B 7BF5 8070 87CC
936F 7E71 93E6 9A18 9A44
4ECE 4E1B 5F93 5A43 5B6E 5F96 5F9E 60B0 6DD9 742E
6152 6F0E 6F40 6F68 8AB4 8CE8 8CE9 6A37 85C2 53E2
7047 6B09 721C
6181 8B25
8310
51D1 6E4A 8160 8F8F 8F33
7C97 89D5 9E81 9E84 9EA4
5F82 6B82
4FC3 731D 8128 9162 7604 851F 8A8E 8D97 5648 61B1
8E27 918B 762F 7C07 7E2C 8E59 9F00 8E74 8E75 9863
6C46 64BA 92D1 9569 8E7F 651B 8EA5 9479
6AD5 5DD1 6B11 7A73
7A9C 6BA9 71B6 7BE1 7C12 7AC4 7228
5D14 50AC 51D7 7F1E 5894 5D89 615B 6467 69B1 7355
69EF 78EA 7E17 93D9
6F3C 7480 8DA1 76A0
4F1C 5FF0 75A9 5005 7C8B 7D23 7FC6 8103 8106 5550
555B 60B4 6DEC 8403 6BF3 7120 813A 7601 7CB9 7DB7
7FE0 81B5 81AC 6FE2 7AC1 894A 9847 81CE
4E7C
90A8 6751 76B4 8E06 6F8A 7AF4
5B58 4F9F 62F5
520C 5FD6
5BF8 540B 7C7F
6413 7473 9073 78CB 64AE 8E49 919D
8658 5D6F 5D73 75E4 7749 77EC 84AB 8516 9E7E 9142
9E7A 8EA6
811E
5249 5252 539D 590E 632B 839D 83A1 63AA 902A 65AE
68E4 9509 84CC 9519 6B75 92BC 932F
FDD0-0044
5491 54D2 8037 8345 7B1A 55D2 642D 8921 5660 6498
939D
8FBE 8FD6 547E 59B2 601B 6C93 709F 7F8D 8359 7557
5273 5312 7563 7B2A 9039 7B54 8A5A 9054 9618 977C
8598 9791 87FD 9389 8E82 943D 97C3 9F96 9F98
6253
5927 6C4F 7714
57AF 7629 58B6 71F5 7E68
5446 5454 7343 61DB
6B79 902E 50A3
4EE3 8F6A 5788 5CB1 5E12 7519 7ED0 8FE8 9A80 5E26
5F85 6020 67CB 6B86 73B3 8D37 5E2F 8ED1 57ED 5E36
7D3F 888B 8EDA 8CB8 8EE9 7447 5ED7 53C7 66C3 7DFF
9D0F 6234 825C 9EDB 7C24 8E5B 703B 9734 8976 9EF1
9746
9B98
4E39 5989 5355 62C5 5358 7708 7803 803C 803D 90F8
8043 8EAD 55AE 5A85 6B9A 7605 5330 7BAA 891D 9132
9815 510B 52EF 64D4 6BAB 7514 7649 894C 7C1E 8078
4F14 5210 628C 73AC 74ED 80C6 8874 75B8 7D1E 63B8
8D55 4EB6 64A2 64A3 6FB8 9ED5 81BD 9EEE
65E6 4F46 5E0E 6C8A 72DA 8BDE 67E6 758D 5556 5557
5F39 60EE 6DE1 840F 86CB 557F 5F3E 6C2E 8145 8711
89DB 7A9E 8A95 50E4 5649 99BE 9AE7 563E 5F48 619A
61BA 66BA 6FB9 79AB 84DE 99F3 9D20 765A 56AA 7E75
8D09 972E 994F
6CF9
5F53 73F0 88C6 7B5C 7576 5679 6FA2 74AB 8960 7C39
8261 87F7
6321 515A 8C20 64CB 8B61 9EE8 6529 7059 6B13 8B9C
6C39 51FC 5735 5B95 7800 57B1 8361 6863 83EA 5A78
6113 74FD 903F 5D63 96FC 6F52 78AD 5105 778A 8569
8DA4 58CB 6A94 7497 76EA 7911 7C1C 862F 95E3
94DB 943A
5200 5202 53E8 5FC9 6737 6C18 8220 91D6 9C7D 9B5B
636F
5BFC 5C9B 5CF6 6363 7977 7982 6417 969D 5D8B 5D8C
5C0E 96AF 58D4 5DB9 64E3 8E48 79B1
5230 5012 60BC 7118 76D7 83FF 76DC 9053 7A32 7B8C
7FE2 5675 7A3B 885C 6AA4 885F 71FE 7FFF 8EC7 74D9
7E9B
5C76 9666 6921 69DD
561A
6074 6DC2 60EA 68CF 951D 5FB3 5FB7 9340
5730 7684 5F97 8126
6265 627D
706F 767B 8C4B 5654 5B01 71C8 7492 7AF3 7C26 89B4
8E6C
6729 7B49 6225
9093 51F3 9127 96A5 58B1 5D9D 77AA 78F4 956B 6AC8
9419
8260
6C10 4EFE 4F4E 5943 5F7D 889B 7F9D 9684 5824 8D86
6EF4 6A00 955D 78FE 9349 97AE
5EF8 72C4 7C74 82D6 8FEA 5519 654C 6DA4 837B 6891
7B1B 89CC 976E 6ECC 99B0 9AE2 5600 5AE1 7FDF 850B
8510 9814 6575 7BF4 5681 85E1 8C74 8E62 9B04 93D1
7CF4 89BF 9E10
538E 5758 8BCB 90B8 963A 5467 5E95 5F24 62B5 62DE
830B 67E2 7274 7825 57DE 638B 83E7 89DD 8A46 8EE7
805C 9AB6
5754 5F1F 65F3 6755 7393 601F 4FE4 5E1D 57CA 5A23
9012 9013 5059 5547 5572 688A 710D 73F6 7731 7976
7B2C 83C2 8C1B 91F1 5A82 68E3 6E27 7747 7F14 8482
50C0 7998 8163 905E 926A 5891 58AC 6455 78B2 8515
8743 9070 6178 750B 7DE0 5DB3 8AE6 8E36 87AE
9BF3
55F2
7538 6541 6382 508E 53A7 5D6E 6EC7 69C7 69D9 7628
98A0 8E4E 5DC5 985A 985B 766B 5DD3 5DD4 6527 7672
9F7B
5178 594C 70B9 5A70 7320 655F 8DD5 7898 84A7 8547
8E2E 9EDE 56B8
7535 4F43 963D 576B 5E97 57AB 6242 73B7 94BF 5A5D
60E6 6DC0 5960 7414 6BBF 8714 96FB 588A 58C2 6A42
6A5D 6FB1 975B 765C 7C1F 9A54
6923
5201 53FC 6C48 866D 51CB 595D 5F34 5F6B 86C1 7431
8C82 7889 9CED 6BA6 7797 96D5 9B89 9CB7 9F26 9BDB
9D70
625A 5C4C
5F14 4F04 540A 9493 7A8E 8A0B 8C03 6389 91E3 94DE
94EB 7AE8 84E7 92B1 96FF 9B61 8ABF 7639 7AB5 92FD
85CB 9443
7C13
7239 8DCC 893A
82F5 8FED 57A4 5CCC 604E 6315 6633 7ED6 80C5 74DE
7723 621C 8C0D 558B 581E 60F5 63F2 7573 7D70 800B
81F7 8A44 8D83 957B 53E0 6B9C 7243 7252 5D7D 789F
8728 890B 8253 8776 8ADC 8E40 9CBD 66E1 7589 9C08
758A 6C0E
54CB 800A 7730
5E49 7582
4E01 4EC3 53EE 5E04 738E 7594 76EF 9489 8035 8670
914A 91D8 976A
5975 9876 9802 9F0E 5D7F 9F11 6FCE 85A1 9424
8BA2 5FCA 9964 77F4 5B9A 8A02 98E3 5576 94E4 6917
815A 7887 952D 78A0 874A 92CC 9320 78F8 9841
8423 8062
4E1F 4E22 94E5 92A9
4E1C 51AC 549A 5CBD 6771 82F3 6638 6C21 5032 9E2B
57EC 5A3B 5D20 5D2C 6DB7 7B17 83C4 5F9A 6C2D 8740
9D24 9F15 9BDF 9D87
8463 58A5 5B1E 61C2 7BBD 856B 8ACC
52A8 51BB 4F97 578C 59DB 5CD2 606B 630F 680B 6D1E
80E8 8FF5 51CD 6219 80F4 52D5 7850 68DF 6E69 7D67
8156 50CD 99E7 9718
9B97 9DAB
543A 5517 90FD 515C 5160 8538 6A77 7BFC
9627 6296 6793 67A1 9661 551E 86AA 9204
6597 8C46 90D6 6D62 8373 9017 997E 9B25 68AA 6BED
8130 9158 75D8 9597 7AA6 9B26 9916 65A3 95D8 7AC7
9B2A 9B2D 9B2C
4E67 8254
53BE 5262 9607 561F 7763 918F 95CD
6BD2 72EC 6D9C 8BFB 6E0E 691F 724D 728A 78A1 88FB
8AAD 8773 7368 9316 51DF 5335 5B3B 7006 6ADD 6BB0
7258 72A2 74C4 76BE 9A33 9EE9 8B80 8C44 8D15 97E3
9AD1 945F 97C7 97E5 9EF7 8B9F
7B03 5835 5E3E 743D 8D4C 7779 89A9 8CED 7BE4
828F 5992 675C 809A 59AC 5EA6 8370 79FA 6E21 976F
9540 8799 6BAC 934D 7C35 8827 8839
8011 5073 526C 5A8F 7AEF 890D 9374
77ED
6BB5 65AD 5845 7F0E 846E 6934 7145 7456 8176 78AB
953B 7DDE 6BC8 7C16 935B 65B7 8E96 7C6A
8968
5796 5806 5860 5D5F 75FD 78D3 9D2D 941C
9827
961F 5BF9 514A 514C 5151 5BFE 794B 603C 966E 968A
7893 7D90 5C0D 619E 619D 6FE7 85B1 9566 61DF 7029
8B48 9413
5428 60C7 6566 8733 58A9 58AA 64B4 7364 5678 6489
6A54 729C 7905 8E72 8E7E 9A50
76F9 8DB8 8E89
4F05 56E4 5E89 6C8C 7096 76FE 7818 9007 949D 987F
9041 920D 696F 9813 906F 6F61 71C9 8E32
78B7
591A 591B 5484 54C6 7553 525F 5D1C 6387 6560 6BF2
88F0 5689
593A 94CE 526B 6553 655A 55A5 60B3 656A 75E5 922C
596A 51D9 8E31 9BB5 9438
6736 54DA 579B 579C 6305 6306 57F5 7F0D 692F 8D93
8EB1 8EB2 619C 7D9E 4EB8 937A 8EC3 56B2 5972
5234 5241 964A 964F 9973 5C2E 67C1 67EE 70A8 6857
5815 8235 60F0 8DE2 8DE5 8DFA 98FF 58AE 5D9E 58AF
9D7D
6735 67A4
FDD0-0045
59B8 59BF 5A3F 5A40 5C59 94B6 75FE
8BB9 542A 56EE 8FD7 4FC4 5A25 5CE8 5CE9 6D90 83AA
73F4 8A1B 7692 774B 920B 9507 9E45 86FE 78C0 8A90
981F 989D 9B64 96B2 984D 9D5D 9D5E 8B4C 9C2A
6799 7808 980B 5641 9A00
5384 5C75 6239 6B7A 5C8B 9628 5443 627C 82CA 9638
545D 7810 8F6D 54A2 54B9 57A9 59F6 5CC9 530E 6076
7828 8685 997F 5054 537E 580A 60AA 63A0 7565 7846
8C14 8EDB 9102 960F 582E 5D3F 60E1 6115 6E42 843C
8C5F 8EF6 904C 904F 922A 5EC5 6424 6439 7427 816D
8A7B 50EB 8741 9537 9B65 9E57 855A 981E 989A 9913
5669 89A8 8AE4 95BC 9929 8C96 9354 9CC4 6B5E 984E
7918 6AEE 9C10 9D9A 8B8D 9F43 9469 9F76 9C77
64DC 9D48
8BF6 8A92
5940 6069 84BD 717E
5CCE
6441
97A5
513F 800C 5150 4F95 5152 9651 5CCF 6D0F 834B 682D
80F9 5532 88BB 9E38 7CAB 804F 8F00 9C95 96AD 9AF5
9B9E 9D2F 8F5C
53BC 5C12 5C13 5C14 8033 8FE9 6D31 9975 682E 6BE6
73E5 94D2 723E 990C 99EC 85BE 9087 8DB0
4E8C 5F0D 5F10 4F74 5235 54A1 8D30 8CAE 8848 8CB3
8A80 927A 6A32
FDD0-0046
53D1 6CB7 767A 50A0 767C 9166 5F42 91B1
4E4F 4F10 59C2 57A1 6D4C 75BA 7F5A 8337 9600 6830
781D 7B4F 7782 7F70 95A5 7F78 6A43 85C5
4F71 6CD5 704B
73D0 743A 9AEA 855F 9AEE
9345
5E06 8A09 756A 52EB 5643 5B0F 5E61 61A3 8543 65D9
65DB 7E59 7FFB 85E9 8F53 98BF 7C53 98DC 9C55
51E1 51E2 51E3 5FDB 674B 67C9 77FE 7C75 9492 70E6
8227 7B32 68E5 6E22 7169 7DD0 58A6 6A0A 6A4E 71D4
74A0 81B0 85A0 7E41 894E 7FB3 8E6F 702A 703F 792C
8629 9407 9422 881C 9DED
53CD 6255 8FD4 91E9
6C3E 72AF 597F 6C4E 6CDB 996D 8303 8D29 7548 8ED3
5A4F 68B5 76D5 7B35 8CA9 8EEC 98EF 98F0 6EFC 5B0E
7BC4
8224
531A 65B9 90A1 6C78 82B3 678B 7265 94AB 6DD3 8684
9201 9D0B
9632 59A8 623F 80AA 57C5 9C82 9B74 9C1F
4EFF 8BBF 5F77 7EBA 6609 6618 74EC 7706 5023 65CA
7D21 822B 8A2A 9AE3 9DAD
653E 8DBD
574A 580F 933A
98DE 5983 975E 98DB 5561 5A53 6E04 7EEF 83F2 6249
7306 975F 88F6 7DCB 871A 970F 9CB1 9925 99A1 9A11
9A1B 98DD
80A5 6DDD 8153 8730 87E6
670F 532A 8BFD 595C 60B1 6590 68D0 69A7 7FE1 855C
8AB9 7BDA
5420 82BE 5E9F 676E 6CB8 72D2 80BA 6632 80C7 8D39
4FF7 5255 539E 75BF 966B 5C5D 8409 5EC3 8CBB 75F1
9544 5EE2 66CA 7648 9F23 6FF7 6AE0 9BE1 9428 9745
5A54 6683
5206 5429 5E09 7EB7 82AC 6610 6C1B 54DB 886F 517A
7D1B 7FC2 515D 68FB 8A1C 915A 9216 96F0 6706 71D3
9934 9959
575F 59A2 5C8E 6C7E 670C 678C 7083 80A6 7F92 86A0
86A1 68A4 68FC 711A 84B6 999A 96AB 58B3 5E69 6FC6
8561 9B75 6A68 71CC 8C6E 9F22 7FB5 9F16 8C76 8F52
943C 99A9 9EC2
7C89 9EFA
4EFD 5F05 594B 5FFF 79CE 507E 6124 7CAA 50E8 61A4
596E 81B9 7CDE 9CBC 7035 9C5D
7AD5 8EAE
4E30 98CE 4EF9 51E8 51EC 59A6 6CA3 6CA8 51EE 67AB
5C01 75AF 76FD 781C 98A8 5CEF 5CF0 5051 687B 70FD
5D36 7326 8451 950B 6953 728E 8702 760B 78B8 50FC
7BC8 9137 92D2 6A92 95CF 8C50 93E0 9146 5BF7 7043
8634 973B 882D 974A 98CC 9EB7
51AF 5906 6340 6D72 9022 5838 99AE 6453 6F28 7D98
8242
8BBD 8982 552A 8AF7
51E4 5949 752E 4FF8 6E57 7128 7148 7F1D 8D57 9CEF
9CF3 9D0C 7E2B 8CF5
7412 6E84 93BD 8615
8985
4ECF 5772
68BB
7D11 88E6
7F36 5426 599A 7F39 7F3B 6B95 96EC 9D00
4F15 909E 544B 598B 59C7 739E 80A4 6024 67CE 7806
8342 886D 57BA 5A10 5C03 8374 65C9 7D28 8DBA 9EB8
75E1 7A03 8DD7 9207 7B5F 7D92 911C 5B75 8C67 6577
819A 9CFA 9EA9 7CD0 9EAC 9EB1 61EF
4E40 5DFF 5F17 4F0F 51EB 7536 4F5B 51B9 521C 5B5A
6276 8299 82A3 5488 5CAA 5F7F 602B 62C2 670D 678E
6CED 7EC2 7ECB 82FB 8300 4FD8 5798 67EB 6C1F 6D11
70A5 73B8 7549 7550 7953 7F58 832F 90DB 97E8 54F9
683F 6D6E 7829 83A9 86A8 5310 6874 6DAA 70F0 7408
7B26 7B30 7D31 7D3C 7FC7 8274 83D4 8659 5E45 68F4
7D65 7F66 844D 798F 7CB0 7D8D 8240 8709 8F90 9258
925C 98AB 9CE7 6991 7A2A 7B99 97CD 5E5E 6F93 8760
9AF4 9D14 8AE8 8E3E 8F3B 9B84 7641 8946 9EFB 9D69
9D9D
5452 629A 4E76 5E9C 5F23 62CA 65A7 4FCC 4FDB 80D5
90D9 9CEC 4FEF 91DC 91E1 636C 8F85 7124 76D9 8151
6ECF 8705 8150 8F14 5638 64A8 64AB 982B 9B34 7C20
9EFC
961D 7236 8BA3 4ED8 5987 8D1F 9644 577F 7ACE 961C
9A78 590D 5CCA 7954 8A03 8CA0 8D74 86A5 889D 965A
5069 51A8 526F 5A66 86B9 5A8D 5BCC 5FA9 79FF 842F
86D7 8A42 8D4B 5711 6931 7F1A 8179 9C8B 8907 8914
8D59 7DEE 8567 875C 876E 8CE6 99D9 5B14 7E1B 8F39
9B92 8CFB 9351 9362 9CC6 8986 99A5 9C12
592B 752B 5490 88B1 915C 5085 6928 8984 79A3 9BB2
FDD0-0047
65EE 5477 560E 5620
9486 5C1C 5676 9337
5C15 738D
5C2C 9B40
4F85 8BE5 90C2 9654 5793 59DF 5CD0 8344 6650 8D45
7561 7974 7D6F 8A72 8C65 8CC5
5FCB 6539 7D60
4E10 4E62 5303 5304 9623 675A 9499 76D6 6461 6E89
8462 9223 9691 6224 6982 69E9 84CB 8CCC 6F11 69EA
74C2
7518 5FD3 8289 8FC0 653C 6746 7395 809D 5769 6CD4
77F8 82F7 4E79 67D1 7AFF 75B3 9150 4E7E 7C93 4E81
51F2 5C32 5C34 7B78 6F27 9CF1 5C36 5C37 9B50
4EE0 625E 76AF 79C6 8866 8D76 6562 687F 7B34 7A08
611F 6F89 8D95 6A44 64C0 7C33 9C14 9CE1 9C64
5E72 65F0 6C75 76F0 7EC0 501D 51CE 6DE6 7D3A 8A4C
9AAD 5E79 69A6 6A8A 8D11 8D63 8D1B 7068
5188 7F53 51AE 521A 6760 7EB2 809B 5CA1 7268 7598
77FC 7F38 94A2 525B 7F61 5808 6386 91ED 68E1 7285
583D 7DB1 7F41 92FC 93A0
5C97 5D17 6E2F
7135 7B7B 69D3 6205 6206
768B 7F94 7F99 9AD8 7690 9AD9 81EF 6EDC 69D4 777E
818F 69F9 6A70 7BD9 7CD5 993B 6ADC 9DCE 9F1B 9DF1
5930 6772 83D2 641E 7F1F 66A0 69C0 69C1 7A3E 7A3F
9550 7E1E 85C1 6ABA 85F3
543F 544A 52C2 53DD 8BF0 90DC 796E 7970 9506 7170
7B76 799E 8AA5 92EF
97DF
6208 4EE1 572A 72B5 7EA5 6213 8090 726B 7599 54AF
7271 54E5 80F3 88BC 9E3D 5272 6401 6ED2 6228 6B4C
9D10 9D1A 64F1 8B0C 9D3F 93B6
5444 4F6E 530C 630C 8316 9601 9769 654B 683C 9B32
6105 81F5 845B 86D2 88D3 9694 55DD 5865 6EC6 89E1
643F 69C5 8188 95A3 95A4 7366 9549 9788 97D0 9ABC
8AFD 8F35 9BAF 97DA 8F55 97B7 9A14
54FF 8238
4E2A 5404 867C 500B 784C 94EC 55F0 7B87
5F41 6ACA
7ED9 7D66
6839 8DDF
54CF
826E
4E98 4E99 831B 63EF
522F 5E9A 754A 6D6D 8015 83EE 6404 713F 7D5A 8D53
9E52 7DEA 7E06 7FAE 8CE1 7FB9 9D8A
90E0 54FD 57C2 5CFA 632D 7EE0 803F 8384 6897 7D86
9CA0 9ABE 9BC1
66F4 5829 6685
63B6 6929
5DE5 5F13 516C 53B7 529F 653B 675B 4F9B 739C 7CFC
80B1 5BAB 5BAE 606D 8EAC 9F9A 5311 5868 5E4A 6129
89E5 8EB3 7195 78BD 9AF8 89F5 9F8F 9F94
5EFE 5DE9 6C5E 62F1 62F2 6831 73D9 8F01 92DB 978F
5171 8D21 7FBE 551D 8CA2 83BB
86A3 6150
52FE 4F5D 6C9F 94A9 88A7 7F11 920E 6E9D 9264 7DF1
8920 7BDD 97B2 97DD
82B6 5CA3 72D7 82DF 67B8 73BD 8007 8009 7B31 8008
86BC 8C7F
5778 6784 8BDF 8D2D 57A2 59E4 8329 5193 591F 5920
8A3D 5ABE 5F40 6406 8A6C 9058 96CA 69CB 7179 89CF
6480 89AF 8CFC
4F30 5471 59D1 5B64 6CBD 6CD2 82FD 67E7 8F71 5502
7F5B 9E2A 7B1F 83F0 86C4 89DA 8EF1 8EF2 8F9C 9164
9232 7B8D 7B9B 5AF4 6A6D 9B95 9D23
9DBB
5903 53E4 6262 6C69 8BC2 8C37 80A1 726F 9AA8 5503
7F5F 7F96 94B4 5552 6DC8 8135 86CA 86CC 5C33 6132
84C7 8A41 9989 9E44 69BE 6BC2 9237 9F13 9F14 560F
6996 76B7 9E58 7A40 7E0E 7CD3 85A3 6FF2 76BC 81CC
8F42 9936 7014 76EC 77BD 8831
56FA 6545 51C5 987E 580C 5D13 5D2E 688F 727F 68DD
797B 96C7 75FC 7A12 9522 50F1 932E 9CB4 9BDD 9867
5495 5CE0 9027 50A6 83C7 7BD0
74DC 522E 80CD 681D 9E39 6B44 7171 8052 8D8F 5280
7DFA 8E3B 92BD 98B3 9D30 9A27
518E 53E7 5250 526E 5BE1
5366 576C 8BD6 6302 5569 639B 7F63 7D53 7F6B 8902
8A7F
98AA
4E56 63B4 6451
62D0 67B4 67FA 7B89
592C 53CF 602A 6060
5173 89C2 5B98 51A0 898C 500C 68FA 8484 7AA4 95A2
761D 764F 89B3 95D7 9CCF 95DC 9C25 89C0 9C5E
839E 9986 742F 75EF 7B66 7BA1 8F28 8218 9327 9928
9CE4
6BCC 4E31 8D2F 6CF4 60BA 60EF 63BC 6DAB 8CAB 60B9
797C 6163 645C 6F45 9066 6A0C 76E5 7F46 96DA 93C6
704C 721F 74D8 77D4 7936 9E73 7F50 9475 9C79 9E1B
5149 706E 4F8A 7097 709B 54A3 5799 59EF 6D38 832A
6844 70E1 80F1 50D9 8F04 92A7 9EC6
5E7F 5E83 72B7 5EE3 7377 81E9
4FC7 73D6 901B 81E6 6497
709A 6B1F
5F52 572D 59AB 9F9F 89C4 90BD 7688 8325 95FA 5E30
73EA 80FF 4E80 5080 7845 7A90 88BF 898F 5AAF 5EC6
691D 7470 90CC 5AE2 646B 95A8 9C91 5B00 69FB 69FC
879D 749D 81AD 9BAD 9F9C 5DC2 6B78 9B36 9A29 74CC
9B39 6AF7
5B84 6C3F 6739 8F68 5E8B 4F79 5326 8BE1 9652 579D
59FD 6051 6531 7678 8ECC 9B3C 5EAA 796A 532D 6677
6E40 86EB 89E4 8A6D 53AC 77A1 7C0B 87E1
6530 523D 523F 660B 67DC 7094 8D35 6842 6867 7324
7B40 8CB4 84D5 8DEA 5331 528A 528C 5DA1 648C 69F6
6A9C 77B6 79AC 7C02 6AC3 7650 8958 9CDC 97BC 9C56
9C65
6922
4E28 886E 60C3 7EF2 889E 88AC 8F8A 6EDA 84D8 6EFE
7DC4 8509 78D9 8F25 9CA7 9B8C 9BC0
68CD 7754 7774 74AD 8B34
5459 54BC 57DA 90ED 581D 5D1E 921B 9505 588E 7611
5613 5F49 6FC4 8748 934B 5F4D 87C8
56EF 56F6 56FB 56FD 5700 570B 5E3C 8158 5E57 6156
6F0D 805D 852E 8195 8662 9998
679C 60C8 6DC9 7313 83D3 9983 6901 69E8 7CBF 7DB6
873E 88F9 8F20 9301 991C 9439
8FC7 904E
556F
FDD0-0048
54C8 94EA
86E4
5964
4E37
548D 54B3 55E8
8FD8 5B69 9826 9AB8 9084
6D77 80F2 70F8 917C 91A2
4EA5 598E 9A87 5BB3 6C26 55D0 9900 99ED 995A
5870 56A1
4F44 70B6 9878 86B6 9163 9807 5AE8 8C3D 61A8 99A0
6B5B 9F3E
9097 542B 90AF 51FD 5481 80A3 51FE 8677 5505 5705
5A22 6D5B 5D21 6657 6892 6DB5 7113 7400 5BD2 5D45
97E9 751D 7B68 872C 6F8F 92E1 9B7D 97D3
4E06 5388 7F55 6D6B 558A 850A 961A 8C43 9B2B
6C49 5C7D 6C57 95EC 65F1 5CBE 54FB 57BE 608D 634D
6D86 7302 839F 6658 6665 710A 83E1 91EC 9588 7694
7745 50BC 86FF 9894 99AF 6496 6F22 872D 8C8B 66B5
71AF 92B2 92CE 61BE 64BC 7FF0 8792 9837 9844 99FB
8B40 96D7 701A 862B 9DBE
516F 7233
592F
82C0 8FD2 65BB 676D 7ED7 73E9 7B10 822A 86A2 9883
8CA5 7B55 7D4E 980F 9B67
6C86
57B3
8320 84BF 5686 8585 85A7
6BDC 869D 6BEB 6903 55E5 7346 8C89 5651 7354 8C6A
5637 734B 8AD5 512B 568E 58D5 6FE0 7C47 8814 8B79
597D 90DD
53F7 660A 6626 79CF 54E0 5CFC 604F 608E 6D69 8017
6667 6DCF 5090 7693 9117 6EC8 8055 865F 66A4 66AD
6F94 769C 769E 66CD 76A1 8583 76A5 93AC 98A2 704F
9865 9C1D 705D
7AD3
8BC3 62B2 6B31 559D 8A36 55EC 881A
79BE 5408 4F55 52BE 5392 548A 548C 59C0 6CB3 90C3
5CC6 66F7 67C7 72E2 76C7 7C7A 7D07 9602 9978 54EC
6546 6838 76C9 76CD 8377 555D 6DB8 6E2E 76D2 79F4
83CF 8402 86B5 9F81 60D2 8A38 988C 6941 6BFC 6F95
8A65 8C88 8F05 924C 9616 9C84 7186 9E56 9EA7 981C
7BD5 7FEE 879B 9B7A 7909 95D4 97A8 9F55 8988 9DA1
76AC 9449 9FA2
4F6B 578E 8D3A 8894 7103 8CC0 55C3 7142 788B 7187
8910 8D6B 9E64 7A52 7FEF 58D1 764B 8B1E 7200 9DAE
9DB4 974E 9E16 974F
7CAD 974D
9ED2 9ED1 563F 6F76
62EB 75D5 978E
4F77 5F88 72E0 8A6A
6068
4EA8 54FC 6099 5548 811D
59EE 6046 6052 6841 70C6 80FB 9E3B 6A2A 6A6B 8861
9D34 8605 9445
583C
6DA5 9D46
5677
53FF 543D 544D 7074 8F70 54C4 8A07 70D8 8EE3 63C8
6E39 7122 7861 8C3E 85A8 8F37 569D 9367 8F5F
4EDC 5F18 5985 7EA2 5430 5B8F 6C6F 7392 7EAE 95F3
5B96 6CD3 82F0 57AC 5A02 6D2A 7AD1 7D05 836D 8679
5CF5 6D64 7D18 7FC3 803E 7854 7D2D 8C39 9E3F 6E31
7AE4 7CA0 8452 8453 921C 958E 7D8B 7FDD 8C3C 6F42
9277 9783 9B5F 92D0 5F4B 857B 9710 9EC9 971F 9D3B
9ECC
664E 55CA
8BA7 8A0C 95A7 6494 6F8B 6F92 92BE 95C2 9B28
9F41
4FAF 77E6 9107 5589 5E3F 7334 8454 760A 777A 7BCC
7CC7 7FED 9ABA 7FF5 936D 9931 9BF8
543C 72BC
540E 90C8 539A 5795 5F8C 6D09 9005 5820 8C5E 9C8E
9C98 9B9C 9C5F
5019
4E6F 5322 864D 547C 5780 5FFD 6612 66F6 6CD8 82F8
6057 70C0 8F77 532B 553F 60DA 6DF4 8656 8EE4 5611
5BE3 6EF9 96D0 5E60 622F 6B51 81B4 8B3C
56EB 6287 5F27 72D0 74F3 80E1 58F6 96BA 58F7 659B
7100 5596 58FA 5AA9 6430 6E56 7322 7D57 846B 695C
7173 745A 561D 851B 9E55 69F2 7BB6 8774 885A 9B71
7E20 879C 9190 9836 89F3 9378 992C 9D60 702B 9B0D
9C17 9D98 9DA6
4E55 6C7B 864E 6D52 4FFF 8400 7425 865D 6EF8
4E65 4E92 5F16 6236 6237 6238 51B1 51B4 8290 5E0D
62A4 6C8D 6CAA 5CB5 6019 623D 6608 6791 6018 795C
7B0F 5A5F 6248 74E0 695B 55C0 7D94 9120 96FD 5AED
5AEE 6462 6EEC 8530 69F4 71A9 9CF8 7C04 9359 569B
9E71 8B77 9CE0 97C4 9800 9C6F 9E0C
4E4E 7C90 552C 7CCA 933F 9BF1
82B1 82B2 54D7 5629 848A 9335
534E 59E1 9A85 83EF 91EA 91EB 94E7 6ED1 733E 6433
64B6 78C6 8550 8796 92D8 8B41 93F5 9A4A 9DE8
5316 5212 593B 6779 753B 8BDD 5D0B 6866 5A73 756B
5B05 7575 89DF 8A71 5283 6466 6A3A 5AFF 69EC 6F85
8AE3 9ECA 7E63 8219 8B6E
57D6 5A72 691B 7874 7CC0 748D 8AAE
6000 5F8A 6DEE 69D0 8922 8E1D 61D0 8931 61F7 7024
6AF0 8032 8639
574F 54B6 8AD9 58CA 58DE 863E
72BF 6B53 9D05 9D4D 9144 56BE 61FD 737E 8B99 8C9B
9A69
73AF 90C7 5CD8 6D39 72DF 8341 6853 8408 8411 5BCF
7D59 96C8 7D84 7FA6 8C86 926E 953E 571C 5B1B 5BF0
6FB4 7F33 961B 74B0 8C72 9370 956E 9E6E 7CEB 7E6F
8F58 9436 95E4 9B1F 74DB
7F13 7DE9 650C
5E7B 5942 8092 5950 5BA6 5524 6362 6D63 6DA3 70C9
60A3 6899 7115 902D 559A 559B 5D48 610C 63DB 6E19
75EA 7746 7165 744D 8C62 6F36 7613 69F5 9CA9 64D0
6FA3 85E7 9BC7 9C00
6B22 77A3 6B61
5DDF 8093 8352 8841 671A 5843 614C
7687 505F 51F0 968D 9EC4 55A4 582D 5A93 5D32 5FA8
60F6 6E5F 845F 9051 9EC3 697B 714C 745D 58B4 6F62
735A 953D 71BF 749C 7BC1 7BCA 824E 8757 7640 78FA
7A54 8AFB 7C27 87E5 9360 992D 9CC7 8DAA 97F9 9404
9A1C 5164 9C09 9C51 9DEC
6033 604D 70BE 5BBA 6644 595B 8C0E 5E4C 8A64 7180
8B0A 6ACE
6130 6EC9 69A5 66C2 769D 93A4 76A9
6643 7E28
7070 8BD9 54B4 6062 62FB 6325 6D03 867A 8886 6656
70E3 73F2 8C57 5A4E 5A88 63EE 7FDA 8F89 9693 6689
694E 7147 7988 8A7C 5E51 7773 8918 5645 649D 5655
7FEC 8F1D 9EBE 5FBD 96B3 7008 8633 9C34
56D8 56DE 56EC 4F6A 5EFB 5EFD 605B 6D04 8334 8FF4
70E0 8698 9025 75D0 86D4 86D5 8716 9BB0
6094 6BC0 6BC1 6BC7 6A93 71EC 8B6D
5349 6C47 4F1A 8BB3 6CCB 54D5 6D4D 7ED8 8294 835F
8BF2 605A 6075 70E9 8D3F 5F57 6666 79FD 5599 60E0
6E4F 7D75 7F0B 7FD9 9613 532F 5F59 5F5A 6703 6ED9
8A6F 8CC4 9892 50E1 5612 7623 8527 8AA8 571A 5BED
6167 6193 66B3 69E5 6F53 8559 5666 5B12 5FBB 6A5E
6BA8 6FAE 6FCA 7369 8588 8589 8AF1 982E 71F4 74AF
7BF2 85F1 992F 5696 77BA 7A62 7E62 87EA 6AD8 7E6A
7FFD 8B53 5136 93F8 95E0 5B48 942C 9767 8B7F 986A
5C77 7073 74A4 61F3
660F 662C 8364 5A5A 60DB 6DBD 960D 68D4 6B99 8477
7767 776F 95BD
5FF6 6D51 68A1 9984 581A 6E3E 743F 9B42 991B 7E49
8F4B 9F32
9BF6
8BE8 4FD2 5031 5702 638D 6DF7 711D 6EB7 6141 89E8
8AE2
5419 5268 8020 952A 5290 5684 9343 8C41 6509 9A1E
4F78 6D3B 79EE 79F3
706B 4F19 90A9 94AC 9225 6F37 5925
6C8E 6216 8D27 549F 7809 4FF0 6347 7713 83B7 9584
639D 7978 8CA8 60D1 65E4 6947 6E71 798D 84A6 596F
6FE9 7372 970D 6AB4 8B0B 77C6 7A6B 956C 56AF 7016
802F 8267 85FF 8816 56BF 66E4 81DB 7668 77D0 944A
9743
FDD0-004A
4E0C 8BA5 51FB 5209 53FD 9965 4E69 520F 573E 673A
7391 808C 82A8 77F6 9E21 6785 54AD 59EB 8FF9 525E
5527 59EC 5C50 79EF 7B04 98E2 57FA 7EE9 559E 5D46
5D47 6567 671E 7284 7B53 7F09 8D4D 52E3 55D8 7578
7A18 8DE1 8DFB 9CEE 50DF 6BC4 7B95 9288 5630 69E3
757F 7A3D 7DDD 89ED 8CEB 8EB8 9F51 58BC 6A5F 6FC0
74A3 79A8 7A4D 8940 9324 96AE 64CA 78EF 7C0A 7E3E
7F81 8CF7 913F 6AC5 802D 8E5F 96DE 8B4F 97F2 9D8F
8B64 9416 9951 8E8B 97BF 9DC4 9F4E 7F87 8640 9447
8989 9459 9F4F 7F88 9E04 898A
4EBC 53CA 4F0B 5409 5C8C 5F76 5FE3 6C72 7EA7 5373
6781 7680 4E9F 4F76 8BD8 90C6 9491 537D 59DE 6025
72E4 768D 7B08 7D1A 63E4 75BE 810A 89D9 506E 5359
5EB4 710F 8C3B 6222 68D8 6975 6B9B 6E52 96C6 5849
5AC9 6131 696B 84BA 8D8C 69C9 799D 8024 818C 92A1
5DAF 6483 6F57 6FC8 7620 7BBF 8540 857A 8E16 9E61
6A76 6A9D 878F 64EE 85C9 894B 8E50 9353 8265 7C4D
8F5A 93F6 9735 9DBA 9DD1 96E6 96E7
51E0 5DF1 4E2E 5980 72B1 6CF2 866E 6324 638E 9C7E
5E7E 621F 9218 5D74 9E82 9B62 64A0 64E0 7A56 87E3
9B55
5F50 5F51 65E1 8BA1 8BB0 4F0E 7EAA 5756 5993 5FCC
6280 82B0 9645 5242 5B63 54DC 578D 5CDC 65E2 6D0E
6D4E 7D00 830D 8324 8360 8A08 5264 7D12 7EE7 89CA
8A18 5048 5BC2 5BC4 5F9B 60B8 65E3 689E 6E08 796D
5848 60CE 81EE 846A 8507 517E 75F5 7D99 84DF 88DA
8900 969B 9B3E 66A8 6F03 6F08 7A29 7A4A 8A8B 8DFD
9701 9C9A 66A9 7A37 8AC5 9CAB 5180 5291 66C1 7A44
858A 9AFB 568C 6A95 6FDF 7E4B 7F7D 85BA 89AC 6AB5
9D4B 9F4C 61FB 7660 7A67 860E 9AA5 9BDA 7031 7E7C
862E 9C40 863B 973D 9C36 9C3F 9C6D 9A65
4EBD 8F91 6A2D 8F2F 5EED 766A
52A0 4E6B 5939 4F3D 593E 62B8 4F73 62C1 6CC7 8304
8FE6 67B7 6BE0 6D43 73C8 57C9 5BB6 6D79 75C2 689C
7B33 801E 8888 50A2 7333 846D 8DCF 728C 8175 926B
5609 927F 9553 8C6D 8C91 93B5 9E9A
573F 5FE6 6274 90CF 835A 90DF 550A 605D 83A2 621B
88B7 94D7 621E 86F1 88CC 988A 86FA 8DF2 9782 9904
92CF 982C 9830 9D36 9D4A
7532 4EEE 5CAC 53DA 73BE 80DB 659A 8D3E 94BE 5047
5A7D 5FA6 659D 6935 8CC8 9240 698E 69DA 7615 6A9F
4EF7 9A7E 67B6 5AC1 5E4F 69A2 50F9 99D5
7A3C 7CD8
620B 5978 5C16 5E75 575A 6B7C 95F4 51BF 6214 73AA
80A9 8270 59E6 59E7 517C 76D1 5042 5805 60E4 730F
7B3A 83C5 83FA 8C5C 6E54 724B 728D 7F04 844C 9593
641B 6937 693E 714E 744A 7777 788A 7F23 84B9 8C63
76E3 7B8B 6A2B 719E 7DD8 8551 8573 9CA3 9CFD 9E63
71B8 7BEF 7E11 8271 97AC 9930 99A2 9E89 7010 97AF
9CD2 791B 89B8 9D73 7038 9427 6AFC 6BB2 9DBC 97C0
9C39 56CF 8643 946F 97C9
56DD 62E3 67A7 4FED 67EC 8327 5039 6338 6361 7B15
51CF 526A 6898 68C0 6E55 8DBC 583F 63C0 63C3 691C
6E1B 7751 7877 88E5 8A43 950F 5F3F 6695 7450 7B67
7B80 7D78 8C2B 6229 622C 78B1 5109 7FE6 64BF 6AA2
85C6 8947 8949 8B07 8E47 77BC 7906 7C21 7E6D 8B2D
9B0B 9C0E 9E78 703D 8812 9417 5297 9E7B 7C5B 8B7E
897A 9E7C
89C1 4EF6 898B 5EFA 996F 5251 6D0A 726E 8350 8D31
4FF4 5065 5263 682B 6DA7 73D4 8230 5271 5FA4 6E10
88B8 8C0F 91FC 5BCB 65D4 6957 6BFD 6E85 8171 81F6
8465 8DF5 8CCE 9274 952E 50ED 6997 6F38 852A 528D
528E 6F97 7BAD 7CCB 8AD3 8CE4 8D9D 8E10 8E3A 5292
5294 85A6 8AEB 92FB 9375 991E 77B7 78F5 87B9 9373
64F6 6FFA 7E5D 7033 89B5 93E9 8266 8B7C 8F5E 9431
9451 9452 946C 9473
5F45 58B9 6A7A 7900 6BB1
6C5F 59DC 5C06 8333 6D46 7555 8C47 5C07 8441 757A
646A 7FDE 50F5 6F3F 8780 58C3 7F30 8591 6A7F 6BAD
87BF 9CC9 7585 7913 7586 7E6E 97C1 9C42
8BB2 5956 6868 508B 848B 5968 596C 8523 69F3 734E
8029 8199 8B1B 985C
531E 5905 5F1C 964D 6D1A 7EDB 5F36 88B6 7D73 9171
52E5 6EF0 5D79 647E 5F4A 729F 7CE1 91A4 7CE8 91AC
8B3D
5320 6762 6AE4
827D 8281 4EA4 90CA 59E3 5A07 5CE7 6D47 832D 832E
9A84 80F6 6912 7126 86DF 8DE4 50EC 5604 8660 9C9B
5B0C 5D95 5DA3 618D 6F86 81A0 8549 71CB 81B2 7901
7A5A 9BAB 9D41 9E6A 7C25 87ED 8F47 940E 9DCD 9A55
9DE6 9DEE
81EB 89D2 4F7C 4FA5 6054 6322 72E1 7EDE 997A 6341
6648 70C4 768E 77EB 811A 94F0 6405 6E6B 7D5E 527F
656B 6E6C 714D 8173 8CCB 50E5 6477 669E 8E0B 9278
9903 510C 528B 5FBA 649F 64B9 96A6 5FBC 61BF 657D
657F 71DE 7F34 66D2 74AC 77EF 76A6 87DC 7E73 8B51
5B42 652A 705A 9C4E
53EB 544C 5CE4 630D 8A06 73D3 7A8C 8F7F 8F83 654E
6559 7A96 6ED8 8F03 5602 5626 65A0 6F16 9175 564D
5DA0 6F50 566D 5B13 7365 85E0 8DAD 8F4E 91AE 8B65
76AD 91C2
9D64 6AF5 7E90
9636 7596 7686 63A5 63B2 75CE 79F8 83E8 968E 5588
55DF 5826 5A98 5AC5 63ED 6904 6E5D 813B 8857 716F
7A2D 64D1 8754 7664 8B2F 9D9B
5369 536A 5B51 5C10 8282 8BA6 5226 5227 52AB 5C8A
6605 523C 52BC 6770 758C 8871 62EE 6D01 7ED3 8FFC
5022 6840 83AD 8A10 507C 5A55 5D28 6377 88BA 5091
55BC 7D50 7D5C 9889 5D65 696C 6976 6ED0 776B 7BC0
8710 874D 8A70 9263 9B5D 622A 69A4 78A3 7AED 84F5
9C92 6F54 7FAF 8AB1 8E15 978A 5E6F 937B 9B9A 5DC0
6AED 881E 8818 883D
6BD1 5A8E 89E3 89E7 98F7 6A9E
4E2F 4ECB 5424 5C95 5E8E 6212 82A5 5C46 5C4A 73A0
754C 754D 75A5 780E 8878 8BEB 501F 6088 86A7 5FA3
583A 6950 743E 86F6 9AB1 7297 8AA1 892F 9B6A 9385
8EA4
59D0 685D
5DFE 4ECA 65A4 9485 5153 91D1 6D25 77DC 8355 887F
89D4 57D0 73D2 7D1F 60CD 583B 7B4B 91FF 5D9C 9E76
9EC5 895F
4EC5 5C3D 4FAD 537A 5DF9 7D27 5807 83EB 50C5 53AA
8C28 9526 5AE4 5ED1 6F0C 76E1 7DCA 84F3 9991 69FF
747E 5118 9326 8B39 9949
4F12 52A4 52B2 5997 8FD1 8FDB 6783 52C1 6D55 8369
6649 664B 6D78 70EC 8D46 552B 740E 7972 9032 5BD6
6422 6E8D 7981 7F19 9773 5890 669C 7468 50F8 51DA
6B4F 6BA3 74A1 89D0 5664 6FC5 7E09 8CEE 568D 5B27
6FDC 85CE 71FC 74B6 89B2 8D10 9F7D
91D2 781B 743B 58D7
5755 5759 5DE0 4EAC 6CFE 7ECF 830E 4EB0 79D4 8346
834A 6D87 8396 5A5B 60CA 65CC 65CD 7304 7D4C 83C1
6676 7A09 8148 844F 7CB3 7D93 5162 7CBE 8059 9CB8
9D5B 9BE8 9D81 9D84 9E96 9F31 9A5A 9EA0
4E95 4E3C 9631 522D 5753 5B91 6C6B 6C6C 80BC 5244
7A7D 9888 666F 5106 981A 5E5C 61AC 61BC 66BB 71DB
749F 74A5 9838 87FC 8B66
598C 51C0 5F2A 5F84 8FF3 4FD3 5A59 6D44 80EB 501E
51C8 5F33 5F91 75C9 7ADE 9015 5A67 6871 68B7 6DE8
7AEB 811B 7ADF 656C 75D9 7AE7 9753 50B9 9756 5883
734D 8AA9 8E01 9759 975A 66D4 955C 975C 6FEA 701E
93E1 7AF6 7AF8
775B 6A78 71DD
5182 518B 5770 6243 57DB 7D45 99C9 99EB 860F 8614
518F 56E7 6CC2 7085 8FE5 4FB0 70AF 9008 6D7B 70F1
715A 7A98 988E 7D97 50D2 715B 71B2 6F83 8927
4E29 52FC 7EA0 673B 725E 7A76 7CFA 9E20 7CFE 8D73
9604 841B 557E 63C2 63EA 63EB 9CE9 644E 6A1B 9B0F
9B2E
4E5D 4E45 4E46 4E63 597A 7078 7396 820F 97ED 7D24
9152 9579 97EE
531B 65E7 81FC 548E 759A 67E9 67FE 5003 6344 6855
5313 53A9 6551 5AA8 5C31 5EC4 5ED0 8205 50E6 5ECF
6166 6BA7 820A 9E6B 5336 9BE6 9E94 9F68 9DF2
6C63 6766 6B0D
51E5 521F 6285 530A 5C45 62D8 6CC3 72D9 82F4 9A79
6336 75BD 75C0 7717 7820 7F5D 9671 5A35 5A6E 5D0C
63AC 68AE 6DBA 83F9 6910 741A 8152 8D84 8DD4 9514
88FE 96CE 824D 871B 8E18 8E19 92E6 99D2 9B88 9D21
97A0 97AB 9D8B
5C40 6CE6 4FB7 72CA 6854 6BE9 5579 5A45 6DD7 7117
83CA 90F9 6908 6BF1 6E68 7291 8F02 50EA 7CB7 8DFC
95B0 8ACA 8D9C 8EB9 6A58 6A8B 99F6 9D59 8E6B 9D74
5DC8 861C 9DAA 9F33 9A67
5480 5F06 6CAE 4E3E 8392 6319 6907 7B65 6989 6998
849F 9F83 8065 8209 8E3D 64E7 6AF8 9F5F 6B05
5DE8 53E5 4E6C 5DEA 8BB5 59D6 5CA0 6007 62D2 6D30
82E3 90AD 5177 6010 601A 62E0 661B 6B6B 70AC 79EC
949C 4FF1 5028 5036 51A3 5267 7C94 801F 86B7 8893
57E7 57FE 60E7 636E 8A4E 8DDD 728B 8DD9 9245 98D3
8661 8C66 952F 5BE0 6133 7AAD 805A 99CF 5287 52EE
5C66 8E1E 9B94 58C9 61C5 64DA 6FBD 7AB6 907D 92F8
5C68 98B6 8C97 7C34 8E86 91B5 61FC 943B
77E9 7220 8977
59E2 5A1F 6350 6D93 7106 74F9 8127 88D0 9E43 52EC
954C 93B8 9D51 942B 8832
5377 545F 5E23 57CD 6372 83E4 9529 81C7 9308
5946 52B5 5DFB 5026 52CC 684A 72F7 7EE2 96BD 6DC3
7737 9104 774A 7D6D 7F65 96CB 7760 7D79 98EC 617B
8528 990B 7367 7E33 7F82
5658 6485 64A7 5C69 8E7B
4E85 5B52 5B53 51B3 5214 6C12 8BC0 5F21 6289 6C7A
82B5 6CEC 73A6 73A8 6317 73CF 75A6 7804 7EDD 8673
89C9 5014 6354 6B2E 8697 5D1B 6398 658D 6877 6B8C
8990 89D6 8A23 8D7D 8DB9 902B 5095 53A5 7133 7D55
7D76 899A 8D89 920C 5282 52EA 7474 8C32 99C3 5DA5
61B0 71A6 7234 7357 761A 855D 8568 9D02 9D03 5671
61A0 6A5B 6A5C 7235 81C4 9562 87E8 87E9 5C6B 7211
8B4E 8E76 8E77 9D8C 5337 56BC 77CD 89BA 940D 941D
721D 89FC 5F4F 6204 652B 7383 9DE2 6B14 77E1 9FA3
8C9C 8EA9 9481
519B 541B 5747 6C6E 59F0 8880 8ECD 94A7 8399 8690
687E 76B2 83CC 921E 7885 76B8 76B9 89A0 9281 929E
9CAA 9E87 9355 9BB6 9E8F 9E95
5441 4FCA 90E1 9656 57C8 5CFB 6343 6D5A 9982 9A8F
6659 710C 73FA 68DE 756F 7AE3 5101 7B98 7B9F 8720
5BEF 61CF 9915 71C7 6FEC 99FF 9D54 9D58 6508 651F
FDD0-004B
5494 5496 5580 8849 64D6
5361 4F67 80E9 9272
57B0 88C3
5F00 5952 63E9 950E 958B 9426
51EF 5240 57B2 607A 95FF 94E0 51F1 5274 5605 6168
8488 584F 5D66 6137 6977 8F06 669F 9534 9347 93A7
95D3 98BD
5FFE 708C 708F 6B2C 70D7 52D3 6112 613E 938E
520A 681E 52D8 9F9B 582A 5D41 6221 9F95
519A 574E 4F83 780D 83B0 5058 57F3 60C2 6B3F 586A
6B41 69DB 8F21 6ABB 9851 7AF7 8F57
770B 884E 5D01 5888 77B0 78E1 95DE 77D9
5FFC 95F6 780A 7C87 5EB7 5ADD 5D7B 6177 6F2E 69FA
7A45 7CE0 8EBF 93EE 9C47
625B 6443
4EA2 4F09 531F 909F 56E5 6297 72BA 7095 94AA 9227
958C
5C3B 9ADB
4E02 6537 8003 62F7 6D18 6832 70E4 7A01 9C93 71FA
94D0 7292 92AC 9760 9BB3 9BCC
533C 82DB 67EF 7241 73C2 79D1 80E2 8F72 75B4 7822
8DB7 68F5 842A 8EFB 988F 55D1 6415 7290 7A1E 7AA0
9233 69BC 8596 9897 6A16 778C 78D5 874C 9312 9198
9846 9AC1 791A
58F3 63E2 6BBC 7FD7
53EF 5777 5CA2 70A3 6E07 5D51 6564 6E34 5DB1 790D
514B 523B 524B 52C0 52CA 5BA2 606A 5A14 5C05 8BFE
5801 6C2A 9A92 7F02 6119 6E98 951E 78A6 7DD9 8250
8AB2 790A 9A0D
5D59
808E 80AF 80BB 57A6 6073 5543 8C64 9F88 58BE 9339
61C7 9F66
63AF 88C9 8903
52A5 962C 542D 5751 5994 6333 7841 727C 785C 94FF
787B 647C 8A99 92B5 935E 93D7
7A7A 5025 57EA 5D06 60BE 6DB3 787F 7B9C 9313 9D7C
5B54 6050
63A7 979A
8EBB
62A0 82A4 770D 527E 5F44 6473 7798
53E3 52B6
53E9 6263 6542 51A6 5BBC 5BC7 91E6 7A9B 7B58 6EF1
8532 853B 7789 7C06 9DC7
625D 5233 77FB 90C0 67AF 80D0 54ED 684D 5800 5D2B
5710 8DCD 7A9F 9AB7 9BAC
72DC 82E6
5E93 4FC8 7ED4 5EAB 79D9 8DB6 7105 88B4 55BE 7D5D
88E4 7614 9177 5EE4 8932 56B3
5938 59F1 8A87
4F89 54B5 57AE 9299
630E 80EF 8DE8 9ABB
823F
84AF 64D3
5DDC 51F7 5757 5FEB 4FA9 90D0 54D9 72EF 810D 584A
7B77 9C99 5108 58A4 9136 5672 5EE5 736A 81BE 65DD
7CE9 9C60
5726
5BBD 5BDB 5BEC 81D7 9ACB 9AD6
6B35 6B3E 6B40 7ABE
7ABD 9467
5321 52BB 8BD3 90BC 5329 54D0 6047 6D2D 6846 7844
7B50 8A86 8EED
5FF9 6282 72C2 8BF3 8ED6 8A91 9D5F
593C 5123 61ED
535D 909D 5739 7EA9 51B5 65F7 5CB2 6CC1 77FF 663F
8D36 7716 7736 7D56 8CBA 8EE6 9271 913A 58D9 9ECB
61EC 66E0 720C 8E80 77CC 7926 7A6C 7E8A 945B
783F 7D4B 7B7A
4E8F 5232 5CBF 609D 76D4 7AA5 8067 7ABA 8667 985D
95DA 5DCB 862C
594E 6646 9035 9108 9697 9804 9997 55B9 63C6 8475
9A99 6223 668C 694F 6951 9B41 777D 8770 982F 6AC6
85C8 9368 9377 9A24 5914 8637 5DD9 8641 72AA 8EA8
7143 8DEC 980D 8E5E
5C2F 532E 6B33 559F 5ABF 6126 6127 6E83 8143 8489
9988 7786 5633 5B07 6192 6F70 7BD1 8069 806D 8562
6A3B 8B09 993D 7C23 8075 7C44 9400 994B 944E
5764 6606 5803 5A6B 5D10 5D11 665C 7311 83CE 88C8
711C 7428 9AE0 88E9 8C87 951F 9AE1 9E4D 872B 890C
9AE8 747B 918C 9315 9CB2 9A09 9BE4 9D7E 9DA4
6083 6346 9603 58F8 68B1 7975 7871 7A07 88CD 58FC
7A1B 7D91 95AB 95B8 9F6B
56F0 6D83 774F
5812 5C21 6F49 71B4
6269 62E1 62EC 6304 6870 7B48 843F 8440 86DE 9614
5ED3 9822 9AFA 64F4 6FF6 95CA 979F 61D6 9729 97B9
9B20
97D5
FDD0-004C
5783 62C9 67C6 7FCB 83C8 641A 908B
65EF 524C 782C 63E6 78D6
5587 85DE
814A 63E7 694B 760C 8721 874B 8FA2 8FA3 8772 81C8
650B 7209 81D8 9B0E 74CE 9574 9BFB 881F 945E
5566 6E82 97A1 56B9
6765 4F86 4FEB 5008 5D03 5F95 6D9E 83B1 90F2 5A61
5D0D 5EB2 5FA0 68BE 6DF6 730D 840A 9028 68F6 741C
7B59 94FC 7B82 9338 9A0B 9BE0 9D86 9EB3
553B 8D49 7750 775E 8D56 8CDA 6FD1 8CF4 983C 9842
765E 9D63 7028 702C 7C41 85FE 6AF4 7669 8970 7C5F
5170 5C9A 62E6 680F 5A6A 60CF 5D50 847B 9611 84DD
8C30 53B1 6F9C 8934 5116 6593 7BEE 61E2 71E3 71F7
85CD 8955 9567 95CC 74BC 8964 8B4B 5E71 6514 703E
7046 7C43 7E7F 862D 6595 6B04 7937 8974 56D2 7061
7C63 6B17 8B95 8E9D 9484 97CA
89C8 6D68 63FD 7F06 6984 6F24 7F71 9182 58C8 61D2
89A7 64E5 5B3E 61F6 5B44 89BD 5B4F 652C 7060 56D5
6B16 9872 7E9C
70C2 6EE5 71D7 5682 6FEB 7201 721B 74D3 7224 946D
7CF7
7226 897D
5577
52C6 90CE 90DE 6B34 72FC 9606 5ACF 5ECA 658F 6879
7405 84C8 6994 746F 7860 7A02 9512 7B64 8246 870B
8782 8EB4 92C3 93AF 99FA
6717 6716 70FA 5871 84E2 6A03 8A8F 6724
57CC 5D00 6D6A 83A8 8497 95AC
5525 90D2
635E 6488
52B3 52B4 7262 7A82 54F0 5520 5D02 6D76 52DE 75E8
94F9 50D7 562E 5D97 61A5 7646 78F1 7C29 87E7 91AA
9412 985F 9ADD
8002 8001 4F6C 54BE 59E5 6045 72EB 8356 6833 94D1
92A0 6F66 6A51 8F51
6D9D 70D9 8022 916A 5AEA 61A6 6F87 8EBC 6A6F 802E
8EC2
73EF 7853 7CA9 86EF 6725 9BB1
808B
4EC2 961E 4E50 53FB 5FC7 6250 6C3B 827B 738F 6CD0
7AFB 7833 697D 97F7 6A02 7C15 9CD3 9C33
4E86 9979 990E
52D2
96F7 5AD8 7F27 8502 757E 64C2 6A91 7E32 790C 956D
6AD1 74C3 7FB8 7927 7E8D 7F4D 8632 881D 9433 8F60
513D 58E8 9458 9741 8646 6B19 7E9D 9F3A
53BD 8012 8BD4 5792 7D6B 8142 50AB 8A84 6A0F 78CA
854C 78E5 857E 5121 58D8 7657 85DF 6AD0 7928 7045
863D 8B84 9478 9E13
6CEA 6D21 7C7B 6D99 6DDA 7D2F 9179 9287 981B 982A
9311 6502 98A3 985E 7E87 8631 79B7
5841 561E 9C69
5D1A 5844 68F1 695E 7890 7A1C 8F18 8590
51B7
5030 580E 6123 7756 8E1C
5215 675D 5398 5253 79BB 8372 9A8A 60A1 68A8 68A9
68B8 7281 740D 7C9A 83DE 55B1 68C3 7282 9E42 527A
6F13 775D 7B63 7F21 8243 84E0 870A 5AE0 5B77 6A06
7483 76E0 8C8D 7CCE 853E 8935 92EB 9CA1 9ECE 7BF1
7E2D 7F79 9305 87CD 8B27 91A8 569F 85DC 908C 91D0
96E2 6584 74C8 93EB 9BEC 9D79 9EE7 56C4 6521 7055
863A 8821 9A39 5B4B 5EF2 5299 9457 7A72 7C6C 7E9A
9A6A 9C7A 9E1D
793C 91CC 4FDA 5CDB 5CE2 5A0C 5CF2 6D6C 9026 7406
9502 7CB4 88CF 8C4A 92F0 9CA4 5163 6FA7 79AE 9BC9
87F8 91B4 9CE2 9090 9C67 6B1A
529B 5386 5389 5C74 7ACB 540F 6738 4E3D 5229 52B1
5456 575C 6CA5 82C8 4F8B 5CA6 623E 67A5 6CB4 75A0
82D9 96B6 4FD0 4FEA 680E 75AC 7805 8318 8354 8D72
8F79 90E6 550E 60A7 6817 681B 6D96 7301 73D5 783A
783E 79DD 8385 8389 5533 5A6F 7B20 7C92 7C9D 8137
86B8 86CE 5088 51D3 53A4 68D9 75E2 86E0 8A48 8DDE
96F3 53AF 585B 6144 642E 6EA7 849A 849E 925D 9CE8
53B2 66A6 6B74 746E 7D9F 8727 8777 52F5 66C6 6B77
7BE5 96B7 9D17 5DC1 6FFF 7658 78FF 96B8 9B01 512E
66DE 6AD4 7204 72A1 79B2 8807 9398 56A6 58E2 650A
6ADF 701D 74C5 77CB 792A 85F6 9E97 6AEA 720F 74D1
76AA 76ED 792B 7CF2 8823 5137 7667 7930 882B 9148
9DC5 9E9C 56C7 6526 89FB 8E92 8F62 6B10
8B88 8F63 652D 74E5 9742 9C71 9C73 974B
674E 6803 54E9 5A33 72F8 88E1 6AAA 9BCF
4FE9 5006
5941 8FDE 5E18 601C 6D9F 83B2 9023 68BF 8054 88E2
4EB7 55F9 5EC9 6169 6E93 6F23 84EE 5332 5969 69E4
7191 899D 5286 5333 5652 5AFE 6190 78CF 806B 8933
9CA2 6FC2 6FD3 7E3A 7FF4 806E 8595 878A 6AE3 71EB
806F 81C1 8B30 8E65 938C 9570 7C3E 880A 9B11 942E
9C31 7C62 7C68
655B 740F 8138 88E3 6459 7489 8539 5B1A 6582 81C9
913B 895D 7FB7 861E
7EC3 70BC 604B 6D70 6B93 50C6 581C 5AA1 6E45 8430
94FE 695D 7149 7453 6F4B 7DF4 6FB0 932C 6BAE 934A
93C8 7032 861D 9C0A 6200 7E9E
8068
826F 4FCD 51C9 6881 6DBC 690B 8F8C 7CAE 7CB1 589A
7DA1 8E09 6A11 8F2C 7CE7
4E21 4E24 5169 5521 5562 639A 813C 88F2 7DC9 873D
9B49 9B4E
4EAE 54F4 60A2 8C05 8F86 55A8 667E 6E78 91CF 8F0C
8AD2 8F1B 9344
7177 7C17
64A9 8E7D
8FBD 7597 804A 50DA 5BE5 5D7A 6180 6F3B 818B 5639
5AFD 5BEE 5D9A 5D9B 6579 7360 7F2D 907C 66B8 71CE
7499 81AB 7642 9E69 5C6A 5EEB 7C1D 7E5A 87DF 8C42
8CFF 8E58 9410 9ACE 85D4 98C9 9DEF
53FE 948C 91D5 911D 84FC 61AD 77AD 66E2 957D 7212
5C25 5C26 7093 6599 5C1E 5ED6 6482 7AB7 9563
720E
5217 52A3 51BD 52BD 59F4 6312 6D0C 8322 8FFE 54F7
57D2 57D3 6835 6D56 70C8 6369 730E 811F 86DA 88C2
716D 7759 8057 8D94 5DE4 98B2 5120 9BA4 9D37 64F8
7375 72A3 8E90 9B1B 9B23 9C72
6BDF 54A7 6318 70EE 731F
62CE
53B8 90BB 6797 4E34 51A7 77DD 5549 5D0A 6DCB 667D
7433 7CA6 75F3 7884 7B96 7CBC 9130 96A3 5D99 6F7E
735C 9074 65B4 66BD 71D0 7498 8F9A 9716 77B5 78F7
81E8 7E57 7FF7 9E90 8F54 58E3 7036 93FB 9CDE 9A4E
9C57 9E9F
83FB 4E83 51DB 51DC 649B 5EE9 5EEA 61CD 61D4 6F9F
6A81 6AA9 765B 765D
541D 6061 608B 8D41 711B 8CC3 50EF 853A 6A49 7510
81A6 95B5 7584 85FA 8E78 8E8F 8E99 8EAA 8F65
3007 5222 7075 56F9 577D 590C 59C8 5CBA 5F7E 6CE0
72D1 82D3 6624 670E 67C3 73B2 74F4 51CC 768A 7831
79E2 7ADB 94C3 9675 9E30 5A48 6395 68C2 6DE9 740C
7B2D 7D37 7EEB 7F9A 7FCE 8046 8232 83F1 86C9 8851
797E 8A45 8DC9 8EE8 88EC 9234 959D 96F6 9F84 7DBE
8506 970A 99D6 6FAA 8576 9302 9B7F 9CAE 9D12 9E77
71EF 971B 971D 9F62 9143 9BEA 5B41 8626 9F61 6AFA
91BD 9748 6B1E 7227 9EA2 9F97
963E 5CAD 888A 9886 9818 5DBA
4EE4 53E6 5464 70A9
4F36 84E4 9717 702E
6E9C 7198 8E53
5218 6CA0 7544 6D4F 6D41 7559 65C8 7409 7571 786B
88D7 5AB9 5D67 65D2 84A5 84C5 905B 998F 9A9D 69B4
7460 98D7 5289 746C 7624 78C2 954F 99E0 9E60 6A4A
74A2 7581 9560 7645 87C9 99F5 56A0 61F0 700F 85F0
938F 93A6 9E8D 93D0 98C0 9A2E 98C5 9C21 9DB9 9A51
67F3 6801 73CB 687A 7EFA 950D 925A 98F9 7DB9 71AE
7F76 92F6 6A6E 5B3C 7F80
516D 7542 7FCF 586F 5EC7 6F91 78DF 9E68 9724 993E
96E1 9402 98C2 9B38 9DDA
685E
56D6
9F99 5C78 5499 6CF7 830F 663D 680A 73D1 80E7 772C
783B 7ADC 7B3C 804B 9686 6E70 6EDD 5D90 6F0B 856F
7643 7BED 9F8D 56A8 5DC3 5DC4 7027 7C3C 8622 93E7
9733 66E8 6727 6AF3 7216 74CF 77D3 7931 7932 8971
9F92 7C60 807E 882A 882C 8C45 8E98 9468 9747 9A61
9E17
9647 5784 5785 62E2 7BE2 5131 96B4 58DF 58E0 650F
7AC9 9F93
54E2 6335 6887 5FBF 8D1A
69DE 7ABF
779C
5245 5A04 507B 5A41 6E87 848C 50C2 697C 5ED4 617A
6F0A 851E 9071 6A13 71A1 8027 877C 802C 825B 87BB
8B31 8EC1 9AC5 97BB 9ACF
5D5D 6402 587F 5D81 645F 750A 7BD3 7C0D
964B 5C5A 6F0F 7618 9542 763A 763B 93E4
55BD 560D
565C 64B8
5362 5E90 82A6 5786 6CF8 7089 680C 80EA 8F73 9E2C
7388 823B 9885 9C88 9B72 76E7 6ADA 56A7 58DA 5EEC
650E 7018 7379 74B7 8606 66E5 6AE8 7210 74D0 81DA
77D1 7C5A 7E91 7F4F 826B 8826 8F64 946A 9871 9AD7
9C78 9E15 9EF8
5364 864F 63B3 9E75 7875 9C81 865C 5877 6EF7 84FE
6A10 9B6F 64C4 6A79 78E0 9565 5695 64FC 7002 6AD3
6C0C 8263 93C0 826A 942A 9465
5725 752A 9646 4F93 5774 5F54 5F55 5CCD 52CE 8D42
8F82 9678 5A3D 6DD5 6DE5 6E0C 7849 83C9 902F 9E7F
6902 742D 7984 797F 50C7 5279 52E0 76DD 7769 788C
7A11 8CC2 8DEF 5876 5ED8 645D 6F09 7B93 7CB6 850D
622E 6A1A 719D 8194 89EE 8DA2 8E1B 8F98 9181 6F5E
7A4B 8557 9304 9332 9334 7490 7C0F 87B0 7C36 8E57
8F46 9A04 9E6D 7C2C 93D5 9BE5 9D66 9D71 9E93 93F4
9732 9A3C 7C59 8642 9DFA
67A6 822E 9229 6F9B 6C07
9A74 90D8 95FE 6988 95AD 99BF 6C00 81A2 85D8 9DDC
9A62
5415 5442 4FA3 4FB6 6314 635B 634B 65C5 68A0 7963
7A06 94DD 5C61 7D7D 7F15 5C62 8182 891B 92C1 5C65
8190 8938 5122 7A5E 7E37 7A6D
5BFD 578F 5F8B 8651 7387 7EFF 5D42 6C2F 844E 6EE4
7DA0 7DD1 616E 7BBB 819F 52F4 7E42 6FFE 6AD6 7208
9462
7112
5A08 5B6A 5CE6 631B 683E 9E3E 8114 6EE6 92AE 9D49
571D 5971 5B4C 5B7F 5DD2 6523 66EB 6B12 7053 7F89
81E0 571E 7064 864A 947E 7674 7675 9E1E
5375
4E71 91E0 4E82
7567 950A 7A24 5719 92DD 92E2 64FD
62A1 6384
4ED1 4F26 56F5 6CA6 7EB6 4F96 8F6E 502B 966F 5707
5A68 5D18 5D19 60C0 6DEA 83D5 68C6 8140 7DB8 8726
8E1A 8F2A 9300 9BE9
57E8 7896 7A10 8023
8BBA 6EA3 8AD6
78EE
7F57 5570 9831 56C9
7F56 7321 8136 841D 903B 6924 8161 8999 9523 7BA9
9AA1 9559 87BA 7F85 89B6 93CD 5138 89BC 9A3E 651E
7380 863F 908F 6B0F 9A58 9E01 7C6E 947C 9960
5246 502E 84CF 88F8 8EB6 7630 8803 81DD 66EA 7673
6CFA 5CC8 6D1B 7EDC 8366 9A86 6D1C 73DE 7866 7B3F
7D61 843D 55E0 645E 6F2F 7296 927B 96D2 99F1 9BA5
9D3C 9D45 6FFC 7E99
FDD0-004D
5463
5988 5B56 5ABD 5B24 5B37
9EBB 75F2 8534 7298 87C7
9A6C 739B 7801 8682 99AC 6EA4 746A 78BC 879E 93B7
9C22 9DCC
72B8 6769 7943 9581 9A82 551B 508C 7341 7770 561C
69AA 79A1 7F75 99E1 7923 9B15
4E87 5417 55CE 9064 561B 5AF2 87C6
57CB 85B6 973E
4E70 836C 8CB7 562A 8552 9DF6
52A2 8FC8 4F45 58F2 9EA6 5356 8109 8108 9EA5 8847
52F1 8CE3 9081 9721 9722
5ADA 989F
59CF 6097 86EE 50C8 8C29 6172 9992 6A20 7792 779E
9794 8B3E 9945 9CD7 9862 9B17 9B18 9C3B 883B
5C58 6E80 774C 6EE1 6EFF 87A8 8954 87CE 93CB 77D5
66FC 9124 5881 5E54 6162 6471 6F2B 734C 7F26 8504
8513 69FE 71B3 6FB7 9558 7E35 93DD
8630
7264
9099 5402 5FD9 6C52 8292 5C28 6757 6767 6C13 76F2
607E 7B00 832B 54E4 5A0F 5EAC 6D5D 72F5 727B 786D
91EF 94D3 75DD 86D6 92E9 99F9
83BD 83BE 7865 833B 58FE 6F2D 87D2 880E
732B 8C93
6BDB 77DB 6786 7266 8305 8306 65C4 7F5E 515E 6E35
8EDE 9155 5825 951A 5AF9 9AE6 6C02 729B 8765 9AF3
9328 87CA 9D9C
5187 536F 5918 4E6E 623C 5CC1 6CD6 6634 94C6 7B37
84E9
5183 7683 82BC 5190 8302 5192 67D5 770A 8D38 8004
88A4 8992 5AA2 5E3D 843A 8CBF 911A 6117 6693 6959
6BF7 7441 7780 8C8C 912E 8750 61CB
4E48 9EBC 5692 6FF9 569C 7666
5445 5746 6C92 6CA1 679A 73AB 82FA 6802 7709 5A12
8104 8393 6885 73FB 8122 90FF 5833 5A92 5D4B 6E44
6E48 7338 7742 847F 6963 6973 7164 7442 7996 587A
69D1 9176 9545 9E5B 92C2 9709 7A48 5FBE 9387 77C0
6517 862A 9DA5 9EF4
6BCE 6BCF 51C2 7F8E 6334 6D7C 5A84 5D44 6E3C 5ABA
815C 9541 5B0D 71D8 9382 9EE3
59B9 62BA 6CAC 65C0 6627 7959 8882 771B 5A9A 5BD0
75D7 8DCA 9B3D 715D 7778 97CE 9B45 7BC3 875E
8EBE
95E8 626A 73A7 9494 9580 9585 636B 83DB 748A 9346
4EB9 864B
95F7 7116 60B6 66AA 71DC 61D1 61E3
4EEC 5011 691A
753F 867B 51A1 8394 840C 8420 76DF 8499 750D 511A
6A57 77A2 8544 8771 9133 9138 5E6A 61DE 6FDB 66DA
6726 6AAC 6C0B 77C7 791E 9BCD 9E72 8268 8609 77D2
973F 9740 995B 986D 9F06 9E0F
52D0 731B 74FE 9530 824B 8722 61DC 7374 9333 61F5
8813 9BED
5B5F 68A6 5922 6E95 5923 9725
63B9 64DD
54AA 772F 7787
519E 5F25 7F59 7962 8FF7 7315 8C1C 84BE 8A78 8B0E
919A 5F4C 64DF 7CDC 7E3B 9E8A 9E8B 79B0 9761 7030
737C 9E9B 957E 6202 6520 74D5 863C 7222 91BE 91BF
9E0D 91C4
7C73 8288 4F8E 6CB5 7F8B 5F2D 6D23 6549 772B 8112
6E33 845E 851D 92A4 6FD4 5B4A 7056
5196 7CF8 6C68 6C95 5B93 6CCC 89C5 5CDA 7955 5BBB
79D8 5BC6 6DE7 6DFF 8993 8994 5E42 8C27 5853 5E4E
899B 5627 6993 6EF5 6F1E 7190 8524 871C 9F0F 51AA
6A12 5E66 6FD7 85CC 8B10 6AC1 7C1A 7F83
5B80 8287 7720 5A42 7EF5 5A94 68C9 7DBF 7DDC 81F1
8752 5B35 6AB0 6ACB 77C8 77CA 77CF
4E0F 6C45 514D 6C94 9EFE 52C9 7704 5A29 506D 5195
52D4 6E11 5595 6110 6E4E 7F05 8442 7D7B 817C 9EFD
7DEC 9EAB 6FA0 9BB8
9763 9762 7CC6 9EAA 9EBA 9EB5
55B5
82D7 5A8C 63CF 7784 9E4B 7DE2 9D93 9C59
676A 7707 79D2 6DFC 6E3A 7F08 7BCE 7DF2 85D0 9088
5999 5E99 7385 7AD7 5EBF 5EDF
4E5C 5400 54A9 54F6 5B6D
706D 70D5 8995 6423 6EC5 8511 858E 9D13 5E6D 61F1
7BFE 6AD7 881B 884A 9456 9C74
6C11 59C4 5CB7 5FDE 600B 65FB 65FC 82E0 73C9 76FF
7807 7F60 5D0F 636A 7418 7F17 656F 7449 75FB 7888
9231 7DCD 7DE1 9309 9D16 9372
76BF 51BA 5221 95F5 62BF 6CEF 52C4 6543 95FD 60AF
654F 7B22 60FD 6E63 9594 610D 668B 95A9 50F6 615C
61AB 6F63 7C22 9CD8 8820 9C35
578A 7B3D
540D 660E 9E23 6D3A 7700 8317 51A5 6719 7733 94ED
910D 5AC7 6E9F 733D 84C2 669D 69A0 9298 9CF4 7791
879F 89AD
4F72 59F3 51D5 614F 9169
547D 6927 8A7A
63B5
8C2C 8B2C
6478
8C1F 5AEB 998D 6479 6A21 819C 9EBD 6469 6A45 78E8
7CE2 8B28 56A4 64F5 9943 56A9 56B0 8611 9ACD 9B54
5298 995D
62B9 61E1
672B 52B0 573D 59BA 5E13 6B7E 6B7F 6B81 6CAB 8309
964C 5E1E 6629 67BA 551C 768C 771C 773F 781E 79E3
8388 83AB 773D 7C96 7D48 6E50 86E8 8C83 55FC 587B
5BDE 6F20 734F 84E6 8C8A 66AF 9286 977A 5AFC 9ED9
763C 7790 7799 9546 9B69 58A8 9ED8 700E 8B29 8C98
85E6 87D4 93CC 7205 9A40 7933 7E86 8031
5E85 603D 5C1B 9B79 9EBF
54DE
725F 4F94 52BA 6048 6D20 7738 8C0B 86D1 7F2A 8E0E
927E 8B00 77B4 7E46 936A 9D3E 9EB0
67D0
6BEA 6C01 58B2
6BCD 4EA9 7261 5776 59C6 5CD4 7273 7546 7552 80DF
755D 755E 782A 756E 9267 8E07
6728 4EEB 6730 76EE 6C90 72C7 7091 7267 82DC 6BE3
83AF 869E 94BC 52DF 96EE 5893 5E55 5E59 6154 6958
7766 926C 6155 66AE 8252 9702 7A46 7E38 97AA
51E9 62C7
FDD0-004E
55EF
62CF 62FF 6310 55F1 954E 93BF
4E78 54EA 96EB
90A3 59A0 7EB3 80AD 5A1C 8872 94A0 7D0D 88A6 637A
7B1D 8C7D 8EDC 8C80 9209 84B3 9779 9B76
8149 718B 6468 5B7B
4E43 5976 827F 6C16 7593 59B3 5EFC 8FFA 5037 91E2
5B2D
5948 67F0 800F 8010 8418 6E3F 9F10 8926 879A 933C
56E1
7537 678F 67AC 4FBD 5357 67DF 5A1A 7558 83AE 96BE
5583 6694 6960 8AF5 96E3
8D67 63C7 6E73 8433 8169 877B 6201
5A7B
9056
56D4
4E6A 56A2 8B68 56CA 8830 9B1E 9995 6B1C 9962
64C3 66E9 652E 7062
513E 9F49
5B6C
5476 6013 6320 5CF1 7847 94D9 7331 86F2 8A49 7899
6493 5DA9 61B9 87EF 5912 8B4A 9403 5DCE
57B4 607C 60A9 8111 5318 5816 60F1 5AD0 7459 8166
78AF 7376 737F
95F9 5A65 6DD6 9599 9B27 81D1
8133
7592 8BB7 6290 7732 8A25
5436 5450 5462
5A1E 9981 812E 8147 9912 9BBE 9BD8
5167 5185 6C1D 9317
6041 5AE9 5AF0
80FD
59AE
5C3C 576D 6029 6CE5 7C7E 502A 5C54 79DC 90F3 94CC
57FF 5A57 6DE3 730A 86AD 68FF 8DDC 815D 8063 873A
89EC 8C8E 8F17 9713 9CB5 9BD3 9BE2 9E91 9F6F 81E1
4F31 4F60 62DF 62B3 72D4 82E8 67C5 65CE 6672 5B74
922E 999C 5117 511E 96AC 64EC 85BF 6AB7 807B
5C70 6C3C 4F32 8FE1 6635 80D2 9006 533F 7724 5804
60C4 5ADF 6135 6EBA 7768 817B 66B1 7E0C 8ABD 81A9
5B3A
88AE
62C8 852B
5E74 79CA 79E5 9C87 9B8E 9CB6 9ECF 9BF0
6D8A 637B 6DF0 713E 8DC8 8F87 8F97 649A 64B5 78BE
8F26 7C10 8E4D 6506 8E68 8E8E
5344 5EFF 5FF5 59E9 5538 57DD 824C 9F30
54D6 9D47
5B22 5B43
917F 91B8 91C0
5A18
9E1F 8311 8885 9CE5 5ACB 88CA 8526 6A22 5B1D 892D
5B32
5C3F 8132
634F 63D1
82F6
5E07 573C 67BF 9667 6D85 75C6 8042 81EC 556E 60D7
83CD 9689 55A6 655C 6E7C 55EB 5D72 8E02 565B 6470
69F7 8E17 954A 954D 5DAD 7BDE 81F2 931C 989E 8E51
5699 8076 93B3 95D1 5B7C 5B7D 6AF1 7C4B 8616 56C1
9F67 7CF1 7CF5 8825 9448 56D3 8B98 8EA1 9477 9873
9480
5DD5
56DC 60A8
62F0
810C
5B81 549B 62E7 72DE 82E7 67E0 804D 5BCD 5BD5 752F
5BD7 5BDC 5BE7 511C 51DD 5680 5B23 64F0 7370 85B4
6AB8 8079 944F 9B21 9E0B
6A63 77C3
4F5E 4FAB 6CDE 6FD8
6F9D
599E
725B 6C7C
5FF8 626D 72C3 7EBD 7084 94AE 7D10 83A5 9215 9775
8842
725C
519C 4FAC 54DD 6D53 8113 79FE 8FB2 5102 8FB3 5665
6FC3 857D 6A82 71F6 79AF 81BF 7A60 895B 91B2 6B01
7E77
5F04 630A 7651 9F48
7FBA
5542
69C8 8028 7373 6ABD 9392 941E 8B73
5974 5B65 9A7D 7B2F 99D1
4F2E 52AA 5F29 782E 80EC
6012 5089 6419
5973 9495 7C79 91F9
6C91 6067 6712 8844
597B
6E1C 6696 7156 7157 992A
759F 8650 7878 7627
9EC1
90CD 632A 689B 50A9 513A
6A60
8BFA 558F 63BF 903D 611E 6426 9518 643B 6992 7A2C
8AFE 8E43 7CD1 61E6 61E7 7CE5 7A64 7CEF
FDD0-004F
5594 5662
54E6
7B7D
8BB4 6CA4 6B27 6BB4 74EF 9E25 5878 6F1A 6B50 6BC6
71B0 750C 9D0E 6AD9 8B33 93C2 9DD7
8192 9F75
5418 5455 5076 8162 5614 8026 8545 85D5
6004 616A
85F2
FDD0-0050
5991 7685 8DB4 8225 556A 8469
6777 722C 63B1 7436 7B62 6F56
5E0A 5E15 6015 8899
62CD
4FF3 5F98 6392 7305 68D1 724C 8F2B 7C30 7C32 72A4
5EF9
54CC 6D3E 6E43 848E 9383
7705 7819 7568 6F58 6500
723F 6D00 76D8 8DD8 5ABB 5E4B 84B0 642B 69C3 76E4
78D0 7E0F 78FB 8E52 700A 87E0 8E63 939C 97B6
51B8 5224 6C9C 62DA 6CEE 708D 53DB 7249 76FC 7554
8041 88A2 8A4A 6EBF 9816 92EC 897B 947B
9D65
4E53 6C97 80EE 96F1 6EC2 8196 9736
5390 5E9E 5396 9004 65C1 823D 5ACE 5FAC 8783 9CD1
9F8E 9F90
55D9 802A 89AB
7090 80A8 80D6
629B 62CB 812C
5228 5486 5789 5E96 72CD 70B0 722E 888D 530F 8EF3
9784 9E83 9E85
8DD1
5945 6CE1 70AE 75B1 76B0 7832 9EAD 791F 792E
8422 891C
5478 600C 80A7 67F8 80DA 8843 9185
962B 966A 57F9 6BF0 8D54 952B 88F4 88F5 8CE0 99CD
4FD6
4F02 6C9B 4F69 5E14 59F5 65BE 65C6 6D7F 73EE 914D
7B29 8F94 99B7 5D8F 9708 8F61
84DC
55B7 5674 6B55
74EB 76C6 6E53 8450
5460 7FF8
55AF
5309 6026 62A8 6072 7830 6888 70F9 7851 8EEF 959B
6F30 562D 6F8E 78DE
8283 670B 6337 7AFC 5017 8391 580B 5F38 5F6D 68DA
6916 5873 787C 7A1D 84EC 9E4F 69F0 6A25 71A2 6189
8F23 7BE3 81A8 930B 97F8 9AFC 87DA 87DB 9B05 7E84
97FC 9D6C 9A2F 9B14 945D
6367 6DCE 768F 527B
63BD 692A 78B0 8E2B
7BF7
4E15 4F13 4F3E 6279 7EB0 90B3 576F 62AB 62B7 708B
72C9 7812 6082 79DB 79E0 7D15 94CD 65C7 7FCD 801A
8C7E 9208 921A 9239 925F 9294 5288 78C7 99D3 9AEC
567C 930D 9B7E 9B8D 61B5 7914 7915 9739
76AE 9630 8298 5CAF 6787 6BDE 72D3 80B6 6BD7 6BD8
75B2 868D 90EB 9674 5564 57E4 5D25 86BD 86BE 8C7C
7137 7435 813E 8157 9C8F 7F74 818D 8731 9B6E 58C0
7BFA 87B7 8C94 9D67 7F86 6707 9F19
5339 5E80 758B 4EF3 572E 82C9 8134 75DE 92A2 8AC0
9D04 64D7 567D 7656 56AD
5C41 6DE0 6E12 63CA 91FD 5AB2 5AD3 7765 8F9F 6F4E
7A2B 50FB 6FBC 568A 7513 7588 8B6C 95E2 9DFF 9E0A
698C
56E8 504F 5AA5 728F 7BC7 7FE9 9342 9DA3
9A88 80FC 8141 6944 6969 8CC6 8DF0 8ADA 9ABF 8E41
99E2 9A08
8991 8C1D 8CB5 8ADE
7247 9A97 9A17 9A19
9B78
527D 6153 7F25 98D8 65DA 7FF2 87B5 72A5 98C3 98C4
9B52
5AD6 74E2 7AC2 85B8 95DD
6B8D 5F6F 779F 7BFB 7E39 91A5 76AB 9860
7968 50C4 52E1 560C 5FB1 6F02
6C15 6487 6486 66BC 77A5
4E3F 82E4 9405
5AF3
59D8 62FC 7917 7A66 99AA 9A5E
73AD 8D2B 5A26 8CA7 7415 5AD4 9891 983B 5B2A 7371
85B2 56AC 77C9 8819 98A6 9870
54C1 6980
725D 6C56 8058
4E52 7539 4FDC 5A09 6D84 782F 8060 8275 7AEE 9829
5E73 8BC4 51ED 546F 576A 6CD9 82F9 90F1 5C4F 5E21
67B0 6D34 73B6 80D3 8353 74F6 5C5B 5E32 6DDC 840D
86B2 5E48 7129 7501 7F3E 84F1 86E2 8A55 8EFF 9C86
51F4 617F 7BB3 8F27 6191 9B83 6A98 7C08 860B
5CBC 5840
948B 5761 5CA5 6CCA 9887 6E8C 9255 9817 93FA
5A46 5619 8522 9131 76A4 8B08 6AC7
53F5 5C00 94B7 7B38 99CA
5CB6 7087 8FEB 6540 6622 6D26 73C0 70DE 7834 7836
91D9 7C95 84AA 9B44 9197
6CFC 6872 6F51
5256 5A1D
6294 6299 634A 638A 88D2 7B81 9307
5485 54E3 5A44 7283 5ECD
4EC6 6534 6251 9660 5657 64B2 6F7D 64C8 9BC6
530D 8386 812F 83E9 83D0 8461 84B1 84B2 50D5 917A
58A3 735B 749E 6FEE 77A8 7A59 9564 8965 7E80 93F7
5724 6734 5703 6D66 70F3 666E 6EA5 8C31 8AE9 6A38
6C06 6A8F 9568 8B5C 8E7C 9420
94FA 8216 8217 92EA 7011 66DD
5DEC 5DED 99C7 8D0C
FDD0-0051
4E03 8FC9 6C8F 59BB 67D2 501B 51C4 6816 6864 90EA
5A38 60BD 687C 6DD2 840B 6532 671F 68F2 6B3A 86E3
50DB 5601 617D 69BF 6F06 7DC0 617C 69ED 8AC6 8AFF
970B 8E4A 9B4C 93DA 9D88
4E93 7941 9F50 573B 5C90 5C93 5FEF 82AA 4E9D 5176
5947 6589 6B67 7541 7947 7948 80B5 4FDF 75A7 7AD2
5258 658A 65C2 8006 8110 8691 8694 869A 9880 57FC
5D0E 5E3A 6391 6DC7 7309 7566 8401 8415 8DC2 8EDD
91EE 9A90 9A91 68CA 68CB 7426 742A 797A 86F4 612D
7881 7895 951C 980E 9B3F 65D7 7CB8 7DA5 7DA6 7DA8
871D 871E 9F4A 7482 79A5 8572 8E11 9321 9CAF 61E0
6FDD 85C4 6AB1 6AC0 81CD 9A0E 9A0F 9CCD 8604 9BD5
9D78 9D80 9E92 7E83 8269 8810 9B10 9C2D 7382 9EA1
4E5E 9094 4F01 5C7A 5C82 8291 542F 5447 675E 7398
76C0 5518 8C48 8D77 5553 5554 5A4D 555F 7EEE 6675
68E8 7DAE 7DBA 8AEC 95D9
6C14 8BAB 5FD4 6C17 6C54 8FC4 5F03 6C7D 77F5 829E
546E 6CE3 7081 76F5 54A0 5951 780C 6814 6C23 8A16
552D 6B2B 5921 68C4 6E46 6E47 847A 789B 6456 66A3
7508 78B6 5650 6187 5668 61A9 78DC 78E7 78E9 7F4A
87FF 9F1C
7F3C 621A 6E0F 8904 7DD5 87A7 7C2F 7C31 7C4F
6390 845C
62E4
8DD2 9160
5736 51BE 5E22 6070 6D3D 6B8E 7848 6118 9AC2
9790
5343 4EDF 9621 5731 5732 5977 6266 6C58 828A 8FC1
4F65 5C8D 6744 6C67 74E9 833E 6B26 81E4 948E 62EA
7275 7C81 515B 60AD 8688 8C38 94C5 5A5C 5B6F 727D
91FA 6394 8C26 9206 96C3 50C9 6106 7B7E 925B 9A9E
9E50 6173 6434 6481 7B9E 8AD0 9077 8930 8B19 9845
6AB6 6510 6511 6ACF 7C3D 9D6E 5B45 6513 9A2B 9B1D
9B1C 7C64 97C6
4EF1 5C92 5FF4 6272 62D1 524D 94A4 6B6C 8654 94B1
94B3 63AE 63F5 8EE1 5A8A 9210 976C 9257 5898 69A9
7B9D 92AD 6F5B 6F5C 7FAC 8541 6A6C 9322 9ED4 9EDA
9A1D 6FF3 9A1A 704A 9C2C
51F5 6D45 80B7 6DFA 8125 55DB 5D70 9063 69CF 8181
8738 8C34 7F31 7E7E 8B74
6B20 520B 82A1 4FD4 831C 5029 6093 5811 5094 5D4C
68C8 6920 614A 7698 84A8 5879 6B49 7DAA 8533 5119
69E7 7BCF 8F24 7BDF 58CD 7E34 9C1C
7ACF 9386 93F2 7C56 9453
545B 7F8C 6215 6217 65A8 67AA 73B1 7F97 7310 8DC4
690C 6EAC 8154 55C6 8723 9516 5D88 6227 69CD 7244
7472 7FAB 9535 7BEC 9306 8B12 8E4C 956A 8E61 9397
93D8
4E2C 5F37 5F3A 5899 5AF1 8537 6A2F 6F12 8503 58BB
5B19 5EE7 8594 6AA3 7246 8262 8620
62A2 7F9F 6436 7FA5 588F 7E48 8941 7E66 93F9
709D 5534 7197 7FBB
55F4 7347
6084 7857 90FB 5D6A 8DF7 9121 9125 5281 6572 6BC3
8E0D 9539 589D 981D 9AB9 58BD 5E67 6A47 71C6 7F32
78FD 936B 936C 7E51 8DAC 8E7A 9430
4E54 4FA8 834D 835E 6865 785A 83EC 55AC 50D1 8C2F
563A 5AF6 6194 854E 9792 6A35 6A4B 7644 77A7 7904
85EE 8DAB 9408 97BD 9866
5DE7 91E5 6100 9ADC
4FCF 8BEE 9657 5CED 5E29 7A8D 6BBB 7FD8 8A9A 9ADA
50FA 64AC 64BD 9798 97D2 7AC5 7FF9 8B59 8E88
69D7 729E
767F 807A
4E14
5207 59BE 602F 90C4 5327 7A83 608F 6308 6D2F 60EC
6DC1 7B21 611C 86EA 6705 7BA7 7DC1 9532 7BCB 8E25
7A55 85D2 9365 9BDC 9411 7ACA
82C6 503F 5AAB 7C61
4EB2 4FB5 94A6 887E 9A8E 5A87 5D5A 6B3D 7D85 8A9B
5D94 89AA 9849 99F8 9BBC 5BF4
5E88 82A9 82B9 57C1 73E1 79E6 8039 83E6 8699 6366
83F3 7434 7439 79BD 9219 96C2 52E4 55EA 5AC0 6EB1
9772 616C 5659 64D2 65B3 9CF9 61C4 6A8E 6FBF 763D
8793 61C3 8804 9B35 9D6D
5745 6611 7B09 68AB 8D7E 5BD1 9513 5BDD 5BE2 92DF
87BC
5422 5423 628B 6C81 551A 83E3 63FF 6407 64B3 7019
85FD
72C5 9751 9752 6C22 8F7B 503E 537F 90EC 570A 57E5
5BC8 6C2B 6DF8 6E05 50BE 873B 8F15 9CAD 944B
591D 7520 5260 52CD 60C5 6B91 6674 68FE 6C30 845D
6692 64CF 6A08 64CE 6AA0 9EE5
82D8 9877 8BF7 5EBC 9803 5ECE 6F00 8ACB 6ABE
5E86 51CA 6385 6BB8 7883 7B90 9758 6176 78D8 78EC
7F44 8B26
7858 6AE6
828E 5314
536D 909B 5B86 7A77 7A79 8315 684F 7B3B 7B47 8D79
60F8 712A 712D 743C 823C 86E9 86EC 7162 7758 8DEB
928E 778F 7AAE 511D 618C 6A69 749A 85D1 74CA 7AC6
85ED 74D7
718D
4E18 4E20 90B1 5775 6058 79CB 79CC 86AF 5A9D 8429
6978 84F2 9E59 7BCD 7DE7 8775 7A50 8DA5 9CC5 87D7
97A6 97A7 9C0C 9C0D 9D96 8824 9F9D
53F4 56DA 624F 72B0 738C 6C53 808D 6C42 866C 6CC5
866F 4FC5 89D3 8A04 8A05 914B 91D3 5512 6D57 7D0C
838D 900E 9011 91DA 6882 6B8F 6BEC 7403 8D47 5D37
5DEF 6E1E 6E6D 76B3 76DA 9052 716A 7D7F 86F7 88D8
5DF0 89E9 8CD5 7486 8764 92B6 9194 9B82 9F3D 9BC4
9C3D
641D 7CD7
91FB 8612
533A 66F2 4F39 4F49 5324 5C96 8BCE 9639 9A71 5765
5C48 5CA8 5CB4 62BE 6D40 795B 80E0 88AA 5340 7D36
86C6 8EAF 7B41 7CAC 86D0 8A58 8D8B 5D87 6188 99C6
657A 8AB3 957C 99C8 9EB9 9AF7 9B7C 8DA8 9EAF 89B0
8EC0 9EB4 9EE2 89BB 9A45 9C38 9C4B
4F62 52AC 65AA 6710 80CA 83C3 9E32 6DED 6E20 7D47
7FD1 844B 8EE5 8556 7496 78F2 87B6 9D1D 74A9 87DD
77BF 9F29 8627 5FC2 7048 6235 6B0B 6C0D 7C67 81DE
766F 8837 8862 8EA3 883C 947A 9E1C
53D6 7AD8 5A36 8A53 7AEC 877A 9F8B 9F72
53BA 53BB 521E 547F 551F 801D 9612 89D1 8DA3 95B4
9EAE 95C3 89B7 9F01
8FF2 8850
5CD1 5F2E 606E 609B 5708 570F 68EC 99E9 9409
5168 6743 4F7A 8BE0 59FE 6CC9 6D24 8343 62F3 7277
8F81 5573 57E2 5A58 60D3 75CA 7842 94E8 6E76 7288
7B4C 7D5F 8472 643C 7454 89E0 8A6E 8DE7 8F07 8737
9293 6A29 8E21 7E13 919B 9CC8 9B08 9A21 5B49 5DCF
9C01 6B0A 9F64 8838 98A7 9874
72AC 6C71 754E 70C7 7EFB 7DA3 8647
529D 5238 7276 52E7 97CF 52F8
72AD 6926 697E 95CE
7F3A 849B 9619
7638
5374 537B 57C6 5D05 5BC9 60AB 7437 96C0 785E 786E
9615 5859 6409 76B5 788F 6128 69B7 58A7 6164 78BA
78BB 8D9E 71E9 95CB 7910 95D5 704D 792D
9E4A 9D72
590B 56F7 5CEE 9021
5BAD 5E2C 88D9 7FA3 7FA4 88E0
FDD0-0052
5465 80B0 887B 8887 86A6 88A1 86BA 7136 9AE5 562B
9AEF 71C3 7E4E
5184 5189 59CC 82D2 67D3 73C3 5AA3 6A6A
8485
7A63 5134 52F7 703C 737D 8618 79B3 74E4 7A70 8E9F
9B24
58CC 56B7 58E4 6518 7219 7E95
8BA9 61F9 8B72 8B93
5A06 835B 9976 6861 5B08 8558 6A48 8953 9952
6270 96A2 64FE
7ED5 9076 7E5E
60F9
70ED 71B1
4EBA 4EBB 4EC1 58EC 5FC8 6732 5FCE 79C2 82A2 9213
9B5C 928B 9D40
5FCD 834F 6820 6823 8375 79F9 68EF 7A14
5203 5204 8BA4 4EDE 4EED 8BB1 4EFB 5C7B 5C83 6268
7EAB 598A 6752 7263 7EB4 8095 8F6B 97E7 996A 59D9
794D 7D09 887D 7D1D 8A12 8ED4 6895 88B5 8EE0 7D4D
814D 845A 976D 9771 97CC 98EA 8A8D 9901
7D9B 8EB5
6254
4ECD 8FB8 793D 967E
82BF
65E5 9A72 56F8 91F0 9224 99B9
8338
620E 809C 6804 72E8 7ED2 8319 8363 5BB9 6BE7 70FF
5AB6 5D58 6411 7D68 7FA2 5AC6 5D64 6408 69B5 6EB6
84C9 6995 69AE 7194 7462 7A41 7E19 877E 8923 9555
878D 878E 99E5 9AF6 5B2B 5DB8 7203 9394 5DC6 701C
66E7 8811
5197 5B82 5748 5087 8EF5 6C04
9D27
7A43
53B9 79B8 67D4 5A83 63C9 6E18 8447 7163 7448 7CC5
875A 8E42 8F2E 9352 97A3 74C7 9A25 9C07 9D94
7C88 697A 97D6
8089 5B8D 816C
909A 5982 4F9E 5E24 8339 6847 88BD 94F7 6E2A 7B4E
8498 92A3 8560 8761 5112 9D11 5685 5B2C 5B7A 6FE1
85B7 9D3D 66D8 71F8 8966 8815 98A5 91B9 986C 9C6C
6C5D 8097 4E73 8FB1 910F 64E9
5165 6D33 55D5 5AB7 6EBD 7F1B 84D0 8925 7E1F
6256 8FBC 6741 9CF0 5DBF
633C
5827 648B 58D6
962E 670A 8F6F 800E 5044 8EDF 5A86 744C 789D 7DDB
8F2D 74C0 791D
5A51 6875 7524 7DCC 8564
854A 854B 6A64 7E60 8602 8603
6C6D 82AE 6798 868B 9510 745E 8739 777F 92B3 92ED
53E1 58E1
77A4
95F0 6DA6 958F 95A0 6F64 6A4D 81B6
637C
53D2 82E5 504C 5F31 9100 6E03 712B 6949 84BB 7BAC
7BDB 7207 9C19 9C2F 9DB8
5D76
FDD0-0053
4EE8 6331 6332 6492
6D12 8A2F 9778 6F75 7051 8EA0
5345 6CE7 98D2 810E 8428 9212 644B 99BA 98AF 85A9
6AD2 8644
96A1
6BE2 6122 63CC 585E 6BF8 816E 567B 9CC3 984B 9C13
55EE 8D5B 50FF 8CFD 7C3A
5625
4E09 5F0E 53C1 6BF5 6BFF 7299 9B16
4ED0 4F1E 5098 7CC1 7CC2 9993 7CDD 7CE3 7CE4 7E56
93D2 93FE 9730 994A
4FD5 5E34 60B7 6563 9590
58ED 6BF6 5381 6A75
6852 6851
55D3 6421 78C9 892C 98A1 939F 9859
4E27 55AA
69E1
63BB 6145 6414 6E9E 9A9A 7F2B 7E45 81CA 9CCB 9A12
9A37 9C20 9C62
626B 6383 5AC2
57FD 7619 6C09 77C2 9ADE
87A6
95AA
8272 6D13 681C 6DA9 556C 94EF 96ED 6B6E 7417 55C7
745F 6B70 92AB 6F81 61CE 64CC 6FC7 7637 7A51 6F80
74B1 7012 7A61 7E6C 8F56 93FC 8B45 98CB
6E0B 6FCF 7A6F
68EE 692E 69EE 8942
50E7 9B19
6740 6C99 7EB1 4E77 5239 524E 7802 5526 6BBA 7300
7C86 7D17 838E 686C 6BEE 94E9 75E7 7870 715E 8531
88DF 699D 6A27 9B66 9CA8 93A9 9BCA 9BCB
50BB 510D
503D 553C 5551 5565 5E39 8410 53A6 55A2 5EC8 6B43
7FDC 7B91 7FE3 95AF 970E
7E4C
7B5B 917E 7BE9 7C01 7C1B 91C3
7E7A
6652 95B7 66EC
5C71 5F61 9096 5220 522A 6749 829F 59CD 59D7 82EB
886B 9490 57CF 633B 67F5 72E6 73CA 8222 75C1 8120
8ED5 7B18 8DDA 527C 6427 5607 5E53 717D 6F78 6F98
6A86 7E3F 81BB 9BC5 7FB4 7FB6
95EA 9655 965D 9583 6671 7154 7752 718C 89A2
8BAA 6C55 759D 5261 6247 8A15 8D78 639E 91E4 5093
5584 928F 9A9F 50D0 912F 58A0 58A1 6F6C 7F2E 5B17
64C5 6A3F 6B5A 81B3 78F0 8B06 8D61 7E55 87EE 87FA
8B71 8D0D 9425 994D 9A38 9CDD 7057 9C53 9C54
5738 6763 958A 657E
4F24 6B87 5546 89DE 50B7 5892 616F 6EF3 6F21 850F
6BA4 71B5 87AA 89F4 8B2A 9B3A
57A7 6244 664C 8D4F 8CDE 8D18 945C
4E04 4E0A 5C19 5C1A 6066 7EF1 7DD4 979D
4EE9 88F3
5F30 634E 70E7 83A6 68A2 713C 7A0D 65D3 7B72 8244
86F8 8F0E 71D2 98B5 9AFE 9BB9
52FA 828D 82D5 67D6 73BF 7AF0 97F6
5C11
52AD 5372 90B5 7ECD 54E8 5A0B 8891 7D39 7744 7DA4
6F72
8571
5962 731E 8D4A 756C 7572 8F0B 8CD2 8CD6 6AA8
820C 4F58 8675 86C7 86E5
820D 6368
538D 8BBE 793E 5399 5C04 6D89 6DBB 6E09 8A2D 8D66
5F3D 6151 6442 6444 6EE0 6174 6475 850E 6B59 8802
97D8 9A07 61FE 651D 7044 9E9D 6B07
820E
7533 5C7E 625F 4F38 8EAB 4F81 547B 59BD 7C76 7EC5
8BDC 59FA 67DB 6C20 73C5 7A7C 7C78 5A20 5CF7 7521
7712 7837 8398 6552 6DF1 7D33 515F 68FD 8460 88D1
8A37 84E1 8A75 7527 8518 71CA 8593 99EA 9CB9 66D1
9D62 9BF5 9C3A
4EC0 751A 795E
90A5 5F1E 5BA1 77E4 54C2 77E7 5BB7 8C02 8C09 5A76
6E16 8A20 5BE9 8AD7 9823 9B6B 66CB 9825 77AB 5B38
700B 89BE 8B85
80BE 4FBA 661A 80C2 6D81 7718 6E17 7973 8124 814E
613C 614E 6939 7606 7F67 8703 8704 6EF2 92E0 762E
5814 698A 9C30
5347 751F 9629 544F 58F0 6598 6607 6CE9 72CC 82FC
680D 6B85 7272 73C4 965E 9679 7B19 6E66 713A 7525
924E 8072 9F2A 9D7F
7EF3 61B4 7E69 8B5D
7701 771A 5057 6E3B
5723 80DC 6660 5270 76DB 5269 52DD 8CB9 5D4A 741E
8056 58AD 69BA 8542 8CF8
7AD4 66FB 6A73
5C38 5931 5E08 545E 8671 8BD7 90BF 9E24 5C4D 65BD
6D49 72EE 5E2B 7D41 91F6 6E64 6E7F 8479 921F 6EAE
6EBC 7345 8492 84CD 8A69 9247 9248 7461 9CF2 8768
9CFE 8937 9CBA 6FD5 9366 9BF4 9C24 9DB3 8979
5341 9963 77F3 8FBB 4E6D 65F6 5B9E 5B9F 65F9 98E0
59FC 5CD5 70BB 794F 8680 98DF 57D8 6642 83B3 5BD4
6E5C 9048 5852 6EA1 8494 9250 5BE6 69AF 8755 9CA5
9F2B 9F2D 9C23
53F2 77E2 4E68 8C55 4F7F 59CB 9A76 5158 5BA9 5C4E
7B36 9242 99DB
58EB 6C0F 793B 4E17 4E16 4ED5 5E02 793A 4F3C 534B
5F0F 5FD5 4E8A 53D3 623A 4E8B 4F8D 52BF 5469 67F9
89C6 8BD5 9970 519F 5BA4 6040 6043 62ED 662F 6630
67BE 67FF 7702 8D33 9002 683B 70D2 770E 7721 8210
8F7C 901D 94C8 8996 8C49 91C8 5A9E 5D3C 5F11 5FA5
63D3 8C25 8CB0 91CA 52E2 55DC 5F12 7757 7B6E 89E2
8A66 8EFE 9230 9243 98FE 8213 8A93 9069 927D 596D
92B4 9919 991D 566C 5B15 6FA8 8ADF 8AE1 907E 87AB
8B1A 7C2D 896B 91CB
4F66 7ACD 8BC6 62FE 5319 5D75 6981 7176 7BD2 9B96
7C42 8B58 9C18
53CE 6536
624B 5B88 57A8 9996 824F
5BFF 53D7 72E9 517D 552E 6388 6DAD 7EF6 75E9 58FD
5900 7626 7DAC 7378 93C9
624C 7363
4E66 6BB3 5C17 6292 7EBE 53D4 6778 67A2 964E 59DD
500F 5010 66F8 6B8A 7D13 6393 68B3 6DD1 7102 83FD
8ED7 9103 758E 758F 8212 6445 6BF9 7D80 8F93 7479
8DFE 8E08 6A1E 852C 8F38 6A7E 9B9B 5135 6504 9D68
79EB 5A4C 5B70 8D4E 587E 719F 74B9 8D16
9F21 5C5E 6691 668F 9ECD 7F72 8700 9F20 6F7B 85A5
85AF 66D9 7659 85F7 8961 8969 5C6C 9483
672E 672F 620D 675F 6CAD 8FF0 4FB8 51C1 54B0 6037
6811 7AD6 8357 6055 6352 5EB6 5EBB 7D49 8481 8853
9683 5C0C 88CB 6570 7AEA 8167 9265 5885 6F31 6F44
6578 6F8D 8C4E 6A39 6FD6 9330 93E3 9D90 866A
702D 7CEC 8834 9C6A 9C70
5237 5530
800D
8A9C
8870 6454
7529
5E05 5E25 87C0 535B
95E9 62F4 9582 6813
6DAE 8168
53CC 971C 96D9 5B40 9AA6 5B47 9A3B 6B06 7935 9DDE
9E74 826D 9A66 9E18
723D 587D 6161 6F3A 6A09 7E14
7040
93EF
8C01 813D 8AB0
6C34
5E28 6D97 6D9A 7971 7A05 7A0E 88DE 7761 7793
6C35 6C3A 9596
542E
987A 821C 9806 8563 6A53 779A 77AC 9B0A
8BF4 54FE 8AAA 8AAC
5981 70C1 6714 94C4 6B36 7855 77DF 6420 84B4 69CA
7361 78A9 7BBE 9399 720D 9460
53B6 7E9F 4E1D 53F8 7CF9 79C1 549D 6CC0 601D 8652
9E36 5AA4 65AF 7D72 7F0C 86F3 6952 7997 9270 98D4
51D8 53AE 69B9 79A0 7F73 8724 9536 5636 565D 5EDD
6495 6F8C 78C3 7DE6 856C 92D6 71CD 8784 87D6 87F4
98B8 9A26 9401 9DE5 9F36 7C6D
6B7B
5DF3 4E96 56DB 5BFA 6C5C 4F40 5155 59D2 6CE4 7940
4FA1 5B60 676B 6CD7 9972 9A77 5A30 67F6 726D 6D0D
6D98 8082 98E4 7B25 801C 91F2 7AE2 8997 55E3 8086
8C84 9236 923B 98FC 79A9 99DF 857C 5129 7003
4FEC 6056 92AF
5FEA 677E 6780 5A00 67D7 502F 51C7 5D27 5EBA 68A5
6DDE 83D8 5D69 7879 8719 61BD 6FCD 6AA7 9376 9B06
6002 609A 8038 7AE6 50B1 612F 6964 5D77 616B 8073
99F7
8BBC 5B8B 8BF5 9001 9882 8A1F 980C 8AA6 9938
67A9 93B9
635C 910B 55D6 5EC0 5ECB 641C 6EB2 7340 8490 84C3
998A 6449 98D5 6457 953C 8258 878B 9199 93AA 993F
98BC 98BE 9A2A
53DC 53DF 5081 55FE 778D 64DE 85AE 64FB 85EA 6AE2
7C54
8184 7636
55FD
82CF 7526 9165 7A23 7AA3 7A4C 8607 8613 6AEF 56CC
4FD7
738A 5919 6CDD 8083 6D2C 6D91 73DF 7D20 83A4 901F
5BBF 6880 6B90 7C9B 9A95 5083 7C9F 8C21 55C9 5850
5851 5ACA 612B 6EAF 6EB8 8085 9061 9E54 50F3 612C
69A1 8186 850C 89EB 8D9A 906C 619F 6A0E 6A15 6F65
78BF 92C9 9917 6F5A 7E24 6A5A 749B 7C0C 85D7 8B16
8E5C 9A4C 9C50 9DEB
8BC9 8A34 9BC2
72FB 75E0 9178
5334
7958 7B07 7B6D 849C 7B97
590A 6535 8295 867D 5020 54F8 6D7D 837D 837E 772D
8470 6ED6 7762 7D8F 71A3 6FC9 9796 96D6
7EE5 968B 968F 9040 96A8 74CD
7021 81B8 9AC4 9AD3
4E97 5C81 7815 795F 8C07 57E3 5D57 9042 6B72 6B73
716B 775F 788E 96A7 5B18 6FBB 7A42 8AB6 8CE5 6A96
71E7 74B2 79AD 6A85 7A57 7A5F 7E40 895A 9083 65DE
7E50 7E78 8B62 9406 9429 97E2
5B59 72F2 836A 5B6B 98E7 640E 733B 84C0 98F1 69C2
8575 859E
635F 7B0B 96BC 7B4D 640D 69AB 7BB0 7C28 93A8 9DBD
5506 5A11 838F 509E 686B 68AD 7743 55CD 7FA7 84D1
644D 7F29 8D96 7C11 7C14 7E2E 9AFF 9BBB
6240 4E7A 5522 7D22 7410 60E2 9501 55E9 669B 6E91
7463 8928 7485 9388 938D 9396 93BB 93C1
9024 6EB9 8736
7411 55E6
FDD0-0054
4ED6 5B83 5979 7260 7942 8DBF 94CA 584C 6999 6EBB
891F 5683 95E7
8E79
5854 6E9A 5896 736D 9CCE 737A 9C28
4EA3 62D3 631E 72E7 95FC 5D09 6DBE 6428 8DF6 905D
9062 69BB 6BFE 79A2 64BB 6FBE 8ABB 8E0F 6A7D 9314
6FCC 8E4B 979C 9B99 95D2 97B3 56BA 95E5 8B76 8EA2
4FA4 549C
56FC 5B61 80CE
51AD 53F0 65F2 90B0 576E 62AC 82D4 67B1 70B1 70B2
83ED 8DC6 9C90 7B88 81FA 98B1 99D8 5113 9B90 5B2F
64E1 85B9 6AAF 7C49
592A 5933 5FF2 6C70 6001 80BD 949B 6CF0 8226 915E
9226 6E99 614B 71E4
7C8F
574D 62A9 8D2A 6039 75D1 8211 8CAA 644A 6EE9 762B
64F9 6524 7058 7671
575B 6619 5013 8C08 90EF 5A52 60D4 8983 6983 75F0
952C 8C2D 58B0 58B5 619B 6F6D 8AC7 9188 58C7 66C7
71C2 931F 9924 6A80 78F9 9843 7F48 85EB 58DC 8B5A
8C9A 91B0 8B60 7F4E
5FD0 5766 8892 94BD 83FC 6BEF 926D 55FF 61B3 61BB
9193 74AE 8962
53F9 70AD 57EE 63A2 509D 6E60 50CB 5606 78B3 8215
6B4E 8CE7
6C64 5763 94F4 6E6F 5621 8025 528F 7FB0 876A 859A
9557 8E5A 93DC 940B 97BA 9F1E
9967 5510 5802 508F 557A 68E0 910C 5858 642A 6E8F
84CE 969A 69B6 6F1F 717B 746D 799F 8185 6A18 78C4
7CC3 819B 6A56 7BD6 7CD6 8797 8E3C 7CDB 87B3 8D6F
91A3 9933 9395 9939 95DB 9944 9DB6
4F16 5E11 5018 5052 6DCC 50A5 8EBA 954B 93B2 513B
6203 66ED 7223 77D8 9482
70EB 6465 8D9F 71D9
5932 5F22 6D9B 7EE6 638F 7D5B 8A5C 5ACD 5E4D 6146
642F 6ED4 69C4 746B 97EC 98F8 7E1A 7E27 6FE4 8B1F
8F41 97B1 97DC 9955
530B 8FEF 54B7 6D2E 9003 6843 9676 5555 68BC 6DD8
7EF9 8404 7979 88EA 7DAF 872A 9780 9184 9789 92FE
932D 99E3 6AAE 9940 9A0A 9F17
8BA8 8A0E
5957
5FD1 5FD2 7279 8CA3 86AE 94FD 615D 92F1 87A3 87D8
71A5 81AF 9F1F
75BC 75CB 5E50 817E 8A8A 6F1B 6ED5 9086 7E22 99E6
8B04 512F 85E4 9A30 7C50 9C27 7C58 9A63
972F
8645
5254 68AF 9511 8E22 64FF 9DC8 9DC9
82D0 5397 8351 7EE8 504D 557C 5D39 60FF 63D0 7A0A
7F07 7F64 9046 9E48 55C1 7445 7D88 78AE 8906 5FB2
6F3D 7DF9 855B 876D 92BB 9898 8DA7 8E44 918D 8B15
8E4F 9357 9CC0 9D3A 984C 9BB7 9D5C 9A20 9BF7 9D97
9D99 79B5 9DE4
4F53 632E 8EB0 9AB5 9BA7 8EC6 9AD4
623B 8FCF 5243 6711 6D1F 501C 608C 6D95 9016 6090
60D5 63A6 9037 60D6 63E5 66FF 6974 88FC 8905 6B52
6BA2 9AF0 8599 568F 9B00 5694 74CB 7C4A 8DAF
5C49 5C5C 7B39 5D5C
5929 5172 5A56 6DFB 915F 9754 9EC7 975D
7530 5C47 6CBA 606C 754B 7551 76F7 80CB 7560 751B
751C 83FE 6E49 5861 586B 6437 923F 9617 7DC2 78CC
7AB4 74B3 95D0 9DC6 9DCF
5FDD 6B84 500E 553A 60BF 6DDF 666A 7420 8146 89CD
75F6 7753 8214 9902 89A5 8CDF 932A 9369 9766
63AD 777C 821A
78B5 9D2B
65EB 4F7B 5EA3 604C 6311 7967 804E
8280 6761 5CA7 5CB9 8FE2 7952 689D 7B24 8414 84DA
84E8 8D92 9F86 6A24 8729 92DA 9797 9AEB 9CA6 9BC8
93A5 9F60 9C37
5BA8 6640 6713 8101 7A95 8A82 65A2 7AB1 5B25
773A 7C9C 7D69 899C 8DF3 7CF6
87A9
5E16 6017 8D34 841C 8051 8CBC
94C1 86C8 50E3 9295 92E8 9D29 9421 9435 9A56
546B 98FB 992E
5385 5E81 6C40 827C 542C 753A 8013 539B 70C3 686F
70F4 7D8E 9793 8074 807C 5EF0 807D 5EF3
9092 5EF7 4EAD 5EAD 839B 505C 5A77 5D49 6E1F 7B73
8476 8713 695F 69B3 95AE 9706 8064 874F 8AEA 9F2E
5722 753C 4FB9 5A17 633A 6D8F 6883 70F6 73FD 8121
8247 988B 8A94 9832
56F2 70B5 901A 75CC 55F5 84EA
4EDD 540C 4F5F 5F64 5CC2 5E9D 54C3 5CDD 72EA 833C
664D 6850 6D75 70D4 783C 8692 772E 79F1 94DC 7AE5
7CA1 7B69 8A77 8D68 916E 9256 50EE 52ED 9275 9285
9907 9C96 6F7C 735E 66C8 6723 6A66 6C03 71D1 729D
81A7 77B3 9BA6
7EDF 6345 6876 7B52 7D71 7D82 6A0B
6078 75DB 8855 615F 6185
5077 5078 5A7E 5AAE 92C0 936E
4EA0 5934 6295 9AB0 7DF0 982D
59B5 94AD 7D0F 6568 98F3 9EC8 8623
900F 7D89
51F8 5B8A 79BF 79C3 6022 7A81 550B 6D8B 6378 5817
6E65 75DC 8456 5D80 92F5 9D5A 9F35
56F3 56FE 51C3 5CF9 5EA9 5F92 6087 6348 837C 9014
5C60 688C 83DF 63EC 7A0C 5715 5857 5D5E 760F 7B61
816F 84A4 922F 5716 5717 5EDC 6F73 8DFF 9174 999F
934E 99FC 9D4C 9D9F 9DCB 9DF5
571F 5721 5410 948D 91F7
514E 8FCC 5154 580D 9D75
6C62 6D82 83B5
6E4D 732F 7153 8C92
56E2 56E3 629F 5278 5718 6171 6476 6F19 69EB 7BFF
6AB2 93C4 7CF0 9DD2 9DFB
7583
5F56 6E6A 8916
63A8 84F7 85EC
5F1A 9893 96A4 5C35 9839 983A 983D 9B4B 7A68 8608
8E6A
4FC0 817F 50D3 8E46 9ABD
4FBB 9000 5A27 717A 86FB 8715 892A 99FE
541E 5451 6D92 554D 671C 711E 564B 66BE 9ED7
5C6F 5749 5FF3 829A 9968 8C58 8C5A 8ED8 98E9 9C80
9B68 9715 81C0 81CB
6C3D 757D
65FD
4E47 4EDB 8BAC 6258 6261 6C51 9966 6754 4F82 5483
62D5 62D6 6CB0 6329 635D 838C 88A5 8A17 6DB6 812B
8131 98E5 9B60 9A5D
9A6E 4F57 9640 9641 5768 5CAE 6CB1 6CB2 72CF 8FF1
7823 7824 8889 9E35 7D3D 5836 8DCE 9161 78A2 99B1
69D6 99C4 99DE 6A50 9B80 9D15 9F27 9A28 9F0D 9A52
9F09
5F75 59A5 5EB9 5AA0 692D 6955 5AF7 6A62 9D4E 9B0C
9C16
67DD 6BE4 553E 841A 8DC5 6BFB 7BA8 8600 7C5C
9A7C 99DD
FDD0-0057
7A75 52B8 6316 6D3C 5A32 7556 7A8A 5AA7 55D7 86D9
6432 6E9B 6F25 7AAA 9F03 6528
5A03
74E6 4F64 90B7 5493
889C 8049 55E2 817D 8183 896A 97C8 97E4
5C72 74F2 54C7
6B6A 558E 7AF5
5D34
5916 591E 9861
5F2F 525C 5A60 5E35 5846 6E7E 873F 6F6B 8C4C 5F4E
58EA 7063
4E38 5213 6C4D 7EA8 8284 5B8C 5C8F 628F 73A9 7D08
6356 987D 70F7 7413 9811 7FEB
5B9B 5007 550D 633D 76CC 57E6 5A49 60CB 665A 689A
7EFE 8118 83C0 8416 6669 667C 6900 742C 7696 7579
7755 7897 7DA9 7DB0 8F13 8E20 92C4 92D4
4E07 534D 5350 59A7 5FE8 6365 8115 8CA6 842C 8155
8F10 6FAB 858D 933D 87C3 8D03 93AB 8D0E
909C 6764 7B02
5C23 5C2A 5C2B 6C6A 5C29
4EA1 4EBE 5166 738B 4EFC 5F7A 83A3 869F
7F52 7F51 5F80 5F83 7F54 5F8D 60D8 83F5 6680 68E2
86E7 8F8B 7DB2 8744 8AB7 8F1E 7007 9B4D
5984 5FD8 8FCB 65FA 76F3 671B 6722
6789 7139
5371 5A01 70D3 504E 840E 9036 9687 9688 55B4 5A99
6104 63CB 63FB 6E28 8468 8473 5FAE 6933 6972 6EA6
7168 8A74 8732 875B 89A3 8587 71F0 9CC2 5DCD 9C03
9C04
56D7 97E6 5729 56F4 5E0F 6CA9 8FDD 95F1 5CD7 5CDE
6D08 97CB 6845 6DA0 552F 5E37 60DF 7859 7EF4 55A1
570D 5A81 5D6C 5E43 6E4B 6E88 741F 9055 6F4D 7DAD
84F6 912C 6F59 6F7F 78D1 9180 6FF0 934F 95C8 9BA0
7653 89B9 72A9 973A 6B08
5383 4F1F 4F2A 5C3E 7EAC 829B 82C7 59D4 709C 73AE
6D27 5A13 5C57 6D58 8371 8BFF 5049 507D 5D23 68B6
75CF 784A 9AA9 5D54 5FAB 6107 7325 8466 848D 9AAA
9AAB 6690 6932 7152 744B 75FF 8172 8249 97EA 50DE
64B1 78C8 9C94 5BEA 7DEF 853F 8AC9 8E13 97D1 9820
85B3 5130 6FFB 9361 9BAA 58DD 7022 97D9 98B9 97E1
8624 6596
536B 4E3A 672A 4F4D 5473 82FF 70BA 754F 80C3 53DE
8ECE 5C09 83CB 8C13 5582 5AA6 6E2D 7232 715F 78A8
851A 873C 6170 71AD 729A 7DED 885B 61C0 748F 7F7B
885E 8B02 9927 9B87 87B1 893D 9935 9B4F 85EF 8F4A
93CF 9728 9CDA 8636 9956 8B86 8E97 8B8F 8E9B
6364 7140 732C 589B 7E05 875F 5DB6
6637 586D 6E29 6985 6B9F 6EAB 7465 8F92 761F 8570
8C71 8F3C 8F40 9CC1 97B0 9C1B 9C2E
5301 6587 5F63 7EB9 82A0 7086 739F 95FB 7D0B 8689
868A 73F3 960C 741D 96EF 7612 805E 99BC 9B70 9CFC
9D0D 87A1 95BA 95BF 87C1 95C5 9F24 95E6
520E 543B 5FDF 6286 5461 80B3 7D0A 687D 8117 7A33
7A4F 7A69
95EE 598F 6C76 83AC 554F 6E02 63FE 6435 9850 74BA
545A 922B 93BE
7FC1 55E1 6EC3 9E5F 8789 9393 9DB2
52DC 5963 5855 5D61 84CA 66A1 7788 806C
74EE 8579 7515 7F4B 9F46
631D 502D 6DA1 83B4 5529 6DB9 6E26 7327 8435 7A9D
7AA9 8717 64BE 8778 8E12
6211 5A50 6370
4EF4 6C83 809F 5367 6782 81E5 5053 637E 6DB4 5A89
5E44 63E1 6E25 7125 786A 6943 815B 65A1 7783 64ED
6FE3 74C1 81D2 96D8 9F8C 9F77
4E4C 572C 5F19 6C59 6C5A 6C61 90AC 545C 5DEB 6747
5C4B 6D3F 8BEC 94A8 70CF 526D 7A8F 9114 55DA 6B4D
8AA3 7BBC 8790 9D2E 93A2 9C1E
65E0 6BCB 5433 5434 543E 5449 829C 90DA 5514 5A2A
6D16 6D6F 8323 8381 68A7 73F8 7966 7121 94FB 9E40
7991 8708 8A88 856A 7491 87F1 9BC3 9D50 8B55 9F2F
9DE1
4E94 5348 4EF5 59A9 5E91 5FE4 6003 65FF 6B66 739D
4FAE 4FC9 5035 6342 554E 5A2C 727E 73F7 6440 7894
9E49 7193 7466 821E 5AF5 5EE1 61AE 6F55 511B 6A46
7512 9D61 8E8C
5140 52FF 620A 9622 4F06 5C7C 6264 575E 5C89 674C
82B4 8FD5 5FE2 7269 77F9 537C 6544 8BEF 609E 609F
60AE 7C85 901C 6664 7110 5A7A 5D4D 75E6 9696 9770
9A9B 5862 5966 5D68 6EA9 96FA 96FE 5BE4 7183 8AA4
9E5C 907B 92C8 7AB9 971A 9F3F 9727 9F40 8601 9A16
9DA9
4E44 52A1 4F0D 52D9 933B
FDD0-0058
5915 516E 5438 5FDA 6271 6C50 8980 5E0C 6278 5365
6614 6790 7A78 80B8 80B9 4FD9 5F86 6038 6053 90D7
997B 550F 595A 5C56 6095 6C25 6D60 727A 72F6 8383
553D 6089 60DC 637F 665E 6878 6B37 6DC5 70EF 7101
7108 740B 7852 83E5 8D65 91F8 5092 60C1 6670 6673
711F 712C 7280 774E 7A00 7C9E 7FD5 823E 910E 5380
5D60 5FAF 6EAA 7699 84A0 9521 50D6 69BD 7155 7184
7188 7199 7DC6 8725 8C68 990F 563B 564F 5B06 5B09
5DB2 6F5D 761C 78CE 819D 51DE 6199 6A28 6A40 71B9
71BA 71BB 7AB8 7E18 7FB2 8785 8787 932B 71E8 77A6
87CB 8C3F 8C40 8C6F 8C95 7CE6 7E65 96DF 9D57 89F9
8B46 91AF 93ED 96B5 5DC7 66E6 7214 72A7 9145 89FD
9F37 8835 9E02 89FF 9474
4E60 90CB 5E2D 7FD2 88AD 89CB 5AB3 693A 84B5 84C6
5D8D 6F1D 89A1 8D98 69E2 8582 96B0 6A84 8B35 93B4
972B 9CDB 98C1 9A31 9A3D 8972 9C3C 9A68
67B2 6D17 73BA 5F99 94E3 559C 8448 8478 9222 9268
9269 5C63 6F07 84F0 6198 66BF 6B56 79A7 8AF0 58D0
7E30 8B11 87E2 8E5D 74BD 56CD 9C5A 77D6 8EA7
5338 534C 620F 5C43 7CFB 9969 546C 5FE5 602C 77FD
7EC6 4FC2 54A5 6044 76FB 90E4 6B2F 7EE4 7D30 91F3
960B 55BA 691E 7FD6 8203 8204 8D87 9699 6140 6ECA
798A 7D8C 8D69 969F 588D 7182 7294 7A27 6F5F 6F99
856E 89A4 6231 9ED6 6232 78F6 8669 993C 9B29 7E6B
56B1 95DF 973C 5C6D 884B
897F 606F 6E13 6A72 72A0 7902 9BD1
8672 75A8 867E 8C3A 5084 9595 7146 7175 98AC 778E
8766 9C15
5323 4FA0 72CE 4FE0 5CE1 67D9 70A0 72ED 965C 5CFD
70DA 72F9 73E8 796B 7856 7FC8 823A 967F 7864 9050
656E 6687 7455 7B6A 821D 78AC 8F96 78CD 7E00 8578
7E16 8D6E 9B7B 8F44 935C 971E 938B 9EE0 9A22 9DB7
959C
4E05 4E0B 4E64 5413 759C 590F 7771 5687 61D7 7F45
93BC 5913 93EC
5737 68BA 6E8A
4EDA 5C73 5148 597E 7EA4 4F61 5FFA 6C19 6774 7946
79C8 82EE 67AE 7C7C 73D7 83B6 6380 8A2E 94E6 8DF9
9170 9528 50CA 5615 929B 9C9C 66B9 97EF 5B10 61B8
859F 9341 893C 97F1 9BAE 8E6E 99A6 5EEF 6515 7E8E
9DB1 8973 8E9A 7E96 9C7B
4F2D 95F2 59B6 5F26 8D24 54B8 550C 6326 6D8E 80D8
5A34 5A39 5A71 7D43 8237 86BF 8854 5563 75EB 86DD
9591 9592 9E47 5ACC 8858 7509 929C 5AFA 5AFB 61AA
648F 6F96 7A34 8AB8 8CE2 71C5 8AF4 8F31 918E 7647
764E 77AF 85D6 7925 9E79 9E99 8D12 9DF3 9DF4 9DFC
51BC 72DD 663E 9669 5D04 6BE8 70CD 7303 86AC 967A
8D7B 7B45 5C1F 5C20 641F 7992 8DE3 9291 7BB2 96AA
5DAE 736B 736E 85D3 934C 71F9 9855 5E70 6507 6AF6
861A 8B63 7381 97C5 986F 7066
4F23 53BF 549E 5C98 82CB 73B0 7EBF 81FD 9650 59ED
5BAA 770C 9665 54EF 57B7 5A0A 5A28 5CF4 6D80 83A7
9677 665B 73FE 784D 9985 774D 7D64 7F10 7FA1 732E
7CAF 7FA8 817A 8706 50E9 50F4 7DAB 8AA2 648A 7DDA
92E7 61B2 6A4C 7E23 930E 9921 58CF 8C4F 9EB2 7017
81D4 737B 7CEE 9F38
4ED9 50F2 7E4A 9466
4E61 8297 76F8 9999 90F7 53A2 554C 9109 910A 5EC2
6E58 7F03 8459 9115 7A25 858C 7BB1 7DD7 81B7 8944
5FC0 9AA7 9E98 6B00 74D6 9576 9472 9A64
74E8 4F6D 8BE6 5EA0 6819 7965 7D74 7FD4 8A73 8DED
4EAB 4EAF 54CD 9977 6651 98E8 60F3 9284 9909 9C9E
66CF 8801 9B9D 9BD7 97FF 9957 995F 9C76
5411 59E0 5DF7 8683 9879 73E6 8C61 5842 7F3F 842B
8856 9805 50CF 52E8 5D91 9297 6A61 8950 56AE 87D3
95C0 940C 9C4C
697F 9C5C
7071 7072 547A 67AD 4FBE 54D3 67B5 9A81 54EE 5BAF
5BB5 5EA8 6D88 7EE1 8653 900D 9E2E 5A4B 689F 7107
7307 8427 75DA 75DF 785D 7863 7A99 7FDB 8437 9500
63F1 7D83 560B 5610 6B4A 6F47 7BAB 8E03 5635 61A2
7362 92B7 9704 5F47 81AE 856D 9B48 9D1E 7A58 7C18
85C3 87C2 87CF 9D35 56A3 701F 7C2B 87F0 9AC7 6AF9
56BB 56C2 9AD0 8828 9A4D 6BCA 8648
6D28 7B05 90E9 5D24 6DC6 8A24 6BBD 7B4A 8AB5
5C0F 6653 6681 7B71 7B7F 769B 66C9 7BE0 8B0F 76A2
5B5D 8096 52B9 54B2 4FF2 6548 6821 6D8D 7B11 5578
509A 6569 8A68 5628 8A9F 562F 6B57 71BD 97A9 6585
6586
6077 6EE7
4E9B 63F3 7332 6954 6B47 874E 880D
52A6 534F 65EA 90AA 5354 80C1 57A5 594A 5CEB 604A
62F9 631F 633E 8105 8107 887A 5055 659C 8C10 7FD3
55CB 6136 643A 744E 7D8A 7181 818E 52F0 64B7 64D5
7DF3 7F2C 8762 978B 9821 8AE7 71F2 64F7 97B5 896D
651C 7E88 8B97 9FA4
5199 51A9 5BEB 85DB
4F33 707A 6CC4 6CFB 7944 7EC1 7F37 5378 6D29 70A7
5368 5A0E 5C51 5C53 505E 5070 5FA2 68B0 70F2 710E
79BC 7D32 4EB5 5A9F 5C5F 6E2B 7D4F 7D6C 8C22 50C1
586E 698D 69AD 8909 5667 5C67 66AC 7DE4 5DB0 5EE8
61C8 6FA5 736C 7CCF 85A2 85A4 9082 97F0 71EE 893B
8B1D 99F4 7009 97A2 7023 7215 7E72 87F9 880F 9F58
9F5B 9F65 9F42 8E9E
810B 5911
5FC3 90A4 59A1 5FFB 82AF 8F9B 6615 677A 6B23 7098
76FA 4FFD 60DE 8A22 920A 950C 65B0 6B46 5EDE 92C5
5B1C 85AA 99A8 946B 99AB
6794 8951 9414
4F08
9620 4F29 56DF 5B5E 4FE1 8ED0 812A 8845 8A2B 712E
7161 99B8 9856 820B 91C1
5FC4 567A
661F 57B6 9A8D 60FA 7329 714B 7446 8165 86F5 89EA
7BB5 7BC2 9B8F 66D0 89F2 935F 9A02 76A8 9BF9
5211 884C 90A2 5F62 9649 4F80 90C9 578B 6D10 8365
9498 9658 5A19 784E 94CF 9203 6ECE 9276 9292 92DE
7772 9192 64E4
5174 674F 59D3 5E78 6027 8347 5016 8395 5A5E 60BB
6DAC 7DC8 8208 5B39 81D6
54D8 88C4 8B03
51F6 5144 5147 5308 8BBB 5FF7 6C79 54C5 605F 6D36
80F7 80F8 8A29 8A7E 8CEF
96C4 718A
713D
8BC7 7138 8A57 5910 657B
4F11 4FE2 4FEE 54BB 5EA5 70CB 70CC 7F9E 8129 8119
9E3A 81F9 8C85 9990 6A07 929D 9AE4 9AF9 9380 9D42
93C5 9948 9C43 98CD
82EC
673D 6EEB 7D87 7CD4
79C0 5CAB 5CC0 73DB 7EE3 8896 7407 9508 55C5 6EB4
7493 890E 890F 92B9 8791 7E4D 7E61 93E5 93FD 9F45
9BB4
5401 620C 65F4 759E 76F1 6B28 80E5 987B 6647 8A0F
987C 8657 865A 8C1E 5AAD 5E41 63DF 6E51 865B 88C7
9808 6948 7AA2 980A 5618 589F 9700 9B46 5653 5B03
6B54 7E03 8566 8751 8ADD 8B43 7E7B 9B56 9A49 9450
9B1A
4FC6 5F90 84A3
8BB8 5474 59C1 8BE9 5194 6829 73DD 5066 8A31 668A
8A61 7A30 9126 7CC8 9191 76E8
65ED 4F35 5E8F 6C7F 82A7 4F90 5379 6034 6C80 53D9
6064 662B 6D2B 57BF 6B30 6B88 70C5 73EC 52D6 654D
6558 52D7 70FC 7EEA 7EED 9157 55A3 58FB 5A7F 6702
6E86 7D6E 8A39 6149 7166 84C4 8CC9 69D2 6F35 6F4A
76E2 7781 7DD2 805F 928A 735D 7A38 7DD6 9B63 85C7
77B2 85DA 7E8C 9C6E
8053 7D9A 84FF
5405 8F69 660D 5BA3 5F32 8ED2 688B 8C16 55A7 5847
5A97 6103 610B 63CE 8431 8432 6684 714A 7444 84D2
777B 5107 79A4 7BAE 7E07 7FE7 8756 92D7 61C1 857F
8AE0 8AFC 9379 99FD 77CE 7FFE 85FC 8610 8809 8B5E
7384 73B9 75C3 60AC 65CB 7401 8701 5AD9 6F29 66B6
7487 6A88 74BF 61F8
54BA 9009 6645 70DC 9078 9848 7663 766C
6030 6CEB 6621 70AB 7EDA 7729 88A8 94C9 7404 7734
8852 6E32 7D62 6965 6966 9249 78B9 8519 955F 9799
98B4 7E3C 7E4F 93C7 8B82 8D19
9C1A
524A 75B6 8486 9774 859B 8FA5 8FAA 97BE
7A74 6588 4E74 5B66 5CA4 5CC3 8313 6CF6 8895 9E34
8E05 58C6 5B78 5DA8 6FA9 71E2 89F7 96E4 9DFD
96EA 9CD5 9C48
8840 5437 5779 72D8 6856 8C11 8D90 8B14 7025
81A4 6A30 825D 8F4C
5743 52CB 57D9 7104 52DB 5864 718F 7AA8 8512 52F2
52F3 85AB 99E8 58CE 736F 85B0 66DB 71FB 81D0 77C4
860D 58E6 7E81 91BA
5EF5 5BFB 65EC 5DE1 9A6F 674A 7543 8BE2 5CCB 6042
6D35 6D54 7D03 8340 8368 6812 686A 6BE5 73E3 5071
5C0B 5FAA 63D7 69C6 6F43 8A62 99B4 9129 9C9F 565A
6F6F 6533 6A33 71D6 7495 87F3 9C4F 9C58 7065
5342 8BAF 4F28 6C5B 8FC5 4F9A 5DFA 5F87 72E5 8FFF
900A 6B89 8A0A 8A19 595E 5DFD 6BBE 7A04 905C 613B
8CD0 5640 6F60 8548 9D55 720B 9868 9442
8BAD 8A13 5691
FDD0-0059
4E2B 5727 538B 5416 5E98 62BC 6792 57AD 9E26 6860
9E2D 57E1 5B72 690F 9D09 930F 9D28 58D3 9D76 941A
7259 4F22 5391 5C88 82BD 5393 73A1 740A 7B0C 869C
5810 5D15 5D16 6DAF 731A 7458 775A 8859 6F04 9F56
538A 5E8C 54D1 5516 555E 75D6 96C5 7602 8565
529C 5720 8F67 4E9A 897E 8BB6 4E9C 72BD 8FD3 4E9E
8ECB 5A05 631C 7811 4FF9 6C29 5A6D 6397 8A1D 94D4
63E0 6C2C 7330 8050 5714 7A0F 7AAB 9F7E
4E5B 5440
6079 5266 70DF 73DA 80ED 5063 5571 5D26 6DCA 6DF9
7109 7111 83F8 9609 6E6E 7312 814C 7159 787D 9122
5AE3 6F39 9183 95B9 5B2E 61E8 7BF6 61D5 81D9 9EEB
8BA0 5EF6 4E25 598D 82AB 8A00 5CA9 6616 6CBF 708E
90D4 59F8 5A2B 72FF 7814 839A 5A2E 76D0 7402 784F
9586 960E 5D52 5D53 6E7A 7B75 7D96 8712 5869 63C5
694C 8A7D 789E 8505 989C 53B3 8664 95BB 6A90 984F
9854 56B4 58DB 5DCC 7C37 6AE9 9EEC 58E7 5B4D 5DD7
5DD6 7939 9E7D 9EA3
5935 6281 6C87 4E75 5156 5944 4FE8 5157 533D 5F07
884D 5043 53A3 63A9 773C 8412 90FE 9153 5D43 611D
624A 63DC 68EA 6E30 6E37 7430 9043 9692 693C 7F68
88FA 6F14 8917 5D96 622D 8758 9B47 565E 8EBD 7E2F
6ABF 9A13 9EE1 53B4 7517 9C0B 9DA0 9EE4 9F5E 9F91
513C 9EED 9869 9F34 5DD8 5DDA 66EE 9B58 9F39 9F74
9EF6
538C 95EB 599F 89C3 726A 54BD 59F2 5F65 5F66 781A
5501 5BB4 664F 70FB 8273 898E 9A8C 5050 7114 8C1A
9681 55AD 5830 6565 7130 7131 786F 8455 96C1 50BF
693B 6E8E 6EDF 9CEB 53AD 5895 66A5 917D 5B0A 8C33
990D 9D08 71C4 71D5 8AFA 8D5D 9B33 66D5 9D33 9140
9A10 56A5 5B3F 8276 8D0B 66E3 7213 91B6 9A34 9DC3
7054 8D17 89FE 8B8C 91BC 995C 9A57 9DF0 8277 704E
91C5 9A60 7067 8B9E 8C53 8C54 7069
8A01 7196 6A2E 8EC5 6B15
592E 5489 59CE 62B0 6CF1 6B83 80E6 770F 79E7 9E2F
9260 96F5 9785 9D26
626C 7F8A 9626 9633 65F8 6768 7080 98CF 4F6F 52B7
6C1C 75A1 9496 579F 5F89 661C 6D0B 7F8F 70CA 73DC
773B 967D 5D35 5D38 63DA 86D8 656D 6698 694A 716C
7993 760D 8AF9 8F30 935A 9D39 98BA 940A 9C11 9737
9E09
4EF0 4F52 5771 5C9F 517B 67CD 70B4 6C27 75D2 7D3B
509F 6967 8EEE 6143 6C31 8746 990A 99DA 61E9 6501
7662
600F 6059 6837 7F95 8A47 69D8 6F3E 6A23 7001
594D 7FAA 7922
5E7A 592D 5406 5996 6796 6B80 7945 8A1E 5593 847D
6946 8170 9D01 9080
723B 5C27 5C2D 80B4 579A 59DA 5CE3 8F7A 5004 70D1
73E7 7A91 509C 582F 63FA 8C23 8EFA 55C2 5AB1 5FAD
612E 6416 6447 733A 9059 9065 669A 69A3 7464 7476
929A 98D6 9906 5DA2 5DA4 7AAF 7AB0 991A 7E47 8B20
8B21 9390 9CD0 98BB 8628 908E 9864 9C29
4EF8 5B8E 5C86 62AD 6773 72D5 82ED 54AC 67FC 7711
7A85 7A88 8200 5060 5A79 5D3E 6E94 84D4 699A 9D22
9F3C 95C4 9A15 9F69 9DD5
7A7E 836F 8981 94A5 888E 7A94 7B44 846F 8A4F 718E
899E 977F 735F 9E5E 85AC 66DC 71FF 825E 85E5 77C5
8000 7E85 9DC2 8B91 9470
503B 6396 6930 668D 564E 6F71 882E
8036 6353 63F6 94D8 91FE 92E3 9381 64E8
4E5F 5414 51B6 57DC 91CE 5622 6F1C 58C4
4E1A 53F6 66F3 9875 66F5 90BA 591C 62B4 4EB1 67BC
9801 6654 67BD 70E8 5558 6DB2 8C12 5828 6B97 814B
8449 9113 58B7 696A 696D 998C 50F7 66C4 66C5 6B4B
71C1 64DB 76A3 77B1 9134 9765 5DAA 5DAB 6FB2 8B01
9923 5688 64EB 66D7 77B8 9371 64EA 7217 790F 9391
9941 9D7A 9437 9768 9A5C 9E08
7237 4EAA 723A
4E00 4E4A 5F0C 4F0A 8863 533B 541A 58F1 4F9D 794E
54BF 6D22 6098 7317 90FC 94F1 58F9 63D6 6B39 86DC
7995 5ADB 6F2A 7A26 92A5 5B04 566B 5901 747F 9E65
7E44 6AB9 6BC9 91AB 9EDF 8B69 9DD6 9EF3
4E41 4EEA 531C 572F 5937 8FC6 519D 5B90 6C82 8BD2
4F87 6021 6CB6 72CB 886A 8FE4 9974 54A6 59E8 5CD3
605E 62F8 67C2 73C6 74F5 8D3B 8FFB 5BA7 5DF8 5F2C
6245 6818 684B 7719 80F0 8898 8A11 8CA4 75CD 79FB
801B 8413 51D2 7FA0 86E6 8A51 8A52 8CBD 9057 5A90
6686 6938 8A83 8DE0 9809 9890 98F4 7591 5100 71AA
7BB7 907A 5DAC 5F5B 5F5C 8794 9824 5BF2 5DB7 7C03
984A 5F5D 5F5E 8B3B 93D4 89FA 8B89 9E03
4E59 5DF2 4EE5 9487 4F41 653A 77E3 8094 82E1 82E2
5EA1 8223 8681 91D4 501A 6246 7B16 9018 914F 506F
5D3A 65D1 6905 926F 9CE6 88FF 65D6 8E26 8F22 657C
8798 6AA5 7912 8264 87FB 9857 8F59 9F6E
4E42 4E49 4EBF 5F0B 5208 5FC6 827A 808A 8BAE 4EA6
4F07 5C79 5F02 8285 4F3F 4F5A 52AE 5453 5744 5F79
6291 6759 8034 82C5 8BD1 9091 4F7E 546D 5479 5CC4
6008 603F 6613 678D 6B25 6CC6 7088 79C7 7ECE 8BE3
9A7F 4FCB 5955 5E1F 5E20 5F08 67BB 6D02 6D42 73B4
75AB 7FBF 8875 8F76 5508 57BC 6092 6339 6359 6827
683A 6B2D 6D65 6D73 76CA 88A3 8C0A 966D 52DA 57F6
57F8 60A5 639C 6BB9 7570 785B 7F9B 7FCA 7FCC 8A32
8A33 8C59 8C5B 9038 91F4 96BF 5E46 6561 6679 68ED
6B94 6E59 7132 86E1 8A4D 8DC7 8EFC 9220 9AAE 4E84
517F 610F 6EA2 7348 75EC 776A 7AE9 7F22 7FA9 8084
88D4 88DB 8A63 52E9 5AD5 5ED9 698F 6F69 7617 8189
84FA 8734 977E 99C5 5104 648E 69F8 6BC5
71A0 71A4 71BC 761E 8ABC 9552 9E5D 9E62 9ED3 5293
571B 58BF 5B11 5B1F 5DA7 61B6 61CC 66C0 6BAA 6FBA
71DA 7631 7796 7A53 7E0A 8257 858F 87A0 8939 5BF1
6581 66CE 6A8D 6B5D 71E1 71F1 7FF3 7FFC 81C6 8CF9
9BA8 7654 85D9 85DD 8D00 93B0 9571 7E76 7E79 8C77
972C 9BE3 9D82 9D83 7037 8619 8B6F 8B70 91B3 91B7
9950 56C8 943F 9DC1 9DCA 61FF 897C 9A5B 9DE7 8649
9DFE 8B9B 9F78
8FB7 5307 8864 5B9C 7569 841F 692C 9D8D 7C4E
56D9 56E0 9625 9634 4F8C 5794 59FB 6D07 8335 836B
97F3 9A83 6836 6BB7 6C24 9670 51D0 79F5 88C0 94DF
967B 9682 5591 5819 5A63 6114 7B43 7D6A 6B45 6EB5
798B 852D 6147 647F 7616 92A6 7DF8 9787 8AF2 9712
99F0 567E 95C9 9720 97FE
5198 4E51 541F 72BE 82C2 65A6 70CE 57A0 6CFF 5701
5CFE 72FA 73E2 8376 8A14 8A1A 5A6C 5BC5 5D1F 5D2F
6DEB 8A21 94F6 921D 9F82 6EDB 7892 911E 5924 8529
9280 5656 6BA5 748C 8ABE 569A 6AAD 87EB 972A 9F57
9DE3
4E5A 5EF4 5C39 5F15 5432 996E 8693 8D7A 9690 6DFE
920F 98F2 96A0 9777 98EE 6704 8F11 78E4 8D9B 6A83
763E 96B1 5DBE 6FE5 6FE6 87BE 861F 6AFD 766E 8B94
5370 831A 6D15 80E4 57BD 5837 6E5A 730C 5ED5 8491
9173 616D 764A 6196 6197 9BA3 61DA 6ABC
7C8C
5E94 5FDC 82F1 5040 685C 83BA 5568 5A74 5A96 6E36
7EEC 6720 7150 745B 5AC8 78A4 9533 5624 6484 7507
7DD3 7F28 7F42 8767 8CCF 6A31 748E 7F43 892E 9348
9719 9D2C 9E66 5B30 61C9 81BA 97FA 7516 9E70 9D91
9DA7 56B6 5B46 5B7E 6516 7F4C 8621 8B4D 6AFB 74D4
792F 8B7B 9DAF 944D 7E93 8833 9DEA 9DF9 9E0E 9E1A
76C1 8FCE 8314 76C8 8367 83B9 55B6 8424 8425 8426
86CD 6E81 6E8B 843E 50CC 584B 6979 6EE2 84E5 6F46
7192 7469 877F 5B34 71DF 7E08 87A2 6FD9 6FDA 6FF4
85C0 89AE 8B0D 8D62 7005 93A3 650D 701B 7020 702F
6AFF 7034 8D0F 7C5D 7C6F
77E8 90E2 6D67 68AC 988D 9895 9896 646C 5F71 6F41
7484 763F 7A4E 9834 5DCA 5EEE 766D
6620 668E 786C 5AB5 81A1 565F 9795 941B 9C66
73F1 6125 8747 7E04 651A 8805 7050 705C 8EC8
54DF 5537 55B2
4F63 62E5 75C8 9095 5EB8 50AD 55C8 9118 96CD 5889
5ADE 6175 6EFD 69E6 5670 58C5 64C1 6FAD 90FA 955B
81C3 7655 96DD 93DE 9CD9 5EF1 7049 9954 9C45 9DDB
7670
5581 63D8 7245 9899 9852 9C2B
6C38 752C 548F 6CF3 4FD1 52C7 52C8 6810 57C7 6080
67E1 6D8C 607F 509B 60E5 6111 6E67 7867 8A60 584E
5D71 5F6E 6139 86F9 6142 8E0A 799C 9CAC 8E34 9BD2
7528 82DA 919F
603A 783D
4F18 5FE7 6538 5466 602E 6CD1 5E7D 900C 60A0 9E80
6EFA 6182 512A 913E 5698 7000 6ACC 7E8B 8030
5C22 5C24 7531 6C8B 72B9 90AE 6CB9 80AC 6023 65BF
75A3 5CF3 6D5F 79DE 839C 83B8 90F5 94C0 5064 86B0
8A27 9030 6E38 7336 904A 9C7F 6962 7337 923E 9C89
8F0F 99C0 8555 8763 9B77 8F36 9B8B 6AFE
6709 4E23 5363 82C3 9149 7F91 5EAE 682F 7F90 83A0
6884 8048 811C 94D5 6E75 7989 870F 92AA 69F1 7256
9EDD 61EE
53C8 53F3 5E7C 4F51 4F91 72D6 7CFF 54CA 56FF 59F7
5BA5 5CDF 67DA 7270 7950 8BF1 8FF6 5500 86B4 4EB4
8C81 91C9 916D 8A98 9F2C
53CB 5B67 848F 7257
625C 7EA1 8FC2 8FC3 7A7B 9653 7D06 8676 5539 6DE4
76D3 6BFA 7600 7B8A
4E90 4E8E 9098 4F03 4F59 59A4 6275 6745 6B24 7397
7399 65BC 76C2 81FE 8867 9C7C 4E7B 4FDE 516A 79BA
7AFD 8201 8330 5A1B 5A2F 5A31 6859 72F3 8C00 9151
9980 6E14 8438 9685 96E9 9B5A 5823 582C 5D33 5D4E
5D5B 6109 63C4 6970 6E1D 6E61 756D 7862 8174 842E
903E 9AAC 611A 65D5 6961 6986 6B48 724F 745C 8245
865E 89CE 6F01 776E 7AAC 8206 8915 6B76 7FAD 854D
8753 8ADB 96D3 9918 5B29 6F9E 89A6 8E30 6B5F 74B5
87B8 8F3F 935D 8B23 9AC3 9BBD 65DF 7C45 9A1F 861B
9C05 9DE0 9E06
4E0E 4E88 4F1B 5B87 5C7F 7FBD 96E8 4FC1 4FE3 79B9
8BED 5704 5CFF 7964 504A 532C 5709 5EBE 6554 9105
659E 842D 50B4 5BD9 6940 7440 7610 8207 8A9E 7AB3
92D9 9828 9F89 5673 5DBC 61D9 8C90 6594 9E8C 860C
9F6C
8080 7389 9A6D 572B 807F 828B 828C 59AA 5FEC 996B
80B2 90C1 6631 72F1 79D7 831F 4FFC 5CEA 5F67 6D74
7821 94B0 9884 5590 57DF 5809 6086 60D0 6B32 6DE2
6DEF 8C15 9033 9608 5585 55A9 55BB 5A80 5BD3 5EBD
5FA1 68DB 68DC 68EB 7134 7419 77DE 7872 88D5 9047
98EB 99AD 9E46 6108 6EEA 715C 7A22 7F6D 8248 84AE
84E3 8A89 923A 9810 5AD7 5D8E 622B 6BD3 7344 7609
7DCE 871F 872E 8F0D 9289 564A 617E 6F4F 7A36 84F9
8581 8C6B 9079 92CA 9CFF 6FA6 71CF 71E0 8577 8AED
9325 95BE 9D25 9D2A 5125 7907 79A6 9B4A 9E6C 7652
7916 791C 7A65 7BFD 7E58 91A7 9D52 6AF2 9947 8B7D
8F5D 942D 9731 6B0E 9A48 9B3B 7C5E 9C4A 9DF8 9E12
6B1D 9FA5 8EC9 9B30 9B31 706A 7C72 7229
6327 8362 6F9A 9BF2
56E6 9E22 5248 51A4 6081 7722 9E33 5BC3 6E01 6E06
6E0A 6E15 60CC 6DF5 847E 68E9 84AC 870E 88F7 9E53
7BA2 9CF6 8735 99CC 9D1B 5B3D 9D77 7041 9F18 9F1D
5143 5186 8D20 90A7 5458 56ED 6C85 676C 57A3 7230
8C9F 539F 54E1 5706 7B0E 8696 8881 53A1 570E 63F4
6E72 7328 7F18 8312 9F0B 5712 5713 586C 5AB4 5AC4
6E90 6E92 733F 7342 849D 699E 69AC 8F95 7DE3 7E01
875D 876F 9B6D 6A7C 7FB1 8597 8788 8B1C 8F45 9EFF
93B1 6ADE 908D 9A35 9DA2 9DB0 53B5
8FDC 76F6 903A 9060 92FA
5917 8099 59B4 82D1 6028 9662 57B8 884F 5086 5A9B
63BE 7457 7990 613F 88EB 8911 8924 566E 9858
915B 9228
66F0 66F1 7EA6 7D04 7BB9 77F1 5F5F 5F60
6708 6209 5216 599C 5C84 6288 793F 5CB3 73A5 6071
6085 60A6 868E 868F 8ECF 94BA 9605 6373 8DC0 8DC3
7CA4 8D8A 9205 7CB5 925E 95B1 95B2 5B33 6A3E 7BD7
5DBD 9FA0 7C46 7039 8625 9EE6 721A 79B4 8E8D 7C65
9E11 7C70 9E19
6655 7F0A 8480 6688 6C32 7174 8495 6C33 596B 8779
7E15 8D5F 9835 99A7 8D07
4E91 52FB 5300 56E9 5998 6C84 7EAD 82B8 6600 7547
7703 79D0 90E7 6DA2 7D1C 8018 803A 9116 96F2 612A
6EB3 7B60 7B7C 84B7 69B2 7189 6F90 8553 92C6 6A52
7BD4 7E1C 9942
5141 962D 593D 628E 72C1 9668 837A 6B92 5597 9217
9695 6B9E 891E 99BB 78D2 8CF1 9723 9F73
5B55 8FD0 679F 90D3 607D 9106 915D 508A 60F2 6120
904B 614D 816A 97EB 97F5 7185 71A8 7DF7 7DFC 8574
8580 9196 919E 992B 85F4 97D7 97DE 860A 97FB
62A3 7E67
FDD0-005A
5E00 531D 6C9E 8FCA 5482 62F6 7D25 7D2E 9254 9B73
81DC 81E2
6742 7838 507A 5592 97F4 96D1 5DBB 78FC 894D 96DC
56CB 56D0 96E5
548B
707D 707E 753E 54C9 683D 70D6 83D1 6E3D 7775 8CF3
5BB0 5D3D
518D 5728 6257 4FA2 6D05 8F7D 50A4 8F09 9168 510E
7E21
5142 7CCC 7C2A 7C2E 9415 941F
54B1
661D 6CAF 685A 5BC1 63DD 5646 648D 5127 6505 6512
5139 6522 8DB1 7938 8DB2
6682 66AB 8CDB 8D5E 933E 913C 6FFD 8E54 74C9 8D0A
93E8 74D2 9147 7052 8B83 74DA 79B6 8978 8B9A 9961
5328 7242 7F98 8D43 8CCD 81E7 8535 8CD8 8D13 9AD2
8D1C
9A75 99D4
5958 5F09 810F 585F 846C 92BA 81D3 81DF
50AE 906D 7CDF 8E67 91A9
51FF 947F
65E9 67A3 86A4 68D7 6FA1 74AA 85BB 7E70 85FB
7076 7681 7682 5515 5523 9020 688D 55BF 6165 8241
566A 7C09 71E5 7AC3 8B5F 8DAE 8E81 7AC8
6806
5219 629E 6CA2 62E9 6CCE 6CFD 8D23 8FEE 5247 835D
5536 5567 5E3B 7B2E 8234 8CAC 6EAD 77E0 5616 5AE7
5E58 7BA6 6A0D 8ACE 8D5C 64C7 6FA4 769F 7794 7C00
790B 8957 8B2E 8CFE 880C 9F5A 9F70 9E05
5928 4EC4 5E82 6C44 6603 6617 6351 5D31
4F2C 8536
8D3C 621D 8CCA 9C97 9BFD 8808 9C02 9C61
600E
8C2E 8B56 8B5B
56CE
5897 912B 589E 618E 7F2F 6A67 71B7 7494 77F0 78F3
7F7E 7E52 8B44
9503 92E5 7511 8D60 8D08
9C5B
624E 5412 62AF 5953 6313 67E4 67FB 54F3 5067 55B3
63F8 6E23 6942 5284 6463 76B6 6A1D 89F0 76BB 8B47
9F44 9F47
672D 7534 95F8 86BB 94E1 7160 7250 9598 7B9A 802B
9358 8B57
538F 62C3 82F2 7728 781F 6429 9C8A 9C9D 8E37 9B93
9BBA
4E4D 7079 8BC8 54A4 67DE 6805 70B8 5BB1 75C4 86B1
6EA0 8A50 643E 69A8 9705 91A1
635A 658B 658E 6458 69B8 9F4B
5B85 6AA1
7A84 9259
503A 7826 50B5 5BE8 7635
5908 7C82
6CBE 6BE1 65C3 6834 7C98 86C5 98E6 60C9 8A40 8D88
8A79 959A 8C35 5661 5DA6 859D 9085 9711 6C08 6C0A
77BB 9E6F 65DC 8B6B 9958 9CE3 9A59 9B59 9C63 9E07
8B9D
65A9 98D0 5C55 76CF 5D2D 65AC 692B 7416 640C 76DE
5D83 5D84 6990 98AD 5AF8 9186 6A4F 8F3E 9EF5
5360 4F54 6218 6808 685F 7AD9 5061 7EFD 83DA 68E7
6E5B 6226 7DBB 5D98 8F1A 6230 8665 8666 89B1 8F4F
8B67 8638 9A4F
5F20 5F35 7AE0 50BD 9123 5887 5ADC 5F70 615E 6F33
7350 7CBB 8501 9067 66B2 6A1F 748B 9926 87D1 9A3F
9C46 9E9E
4EC9 957F 9577 6DA8 638C 6F32 7903
4E08 4ED7 6259 5E10 6756 80C0 8D26 5E33 6DB1 8139
75EE 969C 5D82 5E5B 8CEC 762C 7634 7795
7C80 5E65 93F1 9423
4F4B 948A 59B1 5DF6 62DB 662D 76C4 91D7 5541 924A
99CB 7ABC 9363 76BD
722A 627E 6CBC 7475
53EC 5146 8BCF 679B 5797 70A4 72E3 8D75 7B0A 8081
65D0 68F9 8A54 7167 7F69 8087 8088 8D99 66CC 71F3
9BA1 6AC2 77BE 7F84
722B 7F40
8707 55FB 5AEC 906E
5387 6298 6B7D 77FA 7813 7C77 8674 54F2 57D1 7C8D
88A9 5560 608A 6662 6663 8F84 5586 86F0 8A5F 8C2A
99B2 647A 8F12 78D4 8F19 92B8 8F99 87C4 569E 8B2B
8B3A 9BBF 8F4D 8B81 8B8B
8005 4E7D 556B 7987 9517 8D6D 8936 8975
8FD9 67D8 6D59 9019 6DDB 6A1C 6F6A 9E67 87C5 9DD3
7740 8457 8517
8D1E 9488 4FA6 6D48 73CD 73CE 80D7 8C9E 5E2A 6815
6862 771E 771F 7827 796F 91DD 5075 686D 9159 5BCA
8474 9049 5AC3 6438 659F 6968 7349 7504 798E 8496
84C1 9241 9755 699B 6B9D 7467 78AA 799B 6F67 7BB4
6A3C 6FB5 81FB 85BD 9331 8F43 937C 7C48 9C75
8BCA 62AE 6795 5F2B 6623 8F78 5C52 755B 75B9 7715
8897 7D3E 8044 88D6 8A3A 8EEB 7D7C 7F1C 7A39 99D7
7E25 9B12 9EF0
5733 9635 7EBC 753D 4FB2 630B 9663 9E29 632F 6715
681A 7D16 7739 8D48 9156 5866 63D5 6576 7471 8AAB
8CD1 9547 9707 9D06 93AD 93AE
8419 92F4
4E89 4F42 59C3 5F81 6014 722D 8BE4 57E9 5CE5 6323
70A1 72F0 70DD 7710 94B2 5D1D 5D22 6399 7319 7741
8047 94EE 5A9C 63C1 7B5D 5FB0 84B8 775C 8E2D 9266
5FB4 7B8F 931A 5FB5 7BDC 9B07 9BD6 7665
6C36 628D 7CFD 62EF 639F 6678 6138 649C 6574
6B63 8BC1 90D1 5E27 653F 75C7 5E40 8A3C 5863 8ACD
912D 9D0A 8B49
51E7
4E4B 652F 536E 6C41 829D 5431 5DF5 6C65 5767 679D
6CDC 77E5 7EC7 80A2 6800 7957 79D3 79D6 80D1 80DD
887C 5001 75B7 796C 79EA 8102 96BB 6894 6220 6925
81F8 6418 7994 7A19 7D95 69B0 8718 99B6 9CF7 9D32
9D44 7E54 8635 9F05
6267 4F84 59B7 76F4 59EA 5024 503C 8040 91DE 57F4
57F7 6DD4 804C 8CAD 690D 6B96 7286 7983 7D77 8901
8DD6 55ED 74E1 9244 588C 646D 99BD 5B02 6179 6F10
8E2F 6A34 81B1 5128 7E36 8077 87D9 8E60 8EC4 8E91
5902 6B62 53EA 52A7 65E8 962F 5740 5741 5E0B 627A
6C66 6C9A 7EB8 82B7 603E 62A7 7949 54AB 6049 6307
67B3 6D14 780B 8879 8F75 6DFD 75BB 7D19 8A28 8DBE
8EF9 9EF9 916F 85E2 8967
9624 81F3 8296 5FD7 5FEE 627B 8C78 5236 5394 5781
5E19 5E1C 6CBB 7099 8D28 8FE3 90C5 5CD9 5EA2 5EA4
6303 67E3 6809 6D37 7951 965F 5A21 5F8F 631A 664A
684E 72FE 79E9 81F4 889F 8D3D 8F7E 4E7F 506B 5F9D
63B7 68BD 6956 7318 7564 75D4 79F2 79F7 7A92 7D29
7FD0 88A0 89D7 94DA 9E37 5082 5D3B 5F58 667A 6EDE
75E3 86ED 8EFD 9A98 5BD8 5ECC 6431 6ECD 7A1A 7B6B
7F6E 8DF1 8F0A 9527 96C9 5886 6EEF 6F4C 7590 88FD
899F 8A8C 928D 5E5F 6184 646F 71AB 7A3A 81A3 89EF
8CEA 8E2C 92D5 64F3 65D8 7004 7DFB 99E4 9D19 5295
61E5 64F2 6ADB 7A49 87B2 61EB 8D04 6ACD 74C6 89F6
9A2D 9BEF 7929 8C51 9A3A 9A47 8E93 9DD9 9455 8C52
51EA 4FE7 5F94 8B22
4E2D 4F00 6C77 5223 5990 5F78 5FE0 6CC8 7082 7EC8
67CA 76C5 8873 949F 822F 8877 7D42 9221 5E52 8520
953A 92BF 87A4 87BD 937E 9F28 8E71 9418 7C66
80BF 79CD 51A2 55A0 5C30 585A 585C 6B71 7144 816B
7607 7A2E 8E35 7A5C
4EF2 4F17 5995 72C6 794C 833D 8876 91CD 869B 5045
773E 5839 5A91 7B57 8846 8AE5
8FDA
5DDE 821F 8BCC 4F9C 5468 6D32 8BEA 70D0 73D8 8F80
90EE 5F9F 63AB 6DCD 77EA 9031 9E3C 558C 7CA5 8D52
8F08 9282 8CD9 8F16 970C 76E9 8B05 9D43 9A06 8B78
59AF 8F74 8EF8
8098 759B 83F7 666D 776D 7B92 9BDE
7EA3 4F37 546A 5492 5B99 7EC9 5191 54AE 663C 7D02
80C4 836E 76B1 914E 665D 7C99 8464 8A4B 7503 8A76
50FD 76BA 99CE 5663 7E10 9AA4 7C40 7C55 7C52 9A5F
5E1A 70BF 99F2
6731 52AF 4F8F 8BDB 90BE 6D19 8331 682A 73E0 8BF8
732A 7843 79FC 88BE 94E2 7D51 86DB 8A85 8DE6 69E0
6F74 876B 9296 6A65 8AF8 8C6C 99EF 9BA2 9D38 7026
6AEB 6AE7 9BFA 9F04 8829
7AF9 6CCF 7AFA 70A2 7B01 833F 70DB 7A8B 9010 7B1C
8233 7603 7BC9 71ED 880B 8E85 9C41 5B4E 705F 66EF
6B18 7225 883E
4E36 4E3B 5B94 62C4 7F5C 967C 6E1A 716E 7151 8A5D
5631 6FD0 9E88 77A9 529A 56D1 65B8 77DA
4F2B 4F47 4F4F 52A9 7EBB 82CE 577E 677C 6CE8 8D2E
8FEC 9A7B 58F4 67F1 6BB6 70B7 795D 75B0 771D 782B
7969 7ADA 8387 7D35 7D38 7F9C 86C0 5D40 7B51 8A3B
8CAF 8DD3 8EF4 94F8 7B6F 9252 99B5 7BB8 7FE5 6A26
92F3 99D0 7BEB 9714 9E86 9444
58B8
6293 6A9B 81BC 7C3B 9AFD
62FD
8DE9
4E13 53C0 5C02 7816 5C08 911F 587C 5AE5 747C 750E
78D7 819E 989B 78DA 8AEF 87E4 9853 9C44
8F6C 5B68 8EE2 7AF1 8F49
7077 556D 581F 8483 7451 815E 50CE 8D5A 64B0 7BC6
9994 7BF9 8948 8CFA 8B54 994C 56C0 7C51
5986 5E84 599D 8358 5A24 6869 838A 6889 6E77 7CA7
88C5 88DD 6A01 7CDA
58EE 58EF 72B6 72C0 58F5 710B 6F34 649E 6207
5E92
96B9 8FFD 9A93 9525 9310 9A05 9D7B
6C9D
5760 6858 7B0D 5A37 60F4 7500 7F12 7577 787E 8187
589C 8D58 7E0B 8AC8 918A 9323 991F 7908 8D05 8B75
8F5B 9446
7F00 7DB4
5B92 8FCD 80AB 7A80 8C06 8AC4 8860
51C6 57FB 6E96 7DA7
8A30 7A15
51D6
5353 62D9 70AA 502C 6349 684C 68C1 6DBF 68F3 7A5B
7A71 883F
5734 5F74 6C4B 72B3 707C 53D5 59B0 8301 65AB 6D4A
4E35 6D5E 70F5 8BFC 914C 5544 5545 5A3A 68B2 65B1
666B 6913 7438 787A 7AA1 7F6C 64AF 64C6 65B2 69D5
799A 8AC1 8AD1 92DC 6FC1 7BE7 64E2 6580 65B5 6FEF
6AE1 8B36 956F 942F 9D6B 7042 8817 9432 7C57 9DDF
7C71
5285
7AA7
4E72 5B5C 830A 5179 54A8 59D5 59FF 8332 6825 7386
7D0E 8D40 8D44 6DC4 79F6 7F01 8C18 55DE 5B73 5D6B
6914 6E7D 6ECB 7CA2 8458 8F8E 9111 5B76 798C 89DC
8A3E 8CB2 8CC7 8D91 9531 7A35 7DC7 922D 9543 9F87
8F1C 9F12 6FAC 8AEE 8DA6 8F3A 9319 9AED 9CBB 937F
93A1 74BE 983F 983E 9BD4 9D85 9F4D 9C26
84FB
4ED4 5407 59C9 59CA 674D 77F7 79C4 80CF 5470 79ED
7C7D 8014 8678 7B2B 6893 91E8 5559 7D2B 6ED3 8A3F
699F
5B57 81EA 8293 8321 5033 525A 6063 7278 6E0D 7725
7726 80D4 80FE 6F2C
5B50 5D30 6A74
5B97 5027 7EFC 9A94 582B 5D4F 5D55 60FE 68D5 7323
8159 847C 6721 6936 5D78 7A2F 7D9C 7DC3 71A7 7DF5
7FEA 876C 8E28 8E2A 78EB 9350 8C75 8E64 9A0C 9B03
9A23 9B09 9B37 9BEE 9BFC 9441
603B 506C 6374 60E3 6121 63D4 6403 50AF 84D7 6460
7DCF 7E02 7E3D 93D3
7EB5 662E 75AD 500A 7314 7882 7CBD 7CC9 7632 7E26
931D 7E31 7CED
6F48
90B9 9A7A 8BF9 90F0 966C 83C6 68F7 68F8 9112 7B83
7DC5 8ACF 9139 9CB0 9BEB 9EC0 9A36 9F71 9F7A
8D71 8D70
594F 63CD 6971
9BD0
79DF 8445 84A9
5346 8DB3 5352 54EB 5D12 5D2A 65CF 50B6 7BA4 8E24
8E3F 955E 93C3
8BC5 963B 7EC4 4FCE 723C 73C7 7956 7D44 8A5B 977B
93BA
94BB 8E9C 947D
7E64 7F35 7E82 7E89 7C6B 7E98
6525 945A
539C 6718 55FA 6A36 87D5 7E97
5D8A 5634 5DB5 567F 74BB
682C 7D4A 9154 6700 666C 797D 7A21 7F6A 8FA0 69DC
917B 855E 9189 6A87 92F7 930A 6A8C
67A0 7A5D
5C0A 58AB 58FF 5D9F 9075 6A3D 7E5C 7F47 940F 9CDF
9C52 9DF7
50D4 5642 6499 8B50
6358 928C
9D8E
6628 79E8 838B 637D 690A 7422 7A13 7B70 923C
5DE6 4F50 5528 7E53
4F5C 5750 963C 5C9D 5C9E 600D 4FB3 795A 80D9 5511
5EA7 888F 505A 8443 8444 98F5 7CF3
5497 84D9
__END__

=head1 NAME

Unicode::Collate::CJK::Pinyin - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::Pinyin;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::Pinyin::weightPinyin
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::Pinyin> provides C<weightPinyin()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's pinyin ordering.

=head1 CAVEAT

The pinyin ordering includes some characters that are not
CJK Unified Ideographs and can't utilize C<weightPinyin()>
for collation. For them, use C<entry> instead.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/share/perl/5.20.2/Unicode/Collate/CJK/Stroke.pm                                                 0100644 0000000 0000000 00000355407 12744441327 020061  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Stroke;

use 5.006;
use strict;

our $VERSION = '0.94';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt if $c !~ /-/;
	$wt++;
    }
}

sub weightStroke {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
FDD0-2801
4E00 4E28 4E36 4E3F 4E40 4E41 2E84 4E59 4E5A 4E5B
200CA 200CB 200CC 200CD 200D1 4E85 2010C 3006 3007 3021
3025 303B
FDD0-2802
4E01 4E02 4E03 4E04 4E05 4E06 4E29 4E37 4E42 4E43
4E44 20086 20087 2008A 4E5C 4E5D 4E86 2010E 4E8C 4EA0
4EBA 4EBB 513F 5165 516B 2E86 5182 5196 51AB 2E87
51E0 51F5 2E88 5200 5201 5202 529B 52F9 5315 531A
5338 5341 2E8A 535C 5369 5382 53B6 2E80 53C8 5DDC
8BA0 2ECF 2ED6 28E0F 3022 3024 3026
FDD0-2803
4E07 4E08 4E09 4E0A 4E0B 4E0C 4E90 5344 3404 4E2A
4E2B 4E38 4E49 4E45 4E46 4E47 4E48 4E4A 4E5E 4E5F
4E60 4E87 4E8D 4E8E 4E8F 4EA1 4EBC 4EBD 4EBE 4EBF
5140 5166 51E1 51E2 51E3 5203 5204 529C 52FA 5342
5343 353E 536A 536B 53C9 53E3 56D7 571F 58EB 5902
590A 5915 5927 5928 5973 5B50 5B51 5B52 5B53 5B80
5BF8 2E8C 2E8D 5C0F 5C22 21BC1 21BC2 5C38 5C6E 5C71
5DDB 5DDD 21FE8 5DE5 5DF1 5DF2 5DF3 5DFE 5E72 4E61
5E7A 5E7F 5EF4 5EFE 5F0B 5F13 2E95 5F50 5F51 5F61
5F73 5FC4 624C 624D 6C35 72AD 7E9F 2EBE 8279 2ECC
95E8 961D 98DE 9963 9A6C 3005 3023 3027
FDD0-2804
4E0D 4E0E 4E0F 4E10 4E11 4E12 4E13 4E2D 4E2E 4E2F
4E30 4E39 4E3A 4E4B 4E4C 5C39 4E63 4E64 4E65 4E66
4E88 4E91 4E92 4E93 4E94 4E95 4E96 4EA2 4EA3 4EC0
4EC1 4EC2 4EC3 4EC4 4EC5 4EC6 4EC7 4EC8 4EC9 4ECA
4ECB 4ECC 4ECD 4ECE 4ECF 4ED0 4ED1 4ED2 4ED3 5141
5142 5143 5167 516C 516D 516E 516F 5183 5184 5185
5186 5187 5188 34C1 5197 5198 51E4 20630 51F6 20676
5205 5206 5207 5208 529D 529E 52FB 52FC 52FD 52FE
52FF 5300 5301 5302 352B 5316 5339 533A 3539 5345
5346 5347 5348 535D 535E 536C 5383 5384 5385 5386
53B7 53B8 53B9 53CA 53CB 53CC 53CD 53CE 5720 5721
2123C 58EC 5903 5929 592A 592B 592C 592D 5B54 5C10
5C11 5C23 5C24 5C3A 5C6F 4E62 5C72 5DF4
5DFF 5E00 5E01 5E7B 5EFF 5F00 5F0C 5F14 5F15 5F16
5FC3 5FC6 6208 6236 6237 6238 624B 624E 22A66 652F
6534 6535 6587 6597 65A4 65B9 65E0 65E1 2E9C 65E5
66F0 2E9D 6708 6728 6729 233B4 6B20 6B62 6B79 6BB3
6BCB 6BCC 6BD4 6BDB 6C0F 6C14 6C34 706B 706C 2EA5
722A 722B 7236 723B 4E2C 723F 7247 3E26 7259 2EA7
725B 725C 72AC 738B 248E9 793B 25605 7F53 8002 8080
2EBC 89C1 8BA1 8BA2 8BA3 8BA4 8BA5 8D1D 8F66 2ECD
8FB6 95E9 97E6 98CE 3028 3029
FDD0-2805
4E17 3400 4E14 4E15 4E16 4E18 4E19 4E1A 4E1B 4E1C
4E1D 4E31 4E3B 4E3C 4E4D 4E4E 4E4F 4E50 20094 4E67
4E97 3430 3431 3432 3433 3434 3435 3436 3437 4ED4
4ED5 4ED6 4ED7 4ED8 4ED9 4EDA 4EDB 4EDC 4EDD 4EDE
4EDF 4EE0 4EE1 4EE2 4EE3 4EE4 4EE5 4EE6 4EE7 4EE8
4EE9 4EEA 4EEB 4EEC 4EED 201A9 201AB 5144 5145 34B0
5170 5189 518A 518B 518C 20547 5199 519A 51AC 51AD
51AE 51AF 51E5 51E6 51E7 51F7 51F8 51F9 51FA 51FB
5209 520A 520B 520C 520D 529F 52A0 52A1 52A2 5303
5304 5305 5306 5307 5317 531B 531C 531D 531E 5349
534A 534C 535F 5360 5361 5362 536D 536E 536F 20A11
5387 5388 5389 53BA 53BB 53BC 53CF 53D0 53D1 53E4
53E5 53E6 53E7 53E8 53E9 53EA 53EB 53EC
53ED 53EE 53EF 53F0 53F1 53F2 53F3 53F4 53F5 53F6
53F7 53F8 53F9 53FA 53FB 53FC 53FD 53FE 20BA8 20BA9
56D8 56D9 56DA 56DB 56DC 3626 5722 5723 5724 5725
5726 5727 58ED 5904 5916 5917 5918 592E 592F 5930
5931 5932 5933 5934 5974 5975 5976 5B55 5B81 5B82
5B83 5B84 5BF9 5C12 5C13 5C14 5C15 5C3B 5C3C 5C73
5C74 5C75 5C76 5C77 5DE6 5DE7 5DE8 3832 3833 5E02
5E03 5E04 5E05 5E73 5E7C 5E80 5E81 5E82 5E83 5F01
5F0D 5F17 5F18 5F52 38FA 5FC5 5FC7 5FC9 5FCA 225AF
6209 620A 620B 6239 6250 6251 6252 6253 6254 6255
6256 624F 65A5 65E6 65E7 2313D 66F1 672A 672B 672C
672D 672E 672F 6730 6B63 6B7A 6BCD 6C10 6C11 6C15
6C3A 6C36 6C37 6C38 6C39 6C3B 6C3E 6C3F
6C40 6C41 6C43 6C44 6C45 6C47 6C48 6C49 706D 72AE
72AF 72B0 7384 7389 738A 738C 738D 74DC 74E6 7518
751F 7528 7529 7530 7531 7532 7533 7534 7535 2EAA
758B 24D13 7592 7676 767D 76AE 76BF 76EE 77DB 77E2
77F3 2EAC 793A 79B8 79BE 7A74 7ACB 7EA0 7F52 2626A
2626B 808A 827A 8864 27607 8BA6 8BA7 8BA8 8BA9 8BAA
8BAB 8BAC 8BAD 8BAE 8BAF 8BB0 8BB1 8F67 8FB7 9092
9093 9485 957F 95EA 961E 961F 9964 9965 9A6D 9E1F
9F99
FDD0-2806
3401 4E1E 4E1F 4E20 4E21 4E22 4E51 4E52 4E53 4E54
4E68 4E69 4E6A 4E6B 4E6C 4E6D 4E6E 4E6F 4E70 4E89
4E98 4E99 4E9A 342B 4EA4 4EA5 4EA6 4EA7 3438 3439
343B 343F 3440 4EEE 4EEF 4EF0 4EF1 4EF2 4EF3 4EF4
4EF5 4EF6 4EF7 4EF8 4EF9 4EFA 4EFB 4EFC 4EFD 4EFE
4EFF 4F00 4F01 4F02 4F03 4F04 4F05 4F06 4F07 4F08
4F09 4F0A 4F0B 4F0C 4F0D 4F0E 4F0F 4F10 4F11 4F12
4F13 4F14 4F15 4F16 4F17 4F18 4F19 4F1A 4F1B 4F1C
4F1D 4F1E 4F1F 4F20 4F21 4F22 4F23 4F24 4F25 4F26
4F27 4F28 4F29 4F2A 4F2B 4F2C 4F64 201C1 201D4 5146
5147 5148 5149 514A 5168 6C3D 5171 5172 5173 5174
518D 518E 519B 519C 51B0 51B1 51B2 51B3 51B4 205B3
51E8 51E9 51EA 51EB 51FC 520E 520F 5210
5211 5212 5213 5214 5215 5216 5217 5218 5219 521A
521B 52A3 52A4 52A5 52A6 52A7 52A8 5308 531F 5320
5321 5322 353B 534B 534D 534E 534F 5350 5370 5371
3542 538A 538B 538C 538D 53BD 53BE 53D2 3566 53FF
5400 5401 5402 5403 5404 5405 5406 5407 5408 5409
540A 540B 540C 540D 540E 540F 5410 5411 5412 5413
5414 5415 5416 5417 20BBF 20BC6 56DD 56DE 56DF 56E0
56E1 56E2 56E3 5728 5729 572A 572B 572C 572D 572E
572F 5730 5731 5732 5733 5734 5735 5736 5737 5738
5739 573A 2124F 58EE 5905 5919 591A 591B 5935 5936
5937 5938 5939 593A 593B 593C 36A5 5977 5978 5979
597A 597B 597C 597D 597E 597F 5980 5981 5982 5983
5984 5985 5986 5987 5988 216B8 216BA 5B56
5B57 5B58 5B59 21944 5B85 5B86 5B87 5B88 5B89 5BFA
5BFB 5BFC 5C16 5C17 5C18 5C25 5C26 5C27 5C3D 21C2A
5C70 5C78 5C79 5C7A 5C7B 5C7C 5C7D 5C7E 5C7F 5C80
5C81 5C82 5C83 21D46 5DDE 5DDF 5DE9 5DEA 3834 3835
3836 5E06 5E07 5E08 5E74 5E75 5E76 5E84 5E85 5E86
5EF5 5F02 5F0E 5F0F 5F10 5F19 5F1A 5F1B 5F1C 5F53
5F74 5F75 5FC8 5FCB 5FCF 5FD3 5FD4 5FD5 5FD6 5FD9
5FDA 5FDB 225BE 620C 620D 620E 620F 6210 6257 6258
6259 625A 625B 625C 625D 625E 6260 6261 6262 6263
6264 6265 6266 6267 6268 6269 626A 626B 626C 625F
6530 6536 6537 65E8 65E9 65EA 65EB 65EC 65ED 65EE
65EF 3B30 66F2 66F3 6709 3B41 6731 6732 6733 6734
6735 6736 6737 6738 6739 673A 673B 673C
673D 673E 673F 6740 6741 6742 6743 6B21 6B22 6B64
6B7B 6BCE 6BD5 6C12 6C16 6C17 6C18 6C3C 6C46 6C4A
6C4B 6C4C 6C4D 6C4E 6C4F 6C50 6C51 6C52 6C53 6C54
6C55 6C57 6C58 6C59 6C5A 6C5B 6C5C 6C5D 6C5F 6C60
6C61 6C62 6C63 6C64 6C77 706E 706F 7070 7071 7072
7073 7237 725D 725E 725F 72B1 72B2 72B3 72B4 72B5
72B7 72B8 24725 3EA8 3EA9 3EAA 738E 738F 7390 7391
752A 7536 767E 767F 2EAE 793C 7A75 7AF9 7C73 7CF8
7CF9 7EA1 7EA2 7EA3 7EA4 7EA5 7EA6 7EA7 7EA8 7EA9
7EAA 7EAB 7F36 7F51 2EB6 7F8A 2634B 2634C 7FBD 8001
8003 800C 8012 8033 807F 26612 8089 808B 808C 808D
808E 81E3 81EA 81F3 81FC 26951 820C 821B 821F 826E
8272 8278 827B 827C 827D 827E 827F 8280
8281 8282 864D 866B 8840 884C 8863 897E 897F 8980
89C2 8BB2 8BB3 8BB4 8BB5 8BB6 8BB7 8BB8 8BB9 8BBA
8BBB 8BBC 8BBD 8BBE 8BBF 8BC0 8D1E 8D1F 8D20 8D71
8F68 8FB8 8FB9 8FBA 8FBB 8FBC 8FBD 9094 9096 9097
9098 9099 909A 909B 909C 909D 9486 9487 95EB 95EC
95ED 95EE 95EF 9620 9621 9622 9623 9624 9875 9966
9967 9A6E 9A6F 9A70 9F50
FDD0-2807
4E23 4E24 4E25 4E3D 20021 4E32 20068 4E55 4E71 4E72
4E8A 20118 4E9C 4EA8 4EA9 4EAA 3446 4F2D 4F2E 4F2F
4F30 4F31 4F32 4F33 4F34 4F35 4F36 4F37 4F38 4F39
4F3A 4F3B 4F3C 4F3D 4F3E 4F3F 4F40 4F41 4F42 4F43
4F44 4F45 4F46 4F47 4F48 4F49 4F4A 4F4B 4F4D 4F4E
4F4F 4F50 4F51 4F52 4F53 4F54 4F55 4F56 4F57 4F58
4F59 4F5A 4F5B 4F5C 4F5D 4F5E 4F5F 4F60 4F61 4F62
4F63 4F65 4F66 4F67 4F68 201F2 514B 514C 514D 514E
514F 5150 5151 34B3 5175 518F 519D 34C8 51B5 51B6
51B7 51B8 51B9 51BA 51BB 51EC 34DF 521C 521D 521E
521F 5220 5221 5222 5223 5224 5225 5226 5227 5228
5229 522A 522B 522C 522D 52A9 52AA 52AB 52AC 52AD
52AE 52AF 52B0 52B1 52B2 52B3 52B4 5309
208D5 3530 5323 5324 5325 3537 533B 5363 5364 5372
5373 5374 5375 538E 538F 5390 5391 53BF 53D3 356D
3570 3572 5418 5419 541A 541B 541C 541D 541E 541F
5420 5421 5422 5423 5424 5425 5426 5427 5428 5429
542A 542B 542C 542D 542E 542F 5430 5431 5432 5433
5434 5435 5436 5437 5438 5439 543A 543B 543C 543D
543E 543F 5440 5441 5442 5443 5444 5445 5446 5447
5448 5449 544A 544B 544C 544D 544E 544F 5450 5451
5452 5453 5454 5455 5456 5457 5458 5459 545A 545B
545C 20BCB 20BE2 20BEB 20BFB 20BFF 56E4 56E5 56E6 56E7
56E8 56E9 56EA 56EB 56EC 56ED 56EE 56EF 56F0 56F1
56F2 56F3 56F4 56F5 3629 362B 362D 362E 3630 573B
573C 573D 573E 573F 5740 5741 5742 5743
5744 5745 5746 5747 5748 5749 574A 574B 574C 574D
574E 574F 5750 5751 5752 5753 5754 5755 5756 5757
5758 5759 575A 575B 575C 575D 575E 575F 5760 2127C
58EF 58F0 58F1 58F2 58F3 5906 590B 593D 593E 593F
5940 5941 5942 36AA 36AC 5989 598A 598B 598C 598E
598F 5990 5991 5992 5993 5994 5995 5996 5997 5998
5999 599A 599B 599C 599D 599E 599F 59A0 59A1 59A2
59A3 59A4 59A5 59A6 59A7 59A8 59A9 59AA 59AB 216C0
216C1 216C2 216D3 216D5 5B5A 5B5B 5B5C 5B5D 5B5E 5B8A
5B8B 5B8C 5B8D 5B8E 5B8F 5B90 5B91 5B92 5BFD 5BFE
5BFF 5C28 5C29 5C2A 5C2B 5C2C 5C3E 5C3F 5C40 5C41
5C42 5C43 5C84 5C85 5C86 5C87 5C88 5C89 5C8A 5C8B
5C8C 5C8E 5C8F 5C90 5C91 5C92 5C93 5C94
5C95 5C96 5C97 5C98 5C99 5C9A 5C9B 5C9C 5C8D 5DE0
5DEB 5DF5 3837 3838 3839 383B 5E09 5E0A 5E0B 5E0C
5E0D 5E0E 5E0F 5E10 5E87 5E88 5E89 5E8A 5E8B 5E8C
5E8D 5E8E 5E8F 5E90 5E91 5E92 5E93 5E94 5EF7 5F03
5F04 5F05 5F1D 5F1E 5F1F 5F20 223BD 5F62 5F63 5F64
5F76 5F77 5F78 5F79 5F7A 5F7B 3900 5FCC 5FCD 5FCE
5FD0 5FD1 5FD2 5FD7 5FD8 5FDC 3908 5FDF 5FE1 5FE3
5FE4 5FE6 5FE7 5FE8 5FEA 5FEB 5FEC 5FED 5FEE 5FEF
5FF0 5FF1 5FF2 5FF3 5FF4 5FF6 5FF7 5FF8 5FF9 5FFA
5FFB 5FFC 5FFE 6000 6003 6004 6005 6006 6211 6212
6213 22993 623A 623B 623C 39D1 626D 626E 626F 6270
6271 6272 6273 6274 6275 6276 6277 6279 627A 627B
627C 627D 627E 6280 6281 6282 6283 6284
6285 6286 6287 6288 6289 628A 628B 628C 628D 628E
628F 6290 6291 6292 6293 6294 6295 6296 6297 6298
6299 629A 629B 629C 629D 629E 629F 62A0 62A1 62A2
62A3 62A4 62A5 6278 6538 6539 653A 653B 653C 22EEF
6588 6598 65F0 65F1 65F2 65F3 65F4 65F5 65F6 65F7
65F8 66F4 66F5 3B42 3B43 3B44 3B45 3B46 6744 6745
6746 6747 6748 6749 674A 674B 674C 674D 674E 674F
6750 6751 6752 6753 6754 6755 6756 6757 6758 6759
675A 675B 675C 675D 675E 675F 6760 6761 6762 6763
6764 6765 6766 6767 6768 6769 6781 233CC 6B24 3C50
6B65 6B7C 239C2 6BCF 6BD0 23AEE 6BDC 6BDD 6C19 6C1A
6C42 6C56 6C5E 6C65 6C66 6C67 6C68 6C69 6C6A 6C6B
6C6D 6C6E 6C6F 6C70 6C71 6C72 6C73 6C74
6C75 6C76 6C78 6C79 6C7A 6C7B 6C7C 6C7D 6C7E 6C7F
6C81 6C82 6C83 6C84 6C85 6C86 6C87 6C88 6C89 6C8B
6C8C 6C8D 6C8E 6C8F 6C90 6C91 6C92 6C94 6C95 6C96
6C98 6C99 6C9A 6C9B 6C9C 6C9E 6C9F 6CA0 6CA1 6CA2
6CA3 6CA4 6CA5 6CA6 6CA7 6CA8 6CA9 6CAA 23C99 23C9A
23C9B 3DA5 7074 7075 7076 7077 7078 7079 707A 707B
707C 707D 707E 707F 7080 7260 7261 7262 7263 7264
24618 72B6 72B9 72BA 72BB 72BC 72BD 72BE 72BF 72C1
72C2 72C3 72C4 72C5 72C6 72C7 72C8 2472F 3EAD 7392
7393 7394 7395 7396 7397 7398 7399 739A 739B 248F0
248F1 248F2 248F3 74E7 752B 752C 3F55 7537 7538 7539
753A 753C 7593 7594 7595 7596 7597 7680 7681 7682
7683 76C0 76C1 76EF 77E3 77F4 77F5 77F6
25419 793D 4126 79BF 79C0 79C1 79C2 79C3 7A76 7A77
7ACC 7ACD 7CFA 7CFB 7EB6 7EAC 7EAD 7EAE 7EAF 7EB0
7EB1 7EB2 7EB3 7EB4 7EB5 7EB7 7EB8 7EB9 7EBA 7EBB
7EBC 7EBD 7EBE 7F55 8034 8090 8091 8092 8093 8094
8095 8096 8097 8098 8099 809A 809B 809C 809D 809E
809F 80A0 81EB 826F 8283 8284 8285 8286 8287 8288
8289 828A 828B 828C 828D 828E 828F 8290 8291 8292
8293 8295 8296 8297 26B05 26B0A 866C 2760C 898B 89C3
2EC6 89D2 278B2 8A00 8A01 8BC1 8BC2 8BC3 8BC4 8BC5
8BC6 8BC7 8BC8 8BC9 8BCA 8BCB 8BCC 8BCD 8BCE 8BCF
8BD0 8BD1 8BD2 8C37 8C46 8C55 8C78 8C9D 8D21 8D22
8D64 8D70 2ECA 8DB3 8EAB 8ECA 8F69 8F6A 8F6B 8F9B
8FB0 8FB5 5DE1 8FBE 8FBF 8FC0 8FC1 8FC2
8FC3 8FC4 8FC5 8FC6 8FC7 8FC8 8FC9 28468 2846C 28473
9091 909E 909F 90A0 90A1 90A2 90A3 90A4 90A5 90A6
90A7 90A8 90A9 90AA 90AC 286AA 286AB 9149 91C6 91CC
9488 9489 948A 948B 948C 95F0 95F1 95F2 95F3 95F4
95F5 95F6 95F7 9625 9626 9627 9628 9629 962A 962B
962C 962D 962E 962F 9630 9631 9632 9633 9634 9635
9636 28E36 28E39 97E7 98CF 9968 9969 996A 996B 996C
996D 996E 9A71 9A72 9A73 9A74 9E20 9E21 9EA6 9F9F
FDD0-2808
4E26 4E27 4E33 4E56 4E73 4E74 4E75 4E76 4E77 4E78
200EE 4E8B 4E9B 4E9D 4E9E 4E9F 342D 4EAB 4EAC 4F4C
344C 3450 4F69 4F6A 4F6B 4F6C 4F6D 4F6E 4F6F 4F70
4F71 4F72 4F73 4F74 4F75 4F76 4F77 4F78 4F79 4F7A
4F7B 4F7C 4F7D 4F7E 4F7F 4F80 4F81 4F82 4F83 4F84
4F85 4F86 4F87 4F88 4F89 4F8A 4F8B 4F8C 4F8D 4F8E
4F8F 4F90 4F91 4F92 4F93 4F94 4F95 4F96 4F97 4F98
4F99 4F9A 4F9B 4F9C 4F9D 4F9E 4F9F 4FA0 4FA1 4FA2
4FA3 4FA4 4FA5 4FA6 4FA7 4FA8 4FA9 4FAA 4FAB 4FAC
4FAD 20204 2020C 20214 5152 5153 5154 5155 5156 20487
5169 5176 5177 5178 5190 519E 51BC 51BD 51BE 51BF
51C0 205C3 51ED 51EE 51EF 51FD 34E4 522E 522F 5230
5231 5232 5233 5234 5235 5236 5237 5238
5239 523A 523B 523C 523D 523E 523F 5240 5241 5242
2070E 5246 351A 52B5 52B6 52B7 52B8 52B9 52BA 52BB
52BC 52BD 52BE 52BF 52C6 530A 530B 530C 20916 5326
533C 5351 5352 5353 5354 5355 5356 5365 5366 5367
209E7 5376 5377 5378 5379 537A 5392 5393 5394 5395
20A50 53C0 53C1 53C2 53D4 53D5 53D6 53D7 53D8 3577
3578 545D 545E 545F 5460 5461 5462 5463 5464 5465
5466 5467 5468 5469 546A 546B 546C 546D 546E 546F
5471 5473 5474 5475 5476 5477 5478 5479 547A 547B
547C 547D 547E 547F 5480 5481 5482 5483 5484 5485
5486 5487 5488 5489 548A 548B 548C 548D 548E 548F
5490 5491 5492 5493 5494 5495 5496 5497 5498 5499
549A 549B 549C 549D 20C0B 20C0D 20C20 20C34
20C3A 20C3B 20C41 20C42 20C43 3620 56F6 56F7 56F8 56F9
56FA 56FB 56FC 56FD 56FE 3631 3632 3633 3634 3635
5761 5762 5763 5764 5765 5766 5767 5768 5769 576A
576B 576C 576D 576E 576F 5770 5771 5772 5773 5774
5775 5776 5777 5778 5779 577A 577B 577C 577D 577E
577F 5780 5781 5782 5783 5784 5785 5786 5787 5788
5789 578A 212A8 212A9 212B0 5907 590C 591C 591D 5943
5944 5945 5946 5947 5948 5949 594B 594C 594D 2160A
5954 36B0 36B1 36B5 36B9 36BC 36C1 59AC 59AD 59AE
59AF 59B0 59B1 59B2 59B3 59B4 59B5 59B6 59B7 59B8
59B9 59BA 59BB 59BC 59BD 59BE 59BF 59C0 59C1 59C2
59C3 59C4 59C5 59C6 59C7 59C8 59C9 59CA 59CB 59CC
59CD 59CE 59CF 59D0 59D1 59D2 59D3 59D4
59D6 59D7 216DF 216E6 216E7 216E8 216FA 216FB 216FC 216FE
3740 5B5F 5B60 5B61 5B62 5B63 5B64 5B65 5B66 5B67
21958 5B93 5B94 5B95 5B96 5B97 5B98 5B99 5B9A 5B9B
5B9C 5B9D 5B9E 5B9F 5BA0 5BA1 219DB 5C00 5C19 5C1A
5C2D 5C44 5C45 5C46 5C47 5C48 5C49 5C4A 37B9 37BE
5C9D 5C9E 5C9F 5CA0 5CA1 5CA2 5CA3 5CA4 5CA5 5CA6
5CA7 5CA8 5CA9 5CAA 5CAB 5CAC 5CAD 5CAE 5CAF 5CB0
5CB1 5CB2 5CB3 5CB4 5CB5 5CB6 5CB7 5CB8 5CB9 5CBA
5CBB 5CBC 5CBD 5CBE 5CBF 5CC0 5CC1 5CC2 5CC3 5CC4
5CC5 21D90 3830 5DF6 5E11 5E12 5E13 5E14 5E15 5E16
5E17 5E18 5E19 5E1A 5E1B 5E1C 2207E 5E77 5E78 5E98
5E95 5E96 5E97 5E99 5E9A 5E9C 5E9D 5E9E 5E9F 5EF6
38A0 5EF8 5EF9 5F06 5F21 5F22 5F23 5F24
5F25 5F26 5F27 5F28 5F29 5F2A 223D0 5F54 5F55 38CC
2248B 5F7C 5F7D 5F7E 5F7F 5F80 5F81 5F82 5F83 5F84
5FDD 5FDE 5FE0 5FE2 5FE5 5FE9 5FF5 5FFD 5FFF 6001
6002 3914 6007 6008 6009 600A 600B 600C 600D 600F
6010 6011 6013 6014 6015 6016 6017 6019 601A 601B
601C 601E 601F 6021 6022 6026 6027 6029 602A 602B
602C 602D 602E 602F 6030 6032 6033 6034 6035 6036
603A 603D 603E 603F 2261B 2261C 2262B 6214 6215 6216
6217 623D 623E 623F 6240 627F 39D4 39D5 39D9 39DA
39DC 39DD 39DE 39DF 62A6 62A7 62A8 62A9 62AA 62AB
62AC 62AD 62AE 62AF 62B0 62B1 62B2 62B3 62B4 62B5
62B6 62B7 62B8 62B9 62BA 62BB 62BC 62BD 62BE 62BF
62C0 62C1 62C2 62C3 62C4 62C5 62C6 62C7
62C8 62C9 62CA 62CB 62CC 62CD 62CE 62D0 62D1 62D2
62D3 62D4 62D5 62D6 62D7 62D8 62D9 62DA 62DB 62DD
62DE 62DF 62E0 62E1 62E2 62E3 62E4 62E5 62E6 62E7
62E8 62E9 22ACF 22AD5 3A81 653D 653E 6589 23044 65A6
65A7 65A8 65A9 65BA 65BB 65BC 230DA 65F9 65FA 65FB
65FC 65FD 65FE 65FF 6600 6601 6602 6603 6604 6605
6606 6607 6608 6609 660A 660B 660C 660D 660E 660F
6610 6611 6612 6613 6614 6615 6616 6617 6618 6619
66F6 3B33 670A 670B 670C 670D 3B47 3B48 3B49 3B4A
3B4B 3B4C 3B4D 3B4E 3B4F 3B50 676A 676B 676C 676D
676E 676F 6770 6771 6772 6773 6774 6775 6776 6777
6778 6779 677A 677B 677C 677D 677E 677F 6780 6782
6783 6784 6785 6786 6787 6788 6789 678A
678B 678C 678D 678E 678F 6790 6791 6792 6793 6794
6795 6796 6797 6798 6799 679A 679B 679C 679D 679E
679F 67A0 67A1 67A2 67A3 67A4 67A5 67A6 67A7 67A8
67A9 67AA 67AB 67AC 67AD 233DE 233E6 233F4 233F5 233F9
233FA 233FE 23400 67F9 3C20 6B23 6B25 6B26 6B27 6B66
6B67 6B68 6B69 6B7D 6B7E 6B7F 6B80 6B81 6BB4 6BD1
6BDE 6BDF 6C13 6C1B 6C1C 6C1D 6C6C 6C80 6C8A 6C93
6C9D 3CCB 3CCD 3CD1 6CAB 6CAC 6CAD 6CAE 6CB0 6CB1
6CB2 6CB3 6CB4 6CB5 6CB6 6CB7 6CB8 6CB9 6CBA 6CBB
6CBC 6CBD 6CBE 6CBF 6CC0 6CC1 6CC2 6CC3 6CC4 6CC5
6CC6 6CC7 6CC8 6CCA 6CCB 6CCC 6CCD 6CCE 6CCF 6CD0
6CD1 6CD2 6CD3 6CD4 6CD5 6CD6 6CD7 6CD8 6CD9 6CDB
6CDC 6CDD 6CDE 6CDF 6CE0 6CE1 6CE2 6CE3
6CE4 6CE5 6CE6 6CE7 6CE8 6CE9 6CEA 6CEB 6CEC 6CED
6CEE 6CEF 6CF1 6CF2 6CF3 6CF7 6CF8 6CF9 6CFA 6CFB
6CFC 6CFD 6CFE 23CB5 23CB7 23CC7 23CC8 23CC9 6D30 7087
7081 7082 7083 7084 7085 7086 7088 7089 708A 708B
708C 708D 708E 708F 7090 7091 7092 7093 7094 7095
7096 7097 7098 7099 709A 709B 709C 709D 709E 241A3
241A4 241A5 241AC 241B5 722C 722D 7238 7240 7248 3E2F
7265 7266 7267 7268 7269 726A 726B 726C 2462A 72C0
3E62 3E69 72C9 72CB 72CC 72CD 72CE 72CF 72D0 72D1
72D2 72D3 72D4 72D5 72D6 72D7 72D8 72D9 72DA 72DB
72DC 72DD 72DE 739C 739D 739E 739F 73A0 73A1 73A2
73A3 73A4 73A5 73A6 73A7 73A8 73A9 73AA 73AB 73AC
73AD 73AE 73AF 73B0 73B1 248FB 248FF 24900
24901 2490C 74DD 74E8 74E9 7519 753B 753D 753E 753F
7540 7541 7542 7543 7544 7545 758C 7598 7599 759A
759B 759C 759D 759E 759F 75A0 75A1 7677 7684 76AF
76C2 76F0 76F1 76F2 76F3 76F4 76F5 77E4 77E5 77F7
77F8 77F9 77FA 77FB 77FC 77FD 77FE 77FF 7800 7801
25425 793E 793F 7940 7941 7942 7943 79C4 79C5 79C6
79C7 79C8 79C9 79CA 4192 7A78 7A79 7A7A 7A7B 41C4
7ACE 7ACF 7AFA 7AFB 7C74 7C75 7C76 42B5 7CFC 7CFD
7CFE 7CFF 7EBF 7EC0 7EC1 7EC2 7EC3 7EC4 7EC5 7EC6
7EC7 7EC8 7EC9 7ECA 7ECB 7ECC 7ECD 7ECE 7ECF 7ED0
7F37 7F54 7F56 7F57 7F59 7F8B 7F8C 8005 8013 8035
8083 808F 43D9 80A1 80A2 80A3 80A4 80A5 80A6 80A7
80A8 80A9 80AA 80AB 80AC 80AD 80AE 80AF
80B0 80B1 80B2 80B3 80B4 80B5 80B6 80B7 80B8 80B9
80BA 80BB 80BC 80BD 80BE 80BF 80C0 80C1 81E4 81E5
81FD 81FE 820D 820E 820F 8220 8270 8298 8299 829A
829B 829C 829D 829E 829F 82A0 82A1 82A2 82A3 82A4
82A5 82A6 82A7 82A8 82A9 82AA 82AB 82AC 82AD 82AE
82AF 82B0 82B1 82B2 82B3 82B4 82B5 82B6 82B7 82B8
82B9 82BA 82BC 82BD 82BE 82C0 82C1 82C2 82C3 82C4
82C5 82C6 82C7 82C8 82C9 82CA 82CB 82CC 82CD 82CE
82CF 833E 26B13 26B15 26B28 82BF 864E 864F 866D 866E
866F 8670 8671 8672 275E0 8865 8868 89C4 89C5 8BD3
8BD4 8BD5 8BD6 8BD7 8BD8 8BD9 8BDA 8BDB 8BDC 8BDD
8BDE 8BDF 8BE0 8BE1 8BE2 8BE3 8BE4 8BE5 8BE6 8BE7
8BE8 8BE9 8C56 8D23 8D24 8D25 8D26 8D27
8D28 8D29 8D2A 8D2B 8D2C 8D2D 8D2E 8D2F 8ECB 8F6C
8F6D 8F6E 8F6F 8F70 8FCA 8FCB 8FCC 8FCD 8FCE 8FCF
8FD0 8FD1 8FD2 8FD3 8FD4 8FD5 8FD6 8FD7 8FD8 8FD9
8FDA 8FDB 8FDC 8FDD 8FDE 8FDF 8FEC FA24 28482 90AD
90AE 90AF 90B0 90B1 90B2 90B3 90B4 90B5 90B6 90B7
90B8 90B9 90BA 90BB 286BC 91C7 91D1 91D2 948D 948E
948F 9490 9491 9492 9493 9494 9495 9496 9497 9577
9578 9580 95F8 95F9 961C 9637 9638 9639 963A 963B
963C 963D 963E 963F 9640 9641 9642 9643 9644 9645
9646 9647 9648 9649 96B6 96B9 2ED7 96E8 9751 9752
975E 9763 9876 9877 996F 9970 9971 9972 9973 9974
9A75 9A76 9A77 9A78 9A79 9A7A 9A7B 9A7C 9A7D 9A7E
9A7F 9A80 9C7C 9E22 9E23 9E24 9EFE 9F21
9F7F
FDD0-2809
4E34 4E3E 4E57 3420 4E79 4E7A 4E7B 4E7C 4EAD 4EAE
4EAF 4EB0 4EB1 4EB2 4FAE 4FAF 4FB0 4FB1 4FB2 4FB3
4FB4 4FB5 4FB6 4FB7 4FB8 4FB9 4FBA 4FBB 4FBC 4FBD
4FBE 4FBF 4FC0 4FC1 4FC2 4FC3 4FC4 4FC5 4FC6 4FC7
4FC8 4FC9 4FCA 4FCB 4FCC 4FCD 4FCE 4FCF 4FD0 4FD1
4FD2 4FD3 4FD4 4FD5 4FD6 4FD7 4FD8 4FD9 4FDA 4FDB
4FDC 4FDD 4FDE 4FDF 4FE0 4FE1 4FE2 4FE3 4FE4 4FE5
4FE6 4FE7 4FE8 4FE9 4FEA 4FEB 4FEC 4FED 2025B 5157
5158 5159 2048E 516A 5179 517B 5191 5192 519F 51A0
51C1 51C2 51C3 205CA 205D0 205D5 51FE 5243 5244 5245
5247 5248 5249 524A 524B 524C 524D 524E 524F 5250
5251 52C0 52C1 52C2 52C3 52C4 52C5 52C7 52C8 52C9
52CA 52CB 530D 5327 5328 5329 533D 5357
5358 537B 537C 537D 5396 5397 5398 5399 539A 539B
53D9 53DA 53DB 53DC 53DD 5470 5472 3584 549E 549F
54A0 54A1 54A2 54A3 54A4 54A5 54A6 54A7 54A8 54A9
54AA 54AB 54AC 54AD 54AE 54AF 54B0 54B1 54B2 54B3
54B4 54B5 54B6 54B7 54B8 54B9 54BA 54BB 54BC 54BD
54BE 54BF 54C0 54C1 54C2 54C3 54C4 54C5 54C6 54C7
54C8 54C9 54CA 54CB 54CC 54CD 54CE 54CF 54D0 54D1
54D2 54D3 54D4 54D5 54D6 54D7 54D8 54D9 54DA 54DB
54DC 54DD 54DE 54DF 20C53 20C65 20C77 20C78 20C7C 20C8D
20C96 20C9C 3622 56FF 5700 211D9 3636 3637 3638 3639
363B 363E 578B 578C 578D 578E 578F 5790 5791 5792
5793 5794 5795 5796 5797 5798 5799 579A 579B 579C
579D 579E 579F 57A0 57A1 57A2 57A3 57A4
57A5 57A6 57A7 57A8 57A9 57AA 57AB 57AC 57AD 57AE
57AF 57B0 57B1 57B2 57B3 57B4 57B5 57CE 212E3 58F4
58F5 5908 5909 590D 369A 594E 594F 5950 5951 5952
5953 5955 5956 21613 21619 59D5 36C3 36C4 36C5 36C7
36C8 598D 59D8 59D9 59DA 59DB 59DC 59DD 59DE 59DF
59E0 59E1 59E2 59E3 59E4 59E5 59E6 59E7 59E8 59E9
59EA 59EB 59ED 59EE 59EF 59F0 59F1 59F2 59F3 59F4
59F5 59F6 59F7 59F8 59F9 59FA 59FB 59FC 59FD 59FE
59FF 5A00 5A01 5A02 5A03 5A05 5A06 5A07 5A08 2170D
21710 21726 5A0D 5B68 5B69 5B6A 5BA2 5BA3 5BA4 5BA5
5BA6 5BA8 5BA9 5BAA 5BAB 219F3 5C01 5C02 5C06 5C1B
5C1C 5C1D 5C2E 5C2F 5C4B 5C4C 5C4D 5C4E 5C4F 5CC6
5CC7 5CC8 5CC9 5CCA 5CCB 5CCC 5CCD 5CCE
5CCF 5CD0 5CD1 5CD2 5CD3 5CD4 5CD5 5CD6 5CD7 5CD8
5CD9 5CDA 5CDB 5CDC 5CDD 5CDE 5CDF 5CE0 5CE1 5CE2
5CE3 5CE4 5CE5 5CE6 5CE7 21DB6 21DBA 21DCA 21DD1 5CF8
5DEC 5DED 5DF7 5DF8 5DF9 5DFA 5DFB 5E1D 5E1E 5E1F
5E20 5E21 5E22 5E23 5E24 5E25 5E26 5E27 2209A 5E7D
5E9B 5EA0 5EA1 5EA2 5EA3 5EA4 5EA5 5EA6 22208 5EB0
5EFA 5EFB 5EFC 22321 22325 5F07 5F08 5F2B 5F2C 5F2D
5F2E 5F2F 223D7 5F56 5F65 5F66 5F85 5F86 5F87 5F88
5F89 5F8A 5F8B 5F8C 5F8D 5F94 600E 6012 6018 601D
6020 6023 6024 6025 6028 6031 6037 6038 6039 603B
603C 3922 3926 3927 392D 6040 6042 6043 6044 6045
6046 6047 6048 6049 604A 604C 604D 604E 6051 6052
6053 6054 6057 6058 605B 605C 605E 605F
6060 6061 6062 6064 6066 6068 606A 606B 606C 606E
6070 6071 6072 6078 6079 607A 607B 607C 607D 22668
6218 6241 6242 6243 39D8 62CF 62DC 39E1 39E2 39E5
39E6 62EA 62EB 62EC 62ED 62EE 62EF 62F0 62F1 62F4
62F5 62F6 62F7 62F8 62F9 62FA 62FB 62FC 62FD 62FE
6300 6301 6302 6303 6304 6305 6306 6307 6309 630A
630B 630C 630D 630E 630F 6311 6312 6313 6314 6315
6316 6317 6318 631C 631D 631E 631F 6320 6321 6322
6323 6324 6325 6326 6327 22AE6 22AE8 22B0E 22B22 6531
653F 3A83 3A84 3A85 6540 6541 6542 6543 6544 6545
3ABC 3ABD 65AA 65AB 3AC6 65BD 65BE 65BF 65C0 65E2
3ADE 3AE0 661A 661B 661C 661D 661E 661F 6620 6621
6622 6623 6624 6625 6626 6627 6628 6629
662A 662B 662C 662D 662E 662F 6630 6631 6632 6633
6634 6635 6636 6637 6638 6639 663A 663B 663C 663D
663E 663F 2317D 23182 66F7 670E 670F 6710 6711 3B51
3B52 3B53 3B54 3B55 3B56 3B57 67AE 67AF 67B0 67B1
67B2 67B3 67B4 67B5 67B6 67B7 67B8 67B9 67BA 67BB
67BC 67BE 67BF 67C0 67C1 67C2 67C3 67C4 67C5 67C6
67C7 67C8 67C9 67CA 67CB 67CC 67CD 67CE 67CF 67D0
67D1 67D2 67D3 67D4 67D5 67D6 67D7 67D8 67D9 67DA
67DB 67DC 67DD 67DE 67DF 67E0 67E2 67E3 67E4 67E5
67E6 67E7 67E8 67E9 67EA 67EB 67EC 67ED 67EE 67EF
67F0 67F1 67F2 67F3 67F5 67F6 67F7 67F8 67FA 67FB
67FC 67FD 67FE 67FF 6800 6801 6802 6803 6804 6805
6806 6807 6808 6809 680A 680B 680C 680D
680E 680F 6810 6811 6852 3C26 6B28 6B29 6B2A 3C54
6B6A 6B6B 6B82 6B83 6B84 6B85 6B86 6B87 6BB5 6BB6
6BD2 3C8B 6BD6 6BD7 6BD8 6BE0 6BE1 23B5A 6C1E 6C1F
6C20 6C21 6C22 6C97 6CAF 6CC9 6CF4 6CF6 3CD6 3CDC
6CDA 6CFF 6D00 6D01 6D02 6D03 6D04 6D05 6D06 6D07
6D08 6D09 6D0A 6D0B 6D0C 6D0E 6D0F 6D10 6D11 6D12
6D13 6D14 6D15 6D17 6D18 6D19 6D1A 6D1B 6D1D 6D1E
6D1F 6D20 6D21 6D22 6D23 6D24 6D25 6D26 6D27 6D28
6D29 6D2A 6D2B 6D2C 6D2D 6D2E 6D31 6D32 6D33 6D34
6D35 6D36 6D37 6D38 6D39 6D3A 6D3B 6D3C 6D3D 6D3E
6D3F 6D40 6D41 6D42 6D43 6D44 6D45 6D47 6D48 6D49
6D4A 6D4B 6D4C 6D4D 6D4E 6D4F 6D50 6D51 6D52 6D53
6D54 6D55 23CFC 23CFD 23CFE 23CFF 3DAD 709F
70A0 70A1 70A2 70A3 70A4 70A5 70A6 70A7 70A8 70A9
70AA 70AB 70AC 70AD 70AE 70AF 70B0 70B1 70B2 70B3
70B4 70B5 70B6 70B7 70B8 70B9 70BA 70BB 70BC 70BD
70BE 70BF 70C0 70C1 70C2 70C3 241CD 241E2 722E 722F
7230 24505 723C 7241 7249 724A 726D 726E 726F 7270
7271 7272 7273 7274 7275 72CA 72DF 72E0 72E1 72E2
72E3 72E4 72E5 72E6 72E7 72E8 72E9 72EA 72EB 72EC
72ED 72EE 72EF 72F0 72F1 72F2 2478F 7385 3EB1 73B2
73B3 73B4 73B5 73B6 73B7 73B8 73B9 73BB 73BD 73BE
73BF 73C0 73C1 73C2 73C3 73C4 73C5 73C6 73C7 73C8
73C9 73CA 73CB 73CC 73CD 73CE 73CF 73D0 73D1 24916
24917 24919 2492F 24933 24934 74EA 74EB 74EC 74ED 74EE
74EF 74F0 74F1 74F2 751A 7520 752D 752E
3F58 3F59 7546 7547 7548 7549 754A 754B 754C 754D
754E 754F 7550 7551 7552 7553 3F7C 75A2 75A3 75A4
75A5 75A6 75A7 75A8 75A9 75AA 75AB 75AC 75AD 75AE
75AF 75BA 7678 7679 767A 7685 7686 7687 7688 76C3
76C4 76C5 76C6 76C7 76C8 401D 76F6 76F7 76F8 76F9
76FA 76FB 76FC 76FD 76FE 76FF 7700 7701 7702 7703
7704 7705 7706 7707 7708 7709 770A 770B 770C 770D
2512B 77DC 77E6 77E7 77E8 409A 6CF5 7802 7803 7804
7805 7806 7807 7808 7809 780A 780B 780C 780D 780E
780F 7810 7811 7812 7813 7814 7815 7816 7817 7818
7819 781A 781B 781C 2542F 25430 4100 7944 7945 7946
7947 7948 7949 794A 794B 794C 794D 794E 89C6 25635
79B9 79BA 4132 79CB 79CC 79CD 79CE 79CF
79D0 79D1 79D2 79D3 79D4 79D5 79D6 79D7 25772 4195
7A7C 7A7D 7A7E 7A7F 7A80 7A81 7A82 7A83 25946 7AD0
7AD1 7AD2 7AD3 7AD4 7AD5 7AD6 7AD7 7AFC 7AFD 7AFE
7AFF 7B00 7B01 7B02 7B03 25AE9 427A 5A04 7C77 7C78
7C79 7C7A 7C7B 7C7C 7C7D 7C7E 7C7F 7C80 7C81 7C82
42B6 42B7 42B9 7D00 7D01 7D02 7D03 7D04 7D05 7D06
7D07 7D08 7D09 7ED1 7ED2 7ED3 7ED4 7ED5 7ED6 7ED7
7ED8 7ED9 7EDA 7EDB 7EDC 7EDD 7EDE 7EDF 4342 7F38
7F58 7F5A 7F8D 7F8E 7F8F 7F91 26351 7FBE 7FBF 263F5
263F8 8007 800D 800E 800F 8010 8011 8014 8036 8037
43DF 80C2 80C3 80C4 80C5 80C6 80C7 80C8 80C9 80CA
80CB 80CC 80CD 80CE 80CF 80D0 80D1 80D2 80D3 80D5
80D6 80D7 80D8 80D9 80DA 80DB 80DC 80DD
80DE 80DF 80E0 80E1 80E2 80E3 80E4 80E5 80E6 80E7
80E8 80E9 80EA 80EB 8109 81F4 81FF 8221 8222 8223
8224 8294 82D0 82D1 82D2 82D3 82D4 82D5 82D6 82D7
82D8 82D9 82DA 82DB 82DC 82DD 82DE 82DF 82E0 82E1
82E2 82E3 82E4 82E5 82E6 82E7 82E8 82E9 82EA 82EB
82EC 82ED 82EE 82EF 82F0 82F1 82F2 82F3 82F4 82F5
82F6 82F7 82F8 82F9 82FA 82FB 82FC 82FD 82FE 82FF
8300 8301 8302 8303 8304 8305 8306 8307 8309 830A
830B 830C 830D 830E 830F 8310 8311 8313 8314 8315
26B50 26B51 26B52 26B53 26B5B 833A 8650 8673 8674 8675
8676 8677 8678 8679 867A 867B 867C 867D 867E 867F
8680 8681 8682 8683 460F 8841 8842 884D 884E 275E4
8866 8867 8869 886A 886B 886C 27632 27639
8981 898C 89C7 89C8 89C9 89D3 89D4 8A02 8A03 8A04
8A05 8A06 8A07 8A08 8BEA 8BEB 8BEC 8BED 8BEE 8BEF
8BF0 8BF1 8BF2 8BF3 8BF4 8BF5 8BF6 8C9E 8C9F 8CA0
8D30 8D31 8D32 8D33 8D34 8D35 8D36 8D37 8D38 8D39
8D3A 8D3B 8D72 8D73 8D74 8D75 8DB4 8ECC 8ECD 8F71
8F72 8F73 8F74 8F75 8F76 8F77 8F78 8F79 8F7A 8F7B
8FE0 8FE1 8FE2 8FE3 8FE4 8FE5 8FE6 8FE7 8FE8 8FE9
8FEA 8FEB 8FED 8FEE 8FEF 8FF0 8FF1 8FF2 8FF3 90BC
90BD 90BE 90BF 90C0 90C1 90C2 90C3 90C4 90C5 90C6
90C7 90C8 90C9 90CA 90CB 90CD 90CE 90CF 90D0 90D1
90D3 90D5 286D8 286E6 90F1 914A 914B 91CD 91D3 91D4
9498 9499 949A 949B 949C 949D 949E 949F 94A0 94A1
94A2 94A3 94A4 94A5 94A6 94A7 94A8 94A9
94AA 94AB 94AC 94AD 94AE 94AF 9581 9582 95FA 95FB
95FC 95FD 95FE 95FF 9600 9601 9602 964A 964B 964C
964D 964E 964F 9650 9651 9652 9653 9654 9655 28E65
28E66 9762 9769 97CB 97E8 97ED 97F3 9801 9878 9879
987A 987B 98A8 98D0 98D1 98D2 98DB 2EDE 98DF 98E0
9975 9976 9977 9978 9979 997A 997B 997C 9996 29810
9999 9A81 9A82 9A83 9A84 9A85 9A86 9A87 9A88 9A89
2EE3 9CEC 9E25 9E26 9E27 9E28 9E29
FDD0-280A
2003E 4E35 4E58 4E7D 4EB3 3465 3466 4FEE 4FEF 4FF0
4FF1 4FF2 4FF3 4FF4 4FF5 4FF6 4FF7 4FF8 4FF9 4FFA
4FFB 4FFC 4FFD 4FFE 4FFF 5000 5001 5002 5003 5004
5005 5006 5007 5008 5009 500A 500B 500C 500D 500E
500F 5010 5011 5012 5013 5014 5015 5016 5017 5018
5019 501A 501B 501C 501D 501E 501F 5020 5021 5022
5023 5024 5025 5026 5027 5028 5029 502A 502B 502C
502D 502E 502F 5030 5031 5032 5033 5034 5035 5036
5037 5038 5039 503A 503B 503C 503D 503E 503F 20274
20275 20299 2029E 202A0 5056 515A 515B 20491 20492 517A
517C 5193 5194 51A1 51A2 51A3 51A4 51A5 51A6 51A7
2058E 51C4 51C5 51C6 51C7 51C8 51C9 51CA 51CB 51CC
51CD 51CE 205DF 205E0 20656 5252 5253 5254
5255 5256 5257 5258 5259 525A 525B 525C 525D 525E
525F 5260 5261 5262 5263 5264 5265 5266 5267 20731
52CC 52CD 52CE 52CF 52D0 52D1 20873 530E 532A 532B
537F 539C 539D 539E 539F 8652 53DE 53DF 3597 3598
54E0 54E1 54E2 54E3 54E4 54E5 54E6 54E7 54E8 54E9
54EA 54EB 54EC 54ED 54EE 54EF 54F0 54F1 54F2 54F3
54F4 54F5 54F6 54F7 54F8 54F9 54FA 54FB 54FC 54FD
54FE 54FF 5500 5501 5502 5503 5504 5505 5506 5507
5508 5509 550A 550B 550D 550E 550F 5510 5511 5512
5513 5514 5515 5516 5517 5518 5519 551A 551B 551C
551D 551E 551F 5520 5521 5522 5523 5524 5525 5526
5527 20CB5 20CB8 20CCF 20CD3 20CD4 20CD5 20CD6 20CDD 20CED
20CFF 20D15 3623 5701 5702 5703 5704 5705
5706 57B6 57B7 57B8 57B9 57BA 57BB 57BC 57BD 57BE
57BF 57C0 57C1 57C2 57C3 57C4 57C5 57C6 57C7 57C8
57C9 57CA 57CB 57CC 57CD 57CF 57D0 57D1 57D2 57D3
57D4 57D5 57D6 57D7 57D8 57D9 57DA 57DB FA0F 212FE
21302 21303 21304 21305 5832 58F6 590E 590F 591E 21596
594A 5957 5958 5959 595A 36CE 36D1 36D3 36D4 36D6
36DD 36E1 36E2 59EC 5A09 5A0A 5A0B 5A0C 5A0E 5A0F
5A10 5A11 5A12 5A13 5A14 5A15 5A16 5A17 5A18 5A19
5A1A 5A1B 5A1C 5A1D 5A1E 5A1F 5A20 5A21 5A22 5A23
5A24 5A25 5A26 5A27 5A28 5A29 5A2A 5A2D 5A2E 5A2F
5A30 5A31 5A32 5A33 5A34 2173A 2173B 2173C 21757 3743
5B6B 5B6C 5B6D 2196A 5BA7 5BAC 5BAD 5BAE 5BAF 5BB0
5BB1 5BB2 5BB3 5BB4 5BB5 5BB6 5BB7 5BB8
5BB9 5BBA 5BBB 5BBC 5BBD 5BBE 5C03 5C04 5C05 3797
5C50 5C51 5C52 5C53 5C54 5C55 5C56 5C57 5C58 21C70
5CE8 5CE9 5CEA 5CEB 5CEC 5CED 5CEE 5CEF 5CF0 5CF1
5CF2 5CF3 5CF4 5CF5 5CF6 5CF7 5CF9 5CFA 5CFB 5CFC
5CFD 5CFE 5CFF 5D00 5D01 5D02 5D03 5D04 5D05 21DEB
21DF9 382B 5DEE 5DFC 5E28 5E29 5E2A 5E2B 5E2C 5E2D
5E2E 5E2F 5E30 5E31 220C7 221C3 5EA7 5EA8 5EA9 5EAA
5EAB 5EAC 5EAD 5EAE 5EAF 5EFD 5F09 5F30 5F31 5F32
5F33 5F67 5F68 22491 5F8E 5F8F 5F90 5F91 5F92 5F93
5F95 224ED 3920 392B 6041 604B 604F 6050 6055 6056
6059 605A 605D 6063 6065 6067 6069 606D 606F 6073
6074 6075 6076 6077 3931 3933 3934 3936 3937 3938
3939 607E 6080 6081 6082 6083 6084 6085
6087 6088 608B 608C 608D 608E 608F 6091 6092 6093
6094 6095 6096 6097 6099 609A 609B 609C 609D 609E
609F 60A2 60A6 60A7 60A9 60AD 60AE 60AF 2267A 22696
22698 6219 6244 6245 6246 6247 39EC 62F2 62F3 62FF
6308 6310 6319 631A 631B 39F8 6328 6329 632A 632B
632C 632D 632E 632F 6330 6331 6333 6334 6335 6336
6337 6338 6339 633A 633C 633D 633E 633F 6340 6341
6342 6343 6344 6345 6346 6347 6348 6349 634A 634B
634C 634D 634E 634F 6350 6351 6352 6353 6354 6355
6356 6357 6358 6359 635A 635B 635C 635D 635E 635F
6360 6361 6362 6363 6364 22B3F 22B43 22B6A 63E4 3A87
3A88 3A89 6546 6547 6548 6549 654A 654B 654C 2304B
658A 658B 6599 659A 3AC9 65C1 65C2 65C3
65C4 65C5 65C6 65CA 6640 6641 6642 6643 6644 6645
6646 6647 6648 6649 664A 664B 664C 664D 664E 664F
6650 6651 6652 6653 6654 6655 6656 231A4 231A5 665F
6660 66F8 66FA 66FB 3B34 3B35 6712 6713 6714 6715
6717 67BD 67E1 67F4 3B58 3B59 3B5A 3B5B 3B5C 3B5D
3B5E 3B5F 3B60 3B61 3B62 3B63 3B64 3B65 3B66 3B67
6812 6813 6814 6815 6816 6817 6818 6819 681A 681B
681C 681D 681E 681F 6820 6821 6822 6823 6824 6825
6826 6827 6828 6829 682A 682B 682C 682D 682E 682F
6830 6831 6832 6833 6834 6835 6836 6837 6838 6839
683A 683B 683C 683D 683E 683F 6840 6841 6842 6843
6844 6845 6846 6847 6848 6849 684A 684B 684C 684D
684E 684F 6850 6851 6853 6854 6855 6856
6857 6858 6859 685A 685B 685C 685D 685E 685F 6860
6861 6862 6863 6864 6865 6866 6867 6868 6869 686A
2343F 23450 2346F 23472 6B2B 6B2C 6B2D 6B2E 6B2F 6B30
6B31 6B34 6B6C 6B6D 3C61 6B88 6B89 6B8A 6B8B 6BB7
6BD9 6BE2 6BE3 6BE4 6BE5 6BE6 6BE7 6BE8 6BE9 6BEA
6C23 6C24 6C25 6C26 6C27 6C28 6C29 6CF0 6D1C 6D2F
6D46 3CEF 6D0D 6D16 6D56 6D57 6D58 6D59 6D5A 6D5B
6D5C 6D5D 6D5E 6D5F 6D60 6D61 6D62 6D63 6D64 6D65
6D66 6D67 6D68 6D69 6D6A 6D6B 6D6C 6D6D 6D6E 6D6F
6D70 6D71 6D72 6D73 6D74 6D75 6D76 6D77 6D78 6D79
6D7A 6D7B 6D7C 6D7D 6D7E 6D7F 6D80 6D81 6D82 6D83
6D84 6D85 6D86 6D87 6D88 6D89 6D8A 6D8B 6D8C 6D8D
6D8F 6D90 6D91 6D92 6D93 6D94 6D95 6D96
6D97 6D98 6D9A 6D9B 6D9C 6D9D 6D9E 6D9F 6DA0 6DA1
6DA2 6DA3 6DA4 6DA5 6DA6 6DA7 6DA8 6DA9 23D40 23D5B
3DB4 70C4 70C5 70C6 70C7 70C8 70C9 70CA 70CB 70CC
70CD 70CE 70CF 70D0 70D1 70D2 70D3 70D4 70D5 70D6
70D7 70D8 70D9 70DA 70DB 70DC 70DD 70DE 70DF 70E0
70E1 70E2 70E3 70E4 70E5 70E6 70E7 70E8 70E9 70EA
70EB 70EC 70ED 70EE 241FC 2421B 7231 7239 7242 24578
3E20 7276 7277 7278 7279 727A 3E74 72F3 72F4 72F5
72F6 72F7 72F8 72F9 72FA 72FB 72FC 72FD 72FE 7300
7301 7302 7303 7386 3EB8 73BA 73BC 3EBF 3EC2 3EC7
73D2 73D3 73D4 73D5 73D6 73D7 73D8 73D9 73DA 73DB
73DC 73DD 73DE 73DF 73E0 73E1 73E2 73E3 73E4 73E5
73E6 73E7 73E8 73E9 73EA 73EB 73EC 73ED
73EE 73EF 73F0 73F1 73F2 7409 2493E 2493F 24940 24941
24942 24943 73F9 74DE 74DF 74F3 74F4 74F5 7521 7554
7555 7556 7557 7558 7559 755A 755B 755C 755D 755E
755F 758D 75B0 75B1 75B2 75B3 75B4 75B6 75B7 75B8
75B9 75BB 75BC 75BD 75BE 75BF 75C0 75C1 75C2 75C3
75C4 75C5 75C6 75C7 75C8 75C9 7560 768A 768B 768C
768D 24F5C 3FED 76B0 76B1 4000 76C9 76CA 76CB 76CC
76CD 76CE 76CF 76D0 76D1 25052 4026 770E 770F 7710
7711 7712 7713 7714 7715 7716 7717 7718 7719 771A
771B 771C 771D 771E 771F 7720 7721 7722 7723 7724
7727 7728 7729 772A 772B 772C 773F 25148 77DD 77E9
40A8 781D 781E 781F 7820 7821 7822 7823 7824 7825
7827 7828 7829 782A 782B 782C 782D 782E
782F 7830 7831 7832 7833 7834 7835 7836 7837 7838
7839 783A 783B 783C 783D 783E 783F 7840 7841 25446
2546C 2546E 4103 794F 7950 7951 7952 7953 7954 7955
7956 7957 7958 7959 795A 795B 795C 795D 795E 795F
7960 7962 25651 2573D 79D8 79D9 79DA 79DB 79DC 79DD
79DE 79DF 79E0 79E1 79E2 79E3 79E4 79E5 79E6 79E7
79E8 79E9 79EA 79EB 79EC 79ED 79EE 79EF 79F0 7A84
7A85 7A86 7A87 7A88 7A89 7A8A 7A8B 7A8C 7A8D 7A8E
25956 41CA 7AD8 7AD9 7ADA 7ADB 7ADC 7ADD 7ADE 41D7
41DB 7B05 7B06 7B07 7B08 7B09 7B0A 7B0B 7B0C 7B0D
7B0E 7B0F 7B10 7B11 7B12 7B13 7B14 7B15 7B04 7C83
7C84 7C85 7C86 7C87 7C88 7C89 7C8A 7C8B 7C8C 7C8D
7C8E 7C8F 7C90 7C91 42BC 7D0A 7D0B 7D0C
7D0D 7D0E 7D0F 7D10 7D11 7D12 7D13 7D14 7D15 7D16
7D17 7D18 7D19 7D1A 7D1B 7D1C 7D1D 7D1E 7D1F 7D20
7D21 7D22 7D23 7D24 7D25 7D26 7D27 7EE0 7EE1 7EE2
7EE3 7EE4 7EE5 7EE6 7EE7 7EE8 4343 7F39 7F3A 7F3C
7F5B 7F5C 7F5D 7F5E 7F5F 7F60 7F61 7F62 7F90 7F92
7F93 7F94 7F96 7F97 7F98 7F99 7FC0 7FC1 7FC2 7FC3
7FC4 7FC5 7FC6 26402 26410 26411 26412 8004 8006 800A
8015 8016 8017 8018 8019 8038 8039 803A 803B 803C
803D 803E 803F 8040 8041 8042 8081 8082 43ED 80ED
80EE 80EF 80F0 80F1 80F2 80F3 80F4 80F5 80F6 80F7
80F8 80F9 80FA 80FB 80FC 80FD 80FF 8100 8101 8102
8103 8104 8105 8106 8107 8108 810A 810B 810C 810D
810E 810F 8110 8111 8112 8113 266AF 266B1
266B5 81EC 81ED 26939 8200 8201 8210 4465 8225 8226
8227 8228 8229 822A 822B 822C 822D 822E 822F 8230
8231 8273 449F 44A0 44A2 82BB 8308 8316 8317 8318
8319 831A 831B 831C 831E 831F 8320 8321 8322 8324
8325 8326 8327 8328 8329 832A 832B 832C 832D 832E
832F 8330 8331 8332 8333 8334 8335 8336 8337 8338
8339 833C 833D 833F 8340 8341 8342 8343 8344 8345
8347 8348 8349 834A 834B 834C 834D 834E 834F 8350
8351 8352 8354 8355 8356 8357 8358 835A 835B 835C
835D 835E 835F 8360 8361 8362 8363 8364 8365 8366
8367 8368 8369 836A 836C 836D 836E 836F 26B75 26B82
26B96 26B97 26B9D 26BB3 8353 8651 8653 8654 8684 8685
8686 8687 8689 868A 868B 868C 868D 868E
868F 8690 8691 8692 8693 8694 8695 8696 8697 8698
8699 869A 869B 869C 869D 869E 869F 86A0 86A1 86A2
86A3 86A4 86A5 86A6 86A7 86A8 86A9 86AA 86AC 8843
8844 4615 884F 886D 886E 886F 8870 8871 8872 8873
8874 8875 8876 8877 8878 8879 887A 887B 887C 887D
887E 887F 8880 8881 8882 8883 8884 8885 8886 8887
27655 27656 27657 898D 898E 89CA 8A09 8A0A 8A0B 8A0C
8A0D 8A0E 8A0F 8A10 8A11 8A12 8A13 8A14 8A15 8A16
8A17 8A18 8A19 8A1A 27967 8BF7 8BF8 8BF9 8BFA 8BFB
8BFC 8BFD 8BFE 8BFF 8C00 8C01 8C02 8C03 8C04 8C05
8C06 8C07 8C08 8C09 8C0A 8C38 8C47 8C48 8C57 8C79
8C7A 8C7B 8CA1 8CA2 8CA3 8CA4 27D2F 8D3C 8D3D 8D3E
8D3F 8D40 8D41 8D42 8D43 8D44 8D45 8D46
4798 8D76 8D77 8D78 47D5 8DB5 8DB6 8DB7 8DB8 8EAC
8ECE 8ECF 8ED0 8ED1 8ED2 8ED3 8ED4 8ED5 8F7C 8F7D
8F7E 8F7F 8F80 8F81 8F82 8F83 8FB1 8FF4 8FF5 8FF6
8FF7 8FF8 8FF9 8FFA 8FFB 8FFC 8FFD 8FFE 8FFF 9000
9001 9002 9003 9004 9005 9006 9007 9008 9009 900A
9095 90D6 90D7 90D8 90D9 90DA 90DB 90DC 90DD 90DE
90DF 90E0 90E1 90E2 90E3 90E4 90E5 90E6 90E7 914C
914D 914E 914F 9150 9151 9152 91D5 91D6 91D7 91D8
91D9 91DA 91DB 91DC 91DD 91DE 91DF 91E0 91E1 91E2
94B0 94B1 94B2 94B3 94B4 94B5 94B6 94B7 94B8 94B9
94BA 94BB 94BC 94BD 94BE 94BF 94C0 94C1 94C2 94C3
94C4 94C5 94C6 94C7 94C8 94C9 94CA 94CB 94CC 94CD
94CE 9583 9584 9585 28CCA 28CCD 9603 9604
9605 9606 9656 9657 9658 9659 965B 965C 965D 965E
965F 9660 9661 9662 9663 9664 9665 9666 9667 9668
9669 965A 28E97 96BA 96BB 96BC 96BD 96BE 987C 987D
987E 987F 9880 9881 9882 9883 9884 98E2 98E3 98E4
997D 997E 997F 9980 9981 9982 99AC 9A8A 9A8B 9A8C
9A8D 9A8E 9A8F 9AA8 9AD8 9ADF 9B25 9B2F 9B32 9B3C
9C7D 9E2A 9E2B 9E2C 9E2D 9E2E 9E2F 9E30 9E31 9E32
9E33 9E34 9E35 9E36 9F80
FDD0-280B
3422 4E7E 4E7F 4E80 3464 5040 5041 5042 5043 5044
5045 5046 5047 5048 5049 504A 504B 504C 504D 504E
504F 5050 5051 5052 5053 5054 5055 5057 5058 5059
505A 505B 505C 505D 505E 505F 5060 5061 5062 5063
5064 5065 5066 5067 5069 506A 506B 506C 506D 506E
506F 5070 5071 5072 5073 5074 5075 5076 5077 5078
5079 507A 507B 507C 507D 507E 507F 202B7 202BF 202C0
202E5 515C 515D 515E 517D 34BC 5195 51A8 51CF 51D0
51D1 205EB 51F0 5268 526A 526B 526C 526D 526E 526F
5270 5271 5276 20779 3520 52D2 52D3 52D4 52D5 52D6
52D8 52D9 52DA 530F 5310 5313 352D 5318 5319 3531
532C 532D 532E 533E 533F 5340 5359 5368 537E 53A0
53A1 53A2 53A3 53A9 53C3 53C4 550C 35A1
35A5 35AD 5528 5529 552A 552B 552C 552D 552E 552F
5530 5531 5532 5533 5534 5535 5536 5537 5538 5539
553A 553B 553C 553D 553E 553F 5540 5541 5542 5543
5544 5545 5546 5547 5548 5549 554A 554B 554C 554D
554E 554F 5550 5551 5552 5553 5554 5555 5556 5557
5558 555A 555B 555C 555D 555E 5560 5561 5562 5563
5564 5565 5566 5567 5568 5569 556A 556C 556D 556E
556F 5570 5571 5572 5573 5574 5575 5576 5577 5578
5579 20D28 20D31 20D32 20D46 20D47 20D48 20D49 20D4C 20D4D
20D4E 20D6F 20D71 20D74 20D7C 20D7E 20D7F 20D96 20D9C 20DA7
20DB2 556B 55B6 5707 5708 5709 570A 570B 570F 3647
3648 3649 57DC 57DD 57DE 57DF 57E0 57E1 57E2 57E3
57E4 57E5 57E6 57E7 57E8 57E9 57EB 57EC
57ED 57EE 57EF 57F0 57F1 57F2 57F3 57F4 57F5 57F6
57F7 57F8 57F9 57FA 57FB 57FC 57FD 57FE 57FF 5800
5801 5802 5803 5804 5805 5806 5807 5808 5809 580A
580B 580C 580D 580E 580F 5810 5811 5812 5813 5814
5815 21336 2133A 57EA 5835 58F7 58F8 591F 5920 595B
595C 595D 595E 2163E 595F 5962 5A2B 5A3D 36E5 36E6
5A2C 5A35 5A36 5A37 5A38 5A39 5A3A 5A3B 5A3C 5A3E
5A3F 5A40 5A41 5A42 5A43 5A44 5A45 5A46 5A47 5A48
5A49 5A4A 5A4B 5A4C 5A4D 5A4E 5A4F 5A50 5A51 5A52
5A53 5A54 5A55 5A56 5A57 5A58 5A59 5A5A 5A5B 5A5C
5A5D 5A5E 5A5F 5A60 5A61 5A62 5A63 5A64 5A65 5A66
5A67 5A68 5A69 5A6A 5A6B 5A6C 5A6D 5A6E 5A6F 5A70
5A71 5A72 5A73 5A74 5A75 5A76 2176C 2176D
2176E 2176F 21770 21771 21773 21774 5A8E 5B6E 5B6F 5B70
5B72 5BBF 5BC0 5BC1 5BC2 5BC3 5BC4 5BC5 5BC6 5BC7
5BC8 5BC9 21A2D 21A34 5C07 5C08 5C09 5C59 5C5A 5C5B
5C5C 5C5D 5C60 5D06 5D07 5D08 5D09 5D0A 5D0B 5D0C
5D0D 5D0E 5D0F 5D10 5D11 5D12 5D13 5D14 5D15 5D16
5D17 5D18 5D19 5D1A 5D1B 5D1C 5D1D 5D1E 5D1F 5D20
5D21 5D22 5D23 5D24 5D25 5D26 5D27 5D28 5D29 5D2A
5D2B 5D2C 5D2D 5D2E 5D2F 5D30 21E1C 21E37 21E3D 5DE2
5DE3 3831 5E32 5E33 5E34 5E35 5E36 5E37 5E38 5E39
5E3A 5E3B 5E3C 5E3E 5EB1 5EB2 5EB3 5EB4 5EB5 5EB6
5EB7 5EB8 5EB9 5EBA 5EBB 5EBC 5EBE 5F34 5F35 5F36
5F37 5F38 5F39 223FA 5F57 5F69 5F6B 5F6C 5F96 5F97
5F98 5F99 5F9B 5F9C 5F9D 5F9E 5F9F 5FA0
5FA1 5FA2 5FA3 5FA4 22513 2251B 3930 3932 3935 393B
607F 6086 6089 608A 6090 6098 60A0 60A1 60A3 60A4
60A5 60A8 60AA 60AB 60AC 393F 394D 60B0 60B1 60B4
60B5 60B7 60B8 60BA 60BB 60BC 60BD 60BE 60BF 60C0
60C2 60C3 60C5 60C6 60C7 60C8 60CA 60CB 60CD 60CF
60D0 60D3 60D4 60D5 60D7 60D8 60D9 60DA 60DB 60DC
60DD 60DE 60DF 60E4 60E6 60E7 60E8 60EC 60ED 60EE
60EF 226F4 226F5 226F6 22712 22714 2271B 2271F 621A 621B
621C 621D 6248 6332 633B 39FB 39FE 3A00 3A01 3A02
3A03 3A04 3A06 6365 6366 6367 6368 6369 636A 636B
636C 636D 636E 636F 6370 6371 6372 6373 6374 6375
6376 6377 6378 6379 637A 637B 637C 637D 637E 637F
6380 6381 6382 6383 6384 6385 6386 6387
6388 6389 638A 638B 638D 638E 638F 6390 6391 6392
6393 6395 6396 6397 6398 6399 639A 639B 639C 639D
639E 639F 63A0 63A1 63A2 63A4 63A5 63A6 63A7 63A8
63A9 63AA 63AB 63AC 63AD 63AE 63AF 63B3 63B4 63B5
63B6 63B7 63B8 63B9 63BA 63BB 63BC 63BD 22BCA 22BCE
63B2 3A8A 3A8B 3A8C 3A8D 3A8E 555F 654D 654E 654F
6550 6551 6552 6553 6554 6555 6556 6557 6558 6559
655A 655B 655D 658D 658E 658F 659B 659C 65AC 65AD
3ACB 65C7 65C8 65C9 65CB 65CC 65CD 65CE 65CF 65E3
3AF0 3AF2 52D7 6657 6658 6659 665A 665B 665C 665D
665E 6661 6662 6663 6664 6665 6666 6667 6668 6669
66FD 231B3 231C8 231C9 66F9 66FC 3B36 3B37 6716 6718
6719 671A 671B 3B68 3B69 3B6A 3B6B 3B6C
3B6D 3B6E 3B6F 3B70 3B71 3B72 3B73 3B74 3B75 3B77
686B 686C 686D 686E 686F 6870 6871 6872 6873 6874
6875 6876 6877 6878 6879 687A 687B 687C 687D 687E
687F 6880 6881 6882 6883 6884 6885 6886 6887 6888
6889 688A 688B 688C 688D 688E 688F 6890 6891 6892
6893 6894 6895 6896 6897 6898 6899 689A 689B 689C
689D 689E 689F 68A0 68A1 68A2 68A3 68A4 68A5 68A6
68A7 68A8 68A9 68AA 68AB 68AC 68AD 68AE 68AF 68B0
68B1 68B2 68B3 68B5 68B6 68B7 68B8 68B9 68BA 68BB
68BC 68BD 68BE 68BF 68C0 68C1 68C2 6956 3C2F 6B32
6B33 6B35 6B36 6B37 6B38 3C62 6B8C 6B8D 6B8E 6B8F
6B90 6B91 6B92 6B93 6BB8 6BB9 6BBA 6BBB 6BEB 6BEC
6BED 6BEE 6C2A 6C2B 23C63 3CEB 6D8E 3D00
3D04 6D99 6DAA 6DAB 6DAC 6DAD 6DAE 6DAF 6DB0 6DB1
6DB2 6DB3 6DB4 6DB5 6DB6 6DB7 6DB8 6DB9 6DBA 6DBB
6DBC 6DBD 6DBE 6DBF 6DC0 6DC1 6DC2 6DC3 6DC4 6DC5
6DC6 6DC7 6DC8 6DC9 6DCA 6DCB 6DCC 6DCD 6DCE 6DCF
6DD0 6DD1 6DD2 6DD3 6DD4 6DD5 6DD6 6DD7 6DD8 6DD9
6DDA 6DDB 6DDC 6DDD 6DDE 6DDF 6DE0 6DE1 6DE2 6DE3
6DE4 6DE5 6DE6 6DE7 6DE8 6DE9 6DEA 6DEB 6DEC 6DED
6DEE 6DEF 6DF0 6DF1 6DF2 6DF3 6DF4 6DF5 6DF6 6DF7
6DF8 6DF9 6DFA 6DFB 6DFD 6DFF 6E00 6E01 6E02 6E04
6E05 6E06 6E07 6E08 6E09 6E0A 6E0B 6E0C 6E0D 6E0E
6E0F 6E10 6E11 6E12 6E13 6E14 6E15 6E16 6E17 6E1A
6E74 23D7E 23D8F 23DB6 23DB7 23DB8 23DB9 23DBA 23DBB 23DBC
23DBD 23DE3 23DF8 3DBF 70EF 70F0 70F1 70F2
70F3 70F4 70F5 70F6 70F7 70F8 70F9 70FA 70FC 70FD
70FE 70FF 7100 7101 7102 7103 7104 7105 7106 7107
7108 7109 710A 710B 710C 710D 710E 710F 7110 7111
7112 7113 7115 7116 7117 7118 2424B 24256 24259 7114
723D 3E3A 3E3C 3E3E 3E40 727B 727C 727D 727E 727F
7281 24665 72FF 7304 7305 7307 7308 7309 730A 730D
730E 730F 7310 7311 7313 7314 7315 7316 7317 7318
7319 731A 731B 731C 731D 731E 731F 7320 7321 732A
7387 7388 3ECA 3ECC 3ED0 73F3 73F4 73F5 73F6 73F8
73FA 73FB 73FC 73FD 73FE 73FF 7400 7401 7402 7403
7404 7405 7406 7407 7408 740A 740B 740C 740D 740E
740F 7410 7411 7412 7413 24962 24963 24974 24975 24976
3F0E 74E0 3F26 74F6 74F7 74F8 751B 751C
7522 7523 7561 7562 7563 7564 7565 7566 7567 7569
7570 75B5 75CA 75CB 75CC 75CD 75CE 75CF 75D0 75D1
75D2 75D3 75D4 75D5 75D6 7689 768E 768F 7690 7691
76B2 4001 4002 76D2 76D3 76D4 76D5 76D6 76D7 76D8
76DB 7725 7726 772D 772E 772F 7730 7731 7732 7733
7734 7735 7736 7737 7738 7739 773A 773B 773C 773D
773E 7741 2517D 2517E 7740 77EA 77EB 7826 7842 7843
7844 7845 7846 7847 7848 7849 784A 784B 784C 784D
784E 784F 7850 7851 7852 7853 7854 7855 7856 7857
7858 7859 785A 785B 7961 4104 7963 7964 7965 7967
7968 7969 796A 796B 796C 796D 796E 796F 8996 25683
79BB 413B 4141 4143 4145 79F1 79F2 79F3 79F4 79F5
79F6 79F7 79F8 79F9 79FA 79FB 79FC 79FD
79FE 7A06 7A8F 7A90 7A91 7A92 7A93 7A94 7A95 7A9A
7AE1 7B16 7B17 7B18 7B19 7B1A 7B1B 7B1C 7B1D 7B1E
7B1F 7B20 7B21 7B22 7B23 7B24 7B25 7B26 7B27 7B28
7B29 7B2A 7B2B 7B2C 7B2D 7B2E 7B2F 7B30 7B31 7B32
7B33 7B34 7B35 7B36 7B37 7B38 7B39 7B3A 7B3B 7B3C
7B3D 7B3E 7568 7C92 7C93 7C94 7C95 7C96 7C97 7C98
7C99 7C9A 7C9B 7C9C 7C9D 7CA3 25E49 7D28 7D29 7D2C
7D2D 7D2E 7D2F 7D30 7D31 7D32 7D33 7D34 7D35 7D36
7D37 7D38 7D39 7D3A 7D3B 7D3C 7D3D 7D3E 7D3F 7D40
7D41 7D42 7D43 7D44 7D45 7D46 7D47 7D48 7D49 7D4A
7D4B 7D4C 25FE1 25FE2 7EE9 7EEA 7EEB 7EEC 7EED 7EEE
7EEF 7EF0 7EF1 7EF2 7EF3 7EF4 7EF5 7EF6 7EF7 7EF8
7EF9 7EFA 7EFB 7EFC 7EFD 7EFE 7EFF 7F00
7F01 4344 4345 7F3B 7F3D 7F63 7F95 7F9A 7F9B 7F9C
7F9D 7F9E 7F9F 7FC7 7FC8 7FC9 7FCA 7FCB 7FCC 7FCD
7FCE 7FCF 7FD0 7FD1 7FD2 8008 8009 801A 801B 801C
801D 801E 801F 8043 8044 8045 8046 8047 8048 8049
804A 804B 804C 804D 80EC 43F2 8115 8116 8117 8118
8119 811A 811B 811C 811D 811E 811F 8121 8122 8123
8124 8125 8126 8127 8128 8129 812A 812B 812C 812D
812E 812F 8130 8131 8132 8133 8134 8135 8136 8137
8138 266DA 266E8 266FC 2690E 8202 8211 8232 8233 8234
8235 8236 8237 8238 8239 823A 823B 26A2D 26A2E 8274
8359 836B 831D 8323 8370 8371 8372 8373 8374 8375
8376 8377 8378 8379 837A 837B 837C 837D 837E 837F
8380 8381 8382 8383 8384 8385 8386 8387
8388 8389 838A 838B 838C 838D 838E 838F 8390 8391
8392 8393 8394 8395 8396 8397 8398 8399 839B 839C
839D 839E 839F 83A0 83A1 83A2 83A3 83A4 83A5 83A6
83A7 83A8 83A9 83AA 83AB 83AC 83AE 83AF 83B0 83B1
83B2 83B3 83B4 83B5 83B6 83B7 83B8 83B9 83BA 83BC
83BD 26BC0 26BF7 26C21 83AD 5F6A 8655 8656 8657 8658
8659 865A 86AB 86AD 86AE 86AF 86B0 86B1 86B2 86B3
86B4 86B5 86B6 86B7 86B8 86B9 86BA 86BB 86BC 86BD
86BE 86BF 86C0 86C1 86C2 86C3 86C4 86C5 86C6 86C7
86C8 86C9 86CA 86CB 86CC 86CD 86CE 86CF FA21 27280
27285 2728B 8845 8850 8851 8852 8853 8854 4626 8888
8889 888A 888B 888C 888D 888E 888F 8890 8891 8892
8893 8894 8895 8896 8897 8898 8899 889A
889B 889C 889D 889E 889F 88A0 88A1 88A2 88A3 88A4
88A5 88A6 88A7 88A8 88A9 88AA 88AB 88AC 88AD 88AE
88B0 88AF 8982 467A 898F 8990 8991 8992 8993 8994
89CB 89D5 89D6 89D7 89D8 89D9 278C8 46BC 8A1B 8A1C
8A1D 8A1E 8A1F 8A20 8A21 8A22 8A23 8A24 8A25 8A26
8A27 8A28 8A29 8A2A 8A2B 8A2C 8A2D 8A2E 8A2F 8A30
8A31 8A32 8A33 2797A 8C0B 8C0C 8C0D 8C0E 8C0F 8C10
8C11 8C12 8C13 8C14 8C15 8C16 8C17 8C18 8C19 8C1A
8C1B 8C1C 8C1D 8C1E 8C39 8C3A 8C3B 8C49 4746 4747
8C58 8C59 8C5A 8C5B 8C5C 8C5D 8C7C 8C7D 8CA5 8CA6
8CA7 8CA8 8CA9 8CAA 8CAB 8CAC 8CAD 8CAE 8D47 8D48
8D49 8D4A 8D65 8D66 8D67 479B 8D79 8D7A 8D7B 8D7C
8D7D 8D7E 8D7F FA23 8DB9 8DBA 8DBB 8DBD
8DBE 8DBF 8DC0 8DC1 8DC2 8DC3 8DC4 8EAD 8EAE 8EAF
28218 2821A 4846 4847 4848 4849 484A 8ED6 8ED7 8ED8
8ED9 8EDA 8EDB 8EDC 8EDD 8EDE 8EDF 8EE0 8EE1 8EE2
8EE3 282CD 8F84 8F85 8F86 489B 900B 900C 900D 900E
900F 9010 9011 9012 9013 9014 9015 9016 9017 9018
9019 901A 901B 901C 901D 901E 901F 9020 9021 9022
9023 9024 9025 9026 9027 28501 90AB 90D4 90E8 90E9
90EA 90EB 90EC 90ED 90EE 90EF 90F0 90F2 90F3 90F4
90F7 90F8 90FD 2870F 28713 48ED 9153 9154 9155 9156
9157 9158 9159 915A 915B 915C 915D 915E 28804 91C8
91CE 91E3 91E4 91E5 91E6 91E7 91E8 91E9 91EA 91EB
91EC 91ED 91EE 91EF 91F0 91F1 91F2 91F3 91F4 91F5
91F6 91F7 91F8 91F9 91FA 91FB 91FC 28948
28949 94CF 94D0 94D1 94D2 94D3 94D4 94D5 94D6 94D7
94D8 94D9 94DA 94DB 94DC 94DD 94DE 94DF 94E0 94E1
94E2 94E3 94E4 94E5 94E6 94E7 94E8 94E9 94EA 94EB
94EC 94ED 94EE 94EF 94F0 94F1 94F2 94F3 94F4 94F5
94F6 94F7 9579 957A 9586 9587 9588 9589 958A 28CD2
9607 9608 9609 960A 960B 960C 960D 960E 960F 9610
966A 966B 966C 966D 966E 966F 9670 9671 9673 9674
9675 9676 9677 9678 9679 967A 967C 28EAC 28EB2 28EB3
96BF 96C0 96E9 96EA 96EB 291D5 291EB 976A 7ADF 7AE0
9802 9803 9804 9885 9886 9887 9888 98E1 98E5 98E6
9983 9984 9985 9986 9997 9A90 9A91 9A92 9A93 9A94
9A95 9A96 9AD9 9B5A 9C7E 9CE5 9E37 9E38 9E39 9E3A
9E3B 9E3C 9E3D 9E3E 9E3F 9E75 9E7F 9EA5
9EB8 9EBB 9ED2 9F81 9F9A 9F9B
FDD0-280C
20046 4E81 4EB4 4EB5 5068 3473 347A 5080 5081 5082
5083 5084 5085 5086 5087 5088 5089 508A 508B 508C
508D 508E 508F 5090 5091 5092 5093 5094 5095 5096
5097 5098 5099 509A 509B 509C 509D 509E 509F 50A0
50A1 50A2 50A3 50A4 50A5 50A6 50A7 50A8 50A9 2030A
20325 515F 5160 204A3 6700 51D2 51D3 51D4 51D5 51D6
51F1 51F2 51FF 34FB 5269 5272 5273 5274 5275 52DB
52DC 52DD 52DE 5311 5312 20923 20954 3538 535A 53A4
53A5 53A6 53A7 53A8 53C5 35BF 35C1 35C4 35C5 35C7
35CA 35CE 5559 557A 557B 557C 557D 557E 557F 5580
5581 5582 5583 5584 5585 5586 5587 5588 5589 558A
558B 558C 558E 558F 5590 5591 5592 5593 5594 5595
5596 5597 5598 5599 559A 559B 559C 559D
559E 559F 55A0 55A1 55A2 55A3 55A4 55A5 55A6 55A7
55A8 55A9 55AA 55AB 55AC 55AD 55AE 55AF 55B0 55B1
55B2 55B3 55B4 55B5 55B7 55B8 55B9 55BA 55BB 55BC
55BD 55BE 5645 20DC8 20E04 20E09 20E0A 20E0D 20E0E 20E0F
20E10 20E11 20E16 20E1D 55DE 570C 570D 570E 5710 364E
5816 5817 5818 5819 581A 581B 581C 581D 581E 581F
5820 5821 5822 5823 5824 5825 5826 5827 5828 5829
582A 582B 582C 582D 582E 582F 5830 5831 5833 5834
5836 5837 5838 5839 583A 583B 583C 583E 583F 5840
5841 5842 5844 5845 5846 5847 5848 21375 21376 2138E
21398 2139C 58F9 58FA 58FB 5921 5960 5961 5963 5964
5965 36F5 3700 3701 3703 3704 5A77 5A78 5A79 5A7A
5A7B 5A7C 5A7D 5A7E 5A7F 5A80 5A81 5A82
5A83 5A84 5A85 5A86 5A87 5A88 5A89 5A8A 5A8B 5A8C
5A8D 5A8F 5A91 5A92 5A93 5A94 5A95 5A96 5A97 5A98
5A99 5A9A 5A9B 5A9C 5A9D 5A9E 5A9F 5AA0 5AA1 5AA2
5AA3 5AA4 5AA5 5AA6 5AA7 5AA8 5AA9 5AAA 5AAB 5AAC
5AAD 5AAE 5AAF 5ACF 217AB 217B0 217B1 217B2 217B3 217B4
217B5 217C3 217C7 217D9 217DA 217DB 217DC 217DF 5B71 2197C
21980 5B73 3762 5BCA 5BCB 5BCC 5BCD 5BCE 5BCF 5BD0
5BD1 5BD2 5BD3 5BD4 5BD5 5BEA 21A45 21A4B 5C0A 5C0B
5C0C 5C1E 5C30 5C31 5C5E 5C5F 5C61 21CA2 21CA5 5D31
5D32 5D33 5D34 5D35 5D36 5D37 5D38 5D39 5D3A 5D3B
5D3C 5D3D 5D3E 5D3F 5D40 5D41 5D42 5D43 5D44 5D45
5D46 5D47 5D48 5D49 5D4B 5D4C 5D4D 5D4E 5D4F 5D50
5D51 5D52 5D53 5D54 5D55 5D56 5D57 5D58
5D59 5D5A 5D5B 5D5C 5D5D FA11 21E89 21EA4 21EA8 5D6B
382D 5DEF 5DFD 22045 22049 5E3D 5E3F 5E40 5E41 5E42
5E43 5E44 5E45 5E46 5E47 5E49 220FC 5E48 5E7E 5EBD
5EBF 5EC0 5EC1 5EC2 5EC3 5ECA 5EC4 5F11 5F3A 5F3B
5F3C 5F3D 5F3E 5F58 5F6D 5F9A 5FA5 5FA6 5FA7 5FA8
5FA9 5FAA 5FAB 22530 60B2 60B3 60B6 60B9 60C1 60C4
60C9 60CC 60CE 60D1 60D2 60D6 60E0 60E1 60E2 60E3
60E5 60E9 60EA 60EB 3961 3962 3965 60F0 60F1 60F2
60F4 60F5 60F6 60F8 60FA 60FB 60FC 60FD 60FE 60FF
6100 6103 6104 6105 6107 6109 610A 610B 610C 610E
6110 6111 6112 6113 6114 6115 6116 6118 611C 611D
611E 6120 6121 6122 6123 6124 6125 6126 6168 2272A
22775 22781 39B8 621E 621F 6249 624A 638C
6394 63A3 63B0 63B1 3A17 3A18 63BE 63BF 63C0 63C1
63C2 63C3 63C4 63C6 63C7 63C8 63C9 63CA 63CB 63CC
63CD 63CE 63CF 63D0 63D1 63D2 63D3 63D4 63D5 63D6
63D7 63D8 63D9 63DA 63DB 63DC 63DD 63DE 63DF 63E0
63E1 63E2 63E3 63E5 63E6 63E8 63E9 63EA 63EC 63ED
63EE 63EF 63F0 63F2 63F3 63F4 63F5 63F6 63F7 63F8
63F9 63FA 63FB 63FC 63FD 63FE 63FF 6400 6401 6402
6403 6404 6405 6452 22C26 22C27 22C38 22C4C 22C51 22C55
6461 6532 3A8F 3A90 3A97 655C 655E 655F 6560 6561
6562 6563 6564 6565 6566 6567 6568 6569 656A 22F74
658C 6590 6591 3AB8 659D 2307D 2307E 659E 3AC0 65AE
65AF 65B1 65D0 65D1 23103 3AFB 3B00 666A 666B 666C
666D 666E 666F 6670 6671 6672 6673 6674
6675 6676 6677 6679 667A 667B 667C 667D 667E 667F
6680 6681 6682 6683 6691 231F7 231F8 231F9 2320F 66FE
66FF 6701 6702 3B38 671C 671D 671E 671F 68B4 3B76
3B78 3B79 3B7A 3B7B 3B7C 3B7D 3B7E 3B7F 3B80 68C3
68C4 68C5 68C6 68C7 68C8 68C9 68CA 68CB 68CC 68CD
68CE 68CF 68D0 68D1 68D2 68D3 68D4 68D5 68D6 68D7
68D8 68D9 68DA 68DB 68DC 68DD 68DE 68DF 68E0 68E1
68E2 68E3 68E4 68E5 68E6 68E7 68E8 68E9 68EA 68EB
68EC 68ED 68EE 68EF 68F0 68F1 68F2 68F3 68F4 68F5
68F6 68F7 68F8 68F9 68FA 68FB 68FC 68FD 68FE 68FF
6900 6901 6902 6903 6904 6905 6906 6907 6908 6909
690A 690B 690C 690D 690E 690F 6910 6911 6912 6913
6914 6915 6916 6917 6918 6919 691A 691B
691C 691D 691E 691F 6920 6921 6922 6923 6924 6925
6926 6927 6928 6929 692A 692B 692C 692D 692E 234E5
23519 23530 696E 6970 6B39 6B3A 6B3B 6B3C 6B3D 6B3E
6B3F 6B6E 6B6F 3C64 3C66 3C68 3C69 6B94 6B95 6B96
6B97 6B98 6B99 6B9A 6BBC 6BBD 6BBE 6BEF 6BF0 6BF1
6BF2 6BF3 6BF4 6BF5 6BF6 6C2C 6C2D 6C2E 6C2F 6C30
6DFC 6DFE 3D13 3D1D 3D20 3D22 6E03 6E18 6E19 6E1B
6E1C 6E1D 6E1E 6E1F 6E20 6E21 6E22 6E23 6E24 6E25
6E26 6E27 6E28 6E29 6E2A 6E2B 6E2C 6E2D 6E2E 6E2F
6E30 6E31 6E32 6E33 6E34 6E35 6E36 6E37 6E38 6E39
6E3A 6E3B 6E3C 6E3D 6E3E 6E3F 6E40 6E41 6E42 6E43
6E44 6E45 6E46 6E47 6E48 6E49 6E4A 6E4B 6E4C 6E4D
6E4E 6E4F 6E50 6E51 6E52 6E53 6E54 6E55
6E56 6E57 6E58 6E59 6E5A 6E5B 6E5C 6E5D 6E5E 6E5F
6E60 6E61 6E62 6E63 6E64 6E65 6E66 6E67 6E68 6E69
6E6A 6E6B 6E6D 6E6E 6E6F 6E70 6E71 6E72 6E73 6E75
6E76 6E77 6E78 6E79 6E7A 6E7B 6E7C 6E7D 6E7E 6E7F
6E80 6E81 6E82 6E83 6E84 6E85 6E86 6E87 6E88 6E89
6E8A 6E8B 6E8C 6ECB 6EDE 23E11 23E2C 23E2D 23E2E 23E2F
23E30 23E31 23E39 70FB 3DC6 3DC7 3DC9 3DCC 3DCD 7119
711A 711B 711C 711D 711E 711F 7120 7121 7122 7123
7124 7125 7126 7127 7128 7129 712A 712B 712C 712D
712E 712F 7130 7131 7132 7133 7134 7135 7136 7137
7138 7139 713A 713B 713C 713D 713E 713F 7140 716E
24276 24277 24278 24284 24293 24295 242A5 7232 724B 724C
724D 245C8 725A 3E43 7280 7282 7283 7284
7285 7286 7287 7288 7289 728A 728B 24674 7306 730B
730C 7312 732B 7322 7323 7324 7325 7326 7327 7328
7329 732C 732D 732F 7330 7331 7332 7333 7334 7335
7336 7338 7339 247E0 3ED1 3ED6 3EDA 3EDB 73F7 7414
7415 7416 7417 7418 7419 741A 741B 741C 741D 741F
7420 7421 7422 7423 7424 7425 7426 7428 7429 742A
742B 742C 742D 742E 742F 7430 7431 7432 7433 7434
7435 7436 7437 7438 7439 743A 743B 743C 2497B 2497F
24982 24988 24989 2498A 2498B 2498C 2498D 2498E 2498F 24994
249A4 249A7 249A9 249AB 249AC 249AD 74F9 74FA 74FB 74FC
7524 7525 7526 752F 24C09 756A 756B 756C 756D 756E
756F 7572 7573 7574 7571 758E 758F 3F93 3F98 75D7
75D8 75D9 75DA 75DB 75DC 75DD 75DE 75DF
75E0 75E1 75E2 75E3 75E4 75E5 75E6 75E7 75E8 75E9
75EA 75EB 24DB8 767B 767C 7692 7693 7694 7695 7696
76B3 76B4 4003 76D9 76DA 76DC 4039 4040 7742 7743
7744 7745 7746 7747 7748 7749 774A 774B 774C 774D
774E 774F 7750 7751 77DE 77DF 77EC 77ED 785C 785D
785E 785F 7860 7861 7862 7863 7864 7865 7866 7867
7868 7869 786A 786B 786C 786D 786E 786F 7870 7871
7872 7873 7874 7875 7876 7877 4109 7966 7970 7971
7972 7973 7974 7975 7976 7977 7978 7984 25695 79BC
79FF 7A00 7A01 7A02 7A03 7A04 7A05 7A07 7A08 7A09
7A0A 7A0B 7A0C 7A0D 7A0E 257C7 7A96 7A97 7A98 7A99
7A9B 7A9C 7A9D 7AE2 7AE3 7AE4 7AE5 7AE6 7AE7 41ED
41EE 41EF 7B3F 7B40 7B41 7B42 7B43 7B44
7B45 7B46 7B47 7B48 7B49 7B4A 7B4B 7B4C 7B4D 7B4E
7B4F 7B50 7B51 7B52 7B53 7B54 7B55 7B56 7B57 7B58
7B59 7B5A 7B5B 7B5C 7B5D 7B6C 4283 7C9E 7C9F 7CA0
7CA1 7CA2 7CA4 7CA5 7CA6 7CA7 7CA8 7CA9 7CAA 7CAB
7CAC 7CAD 7D2A 7D2B 7D4D 7D4E 7D4F 7D50 7D51 7D52
7D53 7D54 7D55 7D56 7D57 7D58 7D59 7D5A 7D5C 7D5D
7D5E 7D5F 7D60 7D61 7D62 7D63 7D64 7D65 7D66 7D67
7D68 7D69 7D6A 7D6B 7D6C 7D6D 7D6E 7D6F 7D70 7D71
7D72 7D73 7D74 7D75 7D76 7D77 7D7E 433B 7F02 7F03
7F04 7F05 7F06 7F07 7F08 7F09 7F0A 7F0B 7F0C 7F0D
7F0E 7F0F 7F10 7F11 7F12 7F13 7F14 7F15 7F16 7F17
7F18 7F3E 7F3F 7F40 7F64 7F65 7F66 436E 436F 7FA0
7FA1 7FA2 7FD3 7FD4 7FD5 7FD6 7FD7 7FD8
7FD9 7FDA 800B 8020 804E 804F 8050 8051 8052 8053
8054 8060 26572 80D4 80FE 8114 8120 3B39 4400 4401
4402 8139 813A 813B 813C 813D 813E 813F 8140 8141
8142 8143 8144 8145 8146 8147 8148 8149 814A 814B
814C 814D 814E 814F 8151 8152 8153 8154 8155 8156
8157 8158 8159 815A 26716 26741 8174 81E6 81EE 81EF
81F0 26911 81F5 81F6 81F7 81F8 81F9 8203 8204 8212
821C 823C 823D 823E 823F 26A34 8275 44B0 44B7 44C0
8312 833B 8346 839A 83BE 83BF 83C0 83C1 83C2 83C3
83C4 83C5 83C6 83C7 83C8 83C9 83CA 83CB 83CC 83CD
83CE 83CF 83D0 83D1 83D2 83D3 83D4 83D5 83D6 83D7
83D8 83DA 83DB 83DC 83DD 83DE 83DF 83E0 83E1 83E2
83E3 83E4 83E5 83E6 83E7 83E8 83E9 83EA
83EB 83EC 83ED 83EE 83EF 83F0 83F1 83F2 83F3 83F4
83F5 83F6 83F7 83F8 83F9 83FA 83FB 83FC 83FD 83FE
83FF 8400 8401 8402 8403 8404 8405 8406 8407 8408
8409 840A 840B 840C 840D 840E 840F 8410 8411 8412
8413 8414 8415 8416 8417 8418 8419 841A 841B 841C
841D 841E 841F 8420 8421 8422 8423 8424 8426 8427
8457 26C40 26C7E 26C7F 26C80 26C81 26C82 26CA4 26CB7 26CB8
26CBD 26CC0 8438 865B 865D 45AD 45AF 8688 86D0 86D1
86D2 86D3 86D4 86D5 86D7 86D8 86D9 86DA 86DB 86DC
86DD 86DE 86DF 86E0 86E1 86E2 86E3 86E4 86E5 86E6
86E7 86E8 86E9 86EA 86EB 86EC 86ED 86EE 86EF 86F0
86F1 86F2 86F3 86F4 272B2 272B6 8846 8847 8848 8849
8855 8856 8857 88B1 88B2 88B3 88B4 88B5
88B6 88B7 88B8 88B9 88BA 88BB 88BC 88BD 88BE 88BF
88C0 88C1 88C2 88C3 88C4 88C5 88C6 88C7 88C8 88C9
88D7 27694 8901 8983 8984 8999 8995 8997 8998 899A
89CC 89CD 89DA 89DB 89DD 89DE 46CF 46D0 8A34 8A35
8A36 8A37 8A38 8A39 8A3A 8A3B 8A3C 8A3D 8A40 8A41
8A42 8A43 8A44 8A45 8A46 8A47 8A48 8A49 8A4A 8A4B
8A4C 8A4D 8A4E 8A4F 8A50 8A51 8A52 8A53 8A54 8A55
8A56 8A57 8A58 8A59 8A5A 8A5B 8A5C 8A5D 8A5E 8A5F
8A60 279A0 8C1F 8C20 8C21 8C22 8C23 8C24 8C25 8C26
8C27 4748 8C5E 8C5F 8C60 8C61 8C7E 8C7F 8C80 8C81
8C82 8C83 8CAF 8CB0 8CB1 8CB3 8CB4 8CB5 8CB6 8CB7
8CB8 8CB9 8CBA 8CBB 8CBC 8CBD 8CBE 8CBF 8CC0 8CC1
27D53 27D54 8D4B 8D4C 8D4D 8D4E 8D4F 8D50
8D51 8D52 8D53 8D54 8D55 47A1 47A3 8D80 8D81 8D82
8D83 8D84 8D85 8D86 8D87 8D88 8D89 8D8A 8D8B 47ED
8DC5 8DC6 8DC7 8DC8 8DC9 8DCA 8DCB 8DCC 8DCD 8DCE
8DCF 8DD1 8DD2 8DD3 8DD4 8DD5 8DD6 8DD7 8DD8 8DD9
8DDA 8DDB 8DDC 8DDD 8DDE 8DF5 27FF9 28002 28009 8EB0
4852 8EE4 8EE5 8EE6 8EE7 8EE8 8EE9 8EEA 8EEB 8EEC
8EEE 8EEF 8EF0 8EF1 8EF2 8EF3 8EF4 8EF5 8EF6 8EF7
8EF8 8EF9 8EFA 8EFB 8EFC 8EFD 282E2 8F87 8F88 8F89
8F8A 8F8B 8F8C 8F8D 8F8E 8F9C 8F9D 28412 9028 9029
902A 902B 902C 902D 902E 902F 9030 9031 9032 9033
9034 9035 9036 9037 9038 9039 903A 903B 2853C 2853D
90F5 48D0 90F9 90FB 90FC 90FE 90FF 9100 9101 9102
9103 9104 9105 9106 9107 9108 9109 910A
912C 48F3 915F 9160 9161 9162 9163 9164 9165 91C9
91CA 91CF 491E 4920 91FD 91FE 91FF 9200 9201 9202
9203 9204 9205 9206 9207 9208 9209 920A 920B 920C
920D 920E 920F 9210 9211 9212 9213 9214 9215 9216
9217 9218 9219 921A 921B 921C 921D 921E 921F 9220
9221 9222 9223 9224 9225 9226 9227 9228 9229 922A
922B 922C 28956 28964 94F8 94F9 94FA 94FB 94FC 94FD
94FE 94FF 9500 9501 9502 9503 9504 9505 9506 9507
9508 9509 950A 950B 950C 950D 950E 950F 9510 9511
9512 9513 9514 9515 957B 958B 958C 958D 958E 958F
9590 9591 9592 9593 9594 9595 9596 9597 9611 9612
9613 9614 9615 9672 967B 967D 967E 967F 9680 9681
9682 9683 9684 9685 9686 9687 9688 9689
968A 968B 968C 968D 968E 9690 28ED9 28EE7 96C1 96C2
96C3 96C4 96C5 96C6 96C7 96C8 96EC 96ED 96EE 96EF
96F0 96F1 96F2 96F3 29088 2908B 9753 9754 975F 976B
976C 976D 976E 976F 9770 9771 97CC 97E9 9805 9806
9807 9808 9889 988A 988B 988C 988D 988E 988F 98A9
98AA 2959E 98D3 98E7 98E8 98E9 98EA 98EB 98ED 98EF
98F0 98F2 9987 9988 998A 998B 99AD 99AE 9A97 9A98
9A99 9A9A 9A9B 9AA9 9AE0 9C7F 9C80 9C81 9C82 9C83
9CE6 9E40 9E41 9E42 9E43 9E44 9E45 9E46 9E47 9E48
9EC3 9EC4 9ECD 9ED1 9EF9 9F0B 9F82
FDD0-280D
4E82 4E83 4E84 4EB6 4EB7 347D 347E 50AA 50AB 50AC
50AD 50AE 50AF 50B0 50B1 50B2 50B3 50B4 50B5 50B6
50B7 50B8 50B9 50BA 50BB 50BC 50BD 50BE 50BF 50C0
50C1 50C2 50C3 50C4 50C5 50C6 50C7 50C8 50C9 50CA
50CB 50CC 50CD 20341 20345 20346 20347 203B5 5161 517E
517F 51D7 5277 5278 5279 527A 527B 527C 527D 527E
527F 52DF 52E0 52E1 52E2 52E3 52E4 52E5 52E6 52E7
3532 3533 3534 532F 5380 5381 53AA 53AB 53AF 53E0
FA0E 35D2 35D6 35DB 35DD 35E0 558D 55BF 55C0 55C1
55C2 55C3 55C4 55C5 55C6 55C7 55C8 55C9 55CA 55CB
55CC 55CD 55CE 55CF 55D0 55D1 55D2 55D3 55D4 55D5
55D6 55D7 55D8 55D9 55DA 55DB 55DC 55DD 55DF 55E0
55E1 55E2 55E3 55E4 55E5 55E6 55E7 55E8
55E9 55EA 55EB 55EC 55ED 55EE 55EF 55F0 55F1 55F2
55F3 55F4 55F5 20E4C 20E6D 20E73 20E75 20E76 20E77 20E78
20E79 20E7A 20E7B 20E8C 20E96 20E98 20E9D 20EA2 20EAA 20EAB
20EAC 20EB6 5711 5712 5713 5714 5715 365F 583D 5843
5849 584A 584B 584C 584D 584E 584F 5850 5851 5852
5853 5854 5855 5856 5857 5858 5859 585A 585B 585C
585D 585E 585F 5860 5861 5862 5863 5864 5865 5866
5867 5868 5869 586A 586B 586C 586D 586E 586F 5870
5871 213C5 213C6 58FC 5966 5967 5968 21661 3708 370A
370D 5A90 5AB0 5AB1 5AB2 5AB3 5AB4 5AB5 5AB6 5AB7
5AB8 5AB9 5ABA 5ABB 5ABC 5ABD 5ABE 5ABF 5AC0 5AC1
5AC2 5AC3 5AC4 5AC5 5AC6 5AC7 5AC8 5AC9 5ACA 5ACB
5ACC 5ACD 5ACE 5AD0 5AD1 5AD2 5AD3 5AD4
217EF 217F5 217F6 217F8 217F9 217FA 217FB 217FC 5B74 21983
21988 5B76 3766 5BD6 5BD7 5BD8 5BD9 5BDA 5BDB 5BDC
5BDD 5C1F 5C20 5C32 5C33 5C34 21CAC 37F2 37F8 5D4A
5D5E 5D5F 5D60 5D61 5D62 5D63 5D64 5D65 5D66 5D67
5D68 5D69 5D6A 5D6C 5D6D 5D6E 5D6F 5D70 5D71 5D72
5D73 5D74 5D75 5D76 21EC8 21ED5 5DF0 5E4A 5E4B 5E4C
5E4D 5E4E 5E4F 5E79 5EC5 5EC6 5EC7 5EC8 5EC9 5ECB
5ECC 2227C 5F12 5F3F 5F40 5F41 5F42 5F59 5F5A 22465
5F6E 5FAC 5FAD 5FAE 5FAF 5FB0 3963 3964 3966 60F3
60F7 60F9 6101 6102 6106 6108 610D 610F 6117 6119
611A 611B 611F 6127 6129 612A 612B 612D 612E 612F
6130 6131 6132 6134 6135 6136 6137 6139 613A 613C
613D 613E 6140 6143 6144 6145 6146 6149
614A 614C 614D 614E 614F 6151 227B4 227B5 227CD 6226
6220 6221 6222 6223 6224 6225 63E7 63EB 63F1 3A20
3A23 3A26 3A29 3A2A 6406 6407 6408 6409 640A 640B
640C 640D 640E 640F 6410 6411 6412 6413 6414 6415
6416 6417 6418 6419 641A 641B 641C 641D 641E 641F
6420 6421 6422 6423 6424 6425 6426 6427 6428 6429
642A 642C 642D 642E 642F 6430 6432 6433 6435 6436
6437 6438 6439 643A 643C 643D 643E 6440 6441 6442
6443 6444 6445 6446 6447 6448 6449 644A 22C62 22C88
22C9B 22CA1 22CA9 22CB2 63C5 6431 656D 656B 656C 656E
656F 6570 6592 295B0 659F 65B0 65D2 65D3 65D4 65D5
65E4 6678 3B01 3B02 3B03 3B04 3B05 3B06 3B07 3B08
3B09 3B0A 3B0B 3B0C 6684 6685 6686 6687
6688 6689 668A 668B 668C 668D 668E 668F 6690 6692
6693 6694 6695 6696 6697 6698 6699 23225 2322F 23231
23232 23233 23234 6703 6720 6721 3B96 3B99 692F 6930
6931 6932 6933 6934 6935 6936 6937 6938 6939 693A
693B 693C 693D 693E 693F 6940 6941 6942 6943 6944
6945 6946 6947 6948 6949 694A 694B 694C 694D 694E
694F 6950 6951 6952 6953 6954 6955 6957 6958 6959
695A 695B 695C 695D 695E 695F 6960 6961 6962 6963
6964 6965 6966 6967 6968 6969 696A 696B 696C 696D
696F 6971 6972 6973 6974 6975 6976 6977 6978 6979
697A 697B 697C 697D 697E 697F 6980 6981 6982 6983
6984 6985 6986 6987 6988 6989 698B 698C 6994 6998
FA13 2355A 23567 23595 23599 2359C 3C3C 3C3E
6B40 6B41 6B42 6B43 6B44 6B45 6B46 6B47 6B48 6B71
6B72 6B73 3C6E 6B9B 6B9C 6BBF 6BC0 6BC1 6BC2 23AA7
6BD3 6BF7 6BF8 6BF9 6BFA 6BFB 6BFC 6BFD 6C31 6E6C
3D26 3D32 3D33 3D3B 6E8D 6E8E 6E8F 6E90 6E91 6E92
6E93 6E94 6E95 6E96 6E97 6E98 6E99 6E9A 6E9B 6E9C
6E9D 6E9E 6E9F 6EA0 6EA1 6EA2 6EA3 6EA4 6EA5 6EA6
6EA7 6EA8 6EA9 6EAA 6EAB 6EAC 6EAD 6EAE 6EAF 6EB0
6EB1 6EB2 6EB3 6EB4 6EB5 6EB6 6EB7 6EB8 6EB9 6EBA
6EBB 6EBC 6EBD 6EBE 6EBF 6EC0 6EC1 6EC2 6EC3 6EC4
6EC5 6EC6 6EC7 6EC8 6EC9 6ECA 6ECD 6ECF 6ED0 6ED1
6ED2 6ED3 6ED4 6ED6 6ED7 6ED8 6ED9 6EDB 6EDC 6EDD
6EDF 6EE0 6EE1 6EE2 6EE3 6EE4 6EE5 6EE6 6EE7 6EE8
6EE9 6EEA 6F13 23E88 23E89 23E8A 23E8B 23EB9
23EBF 6EDA 3BA1 3DD3 3DDB 7141 7142 7143 7144 7145
7146 7147 7148 7149 714A 714B 714C 714D 714E 714F
7150 7151 7152 7153 7154 7156 7157 7158 7159 715A
715C 715D 715E 715F 7160 7161 7162 7163 7164 7165
7166 7167 7168 7169 716A 716B 716C 716D 716F 7170
7171 7172 7173 7174 7175 7176 7177 7178 717A 242C1
242C9 242CA 242EE 242FA 24521 723A 7243 724E 724F 7250
7251 7252 3E48 728C 728D 728E 728F 7290 7291 24697
732E 7337 7341 733A 733B 733C 733D 733E 733F 7340
7342 7345 7346 7347 7348 7349 734A 24812 24823 3ED7
7427 3EDE 3EE1 3EE2 741E 743D 743E 743F 7440 7441
7442 7443 7444 7445 7446 7447 7448 7449 744A 744B
744C 744D 744E 744F 7450 7451 7452 7453
7454 7455 7456 7457 7458 7459 745A 745B 745C 745D
745E 745F 249B7 249B8 249B9 249BA 249BB 249C5 249D0 249DA
249DE 249DF 249E3 249E5 746F 74E1 74FD 74FE 74FF 7501
751D 751E 3F63 7575 7576 7577 7578 7579 757A 24C9E
24C9F 75EC 75ED 75EE 75EF 75F0 75F1 75F2 75F3 75F4
75F5 75F6 75F7 75F8 75F9 75FA 75FB 75FC 75FD 75FE
75FF 7600 7601 7602 7603 7604 7605 7606 24DEA 24DEB
760F 7610 7697 7698 7699 24F82 24F86 76B5 4004 76DD
76DE 76DF 4045 7752 7753 7754 7755 7756 7757 7758
7759 775A 775B 775C 775D 775E 775F 7760 7762 7763
7764 7765 7766 7767 7768 7769 776A 776B 776C 776D
251CD 251E3 251E6 251E7 7761 7779 77E0 77EE 40BB 40BF
7878 7879 787A 787B 787C 787D 787F 7880
7881 7882 7883 7884 7885 7886 7887 7888 7889 788A
788B 788C 788D 788E 788F 7890 7891 7892 7893 7894
7895 7896 7897 7898 7899 789A 789B 789C 78B0 410E
7979 797A 797B 797C 797D 797E 797F 7980 7981 7982
7983 7985 7986 79BD 842C 7A0F 7A10 7A11 7A12 7A13
7A14 7A15 7A16 7A17 7A18 7A19 7A1A 7A1B 7A1C 7A1D
7A1E 7A1F 7A20 7A21 7A22 7A23 7A24 7A25 257DF 257E0
257E1 7A9E 7A9F 7AA0 7AA1 7AA2 7AA3 7AA4 7AA5 7AA6
7AA7 259AC 41CF 7AE8 7AE9 7AEA 7AEB 25A95 41F8 41F9
41FB 41FC 41FD 41FE 41FF 4200 7B5E 7B5F 7B60 7B61
7B62 7B63 7B64 7B65 7B66 7B67 7B68 7B69 7B6A 7B6B
7B6D 7B6E 7B6F 7B70 7B71 7B72 7B73 7B74 7B76 7B77
7B78 7B79 7B7A 7B7B 7B7C 7B7D 7B7E 7B7F
7B80 7BC0 25B74 25B89 428C 7CAE 7CAF 7CB0 7CB1 7CB2
7CB3 7CB4 7CB5 7CC0 25E81 25E82 25E83 7D5B 7D78 7D79
7D7A 7D7B 7D7C 7D7D 7D7F 7D80 7D81 7D82 7D83 7D84
7D85 7D86 7D87 7D88 7D89 7D8A 7D8B 7D8C 7D8D 7D8E
7D8F 7D90 7D91 7D92 7D93 7D94 7D95 7D97 7D98 7D99
7D9A 7D9B 26029 7F19 7F1A 7F1B 7F1C 7F1D 7F1E 7F1F
7F20 7F21 7F22 7F23 7F24 7F67 7F68 7F69 7F6A 7F6B
7F6C 7F6D 7F6E 7F72 262D0 7FA3 7FA4 7FA5 7FA6 7FA7
7FA8 7FA9 7FAA 7FDB 7FDC 7FDD 8021 8022 8055 8056
8057 8058 8084 8085 8086 4413 5E50 815B 815C 815D
815E 815F 8160 8161 8162 8163 8164 8165 8166 8167
8168 8169 816A 816B 816C 816D 816E 816F 8170 8171
8172 8173 8175 8176 8177 8178 8179 817A
817B 817C 817D 817E 8205 821D 8240 8241 8242 8243
8244 8245 8246 8247 8248 8249 26A42 44C5 44CE 83BB
83D9 8425 8428 8429 842A 842B 842D 842E 842F 8430
8431 8432 8433 8434 8435 8436 8437 8439 843A 843B
843C 843D 843E 843F 8440 8441 8442 8443 8444 8445
8446 8447 8448 8449 844A 844B 844C 844D 844E 844F
8450 8451 8452 8453 8454 8455 8456 8458 8459 845A
845B 845C 845D 845E 845F 8460 8461 8462 8463 8464
8465 8466 8467 8468 8469 846A 846B 846C 846D 846E
846F 8470 8471 8472 8473 8474 8475 8476 8477 8478
8479 847A 847B 847C 847D 847E 847F 8480 8481 8482
8483 8484 8485 8486 8487 8488 8489 848B 848C 848D
848E 848F 26CC3 26CD1 26D22 26D23 26D24 26D25
26D26 26D27 26D28 26D29 26D2A 26D51 84C5 84C8 84F1 8507
865C 865E 865F 86D6 86F5 86F6 86F7 86F8 86F9 86FA
86FB 86FC 86FD 86FE 86FF 8700 8701 8702 8703 8704
8705 8706 8707 8708 8709 870A 870B 870C 870D 870E
870F 8710 8713 8714 8715 8716 8717 8746 272E6 874D
8858 8859 88CA 88CB 88CC 88CD 88CE 88CF 88D0 88D1
88D2 88D3 88D4 88D5 88D6 88D8 88D9 88DA 88DB 88DC
88DD 88DE 88DF 88E0 88E1 88E3 88E4 88E5 8985 4680
899B 899C 89CE 89DC 89DF 89E0 89E1 89E2 89E3 89E4
89E5 89E6 89E7 8A3E 8A3F 8A61 8A62 8A63 8A64 8A65
8A66 8A67 8A68 8A69 8A6A 8A6B 8A6C 8A6D 8A6E 8A6F
8A70 8A71 8A72 8A73 8A74 8A75 8A76 8A77 8A78 8A79
8A7A 8A7B 8A7C 8A7D 8A7E 8A7F 8A80 8A81
8A82 8A83 8A84 8A85 8A86 8A87 8A88 8A89 8A8A 8AA0
279DD 8C28 8C29 8C2A 8C2B 8C2C 8C3C 8C4A 8C4B 8C62
8C63 8C64 8C65 8C66 8C84 8C85 8C86 8C87 8C88 8C89
8C8A 8CB2 8CC2 8CC3 8CC4 8CC5 8CC6 8CC7 8CC8 8CC9
8CCA 8CCB 8CCC 8CCD 8CCE 27D66 27D73 27D84 8D56 8D57
8D68 8D69 8D6A 47A6 8D8C 8D8D 8D8E 8D8F 8D90 8D91
8D92 8D93 8D94 8DD0 8DBC 8DDF 8DE0 8DE1 8DE2 8DE3
8DE4 8DE5 8DE6 8DE7 8DE8 8DE9 8DEA 8DEB 8DEC 8DED
8DEE 8DEF 8DF0 8DF1 8DF2 8DF3 8DF4 8DF6 8DF7 8DF8
8DF9 8DFA 8DFB 2801E 28023 28024 4837 8EB1 8EB2 8EED
8EFE 8EFF 8F00 8F01 8F02 8F03 8F04 8F05 8F06 8F07
8F08 8F09 8F0A 8F0B 8F0C 8F8F 8F90 8F91 8F92 8F93
8F94 8F9E 8F9F 8FA0 8FB2 903C 903D 903E
903F 9040 9041 9042 9043 9044 9045 9046 9047 9048
9049 904A 904B 904C 904D 904E 904F 9050 9051 9052
9053 9054 9055 9056 9057 2856C 90CC 910B 910C 910D
910E 910F 9110 9111 9112 9113 9114 9115 9116 9117
9166 9167 9168 9169 916A 916B 916C 916D 916E 916F
9170 9171 2882B 922E 922F 9230 9231 9232 9233 9234
9235 9236 9237 9238 9239 923A 923B 923C 923D 923E
923F 9240 9241 9242 9243 9244 9245 9246 9247 9248
9249 924A 924B 924C 924D 924E 924F 9250 9251 9252
9253 9254 9255 9256 9257 9258 9259 925A 925B 925C
925D 925E 925F 9260 9261 9262 9263 9264 9265 9266
9267 9268 9269 926A 926B 926C 926D 926E 926F 9270
9271 9272 9273 9274 928F 28968 2896C 2897E
9516 9517 9518 9519 951A 951B 951C 951D 951E 951F
9520 9521 9522 9523 9524 9525 9526 9527 9528 9529
952A 952B 952C 952D 952E 952F 9530 9531 4989 9598
9599 959A 959B 959C 959D 959E 959F 95A0 9616 9617
9618 9619 968F 49DF 9691 9692 9693 9694 9695 9696
9697 9698 FA29 96C9 96CA 96CB 96CD 96CE 96CF 96F4
96F5 96F6 96F7 96F8 96F9 96FA 96FB 96FC 96FD 96FE
29093 9755 9756 9772 9773 9774 9775 9776 9777 9778
9779 97EA 97EB 97EE 97F4 97F5 9809 4AB4 980A 980B
980C 980D 980E 980F 9810 9811 9812 9813 9890 9891
9892 9893 9894 9895 9896 98AB 98AC 98D4 4B26 98EC
98EE 98F1 98F3 98F4 98F5 98F6 98F7 98F9 98FB 98FC
98FD 98FE 98FF 9989 998C 998D 998E 998F
9990 999A 99AF 99B0 99B1 99B2 99B3 99B4 99B5 9A9C
9A9D 9A9E 9A9F 9AAA 9AAB 9AAC 9AAD 9AAE 29A28 9AE1
9AE2 9B3D 9B5B 9B5C 9B5D 9B5E 9C84 9C85 9C86 9C87
9C88 9C89 9C8A 9C8B 9C8C 9C8D 9C8E 9C8F 9C90 9CE7
9CE8 9CE9 9CEA 9CEB 9CED 9CEE 9CEF 9CF0 9E49 9E4A
9E4B 9E4C 9E4D 9E4E 9E4F 9E50 9E51 9E52 9E53 9E54
9E80 9E81 9E82 2A2FF 9EFD 9F0C 9F0E 9F13 9F14 9F20
9F83 9F84 9F85 9F86
FDD0-280E
2004E 221A1 50CE 50CF 50D0 50D1 50D2 50D3 50D4 50D5
50D6 50D7 50D8 50D9 50DA 50DB 50DC 50DD 50DE 50DF
50E0 50E1 50E2 50E3 50E4 50E5 50E6 50E7 50E8 50E9
50EA 50EB 50EC 50ED 50EE 50EF 50F0 50F1 50F3 50F4
50F7 2037E 2037F 20380 203A0 203A7 50F2 5162 51A9 51D8
51F3 51F4 3500 3504 3506 5280 5281 5282 5283 5284
3522 52E8 52E9 52EA 52EB 52EC 52ED 3535 5330 5331
5332 3551 53AC 53AD 53AE 53B0 53C6 20B0D 3561 55F6
55F7 55F8 55F9 55FA 55FB 55FC 55FD 55FE 55FF 5600
5601 5602 5603 5604 5605 5606 5607 5608 5609 560A
560B 560C 560D 560E 560F 5610 5611 5612 5613 5614
5615 5616 5617 5618 5619 561A 561B 561C 561D 561E
5621 5622 5623 5624 5625 5626 5627 5651
20ED7 20ED8 20EDD 20EF8 20EF9 20EFA 20EFB 20F1D 20F26 20F2D
20F2E 20F30 20F31 20F3B 20F4C 561F 5628 5716 5717 5718
5719 3665 3666 5872 5873 5874 5875 5876 5877 5878
5879 587A 587B 587C 587D 587E 587F 5881 5882 5883
5884 5885 5886 5887 5888 5889 588A 588B 588C 588D
588E 588F 5890 5891 5892 5893 5894 5895 5896 5897
5898 5899 589A 589B 213ED 213FE 21413 21416 58AD 58FD
58FE 5910 5922 5923 5924 5925 5969 596A 596B 596C
371C 371E 3720 3722 5AD5 5AD6 5AD7 5AD8 5AD9 5ADA
5ADB 5ADC 5ADD 5ADE 5ADF 5AE0 5AE1 5AE2 5AE3 5AE4
5AE5 5AE6 5AE7 5AE8 5AE9 5AEA 5AEB 5AEC 5AED 5AEE
5AEF 5AF0 5AF1 5AF2 21820 21828 21829 2182A 2182D 21839
2183A 2183B 21840 21845 5AF3 5B75 5B77 21996
5BDE 5BDF 5BE0 5BE1 5BE2 5BE3 5BE4 5BE5 5BE6 5BE7
5BE8 5C0D 5C21 5C62 5C63 37FB 3800 3801 3804 5D77
5D78 5D79 5D7A 5D7B 5D7C 5D7D 5D7E 5D7F 5D80 5D81
5D82 5D83 5D84 5D85 5D86 5D87 5D88 5D89 5D8A 5D8B
5D8C 5D8D 5D8E 5E51 5E52 5E53 5E54 5E55 5E56 5E57
5E58 5E59 5E5B 2212A 5E63 5ECD 5ECE 5ECF 5ED0 5ED1
5ED2 5ED3 5ED4 5ED5 5ED6 5ED7 5ED8 5ED9 5EDC 5F0A
38C3 5F43 5F44 5F45 5F46 38D1 5F6F 5F70 5FB1 5FB3
5FB4 22554 5FB6 6128 612C 6133 6138 613B 613F 6141
6142 6147 6148 614B 6150 3980 6152 6153 6154 6156
6158 615A 615B 615E 615F 6160 6161 6162 6163 6165
6169 616A 616C 616F 6171 6172 6173 6174 6175 6177
617A 617B 617D 6180 6181 6186 6188 22803
6227 6228 6229 622A 622B 622C 642B 6434 643B 643F
3A2F 3A31 3A32 3A33 3A34 3A35 3A36 3A37 3A38 3A39
644B 644C 644D 644E 644F 6450 6451 6453 6454 6455
6457 6458 6459 645A 645B 645C 645D 645E 645F 6460
6462 6463 6464 6465 6466 6467 646A 646B 646C 646D
6471 6472 6473 6474 6475 6476 6477 6478 647A 647B
647C 647D 647E 647F 6481 6482 6484 6487 22CB7 22CC2
22CC6 22CC9 22D07 22D08 22D12 6456 64A6 6571 6572 6573
65A0 65A1 65B2 230B7 65D6 65D7 3B0D 3B0E 3B0F 3B10
669A 669B 669C 669D 669E 669F 66A0 66A1 66A2 66A3
66A4 66A5 66A6 66A7 66A8 23262 6704 6705 3B3A 3B3B
6722 3BBC 698A 698D 698E 698F 6990 6991 6992 6993
6995 6996 6997 6999 699A 699B 699C 699D
699E 699F 69A0 69A1 69A2 69A3 69A4 69A5 69A6 69A7
69A8 69A9 69AA 69AB 69AC 69AD 69AE 69AF 69B0 69B1
69B2 69B3 69B4 69B5 69B6 69B7 69B8 69B9 69BA 69BB
69BC 69BD 69BE 69BF 69C0 69C1 69C2 69C3 69C4 69C5
69C6 69C7 69C8 69C9 69CA 69CB 69CC 69CD 69CE 69CF
69D0 69D1 69D2 69D3 69D4 69D5 69D6 69D7 69D8 69D9
69DA 69DB 69DC 69DD 69DE 69DF 69E0 69E1 6A2E FA14
235CD 235CE 235CF 235F3 23600 6A03 6B49 6B4A 6B4B 6B4C
6B4D 6B70 6B74 6B9D 6B9E 6B9F 6BA0 6BA1 6BC3 6BC4
23AFA 6BFE 6C32 6C33 6ECE 3D3D 3D46 6ECC 6EEB 6EEC
6EED 6EEE 6EEF 6EF0 6EF1 6EF2 6EF3 6EF4 6EF5 6EF6
6EF7 6EF8 6EF9 6EFA 6EFB 6EFC 6EFD 6EFE 6EFF 6F01
6F02 6F03 6F04 6F05 6F06 6F07 6F08 6F09
6F0A 6F0C 6F0D 6F0E 6F0F 6F11 6F12 6F14 6F15 6F16
6F17 6F18 6F19 6F1A 6F1B 6F1C 6F1D 6F1E 6F1F 6F20
6F21 6F22 6F23 6F24 6F25 6F27 6F28 6F29 6F2A 6F2B
6F2C 6F2D 6F2E 6F2F 6F30 6F31 6F32 6F33 6F34 6F35
6F36 6F37 6F38 6F39 6F3A 6F3B 6F3C 6F3E 6F40 6F42
6F43 6F44 6F45 6F46 6F47 6F48 6F49 6F4A 6F4B 6F4C
6F4D 23ED7 23EF7 23EF8 23EF9 23EFA 23EFB 23EFC 23F35 23F41
6F4E 6F73 7155 715B 3DE7 3DE8 7179 717B 717C 717D
717E 717F 7180 7181 7182 7183 7184 7185 7186 7187
7188 7189 718A 718B 718C 718D 718E 718F 7190 7191
7192 7193 7194 7195 7196 7197 7198 7199 84B8 2430D
2431A 24334 24348 7233 723E 7244 3E22 7253 7254 7292
7293 7294 7295 7296 7297 7353 7343 7344
734C 734D 734F 7350 7351 7352 7354 7355 3EE7 3EE9
7460 7461 7462 7463 7464 7465 7466 7467 7468 746A
746B 746D 746E 7470 7471 7472 7473 7474 7475 7476
7477 7478 249EC 249ED 249F6 249F7 249F8 249F9 249FB 24A0E
24A12 24A13 7500 7502 7503 7504 7505 7506 24B6E 7527
757B 757C 757D 7590 7591 7607 7608 7609 760A 760B
760C 760D 760E 7611 7612 7613 7614 7615 7616 7617
7618 7627 76B6 76B7 76B8 76B9 76E0 76E1 76E2 76E3
4053 776E 776F 7770 7771 7772 7773 7774 7775 7776
7777 7778 777A 777B 777C 777D 777E 777F 7780 7781
7782 7783 7784 7785 7786 25220 25221 40C8 787E 789D
789E 789F 78A0 78A1 78A2 78A3 78A4 78A5 78A6 78A7
78A8 78A9 78AA 78AB 78AC 78AD 78AE 78AF
78B1 78B2 78B3 78B4 78B5 78B6 78B7 78B8 78B9 78C1
7987 7988 7989 798A 798B 798C 798D 798E 798F 7990
7991 7992 7993 7994 7995 7996 7997 7998 7999 4167
7A26 7A27 7A28 7A29 7A2A 7A2B 7A2C 7A2D 7A2E 7A2F
7A30 7A31 7A32 7A33 7A4A 7A35 7AA8 7AA9 7AAA 7AAB
7AAC 7AAD 259CC 7AEC 7AED 7AEF 7AF0 25A9C 7AEE 7B75
4201 4202 4203 4204 4205 4206 4207 4208 4209 420A
420B 420C 420D 7B81 7B82 7B83 7B84 7B85 7B86 7B87
7B88 7B89 7B8A 7B8B 7B8C 7B8D 7B8E 7B8F 7B90 7B91
7B92 7B93 7B94 7B95 7B96 7B97 7B98 7B99 7B9A 7B9B
7B9C 7B9D 7B9E 7B9F 7BA0 7BA1 7BA2 7BA3 7BA4 7BA5
7BA6 7BA7 7BA8 7BA9 7BAA 7BAB 25BB3 25BB4 25BC6 7BB8
7CB6 7CB7 7CB8 7CB9 7CBA 7CBB 7CBC 7CBD
7CBE 7CBF 7CC1 25EA6 25EBC 7D96 7DD0 42E8 42E9 42EC
42ED 42F1 7D9C 7D9D 7D9E 7D9F 7DA0 7DA1 7DA2 7DA3
7DA4 7DA5 7DA6 7DA7 7DA8 7DA9 7DAA 7DAB 7DAC 7DAD
7DAE 7DAF 7DB0 7DB1 7DB2 7DB3 7DB4 7DB5 7DB6 7DB7
7DB8 7DB9 7DBA 7DBB 7DBC 7DBD 7DBE 7DBF 7DC0 7DC1
7DC2 7DC3 7DC4 7DC5 7DC6 7DC7 7DC8 7DC9 7DCA 7DCB
7DCC 7DCD 7DCE 7DCF 7DD1 7DD2 7DD4 7DD5 26048 26064
7F25 7F26 7F27 7F28 7F29 7F2A 7F2B 7F41 7F42 7F6F
7F70 7F71 7F73 7F74 7FAB 7FDE 7FDF 7FE0 7FE1 7FE2
7FE3 7FE4 2644A 7FE5 8023 8024 8025 43BA 8059 805A
805B 805C 805D 805E 805F 8061 8062 8063 265A0 8087
8088 8150 4420 4425 4426 817F 8180 8181 8182 8183
8184 8185 8186 8187 8188 8189 818A 818B
818C 818D 818E 818F 8191 26799 267B3 267B4 267CC 81E7
81FA 8207 8213 8214 8215 821E 824A 824B 824C 824D
26A51 26A52 44DD 44DF 44E4 44E9 44EA 44EB 44EC 8490
8491 8492 8493 8494 8495 8496 8497 8498 8499 849A
849B 849C 849D 849E 849F 84A0 84A1 84A2 84A3 84A4
84A5 84A6 84A7 84A8 84A9 84AA 84AB 84AC 84AD 84AE
84AF 84B0 84B1 84B2 84B3 84B4 84B5 84B6 84B7 84B9
84BA 84BB 84BC 84BD 84BE 84BF 84C0 84C1 84C2 84C3
84C4 84C6 84C7 84C9 84CA 84CB 84CC 84CD 84CE 84CF
84D0 84D1 84D2 84D3 84D4 84D5 84D6 84D7 84D8 84D9
84DA 84DB 84DC 84DD 84DF 84E1 84E2 84E3 84E4 84E6
26D74 26DA0 26DA1 26DA2 26DA3 26DA4 26DA5 26DA6 26DA7 26DAE
26DDC 26DEA 26DEB 26DF0 84E5 8660 8661 271CD
8711 8712 872B 8718 8719 871A 871B 871C 871D 871E
871F 8720 8721 8722 8723 8724 8725 8726 8727 8728
8729 872A 872C 872D 872E 872F 8730 8731 8732 8733
8734 8735 8736 8737 8738 8739 873A 873B 873C 873D
873E 873F 8740 8741 8742 8743 8744 8745 8747 8748
8749 874A 874B 8755 876B 88E2 463B 88E7 88E8 88E9
88EA 88EB 88EC 88ED 88EE 88EF 88F0 88F1 88F2 88F3
88F4 88F5 88F6 88F7 88F8 88F9 88FA 88FB 88FC 88FD
88FE 88FF 8900 8902 8903 8904 891A 899D 899E 899F
89A0 89A1 89CF 89E8 89E9 89EA 89EB 8A8B 8A8C 8A8D
8A8E 8A8F 8A90 8A91 8A92 8A93 8A94 8A96 8A97 8A98
8A99 8A9A 8A9B 8A9C 8A9D 8A9E 8A9F 8AA1 8AA2 8AA3
8AA4 8AA5 8AA6 8AA7 8AA8 8AA9 8AAA 8AAB
8AAC 8AAD 8AAE 279FD 27A0A 27A0E 8C2D 8C2E 8C2F 8C30
8C31 8C32 8C3D 8C67 8C68 8C69 8C6A 8C8B 8C8C 8C8D
3562 8CCF 8CD0 8CD1 8CD2 8CD3 8CD4 8CD5 8CD6 8CD7
8CD8 27D8F 27D98 8D58 8D59 8D5A 8D5B 8D6B 8D95 8D96
8D97 8D98 8D99 8D9A 47F4 8DFC 8DFD 8DFE 8DFF 8E00
8E01 8E02 8E03 8E04 8E05 8E06 8E07 8E08 8E09 8E0A
8E0B 8E0C 8E0D 8E0E 28048 8EB3 8EB4 8EB5 8F0D 8F0E
8F0F 8F10 8F11 8F12 8F13 8F14 8F15 28306 28318 8F95
8F96 8F97 8FA1 8FA2 8FA3 9058 9059 905A 905B 905C
905D 905E 905F 9060 9061 9062 9063 9064 9065 90D2
9118 9119 911A 911B 911C 911D 911E 911F 9120 9121
9122 9123 9124 9125 48FA 9172 9173 9174 9175 9176
9177 9178 9179 917A 917B 917C 917D 917E
917F 922D 4924 4925 4926 492A 9275 9276 9277 9278
9279 927A 927B 927D 927E 927F 9280 9281 9282 9283
9284 9285 9286 9287 9288 9289 928A 928B 928C 928D
928E 9290 9291 9292 9293 9294 9295 9296 9297 9298
9299 929A 929B 929C 929D 929E 929F 92A0 92A1 92A2
92A3 92A4 92A5 92A6 92A7 92A8 92A9 92AA 92AB 92AC
92AD 92AE 92AF 92B0 92B1 28989 289A8 289AA 289AB 92EE
927C 9532 9533 9534 9535 9536 9537 9538 9539 953A
953B 953C 953D 953E 953F 9540 9541 9542 9543 9544
9545 95A1 95A2 95A3 95A4 95A5 95A6 95A7 95A8 95A9
95AA 961A 9699 969A 969B 969C 969D 969E 969F 96A0
96A1 96CC 96D0 96D1 96D2 28FC5 4A0F 96FF 9700 9701
290AF 290B0 290B1 9757 9758 9759 9764 977A
977B 977C 977D 977E 977F 9780 9781 9782 9783 9784
9785 9786 97CD 97CE 97EC 97F6 97F7 2941D 9819 4AB8
9814 9815 9816 9817 9818 981A 9897 4AFF 4B00 98AD
98AE 98AF 98B0 98B1 295B8 98D6 98D5 98D7 4B2C 98F8
9900 9901 9902 9903 9904 9905 9906 9907 9909 990C
990E 990F 9991 9992 4B6F 999B 999C 999D 4B7B 4B7E
99B6 99B7 99B8 99B9 99BA 99BB 99BC 99BD 99BE 99BF
99C0 99C1 99C2 99C3 99C4 99C5 99C6 99C7 9AA0 9AA1
9AA2 4BC8 9AAF 9AB0 9AB1 9ADA 9AE3 9AE4 9AE5 9AE6
9AE7 9AE8 9AE9 9AEA 29B05 29B0E 9B26 9B3E 9B3F 9B40
9B41 9B42 29CAD 9B5F 9B60 9B61 9B62 29D5A 9C91 9C92
9C93 9C94 9C95 9C96 9C97 9C98 9C99 9C9A 9C9B 9C9C
9C9D 9C9E 9C9F 9CF1 9CF2 9CF3 9CF4 9CF5
9CF6 9E55 9E56 9E57 9E59 9E5A 9E5B 9E5C 9EA7 9EBC
9EBD 9F3B 9F4A 9F87 9F88
FDD0-280F
3493 3496 3498 50F5 50F6 50F8 50F9 50FA 50FB 50FC
50FD 50FE 50FF 5100 5101 5102 5103 5104 5105 5106
5107 5108 5109 510A 510B 510C 510D 510E 510F 203C9
203CB 5130 51D9 51DA 51DB 51DC 20611 5285 5286 5287
5288 5289 528A 528B 528C 528D 528E 528F 52EE 52EF
52F0 52F1 52F2 5314 5333 53B1 53B2 20AB4 3559 53C7
5653 35F1 35F2 35F3 5620 5629 562A 562B 562C 562D
562E 562F 5630 5631 5632 5633 5634 5635 5636 5637
5638 5639 563A 563B 563C 563D 563E 563F 5640 5641
5642 5643 5644 5646 5647 5648 5649 564A 564B 564C
564D 564E 564F 5650 5652 5654 5656 5657 5658 5659
565A 565B 565C 565D 5674 20F64 20F8D 20F90 20FAD 20FB4
20FB5 20FB6 20FBC 21014 571A 5880 589C 589D
589E 589F 58A0 58A1 58A2 58A3 58A4 58A5 58A6 58A7
58A9 58AA 58AB 58AC 58AE 58AF 58B0 58B1 58B2 58B3
58B4 58B5 58B6 58B7 58B8 58B9 21424 2143F 21452 21454
21455 58FF 5900 21577 5926 596D 3723 3725 3726 5AF4
5AF5 5AF6 5AF7 5AF8 5AF9 5AFA 5AFB 5AFC 5AFD 5AFE
5AFF 5B00 5B01 5B02 5B03 5B04 5B05 5B06 5B07 5B08
5B09 5B0A 5B0B 5B0C 5B0D 5B0E 5B0F 21852 2185E 21861
21862 21863 21864 21877 2187B 21883 21884 21885 376F 5BE9
5BEB 5BEC 5BED 5BEE 5C0E 21B44 5C35 37A0 5C64 5C65
5C66 5C67 380F 5D8F 5D90 5D91 5D92 5D93 5D94 5D95
5D96 5D97 5D98 5D99 5D9A 5D9B 5D9C 5D9D 5D9E 5D9F
5DA0 5DA1 5DA2 5DA3 5DA4 5DA5 21F0F 21F15 5DE4 3861
5E5A 5E5C 5E5D 5E5E 5E5F 5E60 5E61 5E62
5E64 5E65 5E69 5EDA 5EDB 5EDD 5EDE 5EDF 5EE0 5EE1
5EE2 5EE3 5EE4 5F47 5F48 5F49 5F71 5FB2 5FB5 5FB7
5FB8 5FB9 5FBA 6155 6157 6159 615C 615D 6164 6166
6167 616B 616E 6170 6176 6178 6179 617C 617E 617F
6182 6183 6184 6185 6187 3989 398A 3992 616D 6189
618B 618D 618E 618F 6190 6192 6193 6194 6195 6198
619A 619B 619C 619E 619F 61A1 61A2 61A3 61A4 61A6
61A7 61AA 61AB 61AC 61AD 61AE 61AF 61B0 61B1 61B3
2285F 22860 22871 622D 622E 622F 3A3C 6468 6469 646E
646F 6470 6479 6480 6483 3A4B 6485 6486 6488 648A
648B 648C 648D 648E 648F 6490 6491 6492 6493 6494
6495 6496 6497 6498 6499 649A 649B 649C 649D 649E
649F 64A0 64A1 64A2 64A3 64A4 64A5 64A7
64A8 64A9 64AA 64AB 64AC 64AD 64AE 64AF 64B0 64B1
64B2 64B3 64B4 64B5 64B6 64B7 64B8 64B9 64BA 64C6
22D44 22D4C 22D67 6575 6576 6577 6578 6579 657A 657B
22FCC 65B3 230BC 3B11 3B12 3B13 3B14 3B15 3B16 66A9
66AA 66AB 66AC 66AD 66AE 66AF 66B0 66B1 66B2 66B3
66B4 66B5 66B6 66B7 23281 2328A 66BC 3B3C 3B3D 3B3E
81A4 69E9 3BBE 3BC2 3BC4 69E2 69E3 69E4 69E5 69E6
69E7 69E8 69EA 69EB 69EC 69ED 69EE 69EF 69F0 69F1
69F2 69F3 69F4 69F5 69F6 69F7 69F8 69F9 69FA 69FB
69FC 69FD 69FE 69FF 6A00 6A01 6A02 6A04 6A05 6A06
6A07 6A08 6A09 6A0A 6A0B 6A0C 6A0D 6A0E 6A0F 6A10
6A11 6A12 6A13 6A14 6A15 6A16 6A17 6A18 6A19 6A1A
6A1B 6A1C 6A1D 6A1E 6A1F 6A20 6A21 6A22
6A23 6A24 6A25 6A26 6A27 6A29 6A2A 6A2B 6A2C 6A2D
6A2F 6A30 6A31 6A65 2361A 2363C 23640 23659 2365F 23677
6B4E 6B4F 6B50 6B51 6B52 6B53 6B75 6B76 3C73 3C74
6BA2 6BA3 6BA4 6BA5 6BA6 6BC5 6BC6 6BFF 6C00 6C01
6C02 6ED5 6F00 6F10 6F26 6F3F 6F41 3D4C 3D4E 3D51
6F0B 6F3D 6F4F 6F50 6F51 6F52 6F53 6F54 6F55 6F56
6F57 6F58 6F59 6F5A 6F5B 6F5C 6F5D 6F5F 6F60 6F61
6F62 6F63 6F64 6F65 6F66 6F67 6F68 6F69 6F6A 6F6B
6F6C 6F6D 6F6E 6F6F 6F70 6F71 6F72 6F74 6F75 6F76
6F77 6F78 6F79 6F7A 6F7B 6F7C 6F7D 6F7E 6F7F 6F81
6F82 6F84 6F85 6F86 6F87 6F88 6F89 6F8A 6F8B 6F8C
6F8D 6F8E 6F8F 6F90 6F91 6F92 6F93 6F94 6F95 6F96
6F97 6F98 6F9A 6F9B 6F9C 6F9D 6FD0 23F4A
23F7F 23F80 23F81 23F82 23F8F 23FB4 23FB7 6FC6 71A6 3DEB
719A 719B 719C 719D 719E 719F 71A0 71A1 71A2 71A3
71A4 71A5 71A7 71A8 71A9 71AA 71AB 71AC 71AD 71AE
71AF 71B0 71B1 71B2 71B3 71B4 71B5 9ED9 24362 24363
24364 24365 2438C 24396 2439C 5655 7234 7245 7255 7256
7257 7298 7299 729A 729B 246D4 734E 734B 7356 7357
7358 7359 735A 735B 735C 735D 735E 735F 7360 7361
7362 7364 24882 7469 746C 3EEB 3EF0 3EF3 3EF4 7479
747A 747B 747C 747D 747E 7480 7481 7482 7483 7484
7485 7486 7487 7488 7489 748A 748B 748C 748E 7493
24A15 24A21 24A22 24A23 24A24 24A25 24A26 24A27 24A28 24A29
24A2A 24A3E 7507 7508 7509 3F53 24BF5 757E 757F 761F
3FB7 3FC0 7619 761A 761B 761C 761D 761E
7620 7621 7622 7623 7624 7625 7626 7628 7629 762A
762B 24E3B 24E50 3FE5 769A 769B 769C 769D 769E 24F97
24F9A 76BA 76E4 4057 7787 7788 7789 778A 778B 778C
778D 778E 778F 7790 7791 7792 7793 25250 78BA 78BB
78BC 78BD 78BE 78BF 78C0 78C2 78C3 78C4 78C5 78C6
78C7 78C8 78C9 78CA 78CB 78CC 78CD 78CE 78CF 78D0
78D1 78D2 78D3 78D4 78D5 78D7 78D8 78D9 78E4 25531
25535 2553F 799A 799B 799C 799D 799E 799F 79A0 79A1
79A2 79A3 256E3 416C 416E 4175 7A34 7A36 7A37 7A38
7A39 7A3A 7A3B 7A3C 7A3D 7A3E 7A3F 7A40 7A41 7A42
7A43 25857 7AAE 7AAF 7AB0 7AB1 7AB2 7AB3 7AB4 420E
420F 4210 4211 4212 4213 4214 4215 421A 421C 4220
4222 4223 4226 4229 7BAC 7BAD 7BAE 7BAF
7BB0 7BB1 7BB2 7BB3 7BB4 7BB5 7BB6 7BB7 7BB9 7BBA
7BBB 7BBC 7BBD 7BBE 7BBF 7BC1 7BC2 7BC3 7BC4 7BC5
7BC6 7BC7 7BC8 7BCA 7BCB 7BCC 7BCD 7BCE 7BCF 7BD0
7BD1 7BD2 7BD3 25BE4 25BE8 25C01 25C06 4294 7CC2 7CC3
7CC4 7CC5 7CC6 7CC7 7CC8 7CC9 7CCA 7CCB 7CCC 7CCD
7CCE 25ED7 25ED8 42F4 42FB 42FC 4300 4301 4304 7DD3
7DD6 7DD7 7DD8 7DD9 7DDA 7DDB 7DDC 7DDD 7DDE 7DDF
7DE0 7DE1 7DE2 7DE3 7DE4 7DE5 7DE6 7DE7 7DE8 7DE9
7DEA 7DEB 7DEC 7DED 7DEE 7DEF 7DF0 7DF1 7DF2 7DF3
7DF4 7DF5 7DF6 7DF7 7DF8 7DF9 7DFA 7DFB 7DFC 7DFD
7DFE 7DFF 7E00 7E01 7E02 7E03 7E04 7E05 7E06 7E07
26083 26097 260A4 260A5 433E 7F2C 7F2D 7F2E 7F2F 7F75
7F76 7F77 7F78 7FAC 7FAD 7FAE 7FAF 7FB0
7FE6 7FE7 7FE8 7FE9 7FEA 7FEB 7FEC 7FED 26469 43AC
8026 8027 8064 8065 8066 8067 8068 8069 806A 806B
265AD 442D 4433 4434 8192 8193 8194 8195 8196 8197
8198 8199 819A 819B 819C 819D 819E 819F 81A0 81A1
81A2 81A3 81F1 8216 8217 447A 824E 824F 8250 8251
8252 8253 8254 44F4 848A 84E0 84E7 84E8 84E9 84EA
84EB 84EC 84ED 84EE 84EF 84F0 84F2 84F3 84F4 84F5
84F6 84F7 84F8 84F9 84FA 84FB 84FC 84FD 84FE 84FF
8500 8501 8502 8503 8504 8505 8506 8508 8509 850A
850B 850C 850D 850E 850F 8510 8511 8512 8513 8514
8515 8516 8517 8518 8519 851A 851B 851C 851D 851E
851F 8520 8521 8522 8523 8524 8525 8526 8527 8528
8529 852A 852B 852C 852D 852E 852F 8530
8531 8532 8533 8534 8535 8536 8537 8538 8539 853A
853B 853C 26E00 26E05 26E07 26E12 26E42 26E43 26E44 26E45
26E6E 26E72 26E77 26E84 853D 854F 8662 874C 874E 874F
8750 8751 8752 8753 8754 8756 8757 8758 8759 875A
875B 875C 875D 875E 875F 8760 8761 8762 8763 8764
8765 8766 8767 8768 8769 876A 876C 876D 876E 876F
8770 8771 8772 8773 8774 8775 8776 8777 8778 877A
877B 877C 877D 877E 877F 8780 87E1 2739A 8782 885A
885B 885C 885D 275FD 4645 4646 88E6 8905 8906 8907
8908 8909 890A 890B 890C 890D 890E 890F 8910 8911
8912 8913 8914 8915 8916 8917 8918 8919 891B 891C
891D 2770F 89A2 89A3 89A4 89A5 27858 89A9 89D0 89D1
89EC 89ED 89EE 89EF 89F0 8A95 46F5 8AAF
8AB0 8AB1 8AB2 8AB3 8AB4 8AB5 8AB6 8AB7 8AB8 8AB9
8ABA 8ABB 8ABC 8ABD 8ABE 8ABF 8AC0 8AC1 8AC2 8AC3
8AC4 8AC5 8AC6 8AC7 8AC8 8AC9 8ACA 8ACB 8ACC 8ACD
8ACE 8ACF 8AD0 8AD1 8AD2 8AD3 8AD4 8AD5 8AD6 8AD7
8AD8 8AD9 8ADA 8AE9 27A3E 27A53 27A59 8ADB 8AF8 8C33
8C34 8C35 8C3E 8C4C 8C4D 8C4E 27BF4 8C6C 8C8E 8C8F
477C 8CD9 8CDA 8CDB 8CDC 8CDD 8CDE 8CDF 8CE0 8CE1
8CE2 8CE3 8CE4 8CE5 8CE6 8CE7 8CE8 8CE9 8CEA 8CEB
8CEC 8CED 8D5C 8D6D 47B6 8D9B 8D9C 8D9D 8D9E 8D9F
8DA0 8DA1 8DA2 8DA3 8DA4 4800 4801 480B 8E0F 8E10
8E11 8E12 8E13 8E14 8E15 8E16 8E17 8E18 8E19 8E1A
8E1B 8E1C 8E1D 8E1E 8E1F 8E20 8E21 8E22 8E23 8E24
8E25 8E26 8E27 8E28 8E29 8E2A 8E2C 8E2D
8E2E 8E2F 8E3A 28083 28090 8E2B 8E37 8EB6 8EB7 8EB8
8EB9 8EBA 8EBB 8EBC 28256 485D 8F16 8F17 8F18 8F19
8F1A 8F1B 8F1C 8F1D 8F1E 8F1F 8F20 8F21 8F22 8F23
8F24 8F25 8F26 8F27 8F28 8F29 8F2A 8F2B 8F2C 2832F
2833A 8F98 8FA4 8FB3 9066 9067 9068 9069 906A 906B
906C 906D 906E 906F 9070 9071 9073 9077 90F6 48DD
9126 9127 9129 912A 912B 912D 912E 912F 9130 9131
9132 9180 9181 9182 9183 9184 9185 9186 9187 9188
9189 918A 918B 918C 492D 92B2 92B3 92B4 92B5 92B6
92B7 92B8 92B9 92BA 92BB 92BC 92BD 92BE 92BF 92C0
92C1 92C2 92C3 92C4 92C5 92C6 92C7 92C8 92C9 92CA
92CC 92CD 92CE 92CF 92D0 92D1 92D2 92D3 92D4 92D5
92D6 92D7 92D8 92D9 92DA 92DB 92DC 92DD
92DE 92DF 92E0 92E1 92E2 92E3 92E4 92E5 92E6 92E7
92E8 92E9 92EA 92EB 92EC 92ED 92EF 92F0 92F1 92F2
92F3 92F4 92F5 92F6 FA27 289B8 289BC 289C0 289DC 289DE
289E1 289E3 289E4 9546 9547 9548 9549 954A 954B 954C
954D 954E 954F 9550 9551 9552 9553 9554 9555 957C
95AB 95AC 95AD 95AE 95AF 95B0 95B1 95B2 95B3 95B4
28D34 49E5 96A2 96A3 96A4 96A5 96D3 9702 9703 9704
9705 9706 9707 9708 9709 970A 290C0 975A 9760 9765
9787 9788 9789 978A 978B 978C 978D 978E 978F 9790
9791 9792 97CF 97D0 97D1 97EF 29420 981B 981C 981D
981E 981F 9820 9821 9822 9823 9826 9827 9828 9829
982A 982B 982C 9898 9899 989A 989B 989C 989D 98B2
98B3 98D8 4B37 98FA 9908 990A 990B 990D
9911 9912 9913 9914 9915 9916 9917 9918 9919 9993
9994 99C8 99C9 99CA 99CB 99CC 99CD 99CE 99CF 99D0
99D1 99D2 99D3 99D4 99D5 99D6 99D7 99D8 99D9 99DA
99DB 99DC 99DD 99DE 99DF 99E0 298A4 9AA3 9AB2 9AB3
9AB4 9AB5 9AB6 9AB7 9ADB 9AEB 9AEC 9AEE 9AEF 9AF0
9AF1 9AF2 9AF3 9AF4 9B27 4C20 9B43 9B44 9B45 9B46
4C3B 4C3E 9B63 9B64 9B65 9B66 9B67 9B68 9B69 9B6A
9B6B 9B6C 9B6D 9B6E 9B6F 9B70 9B71 9B72 9B73 9B74
9B75 9B76 9B77 9B78 9B79 29D7C 9CA0 9CA1 9CA2 9CA3
9CA4 9CA5 9CA6 9CA7 9CA8 9CA9 9CAA 9CAB 9CAC 4CAE
4CB0 4CB7 9CF7 9CF8 9CF9 9CFA 9CFB 9CFC 9CFD 9CFE
9CFF 9D00 9D01 9D02 9D03 9D04 9D05 9D06 9D07 9D08
9D09 9D0B 9D0C 9D0D 9D0E 29FB7 9E58 9E5D
9E5E 9E5F 9E60 9E61 9E62 9E63 9E64 9E76 9E83 9E84
2A293 9EA8 9EA9 9EAA 9EAB 9EB9 9EBE 9ECE 58A8 9ED3
9F0F 9F10 9F11 9F51 9F52 9F89 9F8A
FDD0-2810
4EB8 5110 5111 5112 5113 5114 5115 5116 5117 5118
5119 511A 511B 511C 511D 511E 512B 203F5 203FC 5163
204FC 5180 51AA 51DD 51DE 20615 5290 5291 5292 5293
5294 52F3 5334 53E1 35FB 35FE 3600 3601 3602 3603
3604 565E 565F 5660 5661 5662 5663 5664 5665 5666
5667 5668 5669 566A 566B 566C 566D 566E 566F 5670
5671 5672 5673 5675 5676 5677 5678 5679 567A 567B
567C 20FDF 20FEA 20FEB 20FEC 20FED 2101D 2101E 571B 571C
58BA 58BB 58BC 58BD 58BE 58BF 58C0 58C1 58C2 58C3
58C4 58C5 58C6 58C7 58C8 58C9 58CA 58CB 58CC 5901
596E 596F 372B 372C 372D 5B10 5B11 5B12 5B13 5B14
5B15 5B16 5B17 5B18 5B19 5B1A 5B1B 5B1C 5B1D 5B1E
5B1F 5B20 5B21 5B22 5B34 2189E 2189F 218A0
218A1 218A2 218BE 218BF 5B28 5B78 5B79 5BEF 5BF0 5DA6
5DA7 5DA8 5DA9 5DAA 5DAB 5DAC 5DAD 5DAE 5DAF 5DB0
5DB1 5DB2 5DB3 5DB4 5DB5 5DB6 3862 3863 3864 5E66
5E67 5E68 2215B 5E6F 5EE5 5EE6 5EE7 5EE8 5EE9 5EEA
5F4A 5F4B 5F5B 5F5C 22471 224B0 5FBB 5FBC 618A 618C
6191 6196 6197 6199 619D 61A0 61A5 61A8 61A9 61B2
3999 61B4 61B6 61B7 61B8 61B9 61BA 61BD 61BE 61BF
61C0 61C1 61C4 61C5 61C6 61C8 61CA 61CC 61CD 61CE
61CF 61D0 61D2 61D3 61D4 228AD 228C1 61BB 6231 6230
6489 3A52 3A54 3A57 64BB 64BC 64BD 64BE 64BF 64C0
64C1 64C2 64C3 64C4 64C5 64C7 64C8 64C9 64CB 64CC
64CD 64CF 64D0 64D1 64D2 64D3 64D4 64D5 64D6 64D7
64D9 64DA 64DB 64DC 64DD 64DE 22D8D 22D95
22DA0 22DA3 22DA4 22DB7 64F3 6533 6574 657C 657D 657E
657F 22FE3 6593 65A2 65B4 65D8 65D9 3B17 3B18 3B19
3B1A 3B1B 3B1C 3B1D 3B1E 3B1F 66B8 66B9 66BA 66BB
66BD 66BE 66BF 66C0 66C1 66C2 66C3 66C4 66C5 66C6
66C7 66C8 66C9 66CA 66CB 66CC 66CD 23289 232AB 232AC
232AD 66CF 3B31 6706 3B3F 6723 6724 6725 6A28 6A74
3BD7 3BDD 6A32 6A33 6A34 6A35 6A36 6A37 6A38 6A39
6A3A 6A3B 6A3C 6A3D 6A3E 6A3F 6A40 6A41 6A42 6A43
6A44 6A45 6A46 6A47 6A48 6A49 6A4A 6A4B 6A4C 6A4D
6A4E 6A4F 6A50 6A51 6A52 6A53 6A54 6A55 6A56 6A57
6A58 6A59 6A5A 6A5B 6A5C 6A5D 6A5E 6A5F 6A60 6A61
6A62 6A63 6A64 6A66 6A67 6A68 6A69 6A6A 6A6B 6A6C
6A6D 6A6E 6A6F 6A70 6A71 6A72 6A73 6A75
6A76 6A77 6A78 6A79 6A7A 6A7B 6A7C 236A6 236AD 236BA
236DF 236EE 6B54 6B55 6B56 6B57 6B58 6B59 6B5A 6B77
6BA7 6BA8 6BA9 6BAA 6BAB 6BC7 6BC8 6C03 6C04 6C05
6C06 6C07 6F5E 6F83 3D5F 3D62 3D65 3D69 3D6A 6F99
6F9E 6F9F 6FA0 6FA1 6FA2 6FA3 6FA4 6FA5 6FA6 6FA7
6FA8 6FAA 6FAB 6FAC 6FAD 6FAE 6FAF 6FB0 6FB1 6FB2
6FB3 6FB4 6FB5 6FB6 6FB7 6FB8 6FB9 6FBA 6FBB 6FBC
6FBD 6FBE 6FBF 6FC0 6FC1 6FC2 6FC3 6FC4 6FC5 6FC7
6FC8 6FC9 6FCA 6FCB 6FCD 6FCE 6FCF 6FD1 6FD2 6FD3
6FD6 23FC5 23FEB 23FEC 23FED 23FEE 23FEF 23FF0 24011 7004
3DF3 3DF7 3DFC 3DFD 71B6 71B7 71B8 71B9 71BA 71BB
71BC 71BD 71BE 71BF 71C0 71C1 71C2 71C3 71C4 71C5
71C6 71C7 71C8 71C9 71CA 71CB 71CC 71CD
71CE 71CF 71D0 71D1 71D2 71D3 71D4 71D5 71D6 71D7
71D8 71D9 71DA 71DB 71DC 71DD 71DE 243BD 243C1 243E9
243EA 243F2 729C 729D 729E 729F 7363 7365 7366 7367
7368 7369 736A 736B 736C 736D 747F 3EFC 748D 748F
7491 7492 7494 7495 7496 7498 7499 749A 749B 749C
749D 749E 749F 74A0 74A1 74A3 74A4 24A42 24A45 24A4A
24A4E 24A4F 24A50 24A51 24A5D 24A65 24A66 24A67 74A2 74E2
750A 750B 750C 750D 750E 7580 7581 7582 24CC9 762C
762D 762E 762F 7630 7631 7632 7633 7634 7635 7636
7637 7638 7639 763A 763B 763C 763D 763E 763F 764A
769F 76A0 76A1 76BB 76E5 76E6 76E7 2509D 4062 4065
406A 7794 7795 7796 7797 7798 7799 779A 779B 779C
779D 779E 779F 77A0 77A1 77A2 77A3 25299
77A5 78D6 78DC 40D8 78DA 78DB 78DD 78DE 78DF 78E0
78E1 78E2 78E3 78E5 78E6 78E7 78E8 78E9 78EA 78EB
78EC 78ED 78EE 2555B 2555C 2555D 2555E 25562 25565 25566
79A4 79A5 79A6 79A9 256F6 7A44 7A45 7A46 7A47 7A48
7A4B 7A4C 7A4D 7A4E 7A4F 7A50 7A51 7A52 2585D 25872
7A53 41B2 7AB5 7AB6 7AB7 7AB8 7AB9 7ABA 7ABB 7ABC
7ABD 7AF1 25AAE 422A 422B 422D 422E 4230 4231 4232
7BC9 7BD4 7BD5 7BD6 7BD7 7BD8 7BD9 7BDA 7BDB 7BDC
7BDD 7BDE 7BDF 7BE0 7BE1 7BE2 7BE3 7BE4 7BE5 7BE6
7BE7 7BE8 7BE9 7BEA 7BEB 7BEC 7BED 7BEE 7BEF 7C11
25C21 25C4A 25C65 7BF9 4A00 7CCF 7CD0 7CD1 7CD2 7CD3
7CD4 7CD5 7CD6 7CD7 7CD8 7E08 7E09 7E0A 7E0B 7E0C
7E0D 7E0E 7E0F 7E10 7E11 7E12 7E13 7E14
7E15 7E16 7E17 7E18 7E19 7E1A 7E1B 7E1C 7E1D 7E1E
7E1F 7E20 7E21 7E22 7E23 7E24 7E25 7E26 7E27 7E28
7F30 7F31 7F32 7F33 7F34 7F43 7F79 7F7A 7F7B 7F7C
7FB1 7FB2 7FEE 7FEF 7FF0 7FF1 8028 8029 802A 26512
43C1 806C 806D 265BF 806E 8190 443B 81A6 81A7 81A8
81A9 81AA 81AB 81AC 81AD 81AE 81AF 81B0 81B1 81B2
81B3 81B4 81B5 81B6 2681C 2686E 81B7 81B9 81F2 81FB
8208 8206 8209 8218 8255 8256 8257 8258 8259 4500
4503 4504 4509 450B 84DE 853E 853F 8540 8541 8542
8543 8544 8545 8546 8547 8548 8549 854A 854B 854C
854D 854E 8550 8551 8552 8553 8554 8555 8556 8558
8559 855A 855B 855C 855D 855E 855F 8560 8561 8562
8563 8564 8565 8566 8567 8568 8569 856A
856B 856C 856D 856E 856F 8570 8571 8572 8573 8574
8575 26E99 26ED0 26ED1 26ED2 26ED3 26ED4 26ED5 26ED6 26ED7
26F26 858C 8663 8664 8665 8666 45DD 8779 8781 8783
8784 8785 8786 8787 8788 8789 878A 878B 878C 878D
878E 878F 8790 8791 8792 8793 8794 8795 8796 8797
8798 8799 879A 879B 879C 879D 879E 879F 87A0 87A1
87A2 87A3 87A4 87A5 87A6 87A7 87A8 87A9 4617 885E
885F 8860 8861 275FE 464F 891E 891F 8920 8921 8922
8923 8924 8925 8926 8927 8928 8929 892A 892B 892C
892D 892E 892F 8930 8931 8932 8934 27735 27736 27741
89A6 89A7 89A8 89AA 27870 89F1 8ADC 8ADD 8ADE 8ADF
8AE0 8AE1 8AE2 8AE3 8AE4 8AE5 8AE6 8AE7 8AE8 8AEA
8AEB 8AEC 8AED 8AEE 8AEF 8AF0 8AF1 8AF2
8AF3 8AF4 8AF5 8AF6 8AF7 8AF9 8AFA 8AFB 8AFC 8AFD
8AFE 8AFF 8B00 8B01 8B02 8B03 27A79 27A84 8B14 474E
8C6B 8C6D 8C6E 8C90 8C91 8C92 8C93 8CEE 8CEF 8CF0
8CF1 8CF2 8CF3 8CF4 8CF5 27DBD 8D5D 8D5E 8D5F 8D60
8D6C 8D6E 8DA5 8DA6 8DA7 8E30 8E31 8E32 8E33 8E34
8E35 8E36 8E38 8E39 8E3B 8E3C 8E3D 8E3E 8E3F 8E40
8E41 8E42 8E43 8E44 8E45 280BD 280BE 8EBD 8EBE 8F2D
8F2E 8F2F 8F30 8F31 8F32 8F33 8F34 8F35 8F36 8F37
8F38 8F39 8F3A 8F3B 8F3C 28365 8F99 8F9A 8FA5 8FA6
8FA7 8FA8 8FA9 8FAA 48AD 9072 9074 9075 9076 9078
9079 907A 907B 907C 9086 285E8 285F4 28600 90FA 9133
9134 9135 9136 9137 4900 4906 918D 918E 918F 9190
9191 9192 9193 9194 9195 9196 9197 92CB
4935 92F7 92F8 92F9 92FA 92FB 92FC 92FD 92FE 92FF
9300 9301 9302 9303 9304 9305 9306 9307 9308 9309
930A 930B 930C 930D 930E 930F 9310 9311 9312 9313
9314 9315 9316 9317 9318 9319 931A 931B 931C 931D
931E 931F 9320 9321 9322 9323 9324 9325 9326 9327
9329 932A 932B 932C 932D 932E 932F 9330 9331 9332
9333 9334 9335 9336 9337 9338 9339 933A 933B 933C
933D 933E 933F 9340 9341 9342 9343 9344 9345 9346
9348 FA28 289E7 289E8 289F9 289FA 289FB 289FC 28A0F 28A16
28A25 28A29 937A 9556 9557 9558 9559 955A 955B 955C
955D 955E 955F 9560 49A1 49A7 95B5 95B6 95B8 95B9
95BA 95BB 95BC 95BD 95BE 95BF 95C1 95C2 95CD 961B
49E7 96A6 96A7 96A8 96A9 96AA 96AB 96B7
96D4 96D5 4A1D 970B 970C 970D 970E 970F 9710 9711
9712 9713 9714 9715 9716 9717 290E4 290E5 290EC 290ED
975B 975C 9766 9793 9794 9795 9796 9797 9798 9799
97D2 97F0 97F8 9824 9825 982D 982E 982F 9830 9831
9832 9833 9834 9835 9836 9837 9838 9839 983A 983B
983C 983D 294D0 294D9 294DA 989E 989F 98A0 98A1 98B4
98B5 295D7 98D9 98DA 9910 991D 991A 991B 991C 991E
991F 9920 9921 9922 9923 9924 9926 9927 9928 9929
29720 9934 999E 999F 99A0 99E1 99E2 99E3 99E4 99E5
99E6 99E7 99E8 99E9 99EA 99EB 99EC 99ED 99EE 99EF
99F0 99F1 99F2 298D1 9AB8 9AB9 9ABA 9ABB 9ABC 29A4D
9ABF 9AED 9AF5 9AF6 9AF7 9AF8 9AF9 9AFA 9AFB 9B07
9B28 9B33 9B47 4C49 9B7A 9B7B 9B7C 9B7D
9B7E 9B7F 9B80 9B81 9B82 9B83 9B84 9B85 9B87 9B88
9B89 9B8A 9B8B 9B8C 9B8D 9B8E 9B8F 9B90 9B91 9B92
9B93 9B94 9B95 9B96 9B97 9B98 9BA3 29D98 29D9B 9CAD
9CAE 9CAF 9CB0 9CB1 9CB2 9CB3 9CB4 9CB5 9CB6 9CB7
9CB8 9CB9 9CBA 9CBB 9D0A 9D0F 9D10 9D11 9D12 9D13
9D14 9D15 9D16 9D17 9D18 9D19 9D1A 9D1B 9D1D 9D1E
9D1F 9D20 9D21 9D22 9D23 9D24 9D25 9D26 9D27 9D28
9D29 9D2A 9D2B 9D2C 29FDE 9E65 9E66 9E67 9E68 9E77
9E7E 9E85 9E86 9E87 9E88 2A29F 4D34 9EAC 9EAD 9EAE
9EBA 9EC5 9EC6 9ED4 9ED5 9ED6 9ED7 9ED8 9EFA 9F12
9F3C 9F3D 9F53 9F8D 9F9C
FDD0-2811
511F 5120 5121 5122 5123 5124 5125 5126 5127 5128
5129 512A 512C 20413 20414 2041F 5132 51DF 20619 2061A
5295 3525 3526 52F4 52F5 52F6 5335 3553 53B3 20B8F
567D 567E 567F 5680 5681 5682 5683 5684 5685 5686
5687 5688 5689 568A 568B 568C 568D 568E 568F 5690
5691 5692 5693 2104F 2105C 2106F 21075 21076 21077 21078
2107B 21088 367A 58CD 58CE 58CF 58D0 58D1 58D2 58D3
58D4 58D5 58D6 58D7 2148A 21497 21692 5B23 5B24 5B25
5B26 5B27 5B29 5B2A 5B2B 5B2C 5B2D 5B2E 5B2F 5B30
5B31 5B32 5B33 5B35 5B36 5B37 218D1 218D6 218D7 218D8
218D9 5B7A 5B7B 5BF1 5BF2 5C36 5C37 5C68 3819 5DB7
5DB8 5DB9 5DBA 5DBC 5DBD 5DBE 5DBF 21F6A 5DBB 3865
3866 5E6A 5E6B 5E6C 5F4C 5FBD 5FBE 2258D
61B5 61BC 61C2 61C3 61C7 61C9 61CB 61D1 61D7 61D9
61DA 61DB 61DC 61DD 61DE 61E0 61E1 61E2 61E4 61E5
61E6 61E7 61E8 228F7 6232 6234 64CA 64CE 64D8 3A5C
3A5E 64DF 64E0 64E1 64E2 64E3 64E4 64E6 64E8 64E9
64EB 64EC 64ED 64EE 64EF 64F0 64F1 22DEE 6580 6581
6582 6583 65A3 65B5 65B6 65DA 3B20 3B21 3B22 66CE
66D0 66D1 66D2 66D3 66D4 66D5 66D6 66D7 66DA 232D2
66D9 3B32 3B40 3BEC 3BF2 3BF3 3BF4 6A7D 6A7E 6A7F
6A80 6A81 6A82 6A83 6A84 6A85 6A86 6A87 6A88 6A89
6A8A 6A8B 6A8C 6A8D 6A8E 6A8F 6A90 6A91 6A92 6A93
6A94 6A95 6A96 6A97 6A98 6A99 6A9A 6A9B 6A9C 6A9D
6A9E 6A9F 6AA0 6AA1 6AA2 6AA3 6AA4 6AA5 6AA6 6AA7
6AA8 6AA9 6AAA 23703 23716 23720 2372D 2372F
2373F 6ADB 3C46 6B5B 6B5C 6B5D 6BAC 6BAD 6BAE 6BDA
6C08 6C09 6C0A 6FA9 6FCC 3D6F 3D73 3D75 6F80 6FD4
6FD5 6FD7 6FD8 6FD9 6FDA 6FDB 6FDC 6FDD 6FDE 6FDF
6FE0 6FE1 6FE2 6FE3 6FE4 6FE5 6FE6 6FE7 6FE8 6FE9
6FEA 6FEB 6FEC 6FED 6FEE 6FEF 6FF0 6FF1 6FF2 6FF4
6FF5 6FF6 6FF8 23FC0 24039 2403A 2403B 2403C 2403D 24057
3E00 3E01 3E02 71DF 71E0 71E1 71E2 71E3 71E4 71E5
71E6 71E7 71E8 71E9 71EA 71EB 71EC 71ED 71EE 71EF
71F0 71F1 71F2 71F3 71F4 71F5 71F6 71F7 243F8 24404
7235 7246 3E55 72A0 736E 736F 7370 7371 7372 7373
7374 3EFA 7490 7497 3EFF 3F00 3F01 74A5 74A6 74A8
74A9 74AA 74AB 74AC 74AD 74AE 74AF 74B0 74B1 74B2
74B3 74B4 24A71 24A77 24A78 24A79 24A7A 3F3F
750F 7510 7511 7512 7583 7584 24CD9 7640 7641 7642
7643 7644 7645 7646 7647 7648 7649 764B 764C 764D
764E 24EA5 24EA7 76A2 76A3 76A4 76A5 76BC 4009 76E8
76E9 76EA 406F 4071 77A4 77A6 77A7 77A8 77A9 77AA
77AB 77AC 77AD 77AE 77AF 77B0 77B1 77B2 77B3 77B4
77B5 77B6 77B7 252C7 77EF 77F0 40DF 78EF 78F0 78F1
78F2 78F3 78F4 78F5 78F6 78F7 78F8 78F9 78FA 78FB
78FC 78FD 78FE 78FF 7900 7901 7902 7903 7904 7905
25581 25584 2558F 79A7 79A8 79AA 79AB 25706 417F 7A49
7A54 7A55 7A56 7A57 7A58 7A59 7A5A 7A5B 7A5C 7A5D
7A5E 41B9 7ABE 7ABF 7AC0 7AC1 7AC2 7AF2 7AF3 7AF4
25AAF 7C15 423B 4240 4241 4242 4243 4244 4245 7BF0
7BF1 7BF2 7BF3 7BF4 7BF5 7BF6 7BF7 7BF8
7BFA 7BFB 7BFC 7BFD 7BFE 7BFF 7C00 7C01 7C02 7C03
7C04 7C05 7C06 7C07 7C08 7C09 7C0A 7C0B 7C0C 7C0D
7C0E 7C0F 7C10 7C12 7C13 7C14 7C16 7C17 25C91 25CA4
25CC0 7C18 42A2 7CD9 7CDA 7CDB 7CDC 7CDD 7CDE 7CDF
7CE0 7CE1 7CE2 7CE8 7E29 7E2A 7E2B 7E2C 7E2D 7E2E
7E2F 7E30 7E31 7E32 7E33 7E34 7E35 7E36 7E37 7E38
7E39 7E3A 7E3B 7E3C 7E3D 7E3E 7E3F 7E40 7E41 7E42
7E43 7E44 7E45 7E46 7E47 7E49 7E4A 7E4C 7E4D 26102
26121 7E48 7F44 7F45 7F46 7F7D 7F7E 7F7F 7F81 263BE
7FF2 7FF3 7FF4 7FF5 7FF6 7FFC 26484 26488 26489 802B
802C 806F 8070 8071 8072 8073 8074 26626 81A5 81B8
81BA 81BB 81BC 81BD 81BE 81BF 81C0 81C1 81C2 81C3
81C4 81C5 81C6 81C7 81C8 81C9 81CA 81CC
26846 2685E 81E8 81E9 269F2 825A 825B 825C 825D 8271
4516 451D 4520 4526 4527 8557 8576 8577 8578 8579
857A 857B 857C 857D 857E 857F 8580 8581 8582 8583
8584 8585 8586 8587 8588 8589 858A 858B 858D 858E
858F 8590 8591 8592 8593 8594 8595 8596 8597 8598
8599 859A 859B 859C 859D 859E 859F 85A0 85A1 85A2
85A3 85A4 85A5 85A6 85A7 85A8 85AA 85AB 85AC 85AE
26F73 26F74 26F9F 26FA1 85AD 85AF 8667 8668 45E9 45EE
87AA 87AB 87AC 87AD 87AE 87AF 87B0 87B1 87B2 87B3
87B4 87B5 87B6 87B7 87B8 87B9 87BA 87BB 87BC 87BD
87BE 87BF 87C0 87C1 87C2 87C3 87C4 87C5 87C6 87C7
87C8 87C9 87CA 87CB 87CC 87CD 87CE 87CF 87D0 87D1
87D2 27422 87DE 465B 8933 8935 8936 8937
8938 8939 893A 893B 893C 893D 893E 893F 8940 8941
8942 8943 8944 8945 8954 8952 2775E 89AB 89AC 89AD
89AE 89AF 89F2 89F3 27924 4700 8B04 8B05 8B06 8B07
8B08 8B09 8B0A 8B0B 8B0C 8B0D 8B0E 8B0F 8B10 8B11
8B12 8B13 8B15 8B16 8B17 8B18 8B19 8B1A 8B1B 8B1C
8B1D 8B1E 8B1F 8B20 8B21 8B22 27ABD 27ABE 4726 8C3F
8C40 8C41 8C4F 8C6F 8C70 8C71 8C72 8C73 8C94 8C95
8C96 8CF6 8CF7 8CF8 8CF9 8CFA 8CFB 8CFC 8CFD 27DDC
8D61 8D62 8D6F 8DA8 8E46 8E47 8E48 8E49 8E4A 8E4B
8E4C 8E4D 8E4E 8E4F 8E50 8E51 8E52 8E53 280E8 280E9
280F4 8F3D 8F3E 8F3F 8F40 8F41 8F42 8F43 8F44 8F45
2836D 2837D 8FAB 48AE 907D 907E 907F 9080 9081 9082
9083 9084 9085 9089 2860B 9138 9139 9198
9199 919A 919B 919C 919D 919E 919F 91A0 91A1 91A2
91A3 91A4 28933 493C 9328 9347 9349 934A 934B 934C
934D 934E 934F 9350 9351 9352 9353 9354 9355 9356
9357 9358 9359 935A 935B 935C 935D 935E 935F 9360
9361 9362 9363 9364 9365 9366 9367 9368 9369 936A
936B 936C 936D 936E 936F 9370 9371 9372 9373 9374
9375 9376 9377 9378 9379 937B 937C 937D 937E 937F
9380 9381 9382 9383 9384 9385 9386 9387 28A32 28A36
28A44 28A45 28A46 28A47 28A48 28A49 28A4A 28A4B 28A59 28A5A
28A81 28A82 28A83 93A1 93AF 9561 9562 9563 9564 9565
9566 9567 9568 9569 956A 956B 95C0 95B7 95C3 95C4
95C5 95C6 95C7 95C8 95C9 95CA 95CB 95CC 95CE 95CF
96AC 96AD 96AE 96AF 96B0 96B1 96B2 96B8
4A01 4A02 96D6 4A24 9718 9719 971A 971B 971C 971D
971E 971F 9720 2910D 29110 9721 4A4A 979A 979B 979C
979D 979E 979F 97A0 97A1 97D3 97D4 97D5 97F1 4AD1
9840 9841 9842 9843 9844 9845 9846 9847 9848 9849
984A 294E5 294E7 4B10 98B6 98B7 295E9 295F4 4B20 9925
992A 992B 992C 992D 992F 9930 9931 9932 9933 9935
9937 29732 9942 9946 9998 4B70 4B72 99A1 99A2 99A3
4B8E 4B90 99F4 99F5 99F6 99F7 99F8 99F9 99FA 99FB
99FC 99FD 99FE 99FF 9A00 9A01 9A02 9A03 298EA 99F3
9AA4 9ABD 9ABE 9AFC 9AFD 9AFE 9AFF 9B00 9B01 9B02
9B34 9B48 9B49 9B86 4C4B 4C4C 4C4D 9B99 9B9A 9B9B
9B9C 9B9D 9B9E 9B9F 9BA0 9BA1 9BA2 9BA4 9BA5 9BA6
9BA7 9BA8 9BA9 9BAA 9BAB 9BAC 9BAD 9BAE
9BAF 9BB0 9BB1 9BB2 9BB3 9BB4 9BBA 9BCE 9CBC 9CBD
9CBF 9CC0 9CC1 9CC2 9CC3 9CC4 9CC5 9CC6 9CC7 9CC8
9CC9 9CCA 9CCB 9CBE 9D1C 4CCD 4CD4 9D2D 9D2E 9D2F
9D30 9D31 9D32 9D33 9D34 9D35 9D36 9D37 9D38 9D39
9D3A 9D3B 9D3C 9D3D 9D3E 9D3F 9D40 9D41 9D42 9D43
9D44 9D45 9D46 9D47 9D48 9D49 2A014 9D67 9E69 9E6A
9E6B 9E6C 9E89 9E8A 9E8B 2A2B2 9EAF 9EB0 9EC7 9EC8
9EC9 9ECF 9EDA 9EDB 9EDC 9EDD 9EDE 2A434 9EFB 9EFF
9F22 9F23 9F24 9F3E 9F3F 9F4B 2A5C6 9F54 9F62 9F8B
9F8C 9FA0
FDD0-2812
512D 512E 512F 5131 34AF 204FE 5181 205A5 20AC2 53E2
3609 5694 5695 5696 5697 5698 5699 569A 569B 569C
569D 569E 569F 56A0 56A1 56A2 56A3 56A4 21096 2109D
210B4 210BF 210C0 210C1 210C7 210C8 210C9 210CF 210D3 56AE
58D8 58D9 214B6 5911 5913 5970 3730 3731 5B38 5B3A
5B3B 5B3C 218FA 5C69 5C6A 5DC0 5DC1 5DC2 5E6D 5E6E
5EEB 5F4D 5F5D 5F5E 399B 61D5 61D6 61D8 61DF 61E3
39A1 61E9 61EA 61EB 61ED 61EE 61F0 61F1 61F3 61F4
6233 64E7 64EA 3A61 3A66 3A67 64E5 64F2 64F4 64F5
64F6 64F7 64F8 64F9 64FA 64FB 64FC 64FD 64FE 64FF
6501 6502 6503 6504 6505 6506 22E0D 3AAB 8D01 23066
6594 2308E 65B7 65DB 3B23 3B24 3B25 3B26 3B27 3B28
66D8 66DB 66DC 232E0 232E1 6726 6AAB 6AAC
6AAD 6AAE 6AAF 6AB0 6AB1 6AB2 6AB3 6AB4 6AB5 6AB6
6AB7 6AB8 6AB9 6ABA 6ABB 6ABC 6ABD 6ABE 6ABF 6AC0
6AC1 6AC2 6AC3 6AC4 6AC5 6AC6 6AC7 6AC8 6AC9 6ACA
23766 23781 6AE1 6AED 6B5E 6B5F 6B78 6BAF 6BC9 6C0B
6FF7 3D7D 6FF9 6FFA 6FFB 6FFC 6FFD 6FFE 6FFF 7000
7001 7002 7003 7005 7006 7007 7008 7009 700A 700B
700C 700D 700E 700F 7010 7011 7012 7013 7014 24085
2408B 2408C 2408D 24091 7026 3E04 71F8 71F9 71FA 71FB
71FC 71FD 71FE 71FF 7200 7201 7203 24435 24436 269A8
7375 7376 7377 74A7 74B5 74B6 74B8 74B9 74BB 74BC
74BE 74BF 74C0 74C1 74C2 24A8C 24A93 24A94 24A95 24A96
24AA4 24AA5 24AA6 24AA7 7513 7514 7515 7585 764F 7650
7651 7652 7653 7654 7655 7656 7657 7658
7659 765A 765B 765C 765D 765E 7664 76A6 76A7 76A8
24FA9 3FF9 76BD 76EB 76EC 77B8 77B9 77BA 77BB 77BC
77BD 77BE 77BF 77C0 77C1 77C2 252D8 7906 7907 7908
7909 790A 790B 790C 790D 790E 790F 7910 7911 7912
7913 7914 7915 7916 4120 79AC 79AD 79AE 79AF 7A5F
7A60 7A61 7A62 7A63 258C8 7AC4 7AC5 7AF5 424E 4255
7C19 7C1A 7C1B 7C1C 7C1D 7C1E 7C1F 7C20 7C21 7C22
7C23 7C24 7C25 7C26 7C27 7C28 7C29 7C2A 7C2B 7C2D
7C2E 7C2F 7C30 7C31 7C32 25CC1 25CFE 25D20 42A6 7CE3
7CE4 7CE5 7CE6 7CE7 25F1A 4318 7E4E 7E4F 7E50 7E51
7E52 7E53 7E54 7E55 7E56 7E57 7E58 7E59 7E5A 7E5B
7E5C 7E5D 7E5E 7E5F 7E60 7E61 7E62 7E63 7E64 7E65
7E67 7E71 26159 2615A 2615B 2615C 7F47 7F48
7F49 26258 7F80 7F82 7FB3 7FB4 7FB5 4397 7FF7 7FF8
7FF9 7FFA 7FFB 2648D 26498 802D 802E 8075 8076 8077
4443 4444 4445 81CD 81CE 81CF 81D0 81D1 81D2 81D3
26888 820A 8219 825E 825F 8260 448F 452E 4533 453B
453D 453F 4540 4543 4544 85A9 85B0 85B1 85B2 85B3
85B4 85B5 85B6 85B7 85B8 85B9 85BA 85BB 85BC 85BD
85BE 85BF 85C0 85C1 85C2 85C3 85C4 85C5 85C6 85C7
85C8 85C9 85CA 85CB 85CC 85CD 85CE 85CF 85D0 85D2
85D3 26FBE 26FDE 26FDF 2700E 459B 8669 87D7 87D3 87D4
87D6 87D8 87D9 87DA 87DB 87DC 87DD 87DF 87E0 87E2
87E3 87E4 87E5 87E6 87E7 87E8 87E9 87EA 87EB 87EC
87ED 87EE 87EF 87F0 87F1 87F2 87F3 87F4 87F5 880E
27450 27484 27486 8946 8947 8948 8949 894A
894B 894C 894D 894E 894F 8950 8951 8953 8955 27784
27785 8986 468D 89B0 89B1 89B2 89B3 89F4 9D64 8B23
8B24 8B25 8B26 8B27 8B28 8B29 8B2A 8B2B 8B2C 8B2D
8B2E 8B2F 8B30 8B31 8B32 8B33 8B34 8B35 8B36 8B37
8B38 8B39 8B3A 8B3B 8B3C 8B3D 8B3E 27AF4 8B47 8C42
8C50 8C74 8C75 8C97 8C98 8C99 8CFE 8CFF 8D00 8D02
8D03 8D04 8D05 8DA9 4820 8E54 8E55 8E56 8E57 8E58
8E59 8E5A 8E5B 8E5C 8E5D 8E5E 8E5F 8E60 8E61 8E62
8E63 8E64 8E65 8E66 8E67 8E6E 8E80 2812E 8E69 8EBF
8EC0 8EC1 2827C 4871 8F46 8F47 8F48 8F49 8F4A 8F4B
8F4C 2838A 8FAC 9087 9088 28625 9128 913A 913B 913C
913D 913E 91A5 91A6 91A7 91A8 91A9 91AA 91AB 91AC
91D0 493E 4944 4945 4947 9388 9389 938A
938B 938C 938D 938E 938F 9390 9391 9392 9393 9394
9395 9396 9397 9398 9399 939A 939B 939C 939D 939E
939F 93A0 93A2 93A3 93A4 93A5 93A6 93A7 93A8 93AA
93AB 93AC 93AD 93AE 93B0 93B1 93B2 93B3 93B4 93B5
93B6 93B7 93B8 93B9 93BA 93BB 93BC 93BD 93BE 93BF
28A9A 28A9B 28A9C 28AC0 28AC6 28ACB 28ACC 28ACE 956C 956D
956E 956F 9570 9571 95D0 95D1 95D2 95D3 95D4 95D5
95D6 95D7 95D8 28D99 96B3 4A03 96D7 96D8 96D9 96DA
96DB 96DC 96DD 96DE 96DF 96E0 96E2 4A26 9722 9723
9724 9725 975D 97A2 97A3 97A4 97A5 97A6 97A7 97A8
97A9 97AA 97AB 97AC 97AD 97AE 97AF 97B0 4A96 97D6
97D7 97D8 97D9 97DA 97F9 97FA 29433 983F 983E 984B
984C 984D 984E 984F 9850 9851 9852 9853
9854 9855 98A2 98A3 98B8 98B9 98BA 4B49 4B4B 4B4C
992E 9936 9938 9939 993A 993B 993C 993D 993E 993F
9940 9941 99A4 99A5 4B93 4B96 4B97 9A04 9A05 9A06
9A07 9A08 9A09 9A0A 9A0B 9A0C 9A0D 9A0E 9A0F 9A10
9A11 9A12 9A13 298F1 29903 29905 9AC0 9AC1 9ADC 4C00
4C01 9B03 9B04 9B05 9B06 9B08 9B29 9B35 9B36 4C26
9B4A 9B4B 9B4C 9B4D 9B4E 9B4F 9BB5 9BB6 9BB7 9BB8
9BB9 9BBB 9BBC 9BBD 9BBE 9BBF 9BC0 9BC1 9BC2 9BC3
9BC4 9BC6 9BC7 9BC8 9BC9 9BCA 9BCB 9BCC 9BCD 9BCF
9BD0 9BD1 9BD2 9BD3 9BFD 29DF6 9CCC 9CCD 9CCE 9CCF
9CD0 9CD1 9CD2 9D4A 9D4B 9D4C 9D4D 9D4E 9D4F 9D50
9D51 9D52 9D53 9D54 9D55 9D56 9D57 9D58 9D59 9D5A
9D5B 9D5C 9D5D 9D5E 9D5F 9D60 9D62 9D63
9D65 9E6D 9E6E 9E6F 9E70 4D26 9E8C 9E8D 9E8E 9E8F
9E90 2A2B4 2A2B6 2A2BA 2A2BD 4D36 9EB1 9EB2 9EBF 9ECA
9ECB 9EDF 9EE0 9EE1 9F00 9F01 9F02 9F15 9F16 9F25
9F26 9F27 9F28 9F29 9F2A 9F2B 9F2C 9F4C 9F55 9F8E
FDD0-2813
3426 34A3 5133 5134 5135 5296 52F7 52F8 5336 53B4
58E1 56A5 56A6 56A7 56A8 56A9 56AA 56AB 56AC 56AD
56AF 56B0 210E4 210F4 210F5 210F6 58DA 58DB 58DC 58DD
58DE 58DF 58E0 58E2 5912 5B3D 3732 3733 3734 3735
5B39 5B3E 5B3F 21903 21904 21905 5B7C 5BF3 5BF4 5BF5
5C6B 3820 3822 5DC3 5DC4 5DC5 21F9E 21FA1 5E70 22173
5EEC 5EED 9F90 5F5F 5FBF 61EC 61EF 61F2 61F5 61F6
61F7 22926 22939 61FB 6500 6507 6508 6509 650A 650B
650C 650D 650E 650F 6510 6512 22E36 22E42 6584 65DC
65DD 65DE 3B29 3B2A 66DD 66DE 66DF 66E0 66E1 66E2
3C00 3C01 3C02 3C04 6ACB 6ACC 6ACD 6ACE 6ACF 6AD0
6AD1 6AD2 6AD3 6AD4 6AD5 6AD6 6AD7 6AD8 6AD9 6ADA
6ADC 6ADD 6ADE 6ADF 6AE0 6AE2 6AE3 6AE4
6AE5 6AE6 6AEB 237A2 237BC 237C2 6AE7 6B60 6BB0 6BB1
23ADB 6C0C 3D85 3D8A 6FF3 7015 7016 7017 7018 7019
701A 701B 701C 701D 701E 701F 7020 7021 7022 7023
7024 7025 7027 7028 7029 702B 702C 702D 702E 240C9
240E1 7202 3E06 7204 7205 7206 7207 7208 7209 720A
720C 720D 720E 7215 2445A 2445B 7258 72A1 72A2 72A3
72A4 72A5 72A6 7378 7379 737A 74B7 74BD 3F04 3F06
74C3 74C4 74C5 74C6 74C7 74C8 74C9 74CA 74CB 24AB1
24AB2 24AB3 24ABA 24ABB 24ABC 74E3 7516 7586 7587 765F
7660 7661 7663 76A9 2502C 77C3 77C4 77C5 77C6 77C7
77C8 77C9 77CA 2530E 25311 25313 77F1 7917 7918 7919
791A 791B 791C 791D 791E 791F 7920 7921 255B9 79B0
79B1 2571D 7A64 7A65 7A66 7A67 7A68 7A69
7A6A 7A6B 258E1 7AC6 7C2C 424F 4260 7C33 7C34 7C35
7C36 7C37 7C38 7C39 7C3A 7C3B 7C3C 7C3D 7C3E 7C3F
7C40 7C41 7C42 25D30 25D43 7CE9 7CEA 7CEB 7CEC 7CED
25F4B 4320 7E4B 7E66 7E68 7E69 7E6A 7E6B 7E6C 7E6D
7E6E 7E6F 7E70 7E72 7E73 7E74 7E75 7E76 7E77 7E78
7E79 7E7A 7F35 7F4A 7F4B 7F83 7F84 7F85 7F86 7FB6
7FB7 7FB8 7FB9 7FFD 7FFE 8078 81CB 4446 81D4 81D5
81D7 81D8 2688A 26893 26926 820B 821A 8261 8262 8263
8264 8265 8276 4545 4546 4551 FA1F 85D1 85D5 85D6
85D7 85D8 85D9 85DA 85DB 85DC 85DD 85DE 85DF 85E0
85E1 85E2 85E3 85E4 85E5 85E6 85E7 85E8 85E9 85EA
85EB 85EC 85ED 85EF 85F0 85F1 85F2 85F3 85F4 85F5
2704B 27052 27053 85F7 85F8 8801 87D5 87F6
87F7 87F8 87F9 87FA 87FB 87FC 87FD 87FE 87FF 8800
8802 8803 8804 8805 8806 8807 8808 8809 880A 880B
880C 880D 880F 881E 8956 8957 8958 8959 895A 895B
895C 895D 895E 895F 8960 8961 8962 8987 8988 89B4
89B5 89B6 89B7 89B8 89F5 89F6 8B3F 8B40 8B41 8B42
8B43 8B44 8B46 8B48 8B49 8B4A 8B4B 8B4C 8B4E 8B4F
8B50 8B51 8B52 8B53 8B54 8B55 8B56 8B57 8B58 8B59
8B5A 8B5B 8B5C 27B06 27B0B 27B18 8C36 8C43 8C77 8C76
8C9A 8D06 8D07 8D08 8D09 8D0A 8D0B 8D0C 8DAA 8DAB
8DAC 8DAD 4826 8E68 8E6A 8E6B 8E6C 8E6D 8E6F 8E70
8E71 8E72 8E73 8E74 8E75 8E76 8E77 8E78 8E79 8E7A
8E7B 8E7C 8E7D 8E7E 8E7F 2814F 2815D 2816F 8E87 8EC2
8EC3 8EC4 8EC5 8F4D 8F4E 8F4F 8F50 8F51
8F52 8F53 8F54 8FAD 8FB4 908A 908B 908C 2863B 913F
9140 9142 4911 91AD 91AE 91AF 91B0 91B1 4949 4951
4953 93A9 93C0 93C1 93C2 93C3 93C4 93C5 93C6 93C7
93C8 93C9 93CA 93CB 93CC 93CD 93CE 93CF 93D0 93D1
93D2 93D3 93D4 93D5 93D6 93D7 93D8 93D9 93DA 93DB
93DC 93DD 93DE 93DF 93E0 93E1 93E2 93E3 93E4 93E5
93E6 93E7 93E8 93E9 93EA 93EB 93EC 93ED 93EE 93EF
93F0 93F1 93F2 93F9 28ADE 28ADF 28AE0 28AE1 28AE2 28AE3
28AE5 28AEA 28AFC 28B0C 9572 957D 95D9 95DA 95DB 95DC
95DD 96B4 4A04 96E1 96E3 9726 9727 9728 9729 972A
972B 972C 972D 2913C 2914D 2915B 9761 97B1 97B2 97B3
97B4 97B5 97B6 97B7 97DC 97DD 97DE 97DF 97F2 97FB
97FC 4AE4 9856 9857 9858 9859 985A 985B
985C 985D 985E 98A4 4B19 98BB 98BC 98BD 98BE 98BF
98C0 4B53 9943 9944 9945 9947 9948 9949 99A6 99A7
29857 4B9D 9A14 9A15 9A16 9A17 9A18 9A19 9A1A 9A1B
9A1C 9A1D 9A1E 9A1F 9A20 9A21 9A22 9A23 9A24 9A25
9A26 9A27 9A28 2992F 9AA5 9AC2 9AC3 9AC5 4C04 4C07
9B09 9B0A 9B0B 9B0C 9B0D 9B0E 9B0F 9B37 9BC5 4C5B
9BD4 9BD5 9BD6 9BD7 9BD8 9BD9 9BDA 9BDB 9BDC 9BDD
9BDE 9BDF 9BE0 9BE1 9BE2 9BE3 9BE4 9BE5 9BE6 9BE7
9BE8 9BE9 9BEA 9BEB 9BEC 9BED 9BEE 9BEF 9BF0 9BF1
9BF2 9BF3 9BF4 9BF5 29E06 29E2D 9BFA 9CD3 9CD4 9CD5
9CD6 9CD7 9CD8 9CD9 9CDA 9CDB 9D61 4CE1 9D66 9D68
9D69 9D6A 9D6B 9D6C 9D6D 9D6E 9D6F 9D70 9D71 9D72
9D73 9D74 9D75 9D76 9D77 9D78 9D79 9D7A
9D7B 9D7C 9D7D 9D7E 9D7F 9D80 9D81 9D82 9D83 9D84
9D85 9D86 9D87 9D88 9D89 9D8A 9D8B 9D8C 9D8D 9D8E
9D8F 9D91 2A087 9E71 9E72 9E78 9E91 9E92 9E93 9E94
9E95 9E96 9E97 9EB3 9EB4 9EC0 4D4C 9EE2 9EE3 9EFC
9F03 9F04 9F17 9F2D 9F40 9F41 9F4D 9F56 9F57 9F58
9F8F 2A6A9
FDD0-2814
34A5 5136 5337 56B1 56B2 56B3 56B4 56B5 56B6 56B7
56B8 56B9 2112F 56BC 58E3 58E4 58E5 214E8 3736 3737
3738 5B40 5B41 5B42 5B43 5B44 5B45 5B46 21910 21911
21912 21915 5B7D 5B7E 5BF6 5DC6 5DC7 5DC8 5DC9 5DCA
5DCC 5E71 2217A 5EEE 5EEF 5EF0 5FC0 5FC1 39A4 61F8
61F9 61FA 2294F 3A70 6513 6514 6515 6516 6517 6518
6519 651A 6585 6586 65DF 3B2B 66E3 66E4 66E5 66E6
66E7 66E8 23300 6727 3C09 3C0A 3C0D 3C11 6AE8 6AE9
6AEA 6AEC 6AEE 6AEF 6AF0 6AF1 6AF2 6AF3 6AF4 6AF5
6AF6 237D5 237D6 237D7 6AF9 702A 3D8F 3D91 702F 7030
7031 7032 7033 7034 7035 7036 7037 7038 7039 703A
703B 703C 703D 703E 703F 7040 7041 24104 7042 3E0A
720B 720F 7210 7211 7212 7213 7214 7216
7217 7218 24473 24487 24488 72A7 72A8 24706 737B 737C
737D 74BA 74CC 74CD 74CE 74CF 74D0 74D1 74D2 24AC0
24AC7 7588 7589 7662 7665 7666 76AA 76AB 3FFA 76BE
76ED 77CB 77CC 77CD 77CE 77CF 77F2 7922 7923 7924
7925 7926 7927 7928 7929 792A 792B 792C 79B2 7A6C
7A6D 7A6E 7A6F 7AC7 7AF6 7AF7 7C43 7C44 7C45 7C46
7C47 7C48 7C49 7C4A 7C4B 7C4C 7C4D 7C4E 7C4F 7C55
42AE 7CEE 7CEF 7CF0 4326 7E7B 7E7C 7E7D 7E7E 7E7F
7E80 7E81 7E82 7E83 261AD 261AE 261B2 7F4C 26335 7FBA
7FFF 8000 802F 8079 807A 807B 807C 81D6 81D9 81DA
81DB 81DC 269B5 8266 8267 8268 8269 4552 4554 4555
4557 455C 8624 85EE 85F6 85F9 85FA 85FB 85FC 85FD
85FE 85FF 8600 8601 8602 8603 8604 8605
8606 8607 8608 8609 860A 860B 860C 860D 860E 860F
8610 8611 8613 8614 8622 27088 270AD 270AE 270AF 8612
861B 8630 4600 4601 8810 8811 8812 8813 8814 8815
8816 8817 8818 8819 8963 8964 8965 8966 8967 8968
89B9 89BA 89BB 89F7 89F8 89F9 4713 4718 8B4D 8B5D
8B5E 8B5F 8B60 8B61 8B62 8B63 8B64 8B65 8B66 8B67
8B68 8B69 8B6A 8B6B 8B6C 8B6D 8B6E 8B6F 8B70 8B71
8B72 27B38 27B39 27B3A 8C51 27C12 8D0D 8D0E 8D0F 8DAE
8E81 8E82 8E83 8E84 8E85 8E86 8E88 8E89 28189 8EC6
8F55 8F56 8F57 8F58 8F59 8F5A 8FAE 908D 9141 9143
91B2 91B3 91B4 91B5 91B6 91B7 91B8 91CB 93F3 93F5
93F6 93F7 93F8 93FA 93FB 93FC 93FD 93FE 93FF 9400
9401 9402 9403 9404 9405 9406 9407 9408
9409 940A 940B 940C 940D 940E 940F 9410 9411 9412
9413 9414 9415 9416 9417 9418 9419 941A 941B 941C
941D 941E 941F 9420 9421 9422 9423 9424 9425 9426
9427 9428 28B13 28B21 28B22 28B2B 28B2C 28B2D 28B2F 28B46
28B4C 28B4E 28B50 942F 943C 9573 9574 95DE 95DF 95E0
95E1 28DB9 96B5 972E 972F 9730 9731 9733 9734 2915E
29170 4A4B 97B8 97B9 97BA 97BB 97DB 97E0 97FD 97FE
97FF 985F 9860 9861 9862 9863 98A5 98C1 98C2 98C3
98C4 994A 994B 994C 994D 994E 9950 9951 9952 9953
9959 99A8 9A29 9A2A 9A2B 9A2C 9A2D 9A2E 9A2F 9A30
9A31 9A32 9A33 9A34 9A35 9A36 9A37 9A38 29947 29948
29949 2995D 2996A 9AA6 9AA7 9AC4 9AC6 9AC7 9AC8 9AC9
9ACA 9ACB 9ACC 9B10 9B11 9B12 9B13 9B2A
9B38 9B50 9BFB 4C6D 9BF6 9BF7 9BF8 9BF9 9BFC 9BFE
9BFF 9C00 9C01 9C02 9C03 9C04 9C05 9C06 9C07 9C08
9C09 9C0A 9C0B 9C0C 9C0D 9C0E 9C0F 9C10 9C11 9C12
9C13 9C14 9C15 9C16 9C17 9C18 9C19 9C1A 9C1B 9C20
29E68 9C40 9CDC 9CDD 9CDE 9CDF 4CED 9D90 9D92 9D93
9D94 9D95 9D96 9D97 9D98 9D99 9D9A 9D9B 9D9C 9D9D
9D9E 9D9F 9DA0 9DA1 9DA2 9DA3 9DA4 9DA5 9DA6 9DA7
9DA8 9DA9 9DAA 9DAB 2A0B9 2A0E1 2A0ED 2A0F3 2A0F8 9DBF
9E79 9E98 9E99 9E9A 9E9B 9EB5 9EC1 2A3A9 4D4D 9EE4
9EE5 9EE6 9EE7 9EE8 9EE9 9EEA 2A45B 9F0D 9F2E 9F2F
9F30 2A5CB 9F59 9F5A 9F5B 9F5D 9F5E 9F5F 9F60 9F61
9F63 9F91
FDD0-2815
34A7 5137 5138 5139 513A 5164 5297 5298 2082C 535B
56BA 56BB 56BD 56BE 56BF 56C0 56C1 56C2 56C3 56C4
56CD 2113B 2113D 21145 21148 2114F 58E6 214FD 5914 3739
5B47 5B48 5B49 2191C 5BF7 5C6C 5DCB 3826 5DCD 5DCF
5DD0 5EF1 5FC2 61FC 61FD 61FE 6511 651B 651C 651D
22E78 6595 66E9 2330A 6707 3C15 6AF8 6AFA 6AFB 6AFC
6AFD 6AFE 6AFF 6B00 6B01 6B02 6B03 6B04 6B05 6B0C
6BB2 7043 7044 7045 7046 7047 7048 7049 704A 704B
704C 704D 704F 7050 2410F 24119 3E0D 7219 721A 721B
244B9 721D 737E 74D3 74D4 74D6 24ACA 24AD1 7517 3FD7
7667 7668 7669 766A 766B 76AC 24FB8 77D0 77D1 77D2
77D3 792D 792E 792F 7930 7931 7932 7933 7934 255D5
255DB 25725 25903 7AC3 7AC8 7AC9 7C56 426A
7C50 7C51 7C52 7C53 7C54 7CF2 7E84 7E85 7E86 7E87
7E88 7E89 7E8A 7E8B 7E8C 7E8D 7E8E 7E8F 7E90 7F4D
7FBB 7FBC 8030 81DD 826A 4562 85D4 8615 8616 8617
8618 8619 861A 861C 861D 861E 861F 8620 8621 8623
8625 8626 8627 8628 8629 862A 862B 862D 862E 862F
270CD 270F8 27109 2710C 4602 881A 881B 881C 881D 881F
8820 8821 8822 8823 8824 8829 882B 884A 8969 896A
896B 896C 896D 896E 89BC 89BD 89FA 8B45 8B73 8B74
8B75 8B76 8B77 8B78 8B79 8B7A 8B7B 8B7C 8B7D 27B48
8D10 8D11 8D12 8D13 8D14 8D63 8DAF 8DB0 8E8A 8E8B
8E8C 8E8D 8E8E 8E8F 281AF 281BC 8EC7 8F5B 8F5C 8F5D
8F5E 8F5F 8FAF 908E 9144 9145 9146 91B9 91BA 91BB
4965 93F4 9429 942A 942B 942C 942D 942E
9430 9431 9432 9433 9434 9435 9436 9437 9438 9439
943A 943B 943D 943E 943F 9440 9441 28B63 28B64 28B65
28B66 28B6C 28B8F 95E2 95E3 95E4 95E5 95E6 96E4 9732
9735 9736 9737 9738 9739 973A 973B 9767 97BC 97BD
97BE 97BF 97E1 97E2 2943F 9864 9865 9866 9867 9868
98A6 98C5 98C6 98C7 98C8 98C9 98CA 98DC 994F 9956
9957 9958 99A9 9A39 9A3A 9A3B 9A3C 9A3D 9A3E 9A3F
9A40 9A41 9A42 9A43 9A44 9A45 9A46 9A47 9ACD 9ACE
9ACF 9B14 9B15 9B16 9B17 9B18 9B39 9B3A 9B51 9B52
9B53 9B54 4C7D 9C1C 9C1D 9C1E 9C1F 9C21 9C22 9C23
9C24 9C25 9C26 9C27 9C28 9C29 9C2A 9C2B 9C2C 9C2D
9C2E 9C2F 9C30 29EAC 4CA3 4CA4 9CE0 9CE1 9CE2 9CE3
9DAC 9DAD 9DAE 9DAF 9DB0 9DB1 9DB2 9DB3
9DB4 9DB5 9DB6 9DB7 9DB8 9DB9 9DBA 9DBB 9DBC 9DBD
9DBE 9DC0 9DC1 9DC2 9DC3 9DC4 9DC5 9DC6 9DC7 9DC8
9DC9 9DCA 9DCC 9DCD 9DCE 9DCF 2A0FE 2A107 2A123 9E7A
9E7B 9E9C 9E9D 4D4E 9EEB 9EEC 9EED 9EEE 9EEF 9F05
9F18 9F19 9F1A 9F1B 9F31 9F4E 9F5C 9F64 9F65 9F66
9F67 9F68 9F69 2A601 9F92 9F9D 9FA1
FDD0-2816
4EB9 513B 513C 20465 20979 3618 56C5 56C6 56C7 56C8
56C9 56CA 56CB 56CE 571D 5971 373A 5B4A 5B4B 5B4C
21922 21927 5B7F 5DCE 5DD1 5DD2 5DD3 5DD4 5DD5 5DD7
5EF2 5F4E 5F72 61FF 6202 22967 2296B 6235 651E 651F
6520 6521 6522 6524 6526 6527 22E8B 23033 3B2C 3B2D
3C18 6AF7 6B06 6B07 6B08 6B09 6B0A 6B0B 6B0D 6B0E
6B61 6C0D 7051 7052 7054 7055 7056 7057 7058 2413F
24140 24144 721C 721E 721F 7220 72A9 737F 7380 74D5
74D7 74D8 74D9 74E4 758A 766C 766D 766E 24F0E 76AD
7935 255E0 79B3 79B4 7A70 7A71 7ACA 7AF8 7C57 7C58
7C59 7C5A 7C5B 7C5C 7C5D 7C5F 7C60 7C61 7CF1 7CF4
432B 7E91 7E92 261DD 7F4E 7F4F 26261 7F87 8031 8032
807D 807E 81DE 81DF 269FA 826B 4567 456A
862C 8632 8633 8634 8635 8636 8637 2710D 27126 27127
4606 8825 8826 8827 8828 882A 882C 896F 8970 8971
8972 89BE 89BF 2789D 89FB 89FC 4720 8B7E 8B7F 8B80
8B81 8B82 8B83 8B84 8B85 8B86 8C44 8D15 8D16 8D17
8D18 8E90 8E91 8E92 8E93 8E94 8E95 8E96 8E97 8E9A
8F60 8F61 8F62 9147 9148 496A 496D 9442 9443 9444
9445 9446 9447 9448 9449 944A 944B 944C 944D 944E
944F 9450 9451 9452 9453 9454 9467 28B99 28B9C 28B9D
9575 9576 957E 95E7 973C 973D 973E 973F 9740 2919C
97C0 97C1 97C2 97C3 97E3 9869 986A 986B 98CB 9954
9955 995A 995B 297D4 9A48 9A49 9A4A 9A4B 9A4C 9A4D
9A4E 9A4F 9A50 9A51 9A52 9A53 9A54 9A55 2999D 9AD0
9AD2 9ADD 9B1D 4C0E 9B19 9B1A 9B1B 9B1C
29BD5 9B2B 9B3B 9B55 9B56 4C81 9C31 9C32 9C33 9C34
9C35 9C36 9C37 9C38 9C39 9C3A 9C3B 9C3C 9C3D 9C3E
9C3F 9C41 9C42 9C43 9C44 9C45 9C46 9C47 9C48 9DE0
29EC3 9C49 9CE4 9DCB 9DD0 9DD1 9DD2 9DD3 9DD4 9DD5
9DD6 9DD7 9DD8 9DD9 9DDA 9DDB 9DDC 9DDD 9DDE 9DDF
2A133 2A134 2A150 9DE9 9DF5 9E73 9E74 9E9E 2A2DF 9EB6
9ED0 9EF0 9EF1 9F32 9F33 9F34 9F35 9F42 4D9C 9F6A
9F6B 9F6C 9F93 9F94 9F95 9FA2
FDD0-2817
513D 5299 529A 20ACD 361A 56CC 56CF 56D0 58E7 58E8
21582 5972 5B4D 5DD6 5DD8 5DDA 5F4F 6200 6201 6203
6204 6523 3A77 6525 6528 6529 652A 652B 6596 3B2E
66EA 66EB 66EC 6B0F 6B10 6B11 6B12 2383A 6BCA 7053
7059 705A 705B 705C 2414E 24155 24156 24157 2415C 2415F
7221 7222 244BC 244CE 244D3 244D6 7381 7382 7383 74DA
24ADF 766F 7670 77D4 7936 7937 79B5 7C5E 4274 7C62
7C63 7C64 7C65 7C66 7C67 7C68 7CF5 7E93 7E94 7E95
7E96 81E2 268C7 826C 4577 8631 8638 8639 863A 863B
863C 863D 863E 863F 8640 8641 2721B 8834 882D 882E
882F 8830 8831 8832 8833 8973 8974 8976 8989 89FD
89FE 8B87 8B88 8B89 8B8A 8B8B 8B8C 8B8D 8B8E 8B8F
8B90 8C45 8D19 8D1A 8DB1 8E98 8E99 8E9B
8E9C 2829B 8F63 8F64 908F 9090 91BC 4972 9455 9456
9457 9458 9459 945A 945B 945C 945D 945E 945F 9460
9461 9462 9463 9464 9465 9466 28BC2 28BC5 28BD4 28BD7
28BD9 28BDA 4A35 9741 291A8 9768 97C4 97C5 9800 986C
986D 986E 986F 98A7 995C 99AA 9A56 9A57 9A58 9A59
9A5A 9A5B 9A5C 9AD1 9AD3 9AD4 9ADE 9B1E 9B1F 9B20
9C4A 9C4B 9C4C 9C4D 9C4E 9C4F 9C50 9C51 9C52 9C53
9C54 9C55 9C56 9C57 9C58 9C59 9C5A 9C5B 29EF8 9C6A
4D00 9DE1 9DE2 9DE3 9DE4 9DE5 9DE6 9DE7 9DE8 9DEA
9DEB 9DEC 9DED 9DEE 9DEF 9DF0 9DF1 9DF2 9DF3 9DF4
9DF6 9DF7 9DF8 9DFB 9DFC 2A192 2A193 2A1AB 9E9F 9EC2
9EF2 9EF3 9EF4 9F06 9F07 9F1C 9F36 9F37 9F38 9F39
9F43 9F44 9F4F 9F6D 9F6E 9F6F 9F70 9F71
2A632
FDD0-2818
513E 204D7 56D1 56D2 56D3 21180 3681 58E9 5B4E 5B4F
5C6D 5DD9 22980 652C 652D 66ED 66EE 6B13 6B14 6B15
705D 705E 705F 7060 7061 7223 74DB 74E5 7671 7672
24FC2 77D5 77D7 77D6 40FA 7938 79B6 79B7 7A73 7A72
4276 7C6A 7E97 7F50 7F88 7F89 826D 8277 8643 8645
27164 27165 8835 8836 8837 8838 8839 883A 884B 8862
8975 8977 277CC 8B91 8B92 8B93 8B94 8B95 8B96 8D1B
8E9D 8E9E 8E9F 8EA0 8EC8 91BD 91BE 91BF 91C0 91C2
9468 9469 946A 946B 946C 28BE7 28BE8 28BE9 28BEA 28BEB
28BEC 28BF5 96E5 96E6 9742 9743 9744 9745 9746 9747
9748 97C6 97C7 97C8 97E4 97E5 29448 9870 995D 9A5D
9A5E 9A5F 9AD5 9B21 9B22 9B2C 9B2D 9B57 9B58 9B59
29D3E 9C5C 9C5D 9C5E 9C5F 9C60 9C61 9C62
9C63 9C64 9C65 9C66 9C67 9C69 9C6B 29F23 9C70 9DFA
4D09 9DF9 9DFD 9DFE 9DFF 9E00 9E01 9E02 9E03 9E04
9E05 9E06 9E07 9E08 9E09 9E0A 2A1B4 9E7C 9E7D 9EA0
9F1E 9F45 9F46 9F72 9F73 9F74 9F75 9F76 9F77
FDD0-2819
56D4 56D5 21187 58EA 5EF3 6205 6206 652E 65B8 3B2F
66EF 6B16 6B17 6B18 6B19 6B1A 6B1B 6B1D 7062 7063
7224 7225 7226 72AA 24D06 77D8 77D9 77E1 7939 7C69
7C6B 7C6C 7C6D 7C6E 7CF6 7E98 7E99 7E9A 7E9B 81E0
81E1 8642 8646 8647 8648 8649 883B 27574 8978 8979
897A 897B 897C 898A 89C0 89FF 8B97 8B98 8B99 8C52
8C9B 8D1C 27E4D 8EA1 8EA2 8EA3 8EA4 8EA5 91C1 946D
946E 946F 9470 9471 9472 9473 28BFF 28C03 9749 9871
9872 995E 995F 9995 4BBD 299C3 299C9 9AD6 9B23 9C68
9C6C 9C6D 9C6E 9C6F 29F30 9E0B 9E0C 9E0D 9E0E 9E0F
9E10 9E11 9E12 2A1DF 9EA1 9ECC 9EF5 9F08 9F09 9F1D
9F1F 9F47 9F78 9F79 9F7A 9F7B 2A64A 9FA3
FDD0-281A
3536 571E 373B 5F60 6B1C 6C0E 704E 7064 7066 24AE2
7673 77DA 7C6F 7C70 25E0E 7CF3 8644 866A 883C 8B9A
8B9B 27E4F 8DB2 8EA6 8EA7 91C3 91C4 9474 9475 9476
9477 9478 9479 947A 28C09 28C1C 28C1D 974A 97C9 4BBE
9A60 9A61 9A62 9A63 9A65 9AD7 9C71 9C72 9C73 9C74
9C75 9C76 9E13 9E14 2A1F5 9EF6 9F0A 2A65B 9FA4 9FA5
FDD0-281B
7065 7067 7068 24177 2417A 72AB 7CF7 7E9C 7E9D 864A
883D 883E 883F 897D 8B9C 8B9D 8B9E 8C53 8C9C 8EA9
8EAA 8EC9 8F65 91C5 947B 947C 947D 947E 28C23 28C26
974B 974C 974D 974E 9873 9874 98CC 98CD 98DD 9960
9961 99AB 9A64 9A66 9A67 9B24 9B2E 9B30 9C77 9C78
9E15 9E16 9E17 9EF7 9F48
FDD0-281C
56D6 6207 22EB3 2331F 6B1E 6B1F 7227 24AE9 3FDC 7674
27175 864C 8C54 8EA8 28207 947F 9480 9481 9482 28C2B
28C30 96E7 4BC0 9A68 9A69 9E18 9E19 9E1A 2A220 9EA2
9EF8 9F3A 9F7C 9F7D 9F9E
FDD0-281D
7228 7E9E 864B 8B9F 4979 9483 9484 974F 9A6A 9B31
9C79 9E1B 9E1C 9EB7
FDD0-281E
53B5 7675 4190 7C71 4585 28C39 97CA 9962 9A6B 29C73
9C7A 9E1D 9E1E 2A233 4D91
FDD0-281F
7069 275A3 4D10 9EA3
FDD0-2820
706A 7C72 28C3B 9F96
FDD0-2821
2193B 7229 9C7B 9EA4 9F97
FDD0-2823
9F7E
FDD0-2824
9F49
FDD0-2827
9750
FDD0-2830
9F98
__END__

=head1 NAME

Unicode::Collate::CJK::Stroke - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::Stroke;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::Stroke::weightStroke
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::Stroke> provides C<weightStroke()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's stroke ordering.

=head1 CAVEAT

The stroke ordering includes some characters that are not
CJK Unified Ideographs and can't utilize C<weightStroke()>
for collation. For them, use C<entry> instead.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                                                                                                                                                                         usr/share/perl/5.20.2/Unicode/Collate/CJK/Zhuyin.pm                                                 0100644 0000000 0000000 00000334041 12744441327 020067  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Zhuyin;

use 5.006;
use strict;

our $VERSION = '0.94';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt if $c !~ /-/;
	$wt++;
    }
}

sub weightZhuyin {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
FDD0-3105
516B 4EC8 6252 6733 7390 593F 5C9C 82AD 5CC7 67ED
75A4 54F5 5DFC 634C 7C91 7F93 8686 91DB 91DF 3B6D
8C5D 9C83 4C3E
53D0 72AE 629C 577A 59AD 62D4 70A6 7679 80C8 8307
83DD 8A59 8DCB 8EF7 98B0 58A2 9B43 9F25
628A 94AF 9200 9776
575D 5F1D 7238 57BB 8019 8DC1 9C85 9C8C 43AC 9B8A
8987 77F2 9738 58E9 705E 6B1B
5DF4 53ED 5427 7B06 7D26 7F62 9B5E 7F77
7676 5E17 62E8 6CE2 7677 73BB 525D 5265 54F1 76CB
7835 94B5 997D 7D34 7F3D 889A 88B0 83E0 7886 9262
50E0 5D93 64A5 64AD 9911 9B81 8E73 9A4B 9C4D
4EE2 4F2F 72BB 8091 9A73 5E1B 72DB 74DD 4FBC 52C3
80C9 82E9 4EB3 632C 6D61 74DF 79E1 90E3 94B9 94C2
3A8D 3DBF 3E40 3F0E 8116 8236 88AF 535A 6E24 88B9
9E41 613D 640F 733C 8467 9238 9251 998E 50F0 3B0D
717F 7254 7B94 824A 4B6F 999B 99C1 8514 8E23 92CD
9548 464F 294D0 999E 99EE 8C70 2836D 5697 61EA 3A67
3B27 7C19 894F 939B 993A 9D53 72A6 7921 9AC6 9AC9
6B02 7934 896E 946E
8DDB 7BA5 7C38
5B79 6A97 7CEA 8B52 8617
2E8A 535C 5575 8421 818A
6300 63B0 64D8
767D
767E 4F70 67CF 6822 636D 74F8 7CA8 7D54 6446 64FA
896C
5E8D 62DD 8D25 62DC 6557 7308 7A17 86FD 7CBA 3525
8D01 97DB
7AE1 85AD
5351 676F 9642 76C3 686E 60B2 63F9 6911 7891 7986
9E4E 9303 85E3 9D6F
5317 3933 9273
8D1D 5B5B 72C8 8C9D 5907 6601 726C 90B6 80CC 82DD
94A1 4FFB 500D 36DD 6096 72FD 90E5 505D 5079 3AF2
6896 73FC 88AB 5099 60EB 7119 7432 8EF0 8F88 9101
50C3 6102 3ED7 789A 3E22 7295 84D3 8A96 9781 8919
8F29 92C7 9AB3 618A 7CD2 97B4 943E
5457 5504 7999
52F9 5305 5B62 67B9 80DE 82DE 7B23 7172 9F85 8912
8554 95C1 8943 9F59
7A87 5AD1 96F9 420F 8584 2688A 3FFA
5B9D 6009 9971 4FDD 9E28 5BB2 73E4 5821 5822 5AAC
5BDA 8446 98FD 99C2 9CF5 7DE5 8913 9D07 8CF2 4B4B
5BF3 5BF6 28C26 974C 4D10 28C3B
52FD 62A5 62B1 8C79 8DB5 94C7 86AB 888C 5831 83E2
924B 9C8D 9764 66B4 9AB2 9AF1 8663 9B91 5124 66D3
7206 5FC1 9464 9E14
4F68 85F5
6273 653D 73ED 822C 9881 6591 642C 6592 9812 7622
9CFB 4232 878C 8929 764D 8FAC
5742 5C85 962A 6604 677F 7248 74EA 94A3 7C84 8228
9211 8742 9B6C 95C6
529E 534A 4F34 5762 59C5 6011 62CC 7ECA 67C8 79DA
6E74 7D46 9261 977D 8FA6 74E3
626E 8781
5954 6CCD 8D32 681F 7287 951B 931B
672C 82EF 5959 755A 7FC9 694D
574B 574C 5034 6379 6873 6E00 7B28 26BC0 9029 64AA
7356 8F3D
90A6 57B9 5E2E 6360 6D5C 6886 90AB 5E47 5E5A 7E0D
5E6B 97A4
7ED1 7D81 699C 7253 8180 9AC8
3B4B 73A4 868C 508D 68D2 68D3 8C24 585D 6412 7A16
84A1 872F 78C5 9551 8255 8B17 938A
4F3B 794A 595F 5D29 7D63 958D 50B0 5D6D 75ED 5623
7DB3
752D
57C4 57F2 7EF7 7423 742B 83F6 7E43 979B
6CF5 8FF8 902C 5874 955A 750F 295F4 4B70 8E66 93F0
882F
63FC
5C44 506A 6BF4 6945 903C 8C4D 8795 9CBE 939E 9D56
9C0F
8378 9F3B
5315 6BD4 3832 5936 673C 4F4A 5421 59A3 6C98 7595
5F7C 67C0 79D5 4FFE 7B14 7C83 822D 555A 3A8F 7B46
7B84 805B 9119 8C8F
5E01 5FC5 6BD5 95ED 4F56 3629 5752 5E87 8BD0 3620
59BC 602D 6036 39D9 6788 7540 90B2 54D4 67F2 6BD6
73CC 75AA 82FE 6BD9 72F4 7B13 7C8A 835C 94CB 965B
5A62 5EB3 655D 6890 7562 8890 9587 9589 581B 5F3B
5F3C 610A 610E 6E62 7695 7B5A 8406 8A56 8CB1 8CC1
8D51 6ED7 714F 75F9 75FA 7764 8177 870C 8DF8 924D
959F 98F6 55F6 5E63 5F0A 5F43 6EED 78A7 7B85 7B86
7DBC 84D6 88E8 999D 6F77 719A 7358 7359 3EEB 84FD
853D 480B 912A 99DC 9AF2 58C1 5B16 5EE6 3D65 7BE6
7F7C 89F1 9B85 6583 6FDE 7BF3 7E2A 81C2 859C 907F
9946 5970 74A7 8E55 9128 9AC0 7E74 895E 93CE 4557
8963 8E83 8E84 97B8 97E0 8D14 9434 9A46 9B53 9DDD
9DE9 9F0A
5302 841E 5E64 5B36 8945
618B 87DE 9CD6 9C49 9F08 864C 9F9E
5225 522B 5487 43DF 8382 86C2 5FB6 8952 8E69
762A 765F 3FDC
5F46 4318
706C 6753 6807 98D1 9A89 9ADF 6DF2 5F6A 730B 813F
98A9 5882 5E56 647D 6EEE 98AE 9AA0 6A19 719B 8198
8508 762D 78E6 9556 98D9 98DA 5126 98B7 700C 8B24
7202 81D5 85E8 8D06 93E2 7A6E 9573 98C6 98C7 98C8
9A43 9463 4BBD 9A6B
8868 5A4A 88F1 8AD8 9336 6AA6 893E
4FF5 9CD4 9C3E
98CA
8FB9 8FBA 782D 7B3E 63D9 7335 7F16 7178 7251 7502
7BAF 7DE8 8759 9089 937D 9CCA 97AD 908A 9BFE 9BFF
7C69
8D2C 6241 7A86 533E 60FC 8CB6 8439 78A5 7A28 7CC4
890A 9D18 85CA
535E 5F01 5325 5FED 6283 6C73 6C74 91C6 53D8 73A3
82C4 4FBF 5909 662A 3B53 898D 5FA7 7F0F 904D 959E
8FA1 7DF6 8251 8FA7 8FA8 8FA9 8FAB 8FAE 8FAF 8B8A
5CC5 709E
6C43 90A0 73A2 780F 5BBE 5F6C 68B9 50A7 658C 6915
6EE8 3EDE 7F24 69DF 7478 8C69 8CD3 8CD4 9554 5110
6FD2 6FF1 8668 8C73 6AB3 74B8 7015 9726 7E7D 944C
986E
6448 6BA1 8191 9AE9 64EF 9B02 6BAF 81CF 9ACC 9B13
9AD5 9B22
6C1E 6FF5
51AB 4ECC 4ED2 6C37 51B0 5175 63A4
4E19 6032 62A6 79C9 90B4 9643 661E 663A 67C4 70B3
82EA 997C 772A 7A89 3A00 86C3 6452 7980 7A1F 9235
927C 9905 9920 979E
5E76 34C8 4E26 4F75 5E77 5EB0 5002 6824 75C5 7ADD
504B 50A1 5BCE 68C5 8A81 9BA9 9750
57AA 9786 92F2
5CEC 5EAF 6661 900B 923D 8AA7
9CEA 8F50 91AD
535F 248F0 8865 54FA 6355 55B8 88DC 9D4F
4E0D 5E03 4F48 5425 6B65 5498 3635 6016 62AA 6B68
6B69 3CCD 67E8 949A 52CF 57D4 57D7 6091 6357 94B8
57E0 8379 90E8 74FF 8E04 8500 90F6 9914 9922 7BF0
7C3F
FDD0-3106
5991 25419 241B5 7685 8DB4 8225 556A 8469
6777 722C 63B1 7436 7B62 6F56
5E0A 5E15 6015 8899
948B 5761 5CA5 6CCA 9887 6E8C 9255 9817 93FA
5A46 5619 8522 9131 76A4 8B08 6AC7
53F5 5C00 94B7 7B38 99CA
5CB6 7087 6540 6622 6D26 73C0 8FEB 70DE 7834 7836
91D9 7C95 84AA 9B44 9197 4A96
6CFC 6872 6F51
62CD
4FF3 5F98 6392 7305 68D1 724C 8F2B 7C30 7C32 72A4
5EF9
54CC 6D3E 3B5B 6E43 848E 9383
5478 36B0 600C 80A7 67F8 80DA 8843 9185
962B 57F9 966A 6BF0 8D54 952B 88F4 88F5 8CE0 99CD
4FD6
4F02 6C9B 4F69 5E14 59F5 65BE 65C6 6D7F 73EE 914D
7B29 4283 8F94 99B7 5D8F 9708 8F61
84DC
629B 62CB 812C
5228 5486 5789 5E96 72CD 70B0 722E 530F 888D 8EF3
9784 9E83 9E85
8DD1
5945 6CE1 70AE 75B1 76B0 7832 9EAD 791F 792E
8422 891C
5256 5A1D
6294 6299 634A 638A 88D2 7B81 9307
5485 54E3 5A44 7283 5ECD
3434 7705 7819 7568 6F58 6500
723F 6D00 76D8 8DD8 5ABB 5E4B 642B 69C3 84B0 76E4
78D0 7E0F 78FB 8E52 23066 700A 87E0 8E63 939C 97B6
51B8 5224 6C9C 62DA 6CEE 708D 53DB 7249 76FC 7554
8041 88A2 8A4A 6EBF 9816 92EC 897B 947B
9D65
55B7 5674 6B55
74EB 76C6 6E53 8450
5460 7FF8
55AF
4E53 6C97 80EE 96F1 6EC2 8196 4A26 9736
5390 5E9E 5396 65C1 9004 823D 5ACE 5FAC 249ED 8783
9CD1 9F8E 9F90
55D9 802A 89AB
7090 80A8 80D6
5309 36C1 6026 62A8 6072 39F8 7830 6888 70F9 7851
8EEF 959B 6F30 562D 6F8E 78DE
8283 670B 7AFC 5017 6337 580B 5F38 8391 5F6D 68DA
6916 787C 7A1D 9E4F 5873 6189 69F0 6A25 71A2 84EC
28083 8F23 7BE3 81A8 930B 97F8 9AFC 87DA 87DB 9B05
4D36 97FC 9D6C 9A2F 7E84 9B14 945D
6367 6DCE 768F 527B
63BD 692A 78B0 8E2B
7BF7
4E15 4F13 4F3E 6279 7EB0 576F 62AB 62B7 708B 72C9
90B3 7812 20731 6082 79DB 79E0 7D15 94CD 65C7 7FCD
801A 8C7E 9208 921A 9239 925F 9294 5288 78C7 99D3
9AEC 567C 930D 9B7E 9B8D 61B5 7914 7915 9739
76AE 34DF 9630 5CAF 6787 6BDE 72D3 80B6 8298 6BD7
6BD8 75B2 868D 5564 57E4 5D25 26A2D 86BD 86BE 8C7C
2821A 90EB 9674 7137 7435 813E 8157 9C8F 7F74 818D
8731 9B6E 58C0 7BFA 87B7 8C94 9D67 7F86 6707 9F19
5339 5E80 758B 4EF3 572E 82C9 8134 75DE 92A2 8AC0
9D04 64D7 567D 7656 4C26 56AD
5C41 6DE0 6E12 63CA 91FD 5AB2 5AD3 7765 8F9F 6F4E
7A2B 50FB 6FBC 568A 7513 4444 7588 8B6C 95E2 9DFF
9E0A
698C
6C15 6487 22CC2 6486 66BC 77A5
4E3F 82E4 9405
5AF3
527D 6153 7F25 98D8 65DA 7FF2 87B5 72A5 98C3 98C4
9B52
5AD6 74E2 7AC2 85B8 95DD
6B8D 5F6F 779F 7BFB 7E39 91A5 76AB 9860
7968 50C4 52E1 560C 5FB1 6F02 3B13
56E8 504F 5AA5 728F 7BC7 7FE9 9342 9DA3
9A88 80FC 8141 6944 6969 8CC6 8DF0 8ADA 8E41 99E2
9ABF 9A08
8991 8C1D 8CB5 8ADE
7247 9A97 9A17 9A19
9B78
59D8 62FC 3866 7917 7A66 99AA 9A5E
73AD 8D2B 5A26 8CA7 7415 5AD4 9891 983B 5B2A 7371
85B2 56AC 77C9 8819 98A6 9870
54C1 6980
725D 6C56 8058
4E52 7539 4FDC 5A09 6D84 782F 8060 8275 7AEE 9829
29A4D
5E73 8BC4 51ED 546F 576A 6CD9 5C4F 5E21 67B0 6D34
73B6 80D3 82F9 90F1 3EB8 3EC2 8353 5C5B 5E32 6DDC
74F6 86B2 5E48 7129 7F3E 840D 86E2 8A55 7501 84F1
8EFF 9C86 51F4 4202 617F 7BB3 8F27 6191 9B83 6A98
7C08 860B
5CBC 5840
4EC6 6534 6251 9660 5657 64B2 6F7D 64C8 9BC6
3EAA 530D 812F 8386 83D0 83E9 8461 50D5 84B1 84B2
917A 58A3 735B 749E 6FEE 77A8 7A59 423B 9564 258C8
7E80 8965 93F7
5724 6734 5703 6D66 70F3 666E 6EA5 8C31 8AE9 6A38
6C06 6A8F 9568 8B5C 8E7C 9420
94FA 8216 8217 92EA 3B25 7011 66DD
5DEC 5DED 99C7 8D0C
FDD0-3107
5463
5988 5B56 5ABD 5B24 5B37
9EBB 75F2 7298 8534 87C7
9A6C 3437 739B 7801 8682 99AC 6EA4 746A 78BC 879E
93B7 9C22 9DCC
72B8 6769 7943 9581 9A82 551B 508C 7341 561C 3A38
69AA 7770 79A1 7F75 372B 99E1 7923 9B15
4E87 5417 55CE 561B 5AF2 9064 87C6
6478
8C1F 998D 5AEB 9EBD 6469 6479 6A21 819C 6A45 78E8
7CE2 56A4 64F5 8B28 56A9 56B0 9943 8611 5298 9ACD
9B54 40FA 995D
62B9 61E1 4A4B
672B 52B0 573D 59BA 5E13 6B7E 6B7F 6B81 6CAB 248FB
5E1E 6629 67BA 8309 964C 551C 768C 771C 773F 781E
79E3 773D 7C96 7D48 8388 83AB 6E50 86E8 8C83 8C8A
55FC 587B 5BDE 6F20 734F 84E6 9286 977A 5AFC 66AF
3C73 9ED9 7790 9546 9B69 58A8 763C 7799 9ED8 700E
87D4 8B29 8C98 7205 85E6 93CC 7933 7E86 9A40 8031
5E85 603D 5C1B 9B79 9EBF
4E48 9EBC 5692 569C 6FF9 7666
57CB 3725 85B6 973E
4E70 836C 8CB7 562A 8552 9DF6
52A2 4F45 58F2 8FC8 9EA6 5356 8109 8108 9EA5 8847
52F1 8CE3 9081 9721 9722 2A133
5445 5746 6C92 6CA1 679A 73AB 6802 7709 82FA 5A12
8104 6885 73FB 8122 8393 5833 5A92 5D4B 6E44 6E48
7338 7742 90FF 6963 6973 7164 7442 847F 587A 69D1
7996 9176 9545 9E5B 92C2 9709 7A48 5FBE 9387 77C0
6517 9DA5 862A 9EF4
6BCE 6BCF 51C2 7F8E 6334 6D7C 5A84 5D44 6E3C 5ABA
815C 9541 5B0D 71D8 9382 9EE3
59B9 62BA 6CAC 65C0 6627 3B51 771B 7959 8882 5A9A
5BD0 75D7 8DCA 715D 9B3D 7778 97CE 7BC3 875E 9B45
8EBE
732B 8C93
6BDB 77DB 6786 7266 8305 8306 65C4 7F5E 515E 8EDE
9155 5825 6E35 28968 951A 9AE6 5AF9 6C02 729B 8765
9AF3 87CA 9328 9D9C
5187 536F 5918 4E6E 623C 36B9 5CC1 6CD6 6634 94C6
7B37 84E9
5183 7683 5190 82BC 5192 67D5 770A 8302 8D38 8004
88A4 8992 5AA2 5E3D 8CBF 6117 6693 6959 6BF7 7441
843A 7780 8C8C 911A 8750 912E 61CB
54DE
725F 4F94 52BA 3B4C 6048 6D20 7738 8C0B 86D1 7F2A
8E0E 927E 8B00 77B4 7E46 936A 9D3E 9EB0
67D0 26CD1
5ADA 989F
59CF 6097 34BC 86EE 50C8 8C29 6172 9992 6A20 7792
779E 9794 25C91 8B3E 9945 9CD7 9862 9B17 9B18 9C3B
883B
5C58 6E80 774C 6EE1 6EFF 87A8 87CE 8954 93CB 77D5
66FC 3B05 5881 5E54 6162 6471 6F2B 734C 7F26 9124
69FE 71B3 8504 8513 3862 6FB7 9558 7E35 93DD 2914D
4555 2414E
8630
95E8 626A 73A7 9494 9580 9585 636B 83DB 748A 9346
4EB9 864B
95F7 7116 60B6 66AA 71DC 61D1 61E3
4EEC 5011 691A
7264
5402 5FD9 6C52 9099 5C28 6757 6767 8292 6C13 76F2
7B00 54E4 5A0F 5EAC 3936 607E 6D5D 72F5 832B 727B
3ECA 91EF 94D3 75DD 786D 86D6 420D 23677 92E9 99F9
29DF6
83BD 7865 833B 83BE 58FE 6F2D 3B12 87D2 880E
753F 867B 51A1 8394 840C 8420 4004 76DF 8499 8771
511A 6A57 750D 77A2 8544 9133 5E6A 61DE 66DA 6FDB
9138 6726 6AAC 6C0B 4443 4445 9BCD 77C7 791E 9E72
8268 8609 77D2 973F 9740 995B 986D 9F06 9E0F
52D0 731B 74FE 4045 9530 824B 8722 9333 61DC 7374
61F5 9BED 8813
5B5F 20D7C 68A6 6E95 5922 5923 44DD 9725 3734
63B9 64DD
54AA 772F 7787
519E 5F25 7F59 7962 8FF7 7315 8C1C 8A78 84BE 5F4C
64DF 7CDC 7E3B 8B0E 919A 9E8A 9E8B 79B0 9761 3737
7030 737C 9E9B 6202 6520 74D5 957E 7222 4577 863C
91BE 91BF 9E0D 91C4
7C73 8288 4F8E 6CB5 7F8B 5F2D 6D23 6549 772B 8112
6E33 845E 92A4 851D 6FD4 5B4A 7056
5196 7CF8 6C68 6C95 5B93 6CCC 89C5 5CDA 5BBB 7955
79D8 5BC6 6DE7 6DFF 8993 8994 5E42 8C27 5853 5E4E
3A20 899B 5627 6993 6EF5 6F1E 7190 871C 6A12 8524
9F0F 51AA 5E66 6FD7 8B10 6AC1 7C1A 85CC 7F83
4E5C 5400 54A9 54F6 5B6D
706D 70D5 8995 6423 6EC5 8511 9D13 7BFE 858E 5E6D
61F1 6AD7 881B 884A 9456 9C74
55B5
82D7 3464 5A8C 63CF 9E4B 7784 7DE2 9D93 9C59
676A 7707 79D2 6DFC 6E3A 7F08 7BCE 7DF2 85D0 9088
5999 5E99 7385 7AD7 5EBF 5EDF
8C2C 8B2C
5B80 8287 7720 5A42 7EF5 5A94 68C9 7DBF 7DDC 81F1
8752 5B35 6AB0 6ACB 77C8 77CA 77CF
4E0F 6C45 514D 6C94 9EFE 52C9 7704 5A29 3743 506D
5195 52D4 6E11 5595 6110 6E4E 7F05 7D7B 817C 8442
9EFD 3EF0 7DEC 9EAB 6FA0 9BB8
9763 9762 7CC6 9EAA 9EBA 9EB5
6C11 59C4 5CB7 5FDE 600B 65FB 65FC 73C9 76FF 7807
82E0 7F60 5D0F 636A 7418 7F17 656F 7449 75FB 7888
9231 7DCD 4AB8 7DE1 9309 9D16 9372
76BF 51BA 5221 95F5 62BF 6CEF 52C4 6543 95FD 60AF
654F 7B22 60FD 6E63 9594 610D 3B06 668B 95A9 50F6
615C 61AB 6F63 7C22 2704B 9CD8 8820 9C35 2A134
578A 7B3D
540D 660E 9E23 6D3A 7700 51A5 8317 6719 7733 94ED
5AC7 6E9F 733D 910D 669D 69A0 84C2 9298 9CF4 7791
879F 89AD 4AE4
4F72 59F3 51D5 614F 9169
547D 6927 8A7A
63B5
6BEA 58B2 6C01
6BCD 4EA9 7261 5776 59C6 5CD4 7273 7546 7552 80DF
755D 755E 782A 756E 27FF9 20E96 9267 8E07
6728 4EEB 6730 76EE 6C90 72C7 7091 7267 82DC 6BE3
869E 94BC 83AF 96EE 52DF 3708 6958 7766 926C 5893
5E55 5E59 6154 6155 66AE 8252 9702 7A46 7E38 97AA
51E9 62C7
FDD0-3108
53D1 6CB7 767A 50A0 767C 5F42 9166 91B1
4E4F 4F10 59C2 57A1 6D4C 75BA 7F5A 9600 6830 781D
8337 7B4F 7782 7F70 95A5 7F78 6A43 85C5
4F71 6CD5 704B
73D0 743A 9AEA 9AEE 855F 27B0B
9345
4ECF 5772
68BB
98DE 5983 975E 98DB 5561 5A53 6E04 7EEF 291EB 6249
7306 83F2 975F 7DCB 871A 88F6 970F 9CB1 9925 99A1
9A11 9A1B 98DD
80A5 6DDD 8153 4208 8730 87E6
670F 532A 8BFD 595C 60B1 6590 68D0 69A7 7FE1 8AB9
7BDA 855C 2913C
5420 5E9F 676E 6CB8 72D2 80BA 82BE 6632 80C7 8D39
4FF7 5255 539E 75BF 5C5D 966B 5EC3 3E43 8409 8CBB
75F1 9544 5EE2 66CA 4935 7648 9F23 6FF7 4C01 6AE0
9BE1 9428 9745
5A54 6683
7D11 88E6
7F36 5426 599A 7F39 7F3B 6B95 96EC 9D00
5E06 8A09 756A 52EB 5643 5B0F 5E61 61A3 65D9 8543
65DB 7E59 7FFB 85E9 8F53 98BF 7C53 98DC 9C55
51E1 51E2 51E3 3836 5FDB 674B 77FE 7C75 9492 67C9
70E6 8227 7B32 68E5 6E22 7169 7DD0 58A6 6A0A 6A4E
71D4 74A0 81B0 7E41 85A0 7FB3 894E 8E6F 702A 703F
792C 9407 9422 8629 881C 9DED
53CD 6255 8FD4 484A 91E9
201A9 6C3E 72AF 597F 6C4E 996D 6CDB 8D29 7548 8303
4000 8ED3 5A4F 68B5 3D00 76D5 7B35 8CA9 8EEC 98EF
98F0 6EFC 5B0E 7BC4
8224
5206 5429 5E09 7EB7 6610 6C1B 82AC 54DB 517A 7D1B
7FC2 886F 515D 8A1C 915A 68FB 9216 96F0 3B1F 6706
71D3 9934 9959
575F 59A2 5C8E 6C7E 670C 678C 7083 80A6 7F92 86A0
86A1 68A4 68FC 711A 999A 84B6 58B3 5E69 6FC6 9B75
6A68 71CC 8561 8C6E 96AB 9F22 7FB5 9F16 8C76 8F52
943C 99A9 9EC2
7C89 9EFA
4EFD 5F05 594B 5FFF 79CE 507E 6124 7CAA 50E8 61A4
596E 81B9 7CDE 9CBC 7035 9C5D
7AD5 8EAE
531A 65B9 6C78 90A1 678B 7265 82B3 94AB 8684 6DD3
9201 9D0B
59A8 9632 623F 80AA 57C5 9C82 9B74 9C1F
4EFF 8BBF 5F77 7EBA 6609 6618 74EC 7706 5023 65CA
7D21 822B 8A2A 9AE3 9DAD
653E 8DBD
574A 580F 933A
4E30 98CE 4EF9 51E8 51EC 59A6 6CA3 6CA8 51EE 67AB
5C01 75AF 76FD 781C 98A8 36D4 5CEF 5CF0 44A0 5051
687B 70FD 5D36 7326 950B 6953 728E 8451 8702 760B
78B8 50FC 7BC8 92D2 9137 6A92 95CF 8C50 93E0 34A5
5BF7 3826 7043 9146 973B 8634 882D 974A 98CC 9EB7
51AF 5906 6340 6D72 9022 5838 99AE 7D98 8242 3980
6453 6F28 3D6F
8BBD 552A 8982 8AF7
51E4 5949 752E 4FF8 6E57 7128 7148 7F1D 8D57 9CEF
9CF3 9D0C 8CF5 7E2B
7412 6E84 93BD 8615
8985
4F15 544B 598B 909E 59C7 739E 80A4 6024 67CE 7806
57BA 5A10 5C03 8342 886D 65C9 3B6A 7D28 8374 8DBA
9EB8 75E1 7A03 8DD7 9207 7B5F 7D92 5B75 8C67 911C
6577 819A 9CFA 9EA9 7CD0 9EAC 9EB1 61EF
4E40 5DFF 5F17 4F0F 51EB 7536 4F5B 51B9 521C 5B5A
6276 5488 5CAA 5F7F 602B 62C2 670D 678E 6CED 7EC2
7ECB 8299 82A3 4FD8 5798 3A84 67EB 6C1F 6D11 70A5
73B8 7549 7550 7F58 82FB 8300 97E8 54F9 683F 6D6E
7829 7953 832F 86A8 90DB 5310 6874 6DAA 70F0 7408
7B26 7B30 7D31 7D3C 7FC7 8274 83A9 8659 5E45 68F4
7D65 7F66 83D4 7CB0 7D8D 8240 844D 8709 8F90 9258
925C 98AB 9CE7 6991 798F 7A2A 7B99 97CD 5E5E 6F93
8760 9AF4 8AE8 8E3E 8F3B 9B84 9D14 7641 29732 9EFB
8946 9D69 9D9D
5452 629A 4E76 5E9C 5F23 62CA 65A7 4FCC 4FDB 80D5
9CEC 4FEF 90D9 91DC 91E1 636C 8F85 7124 76D9 8151
6ECF 8705 42E8 8150 8F14 5638 64A8 64AB 982B 9B34
7C20 9EFC
2ECF 2ED6 961D 7236 8BA3 4ED8 5987 8D1F 577F 3914
7ACE 961C 9644 9A78 590D 5CCA 8A03 8CA0 8D74 3931
7954 86A5 965A 5069 51A8 526F 5A66 86B9 889D 5A8D
5BCC 5FA9 3DC6 79FF 86D7 8A42 8D4B 5711 6931 7F1A
8179 842F 9C8B 8D59 4B7B 3B3C 7DEE 875C 876E 8907
8914 8CE6 99D9 5B14 7E1B 8567 8F39 9B92 8CFB 9351
9362 9CC6 8986 99A5 4600 9C12 204D7
592B 752B 5490 915C 5085 6928 88B1 8984 79A3 9BB2
FDD0-3109
5491 54D2 8037 8345 7B1A 55D2 642D 2143F 6498 5660
265BF 8921 939D
8FBE 547E 59B2 601B 6C93 8FD6 709F 7F8D 7557 7563
7B2A 8359 5273 5312 7B54 8A5A 9039 9054 9618 977C
9791 8598 9389 87FD 8E82 943D 97C3 9F96 9F98
6253
5927 6C4F 7714
57AF 58B6 7629 71F5 7E68
561A
392B 6074 6DC2 60EA 68CF 951D 5FB3 5FB7 9340
5730 7684 5F97 8126
5446 5454 7343 61DB
6B79 50A3 902E
3432 4EE3 8F6A 20C3A 5788 5CB1 5E12 7519 7ED0 9A80
5E26 5F85 6020 67CB 6B86 73B3 8D37 8FE8 5E2F 8ED1
57ED 5E36 7D3F 888B 8EDA 3ED6 8CB8 8EE9 7447 5ED7
4206 53C7 3BC2 7DFF 66C3 9D0F 6234 26102 825C 9EDB
7C24 8E5B 703B 9734 9EF1 8976 9746
9B98
2E88 5200 5202 53E8 5FC9 6737 6C18 8220 91D6 9C7D
9B5B
636F
5BFC 5C9B 5CF6 6363 7977 6417 7982 3800 5D8B 5D8C
3A36 969D 5C0E 58D4 5DB9 64E3 8E48 96AF 79B1
5230 5012 60BC 7118 76D7 76DC 83FF 9053 7A32 7B8C
7FE2 7A3B 885C 5675 885F 6AA4 71FE 4326 7FFF 8EC7
74D9 7E9B
5C76 9666 6921 69DD
543A 5517 515C 90FD 5160 8538 6A77 7BFC
6296 9627 6793 67A1 551E 86AA 9661 9204
6597 8C46 6D62 90D6 997E 9B25 68AA 6BED 8130 8373
9017 9158 75D8 9597 7AA6 4B26 9B26 9916 65A3 2109D
95D8 4546 7AC7 9B2A 9B2C 9B2D
4E67 8254
4E39 5989 5355 62C5 5358 7708 7803 803C 803D 449F
8043 8EAD 90F8 55AE 5A85 6B9A 7605 5330 7BAA 9815
510B 52EF 891D 9132 64D4 6BAB 7649 7514 7C1E 894C
8078
4F14 5210 628C 73AC 74ED 80C6 75B8 7D1E 8874 63B8
8D55 4EB6 64A2 64A3 6FB8 9ED5 81BD 9EEE
65E6 4F46 5E0E 6C8A 72DA 8BDE 67E6 758D 5556 5557
5F39 60EE 6DE1 86CB 557F 5F3E 6C2E 8145 840F 89DB
35D6 7A9E 50E4 8711 99BE 9AE7 563E 5649 5F48 619A
8A95 61BA 66BA 6FB9 84DE 9D20 79AB 99F3 765A 56AA
7E75 8D09 972E 994F 4A35
6CF9
6265 627D
5F53 73F0 7B5C 88C6 7576 5679 6FA2 74AB 7C39 8261
87F7 8960
6321 515A 8C20 64CB 8B61 9EE8 6529 7059 6B13 8B9C
6C39 51FC 5735 5B95 7800 57B1 6863 8361 5A78 6113
83EA 5D63 74FD 903F 96FC 78AD 5105 6F52 778A 8DA4
58CB 8569 6A94 7497 76EA 7911 7C1C 862F 95E3
94DB 943A
706F 767B 8C4B 5654 5B01 71C8 7492 7AF3 7C26 89B4
8E6C
6729 7B49 6225
9093 51F3 58B1 5D9D 9127 96A5 77AA 78F4 956B 6AC8
9419
8260
6C10 4EFE 4F4E 5943 5F7D 7F9D 889B 5824 8D86 9684
6EF4 6A00 955D 78FE 9349 97AE
72C4 5EF8 7C74 82D6 8FEA 5519 654C 6DA4 6891 7B1B
837B 89CC 976E 99B0 9AE2 5600 5AE1 6ECC 7FDF 9814
6575 850B 8510 4A00 5681 7BF4 4A24 8C74 8E62 9B04
85E1 93D1 42AE 7CF4 89BF 9E10
538E 5758 8BCB 5467 5E95 5F24 62B5 62DE 90B8 963A
67E2 7274 830B 7825 57DE 638B 3B7D 83E7 89DD 8A46
8EE7 805C 9AB6
5754 5F1F 65F3 6755 7393 601F 4FE4 5E1D 57CA 5A23
5059 5547 5572 688A 710D 73F6 7731 7B2C 8C1B 9012
9013 91F1 5A82 68E3 6E27 7747 7976 7F14 83C2 50C0
8163 8482 926A 5891 6455 78B2 7998 8743 905E 58AC
6178 7DE0 8515 9070 5DB3 750B 8AE6 8E36 87AE
9BF3
55F2
7239 8DCC 893A
57A4 5CCC 604E 6315 6633 7ED6 80C5 82F5 8FED 74DE
7723 621C 43F2 8C0D 558B 581E 60F5 63F2 7573 7D70
800B 81F7 8A44 8D83 957B 53E0 6B9C 7243 7252 5D7D
789F 8728 8253 8776 890B 22DA3 8ADC 8E40 9CBD 3B2A
66E1 7589 9C08 758A 6C0E
54CB 800A 7730
5E49 7582
5201 53FC 6C48 866D 51CB 595D 5F34 5F6B 86C1 7431
8C82 7889 9CED 6BA6 7797 96D5 9B89 9CB7 9F26 9BDB
9D70
625A 5C4C
5F14 4F04 540A 9493 7A8E 8A0B 8C03 6389 91E3 94DE
94EB 7AE8 92B1 96FF 9B61 84E7 8ABF 7639 7AB5 92FD
85CB 9443
7C13
4E1F 4E22 20C8D 94E5 92A9
7538 6541 20DA7 6382 508E 53A7 5D6E 6EC7 69C7 69D9
7628 98A0 8E4E 5DC5 985A 985B 766B 5DD3 5DD4 6527
7672 9F7B
5178 594C 70B9 5A70 7320 4344 655F 8DD5 7898 84A7
8E2E 8547 9EDE 56B8
7535 4F43 576B 5E97 963D 57AB 6242 73B7 94BF 5A5D
60E6 6DC0 5960 7414 6BBF 8714 96FB 588A 58C2 6A42
6A5D 6FB1 975B 24A71 765C 7C1F 9A54
6923
4E01 4EC3 53EE 5E04 738E 7594 76EF 9489 8035 8670
914A 91D8 976A
5975 9876 9802 3AC0 9F0E 5D7F 9F11 6FCE 85A1 9424
8BA2 5FCA 9964 77F4 5B9A 8A02 98E3 5576 94E4 6917
815A 7887 952D 78A0 874A 92CC 9320 78F8 9841
8423 8062
53BE 21C2A 5262 9607 7763 561F 918F 95CD
6BD2 72EC 6D9C 8BFB 6E0E 691F 3C69 724D 728A 78A1
88FB 8AAD 8773 7368 9316 51DF 5335 5B3B 7006 6ADD
6BB0 7258 72A2 74C4 76BE 9A33 9EE9 8B80 8C44 8D15
97E3 945F 9AD1 97C7 97E5 9EF7 8B9F
7B03 5835 5E3E 8D4C 743D 7779 89A9 8CED 7BE4
5992 675C 809A 828F 59AC 5EA6 79FA 8370 6E21 976F
9540 29D5A 8799 6BAC 934D 7C35 8827 8839
591A 591B 5484 54C6 7553 525F 5D1C 6387 6560 6BF2
88F0 5689
593A 94CE 526B 6553 655A 55A5 60B3 656A 75E5 922C
596A 51D9 8E31 9BB5 9438
6736 54DA 579B 579C 6305 6306 57F5 7F0D 692F 8D93
8EB1 8EB2 7D9E 492A 619C 4EB8 937A 8EC3 56B2 5972
5234 5241 9973 5C2E 67C1 67EE 70A8 964A 964F 6857
5815 8235 60F0 8DE2 8DE5 8DFA 98FF 3EE7 58AE 58AF
5D9E 9D7D
6735 67A4
5796 5806 5860 5D5F 75FD 78D3 9D2D 941C
3A03 9827
5BF9 961F 514A 514C 5151 5BFE 603C 794B 966E 968A
7893 41CF 7D90 5C0D 619E 619D 6FE7 9566 61DF 3B23
85B1 7029 8B48 8968 9413
8011 5073 526C 5A8F 7AEF 890D 9374
22B43 77ED
6BB5 65AD 5845 7F0E 6934 7145 7456 8176 846E 78AB
953B 7DDE 6BC8 7C16 935B 65B7 8E96 7C6A
5428 60C7 6566 8733 58A9 58AA 64B4 7364 5678 6489
6A54 729C 7905 453B 8E72 8E7E 9A50
233B4 76F9 8DB8 8E89
4F05 56E4 5E89 6C8C 7096 76FE 7818 949D 9007 987F
920D 696F 9041 9813 6F61 906F 71C9 8E32
78B7
4E1C 51AC 549A 36B5 5CBD 6771 6638 6C21 82F3 5032
9E2B 57EC 5A3B 5D20 5D2C 6DB7 7B17 5F9A 6C2D 83C4
29093 8740 9D24 9F15 9BDF 9D87
3A02 8463 58A5 7BBD 8ACC 5B1E 23FC5 856B 61C2
52A8 51BB 4F97 578C 59DB 5CD2 606B 630F 680B 6D1E
80E8 51CD 6219 80F4 8FF5 52D5 7850 68DF 6E69 7D67
8156 50CD 99E7 9718
9B97 9DAB
FDD0-310A
4ED6 5B83 5979 7260 7942 94CA 8DBF 584C 6EBB 6999
891F 5683 95E7
8E79
5854 6E9A 5896 35F3 736D 9CCE 737A 9C28
4EA3 62D3 631E 72E7 95FC 20D32 36E5 5D09 6DBE 3B7C
6428 40BF 8DF6 69BB 6BFE 420B 905D 9062 3493 79A2
8ABB 8E0F 64BB 6FBE 9314 6A7D 6FCC 8E4B 979C 9B99
3FF9 95D2 97B3 56BA 8B76 95E5 2A601 8EA2
4FA4 549C
5FD1 5FD2 7279 8CA3 86AE 94FD 615D 92F1 87A3 87D8
56FC 5B61 80CE
51AD 53F0 65F2 576E 62AC 90B0 67B1 70B1 70B2 82D4
83ED 8DC6 3B03 9C90 7B88 81FA 98B1 421A 99D8 5113
9B90 5B2F 64E1 3E00 6AAF 85B9 7C49
592A 5933 5FF2 6C70 6001 80BD 949B 6CF0 8226 48ED
915E 9226 6E99 614B 71E4
7C8F
5932 5F22 6D9B 7EE6 638F 8A5C 5ACD 5E4D 6146 642F
6ED4 7D5B 69C4 746B 97EC 98F8 4231 7E1A 7E27 6FE4
8B1F 8F41 493E 97B1 97DC 9955
530B 54B7 6D2E 8FEF 6843 9003 5555 68BC 6DD8 413B
7EF9 9676 8404 7979 7DAF 872A 88EA 9780 9184 9789
92FE 932D 99E3 6AAE 9940 9A0A 9F17
8BA8 8A0E
5957
5077 5078 5A7E 5AAE 92C0 936E
4EA0 5934 6295 9AB0 7DF0 982D
59B5 94AD 7D0F 3A97 6568 98F3 9EC8 8623
900F 7D89
574D 3631 62A9 8D2A 6039 75D1 8211 8CAA 644A 6EE9
762B 64F9 6524 7058 7671
575B 212A8 6619 5013 8C08 5A52 60D4 90EF 8983 6983
75F0 952C 8C2D 58B0 58B5 619B 6F6D 8AC7 9188 58C7
66C7 71C2 931F 9924 6A80 78F9 9843 7F48 58DC 85EB
8B5A 8C9A 91B0 8B60 7F4E
5FD0 5766 43D9 94BD 8892 6BEF 83FC 47A1 926D 55FF
61B3 61BB 9193 74AE 8962
53F9 70AD 57EE 63A2 509D 6E60 50CB 5606 78B3 8215
6B4E 8CE7
6C64 5763 94F4 6E6F 5621 8025 528F 7FB0 876A 47B6
4800 9557 859A 8E5A 93DC 940B 97BA 9F1E
9967 5510 5802 508F 557A 3B7B 68E0 347D 5858 370D
642A 6E8F 910C 69B6 6F1F 717B 746D 8185 84CE 969A
6A18 2365F 78C4 799F 7CC3 819B 6A56 7BD6 7CD6 8797
8E3C 7CDB 87B3 8D6F 91A3 9933 424E 9395 9939 95DB
9944 28189 9DB6
4F16 5E11 5018 5052 6DCC 50A5 8EBA 954B 93B2 513B
6203 66ED 7223 77D8 9482
70EB 6465 8D9F 71D9
71A5 81AF 9F1F
75BC 75CB 5E50 817E 8A8A 6F1B 6ED5 7E22 9086 99E6
8B04 512F 85E4 9A30 7C50 9C27 7C58 9A63
972F
8645
5254 68AF 3538 9511 8E22 64FF 9DC8 9DC9
5397 82D0 7EE8 8351 504D 557C 5D39 60FF 63D0 7A0A
7F07 7F64 9E48 55C1 7445 7D88 9046 78AE 5FB2 6F3D
7DF9 876D 8906 92BB 9898 855B 8DA7 8E44 918D 8B15
8E4F 9357 9CC0 9D3A 984C 9BB7 9D5C 9A20 9BF7 9D97
9D99 79B5 9DE4
4F53 632E 8EB0 9AB5 9BA7 8EC6 9AD4
623B 239C2 8FCF 5243 6711 6D1F 501C 608C 6D95 6090
60D5 63A6 9016 60D6 63E5 66FF 9037 6974 88FC 6B52
6BA2 8905 9AF0 3B31 568F 8599 9B00 5694 74CB 7C4A
8DAF 4D91
5C49 5C5C 7B39 5D5C
5E16 6017 8D34 8051 841C 8CBC
94C1 86C8 50E3 9295 92E8 9D29 9421 9435 9A56
546B 98FB 4D34 992E
65EB 4F7B 5EA3 604C 6311 7967 3B38 804E
8280 6761 5CA7 5CB9 8FE2 7952 689D 7B24 8414 47ED
8D92 9F86 84DA 8729 6A24 84E8 92DA 9AEB 9CA6 9797
93A5 9BC8 9F60 9C37
5BA8 6640 6713 3E20 8101 7A95 8A82 4837 7AB1 65A2
5B25
773A 7C9C 7D69 899C 8DF3 7CF6
87A9
5929 5172 5A56 6DFB 915F 9754 42EC 3B32 9EC7 975D
7530 5C47 6CBA 606C 754B 7551 76F7 80CB 7560 751B
751C 6E49 83FE 4852 5861 586B 6437 923F 9617 7DC2
78CC 7AB4 74B3 95D0 9DC6 9DCF
5FDD 6B84 500E 35AD 553A 3649 60BF 6DDF 666A 7420
8146 89CD 75F6 7753 8214 9902 89A5 8CDF 932A 9766
9369
3401 63AD 777C 821A
78B5 9D2B
5385 5E81 6C40 827C 542C 753A 8013 539B 70C3 686F
70F4 7D8E 42FC 9793 8074 5EF0 807C 807D 5EF3
9092 5EF7 4EAD 5EAD 505C 839B 5A77 5D49 6E1F 695F
7B73 8476 8713 69B3 8064 874F 95AE 9706 8AEA 9F2E
2123C 5722 753C 4FB9 5A17 633A 6D8F 6883 70F6 73FD
8121 988B 8247 8A94 9832 2A2B6
51F8 5B8A 79BF 79C3 6022 7A81 550B 6D8B 6378 5817
6E65 75DC 8456 5D80 92F5 9D5A 9F35
56F3 56FE 51C3 5CF9 5EA9 5F92 6087 6348 5C60 688C
3ECC 837C 9014 63EC 3B78 7A0C 83DF 5715 5857 5D5E
23225 760F 7B61 816F 922F 5716 5717 5EDC 6F73 84A4
8DFF 9174 48DD 999F 934E 99FC 9D4C 9D9F 9DCB 9DF5
571F 5721 5410 948D 91F7
514E 5154 8FCC 580D 9D75
6C62 6D82 83B5
4E47 4EDB 8BAC 6258 6261 6C51 9966 6754 4F82 5483
62D5 62D6 6CB0 6329 635D 8A17 6DB6 812B 8131 838C
88A5 98E5 9B60 9A5D
9A6E 4F57 5768 5CAE 6CB1 6CB2 72CF 9640 9641 8FF1
7823 7824 9E35 7D3D 8889 5836 8DCE 9161 99B1 69D6
78A2 4B7E 99C4 99DE 6A50 9B80 9D15 9F27 9A28 9F0D
9A52 9F09
5F75 59A5 5EB9 5AA0 692D 6955 5AF7 6A62 9D4E 9B0C
9C16
67DD 6BE4 553E 841A 8DC5 6BFB 7BA8 8600 7C5C
9A7C 99DD
63A8 84F7 85EC
5F1A 4003 9893 5C35 96A4 9839 983A 983D 9B4B 7A68
8E6A 8608 3FD7
4FC0 50D3 817F 8E46 9ABD
4FBB 5A27 9000 717A 86FB 8715 892A 99FE
6E4D 732F 7153 474E 8C92 4D4E
56E2 56E3 629F 5278 5718 6171 6476 6F19 69EB 7BFF
6AB2 93C4 7CF0 9DD2 9DFB
7583
5F56 6E6A 8916
541E 5451 6D92 554D 671C 711E 564B 66BE 3B3F 9ED7
5C6F 5749 5FF3 9968 829A 8C58 8C5A 8ED8 98E9 9C80
9B68 3A54 9715 81C0 81CB
6C3D 757D
65FD
56F2 70B5 75CC 901A 55F5 84EA
4EDD 540C 4F5F 5F64 5CC2 5E9D 54C3 5CDD 72EA 664D
6850 6D75 70D4 783C 833C 8692 772E 79F1 94DC 7AE5
7CA1 26A34 7B69 8A77 8D68 916E 9256 50EE 52ED 9275
9285 9907 9C96 6F7C 735E 66C8 6723 6A66 6C03 71D1
729D 81A7 3F3F 77B3 9BA6 2648D 4D00
7EDF 6345 3A8C 6876 7B52 7D71 7D82 6A0B
6078 75DB 8855 615F 6185
FDD0-310B
55EF
62CF 62FF 6310 55F1 954E 93BF
4E78 54EA 96EB
59A0 7EB3 90A3 80AD 94A0 5A1C 7D0D 8872 637A 7B1D
25E49 88A6 8C7D 8EDC 8C80 9209 9779 84B3 24E3B 9B76
422B
7592 8BB7 6290 7732 8A25
5436 5450 5462
8149 718B 6468 5B7B
4E43 5976 6C16 827F 7593 59B3 5EFC 5037 8FFA 91E2
5B2D
5948 67F0 800F 8010 217AB 6E3F 8418 9F10 879A 8926
933C
5A1E 9981 812E 8147 9912 9BBE 9BD8
5167 5185 343B 6C1D 9317
5B6C
5476 6013 6320 5CF1 7847 94D9 7331 86F2 8A49 7899
6493 5DA9 61B9 87EF 5912 8B4A 9403 5DCE
57B4 607C 60A9 8111 5318 5816 60F1 5AD0 7459 8166
78AF 4700 7376 737F
95F9 5A65 6DD6 9599 9B27 81D1
8133
7FBA
5542
69C8 8028 7373 6ABD 9392 941E 8B73
56E1
7537 678F 67AC 4FBD 5357 67DF 5A1A 7558 96BE 83AE
5583 6694 6960 8AF5 96E3 27574
8D67 63C7 6E73 8169 8433 4212 877B 6201
266DA 5A7B 3B2E
9056
6041 5AE9 5AF0
56D4
4E6A 56A2 8B68 56CA 8830 9B1E 9995 6B1C 9962
64C3 66E9 652E 7062
513E 9F49
80FD
20E4C 28D99
59AE
5C3C 576D 37BE 6029 6CE5 7C7E 502A 5C54 79DC 94CC
57FF 5A57 6DE3 730A 86AD 4626 90F3 68FF 249A4 46CF
8DDC 815D 8063 873A 89EC 8C8E 8F17 9713 9CB5 9BD3
9BE2 9E91 9F6F 81E1
4F31 4F60 62B3 62DF 72D4 67C5 82E8 65CE 6672 5B74
922E 999C 5117 511E 64EC 96AC 6AB7 85BF 807B
5C70 6C3C 4F32 23CB7 6635 80D2 8FE1 7724 9006 533F
5804 60C4 6135 6EBA 7768 817B 5ADF 66B1 8ABD 4065
7E0C 81A9 5B3A 2A65B
88AE
634F 63D1
82F6
5E07 26612 573C 67BF 6D85 75C6 8042 81EC 9667 556E
60D7 55A6 655C 6E7C 83CD 9689 55EB 5D72 8E02 565B
6470 69F7 8E17 954A 954D 5DAD 7BDE 81F2 931C 989E
8E51 5699 8076 93B3 95D1 5B7C 3738 5B7D 6AF1 7C4B
56C1 8616 9F67 23033 7CF1 8825 9448 7CF5 56D3 8B98
8EA1 9477 9873 9480 4BC0
5DD5
9E1F 8311 3B64 8885 9CE5 5ACB 88CA 6A22 8526 5B1D
892D 5B32 3735
5C3F 8132
599E
2EA7 725B 6C7C
5FF8 626D 72C3 7EBD 7084 94AE 7D10 83A5 9215 9775
8842 42F4
725C
62C8 852B
5E74 79CA 79E5 9C87 9B8E 9CB6 9ECF 9BF0
6D8A 637B 6DF0 713E 8DC8 8F87 8F97 649A 64B5 78BE
8F26 7C10 8E4D 6506 8E68 8E8E
5344 5EFF 5FF5 59E9 5538 57DD 824C 9F30
54D6 9D47
56DC 60A8 42FB
62F0
810C
5B22 5B43
917F 91B8 91C0
5A18
5B81 549B 62E7 72DE 67E0 82E7 804D 5BCD 5BD5 752F
5BD7 5BDC 5BE7 511C 51DD 5680 5B23 64F0 7370 6AB8
85B4 8079 27B48 944F 9B21 9E0B
6A63 77C3
4F5E 4FAB 6CDE 6FD8
6F9D
5974 5B65 9A7D 7B2F 99D1
4F2E 52AA 5F29 782E 80EC
6012 5089 6419
90CD 632A 689B 50A9 513A
6A60
8BFA 558F 611E 2272A 63BF 6426 903D 9518 643B 6992
7A2C 7CD1 8AFE 8E43 61E6 61E7 7CE5 7A64 7CEF
597B
6E1C 3B09 6696 7156 7157 992A
9EC1
519C 4FAC 54DD 6D53 8113 79FE 8FB2 5102 8FB3 5665
6FC3 6A82 71F6 81BF 857D 79AF 7A60 895B 91B2 6B01
7E77
5F04 630A 7651 9F48
5973 9495 7C79 91F9
6C91 6067 6712 8844 46BC
759F 8650 7878 7627
FDD0-310C
5783 62C9 67C6 7FCB 83C8 641A 908B
65EF 524C 782C 63E6 78D6
5587 85DE
814A 63E7 694B 760C 8721 874B 8FA2 8FA3 8772 81C8
650B 7209 81D8 9B0E 74CE 9574 9BFB 881F 945E
5566 6E82 97A1 56B9
56D6
808B
4EC2 3539 4E50 53FB 5FC7 6250 6C3B 961E 738F 827B
6CD0 7AFB 7833 697D 97F7 6A02 7C15 39A1 9CD3 9C33
4E86 9979 990E
6765 4F86 4FEB 5008 5D03 5F95 6D9E 5A61 5D0D 5EB2
5FA0 68BE 6DF6 730D 83B1 90F2 68F6 741C 7B59 840A
9028 94FC 7B82 42F1 28090 9338 9A0B 9BE0 9D86 9EB3
553B 8D49 7750 775E 8D56 8CDA 6FD1 8CF4 983C 9842
21096 765E 9D63 7028 702C 7C41 6AF4 3E0A 85FE 7669
7C5F 8970
52D2
96F7 5AD8 7F27 757E 8502 64C2 3D62 6A91 7E32 790C
956D 6AD1 74C3 7FB8 7927 7E8D 7F4D 881D 9433 8632
8F60 513D 58E8 9458 9741 6B19 8646 7E9D 9F3A
53BD 8012 8BD4 5792 7D6B 8142 50AB 8A84 6A0F 78CA
78E5 854C 5121 4242 857E 58D8 3D7D 7657 6AD0 85DF
7928 7045 8B84 863D 9478 9E13
6CEA 6D21 7C7B 6D99 6DDA 7D2F 28024 9179 9287 981B
982A 9311 48AE 6502 98A3 985E 426A 7E87 8631 79B7
5841 561E 9C69
635E 6488
52B3 52B4 7262 7A82 54F0 5520 5D02 6D76 52DE 75E8
94F9 50D7 562E 37A0 5D97 61A5 24A42 7646 78F1 7C29
87E7 91AA 9412 985F 9ADD
8002 8001 4F6C 54BE 59E5 6045 72EB 6833 8356 94D1
41ED 92A0 6F66 6A51 8F51
6D9D 70D9 8022 916A 5AEA 61A6 6F87 8EBC 6A6F 802E
8EC2
73EF 7853 266E8 7CA9 86EF 6725 9BB1
779C
5245 5A04 507B 5A41 6E87 50C2 697C 848C 5ED4 617A
6F0A 6A13 71A1 8027 851E 877C 9071 802C 825B 87BB
8B31 8EC1 9AC5 97BB 9ACF
5D5D 6402 587F 5D81 645F 7BD3 750A 7C0D
3537 964B 5C5A 6F0F 7618 9542 763A 763B 93E4
55BD 560D
5170 5C9A 62E6 680F 5A6A 60CF 5D50 9611 847B 84DD
8C30 53B1 6F9C 5116 6593 7BEE 8934 61E2 71E3 71F7
9567 95CC 74BC 85CD 8955 8B4B 2814F 5E71 6514 703E
7C43 7E7F 8964 6595 6B04 7046 862D 7937 7C63 8974
56D2 7061 8B95 8E9D 6B17 9484 97CA
89C8 6D68 36E6 63FD 7F06 6984 6F24 7F71 9182 58C8
61D2 89A7 3A5C 64E5 5B3E 61F6 5B44 89BD 432B 5B4F
652C 7060 56D5 6B16 9872 7E9C
70C2 6EE5 71D7 5682 6FEB 7201 721B 74D3 7224 946D
7CF7
7226 897D
5577
52C6 90CE 6B34 72FC 90DE 9606 658F 6879 3C62 7405
5ACF 5ECA 7860 7A02 9512 6994 746F 7B64 8246 84C8
870B 8EB4 8782 92C3 93AF 99FA
6717 6716 70FA 365F 5871 6A03 84E2 8A8F 3BBE 6724
57CC 5D00 6D6A 3AF0 83A8 20E98 8497 95AC
5525 90D2
3604
5D1A 5844 68F1 695E 7890 7A1C 8F18 4244 8590
51B7
5030 580E 6123 7756 8E1C
5215 675D 5398 5253 9A8A 60A1 68A8 68A9 68B8 7281
740D 79BB 7C9A 8372 55B1 68C3 3D1D 7282 83DE 9E42
527A 6F13 3E48 775D 7B63 7F21 8243 870A 20ED7 20F1D
5AE0 5B77 76E0 8C8D 3992 6A06 7483 7CCE 84E0 92EB
9CA1 9ECE 7F79 853E 26E99 9305 7BF1 7E2D 4527 87CD
8935 569F 8B27 91A8 91D0 96E2 6584 3C00 74C8 85DC
908C 93EB 9BEC 9D79 9EE7 56C4 8821 9A39 5B4B 5EF2
6521 7055 5299 863A 9457 7A72 7C6C 7E9A 9A6A 9C7A
9E1D
793C 91CC 4FDA 5CDB 5CE2 5A0C 5CF2 6D6C 7406 9026
9502 7CB4 88CF 8C4A 92F0 9CA4 5163 6FA7 79AE 9BC9
87F8 91B4 9CE2 9090 9C67 6B1A
529B 5386 5389 5C74 7ACB 540F 6738 4E3D 5229 52B1
5456 575C 6CA5 4F8B 3578 5CA6 623E 67A5 6CB4 75A0
82C8 96B6 4FD0 4FEA 3926 680E 75AC 7805 82D9 8D72
8F79 3466 550E 60A7 6817 681B 6D96 7301 73D5 783A
783E 79DD 8318 8354 90E6 5533 5A6F 7B20 7C92 7C9D
8137 8385 8389 86B8 86CE 5088 51D3 53A4 68D9 75E2
86E0 8A48 8DDE 96F3 53AF 585B 6144 642E 6EA7 925D
9CE8 3B0F 66A6 6B74 746E 7D9F 849A 849E 8727 53B2
8777 66C6 6B77 7BE5 4509 96B7 29D98 9D17 52F5 3EFA
78FF 96B8 9B01 512E 5DC1 6FFF 7658 9398 56A6 58E2
650A 66DE 6AD4 6ADF 701D 7204 72A1 74C5 8807 9E97
6AEA 720F 74D1 76AA 76ED 77CB 792A 792B 79B2 85F6
34A7 5137 7667 7930 7CF2 8823 882B 9DC5 9E9C 56C7
6526 2789D 89FB 8E92 8F62 9148 6B10 8B88 2829B 8F63
652D 74E5 9742 299C3 9C71 9C73 974B
674E 6803 54E9 5A33 72F8 88E1 6AAA 9BCF
4FE9 5006
5217 52A3 51BD 52BD 39DC 59F4 6312 6D0C 54F7 57D2
57D3 3920 3B5E 6835 6D56 70C8 8322 8FFE 6369 3B69
730E 811F 86DA 88C2 716D 7759 8057 8D94 5DE4 98B2
5120 9BA4 9D37 64F8 7375 72A3 8E90 9B1B 3B2F 9B23
9C72
6BDF 54A7 6318 70EE 731F
64A9 8E7D
8FBD 7597 804A 50DA 5BE5 5D7A 6180 6F3B 818B 5639
5AFD 5BEE 5D9A 5D9B 6579 7360 7F2D 66B8 71CE 7499
81AB 907C 3D73 7642 9E69 5C6A 5EEB 7C1D 7E5A 87DF
8C42 8CFF 8E58 9410 85D4 98C9 9ACE 9DEF
53FE 4126 948C 91D5 911D 61AD 84FC 77AD 66E2 957D
7212
5C25 5C26 7093 6599 5C1E 5ED6 6482 7AB7 9563
720E
6E9C 7198 8E53
5218 6CA0 7544 6D41 6D4F 7409 7559 65C8 7571 786B
88D7 28EE7 5AB9 5D67 65D2 84C5 998F 9A9D 69B4 7460
84A5 905B 98D7 5289 746C 7624 78C2 954F 99E0 9E60
6A4A 74A2 7581 9560 7645 87C9 295E9 99F5 56A0 61F0
700F 938F 93A6 9E8D 85F0 93D0 98C0 9A2E 98C5 9C21
9DB9 9A51
39D5 67F3 6801 73CB 687A 7EFA 950D 925A 98F9 7DB9
71AE 7F76 92F6 6A6E 5B3C 7F80
516D 7542 7FCF 586F 5EC7 6F91 78DF 9E68 9724 993E
96E1 9402 98C2 9B38 9DDA
685E
5941 5E18 601C 8FDE 6D9F 68BF 83B2 467A 9023 8054
4EB7 5EC9 6E93 5332 55F9 5969 6169 6F23 7191 88E2
899D 5286 5333 5652 5AFE 6190 69E4 78CF 806B 84EE
9CA2 6FC2 6FD3 806E 878A 71EB 7E3A 7FF4 806F 81C1
8595 8933 8B30 8E65 938C 9570 6AE3 7C3E 880A 9B11
4965 942E 9C31 7C62 7C68
655B 740F 8138 88E3 6459 7489 8539 5B1A 6582 3BEC
81C9 913B 7FB7 895D 861E
7EC3 70BC 604B 6D70 6B93 581C 3703 5AA1 3C68 6E45
94FE 50C6 695D 7149 7453 8430 6F4B 7DF4 6FB0 932C
6BAE 934A 93C8 3D91 7032 9C0A 861D 6200 373B 7E9E
8068
62CE
53B8 6797 90BB 4E34 51A7 77DD 5549 5D0A 6DCB 667D
7433 7CA6 75F3 7884 7B96 7CBC 5D99 6F7E 735C 9130
96A3 65B4 66BD 71D0 7498 8F9A 9074 9716 77B5 78F7
81E8 7E57 7FF7 9E90 8F54 58E3 7036 93FB 9CDE 9A4E
9C57 9E9F
342D 3A06 83FB 4E83 51DB 51DC 649B 5EE9 5EEA 61CD
61D4 6F9F 6A81 6AA9 765B 765D
541D 6061 608B 8D41 711B 8CC3 50EF 853A 6A49 81A6
95B5 7510 7584 8E78 85FA 8E8F 8E99 8EAA 8F65
826F 4FCD 51C9 6881 6DBC 690B 8F8C 7CAE 7CB1 589A
7DA1 8E09 6A11 8F2C 7CE7
4E21 4E24 34B3 5169 5521 5562 639A 813C 7DC9 873D
88F2 9B49 9B4E
4EAE 54F4 60A2 8C05 8F86 55A8 667E 6E78 91CF 8F0C
8AD2 8F1B 9344
7177 7C17
3007 5222 7075 56F9 577D 590C 59C8 5CBA 5F7E 6CE0
72D1 6624 670E 67C3 73B2 82D3 51CC 74F4 768A 7831
79E2 7ADB 94C3 9E30 5A48 6395 68C2 6DE9 740C 7B2D
7D37 7EEB 4345 7F9A 7FCE 8046 8232 86C9 8851 9675
83F1 8A45 8DC9 8EE8 797E 9234 959D 96F6 9F84 420A
7DBE 88EC 8506 970A 99D6 6FAA 9302 9B7F 9CAE 9D12
9E77 3B21 71EF 4241 4516 8576 971B 971D 9F62 9BEA
5B41 9143 9F61 6AFA 8626 91BD 9748 2331F 6B1E 7227
24AE9 9EA2 4585 9F97
5CAD 963E 888A 9886 9818 5DBA
4EE4 53E6 5464 70A9
4F36 84E4 9717 702E
565C 64B8
5362 5E90 5786 6CF8 7089 82A6 3B54 680C 80EA 8F73
9E2C 7388 823B 9885 9C88 9B72 76E7 56A7 58DA 3820
5EEC 650E 6ADA 7018 7379 74B7 66E5 6AE8 7210 74D0
81DA 8606 77D1 7C5A 7E91 7F4F 826B 8826 8F64 946A
9871 9AD7 9C78 9E15 9EF8
5364 864F 63B3 9E75 7875 9C81 865C 5877 6EF7 6A10
84FE 9B6F 64C4 6A79 78E0 9565 5695 64FC 7002 6AD3
6C0C 8263 93C0 826A 942A 9465
5725 752A 4F93 5774 5F54 5F55 9646 5CCD 52CE 8D42
8F82 5A3D 6DD5 6DE5 6E0C 7849 9678 9E7F 3A90 6902
742D 7984 4402 83C9 902F 50C7 5279 52E0 76DD 7769
788C 797F 7A11 8CC2 8DEF 5876 5ED8 645D 6F09 7B93
7CB6 21014 622E 6A1A 719D 8194 850D 89EE 8DA2 8E1B
8F98 9181 3BDD 6F5E 7A4B 9304 9332 9334 7490 7C0F
8557 87B0 8E57 8F46 9A04 298F1 9E6D 7C2C 7C36 93D5
9BE5 9D66 9D71 9E93 93F4 9732 9A3C 7C59 9DFA 8642
67A6 822E 9229 6F9B 6C07
7F57 5570 9831 56C9
7F56 7321 8136 6924 841D 8999 903B 8161 9523 7BA9
9AA1 9559 87BA 7F85 89B6 93CD 5138 89BC 9A3E 21922
651E 7380 6B0F 268C7 863F 908F 9A58 9E01 7C6E 947C
9960
5246 502E 84CF 88F8 8EB6 7630 3A61 3C01 8803 81DD
66EA 7673
6CFA 5CC8 6D1B 7EDC 9A86 6D1C 73DE 8366 7866 7B3F
7D61 55E0 843D 645E 6F2F 7296 927B 96D2 99F1 9BA5
9D3C 9D45 6FFC 277CC 7E99
5A08 5B6A 5CE6 631B 683E 9E3E 8114 6EE6 92AE 9D49
571D 5971 5B4C 5B7F 5DD2 6523 66EB 6B12 7053 7F89
81E0 571E 7064 864A 947E 7674 7675 9E1E
5375
4E71 91E0 4E82
62A1 6384
4ED1 4F26 56F5 6CA6 7EB6 4F96 8F6E 502B 5707 5A68
5D18 5D19 60C0 6DEA 966F 68C6 3DCD 8140 83D5 4201
7DB8 8726 8E1A 8F2A 9300 9BE9
57E8 7896 7A10 8023
8BBA 6EA3 8AD6
78EE
9F99 5C78 5499 6CF7 663D 680A 73D1 80E7 830F 772C
783B 7ADC 7B3C 804B 6E70 9686 6EDD 20F90 5D90 6F0B
3863 7BED 856F 9F8D 7643 56A8 5DC3 5DC4 7027 7C3C
93E7 66E8 6727 3C0D 6AF3 7216 74CF 8622 9733 77D3
7931 7932 9F92 7C60 807E 882A 882C 8971 8C45 8E98
9468 9747 4BBE 9A61 9E17
5784 5785 62E2 9647 3D33 7BE2 5131 58DF 58E0 650F
96B4 7AC9 9F93
54E2 6335 6887 5FBF 8D1A
69DE 7ABF
9A74 95FE 90D8 6988 99BF 6C00 81A2 95AD 85D8 9DDC
9A62
5415 5442 4FA3 4FB6 6314 36CE 634B 635B 65C5 3B5A
68A0 7963 7A06 94DD 5C61 7F15 7D7D 5C62 8182 5C65
891B 92C1 8190 5122 7A5E 7E37 8938 7A6D
5BFD 578F 5F8B 8651 7387 7EFF 20DC8 5D42 6C2F 6EE4
844E 7DA0 7DD1 616E 7BBB 819F 52F4 7E42 6FFE 6AD6
7208 9462
7112
7567 950A 7A24 3500 5719 3A3C 92DD 92E2 64FD
FDD0-310D
65EE 5477 560E 5620
9486 5C1C 5676 9337
5C15 738D
5C2C 9B40
6208 4EE1 572A 72B5 7EA5 20BEB 6213 8090 726B 7599
54AF 7271 54E5 80F3 9E3D 5272 6401 88BC 20E9D 6ED2
6228 6B4C 29FB7 9D10 9D1A 64F1 8B0C 9D3F 93B6
5444 3837 4F6E 530C 630C 9601 9769 654B 3B58 683C
8316 9B32 6105 81F5 86D2 55DD 5865 6EC6 845B 88D3
89E1 9694 643F 69C5 8188 95A3 95A4 4213 9549 9788
97D0 7366 8AFD 8F35 9ABC 9BAF 97DA 97B7 9A14 4601
8F55
54FF 8238
4E2A 5404 867C 500B 784C 94EC 55F0 7B87
5F41 6ACA
4F85 8BE5 5793 59DF 5CD0 90C2 9654 6650 8344 8D45
7561 7974 7D6F 8A72 8C65 8CC5
5FCB 6539 7D60
4E10 4E62 5303 5304 9623 675A 9499 76D6 6461 6E89
9223 6224 6982 8462 8CCC 9691 6F11 84CB 3562 69E9
69EA 74C2
7ED9 7D66
768B 7F94 7F99 9AD8 7690 2690E 9AD9 81EF 6EDC 69D4
777E 818F 69F9 6A70 7BD9 7CD5 993B 6ADC 9DCE 9F1B
9DF1
5930 6772 83D2 641E 7F1F 66A0 69C0 69C1 3D46 7A3E
7A3F 9550 7E1E 6ABA 85C1 85F3
543F 544A 52C2 53DD 8BF0 90DC 796E 7970 9506 7170
7B76 8AA5 799E 92EF
97DF
52FE 4F5D 6C9F 94A9 88A7 7F11 920E 6E9D 9264 7DF1
7BDD 8920 97B2 97DD
5CA3 72D7 82B6 67B8 73BD 8007 82DF 7B31 8008 8009
86BC 8C7F
5778 6784 8BDF 8D2D 57A2 59E4 5193 8329 591F 5920
8A3D 5ABE 5F40 6406 8A6C 96CA 69CB 7179 89CF 9058
6480 89AF 8CFC
7518 5FD3 653C 6746 3DA5 7395 809D 8289 8FC0 5769
6CD4 77F8 4E79 67D1 7AFF 82F7 75B3 9150 4E7E 7C93
4E81 51F2 5C32 5C34 7B78 6F27 9CF1 5C36 5C37 9B50
4EE0 625E 76AF 79C6 8866 8D76 687F 7B34 6562 7A08
611F 8D95 6F89 64C0 6A44 7C33 9C14 9CE1 9C64
5E72 65F0 6C75 76F0 7EC0 501D 51CE 6DE6 7D3A 8A4C
5E79 9AAD 69A6 6A8A 8D11 8D63 8D1B 7068
6839 8DDF
54CF
826E
4E98 4E99 831B 63EF
5188 7F53 51AE 521A 6760 7EB2 809B 5CA1 3B4E 7268
7598 77FC 7F38 94A2 525B 7F61 5808 6386 91ED 68E1
7285 583D 7DB1 7F41 92FC 93A0
5C97 3F58 5D17 6E2F
7135 7B7B 69D3 6205 6206
522F 5E9A 754A 6D6D 3E74 8015 6404 713F 7D5A 83EE
8D53 9E52 7DEA 7E06 7FAE 8CE1 7FB9 9D8A
54FD 57C2 5CFA 632D 7EE0 803F 90E0 231B3 6897 8384
3F98 7D86 4304 9CA0 9ABE 9BC1
66F4 5829 6685 4C4D 4C6D
63B6 6929
4F30 5471 59D1 5B64 6CBD 6CD2 67E7 82FD 8F71 5502
7F5B 9E2A 7B1F 86C4 83F0 89DA 8EF1 8EF2 8F9C 9164
9232 7B8D 7B9B 5AF4 6A6D 443B 9B95 9D23
9DBB
5903 53E4 6262 6C69 8BC2 8C37 80A1 726F 2EE3 5503
4026 7F5F 7F96 94B4 9AA8 5552 6DC8 8135 86CA 86CC
8A41 9E44 5C33 6132 6BC2 9237 9989 9F13 9F14 560F
6996 69BE 76B7 84C7 7A40 9E58 7CD3 7E0E 6FF2 76BC
81CC 85A3 8F42 7014 76EC 77BD 9936 4D9C 8831
56FA 6545 51C5 987E 580C 5D13 5D2E 688F 727F 68DD
96C7 75FC 797B 7A12 9522 50F1 932E 9CB4 9BDD 9867
5495 5CE0 9027 50A6 83C7 7BD0
74DC 522E 80CD 681D 20D6F 9E39 8052 44B7 6B44 7171
8D8F 5280 7DFA 92BD 98B3 8E3B 9D30 9A27
53E7 518E 5250 526E 5BE1 4211
5366 576C 8BD6 6302 5569 639B 7F63 7D53 7F6B 8A7F
8902
98AA
5459 54BC 57DA 5D1E 90ED 581D 921B 9505 5613 588E
7611 8748 5F49 35FB 6FC4 87C8 934B 5F4D
56EF 56F6 56FB 56FD 5700 570B 5E3C 8158 5E57 6156
6F0D 805D 8195 852E 8662 9998 27C12 4190
679C 60C8 6DC9 7313 9983 6901 83D3 7CBF 7DB6 873E
88F9 69E8 8F20 9301 991C 9439
8FC7 904E
556F
4E56 63B4 6451
62D0 67B4 67FA 27285 7B89
592C 53CF 602A 39D4 6060
5F52 572D 59AB 9F9F 89C4 7688 90BD 95FA 5E30 73EA
80FF 8325 4E80 7845 4145 7A90 898F 5080 5AAF 691D
88BF 5EC6 90CC 5AE2 646B 7470 95A8 9C91 5B00 69FB
69FC 749D 81AD 879D 9F9C 9BAD 5DC2 6B78 9B36 74CC
9A29 9B39 6AF7
5B84 6C3F 6739 8F68 5E8B 4F79 5326 8BE1 20C53 579D
59FD 6051 6531 7678 8ECC 9652 5EAA 9B3C 532D 796A
6677 6E40 436F 86EB 3533 89E4 8A6D 53AC 3A33 4925
87E1 77A1 7C0B
6530 523D 523F 660B 7094 67DC 8D35 3A88 6842 6867
7324 7B40 8CB4 8DEA 5331 84D5 528A 528C 5DA1 648C
69F6 4210 4434 6A9C 77B6 7C02 6AC3 7650 79AC 8958
9CDC 97BC 9C56 9C65
6922
5173 89C2 5B98 51A0 898C 500C 20D28 68FA 7AA4 8484
95A2 761D 764F 89B3 95D7 9CCF 95DC 9C25 9C5E 89C0
839E 9986 742F 75EF 7B66 7BA1 8F28 8218 9327 9928
9CE4
6BCC 4E31 8D2F 6CF4 60BA 60EF 63BC 6DAB 8CAB 60B9
3D26 3BA1 797C 6163 645C 6F45 6A0C 9066 76E5 7F46
465B 96DA 93C6 704C 721F 74D8 9E73 77D4 7936 7F50
9475 9C79 9E1B
4E28 200CC 886E 60C3 7EF2 889E 88AC 8F8A 6EDA 6EFE
7DC4 84D8 78D9 8509 8F25 9CA7 25566 9B8C 9BC0
68CD 7754 3665 7774 74AD 8B34
5149 706E 4F8A 7097 709B 54A3 5799 59EF 6D38 6844
70E1 80F1 832A 8F04 50D9 92A7 9EC6 299C9
5E7F 5E83 72B7 5EE3 81E9 7377 2A1F5
4FC7 73D6 901B 81E6 6497 29448
709A 6B1F
5DE5 5F13 516C 53B7 529F 653B 675B 4F9B 739C 7CFC
80B1 5BAB 5BAE 606D 8EAC 9F9A 5311 5868 5E4A 6129
89E5 7195 8EB3 78BD 9AF8 4CCD 89F5 9F8F 9F94
5EFE 5DE9 6C5E 62F1 39EC 62F2 3B5F 6831 73D9 3F26
8F01 92DB 978F 4C4B
5171 8D21 7FBE 551D 8CA2 83BB 3536
86A3 6150
FDD0-310E
5494 5496 5580 8849 64D6
5361 4F67 80E9 9272
57B0 88C3
533C 3E2F 22208 67EF 7241 73C2 79D1 80E2 82DB 8F72
75B4 7822 8DB7 68F5 8EFB 988F 55D1 6415 7290 7A1E
7AA0 842A 9233 69BC 4426 9897 6A16 778C 78D5 4300
874C 9312 8596 9198 9846 9AC1 791A
58F3 63E2 6BBC 7FD7
53EF 5777 37B9 5CA2 3ABC 70A3 6E07 5D51 6564 6E34
5DB1 790D
514B 523B 524B 52C0 52CA 5BA2 606A 20CED 5A14 5C05
8BFE 20DB2 5801 6C2A 9A92 7F02 6119 6E98 951E 78A6
7DD9 8250 8AB2 790A 9A0D 2A0ED
5D59
5F00 5952 63E9 950E 958B 4924 9426
51EF 5240 57B2 607A 95FF 94E0 51F1 5274 6168 584F
5D66 6137 6977 8488 8F06 5605 669F 9534 4057 9347
93A7 95D3 98BD
5FFE 708C 708F 6B2C 70D7 52D3 6112 613E 938E
5C3B 9ADB
4E02 6537 8003 62F7 6D18 6832 70E4 7A01 9C93 71FA
94D0 7292 92AC 9760 9BB3 9BCC
62A0 26B05 82A4 770D 527E 5F44 6473 7798 4071
53E3 24618 52B6
53E9 6263 6542 51A6 5BBC 5BC7 3C2F 91E6 7A9B 7B58
6EF1 7789 8532 853B 7C06 9DC7
520A 681E 52D8 9F9B 582A 5D41 6221 9F95
519A 574E 4F83 780D 5058 57F3 60C2 83B0 6B3F 586A
6B41 69DB 8F21 6ABB 9851 7AF7 8F57
770B 884E 5D01 5888 78E1 77B0 95DE 77D9
808E 80AF 80BB 57A6 6073 5543 8C64 9F88 58BE 9339
61C7 9F66
63AF 88C9 8903
5FFC 95F6 780A 7C87 5EB7 21413 5ADD 5D7B 6177 6F2E
69FA 7A45 41B2 7CE0 8EBF 93EE 9C47
625B 6443
4849
4EA2 4F09 531F 56E5 6297 72BA 909F 7095 94AA 9227
958C
52A5 542D 5751 5994 962C 6333 7841 727C 785C 94FF
787B 647C 8A99 92B5 40D8 935E 93D7
625D 5233 77FB 67AF 80D0 90C0 54ED 684D 5800 5D2B
35C4 5710 8DCD 7A9F 9AB7 26846 9BAC
72DC 82E6
3838 5E93 4FC8 7ED4 5EAB 79D9 8DB6 7105 55BE 7D5D
88B4 88E4 7614 9177 5EE4 8932 56B3
5938 59F1 8A87
4F89 54B5 57AE 9299
3404 630E 80EF 8DE8 9ABB
823F
6269 62E1 62EC 6304 6870 7B48 86DE 9614 843F 8440
5ED3 9822 9AFA 6FF6 95CA 979F 61D6 64F4 9729 97B9
9B20
97D5
39DF 84AF 64D3
5DDC 51F7 5757 5FEB 4FA9 54D9 72EF 90D0 810D 584A
3C6E 7B77 9C99 5108 58A4 5672 5EE5 736A 9136 81BE
65DD 7CE9 9C60
5726
4E8F 5232 5CBF 609D 76D4 7AA5 8067 7ABA 8667 95DA
985D 5DCB 862C
594E 6646 9804 9997 55B9 63C6 45AF 9035 9108 9A99
6223 668C 694F 6951 8475 9697 777D 9B41 8770 4906
982F 367A 9368 9377 6AC6 85C8 9A24 5914 8637 8641
5DD9 2A1B4 72AA 8EA8
7143 8DEC 980D 8E5E
5C2F 532E 6B33 559F 6126 6E83 8143 9988 5ABF 6127
8489 7786 5633 5B07 6192 6F70 7BD1 8069 4646 6A3B
806D 8562 8B09 7C23 8075 993D 7C44 9400 994B 944E
4C0E
5BBD 5BDB 5BEC 81D7 9ACB 9AD6
6B35 6B3E 6B40 7ABE 4540
7ABD 9467
5764 6606 5803 5A6B 5D10 5D11 665C 7311 711C 7428
83CE 88C8 9AE0 8C87 951F 9AE1 9E4D 872B 88E9 9AE8
747B 890C 918C 9315 9CB2 9A09 9BE4 9D7E 9DA4
6083 6346 9603 58F8 68B1 7871 7975 7A07 58FC 7A1B
7D91 88CD 95AB 95B8 9F6B
56F0 6D83 3AFB 774F
5812 5C21 6F49 71B4
5321 344C 52BB 8BD3 5329 54D0 6047 6D2D 90BC 6846
7844 7B50 44B0 8A86 8EED
5FF9 6282 72C2 8BF3 8ED6 8A91 9D5F
593C 5123 61ED
535D 5739 7EA9 909D 51B5 65F7 5CB2 6CC1 77FF 663F
8D36 7716 7736 7D56 8CBA 8EE6 9271 58D9 8E80 913A
9ECB 61EC 66E0 720C 77CC 7926 7A6C 7E8A 945B
783F 7D4B 7B7A
7A7A 369A 5025 57EA 5D06 60BE 6DB3 787F 7B9C 9313
9D7C
5B54 233FA 6050
63A7 26048 979A
8EBB
FDD0-310F
5677
54C8 94EA
86E4
5964
4E37
8BC3 62B2 6B31 559D 8A36 55EC 881A
79BE 5408 4F55 52BE 5392 548A 548C 59C0 6CB3 5CC6
3A83 66F7 67C7 72E2 76C7 7C7A 7D07 90C3 9602 9978
54EC 3A89 6546 6838 76C9 76CD 555D 3B71 6DB8 76D2
79F4 8377 86B5 9F81 60D2 6E2E 83CF 8402 8A38 988C
6941 6BFC 8A65 8C88 47A6 8F05 924C 9616 9C84 3561
7186 9E56 9EA7 6F95 3FE5 981C 7BD5 7FEE 879B 9B7A
7909 95D4 97A8 9F55 8988 9DA1 76AC 9449 9FA2
4F6B 578E 8D3A 7103 8894 8CC0 55C3 7142 788B 7187
8D6B 3D51 8910 9E64 3B1E 7A52 7FEF 58D1 764B 8B1E
7200 9DAE 9DB4 974E 9E16 974F
7CAD 974D
548D 54B3 55E8
8FD8 5B69 9826 9AB8 9084
6D77 80F2 70F8 917C 91A2
4EA5 598E 39E1 9A87 5BB3 6C26 55D0 9900 99ED 26926
995A
5870 56A1
9ED2 9ED1 563F 6F76 28B46
8320 84BF 5686 8585 85A7
6BDC 869D 6BEB 6903 55E5 7346 8C89 5651 7354 8C6A
295B8 5637 3B14 734B 8AD5 512B 568E 58D5 3819 6FE0
7C47 8814 8B79
597D 90DD
53F7 36AA 3740 660A 6626 79CF 54E0 5CFC 604F 608E
6D69 8017 6667 3B36 6DCF 5090 7693 6EC8 8055 865F
9117 66A4 66AD 6F94 769C 769E 66CD 76A1 76A5 8583
93AC 98A2 704F 9865 9C1D 705D
7AD3
9F41
4FAF 3927 77E6 5589 5E3F 7334 9107 3B0B 8454 760A
777A 7BCC 7CC7 7FED 9ABA 7FF5 936D 9931 9BF8
543C 72BC
540E 539A 5795 5F8C 6D09 90C8 9005 5820 8C5E 9C8E
9C98 9B9C 9C5F
5019
4F44 70B6 9878 3937 86B6 9163 9807 5AE8 8C3D 61A8
99A0 6B5B 9F3E
9097 542B 51FD 5481 80A3 90AF 51FE 8677 5505 5705
5A22 6D5B 5D21 6657 6892 6DB5 7113 7400 5BD2 5D45
3B80 97E9 751D 7B68 4204 872C 6F8F 92E1 9B7D 97D3
4E06 5388 7F55 6D6B 558A 961A 850A 3E01 8C43 9B2B
361A
6C49 5C7D 6C57 95EC 65F1 5CBE 54FB 57BE 608D 634D
6D86 7302 3A8B 6658 6665 710A 839F 91EC 9588 7694
7745 83E1 50BC 86FF 9894 99AF 6F22 872D 8C8B 6496
66B5 71AF 92B2 92CE 61BE 64BC 24CC9 7FF0 8792 9837
9844 99FB 96D7 701A 8B40 862B 9DBE
516F 7233
62EB 75D5 978E
4F77 5F88 72E0 8A6A
6068
592F 3C20
65BB 676D 82C0 8FD2 7ED7 73E9 7B10 822A 86A2 4615
9883 8CA5 7B55 7D4E 980F 28048 9B67
6C86
57B3
4EA8 54FC 6099 5548 811D
3530 59EE 6046 6052 6841 70C6 80FB 9E3B 6A2A 6A6B
8861 9D34 8605 9445
583C
6DA5 9D46
4E6F 5322 864D 547C 5780 5FFD 6612 66F6 6CD8 6057
70C0 82F8 8F77 532B 553F 60DA 39FE 6DF4 8656 8EE4
5611 5BE3 6EF9 44E4 96D0 5E60 622F 6B51 27A53 81B4
8B3C
56EB 6287 5F27 72D0 80E1 58F6 74F3 96BA 20D31 58F7
659B 7100 35C5 5596 58FA 5AA9 6E56 7322 7D57 6430
695C 7173 745A 846B 561D 2430D 9E55 69F2 7BB6 851B
8774 885A 9B71 7E20 879C 9190 9836 89F3 9378 992C
4B4C 9D60 702B 9B0D 9C17 9D98 9DA6
4E55 6C7B 864E 6D52 4FFF 7425 8400 865D 6EF8
4E65 4E92 5F16 6236 6237 6238 3E26 51B1 51B4 5E0D
62A4 6C8D 6CAA 8290 5CB5 6019 623D 6608 6791 6018
795C 7B0F 5A5F 6248 74E0 55C0 695B 7D94 96FD 5AED
5AEE 6462 6EEC 9120 69F4 71A9 8530 9CF8 7C04 9359
569B 9E71 8B77 9CE0 97C4 9800 9C6F 9E0C
4E4E 7C90 552C 7CCA 933F 9BF1
82B1 82B2 54D7 5629 848A 9335
534E 3572 3B49 59E1 9A85 91EA 91EB 94E7 83EF 6433
6ED1 733E 380F 398A 64B6 78C6 92D8 8550 8796 8B41
93F5 9A4A 9DE8
5316 5212 3566 593B 3577 6779 753B 8BDD 6866 5A73
5D0B 756B 7575 89DF 8A71 5283 6466 5AFF 5B05 69EC
6F85 6A3A 8AE3 7E63 8219 9ECA 8B6E
57D6 5A72 691B 7874 7CC0 8AAE 748D
5419 5268 8020 952A 5290 9343 5684 8C41 6509 9A1E
4F78 6D3B 79EE 79F3
706B 4F19 90A9 94AC 9225 5925 6F37
6C8E 6216 8D27 549F 7809 4100 4FF0 6347 7713 9584
20D7E 639D 83B7 8CA8 60D1 6E71 7978 65E4 6947 3A2F
798D 84A6 35F2 596F 970D 6FE9 7372 8B0B 6AB4 956C
56AF 7016 77C6 7A6B 4C5B 66E4 802F 81DB 8267 85FF
8816 56BF 7668 77D0 944A 9743
6000 5F8A 6DEE 69D0 8E1D 61D0 8922 8931 3733 3822
61F7 7024 6AF0 8032 8639
574F 54B6 8AD9 58CA 58DE 863E
7070 39D1 8BD9 54B4 6062 62FB 6325 6D03 867A 6656
70E3 73F2 8886 8C57 5A4E 5645 5A88 63EE 3DC7 7FDA
8F89 6689 694E 7147 8A7C 9693 5E51 7773 7988 649D
5655 7FEC 8918 8F1D 9EBE 5FBD 7008 96B3 8633 9C34
56D8 56DE 56EC 4F6A 5EFB 605B 6D04 5EFD 70E0 8334
8698 8FF4 75D0 9025 86D4 86D5 8716 9BB0
6094 6BC0 6BC1 26799 6BC7 6A93 71EC 8B6D
5349 6C47 4F1A 8BB3 6CCB 54D5 21726 6D4D 7ED8 8294
8BF2 605A 6075 70E9 835F 8D3F 5F57 6666 79FD 5599
60E0 6E4F 7D75 7F0B 7FD9 9613 532F 5F59 5F5A 3963
6703 6ED9 8A6F 8CC4 9892 50E1 5612 3A39 8AA8 571A
5BED 6167 6193 66B3 69E5 6F53 7623 8527 49E5 5666
5B12 5FBB 6A5E 6BA8 6FAE 6FCA 7369 8559 8AF1 982E
71F4 74AF 7BF2 8588 8589 992F 5696 77BA 7A62 7E62
87EA 3B29 6AD8 7E6A 7FFD 85F1 8B53 5136 93F8 95E0
5B48 942C 9767 8B7F 986A
5C77 7073 74A4 61F3
72BF 6B53 9D05 3E55 9D4D 56BE 61FD 737E 9144 8B99
8C9B 9A69
73AF 5CD8 6D39 72DF 90C7 6853 8341 5BCF 7D59 8408
8411 96C8 7D84 7FA6 8C86 926E 953E 571C 5B1B 5BF0
6FB4 7F33 49A1 961B 74B0 8C72 9370 956E 9E6E 7CEB
7E6F 8F58 9436 95E4 9B1F 74DB 4D09
7F13 4220 7DE9 650C
5E7B 5942 8092 5950 5BA6 5524 6362 6D63 6DA3 70C9
60A3 6899 7115 559A 559B 5D48 610C 63DB 6E19 75EA
7746 902D 3B07 3B0A 7165 744D 8C62 6F36 7613 69F5
9CA9 64D0 6FA3 9BC7 85E7 9C00
6B22 77A3 6B61
660F 662C 8364 5A5A 60DB 6DBD 960D 68D4 6B99 7767
8477 776F 95BD
5FF6 6D51 68A1 9984 581A 6E3E 743F 9B42 991B 7E49
8F4B 4B9D 9F32
9BF6
8BE8 4FD2 5031 5702 638D 6DF7 711D 6EB7 6141 89E8
8AE2
5DDF 3835 8093 8841 8352 671A 5843 614C 3B3B
7687 505F 51F0 55A4 582D 5A93 5D32 5FA8 60F6 6E5F
968D 9EC3 9EC4 697B 714C 745D 845F 9051 953D 58B4
6F62 735A 7BC1 7BCA 824E 8757 71BF 749C 8AFB 7640
78FA 417F 7A54 9360 992D 9CC7 7C27 87E5 97F9 8DAA
9A1C 9404 9C09 5164 9C51 9DEC
6033 604D 70BE 5BBA 6644 595B 8C0E 5E4C 8A64 7180
4420 8B0A 6ACE
6130 3A2A 6EC9 69A5 769D 66C2 93A4 76A9
6643 7E28
53FF 543D 544D 7074 8F70 54C4 8A07 70D8 8EE3 63C8
6E39 7122 7861 8C3E 29420 8F37 85A8 9367 569D 8F5F
4EDC 5F18 5985 7EA2 5430 5B8F 6C6F 7392 7EAE 95F3
5B96 6CD3 57AC 5A02 6D2A 7AD1 427A 7D05 82F0 8679
5CF5 6D64 7D18 7FC3 803E 836D 7854 7D2D 8C39 9E3F
6E31 7AE4 7CA0 921C 958E 7D8B 7FDD 8452 8453 8C3C
6F42 28306 9277 9783 9B5F 92D0 5F4B 9710 857B 971F
9D3B 9EC9 2410F 9ECC
664E 3B34 55CA
8BA7 8A0C 95A7 6494 6F8B 6F92 92BE 95C2 9B28
FDD0-3110
4E0C 22A66 8BA5 51FB 5209 53FD 9965 4E69 520F 673A
7391 808C 573E 77F6 9E21 6785 82A8 54AD 59EB 525E
5527 59EC 5C50 79EF 7B04 8FF9 98E2 57FA 7EE9 559E
5D46 5D47 6567 671E 7284 7B53 7F09 8D4D 52E3 55D8
7578 7A18 8DE1 8DFB 9CEE 50DF 20F3B 6BC4 7B95 9288
5630 69E3 757F 7A3D 7DDD 89ED 8CEB 8EB8 9F51 58BC
6A5F 6FC0 74A3 7A4D 9324 64CA 78EF 79A8 7C0A 7E3E
7F81 8940 8CF7 96AE 6AC5 802D 8E5F 96DE 8B4F 913F
97F2 9D8F 8B64 9416 9951 8E8B 97BF 9DC4 9F4E 7F87
9447 8640 8989 9459 9F4F 7F88 9E04 898A
4EBC 53CA 4F0B 5409 7EA7 5373 5C8C 5F76 5FE3 6781
6C72 7680 4E9F 4F76 8BD8 9491 537D 59DE 6025 72E4
90C6 63E4 75BE 768D 7B08 7D1A 810A 4798 506E 5359
5EB4 3B72 710F 89D9 8C3B 35CA 68D8 6E52 96C6 5849
5AC9 6131 6222 696B 6975 6B9B 8D8C 69C9 8024 818C
84BA 92A1 35F1 6483 6F57 7620 799D 7BBF 8E16 9E61
5DAF 6A76 6FC8 8540 878F 64EE 6A9D 857A 8E50 9353
85C9 894B 8265 7C4D 8F5A 93F6 4CED 9735 9DBA 9DD1
96E6 96E7
51E0 5DF1 4E2E 5980 72B1 6CF2 866E 6324 638E 9C7E
5E7E 39B8 621F 9218 5D74 9E82 9B62 64A0 64E0 7A56
87E3 9B55
2E95 5F50 5F51 65E1 8BA1 8BB0 4F0E 7EAA 5756 5993
5FCC 6280 5242 5B63 82B0 9645 54DC 578D 5CDC 65E2
6D0E 6D4E 7D00 830D 8A08 5264 7D12 7EE7 8324 8360
89CA 8A18 5048 5BC2 5BC4 3831 5F9B 394D 60B8 65E3
689E 6E08 796D 5848 60CE 3ED1 4400 81EE 517E 75F5
7D99 846A 8507 88DA 66A8 6F03 6F08 7A29 7A4A 84DF
8900 8A8B 8DFD 969B 9701 9B3E 9C9A 66A9 7A37 8AC5
9CAB 5180 5291 66C1 7A44 9AFB 568C 6A95 6FDF 7F7D
858A 89AC 6AB5 3E04 85BA 9D4B 9F4C 61FB 7660 7A67
7E4B 9AA5 9BDA 7031 7E7C 860E 29949 9C40 862E 973D
9C36 9C3F 863B 9C6D 9A65
4EBD 8F91 6A2D 8F2F 5EED 766A
52A0 4E6B 5939 4F3D 593E 4F73 62B8 62C1 6CC7 3E62
67B7 6BE0 6D43 73C8 8304 8FE6 57C9 5BB6 6D79 75C2
689C 7B33 801E 8888 50A2 7333 8DCF 20EA2 728C 8175
846D 926B 5609 927F 9553 8C6D 8C91 29D9B 93B5 4552
9E9A
573F 5FE6 6274 90CF 550A 605D 835A 90DF 621B 83A2
94D7 621E 86F1 88B7 988A 3B96 86FA 88CC 8DF2 9782
9904 92CF 982C 9830 9D36 9D4A
7532 4EEE 5CAC 53DA 73BE 80DB 659A 8D3E 94BE 5047
5A7D 5FA6 659D 6935 8CC8 9240 698E 69DA 7615 6A9F
4EF7 9A7E 67B6 22C4C 5AC1 5E4F 69A2 50F9 99D5
7A3C 7CD8
7596 9636 7686 63A5 63B2 23D8F 75CE 79F8 5588 5826
5A98 63ED 6904 6E5D 813B 83E8 8857 968E 55DF 5AC5
716F 40C8 7A2D 8754 64D1 7664 8B2F 9D9B
5369 536A 5B51 5C10 8BA6 8282 5226 5227 52AB 5C8A
523C 351A 52BC 6605 6770 758C 3636 36C3 62EE 6D01
7ED3 5022 6840 8871 8A10 8FFC 507C 5A55 5D28 6377
83AD 5091 55BC 3A17 4039 7D50 7D5C 88BA 9889 5D65
3A29 696C 6976 6ED0 776B 7BC0 8710 874D 8A70 9263
9B5D 622A 69A4 78A3 7AED 26D74 9C92 6F54 7FAF 84F5
8AB1 8E15 978A 5E6F 937B 9B9A 5DC0 6AED 881E 8818
883D
6BD1 5A8E 89E3 89E7 98F7 6A9E
4E2F 4ECB 5424 5C95 3839 5E8E 6212 5C46 5C4A 73A0
82A5 754C 754D 75A5 780E 8BEB 501F 6088 86A7 8878
5FA3 583A 6950 743E 86F6 7297 8AA1 9AB1 9B6A 892F
9385 8EA4
59D0 685D
4EA4 827D 8281 59E3 5A07 5CE7 6D47 90CA 9A84 80F6
832D 832E 6912 7126 86DF 8DE4 50EC 5604 213ED 8660
9C9B 5B0C 5D95 5DA3 618D 6F86 81A0 71CB 81B2 8549
7901 7A5A 9BAB 9D41 9E6A 7C25 87ED 8F47 940E 9DCD
9A55 9DE6 9DEE
3B42 81EB 89D2 4F7C 4FA5 6054 6322 72E1 7EDE 997A
6341 6648 70C4 768E 77EB 811A 94F0 6405 6E6B 7D5E
527F 656B 6E6C 714D 8173 8CCB 50E5 6477 669E 8E0B
9278 9903 510C 528B 5FBA 649F 64B9 5FBC 61BF 657D
657F 71DE 7F34 96A6 66D2 74AC 77EF 76A6 87DC 7E73
8B51 5B42 3A70 27088 652A 705A 9C4E
53EB 544C 5CE4 630D 8A06 73D3 7A8C 8F7F 8F83 654E
6559 7A96 3C3E 6ED8 8F03 5602 5626 65A0 6F16 9175
564D 5DA0 6F50 566D 5B13 7365 85E0 8DAD 8F4E 91AE
8B65 3B2D 76AD 91C2
9D64 6AF5 7E90
4E29 52FC 7EA0 673B 725E 7A76 7CFA 9E20 7CFE 8D73
28CCA 9604 557E 63C2 63EA 841B 63EB 9CE9 644E 6A1B
9B0F 9B2E
4E5D 4E45 4E46 4E63 597A 7078 7396 820F 97ED 7D24
9152 9579 97EE
531B 65E7 3EA9 81FC 548E 759A 4192 67E9 67FE 5003
6344 6855 5313 53A9 6551 5AA8 5C31 5EC4 8205 50E6
5ECF 5ED0 6166 6BA7 9E6B 820A 5336 9BE6 9E94 9F68
9DF2
6C63 6766 6B0D
620B 5978 5C16 5E75 575A 6B7C 95F4 51BF 6214 73AA
80A9 8270 59E6 59E7 517C 76D1 5042 5805 60E4 3B74
730F 7B3A 8C5C 6E54 724B 7F04 83C5 83FA 9593 641B
6937 693E 714E 728D 744A 788A 7F23 844C 8C63 76E3
7777 7B8B 84B9 6A2B 719E 7DD8 9CA3 9CFD 9E63 71B8
2585D 7BEF 7E11 8551 8573 8271 9930 99A2 9E89 7010
97AC 97AF 9CD2 791B 4320 89B8 9D73 7038 9427 6AFC
6BB2 9DBC 97C0 9C39 56CF 8643 946F 97C9
56DD 62E3 67A7 4FED 67EC 5039 6338 6361 7B15 8327
51CF 526A 6898 68C0 583F 63C0 63C3 691C 6E1B 6E55
7751 7877 8A43 950F 5F3F 6695 7450 7B67 7B80 7D78
88E5 8C2B 8DBC 6229 622C 3A35 78B1 5109 7FE6 64BF
6AA2 2372D 8B07 8E47 77BC 7906 7C21 85C6 8947 8949
8B2D 7E6D 9B0B 9E78 703D 8812 9417 9C0E 5297 9E7B
7C5B 8B7E 9E7C 897A
89C1 4EF6 898B 996F 5251 5EFA 6D0A 726E 8D31 4FF4
5263 682B 6DA7 73D4 8230 8350 5065 5271 5FA4 6E10
8C0F 91FC 5BCB 6E85 81F6 88B8 8DF5 65D4 6957 6BFD
249E3 8171 8465 8CCE 9274 952E 50ED 3A34 6997 6F38
528D 528E 3D4E 6F97 7BAD 7CCB 852A 8AD3 8CE4 8D9D
8E10 8E3A 5292 5294 8AEB 92FB 991E 77B7 78F5 85A6
87B9 9373 9375 64F6 6FFA 7E5D 3C04 89B5 93E9 7033
8266 8B7C 8F5E 9431 9451 9452 946C 9473
5F45 58B9 6A7A 7900 6BB1
5DFE 4ECA 65A4 9485 5153 91D1 6D25 77DC 89D4 57D0
73D2 7D1F 8355 887F 60CD 583B 7B4B 91FF 5D9C 9E76
9EC5 895F
4EC5 5C3D 4FAD 537A 5DF9 7D27 5807 83EB 50C5 53AA
8C28 9526 5AE4 5ED1 6F0C 76E1 7DCA 9991 69FF 747E
84F3 5118 9326 8B39 9949
4F12 52A4 52B2 5997 6783 8FD1 8FDB 52C1 6D55 6649
664B 6D78 70EC 8369 8D46 552B 740E 7972 9032 5BD6
6422 6E8D 7981 7F19 9773 5890 3A37 3B10 669C 7468
50F8 51DA 6B4F 6BA3 89D0 5664 3B1C 6FC5 74A1 7E09
8CEE 568D 5B27 3BF2 6FDC 71FC 74B6 85CE 89B2 8D10
9F7D
91D2 781B 743B 58D7
6C5F 59DC 5C06 6D46 7555 8333 8C47 5C07 757A 8441
646A 7FDE 50F5 6F3F 8780 58C3 7F30 6A7F 6BAD 8591
87BF 9CC9 7585 7913 7586 7E6E 97C1 9C42
8BB2 5956 6868 508B 5968 848B 596C 69F3 734E 8199
8523 8029 4243 8B1B 985C
531E 5905 5F1C 6D1A 7EDB 964D 5F36 7D73 88B6 52E5
9171 5D79 647E 6EF0 5F4A 236A6 729F 7CE1 7CE8 91A4
8B3D 91AC
5320 6762 6AE4
5755 5759 5DE0 4EAC 6CFE 7ECF 4EB0 79D4 830E 6D87
834A 5A5B 60CA 65CC 65CD 7304 7D4C 8396 6676 7A09
8148 8346 83C1 7CB3 7D93 844F 5162 7CBE 8059 9CB8
9D5B 9BE8 9D81 9D84 9E96 9F31 9A5A 9EA0
4E95 4E3C 522D 362B 5753 5B91 6C6B 9631 6C6C 80BC
5244 7A7D 9888 666F 981A 5106 5E5C 61AC 66BB 71DB
749F 9838 61BC 74A5 87FC 4718 8B66
598C 51C0 5F2A 5F84 4FD3 205CA 6D44 80EB 8FF3 501E
51C8 5F33 5F91 75C9 7ADE 5A59 5A67 6871 68B7 6DE8
811B 9015 291D5 7ADF 75D9 7AE7 9753 50B9 656C 3B0C
7AEB 9756 5883 734D 8AA9 8E01 9759 477C 975A 955C
975C 66D4 6FEA 701E 93E1 7AF6 7AF8
775B 6A78 71DD
51E5 521F 6285 530A 5C45 62D8 6CC3 72D9 9A79 82F4
6336 75BD 75C0 7717 7820 7F5D 5A35 5A6E 5D0C 63AC
68AE 6DBA 9671 6910 741A 8152 83F9 8D84 8DD4 9514
96CE 824D 871B 88FE 8E18 8E19 92E6 99D2 9B88 9D21
97A0 97AB 9D8B
26951 5C40 3632 6CE6 4FB7 72CA 6854 6BE9 5579 5A45
6DD7 7117 6908 6BF1 6E68 83CA 90F9 7291 8F02 50EA
7CB7 8DFC 8ACA 8D9C 8EB9 95B0 6A58 6A8B 99F6 4CD4
9D59 8E6B 9D74 5DC8 9DAA 861C 9F33 9A67
5480 5F06 6CAE 4E3E 6319 8392 6907 6989 6998 7B65
9F83 849F 8065 8209 8E3D 64E7 9F5F 6AF8 6B05
53E5 5DE8 4E6C 5DEA 8BB5 5177 59D6 5CA0 6007 6010
601A 62D2 62E0 6D30 90AD 661B 6B6B 70AC 82E3 949C
4FF1 5028 5036 51A3 5267 79EC 57E7 57FE 60E7 636E
7C94 801F 86B7 8893 728B 8A4E 8DD9 8DDD 98D3 8C66
9245 952F 5BE0 6133 7AAD 805A 8661 5287 52EE 5C66
8E1E 99CF 58C9 61C5 64DA 6FBD 7AB6 422E 92F8 9B94
5C68 907D 98B6 8C97 7C34 8E86 91B5 61FC 943B 3B2C
77E9 7220 8977
5658 6485 64A7 5C69 8E7B
4E85 2010C 5B52 5B53 51B3 5214 6C12 8BC0 6289 6C7A
5F21 3B48 6CEC 73A6 73A8 82B5 6317 73CF 75A6 7804
7EDD 8673 89C9 5014 6354 6B2E 8697 5D1B 6398 658D
6877 6B8C 8990 89D6 8A23 8D7D 8DB9 4848 5095 53A5
3B7E 7133 7D55 7D76 899A 8D89 902B 920C 37F2 5282
3522 52EA 7474 8C32 99C3 5DA5 61B0 71A6 7234 7357
761A 9D02 9D03 5671 61A0 6A5B 6A5C 855D 8568 7235
81C4 9562 87E8 87E9 5C6B 8B4E 8E76 8E77 9D8C 5337
56BC 7211 77CD 89BA 940D 941D 721D 89FC 5F4F 6204
652B 7383 9DE2 6B14 77E1 9FA3 28C1C 8C9C 8EA9 9481
59E2 5A1F 6350 6D93 7106 8127 74F9 9E43 88D0 52EC
48FA 954C 93B8 9D51 942B 8832
5377 545F 5E23 57CD 6372 83E4 9529 3DF7 9308 81C7
52B5 5946 5DFB 5026 52CC 684A 72F7 7EE2 96BD 6DC3
7737 774A 7D6D 7F65 45AD 9104 7760 7D79 96CB 98EC
21840 617B 8528 990B 7367 7E33 7F82
519B 208D5 541B 5747 36AC 6C6E 59F0 8ECD 94A7 8690
8880 687E 76B2 8399 83CC 921E 7885 76B8 76B9 89A0
9281 929E 9CAA 9E87 9355 9BB6 9E8F 9E95
5441 4FCA 3F59 57C8 5CFB 6343 6D5A 90E1 9656 9982
9A8F 35A5 6659 710C 73FA 2797A 347A 68DE 756F 7AE3
3766 41F9 7B98 7B9F 8720 28318 5101 3559 9915 5BEF
61CF 71C7 6FEC 99FF 9D54 9D58 6508 4551 651F
2E86 5182 518B 5770 6243 57DB 7D45 99C9 99EB 860F
8614
518F 56E7 38A0 6CC2 7085 4FB0 70AF 8FE5 6D7B 9008
70F1 489B 7A98 988E 715A 7D97 50D2 715B 71B2 6F83
8927
FDD0-3111
4E03 6C8F 8FC9 59BB 67D2 501B 51C4 6816 6864 5A38
60BD 687C 6DD2 90EA 6532 671F 68F2 6B3A 3C66 840B
86E3 50DB 5601 617D 69BF 6F06 7DC0 617C 69ED 25250
8AC6 8AFF 970B 45E9 8E4A 3B24 9B4C 4953 93DA 9D88
4E93 9F50 573B 5C90 5C93 5FEF 4E9D 5176 5947 6589
6B67 7541 7941 80B5 82AA 4FDF 75A7 7947 7948 7AD2
5258 658A 65C2 8006 8110 8691 8694 869A 9880 57FC
5D0E 5E3A 6391 6DC7 7309 7566 8DC2 8EDD 91EE 9A90
9A91 68CA 68CB 7426 742A 8401 8415 86F4 612D 7881
7895 797A 44C5 951C 980E 65D7 7CB8 7DA5 7DA6 7DA8
44EB 871D 871E 9B3F 9F4A 7482 8E11 79A5 8572 9321
9CAF 61E0 6FDD 2A5C6 6AB1 6AC0 24A8C 81CD 85C4 9A0E
9A0F 9CCD 4C07 9BD5 9D78 9D80 9E92 7E83 8269 8604
8810 9B10 9C2D 7382 9EA1
4E5E 4F01 5C7A 5C82 9094 542F 5447 675E 7398 76C0
8291 5518 8C48 8D77 5553 5554 5A4D 555F 7EEE 6675
68E8 410E 7DAE 7DBA 8AEC 95D9
6C14 8BAB 5FD4 6C17 6C54 5F03 6C7D 77F5 8FC4 546E
6CE3 7081 76F5 829E 54A0 5951 780C 6814 6B2B 6C23
8A16 552D 5921 68C4 6E46 6E47 789B 847A 6456 66A3
78B6 5650 6187 7508 27858 5668 61A9 78DC 78E7 78E9
468D 7F4A 87FF 9F1C
7F3C 621A 6E0F 7DD5 8904 87A7 7C2F 7C31 7C4F
6390 845C
62E4
8DD2 9160
5736 51BE 34E4 5E22 6070 6D3D 6B8E 7848 6118 9AC2
9790
767F 21D90 49A7 807A
4E14
5207 59BE 602F 5327 7A83 90C4 20CB5 608F 6308 6D2F
3932 60EC 6DC1 7B21 611C 86EA 3966 6705 7BA7 7DC1
9532 21424 7BCB 8E25 7A55 9365 85D2 9BDC 9411 7ACA
2383A
82C6 503F 5AAB 7C61
6084 7857 90FB 5D6A 8DF7 5281 6572 6BC3 8E0D 9121
9125 9539 589D 981D 58BD 5E67 22FE3 6A47 71C6 7F32
9AB9 78FD 936B 936C 7E51 8DAC 8E7A 9430
4E54 4FA8 6865 834D 835E 785A 55AC 83EC 50D1 8C2F
563A 5AF6 376F 6194 9792 6A35 6A4B 854E 7644 4009
77A7 7904 4397 8DAB 85EE 9408 97BD 9866 2710D
5DE7 91E5 6100 9ADC
4FCF 8BEE 5CED 5E29 7A8D 9657 6BBB 7FD8 8A9A 9ADA
50FA 64AC 64BD 9798 97D2 7AC5 7FF9 8B59 8E88 3681
69D7 729E
3400 4E18 4E20 20C0B 5775 36B1 3CCB 90B1 6058 79CB
79CC 86AF 5A9D 6978 8429 9E59 7BCD 7DE7 84F2 8775
7A50 8DA5 4A02 9CC5 87D7 97A6 97A7 9C0C 9C0D 9D96
8824 9F9D
53F4 56DA 624F 72B0 738C 6C53 808D 6C42 866C 6CC5
42B5 866F 4FC5 89D3 8A04 8A05 914B 91D3 5512 3797
3939 3B5D 6D57 7D0C 91DA 6882 6B8F 6BEC 7403 838D
8D47 900E 9011 5D37 5DEF 3962 6E1E 6E6D 76B3 76DA
5DF0 716A 7D7F 86F7 88D8 9052 89E9 8CD5 7486 8764
92B6 9194 9B82 9F3D 9BC4 9C3D
641D 7CD7
91FB 8612
5343 4EDF 5731 5732 5977 6266 6C58 9621 4F65 5C8D
6744 6C67 828A 8FC1 6B26 74E9 81E4 833E 948E 62EA
7275 7C81 515B 60AD 8C38 94C5 5A5C 5B6F 727D 91FA
6394 8688 8C26 9206 96C3 50C9 6106 7B7E 925B 9A9E
9E50 6173 6434 6481 7B9E 8AD0 9077 8930 8B19 9845
6AB6 6510 6ACF 7C3D 9D6E 5B45 6513 9A2B 6511 9B1D
9B1C 3A77 7C64 97C6
4EF1 5C92 5FF4 6272 62D1 524D 94A4 6B6C 8654 94B1
94B3 63AE 8EE1 5A8A 63F5 9210 976C 9257 5898 69A9
7B9D 92AD 6F5B 6F5C 7FAC 6A6C 8541 9322 9ED4 9EDA
6FF3 9A1A 9A1D 704A 9C2C
51F5 80B7 6D45 6DFA 8125 55DB 5D70 69CF 8181 8738
9063 8C34 7F31 7E7E 8B74
6B20 520B 3438 82A1 4FD4 5029 6093 831C 5811 5094
5D4C 68C8 6920 614A 7698 5879 371E 37FB 6B49 7DAA
84A8 69E7 7BCF 8533 8F24 5119 7BDF 58CD 7E34 4945
9C1C
7ACF 9386 93F2 7C56 9453
4EB2 4FB5 94A6 887E 9A8E 5A87 5D5A 6B3D 7D85 8A9B
5D94 89AA 9849 99F8 9BBC 5BF4
3626 5E88 3A81 82A9 82B9 57C1 73E1 79E6 8039 8699
6366 7434 7439 83E6 83F3 9219 96C2 52E4 55EA 5AC0
6EB1 79BD 9772 616C 5659 65B3 9CF9 61C4 3A52 64D2
6FBF 763D 8793 61C3 6A8E 9B35 8804 9D6D
5745 6611 7B09 68AB 8D7E 5BD1 9513 5BDD 5BE2 92DF
87BC
5422 5423 3908 628B 6C81 551A 63FF 83E3 29088 6407
64B3 421C 7019 85FD
545B 6215 6217 65A8 67AA 73B1 7F8C 7F97 7310 8DC4
690C 8154 55C6 6EAC 9516 5D88 6227 69CD 7244 7472
7FAB 8723 9535 7BEC 9306 8B12 8E4C 956A 8E61 9397
93D8
4E2C 5F37 5F3A 5899 5AF1 6F12 6A2F 8503 8537 58BB
5B19 5EE7 6AA3 7246 8594 8262 8620
62A2 7F9F 6436 7FA5 588F 7E48 8941 7E66 93F9
709D 5534 7197 7FBB
55F4 7347
72C5 9751 9752 6C22 8F7B 503E 537F 570A 57E5 5BC8
6C2B 6DF8 6E05 90EC 50BE 873B 8F15 4A1D 9CAD 944B
591D 7520 5260 52CD 60C5 6B91 6674 68FE 6C30 6692
845D 6A08 64CF 64CE 3BF3 6AA0 9EE5
9877 82D8 8BF7 5EBC 9803 5ECE 6F00 3DEB 8ACB 6ABE
5E86 51CA 6385 6BB8 7883 7B90 9758 6176 78D8 78EC
7F44 8B26
7858 6AE6
533A 66F2 4F39 4F49 5324 5C96 8BCE 9A71 5765 5C48
5CA8 5CB4 62BE 9639 3B55 6D40 80E0 795B 5340 7D36
86C6 88AA 8EAF 7B41 7CAC 86D0 8A58 8D8B 5D87 6188
420C 99C6 657A 8AB3 957C 99C8 9EB9 9AF7 9B7C 8DA8
9EAF 89B0 8EC0 9EB4 9EE2 89BB 9A45 9C38 9C4B
4F62 52AC 65AA 6710 80CA 9E32 6DED 7D47 7FD1 6E20
83C3 8EE5 844B 24A0E 7496 8556 9D1D 74A9 78F2 87B6
77BF 87DD 9F29 3739 5FC2 7048 8627 6235 6B0B 6C0D
81DE 766F 7C67 8837 8862 8EA3 883C 947A 9E1C
53D6 7AD8 5A36 8A53 7AEC 877A 9F8B 9F72
53BA 53BB 521E 547F 3C26 551F 801D 9612 89D1 8DA3
95B4 9EAE 95C3 9F01 89B7
8FF2 8850
7F3A 9619 849B
7638
5374 537B 57C6 5D05 5BC9 60AB 96C0 7437 785E 786E
9615 5859 6409 76B5 788F 6128 69B7 58A7 6164 78BA
78BB 8D9E 71E9 95CB 7910 95D5 704D 792D
9E4A 9D72
5CD1 5F2E 606E 609B 5708 570F 68EC 99E9 9409
34B0 5168 6743 4F7A 8BE0 59FE 6CC9 6D24 62F3 7277
8343 8F81 5573 57E2 5A58 60D3 75CA 7842 94E8 6E76
7288 7B4C 7D5F 643C 7454 8472 89E0 8A6E 8DE7 8F07
8737 9293 6A29 8E21 7E13 919B 9CC8 9B08 9A21 9C01
5B49 5DCF 9F64 6B0A 98A7 8838 9874
21FE8 72AC 6C71 754E 70C7 7EFB 7DA3 8647
529D 5238 7276 52E7 97CF 52F8
72AD 6926 697E 95CE
590B 56F7 5CEE 9021
5BAD 5E2C 3A8A 7FA3 7FA4 88D9 88E0
828E 5314
536D 5B86 909B 7A77 7A79 8315 684F 4143 7B3B 8D79
60F8 712A 712D 743C 7B47 823C 86E9 86EC 21983 7162
7758 8DEB 928E 778F 7AAE 511D 618C 6A69 749A 74CA
7AC6 85D1 85ED 74D7
718D
FDD0-3112
5915 516E 5FDA 6C50 8980 5438 5E0C 6271 6278 5365
6614 6790 7A78 80B8 80B9 4FD9 5F86 6038 6053 997B
550F 595A 36D3 5C56 6095 6C25 6D60 727A 72F6 90D7
553D 6089 60DC 637F 665E 6878 6B37 6DC5 70EF 7101
7108 740B 7852 8383 8D65 91F8 5092 60C1 6670 6673
3C64 711F 712C 7280 774E 7A00 7C9E 7FD5 823E 83E5
5380 5D60 5FAF 6EAA 7699 910E 9521 50D6 69BD 7155
7184 7188 7199 7DC6 84A0 8725 8C68 990F 563B 564F
5B06 5B09 6F5D 3FB7 761C 78CE 819D 51DE 20615 5DB2
6199 3B1B 6A28 6A40 71B9 71BA 71BB 7AB8 7E18 7FB2
8785 8787 932B 3C46 71E8 406F 77A6 87CB 8C3F 8C40
8C6F 8C95 7CE6 7E65 96DF 9D57 8B46 91AF 93ED 5DC7
66E6 7214 72A7 89F9 96B5 9145 89FD 9F37 8835 9E02
89FF 9474
4E60 90CB 5E2D 7FD2 88AD 89CB 5AB3 693A 3804 5D8D
6F1D 84B5 84C6 89A1 8D98 69E2 3A57 6A84 8582 96B0
8B35 93B4 972B 9CDB 98C1 9A31 9A3D 8972 9C3C 9A68
67B2 6D17 73BA 5F99 94E3 559C 9222 8448 8478 9268
9269 5C63 6F07 6198 84F0 66BF 6B56 8AF0 58D0 79A7
7E30 8B11 87E2 8E5D 74BD 56CD 9C5A 77D6 8EA7
5338 534C 620F 5C43 7CFB 9969 546C 5FE5 602C 77FD
7EC6 4FC2 54A5 6044 76FB 3938 3B61 6B2F 7EE4 90E4
7D30 91F3 960B 55BA 691E 7FD6 8203 8204 8D87 6140
6ECA 7D8C 8D69 588D 7182 7294 798A 7A27 9699 969F
6F5F 89A4 6231 6F99 422A 856E 9ED6 6232 78F6 4B8E
8669 993C 9B29 7E6B 56B1 95DF 3E0D 973C 5C6D 884B
897F 606F 6E13 6A72 72A0 7902 9BD1
8672 75A8 867E 3520 8C3A 5084 9595 7146 7175 98AC
271CD 778E 8766 9C15
5323 4FA0 72CE 4FE0 5CE1 67D9 70A0 72ED 5CFD 70DA
72F9 73E8 965C 7856 796B 7FC8 823A 35C7 7864 967F
656E 6687 7455 7B6A 821D 9050 78AC 8F96 78CD 7E00
7E16 8D6E 9B7B 8578 8F44 935C 971E 938B 9EE0 9A22
9DB7
959C
4E05 4E0B 4E64 5413 759C 590F 3648 7771 5687 61D7
7F45 5913 93BC 93EC
5737 68BA 6E8A
4E9B 3C54 63F3 7332 6954 6B47 874E 880D
52A6 534F 65EA 90AA 5354 80C1 57A5 604A 62F9 631F
594A 5CEB 633E 8105 8107 887A 5055 659C 3B68 8C10
35BF 7FD3 55CB 6136 643A 744E 7D8A 26CC3 3666 7181
818E 52F0 64B7 7DF3 7F2C 8762 978B 9821 64D5 8AE7
71F2 3A66 64F7 97B5 651C 7E88 896D 8B97 9FA4
5199 51A9 5BEB 85DB
4F33 707A 5378 6CC4 6CFB 7EC1 7F37 6D29 70A7 7944
5A0E 5C51 5C53 22B3F 505E 5070 5368 5FA2 68B0 70F2
710E 7D32 4EB5 5A9F 5C5F 6E2B 245C8 79BC 7D4F 7D6C
8C22 50C1 586E 698D 69AD 3D3D 5C67 66AC 7DE4 8909
5667 5DB0 5EE8 61C8 6FA5 736C 7CCF 27735 97F0 71EE
85A2 85A4 893B 8B1D 9082 99F4 7009 97A2 7023 7215
424F 7E72 87F9 880F 9F58 9F5B 9F65 9F42 8E9E
810B 5911
7071 7072 547A 67AD 4FBE 54D3 67B5 9A81 54EE 5BAF
5BB5 5EA8 6D88 7EE1 8653 9E2E 5A4B 689F 7107 7307
900D 75DA 75DF 785D 7863 7A99 8427 9500 63F1 7D83
7FDB 8437 560B 5610 6B4A 6F47 7BAB 8E03 5635 5F47
61A2 3A4B 7362 92B7 9704 81AE 856D 9D1E 7A58 7C18
87C2 87CF 9B48 9D35 56A3 7C2B 85C3 87F0 701F 6AF9
24473 9AC7 56BB 56C2 8828 9A4D 9AD0 6BCA 8648
6D28 3B35 7B05 5D24 6DC6 8A24 90E9 6BBD 7B4A 8AB5
2E8C 2E8D 5C0F 6653 6681 7B71 7B7F 769B 66C9 7BE0
76A2 8B0F
5B5D 8096 52B9 54B2 4FF2 6548 6821 6D8D 7B11 5578
509A 6569 35DB 8A68 5628 8A9F 562F 6B57 71BD 97A9
6585 6586 4567
6077 6EE7
4F11 4FE2 54BB 5EA5 3CDC 4FEE 70CB 70CC 7F9E 8119
8129 9E3A 81F9 8C85 9990 929D 9AE4 6A07 9AF9 9380
9D42 93C5 9948 9C43 98CD
82EC
673D 7D87 6EEB 7CD4
79C0 5CAB 5CC0 73DB 7EE3 7407 8896 9508 55C5 6EB4
7493 890E 890F 92B9 8791 7E4D 7E61 93E5 93FD 9F45
9BB4
353E 4EDA 5C73 5148 597E 7EA4 4F61 5FFA 6C19 6774
79C8 67AE 7946 7C7C 82EE 73D7 6380 83B6 8A2E 94E6
23519 50CA 8DF9 9170 9528 5615 929B 9C9C 97EF 5B10
61B8 66B9 9341 859F 893C 97F1 9BAE 8E6E 99A6 4D4C
5EEF 6515 7E8E 9DB1 8E9A 7E96 8973 9C7B
4F2D 95F2 59B6 5F26 8D24 54B8 6326 80D8 5A34 550C
5563 5A39 5A71 6D8E 7D43 8237 86BF 8854 3B79 75EB
86DD 9591 9592 9E47 5ACC 8858 929C 5AFA 5AFB 61AA
648F 6F96 7509 7A34 8AB8 8CE2 3BD7 3D6A 71C5 8AF4
8F31 918E 7647 764E 77AF 85D6 3C0A 7925 4554 9E79
9E99 8D12 9DF3 9DF4 9DFC
51BC 72DD 39E5 663E 5D04 3B60 6BE8 70CD 7303 86AC
9669 8D7B 967A 7B45 5C1F 5C20 641F 8DE3 3B0E 7992
9291 7BB2 5DAE 736B 96AA 736E 934C 71F9 85D3 9855
5E70 6507 6AF6 8B63 861A 4606 496A 7381 97C5 986F
7066
4F23 53BF 5C98 2070E 73B0 7EBF 81FD 82CB 549E 59ED
5BAA 770C 9650 54EF 57B7 5A0A 5A28 5CF4 3A87 6D80
9665 665B 73FE 784D 83A7 9677 9985 774D 7D64 7F10
7FA1 732E 7CAF 7FA8 817A 8706 49DF 50E9 50F4 21416
7DAB 8AA2 648A 7DDA 92E7 61B2 3B17 6A4C 7E23 930E
9921 58CF 8C4F 493C 9EB2 7017 81D4 737B 7CEE 9F38
4ED9 50F2 7E4A 9466
5FC3 59A1 5FFB 8F9B 90A4 6615 677A 6B23 7098 82AF
76FA 4FFD 3B62 60DE 8A22 920A 950C 65B0 6B46 5EDE
92C5 5B1C 85AA 99A8 946B 99AB
6794 3726 8951 9414
4F08
3430 4F29 56DF 9620 5B5E 3B44 248F2 4FE1 8ED0 812A
8845 8A2B 712E 7161 99B8 820B 9856 91C1
5FC4 567A
4E61 8297 76F8 9999 53A2 554C 90F7 5EC2 6E58 7F03
9109 910A 7A25 8459 9115 7BB1 7DD7 81B7 858C 8944
5FC0 9AA7 9E98 6B00 74D6 9576 9472 9A64
4F6D 74E8 8BE6 5EA0 6819 7965 7D74 7FD4 8A73 8DED
4EAB 4EAF 54CD 9977 6651 98E8 60F3 9284 9909 9C9E
66CF 9B9D 8801 9BD7 97FF 9957 995F 9C76
5411 59E0 5DF7 8683 9879 73E6 5842 7F3F 8856 8C61
9805 842B 50CF 52E8 9297 5D91 6A61 95C0 56AE 87D3
8950 940C 9C4C
697F 9C5C
661F 57B6 9A8D 60FA 7329 714B 7446 8165 86F5 89EA
7BB5 7BC2 9B8F 66D0 89F2 935F 9A02 76A8 9BF9
5211 884C 5F62 90A2 4F80 9649 578B 6D10 90C9 9498
5A19 8365 9658 784E 94CF 9203 6ECE 9276 9292 92DE
3A18 7772 9192 64E4
5174 674F 59D3 5E78 6027 5016 8347 5A5E 60BB 6DAC
8395 7DC8 8208 5B39 81D6
54D8 88C4 8B03
5401 620C 65F4 759E 76F1 6B28 80E5 987B 6647 8A0F
987C 8657 865A 8C1E 5AAD 5E41 63DF 6E51 247E0 865B
88C7 9808 6948 7AA2 980A 5618 9700 5653 589F 5B03
7E03 8751 9B46 6B54 8566 8ADD 8B43 7E7B 9450 9A49
9B1A 9B56
4FC6 5F90 84A3
8BB8 5474 59C1 8BE9 5194 6829 73DD 5066 8A31 668A
8A61 7A30 7CC8 9126 9191 76E8
65ED 4F35 5E8F 6C7F 4F90 5379 6034 6C80 82A7 53D9
6064 662B 6D2B 460F 57BF 6B30 6B88 70C5 73EC 52D6
654D 6558 52D7 70FC 7EEA 7EED 9157 55A3 58FB 5A7F
6702 6E86 7D6E 8A39 6149 7166 8CC9 69D2 6F35 6F4A
76E2 7781 7DD2 805F 84C4 928A 735D 7A38 7DD6 9B63
77B2 85C7 85DA 7E8C 9C6E
8053 7D9A 84FF
524A 75B6 3EE1 8486 9774 35FE 8FA5 8FAA 859B 97BE
7A74 6588 4E74 5B66 5CA4 5CC3 6CF6 8313 9E34 8895
8E05 58C6 5B78 5DA8 6FA9 71E2 3D85 89F7 96E4 9DFD
96EA 9CD5 9C48
8840 3570 5437 5779 72D8 6856 8C11 8D90 8B14 7025
81A4 6A30 825D 8F4C
5405 8F69 660D 5BA3 5F32 8ED2 688B 8C16 55A7 5847
5A97 6103 610B 63CE 6684 714A 7444 8431 8432 777B
84D2 5107 7BAE 7E07 7FE7 8756 92D7 61C1 79A4 8AE0
8AFC 857F 9379 99FD 7FFE 8809 77CE 85FC 8610 8B5E
7384 73B9 3623 75C3 60AC 65CB 7401 8701 5AD9 6F29
66B6 7487 4062 6A88 74BF 61F8
54BA 6645 70DC 9009 3535 9078 9848 7663 766C
6030 6CEB 39E6 6621 70AB 7EDA 7729 94C9 7404 7734
8852 88A8 6E32 7D62 6965 6966 9249 78B9 8519 955F
9799 98B4 7E3C 7E4F 93C7 8B82 8D19
9C1A
5743 52CB 57D9 7104 52DB 5864 718F 7AA8 52F2 8512
52F3 99E8 58CE 736F 85AB 66DB 71FB 81D0 85B0 77C4
7E81 860D 58E6 91BA
5BFB 5EF5 65EC 9A6F 674A 5DE1 7543 8BE2 5CCB 6042
6D35 6D54 7D03 6812 686A 6BE5 73E3 8340 8368 5071
3704 5C0B 5FAA 63D7 295B0 8A62 99B4 69C6 6F43 9C9F
565A 3D4C 6F6F 9129 6533 6A33 71D6 7495 87F3 9C4F
9C58 7065
5342 8BAF 4F28 6C5B 8FC5 4F9A 5DFA 5F87 72E5 6B89
8A0A 8A19 8FFF 900A 595E 5DFD 6BBE 7A04 613B 8CD0
905C 5640 6F60 8548 9D55 720B 9868 9442
8BAD 8A13 5691
51F6 5144 342B 5147 5308 8BBB 5FF7 6C79 54C5 605F
6D36 80F7 80F8 8A29 8A7E 8CEF
96C4 718A
713D
8BC7 7138 8A57 5910 657B 22FCC
FDD0-3113
4E4B 652F 536E 6C41 5431 5DF5 6C65 5767 679D 6CDC
77E5 7EC7 80A2 829D 6800 79D3 79D6 80D1 80DD 5001
75B7 7957 79EA 8102 887C 96BB 6894 796C 6925 81F8
6220 6418 7A19 7D95 69B0 7994 8718 99B6 3BC4 9CF7
9D32 9D44 7E54 9F05 8635
6267 4F84 59B7 76F4 59EA 5024 503C 8040 91DE 57F4
57F7 21E1C 6DD4 804C 8CAD 690D 6B96 7286 7D77 8901
8DD6 55ED 74E1 7983 9244 588C 646D 99BD 5B02 6179
6F10 8E2F 6A34 81B1 5128 7E36 8077 87D9 8E60 8EC4
8E91
5902 6B62 53EA 52A7 65E8 5740 5741 5E0B 627A 6C66
6C9A 7EB8 962F 603E 62A7 23CB5 82B7 54AB 6049 6307
67B3 6D14 780B 7949 8F75 75BB 41DB 7D19 8879 6DFD
8A28 8DBE 8EF9 4920 9EF9 916F 85E2 8967
81F3 9624 5FD7 5FEE 627B 8296 8C78 28468 5236 5394
5781 5E19 5E1C 6CBB 7099 8D28 5CD9 5EA2 5EA4 6303
67E3 6809 6D37 81F4 8FE3 90C5 5A21 5F8F 2267A 631A
664A 684E 72FE 7951 79E9 8D3D 8F7E 965F 4E7F 506B
202B7 5F9D 3A01 63B7 68BD 6956 7318 7564 75D4 79F2
79F7 7A92 7D29 7FD0 889F 88A0 89D7 94DA 9E37 5082
21376 5D3B 5F58 667A 6EDE 75E3 86ED 8EFD 9A98 5BD8
5ECC 6431 6ECD 7A1A 7B6B 7F6E 8DF1 8F0A 9527 96C9
5886 21839 6EEF 6F4C 7590 43BA 88FD 899F 8A8C 928D
5E5F 6184 646F 71AB 7A3A 7DFB 442D 81A3 89EF 8CEA
8E2C 92D5 64F3 65D8 7004 99E4 9D19 5295 61E5 6ADB
7A49 4245 87B2 3609 3731 61EB 64F2 8D04 6ACD 74C6
89F6 9BEF 7929 8C51 9A2D 9A3A 9A47 8E93 9DD9 9455
8C52
51EA 4FE7 5F94 8B22
624E 5412 62AF 5953 6313 67E4 67FB 54F3 5067 55B3
63F8 6E23 6942 5284 6463 76B6 6A1D 89F0 76BB 8B47
9F44 9F47
672D 7534 95F8 86BB 94E1 7160 7250 9598 7B9A 802B
9358 8B57
538F 62C3 82F2 7728 781F 6429 9C8A 9C9D 8E37 9B93
9BBA 4562
4E4D 7079 8BC8 54A4 67DE 6805 70B8 5BB1 75C4 86B1
8A50 643E 6EA0 69A8 27A0A 9705 91A1
8707 55FB 5AEC 906E
5387 6298 6B7D 77FA 7813 7C77 8674 54F2 57D1 3B59
7C8D 5560 608A 6662 6663 3B6F 88A9 8F84 5586 86F0
8A5F 41FD 8C2A 99B2 647A 8F12 78D4 8F19 92B8 8F99
87C4 569E 8B2B 8B3A 9BBF 8F4D 8B81 8B8B
8005 4E7D 556B 9517 7987 8D6D 8936 8975
8FD9 67D8 6D59 6DDB 9019 6A1C 6F6A 9E67 87C5 4826
9DD3
7740 8457 8517
635A 658B 658E 6458 69B8 451D 9F4B 29C73
5B85 6AA1
7A84 9259
503A 7826 50B5 5BE8 7635
5908 7C82
4F4B 948A 59B1 5DF6 62DB 662D 76C4 91D7 5541 924A
99CB 7ABC 9363 76BD
722A 627E 6CBC 7475 4203
53EC 5146 8BCF 679B 5797 70A4 72E3 8D75 7B0A 8081
65D0 68F9 436E 8A54 7167 7F69 4207 8087 8088 8D99
66CC 71F3 9BA1 6AC2 77BE 7F84
2EA5 722B 7F40
5DDE 821F 8BCC 4F9C 5468 6D32 8BEA 70D0 73D8 8F80
5F9F 3A04 63AB 6DCD 77EA 90EE 9E3C 558C 7CA5 8D52
9031 8F08 44DF 9282 8CD9 8F16 970C 76E9 8B05 9D43
9A06 8B78
59AF 8F74 8EF8
8098 759B 666D 83F7 776D 7B92 9BDE
7EA3 4F37 546A 5492 5B99 7EC9 5191 54AE 663C 7D02
80C4 76B1 836E 914E 665D 7C99 3473 8A4B 8464 8A76
7503 50FD 76BA 99CE 5663 243F2 7E10 9AA4 7C40 7C55
7C52 9A5F
5E1A 70BF 99F2
6CBE 6BE1 65C3 6834 7C98 86C5 98E6 60C9 8A40 8D88
8A79 959A 8C35 5661 5DA6 9711 6C08 6C0A 859D 9085
77BB 9E6F 65DC 8B6B 9958 9CE3 9A59 9B59 9C63 9E07
8B9D
65A9 98D0 5C55 76CF 5D2D 65AC 382D 692B 7416 370A
640C 76DE 5D83 5D84 6990 98AD 5AF8 9186 6A4F 406A
8F3E 28AC0 27B06 2217A 9EF5
5360 4F54 6218 6808 685F 7AD9 5061 7EFD 68E7 6E5B
83DA 6226 7DBB 5D98 8F1A 6230 8665 8666 89B1 8F4F
8B67 29947 9A4F 8638
8D1E 3630 9488 4FA6 6D48 73CD 73CE 80D7 8C9E 3598
5E2A 6815 6862 771E 771F 7827 91DD 5075 686D 796F
9159 5BCA 5AC3 21EC8 6438 659F 6968 7349 8474 9049
9241 9755 699B 6B9D 7467 7504 78AA 798E 8496 84C1
6F67 799B 7BB4 6A3C 6FB5 81FB 9331 8F43 937C 85BD
7C48 9C75
3431 8BCA 62AE 6795 5F2B 6623 8F78 5C52 755B 75B9
7715 7D3E 8044 8897 8A3A 8EEB 7D7C 7F1C 88D6 4AB4
7A39 99D7 7E25 9B12 9EF0
5733 7EBC 9635 753D 4FB2 630B 42B6 9E29 632F 6715
681A 7D16 9663 7739 8D48 9156 63D5 5866 7471 8AAB
8CD1 47F4 6576 9547 9707 9D06 93AD 93AE
8419 92F4
5F20 5F35 7AE0 50BD 5887 5ADC 5F70 22554 615E 6F33
7350 7CBB 9123 66B2 6A1F 24364 748B 8501 9067 9926
87D1 9A3F 9C46 9E9E
4EC9 957F 9577 6DA8 638C 6F32 7903
4E08 4ED7 6259 5E10 6756 80C0 8D26 5E33 6DB1 8139
75EE 5D82 5E5B 969C 8CEC 762C 7634 7795
7C80 5E65 93F1 9423
4E89 4F42 59C3 5F81 6014 722D 8BE4 20C9C 5CE5 6323
70A1 72F0 70DD 7710 94B2 57E9 5D1D 5D22 6399 7319
7741 8047 28713 94EE 5A9C 63C1 7B5D 3B39 5FB0 775C
9266 5FB4 84B8 7B8F 5FB5 8E2D 7BDC 931A 9B07 9BD6
7665
6C36 628D 7CFD 62EF 639F 6678 6138 649C 6574
6B63 8BC1 5E27 653F 90D1 75C7 5E40 8A3C 5863 40BB
27D84 4223 8ACD 912D 9D0A 8B49 496D
51E7
6731 52AF 4F8F 8BDB 6D19 90BE 682A 73E0 8331 8BF8
732A 7843 79FC 94E2 7D51 86DB 88BE 8A85 8DE6 69E0
876B 9296 6A65 6F74 8AF8 8C6C 99EF 9BA2 9D38 7026
6AEB 6AE7 9BFA 9F04 8829
7AF9 6CCF 7AFA 70A2 7B01 70DB 7A8B 833F 7B1C 8233
9010 7603 7BC9 71ED 880B 8E85 9C41 5B4E 705F 66EF
6B18 7225 883E
4E36 4E3B 20C0D 5B94 62C4 7F5C 6E1A 967C 716E 8A5D
7151 5631 6FD0 9E88 77A9 529A 56D1 65B8 77DA
4F2B 4F47 4F4F 52A9 7EBB 577E 677C 6CE8 82CE 8D2E
8FEC 9A7B 58F4 67F1 6BB6 70B7 75B0 771D 782B 795D
7ADA 7969 7D35 7D38 7F9C 8387 86C0 5D40 7B51 8A3B
8CAF 8DD3 8EF4 94F8 7B6F 9252 99B5 7BB8 7FE5 6A26
92F3 99D0 7BEB 9714 9E86 9444
58B8
6293 6A9B 81BC 9AFD 7C3B
5353 62D9 70AA 502C 6349 684C 68C1 6DBF 68F3 7A5B
25F1A 4B93 7A71 883F
5734 5F74 6C4B 72B3 707C 53D5 59B0 65AB 6D4A 8301
4E35 6D5E 8BFC 914C 5544 5545 5A3A 39FB 3B6C 68B2
70F5 65B1 666B 6913 7438 4401 251CD 787A 7AA1 7F6C
65B2 69D5 64AF 64C6 799A 4175 8AC1 8AD1 92DC 6FC1
7BE7 289E7 64E2 6580 65B5 6FEF 243F8 6AE1 8B36 956F
9D6B 7042 8817 942F 9432 7C57 9DDF 7C71
5285
7AA7
62FD
8DE9
96B9 8FFD 9A93 9525 9310 9A05 9D7B
6C9D
5760 6858 7B0D 5A37 60F4 7F12 7577 7500 787E 8187
8D58 589C 8AC8 918A 7E0B 9323 991F 7908 8D05 8B75
8F5B 9446
7F00 7DB4
4E13 53C0 5C02 7816 5C08 587C 5AE5 911F 747C 78D7
819E 989B 750E 78DA 8AEF 87E4 9853 9C44
8F6C 5B68 8EE2 7AF1 4871 8F49
7077 556D 581F 7451 815E 8483 50CE 8D5A 64B0 7BC6
9994 7BF9 8CFA 8948 8B54 994C 56C0 7C51
5B92 80AB 8FCD 7A80 8C06 8AC4 8860
51C6 57FB 6E96 7DA7
8A30 7A15
51D6
5986 5E84 599D 5A24 6869 8358 6889 838A 6E77 7CA7
88C5 88DD 6A01 7CDA
58EE 58EF 72B6 72C0 58F5 710B 6F34 649E 6207
5E92
4E2D 4F00 6C77 5223 5990 5F78 5FE0 6CC8 7082 7EC8
26B15 67CA 76C5 949F 41D7 822F 8873 8877 7D42 9221
5E52 953A 8520 92BF 87A4 87BD 937E 9F28 8E71 9418
2915E 7C66
80BF 79CD 51A2 55A0 5C30 585A 585C 6B71 7144 816B
7607 7A2E 8E35 7A5C
4EF2 4F17 5995 72C6 794C 91CD 833D 869B 8876 5045
773E 5839 5A91 7B57 8846 8AE5
8FDA
FDD0-3114
5403 4F99 54E7 5F68 80F5 86A9 9E31 7735 7B1E 55AB
74FB 8A35 55E4 5AB8 75F4 7D7A 645B 5644 8ABA 779D
9D1F 87AD 7661 9F5D 9B51 5F72 9ED0
5F1B 6C60 9A70 577B 5CBB 8FDF 6301 7AFE 830C 6B6D
834E 86B3 8D7F 7B42 8CBE 8D8D 9045 99B3 7B8E 905F
5880 6F26 8E1F 7BEA 9072 8B18 28A32
5C3A 53FA 544E 4F88 5376 9F7F 5791 80E3 6065 3DB4
7C8E 42BC 803B 8687 6B3C 6B6F 88B2 88B3 88ED 9279
9F52 892B
5F73 53F1 65A5 6758 707B 8D64 996C 62B6 52C5 605C
70BD 52D1 7FC4 7FC5 6555 70FE 75D3 557B 3961 6E41
7873 98ED 50BA 75F8 815F 8DEE 9253 96F4 7608 7FE4
9290 6157 618F 761B 7FE8 906B 71BE 61D8 8DA9 4820
994E 9D92 9DD8
599B 9EB6
53C9 6260 6748 2472F 809E 81FF 633F 505B 63D2 63F7
9987 55CF 929F 9538 7580 8256 9364 9937
79C5 579E 67E5 832C 8336 5D56 7339 976B 643D 8A67
5BDF 69CE 78B4 25ED7 6AAB 297D4
8869 8E45 9572 9454
597C 6C4A 5C94 4F98 8BE7 59F9 7D01 5DEE 47D5 8A6B
8F66 4F21 8ECA 4FE5 7817 5513 8397 7868 86FC
626F 5056 47A3 64A6
5C6E 5F7B 577C 8FE0 3934 70E2 3FED 352D 8045 63A3
7869 9819 5FB9 64A4 6F88 3B1A 52F6 77AE 4720 7221
8286 62C6 9497 91F5
4FAA 67F4 8C7A 7961 558D 5115 9F5C
831D
867F 8883 8A0D 7625 8806 56C6
6284 2207E 5F28 600A 6B29 949E 8A2C 712F 24674 8D85
9214 52E6 4AFF
724A 6641 5DE2 5DE3 671D 9F0C 6F05 911B 5632 6A14
6F6E 7AB2 7F7A 8F48 9F02 8B3F
5435 7092 7727 7123 717C 9EA8 5DD0
4EE6 4EEF 8016 89D8
62BD 5A64 640A 7633 7BD8 72A8 72AB
4EC7 601E 4FE6 5E31 6826 60C6 7D2C 7EF8 6906 7574
7D52 83D7 6101 7697 7A20 7B79 9167 7DA2 88EF 8E0C
5114 96D4 568B 5B26 5E6C 61E4 71FD 85B5 96E0 7587
7C4C 8E8A 91BB 8B8E 8B90
4E11 4E12 541C 677B 677D 4FB4 5062 7785 919C 77C1
9B57
81ED 81F0 6BA0 905A
916C
8FBF 89C7 6400 68B4 8998 9246 88E7 92D3 5E68 895C
6519
5A75 8C17 68CE 6E79 998B 7158 7985 7F20 50DD 7351
8749 8A97 5103 5B0B 5EDB 6F79 6F7A 7DFE 6FB6 78DB
92CB 6BDA 79AA 9561 700D 87EC 913D 5133 5296 87FE
56B5 5DC9 703A 9141 6B03 7E8F 7E92 8E94 9575 826C
8B92 9471 995E
4EA7 522C 65F5 4E33 65BA 6D50 5257 8C04 5574 7522
7523 94F2 9610 5277 8487 5D7C 644C 6EFB 563D 5E5D
8AC2 95B3 9AA3 71C0 8546 7C05 5181 7E5F 8B42 8FB4
93DF 95E1 56C5 705B 8B87
5FCF 785F 3B04 6472 61F4 98A4 61FA 7FBC 97C2 986B
58E5
62BB 6375 90F4 741B 55D4 7D9D 778B 8AC3 8CDD 7E1D
8B13
5C18 81E3 5FF1 6C88 6C89 8FB0 9648 8FE7 5BB8 831E
6550 8380 8390 8A26 8C0C 8ED9 9673 6116 63E8 9202
7141 5875 760E 6A04 852F 9703 8AF6 87B4 85BC 9E8E
66DF 9DD0
8DBB 7876 789C 588B 5926 78E3 8E38 9356 8D02 91A6
75A2 886C 9F80 8D81 8D82 6987 9F53 512C 9F54 512D
56AB 8C36 6AEC 896F 8B96
70E5 6668
4F25 660C 5000 5A3C 6DD0 7316 960A 667F 7429 83D6
9520 88EE 9329 95B6 9CB3 4B96 9BE7 2A087 9F1A
4EE7 514F 80A0 82CC 9578 5C1D 507F 5E38 5F9C 74FA
8407 751E 8178 5617 5872 5AE6 747A 8193 92FF 511F
5690 9CBF 93DB 9C68
5382 573A 6636 60DD 5834 50D8 53B0 5EE0 6C05 92F9
6005 739A 7545 5021 9B2F 5531 60B5 713B 7452 66A2
757C 8AAF 97D4
655E 6919 87D0
6CDF 9637 67FD 722F 6D7E 79F0 5041 86CF 36F5 68E6
6E5E 725A 7424 8D6A 50DC 6186 645A 7A31 9757 6490
6491 7DFD 6A55 77A0 8D6C 9833 6A89 7AC0 7A6A 87F6
93F3 93FF 9953
4E1E 6210 673E 5448 627F 67A8 8BDA 4E57 57CE 5A0D
5CF8 6D06 90D5 4E58 57D5 5BAC 6330 665F 73F9 8100
6381 73F5 7A9A 812D 837F 94D6 5818 60E9 68D6 6909
7A0B 7B6C 7D7E 584D 5856 6E97 7880 41F8 88CE 8AA0
757B 9172 92EE 6195 6F82 6F84 6A59 6A99 7013 61F2
2815D 9A2C
4FB1 5F8E 609C 9A8B 5EB1 901E 7748 9A01
79E4
9BCE
51FA 5C80 521D 6474 6A17 8C99 9F63
520D 82BB 9664 53A8 8C60 9504 5AB0 6EC1 8021 870D
8D8E 924F 96CF 3551 7293 84A2 84AD 3861 5EDA 854F
92E4 6A71 7BE8 5E6E 6AC9 96DB 6AE5 85F8 8E70 8E87
9DB5 8E95
51E6 6775 7840 50A8 6918 696E 891A 6FCB 5132 6A9A
790E 9F6D 9E00 9F7C
4E8D 5904 7ACC 6035 62C0 7ECC 8C56 67F7 6B2A 7AD0
4FF6 654A 755C 3647 57F1 73FF 7D40 8655 5097 7421
6410 6EC0 89E6 9110 8E00 95A6 510A 563C 84EB 8AD4
61B7 65B6 6B5C 81C5 9EDC 89F8 77D7
695A 698B 6A7B 74B4 87F5
6B3B 6B58
9034 8E14 6233
2ECC 2ECD 8FB6 8FB5 3C8B 5A15 5A16 60D9 6DB0 7EF0
5A7C 814F 8F8D 44CE 916B 7DBD 8DA0 8F1F 9F8A 64C9
78ED 7E5B 6B60 56BD 9F6A 9461
63E3 640B
8197
555C 562C 81AA 8E39
5439 708A
5782 5015 57C0 6376 68F0 690E 8144 9672 6425 83D9
9524 69CC 7BA0 9318 9840 939A
9FA1
5DDB 5DDD 6C1A 7A7F 5276 732D 744F
4F1D 4F20 8221 8229 8239 570C 50B3 693D 9044 66B7
7BC5 8F32
821B 8348 5598 6B42 50E2 8E33
6C4C 4E32 7394 948F 91E7 8CD7 9DA8
65FE 6776 6625 583E 5A8B 8405 6699 693F 7443 7BBA
877D 6A41 8F34 81A5 6AC4 9C06 9D9E 2A0B9
7EAF 5507 6D71 7D14 9659 6DF3 8123 83BC 6E7B 7289
6EE3 6F18 8493 84F4 9187 9195 931E 9BD9
5046 60F7 8436 7776 8CF0 8822
9E51 9D89
5205 75AE 7A93 7A97 724E 6450 7255 7621 7ABB
5E8A 7240 5647 5E62
95EF 50B8 6464 78E2 95D6
521B 6006 5231 524F 5259 51D4 5275 6134
5145 51B2 5FE1 6C96 833A 6D7A 73EB 7FC0 8202 5603
644F 5FB8 6183 61A7 885D 41B9 7F7F 825F 8E56
866B 5D07 5D08 9680 7DDF 8769 8908 87F2 721E
5BA0 57EB 205A5 5BF5
94F3 63F0 9283
FDD0-3115
5C38 5931 5E08 545E 8671 8BD7 9E24 5C4D 65BD 6D49
72EE 90BF 5E2B 7D41 91F6 6E64 6E7F 921F 6EAE 6EBC
7345 8479 8A69 9247 9248 7461 8492 84CD 9CF2 8768
9CFE 27A79 9CBA 6FD5 26488 8937 9366 2A014 9BF4 9C24
9DB3 8979
5341 9963 77F3 4E6D 8FBB 65F6 20C34 5B9E 5B9F 65F9
59FC 5CD5 70BB 8680 98DF 98E0 57D8 6642 794F 83B3
5BD4 6E5C 5852 6EA1 9048 9250 5BE6 69AF 8494 8755
4215 9CA5 9F2B 9F2D 9C23
53F2 77E2 4E68 8C55 4F7F 59CB 9A76 5158 5BA9 5C4E
7B36 9242 99DB
58EB 6C0F 793B 4E17 4E16 4ED5 5E02 2EAC 793A 534B
5F0F 5FD5 2EAE 4E8A 4F3C 53D3 623A 4E8B 4F8D 52BF
5469 67F9 8BD5 9970 519F 5BA4 6040 6043 62ED 662F
6630 67BE 67FF 7702 89C6 8D33 683B 70D2 770E 7721
8210 8F7C 9002 94C8 8996 8C49 901D 91C8 5A9E 5D3C
5F11 5FA5 63D3 8C25 8CB0 91CA 52E2 55DC 5F12 7757
7B6E 89E2 8A66 8EFE 9230 9243 98FE 8213 8A93 927D
596D 9069 492D 92B4 9919 566C 5B15 6FA8 8ADF 8AE1
991D 87AB 8B1A 907E 7C2D 91CB 896B
4F66 7ACD 8BC6 62FE 5319 5D75 6981 7176 7BD2 9B96
7C42 8B58 9C18
6740 6C99 7EB1 4E77 5239 524E 7802 5526 7300 7C86
7D17 686C 6BBA 6BEE 3E3A 838E 94E9 75E7 7870 715E
88DF 699D 6A27 8531 9B66 9CA8 9BCA 9BCB 93A9
50BB 510D
503D 553C 5551 5565 5E39 53A6 55A2 8410 5EC8 3C3C
6B43 7FDC 4209 7B91 7FE3 95AF 970E
7E4C
5962 731E 8D4A 756C 7572 8F0B 8CD2 8CD6 6AA8
820C 4F58 8675 86C7 86E5 27D73
820D 6368 4B37
538D 8BBE 793E 5399 5C04 6D89 6DBB 6E09 8A2D 8D66
5F3D 6151 6442 6444 6EE0 6174 6475 850E 6B59 97D8
9A07 8802 4713 61FE 651D 7044 9E9D 6B07
820E
3D13 7B5B 917E 7BE9 7C01 7C1B 91C3
7E7A
6652 3B20 95B7 66EC
5F30 634E 70E7 68A2 83A6 713C 7A0D 65D3 7B72 8244
86F8 8F0E 71D2 4230 98B5 9AFE 9BB9
52FA 828D 67D6 73BF 82D5 7AF0 97F6
5C11 28218 4520
52AD 5372 7ECD 90B5 54E8 5A0B 7D39 8891 7744 7DA4
6F72
8571
53CE 6536
624B 5B88 57A8 9996 824F
5BFF 53D7 72E9 517D 552E 6388 6DAD 7EF6 75E9 58FD
7DAC 5900 7626 46F5 7378 93C9
624C 7363
5C71 5F61 9096 5220 522A 6749 59CD 59D7 829F 9490
67F5 72E6 73CA 8222 82EB 886B 57CF 75C1 8ED5 633B
7B18 8120 8DDA 527C 6427 5607 5E53 717D 6F78 6F98
6A86 7E3F 81BB 7FB4 7FB6 9BC5 3C11
27A3E
95EA 9655 9583 965D 3A8E 6671 7154 7752 718C 89A2
8BAA 6C55 38CC 759D 5261 6247 8A15 8D78 639E 91E4
5093 5584 928F 9A9F 50D0 58A0 58A1 6F6C 25531 7F2E
912F 5B17 64C5 6A3F 6B5A 81B3 4C49 78F0 8B06 8D61
4120 7E55 87EE 4947 87FA 8B71 8D0D 9425 994D 9A38
9CDD 7057 9C53 9C54
5738 6763 958A 657E
7533 5C7E 625F 4F38 8EAB 4F81 547B 59BD 7C76 7EC5
8BDC 59FA 67DB 6C20 73C5 7A7C 7C78 5A20 5CF7 7521
7712 7837 6552 6DF1 7D33 8398 515F 68FD 8A37 8460
88D1 8A75 20EDD 7527 84E1 8518 71CA 99EA 9CB9 66D1
8593 9D62 9BF5 9C3A
4EC0 751A 795E 4C20
5F1E 90A5 5BA1 77E4 54C2 77E7 5BB7 8C02 8C09 5A76
6E16 8A20 5BE9 8AD7 9823 9B6B 66CB 9825 77AB 5B38
700B 3C02 89BE 8B85
80BE 4FBA 661A 80C2 6D81 7718 6E17 8124 7973 814E
613C 614E 6939 7606 7F67 8703 8704 6EF2 92E0 762E
5814 698A 9C30
4F24 6B87 5546 89DE 50B7 5892 616F 6EF3 6F21 6BA4
71B5 850F 87AA 89F4 8B2A 9B3A
57A7 6244 664C 8D4F 8CDE 8D18 945C
4E04 4E0A 5C19 5C1A 6066 7EF1 7DD4 979D
4EE9 88F3
5347 751F 544F 58F0 6598 9629 6607 6CE9 72CC 680D
6B85 7272 73C4 82FC 3C61 965E 7B19 9679 6E66 713A
7525 924E 8072 9F2A 9D7F
7EF3 61B4 7E69 8B5D
7701 771A 5057 6E3B
5723 80DC 6660 5270 76DB 5269 52DD 8CB9 5D4A 741E
8056 58AD 69BA 8542 8CF8
7AD4 66FB 6A73
4E66 6BB3 5C17 6292 7EBE 3450 53D4 6778 67A2 59DD
964E 500F 5010 66F8 6B8A 7D13 6393 68B3 6DD1 7102
8ED7 758E 758F 8212 83FD 9103 6445 6BF9 7D80 8F93
8DFE 8E08 6A1E 7479 852C 8F38 6A7E 9B9B 6504 5135
9D68
79EB 5A4C 5B70 8D4E 587E 719F 74B9 8D16
9F21 5C5E 6691 9ECD 668F 7F72 8700 9F20 6F7B 66D9
3EFF 85A5 85AF 7659 85F7 8961 5C6C 8969 9483
672E 672F 620D 675F 6CAD 4FB8 51C1 54B0 6037 6811
7AD6 8FF0 6055 6352 8357 5EB6 5EBB 7D49 8853 5C0C
9683 6570 7AEA 8167 8481 88CB 9265 5885 6F31 6F44
6578 6F8D 8C4E 6A39 6FD6 9330 4240 93E3 9D90 866A
702D 7CEC 8834 9C6A 9C70
5237 5530
800D
8A9C
8BF4 54FE 8AAA 8AAC
5981 70C1 6714 94C4 6B36 7855 77DF 6420 69CA 78A9
84B4 7361 7BBE 26097 9399 720D 9460
8870 6454 2812E
7529
5E05 5E25 2361A 87C0 535B
8C01 813D 8AB0
6C34
5E28 6D97 6D9A 7971 7A05 7A0E 7761 88DE 7793
6C35 6C3A 9596
95E9 62F4 9582 6813
6DAE 8168
542E
987A 821C 9806 6A53 779A 8563 77AC 9B0A
53CC 971C 96D9 5B40 9AA6 5B47 9A3B 6B06 7935 9DDE
9E74 4276 826D 9A66 9E18
723D 587D 6161 6F3A 6A09 7E14 45EE
7040
93EF
FDD0-3116
2E9C 65E5 9A72 56F8 91F0 9224 99B9
60F9
70ED 71B1
5A06 9976 6861 835B 5B08 6A48 8558 8953 9952
6270 96A2 64FE
7ED5 9076 7E5E
53B9 79B8 67D4 5A83 63C9 6E18 7163 7448 4413 8447
7CC5 875A 8E42 8F2E 9352 97A3 74C7 9A25 9C07 9D94
7C88 697A 97D6
2EBC 8089 5B8D 816C
5465 80B0 86A6 887B 8887 86BA 88A1 7136 9AE5 562B
3723 9AEF 71C3 7E4E 4533
5184 5189 59CC 67D3 73C3 82D2 5AA3 6A6A
8485
4EBA 4EBB 4EC1 58EC 5FC8 6732 5FCE 79C2 82A2 9213
9B5C 928B 433E 9D40
5FCD 6820 6823 834F 79F9 8375 68EF 7A14
5203 5204 8BA4 4EDE 4EED 8BB1 4EFB 5C7B 5C83 3834
6268 7EAB 2EB6 2634C 598A 6752 7263 7EB4 8095 8F6B
97E7 996A 59D9 794D 7D09 7D1D 887D 8A12 8ED4 6895
3E3E 8EE0 41EE 7D4D 814D 88B5 976D 9771 97CC 98EA
845A 8A8D 9901
7D9B 8EB5
7A63 5134 52F7 703C 737D 8618 74E4 79B3 7A70 4274
8E9F 9B24
58CC 56B7 58E4 6518 7219 7E95
8BA9 61F9 8B72 8B93
6254
4ECD 20BA8 3B41 8FB8 793D 3EB1 967E
82BF
633C
5982 909A 4F9E 5E24 6847 8339 94F7 6E2A 7B4E 88BD
8498 92A3 8761 5112 8560 9D11 5685 5B2C 5B7A 6FE1
9D3D 66D8 71F8 85B7 8815 8966 98A5 91B9 986C 9C6C
6C5D 8097 4E73 8FB1 910F 64E9
5165 6D33 55D5 5AB7 6EBD 7F1B 84D0 7E1F 8925
6256 6741 8FBC 9CF0 5DBF
637C
53D2 82E5 5F31 504C 6E03 712B 9100 6949 84BB 7BAC
7BDB 7207 9C19 9C2F 9DB8
5D76
5A51 6875 7524 7DCC 8564 4B10
6A64 854A 854B 7E60 8602 8603
6C6D 6798 82AE 4132 868B 9510 745E 777F 8739 92B3
92ED 53E1 289E8 3AAB 58E1
5827 648B 58D6
962E 670A 8F6F 800E 5044 8EDF 5A86 744C 789D 7DDB
44F4 8F2D 74C0 791D
77A4
95F0 6DA6 958F 95A0 6F64 6A4D 81B6
8338
620E 809C 6804 72E8 7ED2 5BB9 3B5C 6BE7 8319 8363
70FF 4846 5D58 41EF 7D68 7FA2 5AB6 5AC6 5D64 6408
6411 6EB6 38D1 6995 69AE 69B5 7194 7462 84C9 7A41
877E 9555 7E19 878D 878E 8923 99E5 9AF6 5B2B 5DB8
7203 9394 701C 5DC6 66E7 8811 2A0FE
5197 5B82 5748 22AE8 5087 8EF5 6C04
9D27
7A43
FDD0-3117
4E72 5B5C 5179 54A8 59D5 59FF 830A 6825 7386 7D0E
8332 8D40 8D44 6DC4 79F6 7F01 8C18 55DE 5B73 5D6B
6914 6E7D 6ECB 7CA2 8F8E 5B76 8458 89DC 8A3E 8CB2
8CC7 8D91 9111 9531 798C 7A35 7DC7 922D 9543 9F87
8F1C 6FAC 8AEE 8DA6 8F3A 9319 9AED 9CBB 9F12 937F
93A1 74BE 983F 983E 9BD4 9D85 9F4D 2A5CB 9C26
84FB
20094 4ED4 5407 674D 3EAD 59C9 59CA 77F7 79C4 5470
7C7D 8014 80CF 8678 79ED 6893 7B2B 91E8 5559 7D2B
6ED3 8A3F 699F
5B57 81EA 8293 39D8 5033 525A 6063 7278 8321 6E0D
7725 7726 80D4 80FE 6F2C 3C74
5B50 5D30 6A74
5E00 531D 6C9E 5482 8FCA 62F6 7D25 7D2E 9254 9B73
81DC 81E2
6742 7838 507A 5592 97F4 96D1 22D8D 5DBB 78FC 894D
96DC 56CB 56D0 96E5
548B
5219 629E 6CA2 62E9 6CCE 6CFD 8D23 5247 8FEE 835D
5536 5567 5E3B 7B2E 8234 8CAC 6EAD 77E0 5616 5AE7
5E58 7BA6 6A0D 8ACE 8D5C 64C7 6FA4 769F 7794 7C00
790B 8B2E 8CFE 880C 8957 9F5A 456A 9F70 9E05
5928 4EC4 5E82 6C44 6603 6617 6351 5D31
4F2C 8536
707D 707E 753E 54C9 683D 70D6 6E3D 83D1 7775 8CF3
5BB0 5D3D 43C1
518D 5728 6257 4FA2 6D05 8F7D 50A4 8F09 9168 510E
7E21
8D3C 621D 8CCA 9C97 9BFD 8808 9C02 9C61
50AE 906D 7CDF 8E67 91A9
51FF 947F
65E9 67A3 86A4 68D7 6FA1 74AA 85BB 7E70 85FB
7076 7681 7682 5515 5523 688D 9020 55BF 8241 6165
566A 71E5 7C09 8B5F 8DAE 8E81 7AC3 7AC8
6806
90B9 9A7A 8BF9 90F0 966C 68F7 68F8 83C6 9112 7B83
7DC5 8ACF 9CB0 9139 9BEB 9EC0 9A36 9F71 9F7A
8D71 8D70
594F 63CD 6971 3D75
9BD0
5142 7CCC 7C2A 7C2E 9415 941F
54B1
661D 6CAF 685A 5BC1 3CEB 63DD 5646 648D 5127 6505
6512 5139 6522 8DB1 7938 8DB2
6682 3506 66AB 8CDB 8D5E 933E 6FFD 8E54 913C 74C9
8D0A 93E8 74D2 373A 7052 8B83 9147 74DA 79B6 8978
8B9A 9961
600E
8C2E 8B56 8B5B
56CE
5328 7242 7F98 8D43 8CCD 81E7 8CD8 8535 8D13 9AD2
8D1C
9A75 99D4
3638 5958 5F09 810F 585F 846C 92BA 81D3 81DF
5897 589E 618E 7F2F 912B 6A67 71B7 7494 77F0 78F3
7F7E 7E52 8B44
9503 92E5 8D60 7511 8D08
9C5B
79DF 8445 84A9
5346 8DB3 5352 54EB 5D12 5D2A 65CF 50B6 7BA4 8E24
8E3F 955E 93C3
8BC5 7EC4 963B 4FCE 723C 73C7 7956 7D44 8A5B 977B
4503
93BA
6628 79E8 637D 838B 690A 7422 7A13 7B70 923C
20087 5DE6 4F50 5528 7E53
4F5C 5750 3634 5C9D 5C9E 600D 963C 4FB3 80D9 5511
5EA7 795A 505A 3930 3B6E 888F 8443 8444 98F5 3600
7CF3
5497 84D9
539C 6718 3B70 55FA 6A36 87D5 7E97
5D8A 5634 5DB5 567F 74BB
682C 7D4A 9154 6700 666C 797D 7A21 7F6A 8FA0 69DC
917B 9189 855E 92F7 930A 6A87 6A8C
67A0 7A5D
94BB 28256 8E9C 947D
7E64 7F35 7E82 7E89 7C6B 7E98
6525 945A
5C0A 58AB 58FF 5D9F 6A3D 9075 7E5C 7F47 940F 9CDF
9C52 9DF7
50D4 5642 6499 453F 8B50
6358 928C
9D8E
5B97 5027 7EFC 9A94 582B 5D4F 5D55 60FE 68D5 7323
8159 6721 6936 847C 5D78 4053 7A2F 7D9C 7DC3 71A7
4226 7DF5 7FEA 876C 8E28 8E2A 78EB 9350 8C75 8E64
9A0C 9B03 9A23 9B09 9B37 9BEE 9BFC 9441
603B 506C 6374 60E3 6121 63D4 6403 50AF 3DD3 6460
7DCF 84D7 7E02 7E3D 93D3
7EB5 662E 75AD 500A 7314 7882 7CBD 7CC9 7632 7E26
931D 7E31 7CED
6F48
FDD0-3118
5472 75B5 8D7C 5068 8D80 8DD0 29A28 9AB4 7E12 8800
9ACA 9F79
8BCD 3639 5790 67CC 73C1 5832 7960 8308 8328 3935
74F7 46D0 8A5E 8F9D 8F9E 6148 7506 78C1 96CC 4A0F
9E5A 7CCD 8FA4 98FA 9908 3602 5B28 6FE8 858B 9D1C
7920 8FAD 9DBF 9DC0
6B64 4F4C 6CDA 73BC 7689 7D2A 9B86
673F 6B21 4F3A 4F7D 523A 523E 5E9B 6828 8326 7D58
83BF 86D3 8D50 8CDC 8786 3A5E
5693 64E6 6503
7924
906A 56C3
518A 518C 4FA7 5395 607B 62FA 6D4B 6547 755F 5074
53A0 7B27 7CA3 5EC1 60FB 6E2C 7B56 8417 7B5E 7B74
8434 5884 3A32 7BA3 84DB 61A1 25C21 7C0E
5072 5A47 731C
624D 72B2 6750 8D22 8CA1 88C1 6EA8 7E94
6BDD 91C7 5038 554B 5BC0 5F69 63A1 776C 8DF4 7DB5
8E29
57F0 68CC 83DC 8521 7E29
64A1 64CD 7CD9
66FA 66F9 5608 5D86 6F15 69FD 84F8 25562 825A 87AC
893F 93EA
8278 8349 613A 61C6 9A32
808F 9135 8959
2EBE 8279
51D1 6E4A 8160 8F8F 8F33
53C2 53C3 53C4 98E1 9A96 53C5 55B0 6E4C 50AA 5B20
9910 9A42
6B8B 8695 60ED 6B98 615A 8745 6159 45DD 5B31 8836
883A
60E8 6701 6158 61AF 7A47 7BF8 9EEA 9EF2
707F 36D1 63BA 5B71 7CB2 647B 6FAF 71E6 74A8 8592
8B32
510F 7218
5D7E
5C91 6D94 7B12 68A3
4ED3 4EFA 4F27 6CA7 82CD 9E27 5009 8231 5096 5D62
6EC4 734A 84BC 8259 87A5 9DAC
85CF 9476
416E 8CF6
6FF8 7F49 6B0C
66FD 564C
5C42 66FE 5C64 5D92 3B1D 7AF2 4255 9A53
8E6D
7C97 89D5 9E81 9E84 9EA4
5F82 6B82
4FC3 731D 8128 9162 7604 8A8E 8D97 5648 61B1 851F
8E27 918B 762F 7C07 7E2C 8E59 4944 9F00 8E74 8E75
9863
6413 7473 64AE 78CB 9073 8E49 919D
3B6B 8658 75E4 7749 77EC 5D6F 5D73 84AB 8516 9E7E
9142 9E7A 8EA6
811E
5249 5252 539D 590E 632B 63AA 839D 83A1 65AE 68E4
902A 9509 9519 84CC 6B75 92BC 932F
5D14 50AC 51D7 7F1E 5894 3720 5D89 615B 6467 69B1
7355 69EF 78EA 7E17 93D9
6F3C 7480 8DA1 76A0
4F1C 5FF0 75A9 5005 7C8B 7D23 7FC6 8103 8106 5550
555B 60B4 6DEC 6BF3 7120 813A 8403 7601 7CB9 7DB7
7FE0 81AC 81B5 6FE2 7AC1 9847 81CE 894A
4E7C
6C46 64BA 92D1 9569 8E7F 651B 8EA5 9479
6AD5 5DD1 6B11 7A73
7A9C 6BA9 71B6 7BE1 7C12 7AC4 7228
6751 90A8 76B4 8E06 6F8A 7AF4
5B58 4F9F 62F5
520C 5FD6
5BF8 540B 7C7F
5306 56EA 56F1 5FE9 679E 82C1 6031 60A4 217DF 68C7
7127 249DA 8471 6F17 8061 9AA2 66B0 6A05 6A2C 719C
747D 7481 7DEB 8066 806A 84EF 8525 779B 71EA 7BF5
8070 87CC 936F 7E71 93E6 9A18 9A44
4ECE 4E1B 5F93 5A43 5B6E 5F96 5F9E 60B0 6DD9 742E
6152 6F0E 6F40 6F68 8AB4 8CE8 8CE9 6A37 53E2 85C2
7047 6B09 721C
6181 8B25
8310
FDD0-3119
53B6 7E9F 4E1D 53F8 3EA8 7CF9 79C1 549D 6CC0 601D
8652 9E36 5AA4 65AF 7D72 7F0C 86F3 6952 3D32 9270
98D4 51D8 53AE 69B9 7997 7F73 8724 9536 5636 565D
21852 5EDD 6495 6F8C 78C3 79A0 25BE8 7DE6 92D6 71CD
856C 8784 452E 87D6 87F4 98B8 9A26 9401 29170 9DE5
9F36 7C6D
6B7B
5DF3 4E96 56DB 5BFA 6C5C 4F40 4FA1 5155 59D2 5B60
676B 6CD7 6CE4 7940 9972 9A77 3B52 67F6 726D 5A30
6D0D 6D98 8082 98E4 7B25 801C 91F2 7AE2 8997 55E3
8086 8C84 9236 923B 98FC 99DF 79A9 5129 857C 7003
4FEC 6056 92AF
4EE8 6331 6332 6492
6D12 8A2F 9778 6F75 7051 8EA0
5345 6CE7 98D2 810E 9212 8428 644B 98AF 99BA 85A9
6AD2 8644
20BBF 96A1
95AA
8272 6D13 681C 6DA9 556C 94EF 6B6E 7417 96ED 55C7
745F 6B70 92AB 6F81 61CE 64CC 6FC7 7637 7A51 6F80
74B1 7012 7A61 7E6C 8F56 93FC 8B45 98CB
6E0B 6FCF 7A6F
6BE2 6122 63CC 585E 6BF8 816E 567B 9CC3 984B 4C04
9C13
4222
55EE 8D5B 50FF 8CFD 7C3A
5625
63BB 9A9A 6145 6414 6E9E 7F2B 7E45 81CA 9CCB 9A12
9A37 9C20 9C62
626B 6383 5AC2 4545
57FD 7619 6C09 77C2 9ADE
87A6
635C 5EC0 998A 55D6 5ECB 641C 6449 6EB2 7340 910B
6457 22CB7 8490 84C3 953C 98D5 422D 8258 878B 9199
93AA 993F 98BC 98BE 9A2A
53DC 53DF 5081 55FE 778D 64DE 85AE 64FB 6AE2 85EA
7C54
8184 7636
55FD
4E09 5F0E 53C1 6BF5 4200 6BFF 7299 9B16
4ED0 4F1E 5098 7CC1 7CC2 9993 7CDD 7CE3 7CE4 7E56
93D2 93FE 9730 994A
4FD5 5E34 60B7 6563 9590
58ED 6BF6 5381 6A75
68EE 692E 69EE 8942
6852 6851
55D3 6421 78C9 892C 98A1 939F 9859
4E27 55AA
69E1
50E7 448F 9B19
82CF 7526 9165 7A23 7AA3 7A4C 6AEF 8607 8613 56CC
4FD7
738A 5919 6CDD 8083 6D2C 6D91 73DF 7D20 5BBF 6880
6B90 7C9B 83A4 901F 9A95 5083 7C9F 8C21 55C9 5850
5851 5ACA 612B 6EAF 6EB8 8085 9E54 50F3 3504 612C
69A1 8186 89EB 8D9A 9061 619F 6A0E 6A15 6F5A 6F65
24882 78BF 850C 906C 92C9 9917 3B18 6A5A 749B 7E24
7C0C 8B16 8E5C 85D7 9A4C 9C50 9DEB
8BC9 8A34 9BC2
5506 36D6 5A11 686B 68AD 838F 509E 7743 55CD 7FA7
644D 7F29 84D1 8D96 7C11 450B 7C14 7E2E 9AFF 9BBB
6240 4E7A 3ABD 5522 7D22 7410 60E2 9501 55E9 22C62
6E91 669B 7463 7485 8928 459B 9388 938D 9396 93BB
93C1
9024 6EB9 8736
7411 55E6
590A 6535 8295 867D 5020 54F8 6D7D 772D 837D 837E
6ED6 7762 7D8F 8470 71A3 6FC9 9796 96D6
7EE5 968B 9040 968F 96A8 74CD
81B8 4B49 7021 9AC4 9AD3
4E97 5C81 7815 795F 8C07 57E3 5D57 21ED5 6B72 6B73
716B 775F 788E 9042 7A42 8AB6 8CE5 5B18 6FBB 96A7
6A85 6A96 71E7 74B2 7A57 7E40 9083 79AD 7A5F 7E50
65DE 7E78 895A 8B62 9406 9429 97E2
72FB 75E0 9178
5334
7958 7B07 7B6D 7B97 849C
5B59 72F2 5B6B 836A 98E7 640E 733B 98F1 69C2 84C0
8575 859E
635F 7B0B 96BC 7B4D 640D 69AB 7BB0 7C28 93A8 9DBD
5FEA 677E 6780 5A00 67D7 502F 51C7 5D27 5EBA 68A5
6DDE 83D8 5D69 7879 8719 61BD 6FCD 290ED 6AA7 9376
9B06
6002 609A 8038 7AE6 50B1 612F 3A26 6964 5D77 616B
8073 99F7
8BBC 5B8B 8BF5 9001 9882 8A1F 980C 8AA6 9938
67A9 93B9
FDD0-311A
5475 963F 9515
55C4
554A
FDD0-311B
5594 5662
54E6
7B7D
FDD0-311C
59B8 59BF 94B6 5A3F 5A40 5C59 75FE
8BB9 542A 56EE 8FD7 4FC4 5A25 5CE8 5CE9 6D90 73F4
83AA 8A1B 7692 774B 4109 920B 9507 9E45 86FE 8A90
78C0 981F 989D 9B64 96B2 984D 9D5D 9D5E 8B4C 21145
9C2A
6799 7808 980B 5641 9A00
5384 5C75 6239 6B7A 5443 5C8B 627C 9628 545D 82CA
8F6D 9638 54A2 54B9 20C65 57A9 59F6 5CC9 7810 530E
6076 7828 4465 8685 997F 5054 537E 580A 60AA 63A0
7565 7846 8C14 8EDB 960F 35C1 582E 5D3F 60E1 6115
6E42 4748 8C5F 8EF6 9102 922A 5EC5 6424 6439 3B99
7427 816D 843C 8A7B 904C 904F 50EB 8741 9537 9E57
981E 989A 9913 9B65 5669 855A 89A8 8AE4 95BC 9929
8C96 9354 9CC4 6B5E 984E 7918 6AEE 9C10 9D9A 8B8D
9F43 9469 9F76 9C77
64DC 9D48
FDD0-311E
54C0 54CE 5509 57C3 5A2D 6328 6B38 55F3 6EBE 92B0
953F 566F 9384
5540 6371 7691 6EB0 560A 6571 6573 769A 764C 9A03
6BD0 6639 5A3E 77EE 853C 8EB7 6FED 972D 85F9 9744
4F0C 827E 3637 7231 7839 784B 35D2 55CC 5867 5AD2
611B 788D 9698 53C6 66A7 7477 95A1 50FE 416C 5B21
61D3 58D2 61DD 66D6 74A6 8586 9932 9D31 76A7 77B9
453D 99A4 7919 8B6A 8B7A 9440 9749
9C6B
FDD0-311F
8BF6 8A92
FDD0-3120
51F9 356D 67EA 688E 8EEA 720A
6556 53AB 55F7 55F8 5D85 5ED2 6EF6 7353 7352 969E
646E 23281 71AC 7488 851C 9068 78DD 7FF1 8071 87AF
7FFA 8B37 8B38 9CCC 93D6 9C32 9DD4 9F07
629D 62D7 82BA 8884 957A 5AAA 5ABC 8956
362D 5C99 6277 5773 5787 5CB0 5961 5965 50B2 5967
9A9C 371C 5AEF 6160 22CC6 58BA 5DB4 61CA 64D9 6FB3
96A9 93CA 9A41
7FF6
FDD0-3121
8BB4 6CA4 6B27 6BB4 74EF 9E25 5878 6F1A 6B50 6BC6
71B0 9D0E 750C 210BF 8B33 6AD9 93C2 9DD7 4972
8192 9F75
20676 5418 5455 5076 8162 5614 3496 8026 8545 85D5
6004 616A
85F2
FDD0-3122
5B89 4F92 5CD6 6849 6C28 5EB5 4002 8C19 5A95 83F4
75F7 8164 843B 844A 9E4C 8A9D 84ED 978C 978D 76E6
8AF3 99A3 76EB 9D6A 97FD 9D95
73B5 557D 96F8 5111
57B5 4FFA 5535 57EF 94F5 63DE 968C 7F6F 92A8
72B4 5CB8 6309 6D1D 6848 80FA 834C 8C7B 5813 5A69
4141 667B 6697 930C 95C7 9B9F 4B97 9EEF
FDD0-3123
5940 6069 217EF 717E 84BD
5CCE
6441 4B53
FDD0-3124
80AE 9AAF
536C 5C87 6602 663B 44A2 3B7F
678A 76CE 91A0
FDD0-3125
97A5
FDD0-3126
513F 800C 5150 4F95 5152 5CCF 6D0F 9651 682D 80F9
834B 5532 9E38 7CAB 804F 88BB 8F00 42E9 9C95 9AF5
96AD 9B9E 9D2F 8F5C
53BC 5C12 5C13 5C14 8033 6D31 8FE9 9975 682E 6BE6
73E5 94D2 723E 990C 99EC 85BE 9087 8DB0
4E8C 5F0D 5F10 4F74 5235 54A1 36C5 8D30 8CAE 8848
8CB3 8A80 927A 6A32
FDD0-3127
4E00 4E4A 5F0C 4F0A 8863 533B 541A 58F1 4F9D 54BF
20C96 36C4 3CD6 6D22 794E 2343F 6098 7317 94F1 58F9
63D6 6B39 86DC 90FC 5ADB 6F2A 7995 7A26 92A5 5B04
566B 5901 747F 9E65 7E44 4AD1 6AB9 6BC9 91AB 9EDF
8B69 9DD6 9EF3
4E41 4EEA 531C 572F 5937 519D 5B90 6C82 8BD2 8FC6
4F87 6021 6CB6 72CB 9974 54A6 59E8 5CD3 5DF8 5F2C
605E 62F8 67C2 73C6 886A 8D3B 8FE4 5BA7 6245 6818
684B 3EBF 74F5 7719 80F0 8A11 8CA4 8FFB 75CD 79FB
801B 8898 51D2 7FA0 8413 86E6 8A51 8A52 8CBD 5A90
6686 6938 8A83 8DE0 9057 9809 9890 98F4 7591 5100
71AA 7BB7 5DAC 5F5B 5F5C 8794 907A 9824 5BF2 5DB7
7C03 984A 294E7 4C4C 5F5D 5F5E 8B3B 93D4 89FA 3C18
8B89 9E03
4E59 5DF2 4EE5 9487 4F41 20BCB 653A 77E3 8094 5EA1
8223 82E1 82E2 8681 91D4 501A 6246 914F 506F 7B16
9018 5D3A 65D1 6905 9CE6 926F 65D6 88FF 8E26 8F22
657C 8798 49E7 6AA5 4B72 7912 8264 87FB 9857 8F59
9F6E
4E42 20086 4E49 4EBF 5F0B 5208 5FC6 808A 827A 8BAE
4EA6 3439 4F07 5C79 5F02 4F3F 4F5A 52AE 5453 5744
5F79 6291 6759 8034 8285 8BD1 9091 4F7E 546D 5479
5CC4 6008 603F 6613 678D 6B25 3CD1 6CC6 7088 79C7
7ECE 82C5 8BE3 9A7F 4FCB 5955 5E1F 5E20 5F08 223D7
67BB 6D02 6D42 73B4 75AB 7FBF 263F8 8F76 3465 5508
57BC 6092 6339 6359 6827 683A 6B2D 6D65 6D73 76CA
8875 8C0A 52DA 57F6 57F8 60A5 639C 6BB9 7570 785B
7F9B 7FCA 7FCC 88A3 8A32 8A33 8C59 8C5B 91F4 966D
96BF 5E46 6561 6679 68ED 6B94 6E59 7132 2497F 433B
86E1 8A4D 8DC7 8EFC 9038 9220 4E84 517F 3534 610F
6EA2 7348 75EC 776A 7AE9 41FC 7F22 7FA9 8084 88D4
88DB 8A63 9AAE 52E9 5AD5 5ED9 698F 7617 8189 8734
977E 99C5 5104 3989 648E 69F8 6BC5 6F69 71A0 71A4
761E 84FA 8ABC 9552 9E5D 9E62 9ED3 5293 3601 571B
58BF 5B11 5B1F 5DA7 61B6 61CC 66C0 6BAA 3D69 6FBA
71BC 71DA 7631 7796 7A53 7E0A 8257 87A0 5BF1 6581
66CE 6A8D 6B5D 71E1 71F1 7FF3 7FFC 81C6 858F 8939
8CF9 9BA8 7654 8D00 93B0 9571 7E76 7E79 85D9 85DD
8C77 972C 9BE3 9D82 9D83 39A4 7037 8B6F 8B70 91B3
91B7 9950 2113B 25725 8619 943F 9DC1 9DCA 56C8 61FF
9A5B 9DE7 9DFE 8649 897C 9F78 8B9B
5307 8864 8FB7 5B9C 7569 692C 841F 9D8D 7C4E
4E2B 5727 538B 5416 5E98 62BC 6792 57AD 9E26 6860
9E2D 57E1 5B72 690F 9D09 930F 9D28 58D3 9D76 941A
7259 4F22 5391 5C88 5393 73A1 82BD 7B0C 869C 5810
5D15 5D16 6DAF 731A 740A 7458 775A 8859 6F04 9F56
2A632
24D13 538A 5E8C 54D1 5516 555E 75D6 96C5 7602 279DD
8565
529C 5720 8F67 4E9A 897E 8BB6 4E9C 72BD 4E9E 8ECB
8FD3 5A05 631C 7811 4FF9 6C29 5A6D 6397 8A1D 94D4
63E0 6C2C 7330 8050 26716 5714 7A0F 7AAB 9F7E
2E84 4E5B 5440
54DF 5537 55B2
503B 6396 668D 6930 564E 6F71 882E
8036 6353 94D8 63F6 91FE 92E3 64E8 9381
4E5F 5414 51B6 57DC 91CE 5622 6F1C 58C4
4E1A 53F6 66F3 9875 66F5 591C 62B4 90BA 4EB1 67BC
9801 6654 67BD 70E8 35A1 5558 6DB2 8C12 5828 6B97
814B 696A 696D 8449 9113 998C 50F7 6B4B 58B7 420E
9765 5DAA 5DAB 64DB 66C4 66C5 6FB2 71C1 2681C 8B01
9134 9923 5688 64EB 66D7 76A3 77B1 9371 64EA 77B8
790F 42A6 9391 9941 9D7A 7217 9437 9768 9A5C 9E08
7237 4EAA 723A
5E7A 592D 5406 5996 6796 6B80 7945 8A1E 5593 6946
8170 847D 4301 4645 9D01 9080
723B 5C27 5C2D 80B4 579A 59DA 5CE3 409A 8F7A 5004
70D1 73E7 7A91 509C 582F 63FA 8C23 8EFA 347E 55C2
5AB1 5FAD 612E 6416 6447 733A 3A31 669A 69A3 7464
7476 9059 9065 929A 98D6 9906 5DA2 5DA4 7AAF 7AB0
4504 991A 7E47 8B20 8B21 26FBE 9390 9CD0 4B19 98BB
8628 908E 9864 9C29
4EF8 5B8E 5C86 62AD 6773 72D5 54AC 67FC 82ED 7711
7A85 7A88 8200 5060 5A79 5D3E 6E94 699A 84D4 9D22
9F3C 95C4 9A15 9F69 9DD5
7A7E 8981 94A5 25052 836F 7A94 888E 7B44 8A4F 846F
718E 899E 977F 735F 9E5E 25AAF 85AC 66DC 71FF 825E
77C5 85E5 8000 7E85 9DC2 8B91 9470
4F18 5FE7 6538 5466 602E 6CD1 5E7D 60A0 900C 9E80
6EFA 6182 512A 5698 7000 913E 6ACC 7E8B 8030
5C22 5C24 7531 6C8B 72B9 3F55 233DE 6CB9 80AC 90AE
6023 65BF 75A3 5CF3 6D5F 79DE 4343 94C0 5064 839C
83B8 86B0 8A27 6E38 7336 9030 90F5 9C7F 6962 7337
904A 923E 9C89 8F0F 99C0 8763 9B77 8555 8F36 9B8B
6AFE
6709 4E23 5363 9149 82C3 3DAD 7F91 5EAE 682F 7F90
6884 8048 811C 83A0 94D5 6E75 870F 7989 92AA 4B00
69F1 7256 9EDD 61EE
2E80 53C8 53F3 5E7C 4F51 4F91 72D6 7CFF 54CA 56FF
59F7 5BA5 5CDF 67DA 7270 8BF1 5500 7950 8FF6 4001
86B4 4EB4 8C81 91C9 916D 8A98 9F2C
53CB 5B67 848F 7257
6079 5266 70DF 73DA 80ED 5063 5571 5D26 393F 6DCA
6DF9 7109 7111 479B 9609 6E6E 7312 814C 83F8 7159
787D 5AE3 6F39 4167 9122 9183 95B9 5B2E 61E8 7BF6
61D5 81D9 9EEB
8BA0 4E25 8A00 5CA9 5EF6 6616 6CBF 708E 82AB 598D
59F8 7814 5A2E 76D0 5A2B 72FF 7402 784F 90D4 9586
960E 5D52 5D53 6E7A 839A 5869 63C5 694C 41FE 8A7D
789E 7B75 7D96 8712 8505 989C 8664 95BB 53B3 6A90
984F 9854 58DB 7C37 56B4 5DCC 6AE9 9EEC 5DD7 58E7
5B4D 5DD6 9E7D 7939 9EA3
5935 6281 6C87 4E75 5156 5944 4FE8 5157 533D 5F07
884D 5043 53A3 63A9 773C 9153 5D43 611D 624A 63DC
3B7A 68EA 6E30 6E37 7430 8412 90FE 693C 7F68 9043
9692 6F14 88FA 5D96 622D 8758 8917 565E 8EBD 9B47
7E2F 6ABF 9A13 9EE1 53B4 2502C 9C0B 9DA0 9EE4 9F5E
9F91 7517 9EED 513C 9869 9F34 5DD8 5DDA 9F39 66EE
9B58 9F74 9EF6
538C 95EB 599F 89C3 726A 54BD 59F2 5F65 5F66 781A
5501 5BB4 664F 8273 898E 9A8C 5050 7114 8C1A 55AD
5830 6565 70FB 7130 7131 786F 9681 96C1 50BF 693B
6E8E 6EDF 8455 9CEB 53AD 5895 66A5 917D 5B0A 8C33
290C0 990D 9D08 3DF3 3DFC 71C4 71D5 8AFA 8D5D 48AD
9B33 66D5 9D33 9A10 56A5 5B3F 8276 8D0B 9140 4A04
4CE1 3B2B 66E3 7213 91B6 9A34 9DC3 7054 8D17 89FE
8B8C 91BC 995C 9A57 9DF0 8277 2A64A 704E 9A60 7067
8B9E 8C53 91C5 8C54 7069
8A01 6A2E 7196 8EC5 6B15
56D9 56E0 9625 9634 4F8C 5794 59FB 39E2 6D07 97F3
9A83 6836 6BB7 6C24 8335 51D0 5A63 4104 79F5 836B
94DF 9670 5591 5819 6114 7B43 7D6A 88C0 967B 9682
6B45 6EB5 6147 647F 7616 798B 92A6 7DF8 852D 9787
8AF2 9712 290EC 99F0 567E 95C9 9720 3D8F 97FE
5198 4E51 3542 541F 72BE 65A6 82C2 57A0 6CFF 3597
5701 5CFE 70CE 72FA 73E2 8A14 8A1A 5A6C 5BC5 5D1F
5D2F 6DEB 8376 8A21 94F6 921D 9F82 6EDB 7892 5924
911E 9280 5656 6BA5 748C 8529 8ABE 569A 6AAD 87EB
4D26 972A 9F57 9DE3
4E5A 200CA 5EF4 5C39 5F15 5432 996E 8693 8D7A 6DFE
920F 9690 98F2 9777 98EE 6704 8F11 96A0 78E4 8D9B
763E 5DBE 6A83 6FE5 6FE6 87BE 96B1 6AFD 861F 766E
8B94
5370 6D15 80E4 57BD 831A 5837 6E5A 730C 5ED5 8491
9173 616D 6196 6197 764A 9BA3 3865 61DA 6ABC 4543
7C8C
592E 5489 59CE 62B0 6CF1 6B83 80E6 770F 79E7 9E2F
9260 96F5 9785 9D26
626C 7F8A 65F8 6768 7080 9626 9633 98CF 4F6F 52B7
6C1C 75A1 9496 579F 5F89 661C 6D0B 7F8F 70CA 73DC
26B75 773B 5D35 5D38 63DA 86D8 967D 656D 6698 694A
716C 760D 7993 3B15 8AF9 8F30 935A 9D39 98BA 940A
9C11 9737 9E09
4EF0 4F52 5771 5C9F 517B 67CD 70B4 6C27 75D2 7D3B
509F 8EEE 6143 6967 6C31 8746 990A 99DA 3526 61E9
6501 4446 7662
600F 6059 6837 7F95 8A47 69D8 6F3E 6A23 7001
594D 7FAA 7922
5E94 5FDC 82F1 685C 5040 5568 5A74 7EEC 83BA 20E04
21398 5A96 6E36 48D0 5AC8 6720 7150 745B 5624 6484
78A4 7F28 7F42 8CCF 9533 6A31 748E 7507 7DD3 8767
7F43 892E 9348 9D2C 9E66 5B30 61C9 81BA 9719 97FA
9E70 7516 9D91 56B6 5B46 5B7E 6516 7F4C 8B4D 9DA7
6AFB 74D4 792F 8621 8B7B 9DAF 944D 7E93 8833 9DEA
9DF9 9E0E 9E1A
76C1 8FCE 76C8 8314 8367 55B6 83B9 86CD 2870F 6E81
6E8B 8424 8426 50CC 584B 6979 6EE2 8425 843E 6F46
7192 84E5 7469 4294 877F 5B34 7E08 87A2 6FD9 6FDA
6FF4 71DF 89AE 8B0D 8D62 7005 85C0 93A3 650D 701B
7020 2294F 702F 7034 8D0F 6AFF 7C5D 7C6F
77E8 6D67 90E2 68AC 988D 9895 9896 646C 4B2C 5F71
6F41 7484 763F 7A4E 9834 5DCA 5EEE 766D
6620 786C 5AB5 668E 81A1 565F 9795 941B 9C66
73F1 6125 8747 7E04 8805 651A 7050 705C 8EC8
FDD0-3128
4E4C 572C 5F19 6C59 6C5A 6C61 545C 5DEB 6747 90AC
5C4B 6D3F 8BEC 94A8 70CF 526D 7A8F 55DA 9114 6B4D
8AA3 7BBC 8790 9D2E 93A2 9C1E
65E0 6BCB 5433 5434 543E 5449 829C 5514 5A2A 6D16
6D6F 90DA 68A7 73F8 8323 8381 7121 7966 94FB 9E40
8708 8A88 7991 7491 856A 87F1 9BC3 9D50 8B55 9F2F
9DE1
4E94 5348 4EF5 59A9 5E91 5FE4 6003 65FF 3B33 6B66
739D 4FAE 4FC9 5035 6342 554E 5A2C 727E 73F7 6440
7894 9E49 7193 7466 821E 5AF5 5EE1 61AE 6F55 511B
6A46 7512 9D61 8E8C
5140 52FF 3433 620A 4F06 5C7C 6264 9622 575E 5C89
674C 5FE2 7269 77F9 82B4 8FD5 537C 6544 8BEF 609E
609F 60AE 7C85 6664 7110 901C 5A7A 5D4D 75E6 9770
9A9B 5862 5966 5D68 6EA9 9696 96FA 96FE 5BE4 7183
8AA4 9E5C 92C8 7AB9 907B 4A01 971A 9F3F 9727 9A16
9F40 8601 9DA9
4E44 52A1 4F0D 52D9 933B
7A75 52B8 6316 6D3C 5A32 7556 7A8A 5AA7 86D9 55D7
6432 6E9B 6F25 7AAA 9F03 6528
5A03
74E6 4F64 5493 39DA 90B7
8049 889C 55E2 817D 8183 896A 97C8 97E4
5C72 54C7 74F2
631D 502D 6DA1 5529 6DB9 83B4 6E26 7327 7A9D 8435
8717 7AA9 8778 8E12 64BE
6211 5A50 6370 4C00
4EF4 6C83 809F 5367 6782 81E5 5053 637E 6DB4 5A89
5E44 63E1 6E25 7125 786A 6943 815B 65A1 7783 20FDF
64ED 6FE3 9F8C 74C1 81D2 96D8 9F77
6B6A 558E 7AF5
5D34
5916 20C3B 591E 9861
5371 5A01 20CFF 70D3 504E 55B4 364E 5A99 6104 63CB
63FB 6E28 840E 9036 9687 9688 5FAE 6933 6972 6EA6
7168 8468 8473 8A74 8732 875B 89A3 71F0 8587 9CC2
9C03 9C04 5DCD
56D7 97E6 5729 56F4 5E0F 6CA9 95F1 8FDD 5CD7 5CDE
6D08 97CB 6845 6DA0 552F 5E37 60DF 7859 7EF4 55A1
570D 5A81 5E43 6E4B 6E88 741F 912C 5D6C 9055 6F4D
7DAD 6F59 6F7F 78D1 84F6 9180 6FF0 934F 95C8 9BA0
7653 4260 89B9 973A 6B08 72A9
5383 4F1F 4F2A 5C3E 7EAC 59D4 3B4F 709C 73AE 829B
82C7 6D27 5A13 5C57 6D58 8BFF 5049 507D 5D23 68B6
75CF 784A 8371 5BEA 5D54 5FAB 6107 7325 9AA9 6690
6932 7152 744B 75FF 41FB 8172 8249 8466 848D 97EA
9AAA 9AAB 50DE 9C94 5130 64B1 78C8 25BE4 7DEF 8AC9
8E13 97D1 9820 3B19 853F 285E8 9361 9BAA 6FFB 85B3
97D9 98B9 58DD 7022 8624 97E1 6596
536B 4E3A 672A 4F4D 5473 70BA 754F 80C3 82FF 53DE
8ECE 5C09 8C13 5582 5AA6 6E2D 3DC9 7232 83CB 715F
78A8 873C 6170 71AD 729A 7DED 851A 885B 61C0 748F
7F7B 885E 8B02 9927 9B87 87B1 893D 9935 8F4A 9B4F
85EF 93CF 9728 9CDA 9956 8636 8B86 8E97 4C81 8B8F
8E9B
6364 7140 732C 589B 7E05 875F 5DB6
5F2F 525C 5A60 5E35 5846 6E7E 873F 6F6B 8C4C 5F4E
58EA 7063
4E38 5213 6C4D 7EA8 5B8C 5C8F 628F 8284 73A9 7D08
6356 987D 70F7 7413 9811 4BC8 7FEB
5B9B 5007 550D 633D 76CC 57E6 5A49 60CB 665A 6669
689A 7EFE 8118 667C 6900 742C 7696 83C0 8416 7579
7755 7897 7DA9 7DB0 8F13 8E20 92C4 92D4 4A4A 3736
4E07 534D 5350 59A7 5FE8 6365 8115 8CA6 8155 842C
8F10 6FAB 933D 858D 87C3 8D03 93AB 4951 8D0E
909C 6764 7B02
6637 6E29 586D 3B08 6985 6EAB 8F92 6B9F 7465 761F
8570 8F3C 8C71 8F40 9CC1 97B0 29948 9C1B 9C2E
5301 6587 5F63 7EB9 7086 739F 82A0 95FB 7D0B 8689
868A 73F3 960C 741D 96EF 7612 805E 99BC 9B70 9CFC
9D0D 87A1 95BA 95BF 87C1 95C5 9F24 95E6
520E 543B 5FDF 6286 5461 80B3 7D0A 687D 8117 7A33
7A4F 7A69
95EE 598F 6C76 554F 6E02 83AC 63FE 6435 9850 74BA
545A 922B 93BE
21BC1 5C23 5C29 5C2A 5C2B 6C6A
4EA1 4EBE 5166 738B 4EFC 5F7A 869F 83A3
34C1 7F52 7F51 5F80 5F83 7F54 5F8D 60D8 6680 68E2
83F5 86E7 8F8B 7DB2 8744 8AB7 8F1E 7007 9B4D
5984 5FD8 65FA 76F3 8FCB 671B 6722 4911
6789 7139
7FC1 55E1 6EC3 9E5F 8789 9393 9DB2
3622 52DC 5963 5855 5D61 66A1 4425 84CA 7788 806C
3732
74EE 8579 7515 7F4B 9F46
FDD0-3129
625C 7EA1 8FC2 8FC3 7A7B 7D06 8676 9653 5539 6DE4
76D3 6BFA 7600 7B8A
4E90 4E8E 4F03 36A5 3B30 9098 4F59 59A4 6275 6745
6B24 7397 7399 65BC 76C2 81FE 9C7C 4E7B 4FDE 516A
79BA 7AFD 4342 8867 5A1B 5A2F 5A31 6859 72F3 8201
8330 8C00 9151 9980 6E14 96E9 9B5A 5823 582C 5D33
5D4E 5D5B 3965 6109 63C4 6970 6E1D 6E61 756D 7862
8174 8438 9685 611A 65D5 3B02 6961 6986 6B48 724F
745C 8245 842E 865E 89CE 903E 9AAC 6F01 776E 7AAC
6B76 7FAD 4433 8753 8915 8ADB 96D3 9918 4C3B 6F9E
8206 854D 89A6 8E30 5B29 87B8 8F3F 935D 28A36 6B5F
74B5 8B23 9BBD 9A1F 9AC3 65DF 7C45 861B 9C05 4CA3
9DE0 9E06
4E0E 4E88 4F1B 5B87 5C7F 7FBD 2ED7 96E8 4FC1 4FE3
79B9 8BED 5704 5CFF 504A 3531 532C 5709 5EBE 6554
7964 3762 659E 9105 50B4 5BD9 6940 7440 7610 842D
38C3 8207 8A9E 7AB3 92D9 9828 9F89 5673 8C90 5DBC
61D9 399B 6594 9E8C 860C 9F6C
8080 7389 9A6D 572B 807F 59AA 5FEC 828B 828C 996B
80B2 3922 6631 72F1 79D7 90C1 4FFC 5CEA 5F67 6D74
7821 831F 94B0 9884 57DF 5809 5FA1 6086 60D0 6B32
6DE2 6DEF 8C15 9608 5585 5590 55A9 55BB 5A80 5BD3
5EBD 68DB 68DC 68EB 7134 7419 77DE 7872 26C40 9033
98EB 99AD 9E46 6108 6BD3 6EEA 715C 3F63 7A22 7F6D
8248 88D5 8A89 9047 923A 9810 5AD7 5D8E 622B 7344
7609 4205 42ED 7DCE 84AE 84E3 871F 872E 463B 8F0D
9289 564A 617E 6F4F 7A36 84F9 92CA 9CFF 224B0 6FA6
71CF 79A6 8AED 8C6B 9079 9325 95BE 9D25 9D2A 5125
2148A 71E0 7BFD 8577 8581 9E6C 7652 7907 7916 7E58
27450 91A7 9B4A 9D52 791C 7A65 9947 6AF2 9731 8B7D
8F5D 942D 6B0E 9A48 9B3B 7C5E 9C4A 9DF8 6B1D 9E12
9FA5 8EC9 9B30 9B31 706A 7C72 7229
6327 8362 6F9A 9BF2
66F0 66F1 7EA6 7D04 7BB9 5F5F 77F1 5F60
2E9D 6708 6209 5216 599C 5C84 6288 216DF 5CB3 73A5
793F 6071 4195 6085 60A6 868E 868F 8ECF 94BA 9605
6373 8DC0 8DC3 4847 7CA4 8D8A 9205 7CB5 925E 4926
95B1 95B2 6A3E 7BD7 5B33 5DBD 294E5 9FA0 3730 3B26
7039 7C46 9EE6 721A 8625 8E8D 79B4 7C65 9E11 7C70
9E19
56E6 9E22 5248 51A4 6081 7722 9E33 5BC3 6DF5 6E01
6E06 6E0A 6E15 60CC 68E9 3F93 847E 870E 9E53 7BA2
84AC 8735 88F7 9CF6 485D 99CC 9D1B 5B3D 4949 9D77
7041 9F18 9F1D
5143 5186 8D20 5458 56ED 6C85 90A7 676C 57A3 7230
8C9F 539F 54E1 5706 7B0E 8696 8881 53A1 570E 63F4
6E72 7328 7F18 8312 9F0B 5712 5713 586C 5AB4 5AC4
6E90 6E92 733F 7342 699E 69AC 849D 8F95 7DE3 7E01
875D 876F 9B6D 4CAE 6A7C 7FB1 8788 8597 8B1C 8F45
9EFF 93B1 6ADE 908D 9A35 9DA2 9DB0 53B5
8FDC 76F6 903A 9060 92FA
5917 8099 59B4 3B47 6028 82D1 57B8 884F 9662 5086
5A9B 63BE 7457 613F 7990 88EB 8911 566E 8924 9858
915B 9228
6655 7F0A 6688 7174 8480 596B 6C32 6C33 8495 7E15
8779 8D5F 9835 8D07 99A7
4E91 52FB 5300 56E9 5998 6C84 7EAD 6600 82B8 7547
7703 79D0 6DA2 7D1C 8018 803A 90E7 96F2 612A 6EB3
7B60 7B7C 9116 69B2 7189 84B7 6F90 92C6 6A52 7BD4
7E1C 8553 9942
5141 593D 628E 72C1 962D 9668 6B92 837A 5597 491E
9217 9695 6B9E 99BB 78D2 891E 8CF1 9723 9F73
5B55 679F 8FD0 607D 90D3 915D 508A 60F2 6120 9106
614D 816A 904B 97EB 97F5 7185 71A8 7DF7 7DFC 4CB0
8574 9196 8580 919E 992B 97D7 85F4 97DE 97FB 860A
62A3 7E67
4F63 62E5 75C8 9095 5EB8 50AD 55C8 96CD 5889 5ADE
6175 6EFD 9118 69E6 5670 58C5 64C1 6FAD 90FA 955B
81C3 7655 96DD 93DE 9CD9 5EF1 7049 9954 9C45 9DDB
7670
5581 63D8 7245 9899 9852 9C2B
6C38 752C 548F 6CF3 4FD1 52C7 52C8 6810 57C7 6080
67E1 6D8C 607F 3D04 509B 60E5 6111 6E67 7867 8A60
584E 5D71 5F6E 6139 86F9 6142 8E0A 799C 9CAC 8E34
9BD2
7528 82DA 919F
603A 783D
__END__

=head1 NAME

Unicode::Collate::CJK::Zhuyin - weighting CJK Unified Ideographs
for Unicode::Collate

=head1 SYNOPSIS

    use Unicode::Collate;
    use Unicode::Collate::CJK::Zhuyin;

    my $collator = Unicode::Collate->new(
        overrideCJK => \&Unicode::Collate::CJK::Zhuyin::weightZhuyin
    );

=head1 DESCRIPTION

C<Unicode::Collate::CJK::Zhuyin> provides C<weightZhuyin()>,
that is adequate for C<overrideCJK> of C<Unicode::Collate>
and makes tailoring of CJK Unified Ideographs in the order
of CLDR's zhuyin (bopomofo) ordering.

=head1 CAVEAT

The zhuyin ordering includes some characters that are not
CJK Unified Ideographs and can't utilize C<weightZhuyin()>
for collation. For them, use C<entry> instead.

=head1 SEE ALSO

=over 4

=item CLDR - Unicode Common Locale Data Repository

L<http://cldr.unicode.org/>

=item Unicode Locale Data Markup Language (LDML) - UTS #35

L<http://www.unicode.org/reports/tr35/>

=item L<Unicode::Collate>

=item L<Unicode::Collate::Locale>

=back

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/share/perl/5.20.2/Unicode/Collate/Locale/                                                       0040755 0000000 0000000 00000000000 13077704254 017032  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/Unicode/Collate/Locale/af.pl                                                  0100644 0000000 0000000 00000000235 12744441327 017751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        +{
   locale_version => 1.01,
   entry => <<'ENTRY', # for DUCET v6.3.0
0149      ; [.174B.0020.0009] # LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
ENTRY
};
                                                                                                                                                                                                                                                                                                                                                                   usr/share/perl/5.20.2/Unicode/Collate/Locale/ar.pl                                                  0100644 0000000 0000000 00000001534 12744441327 017770  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        +{
   locale_version => 1.01,
   entry => <<'ENTRY', # for DUCET v6.3.0
0629      ; [.1CA7.0021.0002] # ARABIC LETTER TEH MARBUTA
FE94      ; [.1CA7.0021.0019] # ARABIC LETTER TEH MARBUTA FINAL FORM
FE93      ; [.1CA7.0021.001A] # ARABIC LETTER TEH MARBUTA ISOLATED FORM
0649      ; [.1D44.0021.0002] # ARABIC LETTER ALEF MAKSURA
FBE8      ; [.1D44.0021.0017] # ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA INITIAL FORM
FBE9      ; [.1D44.0021.0018] # ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA MEDIAL FORM
FEF0      ; [.1D44.0021.0019] # ARABIC LETTER ALEF MAKSURA FINAL FORM
FEEF      ; [.1D44.0021.001A] # ARABIC LETTER ALEF MAKSURA ISOLATED FORM
FC90      ; [.1D44.0021.001B] # ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM
FC5D      ; [.1D44.0021.001C] # ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM
ENTRY
};
                                                                                                                                                                    usr/share/perl/5.20.2/Unicode/Collate/Locale/as.pl                                                  0100644 0000000 0000000 00000001327 12744441327 017771  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        