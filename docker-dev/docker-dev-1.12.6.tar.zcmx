()\*(C'\fR
.IP "How to compare version objects" 4
.IX Item "How to compare version objects"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OBJECT METHODS\s0" 4
.IX Item "OBJECT METHODS"
.RS 4
.IP "\fIis_alpha()\fR" 4
.IX Item "is_alpha()"
.IP "\fIis_qv()\fR" 4
.IX Item "is_qv()"
.IP "\fInormal()\fR" 4
.IX Item "normal()"
.IP "\fInumify()\fR" 4
.IX Item "numify()"
.IP "\fIstringify()\fR" 4
.IX Item "stringify()"
.RE
.RS 4
.RE
.IP "\s-1EXPORTED FUNCTIONS\s0" 4
.IX Item "EXPORTED FUNCTIONS"
.RS 4
.IP "\fIqv()\fR" 4
.IX Item "qv()"
.IP "\fIis_lax()\fR" 4
.IX Item "is_lax()"
.IP "\fIis_strict()\fR" 4
.IX Item "is_strict()"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "version::Internals \- Perl extension for Version Objects"
.IX Subsection "version::Internals - Perl extension for Version Objects"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1WHAT IS A VERSION\s0?" 4
.IX Item "WHAT IS A VERSION?"
.PD
Decimal Versions, Dotted-Decimal Versions
.RS 4
.IP "Decimal Versions" 4
.IX Item "Decimal Versions"
.PD 0
.IP "Dotted-Decimal Versions" 4
.IX Item "Dotted-Decimal Versions"
.IP "Alpha Versions" 4
.IX Item "Alpha Versions"
.IP "Regular Expressions for Version Parsing" 4
.IX Item "Regular Expressions for Version Parsing"
.PD
\&\f(CW$version::LAX\fR, \f(CW$version::STRICT\fR, v1.234.5
.RE
.RS 4
.RE
.IP "\s-1IMPLEMENTATION DETAILS\s0" 4
.IX Item "IMPLEMENTATION DETAILS"
.RS 4
.PD 0
.IP "Equivalence between Decimal and Dotted-Decimal Versions" 4
.IX Item "Equivalence between Decimal and Dotted-Decimal Versions"
.IP "Quoting Rules" 4
.IX Item "Quoting Rules"
.IP "What about v\-strings?" 4
.IX Item "What about v-strings?"
.IP "Version Object Internals" 4
.IX Item "Version Object Internals"
.PD
original, qv, alpha, version
.IP "Replacement \s-1UNIVERSAL::VERSION\s0" 4
.IX Item "Replacement UNIVERSAL::VERSION"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1USAGE DETAILS\s0" 4
.IX Item "USAGE DETAILS"
.RS 4
.IP "Using modules that use version.pm" 4
.IX Item "Using modules that use version.pm"
.PD
Decimal versions always work, Dotted-Decimal version work sometimes
.IP "Object Methods" 4
.IX Item "Object Methods"
\&\fInew()\fR, \fIqv()\fR, Normal Form, Numification, Stringification, Comparison
operators, Logical Operators
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "vmsish \- Perl pragma to control VMS-specific language features"
.IX Subsection "vmsish - Perl pragma to control VMS-specific language features"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW\*(C`vmsish status\*(C'\fR, \f(CW\*(C`vmsish exit\*(C'\fR, \f(CW\*(C`vmsish time\*(C'\fR, \f(CW\*(C`vmsish hushed\*(C'\fR
.SS "warnings \- Perl pragma to control optional warnings"
.IX Subsection "warnings - Perl pragma to control optional warnings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
use warnings::register, \fIwarnings::enabled()\fR, warnings::enabled($category),
warnings::enabled($object), \fIwarnings::fatal_enabled()\fR,
warnings::fatal_enabled($category), warnings::fatal_enabled($object),
warnings::warn($message), warnings::warn($category, \f(CW$message\fR),
warnings::warn($object, \f(CW$message\fR), warnings::warnif($message),
warnings::warnif($category, \f(CW$message\fR), warnings::warnif($object, \f(CW$message\fR),
warnings::register_categories(@names)
.SS "warnings::register \- warnings import function"
.IX Subsection "warnings::register - warnings import function"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SH "MODULE DOCUMENTATION"
.IX Header "MODULE DOCUMENTATION"
.SS "AnyDBM_File \- provide framework for multiple DBMs"
.IX Subsection "AnyDBM_File - provide framework for multiple DBMs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1DBM\s0 Comparisons" 4
.IX Item "DBM Comparisons"
.PD
[0], [1], [2], [3]
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "App::Cpan \- easily interact with \s-1CPAN\s0 from the command line"
.IX Subsection "App::Cpan - easily interact with CPAN from the command line"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Options" 4
.IX Item "Options"
.PD
\&\-a, \-A module [ module ... ], \-c module, \-C module [ module ... ], \-D
module [ module ... ], \-f, \-F, \-g module [ module ... ], \-G module [ module
\&... ], \-h, \-i, \-I, \-j Config.pm, \-J, \-l, \-L author [ author ... ], \-m, \-n,
\&\-O, \-p, \-P, \-r, \-t, \-T, \-u, \-v, \-V, \-w
.IP "Examples" 4
.IX Item "Examples"
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RE
.RS 4
.RE
.PD
.PP
\&\fIrun()\fR
.IP "\s-1EXIT VALUES\s0" 4
.IX Item "EXIT VALUES"
.PD 0
.IP "\s-1TO DO\s0" 4
.IX Item "TO DO"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SOURCE AVAILABILITY\s0" 4
.IX Item "SOURCE AVAILABILITY"
.IP "\s-1CREDITS\s0" 4
.IX Item "CREDITS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.ie n .SS "App::Prove \- Implements the ""prove"" command."
.el .SS "App::Prove \- Implements the \f(CWprove\fP command."
.IX Subsection "App::Prove - Implements the prove command."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Attributes" 4
.IX Item "Attributes"
.PD
\&\f(CW\*(C`archive\*(C'\fR, \f(CW\*(C`argv\*(C'\fR, \f(CW\*(C`backwards\*(C'\fR, \f(CW\*(C`blib\*(C'\fR, \f(CW\*(C`color\*(C'\fR, \f(CW\*(C`directives\*(C'\fR,
\&\f(CW\*(C`dry\*(C'\fR, \f(CW\*(C`exec\*(C'\fR, \f(CW\*(C`extensions\*(C'\fR, \f(CW\*(C`failures\*(C'\fR, \f(CW\*(C`comments\*(C'\fR, \f(CW\*(C`formatter\*(C'\fR,
\&\f(CW\*(C`harness\*(C'\fR, \f(CW\*(C`ignore_exit\*(C'\fR, \f(CW\*(C`includes\*(C'\fR, \f(CW\*(C`jobs\*(C'\fR, \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`merge\*(C'\fR,
\&\f(CW\*(C`modules\*(C'\fR, \f(CW\*(C`parse\*(C'\fR, \f(CW\*(C`plugins\*(C'\fR, \f(CW\*(C`quiet\*(C'\fR, \f(CW\*(C`really_quiet\*(C'\fR, \f(CW\*(C`recurse\*(C'\fR,
\&\f(CW\*(C`rules\*(C'\fR, \f(CW\*(C`show_count\*(C'\fR, \f(CW\*(C`show_help\*(C'\fR, \f(CW\*(C`show_man\*(C'\fR, \f(CW\*(C`show_version\*(C'\fR,
\&\f(CW\*(C`shuffle\*(C'\fR, \f(CW\*(C`state\*(C'\fR, \f(CW\*(C`state_class\*(C'\fR, \f(CW\*(C`taint_fail\*(C'\fR, \f(CW\*(C`taint_warn\*(C'\fR,
\&\f(CW\*(C`test_args\*(C'\fR, \f(CW\*(C`timer\*(C'\fR, \f(CW\*(C`verbose\*(C'\fR, \f(CW\*(C`warnings_fail\*(C'\fR, \f(CW\*(C`warnings_warn\*(C'\fR,
\&\f(CW\*(C`tapversion\*(C'\fR, \f(CW\*(C`trap\*(C'\fR
.IP "\s-1PLUGINS\s0" 4
.IX Item "PLUGINS"
.RS 4
.PD 0
.IP "Sample Plugin" 4
.IX Item "Sample Plugin"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.ie n .SS "App::Prove::State \- State storage for the ""prove"" command."
.el .SS "App::Prove::State \- State storage for the \f(CWprove\fP command."
.IX Subsection "App::Prove::State - State storage for the prove command."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.PD
\&\f(CW\*(C`store\*(C'\fR, \f(CW\*(C`extensions\*(C'\fR (optional), \f(CW\*(C`result_class\*(C'\fR (optional)
.RE
.RS 4
.RE
.ie n .IP """result_class""" 4
.el .IP "\f(CWresult_class\fR" 4
.IX Item "result_class"
.PD 0
.ie n .IP """extensions""" 4
.el .IP "\f(CWextensions\fR" 4
.IX Item "extensions"
.ie n .IP """results""" 4
.el .IP "\f(CWresults\fR" 4
.IX Item "results"
.ie n .IP """commit""" 4
.el .IP "\f(CWcommit\fR" 4
.IX Item "commit"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PD
\&\f(CW\*(C`last\*(C'\fR, \f(CW\*(C`failed\*(C'\fR, \f(CW\*(C`passed\*(C'\fR, \f(CW\*(C`all\*(C'\fR, \f(CW\*(C`hot\*(C'\fR, \f(CW\*(C`todo\*(C'\fR, \f(CW\*(C`slow\*(C'\fR, \f(CW\*(C`fast\*(C'\fR,
\&\f(CW\*(C`new\*(C'\fR, \f(CW\*(C`old\*(C'\fR, \f(CW\*(C`save\*(C'\fR
.SS "App::Prove::State::Result \- Individual test suite results."
.IX Subsection "App::Prove::State::Result - Individual test suite results."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.ie n .IP """state_version""" 4
.el .IP "\f(CWstate_version\fR" 4
.IX Item "state_version"
.ie n .IP """test_class""" 4
.el .IP "\f(CWtest_class\fR" 4
.IX Item "test_class"
.PD
.SS "App::Prove::State::Result::Test \- Individual test results."
.IX Subsection "App::Prove::State::Result::Test - Individual test results."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PD
.SS "Archive::Extract \- A generic archive extracting mechanism"
.IX Subsection "Archive::Extract - A generic archive extracting mechanism"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$ae = Archive::Extract\->new(archive => '/path/to/archive',[type => \s-1TYPE\s0])" 4
.el .IP "\f(CW$ae\fR = Archive::Extract\->new(archive => '/path/to/archive',[type => \s-1TYPE\s0])" 4
.IX Item "$ae = Archive::Extract->new(archive => '/path/to/archive',[type => TYPE])"
.PD
tar, tgz, gz, Z, zip, bz2, tbz, lzma, xz, txz
.RE
.RS 4
.RE
.ie n .IP "$ae\->extract( [to => '/output/path'] )" 4
.el .IP "\f(CW$ae\fR\->extract( [to => '/output/path'] )" 4
.IX Item "$ae->extract( [to => '/output/path'] )"
\&\f(CW$ae\fR\->extract_path, \f(CW$ae\fR\->files
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.RS 4
.PD 0
.ie n .IP "$ae\->error([\s-1BOOL\s0])" 4
.el .IP "\f(CW$ae\fR\->error([\s-1BOOL\s0])" 4
.IX Item "$ae->error([BOOL])"
.ie n .IP "$ae\->extract_path" 4
.el .IP "\f(CW$ae\fR\->extract_path" 4
.IX Item "$ae->extract_path"
.ie n .IP "$ae\->files" 4
.el .IP "\f(CW$ae\fR\->files" 4
.IX Item "$ae->files"
.ie n .IP "$ae\->archive" 4
.el .IP "\f(CW$ae\fR\->archive" 4
.IX Item "$ae->archive"
.ie n .IP "$ae\->type" 4
.el .IP "\f(CW$ae\fR\->type" 4
.IX Item "$ae->type"
.ie n .IP "$ae\->types" 4
.el .IP "\f(CW$ae\fR\->types" 4
.IX Item "$ae->types"
.RE
.RS 4
.RE
.ie n .IP "$ae\->is_tgz" 4
.el .IP "\f(CW$ae\fR\->is_tgz" 4
.IX Item "$ae->is_tgz"
.ie n .IP "$ae\->is_tar" 4
.el .IP "\f(CW$ae\fR\->is_tar" 4
.IX Item "$ae->is_tar"
.ie n .IP "$ae\->is_gz" 4
.el .IP "\f(CW$ae\fR\->is_gz" 4
.IX Item "$ae->is_gz"
.ie n .IP "$ae\->is_Z" 4
.el .IP "\f(CW$ae\fR\->is_Z" 4
.IX Item "$ae->is_Z"
.ie n .IP "$ae\->is_zip" 4
.el .IP "\f(CW$ae\fR\->is_zip" 4
.IX Item "$ae->is_zip"
.ie n .IP "$ae\->is_lzma" 4
.el .IP "\f(CW$ae\fR\->is_lzma" 4
.IX Item "$ae->is_lzma"
.ie n .IP "$ae\->is_xz" 4
.el .IP "\f(CW$ae\fR\->is_xz" 4
.IX Item "$ae->is_xz"
.ie n .IP "$ae\->bin_tar" 4
.el .IP "\f(CW$ae\fR\->bin_tar" 4
.IX Item "$ae->bin_tar"
.ie n .IP "$ae\->bin_gzip" 4
.el .IP "\f(CW$ae\fR\->bin_gzip" 4
.IX Item "$ae->bin_gzip"
.ie n .IP "$ae\->bin_unzip" 4
.el .IP "\f(CW$ae\fR\->bin_unzip" 4
.IX Item "$ae->bin_unzip"
.ie n .IP "$ae\->bin_unlzma" 4
.el .IP "\f(CW$ae\fR\->bin_unlzma" 4
.IX Item "$ae->bin_unlzma"
.ie n .IP "$ae\->bin_unxz" 4
.el .IP "\f(CW$ae\fR\->bin_unxz" 4
.IX Item "$ae->bin_unxz"
.ie n .IP "$bool = $ae\->have_old_bunzip2" 4
.el .IP "\f(CW$bool\fR = \f(CW$ae\fR\->have_old_bunzip2" 4
.IX Item "$bool = $ae->have_old_bunzip2"
.IP "debug( \s-1MESSAGE \s0)" 4
.IX Item "debug( MESSAGE )"
.IP "\s-1HOW IT WORKS\s0" 4
.IX Item "HOW IT WORKS"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.RS 4
.IP "File Extensions" 4
.IX Item "File Extensions"
.IP "Supporting Very Large Files" 4
.IX Item "Supporting Very Large Files"
.IP "Bunzip2 support of arbitrary extensions." 4
.IX Item "Bunzip2 support of arbitrary extensions."
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$Archive::Extract::DEBUG" 4
.el .IP "\f(CW$Archive::Extract::DEBUG\fR" 4
.IX Item "$Archive::Extract::DEBUG"
.ie n .IP "$Archive::Extract::WARN" 4
.el .IP "\f(CW$Archive::Extract::WARN\fR" 4
.IX Item "$Archive::Extract::WARN"
.ie n .IP "$Archive::Extract::PREFER_BIN" 4
.el .IP "\f(CW$Archive::Extract::PREFER_BIN\fR" 4
.IX Item "$Archive::Extract::PREFER_BIN"
.RE
.RS 4
.RE
.IP "\s-1TODO / CAVEATS\s0" 4
.IX Item "TODO / CAVEATS"
.PD
Mime magic support, Thread safety
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Archive::Tar \- module for manipulations of tar archives"
.IX Subsection "Archive::Tar - module for manipulations of tar archives"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Object Methods" 4
.IX Item "Object Methods"
.RS 4
.ie n .IP "Archive::Tar\->new( [$file, $compressed] )" 4
.el .IP "Archive::Tar\->new( [$file, \f(CW$compressed\fR] )" 4
.IX Item "Archive::Tar->new( [$file, $compressed] )"
.RE
.RS 4
.RE
.ie n .IP "$tar\->read ( $filename|$handle, [$compressed, {opt => 'val'}] )" 4
.el .IP "\f(CW$tar\fR\->read ( \f(CW$filename\fR|$handle, [$compressed, {opt => 'val'}] )" 4
.IX Item "$tar->read ( $filename|$handle, [$compressed, {opt => 'val'}] )"
.PD
limit, filter, md5, extract
.ie n .IP "$tar\->contains_file( $filename )" 4
.el .IP "\f(CW$tar\fR\->contains_file( \f(CW$filename\fR )" 4
.IX Item "$tar->contains_file( $filename )"
.PD 0
.ie n .IP "$tar\->extract( [@filenames] )" 4
.el .IP "\f(CW$tar\fR\->extract( [@filenames] )" 4
.IX Item "$tar->extract( [@filenames] )"
.ie n .IP "$tar\->extract_file( $file, [$extract_path] )" 4
.el .IP "\f(CW$tar\fR\->extract_file( \f(CW$file\fR, [$extract_path] )" 4
.IX Item "$tar->extract_file( $file, [$extract_path] )"
.ie n .IP "$tar\->list_files( [\e@properties] )" 4
.el .IP "\f(CW$tar\fR\->list_files( [\e@properties] )" 4
.IX Item "$tar->list_files( [@properties] )"
.ie n .IP "$tar\->get_files( [@filenames] )" 4
.el .IP "\f(CW$tar\fR\->get_files( [@filenames] )" 4
.IX Item "$tar->get_files( [@filenames] )"
.ie n .IP "$tar\->get_content( $file )" 4
.el .IP "\f(CW$tar\fR\->get_content( \f(CW$file\fR )" 4
.IX Item "$tar->get_content( $file )"
.ie n .IP "$tar\->replace_content( $file, $content )" 4
.el .IP "\f(CW$tar\fR\->replace_content( \f(CW$file\fR, \f(CW$content\fR )" 4
.IX Item "$tar->replace_content( $file, $content )"
.ie n .IP "$tar\->rename( $file, $new_name )" 4
.el .IP "\f(CW$tar\fR\->rename( \f(CW$file\fR, \f(CW$new_name\fR )" 4
.IX Item "$tar->rename( $file, $new_name )"
.ie n .IP "$tar\->chmod( $file, $mode )" 4
.el .IP "\f(CW$tar\fR\->chmod( \f(CW$file\fR, \f(CW$mode\fR )" 4
.IX Item "$tar->chmod( $file, $mode )"
.ie n .IP "$tar\->chown( $file, $uname [, $gname] )" 4
.el .IP "\f(CW$tar\fR\->chown( \f(CW$file\fR, \f(CW$uname\fR [, \f(CW$gname\fR] )" 4
.IX Item "$tar->chown( $file, $uname [, $gname] )"
.ie n .IP "$tar\->remove (@filenamelist)" 4
.el .IP "\f(CW$tar\fR\->remove (@filenamelist)" 4
.IX Item "$tar->remove (@filenamelist)"
.ie n .IP "$tar\->clear" 4
.el .IP "\f(CW$tar\fR\->clear" 4
.IX Item "$tar->clear"
.ie n .IP "$tar\->write ( [$file, $compressed, $prefix] )" 4
.el .IP "\f(CW$tar\fR\->write ( [$file, \f(CW$compressed\fR, \f(CW$prefix\fR] )" 4
.IX Item "$tar->write ( [$file, $compressed, $prefix] )"
.ie n .IP "$tar\->add_files( @filenamelist )" 4
.el .IP "\f(CW$tar\fR\->add_files( \f(CW@filenamelist\fR )" 4
.IX Item "$tar->add_files( @filenamelist )"
.ie n .IP "$tar\->add_data ( $filename, $data, [$opthashref] )" 4
.el .IP "\f(CW$tar\fR\->add_data ( \f(CW$filename\fR, \f(CW$data\fR, [$opthashref] )" 4
.IX Item "$tar->add_data ( $filename, $data, [$opthashref] )"
.PD
\&\s-1FILE, HARDLINK, SYMLINK, CHARDEV, BLOCKDEV, DIR, FIFO, SOCKET\s0
.ie n .IP "$tar\->error( [$BOOL] )" 4
.el .IP "\f(CW$tar\fR\->error( [$BOOL] )" 4
.IX Item "$tar->error( [$BOOL] )"
.PD 0
.ie n .IP "$tar\->setcwd( $cwd );" 4
.el .IP "\f(CW$tar\fR\->setcwd( \f(CW$cwd\fR );" 4
.IX Item "$tar->setcwd( $cwd );"
.IP "Class Methods" 4
.IX Item "Class Methods"
.RS 4
.ie n .IP "Archive::Tar\->create_archive($file, $compressed, @filelist)" 4
.el .IP "Archive::Tar\->create_archive($file, \f(CW$compressed\fR, \f(CW@filelist\fR)" 4
.IX Item "Archive::Tar->create_archive($file, $compressed, @filelist)"
.RE
.RS 4
.RE
.ie n .IP "Archive::Tar\->iter( $filename, [ $compressed, {opt => $val} ] )" 4
.el .IP "Archive::Tar\->iter( \f(CW$filename\fR, [ \f(CW$compressed\fR, {opt => \f(CW$val\fR} ] )" 4
.IX Item "Archive::Tar->iter( $filename, [ $compressed, {opt => $val} ] )"
.ie n .IP "Archive::Tar\->list_archive($file, $compressed, [\e@properties])" 4
.el .IP "Archive::Tar\->list_archive($file, \f(CW$compressed\fR, [\e@properties])" 4
.IX Item "Archive::Tar->list_archive($file, $compressed, [@properties])"
.ie n .IP "Archive::Tar\->extract_archive($file, $compressed)" 4
.el .IP "Archive::Tar\->extract_archive($file, \f(CW$compressed\fR)" 4
.IX Item "Archive::Tar->extract_archive($file, $compressed)"
.ie n .IP "$bool = Archive::Tar\->has_io_string" 4
.el .IP "\f(CW$bool\fR = Archive::Tar\->has_io_string" 4
.IX Item "$bool = Archive::Tar->has_io_string"
.ie n .IP "$bool = Archive::Tar\->has_perlio" 4
.el .IP "\f(CW$bool\fR = Archive::Tar\->has_perlio" 4
.IX Item "$bool = Archive::Tar->has_perlio"
.ie n .IP "$bool = Archive::Tar\->has_zlib_support" 4
.el .IP "\f(CW$bool\fR = Archive::Tar\->has_zlib_support" 4
.IX Item "$bool = Archive::Tar->has_zlib_support"
.ie n .IP "$bool = Archive::Tar\->has_bzip2_support" 4
.el .IP "\f(CW$bool\fR = Archive::Tar\->has_bzip2_support" 4
.IX Item "$bool = Archive::Tar->has_bzip2_support"
.IP "Archive::Tar\->can_handle_compressed_files" 4
.IX Item "Archive::Tar->can_handle_compressed_files"
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$Archive::Tar::FOLLOW_SYMLINK" 4
.el .IP "\f(CW$Archive::Tar::FOLLOW_SYMLINK\fR" 4
.IX Item "$Archive::Tar::FOLLOW_SYMLINK"
.ie n .IP "$Archive::Tar::CHOWN" 4
.el .IP "\f(CW$Archive::Tar::CHOWN\fR" 4
.IX Item "$Archive::Tar::CHOWN"
.ie n .IP "$Archive::Tar::CHMOD" 4
.el .IP "\f(CW$Archive::Tar::CHMOD\fR" 4
.IX Item "$Archive::Tar::CHMOD"
.ie n .IP "$Archive::Tar::SAME_PERMISSIONS" 4
.el .IP "\f(CW$Archive::Tar::SAME_PERMISSIONS\fR" 4
.IX Item "$Archive::Tar::SAME_PERMISSIONS"
.ie n .IP "$Archive::Tar::DO_NOT_USE_PREFIX" 4
.el .IP "\f(CW$Archive::Tar::DO_NOT_USE_PREFIX\fR" 4
.IX Item "$Archive::Tar::DO_NOT_USE_PREFIX"
.ie n .IP "$Archive::Tar::DEBUG" 4
.el .IP "\f(CW$Archive::Tar::DEBUG\fR" 4
.IX Item "$Archive::Tar::DEBUG"
.ie n .IP "$Archive::Tar::WARN" 4
.el .IP "\f(CW$Archive::Tar::WARN\fR" 4
.IX Item "$Archive::Tar::WARN"
.ie n .IP "$Archive::Tar::error" 4
.el .IP "\f(CW$Archive::Tar::error\fR" 4
.IX Item "$Archive::Tar::error"
.ie n .IP "$Archive::Tar::INSECURE_EXTRACT_MODE" 4
.el .IP "\f(CW$Archive::Tar::INSECURE_EXTRACT_MODE\fR" 4
.IX Item "$Archive::Tar::INSECURE_EXTRACT_MODE"
.ie n .IP "$Archive::Tar::HAS_PERLIO" 4
.el .IP "\f(CW$Archive::Tar::HAS_PERLIO\fR" 4
.IX Item "$Archive::Tar::HAS_PERLIO"
.ie n .IP "$Archive::Tar::HAS_IO_STRING" 4
.el .IP "\f(CW$Archive::Tar::HAS_IO_STRING\fR" 4
.IX Item "$Archive::Tar::HAS_IO_STRING"
.ie n .IP "$Archive::Tar::ZERO_PAD_NUMBERS" 4
.el .IP "\f(CW$Archive::Tar::ZERO_PAD_NUMBERS\fR" 4
.IX Item "$Archive::Tar::ZERO_PAD_NUMBERS"
.RE
.RS 4
.RE
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
.PD
What's the minimum perl version required to run Archive::Tar?, Isn't
Archive::Tar slow?, Isn't Archive::Tar heavier on memory than /bin/tar?,
Can you lazy-load data instead?, How much memory will an X kb tar file
need?, What do you do with unsupported filetypes in an archive?, I'm using
WinZip, or some other non-POSIX client, and files are not being extracted
properly!, How do I extract only files that have property X from an
archive?, How do I access .tar.Z files?, How do I handle Unicode strings?
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.PD
Check if passed in handles are open for read/write, Allow archives to be
passed in as string, Facilitate processing an opened filehandle of a
compressed archive
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
The \s-1GNU\s0 tar specification, The \s-1PAX\s0 format specification, A comparison of
\&\s-1GNU\s0 and \s-1POSIX\s0 tar standards;
\&\f(CW\*(C`http://www.delorie.com/gnu/docs/tar/tar_114.html\*(C'\fR, \s-1GNU\s0 tar intends to
switch to \s-1POSIX\s0 compatibility, A Comparison between various tar
implementations
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Archive::Tar::File \- a subclass for in-memory extracted file from Archive::Tar"
.IX Subsection "Archive::Tar::File - a subclass for in-memory extracted file from Archive::Tar"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Accessors" 4
.IX Item "Accessors"
.PD
name, mode, uid, gid, size, mtime, chksum, type, linkname, magic, version,
uname, gname, devmajor, devminor, prefix, raw
.RE
.RS 4
.RE
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.PD 0
.ie n .IP "Archive::Tar::File\->new( file => $path )" 4
.el .IP "Archive::Tar::File\->new( file => \f(CW$path\fR )" 4
.IX Item "Archive::Tar::File->new( file => $path )"
.ie n .IP "Archive::Tar::File\->new( data => $path, $data, $opt )" 4
.el .IP "Archive::Tar::File\->new( data => \f(CW$path\fR, \f(CW$data\fR, \f(CW$opt\fR )" 4
.IX Item "Archive::Tar::File->new( data => $path, $data, $opt )"
.ie n .IP "Archive::Tar::File\->new( chunk => $chunk )" 4
.el .IP "Archive::Tar::File\->new( chunk => \f(CW$chunk\fR )" 4
.IX Item "Archive::Tar::File->new( chunk => $chunk )"
.RE
.RS 4
.RE
.ie n .IP "$bool = $file\->extract( [ $alternative_name ] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->extract( [ \f(CW$alternative_name\fR ] )" 4
.IX Item "$bool = $file->extract( [ $alternative_name ] )"
.ie n .IP "$path = $file\->full_path" 4
.el .IP "\f(CW$path\fR = \f(CW$file\fR\->full_path" 4
.IX Item "$path = $file->full_path"
.ie n .IP "$bool = $file\->validate" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->validate" 4
.IX Item "$bool = $file->validate"
.ie n .IP "$bool = $file\->has_content" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->has_content" 4
.IX Item "$bool = $file->has_content"
.ie n .IP "$content = $file\->get_content" 4
.el .IP "\f(CW$content\fR = \f(CW$file\fR\->get_content" 4
.IX Item "$content = $file->get_content"
.ie n .IP "$cref = $file\->get_content_by_ref" 4
.el .IP "\f(CW$cref\fR = \f(CW$file\fR\->get_content_by_ref" 4
.IX Item "$cref = $file->get_content_by_ref"
.ie n .IP "$bool = $file\->replace_content( $content )" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->replace_content( \f(CW$content\fR )" 4
.IX Item "$bool = $file->replace_content( $content )"
.ie n .IP "$bool = $file\->rename( $new_name )" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->rename( \f(CW$new_name\fR )" 4
.IX Item "$bool = $file->rename( $new_name )"
.ie n .IP "$bool = $file\->chmod $mode)" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->chmod \f(CW$mode\fR)" 4
.IX Item "$bool = $file->chmod $mode)"
.ie n .IP "$bool = $file\->chown( $user [, $group])" 4
.el .IP "\f(CW$bool\fR = \f(CW$file\fR\->chown( \f(CW$user\fR [, \f(CW$group\fR])" 4
.IX Item "$bool = $file->chown( $user [, $group])"
.IP "Convenience methods" 4
.IX Item "Convenience methods"
.PD
\&\f(CW$file\fR\->is_file, \f(CW$file\fR\->is_dir, \f(CW$file\fR\->is_hardlink, \f(CW$file\fR\->is_symlink,
\&\f(CW$file\fR\->is_chardev, \f(CW$file\fR\->is_blockdev, \f(CW$file\fR\->is_fifo, \f(CW$file\fR\->is_socket,
\&\f(CW$file\fR\->is_longlink, \f(CW$file\fR\->is_label, \f(CW$file\fR\->is_unknown
.SS "Attribute::Handlers \- Simpler definition of attribute handlers"
.IX Subsection "Attribute::Handlers - Simpler definition of attribute handlers"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
[0], [1], [2], [3], [4], [5], [6], [7]
.RS 4
.IP "Typed lexicals" 4
.IX Item "Typed lexicals"
.PD 0
.IP "Type-specific attribute handlers" 4
.IX Item "Type-specific attribute handlers"
.IP "Non-interpretive attribute handlers" 4
.IX Item "Non-interpretive attribute handlers"
.IP "Phase-specific attribute handlers" 4
.IX Item "Phase-specific attribute handlers"
.ie n .IP "Attributes as ""tie"" interfaces" 4
.el .IP "Attributes as \f(CWtie\fR interfaces" 4
.IX Item "Attributes as tie interfaces"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1UTILITY FUNCTIONS\s0" 4
.IX Item "UTILITY FUNCTIONS"
.PD
findsym
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
\&\f(CW\*(C`Bad attribute type: ATTR(%s)\*(C'\fR, \f(CW\*(C`Attribute handler %s doesn\*(Aqt handle %s
attributes\*(C'\fR, \f(CW\*(C`Declaration of %s attribute in package %s may clash with
future reserved word\*(C'\fR, \f(CW\*(C`Can\*(Aqt have two ATTR specifiers on one subroutine\*(C'\fR,
\&\f(CW\*(C`Can\*(Aqt autotie a %s\*(C'\fR, \f(CW\*(C`Internal error: %s symbol went missing\*(C'\fR, \f(CW\*(C`Won\*(Aqt
be able to apply END handler\*(C'\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "AutoLoader \- load subroutines only on demand"
.IX Subsection "AutoLoader - load subroutines only on demand"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Subroutine Stubs" 4
.IX Item "Subroutine Stubs"
.IP "Using \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine" 4
.IX Item "Using AutoLoader's AUTOLOAD Subroutine"
.IP "Overriding \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine" 4
.IX Item "Overriding AutoLoader's AUTOLOAD Subroutine"
.IP "Package Lexicals" 4
.IX Item "Package Lexicals"
.IP "Not Using AutoLoader" 4
.IX Item "Not Using AutoLoader"
.IP "\fBAutoLoader\fR vs. \fBSelfLoader\fR" 4
.IX Item "AutoLoader vs. SelfLoader"
.IP "Forcing AutoLoader to Load a Function" 4
.IX Item "Forcing AutoLoader to Load a Function"
.RE
.RS 4
.RE
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "AutoSplit \- split a package for autoloading"
.IX Subsection "AutoSplit - split a package for autoloading"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$keep\fR, \f(CW$check\fR, \f(CW$modtime\fR
.RS 4
.IP "Multiple packages" 4
.IX Item "Multiple packages"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "B \- The Perl Compiler Backend"
.IX Subsection "B - The Perl Compiler Backend"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERVIEW\s0" 4
.IX Item "OVERVIEW"
.IP "Utility Functions" 4
.IX Item "Utility Functions"
.RS 4
.ie n .IP "Functions Returning ""B::SV"", ""B::AV"", ""B::HV"", and ""B::CV"" objects" 4
.el .IP "Functions Returning \f(CWB::SV\fR, \f(CWB::AV\fR, \f(CWB::HV\fR, and \f(CWB::CV\fR objects" 4
.IX Item "Functions Returning B::SV, B::AV, B::HV, and B::CV objects"
.PD
sv_undef, sv_yes, sv_no, svref_2object(\s-1SVREF\s0), amagic_generation, init_av,
check_av, unitcheck_av, begin_av, end_av, comppadlist, regex_padav, main_cv
.IP "Functions for Examining the Symbol Table" 4
.IX Item "Functions for Examining the Symbol Table"
walksymtable(\s-1SYMREF, METHOD, RECURSE, PREFIX\s0)
.ie n .IP "Functions Returning ""B::OP"" objects or for walking op trees" 4
.el .IP "Functions Returning \f(CWB::OP\fR objects or for walking op trees" 4
.IX Item "Functions Returning B::OP objects or for walking op trees"
main_root, main_start, walkoptree(\s-1OP, METHOD\s0), walkoptree_debug(\s-1DEBUG\s0)
.IP "Miscellaneous Utility Functions" 4
.IX Item "Miscellaneous Utility Functions"
ppname(\s-1OPNUM\s0), hash(\s-1STR\s0), cast_I32(I), minus_c, cstring(\s-1STR\s0),
perlstring(\s-1STR\s0), class(\s-1OBJ\s0), threadsv_names
.IP "Exported utility variables" 4
.IX Item "Exported utility variables"
\&\f(CW@optype\fR, \f(CW@specialsv_name\fR
.RE
.RS 4
.RE
.IP "\s-1OVERVIEW OF CLASSES\s0" 4
.IX Item "OVERVIEW OF CLASSES"
.RS 4
.PD 0
.IP "SV-RELATED \s-1CLASSES\s0" 4
.IX Item "SV-RELATED CLASSES"
.IP "B::SV Methods" 4
.IX Item "B::SV Methods"
.PD
\&\s-1REFCNT, FLAGS,\s0 object_2svref
.IP "B::IV Methods" 4
.IX Item "B::IV Methods"
\&\s-1IV, IVX, UVX,\s0 int_value, needs64bits, packiv
.IP "B::NV Methods" 4
.IX Item "B::NV Methods"
\&\s-1NV, NVX\s0
.IP "B::RV Methods" 4
.IX Item "B::RV Methods"
\&\s-1RV\s0
.IP "B::PV Methods" 4
.IX Item "B::PV Methods"
\&\s-1PV, RV, PVX, CUR, LEN\s0
.IP "B::PVMG Methods" 4
.IX Item "B::PVMG Methods"
\&\s-1MAGIC,\s0 SvSTASH
.IP "B::MAGIC Methods" 4
.IX Item "B::MAGIC Methods"
\&\s-1MOREMAGIC,\s0 precomp, \s-1PRIVATE, TYPE, FLAGS, OBJ, PTR, REGEX\s0
.IP "B::PVLV Methods" 4
.IX Item "B::PVLV Methods"
\&\s-1TARGOFF, TARGLEN, TYPE, TARG\s0
.IP "B::BM Methods" 4
.IX Item "B::BM Methods"
\&\s-1USEFUL, PREVIOUS, RARE, TABLE\s0
.IP "B::GV Methods" 4
.IX Item "B::GV Methods"
is_empty, \s-1NAME, SAFENAME, STASH, SV, IO, FORM, AV, HV, EGV, CV, CVGEN,
LINE, FILE, FILEGV,\s0 GvREFCNT, \s-1FLAGS\s0
.IP "B::IO Methods" 4
.IX Item "B::IO Methods"
\&\s-1LINES, PAGE, PAGE_LEN, LINES_LEFT, TOP_NAME, TOP_GV, FMT_NAME, FMT_GV,
BOTTOM_NAME, BOTTOM_GV, SUBPROCESS,\s0 IoTYPE, IoFLAGS, IsSTD
.IP "B::AV Methods" 4
.IX Item "B::AV Methods"
\&\s-1FILL, MAX, ARRAY,\s0 ARRAYelt, \s-1OFF,\s0 AvFLAGS
.IP "B::CV Methods" 4
.IX Item "B::CV Methods"
\&\s-1STASH, START, ROOT, GV, FILE, DEPTH, PADLIST, OUTSIDE, OUTSIDE_SEQ, XSUB,
XSUBANY,\s0 CvFLAGS, const_sv, \s-1NAME_HEK\s0
.IP "B::HV Methods" 4
.IX Item "B::HV Methods"
\&\s-1FILL, MAX, KEYS, RITER, NAME, ARRAY, PMROOT\s0
.IP "OP-RELATED \s-1CLASSES\s0" 4
.IX Item "OP-RELATED CLASSES"
.PD 0
.IP "B::OP Methods" 4
.IX Item "B::OP Methods"
.PD
next, sibling, name, ppaddr, desc, targ, type, opt, flags, private, spare
.IP "B::UNOP \s-1METHOD\s0" 4
.IX Item "B::UNOP METHOD"
first
.IP "B::BINOP \s-1METHOD\s0" 4
.IX Item "B::BINOP METHOD"
last
.IP "B::LOGOP \s-1METHOD\s0" 4
.IX Item "B::LOGOP METHOD"
other
.IP "B::LISTOP \s-1METHOD\s0" 4
.IX Item "B::LISTOP METHOD"
children
.IP "B::PMOP Methods" 4
.IX Item "B::PMOP Methods"
pmreplroot, pmreplstart, pmnext, pmflags, extflags, precomp, pmoffset,
code_list
.IP "B::SVOP \s-1METHOD\s0" 4
.IX Item "B::SVOP METHOD"
sv, gv
.IP "B::PADOP \s-1METHOD\s0" 4
.IX Item "B::PADOP METHOD"
padix
.IP "B::PVOP \s-1METHOD\s0" 4
.IX Item "B::PVOP METHOD"
pv
.IP "B::LOOP Methods" 4
.IX Item "B::LOOP Methods"
redoop, nextop, lastop
.IP "B::COP Methods" 4
.IX Item "B::COP Methods"
label, stash, stashpv, stashoff (threaded only), file, cop_seq, arybase,
line, warnings, io, hints, hints_hash
.ie n .IP "$B::overlay" 4
.el .IP "\f(CW$B::overlay\fR" 4
.IX Item "$B::overlay"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "B::Concise \- Walk Perl syntax tree, printing concise info about ops"
.IX Subsection "B::Concise - Walk Perl syntax tree, printing concise info about ops"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RS 4
.IP "Options for Opcode Ordering" 4
.IX Item "Options for Opcode Ordering"
.PD
\&\fB\-basic\fR, \fB\-exec\fR, \fB\-tree\fR
.IP "Options for Line-Style" 4
.IX Item "Options for Line-Style"
\&\fB\-concise\fR, \fB\-terse\fR, \fB\-linenoise\fR, \fB\-debug\fR, \fB\-env\fR
.IP "Options for tree-specific formatting" 4
.IX Item "Options for tree-specific formatting"
\&\fB\-compact\fR, \fB\-loose\fR, \fB\-vt\fR, \fB\-ascii\fR
.IP "Options controlling sequence numbering" 4
.IX Item "Options controlling sequence numbering"
\&\fB\-base\fR\fIn\fR, \fB\-bigendian\fR, \fB\-littleendian\fR
.IP "Other options" 4
.IX Item "Other options"
\&\fB\-src\fR, \fB\-stash=\*(L"somepackage\*(R"\fR, \fB\-main\fR, \fB\-nomain\fR, \fB\-nobanner\fR,
\&\fB\-banner\fR, \fB\-banneris\fR => subref
.IP "Option Stickiness" 4
.IX Item "Option Stickiness"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1ABBREVIATIONS\s0" 4
.IX Item "ABBREVIATIONS"
.RS 4
.IP "\s-1OP\s0 class abbreviations" 4
.IX Item "OP class abbreviations"
.IP "\s-1OP\s0 flags abbreviations" 4
.IX Item "OP flags abbreviations"
.RE
.RS 4
.RE
.IP "\s-1FORMATTING SPECIFICATIONS\s0" 4
.IX Item "FORMATTING SPECIFICATIONS"
.RS 4
.IP "Special Patterns" 4
.IX Item "Special Patterns"
.PD
\&\fB(x(\fR\fIexec_text\fR\fB;\fR\fIbasic_text\fR\fB)x)\fR, \fB(*(\fR\fItext\fR\fB)*)\fR,
\&\fB(*(\fR\fItext1\fR\fB;\fR\fItext2\fR\fB)*)\fR, \fB(?(\fR\fItext1\fR\fB#\fR\fIvar\fR\fIText2\fR\fB)?)\fR,
\&\fB~\fR
.IP "# Variables" 4
.IX Item "# Variables"
\&\fB#\fR\fIvar\fR, \fB#\fR\fIvar\fR\fIN\fR, \fB#\fR\fIVar\fR, \fB#addr\fR, \fB#arg\fR, \fB#class\fR,
\&\fB#classsym\fR, \fB#coplabel\fR, \fB#exname\fR, \fB#extarg\fR, \fB#firstaddr\fR,
\&\fB#flags\fR, \fB#flagval\fR, \fB#hints\fR, \fB#hintsval\fR, \fB#hyphseq\fR, \fB#label\fR,
\&\fB#lastaddr\fR, \fB#name\fR, \fB#NAME\fR, \fB#next\fR, \fB#nextaddr\fR, \fB#noise\fR,
\&\fB#private\fR, \fB#privval\fR, \fB#seq\fR, \fB#seqnum\fR, \fB#opt\fR, \fB#sibaddr\fR,
\&\fB#svaddr\fR, \fB#svclass\fR, \fB#svval\fR, \fB#targ\fR, \fB#targarg\fR, \fB#targarglife\fR,
\&\fB#typenum\fR
.RE
.RS 4
.RE
.IP "One-Liner Command tips" 4
.IX Item "One-Liner Command tips"
perl \-MO=Concise,bar foo.pl, perl \-MDigest::MD5=md5 \-MO=Concise,md5 \-e1,
perl \-MPOSIX \-MO=Concise,_POSIX_ARG_MAX \-e1, perl \-MPOSIX \-MO=Concise,a \-e
\&'print _POSIX_SAVED_IDS', perl \-MPOSIX \-MO=Concise,a \-e 'sub
a{_POSIX_SAVED_IDS}', perl \-MB::Concise \-e
\&'B::Concise::compile(\*(L"\-exec\*(R",\*(L"\-src\*(R", \e%B::Concise::)\->()'
.IP "Using B::Concise outside of the O framework" 4
.IX Item "Using B::Concise outside of the O framework"
.RS 4
.PD 0
.IP "Example: Altering Concise Renderings" 4
.IX Item "Example: Altering Concise Renderings"
.IP "\fIset_style()\fR" 4
.IX Item "set_style()"
.IP "set_style_standard($name)" 4
.IX Item "set_style_standard($name)"
.IP "add_style ()" 4
.IX Item "add_style ()"
.IP "add_callback ()" 4
.IX Item "add_callback ()"
.IP "Running \fIB::Concise::compile()\fR" 4
.IX Item "Running B::Concise::compile()"
.IP "\fIB::Concise::reset_sequence()\fR" 4
.IX Item "B::Concise::reset_sequence()"
.IP "Errors" 4
.IX Item "Errors"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "B::Debug \- Walk Perl syntax tree, printing debug info about ops"
.IX Subsection "B::Debug - Walk Perl syntax tree, printing debug info about ops"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "B::Deparse \- Perl compiler backend to produce perl code"
.IX Subsection "B::Deparse - Perl compiler backend to produce perl code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.PD
\&\fB\-d\fR, \fB\-f\fR\fI\s-1FILE\s0\fR, \fB\-l\fR, \fB\-p\fR, \fB\-P\fR, \fB\-q\fR, \fB\-s\fR\fI\s-1LETTERS\s0\fR, \fBC\fR,
\&\fBi\fR\fI\s-1NUMBER\s0\fR, \fBT\fR, \fBv\fR\fI\s-1STRING\s0\fR\fB.\fR, \fB\-x\fR\fI\s-1LEVEL\s0\fR
.IP "\s-1USING\s0 B::Deparse \s-1AS A MODULE\s0" 4
.IX Item "USING B::Deparse AS A MODULE"
.RS 4
.PD 0
.IP "Synopsis" 4
.IX Item "Synopsis"
.IP "Description" 4
.IX Item "Description"
.IP "new" 4
.IX Item "new"
.IP "ambient_pragmas" 4
.IX Item "ambient_pragmas"
.PD
strict, $[, bytes, utf8, integer, re, warnings, hint_bits, warning_bits,
%^H
.IP "coderef2text" 4
.IX Item "coderef2text"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "B::Lint \- Perl lint"
.IX Subsection "B::Lint - Perl lint"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPTIONS AND LINT CHECKS\s0" 4
.IX Item "OPTIONS AND LINT CHECKS"
.PD
\&\fBmagic-diamond\fR, \fBcontext\fR, \fBimplicit-read\fR and \fBimplicit-write\fR,
\&\fBbare-subs\fR, \fBdollar-underscore\fR, \fBprivate-names\fR, \fBundefined-subs\fR,
\&\fBregexp-variables\fR, \fBall\fR, \fBnone\fR
.IP "\s-1NON\s0 LINT-CHECK \s-1OPTIONS\s0" 4
.IX Item "NON LINT-CHECK OPTIONS"
\&\fB\-u Package\fR
.IP "\s-1EXTENDING LINT\s0" 4
.IX Item "EXTENDING LINT"
.PD 0
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.PD
while(<\s-1FH\s0>) stomps \f(CW$_\fR, strict oo, unchecked system calls, more tests,
validate against older perls
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.PD
.SS "B::Lint::Debug \- Adds debugging stringification to B::"
.IX Subsection "B::Lint::Debug - Adds debugging stringification to B::"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "B::Showlex \- Show lexical variables used in functions or files"
.IX Subsection "B::Showlex - Show lexical variables used in functions or files"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "B::Terse \- Walk Perl syntax tree, printing terse info about ops"
.IX Subsection "B::Terse - Walk Perl syntax tree, printing terse info about ops"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "B::Xref \- Generates cross reference reports for Perl programs"
.IX Subsection "B::Xref - Generates cross reference reports for Perl programs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
i, &, s, r
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
\&\f(CW\*(C`\-oFILENAME\*(C'\fR, \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR, \f(CW\*(C`\-D[tO]\*(C'\fR
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Benchmark \- benchmark running times of Perl code"
.IX Subsection "Benchmark - benchmark running times of Perl code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Methods" 4
.IX Item "Methods"
.PD
new, debug, iters
.IP "Standard Exports" 4
.IX Item "Standard Exports"
timeit(\s-1COUNT, CODE\s0), timethis ( \s-1COUNT, CODE,\s0 [ \s-1TITLE,\s0 [ \s-1STYLE \s0]] ),
timethese ( \s-1COUNT, CODEHASHREF,\s0 [ \s-1STYLE \s0] ), timediff ( T1, T2 ), timestr (
\&\s-1TIMEDIFF,\s0 [ \s-1STYLE,\s0 [ \s-1FORMAT \s0] ] )
.IP "Optional Exports" 4
.IX Item "Optional Exports"
clearcache ( \s-1COUNT \s0), clearallcache ( ), cmpthese ( \s-1COUNT, CODEHASHREF,\s0 [
\&\s-1STYLE \s0] ), cmpthese ( \s-1RESULTSHASHREF,\s0 [ \s-1STYLE \s0] ), countit(\s-1TIME, CODE\s0),
disablecache ( ), enablecache ( ), timesum ( T1, T2 )
.IP ":hireswallclock" 4
.IX Item ":hireswallclock"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1INHERITANCE\s0" 4
.IX Item "INHERITANCE"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.PD
.SS "\s-1CGI \-\s0 Handle Common Gateway Interface requests and responses"
.IX Subsection "CGI - Handle Common Gateway Interface requests and responses"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1PROGRAMMING STYLE\s0" 4
.IX Item "PROGRAMMING STYLE"
.IP "\s-1CALLING CGI.PM ROUTINES\s0" 4
.IX Item "CALLING CGI.PM ROUTINES"
.IP "\s-1CREATING A NEW QUERY OBJECT \s0(OBJECT-ORIENTED \s-1STYLE\s0):" 4
.IX Item "CREATING A NEW QUERY OBJECT (OBJECT-ORIENTED STYLE):"
.IP "\s-1CREATING A NEW QUERY OBJECT FROM AN INPUT FILE\s0" 4
.IX Item "CREATING A NEW QUERY OBJECT FROM AN INPUT FILE"
.IP "\s-1FETCHING A LIST OF KEYWORDS FROM THE QUERY:\s0" 4
.IX Item "FETCHING A LIST OF KEYWORDS FROM THE QUERY:"
.IP "\s-1FETCHING THE NAMES OF ALL THE PARAMETERS PASSED TO YOUR SCRIPT:\s0" 4
.IX Item "FETCHING THE NAMES OF ALL THE PARAMETERS PASSED TO YOUR SCRIPT:"
.IP "\s-1FETCHING THE VALUE OR VALUES OF A SINGLE NAMED PARAMETER:\s0" 4
.IX Item "FETCHING THE VALUE OR VALUES OF A SINGLE NAMED PARAMETER:"
.IP "\s-1SETTING THE VALUE\s0(S) \s-1OF A NAMED PARAMETER:\s0" 4
.IX Item "SETTING THE VALUE(S) OF A NAMED PARAMETER:"
.IP "\s-1APPENDING ADDITIONAL VALUES TO A NAMED PARAMETER:\s0" 4
.IX Item "APPENDING ADDITIONAL VALUES TO A NAMED PARAMETER:"
.IP "\s-1IMPORTING ALL PARAMETERS INTO A NAMESPACE:\s0" 4
.IX Item "IMPORTING ALL PARAMETERS INTO A NAMESPACE:"
.IP "\s-1DELETING A PARAMETER COMPLETELY:\s0" 4
.IX Item "DELETING A PARAMETER COMPLETELY:"
.IP "\s-1DELETING ALL PARAMETERS:\s0" 4
.IX Item "DELETING ALL PARAMETERS:"
.IP "\s-1HANDLING\s0 NON-URLENCODED \s-1ARGUMENTS\s0" 4
.IX Item "HANDLING NON-URLENCODED ARGUMENTS"
.IP "\s-1DIRECT ACCESS TO THE PARAMETER LIST:\s0" 4
.IX Item "DIRECT ACCESS TO THE PARAMETER LIST:"
.IP "\s-1FETCHING THE PARAMETER LIST AS A HASH:\s0" 4
.IX Item "FETCHING THE PARAMETER LIST AS A HASH:"
.IP "\s-1SAVING THE STATE OF THE SCRIPT TO A FILE:\s0" 4
.IX Item "SAVING THE STATE OF THE SCRIPT TO A FILE:"
.IP "\s-1RETRIEVING CGI ERRORS\s0" 4
.IX Item "RETRIEVING CGI ERRORS"
.IP "\s-1USING THE\s0 FUNCTION-ORIENTED \s-1INTERFACE\s0" 4
.IX Item "USING THE FUNCTION-ORIENTED INTERFACE"
.PD
\&\fB:cgi\fR, \fB:form\fR, \fB:html2\fR, \fB:html3\fR, \fB:html4\fR, \fB:netscape\fR, \fB:html\fR,
\&\fB:standard\fR, \fB:all\fR
.IP "\s-1PRAGMAS\s0" 4
.IX Item "PRAGMAS"
\&\-any, \-compile, \-nosticky, \-tabindex, \-no_undef_params, \-no_xhtml, \-utf8,
\&\-nph, \-newstyle_urls, \-oldstyle_urls, \-autoload, \-no_debug, \-debug,
\&\-private_tempfiles
.IP "\s-1SPECIAL FORMS FOR IMPORTING\s0 HTML-TAG \s-1FUNCTIONS\s0" 4
.IX Item "SPECIAL FORMS FOR IMPORTING HTML-TAG FUNCTIONS"
1. \fIstart_table()\fR (generates a <table> tag), 2. \fIend_table()\fR (generates a
</table> tag), 3. \fIstart_ul()\fR (generates a <ul> tag), 4. \fIend_ul()\fR (generates
a </ul> tag)
.RE
.RS 4
.RE
.IP "\s-1GENERATING DYNAMIC DOCUMENTS\s0" 4
.IX Item "GENERATING DYNAMIC DOCUMENTS"
.RS 4
.PD 0
.IP "\s-1CREATING A STANDARD HTTP HEADER:\s0" 4
.IX Item "CREATING A STANDARD HTTP HEADER:"
.IP "\s-1GENERATING A REDIRECTION HEADER\s0" 4
.IX Item "GENERATING A REDIRECTION HEADER"
.IP "\s-1CREATING THE HTML DOCUMENT HEADER\s0" 4
.IX Item "CREATING THE HTML DOCUMENT HEADER"
.PD
\&\fBParameters:\fR, 4, 5, 6..
.IP "\s-1ENDING THE HTML DOCUMENT:\s0" 4
.IX Item "ENDING THE HTML DOCUMENT:"
.PD 0
.IP "\s-1CREATING A\s0 SELF-REFERENCING \s-1URL THAT PRESERVES STATE INFORMATION:\s0" 4
.IX Item "CREATING A SELF-REFERENCING URL THAT PRESERVES STATE INFORMATION:"
.IP "\s-1OBTAINING THE SCRIPT\s0'S \s-1URL\s0" 4
.IX Item "OBTAINING THE SCRIPT'S URL"
.PD
\&\fB\-absolute\fR, \fB\-relative\fR, \fB\-full\fR, \fB\-path\fR (\fB\-path_info\fR), \fB\-query\fR
(\fB\-query_string\fR), \fB\-base\fR, \fB\-rewrite\fR
.IP "\s-1MIXING POST AND URL PARAMETERS\s0" 4
.IX Item "MIXING POST AND URL PARAMETERS"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1CREATING STANDARD HTML ELEMENTS:\s0" 4
.IX Item "CREATING STANDARD HTML ELEMENTS:"
.RS 4
.IP "\s-1PROVIDING ARGUMENTS TO HTML SHORTCUTS\s0" 4
.IX Item "PROVIDING ARGUMENTS TO HTML SHORTCUTS"
.IP "\s-1THE DISTRIBUTIVE PROPERTY OF HTML SHORTCUTS\s0" 4
.IX Item "THE DISTRIBUTIVE PROPERTY OF HTML SHORTCUTS"
.IP "\s-1HTML SHORTCUTS AND LIST INTERPOLATION\s0" 4
.IX Item "HTML SHORTCUTS AND LIST INTERPOLATION"
.IP "NON-STANDARD \s-1HTML SHORTCUTS\s0" 4
.IX Item "NON-STANDARD HTML SHORTCUTS"
.IP "\s-1AUTOESCAPING HTML\s0" 4
.IX Item "AUTOESCAPING HTML"
.PD
\&\f(CW$escaped_string\fR = escapeHTML(\*(L"unescaped string\*(R");, \f(CW$charset\fR =
charset([$charset]);, \f(CW$flag\fR = autoEscape([$flag]);
.IP "PRETTY-PRINTING \s-1HTML\s0" 4
.IX Item "PRETTY-PRINTING HTML"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1CREATING\s0 FILL-OUT \s-1FORMS:\s0" 4
.IX Item "CREATING FILL-OUT FORMS:"
.RS 4
.IP "\s-1CREATING AN ISINDEX TAG\s0" 4
.IX Item "CREATING AN ISINDEX TAG"
.IP "\s-1STARTING AND ENDING A FORM\s0" 4
.IX Item "STARTING AND ENDING A FORM"
.PD
\&\fBapplication/x\-www\-form\-urlencoded\fR, \fBmultipart/form\-data\fR
.IP "\s-1FORM ELEMENTS\s0" 4
.IX Item "FORM ELEMENTS"
\&\fB\-name\fR, \fB\-value\fR, \fB\-values\fR, \fB\-tabindex\fR, \fB\-id\fR, \fB\-override\fR,
\&\fB\-onChange\fR, \fB\-onFocus\fR, \fB\-onBlur\fR, \fB\-onMouseOver\fR, \fB\-onMouseOut\fR,
\&\fB\-onSelect\fR
.IP "\s-1CREATING A TEXT FIELD\s0" 4
.IX Item "CREATING A TEXT FIELD"
\&\fBParameters\fR
.IP "\s-1CREATING A BIG TEXT FIELD\s0" 4
.IX Item "CREATING A BIG TEXT FIELD"
.PD 0
.IP "\s-1CREATING A PASSWORD FIELD\s0" 4
.IX Item "CREATING A PASSWORD FIELD"
.IP "\s-1CREATING A FILE UPLOAD FIELD\s0" 4
.IX Item "CREATING A FILE UPLOAD FIELD"
.PD
\&\fBParameters\fR
.IP "\s-1PROCESSING A FILE UPLOAD FIELD\s0" 4
.IX Item "PROCESSING A FILE UPLOAD FIELD"
.PD 0
.IP "\s-1CREATING A POPUP MENU\s0" 4
.IX Item "CREATING A POPUP MENU"
.IP "\s-1CREATING AN OPTION GROUP\s0" 4
.IX Item "CREATING AN OPTION GROUP"
.IP "\s-1CREATING A SCROLLING LIST\s0" 4
.IX Item "CREATING A SCROLLING LIST"
.PD
\&\fBParameters:\fR
.IP "\s-1CREATING A GROUP OF RELATED CHECKBOXES\s0" 4
.IX Item "CREATING A GROUP OF RELATED CHECKBOXES"
\&\fBParameters:\fR
.IP "\s-1CREATING A STANDALONE CHECKBOX\s0" 4
.IX Item "CREATING A STANDALONE CHECKBOX"
\&\fBParameters:\fR
.IP "\s-1CREATING A RADIO BUTTON GROUP\s0" 4
.IX Item "CREATING A RADIO BUTTON GROUP"
\&\fBParameters:\fR
.IP "\s-1CREATING A SUBMIT BUTTON \s0" 4
.IX Item "CREATING A SUBMIT BUTTON "
\&\fBParameters:\fR
.IP "\s-1CREATING A RESET BUTTON\s0" 4
.IX Item "CREATING A RESET BUTTON"
.PD 0
.IP "\s-1CREATING A DEFAULT BUTTON\s0" 4
.IX Item "CREATING A DEFAULT BUTTON"
.IP "\s-1CREATING A HIDDEN FIELD\s0" 4
.IX Item "CREATING A HIDDEN FIELD"
.PD
\&\fBParameters:\fR
.IP "\s-1CREATING A CLICKABLE IMAGE BUTTON\s0" 4
.IX Item "CREATING A CLICKABLE IMAGE BUTTON"
\&\fBParameters:\fR, 3. The third option (\-align, optional) is an alignment
type, and may be \s-1TOP, BOTTOM\s0 or \s-1MIDDLE\s0
.IP "\s-1CREATING A JAVASCRIPT ACTION BUTTON\s0" 4
.IX Item "CREATING A JAVASCRIPT ACTION BUTTON"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1HTTP COOKIES\s0" 4
.IX Item "HTTP COOKIES"
.PD
1. an expiration time, 2. a domain, 3. a path, 4. a \*(L"secure\*(R" flag,
\&\fB\-name\fR, \fB\-value\fR, \fB\-path\fR, \fB\-domain\fR, \fB\-expires\fR, \fB\-secure\fR
.IP "\s-1WORKING WITH FRAMES\s0" 4
.IX Item "WORKING WITH FRAMES"
1. Create a <Frameset> document, 2. Specify the destination for the
document in the \s-1HTTP\s0 header, 3. Specify the destination for the document in
the <form> tag
.IP "\s-1SUPPORT FOR JAVASCRIPT\s0" 4
.IX Item "SUPPORT FOR JAVASCRIPT"
\&\fBonLoad\fR, \fBonUnload\fR, \fBonSubmit\fR, \fBonClick\fR, \fBonChange\fR, \fBonFocus\fR,
\&\fBonBlur\fR, \fBonSelect\fR, \fBonMouseOver\fR, \fBonMouseOut\fR
.IP "\s-1LIMITED SUPPORT FOR CASCADING STYLE SHEETS\s0" 4
.IX Item "LIMITED SUPPORT FOR CASCADING STYLE SHEETS"
.PD 0
.IP "\s-1DEBUGGING\s0" 4
.IX Item "DEBUGGING"
.RS 4
.IP "\s-1DUMPING OUT ALL THE NAME/VALUE PAIRS\s0" 4
.IX Item "DUMPING OUT ALL THE NAME/VALUE PAIRS"
.RE
.RS 4
.RE
.IP "\s-1FETCHING ENVIRONMENT VARIABLES\s0" 4
.IX Item "FETCHING ENVIRONMENT VARIABLES"
.PD
\&\fB\f(BIAccept()\fB\fR, \fB\f(BIraw_cookie()\fB\fR, \fB\f(BIuser_agent()\fB\fR, \fB\f(BIpath_info()\fB\fR,
\&\fB\f(BIpath_translated()\fB\fR, \fB\f(BIremote_host()\fB\fR, \fB\f(BIremote_addr()\fB\fR, \fB\f(BIscript_name()\fB\fR
Return the script name as a partial \s-1URL,\s0 for self-referring scripts,
\&\fB\f(BIreferer()\fB\fR, \fBauth_type ()\fR, \fBserver_name ()\fR, \fBvirtual_host ()\fR,
\&\fBserver_port ()\fR, \fBvirtual_port ()\fR, \fBserver_software ()\fR, \fBremote_user
()\fR, \fBuser_name ()\fR, \fB\f(BIrequest_method()\fB\fR, \fB\f(BIcontent_type()\fB\fR, \fB\f(BIhttp()\fB\fR,
\&\fB\f(BIhttps()\fB\fR
.IP "\s-1USING NPH SCRIPTS\s0" 4
.IX Item "USING NPH SCRIPTS"
In the \fBuse\fR statement, By calling the \fB\f(BInph()\fB\fR method:, By using \fB\-nph\fR
parameters
.IP "Server Push" 4
.IX Item "Server Push"
\&\fImultipart_init()\fR, \fImultipart_start()\fR, \fImultipart_end()\fR, \fImultipart_final()\fR
.IP "Avoiding Denial of Service Attacks" 4
.IX Item "Avoiding Denial of Service Attacks"
\&\fB\f(CB$CGI::POST_MAX\fB\fR, \fB\f(CB$CGI::DISABLE_UPLOADS\fB\fR, \fB1. On a script-by-script
basis\fR, \fB2. Globally for all scripts\fR
.IP "\s-1COMPATIBILITY WITH CGI\-LIB.PL\s0" 4
.IX Item "COMPATIBILITY WITH CGI-LIB.PL"
.RS 4
.PD 0
.IP "Cgi-lib functions that are available in \s-1CGI\s0.pm" 4
.IX Item "Cgi-lib functions that are available in CGI.pm"
.IP "Cgi-lib functions that are not available in \s-1CGI\s0.pm" 4
.IX Item "Cgi-lib functions that are not available in CGI.pm"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1CREDITS\s0" 4
.IX Item "CREDITS"
.PD
Matt Heffron (heffron@falstaff.css.beckman.com), James Taylor
(james.taylor@srs.gov), Scott Anguish <sanguish@digifix.com>, Mike Jewell
(mlj3u@virginia.edu), Timothy Shimmin (tes@kbs.citri.edu.au), Joergen Haegg
(jh@axis.se), Laurent Delfosse (delfosse@delfosse.com), Richard Resnick
(applepi1@aol.com), Craig Bishop (csb@barwonwater.vic.gov.au), Tony Curtis
(tc@vcpc.univie.ac.at), Tim Bunce (Tim.Bunce@ig.co.uk), Tom Christiansen
(tchrist@convex.com), Andreas Koenig (k@franz.ww.TU\-Berlin.DE), Tim
MacKenzie (Tim.MacKenzie@fulcrum.com.au), Kevin B. Hendricks
(kbhend@dogwood.tyler.wm.edu), Stephen Dahmen (joyfire@inxpress.net), Ed
Jordan (ed@fidalgo.net), David Alan Pisoni (david@cnation.com), Doug
MacEachern (dougm@opengroup.org), Robin Houston (robin@oneworld.org),
\&...and many many more..
.IP "A \s-1COMPLETE EXAMPLE OF A SIMPLE\s0 FORM-BASED \s-1SCRIPT\s0" 4
.IX Item "A COMPLETE EXAMPLE OF A SIMPLE FORM-BASED SCRIPT"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Apache \- Backward compatibility module for \s-1CGI\s0.pm"
.IX Subsection "CGI::Apache - Backward compatibility module for CGI.pm"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Carp, \fBCGI::Carp\fP \- \s-1CGI\s0 routines for writing to the \s-1HTTPD \s0(or other) error log"
.IX Subsection "CGI::Carp, CGI::Carp - CGI routines for writing to the HTTPD (or other) error log"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1REDIRECTING ERROR MESSAGES\s0" 4
.IX Item "REDIRECTING ERROR MESSAGES"
.IP "\s-1MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW\s0" 4
.IX Item "MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW"
.RS 4
.IP "Changing the default message" 4
.IX Item "Changing the default message"
.RE
.RS 4
.RE
.IP "\s-1DOING MORE THAN PRINTING A MESSAGE IN THE EVENT OF PERL ERRORS\s0" 4
.IX Item "DOING MORE THAN PRINTING A MESSAGE IN THE EVENT OF PERL ERRORS"
.RS 4
.IP "\s-1SUPPRESSING PERL ERRORS APPEARING IN THE BROWSER WINDOW\s0" 4
.IX Item "SUPPRESSING PERL ERRORS APPEARING IN THE BROWSER WINDOW"
.RE
.RS 4
.RE
.IP "\s-1MAKING WARNINGS APPEAR AS HTML COMMENTS\s0" 4
.IX Item "MAKING WARNINGS APPEAR AS HTML COMMENTS"
.IP "\s-1OVERRIDING THE NAME OF THE PROGRAM\s0" 4
.IX Item "OVERRIDING THE NAME OF THE PROGRAM"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Cookie \- Interface to \s-1HTTP\s0 Cookies"
.IX Subsection "CGI::Cookie - Interface to HTTP Cookies"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USING\s0 CGI::Cookie" 4
.IX Item "USING CGI::Cookie"
.PD
\&\fB1. expiration date\fR, \fB2. domain\fR, \fB3. path\fR, \fB4. secure flag\fR, \fB5.
httponly flag\fR
.RS 4
.IP "Creating New Cookies" 4
.IX Item "Creating New Cookies"
.PD 0
.IP "Sending the Cookie to the Browser" 4
.IX Item "Sending the Cookie to the Browser"
.IP "Recovering Previous Cookies" 4
.IX Item "Recovering Previous Cookies"
.IP "Manipulating Cookies" 4
.IX Item "Manipulating Cookies"
.PD
\&\fB\f(BIname()\fB\fR, \fB\f(BIvalue()\fB\fR, \fB\f(BIdomain()\fB\fR, \fB\f(BIpath()\fB\fR, \fB\f(BIexpires()\fB\fR
.RE
.RS 4
.RE
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Fast \- \s-1CGI\s0 Interface for Fast \s-1CGI\s0"
.IX Subsection "CGI::Fast - CGI Interface for Fast CGI"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OTHER PIECES OF THE PUZZLE\s0" 4
.IX Item "OTHER PIECES OF THE PUZZLE"
.IP "\s-1WRITING FASTCGI PERL SCRIPTS\s0" 4
.IX Item "WRITING FASTCGI PERL SCRIPTS"
.IP "\s-1INSTALLING FASTCGI SCRIPTS\s0" 4
.IX Item "INSTALLING FASTCGI SCRIPTS"
.IP "\s-1USING FASTCGI SCRIPTS AS CGI SCRIPTS\s0" 4
.IX Item "USING FASTCGI SCRIPTS AS CGI SCRIPTS"
.IP "\s-1EXTERNAL FASTCGI SERVER INVOCATION\s0" 4
.IX Item "EXTERNAL FASTCGI SERVER INVOCATION"
.PD
\&\s-1FCGI_SOCKET_PATH, FCGI_LISTEN_QUEUE\s0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Pretty \- module to produce nicely formatted \s-1HTML\s0 code"
.IX Subsection "CGI::Pretty - module to produce nicely formatted HTML code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Recommendation for when to use CGI::Pretty" 4
.IX Item "Recommendation for when to use CGI::Pretty"
.IP "Tags that won't be formatted" 4
.IX Item "Tags that won't be formatted"
.IP "Customizing the Indenting" 4
.IX Item "Customizing the Indenting"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Push \- Simple Interface to Server Push"
.IX Subsection "CGI::Push - Simple Interface to Server Push"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USING\s0 CGI::Push" 4
.IX Item "USING CGI::Push"
.PD
\&\-next_page, \-last_page, \-type, \-delay, \-cookie, \-target, \-expires, \-nph
.RS 4
.IP "Heterogeneous Pages" 4
.IX Item "Heterogeneous Pages"
.PD 0
.IP "Changing the Page Delay on the Fly" 4
.IX Item "Changing the Page Delay on the Fly"
.RE
.RS 4
.RE
.IP "\s-1INSTALLING\s0 CGI::Push \s-1SCRIPTS\s0" 4
.IX Item "INSTALLING CGI::Push SCRIPTS"
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Switch \- Backward compatibility module for defunct CGI::Switch"
.IX Subsection "CGI::Switch - Backward compatibility module for defunct CGI::Switch"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CGI::Util \- Internal utilities used by \s-1CGI\s0 module"
.IX Subsection "CGI::Util - Internal utilities used by CGI module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR INFORMATION\s0" 4
.IX Item "AUTHOR INFORMATION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "\s-1CORE \-\s0 Namespace for Perl's core routines"
.IX Subsection "CORE - Namespace for Perl's core routines"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDING CORE FUNCTIONS\s0" 4
.IX Item "OVERRIDING CORE FUNCTIONS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "\s-1CPAN \-\s0 query, download and build perl modules from \s-1CPAN\s0 sites"
.IX Subsection "CPAN - query, download and build perl modules from CPAN sites"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.ie n .IP "CPAN::shell([$prompt, $command]) Starting Interactive Mode" 4
.el .IP "CPAN::shell([$prompt, \f(CW$command\fR]) Starting Interactive Mode" 4
.IX Item "CPAN::shell([$prompt, $command]) Starting Interactive Mode"
.PD
Searching for authors, bundles, distribution files and modules, \f(CW\*(C`get\*(C'\fR,
\&\f(CW\*(C`make\*(C'\fR, \f(CW\*(C`test\*(C'\fR, \f(CW\*(C`install\*(C'\fR, \f(CW\*(C`clean\*(C'\fR modules or distributions, \f(CW\*(C`readme\*(C'\fR,
\&\f(CW\*(C`perldoc\*(C'\fR, \f(CW\*(C`look\*(C'\fR module or distribution, \f(CW\*(C`ls\*(C'\fR author, \f(CW\*(C`ls\*(C'\fR
globbing_expression, \f(CW\*(C`failed\*(C'\fR, Persistence between sessions, The \f(CW\*(C`force\*(C'\fR
and the \f(CW\*(C`fforce\*(C'\fR pragma, Lockfile, Signals
.IP "CPAN::Shell" 4
.IX Item "CPAN::Shell"
.PD 0
.IP "autobundle" 4
.IX Item "autobundle"
.IP "hosts" 4
.IX Item "hosts"
.PD
install_tested, is_tested
.IP "mkmyconfig" 4
.IX Item "mkmyconfig"
.PD 0
.IP "r [Module|/Regexp/]..." 4
.IX Item "r [Module|/Regexp/]..."
.IP "recent ***EXPERIMENTAL COMMAND***" 4
.IX Item "recent ***EXPERIMENTAL COMMAND***"
.IP "recompile" 4
.IX Item "recompile"
.IP "report Bundle|Distribution|Module" 4
.IX Item "report Bundle|Distribution|Module"
.IP "smoke ***EXPERIMENTAL COMMAND***" 4
.IX Item "smoke ***EXPERIMENTAL COMMAND***"
.IP "upgrade [Module|/Regexp/]..." 4
.IX Item "upgrade [Module|/Regexp/]..."
.ie n .IP "The four ""CPAN::*"" Classes: Author, Bundle, Module, Distribution" 4
.el .IP "The four \f(CWCPAN::*\fR Classes: Author, Bundle, Module, Distribution" 4
.IX Item "The four CPAN::* Classes: Author, Bundle, Module, Distribution"
.IP "Integrating local directories" 4
.IX Item "Integrating local directories"
.IP "Redirection" 4
.IX Item "Redirection"
.RE
.RS 4
.RE
.IP "\s-1CONFIGURATION\s0" 4
.IX Item "CONFIGURATION"
.PD
completion support, displaying some help: o conf help, displaying current
values: o conf [\s-1KEY\s0], changing of scalar values: o conf \s-1KEY VALUE,\s0 changing
of list values: o conf \s-1KEY\s0 SHIFT|UNSHIFT|PUSH|POP|SPLICE|LIST, reverting to
saved: o conf defaults, saving the config: o conf commit
.RS 4
.IP "Config Variables" 4
.IX Item "Config Variables"
\&\f(CW\*(C`o conf <scalar option>\*(C'\fR, \f(CW\*(C`o conf <scalar option>
<value>\*(C'\fR, \f(CW\*(C`o conf <list option>\*(C'\fR, \f(CW\*(C`o conf <list
option> [shift|pop]\*(C'\fR, \f(CW\*(C`o conf <list option>
[unshift|push|splice] <list>\*(C'\fR, interactive editing: o conf init
[MATCH|LIST]
.IP "CPAN::anycwd($path): Note on config variable getcwd" 4
.IX Item "CPAN::anycwd($path): Note on config variable getcwd"
cwd, getcwd, fastcwd, backtickcwd
.IP "Note on the format of the urllist parameter" 4
.IX Item "Note on the format of the urllist parameter"
.PD 0
.IP "The urllist parameter has CD-ROM support" 4
.IX Item "The urllist parameter has CD-ROM support"
.IP "Maintaining the urllist parameter" 4
.IX Item "Maintaining the urllist parameter"
.ie n .IP "The ""requires"" and ""build_requires"" dependency declarations" 4
.el .IP "The \f(CWrequires\fR and \f(CWbuild_requires\fR dependency declarations" 4
.IX Item "The requires and build_requires dependency declarations"
.IP "Configuration for individual distributions (\fIDistroprefs\fR)" 4
.IX Item "Configuration for individual distributions (Distroprefs)"
.IP "Filenames" 4
.IX Item "Filenames"
.IP "Fallback Data::Dumper and Storable" 4
.IX Item "Fallback Data::Dumper and Storable"
.IP "Blueprint" 4
.IX Item "Blueprint"
.IP "Language Specs" 4
.IX Item "Language Specs"
.PD
comment [scalar], cpanconfig [hash], depends [hash] *** \s-1EXPERIMENTAL
FEATURE\s0 ***, disabled [boolean], features [array] *** \s-1EXPERIMENTAL FEATURE\s0
***, goto [string], install [hash], make [hash], match [hash], patches
[array], pl [hash], test [hash]
.IP "Processing Instructions" 4
.IX Item "Processing Instructions"
args [array], commandline, eexpect [hash], env [hash], expect [array]
.ie n .IP "Schema verification with ""Kwalify""" 4
.el .IP "Schema verification with \f(CWKwalify\fR" 4
.IX Item "Schema verification with Kwalify"
.PD 0
.IP "Example Distroprefs Files" 4
.IX Item "Example Distroprefs Files"
.RE
.RS 4
.RE
.IP "\s-1PROGRAMMER\s0'S \s-1INTERFACE\s0" 4
.IX Item "PROGRAMMER'S INTERFACE"
.PD
expand($type,@things), expandany(@things), Programming Examples
.RS 4
.IP "Methods in the other Classes" 4
.IX Item "Methods in the other Classes"
\&\fICPAN::Author::as_glimpse()\fR, \fICPAN::Author::as_string()\fR,
\&\fICPAN::Author::email()\fR, \fICPAN::Author::fullname()\fR, \fICPAN::Author::name()\fR,
\&\fICPAN::Bundle::as_glimpse()\fR, \fICPAN::Bundle::as_string()\fR,
\&\fICPAN::Bundle::clean()\fR, \fICPAN::Bundle::contains()\fR,
CPAN::Bundle::force($method,@args), \fICPAN::Bundle::get()\fR,
\&\fICPAN::Bundle::inst_file()\fR, \fICPAN::Bundle::inst_version()\fR,
\&\fICPAN::Bundle::uptodate()\fR, \fICPAN::Bundle::install()\fR, \fICPAN::Bundle::make()\fR,
\&\fICPAN::Bundle::readme()\fR, \fICPAN::Bundle::test()\fR,
\&\fICPAN::Distribution::as_glimpse()\fR, \fICPAN::Distribution::as_string()\fR,
CPAN::Distribution::author, \fICPAN::Distribution::pretty_id()\fR,
\&\fICPAN::Distribution::base_id()\fR, \fICPAN::Distribution::clean()\fR,
\&\fICPAN::Distribution::containsmods()\fR, \fICPAN::Distribution::cvs_import()\fR,
\&\fICPAN::Distribution::dir()\fR, CPAN::Distribution::force($method,@args),
\&\fICPAN::Distribution::get()\fR, \fICPAN::Distribution::install()\fR,
\&\fICPAN::Distribution::isa_perl()\fR, \fICPAN::Distribution::look()\fR,
\&\fICPAN::Distribution::make()\fR, \fICPAN::Distribution::perldoc()\fR,
\&\fICPAN::Distribution::prefs()\fR, \fICPAN::Distribution::prereq_pm()\fR,
\&\fICPAN::Distribution::readme()\fR, \fICPAN::Distribution::reports()\fR,
\&\fICPAN::Distribution::read_yaml()\fR, \fICPAN::Distribution::test()\fR,
\&\fICPAN::Distribution::uptodate()\fR, \fICPAN::Index::force_reload()\fR,
\&\fICPAN::Index::reload()\fR, \fICPAN::InfoObj::dump()\fR, \fICPAN::Module::as_glimpse()\fR,
\&\fICPAN::Module::as_string()\fR, \fICPAN::Module::clean()\fR,
\&\fICPAN::Module::cpan_file()\fR, \fICPAN::Module::cpan_version()\fR,
\&\fICPAN::Module::cvs_import()\fR, \fICPAN::Module::description()\fR,
\&\fICPAN::Module::distribution()\fR, \fICPAN::Module::dslip_status()\fR,
CPAN::Module::force($method,@args), \fICPAN::Module::get()\fR,
\&\fICPAN::Module::inst_file()\fR, \fICPAN::Module::available_file()\fR,
\&\fICPAN::Module::inst_version()\fR, \fICPAN::Module::available_version()\fR,
\&\fICPAN::Module::install()\fR, \fICPAN::Module::look()\fR, \fICPAN::Module::make()\fR,
\&\fICPAN::Module::manpage_headline()\fR, \fICPAN::Module::perldoc()\fR,
\&\fICPAN::Module::readme()\fR, \fICPAN::Module::reports()\fR, \fICPAN::Module::test()\fR,
\&\fICPAN::Module::uptodate()\fR, \fICPAN::Module::userid()\fR
.IP "Cache Manager" 4
.IX Item "Cache Manager"
.PD 0
.IP "Bundles" 4
.IX Item "Bundles"
.RE
.RS 4
.RE
.IP "\s-1PREREQUISITES\s0" 4
.IX Item "PREREQUISITES"
.IP "\s-1UTILITIES\s0" 4
.IX Item "UTILITIES"
.RS 4
.IP "Finding packages and \s-1VERSION\s0" 4
.IX Item "Finding packages and VERSION"
.IP "Debugging" 4
.IX Item "Debugging"
.PD
o debug package.., o debug \-package.., o debug all, o debug number
.IP "Floppy, Zip, Offline Mode" 4
.IX Item "Floppy, Zip, Offline Mode"
.PD 0
.IP "Basic Utilities for Programmers" 4
.IX Item "Basic Utilities for Programmers"
.PD
has_inst($module), has_usable($module), instance($module)
.RE
.RS 4
.RE
.IP "\s-1SECURITY\s0" 4
.IX Item "SECURITY"
.RS 4
.PD 0
.IP "Cryptographically signed modules" 4
.IX Item "Cryptographically signed modules"
.RE
.RS 4
.RE
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.IP "\s-1POPULATE AN INSTALLATION WITH LOTS OF MODULES\s0" 4
.IX Item "POPULATE AN INSTALLATION WITH LOTS OF MODULES"
.IP "\s-1WORKING WITH CPAN\s0.pm \s-1BEHIND FIREWALLS\s0" 4
.IX Item "WORKING WITH CPAN.pm BEHIND FIREWALLS"
.RS 4
.IP "Three basic types of firewalls" 4
.IX Item "Three basic types of firewalls"
.PD
http firewall, ftp firewall, One-way visibility, \s-1SOCKS, IP\s0 Masquerade
.IP "Configuring lynx or ncftp for going through a firewall" 4
.IX Item "Configuring lynx or ncftp for going through a firewall"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
.PD
1), 2), 3), 4), 5), 6), 7), 8), 9), 10), 11), 12), 13), 14), 15), 16), 17),
18)
.IP "\s-1COMPATIBILITY\s0" 4
.IX Item "COMPATIBILITY"
.RS 4
.PD 0
.IP "\s-1OLD PERL VERSIONS\s0" 4
.IX Item "OLD PERL VERSIONS"
.IP "\s-1CPANPLUS\s0" 4
.IX Item "CPANPLUS"
.IP "\s-1CPANMINUS\s0" 4
.IX Item "CPANMINUS"
.RE
.RS 4
.RE
.IP "\s-1SECURITY ADVICE\s0" 4
.IX Item "SECURITY ADVICE"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1TRANSLATIONS\s0" 4
.IX Item "TRANSLATIONS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "\s-1CPAN::API::HOWTO \-\s0 a recipe book for programming with \s-1CPAN\s0.pm"
.IX Subsection "CPAN::API::HOWTO - a recipe book for programming with CPAN.pm"
.IP "\s-1RECIPES\s0" 4
.IX Item "RECIPES"
.RS 4
.PD 0
.IP "What distribution contains a particular module?" 4
.IX Item "What distribution contains a particular module?"
.IP "What modules does a particular distribution contain?" 4
.IX Item "What modules does a particular distribution contain?"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "CPAN::Debug \- internal debugging for \s-1CPAN\s0.pm"
.IX Subsection "CPAN::Debug - internal debugging for CPAN.pm"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.SS "CPAN::Distroprefs \*(-- read and match distroprefs"
.IX Subsection "CPAN::Distroprefs read and match distroprefs"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1INTERFACE\s0" 4
.IX Item "INTERFACE"
.PD
a CPAN::Distroprefs::Result object, \f(CW\*(C`undef\*(C'\fR, indicating that no prefs
files remain to be found
.IP "\s-1RESULTS\s0" 4
.IX Item "RESULTS"
.RS 4
.PD 0
.IP "Common" 4
.IX Item "Common"
.IP "Errors" 4
.IX Item "Errors"
.IP "Successes" 4
.IX Item "Successes"
.RE
.RS 4
.RE
.IP "\s-1PREFS\s0" 4
.IX Item "PREFS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPAN::FirstTime \- Utility for CPAN::Config file Initialization"
.IX Subsection "CPAN::FirstTime - Utility for CPAN::Config file Initialization"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
auto_commit, build_cache, build_dir, build_dir_reuse,
build_requires_install_policy, cache_metadata, check_sigs, colorize_output,
colorize_print, colorize_warn, colorize_debug, commandnumber_in_prompt,
connect_to_internet_ok, ftp_passive, ftpstats_period, ftpstats_size,
getcwd, halt_on_failure, histfile, histsize, inactivity_timeout,
index_expire, inhibit_startup_message, keep_source_where,
load_module_verbosity, makepl_arg, make_arg, make_install_arg,
make_install_make_command, mbuildpl_arg, mbuild_arg, mbuild_install_arg,
mbuild_install_build_command, pager, prefer_installer, prefs_dir,
prerequisites_policy, randomize_urllist, scan_cache, shell,
show_unparsable_versions, show_upload_date, show_zero_versions,
tar_verbosity, term_is_latin, term_ornaments, test_report,
perl5lib_verbosity, prefer_external_tar, trust_test_report_history,
use_sqlite, version_timeout, yaml_load_code, yaml_module
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.SS "CPAN::HandleConfig \- internal configuration handling for \s-1CPAN\s0.pm"
.IX Subsection "CPAN::HandleConfig - internal configuration handling for CPAN.pm"
.PD 0
.ie n .IP """CLASS\->safe_quote ITEM""" 4
.el .IP "\f(CWCLASS\->safe_quote ITEM\fR" 4
.IX Item "CLASS->safe_quote ITEM"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPAN::Kwalify \- Interface between \s-1CPAN\s0.pm and Kwalify.pm"
.IX Subsection "CPAN::Kwalify - Interface between CPAN.pm and Kwalify.pm"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
_validate($schema_name, \f(CW$data\fR, \f(CW$file\fR, \f(CW$doc\fR), yaml($schema_name)
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPAN::Meta \- the distribution metadata for a \s-1CPAN\s0 dist"
.IX Subsection "CPAN::Meta - the distribution metadata for a CPAN dist"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "create" 4
.IX Item "create"
.IP "load_file" 4
.IX Item "load_file"
.IP "load_yaml_string" 4
.IX Item "load_yaml_string"
.IP "load_json_string" 4
.IX Item "load_json_string"
.IP "save" 4
.IX Item "save"
.IP "meta_spec_version" 4
.IX Item "meta_spec_version"
.IP "effective_prereqs" 4
.IX Item "effective_prereqs"
.IP "should_index_file" 4
.IX Item "should_index_file"
.IP "should_index_package" 4
.IX Item "should_index_package"
.IP "features" 4
.IX Item "features"
.IP "feature" 4
.IX Item "feature"
.IP "as_struct" 4
.IX Item "as_struct"
.IP "as_string" 4
.IX Item "as_string"
.RE
.RS 4
.RE
.IP "\s-1STRING DATA\s0" 4
.IX Item "STRING DATA"
.IP "\s-1LIST DATA\s0" 4
.IX Item "LIST DATA"
.IP "\s-1MAP DATA\s0" 4
.IX Item "MAP DATA"
.IP "\s-1CUSTOM DATA\s0" 4
.IX Item "CUSTOM DATA"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.RS 4
.IP "Bugs / Feature Requests" 4
.IX Item "Bugs / Feature Requests"
.IP "Source Code" 4
.IX Item "Source Code"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Converter \- Convert \s-1CPAN\s0 distribution metadata structures"
.IX Subsection "CPAN::Meta::Converter - Convert CPAN distribution metadata structures"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "convert" 4
.IX Item "convert"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Feature \- an optional feature provided by a \s-1CPAN\s0 distribution"
.IX Subsection "CPAN::Meta::Feature - an optional feature provided by a CPAN distribution"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "identifier" 4
.IX Item "identifier"
.IP "description" 4
.IX Item "description"
.IP "prereqs" 4
.IX Item "prereqs"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::History \- history of \s-1CPAN\s0 Meta Spec changes"
.IX Subsection "CPAN::Meta::History - history of CPAN Meta Spec changes"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.RS 4
.IP "Version 2" 4
.IX Item "Version 2"
.IP "Version 1.4" 4
.IX Item "Version 1.4"
.IP "Version 1.3" 4
.IX Item "Version 1.3"
.IP "Version 1.2" 4
.IX Item "Version 1.2"
.IP "Version 1.1" 4
.IX Item "Version 1.1"
.IP "Version 1.0" 4
.IX Item "Version 1.0"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Prereqs \- a set of distribution prerequisites by phase and type"
.IX Subsection "CPAN::Meta::Prereqs - a set of distribution prerequisites by phase and type"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "requirements_for" 4
.IX Item "requirements_for"
.IP "with_merged_prereqs" 4
.IX Item "with_merged_prereqs"
.IP "as_string_hash" 4
.IX Item "as_string_hash"
.IP "is_finalized" 4
.IX Item "is_finalized"
.IP "finalize" 4
.IX Item "finalize"
.IP "clone" 4
.IX Item "clone"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Requirements \- a set of version requirements for a \s-1CPAN\s0 dist"
.IX Subsection "CPAN::Meta::Requirements - a set of version requirements for a CPAN dist"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "add_minimum" 4
.IX Item "add_minimum"
.IP "add_maximum" 4
.IX Item "add_maximum"
.IP "add_exclusion" 4
.IX Item "add_exclusion"
.IP "exact_version" 4
.IX Item "exact_version"
.IP "add_requirements" 4
.IX Item "add_requirements"
.IP "accepts_module" 4
.IX Item "accepts_module"
.IP "clear_requirement" 4
.IX Item "clear_requirement"
.IP "requirements_for_module" 4
.IX Item "requirements_for_module"
.IP "required_modules" 4
.IX Item "required_modules"
.IP "clone" 4
.IX Item "clone"
.IP "is_simple" 4
.IX Item "is_simple"
.IP "is_finalized" 4
.IX Item "is_finalized"
.IP "finalize" 4
.IX Item "finalize"
.IP "as_string_hash" 4
.IX Item "as_string_hash"
.IP "add_string_requirement" 4
.IX Item "add_string_requirement"
.PD
>= 1.3, <= 1.3, != 1.3, > 1.3, < 1.3, >= 1.3, != 1.5, <= 2.0
.IP "from_string_hash" 4
.IX Item "from_string_hash"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.RS 4
.IP "Bugs / Feature Requests" 4
.IX Item "Bugs / Feature Requests"
.IP "Source Code" 4
.IX Item "Source Code"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Spec \- specification for \s-1CPAN\s0 distribution metadata"
.IX Subsection "CPAN::Meta::Spec - specification for CPAN distribution metadata"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1TERMINOLOGY\s0" 4
.IX Item "TERMINOLOGY"
.PD
distribution, module, package, consumer, producer, must, should, may, etc
.IP "\s-1DATA TYPES\s0" 4
.IX Item "DATA TYPES"
.RS 4
.PD 0
.IP "Boolean" 4
.IX Item "Boolean"
.IP "String" 4
.IX Item "String"
.IP "List" 4
.IX Item "List"
.IP "Map" 4
.IX Item "Map"
.IP "License String" 4
.IX Item "License String"
.IP "\s-1URL\s0" 4
.IX Item "URL"
.IP "Version" 4
.IX Item "Version"
.IP "Version Range" 4
.IX Item "Version Range"
.RE
.RS 4
.RE
.IP "\s-1STRUCTURE\s0" 4
.IX Item "STRUCTURE"
.RS 4
.IP "\s-1REQUIRED FIELDS\s0" 4
.IX Item "REQUIRED FIELDS"
.PD
version, url, stable, testing, unstable
.IP "\s-1OPTIONAL FIELDS\s0" 4
.IX Item "OPTIONAL FIELDS"
file, directory, package, namespace, description, prereqs, file, version,
homepage, license, bugtracker, repository
.IP "\s-1DEPRECATED FIELDS\s0" 4
.IX Item "DEPRECATED FIELDS"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1VERSION NUMBERS\s0" 4
.IX Item "VERSION NUMBERS"
.RS 4
.IP "Version Formats" 4
.IX Item "Version Formats"
.PD
Decimal versions, Dotted-integer versions
.IP "Version Ranges" 4
.IX Item "Version Ranges"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1PREREQUISITES\s0" 4
.IX Item "PREREQUISITES"
.RS 4
.IP "Prereq Spec" 4
.IX Item "Prereq Spec"
.PD
configure, build, test, runtime, develop, requires, recommends, suggests,
conflicts
.IP "Merging and Resolving Prerequisites" 4
.IX Item "Merging and Resolving Prerequisites"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1SERIALIZATION\s0" 4
.IX Item "SERIALIZATION"
.IP "\s-1NOTES FOR IMPLEMENTORS\s0" 4
.IX Item "NOTES FOR IMPLEMENTORS"
.RS 4
.IP "Extracting Version Numbers from Perl Modules" 4
.IX Item "Extracting Version Numbers from Perl Modules"
.IP "Comparing Version Numbers" 4
.IX Item "Comparing Version Numbers"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1CONTRIBUTORS\s0" 4
.IX Item "CONTRIBUTORS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::Validator \- validate \s-1CPAN\s0 distribution metadata structures"
.IX Subsection "CPAN::Meta::Validator - validate CPAN distribution metadata structures"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "is_valid" 4
.IX Item "is_valid"
.IP "errors" 4
.IX Item "errors"
.IP "Check Methods" 4
.IX Item "Check Methods"
.IP "Validator Methods" 4
.IX Item "Validator Methods"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "CPAN::Meta::YAML \- Read and write a subset of \s-1YAML\s0 for \s-1CPAN\s0 Meta files"
.IX Subsection "CPAN::Meta::YAML - Read and write a subset of YAML for CPAN Meta files"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.RS 4
.IP "Bugs / Feature Requests" 4
.IX Item "Bugs / Feature Requests"
.IP "Source Code" 4
.IX Item "Source Code"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
new( \s-1LOCAL_FILE_NAME \s0)
.PP
\&\fIcontinents()\fR
.PP
countries( [\s-1CONTINENTS\s0] )
.PP
mirrors( [\s-1COUNTRIES\s0] )
.PP
get_mirrors_by_countries( [\s-1COUNTRIES\s0] )
.PP
get_mirrors_by_continents( [\s-1CONTINENTS\s0] )
.PP
get_countries_by_continents( [\s-1CONTINENTS\s0] )
.PP
best_mirrors
.PP
get_n_random_mirrors_by_continents( N, [\s-1CONTINENTS\s0]
.PP
get_mirrors_timings( \s-1MIRROR_LIST, SEEN, CALLBACK \s0);
.PP
find_best_continents( \s-1HASH_REF \s0);
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPAN::Nox \- Wrapper around \s-1CPAN\s0.pm without using any \s-1XS\s0 module"
.IX Subsection "CPAN::Nox - Wrapper around CPAN.pm without using any XS module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPAN::Queue \- internal queue support for \s-1CPAN\s0.pm"
.IX Subsection "CPAN::Queue - internal queue support for CPAN.pm"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.SS "CPAN::Tarzip \- internal handling of tar archives for \s-1CPAN\s0.pm"
.IX Subsection "CPAN::Tarzip - internal handling of tar archives for CPAN.pm"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPAN::Version \- utility functions to compare \s-1CPAN\s0 versions"
.IX Subsection "CPAN::Version - utility functions to compare CPAN versions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "\s-1CPANPLUS \- API & CLI\s0 access to the \s-1CPAN\s0 mirrors"
.IX Subsection "CPANPLUS - API & CLI access to the CPAN mirrors"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1GUIDE TO DOCUMENTATION\s0" 4
.IX Item "GUIDE TO DOCUMENTATION"
.RS 4
.IP "\s-1GENERAL USAGE\s0" 4
.IX Item "GENERAL USAGE"
.IP "\s-1API REFERENCE\s0" 4
.IX Item "API REFERENCE"
.RE
.RS 4
.RE
.IP "\s-1COMMANDLINE TOOLS\s0" 4
.IX Item "COMMANDLINE TOOLS"
.RS 4
.IP "\s-1STARTING AN INTERACTIVE SHELL\s0" 4
.IX Item "STARTING AN INTERACTIVE SHELL"
.IP "\s-1CHOOSE A SHELL\s0" 4
.IX Item "CHOOSE A SHELL"
.IP "\s-1BUILDING PACKAGES\s0" 4
.IX Item "BUILDING PACKAGES"
.RE
.RS 4
.RE
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "$bool = install( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.el .IP "\f(CW$bool\fR = install( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.IX Item "$bool = install( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
.ie n .IP "$where = fetch( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.el .IP "\f(CW$where\fR = fetch( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.IX Item "$where = fetch( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
.ie n .IP "$where = get( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.el .IP "\f(CW$where\fR = get( Module::Name | /A/AU/AUTHOR/Module\-Name\-1.tgz )" 4
.IX Item "$where = get( Module::Name | /A/AU/AUTHOR/Module-Name-1.tgz )"
.IP "\fIshell()\fR" 4
.IX Item "shell()"
.RE
.RS 4
.RE
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1CONTACT INFORMATION\s0" 4
.IX Item "CONTACT INFORMATION"
.PD
Bug reporting: \fIbug\-cpanplus@rt.cpan.org\fR, Questions & suggestions:
\&\fIbug\-cpanplus@rt.cpan.org\fR
.SS "CPANPLUS::Backend \- programmer's interface to \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Backend - programmer's interface to CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$cb = CPANPLUS::Backend\->new( [\s-1CONFIGURE_OBJ\s0] )" 4
.el .IP "\f(CW$cb\fR = CPANPLUS::Backend\->new( [\s-1CONFIGURE_OBJ\s0] )" 4
.IX Item "$cb = CPANPLUS::Backend->new( [CONFIGURE_OBJ] )"
.PD
Provide a valid \f(CW\*(C`CPANPLUS::Configure\*(C'\fR object, No arguments
.RE
.RS 4
.RE
.ie n .IP "$href = $cb\->module_tree( [@modules_names_list] )" 4
.el .IP "\f(CW$href\fR = \f(CW$cb\fR\->module_tree( [@modules_names_list] )" 4
.IX Item "$href = $cb->module_tree( [@modules_names_list] )"
.PD 0
.ie n .IP "$href = $cb\->author_tree( [@author_names_list] )" 4
.el .IP "\f(CW$href\fR = \f(CW$cb\fR\->author_tree( [@author_names_list] )" 4
.IX Item "$href = $cb->author_tree( [@author_names_list] )"
.ie n .IP "$conf = $cb\->configure_object;" 4
.el .IP "\f(CW$conf\fR = \f(CW$cb\fR\->configure_object;" 4
.IX Item "$conf = $cb->configure_object;"
.ie n .IP "$su = $cb\->selfupdate_object;" 4
.el .IP "\f(CW$su\fR = \f(CW$cb\fR\->selfupdate_object;" 4
.IX Item "$su = $cb->selfupdate_object;"
.ie n .IP "@mods = $cb\->search( type => \s-1TYPE,\s0 allow => \s-1AREF,\s0 [data => \s-1AREF,\s0 verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW@mods\fR = \f(CW$cb\fR\->search( type => \s-1TYPE,\s0 allow => \s-1AREF,\s0 [data => \s-1AREF,\s0 verbose => \s-1BOOL\s0] )" 4
.IX Item "@mods = $cb->search( type => TYPE, allow => AREF, [data => AREF, verbose => BOOL] )"
.ie n .IP "$backend_rv = $cb\->fetch( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->fetch( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->fetch( modules => @mods )"
.ie n .IP "$backend_rv = $cb\->extract( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->extract( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->extract( modules => @mods )"
.ie n .IP "$backend_rv = $cb\->install( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->install( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->install( modules => @mods )"
.ie n .IP "$backend_rv = $cb\->readme( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->readme( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->readme( modules => @mods )"
.ie n .IP "$backend_rv = $cb\->files( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->files( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->files( modules => @mods )"
.ie n .IP "$backend_rv = $cb\->distributions( modules => \e@mods )" 4
.el .IP "\f(CW$backend_rv\fR = \f(CW$cb\fR\->distributions( modules => \e@mods )" 4
.IX Item "$backend_rv = $cb->distributions( modules => @mods )"
.ie n .IP "$mod_obj = $cb\->parse_module( module => $modname|$distname|$modobj|URI|PATH )" 4
.el .IP "\f(CW$mod_obj\fR = \f(CW$cb\fR\->parse_module( module => \f(CW$modname\fR|$distname|$modobj|URI|PATH )" 4
.IX Item "$mod_obj = $cb->parse_module( module => $modname|$distname|$modobj|URI|PATH )"
.PD
Text::Bastardize, Text-Bastardize, Text/Bastardize.pm,
Text\-Bastardize\-1.06, AYRNIEU/Text\-Bastardize,
AYRNIEU/Text\-Bastardize\-1.06, AYRNIEU/Text\-Bastardize\-1.06.tar.gz,
http://example.com/Text\-Bastardize\-1.06.tar.gz,
file:///tmp/Text\-Bastardize\-1.06.tar.gz, /tmp/Text\-Bastardize\-1.06,
\&./Text\-Bastardize\-1.06
.ie n .IP "$bool = $cb\->reload_indices( [update_source => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->reload_indices( [update_source => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] );" 4
.IX Item "$bool = $cb->reload_indices( [update_source => BOOL, verbose => BOOL] );"
.PD 0
.ie n .IP "$bool = $cb\->flush(\s-1CACHE_NAME\s0)" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->flush(\s-1CACHE_NAME\s0)" 4
.IX Item "$bool = $cb->flush(CACHE_NAME)"
.PD
\&\f(CW\*(C`methods\*(C'\fR, \f(CW\*(C`hosts\*(C'\fR, \f(CW\*(C`modules\*(C'\fR, \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`load\*(C'\fR, \f(CW\*(C`all\*(C'\fR
.ie n .IP "@mods = $cb\->\fIinstalled()\fR" 4
.el .IP "\f(CW@mods\fR = \f(CW$cb\fR\->\fIinstalled()\fR" 4
.IX Item "@mods = $cb->installed()"
.PD 0
.ie n .IP "$bool = $cb\->local_mirror([path => '/dir/to/save/to', index_files => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->local_mirror([path => '/dir/to/save/to', index_files => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.IX Item "$bool = $cb->local_mirror([path => '/dir/to/save/to', index_files => BOOL, force => BOOL, verbose => BOOL] )"
.PD
path, index_files, force, verbose
.ie n .IP "$file = $cb\->autobundle([path => \s-1OUTPUT_PATH,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$file\fR = \f(CW$cb\fR\->autobundle([path => \s-1OUTPUT_PATH,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$file = $cb->autobundle([path => OUTPUT_PATH, force => BOOL, verbose => BOOL])"
.PD 0
.ie n .IP "$bool = $cb\->save_state" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->save_state" 4
.IX Item "$bool = $cb->save_state"
.IP "\s-1CUSTOM MODULE SOURCES\s0" 4
.IX Item "CUSTOM MODULE SOURCES"
.RS 4
.ie n .IP "%files = $cb\->list_custom_sources" 4
.el .IP "\f(CW%files\fR = \f(CW$cb\fR\->list_custom_sources" 4
.IX Item "%files = $cb->list_custom_sources"
.RE
.RS 4
.RE
.ie n .IP "$local_index = $cb\->add_custom_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$local_index\fR = \f(CW$cb\fR\->add_custom_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.IX Item "$local_index = $cb->add_custom_source( uri => URI, [verbose => BOOL] );"
.ie n .IP "$local_index = $cb\->remove_custom_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$local_index\fR = \f(CW$cb\fR\->remove_custom_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.IX Item "$local_index = $cb->remove_custom_source( uri => URI, [verbose => BOOL] );"
.ie n .IP "$bool = $cb\->update_custom_source( [remote => \s-1URI\s0] );" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->update_custom_source( [remote => \s-1URI\s0] );" 4
.IX Item "$bool = $cb->update_custom_source( [remote => URI] );"
.ie n .IP "$file = $cb\->write_custom_source_index( path => /path/to/package/root, [to => /path/to/index/file, verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$file\fR = \f(CW$cb\fR\->write_custom_source_index( path => /path/to/package/root, [to => /path/to/index/file, verbose => \s-1BOOL\s0] );" 4
.IX Item "$file = $cb->write_custom_source_index( path => /path/to/package/root, [to => /path/to/index/file, verbose => BOOL] );"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Backend::RV \- return value objects"
.IX Subsection "CPANPLUS::Backend::RV - return value objects"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "new( ok => \s-1BOOL,\s0 args => \s-1DATA,\s0 rv => \s-1DATA,\s0 [function => $method_name] )" 4
.el .IP "new( ok => \s-1BOOL,\s0 args => \s-1DATA,\s0 rv => \s-1DATA,\s0 [function => \f(CW$method_name\fR] )" 4
.IX Item "new( ok => BOOL, args => DATA, rv => DATA, [function => $method_name] )"
.PD
ok, args, rv, function
.RE
.RS 4
.RE
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "CPANPLUS::Config \- configuration defaults and heuristics for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Config - configuration defaults and heuristics for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONFIGURATION\s0" 4
.IX Item "CONFIGURATION"
.IP "Section 'conf'" 4
.IX Item "Section 'conf'"
.PD
hosts
.PP
allow_build_interactivity
.PP
allow_unknown_prereqs
.PP
base
.PP
buildflags
.PP
cpantest
.PP
cpantest_mx
.PP
debug
.PP
dist_type
.PP
email
.PP
enable_custom_sources
.PP
extractdir
.PP
fetchdir
.PP
flush
.PP
force
.PP
histfile
.PP
lib
.PP
makeflags
.PP
makemakerflags
.PP
md5
.PP
no_update
.PP
passive
.PP
prefer_bin
.PP
prefer_makefile
.PP
prereqs
.PP
shell
.PP
show_startup_tip
.PP
signature
.PP
skiptest
.PP
storable
.PP
timeout
.PP
verbose
.PP
write_install_log
.PP
source_engine
.PP
cpantest_reporter_args
.IP "Section 'program'" 4
.IX Item "Section 'program'"
.PP
editor
.PP
make
.PP
pager
.PP
shell
.PP
sudo
.PP
perlwrapper
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Config::HomeEnv \- Set the environment for the \s-1CPANPLUS\s0 base dir"
.IX Subsection "CPANPLUS::Config::HomeEnv - Set the environment for the CPANPLUS base dir"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
\&\f(CW\*(C`setup\*(C'\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Configure \- configuration for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Configure - configuration for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$Configure = CPANPLUS::Configure\->new( load_configs => \s-1BOOL \s0)" 4
.el .IP "\f(CW$Configure\fR = CPANPLUS::Configure\->new( load_configs => \s-1BOOL \s0)" 4
.IX Item "$Configure = CPANPLUS::Configure->new( load_configs => BOOL )"
.PD
load_configs
.RE
.RS 4
.RE
.ie n .IP "$bool = $Configure\->init( [rescan => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$Configure\fR\->init( [rescan => \s-1BOOL\s0])" 4
.IX Item "$bool = $Configure->init( [rescan => BOOL])"
.PD 0
.IP "can_save( [$config_location] )" 4
.IX Item "can_save( [$config_location] )"
.ie n .IP "$file = $conf\->save( [$package_name] )" 4
.el .IP "\f(CW$file\fR = \f(CW$conf\fR\->save( [$package_name] )" 4
.IX Item "$file = $conf->save( [$package_name] )"
.IP "options( type => \s-1TYPE \s0)" 4
.IX Item "options( type => TYPE )"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.RS 4
.IP "get_SOMETHING( \s-1ITEM,\s0 [\s-1ITEM, ITEM, ... \s0] );" 4
.IX Item "get_SOMETHING( ITEM, [ITEM, ITEM, ... ] );"
.IP "set_SOMETHING( \s-1ITEM\s0 => \s-1VAL,\s0 [\s-1ITEM\s0 => \s-1VAL, ITEM\s0 => \s-1VAL, ... \s0] );" 4
.IX Item "set_SOMETHING( ITEM => VAL, [ITEM => VAL, ITEM => VAL, ... ] );"
.IP "add_SOMETHING( \s-1ITEM\s0 => \s-1VAL,\s0 [\s-1ITEM\s0 => \s-1VAL, ITEM\s0 => \s-1VAL, ... \s0] );" 4
.IX Item "add_SOMETHING( ITEM => VAL, [ITEM => VAL, ITEM => VAL, ... ] );"
.PD
set|get_conf, set|get_program, _set|_get_build, _set|_get_source,
_set|_get_mirror, _set|_get_fetch
.RE
.RS 4
.RE
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Dist \- base class for plugins"
.IX Subsection "CPANPLUS::Dist - base class for plugins"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
\&\fIparent()\fR, \fIstatus()\fR
.IP "\s-1STATUS ACCESSORS\s0" 4
.IX Item "STATUS ACCESSORS"
\&\fIcreated()\fR, \fIinstalled()\fR, \fIuninstalled()\fR, \fIdist()\fR
.ie n .IP "$dist = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\->new( module => \s-1MODOBJ \s0);" 4
.el .IP "\f(CW$dist\fR = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE\->new( module => \s-1MODOBJ \s0);" 4
.IX Item "$dist = CPANPLUS::Dist::YOUR_DIST_TYPE_HERE->new( module => MODOBJ );"
.PD 0
.ie n .IP "@dists = CPANPLUS::Dist\->dist_types;" 4
.el .IP "\f(CW@dists\fR = CPANPLUS::Dist\->dist_types;" 4
.IX Item "@dists = CPANPLUS::Dist->dist_types;"
.ie n .IP "$bool = CPANPLUS::Dist\->rescan_dist_types;" 4
.el .IP "\f(CW$bool\fR = CPANPLUS::Dist\->rescan_dist_types;" 4
.IX Item "$bool = CPANPLUS::Dist->rescan_dist_types;"
.ie n .IP "$bool = CPANPLUS::Dist\->has_dist_type( $type )" 4
.el .IP "\f(CW$bool\fR = CPANPLUS::Dist\->has_dist_type( \f(CW$type\fR )" 4
.IX Item "$bool = CPANPLUS::Dist->has_dist_type( $type )"
.ie n .IP "$bool = $dist\->prereq_satisfied( modobj => $modobj, version => $version_spec )" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->prereq_satisfied( modobj => \f(CW$modobj\fR, version => \f(CW$version_spec\fR )" 4
.IX Item "$bool = $dist->prereq_satisfied( modobj => $modobj, version => $version_spec )"
.ie n .IP "$configure_requires = $dist\->find_configure_requires( [file => /path/to/META.yml] )" 4
.el .IP "\f(CW$configure_requires\fR = \f(CW$dist\fR\->find_configure_requires( [file => /path/to/META.yml] )" 4
.IX Item "$configure_requires = $dist->find_configure_requires( [file => /path/to/META.yml] )"
.ie n .IP "$bool = $dist\->_resolve_prereqs( ... )" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->_resolve_prereqs( ... )" 4
.IX Item "$bool = $dist->_resolve_prereqs( ... )"
.PD
.SS "CPANPLUS::Dist::Autobundle \- distribution class for installation snapshots"
.IX Subsection "CPANPLUS::Dist::Autobundle - distribution class for installation snapshots"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "CPANPLUS::Dist::Base \- Base class for custom distribution classes"
.IX Subsection "CPANPLUS::Dist::Base - Base class for custom distribution classes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FLOW\s0" 4
.IX Item "FLOW"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.ie n .IP "@subs = $Class\->methods" 4
.el .IP "\f(CW@subs\fR = \f(CW$Class\fR\->methods" 4
.IX Item "@subs = $Class->methods"
.ie n .IP "$bool = $Class\->format_available" 4
.el .IP "\f(CW$bool\fR = \f(CW$Class\fR\->format_available" 4
.IX Item "$bool = $Class->format_available"
.ie n .IP "$bool = $dist\->init" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->init" 4
.IX Item "$bool = $dist->init"
.ie n .IP "$bool = $dist\->prepare" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->prepare" 4
.IX Item "$bool = $dist->prepare"
.ie n .IP "$bool = $dist\->create" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->create" 4
.IX Item "$bool = $dist->create"
.ie n .IP "$bool = $dist\->install" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->install" 4
.IX Item "$bool = $dist->install"
.ie n .IP "$bool = $dist\->uninstall" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->uninstall" 4
.IX Item "$bool = $dist->uninstall"
.PD
.SS "CPANPLUS::Dist::Build \- \s-1CPANPLUS\s0 plugin to install packages that use Build.PL"
.IX Subsection "CPANPLUS::Dist::Build - CPANPLUS plugin to install packages that use Build.PL"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
\&\f(CW\*(C`parent()\*(C'\fR, \f(CW\*(C`status()\*(C'\fR
.IP "\s-1STATUS ACCESSORS\s0" 4
.IX Item "STATUS ACCESSORS"
\&\f(CW\*(C`build_pl ()\*(C'\fR, \f(CW\*(C`build ()\*(C'\fR, \f(CW\*(C`test ()\*(C'\fR, \f(CW\*(C`prepared ()\*(C'\fR, \f(CW\*(C`distdir ()\*(C'\fR,
\&\f(CW\*(C`created ()\*(C'\fR, \f(CW\*(C`installed ()\*(C'\fR, uninstalled (), \f(CW\*(C`_create_args ()\*(C'\fR,
\&\f(CW\*(C`_install_args ()\*(C'\fR
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$bool = CPANPLUS::Dist::Build\->\fIformat_available()\fR;" 4
.el .IP "\f(CW$bool\fR = CPANPLUS::Dist::Build\->\fIformat_available()\fR;" 4
.IX Item "$bool = CPANPLUS::Dist::Build->format_available();"
.RE
.RS 4
.RE
.ie n .IP "$bool = $dist\->\fIinit()\fR;" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->\fIinit()\fR;" 4
.IX Item "$bool = $dist->init();"
.ie n .IP "$bool = $dist\->prepare([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->prepare([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$bool = $dist->prepare([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', force => BOOL, verbose => BOOL])"
.ie n .IP "$dist\->create([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', prereq_target => \s-1TARGET,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL,\s0 skiptest => \s-1BOOL\s0])" 4
.el .IP "\f(CW$dist\fR\->create([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', prereq_target => \s-1TARGET,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL,\s0 skiptest => \s-1BOOL\s0])" 4
.IX Item "$dist->create([perl => '/path/to/perl', buildflags => 'EXTRA=FLAGS', prereq_target => TARGET, force => BOOL, verbose => BOOL, skiptest => BOOL])"
.ie n .IP "$dist\->install([verbose => \s-1BOOL,\s0 perl => /path/to/perl])" 4
.el .IP "\f(CW$dist\fR\->install([verbose => \s-1BOOL,\s0 perl => /path/to/perl])" 4
.IX Item "$dist->install([verbose => BOOL, perl => /path/to/perl])"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPANPLUS::Dist::Build::Constants \- Constants for CPANPLUS::Dist::Build"
.IX Subsection "CPANPLUS::Dist::Build::Constants - Constants for CPANPLUS::Dist::Build"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "CPANPLUS::Dist::MM \- distribution class for MakeMaker related modules"
.IX Subsection "CPANPLUS::Dist::MM - distribution class for MakeMaker related modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
\&\fIparent()\fR, \fIstatus()\fR
.IP "\s-1STATUS ACCESSORS\s0" 4
.IX Item "STATUS ACCESSORS"
makefile (), make (), test (), prepared (), distdir (), created (),
installed (), uninstalled (), _create_args (), _install_args ()
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$bool = $dist\->\fIformat_available()\fR;" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->\fIformat_available()\fR;" 4
.IX Item "$bool = $dist->format_available();"
.RE
.RS 4
.RE
.ie n .IP "$bool = $dist\->\fIinit()\fR;" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->\fIinit()\fR;" 4
.IX Item "$bool = $dist->init();"
.ie n .IP "$bool = $dist\->prepare([perl => '/path/to/perl', makemakerflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->prepare([perl => '/path/to/perl', makemakerflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$bool = $dist->prepare([perl => '/path/to/perl', makemakerflags => 'EXTRA=FLAGS', force => BOOL, verbose => BOOL])"
.ie n .IP "$href = $dist\->_find_prereqs( file => '/path/to/Makefile', [verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$href\fR = \f(CW$dist\fR\->_find_prereqs( file => '/path/to/Makefile', [verbose => \s-1BOOL\s0])" 4
.IX Item "$href = $dist->_find_prereqs( file => '/path/to/Makefile', [verbose => BOOL])"
.ie n .IP "$bool = $dist\->create([perl => '/path/to/perl', make => '/path/to/make', makeflags => 'EXTRA=FLAGS', prereq_target => \s-1TARGET,\s0 skiptest => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->create([perl => '/path/to/perl', make => '/path/to/make', makeflags => 'EXTRA=FLAGS', prereq_target => \s-1TARGET,\s0 skiptest => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$bool = $dist->create([perl => '/path/to/perl', make => '/path/to/make', makeflags => 'EXTRA=FLAGS', prereq_target => TARGET, skiptest => BOOL, force => BOOL, verbose => BOOL])"
.ie n .IP "$bool = $dist\->install([make => '/path/to/make',	makemakerflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->install([make => '/path/to/make',	makemakerflags => 'EXTRA=FLAGS', force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$bool = $dist->install([make => '/path/to/make', makemakerflags => 'EXTRA=FLAGS', force => BOOL, verbose => BOOL])"
.ie n .IP "$bool = $dist\->write_makefile_pl([force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$dist\fR\->write_makefile_pl([force => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$bool = $dist->write_makefile_pl([force => BOOL, verbose => BOOL])"
.PD
.SS "CPANPLUS::Dist::Sample \*(-- Sample code to create your own Dist::* plugin"
.IX Subsection "CPANPLUS::Dist::Sample Sample code to create your own Dist::* plugin"
.IP "Description." 4
.IX Item "Description."
.SS "CPANPLUS::Error \- error handling for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Error - error handling for CPANPLUS"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "cp_msg(""message string"" [,VERBOSE])" 4
.el .IP "cp_msg(``message string'' [,VERBOSE])" 4
.IX Item "cp_msg(message string [,VERBOSE])"
.IP "\fImsg()\fR" 4
.IX Item "msg()"
.ie n .IP "cp_error(""error string"" [,VERBOSE])" 4
.el .IP "cp_error(``error string'' [,VERBOSE])" 4
.IX Item "cp_error(error string [,VERBOSE])"
.IP "\fIerror()\fR" 4
.IX Item "error()"
.RE
.RS 4
.RE
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.IP "CPANPLUS::Error\->\fIstack()\fR" 4
.IX Item "CPANPLUS::Error->stack()"
.IP "CPANPLUS::Error\->stack_as_string([\s-1TRACE\s0])" 4
.IX Item "CPANPLUS::Error->stack_as_string([TRACE])"
.IP "CPANPLUS::Error\->\fIflush()\fR" 4
.IX Item "CPANPLUS::Error->flush()"
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.PD
\&\f(CW$ERROR_FH\fR, \f(CW$MSG_FH\fR
.SS "\s-1CPANPLUS::FAQ \- CPANPLUS\s0 Frequently Asked Questions"
.IX Subsection "CPANPLUS::FAQ - CPANPLUS Frequently Asked Questions"
.SS "\s-1CPANPLUS::FAQ\s0"
.IX Subsection "CPANPLUS::FAQ"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "CPANPLUS::Hacking \- developing \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Hacking - developing CPANPLUS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1OBTAINING CPANPLUS\s0" 4
.IX Item "OBTAINING CPANPLUS"
.IP "\s-1INSTALLING CPANPLUS\s0" 4
.IX Item "INSTALLING CPANPLUS"
.IP "\s-1CONFIGURING CPANPLUS\s0" 4
.IX Item "CONFIGURING CPANPLUS"
.IP "\s-1RUNNING CPANPLUS FROM DEVELOPMENT ENVIRONMENT\s0" 4
.IX Item "RUNNING CPANPLUS FROM DEVELOPMENT ENVIRONMENT"
.IP "\s-1RUNNING CPANPLUS TESTS\s0" 4
.IX Item "RUNNING CPANPLUS TESTS"
.IP "\s-1FINDING BUGS\s0" 4
.IX Item "FINDING BUGS"
.PD
Problem description, Program demonstrating the bug, [\s-1OPTIONAL\s0] A patch to
the test suite to test for the bug, [\s-1OPTIONAL\s0] A patch to the code + tests
+ documentation
.IP "\s-1SUPPLYING PATCHES\s0" 4
.IX Item "SUPPLYING PATCHES"
In \f(CW\*(C`diff \-u\*(C'\fR or \f(CW\*(C`diff \-c\*(C'\fR format, From the root of the snapshot,
Including patches for code + tests + docs, Sent per mail to
bug\-cpanplus@rt.cpan.org, With subject containing \f(CW\*(C`[PATCH]\*(C'\fR + description
of the patch
.SS "CPANPLUS::Internals \- \s-1CPANPLUS\s0 internals"
.IX Subsection "CPANPLUS::Internals - CPANPLUS internals"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
_conf, _id
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$internals = CPANPLUS::Internals\->_init( _conf => \s-1CONFIG_OBJ \s0)" 4
.el .IP "\f(CW$internals\fR = CPANPLUS::Internals\->_init( _conf => \s-1CONFIG_OBJ \s0)" 4
.IX Item "$internals = CPANPLUS::Internals->_init( _conf => CONFIG_OBJ )"
.RE
.RS 4
.RE
.ie n .IP "$bool = $internals\->_flush( list => \e@caches )" 4
.el .IP "\f(CW$bool\fR = \f(CW$internals\fR\->_flush( list => \e@caches )" 4
.IX Item "$bool = $internals->_flush( list => @caches )"
.ie n .IP "$bool = $internals\->_register_callback( name => \s-1CALLBACK_NAME,\s0 code => \s-1CODEREF \s0);" 4
.el .IP "\f(CW$bool\fR = \f(CW$internals\fR\->_register_callback( name => \s-1CALLBACK_NAME,\s0 code => \s-1CODEREF \s0);" 4
.IX Item "$bool = $internals->_register_callback( name => CALLBACK_NAME, code => CODEREF );"
.PD
install_prerequisite, send_test_report, munge_test_report,
edit_test_report, proceed_on_test_failure, munge_dist_metafile
.ie n .IP "$bool = $internals\->_add_to_includepath( directories => \e@dirs )" 4
.el .IP "\f(CW$bool\fR = \f(CW$internals\fR\->_add_to_includepath( directories => \e@dirs )" 4
.IX Item "$bool = $internals->_add_to_includepath( directories => @dirs )"
.PD 0
.ie n .IP "$bool = $internals\->_add_to_path( directories => \e@dirs )" 4
.el .IP "\f(CW$bool\fR = \f(CW$internals\fR\->_add_to_path( directories => \e@dirs )" 4
.IX Item "$bool = $internals->_add_to_path( directories => @dirs )"
.ie n .IP "$id = CPANPLUS::Internals\->_last_id" 4
.el .IP "\f(CW$id\fR = CPANPLUS::Internals\->_last_id" 4
.IX Item "$id = CPANPLUS::Internals->_last_id"
.ie n .IP "$id = CPANPLUS::Internals\->_store_id( $internals )" 4
.el .IP "\f(CW$id\fR = CPANPLUS::Internals\->_store_id( \f(CW$internals\fR )" 4
.IX Item "$id = CPANPLUS::Internals->_store_id( $internals )"
.ie n .IP "$obj = CPANPLUS::Internals\->_retrieve_id( $ID )" 4
.el .IP "\f(CW$obj\fR = CPANPLUS::Internals\->_retrieve_id( \f(CW$ID\fR )" 4
.IX Item "$obj = CPANPLUS::Internals->_retrieve_id( $ID )"
.ie n .IP "CPANPLUS::Internals\->_remove_id( $ID )" 4
.el .IP "CPANPLUS::Internals\->_remove_id( \f(CW$ID\fR )" 4
.IX Item "CPANPLUS::Internals->_remove_id( $ID )"
.ie n .IP "@objs = CPANPLUS::Internals\->_return_all_objects" 4
.el .IP "\f(CW@objs\fR = CPANPLUS::Internals\->_return_all_objects" 4
.IX Item "@objs = CPANPLUS::Internals->_return_all_objects"
.PD
.SS "CPANPLUS::Internals::Extract \- internals for archive extraction"
.IX Subsection "CPANPLUS::Internals::Extract - internals for archive extraction"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$dir = _extract( module => $modobj, [perl => '/path/to/perl', extractdir => '/path/to/extract/to', prefer_bin => \s-1BOOL,\s0 verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$dir\fR = _extract( module => \f(CW$modobj\fR, [perl => '/path/to/perl', extractdir => '/path/to/extract/to', prefer_bin => \s-1BOOL,\s0 verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0] )" 4
.IX Item "$dir = _extract( module => $modobj, [perl => '/path/to/perl', extractdir => '/path/to/extract/to', prefer_bin => BOOL, verbose => BOOL, force => BOOL] )"
.PD
module, extractdir, prefer_bin, perl, verbose, force
.RE
.RS 4
.RE
.SS "CPANPLUS::Internals::Fetch \- internals for fetching files"
.IX Subsection "CPANPLUS::Internals::Fetch - internals for fetching files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.ie n .IP "$path = _fetch( module => $modobj, [fetchdir => '/path/to/save/to', fetch_from => 'scheme://path/to/fetch/from', verbose => \s-1BOOL,\s0 force => \s-1BOOL,\s0 prefer_bin => \s-1BOOL,\s0 ttl => $seconds] )" 4
.el .IP "\f(CW$path\fR = _fetch( module => \f(CW$modobj\fR, [fetchdir => '/path/to/save/to', fetch_from => 'scheme://path/to/fetch/from', verbose => \s-1BOOL,\s0 force => \s-1BOOL,\s0 prefer_bin => \s-1BOOL,\s0 ttl => \f(CW$seconds\fR] )" 4
.IX Item "$path = _fetch( module => $modobj, [fetchdir => '/path/to/save/to', fetch_from => 'scheme://path/to/fetch/from', verbose => BOOL, force => BOOL, prefer_bin => BOOL, ttl => $seconds] )"
.ie n .IP "_add_fail_host( host => $host_hashref )" 4
.el .IP "_add_fail_host( host => \f(CW$host_hashref\fR )" 4
.IX Item "_add_fail_host( host => $host_hashref )"
.ie n .IP "_host_ok( host => $host_hashref )" 4
.el .IP "_host_ok( host => \f(CW$host_hashref\fR )" 4
.IX Item "_host_ok( host => $host_hashref )"
.PD
.SS "CPANPLUS::Internals::Report \- internals for sending test reports"
.IX Subsection "CPANPLUS::Internals::Report - internals for sending test reports"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$bool = $cb\->_have_query_report_modules" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_have_query_report_modules" 4
.IX Item "$bool = $cb->_have_query_report_modules"
.ie n .IP "$bool = $cb\->_have_send_report_modules" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_have_send_report_modules" 4
.IX Item "$bool = $cb->_have_send_report_modules"
.RE
.RS 4
.RE
.ie n .IP "@list = $cb\->_query_report( module => $modobj, [all_versions => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW@list\fR = \f(CW$cb\fR\->_query_report( module => \f(CW$modobj\fR, [all_versions => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.IX Item "@list = $cb->_query_report( module => $modobj, [all_versions => BOOL, verbose => BOOL] )"
.ie n .IP "$bool = $cb\->_send_report( module => $modobj, buffer => $make_output, failed => \s-1BOOL,\s0 [save => \s-1BOOL,\s0 address => $email_to, verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0]);" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_send_report( module => \f(CW$modobj\fR, buffer => \f(CW$make_output\fR, failed => \s-1BOOL,\s0 [save => \s-1BOOL,\s0 address => \f(CW$email_to\fR, verbose => \s-1BOOL,\s0 force => \s-1BOOL\s0]);" 4
.IX Item "$bool = $cb->_send_report( module => $modobj, buffer => $make_output, failed => BOOL, [save => BOOL, address => $email_to, verbose => BOOL, force => BOOL]);"
.PD
module, buffer, failed, save, address, verbose, force
.SS "CPANPLUS::Internals::Search \- internals for searching for modules"
.IX Subsection "CPANPLUS::Internals::Search - internals for searching for modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "_search_module_tree( type => \s-1TYPE,\s0 allow => \e@regexes, [data => \e@previous_results ] )" 4
.IX Item "_search_module_tree( type => TYPE, allow => @regexes, [data => @previous_results ] )"
.PD
type, allow, data
.RE
.RS 4
.RE
.IP "_search_author_tree( type => \s-1TYPE,\s0 allow => \e@regexex, [data => \e@previous_results ] )" 4
.IX Item "_search_author_tree( type => TYPE, allow => @regexex, [data => @previous_results ] )"
type, allow, data
.IP "\fI_all_installed()\fR" 4
.IX Item "_all_installed()"
.SS "CPANPLUS::Internals::Source \- internals for updating source files"
.IX Subsection "CPANPLUS::Internals::Source - internals for updating source files"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.ie n .IP "$cb\->_build_trees( uptodate => \s-1BOOL,\s0 [use_stored => \s-1BOOL,\s0 path => $path, verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$cb\fR\->_build_trees( uptodate => \s-1BOOL,\s0 [use_stored => \s-1BOOL,\s0 path => \f(CW$path\fR, verbose => \s-1BOOL\s0] )" 4
.IX Item "$cb->_build_trees( uptodate => BOOL, [use_stored => BOOL, path => $path, verbose => BOOL] )"
.PD
uptodate, path, verbose, use_stored
.ie n .IP "$cb\->_check_trees( [update_source => \s-1BOOL,\s0 path => \s-1PATH,\s0 verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$cb\fR\->_check_trees( [update_source => \s-1BOOL,\s0 path => \s-1PATH,\s0 verbose => \s-1BOOL\s0] )" 4
.IX Item "$cb->_check_trees( [update_source => BOOL, path => PATH, verbose => BOOL] )"
update_source, path, verbose
.ie n .IP "$cb\->_\|_check_uptodate( file => $file, name => $name, [update_source => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$cb\fR\->_\|_check_uptodate( file => \f(CW$file\fR, name => \f(CW$name\fR, [update_source => \s-1BOOL,\s0 verbose => \s-1BOOL\s0] )" 4
.IX Item "$cb->__check_uptodate( file => $file, name => $name, [update_source => BOOL, verbose => BOOL] )"
file, name, update_source, verbose
.ie n .IP "$cb\->_update_source( name => $name, [path => $path, verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$cb\fR\->_update_source( name => \f(CW$name\fR, [path => \f(CW$path\fR, verbose => \s-1BOOL\s0] )" 4
.IX Item "$cb->_update_source( name => $name, [path => $path, verbose => BOOL] )"
name, path, verbose
.ie n .IP "$cb\->_\|_create_author_tree([path => $path, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$cb\fR\->_\|_create_author_tree([path => \f(CW$path\fR, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$cb->__create_author_tree([path => $path, uptodate => BOOL, verbose => BOOL])"
uptodate, path, verbose
.ie n .IP "$cb\->_create_mod_tree([path => $path, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$cb\fR\->_create_mod_tree([path => \f(CW$path\fR, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$cb->_create_mod_tree([path => $path, uptodate => BOOL, verbose => BOOL])"
uptodate, path, verbose
.ie n .IP "$cb\->_\|_create_dslip_tree([path => $path, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$cb\fR\->_\|_create_dslip_tree([path => \f(CW$path\fR, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$cb->__create_dslip_tree([path => $path, uptodate => BOOL, verbose => BOOL])"
uptodate, path, verbose
.ie n .IP "$cb\->_dslip_defs ()" 4
.el .IP "\f(CW$cb\fR\->_dslip_defs ()" 4
.IX Item "$cb->_dslip_defs ()"
.PD 0
.ie n .IP "$file = $cb\->_add_custom_module_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$file\fR = \f(CW$cb\fR\->_add_custom_module_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.IX Item "$file = $cb->_add_custom_module_source( uri => URI, [verbose => BOOL] );"
.ie n .IP "$index = $cb\->_\|_custom_module_source_index_file( uri => $uri );" 4
.el .IP "\f(CW$index\fR = \f(CW$cb\fR\->_\|_custom_module_source_index_file( uri => \f(CW$uri\fR );" 4
.IX Item "$index = $cb->__custom_module_source_index_file( uri => $uri );"
.ie n .IP "$file = $cb\->_remove_custom_module_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$file\fR = \f(CW$cb\fR\->_remove_custom_module_source( uri => \s-1URI,\s0 [verbose => \s-1BOOL\s0] );" 4
.IX Item "$file = $cb->_remove_custom_module_source( uri => URI, [verbose => BOOL] );"
.ie n .IP "%files = $cb\->_\|_list_custom_module_sources" 4
.el .IP "\f(CW%files\fR = \f(CW$cb\fR\->_\|_list_custom_module_sources" 4
.IX Item "%files = $cb->__list_custom_module_sources"
.ie n .IP "$bool = $cb\->_\|_update_custom_module_sources( [verbose => \s-1BOOL\s0] );" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_\|_update_custom_module_sources( [verbose => \s-1BOOL\s0] );" 4
.IX Item "$bool = $cb->__update_custom_module_sources( [verbose => BOOL] );"
.ie n .IP "$ok = $cb\->_\|_update_custom_module_source" 4
.el .IP "\f(CW$ok\fR = \f(CW$cb\fR\->_\|_update_custom_module_source" 4
.IX Item "$ok = $cb->__update_custom_module_source"
.ie n .IP "$bool = $cb\->_\|_write_custom_module_index( path => /path/to/packages, [to => /path/to/index/file, verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_\|_write_custom_module_index( path => /path/to/packages, [to => /path/to/index/file, verbose => \s-1BOOL\s0] )" 4
.IX Item "$bool = $cb->__write_custom_module_index( path => /path/to/packages, [to => /path/to/index/file, verbose => BOOL] )"
.ie n .IP "$bool = $cb\->_\|_create_custom_module_entries( [verbose => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$cb\fR\->_\|_create_custom_module_entries( [verbose => \s-1BOOL\s0] )" 4
.IX Item "$bool = $cb->__create_custom_module_entries( [verbose => BOOL] )"
.PD
.SS "CPANPLUS::Internals::Source::Memory \- In memory implementation"
.IX Subsection "CPANPLUS::Internals::Source::Memory - In memory implementation"
.ie n .IP "$cb\->_\|_memory_retrieve_source(name => $name, [path => $path, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.el .IP "\f(CW$cb\fR\->_\|_memory_retrieve_source(name => \f(CW$name\fR, [path => \f(CW$path\fR, uptodate => \s-1BOOL,\s0 verbose => \s-1BOOL\s0])" 4
.IX Item "$cb->__memory_retrieve_source(name => $name, [path => $path, uptodate => BOOL, verbose => BOOL])"
name, uptodate, path, verbose
.ie n .IP "$cb\->_\|_memory_save_source([verbose => \s-1BOOL,\s0 path => $path])" 4
.el .IP "\f(CW$cb\fR\->_\|_memory_save_source([verbose => \s-1BOOL,\s0 path => \f(CW$path\fR])" 4
.IX Item "$cb->__memory_save_source([verbose => BOOL, path => $path])"
path, verbose
.SS "CPANPLUS::Internals::Source::SQLite \- SQLite implementation"
.IX Subsection "CPANPLUS::Internals::Source::SQLite - SQLite implementation"
.SS "CPANPLUS::Internals::Utils \- convenience functions for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Internals::Utils - convenience functions for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$cb\->_mkdir( dir => '/some/dir' )" 4
.el .IP "\f(CW$cb\fR\->_mkdir( dir => '/some/dir' )" 4
.IX Item "$cb->_mkdir( dir => '/some/dir' )"
.RE
.RS 4
.RE
.ie n .IP "$cb\->_chdir( dir => '/some/dir' )" 4
.el .IP "\f(CW$cb\fR\->_chdir( dir => '/some/dir' )" 4
.IX Item "$cb->_chdir( dir => '/some/dir' )"
.ie n .IP "$cb\->_rmdir( dir => '/some/dir' );" 4
.el .IP "\f(CW$cb\fR\->_rmdir( dir => '/some/dir' );" 4
.IX Item "$cb->_rmdir( dir => '/some/dir' );"
.ie n .IP "$cb\->_perl_version ( perl => 'some/perl/binary' );" 4
.el .IP "\f(CW$cb\fR\->_perl_version ( perl => 'some/perl/binary' );" 4
.IX Item "$cb->_perl_version ( perl => 'some/perl/binary' );"
.ie n .IP "$cb\->_version_to_number( version => $version );" 4
.el .IP "\f(CW$cb\fR\->_version_to_number( version => \f(CW$version\fR );" 4
.IX Item "$cb->_version_to_number( version => $version );"
.ie n .IP "$cb\->_whoami" 4
.el .IP "\f(CW$cb\fR\->_whoami" 4
.IX Item "$cb->_whoami"
.ie n .IP "_get_file_contents( file => $file );" 4
.el .IP "_get_file_contents( file => \f(CW$file\fR );" 4
.IX Item "_get_file_contents( file => $file );"
.ie n .IP "$cb\->_move( from => $file|$dir, to => $target );" 4
.el .IP "\f(CW$cb\fR\->_move( from => \f(CW$file\fR|$dir, to => \f(CW$target\fR );" 4
.IX Item "$cb->_move( from => $file|$dir, to => $target );"
.ie n .IP "$cb\->_copy( from => $file|$dir, to => $target );" 4
.el .IP "\f(CW$cb\fR\->_copy( from => \f(CW$file\fR|$dir, to => \f(CW$target\fR );" 4
.IX Item "$cb->_copy( from => $file|$dir, to => $target );"
.ie n .IP "$cb\->_mode_plus_w( file => '/path/to/file' );" 4
.el .IP "\f(CW$cb\fR\->_mode_plus_w( file => '/path/to/file' );" 4
.IX Item "$cb->_mode_plus_w( file => '/path/to/file' );"
.ie n .IP "$uri = $cb\->_host_to_uri( scheme => \s-1SCHEME,\s0 host => \s-1HOST,\s0 path => \s-1PATH \s0);" 4
.el .IP "\f(CW$uri\fR = \f(CW$cb\fR\->_host_to_uri( scheme => \s-1SCHEME,\s0 host => \s-1HOST,\s0 path => \s-1PATH \s0);" 4
.IX Item "$uri = $cb->_host_to_uri( scheme => SCHEME, host => HOST, path => PATH );"
.ie n .IP "$cb\->_vcmp( \s-1VERSION, VERSION \s0);" 4
.el .IP "\f(CW$cb\fR\->_vcmp( \s-1VERSION, VERSION \s0);" 4
.IX Item "$cb->_vcmp( VERSION, VERSION );"
.ie n .IP "$cb\->_home_dir" 4
.el .IP "\f(CW$cb\fR\->_home_dir" 4
.IX Item "$cb->_home_dir"
.ie n .IP "$path = $cb\->_safe_path( path => $path );" 4
.el .IP "\f(CW$path\fR = \f(CW$cb\fR\->_safe_path( path => \f(CW$path\fR );" 4
.IX Item "$path = $cb->_safe_path( path => $path );"
.ie n .IP "($pkg, $version, $ext) = $cb\->_split_package_string( package => \s-1PACKAGE_STRING \s0);" 4
.el .IP "($pkg, \f(CW$version\fR, \f(CW$ext\fR) = \f(CW$cb\fR\->_split_package_string( package => \s-1PACKAGE_STRING \s0);" 4
.IX Item "($pkg, $version, $ext) = $cb->_split_package_string( package => PACKAGE_STRING );"
.PD
.SS "CPANPLUS::Module \- \s-1CPAN\s0 module objects for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Module - CPAN module objects for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.IP "accessors ()" 4
.IX Item "accessors ()"
.RE
.RS 4
.RE
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
name, module, version, path, comment, package, description, dslip
.PP
status, author, parent
.IP "\s-1STATUS ACCESSORS\s0" 4
.IX Item "STATUS ACCESSORS"
installer_type, dist_cpan, dist, prereqs | requires, configure_requires,
signature, extract, fetch, readme, uninstall, created, installed,
checksums, checksum_ok, checksum_value
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$self = CPANPLUS::Module\->new( \s-1OPTIONS \s0)" 4
.el .IP "\f(CW$self\fR = CPANPLUS::Module\->new( \s-1OPTIONS \s0)" 4
.IX Item "$self = CPANPLUS::Module->new( OPTIONS )"
.RE
.RS 4
.RE
.ie n .IP "$mod\->package_name( [$package_string] )" 4
.el .IP "\f(CW$mod\fR\->package_name( [$package_string] )" 4
.IX Item "$mod->package_name( [$package_string] )"
.ie n .IP "$mod\->package_version( [$package_string] )" 4
.el .IP "\f(CW$mod\fR\->package_version( [$package_string] )" 4
.IX Item "$mod->package_version( [$package_string] )"
.ie n .IP "$mod\->package_extension( [$package_string] )" 4
.el .IP "\f(CW$mod\fR\->package_extension( [$package_string] )" 4
.IX Item "$mod->package_extension( [$package_string] )"
.ie n .IP "$mod\->package_is_perl_core" 4
.el .IP "\f(CW$mod\fR\->package_is_perl_core" 4
.IX Item "$mod->package_is_perl_core"
.ie n .IP "$mod\->module_is_supplied_with_perl_core( [version => $]] )" 4
.el .IP "\f(CW$mod\fR\->module_is_supplied_with_perl_core( [version => $]] )" 4
.IX Item "$mod->module_is_supplied_with_perl_core( [version => $]] )"
.ie n .IP "$mod\->is_bundle" 4
.el .IP "\f(CW$mod\fR\->is_bundle" 4
.IX Item "$mod->is_bundle"
.ie n .IP "$mod\->is_autobundle;" 4
.el .IP "\f(CW$mod\fR\->is_autobundle;" 4
.IX Item "$mod->is_autobundle;"
.ie n .IP "$mod\->is_third_party" 4
.el .IP "\f(CW$mod\fR\->is_third_party" 4
.IX Item "$mod->is_third_party"
.ie n .IP "$mod\->third_party_information" 4
.el .IP "\f(CW$mod\fR\->third_party_information" 4
.IX Item "$mod->third_party_information"
.ie n .IP "$clone = $self\->clone" 4
.el .IP "\f(CW$clone\fR = \f(CW$self\fR\->clone" 4
.IX Item "$clone = $self->clone"
.ie n .IP "$where = $self\->fetch" 4
.el .IP "\f(CW$where\fR = \f(CW$self\fR\->fetch" 4
.IX Item "$where = $self->fetch"
.ie n .IP "$path = $self\->extract" 4
.el .IP "\f(CW$path\fR = \f(CW$self\fR\->extract" 4
.IX Item "$path = $self->extract"
.ie n .IP "$type = $self\->get_installer_type([prefer_makefile => \s-1BOOL\s0])" 4
.el .IP "\f(CW$type\fR = \f(CW$self\fR\->get_installer_type([prefer_makefile => \s-1BOOL\s0])" 4
.IX Item "$type = $self->get_installer_type([prefer_makefile => BOOL])"
.ie n .IP "$dist = $self\->dist([target => 'prepare|create', format => \s-1DISTRIBUTION_TYPE,\s0 args => {key => val}]);" 4
.el .IP "\f(CW$dist\fR = \f(CW$self\fR\->dist([target => 'prepare|create', format => \s-1DISTRIBUTION_TYPE,\s0 args => {key => val}]);" 4
.IX Item "$dist = $self->dist([target => 'prepare|create', format => DISTRIBUTION_TYPE, args => {key => val}]);"
.ie n .IP "$bool = $mod\->prepare( )" 4
.el .IP "\f(CW$bool\fR = \f(CW$mod\fR\->prepare( )" 4
.IX Item "$bool = $mod->prepare( )"
.ie n .IP "$bool = $mod\->create( )" 4
.el .IP "\f(CW$bool\fR = \f(CW$mod\fR\->create( )" 4
.IX Item "$bool = $mod->create( )"
.ie n .IP "$bool = $mod\->test( )" 4
.el .IP "\f(CW$bool\fR = \f(CW$mod\fR\->test( )" 4
.IX Item "$bool = $mod->test( )"
.ie n .IP "$bool = $self\->install([ target => 'init|prepare|create|install', format => \s-1FORMAT_TYPE,\s0 extractdir => \s-1DIRECTORY,\s0 fetchdir => \s-1DIRECTORY,\s0 prefer_bin => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL, ..... \s0]);" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->install([ target => 'init|prepare|create|install', format => \s-1FORMAT_TYPE,\s0 extractdir => \s-1DIRECTORY,\s0 fetchdir => \s-1DIRECTORY,\s0 prefer_bin => \s-1BOOL,\s0 force => \s-1BOOL,\s0 verbose => \s-1BOOL, ..... \s0]);" 4
.IX Item "$bool = $self->install([ target => 'init|prepare|create|install', format => FORMAT_TYPE, extractdir => DIRECTORY, fetchdir => DIRECTORY, prefer_bin => BOOL, force => BOOL, verbose => BOOL, ..... ]);"
.ie n .IP "$text = $self\->readme" 4
.el .IP "\f(CW$text\fR = \f(CW$self\fR\->readme" 4
.IX Item "$text = $self->readme"
.ie n .IP "$version = $self\->\fIinstalled_version()\fR" 4
.el .IP "\f(CW$version\fR = \f(CW$self\fR\->\fIinstalled_version()\fR" 4
.IX Item "$version = $self->installed_version()"
.ie n .IP "$where = $self\->\fIinstalled_file()\fR" 4
.el .IP "\f(CW$where\fR = \f(CW$self\fR\->\fIinstalled_file()\fR" 4
.IX Item "$where = $self->installed_file()"
.ie n .IP "$dir = $self\->\fIinstalled_dir()\fR" 4
.el .IP "\f(CW$dir\fR = \f(CW$self\fR\->\fIinstalled_dir()\fR" 4
.IX Item "$dir = $self->installed_dir()"
.ie n .IP "$bool = $self\->is_uptodate([version => \s-1VERSION_NUMBER\s0])" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->is_uptodate([version => \s-1VERSION_NUMBER\s0])" 4
.IX Item "$bool = $self->is_uptodate([version => VERSION_NUMBER])"
.ie n .IP "$href = $self\->\fIdetails()\fR" 4
.el .IP "\f(CW$href\fR = \f(CW$self\fR\->\fIdetails()\fR" 4
.IX Item "$href = $self->details()"
.ie n .IP "@list = $self\->\fIcontains()\fR" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->\fIcontains()\fR" 4
.IX Item "@list = $self->contains()"
.ie n .IP "@list_of_hrefs = $self\->\fIfetch_report()\fR" 4
.el .IP "\f(CW@list_of_hrefs\fR = \f(CW$self\fR\->\fIfetch_report()\fR" 4
.IX Item "@list_of_hrefs = $self->fetch_report()"
.ie n .IP "$bool = $self\->uninstall([type => [all|man|prog])" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->uninstall([type => [all|man|prog])" 4
.IX Item "$bool = $self->uninstall([type => [all|man|prog])"
.ie n .IP "@modobj = $self\->\fIdistributions()\fR" 4
.el .IP "\f(CW@modobj\fR = \f(CW$self\fR\->\fIdistributions()\fR" 4
.IX Item "@modobj = $self->distributions()"
.ie n .IP "@list = $self\->files ()" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->files ()" 4
.IX Item "@list = $self->files ()"
.ie n .IP "@list = $self\->directory_tree ()" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->directory_tree ()" 4
.IX Item "@list = $self->directory_tree ()"
.ie n .IP "@list = $self\->packlist ()" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->packlist ()" 4
.IX Item "@list = $self->packlist ()"
.ie n .IP "@list = $self\->validate ()" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->validate ()" 4
.IX Item "@list = $self->validate ()"
.ie n .IP "$bool = $self\->add_to_includepath;" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->add_to_includepath;" 4
.IX Item "$bool = $self->add_to_includepath;"
.ie n .IP "$path = $self\->\fIbest_path_to_module_build()\fR;" 4
.el .IP "\f(CW$path\fR = \f(CW$self\fR\->\fIbest_path_to_module_build()\fR;" 4
.IX Item "$path = $self->best_path_to_module_build();"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "CPANPLUS::Module::Author \- \s-1CPAN\s0 author object for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Module::Author - CPAN author object for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
author, cpanid, email, parent
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$auth = CPANPLUS::Module::Author\->new( author => \s-1AUTHOR_NAME,\s0 cpanid => \s-1CPAN_ID,\s0 _id => \s-1INTERNALS_ID\s0 [, email => \s-1AUTHOR_EMAIL\s0] )" 4
.el .IP "\f(CW$auth\fR = CPANPLUS::Module::Author\->new( author => \s-1AUTHOR_NAME,\s0 cpanid => \s-1CPAN_ID,\s0 _id => \s-1INTERNALS_ID\s0 [, email => \s-1AUTHOR_EMAIL\s0] )" 4
.IX Item "$auth = CPANPLUS::Module::Author->new( author => AUTHOR_NAME, cpanid => CPAN_ID, _id => INTERNALS_ID [, email => AUTHOR_EMAIL] )"
.RE
.RS 4
.RE
.ie n .IP "@mod_objs = $auth\->\fImodules()\fR" 4
.el .IP "\f(CW@mod_objs\fR = \f(CW$auth\fR\->\fImodules()\fR" 4
.IX Item "@mod_objs = $auth->modules()"
.ie n .IP "@dists = $auth\->\fIdistributions()\fR" 4
.el .IP "\f(CW@dists\fR = \f(CW$auth\fR\->\fIdistributions()\fR" 4
.IX Item "@dists = $auth->distributions()"
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.IP "accessors ()" 4
.IX Item "accessors ()"
.RE
.RS 4
.RE
.PD
.SS "CPANPLUS::Module::Author::Fake \- dummy author object for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Module::Author::Fake - dummy author object for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new( _id => \s-1DIGIT \s0)" 4
.IX Item "new( _id => DIGIT )"
.RE
.RS 4
.RE
.PD
.SS "CPANPLUS::Module::Checksums \- checking the checksum of a distribution"
.IX Subsection "CPANPLUS::Module::Checksums - checking the checksum of a distribution"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$mod\->checksums" 4
.el .IP "\f(CW$mod\fR\->checksums" 4
.IX Item "$mod->checksums"
.RE
.RS 4
.RE
.PD
.SS "CPANPLUS::Module::Fake \- fake module object for internal use"
.IX Subsection "CPANPLUS::Module::Fake - fake module object for internal use"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "new( module => $mod, path => $path, package => $pkg, [_id => \s-1DIGIT\s0] )" 4
.el .IP "new( module => \f(CW$mod\fR, path => \f(CW$path\fR, package => \f(CW$pkg\fR, [_id => \s-1DIGIT\s0] )" 4
.IX Item "new( module => $mod, path => $path, package => $pkg, [_id => DIGIT] )"
.RE
.RS 4
.RE
.PD
.SS "CPANPLUS::Selfupdate \- self-updating for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Selfupdate - self-updating for CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$self = CPANPLUS::Selfupdate\->new( $backend_object );" 4
.el .IP "\f(CW$self\fR = CPANPLUS::Selfupdate\->new( \f(CW$backend_object\fR );" 4
.IX Item "$self = CPANPLUS::Selfupdate->new( $backend_object );"
.RE
.RS 4
.RE
.ie n .IP "@cat = $self\->list_categories" 4
.el .IP "\f(CW@cat\fR = \f(CW$self\fR\->list_categories" 4
.IX Item "@cat = $self->list_categories"
.ie n .IP "%list = $self\->list_modules_to_update( update => ""core|dependencies|enabled_features|features|all"", [latest => \s-1BOOL\s0] )" 4
.el .IP "\f(CW%list\fR = \f(CW$self\fR\->list_modules_to_update( update => ``core|dependencies|enabled_features|features|all'', [latest => \s-1BOOL\s0] )" 4
.IX Item "%list = $self->list_modules_to_update( update => core|dependencies|enabled_features|features|all, [latest => BOOL] )"
.ie n .IP "$bool = $self\->selfupdate( update => ""core|dependencies|enabled_features|features|all"", [latest => \s-1BOOL,\s0 force => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->selfupdate( update => ``core|dependencies|enabled_features|features|all'', [latest => \s-1BOOL,\s0 force => \s-1BOOL\s0] )" 4
.IX Item "$bool = $self->selfupdate( update => core|dependencies|enabled_features|features|all, [latest => BOOL, force => BOOL] )"
.ie n .IP "@features = $self\->list_features" 4
.el .IP "\f(CW@features\fR = \f(CW$self\fR\->list_features" 4
.IX Item "@features = $self->list_features"
.ie n .IP "@features = $self\->list_enabled_features" 4
.el .IP "\f(CW@features\fR = \f(CW$self\fR\->list_enabled_features" 4
.IX Item "@features = $self->list_enabled_features"
.ie n .IP "@mods = $self\->modules_for_feature( \s-1FEATURE\s0 [,AS_HASH] )" 4
.el .IP "\f(CW@mods\fR = \f(CW$self\fR\->modules_for_feature( \s-1FEATURE\s0 [,AS_HASH] )" 4
.IX Item "@mods = $self->modules_for_feature( FEATURE [,AS_HASH] )"
.ie n .IP "@mods = $self\->list_core_dependencies( [\s-1AS_HASH\s0] )" 4
.el .IP "\f(CW@mods\fR = \f(CW$self\fR\->list_core_dependencies( [\s-1AS_HASH\s0] )" 4
.IX Item "@mods = $self->list_core_dependencies( [AS_HASH] )"
.ie n .IP "@mods = $self\->list_core_modules( [\s-1AS_HASH\s0] )" 4
.el .IP "\f(CW@mods\fR = \f(CW$self\fR\->list_core_modules( [\s-1AS_HASH\s0] )" 4
.IX Item "@mods = $self->list_core_modules( [AS_HASH] )"
.IP "CPANPLUS::Selfupdate::Module" 4
.IX Item "CPANPLUS::Selfupdate::Module"
.ie n .IP "$version = $mod\->version_required" 4
.el .IP "\f(CW$version\fR = \f(CW$mod\fR\->version_required" 4
.IX Item "$version = $mod->version_required"
.ie n .IP "$bool = $mod\->is_installed_version_sufficient" 4
.el .IP "\f(CW$bool\fR = \f(CW$mod\fR\->is_installed_version_sufficient" 4
.IX Item "$bool = $mod->is_installed_version_sufficient"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "CPANPLUS::Shell \- base class for \s-1CPANPLUS\s0 shells"
.IX Subsection "CPANPLUS::Shell - base class for CPANPLUS shells"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Shell::Classic \- \s-1CPAN\s0.pm emulation for \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Shell::Classic - CPAN.pm emulation for CPANPLUS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Shell::Default \- the default \s-1CPANPLUS\s0 shell"
.IX Subsection "CPANPLUS::Shell::Default - the default CPANPLUS shell"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Shell::Default::Plugins::CustomSource \- add custom sources to \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Shell::Default::Plugins::CustomSource - add custom sources to CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "CPANPLUS::Shell::Default::Plugins::HOWTO \*(-- documentation on how to write your own plugins"
.IX Subsection "CPANPLUS::Shell::Default::Plugins::HOWTO documentation on how to write your own plugins"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1HOWTO\s0" 4
.IX Item "HOWTO"
.RS 4
.IP "Registering Plugin Modules" 4
.IX Item "Registering Plugin Modules"
.IP "Registering Plugin Commands" 4
.IX Item "Registering Plugin Commands"
.IP "Registering Plugin Help" 4
.IX Item "Registering Plugin Help"
.IP "Arguments to Plugin Commands" 4
.IX Item "Arguments to Plugin Commands"
.PD
Classname \*(-- The name of your plugin class, Shell     \*(-- The
CPANPLUS::Shell::Default object, Backend   \*(-- The CPANPLUS::Backend object,
Command   \*(-- The command issued by the user, Input     \*(-- The input string
from the user, Options	 \*(-- A hashref of options provided by the user
.RE
.RS 4
.RE
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Shell::Default::Plugins::Remote \- connect to a remote \s-1CPANPLUS\s0"
.IX Subsection "CPANPLUS::Shell::Default::Plugins::Remote - connect to a remote CPANPLUS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "CPANPLUS::Shell::Default::Plugins::Source \- read in \s-1CPANPLUS\s0 commands"
.IX Subsection "CPANPLUS::Shell::Default::Plugins::Source - read in CPANPLUS commands"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Carp \- alternative warn and die for modules"
.IX Subsection "Carp - alternative warn and die for modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Forcing a Stack Trace" 4
.IX Item "Forcing a Stack Trace"
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$Carp::MaxEvalLen" 4
.el .IP "\f(CW$Carp::MaxEvalLen\fR" 4
.IX Item "$Carp::MaxEvalLen"
.ie n .IP "$Carp::MaxArgLen" 4
.el .IP "\f(CW$Carp::MaxArgLen\fR" 4
.IX Item "$Carp::MaxArgLen"
.ie n .IP "$Carp::MaxArgNums" 4
.el .IP "\f(CW$Carp::MaxArgNums\fR" 4
.IX Item "$Carp::MaxArgNums"
.ie n .IP "$Carp::Verbose" 4
.el .IP "\f(CW$Carp::Verbose\fR" 4
.IX Item "$Carp::Verbose"
.ie n .IP "@CARP_NOT" 4
.el .IP "\f(CW@CARP_NOT\fR" 4
.IX Item "@CARP_NOT"
.ie n .IP "%Carp::Internal" 4
.el .IP "\f(CW%Carp::Internal\fR" 4
.IX Item "%Carp::Internal"
.ie n .IP "%Carp::CarpInternal" 4
.el .IP "\f(CW%Carp::CarpInternal\fR" 4
.IX Item "%Carp::CarpInternal"
.ie n .IP "$Carp::CarpLevel" 4
.el .IP "\f(CW$Carp::CarpLevel\fR" 4
.IX Item "$Carp::CarpLevel"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Class::Struct \- declare struct-like datatypes as Perl classes"
.IX Subsection "Class::Struct - declare struct-like datatypes as Perl classes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.ie n .IP "The ""struct()"" function" 4
.el .IP "The \f(CWstruct()\fR function" 4
.IX Item "The struct() function"
.IP "Class Creation at Compile Time" 4
.IX Item "Class Creation at Compile Time"
.IP "Element Types and Accessor Methods" 4
.IX Item "Element Types and Accessor Methods"
.PD
Scalar (\f(CW\*(Aq$\*(Aq\fR or \f(CW\*(Aq*$\*(Aq\fR), Array (\f(CW\*(Aq@\*(Aq\fR or \f(CW\*(Aq*@\*(Aq\fR), Hash (\f(CW\*(Aq%\*(Aq\fR or
\&\f(CW\*(Aq*%\*(Aq\fR), Class (\f(CW\*(AqClass_Name\*(Aq\fR or \f(CW\*(Aq*Class_Name\*(Aq\fR)
.ie n .IP "Initializing with ""new""" 4
.el .IP "Initializing with \f(CWnew\fR" 4
.IX Item "Initializing with new"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD
Example 1, Example 2, Example 3
.IP "Author and Modification History" 4
.IX Item "Author and Modification History"
.SS "Compress::Raw::Bzip2 \- Low-Level Interface to bzip2 compression library"
.IX Subsection "Compress::Raw::Bzip2 - Low-Level Interface to bzip2 compression library"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Compression" 4
.IX Item "Compression"
.RS 4
.ie n .IP "($z, $status) = new Compress::Raw::Bzip2 $appendOutput, $blockSize100k, $workfactor;" 4
.el .IP "($z, \f(CW$status\fR) = new Compress::Raw::Bzip2 \f(CW$appendOutput\fR, \f(CW$blockSize100k\fR, \f(CW$workfactor\fR;" 4
.IX Item "($z, $status) = new Compress::Raw::Bzip2 $appendOutput, $blockSize100k, $workfactor;"
.PD
\&\fB\f(CB$appendOutput\fB\fR, \fB\f(CB$blockSize100k\fB\fR, \fB\f(CB$workfactor\fB\fR
.ie n .IP "$status = $bz\->bzdeflate($input, $output);" 4
.el .IP "\f(CW$status\fR = \f(CW$bz\fR\->bzdeflate($input, \f(CW$output\fR);" 4
.IX Item "$status = $bz->bzdeflate($input, $output);"
.PD 0
.ie n .IP "$status = $bz\->bzflush($output);" 4
.el .IP "\f(CW$status\fR = \f(CW$bz\fR\->bzflush($output);" 4
.IX Item "$status = $bz->bzflush($output);"
.ie n .IP "$status = $bz\->bzclose($output);" 4
.el .IP "\f(CW$status\fR = \f(CW$bz\fR\->bzclose($output);" 4
.IX Item "$status = $bz->bzclose($output);"
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "Uncompression" 4
.IX Item "Uncompression"
.RS 4
.ie n .IP "($z, $status) = new Compress::Raw::Bunzip2 $appendOutput, $consumeInput, $small, $verbosity, $limitOutput;" 4
.el .IP "($z, \f(CW$status\fR) = new Compress::Raw::Bunzip2 \f(CW$appendOutput\fR, \f(CW$consumeInput\fR, \f(CW$small\fR, \f(CW$verbosity\fR, \f(CW$limitOutput\fR;" 4
.IX Item "($z, $status) = new Compress::Raw::Bunzip2 $appendOutput, $consumeInput, $small, $verbosity, $limitOutput;"
.PD
\&\fB\f(CB$appendOutput\fB\fR, \fB\f(CB$consumeInput\fB\fR, \fB\f(CB$small\fB\fR, \fB\f(CB$limitOutput\fB\fR,
\&\fB\f(CB$verbosity\fB\fR
.ie n .IP "$status = $z\->bzinflate($input, $output);" 4
.el .IP "\f(CW$status\fR = \f(CW$z\fR\->bzinflate($input, \f(CW$output\fR);" 4
.IX Item "$status = $z->bzinflate($input, $output);"
.RE
.RS 4
.RE
.PD 0
.IP "Misc" 4
.IX Item "Misc"
.RS 4
.ie n .IP "my $version = \fICompress::Raw::Bzip2::bzlibversion()\fR;" 4
.el .IP "my \f(CW$version\fR = \fICompress::Raw::Bzip2::bzlibversion()\fR;" 4
.IX Item "my $version = Compress::Raw::Bzip2::bzlibversion();"
.RE
.RS 4
.RE
.IP "Constants" 4
.IX Item "Constants"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Compress::Raw::Zlib \- Low-Level Interface to zlib compression library"
.IX Subsection "Compress::Raw::Zlib - Low-Level Interface to zlib compression library"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Compress::Raw::Zlib::Deflate" 4
.IX Item "Compress::Raw::Zlib::Deflate"
.RS 4
.ie n .IP "\fB($d, \fB$status\fB) = new Compress::Raw::Zlib::Deflate( [\s-1OPT\s0] ) \fR" 4
.el .IP "\fB($d, \f(CB$status\fB) = new Compress::Raw::Zlib::Deflate( [\s-1OPT\s0] ) \fR" 4
.IX Item "($d, $status) = new Compress::Raw::Zlib::Deflate( [OPT] ) "
.PD
\&\fB\-Level\fR, \fB\-Method\fR, \fB\-WindowBits\fR, \fB\-MemLevel\fR, \fB\-Strategy\fR,
\&\fB\-Dictionary\fR, \fB\-Bufsize\fR, \fB\-AppendOutput\fR, \fB\-CRC32\fR, \fB\-ADLER32\fR
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->deflate($input, \f(CB$output\fB)\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->deflate($input, \f(CB$output\fB)\fR" 4
.IX Item "$status = $d->deflate($input, $output)"
.PD 0
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->flush($output [, \f(CB$flush_type\fB]) \fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->flush($output [, \f(CB$flush_type\fB]) \fR" 4
.IX Item "$status = $d->flush($output [, $flush_type]) "
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->\f(BIdeflateReset()\fB \fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->\f(BIdeflateReset()\fB \fR" 4
.IX Item "$status = $d->deflateReset() "
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->deflateParams([\s-1OPT\s0])\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->deflateParams([\s-1OPT\s0])\fR" 4
.IX Item "$status = $d->deflateParams([OPT])"
.PD
\&\fB\-Level\fR, \fB\-Strategy\fR, \fB\-BufSize\fR
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->deflateTune($good_length, \f(CB$max_lazy\fB, \f(CB$nice_length\fB, \f(CB$max_chain\fB)\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->deflateTune($good_length, \f(CB$max_lazy\fB, \f(CB$nice_length\fB, \f(CB$max_chain\fB)\fR" 4
.IX Item "$status = $d->deflateTune($good_length, $max_lazy, $nice_length, $max_chain)"
.PD 0
.ie n .IP "\fB\fB$d\fB\->\f(BIdict_adler()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIdict_adler()\fB\fR" 4
.IX Item "$d->dict_adler()"
.ie n .IP "\fB\fB$d\fB\->\f(BIcrc32()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIcrc32()\fB\fR" 4
.IX Item "$d->crc32()"
.ie n .IP "\fB\fB$d\fB\->\f(BIadler32()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIadler32()\fB\fR" 4
.IX Item "$d->adler32()"
.ie n .IP "\fB\fB$d\fB\->\f(BImsg()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BImsg()\fB\fR" 4
.IX Item "$d->msg()"
.ie n .IP "\fB\fB$d\fB\->\f(BItotal_in()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BItotal_in()\fB\fR" 4
.IX Item "$d->total_in()"
.ie n .IP "\fB\fB$d\fB\->\f(BItotal_out()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BItotal_out()\fB\fR" 4
.IX Item "$d->total_out()"
.ie n .IP "\fB\fB$d\fB\->\f(BIget_Strategy()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIget_Strategy()\fB\fR" 4
.IX Item "$d->get_Strategy()"
.ie n .IP "\fB\fB$d\fB\->\f(BIget_Level()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIget_Level()\fB\fR" 4
.IX Item "$d->get_Level()"
.ie n .IP "\fB\fB$d\fB\->\f(BIget_BufSize()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIget_BufSize()\fB\fR" 4
.IX Item "$d->get_BufSize()"
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "Compress::Raw::Zlib::Inflate" 4
.IX Item "Compress::Raw::Zlib::Inflate"
.RS 4
.ie n .IP "\fB ($i, \fB$status\fB) = new Compress::Raw::Zlib::Inflate( [\s-1OPT\s0] ) \fR" 4
.el .IP "\fB ($i, \f(CB$status\fB) = new Compress::Raw::Zlib::Inflate( [\s-1OPT\s0] ) \fR" 4
.IX Item " ($i, $status) = new Compress::Raw::Zlib::Inflate( [OPT] ) "
.PD
\&\fB\-WindowBits\fR, \fB\-Bufsize\fR, \fB\-Dictionary\fR, \fB\-AppendOutput\fR, \fB\-CRC32\fR,
\&\fB\-ADLER32\fR, \fB\-ConsumeInput\fR, \fB\-LimitOutput\fR
.ie n .IP "\fB \fB$status\fB = \f(BI$i\fB\->inflate($input, \f(CB$output\fB [,$eof]) \fR" 4
.el .IP "\fB \f(CB$status\fB = \f(CB$i\fB\->inflate($input, \f(CB$output\fB [,$eof]) \fR" 4
.IX Item " $status = $i->inflate($input, $output [,$eof]) "
.PD 0
.ie n .IP "\fB\fB$status\fB = \f(BI$i\fB\->inflateSync($input)\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$i\fB\->inflateSync($input)\fR" 4
.IX Item "$status = $i->inflateSync($input)"
.ie n .IP "\fB\fB$status\fB = \f(BI$i\fB\->\f(BIinflateReset()\fB \fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$i\fB\->\f(BIinflateReset()\fB \fR" 4
.IX Item "$status = $i->inflateReset() "
.ie n .IP "\fB\fB$i\fB\->\f(BIdict_adler()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BIdict_adler()\fB\fR" 4
.IX Item "$i->dict_adler()"
.ie n .IP "\fB\fB$i\fB\->\f(BIcrc32()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BIcrc32()\fB\fR" 4
.IX Item "$i->crc32()"
.ie n .IP "\fB\fB$i\fB\->\f(BIadler32()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BIadler32()\fB\fR" 4
.IX Item "$i->adler32()"
.ie n .IP "\fB\fB$i\fB\->\f(BImsg()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BImsg()\fB\fR" 4
.IX Item "$i->msg()"
.ie n .IP "\fB\fB$i\fB\->\f(BItotal_in()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BItotal_in()\fB\fR" 4
.IX Item "$i->total_in()"
.ie n .IP "\fB\fB$i\fB\->\f(BItotal_out()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BItotal_out()\fB\fR" 4
.IX Item "$i->total_out()"
.ie n .IP "\fB\fB$d\fB\->\f(BIget_BufSize()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIget_BufSize()\fB\fR" 4
.IX Item "$d->get_BufSize()"
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.IP "\s-1CHECKSUM FUNCTIONS\s0" 4
.IX Item "CHECKSUM FUNCTIONS"
.IP "Misc" 4
.IX Item "Misc"
.RS 4
.ie n .IP "my $version = \fICompress::Raw::Zlib::zlib_version()\fR;" 4
.el .IP "my \f(CW$version\fR = \fICompress::Raw::Zlib::zlib_version()\fR;" 4
.IX Item "my $version = Compress::Raw::Zlib::zlib_version();"
.ie n .IP "my $flags = \fICompress::Raw::Zlib::zlibCompileFlags()\fR;" 4
.el .IP "my \f(CW$flags\fR = \fICompress::Raw::Zlib::zlibCompileFlags()\fR;" 4
.IX Item "my $flags = Compress::Raw::Zlib::zlibCompileFlags();"
.RE
.RS 4
.RE
.IP "The LimitOutput option." 4
.IX Item "The LimitOutput option."
.IP "\s-1ACCESSING ZIP FILES\s0" 4
.IX Item "ACCESSING ZIP FILES"
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
.RS 4
.IP "Compatibility with Unix compress/uncompress." 4
.IX Item "Compatibility with Unix compress/uncompress."
.IP "Accessing .tar.Z files" 4
.IX Item "Accessing .tar.Z files"
.IP "Zlib Library Version Support" 4
.IX Item "Zlib Library Version Support"
.RE
.RS 4
.RE
.IP "\s-1CONSTANTS\s0" 4
.IX Item "CONSTANTS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Compress::Zlib \- Interface to zlib compression library"
.IX Subsection "Compress::Zlib - Interface to zlib compression library"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Notes for users of Compress::Zlib version 1" 4
.IX Item "Notes for users of Compress::Zlib version 1"
.RE
.RS 4
.RE
.IP "\s-1GZIP INTERFACE\s0" 4
.IX Item "GZIP INTERFACE"
.PD
\&\fB\f(CB$gz\fB = gzopen($filename, \f(CB$mode\fB)\fR, \fB\f(CB$gz\fB = gzopen($filehandle, \f(CB$mode\fB)\fR,
\&\fB\f(CB$bytesread\fB = \f(CB$gz\fB\->gzread($buffer [, \f(CB$size\fB]) ;\fR, \fB\f(CB$bytesread\fB =
\&\f(CB$gz\fB\->gzreadline($line) ;\fR, \fB\f(CB$byteswritten\fB = \f(CB$gz\fB\->gzwrite($buffer)
;\fR, \fB\f(CB$status\fB = \f(CB$gz\fB\->gzflush($flush_type) ;\fR, \fB\f(CB$offset\fB =
\&\f(CB$gz\fB\->\f(BIgztell()\fB ;\fR, \fB\f(CB$status\fB = \f(CB$gz\fB\->gzseek($offset, \f(CB$whence\fB) ;\fR,
\&\fB\f(CB$gz\fB\->gzclose\fR, \fB\f(CB$gz\fB\->gzsetparams($level, \f(CB$strategy\fB\fR, \fB\f(CB$level\fB\fR,
\&\fB\f(CB$strategy\fB\fR, \fB\f(CB$gz\fB\->gzerror\fR, \fB\f(CB$gzerrno\fB\fR
.RS 4
.IP "Examples" 4
.IX Item "Examples"
.PD 0
.IP "Compress::Zlib::memGzip" 4
.IX Item "Compress::Zlib::memGzip"
.IP "Compress::Zlib::memGunzip" 4
.IX Item "Compress::Zlib::memGunzip"
.RE
.RS 4
.RE
.IP "\s-1COMPRESS/UNCOMPRESS\s0" 4
.IX Item "COMPRESS/UNCOMPRESS"
.PD
\&\fB\f(CB$dest\fB = compress($source [, \f(CB$level\fB] ) ;\fR, \fB\f(CB$dest\fB = uncompress($source)
;\fR
.IP "Deflate Interface" 4
.IX Item "Deflate Interface"
.RS 4
.PD 0
.ie n .IP "\fB($d, \fB$status\fB) = deflateInit( [\s-1OPT\s0] )\fR" 4
.el .IP "\fB($d, \f(CB$status\fB) = deflateInit( [\s-1OPT\s0] )\fR" 4
.IX Item "($d, $status) = deflateInit( [OPT] )"
.PD
\&\fB\-Level\fR, \fB\-Method\fR, \fB\-WindowBits\fR, \fB\-MemLevel\fR, \fB\-Strategy\fR,
\&\fB\-Dictionary\fR, \fB\-Bufsize\fR
.ie n .IP "\fB($out, \fB$status\fB) = \f(BI$d\fB\->deflate($buffer)\fR" 4
.el .IP "\fB($out, \f(CB$status\fB) = \f(CB$d\fB\->deflate($buffer)\fR" 4
.IX Item "($out, $status) = $d->deflate($buffer)"
.PD 0
.ie n .IP "\fB($out, \fB$status\fB) = \f(BI$d\fB\->\f(BIflush()\fB\fR =head2 \fB($out, \fB$status\fB) = \f(BI$d\fB\->flush($flush_type)\fR" 4
.el .IP "\fB($out, \f(CB$status\fB) = \f(CB$d\fB\->\f(BIflush()\fB\fR =head2 \fB($out, \f(CB$status\fB) = \f(CB$d\fB\->flush($flush_type)\fR" 4
.IX Item "($out, $status) = $d->flush() =head2 ($out, $status) = $d->flush($flush_type)"
.ie n .IP "\fB\fB$status\fB = \f(BI$d\fB\->deflateParams([\s-1OPT\s0])\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$d\fB\->deflateParams([\s-1OPT\s0])\fR" 4
.IX Item "$status = $d->deflateParams([OPT])"
.PD
\&\fB\-Level\fR, \fB\-Strategy\fR
.ie n .IP "\fB\fB$d\fB\->\f(BIdict_adler()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BIdict_adler()\fB\fR" 4
.IX Item "$d->dict_adler()"
.PD 0
.ie n .IP "\fB\fB$d\fB\->\f(BImsg()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BImsg()\fB\fR" 4
.IX Item "$d->msg()"
.ie n .IP "\fB\fB$d\fB\->\f(BItotal_in()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BItotal_in()\fB\fR" 4
.IX Item "$d->total_in()"
.ie n .IP "\fB\fB$d\fB\->\f(BItotal_out()\fB\fR" 4
.el .IP "\fB\f(CB$d\fB\->\f(BItotal_out()\fB\fR" 4
.IX Item "$d->total_out()"
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "Inflate Interface" 4
.IX Item "Inflate Interface"
.RS 4
.ie n .IP "\fB($i, \fB$status\fB) = \f(BIinflateInit()\fB\fR" 4
.el .IP "\fB($i, \f(CB$status\fB) = \f(BIinflateInit()\fB\fR" 4
.IX Item "($i, $status) = inflateInit()"
.PD
\&\fB\-WindowBits\fR, \fB\-Bufsize\fR, \fB\-Dictionary\fR
.ie n .IP "\fB($out, \fB$status\fB) = \f(BI$i\fB\->inflate($buffer)\fR" 4
.el .IP "\fB($out, \f(CB$status\fB) = \f(CB$i\fB\->inflate($buffer)\fR" 4
.IX Item "($out, $status) = $i->inflate($buffer)"
.PD 0
.ie n .IP "\fB\fB$status\fB = \f(BI$i\fB\->inflateSync($buffer)\fR" 4
.el .IP "\fB\f(CB$status\fB = \f(CB$i\fB\->inflateSync($buffer)\fR" 4
.IX Item "$status = $i->inflateSync($buffer)"
.ie n .IP "\fB\fB$i\fB\->\f(BIdict_adler()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BIdict_adler()\fB\fR" 4
.IX Item "$i->dict_adler()"
.ie n .IP "\fB\fB$i\fB\->\f(BImsg()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BImsg()\fB\fR" 4
.IX Item "$i->msg()"
.ie n .IP "\fB\fB$i\fB\->\f(BItotal_in()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BItotal_in()\fB\fR" 4
.IX Item "$i->total_in()"
.ie n .IP "\fB\fB$i\fB\->\f(BItotal_out()\fB\fR" 4
.el .IP "\fB\f(CB$i\fB\->\f(BItotal_out()\fB\fR" 4
.IX Item "$i->total_out()"
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1CHECKSUM FUNCTIONS\s0" 4
.IX Item "CHECKSUM FUNCTIONS"
.IP "Misc" 4
.IX Item "Misc"
.RS 4
.ie n .IP "my $version = \fICompress::Zlib::zlib_version()\fR;" 4
.el .IP "my \f(CW$version\fR = \fICompress::Zlib::zlib_version()\fR;" 4
.IX Item "my $version = Compress::Zlib::zlib_version();"
.RE
.RS 4
.RE
.IP "\s-1CONSTANTS\s0" 4
.IX Item "CONSTANTS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Config \- access Perl configuration information"
.IX Subsection "Config - access Perl configuration information"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fImyconfig()\fR, \fIconfig_sh()\fR, config_re($regex), config_vars(@names),
\&\fIbincompat_options()\fR, \fInon_bincompat_options()\fR, \fIcompile_date()\fR,
\&\fIlocal_patches()\fR, \fIheader_files()\fR
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.IP "\s-1GLOSSARY\s0" 4
.IX Item "GLOSSARY"
.IP "_" 4
.IX Item "_"
.PD
.PP
\&\f(CW\*(C`_a\*(C'\fR, \f(CW\*(C`_exe\*(C'\fR, \f(CW\*(C`_o\*(C'\fR
.IP "a" 4
.IX Item "a"
.PP
\&\f(CW\*(C`afs\*(C'\fR, \f(CW\*(C`afsroot\*(C'\fR, \f(CW\*(C`alignbytes\*(C'\fR, \f(CW\*(C`ansi2knr\*(C'\fR, \f(CW\*(C`aphostname\*(C'\fR,
\&\f(CW\*(C`api_revision\*(C'\fR, \f(CW\*(C`api_subversion\*(C'\fR, \f(CW\*(C`api_version\*(C'\fR, \f(CW\*(C`api_versionstring\*(C'\fR,
\&\f(CW\*(C`ar\*(C'\fR, \f(CW\*(C`archlib\*(C'\fR, \f(CW\*(C`archlibexp\*(C'\fR, \f(CW\*(C`archname\*(C'\fR, \f(CW\*(C`archname64\*(C'\fR, \f(CW\*(C`archobjs\*(C'\fR,
\&\f(CW\*(C`asctime_r_proto\*(C'\fR, \f(CW\*(C`awk\*(C'\fR
.IP "b" 4
.IX Item "b"
.PP
\&\f(CW\*(C`baserev\*(C'\fR, \f(CW\*(C`bash\*(C'\fR, \f(CW\*(C`bin\*(C'\fR, \f(CW\*(C`bin_ELF\*(C'\fR, \f(CW\*(C`binexp\*(C'\fR, \f(CW\*(C`bison\*(C'\fR,
\&\f(CW\*(C`bootstrap_charset\*(C'\fR, \f(CW\*(C`byacc\*(C'\fR, \f(CW\*(C`byteorder\*(C'\fR
.IP "c" 4
.IX Item "c"
.PP
\&\f(CW\*(C`c\*(C'\fR, \f(CW\*(C`castflags\*(C'\fR, \f(CW\*(C`cat\*(C'\fR, \f(CW\*(C`cc\*(C'\fR, \f(CW\*(C`cccdlflags\*(C'\fR, \f(CW\*(C`ccdlflags\*(C'\fR, \f(CW\*(C`ccflags\*(C'\fR,
\&\f(CW\*(C`ccflags_uselargefiles\*(C'\fR, \f(CW\*(C`ccname\*(C'\fR, \f(CW\*(C`ccsymbols\*(C'\fR, \f(CW\*(C`ccversion\*(C'\fR, \f(CW\*(C`cf_by\*(C'\fR,
\&\f(CW\*(C`cf_email\*(C'\fR, \f(CW\*(C`cf_time\*(C'\fR, \f(CW\*(C`charbits\*(C'\fR, \f(CW\*(C`charsize\*(C'\fR, \f(CW\*(C`chgrp\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR,
\&\f(CW\*(C`chown\*(C'\fR, \f(CW\*(C`clocktype\*(C'\fR, \f(CW\*(C`comm\*(C'\fR, \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`config_arg0\*(C'\fR,
\&\f(CW\*(C`config_argc\*(C'\fR, \f(CW\*(C`config_args\*(C'\fR, \f(CW\*(C`contains\*(C'\fR, \f(CW\*(C`cp\*(C'\fR, \f(CW\*(C`cpio\*(C'\fR, \f(CW\*(C`cpp\*(C'\fR,
\&\f(CW\*(C`cpp_stuff\*(C'\fR, \f(CW\*(C`cppccsymbols\*(C'\fR, \f(CW\*(C`cppflags\*(C'\fR, \f(CW\*(C`cpplast\*(C'\fR, \f(CW\*(C`cppminus\*(C'\fR,
\&\f(CW\*(C`cpprun\*(C'\fR, \f(CW\*(C`cppstdin\*(C'\fR, \f(CW\*(C`cppsymbols\*(C'\fR, \f(CW\*(C`crypt_r_proto\*(C'\fR, \f(CW\*(C`cryptlib\*(C'\fR,
\&\f(CW\*(C`csh\*(C'\fR, \f(CW\*(C`ctermid_r_proto\*(C'\fR, \f(CW\*(C`ctime_r_proto\*(C'\fR
.IP "d" 4
.IX Item "d"
.PP
\&\f(CW\*(C`d_\|_fwalk\*(C'\fR, \f(CW\*(C`d_access\*(C'\fR, \f(CW\*(C`d_accessx\*(C'\fR, \f(CW\*(C`d_aintl\*(C'\fR, \f(CW\*(C`d_alarm\*(C'\fR,
\&\f(CW\*(C`d_archlib\*(C'\fR, \f(CW\*(C`d_asctime64\*(C'\fR, \f(CW\*(C`d_asctime_r\*(C'\fR, \f(CW\*(C`d_atolf\*(C'\fR, \f(CW\*(C`d_atoll\*(C'\fR,
\&\f(CW\*(C`d_attribute_deprecated\*(C'\fR, \f(CW\*(C`d_attribute_format\*(C'\fR, \f(CW\*(C`d_attribute_malloc\*(C'\fR,
\&\f(CW\*(C`d_attribute_nonnull\*(C'\fR, \f(CW\*(C`d_attribute_noreturn\*(C'\fR, \f(CW\*(C`d_attribute_pure\*(C'\fR,
\&\f(CW\*(C`d_attribute_unused\*(C'\fR, \f(CW\*(C`d_attribute_warn_unused_result\*(C'\fR, \f(CW\*(C`d_bcmp\*(C'\fR,
\&\f(CW\*(C`d_bcopy\*(C'\fR, \f(CW\*(C`d_bsd\*(C'\fR, \f(CW\*(C`d_bsdgetpgrp\*(C'\fR, \f(CW\*(C`d_bsdsetpgrp\*(C'\fR,
\&\f(CW\*(C`d_builtin_choose_expr\*(C'\fR, \f(CW\*(C`d_builtin_expect\*(C'\fR, \f(CW\*(C`d_bzero\*(C'\fR,
\&\f(CW\*(C`d_c99_variadic_macros\*(C'\fR, \f(CW\*(C`d_casti32\*(C'\fR, \f(CW\*(C`d_castneg\*(C'\fR, \f(CW\*(C`d_charvspr\*(C'\fR,
\&\f(CW\*(C`d_chown\*(C'\fR, \f(CW\*(C`d_chroot\*(C'\fR, \f(CW\*(C`d_chsize\*(C'\fR, \f(CW\*(C`d_class\*(C'\fR, \f(CW\*(C`d_clearenv\*(C'\fR,
\&\f(CW\*(C`d_closedir\*(C'\fR, \f(CW\*(C`d_cmsghdr_s\*(C'\fR, \f(CW\*(C`d_const\*(C'\fR, \f(CW\*(C`d_copysignl\*(C'\fR, \f(CW\*(C`d_cplusplus\*(C'\fR,
\&\f(CW\*(C`d_crypt\*(C'\fR, \f(CW\*(C`d_crypt_r\*(C'\fR, \f(CW\*(C`d_csh\*(C'\fR, \f(CW\*(C`d_ctermid\*(C'\fR, \f(CW\*(C`d_ctermid_r\*(C'\fR,
\&\f(CW\*(C`d_ctime64\*(C'\fR, \f(CW\*(C`d_ctime_r\*(C'\fR, \f(CW\*(C`d_cuserid\*(C'\fR, \f(CW\*(C`d_dbl_dig\*(C'\fR, \f(CW\*(C`d_dbminitproto\*(C'\fR,
\&\f(CW\*(C`d_difftime\*(C'\fR, \f(CW\*(C`d_difftime64\*(C'\fR, \f(CW\*(C`d_dir_dd_fd\*(C'\fR, \f(CW\*(C`d_dirfd\*(C'\fR, \f(CW\*(C`d_dirnamlen\*(C'\fR,
\&\f(CW\*(C`d_dlerror\*(C'\fR, \f(CW\*(C`d_dlopen\*(C'\fR, \f(CW\*(C`d_dlsymun\*(C'\fR, \f(CW\*(C`d_dosuid\*(C'\fR, \f(CW\*(C`d_drand48_r\*(C'\fR,
\&\f(CW\*(C`d_drand48proto\*(C'\fR, \f(CW\*(C`d_dup2\*(C'\fR, \f(CW\*(C`d_eaccess\*(C'\fR, \f(CW\*(C`d_endgrent\*(C'\fR, \f(CW\*(C`d_endgrent_r\*(C'\fR,
\&\f(CW\*(C`d_endhent\*(C'\fR, \f(CW\*(C`d_endhostent_r\*(C'\fR, \f(CW\*(C`d_endnent\*(C'\fR, \f(CW\*(C`d_endnetent_r\*(C'\fR,
\&\f(CW\*(C`d_endpent\*(C'\fR, \f(CW\*(C`d_endprotoent_r\*(C'\fR, \f(CW\*(C`d_endpwent\*(C'\fR, \f(CW\*(C`d_endpwent_r\*(C'\fR,
\&\f(CW\*(C`d_endsent\*(C'\fR, \f(CW\*(C`d_endservent_r\*(C'\fR, \f(CW\*(C`d_eofnblk\*(C'\fR, \f(CW\*(C`d_eunice\*(C'\fR, \f(CW\*(C`d_faststdio\*(C'\fR,
\&\f(CW\*(C`d_fchdir\*(C'\fR, \f(CW\*(C`d_fchmod\*(C'\fR, \f(CW\*(C`d_fchown\*(C'\fR, \f(CW\*(C`d_fcntl\*(C'\fR, \f(CW\*(C`d_fcntl_can_lock\*(C'\fR,
\&\f(CW\*(C`d_fd_macros\*(C'\fR, \f(CW\*(C`d_fd_set\*(C'\fR, \f(CW\*(C`d_fds_bits\*(C'\fR, \f(CW\*(C`d_fgetpos\*(C'\fR, \f(CW\*(C`d_finite\*(C'\fR,
\&\f(CW\*(C`d_finitel\*(C'\fR, \f(CW\*(C`d_flexfnam\*(C'\fR, \f(CW\*(C`d_flock\*(C'\fR, \f(CW\*(C`d_flockproto\*(C'\fR, \f(CW\*(C`d_fork\*(C'\fR,
\&\f(CW\*(C`d_fp_class\*(C'\fR, \f(CW\*(C`d_fpathconf\*(C'\fR, \f(CW\*(C`d_fpclass\*(C'\fR, \f(CW\*(C`d_fpclassify\*(C'\fR,
\&\f(CW\*(C`d_fpclassl\*(C'\fR, \f(CW\*(C`d_fpos64_t\*(C'\fR, \f(CW\*(C`d_frexpl\*(C'\fR, \f(CW\*(C`d_fs_data_s\*(C'\fR, \f(CW\*(C`d_fseeko\*(C'\fR,
\&\f(CW\*(C`d_fsetpos\*(C'\fR, \f(CW\*(C`d_fstatfs\*(C'\fR, \f(CW\*(C`d_fstatvfs\*(C'\fR, \f(CW\*(C`d_fsync\*(C'\fR, \f(CW\*(C`d_ftello\*(C'\fR,
\&\f(CW\*(C`d_ftime\*(C'\fR, \f(CW\*(C`d_futimes\*(C'\fR, \f(CW\*(C`d_Gconvert\*(C'\fR, \f(CW\*(C`d_gdbm_ndbm_h_uses_prototypes\*(C'\fR,
\&\f(CW\*(C`d_gdbmndbm_h_uses_prototypes\*(C'\fR, \f(CW\*(C`d_getaddrinfo\*(C'\fR, \f(CW\*(C`d_getcwd\*(C'\fR,
\&\f(CW\*(C`d_getespwnam\*(C'\fR, \f(CW\*(C`d_getfsstat\*(C'\fR, \f(CW\*(C`d_getgrent\*(C'\fR, \f(CW\*(C`d_getgrent_r\*(C'\fR,
\&\f(CW\*(C`d_getgrgid_r\*(C'\fR, \f(CW\*(C`d_getgrnam_r\*(C'\fR, \f(CW\*(C`d_getgrps\*(C'\fR, \f(CW\*(C`d_gethbyaddr\*(C'\fR,
\&\f(CW\*(C`d_gethbyname\*(C'\fR, \f(CW\*(C`d_gethent\*(C'\fR, \f(CW\*(C`d_gethname\*(C'\fR, \f(CW\*(C`d_gethostbyaddr_r\*(C'\fR,
\&\f(CW\*(C`d_gethostbyname_r\*(C'\fR, \f(CW\*(C`d_gethostent_r\*(C'\fR, \f(CW\*(C`d_gethostprotos\*(C'\fR,
\&\f(CW\*(C`d_getitimer\*(C'\fR, \f(CW\*(C`d_getlogin\*(C'\fR, \f(CW\*(C`d_getlogin_r\*(C'\fR, \f(CW\*(C`d_getmnt\*(C'\fR,
\&\f(CW\*(C`d_getmntent\*(C'\fR, \f(CW\*(C`d_getnameinfo\*(C'\fR, \f(CW\*(C`d_getnbyaddr\*(C'\fR, \f(CW\*(C`d_getnbyname\*(C'\fR,
\&\f(CW\*(C`d_getnent\*(C'\fR, \f(CW\*(C`d_getnetbyaddr_r\*(C'\fR, \f(CW\*(C`d_getnetbyname_r\*(C'\fR, \f(CW\*(C`d_getnetent_r\*(C'\fR,
\&\f(CW\*(C`d_getnetprotos\*(C'\fR, \f(CW\*(C`d_getpagsz\*(C'\fR, \f(CW\*(C`d_getpbyname\*(C'\fR, \f(CW\*(C`d_getpbynumber\*(C'\fR,
\&\f(CW\*(C`d_getpent\*(C'\fR, \f(CW\*(C`d_getpgid\*(C'\fR, \f(CW\*(C`d_getpgrp\*(C'\fR, \f(CW\*(C`d_getpgrp2\*(C'\fR, \f(CW\*(C`d_getppid\*(C'\fR,
\&\f(CW\*(C`d_getprior\*(C'\fR, \f(CW\*(C`d_getprotobyname_r\*(C'\fR, \f(CW\*(C`d_getprotobynumber_r\*(C'\fR,
\&\f(CW\*(C`d_getprotoent_r\*(C'\fR, \f(CW\*(C`d_getprotoprotos\*(C'\fR, \f(CW\*(C`d_getprpwnam\*(C'\fR, \f(CW\*(C`d_getpwent\*(C'\fR,
\&\f(CW\*(C`d_getpwent_r\*(C'\fR, \f(CW\*(C`d_getpwnam_r\*(C'\fR, \f(CW\*(C`d_getpwuid_r\*(C'\fR, \f(CW\*(C`d_getsbyname\*(C'\fR,
\&\f(CW\*(C`d_getsbyport\*(C'\fR, \f(CW\*(C`d_getsent\*(C'\fR, \f(CW\*(C`d_getservbyname_r\*(C'\fR, \f(CW\*(C`d_getservbyport_r\*(C'\fR,
\&\f(CW\*(C`d_getservent_r\*(C'\fR, \f(CW\*(C`d_getservprotos\*(C'\fR, \f(CW\*(C`d_getspnam\*(C'\fR, \f(CW\*(C`d_getspnam_r\*(C'\fR,
\&\f(CW\*(C`d_gettimeod\*(C'\fR, \f(CW\*(C`d_gmtime64\*(C'\fR, \f(CW\*(C`d_gmtime_r\*(C'\fR, \f(CW\*(C`d_gnulibc\*(C'\fR, \f(CW\*(C`d_grpasswd\*(C'\fR,
\&\f(CW\*(C`d_hasmntopt\*(C'\fR, \f(CW\*(C`d_htonl\*(C'\fR, \f(CW\*(C`d_ilogbl\*(C'\fR, \f(CW\*(C`d_inc_version_list\*(C'\fR, \f(CW\*(C`d_index\*(C'\fR,
\&\f(CW\*(C`d_inetaton\*(C'\fR, \f(CW\*(C`d_inetntop\*(C'\fR, \f(CW\*(C`d_inetpton\*(C'\fR, \f(CW\*(C`d_int64_t\*(C'\fR, \f(CW\*(C`d_ip_mreq\*(C'\fR,
\&\f(CW\*(C`d_ip_mreq_source\*(C'\fR, \f(CW\*(C`d_ipv6_mreq\*(C'\fR, \f(CW\*(C`d_ipv6_mreq_source\*(C'\fR, \f(CW\*(C`d_isascii\*(C'\fR,
\&\f(CW\*(C`d_isblank\*(C'\fR, \f(CW\*(C`d_isfinite\*(C'\fR, \f(CW\*(C`d_isinf\*(C'\fR, \f(CW\*(C`d_isnan\*(C'\fR, \f(CW\*(C`d_isnanl\*(C'\fR,
\&\f(CW\*(C`d_killpg\*(C'\fR, \f(CW\*(C`d_lchown\*(C'\fR, \f(CW\*(C`d_ldbl_dig\*(C'\fR, \f(CW\*(C`d_libm_lib_version\*(C'\fR, \f(CW\*(C`d_link\*(C'\fR,
\&\f(CW\*(C`d_localtime64\*(C'\fR, \f(CW\*(C`d_localtime_r\*(C'\fR, \f(CW\*(C`d_localtime_r_needs_tzset\*(C'\fR,
\&\f(CW\*(C`d_locconv\*(C'\fR, \f(CW\*(C`d_lockf\*(C'\fR, \f(CW\*(C`d_longdbl\*(C'\fR, \f(CW\*(C`d_longlong\*(C'\fR, \f(CW\*(C`d_lseekproto\*(C'\fR,
\&\f(CW\*(C`d_lstat\*(C'\fR, \f(CW\*(C`d_madvise\*(C'\fR, \f(CW\*(C`d_malloc_good_size\*(C'\fR, \f(CW\*(C`d_malloc_size\*(C'\fR,
\&\f(CW\*(C`d_mblen\*(C'\fR, \f(CW\*(C`d_mbstowcs\*(C'\fR, \f(CW\*(C`d_mbtowc\*(C'\fR, \f(CW\*(C`d_memchr\*(C'\fR, \f(CW\*(C`d_memcmp\*(C'\fR,
\&\f(CW\*(C`d_memcpy\*(C'\fR, \f(CW\*(C`d_memmove\*(C'\fR, \f(CW\*(C`d_memset\*(C'\fR, \f(CW\*(C`d_mkdir\*(C'\fR, \f(CW\*(C`d_mkdtemp\*(C'\fR,
\&\f(CW\*(C`d_mkfifo\*(C'\fR, \f(CW\*(C`d_mkstemp\*(C'\fR, \f(CW\*(C`d_mkstemps\*(C'\fR, \f(CW\*(C`d_mktime\*(C'\fR, \f(CW\*(C`d_mktime64\*(C'\fR,
\&\f(CW\*(C`d_mmap\*(C'\fR, \f(CW\*(C`d_modfl\*(C'\fR, \f(CW\*(C`d_modfl_pow32_bug\*(C'\fR, \f(CW\*(C`d_modflproto\*(C'\fR,
\&\f(CW\*(C`d_mprotect\*(C'\fR, \f(CW\*(C`d_msg\*(C'\fR, \f(CW\*(C`d_msg_ctrunc\*(C'\fR, \f(CW\*(C`d_msg_dontroute\*(C'\fR, \f(CW\*(C`d_msg_oob\*(C'\fR,
\&\f(CW\*(C`d_msg_peek\*(C'\fR, \f(CW\*(C`d_msg_proxy\*(C'\fR, \f(CW\*(C`d_msgctl\*(C'\fR, \f(CW\*(C`d_msgget\*(C'\fR, \f(CW\*(C`d_msghdr_s\*(C'\fR,
\&\f(CW\*(C`d_msgrcv\*(C'\fR, \f(CW\*(C`d_msgsnd\*(C'\fR, \f(CW\*(C`d_msync\*(C'\fR, \f(CW\*(C`d_munmap\*(C'\fR, \f(CW\*(C`d_mymalloc\*(C'\fR,
\&\f(CW\*(C`d_ndbm\*(C'\fR, \f(CW\*(C`d_ndbm_h_uses_prototypes\*(C'\fR, \f(CW\*(C`d_nice\*(C'\fR, \f(CW\*(C`d_nl_langinfo\*(C'\fR,
\&\f(CW\*(C`d_nv_preserves_uv\*(C'\fR, \f(CW\*(C`d_nv_zero_is_allbits_zero\*(C'\fR, \f(CW\*(C`d_off64_t\*(C'\fR,
\&\f(CW\*(C`d_old_pthread_create_joinable\*(C'\fR, \f(CW\*(C`d_oldpthreads\*(C'\fR, \f(CW\*(C`d_oldsock\*(C'\fR,
\&\f(CW\*(C`d_open3\*(C'\fR, \f(CW\*(C`d_pathconf\*(C'\fR, \f(CW\*(C`d_pause\*(C'\fR, \f(CW\*(C`d_perl_otherlibdirs\*(C'\fR,
\&\f(CW\*(C`d_phostname\*(C'\fR, \f(CW\*(C`d_pipe\*(C'\fR, \f(CW\*(C`d_poll\*(C'\fR, \f(CW\*(C`d_portable\*(C'\fR, \f(CW\*(C`d_prctl\*(C'\fR,
\&\f(CW\*(C`d_prctl_set_name\*(C'\fR, \f(CW\*(C`d_PRId64\*(C'\fR, \f(CW\*(C`d_PRIeldbl\*(C'\fR, \f(CW\*(C`d_PRIEUldbl\*(C'\fR,
\&\f(CW\*(C`d_PRIfldbl\*(C'\fR, \f(CW\*(C`d_PRIFUldbl\*(C'\fR, \f(CW\*(C`d_PRIgldbl\*(C'\fR, \f(CW\*(C`d_PRIGUldbl\*(C'\fR, \f(CW\*(C`d_PRIi64\*(C'\fR,
\&\f(CW\*(C`d_printf_format_null\*(C'\fR, \f(CW\*(C`d_PRIo64\*(C'\fR, \f(CW\*(C`d_PRIu64\*(C'\fR, \f(CW\*(C`d_PRIx64\*(C'\fR,
\&\f(CW\*(C`d_PRIXU64\*(C'\fR, \f(CW\*(C`d_procselfexe\*(C'\fR, \f(CW\*(C`d_pseudofork\*(C'\fR, \f(CW\*(C`d_pthread_atfork\*(C'\fR,
\&\f(CW\*(C`d_pthread_attr_setscope\*(C'\fR, \f(CW\*(C`d_pthread_yield\*(C'\fR, \f(CW\*(C`d_pwage\*(C'\fR, \f(CW\*(C`d_pwchange\*(C'\fR,
\&\f(CW\*(C`d_pwclass\*(C'\fR, \f(CW\*(C`d_pwcomment\*(C'\fR, \f(CW\*(C`d_pwexpire\*(C'\fR, \f(CW\*(C`d_pwgecos\*(C'\fR, \f(CW\*(C`d_pwpasswd\*(C'\fR,
\&\f(CW\*(C`d_pwquota\*(C'\fR, \f(CW\*(C`d_qgcvt\*(C'\fR, \f(CW\*(C`d_quad\*(C'\fR, \f(CW\*(C`d_random_r\*(C'\fR, \f(CW\*(C`d_readdir\*(C'\fR,
\&\f(CW\*(C`d_readdir64_r\*(C'\fR, \f(CW\*(C`d_readdir_r\*(C'\fR, \f(CW\*(C`d_readlink\*(C'\fR, \f(CW\*(C`d_readv\*(C'\fR, \f(CW\*(C`d_recvmsg\*(C'\fR,
\&\f(CW\*(C`d_rename\*(C'\fR, \f(CW\*(C`d_rewinddir\*(C'\fR, \f(CW\*(C`d_rmdir\*(C'\fR, \f(CW\*(C`d_safebcpy\*(C'\fR, \f(CW\*(C`d_safemcpy\*(C'\fR,
\&\f(CW\*(C`d_sanemcmp\*(C'\fR, \f(CW\*(C`d_sbrkproto\*(C'\fR, \f(CW\*(C`d_scalbnl\*(C'\fR, \f(CW\*(C`d_sched_yield\*(C'\fR,
\&\f(CW\*(C`d_scm_rights\*(C'\fR, \f(CW\*(C`d_SCNfldbl\*(C'\fR, \f(CW\*(C`d_seekdir\*(C'\fR, \f(CW\*(C`d_select\*(C'\fR, \f(CW\*(C`d_sem\*(C'\fR,
\&\f(CW\*(C`d_semctl\*(C'\fR, \f(CW\*(C`d_semctl_semid_ds\*(C'\fR, \f(CW\*(C`d_semctl_semun\*(C'\fR, \f(CW\*(C`d_semget\*(C'\fR,
\&\f(CW\*(C`d_semop\*(C'\fR, \f(CW\*(C`d_sendmsg\*(C'\fR, \f(CW\*(C`d_setegid\*(C'\fR, \f(CW\*(C`d_seteuid\*(C'\fR, \f(CW\*(C`d_setgrent\*(C'\fR,
\&\f(CW\*(C`d_setgrent_r\*(C'\fR, \f(CW\*(C`d_setgrps\*(C'\fR, \f(CW\*(C`d_sethent\*(C'\fR, \f(CW\*(C`d_sethostent_r\*(C'\fR,
\&\f(CW\*(C`d_setitimer\*(C'\fR, \f(CW\*(C`d_setlinebuf\*(C'\fR, \f(CW\*(C`d_setlocale\*(C'\fR, \f(CW\*(C`d_setlocale_r\*(C'\fR,
\&\f(CW\*(C`d_setnent\*(C'\fR, \f(CW\*(C`d_setnetent_r\*(C'\fR, \f(CW\*(C`d_setpent\*(C'\fR, \f(CW\*(C`d_setpgid\*(C'\fR, \f(CW\*(C`d_setpgrp\*(C'\fR,
\&\f(CW\*(C`d_setpgrp2\*(C'\fR, \f(CW\*(C`d_setprior\*(C'\fR, \f(CW\*(C`d_setproctitle\*(C'\fR, \f(CW\*(C`d_setprotoent_r\*(C'\fR,
\&\f(CW\*(C`d_setpwent\*(C'\fR, \f(CW\*(C`d_setpwent_r\*(C'\fR, \f(CW\*(C`d_setregid\*(C'\fR, \f(CW\*(C`d_setresgid\*(C'\fR,
\&\f(CW\*(C`d_setresuid\*(C'\fR, \f(CW\*(C`d_setreuid\*(C'\fR, \f(CW\*(C`d_setrgid\*(C'\fR, \f(CW\*(C`d_setruid\*(C'\fR, \f(CW\*(C`d_setsent\*(C'\fR,
\&\f(CW\*(C`d_setservent_r\*(C'\fR, \f(CW\*(C`d_setsid\*(C'\fR, \f(CW\*(C`d_setvbuf\*(C'\fR, \f(CW\*(C`d_sfio\*(C'\fR, \f(CW\*(C`d_shm\*(C'\fR,
\&\f(CW\*(C`d_shmat\*(C'\fR, \f(CW\*(C`d_shmatprototype\*(C'\fR, \f(CW\*(C`d_shmctl\*(C'\fR, \f(CW\*(C`d_shmdt\*(C'\fR, \f(CW\*(C`d_shmget\*(C'\fR,
\&\f(CW\*(C`d_sigaction\*(C'\fR, \f(CW\*(C`d_signbit\*(C'\fR, \f(CW\*(C`d_sigprocmask\*(C'\fR, \f(CW\*(C`d_sigsetjmp\*(C'\fR,
\&\f(CW\*(C`d_sin6_scope_id\*(C'\fR, \f(CW\*(C`d_sitearch\*(C'\fR, \f(CW\*(C`d_snprintf\*(C'\fR, \f(CW\*(C`d_sockaddr_in6\*(C'\fR,
\&\f(CW\*(C`d_sockaddr_sa_len\*(C'\fR, \f(CW\*(C`d_sockatmark\*(C'\fR, \f(CW\*(C`d_sockatmarkproto\*(C'\fR, \f(CW\*(C`d_socket\*(C'\fR,
\&\f(CW\*(C`d_socklen_t\*(C'\fR, \f(CW\*(C`d_sockpair\*(C'\fR, \f(CW\*(C`d_socks5_init\*(C'\fR,
\&\f(CW\*(C`d_sprintf_returns_strlen\*(C'\fR, \f(CW\*(C`d_sqrtl\*(C'\fR, \f(CW\*(C`d_srand48_r\*(C'\fR, \f(CW\*(C`d_srandom_r\*(C'\fR,
\&\f(CW\*(C`d_sresgproto\*(C'\fR, \f(CW\*(C`d_sresuproto\*(C'\fR, \f(CW\*(C`d_statblks\*(C'\fR, \f(CW\*(C`d_statfs_f_flags\*(C'\fR,
\&\f(CW\*(C`d_statfs_s\*(C'\fR, \f(CW\*(C`d_static_inline\*(C'\fR, \f(CW\*(C`d_statvfs\*(C'\fR, \f(CW\*(C`d_stdio_cnt_lval\*(C'\fR,
\&\f(CW\*(C`d_stdio_ptr_lval\*(C'\fR, \f(CW\*(C`d_stdio_ptr_lval_nochange_cnt\*(C'\fR,
\&\f(CW\*(C`d_stdio_ptr_lval_sets_cnt\*(C'\fR, \f(CW\*(C`d_stdio_stream_array\*(C'\fR, \f(CW\*(C`d_stdiobase\*(C'\fR,
\&\f(CW\*(C`d_stdstdio\*(C'\fR, \f(CW\*(C`d_strchr\*(C'\fR, \f(CW\*(C`d_strcoll\*(C'\fR, \f(CW\*(C`d_strctcpy\*(C'\fR, \f(CW\*(C`d_strerrm\*(C'\fR,
\&\f(CW\*(C`d_strerror\*(C'\fR, \f(CW\*(C`d_strerror_r\*(C'\fR, \f(CW\*(C`d_strftime\*(C'\fR, \f(CW\*(C`d_strlcat\*(C'\fR, \f(CW\*(C`d_strlcpy\*(C'\fR,
\&\f(CW\*(C`d_strtod\*(C'\fR, \f(CW\*(C`d_strtol\*(C'\fR, \f(CW\*(C`d_strtold\*(C'\fR, \f(CW\*(C`d_strtoll\*(C'\fR, \f(CW\*(C`d_strtoq\*(C'\fR,
\&\f(CW\*(C`d_strtoul\*(C'\fR, \f(CW\*(C`d_strtoull\*(C'\fR, \f(CW\*(C`d_strtouq\*(C'\fR, \f(CW\*(C`d_strxfrm\*(C'\fR, \f(CW\*(C`d_suidsafe\*(C'\fR,
\&\f(CW\*(C`d_symlink\*(C'\fR, \f(CW\*(C`d_syscall\*(C'\fR, \f(CW\*(C`d_syscallproto\*(C'\fR, \f(CW\*(C`d_sysconf\*(C'\fR,
\&\f(CW\*(C`d_sysernlst\*(C'\fR, \f(CW\*(C`d_syserrlst\*(C'\fR, \f(CW\*(C`d_system\*(C'\fR, \f(CW\*(C`d_tcgetpgrp\*(C'\fR,
\&\f(CW\*(C`d_tcsetpgrp\*(C'\fR, \f(CW\*(C`d_telldir\*(C'\fR, \f(CW\*(C`d_telldirproto\*(C'\fR, \f(CW\*(C`d_time\*(C'\fR, \f(CW\*(C`d_timegm\*(C'\fR,
\&\f(CW\*(C`d_times\*(C'\fR, \f(CW\*(C`d_tm_tm_gmtoff\*(C'\fR, \f(CW\*(C`d_tm_tm_zone\*(C'\fR, \f(CW\*(C`d_tmpnam_r\*(C'\fR,
\&\f(CW\*(C`d_truncate\*(C'\fR, \f(CW\*(C`d_ttyname_r\*(C'\fR, \f(CW\*(C`d_tzname\*(C'\fR, \f(CW\*(C`d_u32align\*(C'\fR, \f(CW\*(C`d_ualarm\*(C'\fR,
\&\f(CW\*(C`d_umask\*(C'\fR, \f(CW\*(C`d_uname\*(C'\fR, \f(CW\*(C`d_union_semun\*(C'\fR, \f(CW\*(C`d_unordered\*(C'\fR, \f(CW\*(C`d_unsetenv\*(C'\fR,
\&\f(CW\*(C`d_usleep\*(C'\fR, \f(CW\*(C`d_usleepproto\*(C'\fR, \f(CW\*(C`d_ustat\*(C'\fR, \f(CW\*(C`d_vendorarch\*(C'\fR, \f(CW\*(C`d_vendorbin\*(C'\fR,
\&\f(CW\*(C`d_vendorlib\*(C'\fR, \f(CW\*(C`d_vendorscript\*(C'\fR, \f(CW\*(C`d_vfork\*(C'\fR, \f(CW\*(C`d_void_closedir\*(C'\fR,
\&\f(CW\*(C`d_voidsig\*(C'\fR, \f(CW\*(C`d_voidtty\*(C'\fR, \f(CW\*(C`d_volatile\*(C'\fR, \f(CW\*(C`d_vprintf\*(C'\fR, \f(CW\*(C`d_vsnprintf\*(C'\fR,
\&\f(CW\*(C`d_wait4\*(C'\fR, \f(CW\*(C`d_waitpid\*(C'\fR, \f(CW\*(C`d_wcstombs\*(C'\fR, \f(CW\*(C`d_wctomb\*(C'\fR, \f(CW\*(C`d_writev\*(C'\fR,
\&\f(CW\*(C`d_xenix\*(C'\fR, \f(CW\*(C`date\*(C'\fR, \f(CW\*(C`db_hashtype\*(C'\fR, \f(CW\*(C`db_prefixtype\*(C'\fR, \f(CW\*(C`db_version_major\*(C'\fR,
\&\f(CW\*(C`db_version_minor\*(C'\fR, \f(CW\*(C`db_version_patch\*(C'\fR, \f(CW\*(C`defvoidused\*(C'\fR, \f(CW\*(C`direntrytype\*(C'\fR,
\&\f(CW\*(C`dlext\*(C'\fR, \f(CW\*(C`dlsrc\*(C'\fR, \f(CW\*(C`doublesize\*(C'\fR, \f(CW\*(C`drand01\*(C'\fR, \f(CW\*(C`drand48_r_proto\*(C'\fR,
\&\f(CW\*(C`dtrace\*(C'\fR, \f(CW\*(C`dynamic_ext\*(C'\fR
.IP "e" 4
.IX Item "e"
.PP
\&\f(CW\*(C`eagain\*(C'\fR, \f(CW\*(C`ebcdic\*(C'\fR, \f(CW\*(C`echo\*(C'\fR, \f(CW\*(C`egrep\*(C'\fR, \f(CW\*(C`emacs\*(C'\fR, \f(CW\*(C`endgrent_r_proto\*(C'\fR,
\&\f(CW\*(C`endhostent_r_proto\*(C'\fR, \f(CW\*(C`endnetent_r_proto\*(C'\fR, \f(CW\*(C`endprotoent_r_proto\*(C'\fR,
\&\f(CW\*(C`endpwent_r_proto\*(C'\fR, \f(CW\*(C`endservent_r_proto\*(C'\fR, \f(CW\*(C`eunicefix\*(C'\fR, \f(CW\*(C`exe_ext\*(C'\fR,
\&\f(CW\*(C`expr\*(C'\fR, \f(CW\*(C`extensions\*(C'\fR, \f(CW\*(C`extern_C\*(C'\fR, \f(CW\*(C`extras\*(C'\fR
.IP "f" 4
.IX Item "f"
.PP
\&\f(CW\*(C`fflushall\*(C'\fR, \f(CW\*(C`fflushNULL\*(C'\fR, \f(CW\*(C`find\*(C'\fR, \f(CW\*(C`firstmakefile\*(C'\fR, \f(CW\*(C`flex\*(C'\fR,
\&\f(CW\*(C`fpossize\*(C'\fR, \f(CW\*(C`fpostype\*(C'\fR, \f(CW\*(C`freetype\*(C'\fR, \f(CW\*(C`from\*(C'\fR, \f(CW\*(C`full_ar\*(C'\fR, \f(CW\*(C`full_csh\*(C'\fR,
\&\f(CW\*(C`full_sed\*(C'\fR
.IP "g" 4
.IX Item "g"
.PP
\&\f(CW\*(C`gccansipedantic\*(C'\fR, \f(CW\*(C`gccosandvers\*(C'\fR, \f(CW\*(C`gccversion\*(C'\fR, \f(CW\*(C`getgrent_r_proto\*(C'\fR,
\&\f(CW\*(C`getgrgid_r_proto\*(C'\fR, \f(CW\*(C`getgrnam_r_proto\*(C'\fR, \f(CW\*(C`gethostbyaddr_r_proto\*(C'\fR,
\&\f(CW\*(C`gethostbyname_r_proto\*(C'\fR, \f(CW\*(C`gethostent_r_proto\*(C'\fR, \f(CW\*(C`getlogin_r_proto\*(C'\fR,
\&\f(CW\*(C`getnetbyaddr_r_proto\*(C'\fR, \f(CW\*(C`getnetbyname_r_proto\*(C'\fR, \f(CW\*(C`getnetent_r_proto\*(C'\fR,
\&\f(CW\*(C`getprotobyname_r_proto\*(C'\fR, \f(CW\*(C`getprotobynumber_r_proto\*(C'\fR,
\&\f(CW\*(C`getprotoent_r_proto\*(C'\fR, \f(CW\*(C`getpwent_r_proto\*(C'\fR, \f(CW\*(C`getpwnam_r_proto\*(C'\fR,
\&\f(CW\*(C`getpwuid_r_proto\*(C'\fR, \f(CW\*(C`getservbyname_r_proto\*(C'\fR, \f(CW\*(C`getservbyport_r_proto\*(C'\fR,
\&\f(CW\*(C`getservent_r_proto\*(C'\fR, \f(CW\*(C`getspnam_r_proto\*(C'\fR, \f(CW\*(C`gidformat\*(C'\fR, \f(CW\*(C`gidsign\*(C'\fR,
\&\f(CW\*(C`gidsize\*(C'\fR, \f(CW\*(C`gidtype\*(C'\fR, \f(CW\*(C`glibpth\*(C'\fR, \f(CW\*(C`gmake\*(C'\fR, \f(CW\*(C`gmtime_r_proto\*(C'\fR,
\&\f(CW\*(C`gnulibc_version\*(C'\fR, \f(CW\*(C`grep\*(C'\fR, \f(CW\*(C`groupcat\*(C'\fR, \f(CW\*(C`groupstype\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR
.IP "h" 4
.IX Item "h"
.PP
\&\f(CW\*(C`h_fcntl\*(C'\fR, \f(CW\*(C`h_sysfile\*(C'\fR, \f(CW\*(C`hint\*(C'\fR, \f(CW\*(C`hostcat\*(C'\fR, \f(CW\*(C`html1dir\*(C'\fR, \f(CW\*(C`html1direxp\*(C'\fR,
\&\f(CW\*(C`html3dir\*(C'\fR, \f(CW\*(C`html3direxp\*(C'\fR
.IP "i" 4
.IX Item "i"
.PP
\&\f(CW\*(C`i16size\*(C'\fR, \f(CW\*(C`i16type\*(C'\fR, \f(CW\*(C`i32size\*(C'\fR, \f(CW\*(C`i32type\*(C'\fR, \f(CW\*(C`i64size\*(C'\fR, \f(CW\*(C`i64type\*(C'\fR,
\&\f(CW\*(C`i8size\*(C'\fR, \f(CW\*(C`i8type\*(C'\fR, \f(CW\*(C`i_arpainet\*(C'\fR, \f(CW\*(C`i_assert\*(C'\fR, \f(CW\*(C`i_bsdioctl\*(C'\fR,
\&\f(CW\*(C`i_crypt\*(C'\fR, \f(CW\*(C`i_db\*(C'\fR, \f(CW\*(C`i_dbm\*(C'\fR, \f(CW\*(C`i_dirent\*(C'\fR, \f(CW\*(C`i_dld\*(C'\fR, \f(CW\*(C`i_dlfcn\*(C'\fR,
\&\f(CW\*(C`i_fcntl\*(C'\fR, \f(CW\*(C`i_float\*(C'\fR, \f(CW\*(C`i_fp\*(C'\fR, \f(CW\*(C`i_fp_class\*(C'\fR, \f(CW\*(C`i_gdbm\*(C'\fR, \f(CW\*(C`i_gdbm_ndbm\*(C'\fR,
\&\f(CW\*(C`i_gdbmndbm\*(C'\fR, \f(CW\*(C`i_grp\*(C'\fR, \f(CW\*(C`i_ieeefp\*(C'\fR, \f(CW\*(C`i_inttypes\*(C'\fR, \f(CW\*(C`i_langinfo\*(C'\fR,
\&\f(CW\*(C`i_libutil\*(C'\fR, \f(CW\*(C`i_limits\*(C'\fR, \f(CW\*(C`i_locale\*(C'\fR, \f(CW\*(C`i_machcthr\*(C'\fR, \f(CW\*(C`i_malloc\*(C'\fR,
\&\f(CW\*(C`i_mallocmalloc\*(C'\fR, \f(CW\*(C`i_math\*(C'\fR, \f(CW\*(C`i_memory\*(C'\fR, \f(CW\*(C`i_mntent\*(C'\fR, \f(CW\*(C`i_ndbm\*(C'\fR,
\&\f(CW\*(C`i_netdb\*(C'\fR, \f(CW\*(C`i_neterrno\*(C'\fR, \f(CW\*(C`i_netinettcp\*(C'\fR, \f(CW\*(C`i_niin\*(C'\fR, \f(CW\*(C`i_poll\*(C'\fR,
\&\f(CW\*(C`i_prot\*(C'\fR, \f(CW\*(C`i_pthread\*(C'\fR, \f(CW\*(C`i_pwd\*(C'\fR, \f(CW\*(C`i_rpcsvcdbm\*(C'\fR, \f(CW\*(C`i_sfio\*(C'\fR, \f(CW\*(C`i_sgtty\*(C'\fR,
\&\f(CW\*(C`i_shadow\*(C'\fR, \f(CW\*(C`i_socks\*(C'\fR, \f(CW\*(C`i_stdarg\*(C'\fR, \f(CW\*(C`i_stdbool\*(C'\fR, \f(CW\*(C`i_stddef\*(C'\fR,
\&\f(CW\*(C`i_stdlib\*(C'\fR, \f(CW\*(C`i_string\*(C'\fR, \f(CW\*(C`i_sunmath\*(C'\fR, \f(CW\*(C`i_sysaccess\*(C'\fR, \f(CW\*(C`i_sysdir\*(C'\fR,
\&\f(CW\*(C`i_sysfile\*(C'\fR, \f(CW\*(C`i_sysfilio\*(C'\fR, \f(CW\*(C`i_sysin\*(C'\fR, \f(CW\*(C`i_sysioctl\*(C'\fR, \f(CW\*(C`i_syslog\*(C'\fR,
\&\f(CW\*(C`i_sysmman\*(C'\fR, \f(CW\*(C`i_sysmode\*(C'\fR, \f(CW\*(C`i_sysmount\*(C'\fR, \f(CW\*(C`i_sysndir\*(C'\fR, \f(CW\*(C`i_sysparam\*(C'\fR,
\&\f(CW\*(C`i_syspoll\*(C'\fR, \f(CW\*(C`i_sysresrc\*(C'\fR, \f(CW\*(C`i_syssecrt\*(C'\fR, \f(CW\*(C`i_sysselct\*(C'\fR, \f(CW\*(C`i_syssockio\*(C'\fR,
\&\f(CW\*(C`i_sysstat\*(C'\fR, \f(CW\*(C`i_sysstatfs\*(C'\fR, \f(CW\*(C`i_sysstatvfs\*(C'\fR, \f(CW\*(C`i_systime\*(C'\fR, \f(CW\*(C`i_systimek\*(C'\fR,
\&\f(CW\*(C`i_systimes\*(C'\fR, \f(CW\*(C`i_systypes\*(C'\fR, \f(CW\*(C`i_sysuio\*(C'\fR, \f(CW\*(C`i_sysun\*(C'\fR, \f(CW\*(C`i_sysutsname\*(C'\fR,
\&\f(CW\*(C`i_sysvfs\*(C'\fR, \f(CW\*(C`i_syswait\*(C'\fR, \f(CW\*(C`i_termio\*(C'\fR, \f(CW\*(C`i_termios\*(C'\fR, \f(CW\*(C`i_time\*(C'\fR,
\&\f(CW\*(C`i_unistd\*(C'\fR, \f(CW\*(C`i_ustat\*(C'\fR, \f(CW\*(C`i_utime\*(C'\fR, \f(CW\*(C`i_values\*(C'\fR, \f(CW\*(C`i_varargs\*(C'\fR,
\&\f(CW\*(C`i_varhdr\*(C'\fR, \f(CW\*(C`i_vfork\*(C'\fR, \f(CW\*(C`ignore_versioned_solibs\*(C'\fR, \f(CW\*(C`inc_version_list\*(C'\fR,
\&\f(CW\*(C`inc_version_list_init\*(C'\fR, \f(CW\*(C`incpath\*(C'\fR, \f(CW\*(C`inews\*(C'\fR, \f(CW\*(C`initialinstalllocation\*(C'\fR,
\&\f(CW\*(C`installarchlib\*(C'\fR, \f(CW\*(C`installbin\*(C'\fR, \f(CW\*(C`installhtml1dir\*(C'\fR, \f(CW\*(C`installhtml3dir\*(C'\fR,
\&\f(CW\*(C`installman1dir\*(C'\fR, \f(CW\*(C`installman3dir\*(C'\fR, \f(CW\*(C`installprefix\*(C'\fR,
\&\f(CW\*(C`installprefixexp\*(C'\fR, \f(CW\*(C`installprivlib\*(C'\fR, \f(CW\*(C`installscript\*(C'\fR,
\&\f(CW\*(C`installsitearch\*(C'\fR, \f(CW\*(C`installsitebin\*(C'\fR, \f(CW\*(C`installsitehtml1dir\*(C'\fR,
\&\f(CW\*(C`installsitehtml3dir\*(C'\fR, \f(CW\*(C`installsitelib\*(C'\fR, \f(CW\*(C`installsiteman1dir\*(C'\fR,
\&\f(CW\*(C`installsiteman3dir\*(C'\fR, \f(CW\*(C`installsitescript\*(C'\fR, \f(CW\*(C`installstyle\*(C'\fR,
\&\f(CW\*(C`installusrbinperl\*(C'\fR, \f(CW\*(C`installvendorarch\*(C'\fR, \f(CW\*(C`installvendorbin\*(C'\fR,
\&\f(CW\*(C`installvendorhtml1dir\*(C'\fR, \f(CW\*(C`installvendorhtml3dir\*(C'\fR, \f(CW\*(C`installvendorlib\*(C'\fR,
\&\f(CW\*(C`installvendorman1dir\*(C'\fR, \f(CW\*(C`installvendorman3dir\*(C'\fR, \f(CW\*(C`installvendorscript\*(C'\fR,
\&\f(CW\*(C`intsize\*(C'\fR, \f(CW\*(C`issymlink\*(C'\fR, \f(CW\*(C`ivdformat\*(C'\fR, \f(CW\*(C`ivsize\*(C'\fR, \f(CW\*(C`ivtype\*(C'\fR
.IP "k" 4
.IX Item "k"
.PP
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`ksh\*(C'\fR
.IP "l" 4
.IX Item "l"
.PP
\&\f(CW\*(C`ld\*(C'\fR, \f(CW\*(C`ld_can_script\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR,
\&\f(CW\*(C`ldflags_uselargefiles\*(C'\fR, \f(CW\*(C`ldlibpthname\*(C'\fR, \f(CW\*(C`less\*(C'\fR, \f(CW\*(C`lib_ext\*(C'\fR, \f(CW\*(C`libc\*(C'\fR,
\&\f(CW\*(C`libperl\*(C'\fR, \f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`libs\*(C'\fR, \f(CW\*(C`libsdirs\*(C'\fR, \f(CW\*(C`libsfiles\*(C'\fR, \f(CW\*(C`libsfound\*(C'\fR,
\&\f(CW\*(C`libspath\*(C'\fR, \f(CW\*(C`libswanted\*(C'\fR, \f(CW\*(C`libswanted_uselargefiles\*(C'\fR, \f(CW\*(C`line\*(C'\fR, \f(CW\*(C`lint\*(C'\fR,
\&\f(CW\*(C`lkflags\*(C'\fR, \f(CW\*(C`ln\*(C'\fR, \f(CW\*(C`lns\*(C'\fR, \f(CW\*(C`localtime_r_proto\*(C'\fR, \f(CW\*(C`locincpth\*(C'\fR,
\&\f(CW\*(C`loclibpth\*(C'\fR, \f(CW\*(C`longdblsize\*(C'\fR, \f(CW\*(C`longlongsize\*(C'\fR, \f(CW\*(C`longsize\*(C'\fR, \f(CW\*(C`lp\*(C'\fR, \f(CW\*(C`lpr\*(C'\fR,
\&\f(CW\*(C`ls\*(C'\fR, \f(CW\*(C`lseeksize\*(C'\fR, \f(CW\*(C`lseektype\*(C'\fR
.IP "m" 4
.IX Item "m"
.PP
\&\f(CW\*(C`mad\*(C'\fR, \f(CW\*(C`madlyh\*(C'\fR, \f(CW\*(C`madlyobj\*(C'\fR, \f(CW\*(C`madlysrc\*(C'\fR, \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`mailx\*(C'\fR, \f(CW\*(C`make\*(C'\fR,
\&\f(CW\*(C`make_set_make\*(C'\fR, \f(CW\*(C`mallocobj\*(C'\fR, \f(CW\*(C`mallocsrc\*(C'\fR, \f(CW\*(C`malloctype\*(C'\fR, \f(CW\*(C`man1dir\*(C'\fR,
\&\f(CW\*(C`man1direxp\*(C'\fR, \f(CW\*(C`man1ext\*(C'\fR, \f(CW\*(C`man3dir\*(C'\fR, \f(CW\*(C`man3direxp\*(C'\fR, \f(CW\*(C`man3ext\*(C'\fR,
\&\f(CW\*(C`mips_type\*(C'\fR, \f(CW\*(C`mistrustnm\*(C'\fR, \f(CW\*(C`mkdir\*(C'\fR, \f(CW\*(C`mmaptype\*(C'\fR, \f(CW\*(C`modetype\*(C'\fR, \f(CW\*(C`more\*(C'\fR,
\&\f(CW\*(C`multiarch\*(C'\fR, \f(CW\*(C`mv\*(C'\fR, \f(CW\*(C`myarchname\*(C'\fR, \f(CW\*(C`mydomain\*(C'\fR, \f(CW\*(C`myhostname\*(C'\fR, \f(CW\*(C`myuname\*(C'\fR
.IP "n" 4
.IX Item "n"
.PP
\&\f(CW\*(C`n\*(C'\fR, \f(CW\*(C`need_va_copy\*(C'\fR, \f(CW\*(C`netdb_hlen_type\*(C'\fR, \f(CW\*(C`netdb_host_type\*(C'\fR,
\&\f(CW\*(C`netdb_name_type\*(C'\fR, \f(CW\*(C`netdb_net_type\*(C'\fR, \f(CW\*(C`nm\*(C'\fR, \f(CW\*(C`nm_opt\*(C'\fR, \f(CW\*(C`nm_so_opt\*(C'\fR,
\&\f(CW\*(C`nonxs_ext\*(C'\fR, \f(CW\*(C`nroff\*(C'\fR, \f(CW\*(C`nv_overflows_integers_at\*(C'\fR,
\&\f(CW\*(C`nv_preserves_uv_bits\*(C'\fR, \f(CW\*(C`nveformat\*(C'\fR, \f(CW\*(C`nvEUformat\*(C'\fR, \f(CW\*(C`nvfformat\*(C'\fR,
\&\f(CW\*(C`nvFUformat\*(C'\fR, \f(CW\*(C`nvgformat\*(C'\fR, \f(CW\*(C`nvGUformat\*(C'\fR, \f(CW\*(C`nvsize\*(C'\fR, \f(CW\*(C`nvtype\*(C'\fR
.IP "o" 4
.IX Item "o"
.PP
\&\f(CW\*(C`o_nonblock\*(C'\fR, \f(CW\*(C`obj_ext\*(C'\fR, \f(CW\*(C`old_pthread_create_joinable\*(C'\fR, \f(CW\*(C`optimize\*(C'\fR,
\&\f(CW\*(C`orderlib\*(C'\fR, \f(CW\*(C`osname\*(C'\fR, \f(CW\*(C`osvers\*(C'\fR, \f(CW\*(C`otherlibdirs\*(C'\fR
.IP "p" 4
.IX Item "p"
.PP
\&\f(CW\*(C`package\*(C'\fR, \f(CW\*(C`pager\*(C'\fR, \f(CW\*(C`passcat\*(C'\fR, \f(CW\*(C`patchlevel\*(C'\fR, \f(CW\*(C`path_sep\*(C'\fR, \f(CW\*(C`perl\*(C'\fR,
\&\f(CW\*(C`perl5\*(C'\fR
.IP "P" 4
.IX Item "P"
.PP
\&\f(CW\*(C`PERL_API_REVISION\*(C'\fR, \f(CW\*(C`PERL_API_SUBVERSION\*(C'\fR, \f(CW\*(C`PERL_API_VERSION\*(C'\fR,
\&\f(CW\*(C`PERL_CONFIG_SH\*(C'\fR, \f(CW\*(C`PERL_PATCHLEVEL\*(C'\fR, \f(CW\*(C`perl_patchlevel\*(C'\fR,
\&\f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`perl_static_inline\*(C'\fR, \f(CW\*(C`PERL_SUBVERSION\*(C'\fR,
\&\f(CW\*(C`PERL_VERSION\*(C'\fR, \f(CW\*(C`perladmin\*(C'\fR, \f(CW\*(C`perllibs\*(C'\fR, \f(CW\*(C`perlpath\*(C'\fR, \f(CW\*(C`pg\*(C'\fR,
\&\f(CW\*(C`phostname\*(C'\fR, \f(CW\*(C`pidtype\*(C'\fR, \f(CW\*(C`plibpth\*(C'\fR, \f(CW\*(C`pmake\*(C'\fR, \f(CW\*(C`pr\*(C'\fR, \f(CW\*(C`prefix\*(C'\fR,
\&\f(CW\*(C`prefixexp\*(C'\fR, \f(CW\*(C`privlib\*(C'\fR, \f(CW\*(C`privlibexp\*(C'\fR, \f(CW\*(C`procselfexe\*(C'\fR, \f(CW\*(C`prototype\*(C'\fR,
\&\f(CW\*(C`ptrsize\*(C'\fR
.IP "q" 4
.IX Item "q"
.PP
\&\f(CW\*(C`quadkind\*(C'\fR, \f(CW\*(C`quadtype\*(C'\fR
.IP "r" 4
.IX Item "r"
.PP
\&\f(CW\*(C`randbits\*(C'\fR, \f(CW\*(C`randfunc\*(C'\fR, \f(CW\*(C`random_r_proto\*(C'\fR, \f(CW\*(C`randseedtype\*(C'\fR, \f(CW\*(C`ranlib\*(C'\fR,
\&\f(CW\*(C`rd_nodata\*(C'\fR, \f(CW\*(C`readdir64_r_proto\*(C'\fR, \f(CW\*(C`readdir_r_proto\*(C'\fR, \f(CW\*(C`revision\*(C'\fR, \f(CW\*(C`rm\*(C'\fR,
\&\f(CW\*(C`rm_try\*(C'\fR, \f(CW\*(C`rmail\*(C'\fR, \f(CW\*(C`run\*(C'\fR, \f(CW\*(C`runnm\*(C'\fR
.IP "s" 4
.IX Item "s"
.PP
\&\f(CW\*(C`sched_yield\*(C'\fR, \f(CW\*(C`scriptdir\*(C'\fR, \f(CW\*(C`scriptdirexp\*(C'\fR, \f(CW\*(C`sed\*(C'\fR, \f(CW\*(C`seedfunc\*(C'\fR,
\&\f(CW\*(C`selectminbits\*(C'\fR, \f(CW\*(C`selecttype\*(C'\fR, \f(CW\*(C`sendmail\*(C'\fR, \f(CW\*(C`setgrent_r_proto\*(C'\fR,
\&\f(CW\*(C`sethostent_r_proto\*(C'\fR, \f(CW\*(C`setlocale_r_proto\*(C'\fR, \f(CW\*(C`setnetent_r_proto\*(C'\fR,
\&\f(CW\*(C`setprotoent_r_proto\*(C'\fR, \f(CW\*(C`setpwent_r_proto\*(C'\fR, \f(CW\*(C`setservent_r_proto\*(C'\fR,
\&\f(CW\*(C`sGMTIME_max\*(C'\fR, \f(CW\*(C`sGMTIME_min\*(C'\fR, \f(CW\*(C`sh\*(C'\fR, \f(CW\*(C`shar\*(C'\fR, \f(CW\*(C`sharpbang\*(C'\fR, \f(CW\*(C`shmattype\*(C'\fR,
\&\f(CW\*(C`shortsize\*(C'\fR, \f(CW\*(C`shrpenv\*(C'\fR, \f(CW\*(C`shsharp\*(C'\fR, \f(CW\*(C`sig_count\*(C'\fR, \f(CW\*(C`sig_name\*(C'\fR,
\&\f(CW\*(C`sig_name_init\*(C'\fR, \f(CW\*(C`sig_num\*(C'\fR, \f(CW\*(C`sig_num_init\*(C'\fR, \f(CW\*(C`sig_size\*(C'\fR, \f(CW\*(C`signal_t\*(C'\fR,
\&\f(CW\*(C`sitearch\*(C'\fR, \f(CW\*(C`sitearchexp\*(C'\fR, \f(CW\*(C`sitebin\*(C'\fR, \f(CW\*(C`sitebinexp\*(C'\fR, \f(CW\*(C`sitehtml1dir\*(C'\fR,
\&\f(CW\*(C`sitehtml1direxp\*(C'\fR, \f(CW\*(C`sitehtml3dir\*(C'\fR, \f(CW\*(C`sitehtml3direxp\*(C'\fR, \f(CW\*(C`sitelib\*(C'\fR,
\&\f(CW\*(C`sitelib_stem\*(C'\fR, \f(CW\*(C`sitelibexp\*(C'\fR, \f(CW\*(C`siteman1dir\*(C'\fR, \f(CW\*(C`siteman1direxp\*(C'\fR,
\&\f(CW\*(C`siteman3dir\*(C'\fR, \f(CW\*(C`siteman3direxp\*(C'\fR, \f(CW\*(C`siteprefix\*(C'\fR, \f(CW\*(C`siteprefixexp\*(C'\fR,
\&\f(CW\*(C`sitescript\*(C'\fR, \f(CW\*(C`sitescriptexp\*(C'\fR, \f(CW\*(C`sizesize\*(C'\fR, \f(CW\*(C`sizetype\*(C'\fR, \f(CW\*(C`sleep\*(C'\fR,
\&\f(CW\*(C`sLOCALTIME_max\*(C'\fR, \f(CW\*(C`sLOCALTIME_min\*(C'\fR, \f(CW\*(C`smail\*(C'\fR, \f(CW\*(C`so\*(C'\fR, \f(CW\*(C`sockethdr\*(C'\fR,
\&\f(CW\*(C`socketlib\*(C'\fR, \f(CW\*(C`socksizetype\*(C'\fR, \f(CW\*(C`sort\*(C'\fR, \f(CW\*(C`spackage\*(C'\fR, \f(CW\*(C`spitshell\*(C'\fR,
\&\f(CW\*(C`sPRId64\*(C'\fR, \f(CW\*(C`sPRIeldbl\*(C'\fR, \f(CW\*(C`sPRIEUldbl\*(C'\fR, \f(CW\*(C`sPRIfldbl\*(C'\fR, \f(CW\*(C`sPRIFUldbl\*(C'\fR,
\&\f(CW\*(C`sPRIgldbl\*(C'\fR, \f(CW\*(C`sPRIGUldbl\*(C'\fR, \f(CW\*(C`sPRIi64\*(C'\fR, \f(CW\*(C`sPRIo64\*(C'\fR, \f(CW\*(C`sPRIu64\*(C'\fR,
\&\f(CW\*(C`sPRIx64\*(C'\fR, \f(CW\*(C`sPRIXU64\*(C'\fR, \f(CW\*(C`srand48_r_proto\*(C'\fR, \f(CW\*(C`srandom_r_proto\*(C'\fR, \f(CW\*(C`src\*(C'\fR,
\&\f(CW\*(C`sSCNfldbl\*(C'\fR, \f(CW\*(C`ssizetype\*(C'\fR, \f(CW\*(C`st_ino_sign\*(C'\fR, \f(CW\*(C`st_ino_size\*(C'\fR, \f(CW\*(C`startperl\*(C'\fR,
\&\f(CW\*(C`startsh\*(C'\fR, \f(CW\*(C`static_ext\*(C'\fR, \f(CW\*(C`stdchar\*(C'\fR, \f(CW\*(C`stdio_base\*(C'\fR, \f(CW\*(C`stdio_bufsiz\*(C'\fR,
\&\f(CW\*(C`stdio_cnt\*(C'\fR, \f(CW\*(C`stdio_filbuf\*(C'\fR, \f(CW\*(C`stdio_ptr\*(C'\fR, \f(CW\*(C`stdio_stream_array\*(C'\fR,
\&\f(CW\*(C`strerror_r_proto\*(C'\fR, \f(CW\*(C`strings\*(C'\fR, \f(CW\*(C`submit\*(C'\fR, \f(CW\*(C`subversion\*(C'\fR, \f(CW\*(C`sysman\*(C'\fR
.IP "t" 4
.IX Item "t"
.PP
\&\f(CW\*(C`tail\*(C'\fR, \f(CW\*(C`tar\*(C'\fR, \f(CW\*(C`targetarch\*(C'\fR, \f(CW\*(C`tbl\*(C'\fR, \f(CW\*(C`tee\*(C'\fR, \f(CW\*(C`test\*(C'\fR, \f(CW\*(C`timeincl\*(C'\fR,
\&\f(CW\*(C`timetype\*(C'\fR, \f(CW\*(C`tmpnam_r_proto\*(C'\fR, \f(CW\*(C`to\*(C'\fR, \f(CW\*(C`touch\*(C'\fR, \f(CW\*(C`tr\*(C'\fR, \f(CW\*(C`trnl\*(C'\fR, \f(CW\*(C`troff\*(C'\fR,
\&\f(CW\*(C`ttyname_r_proto\*(C'\fR
.IP "u" 4
.IX Item "u"
.PP
\&\f(CW\*(C`u16size\*(C'\fR, \f(CW\*(C`u16type\*(C'\fR, \f(CW\*(C`u32size\*(C'\fR, \f(CW\*(C`u32type\*(C'\fR, \f(CW\*(C`u64size\*(C'\fR, \f(CW\*(C`u64type\*(C'\fR,
\&\f(CW\*(C`u8size\*(C'\fR, \f(CW\*(C`u8type\*(C'\fR, \f(CW\*(C`uidformat\*(C'\fR, \f(CW\*(C`uidsign\*(C'\fR, \f(CW\*(C`uidsize\*(C'\fR, \f(CW\*(C`uidtype\*(C'\fR,
\&\f(CW\*(C`uname\*(C'\fR, \f(CW\*(C`uniq\*(C'\fR, \f(CW\*(C`uquadtype\*(C'\fR, \f(CW\*(C`use5005threads\*(C'\fR, \f(CW\*(C`use64bitall\*(C'\fR,
\&\f(CW\*(C`use64bitint\*(C'\fR, \f(CW\*(C`usecrosscompile\*(C'\fR, \f(CW\*(C`usedevel\*(C'\fR, \f(CW\*(C`usedl\*(C'\fR, \f(CW\*(C`usedtrace\*(C'\fR,
\&\f(CW\*(C`usefaststdio\*(C'\fR, \f(CW\*(C`useithreads\*(C'\fR, \f(CW\*(C`usekernprocpathname\*(C'\fR, \f(CW\*(C`uselargefiles\*(C'\fR,
\&\f(CW\*(C`uselongdouble\*(C'\fR, \f(CW\*(C`usemallocwrap\*(C'\fR, \f(CW\*(C`usemorebits\*(C'\fR, \f(CW\*(C`usemultiplicity\*(C'\fR,
\&\f(CW\*(C`usemymalloc\*(C'\fR, \f(CW\*(C`usenm\*(C'\fR, \f(CW\*(C`usensgetexecutablepath\*(C'\fR, \f(CW\*(C`useopcode\*(C'\fR,
\&\f(CW\*(C`useperlio\*(C'\fR, \f(CW\*(C`useposix\*(C'\fR, \f(CW\*(C`usereentrant\*(C'\fR, \f(CW\*(C`userelocatableinc\*(C'\fR,
\&\f(CW\*(C`usesfio\*(C'\fR, \f(CW\*(C`useshrplib\*(C'\fR, \f(CW\*(C`usesitecustomize\*(C'\fR, \f(CW\*(C`usesocks\*(C'\fR, \f(CW\*(C`usethreads\*(C'\fR,
\&\f(CW\*(C`usevendorprefix\*(C'\fR, \f(CW\*(C`useversionedarchname\*(C'\fR, \f(CW\*(C`usevfork\*(C'\fR, \f(CW\*(C`usrinc\*(C'\fR,
\&\f(CW\*(C`uuname\*(C'\fR, \f(CW\*(C`uvoformat\*(C'\fR, \f(CW\*(C`uvsize\*(C'\fR, \f(CW\*(C`uvtype\*(C'\fR, \f(CW\*(C`uvuformat\*(C'\fR, \f(CW\*(C`uvxformat\*(C'\fR,
\&\f(CW\*(C`uvXUformat\*(C'\fR
.IP "v" 4
.IX Item "v"
.PP
\&\f(CW\*(C`vaproto\*(C'\fR, \f(CW\*(C`vendorarch\*(C'\fR, \f(CW\*(C`vendorarchexp\*(C'\fR, \f(CW\*(C`vendorbin\*(C'\fR, \f(CW\*(C`vendorbinexp\*(C'\fR,
\&\f(CW\*(C`vendorhtml1dir\*(C'\fR, \f(CW\*(C`vendorhtml1direxp\*(C'\fR, \f(CW\*(C`vendorhtml3dir\*(C'\fR,
\&\f(CW\*(C`vendorhtml3direxp\*(C'\fR, \f(CW\*(C`vendorlib\*(C'\fR, \f(CW\*(C`vendorlib_stem\*(C'\fR, \f(CW\*(C`vendorlibexp\*(C'\fR,
\&\f(CW\*(C`vendorman1dir\*(C'\fR, \f(CW\*(C`vendorman1direxp\*(C'\fR, \f(CW\*(C`vendorman3dir\*(C'\fR,
\&\f(CW\*(C`vendorman3direxp\*(C'\fR, \f(CW\*(C`vendorprefix\*(C'\fR, \f(CW\*(C`vendorprefixexp\*(C'\fR, \f(CW\*(C`vendorscript\*(C'\fR,
\&\f(CW\*(C`vendorscriptexp\*(C'\fR, \f(CW\*(C`version\*(C'\fR, \f(CW\*(C`version_patchlevel_string\*(C'\fR,
\&\f(CW\*(C`versiononly\*(C'\fR, \f(CW\*(C`vi\*(C'\fR, \f(CW\*(C`voidflags\*(C'\fR
.IP "x" 4
.IX Item "x"
.PP
\&\f(CW\*(C`xlibpth\*(C'\fR
.IP "y" 4
.IX Item "y"
.PP
\&\f(CW\*(C`yacc\*(C'\fR, \f(CW\*(C`yaccflags\*(C'\fR
.IP "z" 4
.IX Item "z"
.PP
\&\f(CW\*(C`zcat\*(C'\fR, \f(CW\*(C`zip\*(C'\fR
.IP "\s-1GIT DATA\s0" 4
.IX Item "GIT DATA"
.PD 0
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
dynamic, nonxs, static
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "Config::Perl::V \- Structured data retrieval of perl \-V output"
.IX Subsection "Config::Perl::V - Structured data retrieval of perl -V output"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.ie n .IP "$conf = myconfig ()" 4
.el .IP "\f(CW$conf\fR = myconfig ()" 4
.IX Item "$conf = myconfig ()"
.ie n .IP "$conf = plv2hash ($text [, ...])" 4
.el .IP "\f(CW$conf\fR = plv2hash ($text [, ...])" 4
.IX Item "$conf = plv2hash ($text [, ...])"
.ie n .IP "$info = summary ([$conf])" 4
.el .IP "\f(CW$info\fR = summary ([$conf])" 4
.IX Item "$info = summary ([$conf])"
.ie n .IP "$md5 = signature ([$conf])" 4
.el .IP "\f(CW$md5\fR = signature ([$conf])" 4
.IX Item "$md5 = signature ([$conf])"
.IP "The hash structure" 4
.IX Item "The hash structure"
.PD
build, osname, stamp, options, derived, patches, environment, config, inc
.RE
.RS 4
.RE
.IP "\s-1REASONING\s0" 4
.IX Item "REASONING"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Cwd \- get pathname of current working directory"
.IX Subsection "Cwd - get pathname of current working directory"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "getcwd and friends" 4
.IX Item "getcwd and friends"
.PD
getcwd, cwd, fastcwd, fastgetcwd, getdcwd
.IP "abs_path and friends" 4
.IX Item "abs_path and friends"
abs_path, realpath, fast_abs_path
.ie n .IP "$ENV{\s-1PWD\s0}" 4
.el .IP "\f(CW$ENV\fR{\s-1PWD\s0}" 4
.IX Item "$ENV{PWD}"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "\s-1DB \-\s0 programmatic interface to the Perl debugging \s-1API\s0"
.IX Subsection "DB - programmatic interface to the Perl debugging API"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Global Variables" 4
.IX Item "Global Variables"
.PD
.Vb 3
\& $DB::sub,  %DB::sub,  $DB::single,  $DB::signal,  $DB::trace,  @DB::args, 
\&@DB::dbline,  %DB::dbline,  $DB::package,  $DB::filename,  $DB::subname, 
\&$DB::lineno
.Ve
.IP "\s-1API\s0 Methods" 4
.IX Item "API Methods"
\&\s-1CLIENT\-\s0>\fIregister()\fR, \s-1CLIENT\-\s0>evalcode(\s-1STRING\s0), \s-1CLIENT\-\s0>skippkg('D::hide'),
\&\s-1CLIENT\-\s0>\fIrun()\fR, \s-1CLIENT\-\s0>\fIstep()\fR, \s-1CLIENT\-\s0>\fInext()\fR, \s-1CLIENT\-\s0>\fIdone()\fR
.IP "Client Callback Methods" 4
.IX Item "Client Callback Methods"
\&\s-1CLIENT\-\s0>\fIinit()\fR, \s-1CLIENT\-\s0>prestop([\s-1STRING\s0]), \s-1CLIENT\-\s0>\fIstop()\fR, \s-1CLIENT\-\s0>\fIidle()\fR,
\&\s-1CLIENT\-\s0>poststop([\s-1STRING\s0]), \s-1CLIENT\-\s0>evalcode(\s-1STRING\s0), \s-1CLIENT\-\s0>\fIcleanup()\fR,
\&\s-1CLIENT\-\s0>output(\s-1LIST\s0)
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter \*(-- Filter \s-1DBM\s0 keys/values"
.IX Subsection "DBM_Filter Filter DBM keys/values"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "What is a \s-1DBM\s0 Filter?" 4
.IX Item "What is a DBM Filter?"
.RS 4
.IP "So what's new?" 4
.IX Item "So what's new?"
.RE
.RS 4
.RE
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$db\->\fIFilter_Push()\fR / $db\->\fIFilter_Key_Push()\fR / $db\->\fIFilter_Value_Push()\fR" 4
.el .IP "\f(CW$db\fR\->\fIFilter_Push()\fR / \f(CW$db\fR\->\fIFilter_Key_Push()\fR / \f(CW$db\fR\->\fIFilter_Value_Push()\fR" 4
.IX Item "$db->Filter_Push() / $db->Filter_Key_Push() / $db->Filter_Value_Push()"
.PD
Filter_Push, Filter_Key_Push, Filter_Value_Push
.ie n .IP "$db\->\fIFilter_Pop()\fR" 4
.el .IP "\f(CW$db\fR\->\fIFilter_Pop()\fR" 4
.IX Item "$db->Filter_Pop()"
.PD 0
.ie n .IP "$db\->\fIFiltered()\fR" 4
.el .IP "\f(CW$db\fR\->\fIFiltered()\fR" 4
.IX Item "$db->Filtered()"
.RE
.RS 4
.RE
.IP "Writing a Filter" 4
.IX Item "Writing a Filter"
.RS 4
.IP "Immediate Filters" 4
.IX Item "Immediate Filters"
.IP "Canned Filters" 4
.IX Item "Canned Filters"
.PD
\&\*(L"name\*(R", params
.RE
.RS 4
.RE
.IP "Filters Included" 4
.IX Item "Filters Included"
utf8, encode, compress, int32, null
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.RS 4
.PD 0
.IP "Maintain Round Trip Integrity" 4
.IX Item "Maintain Round Trip Integrity"
.IP "Don't mix filtered & non-filtered data in the same database file." 4
.IX Item "Don't mix filtered & non-filtered data in the same database file."
.RE
.RS 4
.RE
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter::compress \- filter for DBM_Filter"
.IX Subsection "DBM_Filter::compress - filter for DBM_Filter"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter::encode \- filter for DBM_Filter"
.IX Subsection "DBM_Filter::encode - filter for DBM_Filter"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter::int32 \- filter for DBM_Filter"
.IX Subsection "DBM_Filter::int32 - filter for DBM_Filter"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter::null \- filter for DBM_Filter"
.IX Subsection "DBM_Filter::null - filter for DBM_Filter"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DBM_Filter::utf8 \- filter for DBM_Filter"
.IX Subsection "DBM_Filter::utf8 - filter for DBM_Filter"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "DB_File \- Perl5 access to Berkeley \s-1DB\s0 version 1.x"
.IX Subsection "DB_File - Perl5 access to Berkeley DB version 1.x"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fB\s-1DB_HASH\s0\fR, \fB\s-1DB_BTREE\s0\fR, \fB\s-1DB_RECNO\s0\fR
.RS 4
.IP "Using DB_File with Berkeley \s-1DB\s0 version 2 or greater" 4
.IX Item "Using DB_File with Berkeley DB version 2 or greater"
.PD 0
.IP "Interface to Berkeley \s-1DB\s0" 4
.IX Item "Interface to Berkeley DB"
.IP "Opening a Berkeley \s-1DB\s0 Database File" 4
.IX Item "Opening a Berkeley DB Database File"
.IP "Default Parameters" 4
.IX Item "Default Parameters"
.IP "In Memory Databases" 4
.IX Item "In Memory Databases"
.RE
.RS 4
.RE
.IP "\s-1DB_HASH\s0" 4
.IX Item "DB_HASH"
.RS 4
.IP "A Simple Example" 4
.IX Item "A Simple Example"
.RE
.RS 4
.RE
.IP "\s-1DB_BTREE\s0" 4
.IX Item "DB_BTREE"
.RS 4
.IP "Changing the \s-1BTREE\s0 sort order" 4
.IX Item "Changing the BTREE sort order"
.IP "Handling Duplicate Keys" 4
.IX Item "Handling Duplicate Keys"
.IP "The \fIget_dup()\fR Method" 4
.IX Item "The get_dup() Method"
.IP "The \fIfind_dup()\fR Method" 4
.IX Item "The find_dup() Method"
.IP "The \fIdel_dup()\fR Method" 4
.IX Item "The del_dup() Method"
.IP "Matching Partial Keys" 4
.IX Item "Matching Partial Keys"
.RE
.RS 4
.RE
.IP "\s-1DB_RECNO\s0" 4
.IX Item "DB_RECNO"
.RS 4
.IP "The 'bval' Option" 4
.IX Item "The 'bval' Option"
.IP "A Simple Example" 4
.IX Item "A Simple Example"
.IP "Extra \s-1RECNO\s0 Methods" 4
.IX Item "Extra RECNO Methods"
.PD
\&\fB\f(CB$X\fB\->push(list) ;\fR, \fB\f(CB$value\fB = \f(CB$X\fB\->pop ;\fR, \fB\f(CB$X\fB\->shift\fR,
\&\fB\f(CB$X\fB\->unshift(list) ;\fR, \fB\f(CB$X\fB\->length\fR, \fB\f(CB$X\fB\->splice(offset,
length, elements);\fR
.IP "Another Example" 4
.IX Item "Another Example"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1THE API INTERFACE\s0" 4
.IX Item "THE API INTERFACE"
.PD
\&\fB\f(CB$status\fB = \f(CB$X\fB\->get($key, \f(CB$value\fB [, \f(CB$flags\fB]) ;\fR, \fB\f(CB$status\fB =
\&\f(CB$X\fB\->put($key, \f(CB$value\fB [, \f(CB$flags\fB]) ;\fR, \fB\f(CB$status\fB = \f(CB$X\fB\->del($key [,
\&\f(CB$flags\fB]) ;\fR, \fB\f(CB$status\fB = \f(CB$X\fB\->fd ;\fR, \fB\f(CB$status\fB = \f(CB$X\fB\->seq($key,
\&\f(CB$value\fB, \f(CB$flags\fB) ;\fR, \fB\f(CB$status\fB = \f(CB$X\fB\->sync([$flags]) ;\fR
.IP "\s-1DBM FILTERS\s0" 4
.IX Item "DBM FILTERS"
\&\fBfilter_store_key\fR, \fBfilter_store_value\fR, \fBfilter_fetch_key\fR,
\&\fBfilter_fetch_value\fR
.RS 4
.IP "The Filter" 4
.IX Item "The Filter"
.PD 0
.IP "An Example \*(-- the \s-1NULL\s0 termination problem." 4
.IX Item "An Example the NULL termination problem."
.IP "Another Example \*(-- Key is a C int." 4
.IX Item "Another Example Key is a C int."
.RE
.RS 4
.RE
.IP "\s-1HINTS AND TIPS \s0" 4
.IX Item "HINTS AND TIPS "
.RS 4
.IP "Locking: The Trouble with fd" 4
.IX Item "Locking: The Trouble with fd"
.IP "Safe ways to lock a database" 4
.IX Item "Safe ways to lock a database"
.PD
\&\fBTie::DB_Lock\fR, \fBTie::DB_LockFile\fR, \fBDB_File::Lock\fR
.IP "Sharing Databases With C Applications" 4
.IX Item "Sharing Databases With C Applications"
.PD 0
.IP "The \fIuntie()\fR Gotcha" 4
.IX Item "The untie() Gotcha"
.RE
.RS 4
.RE
.IP "\s-1COMMON QUESTIONS\s0" 4
.IX Item "COMMON QUESTIONS"
.RS 4
.IP "Why is there Perl source in my database?" 4
.IX Item "Why is there Perl source in my database?"
.IP "How do I store complex data structures with DB_File?" 4
.IX Item "How do I store complex data structures with DB_File?"
.ie n .IP "What does ""Invalid Argument"" mean?" 4
.el .IP "What does ``Invalid Argument'' mean?" 4
.IX Item "What does Invalid Argument mean?"
.ie n .IP "What does ""Bareword 'DB_File' not allowed"" mean?" 4
.el .IP "What does ``Bareword 'DB_File' not allowed'' mean?" 4
.IX Item "What does Bareword 'DB_File' not allowed mean?"
.RE
.RS 4
.RE
.IP "\s-1REFERENCES\s0" 4
.IX Item "REFERENCES"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AVAILABILITY\s0" 4
.IX Item "AVAILABILITY"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.ie n .SS "Data::Dumper \- stringified perl data structures, suitable for both printing and ""eval"""
.el .SS "Data::Dumper \- stringified perl data structures, suitable for both printing and \f(CWeval\fP"
.IX Subsection "Data::Dumper - stringified perl data structures, suitable for both printing and eval"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Methods" 4
.IX Item "Methods"
.PD
\&\fI\s-1PACKAGE\s0\fR\->new(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR), \fI\f(CI$OBJ\fI\fR\->Dump  \fIor\fR 
\&\fI\s-1PACKAGE\s0\fR\->Dump(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR), \fI\f(CI$OBJ\fI\fR\->Seen(\fI[\s-1HASHREF\s0]\fR),
\&\fI\f(CI$OBJ\fI\fR\->Values(\fI[\s-1ARRAYREF\s0]\fR), \fI\f(CI$OBJ\fI\fR\->Names(\fI[\s-1ARRAYREF\s0]\fR),
\&\fI\f(CI$OBJ\fI\fR\->Reset
.IP "Functions" 4
.IX Item "Functions"
Dumper(\fI\s-1LIST\s0\fR)
.IP "Configuration Variables or Methods" 4
.IX Item "Configuration Variables or Methods"
.PD 0
.IP "Exports" 4
.IX Item "Exports"
.PD
Dumper
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.RS 4
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Devel::InnerPackage \- find all the inner packages of a package"
.IX Subsection "Devel::InnerPackage - find all the inner packages of a package"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "list_packages <package name>" 4
.IX Item "list_packages <package name>"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYING\s0" 4
.IX Item "COPYING"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD
.SS "Devel::PPPort \- Perl/Pollution/Portability"
.IX Subsection "Devel::PPPort - Perl/Pollution/Portability"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Why use ppport.h?" 4
.IX Item "Why use ppport.h?"
.IP "How to use ppport.h" 4
.IX Item "How to use ppport.h"
.IP "Running ppport.h" 4
.IX Item "Running ppport.h"
.RE
.RS 4
.RE
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.IP "WriteFile" 4
.IX Item "WriteFile"
.RE
.RS 4
.RE
.IP "\s-1COMPATIBILITY\s0" 4
.IX Item "COMPATIBILITY"
.RS 4
.IP "Provided Perl compatibility \s-1API\s0" 4
.IX Item "Provided Perl compatibility API"
.IP "Perl \s-1API\s0 not supported by ppport.h" 4
.IX Item "Perl API not supported by ppport.h"
.PD
perl 5.14.0, perl 5.13.10, perl 5.13.8, perl 5.13.7, perl 5.13.6, perl
5.13.5, perl 5.13.4, perl 5.13.3, perl 5.13.2, perl 5.13.1, perl 5.11.5,
perl 5.11.4, perl 5.11.2, perl 5.11.1, perl 5.11.0, perl 5.10.1, perl
5.10.0, perl 5.9.5, perl 5.9.4, perl 5.9.3, perl 5.9.2, perl 5.9.1, perl
5.9.0, perl 5.8.3, perl 5.8.1, perl 5.8.0, perl 5.7.3, perl 5.7.2, perl
5.7.1, perl 5.6.1, perl 5.6.0, perl 5.005_03, perl 5.005, perl 5.004_05,
perl 5.004
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Devel::Peek \- A data debugging tool for the \s-1XS\s0 programmer"
.IX Subsection "Devel::Peek - A data debugging tool for the XS programmer"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Runtime debugging" 4
.IX Item "Runtime debugging"
.IP "Memory footprint debugging" 4
.IX Item "Memory footprint debugging"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.IP "A simple scalar string" 4
.IX Item "A simple scalar string"
.IP "A simple scalar number" 4
.IX Item "A simple scalar number"
.IP "A simple scalar with an extra reference" 4
.IX Item "A simple scalar with an extra reference"
.IP "A reference to a simple scalar" 4
.IX Item "A reference to a simple scalar"
.IP "A reference to an array" 4
.IX Item "A reference to an array"
.IP "A reference to a hash" 4
.IX Item "A reference to a hash"
.IP "Dumping a large array or hash" 4
.IX Item "Dumping a large array or hash"
.IP "A reference to an \s-1SV\s0 which holds a C pointer" 4
.IX Item "A reference to an SV which holds a C pointer"
.IP "A reference to a subroutine" 4
.IX Item "A reference to a subroutine"
.RE
.RS 4
.RE
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Devel::SelfStubber \- generate stubs for a SelfLoading module"
.IX Subsection "Devel::SelfStubber - generate stubs for a SelfLoading module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Digest \- Modules that calculate message digests"
.IX Subsection "Digest - Modules that calculate message digests"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fIbinary\fR, \fIhex\fR, \fIbase64\fR
.IP "\s-1OO INTERFACE\s0" 4
.IX Item "OO INTERFACE"
\&\f(CW$ctx\fR = Digest\->\s-1XXX\s0($arg,...), \f(CW$ctx\fR = Digest\->new(\s-1XXX\s0 => \f(CW$arg\fR,...), \f(CW$ctx\fR =
Digest::XXX\->new($arg,...), \f(CW$other_ctx\fR = \f(CW$ctx\fR\->clone, \f(CW$ctx\fR\->reset,
\&\f(CW$ctx\fR\->add( \f(CW$data\fR ), \f(CW$ctx\fR\->add( \f(CW$chunk1\fR, \f(CW$chunk2\fR, ... ), \f(CW$ctx\fR\->addfile(
\&\f(CW$io_handle\fR ), \f(CW$ctx\fR\->add_bits( \f(CW$data\fR, \f(CW$nbits\fR ), \f(CW$ctx\fR\->add_bits( \f(CW$bitstring\fR
), \f(CW$ctx\fR\->digest, \f(CW$ctx\fR\->hexdigest, \f(CW$ctx\fR\->b64digest
.IP "Digest speed" 4
.IX Item "Digest speed"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Digest::MD5 \- Perl interface to the \s-1MD5\s0 Algorithm"
.IX Subsection "Digest::MD5 - Perl interface to the MD5 Algorithm"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
md5($data,...), md5_hex($data,...), md5_base64($data,...)
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
\&\f(CW$md5\fR = Digest::MD5\->new, \f(CW$md5\fR\->reset, \f(CW$md5\fR\->clone, \f(CW$md5\fR\->add($data,...),
\&\f(CW$md5\fR\->addfile($io_handle), \f(CW$md5\fR\->add_bits($data, \f(CW$nbits\fR),
\&\f(CW$md5\fR\->add_bits($bitstring), \f(CW$md5\fR\->digest, \f(CW$md5\fR\->hexdigest, \f(CW$md5\fR\->b64digest
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "Digest::SHA \- Perl extension for \s-1SHA\-1/224/256/384/512\s0"
.IX Subsection "Digest::SHA - Perl extension for SHA-1/224/256/384/512"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1SYNOPSIS \s0(HMAC-SHA)" 4
.IX Item "SYNOPSIS (HMAC-SHA)"
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1UNICODE AND SIDE EFFECTS\s0" 4
.IX Item "UNICODE AND SIDE EFFECTS"
.IP "\s-1NIST STATEMENT ON SHA\-1\s0" 4
.IX Item "NIST STATEMENT ON SHA-1"
.IP "\s-1PADDING OF BASE64 DIGESTS\s0" 4
.IX Item "PADDING OF BASE64 DIGESTS"
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.IP "\s-1EXPORTABLE FUNCTIONS\s0" 4
.IX Item "EXPORTABLE FUNCTIONS"
.PD
\&\fBsha1($data, ...)\fR, \fBsha224($data, ...)\fR, \fBsha256($data, ...)\fR,
\&\fBsha384($data, ...)\fR, \fBsha512($data, ...)\fR, \fBsha512224($data, ...)\fR,
\&\fBsha512256($data, ...)\fR, \fBsha1_hex($data, ...)\fR, \fBsha224_hex($data,
\&...)\fR, \fBsha256_hex($data, ...)\fR, \fBsha384_hex($data, ...)\fR,
\&\fBsha512_hex($data, ...)\fR, \fBsha512224_hex($data, ...)\fR,
\&\fBsha512256_hex($data, ...)\fR, \fBsha1_base64($data, ...)\fR,
\&\fBsha224_base64($data, ...)\fR, \fBsha256_base64($data, ...)\fR,
\&\fBsha384_base64($data, ...)\fR, \fBsha512_base64($data, ...)\fR,
\&\fBsha512224_base64($data, ...)\fR, \fBsha512256_base64($data, ...)\fR,
\&\fBnew($alg)\fR, \fBreset($alg)\fR, \fBhashsize\fR, \fBalgorithm\fR, \fBclone\fR,
\&\fBadd($data, ...)\fR, \fBadd_bits($data, \f(CB$nbits\fB)\fR, \fBadd_bits($bits)\fR,
\&\fBaddfile(*FILE)\fR, \fBaddfile($filename [, \f(CB$mode\fB])\fR, \fBdump($filename)\fR,
\&\fBload($filename)\fR, \fBdigest\fR, \fBhexdigest\fR, \fBb64digest\fR,
\&\fBhmac_sha1($data, \f(CB$key\fB)\fR, \fBhmac_sha224($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha256($data, \f(CB$key\fB)\fR, \fBhmac_sha384($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha512($data, \f(CB$key\fB)\fR, \fBhmac_sha512224($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha512256($data, \f(CB$key\fB)\fR, \fBhmac_sha1_hex($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha224_hex($data, \f(CB$key\fB)\fR, \fBhmac_sha256_hex($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha384_hex($data, \f(CB$key\fB)\fR, \fBhmac_sha512_hex($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha512224_hex($data, \f(CB$key\fB)\fR, \fBhmac_sha512256_hex($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha1_base64($data, \f(CB$key\fB)\fR, \fBhmac_sha224_base64($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha256_base64($data, \f(CB$key\fB)\fR, \fBhmac_sha384_base64($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha512_base64($data, \f(CB$key\fB)\fR, \fBhmac_sha512224_base64($data, \f(CB$key\fB)\fR,
\&\fBhmac_sha512256_base64($data, \f(CB$key\fB)\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1ACKNOWLEDGMENTS\s0" 4
.IX Item "ACKNOWLEDGMENTS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Digest::base \- Digest base class"
.IX Subsection "Digest::base - Digest base class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Digest::file \- Calculate digests of files"
.IX Subsection "Digest::file - Calculate digests of files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
digest_file( \f(CW$file\fR, \f(CW$algorithm\fR, [$arg,...] ), digest_file_hex( \f(CW$file\fR,
\&\f(CW$algorithm\fR, [$arg,...] ), digest_file_base64( \f(CW$file\fR, \f(CW$algorithm\fR, [$arg,...]
)
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "DirHandle \- supply object methods for directory handles"
.IX Subsection "DirHandle - supply object methods for directory handles"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Dumpvalue \- provides screen dump of Perl data."
.IX Subsection "Dumpvalue - provides screen dump of Perl data."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Creation" 4
.IX Item "Creation"
.PD
\&\f(CW\*(C`arrayDepth\*(C'\fR, \f(CW\*(C`hashDepth\*(C'\fR, \f(CW\*(C`compactDump\*(C'\fR, \f(CW\*(C`veryCompact\*(C'\fR, \f(CW\*(C`globPrint\*(C'\fR,
\&\f(CW\*(C`dumpDBFiles\*(C'\fR, \f(CW\*(C`dumpPackages\*(C'\fR, \f(CW\*(C`dumpReused\*(C'\fR, \f(CW\*(C`tick\*(C'\fR, \f(CW\*(C`quoteHighBit\*(C'\fR,
\&\f(CW\*(C`printUndef\*(C'\fR, \f(CW\*(C`usageOnly\*(C'\fR, unctrl, subdump, bareStringify, quoteHighBit,
stopDbSignal
.IP "Methods" 4
.IX Item "Methods"
dumpValue, dumpValues, stringify, dumpvars, set_quote, set_unctrl,
compactDump, veryCompact, set, get
.RE
.RS 4
.RE
.SS "DynaLoader \- Dynamically load C libraries into Perl code"
.IX Subsection "DynaLoader - Dynamically load C libraries into Perl code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW@dl_library_path\fR, \f(CW@dl_resolve_using\fR, \f(CW@dl_require_symbols\fR, \f(CW@dl_librefs\fR,
\&\f(CW@dl_modules\fR, \f(CW@dl_shared_objects\fR, \fIdl_error()\fR, \f(CW$dl_debug\fR, \fIdl_findfile()\fR,
\&\fIdl_expandspec()\fR, \fIdl_load_file()\fR, \fIdl_unload_file()\fR, \fIdl_load_flags()\fR,
\&\fIdl_find_symbol()\fR, \fIdl_find_symbol_anywhere()\fR, \fIdl_undef_symbols()\fR,
\&\fIdl_install_xsub()\fR, \fIbootstrap()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "Encode \- character encodings in Perl"
.IX Subsection "Encode - character encodings in Perl"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.RS 4
.IP "Table of Contents" 4
.IX Item "Table of Contents"
.PD
Encode::Alias \- Alias definitions to encodings, Encode::Encoding \-
Encode Implementation Base Class, Encode::Supported \- List of Supported
Encodings, Encode::CN \- Simplified Chinese Encodings, Encode::JP \-
Japanese Encodings, Encode::KR \- Korean Encodings, Encode::TW \-
Traditional Chinese Encodings
.RE
.RS 4
.RE
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "\s-1TERMINOLOGY\s0" 4
.IX Item "TERMINOLOGY"
.RE
.RS 4
.RE
.IP "\s-1THE PERL ENCODING API\s0" 4
.IX Item "THE PERL ENCODING API"
.RS 4
.IP "Basic methods" 4
.IX Item "Basic methods"
.IP "Listing available encodings" 4
.IX Item "Listing available encodings"
.IP "Defining Aliases" 4
.IX Item "Defining Aliases"
.IP "Finding \s-1IANA\s0 Character Set Registry names" 4
.IX Item "Finding IANA Character Set Registry names"
.RE
.RS 4
.RE
.IP "Encoding via PerlIO" 4
.IX Item "Encoding via PerlIO"
.IP "Handling Malformed Data" 4
.IX Item "Handling Malformed Data"
.RS 4
.IP "List of \fI\s-1CHECK\s0\fR values" 4
.IX Item "List of CHECK values"
.PD
perlqq mode (\fI\s-1CHECK\s0\fR = Encode::FB_PERLQQ), \s-1HTML\s0 charref mode (\fI\s-1CHECK\s0\fR =
Encode::FB_HTMLCREF), \s-1XML\s0 charref mode (\fI\s-1CHECK\s0\fR = Encode::FB_XMLCREF)
.IP "coderef for \s-1CHECK\s0" 4
.IX Item "coderef for CHECK"
.RE
.RS 4
.RE
.PD 0
.IP "Defining Encodings" 4
.IX Item "Defining Encodings"
.IP "The \s-1UTF8\s0 flag" 4
.IX Item "The UTF8 flag"
.PD
Goal #1:, Goal #2:, Goal #3:, Goal #4:
.RS 4
.IP "Messing with Perl's Internals" 4
.IX Item "Messing with Perl's Internals"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1UTF\-8\s0 vs. utf8 vs. \s-1UTF8\s0" 4
.IX Item "UTF-8 vs. utf8 vs. UTF8"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1MAINTAINER\s0" 4
.IX Item "MAINTAINER"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Encode::Alias \- alias definitions to encodings"
.IX Subsection "Encode::Alias - alias definitions to encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
As a simple string, As a qr// compiled regular expression, e.g.:, As a code
reference, e.g.:
.RS 4
.IP "Alias overloading" 4
.IX Item "Alias overloading"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Byte \- Single Byte Encodings"
.IX Subsection "Encode::Byte - Single Byte Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::CJKConstants \*(-- Internally used by Encode::??::ISO_2022_*"
.IX Subsection "Encode::CJKConstants Internally used by Encode::??::ISO_2022_*"
.SS "Encode::CN \- China-based Chinese Encodings"
.IX Subsection "Encode::CN - China-based Chinese Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::CN::HZ \*(-- internally used by Encode::CN"
.IX Subsection "Encode::CN::HZ internally used by Encode::CN"
.SS "Encode::Config \*(-- internally used by Encode"
.IX Subsection "Encode::Config internally used by Encode"
.SS "Encode::EBCDIC \- \s-1EBCDIC\s0 Encodings"
.IX Subsection "Encode::EBCDIC - EBCDIC Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Encoder \*(-- Object Oriented Encoder"
.IX Subsection "Encode::Encoder Object Oriented Encoder"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "Description" 4
.IX Item "Description"
.RS 4
.IP "Predefined Methods" 4
.IX Item "Predefined Methods"
.PD
\&\f(CW$e\fR = Encode::Encoder\->new([$data, \f(CW$encoding\fR]);, \fIencoder()\fR,
\&\f(CW$e\fR\->data([$data]), \f(CW$e\fR\->encoding([$encoding]),
\&\f(CW$e\fR\->bytes([$encoding])
.IP "Example: base64 transcoder" 4
.IX Item "Example: base64 transcoder"
.PD 0
.IP "Operator Overloading" 4
.IX Item "Operator Overloading"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Encoding \- Encode Implementation Base Class"
.IX Subsection "Encode::Encoding - Encode Implementation Base Class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Methods you should implement" 4
.IX Item "Methods you should implement"
.PD
\&\->encode($string [,$check]), \->decode($octets [,$check]),
\&\->cat_decode($destination, \f(CW$octets\fR, \f(CW$offset\fR, \f(CW$terminator\fR [,$check])
.IP "Other methods defined in Encode::Encodings" 4
.IX Item "Other methods defined in Encode::Encodings"
\&\->name, \->mime_name, \->renew, \->renewed, \->\fIperlio_ok()\fR,
\&\->\fIneeds_lines()\fR
.IP "Example: Encode::ROT13" 4
.IX Item "Example: Encode::ROT13"
.RE
.RS 4
.RE
.PD 0
.IP "Why the heck Encode \s-1API\s0 is different?" 4
.IX Item "Why the heck Encode API is different?"
.RS 4
.IP "Compiled Encodings" 4
.IX Item "Compiled Encodings"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
Scheme 1, Scheme 2, Other Schemes
.SS "Encode::GSM0338 \*(-- \s-1ESTI GSM 03.38\s0 Encoding"
.IX Subsection "Encode::GSM0338 ESTI GSM 03.38 Encoding"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Guess \*(-- Guesses encoding from data"
.IX Subsection "Encode::Guess Guesses encoding from data"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
Encode::Guess\->set_suspects, Encode::Guess\->add_suspects,
Encode::decode(\*(L"Guess\*(R" ...), Encode::Guess\->guess($data),
guess_encoding($data, [, \fIlist of suspects\fR])
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1TO DO\s0" 4
.IX Item "TO DO"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::JP \- Japanese Encodings"
.IX Subsection "Encode::JP - Japanese Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Note on \s-1ISO\-2022\-JP\s0(\-1)?" 4
.IX Item "Note on ISO-2022-JP(-1)?"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::JP::H2Z \*(-- internally used by Encode::JP::2022_JP*"
.IX Subsection "Encode::JP::H2Z internally used by Encode::JP::2022_JP*"
.SS "Encode::JP::JIS7 \*(-- internally used by Encode::JP"
.IX Subsection "Encode::JP::JIS7 internally used by Encode::JP"
.SS "Encode::KR \- Korean Encodings"
.IX Subsection "Encode::KR - Korean Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::KR::2022_KR \*(-- internally used by Encode::KR"
.IX Subsection "Encode::KR::2022_KR internally used by Encode::KR"
.SS "Encode::MIME::Header \*(-- \s-1MIME \s0'B' and 'Q' header encoding"
.IX Subsection "Encode::MIME::Header MIME 'B' and 'Q' header encoding"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::MIME::Name, Encode::MIME::NAME \*(-- internally used by Encode"
.IX Subsection "Encode::MIME::Name, Encode::MIME::NAME internally used by Encode"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "Encode::PerlIO \*(-- a detailed document on Encode and PerlIO"
.IX Subsection "Encode::PerlIO a detailed document on Encode and PerlIO"
.PD 0
.IP "Overview" 4
.IX Item "Overview"
.IP "How does it work?" 4
.IX Item "How does it work?"
.IP "Line Buffering" 4
.IX Item "Line Buffering"
.RS 4
.IP "How can I tell whether my encoding fully supports PerlIO ?" 4
.IX Item "How can I tell whether my encoding fully supports PerlIO ?"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Supported \*(-- Encodings supported by Encode"
.IX Subsection "Encode::Supported Encodings supported by Encode"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Encoding Names" 4
.IX Item "Encoding Names"
.RE
.RS 4
.RE
.IP "Supported Encodings" 4
.IX Item "Supported Encodings"
.RS 4
.IP "Built-in Encodings" 4
.IX Item "Built-in Encodings"
.IP "Encode::Unicode \*(-- other Unicode encodings" 4
.IX Item "Encode::Unicode other Unicode encodings"
.IP "Encode::Byte \*(-- Extended \s-1ASCII\s0" 4
.IX Item "Encode::Byte Extended ASCII"
.PD
\&\s-1ISO\-8859\s0 and corresponding vendor mappings, \s-1KOI8 \-\s0 De Facto Standard for
the Cyrillic world
.IP "gsm0338 \- Hentai Latin 1" 4
.IX Item "gsm0338 - Hentai Latin 1"
gsm0338 support before 2.19
.IP "\s-1CJK:\s0 Chinese, Japanese, Korean (Multibyte)" 4
.IX Item "CJK: Chinese, Japanese, Korean (Multibyte)"
Encode::CN \*(-- Continental China, Encode::JP \*(-- Japan, Encode::KR \*(-- Korea,
Encode::TW \*(-- Taiwan, Encode::HanExtra \*(-- More Chinese via \s-1CPAN,\s0
Encode::JIS2K \*(-- \s-1JIS X 0213\s0 encodings via \s-1CPAN\s0
.IP "Miscellaneous encodings" 4
.IX Item "Miscellaneous encodings"
Encode::EBCDIC, Encode::Symbols, Encode::MIME::Header, Encode::Guess
.RE
.RS 4
.RE
.IP "Unsupported encodings" 4
.IX Item "Unsupported encodings"
.Vb 4
\&  ISO\-2022\-JP\-2 [RFC1554], ISO\-2022\-CN [RFC1922], Various HP\-UX encodings,
\&Cyrillic encoding ISO\-IR\-111, ISO\-8859\-8\-1 [Hebrew], ISIRI 3342, Iran
\&System, ISIRI 2900 [Farsi], Thai encoding TCVN, Vietnamese encodings VPS,
\&Various Mac encodings, (Mac) Indic encodings
.Ve
.IP "Encoding vs. Charset \*(-- terminology" 4
.IX Item "Encoding vs. Charset terminology"
.PD 0
.IP "Encoding Classification (by Anton Tagunov and Dan Kogai)" 4
.IX Item "Encoding Classification (by Anton Tagunov and Dan Kogai)"
.RS 4
.IP "Microsoft-related naming mess" 4
.IX Item "Microsoft-related naming mess"
.PD
\&\s-1KS_C_5601\-1987, GB2312,\s0 Big5, Shift_JIS
.RE
.RS 4
.RE
.IP "Glossary" 4
.IX Item "Glossary"
character repertoire, coded character set (\s-1CCS\s0), character encoding scheme
(\s-1CES\s0), charset (in \s-1MIME\s0 context), \s-1EUC, ISO\-2022, UCS, UCS\-2,\s0 Unicode, \s-1UTF,
UTF\-16\s0
.IP "See Also" 4
.IX Item "See Also"
.PD 0
.IP "References" 4
.IX Item "References"
.PD
\&\s-1ECMA, ECMA\-035 \s0(eq \f(CW\*(C`ISO\-2022\*(C'\fR), \s-1IANA,\s0 Assigned Charset Names by \s-1IANA, ISO,
RFC, UC,\s0 Unicode Glossary
.RS 4
.IP "Other Notable Sites" 4
.IX Item "Other Notable Sites"
czyborra.com, \s-1CJK\s0.inf, Jungshik Shin's Hangul \s-1FAQ,\s0 debian.org:
\&\*(L"Introduction to i18n\*(R"
.IP "Offline sources" 4
.IX Item "Offline sources"
\&\f(CW\*(C`CJKV Information Processing\*(C'\fR by Ken Lunde
.RE
.RS 4
.RE
.SS "Encode::Symbol \- Symbol Encodings"
.IX Subsection "Encode::Symbol - Symbol Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::TW \- Taiwan-based Chinese Encodings"
.IX Subsection "Encode::TW - Taiwan-based Chinese Encodings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Unicode \*(-- Various Unicode Transformation Formats"
.IX Subsection "Encode::Unicode Various Unicode Transformation Formats"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.PD
<http://www.unicode.org/glossary/> says:, Quick Reference
.IP "Size, Endianness, and \s-1BOM\s0" 4
.IX Item "Size, Endianness, and BOM"
.RS 4
.PD 0
.IP "by size" 4
.IX Item "by size"
.IP "by endianness" 4
.IX Item "by endianness"
.PD
\&\s-1BOM\s0 as integer when fetched in network byte order
.RE
.RS 4
.RE
.IP "Surrogate Pairs" 4
.IX Item "Surrogate Pairs"
.PD 0
.IP "Error Checking" 4
.IX Item "Error Checking"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Encode::Unicode::UTF7 \*(-- \s-1UTF\-7\s0 encoding"
.IX Subsection "Encode::Unicode::UTF7 UTF-7 encoding"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1ABSTRACT\s0" 4
.IX Item "ABSTRACT"
.IP "In Practice" 4
.IX Item "In Practice"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "English \- use nice English (or awk) names for ugly punctuation variables"
.IX Subsection "English - use nice English (or awk) names for ugly punctuation variables"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1PERFORMANCE\s0" 4
.IX Item "PERFORMANCE"
.PD
.SS "Env \- perl module that imports environment variables as scalars or arrays"
.IX Subsection "Env - perl module that imports environment variables as scalars or arrays"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Errno \- System errno constants"
.IX Subsection "Errno - System errno constants"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Exporter \- Implements default import method for modules"
.IX Subsection "Exporter - Implements default import method for modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "How to Export" 4
.IX Item "How to Export"
.IP "Selecting What to Export" 4
.IX Item "Selecting What to Export"
.IP "How to Import" 4
.IX Item "How to Import"
.PD
\&\f(CW\*(C`use YourModule;\*(C'\fR, \f(CW\*(C`use YourModule ();\*(C'\fR, \f(CW\*(C`use YourModule qw(...);\*(C'\fR
.RE
.RS 4
.RE
.IP "Advanced Features" 4
.IX Item "Advanced Features"
.RS 4
.PD 0
.IP "Specialised Import Lists" 4
.IX Item "Specialised Import Lists"
.IP "Exporting Without Using Exporter's import Method" 4
.IX Item "Exporting Without Using Exporter's import Method"
.IP "Exporting Without Inheriting from Exporter" 4
.IX Item "Exporting Without Inheriting from Exporter"
.IP "Module Version Checking" 4
.IX Item "Module Version Checking"
.IP "Managing Unknown Symbols" 4
.IX Item "Managing Unknown Symbols"
.IP "Tag Handling Utility Functions" 4
.IX Item "Tag Handling Utility Functions"
.IP "Generating Combined Tags" 4
.IX Item "Generating Combined Tags"
.ie n .IP """AUTOLOAD""ed Constants" 4
.el .IP "\f(CWAUTOLOAD\fRed Constants" 4
.IX Item "AUTOLOADed Constants"
.RE
.RS 4
.RE
.IP "Good Practices" 4
.IX Item "Good Practices"
.RS 4
.ie n .IP "Declaring @EXPORT_OK and Friends" 4
.el .IP "Declaring \f(CW@EXPORT_OK\fR and Friends" 4
.IX Item "Declaring @EXPORT_OK and Friends"
.IP "Playing Safe" 4
.IX Item "Playing Safe"
.IP "What Not to Export" 4
.IX Item "What Not to Export"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Exporter::Heavy \- Exporter guts"
.IX Subsection "Exporter::Heavy - Exporter guts"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::CBuilder \- Compile and link C code for Perl modules"
.IX Subsection "ExtUtils::CBuilder - Compile and link C code for Perl modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
new, have_compiler, have_cplusplus, compile, \f(CW\*(C`object_file\*(C'\fR,
\&\f(CW\*(C`include_dirs\*(C'\fR, \f(CW\*(C`extra_compiler_flags\*(C'\fR, \f(CW\*(C`C++\*(C'\fR, link, lib_file,
module_name, extra_linker_flags, link_executable, exe_file, object_file,
lib_file, exe_file, prelink, need_prelink, extra_link_args_after_prelink
.IP "\s-1TO DO\s0" 4
.IX Item "TO DO"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::CBuilder::Platform::Windows \- Builder class for Windows platforms"
.IX Subsection "ExtUtils::CBuilder::Platform::Windows - Builder class for Windows platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::Command \- utilities to replace common \s-1UNIX\s0 commands in Makefiles etc."
.IX Subsection "ExtUtils::Command - utilities to replace common UNIX commands in Makefiles etc."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RE
.RS 4
.RE
.PD
.PP
cat
.PP
eqtime
.PP
rm_rf
.PP
rm_f
.PP
touch
.PP
mv
.PP
cp
.PP
chmod
.PP
mkpath
.PP
test_f
.PP
test_d
.PP
dos2unix
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Command::MM \- Commands for the \s-1MM\s0's to use in Makefiles"
.IX Subsection "ExtUtils::Command::MM - Commands for the MM's to use in Makefiles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fBtest_harness\fR
.PP
\&\fBpod2man\fR
.PP
\&\fBwarn_if_old_packlist\fR
.PP
\&\fBperllocal_install\fR
.PP
\&\fBuninstall\fR
.SS "ExtUtils::Constant \- generate \s-1XS\s0 code to import C header constants"
.IX Subsection "ExtUtils::Constant - generate XS code to import C header constants"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.PD
\&\s-1IV, UV, NV, PV, PVN, SV, YES, NO, UNDEF\s0
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PP
constant_types
.PP
XS_constant \s-1PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME\s0
.PP
autoload \s-1PACKAGE, VERSION, AUTOLOADER\s0
.PP
WriteMakefileSnippet
.PP
WriteConstants \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...], \s-1NAME, DEFAULT_TYPE,
BREAKOUT_AT, NAMES, PROXYSUBS, C_FH, C_FILE, XS_FH, XS_FILE, XS_SUBNAME,
C_SUBNAME\s0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "ExtUtils::Constant::Base \- base class for ExtUtils::Constant objects"
.IX Subsection "ExtUtils::Constant::Base - base class for ExtUtils::Constant objects"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.PD
.PP
header
.PP
memEQ_clause args_hashref
.PP
dump_names arg_hashref, \s-1ITEM..\s0
.PP
assign arg_hashref, \s-1VALUE..\s0
.PP
return_clause arg_hashref, \s-1ITEM\s0
.PP
switch_clause arg_hashref, \s-1NAMELEN, ITEMHASH, ITEM..\s0
.PP
params \s-1WHAT\s0
.PP
dogfood arg_hashref, \s-1ITEM..\s0
.PP
normalise_items args, default_type, seen_types, seen_items, \s-1ITEM..\s0
.PP
C_constant arg_hashref, \s-1ITEM..,\s0 name, type, value, macro, default, pre,
post, def_pre, def_post, utf8, weight
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Constant::Utils \- helper functions for ExtUtils::Constant"
.IX Subsection "ExtUtils::Constant::Utils - helper functions for ExtUtils::Constant"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.PD
C_stringify \s-1NAME\s0
.PP
perl_stringify \s-1NAME\s0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "ExtUtils::Constant::XS \- generate C code for \s-1XS\s0 modules' constants."
.IX Subsection "ExtUtils::Constant::XS - generate C code for XS modules' constants."
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Embed \- Utilities for embedding Perl in C/\*(C+ applications"
.IX Subsection "ExtUtils::Embed - Utilities for embedding Perl in C/ applications"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.ie n .IP "@EXPORT" 4
.el .IP "\f(CW@EXPORT\fR" 4
.IX Item "@EXPORT"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
\&\fIxsinit()\fR, Examples, \fIldopts()\fR, Examples, \fIperl_inc()\fR, \fIccflags()\fR, \fIccdlflags()\fR,
\&\fIccopts()\fR, \fIxsi_header()\fR, xsi_protos(@modules), xsi_body(@modules)
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Install \- install files from here to there"
.IX Subsection "ExtUtils::Install - install files from here to there"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
_chmod($$;$), _warnonce(@), _choke(@)
.PP
_move_file_at_boot( \f(CW$file\fR, \f(CW$target\fR, \f(CW$moan\fR  )
.PP
_unlink_or_rename( \f(CW$file\fR, \f(CW$tryhard\fR, \f(CW$installing\fR )
.IP "Functions" 4
.IX Item "Functions"
_get_install_skip
.PP
_have_write_access
.PP
_can_write_dir(\f(CW$dir\fR)
.PP
_mkpath($dir,$show,$mode,$verbose,$dry_run)
.PP
_copy($from,$to,$verbose,$dry_run)
.PP
_chdir($from)
.PP
\&\fBinstall\fR
.PP
_do_cleanup
.PP
install_rooted_file( \f(CW$file\fR ), install_rooted_dir( \f(CW$dir\fR )
.PP
forceunlink( \f(CW$file\fR, \f(CW$tryhard\fR )
.PP
directory_not_empty( \f(CW$dir\fR )
.PP
\&\fBinstall_default\fR \fI\s-1DISCOURAGED\s0\fR
.PP
\&\fBuninstall\fR
.PP
inc_uninstall($filepath,$libdir,$verbose,$dry_run,$ignore,$results)
.PP
run_filter($cmd,$src,$dest)
.PP
\&\fBpm_to_blib\fR
.PP
_autosplit
.PP
_invokant
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
\&\fB\s-1PERL_INSTALL_ROOT\s0\fR, \fB\s-1EU_INSTALL_IGNORE_SKIP\s0\fR,
\&\fB\s-1EU_INSTALL_SITE_SKIPFILE\s0\fR, \fB\s-1EU_INSTALL_ALWAYS_COPY\s0\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "ExtUtils::Installed \- Inventory management of installed modules"
.IX Subsection "ExtUtils::Installed - Inventory management of installed modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
\&\fInew()\fR, \fImodules()\fR, \fIfiles()\fR, \fIdirectories()\fR, \fIdirectory_tree()\fR, \fIvalidate()\fR,
\&\fIpacklist()\fR, \fIversion()\fR
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Liblist \- determine libraries to use and how to use them"
.IX Subsection "ExtUtils::Liblist - determine libraries to use and how to use them"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
For static extensions, For dynamic extensions at build/link time, For
dynamic extensions at load time
.RS 4
.IP "\s-1EXTRALIBS\s0" 4
.IX Item "EXTRALIBS"
.PD 0
.IP "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0" 4
.IX Item "LDLOADLIBS and LD_RUN_PATH"
.IP "\s-1BSLOADLIBS\s0" 4
.IX Item "BSLOADLIBS"
.RE
.RS 4
.RE
.IP "\s-1PORTABILITY\s0" 4
.IX Item "PORTABILITY"
.RS 4
.IP "\s-1VMS\s0 implementation" 4
.IX Item "VMS implementation"
.IP "Win32 implementation" 4
.IX Item "Win32 implementation"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM \- \s-1OS\s0 adjusted ExtUtils::MakeMaker subclass"
.IX Subsection "ExtUtils::MM - OS adjusted ExtUtils::MakeMaker subclass"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::MM_AIX \- \s-1AIX\s0 specific subclass of ExtUtils::MM_Unix"
.IX Subsection "ExtUtils::MM_AIX - AIX specific subclass of ExtUtils::MM_Unix"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM_Any \- Platform-agnostic \s-1MM\s0 methods"
.IX Subsection "ExtUtils::MM_Any - Platform-agnostic MM methods"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Cross-platform helper methods" 4
.IX Item "Cross-platform helper methods"
.RE
.RS 4
.RE
.IP "Targets" 4
.IX Item "Targets"
.IP "Init methods" 4
.IX Item "Init methods"
.IP "Tools" 4
.IX Item "Tools"
.IP "File::Spec wrappers" 4
.IX Item "File::Spec wrappers"
.IP "Misc" 4
.IX Item "Misc"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::MM_BeOS \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_BeOS - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
os_flavor
.PP
init_linker
.SS "ExtUtils::MM_Cygwin \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_Cygwin - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
os_flavor
.PP
cflags
.PP
replace_manpage_separator
.PP
init_linker
.PP
maybe_command
.PP
dynamic_lib
.PP
all_target
.SS "ExtUtils::MM_DOS \- \s-1DOS\s0 specific subclass of ExtUtils::MM_Unix"
.IX Subsection "ExtUtils::MM_DOS - DOS specific subclass of ExtUtils::MM_Unix"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.PD
os_flavor
.RE
.RS 4
.RE
.PP
\&\fBreplace_manpage_separator\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM_Darwin \- special behaviors for \s-1OS X\s0"
.IX Subsection "ExtUtils::MM_Darwin - special behaviors for OS X"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overriden Methods" 4
.IX Item "Overriden Methods"
.RE
.RS 4
.RE
.PD
.SS "ExtUtils::MM_MacOS \- once produced Makefiles for MacOS Classic"
.IX Subsection "ExtUtils::MM_MacOS - once produced Makefiles for MacOS Classic"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::MM_NW5 \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_NW5 - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
os_flavor
.PP
init_platform, platform_constants
.PP
const_cccmd
.PP
static_lib
.PP
dynamic_lib
.SS "ExtUtils::MM_OS2 \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
init_dist
.PP
init_linker
.PP
os_flavor
.SS "ExtUtils::MM_QNX \- \s-1QNX\s0 specific subclass of ExtUtils::MM_Unix"
.IX Subsection "ExtUtils::MM_QNX - QNX specific subclass of ExtUtils::MM_Unix"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM_UWIN \- U/WIN specific subclass of ExtUtils::MM_Unix"
.IX Subsection "ExtUtils::MM_UWIN - U/WIN specific subclass of ExtUtils::MM_Unix"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.PD
os_flavor
.RE
.RS 4
.RE
.PP
\&\fBreplace_manpage_separator\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM_Unix \- methods used by ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "Methods" 4
.IX Item "Methods"
.PD
os_flavor
.PP
c_o (o)
.PP
cflags (o)
.PP
const_cccmd (o)
.PP
const_config (o)
.PP
const_loadlibs (o)
.PP
constants (o)
.PP
depend (o)
.PP
init_DEST
.PP
init_dist
.PP
dist (o)
.PP
dist_basics (o)
.PP
dist_ci (o)
.PP
dist_core (o)
.PP
\&\fBdist_target\fR
.PP
\&\fBtardist_target\fR
.PP
\&\fBzipdist_target\fR
.PP
\&\fBtarfile_target\fR
.PP
zipfile_target
.PP
uutardist_target
.PP
shdist_target
.PP
dlsyms (o)
.PP
dynamic_bs (o)
.PP
dynamic_lib (o)
.PP
exescan
.PP
extliblist
.PP
find_perl
.PP
fixin
.PP
force (o)
.PP
guess_name
.PP
has_link_code
.PP
init_dirscan
.PP
init_MANPODS
.PP
init_MAN1PODS
.PP
init_MAN3PODS
.PP
init_PM
.PP
init_DIRFILESEP
.PP
init_main
.PP
init_tools
.PP
init_linker
.PP
init_lib2arch
.PP
init_PERL
.PP
init_platform, platform_constants
.PP
init_PERM
.PP
init_xs
.PP
install (o)
.PP
installbin (o)
.PP
linkext (o)
.PP
lsdir
.PP
macro (o)
.PP
makeaperl (o)
.PP
makefile (o)
.PP
maybe_command
.PP
needs_linking (o)
.PP
parse_abstract
.PP
parse_version
.PP
pasthru (o)
.PP
perl_script
.PP
perldepend (o)
.PP
pm_to_blib
.PP
post_constants (o)
.PP
post_initialize (o)
.PP
postamble (o)
.PP
ppd
.PP
prefixify
.PP
processPL (o)
.PP
quote_paren
.PP
replace_manpage_separator
.PP
cd
.PP
oneliner
.PP
quote_literal
.PP
escape_newlines
.PP
max_exec_len
.PP
static (o)
.PP
static_lib (o)
.PP
staticmake (o)
.PP
subdir_x (o)
.PP
subdirs (o)
.PP
test (o)
.PP
test_via_harness (override)
.PP
test_via_script (override)
.PP
tool_xsubpp (o)
.PP
all_target
.PP
top_targets (o)
.PP
writedoc
.PP
xs_c (o)
.PP
xs_cpp (o)
.PP
xs_o (o)
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "ExtUtils::MM_VMS \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_VMS - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Methods always loaded" 4
.IX Item "Methods always loaded"
.PD
wraplist
.RE
.RS 4
.RE
.IP "Methods" 4
.IX Item "Methods"
guess_name (override)
.PP
find_perl (override)
.PP
_fixin_replace_shebang (override)
.PP
maybe_command (override)
.PP
pasthru (override)
.PP
pm_to_blib (override)
.PP
perl_script (override)
.PP
replace_manpage_separator
.PP
init_DEST
.PP
init_DIRFILESEP
.PP
init_main (override)
.PP
init_tools (override)
.PP
init_platform (override)
.PP
platform_constants
.PP
init_VERSION (override)
.PP
constants (override)
.PP
special_targets
.PP
cflags (override)
.PP
const_cccmd (override)
.PP
tools_other (override)
.PP
init_dist (override)
.PP
c_o (override)
.PP
xs_c (override)
.PP
xs_o (override)
.PP
dlsyms (override)
.PP
dynamic_lib (override)
.PP
static_lib (override)
.PP
extra_clean_files
.PP
zipfile_target, tarfile_target, shdist_target
.PP
install (override)
.PP
perldepend (override)
.PP
makeaperl (override)
.PP
maketext_filter (override)
.PP
prefixify (override)
.PP
cd
.PP
oneliner
.PP
\&\fBecho\fR
.PP
quote_literal
.PP
escape_dollarsigns
.PP
escape_all_dollarsigns
.PP
escape_newlines
.PP
max_exec_len
.PP
init_linker
.PP
catdir (override), catfile (override)
.PP
eliminate_macros
.PP
fixpath
.PP
os_flavor
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "ExtUtils::MM_VOS \- \s-1VOS\s0 specific subclass of ExtUtils::MM_Unix"
.IX Subsection "ExtUtils::MM_VOS - VOS specific subclass of ExtUtils::MM_Unix"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MM_Win32 \- methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IX Subsection "ExtUtils::MM_Win32 - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.PD
\&\fBdlsyms\fR
.PP
replace_manpage_separator
.PP
\&\fBmaybe_command\fR
.PP
\&\fBinit_DIRFILESEP\fR
.PP
init_tools
.PP
init_others
.PP
init_platform, platform_constants
.PP
constants
.PP
special_targets
.PP
static_lib
.PP
dynamic_lib
.PP
extra_clean_files
.PP
init_linker
.PP
perl_script
.PP
xs_o
.PP
pasthru
.PP
arch_check (override)
.PP
oneliner
.PP
cd
.PP
max_exec_len
.PP
os_flavor
.PP
cflags
.SS "ExtUtils::MM_Win95 \- method to customize MakeMaker for Win9X"
.IX Subsection "ExtUtils::MM_Win95 - method to customize MakeMaker for Win9X"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Overridden methods" 4
.IX Item "Overridden methods"
.PD
xs_c
.RE
.RS 4
.RE
.PP
xs_cpp
.PP
xs_o
.PP
max_exec_len
.PP
os_flavor
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "ExtUtils::MY \- ExtUtils::MakeMaker subclass for customization"
.IX Subsection "ExtUtils::MY - ExtUtils::MakeMaker subclass for customization"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::MakeMaker \- Create a module Makefile"
.IX Subsection "ExtUtils::MakeMaker - Create a module Makefile"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "How To Write A Makefile.PL" 4
.IX Item "How To Write A Makefile.PL"
.IP "Default Makefile Behaviour" 4
.IX Item "Default Makefile Behaviour"
.IP "make test" 4
.IX Item "make test"
.IP "make testdb" 4
.IX Item "make testdb"
.IP "make install" 4
.IX Item "make install"
.IP "\s-1INSTALL_BASE\s0" 4
.IX Item "INSTALL_BASE"
.IP "\s-1PREFIX\s0 and \s-1LIB\s0 attribute" 4
.IX Item "PREFIX and LIB attribute"
.IP "\s-1AFS\s0 users" 4
.IX Item "AFS users"
.IP "Static Linking of a new Perl Binary" 4
.IX Item "Static Linking of a new Perl Binary"
.IP "Determination of Perl Library and Installation Locations" 4
.IX Item "Determination of Perl Library and Installation Locations"
.IP "Which architecture dependent directory?" 4
.IX Item "Which architecture dependent directory?"
.IP "Using Attributes and Parameters" 4
.IX Item "Using Attributes and Parameters"
.PD
\&\s-1ABSTRACT, ABSTRACT_FROM, AUTHOR, BINARY_LOCATION, BUILD_REQUIRES, C,
CCFLAGS, CONFIG, CONFIGURE, CONFIGURE_REQUIRES, DEFINE, DESTDIR, DIR,
DISTNAME, DISTVNAME, DL_FUNCS, DL_VARS, EXCLUDE_EXT, EXE_FILES,
FIRST_MAKEFILE, FULLPERL, FULLPERLRUN, FULLPERLRUNINST, FUNCLIST, H,
IMPORTS, INC, INCLUDE_EXT, INSTALLARCHLIB, INSTALLBIN, INSTALLDIRS,
INSTALLMAN1DIR, INSTALLMAN3DIR, INSTALLPRIVLIB, INSTALLSCRIPT,
INSTALLSITEARCH, INSTALLSITEBIN, INSTALLSITELIB, INSTALLSITEMAN1DIR,
INSTALLSITEMAN3DIR, INSTALLSITESCRIPT, INSTALLVENDORARCH, INSTALLVENDORBIN,
INSTALLVENDORLIB, INSTALLVENDORMAN1DIR, INSTALLVENDORMAN3DIR,
INSTALLVENDORSCRIPT, INST_ARCHLIB, INST_BIN, INST_LIB, INST_MAN1DIR,
INST_MAN3DIR, INST_SCRIPT, LD, LDDLFLAGS, LDFROM, LIB, LIBPERL_A, LIBS,
LICENSE, LINKTYPE, MAKE, MAKEAPERL, MAKEFILE_OLD, MAN1PODS, MAN3PODS,
MAP_TARGET, META_ADD, META_MERGE, MIN_PERL_VERSION, MYEXTLIB, NAME,
NEEDS_LINKING, NOECHO, NORECURS, NO_META, NO_MYMETA, NO_VC, OBJECT,
OPTIMIZE, PERL, PERL_CORE, PERLMAINCC, PERL_ARCHLIB, PERL_LIB,
PERL_MALLOC_OK, PERLPREFIX, PERLRUN, PERLRUNINST, PERL_SRC, PERM_DIR,
PERM_RW, PERM_RWX, PL_FILES, PM, PMLIBDIRS, PM_FILTER, POLLUTE,
PPM_INSTALL_EXEC, PPM_INSTALL_SCRIPT, PREFIX, PREREQ_FATAL, PREREQ_PM,
PREREQ_PRINT, PRINT_PREREQ, SITEPREFIX, SIGN, SKIP, TEST_REQUIRES,
TYPEMAPS, VENDORPREFIX, VERBINST, VERSION, VERSION_FROM, VERSION_SYM, XS,
XSOPT, XSPROTOARG, XS_VERSION\s0
.IP "Additional lowercase attributes" 4
.IX Item "Additional lowercase attributes"
clean, depend, dist, dynamic_lib, linkext, macro, postamble, realclean,
test, tool_autosplit
.IP "Overriding MakeMaker Methods" 4
.IX Item "Overriding MakeMaker Methods"
.PD 0
.IP "The End Of Cargo Cult Programming" 4
.IX Item "The End Of Cargo Cult Programming"
.PD
\&\f(CW\*(C`MAN3PODS => \*(Aq \*(Aq\*(C'\fR
.IP "Hintsfile support" 4
.IX Item "Hintsfile support"
.PD 0
.IP "Distribution Support" 4
.IX Item "Distribution Support"
.PD
.Vb 3
\&   make distcheck,    make skipcheck,    make distclean,    make manifest, 
\&  make distdir,   make disttest,    make tardist,    make dist,    make
\&uutardist,    make shdist,    make zipdist,    make ci
.Ve
.IP "Module Meta-Data (\s-1META\s0 and \s-1MYMETA\s0)" 4
.IX Item "Module Meta-Data (META and MYMETA)"
.PD 0
.IP "Disabling an extension" 4
.IX Item "Disabling an extension"
.IP "Other Handy Functions" 4
.IX Item "Other Handy Functions"
.PD
prompt
.RE
.RS 4
.RE
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
\&\s-1PERL_MM_OPT, PERL_MM_USE_DEFAULT, PERL_CORE\s0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "ExtUtils::MakeMaker::Config \- Wrapper around Config.pm"
.IX Subsection "ExtUtils::MakeMaker::Config - Wrapper around Config.pm"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::MakeMaker::FAQ \- Frequently Asked Questions About MakeMaker"
.IX Subsection "ExtUtils::MakeMaker::FAQ - Frequently Asked Questions About MakeMaker"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Module Installation" 4
.IX Item "Module Installation"
.PD
How do I install a module into my home directory?, How do I get MakeMaker
and Module::Build to install to the same place?, How do I keep from
installing man pages?, How do I use a module without installing it?, \s-1PREFIX\s0
vs \s-1INSTALL_BASE\s0 from Module::Build::Cookbook
.IP "Common errors and problems" 4
.IX Item "Common errors and problems"
\&\*(L"No rule to make target `/usr/lib/perl5/CORE/config.h', needed by
`Makefile'\*(R"
.IP "Philosophy and History" 4
.IX Item "Philosophy and History"
Why not just use <insert other build config tool here>?, What is
Module::Build and how does it relate to MakeMaker?, pure perl.	no make, no
shell commands, easier to customize, cleaner internals, less cruft
.IP "Module Writing" 4
.IX Item "Module Writing"
How do I keep my \f(CW$VERSION\fR up to date without resetting it manually?, What's
this \fI\s-1META\s0.yml\fR thing and how did it get in my \fI\s-1MANIFEST\s0\fR?!, How do I
delete everything not in my \fI\s-1MANIFEST\s0\fR?, Which tar should I use on
Windows?, Which zip should I use on Windows for '[nd]make zipdist'?
.IP "\s-1XS\s0" 4
.IX Item "XS"
How do I prevent \*(L"object version X.XX does not match bootstrap parameter
Y.YY\*(R" errors?, How do I make two or more \s-1XS\s0 files coexist in the same
directory?
.RE
.RS 4
.RE
.IP "\s-1PATCHING\s0" 4
.IX Item "PATCHING"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::MakeMaker::Tutorial \- Writing a module with MakeMaker"
.IX Subsection "ExtUtils::MakeMaker::Tutorial - Writing a module with MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "The Mantra" 4
.IX Item "The Mantra"
.IP "The Layout" 4
.IX Item "The Layout"
.PD
Makefile.PL, \s-1MANIFEST,\s0 lib/, t/, Changes, \s-1README, INSTALL, MANIFEST.SKIP,\s0
bin/
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "ExtUtils::Manifest \- utilities to write and check a \s-1MANIFEST\s0 file"
.IX Subsection "ExtUtils::Manifest - utilities to write and check a MANIFEST file"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Functions" 4
.IX Item "Functions"
.PD
mkmanifest
.RE
.RS 4
.RE
.PP
manifind
.PP
manicheck
.PP
filecheck
.PP
fullcheck
.PP
skipcheck
.PP
maniread
.PP
maniskip
.PP
manicopy
.PP
maniadd
.IP "\s-1MANIFEST\s0" 4
.IX Item "MANIFEST"
.PD 0
.IP "\s-1MANIFEST.SKIP\s0" 4
.IX Item "MANIFEST.SKIP"
.PD
#!include_default, #!include /Path/to/another/manifest.skip
.IP "\s-1EXPORT_OK\s0" 4
.IX Item "EXPORT_OK"
.PD 0
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
\&\f(CW\*(C`Not in MANIFEST:\*(C'\fR \fIfile\fR, \f(CW\*(C`Skipping\*(C'\fR \fIfile\fR, \f(CW\*(C`No such file:\*(C'\fR \fIfile\fR,
\&\f(CW\*(C`MANIFEST:\*(C'\fR \fI$!\fR, \f(CW\*(C`Added to MANIFEST:\*(C'\fR \fIfile\fR
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
\&\fB\s-1PERL_MM_MANIFEST_DEBUG\s0\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::Miniperl, writemain \- write the C code for perlmain.c"
.IX Subsection "ExtUtils::Miniperl, writemain - write the C code for perlmain.c"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::Mkbootstrap \- make a bootstrap file for use by DynaLoader"
.IX Subsection "ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::Mksymlists \- write linker options files for dynamic extension"
.IX Subsection "ExtUtils::Mksymlists - write linker options files for dynamic extension"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1DLBASE, DL_FUNCS, DL_VARS, FILE, FUNCLIST, IMPORTS, NAME\s0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1REVISION\s0" 4
.IX Item "REVISION"
.PD
\&\fImkfh()\fR
.PP
_\|_find_relocations
.SS "ExtUtils::Packlist \- manage .packlist files"
.IX Subsection "ExtUtils::Packlist - manage .packlist files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
\&\fInew()\fR, \fIread()\fR, \fIwrite()\fR, \fIvalidate()\fR, \fIpacklist_file()\fR
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "ExtUtils::ParseXS \- converts Perl \s-1XS\s0 code into C code"
.IX Subsection "ExtUtils::ParseXS - converts Perl XS code into C code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
\&\fIprocess_file()\fR, \fB\*(C+\fR, \fBhiertype\fR, \fBexcept\fR, \fBtypemap\fR, \fBprototypes\fR,
\&\fBversioncheck\fR, \fBlinenumbers\fR, \fBoptimize\fR, \fBinout\fR, \fBargtypes\fR, \fBs\fR,
\&\fIerrors()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "ExtUtils::ParseXS::Constants \- Initialization values for some globals"
.IX Subsection "ExtUtils::ParseXS::Constants - Initialization values for some globals"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "ExtUtils::ParseXS::Utilities \- Subroutines used with ExtUtils::ParseXS"
.IX Subsection "ExtUtils::ParseXS::Utilities - Subroutines used with ExtUtils::ParseXS"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1SUBROUTINES\s0" 4
.IX Item "SUBROUTINES"
.RS 4
.ie n .IP """standard_typemap_locations()""" 4
.el .IP "\f(CWstandard_typemap_locations()\fR" 4
.IX Item "standard_typemap_locations()"
.PD
Purpose, Arguments, Return Value
.RE
.RS 4
.RE
.ie n .IP """trim_whitespace()""" 4
.el .IP "\f(CWtrim_whitespace()\fR" 4
.IX Item "trim_whitespace()"
Purpose, Argument, Return Value
.ie n .IP """tidy_type()""" 4
.el .IP "\f(CWtidy_type()\fR" 4
.IX Item "tidy_type()"
Purpose, Arguments, Return Value
.ie n .IP """C_string()""" 4
.el .IP "\f(CWC_string()\fR" 4
.IX Item "C_string()"
Purpose, Arguments, Return Value
.ie n .IP """valid_proto_string()""" 4
.el .IP "\f(CWvalid_proto_string()\fR" 4
.IX Item "valid_proto_string()"
Purpose, Arguments, Return Value
.ie n .IP """process_typemaps()""" 4
.el .IP "\f(CWprocess_typemaps()\fR" 4
.IX Item "process_typemaps()"
Purpose, Arguments, Return Value
.ie n .IP """make_targetable()""" 4
.el .IP "\f(CWmake_targetable()\fR" 4
.IX Item "make_targetable()"
Purpose, Arguments, Return Value
.ie n .IP """map_type()""" 4
.el .IP "\f(CWmap_type()\fR" 4
.IX Item "map_type()"
Purpose, Arguments, Return Value
.ie n .IP """standard_XS_defs()""" 4
.el .IP "\f(CWstandard_XS_defs()\fR" 4
.IX Item "standard_XS_defs()"
Purpose, Arguments, Return Value
.ie n .IP """assign_func_args()""" 4
.el .IP "\f(CWassign_func_args()\fR" 4
.IX Item "assign_func_args()"
Purpose, Arguments, Return Value
.ie n .IP """analyze_preprocessor_statements()""" 4
.el .IP "\f(CWanalyze_preprocessor_statements()\fR" 4
.IX Item "analyze_preprocessor_statements()"
Purpose, Arguments, Return Value
.ie n .IP """set_cond()""" 4
.el .IP "\f(CWset_cond()\fR" 4
.IX Item "set_cond()"
Purpose, Arguments, Return Value
.ie n .IP """current_line_number()""" 4
.el .IP "\f(CWcurrent_line_number()\fR" 4
.IX Item "current_line_number()"
Purpose, Arguments, Return Value
.ie n .IP """Warn()""" 4
.el .IP "\f(CWWarn()\fR" 4
.IX Item "Warn()"
Purpose, Arguments, Return Value
.ie n .IP """blurt()""" 4
.el .IP "\f(CWblurt()\fR" 4
.IX Item "blurt()"
Purpose, Arguments, Return Value
.ie n .IP """death()""" 4
.el .IP "\f(CWdeath()\fR" 4
.IX Item "death()"
Purpose, Arguments, Return Value
.ie n .IP """check_conditional_preprocessor_statements()""" 4
.el .IP "\f(CWcheck_conditional_preprocessor_statements()\fR" 4
.IX Item "check_conditional_preprocessor_statements()"
Purpose, Arguments, Return Value
.ie n .IP """escape_file_for_line_directive()""" 4
.el .IP "\f(CWescape_file_for_line_directive()\fR" 4
.IX Item "escape_file_for_line_directive()"
Purpose, Arguments, Return Value
.ie n .IP """report_typemap_failure""" 4
.el .IP "\f(CWreport_typemap_failure\fR" 4
.IX Item "report_typemap_failure"
Purpose, Arguments, Return Value
.SS "ExtUtils::Typemaps \- Read/Write/Modify Perl/XS typemap files"
.IX Subsection "ExtUtils::Typemaps - Read/Write/Modify Perl/XS typemap files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "new" 4
.IX Item "new"
.IP "file" 4
.IX Item "file"
.IP "add_typemap" 4
.IX Item "add_typemap"
.IP "add_inputmap" 4
.IX Item "add_inputmap"
.IP "add_outputmap" 4
.IX Item "add_outputmap"
.IP "add_string" 4
.IX Item "add_string"
.IP "remove_typemap" 4
.IX Item "remove_typemap"
.IP "remove_inputmap" 4
.IX Item "remove_inputmap"
.IP "remove_inputmap" 4
.IX Item "remove_inputmap"
.IP "get_typemap" 4
.IX Item "get_typemap"
.IP "get_inputmap" 4
.IX Item "get_inputmap"
.IP "get_outputmap" 4
.IX Item "get_outputmap"
.IP "write" 4
.IX Item "write"
.IP "as_string" 4
.IX Item "as_string"
.IP "as_embedded_typemap" 4
.IX Item "as_embedded_typemap"
.IP "merge" 4
.IX Item "merge"
.IP "is_empty" 4
.IX Item "is_empty"
.IP "list_mapped_ctypes" 4
.IX Item "list_mapped_ctypes"
.IP "_get_typemap_hash" 4
.IX Item "_get_typemap_hash"
.IP "_get_inputmap_hash" 4
.IX Item "_get_inputmap_hash"
.IP "_get_outputmap_hash" 4
.IX Item "_get_outputmap_hash"
.IP "_get_prototype_hash" 4
.IX Item "_get_prototype_hash"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "ExtUtils::Typemaps::Cmd \- Quick commands for handling typemaps"
.IX Subsection "ExtUtils::Typemaps::Cmd - Quick commands for handling typemaps"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORTED FUNCTIONS\s0" 4
.IX Item "EXPORTED FUNCTIONS"
.RS 4
.IP "embeddable_typemap" 4
.IX Item "embeddable_typemap"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "ExtUtils::Typemaps::InputMap \- Entry in the \s-1INPUT\s0 section of a typemap"
.IX Subsection "ExtUtils::Typemaps::InputMap - Entry in the INPUT section of a typemap"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "new" 4
.IX Item "new"
.IP "code" 4
.IX Item "code"
.IP "xstype" 4
.IX Item "xstype"
.IP "cleaned_code" 4
.IX Item "cleaned_code"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "ExtUtils::Typemaps::OutputMap \- Entry in the \s-1OUTPUT\s0 section of a typemap"
.IX Subsection "ExtUtils::Typemaps::OutputMap - Entry in the OUTPUT section of a typemap"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "new" 4
.IX Item "new"
.IP "code" 4
.IX Item "code"
.IP "xstype" 4
.IX Item "xstype"
.IP "cleaned_code" 4
.IX Item "cleaned_code"
.IP "targetable" 4
.IX Item "targetable"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "ExtUtils::Typemaps::Type \- Entry in the \s-1TYPEMAP\s0 section of a typemap"
.IX Subsection "ExtUtils::Typemaps::Type - Entry in the TYPEMAP section of a typemap"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "new" 4
.IX Item "new"
.IP "proto" 4
.IX Item "proto"
.IP "xstype" 4
.IX Item "xstype"
.IP "ctype" 4
.IX Item "ctype"
.IP "tidy_ctype" 4
.IX Item "tidy_ctype"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "ExtUtils::XSSymSet \- keep sets of symbol names palatable to the \s-1VMS\s0 linker"
.IX Subsection "ExtUtils::XSSymSet - keep sets of symbol names palatable to the VMS linker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
new([$maxlen[,$silent]]), addsym($name[,$maxlen[,$silent]]),
trimsym($name[,$maxlen[,$silent]]), delsym($name), get_orig($trimmed),
get_trimmed($name), \fIall_orig()\fR, \fIall_trimmed()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1REVISION\s0" 4
.IX Item "REVISION"
.PD
.ie n .SS "ExtUtils::testlib \- add blib/* directories to @INC"
.el .SS "ExtUtils::testlib \- add blib/* directories to \f(CW@INC\fP"
.IX Subsection "ExtUtils::testlib - add blib/* directories to @INC"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Fatal \- Replace functions with equivalents which succeed or die"
.IX Subsection "Fatal - Replace functions with equivalents which succeed or die"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1BEST PRACTICE\s0" 4
.IX Item "BEST PRACTICE"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
Bad subroutine name for Fatal: \f(CW%s\fR, \f(CW%s\fR is not a Perl subroutine, \f(CW%s\fR is
neither a builtin, nor a Perl subroutine, Cannot make the non-overridable
\&\f(CW%s\fR fatal, Internal error: \f(CW%s\fR
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Fcntl \- load the C Fcntl.h defines"
.IX Subsection "Fcntl - load the C Fcntl.h defines"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1EXPORTED SYMBOLS\s0" 4
.IX Item "EXPORTED SYMBOLS"
.PD
.SS "File::Basename \- Parse file paths into directory, filename and suffix."
.IX Subsection "File::Basename - Parse file paths into directory, filename and suffix."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
\&\f(CW\*(C`fileparse\*(C'\fR
.IX Xref "fileparse"
.PP
\&\f(CW\*(C`basename\*(C'\fR
.IX Xref "basename filename"
.PP
\&\f(CW\*(C`dirname\*(C'\fR
.IX Xref "dirname"
.PP
\&\f(CW\*(C`fileparse_set_fstype\*(C'\fR
.IX Xref "filesystem"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "File::CheckTree \- run many filetest checks on a tree"
.IX Subsection "File::CheckTree - run many filetest checks on a tree"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
.SS "File::Compare \- Compare files or filehandles"
.IX Subsection "File::Compare - Compare files or filehandles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "File::Copy \- Copy files or filehandles"
.IX Subsection "File::Copy - Copy files or filehandles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
copy  , move   , syscopy ,
rmscopy($from,$to[,$date_flag])
.IX Xref "copy cp move mv rename syscopy rmscopy"
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "File::DosGlob \- \s-1DOS\s0 like globbing and then some"
.IX Subsection "File::DosGlob - DOS like globbing and then some"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORTS \s0(by request only)" 4
.IX Item "EXPORTS (by request only)"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Fetch \- A generic file fetching mechanism"
.IX Subsection "File::Fetch - A generic file fetching mechanism"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
\&\f(CW$ff\fR\->uri, \f(CW$ff\fR\->scheme, \f(CW$ff\fR\->host, \f(CW$ff\fR\->vol, \f(CW$ff\fR\->share, \f(CW$ff\fR\->path,
\&\f(CW$ff\fR\->file, \f(CW$ff\fR\->file_default
.PP
\&\f(CW$ff\fR\->output_file
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.ie n .IP "$ff = File::Fetch\->new( uri => 'http://some.where.com/dir/file.txt' );" 4
.el .IP "\f(CW$ff\fR = File::Fetch\->new( uri => 'http://some.where.com/dir/file.txt' );" 4
.IX Item "$ff = File::Fetch->new( uri => 'http://some.where.com/dir/file.txt' );"
.RE
.RS 4
.RE
.ie n .IP "$where = $ff\->fetch( [to => /my/output/dir/ | \e$scalar] )" 4
.el .IP "\f(CW$where\fR = \f(CW$ff\fR\->fetch( [to => /my/output/dir/ | \e$scalar] )" 4
.IX Item "$where = $ff->fetch( [to => /my/output/dir/ | $scalar] )"
.ie n .IP "$ff\->error([\s-1BOOL\s0])" 4
.el .IP "\f(CW$ff\fR\->error([\s-1BOOL\s0])" 4
.IX Item "$ff->error([BOOL])"
.IP "\s-1HOW IT WORKS\s0" 4
.IX Item "HOW IT WORKS"
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$File::Fetch::FROM_EMAIL" 4
.el .IP "\f(CW$File::Fetch::FROM_EMAIL\fR" 4
.IX Item "$File::Fetch::FROM_EMAIL"
.ie n .IP "$File::Fetch::USER_AGENT" 4
.el .IP "\f(CW$File::Fetch::USER_AGENT\fR" 4
.IX Item "$File::Fetch::USER_AGENT"
.ie n .IP "$File::Fetch::FTP_PASSIVE" 4
.el .IP "\f(CW$File::Fetch::FTP_PASSIVE\fR" 4
.IX Item "$File::Fetch::FTP_PASSIVE"
.ie n .IP "$File::Fetch::TIMEOUT" 4
.el .IP "\f(CW$File::Fetch::TIMEOUT\fR" 4
.IX Item "$File::Fetch::TIMEOUT"
.ie n .IP "$File::Fetch::WARN" 4
.el .IP "\f(CW$File::Fetch::WARN\fR" 4
.IX Item "$File::Fetch::WARN"
.ie n .IP "$File::Fetch::DEBUG" 4
.el .IP "\f(CW$File::Fetch::DEBUG\fR" 4
.IX Item "$File::Fetch::DEBUG"
.ie n .IP "$File::Fetch::BLACKLIST" 4
.el .IP "\f(CW$File::Fetch::BLACKLIST\fR" 4
.IX Item "$File::Fetch::BLACKLIST"
.ie n .IP "$File::Fetch::METHOD_FAIL" 4
.el .IP "\f(CW$File::Fetch::METHOD_FAIL\fR" 4
.IX Item "$File::Fetch::METHOD_FAIL"
.RE
.RS 4
.RE
.IP "\s-1MAPPING\s0" 4
.IX Item "MAPPING"
.IP "\s-1FREQUENTLY ASKED QUESTIONS\s0" 4
.IX Item "FREQUENTLY ASKED QUESTIONS"
.RS 4
.IP "So how do I use a proxy with File::Fetch?" 4
.IX Item "So how do I use a proxy with File::Fetch?"
.IP "I used 'lynx' to fetch a file, but its contents is all wrong!" 4
.IX Item "I used 'lynx' to fetch a file, but its contents is all wrong!"
.IP "Files I'm trying to fetch have reserved characters or non-ASCII characters in them. What do I do?" 4
.IX Item "Files I'm trying to fetch have reserved characters or non-ASCII characters in them. What do I do?"
.RE
.RS 4
.RE
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.PD
Implement \f(CW$PREFER_BIN\fR
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "File::Find \- Traverse a directory tree."
.IX Subsection "File::Find - Traverse a directory tree."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fBfind\fR, \fBfinddepth\fR
.RS 4
.ie n .IP "%options" 4
.el .IP "\f(CW%options\fR" 4
.IX Item "%options"
\&\f(CW\*(C`wanted\*(C'\fR, \f(CW\*(C`bydepth\*(C'\fR, \f(CW\*(C`preprocess\*(C'\fR, \f(CW\*(C`postprocess\*(C'\fR, \f(CW\*(C`follow\*(C'\fR,
\&\f(CW\*(C`follow_fast\*(C'\fR, \f(CW\*(C`follow_skip\*(C'\fR, \f(CW\*(C`dangling_symlinks\*(C'\fR, \f(CW\*(C`no_chdir\*(C'\fR,
\&\f(CW\*(C`untaint\*(C'\fR, \f(CW\*(C`untaint_pattern\*(C'\fR, \f(CW\*(C`untaint_skip\*(C'\fR
.IP "The wanted function" 4
.IX Item "The wanted function"
\&\f(CW$File::Find::dir\fR is the current directory name,, \f(CW$_\fR is the current
filename within that directory, \f(CW$File::Find::name\fR is the complete
pathname to the file
.RE
.RS 4
.RE
.IP "\s-1WARNINGS\s0" 4
.IX Item "WARNINGS"
.PD 0
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.PD
\&\f(CW$dont_use_nlink\fR, symlinks
.IP "\s-1BUGS AND CAVEATS\s0" 4
.IX Item "BUGS AND CAVEATS"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Glob \- Perl extension for \s-1BSD\s0 glob routine"
.IX Subsection "File::Glob - Perl extension for BSD glob routine"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1META CHARACTERS\s0" 4
.IX Item "META CHARACTERS"
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.IP "\s-1POSIX FLAGS\s0" 4
.IX Item "POSIX FLAGS"
.PD
\&\f(CW\*(C`GLOB_ERR\*(C'\fR, \f(CW\*(C`GLOB_LIMIT\*(C'\fR, \f(CW\*(C`GLOB_MARK\*(C'\fR, \f(CW\*(C`GLOB_NOCASE\*(C'\fR, \f(CW\*(C`GLOB_NOCHECK\*(C'\fR,
\&\f(CW\*(C`GLOB_NOSORT\*(C'\fR, \f(CW\*(C`GLOB_BRACE\*(C'\fR, \f(CW\*(C`GLOB_NOMAGIC\*(C'\fR, \f(CW\*(C`GLOB_QUOTE\*(C'\fR,
\&\f(CW\*(C`GLOB_TILDE\*(C'\fR, \f(CW\*(C`GLOB_CSH\*(C'\fR, \f(CW\*(C`GLOB_ALPHASORT\*(C'\fR
.RE
.RS 4
.RE
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
\&\f(CW\*(C`GLOB_NOSPACE\*(C'\fR, \f(CW\*(C`GLOB_ABEND\*(C'\fR
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "File::GlobMapper \- Extend File Glob to Allow Input and Output Files"
.IX Subsection "File::GlobMapper - Extend File Glob to Allow Input and Output Files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Behind The Scenes" 4
.IX Item "Behind The Scenes"
.IP "Limitations" 4
.IX Item "Limitations"
.IP "Input File Glob" 4
.IX Item "Input File Glob"
.PD
\&\fB~\fR, \fB~user\fR, \fB.\fR, \fB*\fR, \fB?\fR, \fB\e\fR,  \fB[]\fR,  \fB{,}\fR,  \fB()\fR
.IP "Output File Glob" 4
.IX Item "Output File Glob"
\&\*(L"*\*(R", #1
.IP "Returned Data" 4
.IX Item "Returned Data"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.IP "A Rename script" 4
.IX Item "A Rename script"
.IP "A few example globmaps" 4
.IX Item "A few example globmaps"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "File::Path \- Create or remove directory trees"
.IX Subsection "File::Path - Create or remove directory trees"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
make_path( \f(CW$dir1\fR, \f(CW$dir2\fR, .... ), make_path( \f(CW$dir1\fR, \f(CW$dir2\fR, ...., \e%opts ),
mode => \f(CW$num\fR, verbose => \f(CW$bool\fR, error => \e$err, owner => \f(CW$owner\fR, user =>
\&\f(CW$owner\fR, uid => \f(CW$owner\fR, group => \f(CW$group\fR, mkpath( \f(CW$dir\fR ), mkpath( \f(CW$dir\fR,
\&\f(CW$verbose\fR, \f(CW$mode\fR ), mkpath( [$dir1, \f(CW$dir2\fR,...], \f(CW$verbose\fR, \f(CW$mode\fR ), mkpath(
\&\f(CW$dir1\fR, \f(CW$dir2\fR,..., \e%opt ), remove_tree( \f(CW$dir1\fR, \f(CW$dir2\fR, .... ), remove_tree(
\&\f(CW$dir1\fR, \f(CW$dir2\fR, ...., \e%opts ), verbose => \f(CW$bool\fR, safe => \f(CW$bool\fR, keep_root =>
\&\f(CW$bool\fR, result => \e$res, error => \e$err, rmtree( \f(CW$dir\fR ), rmtree( \f(CW$dir\fR,
\&\f(CW$verbose\fR, \f(CW$safe\fR ), rmtree( [$dir1, \f(CW$dir2\fR,...], \f(CW$verbose\fR, \f(CW$safe\fR ), rmtree(
\&\f(CW$dir1\fR, \f(CW$dir2\fR,..., \e%opt )
.RS 4
.IP "\s-1ERROR HANDLING\s0" 4
.IX Item "ERROR HANDLING"
\&\fB\s-1NOTE:\s0\fR
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
mkdir [path]: [errmsg] (\s-1SEVERE\s0), No root path(s) specified, No such file or
directory, cannot fetch initial working directory: [errmsg], cannot stat
initial working directory: [errmsg], cannot chdir to [dir]: [errmsg],
directory [dir] changed before chdir, expected dev=[n] ino=[n], actual
dev=[n] ino=[n], aborting. (\s-1FATAL\s0), cannot make directory [dir]
read+writeable: [errmsg], cannot read [dir]: [errmsg], cannot reset chmod
[dir]: [errmsg], cannot remove [dir] when cwd is [dir], cannot chdir to
[parent\-dir] from [child\-dir]: [errmsg], aborting. (\s-1FATAL\s0), cannot stat
prior working directory [dir]: [errmsg], aborting. (\s-1FATAL\s0), previous
directory [parent\-dir] changed before entering [child\-dir], expected
dev=[n] ino=[n], actual dev=[n] ino=[n], aborting. (\s-1FATAL\s0), cannot make
directory [dir] writeable: [errmsg], cannot remove directory [dir]:
[errmsg], cannot restore permissions of [dir] to [0nnn]: [errmsg], cannot
make file [file] writeable: [errmsg], cannot unlink file [file]: [errmsg],
cannot restore permissions of [file] to [0nnn]: [errmsg], unable to map
[owner] to a uid, ownership not changed");, unable to map [group] to a gid,
group ownership not changed
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "File::Spec \- portably perform operations on file names"
.IX Subsection "File::Spec - portably perform operations on file names"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
canonpath , catdir , catfile , curdir
, devnull , rootdir , tmpdir , updir
, no_upwards, case_tolerant, file_name_is_absolute, path ,
join , splitpath  , splitdir
 , \fIcatpath()\fR, abs2rel  
, \fIrel2abs()\fR
.IX Xref "canonpath catdir catfile curdir devnull rootdir tmpdir updir path join, path splitpath split, path splitdir split, dir abs2rel absolute, path relative, path rel2abs absolute, path relative, path"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "File::Spec::Cygwin \- methods for Cygwin file specs"
.IX Subsection "File::Spec::Cygwin - methods for Cygwin file specs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
canonpath
.PP
file_name_is_absolute
.PP
tmpdir (override)
.PP
case_tolerant
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.SS "File::Spec::Epoc \- methods for Epoc file specs"
.IX Subsection "File::Spec::Epoc - methods for Epoc file specs"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
\&\fIcanonpath()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Spec::Functions \- portably perform operations on file names"
.IX Subsection "File::Spec::Functions - portably perform operations on file names"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Exports" 4
.IX Item "Exports"
.RE
.RS 4
.RE
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Spec::Mac \- File::Spec for Mac \s-1OS \s0(Classic)"
.IX Subsection "File::Spec::Mac - File::Spec for Mac OS (Classic)"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
canonpath
.PP
\&\fIcatdir()\fR
.PP
catfile
.PP
curdir
.PP
devnull
.PP
rootdir
.PP
tmpdir
.PP
updir
.PP
file_name_is_absolute
.PP
path
.PP
splitpath
.PP
splitdir
.PP
catpath
.PP
abs2rel
.PP
rel2abs
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Spec::OS2 \- methods for \s-1OS/2\s0 file specs"
.IX Subsection "File::Spec::OS2 - methods for OS/2 file specs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
tmpdir, splitpath
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.SS "File::Spec::Unix \- File::Spec for Unix, base for other File::Spec modules"
.IX Subsection "File::Spec::Unix - File::Spec for Unix, base for other File::Spec modules"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
\&\fIcanonpath()\fR
.PP
\&\fIcatdir()\fR
.PP
catfile
.PP
curdir
.PP
devnull
.PP
rootdir
.PP
tmpdir
.PP
updir
.PP
no_upwards
.PP
case_tolerant
.PP
file_name_is_absolute
.PP
path
.PP
join
.PP
splitpath
.PP
splitdir
.PP
\&\fIcatpath()\fR
.PP
abs2rel
.PP
\&\fIrel2abs()\fR
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Spec::VMS \- methods for \s-1VMS\s0 file specs"
.IX Subsection "File::Spec::VMS - methods for VMS file specs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
canonpath (override)
.PP
catdir (override)
.PP
catfile (override)
.PP
curdir (override)
.PP
devnull (override)
.PP
rootdir (override)
.PP
tmpdir (override)
.PP
updir (override)
.PP
case_tolerant (override)
.PP
path (override)
.PP
file_name_is_absolute (override)
.PP
splitpath (override)
.PP
splitdir (override)
.PP
catpath (override)
.PP
abs2rel (override)
.PP
rel2abs (override)
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Spec::Win32 \- methods for Win32 file specs"
.IX Subsection "File::Spec::Win32 - methods for Win32 file specs"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
devnull
.PP
tmpdir
.PP
case_tolerant
.PP
file_name_is_absolute
.PP
catfile
.PP
canonpath
.PP
splitpath
.PP
splitdir
.PP
catpath
.IP "Note For File::Spec::Win32 Maintainers" 4
.IX Item "Note For File::Spec::Win32 Maintainers"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "File::Temp \- return name and handle of a temporary file safely"
.IX Subsection "File::Temp - return name and handle of a temporary file safely"
.IP "\s-1PORTABILITY\s0" 4
.IX Item "PORTABILITY"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "OBJECT-ORIENTED \s-1INTERFACE\s0" 4
.IX Item "OBJECT-ORIENTED INTERFACE"
.PD
\&\fBnew\fR
.PP
\&\fBnewdir\fR
.PP
\&\fBfilename\fR
.PP
\&\fBdirname\fR, \fBunlink_on_destroy\fR
.PP
\&\fB\s-1DESTROY\s0\fR
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
\&\fBtempfile\fR
.PP
\&\fBtempdir\fR
.IP "\s-1MKTEMP FUNCTIONS\s0" 4
.IX Item "MKTEMP FUNCTIONS"
\&\fBmkstemp\fR
.PP
\&\fBmkstemps\fR
.PP
\&\fBmkdtemp\fR
.PP
\&\fBmktemp\fR
.IP "\s-1POSIX FUNCTIONS\s0" 4
.IX Item "POSIX FUNCTIONS"
\&\fBtmpnam\fR
.PP
\&\fBtmpfile\fR
.IP "\s-1ADDITIONAL FUNCTIONS\s0" 4
.IX Item "ADDITIONAL FUNCTIONS"
\&\fBtempnam\fR
.IP "\s-1UTILITY FUNCTIONS\s0" 4
.IX Item "UTILITY FUNCTIONS"
\&\fBunlink0\fR
.PP
\&\fBcmpstat\fR
.PP
\&\fBunlink1\fR
.PP
\&\fBcleanup\fR
.IP "\s-1PACKAGE VARIABLES\s0" 4
.IX Item "PACKAGE VARIABLES"
\&\fBsafe_level\fR, \s-1STANDARD, MEDIUM, HIGH\s0
.PP
TopSystemUID
.PP
\&\fB\f(CB$KEEP_ALL\fB\fR, \fB\f(CB$DEBUG\fB\fR
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.RS 4
.PD 0
.IP "Temporary files and \s-1NFS\s0" 4
.IX Item "Temporary files and NFS"
.IP "Forking" 4
.IX Item "Forking"
.IP "Directory removal" 4
.IX Item "Directory removal"
.IP "Taint mode" 4
.IX Item "Taint mode"
.IP "\s-1BINMODE\s0" 4
.IX Item "BINMODE"
.RE
.RS 4
.RE
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "File::stat \- by-name interface to Perl's built-in \fIstat()\fP functions"
.IX Subsection "File::stat - by-name interface to Perl's built-in stat() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1ERRORS\s0" 4
.IX Item "ERRORS"
.PD
\&\-%s is not implemented on a File::stat object
.IP "\s-1WARNINGS\s0" 4
.IX Item "WARNINGS"
File::stat ignores use filetest 'access', File::stat ignores \s-1VMS\s0 ACLs
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "FileCache \- keep more files open than the system permits"
.IX Subsection "FileCache - keep more files open than the system permits"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
cacheout \s-1EXPR,\s0 cacheout \s-1MODE, EXPR\s0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD
.SS "FileHandle \- supply object methods for filehandles"
.IX Subsection "FileHandle - supply object methods for filehandles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$fh\fR\->print, \f(CW$fh\fR\->printf, \f(CW$fh\fR\->getline, \f(CW$fh\fR\->getlines
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "Filter::Simple \- Simplified source filtering"
.IX Subsection "Filter::Simple - Simplified source filtering"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "The Problem" 4
.IX Item "The Problem"
.IP "A Solution" 4
.IX Item "A Solution"
.IP "Disabling or changing <no> behaviour" 4
.IX Item "Disabling or changing <no> behaviour"
.IP "All-in-one interface" 4
.IX Item "All-in-one interface"
.IP "Filtering only specific components of source code" 4
.IX Item "Filtering only specific components of source code"
.PD
\&\f(CW"code"\fR, \f(CW"code_no_comments"\fR, \f(CW"executable"\fR,
\&\f(CW"executable_no_comments"\fR, \f(CW"quotelike"\fR, \f(CW"string"\fR, \f(CW"regex"\fR,
\&\f(CW"all"\fR
.IP "Filtering only the code parts of source code" 4
.IX Item "Filtering only the code parts of source code"
.PD 0
.ie n .IP "Using Filter::Simple with an explicit ""import"" subroutine" 4
.el .IP "Using Filter::Simple with an explicit \f(CWimport\fR subroutine" 4
.IX Item "Using Filter::Simple with an explicit import subroutine"
.IP "Using Filter::Simple and Exporter together" 4
.IX Item "Using Filter::Simple and Exporter together"
.IP "How it works" 4
.IX Item "How it works"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1CONTACT\s0" 4
.IX Item "CONTACT"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Filter::Util::Call \- Perl Source Filter Utility Module"
.IX Subsection "Filter::Util::Call - Perl Source Filter Utility Module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\fBuse Filter::Util::Call\fR" 4
.IX Item "use Filter::Util::Call"
.IP "\fB\f(BIimport()\fB\fR" 4
.IX Item "import()"
.IP "\fB\f(BIfilter()\fB and anonymous sub\fR" 4
.IX Item "filter() and anonymous sub"
.PD
\&\fB\f(CB$_\fB\fR, \fB\f(CB$status\fB\fR, \fBfilter_read\fR and \fBfilter_read_exact\fR, \fBfilter_del\fR
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Example 1: A simple filter." 4
.IX Item "Example 1: A simple filter."
.IP "Example 2: Using the context" 4
.IX Item "Example 2: Using the context"
.IP "Example 3: Using the context within the filter" 4
.IX Item "Example 3: Using the context within the filter"
.IP "Example 4: Using filter_del" 4
.IX Item "Example 4: Using filter_del"
.RE
.RS 4
.RE
.IP "Filter::Simple" 4
.IX Item "Filter::Simple"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1DATE\s0" 4
.IX Item "DATE"
.PD
.SS "FindBin \- Locate directory of original perl script"
.IX Subsection "FindBin - Locate directory of original perl script"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORTABLE VARIABLES\s0" 4
.IX Item "EXPORTABLE VARIABLES"
.IP "\s-1KNOWN ISSUES\s0" 4
.IX Item "KNOWN ISSUES"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Getopt::Long \- Extended processing of command line options"
.IX Subsection "Getopt::Long - Extended processing of command line options"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Command Line Options, an Introduction" 4
.IX Item "Command Line Options, an Introduction"
.IP "Getting Started with Getopt::Long" 4
.IX Item "Getting Started with Getopt::Long"
.RS 4
.IP "Simple options" 4
.IX Item "Simple options"
.IP "A little bit less simple options" 4
.IX Item "A little bit less simple options"
.IP "Mixing command line option with other arguments" 4
.IX Item "Mixing command line option with other arguments"
.IP "Options with values" 4
.IX Item "Options with values"
.IP "Options with multiple values" 4
.IX Item "Options with multiple values"
.IP "Options with hash values" 4
.IX Item "Options with hash values"
.IP "User-defined subroutines to handle options" 4
.IX Item "User-defined subroutines to handle options"
.IP "Options with multiple names" 4
.IX Item "Options with multiple names"
.IP "Case and abbreviations" 4
.IX Item "Case and abbreviations"
.IP "Summary of Option Specifications" 4
.IX Item "Summary of Option Specifications"
.PD
!, +, s, i, o, f, : \fItype\fR [ \fIdesttype\fR ], : \fInumber\fR [ \fIdesttype\fR ], :
+ [ \fIdesttype\fR ]
.RE
.RS 4
.RE
.IP "Advanced Possibilities" 4
.IX Item "Advanced Possibilities"
.RS 4
.PD 0
.IP "Object oriented interface" 4
.IX Item "Object oriented interface"
.IP "Thread Safety" 4
.IX Item "Thread Safety"
.IP "Documentation and help texts" 4
.IX Item "Documentation and help texts"
.IP "Parsing options from an arbitrary array" 4
.IX Item "Parsing options from an arbitrary array"
.IP "Parsing options from an arbitrary string" 4
.IX Item "Parsing options from an arbitrary string"
.IP "Storing options values in a hash" 4
.IX Item "Storing options values in a hash"
.IP "Bundling" 4
.IX Item "Bundling"
.IP "The lonesome dash" 4
.IX Item "The lonesome dash"
.IP "Argument callback" 4
.IX Item "Argument callback"
.RE
.RS 4
.RE
.IP "Configuring Getopt::Long" 4
.IX Item "Configuring Getopt::Long"
.PD
default, posix_default, auto_abbrev, getopt_compat, gnu_compat, gnu_getopt,
require_order, permute, bundling (default: disabled), bundling_override
(default: disabled), ignore_case  (default: enabled), ignore_case_always
(default: disabled), auto_version (default:disabled), auto_help
(default:disabled), pass_through (default: disabled), prefix,
prefix_pattern, long_prefix_pattern, debug (default: disabled)
.IP "Exportable Methods" 4
.IX Item "Exportable Methods"
VersionMessage, \f(CW\*(C`\-message\*(C'\fR, \f(CW\*(C`\-msg\*(C'\fR, \f(CW\*(C`\-exitval\*(C'\fR, \f(CW\*(C`\-output\*(C'\fR, HelpMessage
.IP "Return values and Errors" 4
.IX Item "Return values and Errors"
.PD 0
.IP "Legacy" 4
.IX Item "Legacy"
.RS 4
.IP "Default destinations" 4
.IX Item "Default destinations"
.IP "Alternative option starters" 4
.IX Item "Alternative option starters"
.IP "Configuration variables" 4
.IX Item "Configuration variables"
.RE
.RS 4
.RE
.IP "Tips and Techniques" 4
.IX Item "Tips and Techniques"
.RS 4
.IP "Pushing multiple values in a hash option" 4
.IX Item "Pushing multiple values in a hash option"
.RE
.RS 4
.RE
.IP "Troubleshooting" 4
.IX Item "Troubleshooting"
.RS 4
.IP "GetOptions does not return a false result when an option is not supplied" 4
.IX Item "GetOptions does not return a false result when an option is not supplied"
.IP "GetOptions does not split the command line correctly" 4
.IX Item "GetOptions does not split the command line correctly"
.IP "Undefined subroutine &main::GetOptions called" 4
.IX Item "Undefined subroutine &main::GetOptions called"
.ie n .IP "How do I put a ""\-?"" option into a Getopt::Long?" 4
.el .IP "How do I put a ``\-?'' option into a Getopt::Long?" 4
.IX Item "How do I put a -? option into a Getopt::Long?"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND DISCLAIMER\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMER"
.PD
.SS "Getopt::Std, getopt, getopts \- Process single-character switches with switch clustering"
.IX Subsection "Getopt::Std, getopt, getopts - Process single-character switches with switch clustering"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.ie n .IP """\-\-help"" and ""\-\-version""" 4
.el .IP "\f(CW\-\-help\fR and \f(CW\-\-version\fR" 4
.IX Item "--help and --version"
.PD
.SS "HTTP::Tiny \- A small, simple, correct \s-1HTTP/1.1\s0 client"
.IX Subsection "HTTP::Tiny - A small, simple, correct HTTP/1.1 client"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "get|head|put|post|delete" 4
.IX Item "get|head|put|post|delete"
.IP "post_form" 4
.IX Item "post_form"
.IP "mirror" 4
.IX Item "mirror"
.IP "request" 4
.IX Item "request"
.IP "www_form_urlencode" 4
.IX Item "www_form_urlencode"
.RE
.RS 4
.RE
.IP "\s-1SSL SUPPORT\s0" 4
.IX Item "SSL SUPPORT"
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.RS 4
.IP "Bugs / Feature Requests" 4
.IX Item "Bugs / Feature Requests"
.IP "Source Code" 4
.IX Item "Source Code"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Hash::Util \- A selection of general-utility hash subroutines"
.IX Subsection "Hash::Util - A selection of general-utility hash subroutines"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Restricted hashes" 4
.IX Item "Restricted hashes"
.PD
\&\fBlock_keys\fR, \fBunlock_keys\fR
.RE
.RS 4
.RE
.PP
\&\fBlock_keys_plus\fR
.PP
\&\fBlock_value\fR, \fBunlock_value\fR
.PP
\&\fBlock_hash\fR, \fBunlock_hash\fR
.PP
\&\fBlock_hash_recurse\fR, \fBunlock_hash_recurse\fR
.PP
\&\fBhashref_locked\fR, \fBhash_locked\fR
.PP
\&\fBhashref_unlocked\fR, \fBhash_unlocked\fR
.PP
\&\fBlegal_keys\fR, \fBhidden_keys\fR, \fBall_keys\fR, \fBhash_seed\fR, \fBhash_value\fR,
\&\fBbucket_info\fR, \fBbucket_stats\fR, \fBbucket_array\fR
.PP
\&\fBhv_store\fR, \fBhash_traversal_mask\fR
.IP "Operating on references to hashes." 4
.IX Item "Operating on references to hashes."
lock_ref_keys, unlock_ref_keys, lock_ref_keys_plus, lock_ref_value,
unlock_ref_value, lock_hashref, unlock_hashref, lock_hashref_recurse,
unlock_hashref_recurse, hash_ref_unlocked, legal_ref_keys, hidden_ref_keys
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Hash::Util::FieldHash \- Support for Inside-Out Classes"
.IX Subsection "Hash::Util::FieldHash - Support for Inside-Out Classes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
id, id_2obj, register, idhash, idhashes, fieldhash, fieldhashes
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "The Inside-out Technique" 4
.IX Item "The Inside-out Technique"
.IP "Problems of Inside-out" 4
.IX Item "Problems of Inside-out"
.IP "Solutions" 4
.IX Item "Solutions"
.IP "More Problems" 4
.IX Item "More Problems"
.IP "The Generic Object" 4
.IX Item "The Generic Object"
.IP "How to use Field Hashes" 4
.IX Item "How to use Field Hashes"
.IP "Garbage-Collected Hashes" 4
.IX Item "Garbage-Collected Hashes"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD
\&\f(CW\*(C`init()\*(C'\fR, \f(CW\*(C`first()\*(C'\fR, \f(CW\*(C`last()\*(C'\fR, \f(CW\*(C`name()\*(C'\fR, \f(CW\*(C`Name_hash\*(C'\fR, \f(CW\*(C`Name_id\*(C'\fR,
\&\f(CW\*(C`Name_idhash\*(C'\fR, \f(CW\*(C`Name_id_reg\*(C'\fR, \f(CW\*(C`Name_idhash_reg\*(C'\fR, \f(CW\*(C`Name_fieldhash\*(C'\fR
.RS 4
.IP "Example 1" 4
.IX Item "Example 1"
.PD 0
.IP "Example 2" 4
.IX Item "Example 2"
.RE
.RS 4
.RE
.IP "\s-1GUTS\s0" 4
.IX Item "GUTS"
.RS 4
.ie n .IP "The ""PERL_MAGIC_uvar"" interface for hashes" 4
.el .IP "The \f(CWPERL_MAGIC_uvar\fR interface for hashes" 4
.IX Item "The PERL_MAGIC_uvar interface for hashes"
.IP "Weakrefs call uvar magic" 4
.IX Item "Weakrefs call uvar magic"
.IP "How field hashes work" 4
.IX Item "How field hashes work"
.IP "Internal function Hash::Util::FieldHash::_fieldhash" 4
.IX Item "Internal function Hash::Util::FieldHash::_fieldhash"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "I18N::Collate \- compare 8\-bit scalar data according to the current locale"
.IX Subsection "I18N::Collate - compare 8-bit scalar data according to the current locale"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "I18N::LangTags \- functions for dealing with RFC3066\-style language tags"
.IX Subsection "I18N::LangTags - functions for dealing with RFC3066-style language tags"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.PP
the function is_language_tag($lang1)
.PP
the function extract_language_tags($whatever)
.PP
the function same_language_tag($lang1, \f(CW$lang2\fR)
.PP
the function similarity_language_tag($lang1, \f(CW$lang2\fR)
.PP
the function is_dialect_of($lang1, \f(CW$lang2\fR)
.PP
the function super_languages($lang1)
.PP
the function locale2language_tag($locale_identifier)
.PP
the function encode_language_tag($lang1)
.PP
the function alternate_language_tags($lang1)
.PP
the function \f(CW@langs\fR = panic_languages(@accept_languages)
.PP
the function implicate_supers( ...languages... ), the function
implicate_supers_strictly( ...languages... )
.IP "\s-1ABOUT LOWERCASING\s0" 4
.IX Item "ABOUT LOWERCASING"
.PD 0
.IP "\s-1ABOUT UNICODE PLAINTEXT LANGUAGE TAGS\s0" 4
.IX Item "ABOUT UNICODE PLAINTEXT LANGUAGE TAGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "I18N::LangTags::Detect \- detect the user's language preferences"
.IX Subsection "I18N::LangTags::Detect - detect the user's language preferences"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "I18N::LangTags::List \*(-- tags and names for human languages"
.IX Subsection "I18N::LangTags::List tags and names for human languages"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ABOUT LANGUAGE TAGS\s0" 4
.IX Item "ABOUT LANGUAGE TAGS"
.IP "\s-1LIST OF LANGUAGES\s0" 4
.IX Item "LIST OF LANGUAGES"
.PD
{ab} : Abkhazian, {ace} : Achinese, {ach} : Acoli, {ada} : Adangme, {ady} :
Adyghe, {aa} : Afar, {afh} : Afrihili, {af} : Afrikaans, [{afa} :
Afro-Asiatic (Other)], {ak} : Akan, {akk} : Akkadian, {sq} : Albanian,
{ale} : Aleut, [{alg} : Algonquian languages], [{tut} : Altaic (Other)],
{am} : Amharic, {i\-ami} : Ami, [{apa} : Apache languages], {ar} : Arabic,
{arc} : Aramaic, {arp} : Arapaho, {arn} : Araucanian, {arw} : Arawak, {hy}
: Armenian, {an} : Aragonese, [{art} : Artificial (Other)], {ast} :
Asturian, {as} : Assamese, [{ath} : Athapascan languages], [{aus} :
Australian languages], [{map} : Austronesian (Other)], {av} : Avaric, {ae}
: Avestan, {awa} : Awadhi, {ay} : Aymara, {az} : Azerbaijani, {ban} :
Balinese, [{bat} : Baltic (Other)], {bal} : Baluchi, {bm} : Bambara, [{bai}
: Bamileke languages], {bad} : Banda, [{bnt} : Bantu (Other)], {bas} :
Basa, {ba} : Bashkir, {eu} : Basque, {btk} : Batak (Indonesia), {bej} :
Beja, {be} : Belarusian, {bem} : Bemba, {bn} : Bengali, [{ber} : Berber
(Other)], {bho} : Bhojpuri, {bh} : Bihari, {bik} : Bikol, {bin} : Bini,
{bi} : Bislama, {bs} : Bosnian, {bra} : Braj, {br} : Breton, {bug} :
Buginese, {bg} : Bulgarian, {i\-bnn} : Bunun, {bua} : Buriat, {my} :
Burmese, {cad} : Caddo, {car} : Carib, {ca} : Catalan, [{cau} : Caucasian
(Other)], {ceb} : Cebuano, [{cel} : Celtic (Other)], [{cai} : Central
American Indian (Other)], {chg} : Chagatai, [{cmc} : Chamic languages],
{ch} : Chamorro, {ce} : Chechen, {chr} : Cherokee, {chy} : Cheyenne, {chb}
: Chibcha, {ny} : Chichewa, {zh} : Chinese, {chn} : Chinook Jargon, {chp} :
Chipewyan, {cho} : Choctaw, {cu} : Church Slavic, {chk} : Chuukese, {cv} :
Chuvash, {cop} : Coptic, {kw} : Cornish, {co} : Corsican, {cr} : Cree,
{mus} : Creek, [{cpe} : English-based Creoles and pidgins (Other)], [{cpf}
: French-based Creoles and pidgins (Other)], [{cpp} : Portuguese-based
Creoles and pidgins (Other)], [{crp} : Creoles and pidgins (Other)], {hr} :
Croatian, [{cus} : Cushitic (Other)], {cs} : Czech, {dak} : Dakota, {da} :
Danish, {dar} : Dargwa, {day} : Dayak, {i\-default} : Default (Fallthru)
Language, {del} : Delaware, {din} : Dinka, {dv} : Divehi, {doi} : Dogri,
{dgr} : Dogrib, [{dra} : Dravidian (Other)], {dua} : Duala, {nl} : Dutch,
{dum} : Middle Dutch (ca.1050\-1350), {dyu} : Dyula, {dz} : Dzongkha, {efi}
: Efik, {egy} : Ancient Egyptian, {eka} : Ekajuk, {elx} : Elamite, {en} :
English, {enm} : Old English (1100\-1500), {ang} : Old English
(ca.450\-1100), {i\-enochian} : Enochian (Artificial), {myv} : Erzya, {eo} :
Esperanto, {et} : Estonian, {ee} : Ewe, {ewo} : Ewondo, {fan} : Fang, {fat}
: Fanti, {fo} : Faroese, {fj} : Fijian, {fi} : Finnish, [{fiu} :
Finno-Ugrian (Other)], {fon} : Fon, {fr} : French, {frm} : Middle French
(ca.1400\-1600), {fro} : Old French (842\-ca.1400), {fy} : Frisian, {fur} :
Friulian, {ff} : Fulah, {gaa} : Ga, {gd} : Scots Gaelic, {gl} : Gallegan,
{lg} : Ganda, {gay} : Gayo, {gba} : Gbaya, {gez} : Geez, {ka} : Georgian,
{de} : German, {gmh} : Middle High German (ca.1050\-1500), {goh} : Old High
German (ca.750\-1050), [{gem} : Germanic (Other)], {gil} : Gilbertese, {gon}
: Gondi, {gor} : Gorontalo, {got} : Gothic, {grb} : Grebo, {grc} : Ancient
Greek, {el} : Modern Greek, {gn} : Guarani, {gu} : Gujarati, {gwi} :
Gwich'in, {hai} : Haida, {ht} : Haitian, {ha} : Hausa, {haw} : Hawaiian,
{he} : Hebrew, {hz} : Herero, {hil} : Hiligaynon, {him} : Himachali, {hi} :
Hindi, {ho} : Hiri Motu, {hit} : Hittite, {hmn} : Hmong, {hu} : Hungarian,
{hup} : Hupa, {iba} : Iban, {is} : Icelandic, {io} : Ido, {ig} : Igbo,
{ijo} : Ijo, {ilo} : Iloko, [{inc} : Indic (Other)], [{ine} : Indo-European
(Other)], {id} : Indonesian, {inh} : Ingush, {ia} : Interlingua
(International Auxiliary Language Association), {ie} : Interlingue, {iu} :
Inuktitut, {ik} : Inupiaq, [{ira} : Iranian (Other)], {ga} : Irish, {mga} :
Middle Irish (900\-1200), {sga} : Old Irish (to 900), [{iro} : Iroquoian
languages], {it} : Italian, {ja} : Japanese, {jv} : Javanese, {jrb} :
Judeo-Arabic, {jpr} : Judeo-Persian, {kbd} : Kabardian, {kab} : Kabyle,
{kac} : Kachin, {kl} : Kalaallisut, {xal} : Kalmyk, {kam} : Kamba, {kn} :
Kannada, {kr} : Kanuri, {krc} : Karachay-Balkar, {kaa} : Kara-Kalpak, {kar}
: Karen, {ks} : Kashmiri, {csb} : Kashubian, {kaw} : Kawi, {kk} : Kazakh,
{kha} : Khasi, {km} : Khmer, [{khi} : Khoisan (Other)], {kho} : Khotanese,
{ki} : Kikuyu, {kmb} : Kimbundu, {rw} : Kinyarwanda, {ky} : Kirghiz,
{i\-klingon} : Klingon, {kv} : Komi, {kg} : Kongo, {kok} : Konkani, {ko} :
Korean, {kos} : Kosraean, {kpe} : Kpelle, {kro} : Kru, {kj} : Kuanyama,
{kum} : Kumyk, {ku} : Kurdish, {kru} : Kurukh, {kut} : Kutenai, {lad} :
Ladino, {lah} : Lahnda, {lam} : Lamba, {lo} : Lao, {la} : Latin, {lv} :
Latvian, {lb} : Letzeburgesch, {lez} : Lezghian, {li} : Limburgish, {ln} :
Lingala, {lt} : Lithuanian, {nds} : Low German, {art\-lojban} : Lojban
(Artificial), {loz} : Lozi, {lu} : Luba-Katanga, {lua} : Luba-Lulua, {lui}
: Luiseno, {lun} : Lunda, {luo} : Luo (Kenya and Tanzania), {lus} : Lushai,
{mk} : Macedonian, {mad} : Madurese, {mag} : Magahi, {mai} : Maithili,
{mak} : Makasar, {mg} : Malagasy, {ms} : Malay, {ml} : Malayalam, {mt} :
Maltese, {mnc} : Manchu, {mdr} : Mandar, {man} : Mandingo, {mni} :
Manipuri, [{mno} : Manobo languages], {gv} : Manx, {mi} : Maori, {mr} :
Marathi, {chm} : Mari, {mh} : Marshall, {mwr} : Marwari, {mas} : Masai,
[{myn} : Mayan languages], {men} : Mende, {mic} : Micmac, {min} :
Minangkabau, {i\-mingo} : Mingo, [{mis} : Miscellaneous languages], {moh} :
Mohawk, {mdf} : Moksha, {mo} : Moldavian, [{mkh} : Mon-Khmer (Other)],
{lol} : Mongo, {mn} : Mongolian, {mos} : Mossi, [{mul} : Multiple
languages], [{mun} : Munda languages], {nah} : Nahuatl, {nap} : Neapolitan,
{na} : Nauru, {nv} : Navajo, {nd} : North Ndebele, {nr} : South Ndebele,
{ng} : Ndonga, {ne} : Nepali, {new} : Newari, {nia} : Nias, [{nic} :
Niger-Kordofanian (Other)], [{ssa} : Nilo-Saharan (Other)], {niu} : Niuean,
{nog} : Nogai, {non} : Old Norse, [{nai} : North American Indian], {no} :
Norwegian, {nb} : Norwegian Bokmal, {nn} : Norwegian Nynorsk, [{nub} :
Nubian languages], {nym} : Nyamwezi, {nyn} : Nyankole, {nyo} : Nyoro, {nzi}
: Nzima, {oc} : Occitan (post 1500), {oj} : Ojibwa, {or} : Oriya, {om} :
Oromo, {osa} : Osage, {os} : Ossetian; Ossetic, [{oto} : Otomian
languages], {pal} : Pahlavi, {i\-pwn} : Paiwan, {pau} : Palauan, {pi} :
Pali, {pam} : Pampanga, {pag} : Pangasinan, {pa} : Panjabi, {pap} :
Papiamento, [{paa} : Papuan (Other)], {fa} : Persian, {peo} : Old Persian
(ca.600\-400 B.C.), [{phi} : Philippine (Other)], {phn} : Phoenician, {pon}
: Pohnpeian, {pl} : Polish, {pt} : Portuguese, [{pra} : Prakrit languages],
{pro} : Old Provencal (to 1500), {ps} : Pushto, {qu} : Quechua, {rm} :
Raeto-Romance, {raj} : Rajasthani, {rap} : Rapanui, {rar} : Rarotongan,
[{qaa \- qtz} : Reserved for local use.], [{roa} : Romance (Other)], {ro} :
Romanian, {rom} : Romany, {rn} : Rundi, {ru} : Russian, [{sal} : Salishan
languages], {sam} : Samaritan Aramaic, {se} : Northern Sami, {sma} :
Southern Sami, {smn} : Inari Sami, {smj} : Lule Sami, {sms} : Skolt Sami,
[{smi} : Sami languages (Other)], {sm} : Samoan, {sad} : Sandawe, {sg} :
Sango, {sa} : Sanskrit, {sat} : Santali, {sc} : Sardinian, {sas} : Sasak,
{sco} : Scots, {sel} : Selkup, [{sem} : Semitic (Other)], {sr} : Serbian,
{srr} : Serer, {shn} : Shan, {sn} : Shona, {sid} : Sidamo, {sgn\-...} : Sign
Languages, {bla} : Siksika, {sd} : Sindhi, {si} : Sinhalese, [{sit} :
Sino-Tibetan (Other)], [{sio} : Siouan languages], {den} : Slave
(Athapascan), [{sla} : Slavic (Other)], {sk} : Slovak, {sl} : Slovenian,
{sog} : Sogdian, {so} : Somali, {son} : Songhai, {snk} : Soninke, {wen} :
Sorbian languages, {nso} : Northern Sotho, {st} : Southern Sotho, [{sai} :
South American Indian (Other)], {es} : Spanish, {suk} : Sukuma, {sux} :
Sumerian, {su} : Sundanese, {sus} : Susu, {sw} : Swahili, {ss} : Swati,
{sv} : Swedish, {syr} : Syriac, {tl} : Tagalog, {ty} : Tahitian, [{tai} :
Tai (Other)], {tg} : Tajik, {tmh} : Tamashek, {ta} : Tamil, {i\-tao} : Tao,
{tt} : Tatar, {i\-tay} : Tayal, {te} : Telugu, {ter} : Tereno, {tet} :
Tetum, {th} : Thai, {bo} : Tibetan, {tig} : Tigre, {ti} : Tigrinya, {tem} :
Timne, {tiv} : Tiv, {tli} : Tlingit, {tpi} : Tok Pisin, {tkl} : Tokelau,
{tog} : Tonga (Nyasa), {to} : Tonga (Tonga Islands), {tsi} : Tsimshian,
{ts} : Tsonga, {i\-tsu} : Tsou, {tn} : Tswana, {tum} : Tumbuka, [{tup} :
Tupi languages], {tr} : Turkish, {ota} : Ottoman Turkish (1500\-1928), {crh}
: Crimean Turkish, {tk} : Turkmen, {tvl} : Tuvalu, {tyv} : Tuvinian, {tw} :
Twi, {udm} : Udmurt, {uga} : Ugaritic, {ug} : Uighur, {uk} : Ukrainian,
{umb} : Umbundu, {und} : Undetermined, {ur} : Urdu, {uz} : Uzbek, {vai} :
Vai, {ve} : Venda, {vi} : Vietnamese, {vo} : Volapuk, {vot} : Votic, [{wak}
: Wakashan languages], {wa} : Walloon, {wal} : Walamo, {war} : Waray, {was}
: Washo, {cy} : Welsh, {wo} : Wolof, {x\-...} : Unregistered (Semi-Private
Use), {xh} : Xhosa, {sah} : Yakut, {yao} : Yao, {yap} : Yapese, {ii} :
Sichuan Yi, {yi} : Yiddish, {yo} : Yoruba, [{ypk} : Yupik languages], {znd}
: Zande, [{zap} : Zapotec], {zen} : Zenaga, {za} : Zhuang, {zu} : Zulu,
{zun} : Zuni
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1COPYRIGHT AND DISCLAIMER\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMER"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "I18N::Langinfo \- query locale information"
.IX Subsection "I18N::Langinfo - query locale information"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "\s-1IO \-\s0 load various \s-1IO\s0 modules"
.IX Subsection "IO - load various IO modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1DEPRECATED\s0" 4
.IX Item "DEPRECATED"
.PD
.SS "IO::Compress::Base \- Base Class for IO::Compress modules"
.IX Subsection "IO::Compress::Base - Base Class for IO::Compress modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::Bzip2 \- Write bzip2 files/buffers"
.IX Subsection "IO::Compress::Bzip2 - Write bzip2 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "bzip2 $input => $output [, \s-1OPTS\s0]" 4
.el .IP "bzip2 \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "bzip2 $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeIn => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A Buffer, A Filename, A
Filehandle, \f(CW\*(C`BlockSize100K => number\*(C'\fR, \f(CW\*(C`WorkFactor => number\*(C'\fR,
\&\f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "print" 4
.IX Item "print"
.IP "printf" 4
.IX Item "printf"
.IP "syswrite" 4
.IX Item "syswrite"
.IP "write" 4
.IX Item "write"
.IP "flush" 4
.IX Item "flush"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "newStream([\s-1OPTS\s0])" 4
.IX Item "newStream([OPTS])"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::Deflate \- Write \s-1RFC 1950\s0 files/buffers"
.IX Subsection "IO::Compress::Deflate - Write RFC 1950 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "deflate $input => $output [, \s-1OPTS\s0]" 4
.el .IP "deflate \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "deflate $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeIn => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A Buffer, A Filename, A
Filehandle, \f(CW\*(C`Merge => 0|1\*(C'\fR, \-Level, \-Strategy, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "print" 4
.IX Item "print"
.IP "printf" 4
.IX Item "printf"
.IP "syswrite" 4
.IX Item "syswrite"
.IP "write" 4
.IX Item "write"
.IP "flush" 4
.IX Item "flush"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "newStream([\s-1OPTS\s0])" 4
.IX Item "newStream([OPTS])"
.IP "deflateParams" 4
.IX Item "deflateParams"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all, :constants, :flush, :level, :strategy
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::FAQ \*(-- Frequently Asked Questions about IO::Compress"
.IX Subsection "IO::Compress::FAQ Frequently Asked Questions about IO::Compress"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1GENERAL \s0" 4
.IX Item "GENERAL "
.RS 4
.IP "Compatibility with Unix compress/uncompress." 4
.IX Item "Compatibility with Unix compress/uncompress."
.IP "Accessing .tar.Z files" 4
.IX Item "Accessing .tar.Z files"
.IP "How do I recompress using a different compression?" 4
.IX Item "How do I recompress using a different compression?"
.RE
.RS 4
.RE
.IP "\s-1ZIP\s0" 4
.IX Item "ZIP"
.RS 4
.IP "What Compression Types do IO::Compress::Zip & IO::Uncompress::Unzip support?" 4
.IX Item "What Compression Types do IO::Compress::Zip & IO::Uncompress::Unzip support?"
.PD
Store (method 0), Deflate (method 8), Bzip2 (method 12), Lzma (method 14)
.IP "Can I Read/Write Zip files larger the 4 Gig?" 4
.IX Item "Can I Read/Write Zip files larger the 4 Gig?"
.PD 0
.IP "Can I write more that 64K entries is a Zip files?" 4
.IX Item "Can I write more that 64K entries is a Zip files?"
.IP "Zip Resources" 4
.IX Item "Zip Resources"
.RE
.RS 4
.RE
.IP "\s-1GZIP\s0" 4
.IX Item "GZIP"
.RS 4
.IP "Gzip Resources" 4
.IX Item "Gzip Resources"
.IP "Dealing with Concatenated gzip files" 4
.IX Item "Dealing with Concatenated gzip files"
.RE
.RS 4
.RE
.IP "\s-1ZLIB\s0" 4
.IX Item "ZLIB"
.RS 4
.IP "Zlib Resources" 4
.IX Item "Zlib Resources"
.RE
.RS 4
.RE
.IP "Bzip2" 4
.IX Item "Bzip2"
.RS 4
.IP "Bzip2 Resources" 4
.IX Item "Bzip2 Resources"
.IP "Dealing with Concatenated bzip2 files" 4
.IX Item "Dealing with Concatenated bzip2 files"
.IP "Interoperating with Pbzip2" 4
.IX Item "Interoperating with Pbzip2"
.RE
.RS 4
.RE
.IP "\s-1HTTP & NETWORK\s0" 4
.IX Item "HTTP & NETWORK"
.RS 4
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Compressed files and Net::FTP" 4
.IX Item "Compressed files and Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1MISC\s0" 4
.IX Item "MISC"
.RS 4
.ie n .IP "Using ""InputLength"" to uncompress data embedded in a larger file/buffer." 4
.el .IP "Using \f(CWInputLength\fR to uncompress data embedded in a larger file/buffer." 4
.IX Item "Using InputLength to uncompress data embedded in a larger file/buffer."
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::Gzip \- Write \s-1RFC 1952\s0 files/buffers"
.IX Subsection "IO::Compress::Gzip - Write RFC 1952 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "gzip $input => $output [, \s-1OPTS\s0]" 4
.el .IP "gzip \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "gzip $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeIn => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A Buffer, A Filename, A
Filehandle, \f(CW\*(C`Merge => 0|1\*(C'\fR, \-Level, \-Strategy, \f(CW\*(C`Minimal => 0|1\*(C'\fR,
\&\f(CW\*(C`Comment => $comment\*(C'\fR, \f(CW\*(C`Name => $string\*(C'\fR, \f(CW\*(C`Time => $number\*(C'\fR,
\&\f(CW\*(C`TextFlag => 0|1\*(C'\fR, \f(CW\*(C`HeaderCRC => 0|1\*(C'\fR, \f(CW\*(C`OS_Code => $value\*(C'\fR,
\&\f(CW\*(C`ExtraField => $data\*(C'\fR, \f(CW\*(C`ExtraFlags => $value\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "print" 4
.IX Item "print"
.IP "printf" 4
.IX Item "printf"
.IP "syswrite" 4
.IX Item "syswrite"
.IP "write" 4
.IX Item "write"
.IP "flush" 4
.IX Item "flush"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "newStream([\s-1OPTS\s0])" 4
.IX Item "newStream([OPTS])"
.IP "deflateParams" 4
.IX Item "deflateParams"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all, :constants, :flush, :level, :strategy
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::RawDeflate \- Write \s-1RFC 1951\s0 files/buffers"
.IX Subsection "IO::Compress::RawDeflate - Write RFC 1951 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "rawdeflate $input => $output [, \s-1OPTS\s0]" 4
.el .IP "rawdeflate \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "rawdeflate $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeIn => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A Buffer, A Filename, A
Filehandle, \f(CW\*(C`Merge => 0|1\*(C'\fR, \-Level, \-Strategy, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "print" 4
.IX Item "print"
.IP "printf" 4
.IX Item "printf"
.IP "syswrite" 4
.IX Item "syswrite"
.IP "write" 4
.IX Item "write"
.IP "flush" 4
.IX Item "flush"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "newStream([\s-1OPTS\s0])" 4
.IX Item "newStream([OPTS])"
.IP "deflateParams" 4
.IX Item "deflateParams"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all, :constants, :flush, :level, :strategy
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Compress::Zip \- Write zip files/buffers"
.IX Subsection "IO::Compress::Zip - Write zip files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "zip $input => $output [, \s-1OPTS\s0]" 4
.el .IP "zip \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "zip $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeIn => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A Buffer, A Filename, A
Filehandle, \f(CW\*(C`Name => $string\*(C'\fR, \f(CW\*(C`CanonicalName => 0|1\*(C'\fR, \f(CW\*(C`FilterName => sub { ... }\*(C'\fR, \f(CW\*(C`Time => $number\*(C'\fR, \f(CW\*(C`ExtAttr => $attr\*(C'\fR, \f(CW\*(C`exTime => [$atime, $mtime, $ctime]\*(C'\fR, \f(CW\*(C`exUnix2 => [$uid, $gid]\*(C'\fR, \f(CW\*(C`exUnixN => [$uid, $gid]\*(C'\fR, \f(CW\*(C`Comment => $comment\*(C'\fR, \f(CW\*(C`ZipComment => $comment\*(C'\fR, \f(CW\*(C`Method => $method\*(C'\fR, \f(CW\*(C`Stream => 0|1\*(C'\fR,
\&\f(CW\*(C`Zip64 => 0|1\*(C'\fR, \f(CW\*(C`TextFlag => 0|1\*(C'\fR, \f(CW\*(C`ExtraFieldLocal => $data\*(C'\fR, \f(CW\*(C`ExtraFieldCentral => $data\*(C'\fR, \f(CW\*(C`Minimal => 1|0\*(C'\fR, \f(CW\*(C`BlockSize100K => number\*(C'\fR, \f(CW\*(C`WorkFactor => number\*(C'\fR, \f(CW\*(C`Preset =>
number\*(C'\fR, \f(CW\*(C`Extreme => 0|1\*(C'\fR, \-Level, \-Strategy, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "print" 4
.IX Item "print"
.IP "printf" 4
.IX Item "printf"
.IP "syswrite" 4
.IX Item "syswrite"
.IP "write" 4
.IX Item "write"
.IP "flush" 4
.IX Item "flush"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "newStream([\s-1OPTS\s0])" 4
.IX Item "newStream([OPTS])"
.IP "deflateParams" 4
.IX Item "deflateParams"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all, :constants, :flush, :level, :strategy, :zip_method
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Apache::GZip Revisited" 4
.IX Item "Apache::GZip Revisited"
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Dir \- supply object methods for directory handles"
.IX Subsection "IO::Dir - supply object methods for directory handles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
new ( [ \s-1DIRNAME \s0] ), open ( \s-1DIRNAME \s0), read (), seek ( \s-1POS \s0), tell (),
rewind (), close (), tie \f(CW%hash\fR, 'IO::Dir', \s-1DIRNAME\s0 [, \s-1OPTIONS \s0]
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::File \- supply object methods for filehandles"
.IX Subsection "IO::File - supply object methods for filehandles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( \s-1FILENAME\s0 [,MODE [,PERMS]] ), new_tmpfile
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
open( \s-1FILENAME\s0 [,MODE [,PERMS]] ), open( \s-1FILENAME, IOLAYERS \s0), binmode(
[\s-1LAYER\s0] )
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
.SS "IO::Handle \- supply object methods for I/O handles"
.IX Subsection "IO::Handle - supply object methods for I/O handles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new (), new_from_fd ( \s-1FD, MODE \s0)
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
\&\f(CW$io\fR\->fdopen ( \s-1FD, MODE \s0), \f(CW$io\fR\->opened, \f(CW$io\fR\->getline, \f(CW$io\fR\->getlines,
\&\f(CW$io\fR\->ungetc ( \s-1ORD \s0), \f(CW$io\fR\->write ( \s-1BUF, LEN\s0 [, \s-1OFFSET \s0] ), \f(CW$io\fR\->error,
\&\f(CW$io\fR\->clearerr, \f(CW$io\fR\->sync, \f(CW$io\fR\->flush, \f(CW$io\fR\->printflush ( \s-1ARGS \s0),
\&\f(CW$io\fR\->blocking ( [ \s-1BOOL \s0] ), \f(CW$io\fR\->untaint
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
.SS "IO::Pipe \- supply object methods for pipes"
.IX Subsection "IO::Pipe - supply object methods for pipes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [\s-1READER, WRITER\s0] )
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
reader ([\s-1ARGS\s0]), writer ([\s-1ARGS\s0]), handles ()
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Poll \- Object interface to system poll call"
.IX Subsection "IO::Poll - Object interface to system poll call"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
mask ( \s-1IO\s0 [, \s-1EVENT_MASK \s0] ), poll ( [ \s-1TIMEOUT \s0] ), events ( \s-1IO \s0), remove (
\&\s-1IO \s0), handles( [ \s-1EVENT_MASK \s0] )
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Seekable \- supply seek based methods for I/O objects"
.IX Subsection "IO::Seekable - supply seek based methods for I/O objects"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$io\fR\->getpos, \f(CW$io\fR\->setpos, \f(CW$io\fR\->seek ( \s-1POS, WHENCE \s0), WHENCE=0 (\s-1SEEK_SET\s0),
WHENCE=1 (\s-1SEEK_CUR\s0), WHENCE=2 (\s-1SEEK_END\s0), \f(CW$io\fR\->sysseek( \s-1POS, WHENCE \s0),
\&\f(CW$io\fR\->tell
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
.SS "IO::Select \- \s-1OO\s0 interface to the select system call"
.IX Subsection "IO::Select - OO interface to the select system call"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [ \s-1HANDLES \s0] )
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
add ( \s-1HANDLES \s0), remove ( \s-1HANDLES \s0), exists ( \s-1HANDLE \s0), handles, can_read (
[ \s-1TIMEOUT \s0] ), can_write ( [ \s-1TIMEOUT \s0] ), has_exception ( [ \s-1TIMEOUT \s0] ),
count (), \fIbits()\fR, select ( \s-1READ, WRITE, EXCEPTION\s0 [, \s-1TIMEOUT \s0] )
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Socket \- Object interface to socket communications"
.IX Subsection "IO::Socket - Object interface to socket communications"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [\s-1ARGS\s0] )
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
accept([\s-1PKG\s0]), socketpair(\s-1DOMAIN, TYPE, PROTOCOL\s0), atmark, connected,
protocol, sockdomain, sockopt(\s-1OPT\s0 [, \s-1VAL\s0]), getsockopt(\s-1LEVEL, OPT\s0),
setsockopt(\s-1LEVEL, OPT, VAL\s0), socktype, timeout([\s-1VAL\s0])
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Socket::INET \- Object interface for \s-1AF_INET\s0 domain sockets"
.IX Subsection "IO::Socket::INET - Object interface for AF_INET domain sockets"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [\s-1ARGS\s0] )
.RS 4
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
sockaddr (), sockport (), sockhost (), peeraddr (), peerport (), peerhost
()
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Socket::UNIX \- Object interface for \s-1AF_UNIX\s0 domain sockets"
.IX Subsection "IO::Socket::UNIX - Object interface for AF_UNIX domain sockets"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [\s-1ARGS\s0] )
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
\&\fIhostpath()\fR, \fIpeerpath()\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IO::Uncompress::AnyInflate \- Uncompress zlib-based (zip, gzip) file/buffer"
.IX Subsection "IO::Uncompress::AnyInflate - Uncompress zlib-based (zip, gzip) file/buffer"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1RFC 1950, RFC 1951 \s0(optionally), gzip (\s-1RFC 1952\s0), zip
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.PD 0
.ie n .IP "anyinflate $input => $output [, \s-1OPTS\s0]" 4
.el .IP "anyinflate \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "anyinflate $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR, \f(CW\*(C`RawInflate => 0|1\*(C'\fR, \f(CW\*(C`ParseExtra => 0|1\*(C'\fR If the gzip \s-1FEXTRA\s0 header field is present and
this option is set, it will force the module to check that it conforms to
the sub-field structure as defined in \s-1RFC 1952\s0
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "inflateSync" 4
.IX Item "inflateSync"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::AnyUncompress \- Uncompress gzip, zip, bzip2 or lzop file/buffer"
.IX Subsection "IO::Uncompress::AnyUncompress - Uncompress gzip, zip, bzip2 or lzop file/buffer"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1RFC 1950, RFC 1951 \s0(optionally), gzip (\s-1RFC 1952\s0), zip, bzip2, lzop, lzf,
lzma, xz
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.PD 0
.ie n .IP "anyuncompress $input => $output [, \s-1OPTS\s0]" 4
.el .IP "anyuncompress \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "anyuncompress $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR, \f(CW\*(C`RawInflate => 0|1\*(C'\fR, \f(CW\*(C`UnLzma => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::Base \- Base Class for IO::Uncompress modules"
.IX Subsection "IO::Uncompress::Base - Base Class for IO::Uncompress modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::Bunzip2 \- Read bzip2 files/buffers"
.IX Subsection "IO::Uncompress::Bunzip2 - Read bzip2 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "bunzip2 $input => $output [, \s-1OPTS\s0]" 4
.el .IP "bunzip2 \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "bunzip2 $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR,
\&\f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR, \f(CW\*(C`Small => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::Gunzip \- Read \s-1RFC 1952\s0 files/buffers"
.IX Subsection "IO::Uncompress::Gunzip - Read RFC 1952 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "gunzip $input => $output [, \s-1OPTS\s0]" 4
.el .IP "gunzip \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "gunzip $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR, \f(CW\*(C`ParseExtra => 0|1\*(C'\fR If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it
will force the module to check that it conforms to the sub-field structure
as defined in \s-1RFC 1952\s0
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "inflateSync" 4
.IX Item "inflateSync"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.PD
Name, Comment
.IP "tell" 4
.IX Item "tell"
.PD 0
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::Inflate \- Read \s-1RFC 1950\s0 files/buffers"
.IX Subsection "IO::Uncompress::Inflate - Read RFC 1950 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "inflate $input => $output [, \s-1OPTS\s0]" 4
.el .IP "inflate \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "inflate $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "inflateSync" 4
.IX Item "inflateSync"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::RawInflate \- Read \s-1RFC 1951\s0 files/buffers"
.IX Subsection "IO::Uncompress::RawInflate - Read RFC 1951 files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "rawinflate $input => $output [, \s-1OPTS\s0]" 4
.el .IP "rawinflate \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "rawinflate $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize => $num\*(C'\fR, \f(CW\*(C`InputLength =>
$size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict => 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "inflateSync" 4
.IX Item "inflateSync"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Uncompress::Unzip \- Read zip files/buffers"
.IX Subsection "IO::Uncompress::Unzip - Read zip files/buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functional Interface" 4
.IX Item "Functional Interface"
.RS 4
.ie n .IP "unzip $input => $output [, \s-1OPTS\s0]" 4
.el .IP "unzip \f(CW$input\fR => \f(CW$output\fR [, \s-1OPTS\s0]" 4
.IX Item "unzip $input => $output [, OPTS]"
.PD
A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob
.IP "Notes" 4
.IX Item "Notes"
.PD 0
.IP "Optional Parameters" 4
.IX Item "Optional Parameters"
.PD
\&\f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`BinModeOut => 0|1\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, A
Buffer, A Filename, A Filehandle, \f(CW\*(C`MultiStream => 0|1\*(C'\fR, \f(CW\*(C`TrailingData => $scalar\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1OO\s0 Interface" 4
.IX Item "OO Interface"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.PD
A filename, A filehandle, A scalar reference
.IP "Constructor Options" 4
.IX Item "Constructor Options"
\&\f(CW\*(C`Name => "membername"\*(C'\fR, \f(CW\*(C`AutoClose => 0|1\*(C'\fR, \f(CW\*(C`MultiStream =>
0|1\*(C'\fR, \f(CW\*(C`Prime => $string\*(C'\fR, \f(CW\*(C`Transparent => 0|1\*(C'\fR, \f(CW\*(C`BlockSize
=> $num\*(C'\fR, \f(CW\*(C`InputLength => $size\*(C'\fR, \f(CW\*(C`Append => 0|1\*(C'\fR, \f(CW\*(C`Strict
=> 0|1\*(C'\fR
.IP "Examples" 4
.IX Item "Examples"
.RE
.RS 4
.RE
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.IP "read" 4
.IX Item "read"
.IP "read" 4
.IX Item "read"
.IP "getline" 4
.IX Item "getline"
.IP "getc" 4
.IX Item "getc"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "inflateSync" 4
.IX Item "inflateSync"
.IP "getHeaderInfo" 4
.IX Item "getHeaderInfo"
.IP "tell" 4
.IX Item "tell"
.IP "eof" 4
.IX Item "eof"
.IP "seek" 4
.IX Item "seek"
.IP "binmode" 4
.IX Item "binmode"
.IP "opened" 4
.IX Item "opened"
.IP "autoflush" 4
.IX Item "autoflush"
.IP "input_line_number" 4
.IX Item "input_line_number"
.IP "fileno" 4
.IX Item "fileno"
.IP "close" 4
.IX Item "close"
.IP "nextStream" 4
.IX Item "nextStream"
.IP "trailingData" 4
.IX Item "trailingData"
.RE
.RS 4
.RE
.IP "Importing" 4
.IX Item "Importing"
.PD
:all
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Working with Net::FTP" 4
.IX Item "Working with Net::FTP"
.IP "Walking through a zip file" 4
.IX Item "Walking through a zip file"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1MODIFICATION HISTORY\s0" 4
.IX Item "MODIFICATION HISTORY"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "IO::Zlib \- \s-1IO::\s0 style interface to Compress::Zlib"
.IX Subsection "IO::Zlib - IO:: style interface to Compress::Zlib"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [\s-1ARGS\s0] )
.IP "\s-1OBJECT METHODS\s0" 4
.IX Item "OBJECT METHODS"
open ( \s-1FILENAME, MODE \s0), opened, close, getc, getline, getlines, print (
\&\s-1ARGS... \s0), read ( \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0] ), eof, seek ( \s-1OFFSET, WHENCE \s0),
tell, setpos ( \s-1POS \s0), getpos ( \s-1POS \s0)
.IP "\s-1USING THE EXTERNAL GZIP\s0" 4
.IX Item "USING THE EXTERNAL GZIP"
.PD 0
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.PD
has_Compress_Zlib, gzip_external, gzip_used, gzip_read_open,
gzip_write_open
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
IO::Zlib::getlines: must be called in list context,
IO::Zlib::gzopen_external: mode '...' is illegal, IO::Zlib::import: '...'
is illegal, IO::Zlib::import: ':gzip_external' requires an argument,
IO::Zlib::import: 'gzip_read_open' requires an argument, IO::Zlib::import:
\&'gzip_read' '...' is illegal, IO::Zlib::import: 'gzip_write_open' requires
an argument, IO::Zlib::import: 'gzip_write_open' '...' is illegal,
IO::Zlib::import: no Compress::Zlib and no external gzip, IO::Zlib::open:
needs a filename, IO::Zlib::READ: \s-1NBYTES\s0 must be specified,
IO::Zlib::WRITE: too long \s-1LENGTH\s0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IPC::Cmd \- finding and running system commands made easy"
.IX Subsection "IPC::Cmd - finding and running system commands made easy"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.ie n .IP "$ipc_run_version = IPC::Cmd\->can_use_ipc_run( [\s-1VERBOSE\s0] )" 4
.el .IP "\f(CW$ipc_run_version\fR = IPC::Cmd\->can_use_ipc_run( [\s-1VERBOSE\s0] )" 4
.IX Item "$ipc_run_version = IPC::Cmd->can_use_ipc_run( [VERBOSE] )"
.RE
.RS 4
.RE
.ie n .IP "$ipc_open3_version = IPC::Cmd\->can_use_ipc_open3( [\s-1VERBOSE\s0] )" 4
.el .IP "\f(CW$ipc_open3_version\fR = IPC::Cmd\->can_use_ipc_open3( [\s-1VERBOSE\s0] )" 4
.IX Item "$ipc_open3_version = IPC::Cmd->can_use_ipc_open3( [VERBOSE] )"
.ie n .IP "$bool = IPC::Cmd\->can_capture_buffer" 4
.el .IP "\f(CW$bool\fR = IPC::Cmd\->can_capture_buffer" 4
.IX Item "$bool = IPC::Cmd->can_capture_buffer"
.ie n .IP "$bool = IPC::Cmd\->can_use_run_forked" 4
.el .IP "\f(CW$bool\fR = IPC::Cmd\->can_use_run_forked" 4
.IX Item "$bool = IPC::Cmd->can_use_run_forked"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "$path = can_run( \s-1PROGRAM \s0);" 4
.el .IP "\f(CW$path\fR = can_run( \s-1PROGRAM \s0);" 4
.IX Item "$path = can_run( PROGRAM );"
.RE
.RS 4
.RE
.ie n .IP "$ok | ($ok, $err, $full_buf, $stdout_buff, $stderr_buff) = run( command => \s-1COMMAND,\s0 [verbose => \s-1BOOL,\s0 buffer => \e$SCALAR, timeout => \s-1DIGIT\s0] );" 4
.el .IP "\f(CW$ok\fR | ($ok, \f(CW$err\fR, \f(CW$full_buf\fR, \f(CW$stdout_buff\fR, \f(CW$stderr_buff\fR) = run( command => \s-1COMMAND,\s0 [verbose => \s-1BOOL,\s0 buffer => \e$SCALAR, timeout => \s-1DIGIT\s0] );" 4
.IX Item "$ok | ($ok, $err, $full_buf, $stdout_buff, $stderr_buff) = run( command => COMMAND, [verbose => BOOL, buffer => $SCALAR, timeout => DIGIT] );"
.PD
command, verbose, buffer, timeout, success, error message, full_buffer,
out_buffer, error_buffer
.ie n .IP "$hashref = run_forked( \s-1COMMAND,\s0 { child_stdin => \s-1SCALAR,\s0 timeout => \s-1DIGIT,\s0 stdout_handler => \s-1CODEREF,\s0 stderr_handler => \s-1CODEREF\s0} );" 4
.el .IP "\f(CW$hashref\fR = run_forked( \s-1COMMAND,\s0 { child_stdin => \s-1SCALAR,\s0 timeout => \s-1DIGIT,\s0 stdout_handler => \s-1CODEREF,\s0 stderr_handler => \s-1CODEREF\s0} );" 4
.IX Item "$hashref = run_forked( COMMAND, { child_stdin => SCALAR, timeout => DIGIT, stdout_handler => CODEREF, stderr_handler => CODEREF} );"
\&\f(CW\*(C`timeout\*(C'\fR, \f(CW\*(C`child_stdin\*(C'\fR, \f(CW\*(C`stdout_handler\*(C'\fR, \f(CW\*(C`stderr_handler\*(C'\fR,
\&\f(CW\*(C`discard_output\*(C'\fR, \f(CW\*(C`terminate_on_parent_sudden_death\*(C'\fR, \f(CW\*(C`exit_code\*(C'\fR,
\&\f(CW\*(C`timeout\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, \f(CW\*(C`stderr\*(C'\fR, \f(CW\*(C`merged\*(C'\fR, \f(CW\*(C`err_msg\*(C'\fR
.ie n .IP "$q = \s-1QUOTE\s0" 4
.el .IP "\f(CW$q\fR = \s-1QUOTE\s0" 4
.IX Item "$q = QUOTE"
.PD 0
.IP "\s-1HOW IT WORKS\s0" 4
.IX Item "HOW IT WORKS"
.IP "Global Variables" 4
.IX Item "Global Variables"
.RS 4
.ie n .IP "$IPC::Cmd::VERBOSE" 4
.el .IP "\f(CW$IPC::Cmd::VERBOSE\fR" 4
.IX Item "$IPC::Cmd::VERBOSE"
.ie n .IP "$IPC::Cmd::USE_IPC_RUN" 4
.el .IP "\f(CW$IPC::Cmd::USE_IPC_RUN\fR" 4
.IX Item "$IPC::Cmd::USE_IPC_RUN"
.ie n .IP "$IPC::Cmd::USE_IPC_OPEN3" 4
.el .IP "\f(CW$IPC::Cmd::USE_IPC_OPEN3\fR" 4
.IX Item "$IPC::Cmd::USE_IPC_OPEN3"
.ie n .IP "$IPC::Cmd::WARN" 4
.el .IP "\f(CW$IPC::Cmd::WARN\fR" 4
.IX Item "$IPC::Cmd::WARN"
.ie n .IP "$IPC::Cmd::INSTANCES" 4
.el .IP "\f(CW$IPC::Cmd::INSTANCES\fR" 4
.IX Item "$IPC::Cmd::INSTANCES"
.ie n .IP "$IPC::Cmd::ALLOW_NULL_ARGS" 4
.el .IP "\f(CW$IPC::Cmd::ALLOW_NULL_ARGS\fR" 4
.IX Item "$IPC::Cmd::ALLOW_NULL_ARGS"
.RE
.RS 4
.RE
.IP "Caveats" 4
.IX Item "Caveats"
.PD
Whitespace and IPC::Open3 / \fIsystem()\fR, Whitespace and IPC::Run, \s-1IO\s0 Redirect,
Interleaving \s-1STDOUT/STDERR\s0
.IP "See Also" 4
.IX Item "See Also"
.PD 0
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IPC::Msg \- SysV Msg \s-1IPC\s0 object class"
.IX Subsection "IPC::Msg - SysV Msg IPC object class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
new ( \s-1KEY , FLAGS \s0), id, rcv ( \s-1BUF, LEN\s0 [, \s-1TYPE\s0 [, \s-1FLAGS \s0]] ), remove, set
( \s-1STAT \s0), set ( \s-1NAME\s0 => \s-1VALUE\s0 [, \s-1NAME\s0 => \s-1VALUE ...\s0] ), snd ( \s-1TYPE, MSG\s0 [,
\&\s-1FLAGS \s0] ), stat
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IPC::Open2 \- open a process for both reading and writing using \fIopen2()\fP"
.IX Subsection "IPC::Open2 - open a process for both reading and writing using open2()"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1WARNING \s0" 4
.IX Item "WARNING "
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "IPC::Open3 \- open a process for reading, writing, and error handling using \fIopen3()\fP"
.IX Subsection "IPC::Open3 - open a process for reading, writing, and error handling using open3()"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "See Also" 4
.IX Item "See Also"
.PD
IPC::Open2, IPC::Run
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.SS "IPC::Semaphore \- SysV Semaphore \s-1IPC\s0 object class"
.IX Subsection "IPC::Semaphore - SysV Semaphore IPC object class"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
new ( \s-1KEY , NSEMS , FLAGS \s0), getall, getncnt ( \s-1SEM \s0), getpid ( \s-1SEM \s0),
getval ( \s-1SEM \s0), getzcnt ( \s-1SEM \s0), id, op ( \s-1OPLIST \s0), remove, set ( \s-1STAT \s0),
set ( \s-1NAME\s0 => \s-1VALUE\s0 [, \s-1NAME\s0 => \s-1VALUE ...\s0] ), setall ( \s-1VALUES \s0), setval ( N
, \s-1VALUE \s0), stat
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IPC::SharedMem \- SysV Shared Memory \s-1IPC\s0 object class"
.IX Subsection "IPC::SharedMem - SysV Shared Memory IPC object class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
new ( \s-1KEY , SIZE , FLAGS \s0), id, read ( \s-1POS, SIZE \s0), write ( \s-1STRING, POS,
SIZE \s0), remove, is_removed, stat, attach ( [\s-1FLAG\s0] ), detach, addr
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "IPC::SysV \- System V \s-1IPC\s0 constants and system calls"
.IX Subsection "IPC::SysV - System V IPC constants and system calls"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
ftok( \s-1PATH \s0), ftok( \s-1PATH, ID \s0), shmat( \s-1ID, ADDR, FLAG \s0), shmdt( \s-1ADDR \s0),
memread( \s-1ADDR, VAR, POS, SIZE \s0), memwrite( \s-1ADDR, STRING, POS, SIZE \s0)
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "\s-1JSON::PP \- JSON::XS\s0 compatible pure-Perl module."
.IX Subsection "JSON::PP - JSON::XS compatible pure-Perl module."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1FEATURES\s0" 4
.IX Item "FEATURES"
.PD
correct unicode handling, round-trip integrity, strict checking of \s-1JSON\s0
correctness
.RE
.RS 4
.RE
.IP "\s-1FUNCTIONAL INTERFACE\s0" 4
.IX Item "FUNCTIONAL INTERFACE"
.RS 4
.PD 0
.IP "encode_json" 4
.IX Item "encode_json"
.IP "decode_json" 4
.IX Item "decode_json"
.IP "JSON::PP::is_bool" 4
.IX Item "JSON::PP::is_bool"
.IP "JSON::PP::true" 4
.IX Item "JSON::PP::true"
.IP "JSON::PP::false" 4
.IX Item "JSON::PP::false"
.IP "JSON::PP::null" 4
.IX Item "JSON::PP::null"
.RE
.RS 4
.RE
.IP "\s-1HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER\s0" 4
.IX Item "HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "new" 4
.IX Item "new"
.IP "ascii" 4
.IX Item "ascii"
.IP "latin1" 4
.IX Item "latin1"
.IP "utf8" 4
.IX Item "utf8"
.IP "pretty" 4
.IX Item "pretty"
.IP "indent" 4
.IX Item "indent"
.IP "space_before" 4
.IX Item "space_before"
.IP "space_after" 4
.IX Item "space_after"
.IP "relaxed" 4
.IX Item "relaxed"
.PD
list items can have an end-comma, shell-style '#'\-comments
.IP "canonical" 4
.IX Item "canonical"
.PD 0
.IP "allow_nonref" 4
.IX Item "allow_nonref"
.IP "allow_unknown" 4
.IX Item "allow_unknown"
.IP "allow_blessed" 4
.IX Item "allow_blessed"
.IP "convert_blessed" 4
.IX Item "convert_blessed"
.IP "filter_json_object" 4
.IX Item "filter_json_object"
.IP "filter_json_single_key_object" 4
.IX Item "filter_json_single_key_object"
.IP "shrink" 4
.IX Item "shrink"
.IP "max_depth" 4
.IX Item "max_depth"
.IP "max_size" 4
.IX Item "max_size"
.IP "encode" 4
.IX Item "encode"
.IP "decode" 4
.IX Item "decode"
.IP "decode_prefix" 4
.IX Item "decode_prefix"
.RE
.RS 4
.RE
.IP "\s-1INCREMENTAL PARSING\s0" 4
.IX Item "INCREMENTAL PARSING"
.RS 4
.IP "incr_parse" 4
.IX Item "incr_parse"
.IP "incr_text" 4
.IX Item "incr_text"
.IP "incr_skip" 4
.IX Item "incr_skip"
.IP "incr_reset" 4
.IX Item "incr_reset"
.RE
.RS 4
.RE
.IP "\s-1JSON::PP OWN METHODS\s0" 4
.IX Item "JSON::PP OWN METHODS"
.RS 4
.IP "allow_singlequote" 4
.IX Item "allow_singlequote"
.IP "allow_barekey" 4
.IX Item "allow_barekey"
.IP "allow_bignum" 4
.IX Item "allow_bignum"
.IP "loose" 4
.IX Item "loose"
.IP "escape_slash" 4
.IX Item "escape_slash"
.IP "indent_length" 4
.IX Item "indent_length"
.IP "sort_by" 4
.IX Item "sort_by"
.RE
.RS 4
.RE
.IP "\s-1INTERNAL\s0" 4
.IX Item "INTERNAL"
.PD
PP_encode_box, PP_decode_box
.IP "\s-1MAPPING\s0" 4
.IX Item "MAPPING"
.RS 4
.PD 0
.IP "\s-1JSON \-\s0> \s-1PERL\s0" 4
.IX Item "JSON -> PERL"
.PD
object, array, string, number, true, false, null
.IP "\s-1PERL \-\s0> \s-1JSON\s0" 4
.IX Item "PERL -> JSON"
hash references, array references, other references, JSON::PP::true,
JSON::PP::false, JSON::PP::null, blessed objects, simple scalars, Big
Number
.RE
.RS 4
.RE
.IP "\s-1UNICODE HANDLING ON PERLS\s0" 4
.IX Item "UNICODE HANDLING ON PERLS"
.RS 4
.PD 0
.IP "Perl 5.8 and later" 4
.IX Item "Perl 5.8 and later"
.IP "Perl 5.6" 4
.IX Item "Perl 5.6"
.IP "Perl 5.005" 4
.IX Item "Perl 5.005"
.RE
.RS 4
.RE
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.PD
speed, memory saving
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "JSON::PP::Boolean \- dummy module providing JSON::PP::Boolean"
.IX Subsection "JSON::PP::Boolean - dummy module providing JSON::PP::Boolean"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "List::Util \- A selection of general-utility list subroutines"
.IX Subsection "List::Util - A selection of general-utility list subroutines"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
first \s-1BLOCK LIST,\s0 max \s-1LIST,\s0 maxstr \s-1LIST,\s0 min \s-1LIST,\s0 minstr \s-1LIST,\s0 reduce
\&\s-1BLOCK LIST,\s0 shuffle \s-1LIST,\s0 sum \s-1LIST,\s0 sum0 \s-1LIST\s0
.IP "\s-1KNOWN BUGS\s0" 4
.IX Item "KNOWN BUGS"
.PD 0
.IP "\s-1SUGGESTED ADDITIONS\s0" 4
.IX Item "SUGGESTED ADDITIONS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "List::Util::XS \- Indicate if List::Util was compiled with a C compiler"
.IX Subsection "List::Util::XS - Indicate if List::Util was compiled with a C compiler"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes \- a distribution of modules to handle locale codes"
.IX Subsection "Locale::Codes - a distribution of modules to handle locale codes"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
\&\fBLocale::Codes::Country, Locale::Country\fR, \fBLocale::Codes::Language,
Locale::Language\fR, \fBLocale::Codes::Currency, Locale::Currency\fR,
\&\fBLocale::Codes::Script, Locale::Script\fR, \fBLocale::Codes::LangExt\fR,
\&\fBLocale::Codes::LangVar\fR, \fBLocale::Codes::LangFam\fR, \fBLocale::Codes\fR,
\&\fBLocale::Codes::Constants\fR, \fBLocale::Codes::Country_codes\fR,
\&\fBLocale::Codes::Language_codes\fR, \fBLocale::Codes::Currency_codes\fR,
\&\fBLocale::Codes::Script_codes\fR, \fBLocale::Codes::LangExt_codes\fR,
\&\fBLocale::Codes::LangVar_codes\fR, \fBLocale::Codes::LangFam_codes\fR
.IP "\s-1NEW CODE SETS\s0" 4
.IX Item "NEW CODE SETS"
\&\fBGeneral-use code set\fR, \fBAn official source of data\fR, \fBA free source of
the data\fR, \fBA reliable source of data\fR
.IP "\s-1COMMON ALIASES\s0" 4
.IX Item "COMMON ALIASES"
.PD 0
.IP "\s-1DEPRECATED CODES\s0" 4
.IX Item "DEPRECATED CODES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\fBLocale::Codes::API\fR, \fBLocale::Codes::Country\fR,
\&\fBLocale::Codes::Language\fR, \fBLocale::Codes::Script\fR,
\&\fBLocale::Codes::Currency\fR, \fBLocale::Codes::LangExt\fR,
\&\fBLocale::Codes::LangVar\fR, \fBLocale::Codes::LangFam\fR,
\&\fBLocale::Codes::Changes\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::API \- a description of the callable function in each module"
.IX Subsection "Locale::Codes::API - a description of the callable function in each module"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
.PD
\&\fBcode2XXX ( \s-1CODE\s0 [,CODESET] [,'retired'] )\fR, \fBXXX2code ( \s-1NAME\s0 [,CODESET]
[,'retired'] )\fR, \fBXXX_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR,
\&\fBall_XXX_codes ( [\s-1CODESET\s0] [,'retired'] )\fR, \fBall_XXX_names ( [\s-1CODESET\s0]
[,'retired'] )\fR
.IP "SEMI-PRIVATE \s-1ROUTINES\s0" 4
.IX Item "SEMI-PRIVATE ROUTINES"
\&\fBMODULE::rename_XXX  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR, \fBMODULE::add_XXX  (
\&\s-1CODE ,NAME\s0 [,CODESET] )\fR, \fBMODULE::delete_XXX	( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBMODULE::add_XXX_alias  ( \s-1NAME ,NEW_NAME \s0)\fR, \fBMODULE::delete_XXX_alias  (
\&\s-1NAME \s0)\fR, \fBMODULE::rename_XXX_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBMODULE::add_XXX_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBMODULE::delete_XXX_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1KNOWN BUGS AND LIMITATIONS\s0" 4
.IX Item "KNOWN BUGS AND LIMITATIONS"
\&\fBRelationship between code sets\fR, \fBNon-ASCII characters not supported\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Changes \- details changes to Locale::Codes"
.IX Subsection "Locale::Codes::Changes - details changes to Locale::Codes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1VERSION 3.28  \s0(planned 2013\-12\-01; sbeck)" 4
.IX Item "VERSION 3.28 (planned 2013-12-01; sbeck)"
.IP "\s-1VERSION 3.27  \s0(planned 2013\-09\-01; sbeck)" 4
.IX Item "VERSION 3.27 (planned 2013-09-01; sbeck)"
.IP "\s-1VERSION 3.26  \s0(planned 2013\-06\-01; sbeck)" 4
.IX Item "VERSION 3.26 (planned 2013-06-01; sbeck)"
.IP "\s-1VERSION 3.25  \s0(2013\-03\-01; sbeck)" 4
.IX Item "VERSION 3.25 (2013-03-01; sbeck)"
.IP "\s-1VERSION 3.24  \s0(2012\-12\-03; sbeck)" 4
.IX Item "VERSION 3.24 (2012-12-03; sbeck)"
.PD
\&\fBSyria alias\fR, \fB\s-1FIPS\-10\s0 country codes deprecated\fR, \fBDomain country codes
now come from \s-1ISO 3166\s0\fR
.IP "\s-1VERSION 3.23  \s0(2012\-09\-01; sbeck)" 4
.IX Item "VERSION 3.23 (2012-09-01; sbeck)"
.PD 0
.IP "\s-1VERSION 3.22  \s0(2012\-06\-01; sbeck)" 4
.IX Item "VERSION 3.22 (2012-06-01; sbeck)"
.PD
\&\fBUpdated perl version required\fR, \fBSorted deprecated codes\fR
.IP "\s-1VERSION 3.21  \s0(2012\-03\-01; sbeck)" 4
.IX Item "VERSION 3.21 (2012-03-01; sbeck)"
.PD 0
.IP "\s-1VERSION 3.20  \s0(2011\-12\-01; sbeck)" 4
.IX Item "VERSION 3.20 (2011-12-01; sbeck)"
.PD
\&\fBAdded limited support for deprecated codes\fR, \fBFixed capitalization\fR,
\&\fBPod tests off by default\fR, \fBCodesets may be specified by name\fR,
\&\fBalias_code deprecated\fR, \fBCode cleanup\fR, \fBAdded LangFam module\fR
.IP "\s-1VERSION 3.18  \s0(2011\-08\-31; sbeck)" 4
.IX Item "VERSION 3.18 (2011-08-31; sbeck)"
\&\fBNo longer use \s-1CIA\s0 data\fR
.IP "\s-1VERSION 3.17  \s0(2011\-06\-28; sbeck)" 4
.IX Item "VERSION 3.17 (2011-06-28; sbeck)"
\&\fBAdded new types of codes\fR, \fBAdded new codeset(s)\fR, \fBBug fixes\fR,
\&\fBReorganized code\fR
.IP "\s-1VERSION 3.16  \s0(2011\-03\-01; sbeck)" 4
.IX Item "VERSION 3.16 (2011-03-01; sbeck)"
.PD 0
.IP "\s-1VERSION 3.15  \s0(2010\-12\-02; sbeck)" 4
.IX Item "VERSION 3.15 (2010-12-02; sbeck)"
.PD
\&\fBMinor fixes\fR
.IP "\s-1VERSION 3.14  \s0(2010\-09\-28; sbeck)" 4
.IX Item "VERSION 3.14 (2010-09-28; sbeck)"
\&\fBBug fixes\fR
.IP "\s-1VERSION 3.13  \s0(2010\-06\-04; sbeck)" 4
.IX Item "VERSION 3.13 (2010-06-04; sbeck)"
.PD 0
.IP "\s-1VERSION 3.12  \s0(2010\-04\-06; sbeck)" 4
.IX Item "VERSION 3.12 (2010-04-06; sbeck)"
.PD
\&\fBReorganized code\fR
.IP "\s-1VERSION 3.11  \s0(2010\-03\-01; sbeck)" 4
.IX Item "VERSION 3.11 (2010-03-01; sbeck)"
\&\fBAdded new codeset(s)\fR, \fBBug fixes\fR
.IP "\s-1VERSION 3.10  \s0(2010\-02\-18; sbeck)" 4
.IX Item "VERSION 3.10 (2010-02-18; sbeck)"
\&\fBReorganized code\fR, \fB(!) Changed XXX_code2code behavior slightly\fR,
\&\fBAdded many semi-private routines\fR, \fBNew aliases\fR
.IP "\s-1VERSION 3.01  \s0(2010\-02\-15; sbeck)" 4
.IX Item "VERSION 3.01 (2010-02-15; sbeck)"
\&\fBFixed Makefile.PL and Build.PL\fR
.IP "\s-1VERSION 3.00  \s0(2010\-02\-10; sbeck)" 4
.IX Item "VERSION 3.00 (2010-02-10; sbeck)"
\&\fBNew maintainer\fR, \fB(*) (!) All codes are generated from standards\fR,
\&\fBAdded new codeset(s)\fR, \fB(*) (!) Locale::Script changed\fR, \fBAdded missing
functions\fR, \fB(!) Dropped support for _alias_code\fR, \fB(!) All functions
return the standard value\fR, \fB(!) rename_country function altered\fR
.IP "\s-1VERSION 2.07  \s0(2004\-06\-10; neilb)" 4
.IX Item "VERSION 2.07 (2004-06-10; neilb)"
.PD 0
.IP "\s-1VERSION 2.06  \s0(2002\-07\-15; neilb)" 4
.IX Item "VERSION 2.06 (2002-07-15; neilb)"
.IP "\s-1VERSION 2.05  \s0(2002\-07\-08; neilb)" 4
.IX Item "VERSION 2.05 (2002-07-08; neilb)"
.IP "\s-1VERSION 2.04  \s0(2002\-05\-23; neilb)" 4
.IX Item "VERSION 2.04 (2002-05-23; neilb)"
.IP "\s-1VERSION 2.03  \s0(2002\-03\-24; neilb)" 4
.IX Item "VERSION 2.03 (2002-03-24; neilb)"
.IP "\s-1VERSION 2.02  \s0(2002\-03\-09; neilb)" 4
.IX Item "VERSION 2.02 (2002-03-09; neilb)"
.IP "\s-1VERSION 2.01  \s0(2002\-02\-18; neilb)" 4
.IX Item "VERSION 2.01 (2002-02-18; neilb)"
.IP "\s-1VERSION 2.00  \s0(2002\-02\-17; neilb)" 4
.IX Item "VERSION 2.00 (2002-02-17; neilb)"
.IP "\s-1VERSION 1.06  \s0(2001\-03\-04; neilb)" 4
.IX Item "VERSION 1.06 (2001-03-04; neilb)"
.IP "\s-1VERSION 1.05  \s0(2001\-02\-13; neilb)" 4
.IX Item "VERSION 1.05 (2001-02-13; neilb)"
.IP "\s-1VERSION 1.04  \s0(2000\-12\-21; neilb)" 4
.IX Item "VERSION 1.04 (2000-12-21; neilb)"
.IP "\s-1VERSION 1.03  \s0(2000\-12\-??; neilb)" 4
.IX Item "VERSION 1.03 (2000-12-??; neilb)"
.IP "\s-1VERSION 1.02  \s0(2000\-05\-04; neilb)" 4
.IX Item "VERSION 1.02 (2000-05-04; neilb)"
.IP "\s-1VERSION 1.00  \s0(1998\-03\-09; neilb)" 4
.IX Item "VERSION 1.00 (1998-03-09; neilb)"
.IP "\s-1VERSION 0.003  \s0(1997\-05\-09; neilb)" 4
.IX Item "VERSION 0.003 (1997-05-09; neilb)"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Constants \- constants for Locale codes"
.IX Subsection "Locale::Codes::Constants - constants for Locale codes"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1KNOWN BUGS AND LIMITATIONS\s0" 4
.IX Item "KNOWN BUGS AND LIMITATIONS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Country \- standard codes for country identification"
.IX Subsection "Locale::Codes::Country - standard codes for country identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\-2, \s-1LOCALE_CODE_ALPHA_2\s0\fR, \fBalpha\-3, \s-1LOCALE_CODE_ALPHA_3\s0\fR,
\&\fBnumeric, \s-1LOCALE_CODE_NUMERIC\s0\fR, \fBfips\-10, \s-1LOCALE_CODE_FIPS\s0\fR, \fBdom,
\&\s-1LOCALE_CODE_DOM\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2country ( \s-1CODE\s0 [,CODESET] )\fR, \fBcountry2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBcountry_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_country_codes (
[\s-1CODESET\s0] )\fR, \fBall_country_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::Country::rename_country  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Country::add_country  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Country::delete_country  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Country::add_country_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::Country::delete_country_alias	( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::Country::rename_country_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Codes::Country::add_country_code_alias  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::Country::delete_country_code_alias  ( \s-1CODE\s0
[,CODESET] )\fR, \fBalias_code ( \s-1ALIAS, CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR, \fBLocale::SubCountry\fR,
\&\fBhttp://www.iso.org/iso/country_codes\fR,
\&\fBhttp://www.iso.org/iso/list\-en1\-semic\-3.txt\fR,
\&\fBhttp://www.iso.org/iso/home/standards/country_codes/iso\-3166\-1_decoding_t
able.htm\fR, \fBhttp://unstats.un.org/unsd/methods/m49/m49alpha.htm\fR,
\&\fBhttp://earth\-info.nga.mil/gns/html/digraphs.htm\fR,
\&\fBhttp://www.iana.org/domains/\fR,
\&\fBhttps://www.cia.gov/library/publications/the\-world\-factbook/appendix/prin
t_appendix\-d.html\fR, \fBhttp://www.statoids.com/wab.html\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Country_Codes \- country codes for the Locale::Codes::Country module"
.IX Subsection "Locale::Codes::Country_Codes - country codes for the Locale::Codes::Country module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Country_Retired \- retired country codes for the Locale::Codes::Country module"
.IX Subsection "Locale::Codes::Country_Retired - retired country codes for the Locale::Codes::Country module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Currency \- standard codes for currency identification"
.IX Subsection "Locale::Codes::Currency - standard codes for currency identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha, \s-1LOCALE_CURR_ALPHA\s0\fR, \fBnum, \s-1LOCALE_CURR_NUMERIC\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2currency ( \s-1CODE\s0 [,CODESET] )\fR, \fBcurrency2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBcurrency_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_currency_codes (
[\s-1CODESET\s0] )\fR, \fBall_currency_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::Currency::rename_currency  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Currency::add_currency  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Currency::delete_currency  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Currency::add_currency_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::Currency::delete_currency_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::Currency::rename_currency_code  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::Currency::add_currency_code_alias  ( \s-1CODE
,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Currency::delete_currency_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.iso.org/iso/support/currency_codes_list\-1.htm\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Currency_Codes \- currency codes for the Locale::Codes::Currency module"
.IX Subsection "Locale::Codes::Currency_Codes - currency codes for the Locale::Codes::Currency module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Currency_Retired \- retired currency codes for the Locale::Codes::Currency module"
.IX Subsection "Locale::Codes::Currency_Retired - retired currency codes for the Locale::Codes::Currency module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangExt \- standard codes for language extension identification"
.IX Subsection "Locale::Codes::LangExt - standard codes for language extension identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2langext ( \s-1CODE\s0 [,CODESET] )\fR, \fBlangext2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBlangext_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_langext_codes (
[\s-1CODESET\s0] )\fR, \fBall_langext_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::LangExt::rename_langext  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangExt::add_langext  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangExt::delete_langext  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangExt::add_langext_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::LangExt::delete_langext_alias	( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::LangExt::rename_langext_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Codes::LangExt::add_langext_code_alias  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::LangExt::delete_langext_code_alias  ( \s-1CODE\s0
[,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangExt_Codes \- langext codes for the Locale::Codes::LangExt module"
.IX Subsection "Locale::Codes::LangExt_Codes - langext codes for the Locale::Codes::LangExt module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangExt_Retired \- retired langext codes for the Locale::Codes::LangExt module"
.IX Subsection "Locale::Codes::LangExt_Retired - retired langext codes for the Locale::Codes::LangExt module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangFam \- standard codes for language extension identification"
.IX Subsection "Locale::Codes::LangFam - standard codes for language extension identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2langfam ( \s-1CODE\s0 [,CODESET] )\fR, \fBlangfam2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBlangfam_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_langfam_codes (
[\s-1CODESET\s0] )\fR, \fBall_langfam_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::LangFam::rename_langfam  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangFam::add_langfam  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangFam::delete_langfam  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangFam::add_langfam_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::LangFam::delete_langfam_alias	( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::LangFam::rename_langfam_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Codes::LangFam::add_langfam_code_alias  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::LangFam::delete_langfam_code_alias  ( \s-1CODE\s0
[,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.loc.gov/standards/iso639\-5/id.php\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangFam_Codes \- langfam codes for the Locale::Codes::LangFam module"
.IX Subsection "Locale::Codes::LangFam_Codes - langfam codes for the Locale::Codes::LangFam module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangFam_Retired \- retired langfam codes for the Locale::Codes::LangFam module"
.IX Subsection "Locale::Codes::LangFam_Retired - retired langfam codes for the Locale::Codes::LangFam module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangVar \- standard codes for language variation identification"
.IX Subsection "Locale::Codes::LangVar - standard codes for language variation identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2langvar ( \s-1CODE\s0 [,CODESET] )\fR, \fBlangvar2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBlangvar_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_langvar_codes (
[\s-1CODESET\s0] )\fR, \fBall_langvar_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::LangVar::rename_langvar  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangVar::add_langvar  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangVar::delete_langvar  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::LangVar::add_langvar_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::LangVar::delete_langvar_alias	( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::LangVar::rename_langvar_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Codes::LangVar::add_langvar_code_alias  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::LangVar::delete_langvar_code_alias  ( \s-1CODE\s0
[,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangVar_Codes \- langvar codes for the Locale::Codes::LangVar module"
.IX Subsection "Locale::Codes::LangVar_Codes - langvar codes for the Locale::Codes::LangVar module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::LangVar_Retired \- retired langvar codes for the Locale::Codes::LangVar module"
.IX Subsection "Locale::Codes::LangVar_Retired - retired langvar codes for the Locale::Codes::LangVar module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Language \- standard codes for language identification"
.IX Subsection "Locale::Codes::Language - standard codes for language identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\-2, \s-1LOCALE_LANG_ALPHA_2\s0\fR, \fBalpha\-3, \s-1LOCALE_LANG_ALPHA_3\s0\fR, \fBterm,
\&\s-1LOCALE_LANG_TERM\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2language ( \s-1CODE\s0 [,CODESET] )\fR, \fBlanguage2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBlanguage_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_language_codes (
[\s-1CODESET\s0] )\fR, \fBall_language_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::Language::rename_language  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Language::add_language  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Language::delete_language  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Language::add_language_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::Language::delete_language_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::Language::rename_language_code  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::Language::add_language_code_alias  ( \s-1CODE
,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Language::delete_language_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.loc.gov/standards/iso639\-2/\fR,
\&\fBhttp://www.loc.gov/standards/iso639\-5/\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Language_Codes \- language codes for the Locale::Codes::Language module"
.IX Subsection "Locale::Codes::Language_Codes - language codes for the Locale::Codes::Language module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Language_Retired \- retired language codes for the Locale::Codes::Language module"
.IX Subsection "Locale::Codes::Language_Retired - retired language codes for the Locale::Codes::Language module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Script \- standard codes for script identification"
.IX Subsection "Locale::Codes::Script - standard codes for script identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha, \s-1LOCALE_SCRIPT_ALPHA\s0\fR, \fBnum, \s-1LOCALE_SCRIPT_NUMERIC\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2script ( \s-1CODE\s0 [,CODESET] )\fR, \fBscript2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBscript_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_script_codes (
[\s-1CODESET\s0] )\fR, \fBall_script_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Codes::Script::rename_script	( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Script::add_script  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Script::delete_script	( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Codes::Script::add_script_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Codes::Script::delete_script_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Codes::Script::rename_script_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Codes::Script::add_script_code_alias  ( \s-1CODE ,NEW_CODE\s0
[,CODESET] )\fR, \fBLocale::Codes::Script::delete_script_code_alias  ( \s-1CODE\s0
[,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.unicode.org/iso15924/\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Script_Codes \- script codes for the Locale::Codes::Script module"
.IX Subsection "Locale::Codes::Script_Codes - script codes for the Locale::Codes::Script module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Codes::Script_Retired \- retired script codes for the Locale::Codes::Script module"
.IX Subsection "Locale::Codes::Script_Retired - retired script codes for the Locale::Codes::Script module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Country \- standard codes for country identification"
.IX Subsection "Locale::Country - standard codes for country identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\-2, \s-1LOCALE_CODE_ALPHA_2\s0\fR, \fBalpha\-3, \s-1LOCALE_CODE_ALPHA_3\s0\fR,
\&\fBnumeric, \s-1LOCALE_CODE_NUMERIC\s0\fR, \fBfips\-10, \s-1LOCALE_CODE_FIPS\s0\fR, \fBdom,
\&\s-1LOCALE_CODE_DOM\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2country ( \s-1CODE\s0 [,CODESET] )\fR, \fBcountry2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBcountry_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_country_codes (
[\s-1CODESET\s0] )\fR, \fBall_country_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Country::rename_country  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Country::add_country	( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Country::delete_country  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Country::add_country_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Country::delete_country_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Country::rename_country_code	( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Country::add_country_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Country::delete_country_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBalias_code ( \s-1ALIAS, CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR, \fBLocale::SubCountry\fR,
\&\fBhttp://www.iso.org/iso/country_codes\fR,
\&\fBhttp://www.iso.org/iso/list\-en1\-semic\-3.txt\fR,
\&\fBhttp://www.iso.org/iso/home/standards/country_codes/iso\-3166\-1_decoding_t
able.htm\fR, \fBhttp://unstats.un.org/unsd/methods/m49/m49alpha.htm\fR,
\&\fBhttp://earth\-info.nga.mil/gns/html/digraphs.htm\fR,
\&\fBhttp://www.iana.org/domains/\fR,
\&\fBhttps://www.cia.gov/library/publications/the\-world\-factbook/appendix/prin
t_appendix\-d.html\fR, \fBhttp://www.statoids.com/wab.html\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Currency \- standard codes for currency identification"
.IX Subsection "Locale::Currency - standard codes for currency identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha, \s-1LOCALE_CURR_ALPHA\s0\fR, \fBnum, \s-1LOCALE_CURR_NUMERIC\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2currency ( \s-1CODE\s0 [,CODESET] )\fR, \fBcurrency2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBcurrency_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_currency_codes (
[\s-1CODESET\s0] )\fR, \fBall_currency_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Currency::rename_currency  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Currency::add_currency  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Currency::delete_currency  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Currency::add_currency_alias	( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Currency::delete_currency_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Currency::rename_currency_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Currency::add_currency_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Currency::delete_currency_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.iso.org/iso/support/currency_codes_list\-1.htm\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Language \- standard codes for language identification"
.IX Subsection "Locale::Language - standard codes for language identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha\-2, \s-1LOCALE_LANG_ALPHA_2\s0\fR, \fBalpha\-3, \s-1LOCALE_LANG_ALPHA_3\s0\fR, \fBterm,
\&\s-1LOCALE_LANG_TERM\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2language ( \s-1CODE\s0 [,CODESET] )\fR, \fBlanguage2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBlanguage_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_language_codes (
[\s-1CODESET\s0] )\fR, \fBall_language_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Language::rename_language  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Language::add_language  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Language::delete_language  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Language::add_language_alias	( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Language::delete_language_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Language::rename_language_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Language::add_language_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET]
)\fR, \fBLocale::Language::delete_language_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.loc.gov/standards/iso639\-2/\fR,
\&\fBhttp://www.loc.gov/standards/iso639\-5/\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Locale::Maketext \- framework for localization"
.IX Subsection "Locale::Maketext - framework for localization"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1QUICK OVERVIEW\s0" 4
.IX Item "QUICK OVERVIEW"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Construction Methods" 4
.IX Item "Construction Methods"
.ie n .IP "The ""maketext"" Method" 4
.el .IP "The ``maketext'' Method" 4
.IX Item "The maketext Method"
.PD
\&\f(CW$lh\fR\->fail_with \fIor\fR \f(CW$lh\fR\->fail_with(\fI\s-1PARAM\s0\fR), \f(CW$lh\fR\->failure_handler_auto
.IP "Utility Methods" 4
.IX Item "Utility Methods"
\&\f(CW$language\fR\->quant($number, \f(CW$singular\fR), \f(CW$language\fR\->quant($number, \f(CW$singular\fR,
\&\f(CW$plural\fR), \f(CW$language\fR\->quant($number, \f(CW$singular\fR, \f(CW$plural\fR, \f(CW$negative\fR),
\&\f(CW$language\fR\->numf($number), \f(CW$language\fR\->numerate($number, \f(CW$singular\fR, \f(CW$plural\fR,
\&\f(CW$negative\fR), \f(CW$language\fR\->sprintf($format, \f(CW@items\fR), \f(CW$language\fR\->\fIlanguage_tag()\fR,
\&\f(CW$language\fR\->\fIencoding()\fR
.IP "Language Handle Attributes and Internals" 4
.IX Item "Language Handle Attributes and Internals"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1LANGUAGE CLASS HIERARCHIES\s0" 4
.IX Item "LANGUAGE CLASS HIERARCHIES"
.IP "\s-1ENTRIES IN EACH LEXICON\s0" 4
.IX Item "ENTRIES IN EACH LEXICON"
.IP "\s-1BRACKET NOTATION\s0" 4
.IX Item "BRACKET NOTATION"
.IP "\s-1AUTO LEXICONS\s0" 4
.IX Item "AUTO LEXICONS"
.IP "\s-1READONLY LEXICONS\s0" 4
.IX Item "READONLY LEXICONS"
.IP "\s-1CONTROLLING LOOKUP FAILURE\s0" 4
.IX Item "CONTROLLING LOOKUP FAILURE"
.IP "\s-1HOW TO USE MAKETEXT\s0" 4
.IX Item "HOW TO USE MAKETEXT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMER\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMER"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Locale::Maketext::Cookbook \- recipes for using Locale::Maketext"
.IX Subsection "Locale::Maketext::Cookbook - recipes for using Locale::Maketext"
.IP "\s-1INTRODUCTION\s0" 4
.IX Item "INTRODUCTION"
.PD 0
.IP "\s-1ONESIDED LEXICONS\s0" 4
.IX Item "ONESIDED LEXICONS"
.IP "\s-1DECIMAL PLACES IN NUMBER FORMATTING\s0" 4
.IX Item "DECIMAL PLACES IN NUMBER FORMATTING"
.PD
.SS "Locale::Maketext::Guts \- Deprecated module to load Locale::Maketext utf8 code"
.IX Subsection "Locale::Maketext::Guts - Deprecated module to load Locale::Maketext utf8 code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Locale::Maketext::GutsLoader \- Deprecated module to load Locale::Maketext utf8 code"
.IX Subsection "Locale::Maketext::GutsLoader - Deprecated module to load Locale::Maketext utf8 code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Locale::Maketext::Simple \- Simple interface to Locale::Maketext::Lexicon"
.IX Subsection "Locale::Maketext::Simple - Simple interface to Locale::Maketext::Lexicon"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RS 4
.IP "Class" 4
.IX Item "Class"
.IP "Path" 4
.IX Item "Path"
.IP "Style" 4
.IX Item "Style"
.IP "Export" 4
.IX Item "Export"
.IP "Subclass" 4
.IX Item "Subclass"
.IP "Decode" 4
.IX Item "Decode"
.IP "Encoding" 4
.IX Item "Encoding"
.RE
.RS 4
.RE
.IP "\s-1ACKNOWLEDGMENTS\s0" 4
.IX Item "ACKNOWLEDGMENTS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.RS 4
.ie n .IP "The ""\s-1MIT""\s0 License" 4
.el .IP "The ``\s-1MIT''\s0 License" 4
.IX Item "The MIT License"
.RE
.RS 4
.RE
.PD
.SS "Locale::Maketext::TPJ13 \*(-- article about software localization"
.IX Subsection "Locale::Maketext::TPJ13 article about software localization"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Localization and Perl: gettext breaks, Maketext fixes" 4
.IX Item "Localization and Perl: gettext breaks, Maketext fixes"
.RS 4
.IP "A Localization Horror Story: It Could Happen To You" 4
.IX Item "A Localization Horror Story: It Could Happen To You"
.IP "The Linguistic View" 4
.IX Item "The Linguistic View"
.IP "Breaking gettext" 4
.IX Item "Breaking gettext"
.IP "Replacing gettext" 4
.IX Item "Replacing gettext"
.IP "Buzzwords: Abstraction and Encapsulation" 4
.IX Item "Buzzwords: Abstraction and Encapsulation"
.IP "Buzzword: Isomorphism" 4
.IX Item "Buzzword: Isomorphism"
.IP "Buzzword: Inheritance" 4
.IX Item "Buzzword: Inheritance"
.IP "Buzzword: Concision" 4
.IX Item "Buzzword: Concision"
.IP "The Devil in the Details" 4
.IX Item "The Devil in the Details"
.IP "The Proof in the Pudding: Localizing Web Sites" 4
.IX Item "The Proof in the Pudding: Localizing Web Sites"
.IP "References" 4
.IX Item "References"
.RE
.RS 4
.RE
.PD
.SS "Locale::Script \- standard codes for script identification"
.IX Subsection "Locale::Script - standard codes for script identification"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SUPPORTED CODE SETS\s0" 4
.IX Item "SUPPORTED CODE SETS"
.PD
\&\fBalpha, \s-1LOCALE_SCRIPT_ALPHA\s0\fR, \fBnum, \s-1LOCALE_SCRIPT_NUMERIC\s0\fR
.IP "\s-1ROUTINES\s0" 4
.IX Item "ROUTINES"
\&\fBcode2script ( \s-1CODE\s0 [,CODESET] )\fR, \fBscript2code ( \s-1NAME\s0 [,CODESET] )\fR,
\&\fBscript_code2code ( \s-1CODE ,CODESET ,CODESET2 \s0)\fR, \fBall_script_codes (
[\s-1CODESET\s0] )\fR, \fBall_script_names ( [\s-1CODESET\s0] )\fR,
\&\fBLocale::Script::rename_script  ( \s-1CODE ,NEW_NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Script::add_script  ( \s-1CODE ,NAME\s0 [,CODESET] )\fR,
\&\fBLocale::Script::delete_script  ( \s-1CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Script::add_script_alias  ( \s-1NAME ,NEW_NAME \s0)\fR,
\&\fBLocale::Script::delete_script_alias  ( \s-1NAME \s0)\fR,
\&\fBLocale::Script::rename_script_code  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Script::add_script_code_alias  ( \s-1CODE ,NEW_CODE\s0 [,CODESET] )\fR,
\&\fBLocale::Script::delete_script_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
\&\fBLocale::Codes\fR, \fBLocale::Codes::API\fR,
\&\fBhttp://www.unicode.org/iso15924/\fR,
\&\fBhttp://www.iana.org/assignments/language\-subtag\-registry\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Log::Message \- A generic message storing mechanism;"
.IX Subsection "Log::Message - A generic message storing mechanism;"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Hierarchy" 4
.IX Item "Hierarchy"
.PD
Log::Message, Log::Message::Item, Log::Message::Handlers,
Log::Message::Config
.IP "Options" 4
.IX Item "Options"
config, private, verbose, tag, level, remove, chrono
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.PD 0
.IP "new" 4
.IX Item "new"
.RE
.RS 4
.RE
.IP "store" 4
.IX Item "store"
.PD
message, tag, level, extra
.IP "retrieve" 4
.IX Item "retrieve"
tag, level, message, amount, chrono, remove
.IP "first" 4
.IX Item "first"
.PD 0
.IP "last" 4
.IX Item "last"
.IP "flush" 4
.IX Item "flush"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "Acknowledgements" 4
.IX Item "Acknowledgements"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Log::Message::Config \- Configuration options for Log::Message"
.IX Subsection "Log::Message::Config - Configuration options for Log::Message"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "Acknowledgements" 4
.IX Item "Acknowledgements"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Log::Message::Handlers \- Message handlers for Log::Message"
.IX Subsection "Log::Message::Handlers - Message handlers for Log::Message"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Default Handlers" 4
.IX Item "Default Handlers"
.RS 4
.IP "log" 4
.IX Item "log"
.RE
.RS 4
.RE
.IP "carp" 4
.IX Item "carp"
.IP "croak" 4
.IX Item "croak"
.IP "cluck" 4
.IX Item "cluck"
.IP "confess" 4
.IX Item "confess"
.IP "die" 4
.IX Item "die"
.IP "warn" 4
.IX Item "warn"
.IP "trace" 4
.IX Item "trace"
.IP "Custom Handlers" 4
.IX Item "Custom Handlers"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "Acknowledgements" 4
.IX Item "Acknowledgements"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Log::Message::Item  \- Message objects for Log::Message"
.IX Subsection "Log::Message::Item - Message objects for Log::Message"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Methods and Accessors" 4
.IX Item "Methods and Accessors"
.RS 4
.IP "remove" 4
.IX Item "remove"
.IP "id" 4
.IX Item "id"
.IP "when" 4
.IX Item "when"
.IP "message" 4
.IX Item "message"
.IP "level" 4
.IX Item "level"
.IP "tag" 4
.IX Item "tag"
.IP "shortmess" 4
.IX Item "shortmess"
.IP "longmess" 4
.IX Item "longmess"
.IP "parent" 4
.IX Item "parent"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "Acknowledgements" 4
.IX Item "Acknowledgements"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Log::Message::Simple \- Simplified interface to Log::Message"
.IX Subsection "Log::Message::Simple - Simplified interface to Log::Message"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "msg(""message string"" [,VERBOSE])" 4
.el .IP "msg(``message string'' [,VERBOSE])" 4
.IX Item "msg(message string [,VERBOSE])"
.ie n .IP "debug(""message string"" [,VERBOSE])" 4
.el .IP "debug(``message string'' [,VERBOSE])" 4
.IX Item "debug(message string [,VERBOSE])"
.ie n .IP "error(""error string"" [,VERBOSE])" 4
.el .IP "error(``error string'' [,VERBOSE])" 4
.IX Item "error(error string [,VERBOSE])"
.RE
.RS 4
.RE
.IP "\fIcarp()\fR;" 4
.IX Item "carp();"
.IP "\fIcroak()\fR;" 4
.IX Item "croak();"
.IP "\fIconfess()\fR;" 4
.IX Item "confess();"
.IP "\fIcluck()\fR;" 4
.IX Item "cluck();"
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.IP "Log::Message::Simple\->\fIstack()\fR" 4
.IX Item "Log::Message::Simple->stack()"
.IP "Log::Message::Simple\->stack_as_string([\s-1TRACE\s0])" 4
.IX Item "Log::Message::Simple->stack_as_string([TRACE])"
.IP "Log::Message::Simple\->\fIflush()\fR" 4
.IX Item "Log::Message::Simple->flush()"
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.PD
\&\f(CW$ERROR_FH\fR, \f(CW$MSG_FH\fR, \f(CW$DEBUG_FH\fR, \f(CW$STACKTRACE_ON_ERROR\fR
.SS "MIME::Base64 \- Encoding and decoding of base64 strings"
.IX Subsection "MIME::Base64 - Encoding and decoding of base64 strings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
encode_base64( \f(CW$bytes\fR ), encode_base64( \f(CW$bytes\fR, \f(CW$eol\fR );, decode_base64(
\&\f(CW$str\fR ), encode_base64url( \f(CW$bytes\fR ), decode_base64url( \f(CW$str\fR ),
encoded_base64_length( \f(CW$bytes\fR ), encoded_base64_length( \f(CW$bytes\fR, \f(CW$eol\fR ),
decoded_base64_length( \f(CW$str\fR )
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "MIME::QuotedPrint \- Encoding and decoding of quoted-printable strings"
.IX Subsection "MIME::QuotedPrint - Encoding and decoding of quoted-printable strings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
encode_qp( \f(CW$str\fR), encode_qp( \f(CW$str\fR, \f(CW$eol\fR), encode_qp( \f(CW$str\fR, \f(CW$eol\fR, \f(CW$binmode\fR
), decode_qp( \f(CW$str\fR )
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Math::BigFloat \- Arbitrary size floating point math package"
.IX Subsection "Math::BigFloat - Arbitrary size floating point math package"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Canonical notation" 4
.IX Item "Canonical notation"
.IP "Output" 4
.IX Item "Output"
.ie n .IP """mantissa()"", ""exponent()"" and ""parts()""" 4
.el .IP "\f(CWmantissa()\fR, \f(CWexponent()\fR and \f(CWparts()\fR" 4
.IX Item "mantissa(), exponent() and parts()"
.IP "Accuracy vs. Precision" 4
.IX Item "Accuracy vs. Precision"
.IP "Rounding" 4
.IX Item "Rounding"
.PD
ffround ( +$scale ), ffround ( \-$scale ), ffround ( 0 ), fround  ( +$scale
), fround  ( \-$scale ) and fround ( 0 )
.RE
.RS 4
.RE
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.IP "accuracy" 4
.IX Item "accuracy"
.IP "\fIprecision()\fR" 4
.IX Item "precision()"
.IP "\fIbexp()\fR" 4
.IX Item "bexp()"
.IP "\fIbnok()\fR" 4
.IX Item "bnok()"
.IP "\fIbpi()\fR" 4
.IX Item "bpi()"
.IP "\fIbcos()\fR" 4
.IX Item "bcos()"
.IP "\fIbsin()\fR" 4
.IX Item "bsin()"
.IP "\fIbatan2()\fR" 4
.IX Item "batan2()"
.IP "\fIbatan()\fR" 4
.IX Item "batan()"
.IP "\fIbmuladd()\fR" 4
.IX Item "bmuladd()"
.RE
.RS 4
.RE
.IP "Autocreating constants" 4
.IX Item "Autocreating constants"
.RS 4
.IP "Math library" 4
.IX Item "Math library"
.IP "Using Math::BigInt::Lite" 4
.IX Item "Using Math::BigInt::Lite"
.RE
.RS 4
.RE
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
stringify, \fIbstr()\fR, bdiv, brsft, Modifying and =, bpow, \fIprecision()\fR vs.
\&\fIaccuracy()\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "Math::BigInt \- Arbitrary size integer/float math package"
.IX Subsection "Math::BigInt - Arbitrary size integer/float math package"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
Input, Output
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.PD 0
.IP "\fIconfig()\fR" 4
.IX Item "config()"
.IP "\fIaccuracy()\fR" 4
.IX Item "accuracy()"
.IP "\fIprecision()\fR" 4
.IX Item "precision()"
.IP "\fIbrsft()\fR" 4
.IX Item "brsft()"
.IP "\fInew()\fR" 4
.IX Item "new()"
.IP "\fIfrom_oct()\fR" 4
.IX Item "from_oct()"
.IP "\fIfrom_hex()\fR" 4
.IX Item "from_hex()"
.IP "\fIfrom_bin()\fR" 4
.IX Item "from_bin()"
.IP "\fIbnan()\fR" 4
.IX Item "bnan()"
.IP "\fIbzero()\fR" 4
.IX Item "bzero()"
.IP "\fIbinf()\fR" 4
.IX Item "binf()"
.IP "\fIbone()\fR" 4
.IX Item "bone()"
.IP "\fIis_one()\fR/\fIis_zero()\fR/\fIis_nan()\fR/\fIis_inf()\fR" 4
.IX Item "is_one()/is_zero()/is_nan()/is_inf()"
.IP "\fIis_pos()\fR/\fIis_neg()\fR/\fIis_positive()\fR/\fIis_negative()\fR" 4
.IX Item "is_pos()/is_neg()/is_positive()/is_negative()"
.IP "\fIis_odd()\fR/\fIis_even()\fR/\fIis_int()\fR" 4
.IX Item "is_odd()/is_even()/is_int()"
.IP "\fIbcmp()\fR" 4
.IX Item "bcmp()"
.IP "\fIbacmp()\fR" 4
.IX Item "bacmp()"
.IP "\fIsign()\fR" 4
.IX Item "sign()"
.IP "\fIdigit()\fR" 4
.IX Item "digit()"
.IP "\fIbneg()\fR" 4
.IX Item "bneg()"
.IP "\fIbabs()\fR" 4
.IX Item "babs()"
.IP "\fIbsgn()\fR" 4
.IX Item "bsgn()"
.IP "\fIbnorm()\fR" 4
.IX Item "bnorm()"
.IP "\fIbnot()\fR" 4
.IX Item "bnot()"
.IP "\fIbinc()\fR" 4
.IX Item "binc()"
.IP "\fIbdec()\fR" 4
.IX Item "bdec()"
.IP "\fIbadd()\fR" 4
.IX Item "badd()"
.IP "\fIbsub()\fR" 4
.IX Item "bsub()"
.IP "\fIbmul()\fR" 4
.IX Item "bmul()"
.IP "\fIbmuladd()\fR" 4
.IX Item "bmuladd()"
.IP "\fIbdiv()\fR" 4
.IX Item "bdiv()"
.IP "\fIbmod()\fR" 4
.IX Item "bmod()"
.IP "\fIbmodinv()\fR" 4
.IX Item "bmodinv()"
.IP "\fIbmodpow()\fR" 4
.IX Item "bmodpow()"
.IP "\fIbpow()\fR" 4
.IX Item "bpow()"
.IP "\fIblog()\fR" 4
.IX Item "blog()"
.IP "\fIbexp()\fR" 4
.IX Item "bexp()"
.IP "\fIbnok()\fR" 4
.IX Item "bnok()"
.IP "\fIbpi()\fR" 4
.IX Item "bpi()"
.IP "\fIbcos()\fR" 4
.IX Item "bcos()"
.IP "\fIbsin()\fR" 4
.IX Item "bsin()"
.IP "\fIbatan2()\fR" 4
.IX Item "batan2()"
.IP "\fIbatan()\fR" 4
.IX Item "batan()"
.IP "\fIblsft()\fR" 4
.IX Item "blsft()"
.IP "\fIbrsft()\fR" 4
.IX Item "brsft()"
.IP "\fIband()\fR" 4
.IX Item "band()"
.IP "\fIbior()\fR" 4
.IX Item "bior()"
.IP "\fIbxor()\fR" 4
.IX Item "bxor()"
.IP "\fIbnot()\fR" 4
.IX Item "bnot()"
.IP "\fIbsqrt()\fR" 4
.IX Item "bsqrt()"
.IP "\fIbroot()\fR" 4
.IX Item "broot()"
.IP "\fIbfac()\fR" 4
.IX Item "bfac()"
.IP "\fIround()\fR" 4
.IX Item "round()"
.IP "\fIbround()\fR" 4
.IX Item "bround()"
.IP "\fIbfround()\fR" 4
.IX Item "bfround()"
.IP "\fIbfloor()\fR" 4
.IX Item "bfloor()"
.IP "\fIbceil()\fR" 4
.IX Item "bceil()"
.IP "\fIbgcd()\fR" 4
.IX Item "bgcd()"
.IP "\fIblcm()\fR" 4
.IX Item "blcm()"
.IP "\fIexponent()\fR" 4
.IX Item "exponent()"
.IP "\fImantissa()\fR" 4
.IX Item "mantissa()"
.IP "\fIparts()\fR" 4
.IX Item "parts()"
.IP "\fIcopy()\fR" 4
.IX Item "copy()"
.IP "\fIas_int()\fR/\fIas_number()\fR" 4
.IX Item "as_int()/as_number()"
.IP "\fIbstr()\fR" 4
.IX Item "bstr()"
.IP "\fIbsstr()\fR" 4
.IX Item "bsstr()"
.IP "\fIas_hex()\fR" 4
.IX Item "as_hex()"
.IP "\fIas_bin()\fR" 4
.IX Item "as_bin()"
.IP "\fIas_oct()\fR" 4
.IX Item "as_oct()"
.IP "\fInumify()\fR" 4
.IX Item "numify()"
.IP "\fImodify()\fR" 4
.IX Item "modify()"
.IP "\fIupgrade()\fR/\fIdowngrade()\fR" 4
.IX Item "upgrade()/downgrade()"
.IP "\fIdiv_scale()\fR" 4
.IX Item "div_scale()"
.IP "\fIround_mode()\fR" 4
.IX Item "round_mode()"
.RE
.RS 4
.RE
.IP "\s-1ACCURACY\s0 and \s-1PRECISION\s0" 4
.IX Item "ACCURACY and PRECISION"
.RS 4
.IP "Precision P" 4
.IX Item "Precision P"
.IP "Accuracy A" 4
.IX Item "Accuracy A"
.IP "Fallback F" 4
.IX Item "Fallback F"
.IP "Rounding mode R" 4
.IX Item "Rounding mode R"
.PD
\&'trunc', 'even', 'odd', '+inf', '\-inf', 'zero', 'common', Precision,
Accuracy (significant digits), Setting/Accessing, Creating numbers, Usage,
Precedence, Overriding globals, Local settings, Rounding, Default values,
Remarks
.RE
.RS 4
.RE
.IP "Infinity and Not a Number" 4
.IX Item "Infinity and Not a Number"
\&\fIoct()\fR/\fIhex()\fR, log(\-inf), \fIexp()\fR, \fIcos()\fR, \fIsin()\fR, \fIatan2()\fR
.IP "\s-1INTERNALS\s0" 4
.IX Item "INTERNALS"
.RS 4
.PD 0
.IP "\s-1MATH LIBRARY\s0" 4
.IX Item "MATH LIBRARY"
.IP "\s-1SIGN\s0" 4
.IX Item "SIGN"
.IP "\fImantissa()\fR, \fIexponent()\fR and \fIparts()\fR" 4
.IX Item "mantissa(), exponent() and parts()"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "Autocreating constants" 4
.IX Item "Autocreating constants"
.IP "\s-1PERFORMANCE\s0" 4
.IX Item "PERFORMANCE"
.RS 4
.IP "Alternative math libraries" 4
.IX Item "Alternative math libraries"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Subclassing Math::BigInt" 4
.IX Item "Subclassing Math::BigInt"
.RE
.RS 4
.RE
.IP "\s-1UPGRADING\s0" 4
.IX Item "UPGRADING"
.RS 4
.IP "Auto-upgrade" 4
.IX Item "Auto-upgrade"
.PD
\&\fIbsqrt()\fR, \fIdiv()\fR, \fIblog()\fR, \fIbexp()\fR
.RE
.RS 4
.RE
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
\&\fIbstr()\fR, \fIbsstr()\fR and 'cmp', \fIint()\fR, length, bdiv, infinity handling,
Modifying and =, bpow, Overloading \-$x, Mixing different object types,
\&\fIbsqrt()\fR, \fIbrsft()\fR
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "Math::BigInt::Calc \- Pure Perl module to support Math::BigInt"
.IX Subsection "Math::BigInt::Calc - Pure Perl module to support Math::BigInt"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1THE\s0 Math::BigInt \s-1API\s0" 4
.IX Item "THE Math::BigInt API"
.RS 4
.IP "General Notes" 4
.IX Item "General Notes"
.IP "\s-1API\s0 version 1" 4
.IX Item "API version 1"
.PD
\&\fI\fIapi_version()\fI\fR, \fI_new(\s-1STR\s0)\fR, \fI\fI_zero()\fI\fR, \fI\fI_one()\fI\fR, \fI\fI_two()\fI\fR,
\&\fI\fI_ten()\fI\fR, \fI_from_bin(\s-1STR\s0)\fR, \fI_from_oct(\s-1STR\s0)\fR, \fI_from_hex(\s-1STR\s0)\fR,
\&\fI_add(\s-1OBJ1, OBJ2\s0)\fR, \fI_mul(\s-1OBJ1, OBJ2\s0)\fR, \fI_div(\s-1OBJ1, OBJ2\s0)\fR, \fI_sub(\s-1OBJ1,
OBJ2, FLAG\s0)\fR, \fI_sub(\s-1OBJ1, OBJ2\s0)\fR, \fI_dec(\s-1OBJ\s0)\fR, \fI_inc(\s-1OBJ\s0)\fR, \fI_mod(\s-1OBJ1,
OBJ2\s0)\fR, \fI_sqrt(\s-1OBJ\s0)\fR, \fI_root(\s-1OBJ, N\s0)\fR, \fI_fac(\s-1OBJ\s0)\fR, \fI_pow(\s-1OBJ1, OBJ2\s0)\fR,
\&\fI_modinv(\s-1OBJ1, OBJ2\s0)\fR, \fI_modpow(\s-1OBJ1, OBJ2, OBJ3\s0)\fR, \fI_rsft(\s-1OBJ, N, B\s0)\fR,
\&\fI_lsft(\s-1OBJ, N, B\s0)\fR, \fI_log_int(\s-1OBJ, B\s0)\fR, \fI_gcd(\s-1OBJ1, OBJ2\s0)\fR, \fI_and(\s-1OBJ1,
OBJ2\s0)\fR, \fI_or(\s-1OBJ1, OBJ2\s0)\fR, \fI_xor(\s-1OBJ1, OBJ2\s0)\fR, \fI_is_zero(\s-1OBJ\s0)\fR,
\&\fI_is_one(\s-1OBJ\s0)\fR, \fI_is_two(\s-1OBJ\s0)\fR, \fI_is_ten(\s-1OBJ\s0)\fR, \fI_is_even(\s-1OBJ\s0)\fR,
\&\fI_is_odd(\s-1OBJ\s0)\fR, \fI_acmp(\s-1OBJ1, OBJ2\s0)\fR, \fI_str(\s-1OBJ\s0)\fR, \fI_as_bin(\s-1OBJ\s0)\fR,
\&\fI_as_oct(\s-1OBJ\s0)\fR, \fI_as_hex(\s-1OBJ\s0)\fR, \fI_num(\s-1OBJ\s0)\fR, \fI_copy(\s-1OBJ\s0)\fR,
\&\fI_len(\s-1OBJ\s0)\fR, \fI_zeros(\s-1OBJ\s0)\fR, \fI_digit(\s-1OBJ, N\s0)\fR, \fI_check(\s-1OBJ\s0)\fR
.IP "\s-1API\s0 version 2" 4
.IX Item "API version 2"
\&\fI_1ex(N)\fR, \fI_nok(\s-1OBJ1, OBJ2\s0)\fR, \fI_alen(\s-1OBJ\s0)\fR
.IP "\s-1API\s0 optional methods" 4
.IX Item "API optional methods"
\&\fI_signed_or(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR, \fI_signed_and(\s-1OBJ1, OBJ2, SIGN1,
SIGN2\s0)\fR, \fI_signed_xor(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR
.RE
.RS 4
.RE
.IP "\s-1WRAP YOUR OWN\s0" 4
.IX Item "WRAP YOUR OWN"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Math::BigInt::CalcEmu \- Emulate low-level math with BigInt code"
.IX Subsection "Math::BigInt::CalcEmu - Emulate low-level math with BigInt code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "_\|_emu_bxor" 4
.IX Item "__emu_bxor"
.IP "_\|_emu_band" 4
.IX Item "__emu_band"
.IP "_\|_emu_bior" 4
.IX Item "__emu_bior"
.RE
.RS 4
.RE
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Math::BigInt::FastCalc \- Math::BigInt::Calc with some \s-1XS\s0 for more speed"
.IX Subsection "Math::BigInt::FastCalc - Math::BigInt::Calc with some XS for more speed"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1STORAGE\s0" 4
.IX Item "STORAGE"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Math::BigRat \- Arbitrary big rational numbers"
.IX Subsection "Math::BigRat - Arbitrary big rational numbers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1MATH LIBRARY\s0" 4
.IX Item "MATH LIBRARY"
.RE
.RS 4
.RE
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "\fInew()\fR" 4
.IX Item "new()"
.IP "\fInumerator()\fR" 4
.IX Item "numerator()"
.IP "\fIdenominator()\fR" 4
.IX Item "denominator()"
.IP "\fIparts()\fR" 4
.IX Item "parts()"
.IP "\fInumify()\fR" 4
.IX Item "numify()"
.IP "\fIas_int()\fR/\fIas_number()\fR" 4
.IX Item "as_int()/as_number()"
.IP "\fIas_float()\fR" 4
.IX Item "as_float()"
.IP "\fIas_hex()\fR" 4
.IX Item "as_hex()"
.IP "\fIas_bin()\fR" 4
.IX Item "as_bin()"
.IP "\fIas_oct()\fR" 4
.IX Item "as_oct()"
.IP "\fIfrom_hex()\fR/\fIfrom_bin()\fR/\fIfrom_oct()\fR" 4
.IX Item "from_hex()/from_bin()/from_oct()"
.IP "\fIlength()\fR" 4
.IX Item "length()"
.IP "\fIdigit()\fR" 4
.IX Item "digit()"
.IP "\fIbnorm()\fR" 4
.IX Item "bnorm()"
.IP "\fIbfac()\fR" 4
.IX Item "bfac()"
.IP "\fIbround()\fR/\fIround()\fR/\fIbfround()\fR" 4
.IX Item "bround()/round()/bfround()"
.IP "\fIbmod()\fR" 4
.IX Item "bmod()"
.IP "\fIbneg()\fR" 4
.IX Item "bneg()"
.IP "\fIis_one()\fR" 4
.IX Item "is_one()"
.IP "\fIis_zero()\fR" 4
.IX Item "is_zero()"
.IP "\fIis_pos()\fR/\fIis_positive()\fR" 4
.IX Item "is_pos()/is_positive()"
.IP "\fIis_neg()\fR/\fIis_negative()\fR" 4
.IX Item "is_neg()/is_negative()"
.IP "\fIis_int()\fR" 4
.IX Item "is_int()"
.IP "\fIis_odd()\fR" 4
.IX Item "is_odd()"
.IP "\fIis_even()\fR" 4
.IX Item "is_even()"
.IP "\fIbceil()\fR" 4
.IX Item "bceil()"
.IP "\fIbfloor()\fR" 4
.IX Item "bfloor()"
.IP "\fIbsqrt()\fR" 4
.IX Item "bsqrt()"
.IP "\fIbroot()\fR" 4
.IX Item "broot()"
.IP "\fIbadd()\fR/\fIbmul()\fR/\fIbsub()\fR/\fIbdiv()\fR/\fIbdec()\fR/\fIbinc()\fR" 4
.IX Item "badd()/bmul()/bsub()/bdiv()/bdec()/binc()"
.IP "\fIcopy()\fR" 4
.IX Item "copy()"
.IP "\fIbstr()\fR/\fIbsstr()\fR" 4
.IX Item "bstr()/bsstr()"
.IP "\fIbacmp()\fR/\fIbcmp()\fR" 4
.IX Item "bacmp()/bcmp()"
.IP "\fIblsft()\fR/\fIbrsft()\fR" 4
.IX Item "blsft()/brsft()"
.IP "\fIbpow()\fR" 4
.IX Item "bpow()"
.IP "\fIbexp()\fR" 4
.IX Item "bexp()"
.IP "\fIbnok()\fR" 4
.IX Item "bnok()"
.IP "\fIconfig()\fR" 4
.IX Item "config()"
.IP "\fIobjectify()\fR" 4
.IX Item "objectify()"
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD
inf handling (partial), NaN handling (partial), rounding (not implemented
except for bceil/bfloor), \f(CW$x\fR ** \f(CW$y\fR where \f(CW$y\fR is not an integer, \fIbmod()\fR,
\&\fIblog()\fR, \fIbmodinv()\fR and \fIbmodpow()\fR (partial)
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "Math::Complex \- complex numbers and associated mathematical functions"
.IX Subsection "Math::Complex - complex numbers and associated mathematical functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPERATIONS\s0" 4
.IX Item "OPERATIONS"
.IP "\s-1CREATION\s0" 4
.IX Item "CREATION"
.IP "\s-1DISPLAYING\s0" 4
.IX Item "DISPLAYING"
.RS 4
.IP "\s-1CHANGED IN PERL 5.6\s0" 4
.IX Item "CHANGED IN PERL 5.6"
.RE
.RS 4
.RE
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.IP "\s-1CONSTANTS\s0" 4
.IX Item "CONSTANTS"
.RS 4
.IP "\s-1PI\s0" 4
.IX Item "PI"
.IP "Inf" 4
.IX Item "Inf"
.RE
.RS 4
.RE
.IP "\s-1ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO\s0" 4
.IX Item "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
.IP "\s-1ERRORS DUE TO INDIGESTIBLE ARGUMENTS\s0" 4
.IX Item "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Math::Trig \- trigonometric functions"
.IX Subsection "Math::Trig - trigonometric functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1TRIGONOMETRIC FUNCTIONS\s0" 4
.IX Item "TRIGONOMETRIC FUNCTIONS"
.PD
\&\fBtan\fR
.RS 4
.IP "\s-1ERRORS DUE TO DIVISION BY ZERO\s0" 4
.IX Item "ERRORS DUE TO DIVISION BY ZERO"
.PD 0
.IP "\s-1SIMPLE \s0(\s-1REAL\s0) \s-1ARGUMENTS, COMPLEX RESULTS\s0" 4
.IX Item "SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS"
.RE
.RS 4
.RE
.IP "\s-1PLANE ANGLE CONVERSIONS\s0" 4
.IX Item "PLANE ANGLE CONVERSIONS"
.PD
deg2rad, grad2rad, rad2deg, grad2deg, deg2grad, rad2grad, rad2rad, deg2deg,
grad2grad
.IP "\s-1RADIAL COORDINATE CONVERSIONS\s0" 4
.IX Item "RADIAL COORDINATE CONVERSIONS"
.RS 4
.PD 0
.IP "\s-1COORDINATE SYSTEMS\s0" 4
.IX Item "COORDINATE SYSTEMS"
.IP "3\-D \s-1ANGLE CONVERSIONS\s0" 4
.IX Item "3-D ANGLE CONVERSIONS"
.PD
cartesian_to_cylindrical, cartesian_to_spherical, cylindrical_to_cartesian,
cylindrical_to_spherical, spherical_to_cartesian, spherical_to_cylindrical
.RE
.RS 4
.RE
.IP "\s-1GREAT CIRCLE DISTANCES AND DIRECTIONS\s0" 4
.IX Item "GREAT CIRCLE DISTANCES AND DIRECTIONS"
.RS 4
.PD 0
.IP "great_circle_distance" 4
.IX Item "great_circle_distance"
.IP "great_circle_direction" 4
.IX Item "great_circle_direction"
.IP "great_circle_bearing" 4
.IX Item "great_circle_bearing"
.IP "great_circle_destination" 4
.IX Item "great_circle_destination"
.IP "great_circle_midpoint" 4
.IX Item "great_circle_midpoint"
.IP "great_circle_waypoint" 4
.IX Item "great_circle_waypoint"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.IP "\s-1CAVEAT FOR GREAT CIRCLE FORMULAS\s0" 4
.IX Item "CAVEAT FOR GREAT CIRCLE FORMULAS"
.IP "Real-valued asin and acos" 4
.IX Item "Real-valued asin and acos"
.PD
asin_real, acos_real
.RE
.RS 4
.RE
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Memoize \- Make functions faster by trading space for time"
.IX Subsection "Memoize - Make functions faster by trading space for time"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1DETAILS\s0" 4
.IX Item "DETAILS"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RS 4
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
.IP "\s-1NORMALIZER\s0" 4
.IX Item "NORMALIZER"
.ie n .IP """SCALAR_CACHE"", ""LIST_CACHE""" 4
.el .IP "\f(CWSCALAR_CACHE\fR, \f(CWLIST_CACHE\fR" 4
.IX Item "SCALAR_CACHE, LIST_CACHE"
.PD
\&\f(CW\*(C`MEMORY\*(C'\fR, \f(CW\*(C`HASH\*(C'\fR, \f(CW\*(C`TIE\*(C'\fR, \f(CW\*(C`FAULT\*(C'\fR, \f(CW\*(C`MERGE\*(C'\fR
.RE
.RS 4
.RE
.IP "\s-1OTHER FACILITIES\s0" 4
.IX Item "OTHER FACILITIES"
.RS 4
.PD 0
.ie n .IP """unmemoize""" 4
.el .IP "\f(CWunmemoize\fR" 4
.IX Item "unmemoize"
.ie n .IP """flush_cache""" 4
.el .IP "\f(CWflush_cache\fR" 4
.IX Item "flush_cache"
.RE
.RS 4
.RE
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1PERSISTENT CACHE SUPPORT\s0" 4
.IX Item "PERSISTENT CACHE SUPPORT"
.IP "\s-1EXPIRATION SUPPORT\s0" 4
.IX Item "EXPIRATION SUPPORT"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1MAILING LIST\s0" 4
.IX Item "MAILING LIST"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.IP "\s-1THANK YOU\s0" 4
.IX Item "THANK YOU"
.PD
.SS "Memoize::AnyDBM_File \- glue to provide \s-1EXISTS\s0 for AnyDBM_File for Storable use"
.IX Subsection "Memoize::AnyDBM_File - glue to provide EXISTS for AnyDBM_File for Storable use"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "Memoize::Expire \- Plug-in module for automatic expiration of memoized values"
.IX Subsection "Memoize::Expire - Plug-in module for automatic expiration of memoized values"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1INTERFACE\s0" 4
.IX Item "INTERFACE"
.PD
.Vb 1
\& TIEHASH,  EXISTS,  STORE
.Ve
.IP "\s-1ALTERNATIVES\s0" 4
.IX Item "ALTERNATIVES"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Memoize::ExpireFile \- test for Memoize expiration semantics"
.IX Subsection "Memoize::ExpireFile - test for Memoize expiration semantics"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "Memoize::ExpireTest \- test for Memoize expiration semantics"
.IX Subsection "Memoize::ExpireTest - test for Memoize expiration semantics"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Memoize::NDBM_File \- glue to provide \s-1EXISTS\s0 for NDBM_File for Storable use"
.IX Subsection "Memoize::NDBM_File - glue to provide EXISTS for NDBM_File for Storable use"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "Memoize::SDBM_File \- glue to provide \s-1EXISTS\s0 for SDBM_File for Storable use"
.IX Subsection "Memoize::SDBM_File - glue to provide EXISTS for SDBM_File for Storable use"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Memoize::Storable \- store Memoized data in Storable database"
.IX Subsection "Memoize::Storable - store Memoized data in Storable database"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "Module::Build \- Build and install Perl modules"
.IX Subsection "Module::Build - Build and install Perl modules"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1GUIDE TO DOCUMENTATION\s0" 4
.IX Item "GUIDE TO DOCUMENTATION"
.PD
General Usage (Module::Build), Authoring Reference
(Module::Build::Authoring), \s-1API\s0 Reference (Module::Build::API),
Cookbook (Module::Build::Cookbook)
.IP "\s-1ACTIONS\s0" 4
.IX Item "ACTIONS"
build, clean, code, config_data, diff, dist, distcheck, distclean, distdir,
distinstall, distmeta, distsign, disttest, docs, fakeinstall, help, html,
install, installdeps, manifest, manifest_skip, manpages, pardist, ppd,
ppmdist, prereq_data, prereq_report, pure_install, realclean, retest,
skipcheck, test, testall, testcover, testdb, testpod, testpodcoverage,
versioninstall
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RS 4
.PD 0
.IP "Command Line Options" 4
.IX Item "Command Line Options"
.PD
quiet, verbose, cpan_client, use_rcfile, allow_mb_mismatch, debug
.IP "Default Options File (\fI.modulebuildrc\fR)" 4
.IX Item "Default Options File (.modulebuildrc)"
.PD 0
.IP "Environment variables" 4
.IX Item "Environment variables"
.PD
\&\s-1MODULEBUILDRC, PERL_MB_OPT\s0
.RE
.RS 4
.RE
.IP "\s-1INSTALL PATHS\s0" 4
.IX Item "INSTALL PATHS"
lib, arch, script, bin, bindoc, libdoc, binhtml, libhtml, installdirs,
install_path, install_base, destdir, prefix
.IP "\s-1MOTIVATIONS\s0" 4
.IX Item "MOTIVATIONS"
+, +
.IP "\s-1TO DO\s0" 4
.IX Item "TO DO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::API \- \s-1API\s0 Reference for Module Authors"
.IX Subsection "Module::Build::API - API Reference for Module Authors"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "\s-1CONSTRUCTORS\s0" 4
.IX Item "CONSTRUCTORS"
.PD
\&\fIcurrent()\fR, \fInew()\fR, add_to_cleanup, auto_configure_requires, auto_features,
autosplit, build_class, build_requires, configure_requires,
create_packlist, c_source, conflicts, create_license, create_makefile_pl,
create_readme, dist_abstract, dist_author, dist_name, dist_suffix,
dist_version, dist_version_from, dynamic_config, extra_compiler_flags,
extra_linker_flags, get_options, type, store, default, include_dirs,
install_path, installdirs, license, apache, apache_1_1, artistic,
artistic_2, bsd, gpl, lgpl, mit, mozilla, open_source, perl, restrictive,
unrestricted, meta_add, meta_merge, module_name, needs_compiler, PL_files,
pm_files, pod_files, recommends, recursive_test_files, release_status,
requires, script_files, share_dir, sign, tap_harness_args, test_files,
use_tap_harness, xs_files, new_from_context(%args), \fIresume()\fR, \fIsubclass()\fR,
add_property, \f(CW\*(C`default\*(C'\fR, \f(CW\*(C`check\*(C'\fR, property_error
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
add_build_element($type), add_to_cleanup(@files), \fIargs()\fR,
autosplit_file($from, \f(CW$to\fR), \fIbase_dir()\fR, \fIbuild_requires()\fR, can_action(
\&\f(CW$action\fR ), \fIcbuilder()\fR, check_installed_status($module, \f(CW$version\fR),
check_installed_version($module, \f(CW$version\fR), compare_versions($v1, \f(CW$op\fR,
\&\f(CW$v2\fR), config($key), config($key, \f(CW$value\fR), \fIconfig()\fR [deprecated],
config_data($name), config_data($name => \f(CW$value\fR), \fIconflicts()\fR,
contains_pod($file) [deprecated], copy_if_modified(%parameters),
\&\fIcreate_build_script()\fR, \fIcurrent_action()\fR, depends_on(@actions),
dir_contains($first_dir, \f(CW$second_dir\fR), dispatch($action, \f(CW%args\fR),
\&\fIdist_dir()\fR, \fIdist_name()\fR, \fIdist_version()\fR, do_system($cmd, \f(CW@args\fR),
\&\fIextra_compiler_flags()\fR, extra_compiler_flags(@flags), \fIextra_linker_flags()\fR,
extra_linker_flags(@flags), feature($name), feature($name => \f(CW$value\fR),
fix_shebang_line(@files), \fIhave_c_compiler()\fR, \fIinstall_base_relpaths()\fR,
install_base_relpaths($type), install_base_relpaths($type => \f(CW$path\fR),
install_destination($type), \fIinstall_path()\fR, install_path($type),
install_path($type => \f(CW$path\fR), \fIinstall_types()\fR, \fIinvoked_action()\fR, \fInotes()\fR,
notes($key), notes($key => \f(CW$value\fR), \fIorig_dir()\fR, \fIos_type()\fR, \fIis_vmsish()\fR,
\&\fIis_windowsish()\fR, \fIis_unixish()\fR, \fIprefix_relpaths()\fR,
prefix_relpaths($installdirs), prefix_relpaths($installdirs, \f(CW$type\fR),
prefix_relpaths($installdirs, \f(CW$type\fR => \f(CW$path\fR), \fIget_metadata()\fR,
\&\fIprepare_metadata()\fR [deprecated], \fIprereq_failures()\fR, \fIprereq_data()\fR,
\&\fIprereq_report()\fR, prompt($message, \f(CW$default\fR), \fIrecommends()\fR, \fIrequires()\fR,
rscan_dir($dir, \f(CW$pattern\fR), \fIruntime_params()\fR, runtime_params($key),
\&\fIscript_files()\fR, up_to_date($source_file, \f(CW$derived_file\fR),
up_to_date(\e@source_files, \e@derived_files), y_n($message, \f(CW$default\fR)
.IP "Autogenerated Accessors" 4
.IX Item "Autogenerated Accessors"
\&\fIPL_files()\fR, \fIallow_mb_mismatch()\fR, \fIauto_configure_requires()\fR, \fIautosplit()\fR,
\&\fIbase_dir()\fR, \fIbindoc_dirs()\fR, \fIblib()\fR, \fIbuild_bat()\fR, \fIbuild_class()\fR,
\&\fIbuild_elements()\fR, \fIbuild_requires()\fR, \fIbuild_script()\fR, \fIbundle_inc()\fR,
\&\fIbundle_inc_preload()\fR, \fIc_source()\fR, \fIconfig_dir()\fR, \fIconfigure_requires()\fR,
\&\fIconflicts()\fR, \fIcpan_client()\fR, \fIcreate_license()\fR, \fIcreate_makefile_pl()\fR,
\&\fIcreate_packlist()\fR, \fIcreate_readme()\fR, \fIdebug()\fR, \fIdebugger()\fR, \fIdestdir()\fR,
\&\fIdynamic_config()\fR, \fIget_options()\fR, \fIhtml_css()\fR, \fIinclude_dirs()\fR,
\&\fIinstall_base()\fR, \fIinstalldirs()\fR, \fIlibdoc_dirs()\fR, \fIlicense()\fR, \fImagic_number()\fR,
\&\fImb_version()\fR, \fImeta_add()\fR, \fImeta_merge()\fR, \fImetafile()\fR, \fImetafile2()\fR,
\&\fImodule_name()\fR, \fImymetafile()\fR, \fImymetafile2()\fR, \fIneeds_compiler()\fR, \fIorig_dir()\fR,
\&\fIperl()\fR, \fIpm_files()\fR, \fIpod_files()\fR, \fIpollute()\fR, \fIprefix()\fR,
\&\fIprereq_action_types()\fR, \fIprogram_name()\fR, \fIquiet()\fR, \fIrecommends()\fR,
\&\fIrecurse_into()\fR, \fIrecursive_test_files()\fR, \fIrequires()\fR, \fIscripts()\fR, \fIsign()\fR,
\&\fItap_harness_args()\fR, \fItest_file_exts()\fR, \fIuse_rcfile()\fR, \fIuse_tap_harness()\fR,
\&\fIverbose()\fR, \fIxs_files()\fR
.RE
.RS 4
.RE
.IP "\s-1MODULE METADATA\s0" 4
.IX Item "MODULE METADATA"
keywords, resources
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Authoring \- Authoring Module::Build modules"
.IX Subsection "Module::Build::Authoring - Authoring Module::Build modules"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1STRUCTURE\s0" 4
.IX Item "STRUCTURE"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1PREREQUISITES\s0" 4
.IX Item "PREREQUISITES"
.RS 4
.IP "Types of prerequisites" 4
.IX Item "Types of prerequisites"
.PD
configure_requires, build_requires, requires, recommends, conflicts
.IP "Format of prerequisites" 4
.IX Item "Format of prerequisites"
.PD 0
.IP "\s-1XS\s0 Extensions" 4
.IX Item "XS Extensions"
.RE
.RS 4
.RE
.IP "\s-1SAVING CONFIGURATION INFORMATION\s0" 4
.IX Item "SAVING CONFIGURATION INFORMATION"
.IP "\s-1STARTING MODULE DEVELOPMENT\s0" 4
.IX Item "STARTING MODULE DEVELOPMENT"
.IP "\s-1AUTOMATION\s0" 4
.IX Item "AUTOMATION"
.IP "\s-1MIGRATION\s0" 4
.IX Item "MIGRATION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Base \- Default methods for Module::Build"
.IX Subsection "Module::Build::Base - Default methods for Module::Build"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Bundling \- How to bundle Module::Build with a distribution"
.IX Subsection "Module::Build::Bundling - How to bundle Module::Build with a distribution"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUNDLING OTHER CONFIGURATION DEPENDENCIES\s0" 4
.IX Item "BUNDLING OTHER CONFIGURATION DEPENDENCIES"
.RS 4
.IP "\s-1WARNING\s0 \*(-- How to Manage Dependency Chains" 4
.IX Item "WARNING How to Manage Dependency Chains"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Compat \- Compatibility with ExtUtils::MakeMaker"
.IX Subsection "Module::Build::Compat - Compatibility with ExtUtils::MakeMaker"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
create_makefile_pl($style, \f(CW$build\fR), traditional, small, passthrough
(\s-1DEPRECATED\s0), run_build_pl(args => \e@ARGV), args, script, \fIwrite_makefile()\fR,
makefile
.IP "\s-1SCENARIOS\s0" 4
.IX Item "SCENARIOS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::ConfigData \- Configuration for Module::Build"
.IX Subsection "Module::Build::ConfigData - Configuration for Module::Build"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
config($name), feature($name), set_config($name, \f(CW$value\fR),
set_feature($name, \f(CW$value\fR), \fIconfig_names()\fR, \fIfeature_names()\fR,
\&\fIauto_feature_names()\fR, \fIwrite()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "Module::Build::Cookbook \- Examples of Module::Build Usage"
.IX Subsection "Module::Build::Cookbook - Examples of Module::Build Usage"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BASIC RECIPES\s0" 4
.IX Item "BASIC RECIPES"
.RS 4
.IP "Installing modules that use Module::Build" 4
.IX Item "Installing modules that use Module::Build"
.IP "Modifying Config.pm values" 4
.IX Item "Modifying Config.pm values"
.IP "Installing modules using the programmatic interface" 4
.IX Item "Installing modules using the programmatic interface"
.IP "Installing to a temporary directory" 4
.IX Item "Installing to a temporary directory"
.IP "Installing to a non-standard directory" 4
.IX Item "Installing to a non-standard directory"
.IP "Installing in the same location as ExtUtils::MakeMaker" 4
.IX Item "Installing in the same location as ExtUtils::MakeMaker"
.IP "Running a single test file" 4
.IX Item "Running a single test file"
.RE
.RS 4
.RE
.IP "\s-1ADVANCED RECIPES\s0" 4
.IX Item "ADVANCED RECIPES"
.RS 4
.IP "Making a \s-1CPAN\s0.pm\-compatible distribution" 4
.IX Item "Making a CPAN.pm-compatible distribution"
.IP "Changing the order of the build process" 4
.IX Item "Changing the order of the build process"
.IP "Adding new file types to the build process" 4
.IX Item "Adding new file types to the build process"
.IP "Adding new elements to the install process" 4
.IX Item "Adding new elements to the install process"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES ON CPAN\s0" 4
.IX Item "EXAMPLES ON CPAN"
.RS 4
.IP "SVN-Notify-Mirror" 4
.IX Item "SVN-Notify-Mirror"
.PD
1. Using \f(CW\*(C`auto_features\*(C'\fR, I check to see whether two optional modules are
available \- SVN::Notify::Config and Net::SSH;, 2. If the S::N::Config
module is loaded, I automatically generate test files for it during Build
(using the \f(CW\*(C`PL_files\*(C'\fR property), 3. If the \f(CW\*(C`ssh_feature\*(C'\fR is available, I
ask if the user wishes to perform the ssh tests (since it requires a little
preliminary setup);, 4. Only if the user has \f(CW\*(C`ssh_feature\*(C'\fR and answers yes
to the testing, do I generate a test file
.IP "Modifying an action" 4
.IX Item "Modifying an action"
.PD 0
.IP "Adding an action" 4
.IX Item "Adding an action"
.IP "Bundling Module::Build" 4
.IX Item "Bundling Module::Build"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::ModuleInfo \- \s-1DEPRECATED\s0"
.IX Subsection "Module::Build::ModuleInfo - DEPRECATED"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Notes \- Create persistent distribution configuration modules"
.IX Subsection "Module::Build::Notes - Create persistent distribution configuration modules"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Notes, \s-1NOTES_NAME \-\s0 Configuration for \s-1MODULE_NAME\s0"
.IX Subsection "Module::Build::Notes, NOTES_NAME - Configuration for MODULE_NAME"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
config($name), feature($name), set_config($name, \f(CW$value\fR),
set_feature($name, \f(CW$value\fR), \fIconfig_names()\fR, \fIfeature_names()\fR,
\&\fIauto_feature_names()\fR, \fIwrite()\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "Module::Build::PPMMaker \- Perl Package Manager file creation"
.IX Subsection "Module::Build::PPMMaker - Perl Package Manager file creation"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::Amiga \- Builder class for Amiga platforms"
.IX Subsection "Module::Build::Platform::Amiga - Builder class for Amiga platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::Default \- Stub class for unknown platforms"
.IX Subsection "Module::Build::Platform::Default - Stub class for unknown platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::EBCDIC \- Builder class for \s-1EBCDIC\s0 platforms"
.IX Subsection "Module::Build::Platform::EBCDIC - Builder class for EBCDIC platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::MPEiX \- Builder class for MPEiX platforms"
.IX Subsection "Module::Build::Platform::MPEiX - Builder class for MPEiX platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::MacOS \- Builder class for MacOS platforms"
.IX Subsection "Module::Build::Platform::MacOS - Builder class for MacOS platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Overridden Methods" 4
.IX Item "Overridden Methods"
.PD
\&\fInew()\fR, \fImake_executable()\fR, \fIdispatch()\fR, \fIACTION_realclean()\fR
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::RiscOS \- Builder class for RiscOS platforms"
.IX Subsection "Module::Build::Platform::RiscOS - Builder class for RiscOS platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::Unix \- Builder class for Unix platforms"
.IX Subsection "Module::Build::Platform::Unix - Builder class for Unix platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::VMS \- Builder class for \s-1VMS\s0 platforms"
.IX Subsection "Module::Build::Platform::VMS - Builder class for VMS platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Overridden Methods" 4
.IX Item "Overridden Methods"
.PD
_set_defaults
.RE
.RS 4
.RE
.PP
cull_args
.PP
manpage_separator
.PP
prefixify
.PP
_quote_args
.PP
have_forkpipe
.PP
_backticks
.PP
find_command
.PP
_maybe_command (override)
.PP
do_system
.PP
oneliner
.PP
_infer_xs_spec
.PP
rscan_dir
.PP
dist_dir
.PP
man3page_name
.PP
expand_test_dir
.PP
_detildefy
.PP
find_perl_interpreter
.PP
localize_file_path
.PP
localize_dir_path
.PP
ACTION_clean
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::VOS \- Builder class for \s-1VOS\s0 platforms"
.IX Subsection "Module::Build::Platform::VOS - Builder class for VOS platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::Windows \- Builder class for Windows platforms"
.IX Subsection "Module::Build::Platform::Windows - Builder class for Windows platforms"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::aix \- Builder class for \s-1AIX\s0 platform"
.IX Subsection "Module::Build::Platform::aix - Builder class for AIX platform"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::cygwin \- Builder class for Cygwin platform"
.IX Subsection "Module::Build::Platform::cygwin - Builder class for Cygwin platform"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::darwin \- Builder class for Mac \s-1OS X\s0 platform"
.IX Subsection "Module::Build::Platform::darwin - Builder class for Mac OS X platform"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Platform::os2 \- Builder class for \s-1OS/2\s0 platform"
.IX Subsection "Module::Build::Platform::os2 - Builder class for OS/2 platform"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Build::Version \- \s-1DEPRECATED\s0"
.IX Subsection "Module::Build::Version - DEPRECATED"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.SS "Module::Build::YAML \- \s-1DEPRECATED\s0"
.IX Subsection "Module::Build::YAML - DEPRECATED"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Module::CoreList \- what modules shipped with versions of perl"
.IX Subsection "Module::CoreList - what modules shipped with versions of perl"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS API\s0" 4
.IX Item "FUNCTIONS API"
.PD
\&\f(CW\*(C`first_release( MODULE )\*(C'\fR, \f(CW\*(C`first_release_by_date( MODULE )\*(C'\fR,
\&\f(CW\*(C`find_modules( REGEX, [ LIST OF PERLS ] )\*(C'\fR, \f(CW\*(C`find_version( PERL_VERSION
)\*(C'\fR, \f(CW\*(C`is_core( MODULE, [ MODULE_VERSION, [ PERL_VERSION ] ] )\*(C'\fR,
\&\f(CW\*(C`is_deprecated( MODULE, PERL_VERSION )\*(C'\fR, \f(CW\*(C`deprecated_in( MODULE )\*(C'\fR,
\&\f(CW\*(C`removed_from( MODULE )\*(C'\fR, \f(CW\*(C`removed_from_by_date( MODULE )\*(C'\fR,
\&\f(CW\*(C`changes_between( PERL_VERSION, PERL_VERSION )\*(C'\fR
.IP "\s-1DATA STRUCTURES\s0" 4
.IX Item "DATA STRUCTURES"
\&\f(CW%Module::CoreList::version\fR, \f(CW%Module::CoreList::delta\fR,
\&\f(CW%Module::CoreList::released\fR, \f(CW%Module::CoreList::families\fR,
\&\f(CW%Module::CoreList::deprecated\fR, \f(CW%Module::CoreList::upstream\fR,
\&\f(CW%Module::CoreList::bug_tracker\fR
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::CoreList::Utils \- what utilities shipped with versions of perl"
.IX Subsection "Module::CoreList::Utils - what utilities shipped with versions of perl"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS API\s0" 4
.IX Item "FUNCTIONS API"
.PD
\&\f(CW\*(C`utilities\*(C'\fR, \f(CW\*(C`first_release( UTILITY )\*(C'\fR, \f(CW\*(C`first_release_by_date( UTILITY
)\*(C'\fR, \f(CW\*(C`removed_from( UTILITY )\*(C'\fR, \f(CW\*(C`removed_from_by_date( UTILITY )\*(C'\fR
.IP "\s-1DATA STRUCTURES\s0" 4
.IX Item "DATA STRUCTURES"
\&\f(CW%Module::CoreList::Utils::utilities\fR
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Load \- runtime require of both modules and files"
.IX Subsection "Module::Load - runtime require of both modules and files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Rules" 4
.IX Item "Rules"
.IP "Caveats" 4
.IX Item "Caveats"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Module::Load::Conditional \- Looking up module information / loading at runtime"
.IX Subsection "Module::Load::Conditional - Looking up module information / loading at runtime"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Methods" 4
.IX Item "Methods"
.RS 4
.ie n .IP "$href = check_install( module => \s-1NAME\s0 [, version => \s-1VERSION,\s0 verbose => \s-1BOOL \s0] );" 4
.el .IP "\f(CW$href\fR = check_install( module => \s-1NAME\s0 [, version => \s-1VERSION,\s0 verbose => \s-1BOOL \s0] );" 4
.IX Item "$href = check_install( module => NAME [, version => VERSION, verbose => BOOL ] );"
.PD
module, version, verbose, file, dir, version, uptodate
.RE
.RS 4
.RE
.ie n .IP "$bool = can_load( modules => { \s-1NAME\s0 => \s-1VERSION\s0 [,NAME => \s-1VERSION\s0] }, [verbose => \s-1BOOL,\s0 nocache => \s-1BOOL\s0] )" 4
.el .IP "\f(CW$bool\fR = can_load( modules => { \s-1NAME\s0 => \s-1VERSION\s0 [,NAME => \s-1VERSION\s0] }, [verbose => \s-1BOOL,\s0 nocache => \s-1BOOL\s0] )" 4
.IX Item "$bool = can_load( modules => { NAME => VERSION [,NAME => VERSION] }, [verbose => BOOL, nocache => BOOL] )"
modules, verbose, nocache
.ie n .IP "@list = requires( \s-1MODULE \s0);" 4
.el .IP "\f(CW@list\fR = requires( \s-1MODULE \s0);" 4
.IX Item "@list = requires( MODULE );"
.PD 0
.IP "Global Variables" 4
.IX Item "Global Variables"
.RS 4
.ie n .IP "$Module::Load::Conditional::VERBOSE" 4
.el .IP "\f(CW$Module::Load::Conditional::VERBOSE\fR" 4
.IX Item "$Module::Load::Conditional::VERBOSE"
.ie n .IP "$Module::Load::Conditional::FIND_VERSION" 4
.el .IP "\f(CW$Module::Load::Conditional::FIND_VERSION\fR" 4
.IX Item "$Module::Load::Conditional::FIND_VERSION"
.ie n .IP "$Module::Load::Conditional::CHECK_INC_HASH" 4
.el .IP "\f(CW$Module::Load::Conditional::CHECK_INC_HASH\fR" 4
.IX Item "$Module::Load::Conditional::CHECK_INC_HASH"
.ie n .IP "$Module::Load::Conditional::CACHE" 4
.el .IP "\f(CW$Module::Load::Conditional::CACHE\fR" 4
.IX Item "$Module::Load::Conditional::CACHE"
.ie n .IP "$Module::Load::Conditional::ERROR" 4
.el .IP "\f(CW$Module::Load::Conditional::ERROR\fR" 4
.IX Item "$Module::Load::Conditional::ERROR"
.ie n .IP "$Module::Load::Conditional::DEPRECATED" 4
.el .IP "\f(CW$Module::Load::Conditional::DEPRECATED\fR" 4
.IX Item "$Module::Load::Conditional::DEPRECATED"
.RE
.RS 4
.RE
.IP "See Also" 4
.IX Item "See Also"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Module::Loaded \- mark modules as loaded or unloaded"
.IX Subsection "Module::Loaded - mark modules as loaded or unloaded"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "$bool = mark_as_loaded( \s-1PACKAGE \s0);" 4
.el .IP "\f(CW$bool\fR = mark_as_loaded( \s-1PACKAGE \s0);" 4
.IX Item "$bool = mark_as_loaded( PACKAGE );"
.RE
.RS 4
.RE
.ie n .IP "$bool = mark_as_unloaded( \s-1PACKAGE \s0);" 4
.el .IP "\f(CW$bool\fR = mark_as_unloaded( \s-1PACKAGE \s0);" 4
.IX Item "$bool = mark_as_unloaded( PACKAGE );"
.ie n .IP "$loc = is_loaded( \s-1PACKAGE \s0);" 4
.el .IP "\f(CW$loc\fR = is_loaded( \s-1PACKAGE \s0);" 4
.IX Item "$loc = is_loaded( PACKAGE );"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Module::Metadata \- Gather package and \s-1POD\s0 information from perl module files"
.IX Subsection "Module::Metadata - Gather package and POD information from perl module files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.RS 4
.IP "Class methods" 4
.IX Item "Class methods"
.PD
\&\f(CW\*(C`new_from_file($filename, collect_pod => 1)\*(C'\fR, \f(CW\*(C`new_from_handle($handle, $filename, collect_pod => 1)\*(C'\fR, \f(CW\*(C`new_from_module($module, collect_pod => 1, inc => \e@dirs)\*(C'\fR, \f(CW\*(C`find_module_by_name($module, \e@dirs)\*(C'\fR, \f(CW\*(C`find_module_dir_by_name($module, \e@dirs)\*(C'\fR, \f(CW\*(C`provides( %options )\*(C'\fR,
version \fB(required)\fR, dir, files, prefix, \f(CW\*(C`package_versions_from_directory($dir, \e@files?)\*(C'\fR, \f(CW\*(C`log_info (internal)\*(C'\fR
.IP "Object methods" 4
.IX Item "Object methods"
\&\f(CW\*(C`name()\*(C'\fR, \f(CW\*(C`version($package)\*(C'\fR, \f(CW\*(C`filename()\*(C'\fR, \f(CW\*(C`packages_inside()\*(C'\fR, \f(CW\*(C`pod_inside()\*(C'\fR, \f(CW\*(C`contains_pod()\*(C'\fR, \f(CW\*(C`pod($section)\*(C'\fR
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "Module::Pluggable \- automatically give your module the ability to have plugins"
.IX Subsection "Module::Pluggable - automatically give your module the ability to have plugins"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1ADVANCED USAGE\s0" 4
.IX Item "ADVANCED USAGE"
.IP "\s-1INNER PACKAGES\s0" 4
.IX Item "INNER PACKAGES"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.RS 4
.IP "sub_name" 4
.IX Item "sub_name"
.IP "search_path" 4
.IX Item "search_path"
.IP "search_dirs" 4
.IX Item "search_dirs"
.IP "instantiate" 4
.IX Item "instantiate"
.IP "require" 4
.IX Item "require"
.IP "inner" 4
.IX Item "inner"
.IP "only" 4
.IX Item "only"
.IP "except" 4
.IX Item "except"
.IP "package" 4
.IX Item "package"
.IP "file_regex" 4
.IX Item "file_regex"
.IP "include_editor_junk" 4
.IX Item "include_editor_junk"
.IP "follow_symlinks" 4
.IX Item "follow_symlinks"
.IP "min_depth, max_depth" 4
.IX Item "min_depth, max_depth"
.RE
.RS 4
.RE
.IP "\s-1TRIGGERS\s0" 4
.IX Item "TRIGGERS"
.RS 4
.IP "before_require <plugin>" 4
.IX Item "before_require <plugin>"
.IP "on_require_error <plugin> <err>" 4
.IX Item "on_require_error <plugin> <err>"
.IP "on_instantiate_error <plugin> <err>" 4
.IX Item "on_instantiate_error <plugin> <err>"
.IP "after_require <plugin>" 4
.IX Item "after_require <plugin>"
.RE
.RS 4
.RE
.IP "METHODs" 4
.IX Item "METHODs"
.RS 4
.IP "search_path" 4
.IX Item "search_path"
.RE
.RS 4
.RE
.IP "\s-1BEHAVIOUR UNDER TEST ENVIRONMENT\s0" 4
.IX Item "BEHAVIOUR UNDER TEST ENVIRONMENT"
.IP "\s-1FUTURE PLANS\s0" 4
.IX Item "FUTURE PLANS"
.IP "\s-1DEVELOPMENT\s0" 4
.IX Item "DEVELOPMENT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYING\s0" 4
.IX Item "COPYING"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Module::Pluggable::Object \- automatically give your module the ability to have plugins"
.IX Subsection "Module::Pluggable::Object - automatically give your module the ability to have plugins"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYING\s0" 4
.IX Item "COPYING"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "NDBM_File \- Tied access to ndbm files"
.IX Subsection "NDBM_File - Tied access to ndbm files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW\*(C`O_RDONLY\*(C'\fR, \f(CW\*(C`O_WRONLY\*(C'\fR, \f(CW\*(C`O_RDWR\*(C'\fR
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.RS 4
.PD 0
.ie n .IP """ndbm store returned \-1, errno 22, key ""..."" at ...""" 4
.el .IP "\f(CWndbm store returned \-1, errno 22, key ``...'' at ...\fR" 4
.IX Item "ndbm store returned -1, errno 22, key ""..."" at ..."
.RE
.RS 4
.RE
.IP "\s-1BUGS AND WARNINGS\s0" 4
.IX Item "BUGS AND WARNINGS"
.PD
.SS "\s-1NEXT \-\s0 Provide a pseudo-class \s-1NEXT \s0(et al) that allows method redispatch"
.IX Subsection "NEXT - Provide a pseudo-class NEXT (et al) that allows method redispatch"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Enforcing redispatch" 4
.IX Item "Enforcing redispatch"
.IP "Avoiding repetitions" 4
.IX Item "Avoiding repetitions"
.IP "Invoking all versions of a method with a single call" 4
.IX Item "Invoking all versions of a method with a single call"
.ie n .IP "Using ""EVERY"" methods" 4
.el .IP "Using \f(CWEVERY\fR methods" 4
.IX Item "Using EVERY methods"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1BUGS AND IRRITATIONS\s0" 4
.IX Item "BUGS AND IRRITATIONS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::Cmd \- Network Command class (as used by \s-1FTP, SMTP\s0 etc)"
.IX Subsection "Net::Cmd - Network Command class (as used by FTP, SMTP etc)"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USER METHODS\s0" 4
.IX Item "USER METHODS"
.PD
debug ( \s-1VALUE \s0), message (), code (), ok (), status (), datasend ( \s-1DATA \s0),
dataend ()
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
debug_print ( \s-1DIR, TEXT \s0), debug_text ( \s-1TEXT \s0), command ( \s-1CMD\s0 [, \s-1ARGS, ...
\&\s0]), unsupported (), response (), parse_response ( \s-1TEXT \s0), getline (),
ungetline ( \s-1TEXT \s0), rawdatasend ( \s-1DATA \s0), read_until_dot (), tied_fh ()
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::Config \- Local configuration data for libnet"
.IX Subsection "Net::Config - Local configuration data for libnet"
.IP "\s-1SYNOPSYS\s0" 4
.IX Item "SYNOPSYS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
requires_firewall \s-1HOST\s0
.IP "NetConfig \s-1VALUES\s0" 4
.IX Item "NetConfig VALUES"
nntp_hosts, snpp_hosts, pop3_hosts, smtp_hosts, ph_hosts, daytime_hosts,
time_hosts, inet_domain, ftp_firewall, ftp_firewall_type, ftp_ext_passive,
ftp_int_passive, local_netmask, test_hosts, test_exists
.SS "Net::Domain \- Attempt to evaluate the current host's internet name and domain"
.IX Subsection "Net::Domain - Attempt to evaluate the current host's internet name and domain"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
hostfqdn (), domainname (), hostname (), hostdomain ()
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::FTP \- \s-1FTP\s0 Client class"
.IX Subsection "Net::FTP - FTP Client class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERVIEW\s0" 4
.IX Item "OVERVIEW"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ([ \s-1HOST \s0] [, \s-1OPTIONS \s0])
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
login ([\s-1LOGIN\s0 [,PASSWORD [, \s-1ACCOUNT\s0] ] ]), authorize ( [\s-1AUTH\s0 [, \s-1RESP\s0]]),
site (\s-1ARGS\s0), ascii, binary, rename ( \s-1OLDNAME, NEWNAME \s0), delete ( \s-1FILENAME
\&\s0), cwd ( [ \s-1DIR \s0] ), cdup (), pwd (), restart ( \s-1WHERE \s0), rmdir ( \s-1DIR\s0 [,
\&\s-1RECURSE \s0]), mkdir ( \s-1DIR\s0 [, \s-1RECURSE \s0]), alloc ( \s-1SIZE\s0 [, \s-1RECORD_SIZE\s0] ), ls (
[ \s-1DIR \s0] ), dir ( [ \s-1DIR \s0] ), get ( \s-1REMOTE_FILE\s0 [, \s-1LOCAL_FILE\s0 [, \s-1WHERE\s0]] ),
put ( \s-1LOCAL_FILE\s0 [, \s-1REMOTE_FILE \s0] ), put_unique ( \s-1LOCAL_FILE\s0 [, \s-1REMOTE_FILE
\&\s0] ), append ( \s-1LOCAL_FILE\s0 [, \s-1REMOTE_FILE \s0] ), unique_name (), mdtm ( \s-1FILE \s0),
size ( \s-1FILE \s0), supported ( \s-1CMD \s0), hash ( [\s-1FILEHANDLE_GLOB_REF\s0],[
\&\s-1BYTES_PER_HASH_MARK\s0] ), feature ( \s-1NAME \s0), nlst ( [ \s-1DIR \s0] ), list ( [ \s-1DIR \s0]
), retr ( \s-1FILE \s0), stor ( \s-1FILE \s0), stou ( \s-1FILE \s0), appe ( \s-1FILE \s0), port ( [
\&\s-1PORT \s0] ), pasv (), pasv_xfer ( \s-1SRC_FILE, DEST_SERVER\s0 [, \s-1DEST_FILE \s0] ),
pasv_xfer_unique ( \s-1SRC_FILE, DEST_SERVER\s0 [, \s-1DEST_FILE \s0] ), pasv_wait (
\&\s-1NON_PASV_SERVER \s0), abort (), quit ()
.RS 4
.IP "Methods for the adventurous" 4
.IX Item "Methods for the adventurous"
quot (\s-1CMD\s0 [,ARGS])
.RE
.RS 4
.RE
.IP "\s-1THE\s0 dataconn \s-1CLASS\s0" 4
.IX Item "THE dataconn CLASS"
read ( \s-1BUFFER, SIZE\s0 [, \s-1TIMEOUT \s0] ), write ( \s-1BUFFER, SIZE\s0 [, \s-1TIMEOUT \s0] ),
bytes_read (), abort (), close ()
.IP "\s-1UNIMPLEMENTED\s0" 4
.IX Item "UNIMPLEMENTED"
\&\fB\s-1SMNT\s0\fR, \fB\s-1HELP\s0\fR, \fB\s-1MODE\s0\fR, \fB\s-1SYST\s0\fR, \fB\s-1STAT\s0\fR, \fB\s-1STRU\s0\fR, \fB\s-1REIN\s0\fR
.IP "\s-1REPORTING BUGS\s0" 4
.IX Item "REPORTING BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1USE EXAMPLES\s0" 4
.IX Item "USE EXAMPLES"
.PD
http://www.csh.rit.edu/~adam/Progs/
.IP "\s-1CREDITS\s0" 4
.IX Item "CREDITS"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::NNTP \- \s-1NNTP\s0 Client class"
.IX Subsection "Net::NNTP - NNTP Client class"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [ \s-1HOST \s0] [, \s-1OPTIONS \s0])
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
article ( [ MSGID|MSGNUM ], [\s-1FH\s0] ), body ( [ MSGID|MSGNUM ], [\s-1FH\s0] ), head (
[ MSGID|MSGNUM ], [\s-1FH\s0] ), articlefh ( [ MSGID|MSGNUM ] ), bodyfh ( [
MSGID|MSGNUM ] ), headfh ( [ MSGID|MSGNUM ] ), nntpstat ( [ MSGID|MSGNUM ]
), group ( [ \s-1GROUP \s0] ), ihave ( \s-1MSGID\s0 [, \s-1MESSAGE \s0]), last (), date (),
postok (), authinfo ( \s-1USER, PASS \s0), list (), newgroups ( \s-1SINCE\s0 [,
\&\s-1DISTRIBUTIONS \s0]), newnews ( \s-1SINCE\s0 [, \s-1GROUPS\s0 [, \s-1DISTRIBUTIONS \s0]]), next (),
post ( [ \s-1MESSAGE \s0] ), postfh (), slave (), quit ()
.RS 4
.IP "Extension methods" 4
.IX Item "Extension methods"
newsgroups ( [ \s-1PATTERN \s0] ), distributions (), subscriptions (),
overview_fmt (), active_times (), active ( [ \s-1PATTERN \s0] ), xgtitle ( \s-1PATTERN
\&\s0), xhdr ( \s-1HEADER,\s0 MESSAGE-SPEC ), xover ( MESSAGE-SPEC ), xpath (
MESSAGE-ID ), xpat ( \s-1HEADER, PATTERN,\s0 MESSAGE-SPEC), xrover, listgroup ( [
\&\s-1GROUP \s0] ), reader
.RE
.RS 4
.RE
.IP "\s-1UNSUPPORTED\s0" 4
.IX Item "UNSUPPORTED"
.PD 0
.IP "\s-1DEFINITIONS\s0" 4
.IX Item "DEFINITIONS"
.PD
MESSAGE-SPEC, \s-1PATTERN,\s0 Examples, \f(CW\*(C`[^]\-]\*(C'\fR, \f(CW*bdc\fR, \f(CW\*(C`[0\-9a\-zA\-Z]\*(C'\fR, \f(CW\*(C`a??d\*(C'\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::Netrc \- \s-1OO\s0 interface to users netrc file"
.IX Subsection "Net::Netrc - OO interface to users netrc file"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1THE \s0.netrc \s-1FILE\s0" 4
.IX Item "THE .netrc FILE"
.PD
machine name, default, login name, password string, account string, macdef
name
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
lookup ( \s-1MACHINE\s0 [, \s-1LOGIN \s0])
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
login (), password (), account (), lpa ()
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::POP3 \- Post Office Protocol 3 Client class (\s-1RFC1939\s0)"
.IX Subsection "Net::POP3 - Post Office Protocol 3 Client class (RFC1939)"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [ \s-1HOST \s0] [, \s-1OPTIONS \s0] 0
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
auth ( \s-1USERNAME, PASSWORD \s0), user ( \s-1USER \s0), pass ( \s-1PASS \s0), login ( [ \s-1USER\s0
[, \s-1PASS \s0]] ), apop ( [ \s-1USER\s0 [, \s-1PASS \s0]] ), banner (), capa (),  capabilities
(), top ( \s-1MSGNUM\s0 [, \s-1NUMLINES \s0] ), list ( [ \s-1MSGNUM \s0] ), get ( \s-1MSGNUM\s0 [, \s-1FH \s0]
), getfh ( \s-1MSGNUM \s0), last (), popstat (), ping ( \s-1USER \s0), uidl ( [ \s-1MSGNUM \s0]
), delete ( \s-1MSGNUM \s0), reset (), quit ()
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::Ping \- check a remote host for reachability"
.IX Subsection "Net::Ping - check a remote host for reachability"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Functions" 4
.IX Item "Functions"
.PD
Net::Ping\->new([$proto [, \f(CW$def_timeout\fR [, \f(CW$bytes\fR [, \f(CW$device\fR [, \f(CW$tos\fR [, \f(CW$ttl\fR
]]]]]]);, \f(CW$p\fR\->ping($host [, \f(CW$timeout\fR]);, \f(CW$p\fR\->source_verify( { 0 | 1 } );,
\&\f(CW$p\fR\->service_check( { 0 | 1 } );, \f(CW$p\fR\->tcp_service_check( { 0 | 1 } );,
\&\f(CW$p\fR\->hires( { 0 | 1 } );, \f(CW$p\fR\->bind($local_addr);, \f(CW$p\fR\->open($host);, \f(CW$p\fR\->ack(
[ \f(CW$host\fR ] );, \f(CW$p\fR\->nack( \f(CW$failed_ack_host\fR );, \f(CW$p\fR\->\fIclose()\fR;,
\&\f(CW$p\fR\->port_number([$port_number]), pingecho($host [, \f(CW$timeout\fR]);
.RE
.RS 4
.RE
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::SMTP \- Simple Mail Transfer Protocol Client"
.IX Subsection "Net::SMTP - Simple Mail Transfer Protocol Client"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.PD
new ( [ \s-1HOST \s0] [, \s-1OPTIONS \s0] )
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
banner (), domain (), hello ( \s-1DOMAIN \s0), host (), etrn ( \s-1DOMAIN \s0), auth (
\&\s-1USERNAME, PASSWORD \s0), mail ( \s-1ADDRESS\s0 [, \s-1OPTIONS\s0] ), send ( \s-1ADDRESS \s0),
send_or_mail ( \s-1ADDRESS \s0), send_and_mail ( \s-1ADDRESS \s0), reset (), recipient (
\&\s-1ADDRESS\s0 [, \s-1ADDRESS,\s0 [...]] [, \s-1OPTIONS \s0] ), to ( \s-1ADDRESS\s0 [, \s-1ADDRESS\s0 [...]]
), cc ( \s-1ADDRESS\s0 [, \s-1ADDRESS\s0 [...]] ), bcc ( \s-1ADDRESS\s0 [, \s-1ADDRESS\s0 [...]] ),
data ( [ \s-1DATA \s0] ), expand ( \s-1ADDRESS \s0), verify ( \s-1ADDRESS \s0), help ( [
\&\f(CW$subject\fR ] ), quit ()
.IP "\s-1ADDRESSES\s0" 4
.IX Item "ADDRESSES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::Time \- time and daytime network client interface"
.IX Subsection "Net::Time - time and daytime network client interface"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
inet_time ( [\s-1HOST\s0 [, \s-1PROTOCOL\s0 [, \s-1TIMEOUT\s0]]]), inet_daytime ( [\s-1HOST\s0 [,
\&\s-1PROTOCOL\s0 [, \s-1TIMEOUT\s0]]])
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Net::hostent \- by-name interface to Perl's built-in gethost*() functions"
.IX Subsection "Net::hostent - by-name interface to Perl's built-in gethost*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Net::libnetFAQ, libnetFAQ \- libnet Frequently Asked Questions"
.IX Subsection "Net::libnetFAQ, libnetFAQ - libnet Frequently Asked Questions"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Where to get this document" 4
.IX Item "Where to get this document"
.IP "How to contribute to this document" 4
.IX Item "How to contribute to this document"
.RE
.RS 4
.RE
.IP "Author and Copyright Information" 4
.IX Item "Author and Copyright Information"
.RS 4
.IP "Disclaimer" 4
.IX Item "Disclaimer"
.RE
.RS 4
.RE
.IP "Obtaining and installing libnet" 4
.IX Item "Obtaining and installing libnet"
.RS 4
.IP "What is libnet ?" 4
.IX Item "What is libnet ?"
.IP "Which version of perl do I need ?" 4
.IX Item "Which version of perl do I need ?"
.IP "What other modules do I need ?" 4
.IX Item "What other modules do I need ?"
.IP "What machines support libnet ?" 4
.IX Item "What machines support libnet ?"
.IP "Where can I get the latest libnet release" 4
.IX Item "Where can I get the latest libnet release"
.RE
.RS 4
.RE
.IP "Using Net::FTP" 4
.IX Item "Using Net::FTP"
.RS 4
.IP "How do I download files from an \s-1FTP\s0 server ?" 4
.IX Item "How do I download files from an FTP server ?"
.IP "How do I transfer files in binary mode ?" 4
.IX Item "How do I transfer files in binary mode ?"
.IP "How can I get the size of a file on a remote \s-1FTP\s0 server ?" 4
.IX Item "How can I get the size of a file on a remote FTP server ?"
.IP "How can I get the modification time of a file on a remote \s-1FTP\s0 server ?" 4
.IX Item "How can I get the modification time of a file on a remote FTP server ?"
.IP "How can I change the permissions of a file on a remote server ?" 4
.IX Item "How can I change the permissions of a file on a remote server ?"
.IP "Can I do a reget operation like the ftp command ?" 4
.IX Item "Can I do a reget operation like the ftp command ?"
.IP "How do I get a directory listing from an \s-1FTP\s0 server ?" 4
.IX Item "How do I get a directory listing from an FTP server ?"
.ie n .IP "Changing directory to """" does not fail ?" 4
.el .IP "Changing directory to ``'' does not fail ?" 4
.IX Item "Changing directory to """" does not fail ?"
.IP "I am behind a \s-1SOCKS\s0 firewall, but the Firewall option does not work ?" 4
.IX Item "I am behind a SOCKS firewall, but the Firewall option does not work ?"
.IP "I am behind an \s-1FTP\s0 proxy firewall, but cannot access machines outside ?" 4
.IX Item "I am behind an FTP proxy firewall, but cannot access machines outside ?"
.IP "My ftp proxy firewall does not listen on port 21" 4
.IX Item "My ftp proxy firewall does not listen on port 21"
.IP "Is it possible to change the file permissions of a file on an \s-1FTP\s0 server ?" 4
.IX Item "Is it possible to change the file permissions of a file on an FTP server ?"
.IP "I have seen scripts call a method message, but cannot find it documented ?" 4
.IX Item "I have seen scripts call a method message, but cannot find it documented ?"
.IP "Why does Net::FTP not implement mput and mget methods" 4
.IX Item "Why does Net::FTP not implement mput and mget methods"
.RE
.RS 4
.RE
.IP "Using Net::SMTP" 4
.IX Item "Using Net::SMTP"
.RS 4
.IP "Why can't the part of an Email address after the @ be used as the hostname ?" 4
.IX Item "Why can't the part of an Email address after the @ be used as the hostname ?"
.IP "Why does Net::SMTP not do \s-1DNS MX\s0 lookups ?" 4
.IX Item "Why does Net::SMTP not do DNS MX lookups ?"
.IP "The verify method always returns true ?" 4
.IX Item "The verify method always returns true ?"
.RE
.RS 4
.RE
.IP "Debugging scripts" 4
.IX Item "Debugging scripts"
.RS 4
.IP "How can I debug my scripts that use Net::* modules ?" 4
.IX Item "How can I debug my scripts that use Net::* modules ?"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR AND COPYRIGHT\s0" 4
.IX Item "AUTHOR AND COPYRIGHT"
.PD
.SS "Net::netent \- by-name interface to Perl's built-in getnet*() functions"
.IX Subsection "Net::netent - by-name interface to Perl's built-in getnet*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Net::protoent \- by-name interface to Perl's built-in getproto*() functions"
.IX Subsection "Net::protoent - by-name interface to Perl's built-in getproto*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Net::servent \- by-name interface to Perl's built-in getserv*() functions"
.IX Subsection "Net::servent - by-name interface to Perl's built-in getserv*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "O \- Generic interface to Perl Compiler backends"
.IX Subsection "O - Generic interface to Perl Compiler backends"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONVENTIONS\s0" 4
.IX Item "CONVENTIONS"
.IP "\s-1IMPLEMENTATION\s0" 4
.IX Item "IMPLEMENTATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Object::Accessor \- interface to create per object accessors"
.IX Subsection "Object::Accessor - interface to create per object accessors"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$object = Object::Accessor\->new( [\s-1ARGS\s0] );" 4
.el .IP "\f(CW$object\fR = Object::Accessor\->new( [\s-1ARGS\s0] );" 4
.IX Item "$object = Object::Accessor->new( [ARGS] );"
.RE
.RS 4
.RE
.ie n .IP "$bool = $object\->mk_accessors( @ACCESSORS | \e%ACCESSOR_MAP );" 4
.el .IP "\f(CW$bool\fR = \f(CW$object\fR\->mk_accessors( \f(CW@ACCESSORS\fR | \e%ACCESSOR_MAP );" 4
.IX Item "$bool = $object->mk_accessors( @ACCESSORS | %ACCESSOR_MAP );"
.ie n .IP "@list = $self\->ls_accessors;" 4
.el .IP "\f(CW@list\fR = \f(CW$self\fR\->ls_accessors;" 4
.IX Item "@list = $self->ls_accessors;"
.ie n .IP "$ref = $self\->ls_allow(\s-1KEY\s0)" 4
.el .IP "\f(CW$ref\fR = \f(CW$self\fR\->ls_allow(\s-1KEY\s0)" 4
.IX Item "$ref = $self->ls_allow(KEY)"
.ie n .IP "$bool = $self\->mk_aliases( alias => method, [alias2 => method2, ...] );" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->mk_aliases( alias => method, [alias2 => method2, ...] );" 4
.IX Item "$bool = $self->mk_aliases( alias => method, [alias2 => method2, ...] );"
.ie n .IP "$clone = $self\->mk_clone;" 4
.el .IP "\f(CW$clone\fR = \f(CW$self\fR\->mk_clone;" 4
.IX Item "$clone = $self->mk_clone;"
.ie n .IP "$bool = $self\->mk_flush;" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->mk_flush;" 4
.IX Item "$bool = $self->mk_flush;"
.ie n .IP "$bool = $self\->mk_verify;" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->mk_verify;" 4
.IX Item "$bool = $self->mk_verify;"
.ie n .IP "$bool = $self\->register_callback( sub { ... } );" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->register_callback( sub { ... } );" 4
.IX Item "$bool = $self->register_callback( sub { ... } );"
.ie n .IP "$bool = $self\->can( \s-1METHOD_NAME \s0)" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->can( \s-1METHOD_NAME \s0)" 4
.IX Item "$bool = $self->can( METHOD_NAME )"
.ie n .IP "$val = $self\->_\|_\|_get( \s-1METHOD_NAME \s0);" 4
.el .IP "\f(CW$val\fR = \f(CW$self\fR\->_\|_\|_get( \s-1METHOD_NAME \s0);" 4
.IX Item "$val = $self->___get( METHOD_NAME );"
.ie n .IP "$bool = $self\->_\|_\|_set( \s-1METHOD_NAME\s0 => \s-1VALUE \s0);" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->_\|_\|_set( \s-1METHOD_NAME\s0 => \s-1VALUE \s0);" 4
.IX Item "$bool = $self->___set( METHOD_NAME => VALUE );"
.ie n .IP "$bool = $self\->_\|_\|_alias( \s-1ALIAS\s0 => \s-1METHOD \s0);" 4
.el .IP "\f(CW$bool\fR = \f(CW$self\fR\->_\|_\|_alias( \s-1ALIAS\s0 => \s-1METHOD \s0);" 4
.IX Item "$bool = $self->___alias( ALIAS => METHOD );"
.IP "\s-1LVALUE ACCESSORS\s0" 4
.IX Item "LVALUE ACCESSORS"
.RS 4
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
Allow handlers, Callbacks
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.PD 0
.ie n .IP "$Object::Accessor::FATAL" 4
.el .IP "\f(CW$Object::Accessor::FATAL\fR" 4
.IX Item "$Object::Accessor::FATAL"
.ie n .IP "$Object::Accessor::DEBUG" 4
.el .IP "\f(CW$Object::Accessor::DEBUG\fR" 4
.IX Item "$Object::Accessor::DEBUG"
.RE
.RS 4
.RE
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.RS 4
.IP "Create read-only accessors" 4
.IX Item "Create read-only accessors"
.RE
.RS 4
.RE
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Opcode \- Disable named opcodes when compiling perl code"
.IX Subsection "Opcode - Disable named opcodes when compiling perl code"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.IP "Operator Names and Operator Lists" 4
.IX Item "Operator Names and Operator Lists"
.PD
an operator name (opname), an operator tag name (optag), a negated opname
or optag, an operator set (opset)
.IP "Opcode Functions" 4
.IX Item "Opcode Functions"
opcodes, opset (\s-1OP, ...\s0), opset_to_ops (\s-1OPSET\s0), opset_to_hex (\s-1OPSET\s0),
full_opset, empty_opset, invert_opset (\s-1OPSET\s0), verify_opset (\s-1OPSET, ...\s0),
define_optag (\s-1OPTAG, OPSET\s0), opmask_add (\s-1OPSET\s0), opmask, opdesc (\s-1OP, ...\s0),
opdump (\s-1PAT\s0)
.IP "Manipulating Opsets" 4
.IX Item "Manipulating Opsets"
.PD 0
.IP "\s-1TO DO \s0(maybe)" 4
.IX Item "TO DO (maybe)"
.IP "Predefined Opcode Tags" 4
.IX Item "Predefined Opcode Tags"
.PD
:base_core, :base_mem, :base_loop, :base_io, :base_orig, :base_math,
:base_thread, :default, :filesys_read, :sys_db, :browse, :filesys_open,
:filesys_write, :subprocess, :ownprocess, :others, :load,
:still_to_be_decided, :dangerous
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "\s-1POSIX \-\s0 Perl interface to \s-1IEEE\s0 Std 1003.1"
.IX Subsection "POSIX - Perl interface to IEEE Std 1003.1"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
_exit, abort, abs, access, acos, alarm, asctime, asin, assert, atan, atan2,
atexit, atof, atoi, atol, bsearch, calloc, ceil, chdir, chmod, chown,
clearerr, clock, close, closedir, cos, cosh, creat, ctermid, ctime,
cuserid, difftime, div, dup, dup2, errno, execl, execle, execlp, execv,
execve, execvp, exit, exp, fabs, fclose, fcntl, fdopen, feof, ferror,
fflush, fgetc, fgetpos, fgets, fileno, floor, fmod, fopen, fork, fpathconf,
fprintf, fputc, fputs, fread, free, freopen, frexp, fscanf, fseek, fsetpos,
fstat, fsync, ftell, fwrite, getc, getchar, getcwd, getegid, getenv,
geteuid, getgid, getgrgid, getgrnam, getgroups, getlogin, getpgrp, getpid,
getppid, getpwnam, getpwuid, gets, getuid, gmtime, isalnum, isalpha,
isatty, iscntrl, isdigit, isgraph, islower, isprint, ispunct, isspace,
isupper, isxdigit, kill, labs, lchown, ldexp, ldiv, link, localeconv,
localtime, log, log10, longjmp, lseek, malloc, mblen, mbstowcs, mbtowc,
memchr, memcmp, memcpy, memmove, memset, mkdir, mkfifo, mktime, modf, nice,
offsetof, open, opendir, pathconf, pause, perror, pipe, pow, printf, putc,
putchar, puts, qsort, raise, rand, read, readdir, realloc, remove, rename,
rewind, rewinddir, rmdir, scanf, setgid, setjmp, setlocale, setpgid,
setsid, setuid, sigaction, siglongjmp, sigpending, sigprocmask, sigsetjmp,
sigsuspend, sin, sinh, sleep, sprintf, sqrt, srand, sscanf, stat, strcat,
strchr, strcmp, strcoll, strcpy, strcspn, strerror, strftime, strlen,
strncat, strncmp, strncpy, strpbrk, strrchr, strspn, strstr, strtod,
strtok, strtol, strtoul, strxfrm, sysconf, system, tan, tanh, tcdrain,
tcflow, tcflush, tcgetpgrp, tcsendbreak, tcsetpgrp, time, times, tmpfile,
tmpnam, tolower, toupper, ttyname, tzname, tzset, umask, uname, ungetc,
unlink, utime, vfprintf, vprintf, vsprintf, wait, waitpid, wcstombs,
wctomb, write
.IP "\s-1CLASSES\s0" 4
.IX Item "CLASSES"
.RS 4
.PD 0
.IP "POSIX::SigAction" 4
.IX Item "POSIX::SigAction"
.PD
new, handler, mask, flags, safe
.IP "POSIX::SigRt" 4
.IX Item "POSIX::SigRt"
\&\f(CW%SIGRT\fR, \s-1SIGRTMIN, SIGRTMAX\s0
.IP "POSIX::SigSet" 4
.IX Item "POSIX::SigSet"
new, addset, delset, emptyset, fillset, ismember
.IP "POSIX::Termios" 4
.IX Item "POSIX::Termios"
new, getattr, getcc, getcflag, getiflag, getispeed, getlflag, getoflag,
getospeed, setattr, setcc, setcflag, setiflag, setispeed, setlflag,
setoflag, setospeed, Baud rate values, Terminal interface values, c_cc
field values, c_cflag field values, c_iflag field values, c_lflag field
values, c_oflag field values
.RE
.RS 4
.RE
.IP "\s-1PATHNAME CONSTANTS\s0" 4
.IX Item "PATHNAME CONSTANTS"
Constants
.IP "\s-1POSIX CONSTANTS\s0" 4
.IX Item "POSIX CONSTANTS"
Constants
.IP "\s-1SYSTEM CONFIGURATION\s0" 4
.IX Item "SYSTEM CONFIGURATION"
Constants
.IP "\s-1ERRNO\s0" 4
.IX Item "ERRNO"
Constants
.IP "\s-1FCNTL\s0" 4
.IX Item "FCNTL"
Constants
.IP "\s-1FLOAT\s0" 4
.IX Item "FLOAT"
Constants
.IP "\s-1LIMITS\s0" 4
.IX Item "LIMITS"
Constants
.IP "\s-1LOCALE\s0" 4
.IX Item "LOCALE"
Constants
.IP "\s-1MATH\s0" 4
.IX Item "MATH"
Constants
.IP "\s-1SIGNAL\s0" 4
.IX Item "SIGNAL"
Constants
.IP "\s-1STAT\s0" 4
.IX Item "STAT"
Constants, Macros
.IP "\s-1STDLIB\s0" 4
.IX Item "STDLIB"
Constants
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
Constants
.IP "\s-1TIME\s0" 4
.IX Item "TIME"
Constants
.IP "\s-1UNISTD\s0" 4
.IX Item "UNISTD"
Constants
.IP "\s-1WAIT\s0" 4
.IX Item "WAIT"
Constants, \s-1WNOHANG, WUNTRACED,\s0 Macros, \s-1WIFEXITED, WEXITSTATUS, WIFSIGNALED,
WTERMSIG, WIFSTOPPED, WSTOPSIG\s0
.SS "Package::Constants \- List all constants declared in a package"
.IX Subsection "Package::Constants - List all constants declared in a package"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CLASS METHODS\s0" 4
.IX Item "CLASS METHODS"
.RS 4
.ie n .IP "@const = Package::Constants\->list( \s-1PACKAGE_NAME \s0);" 4
.el .IP "\f(CW@const\fR = Package::Constants\->list( \s-1PACKAGE_NAME \s0);" 4
.IX Item "@const = Package::Constants->list( PACKAGE_NAME );"
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$Package::Constants::DEBUG" 4
.el .IP "\f(CW$Package::Constants::DEBUG\fR" 4
.IX Item "$Package::Constants::DEBUG"
.RE
.RS 4
.RE
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Params::Check \- A generic input parsing/checking mechanism."
.IX Subsection "Params::Check - A generic input parsing/checking mechanism."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Template" 4
.IX Item "Template"
.PD
default, required, strict_type, defined, no_override, store, allow
.IP "Functions" 4
.IX Item "Functions"
.RS 4
.PD 0
.IP "check( \e%tmpl, \e%args, [$verbose] );" 4
.IX Item "check( %tmpl, %args, [$verbose] );"
.PD
Template, Arguments, Verbose
.RE
.RS 4
.RE
.ie n .IP "allow( $test_me, \e@criteria );" 4
.el .IP "allow( \f(CW$test_me\fR, \e@criteria );" 4
.IX Item "allow( $test_me, @criteria );"
string, regexp, subroutine, array ref
.IP "\fIlast_error()\fR" 4
.IX Item "last_error()"
.PD 0
.IP "Global Variables" 4
.IX Item "Global Variables"
.RS 4
.ie n .IP "$Params::Check::VERBOSE" 4
.el .IP "\f(CW$Params::Check::VERBOSE\fR" 4
.IX Item "$Params::Check::VERBOSE"
.ie n .IP "$Params::Check::STRICT_TYPE" 4
.el .IP "\f(CW$Params::Check::STRICT_TYPE\fR" 4
.IX Item "$Params::Check::STRICT_TYPE"
.ie n .IP "$Params::Check::ALLOW_UNKNOWN" 4
.el .IP "\f(CW$Params::Check::ALLOW_UNKNOWN\fR" 4
.IX Item "$Params::Check::ALLOW_UNKNOWN"
.ie n .IP "$Params::Check::STRIP_LEADING_DASHES" 4
.el .IP "\f(CW$Params::Check::STRIP_LEADING_DASHES\fR" 4
.IX Item "$Params::Check::STRIP_LEADING_DASHES"
.ie n .IP "$Params::Check::NO_DUPLICATES" 4
.el .IP "\f(CW$Params::Check::NO_DUPLICATES\fR" 4
.IX Item "$Params::Check::NO_DUPLICATES"
.ie n .IP "$Params::Check::PRESERVE_CASE" 4
.el .IP "\f(CW$Params::Check::PRESERVE_CASE\fR" 4
.IX Item "$Params::Check::PRESERVE_CASE"
.ie n .IP "$Params::Check::ONLY_ALLOW_DEFINED" 4
.el .IP "\f(CW$Params::Check::ONLY_ALLOW_DEFINED\fR" 4
.IX Item "$Params::Check::ONLY_ALLOW_DEFINED"
.ie n .IP "$Params::Check::SANITY_CHECK_TEMPLATE" 4
.el .IP "\f(CW$Params::Check::SANITY_CHECK_TEMPLATE\fR" 4
.IX Item "$Params::Check::SANITY_CHECK_TEMPLATE"
.ie n .IP "$Params::Check::WARNINGS_FATAL" 4
.el .IP "\f(CW$Params::Check::WARNINGS_FATAL\fR" 4
.IX Item "$Params::Check::WARNINGS_FATAL"
.ie n .IP "$Params::Check::CALLER_DEPTH" 4
.el .IP "\f(CW$Params::Check::CALLER_DEPTH\fR" 4
.IX Item "$Params::Check::CALLER_DEPTH"
.RE
.RS 4
.RE
.IP "Acknowledgements" 4
.IX Item "Acknowledgements"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Parse::CPAN::Meta \- Parse \s-1META\s0.yml and \s-1META\s0.json \s-1CPAN\s0 metadata files"
.IX Subsection "Parse::CPAN::Meta - Parse META.yml and META.json CPAN metadata files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "load_file" 4
.IX Item "load_file"
.IP "load_yaml_string" 4
.IX Item "load_yaml_string"
.IP "load_json_string" 4
.IX Item "load_json_string"
.IP "yaml_backend" 4
.IX Item "yaml_backend"
.IP "json_backend" 4
.IX Item "json_backend"
.RE
.RS 4
.RE
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.IP "Load" 4
.IX Item "Load"
.IP "LoadFile" 4
.IX Item "LoadFile"
.RE
.RS 4
.RE
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.RS 4
.IP "\s-1PERL_JSON_BACKEND\s0" 4
.IX Item "PERL_JSON_BACKEND"
.IP "\s-1PERL_YAML_BACKEND\s0" 4
.IX Item "PERL_YAML_BACKEND"
.RE
.RS 4
.RE
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Perl::OSType \- Map Perl operating system names to generic types"
.IX Subsection "Perl::OSType - Map Perl operating system names to generic types"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.RS 4
.IP "\fIos_type()\fR" 4
.IX Item "os_type()"
.IP "\fIis_os_type()\fR" 4
.IX Item "is_os_type()"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.RS 4
.IP "Bugs / Feature Requests" 4
.IX Item "Bugs / Feature Requests"
.IP "Source Code" 4
.IX Item "Source Code"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1CONTRIBUTORS\s0" 4
.IX Item "CONTRIBUTORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "PerlIO \- On demand loader for PerlIO layers and root of PerlIO::* name space"
.IX Subsection "PerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
:unix, :stdio, :perlio, :crlf, :utf8, :bytes, :raw, :pop, :win32
.RS 4
.IP "Custom Layers" 4
.IX Item "Custom Layers"
:encoding, :mmap, :via
.IP "Alternatives to raw" 4
.IX Item "Alternatives to raw"
.PD 0
.IP "Defaults and how to override them" 4
.IX Item "Defaults and how to override them"
.IP "Querying the layers of filehandles" 4
.IX Item "Querying the layers of filehandles"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "PerlIO::encoding \- encoding layer"
.IX Subsection "PerlIO::encoding - encoding layer"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "PerlIO::mmap \- Memory mapped \s-1IO\s0"
.IX Subsection "PerlIO::mmap - Memory mapped IO"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1IMPLEMENTATION NOTE\s0" 4
.IX Item "IMPLEMENTATION NOTE"
.PD
.SS "PerlIO::scalar \- in-memory \s-1IO,\s0 scalar \s-1IO\s0"
.IX Subsection "PerlIO::scalar - in-memory IO, scalar IO"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1IMPLEMENTATION NOTE\s0" 4
.IX Item "IMPLEMENTATION NOTE"
.PD
.SS "PerlIO::via \- Helper class for PerlIO layers implemented in perl"
.IX Subsection "PerlIO::via - Helper class for PerlIO layers implemented in perl"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPECTED METHODS\s0" 4
.IX Item "EXPECTED METHODS"
.PD
\&\f(CW$class\fR\->\s-1PUSHED\s0([$mode,[$fh]]), \f(CW$obj\fR\->\s-1POPPED\s0([$fh]),
\&\f(CW$obj\fR\->\s-1UTF8\s0($belowFlag,[$fh]), \f(CW$obj\fR\->\s-1OPEN\s0($path,$mode,[$fh]),
\&\f(CW$obj\fR\->\s-1BINMODE\s0([$fh]), \f(CW$obj\fR\->\s-1FDOPEN\s0($fd,[$fh]),
\&\f(CW$obj\fR\->\s-1SYSOPEN\s0($path,$imode,$perm,[$fh]), \f(CW$obj\fR\->\s-1FILENO\s0($fh),
\&\f(CW$obj\fR\->\s-1READ\s0($buffer,$len,$fh), \f(CW$obj\fR\->\s-1WRITE\s0($buffer,$fh), \f(CW$obj\fR\->\s-1FILL\s0($fh),
\&\f(CW$obj\fR\->\s-1CLOSE\s0($fh), \f(CW$obj\fR\->\s-1SEEK\s0($posn,$whence,$fh), \f(CW$obj\fR\->\s-1TELL\s0($fh),
\&\f(CW$obj\fR\->\s-1UNREAD\s0($buffer,$fh), \f(CW$obj\fR\->\s-1FLUSH\s0($fh), \f(CW$obj\fR\->\s-1SETLINEBUF\s0($fh),
\&\f(CW$obj\fR\->\s-1CLEARERR\s0($fh), \f(CW$obj\fR\->\s-1ERROR\s0($fh), \f(CW$obj\fR\->\s-1EOF\s0($fh)
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Example \- a Hexadecimal Handle" 4
.IX Item "Example - a Hexadecimal Handle"
.RE
.RS 4
.RE
.PD
.SS "PerlIO::via::QuotedPrint \- PerlIO layer for quoted-printable strings"
.IX Subsection "PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1REQUIRED MODULES\s0" 4
.IX Item "REQUIRED MODULES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Pod::Escapes \*(-- for resolving Pod E<...> sequences"
.IX Subsection "Pod::Escapes for resolving Pod E<...> sequences"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1GOODIES\s0" 4
.IX Item "GOODIES"
.PD
e2char($e_content), e2charnum($e_content), \f(CW$Name2character\fR{\fIname\fR},
\&\f(CW$Name2character_number\fR{\fIname\fR}, \f(CW$Latin1Code_to_fallback\fR{\fIinteger\fR},
\&\f(CW$Latin1Char_to_fallback\fR{\fIcharacter\fR}, \f(CW$Code2USASCII\fR{\fIinteger\fR}
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Html \- module to convert pod files to \s-1HTML\s0"
.IX Subsection "Pod::Html - module to convert pod files to HTML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.IP "pod2html" 4
.IX Item "pod2html"
.PD
backlink, cachedir, css, flush, header, help, htmldir, htmlroot, index,
infile, outfile, poderrors, podpath, podroot, quiet, recurse, title,
verbose
.IP "htmlify" 4
.IX Item "htmlify"
.PD 0
.IP "anchorify" 4
.IX Item "anchorify"
.RE
.RS 4
.RE
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Pod::LaTeX \- Convert Pod data to formatted Latex"
.IX Subsection "Pod::LaTeX - Convert Pod data to formatted Latex"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OBJECT METHODS\s0" 4
.IX Item "OBJECT METHODS"
.PD
\&\f(CW\*(C`initialize\*(C'\fR
.IP "Data Accessors" 4
.IX Item "Data Accessors"
\&\fBAddPreamble\fR
.PP
\&\fBAddPostamble\fR
.PP
\&\fBHead1Level\fR
.PP
\&\fBLabel\fR
.PP
\&\fBLevelNoNum\fR
.PP
\&\fBMakeIndex\fR
.PP
\&\fBReplaceNAMEwithSection\fR
.PP
\&\fBStartWithNewPage\fR
.PP
\&\fBTableOfContents\fR
.PP
\&\fBUniqueLabels\fR
.PP
\&\fBUserPreamble\fR
.PP
\&\fBUserPostamble\fR
.PP
\&\fBLists\fR
.IP "Subclassed methods" 4
.IX Item "Subclassed methods"
.PP
\&\fBbegin_pod\fR
.PP
\&\fBend_pod\fR
.PP
\&\fBcommand\fR
.PP
\&\fBverbatim\fR
.PP
\&\fBtextblock\fR
.PP
\&\fBinterior_sequence\fR
.IP "List Methods" 4
.IX Item "List Methods"
\&\fBbegin_list\fR
.PP
\&\fBend_list\fR
.PP
\&\fBadd_item\fR
.IP "Methods for headings" 4
.IX Item "Methods for headings"
\&\fBhead\fR
.IP "Internal methods" 4
.IX Item "Internal methods"
\&\fB_output\fR
.PP
\&\fB_replace_special_chars\fR
.PP
\&\fB_replace_special_chars_late\fR
.PP
\&\fB_create_label\fR
.PP
\&\fB_create_index\fR
.PP
\&\fB_clean_latex_commands\fR
.PP
\&\fB_split_delimited\fR
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1REVISION\s0" 4
.IX Item "REVISION"
.PD
.SS "Pod::Man \- Convert \s-1POD\s0 data to formatted *roff input"
.IX Subsection "Pod::Man - Convert POD data to formatted *roff input"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
center, errors, date, fixed, fixedbold, fixeditalic, fixedbolditalic, name,
nourls, quotes, release, section, stderr, utf8
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
roff font should be 1 or 2 chars, not \*(L"%s\*(R", Invalid errors setting \*(L"%s\*(R",
Invalid quote specification \*(L"%s\*(R", \s-1POD\s0 document had syntax errors
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Pod::ParseLink \- Parse an L<> formatting code in \s-1POD\s0 text"
.IX Subsection "Pod::ParseLink - Parse an L<> formatting code in POD text"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Pod::Perldoc \- Look up Perl documentation in Pod format."
.IX Subsection "Pod::Perldoc - Look up Perl documentation in Pod format."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::BaseTo \- Base for Pod::Perldoc formatters"
.IX Subsection "Pod::Perldoc::BaseTo - Base for Pod::Perldoc formatters"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::GetOptsOO \- Customized option parser for Pod::Perldoc"
.IX Subsection "Pod::Perldoc::GetOptsOO - Customized option parser for Pod::Perldoc"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
Call Pod::Perldoc::GetOptsOO::getopts($object, \e@ARGV, \f(CW$truth\fR), Given \-n,
if there's a opt_n_with, it'll call \f(CW$object\fR\->opt_n_with( \s-1ARGUMENT \s0)   
(e.g., \*(L"\-n foo\*(R" => \f(CW$object\fR\->opt_n_with('foo').	Ditto \*(L"\-nfoo\*(R"), Otherwise
(given \-n) if there's an opt_n, we'll call it \f(CW$object\fR\->opt_n($truth)   
(Truth defaults to 1), Otherwise we try calling
\&\f(CW$object\fR\->handle_unknown_option('n')    (and we increment the error count by
the return value of it), If there's no handle_unknown_option, then we just
warn, and then increment    the error counter
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToANSI \- render Pod with \s-1ANSI\s0 color escapes"
.IX Subsection "Pod::Perldoc::ToANSI - render Pod with ANSI color escapes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToChecker \- let Perldoc check Pod for errors"
.IX Subsection "Pod::Perldoc::ToChecker - let Perldoc check Pod for errors"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToMan \- let Perldoc render Pod as man pages"
.IX Subsection "Pod::Perldoc::ToMan - let Perldoc render Pod as man pages"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToNroff \- let Perldoc convert Pod to nroff"
.IX Subsection "Pod::Perldoc::ToNroff - let Perldoc convert Pod to nroff"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToPod \- let Perldoc render Pod as ... Pod!"
.IX Subsection "Pod::Perldoc::ToPod - let Perldoc render Pod as ... Pod!"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToRtf \- let Perldoc render Pod as \s-1RTF\s0"
.IX Subsection "Pod::Perldoc::ToRtf - let Perldoc render Pod as RTF"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToTerm \- render Pod with terminal escapes"
.IX Subsection "Pod::Perldoc::ToTerm - render Pod with terminal escapes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToText \- let Perldoc render Pod as plaintext"
.IX Subsection "Pod::Perldoc::ToText - let Perldoc render Pod as plaintext"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToTk \- let Perldoc use Tk::Pod to render Pod"
.IX Subsection "Pod::Perldoc::ToTk - let Perldoc use Tk::Pod to render Pod"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Perldoc::ToXml \- let Perldoc render Pod as \s-1XML\s0"
.IX Subsection "Pod::Perldoc::ToXml - let Perldoc render Pod as XML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Pod::Simple \- framework for parsing Pod"
.IX Subsection "Pod::Simple - framework for parsing Pod"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1MAIN METHODS\s0" 4
.IX Item "MAIN METHODS"
.PD
\&\f(CW\*(C`$parser = \f(CISomeClass\f(CW\->new();\*(C'\fR, \f(CW\*(C`$parser\->output_fh( *OUT );\*(C'\fR,
\&\f(CW\*(C`$parser\->output_string( \e$somestring );\*(C'\fR, \f(CW\*(C`$parser\->parse_file(
\&\f(CI$some_filename\f(CW );\*(C'\fR, \f(CW\*(C`$parser\->parse_file( *INPUT_FH );\*(C'\fR, \f(CW\*(C`$parser\->parse_string_document( \f(CI$all_content\f(CW );\*(C'\fR, \f(CW\*(C`$parser\->parse_lines( \f(CI...@lines...\f(CW, undef );\*(C'\fR, \f(CW\*(C`$parser\->content_seen\*(C'\fR, \f(CW\*(C`\f(CISomeClass\f(CW\->filter( \f(CI$filename\f(CW );\*(C'\fR, \f(CW\*(C`\f(CISomeClass\f(CW\->filter( \f(CI*INPUT_FH\f(CW );\*(C'\fR, \f(CW\*(C`\f(CISomeClass\f(CW\->filter(
\&\f(CI\e$document_content\f(CW );\*(C'\fR
.IP "\s-1SECONDARY METHODS\s0" 4
.IX Item "SECONDARY METHODS"
\&\f(CW\*(C`$parser\->parse_characters( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->no_whining(
\&\f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->no_errata_section( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->complain_stderr( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->source_filename\*(C'\fR, \f(CW\*(C`$parser\->doc_has_started\*(C'\fR, \f(CW\*(C`$parser\->source_dead\*(C'\fR, \f(CW\*(C`$parser\->strip_verbatim_indent( \f(CISOMEVALUE\f(CW )\*(C'\fR
.IP "\s-1TERTIARY METHODS\s0" 4
.IX Item "TERTIARY METHODS"
\&\f(CW\*(C`$parser\->abandon_output_fh()\*(C'\fR, \f(CW\*(C`$parser\->abandon_output_string()\*(C'\fR, \f(CW\*(C`$parser\->accept_code( @codes )\*(C'\fR, \f(CW\*(C`$parser\->accept_codes(
@codes )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_data(
@directives )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_processed( @directives )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_verbatim( @directives )\*(C'\fR, \f(CW\*(C`$parser\->accept_target( @targets )\*(C'\fR, \f(CW\*(C`$parser\->accept_target_as_text( @targets )\*(C'\fR, \f(CW\*(C`$parser\->accept_targets( @targets )\*(C'\fR, \f(CW\*(C`$parser\->accept_targets_as_text( @targets )\*(C'\fR, \f(CW\*(C`$parser\->any_errata_seen()\*(C'\fR, \f(CW\*(C`$parser\->detected_encoding()\*(C'\fR, \f(CW\*(C`$parser\->encoding()\*(C'\fR, \f(CW\*(C`$parser\->parse_from_file( $source, $to )\*(C'\fR, \f(CW\*(C`$parser\->scream( @error_messages )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_code(
@codes )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_codes( @codes )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_directive( @directives )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_directives( @directives )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_target( @targets )\*(C'\fR, \f(CW\*(C`$parser\->unaccept_targets( @targets )\*(C'\fR, \f(CW\*(C`$parser\->version_report()\*(C'\fR,
\&\f(CW\*(C`$parser\->whine( @error_messages )\*(C'\fR
.IX Xref "abandon_output_fh abandon_output_string accept_code accept_codes accept_directive_as_data accept_directive_as_processed accept_directive_as_verbatim accept_target accept_target_as_text accept_targets accept_targets_as_text any_errata_seen detected_encoding encoding parse_from_file scream unaccept_code unaccept_codes unaccept_directive unaccept_directives unaccept_target unaccept_targets version_report whine"
.IP "\s-1ENCODING\s0" 4
.IX Item "ENCODING"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR, Gabor Szabo \f(CW\*(C`szabgab@gmail.com\*(C'\fR,
Shawn H Corey  \f(CW\*(C`SHCOREY at cpan.org\*(C'\fR
.SS "Pod::Simple::Checker \*(-- check the Pod syntax of a document"
.IX Subsection "Pod::Simple::Checker check the Pod syntax of a document"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::Debug \*(-- put Pod::Simple into trace/debug mode"
.IX Subsection "Pod::Simple::Debug put Pod::Simple into trace/debug mode"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1GUTS\s0" 4
.IX Item "GUTS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::DumpAsText \*(-- dump Pod-parsing events as text"
.IX Subsection "Pod::Simple::DumpAsText dump Pod-parsing events as text"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::DumpAsXML \*(-- turn Pod into \s-1XML\s0"
.IX Subsection "Pod::Simple::DumpAsXML turn Pod into XML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::HTML \- convert Pod to \s-1HTML\s0"
.IX Subsection "Pod::Simple::HTML - convert Pod to HTML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CALLING FROM THE COMMAND LINE\s0" 4
.IX Item "CALLING FROM THE COMMAND LINE"
.IP "\s-1CALLING FROM PERL\s0" 4
.IX Item "CALLING FROM PERL"
.RS 4
.IP "Minimal code" 4
.IX Item "Minimal code"
.IP "More detailed example" 4
.IX Item "More detailed example"
.RE
.RS 4
.RE
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "html_css" 4
.IX Item "html_css"
.IP "html_javascript" 4
.IX Item "html_javascript"
.IP "title_prefix" 4
.IX Item "title_prefix"
.IP "title_postfix" 4
.IX Item "title_postfix"
.IP "html_header_before_title" 4
.IX Item "html_header_before_title"
.IP "html_h_level" 4
.IX Item "html_h_level"
.IP "index" 4
.IX Item "index"
.IP "html_header_after_title" 4
.IX Item "html_header_after_title"
.IP "html_footer" 4
.IX Item "html_footer"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::HTMLBatch \- convert several Pod files to several \s-1HTML\s0 files"
.IX Subsection "Pod::Simple::HTMLBatch - convert several Pod files to several HTML files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1FROM THE COMMAND LINE\s0" 4
.IX Item "FROM THE COMMAND LINE"
.RE
.RS 4
.RE
.IP "\s-1MAIN METHODS\s0" 4
.IX Item "MAIN METHODS"
.PD
\&\f(CW$batchconv\fR = Pod::Simple::HTMLBatch\->new;, \f(CW$batchconv\fR\->batch_convert(
\&\fIindirs\fR, \fIoutdir\fR );, \f(CW$batchconv\fR\->batch_convert( undef    , ...);,
\&\f(CW$batchconv\fR\->batch_convert( q{@INC}, ...);, \f(CW$batchconv\fR\->batch_convert(
\&\e@dirs , ...);, \f(CW$batchconv\fR\->batch_convert( \*(L"somedir\*(R" , ...);,
\&\f(CW$batchconv\fR\->batch_convert( 'somedir:someother:also' , ...);,
\&\f(CW$batchconv\fR\->batch_convert( ... , undef );, \f(CW$batchconv\fR\->batch_convert( ... ,
\&'somedir' );
.RS 4
.IP "\s-1ACCESSOR METHODS\s0" 4
.IX Item "ACCESSOR METHODS"
\&\f(CW$batchconv\fR\->verbose( \fInonnegative_integer\fR );, \f(CW$batchconv\fR\->index(
\&\fItrue-or-false\fR );, \f(CW$batchconv\fR\->contents_file( \fIfilename\fR );,
\&\f(CW$batchconv\fR\->contents_page_start( \fIHTML_string\fR );,
\&\f(CW$batchconv\fR\->contents_page_end( \fIHTML_string\fR );, \f(CW$batchconv\fR\->add_css( \f(CW$url\fR
);, \f(CW$batchconv\fR\->add_javascript( \f(CW$url\fR );, \f(CW$batchconv\fR\->css_flurry(
\&\fItrue-or-false\fR );, \f(CW$batchconv\fR\->javascript_flurry( \fItrue-or-false\fR );,
\&\f(CW$batchconv\fR\->no_contents_links( \fItrue-or-false\fR );,
\&\f(CW$batchconv\fR\->html_render_class( \fIclassname\fR );, \f(CW$batchconv\fR\->search_class(
\&\fIclassname\fR );
.RE
.RS 4
.RE
.IP "\s-1NOTES ON CUSTOMIZATION\s0" 4
.IX Item "NOTES ON CUSTOMIZATION"
.PD 0
.IP "\s-1ASK ME\s0!" 4
.IX Item "ASK ME!"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.ie n .SS "Pod::Simple::LinkSection \*(-- represent ""section"" attributes of L codes"
.el .SS "Pod::Simple::LinkSection \*(-- represent ``section'' attributes of L codes"
.IX Subsection "Pod::Simple::LinkSection represent section attributes of L codes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::Methody \*(-- turn Pod::Simple events into method calls"
.IX Subsection "Pod::Simple::Methody turn Pod::Simple events into method calls"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHOD CALLING\s0" 4
.IX Item "METHOD CALLING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::PullParser \*(-- a pull-parser interface to parsing Pod"
.IX Subsection "Pod::Simple::PullParser a pull-parser interface to parsing Pod"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
my \f(CW$token\fR = \f(CW$parser\fR\->get_token, \f(CW$parser\fR\->unget_token( \f(CW$token\fR ),
\&\f(CW$parser\fR\->unget_token( \f(CW$token1\fR, \f(CW$token2\fR, ... ), \f(CW$parser\fR\->set_source(
\&\f(CW$filename\fR ), \f(CW$parser\fR\->set_source( \f(CW$filehandle_object\fR ),
\&\f(CW$parser\fR\->set_source( \e$document_source ), \f(CW$parser\fR\->set_source(
\&\e@document_lines ), \f(CW$parser\fR\->parse_file(...),
\&\f(CW$parser\fR\->parse_string_document(...), \f(CW$parser\fR\->filter(...),
\&\f(CW$parser\fR\->parse_from_file(...), my \f(CW$title_string\fR = \f(CW$parser\fR\->get_title, my
\&\f(CW$title_string\fR = \f(CW$parser\fR\->get_short_title, \f(CW$author_name\fR	 =
\&\f(CW$parser\fR\->get_author, \f(CW$description_name\fR = \f(CW$parser\fR\->get_description,
\&\f(CW$version_block\fR = \f(CW$parser\fR\->get_version
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::PullParserEndToken \*(-- end-tokens from Pod::Simple::PullParser"
.IX Subsection "Pod::Simple::PullParserEndToken end-tokens from Pod::Simple::PullParser"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$token\fR\->tagname, \f(CW$token\fR\->tagname(\fIsomestring\fR), \f(CW$token\fR\->tag(...),
\&\f(CW$token\fR\->is_tag(\fIsomestring\fR) or \f(CW$token\fR\->is_tagname(\fIsomestring\fR)
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::PullParserStartToken \*(-- start-tokens from Pod::Simple::PullParser"
.IX Subsection "Pod::Simple::PullParserStartToken start-tokens from Pod::Simple::PullParser"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$token\fR\->tagname, \f(CW$token\fR\->tagname(\fIsomestring\fR), \f(CW$token\fR\->tag(...),
\&\f(CW$token\fR\->is_tag(\fIsomestring\fR) or \f(CW$token\fR\->is_tagname(\fIsomestring\fR),
\&\f(CW$token\fR\->attr(\fIattrname\fR), \f(CW$token\fR\->attr(\fIattrname\fR, \fInewvalue\fR),
\&\f(CW$token\fR\->attr_hash
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::PullParserTextToken \*(-- text-tokens from Pod::Simple::PullParser"
.IX Subsection "Pod::Simple::PullParserTextToken text-tokens from Pod::Simple::PullParser"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$token\fR\->text, \f(CW$token\fR\->text(\fIsomestring\fR), \f(CW$token\fR\->\fItext_r()\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::PullParserToken \*(-- tokens from Pod::Simple::PullParser"
.IX Subsection "Pod::Simple::PullParserToken tokens from Pod::Simple::PullParser"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW$token\fR\->type, \f(CW$token\fR\->is_start, \f(CW$token\fR\->is_text, \f(CW$token\fR\->is_end,
\&\f(CW$token\fR\->dump
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::RTF \*(-- format Pod as \s-1RTF\s0"
.IX Subsection "Pod::Simple::RTF format Pod as RTF"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FORMAT CONTROL ATTRIBUTES\s0" 4
.IX Item "FORMAT CONTROL ATTRIBUTES"
.PD
\&\f(CW$parser\fR\->head1_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->head2_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->head3_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->head4_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->codeblock_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->header_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->normal_halfpoint_size( \fIhalfpoint_integer\fR );,
\&\f(CW$parser\fR\->no_proofing_exemptions( \fItrue_or_false\fR );, \f(CW$parser\fR\->doc_lang(
\&\fImicrosoft_decimal_language_code\fR )
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::Search \- find \s-1POD\s0 documents in directory trees"
.IX Subsection "Pod::Simple::Search - find POD documents in directory trees"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTRUCTOR\s0" 4
.IX Item "CONSTRUCTOR"
.IP "\s-1ACCESSORS\s0" 4
.IX Item "ACCESSORS"
.PD
\&\f(CW$search\fR\->inc( \fItrue-or-false\fR );, \f(CW$search\fR\->verbose( \fInonnegative-number\fR
);, \f(CW$search\fR\->limit_glob( \fIsome-glob-string\fR );, \f(CW$search\fR\->callback(
\&\fI\e&some_routine\fR );, \f(CW$search\fR\->laborious( \fItrue-or-false\fR );,
\&\f(CW$search\fR\->shadows( \fItrue-or-false\fR );, \f(CW$search\fR\->limit_re( \fIsome-regxp\fR );,
\&\f(CW$search\fR\->dir_prefix( \fIsome-string-value\fR );, \f(CW$search\fR\->progress(
\&\fIsome-progress-object\fR );, \f(CW$name2path\fR = \f(CW$self\fR\->name2path;, \f(CW$path2name\fR =
\&\f(CW$self\fR\->path2name;
.IP "\s-1MAIN SEARCH METHODS\s0" 4
.IX Item "MAIN SEARCH METHODS"
.RS 4
.PD 0
.ie n .IP """$search\->survey( @directories )""" 4
.el .IP "\f(CW$search\->survey( @directories )\fR" 4
.IX Item "$search->survey( @directories )"
.PD
\&\f(CW\*(C`name2path\*(C'\fR, \f(CW\*(C`path2name\*(C'\fR
.ie n .IP """$search\->simplify_name( $str )""" 4
.el .IP "\f(CW$search\->simplify_name( $str )\fR" 4
.IX Item "$search->simplify_name( $str )"
.PD 0
.ie n .IP """$search\->find( $pod )""" 4
.el .IP "\f(CW$search\->find( $pod )\fR" 4
.IX Item "$search->find( $pod )"
.ie n .IP """$search\->find( $pod, @search_dirs )""" 4
.el .IP "\f(CW$search\->find( $pod, @search_dirs )\fR" 4
.IX Item "$search->find( $pod, @search_dirs )"
.ie n .IP """$self\->contains_pod( $file )""" 4
.el .IP "\f(CW$self\->contains_pod( $file )\fR" 4
.IX Item "$self->contains_pod( $file )"
.RE
.RS 4
.RE
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::SimpleTree \*(-- parse Pod into a simple parse tree"
.IX Subsection "Pod::Simple::SimpleTree parse Pod into a simple parse tree"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "Tree Contents" 4
.IX Item "Tree Contents"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::Subclassing \*(-- write a formatter as a Pod::Simple subclass"
.IX Subsection "Pod::Simple::Subclassing write a formatter as a Pod::Simple subclass"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Events" 4
.IX Item "Events"
.PD
\&\f(CW\*(C`$parser\->_handle_element_start( \f(CIelement_name\f(CW, \f(CIattr_hashref\f(CW )\*(C'\fR,
\&\f(CW\*(C`$parser\->_handle_element_end( \f(CIelement_name\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->_handle_text(	\f(CItext_string\f(CW	)\*(C'\fR, events with an element_name
of Document, events with an element_name of Para, events with an
element_name of B, C, F, or I, events with an element_name of S, events
with an element_name of X, events with an element_name of L, events with an
element_name of E or Z, events with an element_name of Verbatim, events
with an element_name of head1 .. head4, events with an element_name of
encoding, events with an element_name of over-bullet, events with an
element_name of over-number, events with an element_name of over-text,
events with an element_name of over-block, events with an element_name of
over-empty, events with an element_name of item-bullet, events with an
element_name of item-number, events with an element_name of item-text,
events with an element_name of for, events with an element_name of Data
.IP "More Pod::Simple Methods" 4
.IX Item "More Pod::Simple Methods"
\&\f(CW\*(C`$parser\->accept_targets( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->accept_targets_as_text(  \f(CISOMEVALUE\f(CW	)\*(C'\fR, \f(CW\*(C`$parser\->accept_codes( \f(CICodename\f(CW, \f(CICodename\f(CW...  )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_data( \f(CIdirective_name\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_verbatim( \f(CIdirective_name\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->accept_directive_as_processed( \f(CIdirective_name\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->nbsp_for_S( \f(CIBOOLEAN\f(CW );\*(C'\fR, \f(CW\*(C`$parser\->version_report()\*(C'\fR,
\&\f(CW\*(C`$parser\->pod_para_count()\*(C'\fR, \f(CW\*(C`$parser\->line_count()\*(C'\fR, \f(CW\*(C`$parser\->nix_X_codes(  \f(CISOMEVALUE\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->keep_encoding_directive(  \f(CISOMEVALUE\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->merge_text(  \f(CISOMEVALUE\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->code_handler( 
\&\f(CICODE_REF\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->cut_handler(  \f(CICODE_REF\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->pod_handler(  \f(CICODE_REF\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->whiteline_handler( 
\&\f(CICODE_REF\f(CW  )\*(C'\fR, \f(CW\*(C`$parser\->whine( \f(CIlinenumber\f(CW, \f(CIcomplaint string\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->scream( \f(CIlinenumber\f(CW, \f(CIcomplaint string\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->source_dead(1)\*(C'\fR, \f(CW\*(C`$parser\->hide_line_numbers( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->no_whining( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->no_errata_section( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->complain_stderr( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->bare_output(
\&\f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->preserve_whitespace( \f(CISOMEVALUE\f(CW )\*(C'\fR, \f(CW\*(C`$parser\->parse_empty_lists( \f(CISOMEVALUE\f(CW )\*(C'\fR
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD 0
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::Text \*(-- format Pod as plaintext"
.IX Subsection "Pod::Simple::Text format Pod as plaintext"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::TextContent \*(-- get the text content of Pod"
.IX Subsection "Pod::Simple::TextContent get the text content of Pod"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::XHTML \*(-- format Pod as validating \s-1XHTML\s0"
.IX Subsection "Pod::Simple::XHTML format Pod as validating XHTML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Minimal code" 4
.IX Item "Minimal code"
.RE
.RS 4
.RE
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "perldoc_url_prefix" 4
.IX Item "perldoc_url_prefix"
.IP "perldoc_url_postfix" 4
.IX Item "perldoc_url_postfix"
.IP "man_url_prefix" 4
.IX Item "man_url_prefix"
.IP "man_url_postfix" 4
.IX Item "man_url_postfix"
.IP "title_prefix, title_postfix" 4
.IX Item "title_prefix, title_postfix"
.IP "html_css" 4
.IX Item "html_css"
.IP "html_javascript" 4
.IX Item "html_javascript"
.IP "html_doctype" 4
.IX Item "html_doctype"
.IP "html_charset" 4
.IX Item "html_charset"
.IP "html_header_tags" 4
.IX Item "html_header_tags"
.IP "html_h_level" 4
.IX Item "html_h_level"
.IP "default_title" 4
.IX Item "default_title"
.IP "force_title" 4
.IX Item "force_title"
.IP "html_header, html_footer" 4
.IX Item "html_header, html_footer"
.IP "index" 4
.IX Item "index"
.IP "anchor_items" 4
.IX Item "anchor_items"
.IP "backlink" 4
.IX Item "backlink"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "handle_text" 4
.IX Item "handle_text"
.IP "handle_code" 4
.IX Item "handle_code"
.IP "accept_targets_as_html" 4
.IX Item "accept_targets_as_html"
.IP "resolve_pod_page_link" 4
.IX Item "resolve_pod_page_link"
.IP "resolve_man_page_link" 4
.IX Item "resolve_man_page_link"
.IP "idify" 4
.IX Item "idify"
.IP "batch_mode_page_object_init" 4
.IX Item "batch_mode_page_object_init"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1ACKNOWLEDGEMENTS\s0" 4
.IX Item "ACKNOWLEDGEMENTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Simple::XMLOutStream \*(-- turn Pod into \s-1XML\s0"
.IX Subsection "Pod::Simple::XMLOutStream turn Pod into XML"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1ABOUT EXTENDING POD\s0" 4
.IX Item "ABOUT EXTENDING POD"
.IP "\s-1ASK ME\s0!" 4
.IX Item "ASK ME!"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT AND DISCLAIMERS\s0" 4
.IX Item "COPYRIGHT AND DISCLAIMERS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
Allison Randal \f(CW\*(C`allison@perl.org\*(C'\fR, Hans Dieter Pearcey \f(CW\*(C`hdp@cpan.org\*(C'\fR,
David E. Wheeler \f(CW\*(C`dwheeler@cpan.org\*(C'\fR
.SS "Pod::Text \- Convert \s-1POD\s0 data to formatted \s-1ASCII\s0 text"
.IX Subsection "Pod::Text - Convert POD data to formatted ASCII text"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
alt, code, errors, indent, loose, margin, nourls, quotes, sentence, stderr,
utf8, width
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
Bizarre space in item, Item called without tag, Can't open \f(CW%s\fR for reading:
\&\f(CW%s\fR, Invalid errors setting \*(L"%s\*(R", Invalid quote specification \*(L"%s\*(R", \s-1POD\s0
document had syntax errors
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Pod::Text::Color \- Convert \s-1POD\s0 data to formatted color \s-1ASCII\s0 text"
.IX Subsection "Pod::Text::Color - Convert POD data to formatted color ASCII text"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Pod::Text::Overstrike, =for stopwords overstrike"
.IX Subsection "Pod::Text::Overstrike, =for stopwords overstrike"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Pod::Text::Termcap \- Convert \s-1POD\s0 data to \s-1ASCII\s0 text with format escapes"
.IX Subsection "Pod::Text::Termcap - Convert POD data to ASCII text with format escapes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "SDBM_File \- Tied access to sdbm files"
.IX Subsection "SDBM_File - Tied access to sdbm files"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW\*(C`O_RDONLY\*(C'\fR, \f(CW\*(C`O_WRONLY\*(C'\fR, \f(CW\*(C`O_RDWR\*(C'\fR
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.RS 4
.PD 0
.ie n .IP """sdbm store returned \-1, errno 22, key ""..."" at ...""" 4
.el .IP "\f(CWsdbm store returned \-1, errno 22, key ``...'' at ...\fR" 4
.IX Item "sdbm store returned -1, errno 22, key ""..."" at ..."
.RE
.RS 4
.RE
.IP "\s-1BUGS AND WARNINGS\s0" 4
.IX Item "BUGS AND WARNINGS"
.PD
.SS "Safe \- Compile and execute code in restricted compartments"
.IX Subsection "Safe - Compile and execute code in restricted compartments"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
a new namespace, an operator mask
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.PD 0
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "permit (\s-1OP, ...\s0)" 4
.IX Item "permit (OP, ...)"
.IP "permit_only (\s-1OP, ...\s0)" 4
.IX Item "permit_only (OP, ...)"
.IP "deny (\s-1OP, ...\s0)" 4
.IX Item "deny (OP, ...)"
.IP "deny_only (\s-1OP, ...\s0)" 4
.IX Item "deny_only (OP, ...)"
.IP "trap (\s-1OP, ...\s0)" 4
.IX Item "trap (OP, ...)"
.IP "untrap (\s-1OP, ...\s0)" 4
.IX Item "untrap (OP, ...)"
.IP "share (\s-1NAME, ...\s0)" 4
.IX Item "share (NAME, ...)"
.IP "share_from (\s-1PACKAGE, ARRAYREF\s0)" 4
.IX Item "share_from (PACKAGE, ARRAYREF)"
.IP "varglob (\s-1VARNAME\s0)" 4
.IX Item "varglob (VARNAME)"
.IP "reval (\s-1STRING, STRICT\s0)" 4
.IX Item "reval (STRING, STRICT)"
.IP "rdo (\s-1FILENAME\s0)" 4
.IX Item "rdo (FILENAME)"
.IP "root (\s-1NAMESPACE\s0)" 4
.IX Item "root (NAMESPACE)"
.IP "mask (\s-1MASK\s0)" 4
.IX Item "mask (MASK)"
.IP "wrap_code_ref (\s-1CODEREF\s0)" 4
.IX Item "wrap_code_ref (CODEREF)"
.IP "wrap_code_refs_within (...)" 4
.IX Item "wrap_code_refs_within (...)"
.RE
.RS 4
.RE
.IP "\s-1RISKS\s0" 4
.IX Item "RISKS"
.PD
Memory, \s-1CPU,\s0 Snooping, Signals, State Changes
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.SS "Scalar::Util \- A selection of general-utility scalar subroutines"
.IX Subsection "Scalar::Util - A selection of general-utility scalar subroutines"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
blessed \s-1EXPR,\s0 dualvar \s-1NUM, STRING,\s0 isdual \s-1EXPR,\s0 isvstring \s-1EXPR,\s0
looks_like_number \s-1EXPR,\s0 openhandle \s-1FH,\s0 readonly \s-1SCALAR,\s0 refaddr \s-1EXPR,\s0
reftype \s-1EXPR,\s0 set_prototype \s-1CODEREF, PROTOTYPE,\s0 tainted \s-1EXPR,\s0 weaken \s-1REF,\s0
isweak \s-1EXPR\s0
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
Weak references are not implemented in the version of perl, Vstrings are
not implemented in the version of perl, \f(CW\*(C`NAME\*(C'\fR is only available with the
\&\s-1XS\s0 version of Scalar::Util
.IP "\s-1KNOWN BUGS\s0" 4
.IX Item "KNOWN BUGS"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Search::Dict \- look \- search for key in dictionary file"
.IX Subsection "Search::Dict - look - search for key in dictionary file"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "SelectSaver \- save and restore selected file handle"
.IX Subsection "SelectSaver - save and restore selected file handle"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "SelfLoader \- load functions only on demand"
.IX Subsection "SelfLoader - load functions only on demand"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "The _\|_DATA_\|_ token" 4
.IX Item "The __DATA__ token"
.IP "SelfLoader autoloading" 4
.IX Item "SelfLoader autoloading"
.IP "Autoloading and package lexicals" 4
.IX Item "Autoloading and package lexicals"
.IP "SelfLoader and AutoLoader" 4
.IX Item "SelfLoader and AutoLoader"
.IP "_\|_DATA_\|_, _\|_END_\|_, and the \s-1FOOBAR::DATA\s0 filehandle." 4
.IX Item "__DATA__, __END__, and the FOOBAR::DATA filehandle."
.IP "Classes and inherited methods." 4
.IX Item "Classes and inherited methods."
.RE
.RS 4
.RE
.IP "Multiple packages and fully qualified subroutine names" 4
.IX Item "Multiple packages and fully qualified subroutine names"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.ie n .SS "Socket, ""Socket"" \- networking constants and support functions"
.el .SS "Socket, \f(CWSocket\fP \- networking constants and support functions"
.IX Subsection "Socket, Socket - networking constants and support functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CONSTANTS\s0" 4
.IX Item "CONSTANTS"
.IP "\s-1PF_INET, PF_INET6, PF_UNIX, ...\s0" 4
.IX Item "PF_INET, PF_INET6, PF_UNIX, ..."
.IP "\s-1AF_INET, AF_INET6, AF_UNIX, ...\s0" 4
.IX Item "AF_INET, AF_INET6, AF_UNIX, ..."
.IP "\s-1SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, ...\s0" 4
.IX Item "SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, ..."
.IP "\s-1SOCK_NONBLOCK. SOCK_CLOEXEC\s0" 4
.IX Item "SOCK_NONBLOCK. SOCK_CLOEXEC"
.IP "\s-1SOL_SOCKET\s0" 4
.IX Item "SOL_SOCKET"
.IP "\s-1SO_ACCEPTCONN, SO_BROADCAST, SO_ERROR, ...\s0" 4
.IX Item "SO_ACCEPTCONN, SO_BROADCAST, SO_ERROR, ..."
.IP "\s-1IP_OPTIONS, IP_TOS, IP_TTL, ...\s0" 4
.IX Item "IP_OPTIONS, IP_TOS, IP_TTL, ..."
.IP "\s-1MSG_BCAST, MSG_OOB, MSG_TRUNC, ...\s0" 4
.IX Item "MSG_BCAST, MSG_OOB, MSG_TRUNC, ..."
.IP "\s-1SHUT_RD, SHUT_RDWR, SHUT_WR\s0" 4
.IX Item "SHUT_RD, SHUT_RDWR, SHUT_WR"
.IP "\s-1INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE\s0" 4
.IX Item "INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE"
.IP "\s-1IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ...\s0" 4
.IX Item "IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ..."
.IP "\s-1TCP_CORK, TCP_KEEPALIVE, TCP_NODELAY, ...\s0" 4
.IX Item "TCP_CORK, TCP_KEEPALIVE, TCP_NODELAY, ..."
.IP "\s-1IN6ADDR_ANY, IN6ADDR_LOOPBACK\s0" 4
.IX Item "IN6ADDR_ANY, IN6ADDR_LOOPBACK"
.IP "\s-1IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ...\s0" 4
.IX Item "IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ..."
.IP "\s-1STRUCTURE MANIPULATORS\s0" 4
.IX Item "STRUCTURE MANIPULATORS"
.ie n .IP "$family = sockaddr_family $sockaddr" 4
.el .IP "\f(CW$family\fR = sockaddr_family \f(CW$sockaddr\fR" 4
.IX Item "$family = sockaddr_family $sockaddr"
.ie n .IP "$sockaddr = pack_sockaddr_in $port, $ip_address" 4
.el .IP "\f(CW$sockaddr\fR = pack_sockaddr_in \f(CW$port\fR, \f(CW$ip_address\fR" 4
.IX Item "$sockaddr = pack_sockaddr_in $port, $ip_address"
.ie n .IP "($port, $ip_address) = unpack_sockaddr_in $sockaddr" 4
.el .IP "($port, \f(CW$ip_address\fR) = unpack_sockaddr_in \f(CW$sockaddr\fR" 4
.IX Item "($port, $ip_address) = unpack_sockaddr_in $sockaddr"
.ie n .IP "$sockaddr = sockaddr_in $port, $ip_address" 4
.el .IP "\f(CW$sockaddr\fR = sockaddr_in \f(CW$port\fR, \f(CW$ip_address\fR" 4
.IX Item "$sockaddr = sockaddr_in $port, $ip_address"
.ie n .IP "($port, $ip_address) = sockaddr_in $sockaddr" 4
.el .IP "($port, \f(CW$ip_address\fR) = sockaddr_in \f(CW$sockaddr\fR" 4
.IX Item "($port, $ip_address) = sockaddr_in $sockaddr"
.ie n .IP "$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]" 4
.el .IP "\f(CW$sockaddr\fR = pack_sockaddr_in6 \f(CW$port\fR, \f(CW$ip6_address\fR, [$scope_id, [$flowinfo]]" 4
.IX Item "$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
.ie n .IP "($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr" 4
.el .IP "($port, \f(CW$ip6_address\fR, \f(CW$scope_id\fR, \f(CW$flowinfo\fR) = unpack_sockaddr_in6 \f(CW$sockaddr\fR" 4
.IX Item "($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr"
.ie n .IP "$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]" 4
.el .IP "\f(CW$sockaddr\fR = sockaddr_in6 \f(CW$port\fR, \f(CW$ip6_address\fR, [$scope_id, [$flowinfo]]" 4
.IX Item "$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]"
.ie n .IP "($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr" 4
.el .IP "($port, \f(CW$ip6_address\fR, \f(CW$scope_id\fR, \f(CW$flowinfo\fR) = sockaddr_in6 \f(CW$sockaddr\fR" 4
.IX Item "($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr"
.ie n .IP "$sockaddr = pack_sockaddr_un $path" 4
.el .IP "\f(CW$sockaddr\fR = pack_sockaddr_un \f(CW$path\fR" 4
.IX Item "$sockaddr = pack_sockaddr_un $path"
.ie n .IP "($path) = unpack_sockaddr_un $sockaddr" 4
.el .IP "($path) = unpack_sockaddr_un \f(CW$sockaddr\fR" 4
.IX Item "($path) = unpack_sockaddr_un $sockaddr"
.ie n .IP "$sockaddr = sockaddr_un $path" 4
.el .IP "\f(CW$sockaddr\fR = sockaddr_un \f(CW$path\fR" 4
.IX Item "$sockaddr = sockaddr_un $path"
.ie n .IP "($path) = sockaddr_un $sockaddr" 4
.el .IP "($path) = sockaddr_un \f(CW$sockaddr\fR" 4
.IX Item "($path) = sockaddr_un $sockaddr"
.ie n .IP "$ip_mreq = pack_ip_mreq $multiaddr, $interface" 4
.el .IP "\f(CW$ip_mreq\fR = pack_ip_mreq \f(CW$multiaddr\fR, \f(CW$interface\fR" 4
.IX Item "$ip_mreq = pack_ip_mreq $multiaddr, $interface"
.ie n .IP "($multiaddr, $interface) = unpack_ip_mreq $ip_mreq" 4
.el .IP "($multiaddr, \f(CW$interface\fR) = unpack_ip_mreq \f(CW$ip_mreq\fR" 4
.IX Item "($multiaddr, $interface) = unpack_ip_mreq $ip_mreq"
.ie n .IP "$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface" 4
.el .IP "\f(CW$ip_mreq_source\fR = pack_ip_mreq_source \f(CW$multiaddr\fR, \f(CW$source\fR, \f(CW$interface\fR" 4
.IX Item "$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface"
.ie n .IP "($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq" 4
.el .IP "($multiaddr, \f(CW$source\fR, \f(CW$interface\fR) = unpack_ip_mreq_source \f(CW$ip_mreq\fR" 4
.IX Item "($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq"
.ie n .IP "$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex" 4
.el .IP "\f(CW$ipv6_mreq\fR = pack_ipv6_mreq \f(CW$multiaddr6\fR, \f(CW$ifindex\fR" 4
.IX Item "$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex"
.ie n .IP "($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq" 4
.el .IP "($multiaddr6, \f(CW$ifindex\fR) = unpack_ipv6_mreq \f(CW$ipv6_mreq\fR" 4
.IX Item "($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.ie n .IP "$ip_address = inet_aton $string" 4
.el .IP "\f(CW$ip_address\fR = inet_aton \f(CW$string\fR" 4
.IX Item "$ip_address = inet_aton $string"
.ie n .IP "$string = inet_ntoa $ip_address" 4
.el .IP "\f(CW$string\fR = inet_ntoa \f(CW$ip_address\fR" 4
.IX Item "$string = inet_ntoa $ip_address"
.ie n .IP "$address = inet_pton $family, $string" 4
.el .IP "\f(CW$address\fR = inet_pton \f(CW$family\fR, \f(CW$string\fR" 4
.IX Item "$address = inet_pton $family, $string"
.ie n .IP "$string = inet_ntop $family, $address" 4
.el .IP "\f(CW$string\fR = inet_ntop \f(CW$family\fR, \f(CW$address\fR" 4
.IX Item "$string = inet_ntop $family, $address"
.ie n .IP "($err, @result) = getaddrinfo $host, $service, [$hints]" 4
.el .IP "($err, \f(CW@result\fR) = getaddrinfo \f(CW$host\fR, \f(CW$service\fR, [$hints]" 4
.IX Item "($err, @result) = getaddrinfo $host, $service, [$hints]"
.PD
flags => \s-1INT,\s0 family => \s-1INT,\s0 socktype => \s-1INT,\s0 protocol => \s-1INT,\s0 family =>
\&\s-1INT,\s0 socktype => \s-1INT,\s0 protocol => \s-1INT,\s0 addr => \s-1STRING,\s0 canonname => \s-1STRING,
AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST\s0
.ie n .IP "($err, $hostname, $servicename) = getnameinfo $sockaddr, [$flags, [$xflags]]" 4
.el .IP "($err, \f(CW$hostname\fR, \f(CW$servicename\fR) = getnameinfo \f(CW$sockaddr\fR, [$flags, [$xflags]]" 4
.IX Item "($err, $hostname, $servicename) = getnameinfo $sockaddr, [$flags, [$xflags]]"
\&\s-1NI_NUMERICHOST, NI_NUMERICSERV, NI_NAMEREQD, NI_DGRAM,\s0 NIx_NOHOST,
NIx_NOSERV
.IP "\fIgetaddrinfo()\fR / \fIgetnameinfo()\fR \s-1ERROR CONSTANTS\s0" 4
.IX Item "getaddrinfo() / getnameinfo() ERROR CONSTANTS"
\&\s-1EAI_AGAIN, EAI_BADFLAGS, EAI_FAMILY, EAI_NODATA, EAI_NONAME, EAI_SERVICE\s0
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.PD 0
.IP "Lookup for \fIconnect()\fR" 4
.IX Item "Lookup for connect()"
.IP "Making a human-readable string out of an address" 4
.IX Item "Making a human-readable string out of an address"
.IP "Resolving hostnames into \s-1IP\s0 addresses" 4
.IX Item "Resolving hostnames into IP addresses"
.IP "Accessing socket options" 4
.IX Item "Accessing socket options"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Storable \- persistence for Perl data structures"
.IX Subsection "Storable - persistence for Perl data structures"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1MEMORY STORE\s0" 4
.IX Item "MEMORY STORE"
.IP "\s-1ADVISORY LOCKING\s0" 4
.IX Item "ADVISORY LOCKING"
.IP "\s-1SPEED\s0" 4
.IX Item "SPEED"
.IP "\s-1CANONICAL REPRESENTATION\s0" 4
.IX Item "CANONICAL REPRESENTATION"
.IP "\s-1CODE REFERENCES\s0" 4
.IX Item "CODE REFERENCES"
.IP "\s-1FORWARD COMPATIBILITY\s0" 4
.IX Item "FORWARD COMPATIBILITY"
.PD
utf8 data, restricted hashes, files from future versions of Storable
.IP "\s-1ERROR REPORTING\s0" 4
.IX Item "ERROR REPORTING"
.PD 0
.IP "\s-1WIZARDS ONLY\s0" 4
.IX Item "WIZARDS ONLY"
.RS 4
.IP "Hooks" 4
.IX Item "Hooks"
.PD
\&\f(CW\*(C`STORABLE_freeze\*(C'\fR \fIobj\fR, \fIcloning\fR, \f(CW\*(C`STORABLE_thaw\*(C'\fR \fIobj\fR, \fIcloning\fR,
\&\fIserialized\fR, .., \f(CW\*(C`STORABLE_attach\*(C'\fR \fIclass\fR, \fIcloning\fR, \fIserialized\fR
.IP "Predicates" 4
.IX Item "Predicates"
\&\f(CW\*(C`Storable::last_op_in_netorder\*(C'\fR, \f(CW\*(C`Storable::is_storing\*(C'\fR,
\&\f(CW\*(C`Storable::is_retrieving\*(C'\fR
.IP "Recursion" 4
.IX Item "Recursion"
.PD 0
.IP "Deep Cloning" 4
.IX Item "Deep Cloning"
.RE
.RS 4
.RE
.IP "Storable magic" 4
.IX Item "Storable magic"
.PD
\&\f(CW$info\fR = Storable::file_magic( \f(CW$filename\fR ), \f(CW\*(C`version\*(C'\fR, \f(CW\*(C`version_nv\*(C'\fR,
\&\f(CW\*(C`major\*(C'\fR, \f(CW\*(C`minor\*(C'\fR, \f(CW\*(C`hdrsize\*(C'\fR, \f(CW\*(C`netorder\*(C'\fR, \f(CW\*(C`byteorder\*(C'\fR, \f(CW\*(C`intsize\*(C'\fR,
\&\f(CW\*(C`longsize\*(C'\fR, \f(CW\*(C`ptrsize\*(C'\fR, \f(CW\*(C`nvsize\*(C'\fR, \f(CW\*(C`file\*(C'\fR, \f(CW$info\fR = Storable::read_magic(
\&\f(CW$buffer\fR ), \f(CW$info\fR = Storable::read_magic( \f(CW$buffer\fR, \f(CW$must_be_file\fR )
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1SECURITY WARNING\s0" 4
.IX Item "SECURITY WARNING"
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.RS 4
.IP "64 bit data in perl 5.6.0 and 5.6.1" 4
.IX Item "64 bit data in perl 5.6.0 and 5.6.1"
.RE
.RS 4
.RE
.IP "\s-1CREDITS\s0" 4
.IX Item "CREDITS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Symbol \- manipulate Perl symbols and their names"
.IX Subsection "Symbol - manipulate Perl symbols and their names"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD
.SS "Sys::Hostname \- Try every conceivable way to get hostname"
.IX Subsection "Sys::Hostname - Try every conceivable way to get hostname"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Sys::Syslog \- Perl interface to the \s-1UNIX\s0 \fIsyslog\fP\|(3) calls"
.IX Subsection "Sys::Syslog - Perl interface to the UNIX syslog calls"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
\&\fBopenlog($ident, \f(CB$logopt\fB, \f(CB$facility\fB)\fR, \fBsyslog($priority, \f(CB$message\fB)\fR,
\&\fBsyslog($priority, \f(CB$format\fB, \f(CB@args\fB)\fR, \fBNote\fR,
\&\fBsetlogmask($mask_priority)\fR, \fB\f(BIsetlogsock()\fB\fR, \fBNote\fR, \fB\f(BIcloselog()\fB\fR
.IP "\s-1THE RULES OF SYS::SYSLOG\s0" 4
.IX Item "THE RULES OF SYS::SYSLOG"
.PD 0
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1CONSTANTS\s0" 4
.IX Item "CONSTANTS"
.RS 4
.IP "Facilities" 4
.IX Item "Facilities"
.IP "Levels" 4
.IX Item "Levels"
.RE
.RS 4
.RE
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
\&\f(CW\*(C`Invalid argument passed to setlogsock\*(C'\fR, \f(CW\*(C`eventlog passed to setlogsock,
but no Win32 API available\*(C'\fR, \f(CW\*(C`no connection to syslog available\*(C'\fR, \f(CW\*(C`stream
passed to setlogsock, but %s is not writable\*(C'\fR, \f(CW\*(C`stream passed to
setlogsock, but could not find any device\*(C'\fR, \f(CW\*(C`tcp passed to setlogsock, but
tcp service unavailable\*(C'\fR, \f(CW\*(C`syslog: expecting argument %s\*(C'\fR, \f(CW\*(C`syslog:
invalid level/facility: %s\*(C'\fR, \f(CW\*(C`syslog: too many levels given: %s\*(C'\fR,
\&\f(CW\*(C`syslog: too many facilities given: %s\*(C'\fR, \f(CW\*(C`syslog: level must be given\*(C'\fR,
\&\f(CW\*(C`udp passed to setlogsock, but udp service unavailable\*(C'\fR, \f(CW\*(C`unix passed to
setlogsock, but path not available\*(C'\fR
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.RS 4
.IP "Manual Pages" 4
.IX Item "Manual Pages"
.IP "RFCs" 4
.IX Item "RFCs"
.IP "Articles" 4
.IX Item "Articles"
.IP "Event Log" 4
.IX Item "Event Log"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS & ACKNOWLEDGEMENTS\s0" 4
.IX Item "AUTHORS & ACKNOWLEDGEMENTS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.PD
AnnoCPAN: Annotated \s-1CPAN\s0 documentation, \s-1CPAN\s0 Ratings, \s-1RT: CPAN\s0's request
tracker, Search \s-1CPAN,\s0 MetaCPAN, Perl Documentation
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD 0
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "TAP::Base \- Base class that provides common functionality to TAP::Parser and TAP::Harness"
.IX Subsection "TAP::Base - Base class that provides common functionality to TAP::Parser and TAP::Harness"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Formatter::Base \- Base class for harness output delegates"
.IX Subsection "TAP::Formatter::Base - Base class for harness output delegates"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.PD
\&\f(CW\*(C`verbosity\*(C'\fR, \f(CW\*(C`verbose\*(C'\fR, \f(CW\*(C`timer\*(C'\fR, \f(CW\*(C`failures\*(C'\fR, \f(CW\*(C`comments\*(C'\fR, \f(CW\*(C`quiet\*(C'\fR,
\&\f(CW\*(C`really_quiet\*(C'\fR, \f(CW\*(C`silent\*(C'\fR, \f(CW\*(C`errors\*(C'\fR, \f(CW\*(C`directives\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, \f(CW\*(C`color\*(C'\fR,
\&\f(CW\*(C`jobs\*(C'\fR, \f(CW\*(C`show_count\*(C'\fR
.RE
.RS 4
.RE
.SS "TAP::Formatter::Color \- Run Perl test scripts with color"
.IX Subsection "TAP::Formatter::Color - Run Perl test scripts with color"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Formatter::Console \- Harness output delegate for default console output"
.IX Subsection "TAP::Formatter::Console - Harness output delegate for default console output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.RS 4
.ie n .IP """open_test""" 4
.el .IP "\f(CWopen_test\fR" 4
.IX Item "open_test"
.RE
.RS 4
.RE
.PD
.SS "TAP::Formatter::Console::ParallelSession \- Harness output delegate for parallel console output"
.IX Subsection "TAP::Formatter::Console::ParallelSession - Harness output delegate for parallel console output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Formatter::Console::Session \- Harness output delegate for default console output"
.IX Subsection "TAP::Formatter::Console::Session - Harness output delegate for default console output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.ie n .IP """clear_for_close""" 4
.el .IP "\f(CWclear_for_close\fR" 4
.IX Item "clear_for_close"
.ie n .IP """close_test""" 4
.el .IP "\f(CWclose_test\fR" 4
.IX Item "close_test"
.ie n .IP """header""" 4
.el .IP "\f(CWheader\fR" 4
.IX Item "header"
.ie n .IP """result""" 4
.el .IP "\f(CWresult\fR" 4
.IX Item "result"
.PD
.SS "TAP::Formatter::File \- Harness output delegate for file output"
.IX Subsection "TAP::Formatter::File - Harness output delegate for file output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.RS 4
.ie n .IP """open_test""" 4
.el .IP "\f(CWopen_test\fR" 4
.IX Item "open_test"
.RE
.RS 4
.RE
.PD
.SS "TAP::Formatter::File::Session \- Harness output delegate for file output"
.IX Subsection "TAP::Formatter::File::Session - Harness output delegate for file output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "result" 4
.IX Item "result"
.RE
.RS 4
.RE
.IP "close_test" 4
.IX Item "close_test"
.PD
.SS "TAP::Formatter::Session \- Abstract base class for harness output delegate"
.IX Subsection "TAP::Formatter::Session - Abstract base class for harness output delegate"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.PD
\&\f(CW\*(C`formatter\*(C'\fR, \f(CW\*(C`parser\*(C'\fR, \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`show_count\*(C'\fR
.RE
.RS 4
.RE
.SS "TAP::Harness \- Run test scripts with statistics"
.IX Subsection "TAP::Harness - Run test scripts with statistics"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.PD
\&\f(CW\*(C`verbosity\*(C'\fR, \f(CW\*(C`timer\*(C'\fR, \f(CW\*(C`failures\*(C'\fR, \f(CW\*(C`comments\*(C'\fR, \f(CW\*(C`show_count\*(C'\fR,
\&\f(CW\*(C`normalize\*(C'\fR, \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`switches\*(C'\fR, \f(CW\*(C`test_args\*(C'\fR, \f(CW\*(C`color\*(C'\fR, \f(CW\*(C`exec\*(C'\fR,
\&\f(CW\*(C`merge\*(C'\fR, \f(CW\*(C`sources\*(C'\fR, \f(CW\*(C`aggregator_class\*(C'\fR, \f(CW\*(C`version\*(C'\fR, \f(CW\*(C`formatter_class\*(C'\fR,
\&\f(CW\*(C`multiplexer_class\*(C'\fR, \f(CW\*(C`parser_class\*(C'\fR, \f(CW\*(C`scheduler_class\*(C'\fR, \f(CW\*(C`formatter\*(C'\fR,
\&\f(CW\*(C`errors\*(C'\fR, \f(CW\*(C`directives\*(C'\fR, \f(CW\*(C`ignore_exit\*(C'\fR, \f(CW\*(C`jobs\*(C'\fR, \f(CW\*(C`rules\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR,
\&\f(CW\*(C`trap\*(C'\fR
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PP
the source name of a test to run, a reference to a [ source name, display
name ] array
.IP "\s-1CONFIGURING\s0" 4
.IX Item "CONFIGURING"
.RS 4
.PD 0
.IP "Plugins" 4
.IX Item "Plugins"
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
.ie n .IP """prove""" 4
.el .IP "\f(CWprove\fR" 4
.IX Item "prove"
.RE
.RS 4
.RE
.IP "\s-1WRITING PLUGINS\s0" 4
.IX Item "WRITING PLUGINS"
.PD
Customize how \s-1TAP\s0 gets into the parser, Customize how \s-1TAP\s0 results are
output from the parser
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.PD 0
.IP "Methods" 4
.IX Item "Methods"
.PD
\&\*(L"new\*(R", \*(L"runtests\*(R", \*(L"summary\*(R"
.RE
.RS 4
.RE
.IP "\s-1REPLACING\s0" 4
.IX Item "REPLACING"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.ie n .SS "TAP::Object \- Base class that provides common functionality to all ""TAP::*"" modules"
.el .SS "TAP::Object \- Base class that provides common functionality to all \f(CWTAP::*\fP modules"
.IX Subsection "TAP::Object - Base class that provides common functionality to all TAP::* modules"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PD
.SS "TAP::Parser \- Parse \s-1TAP\s0 output"
.IX Subsection "TAP::Parser - Parse TAP output"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.PD
\&\f(CW\*(C`source\*(C'\fR, \f(CW\*(C`tap\*(C'\fR, \f(CW\*(C`exec\*(C'\fR, \f(CW\*(C`sources\*(C'\fR, \f(CW\*(C`callback\*(C'\fR, \f(CW\*(C`switches\*(C'\fR,
\&\f(CW\*(C`test_args\*(C'\fR, \f(CW\*(C`spool\*(C'\fR, \f(CW\*(C`merge\*(C'\fR, \f(CW\*(C`grammar_class\*(C'\fR,
\&\f(CW\*(C`result_factory_class\*(C'\fR, \f(CW\*(C`iterator_factory_class\*(C'\fR
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PD 0
.IP "\s-1INDIVIDUAL RESULTS\s0" 4
.IX Item "INDIVIDUAL RESULTS"
.RS 4
.IP "Result types" 4
.IX Item "Result types"
.PD
Version, Plan, Pragma, Test, Comment, Bailout, Unknown
.IP "Common type methods" 4
.IX Item "Common type methods"
.PD 0
.ie n .IP """plan"" methods" 4
.el .IP "\f(CWplan\fR methods" 4
.IX Item "plan methods"
.ie n .IP """pragma"" methods" 4
.el .IP "\f(CWpragma\fR methods" 4
.IX Item "pragma methods"
.ie n .IP """bailout"" methods" 4
.el .IP "\f(CWbailout\fR methods" 4
.IX Item "bailout methods"
.ie n .IP """unknown"" methods" 4
.el .IP "\f(CWunknown\fR methods" 4
.IX Item "unknown methods"
.ie n .IP """test"" methods" 4
.el .IP "\f(CWtest\fR methods" 4
.IX Item "test methods"
.RE
.RS 4
.RE
.IP "\s-1TOTAL RESULTS\s0" 4
.IX Item "TOTAL RESULTS"
.RS 4
.IP "Individual Results" 4
.IX Item "Individual Results"
.RE
.RS 4
.RE
.IP "Pragmas" 4
.IX Item "Pragmas"
.IP "Summary Results" 4
.IX Item "Summary Results"
.ie n .IP """ignore_exit""" 4
.el .IP "\f(CWignore_exit\fR" 4
.IX Item "ignore_exit"
.PD
.PP
Misplaced plan, No plan, More than one plan, Test numbers out of sequence
.IP "\s-1CALLBACKS\s0" 4
.IX Item "CALLBACKS"
\&\f(CW\*(C`test\*(C'\fR, \f(CW\*(C`version\*(C'\fR, \f(CW\*(C`plan\*(C'\fR, \f(CW\*(C`comment\*(C'\fR, \f(CW\*(C`bailout\*(C'\fR, \f(CW\*(C`yaml\*(C'\fR, \f(CW\*(C`unknown\*(C'\fR,
\&\f(CW\*(C`ELSE\*(C'\fR, \f(CW\*(C`ALL\*(C'\fR, \f(CW\*(C`EOF\*(C'\fR
.IP "\s-1TAP GRAMMAR\s0" 4
.IX Item "TAP GRAMMAR"
.PD 0
.IP "\s-1BACKWARDS COMPATIBILITY\s0" 4
.IX Item "BACKWARDS COMPATIBILITY"
.RS 4
.IP "Differences" 4
.IX Item "Differences"
.PD
\&\s-1TODO\s0 plans, 'Missing' tests
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.PD 0
.IP "Parser Components" 4
.IX Item "Parser Components"
.PD
option 1, option 2
.RE
.RS 4
.RE
.IP "\s-1ACKNOWLEDGMENTS\s0" 4
.IX Item "ACKNOWLEDGMENTS"
Michael Schwern, Andy Lester, chromatic, \s-1GEOFFR,\s0 Shlomi Fish, Torsten
Schoenfeld, Jerry Gay, Aristotle, Adam Kennedy, Yves Orton, Adrian Howard,
Sean & Lil, Andreas J. Koenig, Florian Ragwitz, Corion, Mark Stosberg, Matt
Kraai, David Wheeler, Alex Vandiver, Cosimo Streppone, Ville Skytta\*:
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SS "TAP::Parser::Aggregator \- Aggregate TAP::Parser results"
.IX Subsection "TAP::Parser::Aggregator - Aggregate TAP::Parser results"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "Summary methods" 4
.IX Item "Summary methods"
.PD
failed, parse_errors, passed, planned, skipped, todo, todo_passed, wait,
exit
.PP
Failed tests, Parse errors, Bad exit or wait status
.IP "See Also" 4
.IX Item "See Also"
.SS "TAP::Parser::Grammar \- A grammar for the Test Anything Protocol."
.IX Subsection "TAP::Parser::Grammar - A grammar for the Test Anything Protocol."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "\s-1TAP GRAMMAR\s0" 4
.IX Item "TAP GRAMMAR"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Iterator \- Base class for \s-1TAP\s0 source iterators"
.IX Subsection "TAP::Parser::Iterator - Base class for TAP source iterators"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Iterator::Array \- Iterator for array-based \s-1TAP\s0 sources"
.IX Subsection "TAP::Parser::Iterator::Array - Iterator for array-based TAP sources"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.RE
.RS 4
.RE
.IP "\s-1ATTRIBUTION\s0" 4
.IX Item "ATTRIBUTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Iterator::Process \- Iterator for process-based \s-1TAP\s0 sources"
.IX Subsection "TAP::Parser::Iterator::Process - Iterator for process-based TAP sources"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.RE
.RS 4
.RE
.IP "\s-1ATTRIBUTION\s0" 4
.IX Item "ATTRIBUTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Iterator::Stream \- Iterator for filehandle-based \s-1TAP\s0 sources"
.IX Subsection "TAP::Parser::Iterator::Stream - Iterator for filehandle-based TAP sources"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "\s-1ATTRIBUTION\s0" 4
.IX Item "ATTRIBUTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::IteratorFactory \- Figures out which SourceHandler objects to use for a given Source"
.IX Subsection "TAP::Parser::IteratorFactory - Figures out which SourceHandler objects to use for a given Source"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1ATTRIBUTION\s0" 4
.IX Item "ATTRIBUTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Multiplexer \- Multiplex multiple TAP::Parsers"
.IX Subsection "TAP::Parser::Multiplexer - Multiplex multiple TAP::Parsers"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "See Also" 4
.IX Item "See Also"
.PD
.SS "TAP::Parser::Result \- Base class for TAP::Parser output objects"
.IX Subsection "TAP::Parser::Result - Base class for TAP::Parser output objects"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.RS 4
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RE
.RS 4
.RE
.IP "Boolean methods" 4
.IX Item "Boolean methods"
.PD
\&\f(CW\*(C`is_plan\*(C'\fR, \f(CW\*(C`is_pragma\*(C'\fR, \f(CW\*(C`is_test\*(C'\fR, \f(CW\*(C`is_comment\*(C'\fR, \f(CW\*(C`is_bailout\*(C'\fR,
\&\f(CW\*(C`is_version\*(C'\fR, \f(CW\*(C`is_unknown\*(C'\fR, \f(CW\*(C`is_yaml\*(C'\fR
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.PD 0
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Result::Bailout \- Bailout result token."
.IX Subsection "TAP::Parser::Result::Bailout - Bailout result token."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::Result::Comment \- Comment result token."
.IX Subsection "TAP::Parser::Result::Comment - Comment result token."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::Result::Plan \- Plan result token."
.IX Subsection "TAP::Parser::Result::Plan - Plan result token."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR, \f(CW\*(C`raw\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::Result::Pragma \- \s-1TAP\s0 pragma token."
.IX Subsection "TAP::Parser::Result::Pragma - TAP pragma token."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR, \f(CW\*(C`raw\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::Result::Test \- Test result token."
.IX Subsection "TAP::Parser::Result::Test - Test result token."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.RS 4
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Parser::Result::Unknown \- Unknown result token."
.IX Subsection "TAP::Parser::Result::Unknown - Unknown result token."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR, \f(CW\*(C`raw\*(C'\fR
.SS "TAP::Parser::Result::Version \- \s-1TAP\s0 syntax version token."
.IX Subsection "TAP::Parser::Result::Version - TAP syntax version token."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR, \f(CW\*(C`raw\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::Result::YAML \- \s-1YAML\s0 result token."
.IX Subsection "TAP::Parser::Result::YAML - YAML result token."
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDDEN METHODS\s0" 4
.IX Item "OVERRIDDEN METHODS"
.PD
\&\f(CW\*(C`as_string\*(C'\fR, \f(CW\*(C`raw\*(C'\fR
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.SS "TAP::Parser::ResultFactory \- Factory for creating TAP::Parser output objects"
.IX Subsection "TAP::Parser::ResultFactory - Factory for creating TAP::Parser output objects"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Scheduler \- Schedule tests during parallel testing"
.IX Subsection "TAP::Parser::Scheduler - Schedule tests during parallel testing"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Parser::Scheduler::Job \- A single testing job."
.IX Subsection "TAP::Parser::Scheduler::Job - A single testing job."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Parser::Scheduler::Spinner \- A no-op job."
.IX Subsection "TAP::Parser::Scheduler::Spinner - A no-op job."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.PD
.SS "TAP::Parser::Source \- a \s-1TAP\s0 source & meta data about it"
.IX Subsection "TAP::Parser::Source - a TAP source & meta data about it"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler \- Base class for different \s-1TAP\s0 source handlers"
.IX Subsection "TAP::Parser::SourceHandler - Base class for different TAP source handlers"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler::Executable \- Stream output from an executable \s-1TAP\s0 source"
.IX Subsection "TAP::Parser::SourceHandler::Executable - Stream output from an executable TAP source"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler::File \- Stream \s-1TAP\s0 from a text file."
.IX Subsection "TAP::Parser::SourceHandler::File - Stream TAP from a text file."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1CONFIGURATION\s0" 4
.IX Item "CONFIGURATION"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler::Handle \- Stream \s-1TAP\s0 from an IO::Handle or a \s-1GLOB.\s0"
.IX Subsection "TAP::Parser::SourceHandler::Handle - Stream TAP from an IO::Handle or a GLOB."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler::Perl \- Stream \s-1TAP\s0 from a Perl executable"
.IX Subsection "TAP::Parser::SourceHandler::Perl - Stream TAP from a Perl executable"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.RS 4
.IP "Example" 4
.IX Item "Example"
.RE
.RS 4
.RE
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::SourceHandler::RawTAP \- Stream output from raw \s-1TAP\s0 in a scalar/array ref."
.IX Subsection "TAP::Parser::SourceHandler::RawTAP - Stream output from raw TAP in a scalar/array ref."
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.RE
.RS 4
.RE
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "TAP::Parser::Utils \- Internal TAP::Parser utilities"
.IX Subsection "TAP::Parser::Utils - Internal TAP::Parser utilities"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1INTERFACE\s0" 4
.IX Item "INTERFACE"
.RE
.RS 4
.RE
.PD
.SS "TAP::Parser::YAMLish::Reader \- Read YAMLish data from iterator"
.IX Subsection "TAP::Parser::YAMLish::Reader - Read YAMLish data from iterator"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "TAP::Parser::YAMLish::Writer \- Write YAMLish data"
.IX Subsection "TAP::Parser::YAMLish::Writer - Write YAMLish data"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.IP "Class Methods" 4
.IX Item "Class Methods"
.IP "Instance Methods" 4
.IX Item "Instance Methods"
.PD
a reference to a scalar to append \s-1YAML\s0 to, the handle of an open file, a
reference to an array into which \s-1YAML\s0 will be pushed, a code reference
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Term::ANSIColor \- Color screen output using \s-1ANSI\s0 escape sequences"
.IX Subsection "Term::ANSIColor - Color screen output using ANSI escape sequences"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Supported Colors" 4
.IX Item "Supported Colors"
.IP "Function Interface" 4
.IX Item "Function Interface"
.PD
color(ATTR[, \s-1ATTR ...\s0]), colored(\s-1STRING,\s0 ATTR[, \s-1ATTR ...\s0]),
colored(\s-1ATTR\-REF,\s0 STRING[, \s-1STRING...\s0]), uncolor(\s-1ESCAPE\s0),
colorstrip(STRING[, \s-1STRING ...\s0]), colorvalid(ATTR[, \s-1ATTR ...\s0]),
coloralias(ALIAS[, \s-1ATTR\s0])
.IP "Constant Interface" 4
.IX Item "Constant Interface"
.PD 0
.IP "The Color Stack" 4
.IX Item "The Color Stack"
.RE
.RS 4
.RE
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
Bad color mapping \f(CW%s\fR, Bad escape sequence \f(CW%s\fR, Bareword \*(L"%s\*(R" not allowed
while \*(L"strict subs\*(R" in use, Cannot alias standard color \f(CW%s\fR, Cannot alias
standard color \f(CW%s\fR in \f(CW%s\fR, Invalid alias name \f(CW%s\fR, Invalid alias name \f(CW%s\fR in
\&\f(CW%s\fR, Invalid attribute name \f(CW%s\fR, Invalid attribute name \f(CW%s\fR in \f(CW%s\fR, Name \*(L"%s\*(R"
used only once: possible typo, No comma allowed after filehandle, No name
for escape sequence \f(CW%s\fR
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
\&\s-1ANSI_COLORS_ALIASES, ANSI_COLORS_DISABLED\s0
.IP "\s-1COMPATIBILITY\s0" 4
.IX Item "COMPATIBILITY"
.PD 0
.IP "\s-1RESTRICTIONS\s0" 4
.IX Item "RESTRICTIONS"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Term::Cap \- Perl termcap interface"
.IX Subsection "Term::Cap - Perl termcap interface"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RE
.RS 4
.RE
.PD
.PP
\&\fBTgetent\fR, \s-1OSPEED, TERM\s0
.PP
\&\fBTpad\fR, \fB\f(CB$string\fB\fR, \fB\f(CB$cnt\fB\fR, \fB\f(CB$FH\fB\fR
.PP
\&\fBTputs\fR, \fB\f(CB$cap\fB\fR, \fB\f(CB$cnt\fB\fR, \fB\f(CB$FH\fB\fR
.PP
\&\fBTgoto\fR, \fB\f(CB$cap\fB\fR, \fB\f(CB$col\fB\fR, \fB\f(CB$row\fB\fR, \fB\f(CB$FH\fB\fR
.PP
\&\fBTrequire\fR
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Term::Complete \- Perl word completion module"
.IX Subsection "Term::Complete - Perl word completion module"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
<tab>, ^D, ^U, <del>, <bs>
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD 0
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.ie n .SS "Term::ReadLine \- Perl interface to various ""readline"" packages. If no real package is found, substitutes stubs instead of basic functions."
.el .SS "Term::ReadLine \- Perl interface to various \f(CWreadline\fP packages. If no real package is found, substitutes stubs instead of basic functions."
.IX Subsection "Term::ReadLine - Perl interface to various readline packages. If no real package is found, substitutes stubs instead of basic functions."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Minimal set of supported functions" 4
.IX Item "Minimal set of supported functions"
.PD
\&\f(CW\*(C`ReadLine\*(C'\fR, \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, \f(CW\*(C`addhistory\*(C'\fR, \f(CW\*(C`IN\*(C'\fR, \f(CW\*(C`OUT\*(C'\fR, \f(CW\*(C`MinLine\*(C'\fR,
\&\f(CW\*(C`findConsole\*(C'\fR, Attribs, \f(CW\*(C`Features\*(C'\fR
.IP "Additional supported functions" 4
.IX Item "Additional supported functions"
\&\f(CW\*(C`tkRunning\*(C'\fR, \f(CW\*(C`event_loop\*(C'\fR, \f(CW\*(C`ornaments\*(C'\fR, \f(CW\*(C`newTTY\*(C'\fR
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.PD 0
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.PD
.SS "Term::UI \- Term::ReadLine \s-1UI\s0 made easy"
.IX Subsection "Term::UI - Term::ReadLine UI made easy"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1HOW IT WORKS\s0" 4
.IX Item "HOW IT WORKS"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.RS 4
.ie n .IP "$reply = $term\->get_reply( prompt => 'question?', [choices => \e@list, default => $list[0], multi => \s-1BOOL,\s0 print_me => ""extra text to print & record"", allow => $ref] );" 4
.el .IP "\f(CW$reply\fR = \f(CW$term\fR\->get_reply( prompt => 'question?', [choices => \e@list, default => \f(CW$list\fR[0], multi => \s-1BOOL,\s0 print_me => ``extra text to print & record'', allow => \f(CW$ref\fR] );" 4
.IX Item "$reply = $term->get_reply( prompt => 'question?', [choices => @list, default => $list[0], multi => BOOL, print_me => extra text to print & record, allow => $ref] );"
.RE
.RS 4
.RE
.ie n .IP "$bool = $term\->ask_yn( prompt => ""your question"", [default => (y|1,n|0), print_me => ""extra text to print & record""] )" 4
.el .IP "\f(CW$bool\fR = \f(CW$term\fR\->ask_yn( prompt => ``your question'', [default => (y|1,n|0), print_me => ``extra text to print & record''] )" 4
.IX Item "$bool = $term->ask_yn( prompt => your question, [default => (y|1,n|0), print_me => extra text to print & record] )"
.ie n .IP "($opts, $munged) = $term\->parse_options( \s-1STRING \s0);" 4
.el .IP "($opts, \f(CW$munged\fR) = \f(CW$term\fR\->parse_options( \s-1STRING \s0);" 4
.IX Item "($opts, $munged) = $term->parse_options( STRING );"
.ie n .IP "$str = $term\->history_as_string" 4
.el .IP "\f(CW$str\fR = \f(CW$term\fR\->history_as_string" 4
.IX Item "$str = $term->history_as_string"
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.RS 4
.ie n .IP "$Term::UI::VERBOSE" 4
.el .IP "\f(CW$Term::UI::VERBOSE\fR" 4
.IX Item "$Term::UI::VERBOSE"
.ie n .IP "$Term::UI::AUTOREPLY" 4
.el .IP "\f(CW$Term::UI::AUTOREPLY\fR" 4
.IX Item "$Term::UI::AUTOREPLY"
.ie n .IP "$Term::UI::INVALID" 4
.el .IP "\f(CW$Term::UI::INVALID\fR" 4
.IX Item "$Term::UI::INVALID"
.ie n .IP "$Term::UI::History::HISTORY_FH" 4
.el .IP "\f(CW$Term::UI::History::HISTORY_FH\fR" 4
.IX Item "$Term::UI::History::HISTORY_FH"
.RE
.RS 4
.RE
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.RS 4
.IP "Basic get_reply sample" 4
.IX Item "Basic get_reply sample"
.IP "get_reply with choices" 4
.IX Item "get_reply with choices"
.IP "get_reply with choices and default" 4
.IX Item "get_reply with choices and default"
.IP "get_reply using print_me & multi" 4
.IX Item "get_reply using print_me & multi"
.IP "get_reply & allow" 4
.IX Item "get_reply & allow"
.IP "an elaborate ask_yn sample" 4
.IX Item "an elaborate ask_yn sample"
.RE
.RS 4
.RE
.IP "See Also" 4
.IX Item "See Also"
.IP "\s-1BUG REPORTS\s0" 4
.IX Item "BUG REPORTS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Term::UI::History \- history function"
.IX Subsection "Term::UI::History - history function"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "history(""message string"" [,VERBOSE])" 4
.el .IP "history(``message string'' [,VERBOSE])" 4
.IX Item "history(message string [,VERBOSE])"
.RE
.RS 4
.RE
.IP "\s-1GLOBAL VARIABLES\s0" 4
.IX Item "GLOBAL VARIABLES"
.PD
\&\f(CW$HISTORY_FH\fR
.IP "See Also" 4
.IX Item "See Also"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Test \- provides a simple framework for writing test scripts"
.IX Subsection "Test - provides a simple framework for writing test scripts"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1QUICK START GUIDE\s0" 4
.IX Item "QUICK START GUIDE"
.RS 4
.IP "Functions" 4
.IX Item "Functions"
.PD
\&\f(CW\*(C`plan(...)\*(C'\fR, \f(CW\*(C`tests => \f(CInumber\f(CW\*(C'\fR, \f(CW\*(C`todo => [\f(CI1,5,14\f(CW]\*(C'\fR,
\&\f(CW\*(C`onfail => sub { ... }\*(C'\fR, \f(CW\*(C`onfail => \e&some_sub\*(C'\fR
.RE
.RS 4
.RE
.PP
\&\fB_to_value\fR
.PP
\&\f(CW\*(C`ok(...)\*(C'\fR
.PP
\&\f(CW\*(C`skip(\f(CIskip_if_true\f(CW, \f(CIargs...\f(CW)\*(C'\fR
.IP "\s-1TEST TYPES\s0" 4
.IX Item "TEST TYPES"
\&\s-1NORMAL TESTS, SKIPPED TESTS, TODO TESTS\s0
.IP "\s-1ONFAIL\s0" 4
.IX Item "ONFAIL"
.PD 0
.IP "\s-1BUGS\s0 and \s-1CAVEATS\s0" 4
.IX Item "BUGS and CAVEATS"
.IP "\s-1ENVIRONMENT\s0" 4
.IX Item "ENVIRONMENT"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Test::Builder \- Backend for building test libraries"
.IX Subsection "Test::Builder - Backend for building test libraries"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Construction" 4
.IX Item "Construction"
.PD
\&\fBnew\fR
.RE
.RS 4
.RE
.PP
\&\fBcreate\fR
.PP
\&\fBchild\fR
.PP
\&\fBsubtest\fR
.PP
\&\fB_plan_handled\fR, Explicitly setting the number of tests, Setting
\&'no_plan', Set 'skip_all'
.PP
\&\fBfinalize\fR
.PP
\&\fBparent\fR
.PP
\&\fBname\fR
.PP
\&\fBreset\fR
.IP "Setting up tests" 4
.IX Item "Setting up tests"
\&\fBplan\fR
.PP
\&\fBexpected_tests\fR
.PP
\&\fBno_plan\fR
.PP
\&\fB_output_plan\fR
.PP
\&\fBdone_testing\fR
.PP
\&\fBhas_plan\fR
.PP
\&\fBskip_all\fR
.PP
\&\fBexported_to\fR
.IP "Running tests" 4
.IX Item "Running tests"
\&\fBok\fR
.PP
\&\fBis_eq\fR, \fBis_num\fR
.PP
\&\fBisnt_eq\fR, \fBisnt_num\fR
.PP
\&\fBlike\fR, \fBunlike\fR
.PP
\&\fBcmp_ok\fR
.IP "Other Testing Methods" 4
.IX Item "Other Testing Methods"
\&\fB\s-1BAIL_OUT\s0\fR
.PP
\&\fBskip\fR
.PP
\&\fBtodo_skip\fR
.PP
\&\fBskip_rest\fR
.IP "Test building utility methods" 4
.IX Item "Test building utility methods"
\&\fBmaybe_regex\fR
.PP
\&\fB_try\fR
.PP
\&\fBis_fh\fR
.IP "Test style" 4
.IX Item "Test style"
\&\fBlevel\fR
.PP
\&\fBuse_numbers\fR
.PP
\&\fBno_diag\fR, \fBno_ending\fR, \fBno_header\fR
.IP "Output" 4
.IX Item "Output"
\&\fBdiag\fR
.PP
\&\fBnote\fR
.PP
\&\fBexplain\fR
.PP
\&\fB_print\fR
.PP
\&\fBoutput\fR, \fBfailure_output\fR, \fBtodo_output\fR
.PP
reset_outputs
.PP
carp, croak
.IP "Test Status and Info" 4
.IX Item "Test Status and Info"
\&\fBcurrent_test\fR
.PP
\&\fBis_passing\fR
.PP
\&\fBsummary\fR
.PP
\&\fBdetails\fR
.PP
\&\fBtodo\fR
.PP
\&\fBfind_TODO\fR
.PP
\&\fBin_todo\fR
.PP
\&\fBtodo_start\fR
.PP
\&\f(CW\*(C`todo_end\*(C'\fR
.PP
\&\fBcaller\fR
.PP
\&\fB_sanity_check\fR
.PP
\&\fB_whoa\fR
.PP
\&\fB_my_exit\fR
.IP "\s-1EXIT CODES\s0" 4
.IX Item "EXIT CODES"
.PD 0
.IP "\s-1THREADS\s0" 4
.IX Item "THREADS"
.IP "\s-1MEMORY\s0" 4
.IX Item "MEMORY"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Test::Builder::Module \- Base class for test modules"
.IX Subsection "Test::Builder::Module - Base class for test modules"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Importing" 4
.IX Item "Importing"
.RE
.RS 4
.RE
.IP "Builder" 4
.IX Item "Builder"
.PD
.SS "Test::Builder::Tester \- test testsuites that have been built with Test::Builder"
.IX Subsection "Test::Builder::Tester - test testsuites that have been built with Test::Builder"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Functions" 4
.IX Item "Functions"
.PD
test_out, test_err
.PP
test_fail
.PP
test_diag
.PP
test_test, title (synonym 'name', 'label'), skip_out, skip_err
.PP
line_num
.PP
color
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Test::Builder::Tester::Color \- turn on colour in Test::Builder::Tester"
.IX Subsection "Test::Builder::Tester::Color - turn on colour in Test::Builder::Tester"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Test::Harness \- Run Perl standard test scripts with statistics"
.IX Subsection "Test::Harness - Run Perl standard test scripts with statistics"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP "runtests( @test_files )" 4
.el .IP "runtests( \f(CW@test_files\fR )" 4
.IX Item "runtests( @test_files )"
.RE
.RS 4
.RE
.IP "execute_tests( tests => \e@test_files, out => \e*FH )" 4
.IX Item "execute_tests( tests => @test_files, out => *FH )"
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.IP "\s-1ENVIRONMENT VARIABLES THAT TAP::HARNESS::COMPATIBLE SETS\s0" 4
.IX Item "ENVIRONMENT VARIABLES THAT TAP::HARNESS::COMPATIBLE SETS"
.PD
\&\f(CW\*(C`HARNESS_ACTIVE\*(C'\fR, \f(CW\*(C`HARNESS_VERSION\*(C'\fR
.IP "\s-1ENVIRONMENT VARIABLES THAT AFFECT TEST::HARNESS\s0" 4
.IX Item "ENVIRONMENT VARIABLES THAT AFFECT TEST::HARNESS"
\&\f(CW\*(C`HARNESS_TIMER\*(C'\fR, \f(CW\*(C`HARNESS_VERBOSE\*(C'\fR, \f(CW\*(C`HARNESS_OPTIONS\*(C'\fR, \f(CW\*(C`j<n>\*(C'\fR, \f(CW\*(C`c\*(C'\fR, \f(CW\*(C`a<file.tgz>\*(C'\fR, \f(CW\*(C`fPackage\-With\-Dashes\*(C'\fR, \f(CW\*(C`HARNESS_SUBCLASS\*(C'\fR
.IP "Taint Mode" 4
.IX Item "Taint Mode"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1LICENCE AND COPYRIGHT\s0" 4
.IX Item "LICENCE AND COPYRIGHT"
.PD
.SS "Test::More \- yet another framework for writing test scripts"
.IX Subsection "Test::More - yet another framework for writing test scripts"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "I love it when a plan comes together" 4
.IX Item "I love it when a plan comes together"
.RE
.RS 4
.RE
.PD
.PP
\&\fBdone_testing\fR
.IP "Test names" 4
.IX Item "Test names"
.PD 0
.IP "I'm ok, you're not ok." 4
.IX Item "I'm ok, you're not ok."
.PD
\&\fBok\fR
.PP
\&\fBis\fR, \fBisnt\fR
.PP
\&\fBlike\fR
.PP
\&\fBunlike\fR
.PP
\&\fBcmp_ok\fR
.PP
\&\fBcan_ok\fR
.PP
\&\fBisa_ok\fR
.PP
\&\fBnew_ok\fR
.PP
\&\fBsubtest\fR
.PP
\&\fBpass\fR, \fBfail\fR
.IP "Module tests" 4
.IX Item "Module tests"
\&\fBuse_ok\fR
.PP
\&\fBrequire_ok\fR
.IP "Complex data structures" 4
.IX Item "Complex data structures"
\&\fBis_deeply\fR
.IP "Diagnostics" 4
.IX Item "Diagnostics"
\&\fBdiag\fR, \fBnote\fR
.PP
\&\fBexplain\fR
.IP "Conditional tests" 4
.IX Item "Conditional tests"
\&\fB\s-1SKIP: BLOCK\s0\fR
.PP
\&\fB\s-1TODO: BLOCK\s0\fR, \fBtodo_skip\fR
.PP
When do I use \s-1SKIP\s0 vs. \s-1TODO\s0?
.IP "Test control" 4
.IX Item "Test control"
\&\fB\s-1BAIL_OUT\s0\fR
.IP "Discouraged comparison functions" 4
.IX Item "Discouraged comparison functions"
\&\fBeq_array\fR
.PP
\&\fBeq_hash\fR
.PP
\&\fBeq_set\fR
.IP "Extending and Embedding Test::More" 4
.IX Item "Extending and Embedding Test::More"
\&\fBbuilder\fR
.IP "\s-1EXIT CODES\s0" 4
.IX Item "EXIT CODES"
.PD 0
.IP "\s-1CAVEATS\s0 and \s-1NOTES\s0" 4
.IX Item "CAVEATS and NOTES"
.PD
Backwards compatibility, utf8 / \*(L"Wide character in print\*(R", Overloaded
objects, Threads
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SOURCE\s0" 4
.IX Item "SOURCE"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Test::Simple \- Basic utilities for writing tests."
.IX Subsection "Test::Simple - Basic utilities for writing tests."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\fBok\fR
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
Test::More
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD 0
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Test::Tutorial \- A tutorial about writing really basic tests"
.IX Subsection "Test::Tutorial - A tutorial about writing really basic tests"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.PD 0
.IP "Nuts and bolts of testing." 4
.IX Item "Nuts and bolts of testing."
.IP "Where to start?" 4
.IX Item "Where to start?"
.IP "Names" 4
.IX Item "Names"
.IP "Test the manual" 4
.IX Item "Test the manual"
.IP "Sometimes the tests are wrong" 4
.IX Item "Sometimes the tests are wrong"
.IP "Testing lots of values" 4
.IX Item "Testing lots of values"
.IP "Informative names" 4
.IX Item "Informative names"
.IP "Skipping tests" 4
.IX Item "Skipping tests"
.IP "Todo tests" 4
.IX Item "Todo tests"
.IP "Testing with taint mode." 4
.IX Item "Testing with taint mode."
.RE
.RS 4
.RE
.IP "\s-1FOOTNOTES\s0" 4
.IX Item "FOOTNOTES"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Text::Abbrev \- abbrev \- create an abbreviation table from a list"
.IX Subsection "Text::Abbrev - abbrev - create an abbreviation table from a list"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD
.SS "Text::Balanced \- Extract delimited text sequences from strings."
.IX Subsection "Text::Balanced - Extract delimited text sequences from strings."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "General behaviour in list contexts" 4
.IX Item "General behaviour in list contexts"
.PD
[0], [1], [2]
.IP "General behaviour in scalar and void contexts" 4
.IX Item "General behaviour in scalar and void contexts"
.PD 0
.IP "A note about prefixes" 4
.IX Item "A note about prefixes"
.ie n .IP """extract_delimited""" 4
.el .IP "\f(CWextract_delimited\fR" 4
.IX Item "extract_delimited"
.ie n .IP """extract_bracketed""" 4
.el .IP "\f(CWextract_bracketed\fR" 4
.IX Item "extract_bracketed"
.ie n .IP """extract_variable""" 4
.el .IP "\f(CWextract_variable\fR" 4
.IX Item "extract_variable"
.PD
[0], [1], [2]
.ie n .IP """extract_tagged""" 4
.el .IP "\f(CWextract_tagged\fR" 4
.IX Item "extract_tagged"
\&\f(CW\*(C`reject => $listref\*(C'\fR, \f(CW\*(C`ignore => $listref\*(C'\fR, \f(CW\*(C`fail => $str\*(C'\fR,
[0], [1], [2], [3], [4], [5]
.ie n .IP """gen_extract_tagged""" 4
.el .IP "\f(CWgen_extract_tagged\fR" 4
.IX Item "gen_extract_tagged"
.PD 0
.ie n .IP """extract_quotelike""" 4
.el .IP "\f(CWextract_quotelike\fR" 4
.IX Item "extract_quotelike"
.PD
[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]
.ie n .IP """extract_quotelike"" and ""here documents""" 4
.el .IP "\f(CWextract_quotelike\fR and ``here documents''" 4
.IX Item "extract_quotelike and here documents"
[0], [1], [2], [3], [4], [5], [6], [7..10]
.ie n .IP """extract_codeblock""" 4
.el .IP "\f(CWextract_codeblock\fR" 4
.IX Item "extract_codeblock"
.PD 0
.ie n .IP """extract_multiple""" 4
.el .IP "\f(CWextract_multiple\fR" 4
.IX Item "extract_multiple"
.ie n .IP """gen_delimited_pat""" 4
.el .IP "\f(CWgen_delimited_pat\fR" 4
.IX Item "gen_delimited_pat"
.ie n .IP """delimited_pat""" 4
.el .IP "\f(CWdelimited_pat\fR" 4
.IX Item "delimited_pat"
.RE
.RS 4
.RE
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
.Vb 10
\& C<Did not find a suitable bracket: "%s">,  C<Did not find prefix: /%s/>, 
\&C<Did not find opening bracket after prefix: "%s">,  C<No quotelike
\&operator found after prefix: "%s">,  C<Unmatched closing bracket: "%c">, 
\&C<Unmatched opening bracket(s): "%s">, C<Unmatched embedded quote (%s)>,
\&C<Did not find closing delimiter to match \*(Aq%s\*(Aq>,  C<Mismatched closing
\&bracket: expected "%c" but found "%s">,  C<No block delimiter found after
\&quotelike "%s">, C<Did not find leading dereferencer>, C<Bad identifier
\&after dereferencer>, C<Did not find expected opening bracket at %s>,
\&C<Improperly nested codeblock at %s>,  C<Missing second block for quotelike
\&"%s">, C<No match found for opening bracket>, C<Did not find opening tag:
\&/%s/>, C<Unable to construct closing tag to match: /%s/>, C<Found invalid
\&nested tag: %s>, C<Found unbalanced nested tag: %s>, C<Did not find closing
\&tag>
.Ve
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1BUGS AND IRRITATIONS\s0" 4
.IX Item "BUGS AND IRRITATIONS"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.PD
.SS "Text::ParseWords \- parse text into an array of tokens or array of arrays"
.IX Subsection "Text::ParseWords - parse text into an array of tokens or array of arrays"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.PD
.SS "Text::Soundex \- Implementation of the soundex algorithm."
.IX Subsection "Text::Soundex - Implementation of the soundex algorithm."
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.IP "\s-1MAINTAINER\s0" 4
.IX Item "MAINTAINER"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
.SS "Text::Tabs \- expand and unexpand tabs like unix \fIexpand\fP\|(1) and \fIunexpand\fP\|(1)"
.IX Subsection "Text::Tabs - expand and unexpand tabs like unix expand and unexpand"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.PD
expand, unexpand, \f(CW$tabstop\fR
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.PD 0
.IP "\s-1SUBVERSION\s0" 4
.IX Item "SUBVERSION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Text::Wrap \- line wrapping to form simple paragraphs"
.IX Subsection "Text::Wrap - line wrapping to form simple paragraphs"
.IP "\s-1SYNOPSIS \s0" 4
.IX Item "SYNOPSIS "
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1OVERRIDES\s0" 4
.IX Item "OVERRIDES"
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.IP "\s-1SUBVERSION\s0" 4
.IX Item "SUBVERSION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Thread \- Manipulate threads in Perl (for old code only)"
.IX Subsection "Thread - Manipulate threads in Perl (for old code only)"
.IP "\s-1DEPRECATED\s0" 4
.IX Item "DEPRECATED"
.PD 0
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.PD
\&\f(CW$thread\fR = Thread\->new(\e&start_sub), \f(CW$thread\fR = Thread\->new(\e&start_sub,
\&\s-1LIST\s0), lock \s-1VARIABLE,\s0 async \s-1BLOCK\s0;, Thread\->self, Thread\->list, cond_wait
\&\s-1VARIABLE,\s0 cond_signal \s-1VARIABLE,\s0 cond_broadcast \s-1VARIABLE,\s0 yield
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
join, detach, equal, tid, done
.IP "\s-1DEFUNCT\s0" 4
.IX Item "DEFUNCT"
lock(\e&sub), eval, flags
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.SS "Thread::Queue \- Thread-safe queues"
.IX Subsection "Thread::Queue - Thread-safe queues"
.PD 0
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
Ordinary scalars, Array refs, Hash refs, Scalar refs, Objects based on the
above
.IP "\s-1QUEUE CREATION\s0" 4
.IX Item "QUEUE CREATION"
\&\->\fInew()\fR, \->new(\s-1LIST\s0)
.IP "\s-1BASIC METHODS\s0" 4
.IX Item "BASIC METHODS"
\&\->enqueue(\s-1LIST\s0), \->\fIdequeue()\fR, \->dequeue(\s-1COUNT\s0), \->\fIdequeue_nb()\fR,
\&\->dequeue_nb(\s-1COUNT\s0), \->dequeue_timed(\s-1TIMEOUT\s0), \->dequeue_timed(\s-1TIMEOUT,
COUNT\s0), \->\fIpending()\fR, \->\fIend()\fR
.IP "\s-1ADVANCED METHODS\s0" 4
.IX Item "ADVANCED METHODS"
\&\->\fIpeek()\fR, \->peek(\s-1INDEX\s0), \->insert(\s-1INDEX, LIST\s0), \->\fIextract()\fR,
\&\->extract(\s-1INDEX\s0), \->extract(\s-1INDEX, COUNT\s0)
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1MAINTAINER\s0" 4
.IX Item "MAINTAINER"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Thread::Semaphore \- Thread-safe semaphores"
.IX Subsection "Thread::Semaphore - Thread-safe semaphores"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.PD
\&\->\fInew()\fR, \->new(\s-1NUMBER\s0), \->\fIdown()\fR, \->down(\s-1NUMBER\s0), \->\fIdown_nb()\fR,
\&\->down_nb(\s-1NUMBER\s0), \->\fIdown_force()\fR, \->down_force(\s-1NUMBER\s0), \->\fIup()\fR,
\&\->up(\s-1NUMBER\s0)
.IP "\s-1NOTES\s0" 4
.IX Item "NOTES"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1MAINTAINER\s0" 4
.IX Item "MAINTAINER"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.PD
.SS "Tie::Array \- base class for tied arrays"
.IX Subsection "Tie::Array - base class for tied arrays"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1TIEARRAY\s0 classname, \s-1LIST, STORE\s0 this, index, value, \s-1FETCH\s0 this, index,
\&\s-1FETCHSIZE\s0 this, \s-1STORESIZE\s0 this, count, \s-1EXTEND\s0 this, count, \s-1EXISTS\s0 this,
key, \s-1DELETE\s0 this, key, \s-1CLEAR\s0 this, \s-1DESTROY\s0 this, \s-1PUSH\s0 this, \s-1LIST, POP\s0 this,
\&\s-1SHIFT\s0 this, \s-1UNSHIFT\s0 this, \s-1LIST, SPLICE\s0 this, offset, length, \s-1LIST\s0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD 0
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Tie::File \- Access the lines of a disk file via a Perl array"
.IX Subsection "Tie::File - Access the lines of a disk file via a Perl array"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.ie n .IP """recsep""" 4
.el .IP "\f(CWrecsep\fR" 4
.IX Item "recsep"
.ie n .IP """autochomp""" 4
.el .IP "\f(CWautochomp\fR" 4
.IX Item "autochomp"
.ie n .IP """mode""" 4
.el .IP "\f(CWmode\fR" 4
.IX Item "mode"
.ie n .IP """memory""" 4
.el .IP "\f(CWmemory\fR" 4
.IX Item "memory"
.ie n .IP """dw_size""" 4
.el .IP "\f(CWdw_size\fR" 4
.IX Item "dw_size"
.IP "Option Format" 4
.IX Item "Option Format"
.RE
.RS 4
.RE
.IP "Public Methods" 4
.IX Item "Public Methods"
.RS 4
.ie n .IP """flock""" 4
.el .IP "\f(CWflock\fR" 4
.IX Item "flock"
.ie n .IP """autochomp""" 4
.el .IP "\f(CWautochomp\fR" 4
.IX Item "autochomp"
.ie n .IP """defer"", ""flush"", ""discard"", and ""autodefer""" 4
.el .IP "\f(CWdefer\fR, \f(CWflush\fR, \f(CWdiscard\fR, and \f(CWautodefer\fR" 4
.IX Item "defer, flush, discard, and autodefer"
.ie n .IP """offset""" 4
.el .IP "\f(CWoffset\fR" 4
.IX Item "offset"
.RE
.RS 4
.RE
.IP "Tying to an already-opened filehandle" 4
.IX Item "Tying to an already-opened filehandle"
.IP "Deferred Writing" 4
.IX Item "Deferred Writing"
.RS 4
.IP "Autodeferring" 4
.IX Item "Autodeferring"
.RE
.RS 4
.RE
.IP "\s-1CONCURRENT ACCESS TO FILES\s0" 4
.IX Item "CONCURRENT ACCESS TO FILES"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SUBCLASSING\s0" 4
.IX Item "SUBCLASSING"
.ie n .IP "\s-1WHAT ABOUT \s0""DB_File""?" 4
.el .IP "\s-1WHAT ABOUT \s0\f(CWDB_File\fR?" 4
.IX Item "WHAT ABOUT DB_File?"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1WARRANTY\s0" 4
.IX Item "WARRANTY"
.IP "\s-1THANKS\s0" 4
.IX Item "THANKS"
.IP "\s-1TODO\s0" 4
.IX Item "TODO"
.PD
.SS "Tie::Handle \- base class definitions for tied handles"
.IX Subsection "Tie::Handle - base class definitions for tied handles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1TIEHANDLE\s0 classname, \s-1LIST, WRITE\s0 this, scalar, length, offset, \s-1PRINT\s0 this,
\&\s-1LIST, PRINTF\s0 this, format, \s-1LIST, READ\s0 this, scalar, length, offset,
\&\s-1READLINE\s0 this, \s-1GETC\s0 this, \s-1CLOSE\s0 this, \s-1OPEN\s0 this, filename, \s-1BINMODE\s0 this,
\&\s-1EOF\s0 this, \s-1TELL\s0 this, \s-1SEEK\s0 this, offset, whence, \s-1DESTROY\s0 this
.IP "\s-1MORE INFORMATION\s0" 4
.IX Item "MORE INFORMATION"
.PD 0
.IP "\s-1COMPATIBILITY\s0" 4
.IX Item "COMPATIBILITY"
.PD
.SS "Tie::Hash, Tie::StdHash, Tie::ExtraHash \- base class definitions for tied hashes"
.IX Subsection "Tie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1TIEHASH\s0 classname, \s-1LIST, STORE\s0 this, key, value, \s-1FETCH\s0 this, key, \s-1FIRSTKEY\s0
this, \s-1NEXTKEY\s0 this, lastkey, \s-1EXISTS\s0 this, key, \s-1DELETE\s0 this, key, \s-1CLEAR\s0
this, \s-1SCALAR\s0 this
.IP "Inheriting from \fBTie::StdHash\fR" 4
.IX Item "Inheriting from Tie::StdHash"
.PD 0
.IP "Inheriting from \fBTie::ExtraHash\fR" 4
.IX Item "Inheriting from Tie::ExtraHash"
.ie n .IP """SCALAR"", ""UNTIE"" and ""DESTROY""" 4
.el .IP "\f(CWSCALAR\fR, \f(CWUNTIE\fR and \f(CWDESTROY\fR" 4
.IX Item "SCALAR, UNTIE and DESTROY"
.IP "\s-1MORE INFORMATION\s0" 4
.IX Item "MORE INFORMATION"
.PD
.SS "Tie::Hash::NamedCapture \- Named regexp capture buffers"
.IX Subsection "Tie::Hash::NamedCapture - Named regexp capture buffers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Tie::Memoize \- add data to hash when needed"
.IX Subsection "Tie::Memoize - add data to hash when needed"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "Inheriting from \fBTie::Memoize\fR" 4
.IX Item "Inheriting from Tie::Memoize"
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Tie::RefHash \- use references as hash keys"
.IX Subsection "Tie::RefHash - use references as hash keys"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1EXAMPLE\s0" 4
.IX Item "EXAMPLE"
.IP "\s-1THREAD SUPPORT\s0" 4
.IX Item "THREAD SUPPORT"
.IP "\s-1STORABLE SUPPORT\s0" 4
.IX Item "STORABLE SUPPORT"
.IP "\s-1RELIC SUPPORT\s0" 4
.IX Item "RELIC SUPPORT"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "\s-1MAINTAINER\s0" 4
.IX Item "MAINTAINER"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
.SS "Tie::Scalar, Tie::StdScalar \- base class definitions for tied scalars"
.IX Subsection "Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\s-1TIESCALAR\s0 classname, \s-1LIST, FETCH\s0 this, \s-1STORE\s0 this, value, \s-1DESTROY\s0 this
.RS 4
.IP "Tie::Scalar vs Tie::StdScalar" 4
.IX Item "Tie::Scalar vs Tie::StdScalar"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1MORE INFORMATION\s0" 4
.IX Item "MORE INFORMATION"
.PD
.SS "Tie::StdHandle \- base class definitions for tied handles"
.IX Subsection "Tie::StdHandle - base class definitions for tied handles"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
.SS "Tie::SubstrHash \- Fixed-table-size, fixed-key-length hashing"
.IX Subsection "Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
.SS "Time::HiRes \- High resolution alarm, sleep, gettimeofday, interval timers"
.IX Subsection "Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
gettimeofday (), usleep ( \f(CW$useconds\fR ), nanosleep ( \f(CW$nanoseconds\fR ), ualarm (
\&\f(CW$useconds\fR [, \f(CW$interval_useconds\fR ] ), tv_interval, time (), sleep (
\&\f(CW$floating_seconds\fR ), alarm ( \f(CW$floating_seconds\fR [,
\&\f(CW$interval_floating_seconds\fR ] ), setitimer ( \f(CW$which\fR, \f(CW$floating_seconds\fR [,
\&\f(CW$interval_floating_seconds\fR ] ), getitimer ( \f(CW$which\fR ), clock_gettime (
\&\f(CW$which\fR ), clock_getres ( \f(CW$which\fR ), clock_nanosleep ( \f(CW$which\fR, \f(CW$nanoseconds\fR,
\&\f(CW$flags\fR = 0), \fIclock()\fR, stat, stat \s-1FH,\s0 stat \s-1EXPR\s0
.IP "\s-1EXAMPLES\s0" 4
.IX Item "EXAMPLES"
.PD 0
.IP "C \s-1API\s0" 4
.IX Item "C API"
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.RS 4
.IP "useconds or interval more than ..." 4
.IX Item "useconds or interval more than ..."
.IP "negative time not invented yet" 4
.IX Item "negative time not invented yet"
.IP "internal error: useconds < 0 (unsigned ... signed ...)" 4
.IX Item "internal error: useconds < 0 (unsigned ... signed ...)"
.IP "useconds or uinterval equal to or more than 1000000" 4
.IX Item "useconds or uinterval equal to or more than 1000000"
.IP "unimplemented in this platform" 4
.IX Item "unimplemented in this platform"
.RE
.RS 4
.RE
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT AND LICENSE\s0" 4
.IX Item "COPYRIGHT AND LICENSE"
.PD
.SS "Time::Local \- efficiently compute time from local and \s-1GMT\s0 time"
.IX Subsection "Time::Local - efficiently compute time from local and GMT time"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1FUNCTIONS\s0" 4
.IX Item "FUNCTIONS"
.RS 4
.ie n .IP """timelocal()"" and ""timegm()""" 4
.el .IP "\f(CWtimelocal()\fR and \f(CWtimegm()\fR" 4
.IX Item "timelocal() and timegm()"
.ie n .IP """timelocal_nocheck()"" and ""timegm_nocheck()""" 4
.el .IP "\f(CWtimelocal_nocheck()\fR and \f(CWtimegm_nocheck()\fR" 4
.IX Item "timelocal_nocheck() and timegm_nocheck()"
.IP "Year Value Interpretation" 4
.IX Item "Year Value Interpretation"
.IP "Limits of time_t" 4
.IX Item "Limits of time_t"
.IP "Ambiguous Local Times (\s-1DST\s0)" 4
.IX Item "Ambiguous Local Times (DST)"
.IP "Non-Existent Local Times (\s-1DST\s0)" 4
.IX Item "Non-Existent Local Times (DST)"
.IP "Negative Epoch Values" 4
.IX Item "Negative Epoch Values"
.RE
.RS 4
.RE
.IP "\s-1IMPLEMENTATION\s0" 4
.IX Item "IMPLEMENTATION"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SUPPORT\s0" 4
.IX Item "SUPPORT"
.IP "\s-1COPYRIGHT\s0" 4
.IX Item "COPYRIGHT"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Time::Piece \- Object Oriented time objects"
.IX Subsection "Time::Piece - Object Oriented time objects"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1USAGE\s0" 4
.IX Item "USAGE"
.RS 4
.IP "Local Locales" 4
.IX Item "Local Locales"
.IP "Date Calculations" 4
.IX Item "Date Calculations"
.IP "Date Comparisons" 4
.IX Item "Date Comparisons"
.IP "Date Parsing" 4
.IX Item "Date Parsing"
.IP "YYYY\-MM\-DDThh:mm:ss" 4
.IX Item "YYYY-MM-DDThh:mm:ss"
.IP "Week Number" 4
.IX Item "Week Number"
.IP "Global Overriding" 4
.IX Item "Global Overriding"
.RE
.RS 4
.RE
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.RS 4
.ie n .IP "Setting $ENV{\s-1TZ\s0} in Threads on Win32" 4
.el .IP "Setting \f(CW$ENV\fR{\s-1TZ\s0} in Threads on Win32" 4
.IX Item "Setting $ENV{TZ} in Threads on Win32"
.IP "Use of epoch seconds" 4
.IX Item "Use of epoch seconds"
.RE
.RS 4
.RE
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "License" 4
.IX Item "License"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.PD
.SS "Time::Seconds \- a simple \s-1API\s0 to convert seconds to other date values"
.IX Subsection "Time::Seconds - a simple API to convert seconds to other date values"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1METHODS\s0" 4
.IX Item "METHODS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1LICENSE\s0" 4
.IX Item "LICENSE"
.IP "Bugs" 4
.IX Item "Bugs"
.PD
.SS "Time::gmtime \- by-name interface to Perl's built-in \fIgmtime()\fP function"
.IX Subsection "Time::gmtime - by-name interface to Perl's built-in gmtime() function"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Time::localtime \- by-name interface to Perl's built-in \fIlocaltime()\fP function"
.IX Subsection "Time::localtime - by-name interface to Perl's built-in localtime() function"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "Time::tm \- internal object used by Time::gmtime and Time::localtime"
.IX Subsection "Time::tm - internal object used by Time::gmtime and Time::localtime"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "\s-1UNIVERSAL \-\s0 base class for \s-1ALL\s0 classes (blessed references)"
.IX Subsection "UNIVERSAL - base class for ALL classes (blessed references)"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.PD
\&\f(CW\*(C`$obj\->isa( TYPE )\*(C'\fR, \f(CW\*(C`CLASS\->isa( TYPE )\*(C'\fR, \f(CW\*(C`eval { VAL\->isa(
TYPE ) }\*(C'\fR, \f(CW\*(C`TYPE\*(C'\fR, \f(CW$obj\fR, \f(CW\*(C`CLASS\*(C'\fR, \f(CW\*(C`VAL\*(C'\fR, \f(CW\*(C`$obj\->DOES( ROLE )\*(C'\fR,
\&\f(CW\*(C`CLASS\->DOES( ROLE )\*(C'\fR, \f(CW\*(C`$obj\->can( METHOD )\*(C'\fR, \f(CW\*(C`CLASS\->can(
METHOD )\*(C'\fR, \f(CW\*(C`eval { VAL\->can( METHOD ) }\*(C'\fR, \f(CW\*(C`VERSION ( [ REQUIRE ] )\*(C'\fR
.IP "\s-1WARNINGS\s0" 4
.IX Item "WARNINGS"
.PD 0
.IP "\s-1EXPORTS\s0" 4
.IX Item "EXPORTS"
.PD
.SS "Unicode::Collate \- Unicode Collation Algorithm"
.IX Subsection "Unicode::Collate - Unicode Collation Algorithm"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Constructor and Tailoring" 4
.IX Item "Constructor and Tailoring"
.PD
UCA_Version, alternate, backwards, entry, hangul_terminator, highestFFFF,
identical, ignoreChar, ignoreName, ignore_level2, katakana_before_hiragana,
level, minimalFFFE, normalization, overrideCJK, overrideHangul, preprocess,
rearrange, rewrite, suppress, table, undefChar, undefName,
upper_before_lower, variable
.IP "Methods for Collation" 4
.IX Item "Methods for Collation"
\&\f(CW\*(C`@sorted = $Collator\->sort(@not_sorted)\*(C'\fR, \f(CW\*(C`$result =
$Collator\->cmp($a, $b)\*(C'\fR, \f(CW\*(C`$result = $Collator\->eq($a, $b)\*(C'\fR,
\&\f(CW\*(C`$result = $Collator\->ne($a, $b)\*(C'\fR, \f(CW\*(C`$result = $Collator\->lt($a,
$b)\*(C'\fR, \f(CW\*(C`$result = $Collator\->le($a, $b)\*(C'\fR, \f(CW\*(C`$result =
$Collator\->gt($a, $b)\*(C'\fR, \f(CW\*(C`$result = $Collator\->ge($a, $b)\*(C'\fR,
\&\f(CW\*(C`$sortKey = $Collator\->getSortKey($string)\*(C'\fR, \f(CW\*(C`$sortKeyForm =
$Collator\->viewSortKey($string)\*(C'\fR
.IP "Methods for Searching" 4
.IX Item "Methods for Searching"
\&\f(CW\*(C`$position = $Collator\->index($string, $substring[, $position])\*(C'\fR,
\&\f(CW\*(C`($position, $length) = $Collator\->index($string, $substring[,
$position])\*(C'\fR, \f(CW\*(C`$match_ref = $Collator\->match($string, $substring)\*(C'\fR,
\&\f(CW\*(C`($match)   = $Collator\->match($string, $substring)\*(C'\fR, \f(CW\*(C`@match =
$Collator\->gmatch($string, $substring)\*(C'\fR, \f(CW\*(C`$count =
$Collator\->subst($string, $substring, $replacement)\*(C'\fR, \f(CW\*(C`$count =
$Collator\->gsubst($string, $substring, $replacement)\*(C'\fR
.IP "Other Methods" 4
.IX Item "Other Methods"
\&\f(CW\*(C`%old_tailoring = $Collator\->change(%new_tailoring)\*(C'\fR,
\&\f(CW\*(C`$modified_collator = $Collator\->change(%new_tailoring)\*(C'\fR, \f(CW\*(C`$version =
$Collator\->version()\*(C'\fR, \f(CW\*(C`UCA_Version()\*(C'\fR, \f(CW\*(C`Base_Unicode_Version()\*(C'\fR
.RE
.RS 4
.RE
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.PD 0
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
Normalization, Conformance Test
.IP "\s-1AUTHOR, COPYRIGHT AND LICENSE\s0" 4
.IX Item "AUTHOR, COPYRIGHT AND LICENSE"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
Unicode Collation Algorithm \- \s-1UTS\s0 #10, The Default Unicode Collation
Element Table (\s-1DUCET\s0), The conformance test for the \s-1UCA,\s0 Hangul Syllable
Type, Unicode Normalization Forms \- \s-1UAX\s0 #15, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35
.SS "Unicode::Collate::CJK::Big5 \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::Big5 - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::GB2312 \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::GB2312 - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::JISX0208 \- weighting \s-1JIS KANJI\s0 for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::JISX0208 - weighting JIS KANJI for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::Korean \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::Korean - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::Pinyin \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::Pinyin - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::Stroke \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::Stroke - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::CJK::Zhuyin \- weighting \s-1CJK\s0 Unified Ideographs for Unicode::Collate"
.IX Subsection "Unicode::Collate::CJK::Zhuyin - weighting CJK Unified Ideographs for Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
\&\s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (\s-1LDML\s0) \- \s-1UTS\s0 #35, Unicode::Collate, Unicode::Collate::Locale
.SS "Unicode::Collate::Locale \- Linguistic tailoring for \s-1DUCET\s0 via Unicode::Collate"
.IX Subsection "Unicode::Collate::Locale - Linguistic tailoring for DUCET via Unicode::Collate"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Constructor" 4
.IX Item "Constructor"
.IP "Methods" 4
.IX Item "Methods"
.PD
\&\f(CW\*(C`$Collator\->getlocale\*(C'\fR, \f(CW\*(C`$Collator\->locale_version\*(C'\fR
.IP "A list of tailorable locales" 4
.IX Item "A list of tailorable locales"
.RE
.RS 4
.RE
.PD 0
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
.PD
tailoring is not maximum
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
Unicode Collation Algorithm \- \s-1UTS\s0 #10, The Default Unicode Collation
Element Table (\s-1DUCET\s0), Unicode Locale Data Markup Language (\s-1LDML\s0) \- \s-1UTS\s0
#35, \s-1CLDR \-\s0 Unicode Common Locale Data Repository, Unicode::Collate,
Unicode::Normalize
.SS "Unicode::Normalize \- Unicode Normalization Forms"
.IX Subsection "Unicode::Normalize - Unicode Normalization Forms"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "Normalization Forms" 4
.IX Item "Normalization Forms"
.PD
\&\f(CW\*(C`$NFD_string = NFD($string)\*(C'\fR, \f(CW\*(C`$NFC_string = NFC($string)\*(C'\fR,
\&\f(CW\*(C`$NFKD_string = NFKD($string)\*(C'\fR, \f(CW\*(C`$NFKC_string = NFKC($string)\*(C'\fR,
\&\f(CW\*(C`$FCD_string = FCD($string)\*(C'\fR, \f(CW\*(C`$FCC_string = FCC($string)\*(C'\fR,
\&\f(CW\*(C`$normalized_string = normalize($form_name, $string)\*(C'\fR
.IP "Decomposition and Composition" 4
.IX Item "Decomposition and Composition"
\&\f(CW\*(C`$decomposed_string = decompose($string [, $useCompatMapping])\*(C'\fR,
\&\f(CW\*(C`$reordered_string = reorder($string)\*(C'\fR, \f(CW\*(C`$composed_string =
compose($string)\*(C'\fR, \f(CW\*(C`($processed, $unprocessed) =
splitOnLastStarter($normalized)\*(C'\fR, \f(CW\*(C`$processed = normalize_partial($form,
$unprocessed)\*(C'\fR, \f(CW\*(C`$processed = NFD_partial($unprocessed)\*(C'\fR, \f(CW\*(C`$processed =
NFC_partial($unprocessed)\*(C'\fR, \f(CW\*(C`$processed = NFKD_partial($unprocessed)\*(C'\fR,
\&\f(CW\*(C`$processed = NFKC_partial($unprocessed)\*(C'\fR
.IP "Quick Check" 4
.IX Item "Quick Check"
\&\f(CW\*(C`$result = checkNFD($string)\*(C'\fR, \f(CW\*(C`$result = checkNFC($string)\*(C'\fR, \f(CW\*(C`$result =
checkNFKD($string)\*(C'\fR, \f(CW\*(C`$result = checkNFKC($string)\*(C'\fR, \f(CW\*(C`$result =
checkFCD($string)\*(C'\fR, \f(CW\*(C`$result = checkFCC($string)\*(C'\fR, \f(CW\*(C`$result =
check($form_name, $string)\*(C'\fR
.IP "Character Data" 4
.IX Item "Character Data"
\&\f(CW\*(C`$canonical_decomposition = getCanon($code_point)\*(C'\fR,
\&\f(CW\*(C`$compatibility_decomposition = getCompat($code_point)\*(C'\fR,
\&\f(CW\*(C`$code_point_composite = getComposite($code_point_here,
$code_point_next)\*(C'\fR, \f(CW\*(C`$combining_class = getCombinClass($code_point)\*(C'\fR,
\&\f(CW\*(C`$may_be_composed_with_prev_char = isComp2nd($code_point)\*(C'\fR,
\&\f(CW\*(C`$is_exclusion = isExclusion($code_point)\*(C'\fR, \f(CW\*(C`$is_singleton =
isSingleton($code_point)\*(C'\fR, \f(CW\*(C`$is_non_starter_decomposition =
isNonStDecomp($code_point)\*(C'\fR, \f(CW\*(C`$is_Full_Composition_Exclusion =
isComp_Ex($code_point)\*(C'\fR, \f(CW\*(C`$NFD_is_NO = isNFD_NO($code_point)\*(C'\fR,
\&\f(CW\*(C`$NFC_is_NO = isNFC_NO($code_point)\*(C'\fR, \f(CW\*(C`$NFC_is_MAYBE =
isNFC_MAYBE($code_point)\*(C'\fR, \f(CW\*(C`$NFKD_is_NO = isNFKD_NO($code_point)\*(C'\fR,
\&\f(CW\*(C`$NFKC_is_NO = isNFKC_NO($code_point)\*(C'\fR, \f(CW\*(C`$NFKC_is_MAYBE =
isNFKC_MAYBE($code_point)\*(C'\fR
.RE
.RS 4
.RE
.IP "\s-1EXPORT\s0" 4
.IX Item "EXPORT"
.PD 0
.IP "\s-1CAVEATS\s0" 4
.IX Item "CAVEATS"
.PD
Perl's version vs. Unicode version, Correction of decomposition mapping,
Revised definition of canonical composition
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD 0
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.PD
http://www.unicode.org/reports/tr15/,
http://www.unicode.org/Public/UNIDATA/CompositionExclusions.txt,
http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt,
http://www.unicode.org/Public/UNIDATA/NormalizationCorrections.txt,
http://www.unicode.org/review/pr\-29.html, http://www.unicode.org/notes/tn5/
.SS "Unicode::UCD \- Unicode character database"
.IX Subsection "Unicode::UCD - Unicode character database"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "code point argument" 4
.IX Item "code point argument"
.RE
.RS 4
.RE
.IP "\fB\f(BIcharinfo()\fB\fR" 4
.IX Item "charinfo()"
.PD
\&\fBcode\fR, \fBname\fR, \fBcategory\fR, \fBcombining\fR, \fBbidi\fR, \fBdecomposition\fR,
\&\fBdecimal\fR, \fBdigit\fR, \fBnumeric\fR, \fBmirrored\fR, \fBunicode10\fR, \fBcomment\fR,
\&\fBupper\fR, \fBlower\fR, \fBtitle\fR, \fBblock\fR, \fBscript\fR
.IP "\fB\f(BIcharblock()\fB\fR" 4
.IX Item "charblock()"
.PD 0
.IP "\fB\f(BIcharscript()\fB\fR" 4
.IX Item "charscript()"
.IP "\fB\f(BIcharblocks()\fB\fR" 4
.IX Item "charblocks()"
.IP "\fB\f(BIcharscripts()\fB\fR" 4
.IX Item "charscripts()"
.IP "\fB\f(BIcharinrange()\fB\fR" 4
.IX Item "charinrange()"
.IP "\fB\f(BIgeneral_categories()\fB\fR" 4
.IX Item "general_categories()"
.IP "\fB\f(BIbidi_types()\fB\fR" 4
.IX Item "bidi_types()"
.IP "\fB\f(BIcompexcl()\fB\fR" 4
.IX Item "compexcl()"
.IP "\fB\f(BIcasefold()\fB\fR" 4
.IX Item "casefold()"
.PD
\&\fBcode\fR, \fBfull\fR, \fBsimple\fR, \fBmapping\fR, \fBstatus\fR, \fB*\fR If you use this
\&\f(CW\*(C`I\*(C'\fR mapping, \fB*\fR If you exclude this \f(CW\*(C`I\*(C'\fR mapping, \fBturkic\fR
.IP "\fB\f(BIall_casefolds()\fB\fR" 4
.IX Item "all_casefolds()"
.PD 0
.IP "\fB\f(BIcasespec()\fB\fR" 4
.IX Item "casespec()"
.PD
\&\fBcode\fR, \fBlower\fR, \fBtitle\fR, \fBupper\fR, \fBcondition\fR
.IP "\fB\f(BInamedseq()\fB\fR" 4
.IX Item "namedseq()"
.PD 0
.IP "\fB\f(BInum()\fB\fR" 4
.IX Item "num()"
.IP "\fB\f(BIprop_aliases()\fB\fR" 4
.IX Item "prop_aliases()"
.IP "\fB\f(BIprop_value_aliases()\fB\fR" 4
.IX Item "prop_value_aliases()"
.IP "\fB\f(BIprop_invlist()\fB\fR" 4
.IX Item "prop_invlist()"
.IP "\fB\f(BIprop_invmap()\fB\fR" 4
.IX Item "prop_invmap()"
.PD
\&\fB\f(CB\*(C`s\*(C'\fB\fR, \fB\f(CB\*(C`sl\*(C'\fB\fR, \f(CW\*(C`correction\*(C'\fR, \f(CW\*(C`control\*(C'\fR, \f(CW\*(C`alternate\*(C'\fR, \f(CW\*(C`figment\*(C'\fR,
\&\f(CW\*(C`abbreviation\*(C'\fR, \fB\f(CB\*(C`a\*(C'\fB\fR, \fB\f(CB\*(C`al\*(C'\fB\fR, \fB\f(CB\*(C`ae\*(C'\fB\fR, \fB\f(CB\*(C`ale\*(C'\fB\fR, \fB\f(CB\*(C`ar\*(C'\fB\fR, \fB\f(CB\*(C`n\*(C'\fB\fR,
\&\fB\f(CB\*(C`ad\*(C'\fB\fR
.IP "Unicode::UCD::UnicodeVersion" 4
.IX Item "Unicode::UCD::UnicodeVersion"
.PD 0
.IP "\fBBlocks versus Scripts\fR" 4
.IX Item "Blocks versus Scripts"
.IP "\fBMatching Scripts and Blocks\fR" 4
.IX Item "Matching Scripts and Blocks"
.IP "Old-style versus new-style block names" 4
.IX Item "Old-style versus new-style block names"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "User::grent \- by-name interface to Perl's built-in getgr*() functions"
.IX Subsection "User::grent - by-name interface to Perl's built-in getgr*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.PD
.SS "User::pwent \- by-name interface to Perl's built-in getpw*() functions"
.IX Subsection "User::pwent - by-name interface to Perl's built-in getpw*() functions"
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.PD 0
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.IP "System Specifics" 4
.IX Item "System Specifics"
.RE
.RS 4
.RE
.IP "\s-1NOTE\s0" 4
.IX Item "NOTE"
.IP "\s-1AUTHOR\s0" 4
.IX Item "AUTHOR"
.IP "\s-1HISTORY\s0" 4
.IX Item "HISTORY"
.PD
March 18th, 2000
.SS "XSLoader \- Dynamically load C libraries into Perl code"
.IX Subsection "XSLoader - Dynamically load C libraries into Perl code"
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
.PD 0
.IP "\s-1SYNOPSIS\s0" 4
.IX Item "SYNOPSIS"
.IP "\s-1DESCRIPTION\s0" 4
.IX Item "DESCRIPTION"
.RS 4
.ie n .IP "Migration from ""DynaLoader""" 4
.el .IP "Migration from \f(CWDynaLoader\fR" 4
.IX Item "Migration from DynaLoader"
.IP "Backward compatible boilerplate" 4
.IX Item "Backward compatible boilerplate"
.RE
.RS 4
.RE
.IP "Order of initialization: early \fIload()\fR" 4
.IX Item "Order of initialization: early load()"
.RS 4
.IP "The most hairy case" 4
.IX Item "The most hairy case"
.RE
.RS 4
.RE
.IP "\s-1DIAGNOSTICS\s0" 4
.IX Item "DIAGNOSTICS"
.PD
\&\f(CW\*(C`Can\*(Aqt find \*(Aq%s\*(Aq symbol in %s\*(C'\fR, \f(CW\*(C`Can\*(Aqt load \*(Aq%s\*(Aq for module %s: %s\*(C'\fR,
\&\f(CW\*(C`Undefined symbols present after loading %s: %s\*(C'\fR
.IP "\s-1LIMITATIONS\s0" 4
.IX Item "LIMITATIONS"
.PD 0
.IP "\s-1KNOWN BUGS\s0" 4
.IX Item "KNOWN BUGS"
.IP "\s-1BUGS\s0" 4
.IX Item "BUGS"
.IP "\s-1SEE ALSO\s0" 4
.IX Item "SEE ALSO"
.IP "\s-1AUTHORS\s0" 4
.IX Item "AUTHORS"
.IP "\s-1COPYRIGHT & LICENSE\s0" 4
.IX Item "COPYRIGHT & LICENSE"
.PD
.SH "AUXILIARY DOCUMENTATION"
.IX Header "AUXILIARY DOCUMENTATION"
Here should be listed all the extra programs' documentation, but they
don't all have manual pages yet:
.IP "a2p" 4
.IX Item "a2p"
.PD 0
.IP "c2ph" 4
.IX Item "c2ph"
.IP "h2ph" 4
.IX Item "h2ph"
.IP "h2xs" 4
.IX Item "h2xs"
.IP "perlbug" 4
.IX Item "perlbug"
.IP "pl2pm" 4
.IX Item "pl2pm"
.IP "pod2html" 4
.IX Item "pod2html"
.IP "pod2man" 4
.IX Item "pod2man"
.IP "s2p" 4
.IX Item "s2p"
.IP "splain" 4
.IX Item "splain"
.IP "xsubpp" 4
.IX Item "xsubpp"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall <\fIlarry@wall.org\fR>, with the help of oodles
of other folks.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 13132:" 4
.IX Item "Around line 13132:"
You forgot a '=back' before '=head1'
.IP "Around line 13134:" 4
.IX Item "Around line 13134:"
=back without =over
.IP "Around line 33755:" 4
.IX Item "Around line 33755:"
Non-ASCII character seen before =encoding in 'Skytta\*:'. Assuming \s-1UTF\-8\s0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltodo.1                                   0100644 0001750 0001750 00000010437 12566207447 022602  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTODO 1"
.TH PERLTODO 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltodo \- Perl TO\-DO List
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We no longer install the Perl 5 to-do list as a manpage, as installing
snapshot that becomes increasingly out of date isn't that useful to anyone.
The current Perl 5 to-do list is maintained in the git repository, and can
be viewed at <http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>
                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltodo5.16.1                               0100644 0001750 0001750 00000010116 12566207426 023103  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTODO 1"
.TH PERLTODO 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltodo \- Perl TO\-DO List
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We no longer install the Perl 5 to-do list as a manpage, as installing
snapshot that becomes increasingly out of date isn't that useful to anyone.
The current Perl 5 to-do list is maintained in the git repository, and can
be viewed at <http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>
                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltodo5.18.1                               0100644 0001750 0001750 00000010437 12566207447 023116  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTODO 1"
.TH PERLTODO 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltodo \- Perl TO\-DO List
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We no longer install the Perl 5 to-do list as a manpage, as installing
snapshot that becomes increasingly out of date isn't that useful to anyone.
The current Perl 5 to-do list is maintained in the git repository, and can
be viewed at <http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>
                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltooc.1                                   0100644 0001750 0001750 00000010127 12566207447 022575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOC 1"
.TH PERLTOOC 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltooc \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltooc5.16.1                               0100644 0001750 0001750 00000007606 12566207426 023114  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOC 1"
.TH PERLTOOC 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltooc \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltooc5.18.1                               0100644 0001750 0001750 00000010127 12566207447 023111  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOC 1"
.TH PERLTOOC 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltooc \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltoot.1                                   0100644 0001750 0001750 00000010127 12566207447 022616  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOT 1"
.TH PERLTOOT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltoot \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltoot5.16.1                               0100644 0001750 0001750 00000007606 12566207426 023135  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOT 1"
.TH PERLTOOT 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltoot \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltoot5.18.1                               0100644 0001750 0001750 00000010127 12566207447 023132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTOOT 1"
.TH PERLTOOT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltoot \- This document has been deleted
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For information on \s-1OO\s0 programming with Perl, please see perlootut
and perlobj.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltrap.1                                   0100644 0001750 0001750 00000032645 12566207447 022610  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRAP 1"
.TH PERLTRAP 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltrap \- Perl traps for the unwary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The biggest trap of all is forgetting to \f(CW\*(C`use warnings\*(C'\fR or use the \fB\-w\fR
switch; see perllexwarn and perlrun. The second biggest trap is not
making your entire program runnable under \f(CW\*(C`use strict\*(C'\fR.  The third biggest
trap is not reading the list of changes in this version of Perl; see
perldelta.
.SS "Awk Traps"
.IX Subsection "Awk Traps"
Accustomed \fBawk\fR users should take special note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
The English module, loaded via
.Sp
.Vb 1
\&    use English;
.Ve
.Sp
allows you to refer to special variables (like \f(CW$/\fR) with names (like
\&\f(CW$RS\fR), as though they were in \fBawk\fR; see perlvar for details.
.IP "\(bu" 4
Semicolons are required after all simple statements in Perl (except
at the end of a block).  Newline is not a statement delimiter.
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fRs and \f(CW\*(C`while\*(C'\fRs.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Arrays index from 0.  Likewise string positions in \fIsubstr()\fR and
\&\fIindex()\fR.
.IP "\(bu" 4
You have to decide whether your array has numeric or string indices.
.IP "\(bu" 4
Hash values do not spring into existence upon mere reference.
.IP "\(bu" 4
You have to decide whether you want to use string or numeric
comparisons.
.IP "\(bu" 4
Reading an input line does not split it for you.  You get to split it
to an array yourself.  And the \fIsplit()\fR operator has different
arguments than \fBawk\fR's.
.IP "\(bu" 4
The current input line is normally in \f(CW$_\fR, not \f(CW$0\fR.  It generally does
not have the newline stripped.  ($0 is the name of the program
executed.)  See perlvar.
.IP "\(bu" 4
$<\fIdigit\fR> does not refer to fields\*(--it refers to substrings matched
by the last match pattern.
.IP "\(bu" 4
The \fIprint()\fR statement does not add field and record separators unless
you set \f(CW$,\fR and \f(CW\*(C`$\e\*(C'\fR.  You can set \f(CW$OFS\fR and \f(CW$ORS\fR if you're using
the English module.
.IP "\(bu" 4
You must open your files before you print to them.
.IP "\(bu" 4
The range operator is \*(L"..\*(R", not comma.  The comma operator works as in
C.
.IP "\(bu" 4
The match operator is \*(L"=~\*(R", not \*(L"~\*(R".  (\*(L"~\*(R" is the one's complement
operator, as in C.)
.IP "\(bu" 4
The exponentiation operator is \*(L"**\*(R", not \*(L"^\*(R".  \*(L"^\*(R" is the \s-1XOR\s0
operator, as in C.  (You know, one could get the feeling that \fBawk\fR is
basically incompatible with C.)
.IP "\(bu" 4
The concatenation operator is \*(L".\*(R", not the null string.  (Using the
null string would render \f(CW\*(C`/pat/ /pat/\*(C'\fR unparsable, because the third slash
would be interpreted as a division operator\*(--the tokenizer is in fact
slightly context sensitive for operators like \*(L"/\*(R", \*(L"?\*(R", and \*(L">\*(R".
And in fact, \*(L".\*(R" itself can be the beginning of a number.)
.IP "\(bu" 4
The \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`exit\*(C'\fR, and \f(CW\*(C`continue\*(C'\fR keywords work differently.
.IP "\(bu" 4
The following variables work differently:
.Sp
.Vb 10
\&      Awk       Perl
\&      ARGC      scalar @ARGV (compare with $#ARGV)
\&      ARGV[0]   $0
\&      FILENAME  $ARGV
\&      FNR       $. \- something
\&      FS        (whatever you like)
\&      NF        $#Fld, or some such
\&      NR        $.
\&      OFMT      $#
\&      OFS       $,
\&      ORS       $\e
\&      RLENGTH   length($&)
\&      RS        $/
\&      RSTART    length($\`)
\&      SUBSEP    $;
.Ve
.IP "\(bu" 4
You cannot set \f(CW$RS\fR to a pattern, only a string.
.IP "\(bu" 4
When in doubt, run the \fBawk\fR construct through \fBa2p\fR and see what it
gives you.
.SS "C/\*(C+ Traps"
.IX Subsection "C/ Traps"
Cerebral C and \*(C+ programmers should take note of the following:
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fR's and \f(CW\*(C`while\*(C'\fR's.
.IP "\(bu" 4
You must use \f(CW\*(C`elsif\*(C'\fR rather than \f(CW\*(C`else if\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`break\*(C'\fR and \f(CW\*(C`continue\*(C'\fR keywords from C become in Perl \f(CW\*(C`last\*(C'\fR
and \f(CW\*(C`next\*(C'\fR, respectively.  Unlike in C, these do \fInot\fR work within a
\&\f(CW\*(C`do { } while\*(C'\fR construct.  See \*(L"Loop Control\*(R" in perlsyn.
.IP "\(bu" 4
The switch statement is called \f(CW\*(C`given/when\*(C'\fR and only available in
perl 5.10 or newer.  See \*(L"Switch Statements\*(R" in perlsyn.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Comments begin with \*(L"#\*(R", not \*(L"/*\*(R" or \*(L"//\*(R".  Perl may interpret C/\*(C+
comments as division operators, unterminated regular expressions or
the defined-or operator.
.IP "\(bu" 4
You can't take the address of anything, although a similar operator
in Perl is the backslash, which creates a reference.
.IP "\(bu" 4
\&\f(CW\*(C`ARGV\*(C'\fR must be capitalized.  \f(CW$ARGV[0]\fR is C's \f(CW\*(C`argv[1]\*(C'\fR, and \f(CW\*(C`argv[0]\*(C'\fR
ends up in \f(CW$0\fR.
.IP "\(bu" 4
System calls such as \fIlink()\fR, \fIunlink()\fR, \fIrename()\fR, etc. return nonzero for
success, not 0. (\fIsystem()\fR, however, returns zero for success.)
.IP "\(bu" 4
Signal handlers deal with signal names, not numbers.  Use \f(CW\*(C`kill \-l\*(C'\fR
to find their names on your system.
.SS "Sed Traps"
.IX Subsection "Sed Traps"
Seasoned \fBsed\fR programmers should take note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
Backreferences in substitutions use \*(L"$\*(R" rather than \*(L"\e\*(R".
.IP "\(bu" 4
The pattern matching metacharacters \*(L"(\*(R", \*(L")\*(R", and \*(L"|\*(R" do not have backslashes
in front.
.IP "\(bu" 4
The range operator is \f(CW\*(C`...\*(C'\fR, rather than comma.
.SS "Shell Traps"
.IX Subsection "Shell Traps"
Sharp shell programmers should take note of the following:
.IP "\(bu" 4
The backtick operator does variable interpolation without regard to
the presence of single quotes in the command.
.IP "\(bu" 4
The backtick operator does no translation of the return value, unlike \fBcsh\fR.
.IP "\(bu" 4
Shells (especially \fBcsh\fR) do several levels of substitution on each
command line.  Perl does substitution in only certain constructs
such as double quotes, backticks, angle brackets, and search patterns.
.IP "\(bu" 4
Shells interpret scripts a little bit at a time.  Perl compiles the
entire program before executing it (except for \f(CW\*(C`BEGIN\*(C'\fR blocks, which
execute at compile time).
.IP "\(bu" 4
The arguments are available via \f(CW@ARGV\fR, not \f(CW$1\fR, \f(CW$2\fR, etc.
.IP "\(bu" 4
The environment is not automatically made available as separate scalar
variables.
.IP "\(bu" 4
The shell's \f(CW\*(C`test\*(C'\fR uses \*(L"=\*(R", \*(L"!=\*(R", \*(L"<\*(R" etc for string comparisons and \*(L"\-eq\*(R",
\&\*(L"\-ne\*(R", \*(L"\-lt\*(R" etc for numeric comparisons. This is the reverse of Perl, which
uses \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`ne\*(C'\fR, \f(CW\*(C`lt\*(C'\fR for string comparisons, and \f(CW\*(C`==\*(C'\fR, \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`<\*(C'\fR etc
for numeric comparisons.
.SS "Perl Traps"
.IX Subsection "Perl Traps"
Practicing Perl Programmers should take note of the following:
.IP "\(bu" 4
Remember that many operations behave differently in a list
context than they do in a scalar one.  See perldata for details.
.IP "\(bu" 4
Avoid barewords if you can, especially all lowercase ones.
You can't tell by just looking at it whether a bareword is
a function or a string.  By using quotes on strings and
parentheses on function calls, you won't ever get them confused.
.IP "\(bu" 4
You cannot discern from mere inspection which builtins
are unary operators (like \fIchop()\fR and \fIchdir()\fR)
and which are list operators (like \fIprint()\fR and \fIunlink()\fR).
(Unless prototyped, user-defined subroutines can \fBonly\fR be list
operators, never unary ones.)  See perlop and perlsub.
.IP "\(bu" 4
People have a hard time remembering that some functions
default to \f(CW$_\fR, or \f(CW@ARGV\fR, or whatever, but that others which
you might expect to do not.
.IP "\(bu" 4
The <\s-1FH\s0> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is assigned to \f(CW$_\fR only if the
file read is the sole condition in a while loop:
.Sp
.Vb 3
\&    while (<FH>)      { }
\&    while (defined($_ = <FH>)) { }..
\&    <FH>;  # data discarded!
.Ve
.IP "\(bu" 4
Remember not to use \f(CW\*(C`=\*(C'\fR when you need \f(CW\*(C`=~\*(C'\fR;
these two constructs are quite different:
.Sp
.Vb 2
\&    $x =  /foo/;
\&    $x =~ /foo/;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`do {}\*(C'\fR construct isn't a real loop that you can use
loop control on.
.IP "\(bu" 4
Use \f(CW\*(C`my()\*(C'\fR for local variables whenever you can get away with
it (but see perlform for where you can't).
Using \f(CW\*(C`local()\*(C'\fR actually gives a local value to a global
variable, which leaves you open to unforeseen side-effects
of dynamic scoping.
.IP "\(bu" 4
If you localize an exported variable in a module, its exported value will
not change.  The local name becomes an alias to a new value but the
external name is still an alias for the original.
.PP
As always, if any of these are ever officially declared as bugs,
they'll be fixed and removed.
                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltrap5.16.1                               0100644 0001750 0001750 00000146753 12566207426 023125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRAP 1"
.TH PERLTRAP 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltrap \- Perl traps for the unwary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The biggest trap of all is forgetting to \f(CW\*(C`use warnings\*(C'\fR or use the \fB\-w\fR
switch; see perllexwarn and perlrun. The second biggest trap is not
making your entire program runnable under \f(CW\*(C`use strict\*(C'\fR.  The third biggest
trap is not reading the list of changes in this version of Perl; see
perldelta.
.SS "Awk Traps"
.IX Subsection "Awk Traps"
Accustomed \fBawk\fR users should take special note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
The English module, loaded via
.Sp
.Vb 1
\&    use English;
.Ve
.Sp
allows you to refer to special variables (like \f(CW$/\fR) with names (like
\&\f(CW$RS\fR), as though they were in \fBawk\fR; see perlvar for details.
.IP "\(bu" 4
Semicolons are required after all simple statements in Perl (except
at the end of a block).  Newline is not a statement delimiter.
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fRs and \f(CW\*(C`while\*(C'\fRs.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Arrays index from 0.  Likewise string positions in \fIsubstr()\fR and
\&\fIindex()\fR.
.IP "\(bu" 4
You have to decide whether your array has numeric or string indices.
.IP "\(bu" 4
Hash values do not spring into existence upon mere reference.
.IP "\(bu" 4
You have to decide whether you want to use string or numeric
comparisons.
.IP "\(bu" 4
Reading an input line does not split it for you.  You get to split it
to an array yourself.  And the \fIsplit()\fR operator has different
arguments than \fBawk\fR's.
.IP "\(bu" 4
The current input line is normally in \f(CW$_\fR, not \f(CW$0\fR.  It generally does
not have the newline stripped.  ($0 is the name of the program
executed.)  See perlvar.
.IP "\(bu" 4
$<\fIdigit\fR> does not refer to fields\*(--it refers to substrings matched
by the last match pattern.
.IP "\(bu" 4
The \fIprint()\fR statement does not add field and record separators unless
you set \f(CW$,\fR and \f(CW\*(C`$\e\*(C'\fR.  You can set \f(CW$OFS\fR and \f(CW$ORS\fR if you're using
the English module.
.IP "\(bu" 4
You must open your files before you print to them.
.IP "\(bu" 4
The range operator is \*(L"..\*(R", not comma.  The comma operator works as in
C.
.IP "\(bu" 4
The match operator is \*(L"=~\*(R", not \*(L"~\*(R".  (\*(L"~\*(R" is the one's complement
operator, as in C.)
.IP "\(bu" 4
The exponentiation operator is \*(L"**\*(R", not \*(L"^\*(R".  \*(L"^\*(R" is the \s-1XOR\s0
operator, as in C.  (You know, one could get the feeling that \fBawk\fR is
basically incompatible with C.)
.IP "\(bu" 4
The concatenation operator is \*(L".\*(R", not the null string.  (Using the
null string would render \f(CW\*(C`/pat/ /pat/\*(C'\fR unparsable, because the third slash
would be interpreted as a division operator\*(--the tokenizer is in fact
slightly context sensitive for operators like \*(L"/\*(R", \*(L"?\*(R", and \*(L">\*(R".
And in fact, \*(L".\*(R" itself can be the beginning of a number.)
.IP "\(bu" 4
The \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`exit\*(C'\fR, and \f(CW\*(C`continue\*(C'\fR keywords work differently.
.IP "\(bu" 4
The following variables work differently:
.Sp
.Vb 10
\&      Awk       Perl
\&      ARGC      scalar @ARGV (compare with $#ARGV)
\&      ARGV[0]   $0
\&      FILENAME  $ARGV
\&      FNR       $. \- something
\&      FS        (whatever you like)
\&      NF        $#Fld, or some such
\&      NR        $.
\&      OFMT      $#
\&      OFS       $,
\&      ORS       $\e
\&      RLENGTH   length($&)
\&      RS        $/
\&      RSTART    length($\`)
\&      SUBSEP    $;
.Ve
.IP "\(bu" 4
You cannot set \f(CW$RS\fR to a pattern, only a string.
.IP "\(bu" 4
When in doubt, run the \fBawk\fR construct through \fBa2p\fR and see what it
gives you.
.SS "C/\*(C+ Traps"
.IX Subsection "C/ Traps"
Cerebral C and \*(C+ programmers should take note of the following:
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fR's and \f(CW\*(C`while\*(C'\fR's.
.IP "\(bu" 4
You must use \f(CW\*(C`elsif\*(C'\fR rather than \f(CW\*(C`else if\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`break\*(C'\fR and \f(CW\*(C`continue\*(C'\fR keywords from C become in Perl \f(CW\*(C`last\*(C'\fR
and \f(CW\*(C`next\*(C'\fR, respectively.  Unlike in C, these do \fInot\fR work within a
\&\f(CW\*(C`do { } while\*(C'\fR construct.  See \*(L"Loop Control\*(R" in perlsyn.
.IP "\(bu" 4
The switch statement is called \f(CW\*(C`given/when\*(C'\fR and only available in
perl 5.10 or newer.  See \*(L"Switch Statements\*(R" in perlsyn.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Comments begin with \*(L"#\*(R", not \*(L"/*\*(R" or \*(L"//\*(R".  Perl may interpret C/\*(C+
comments as division operators, unterminated regular expressions or
the defined-or operator.
.IP "\(bu" 4
You can't take the address of anything, although a similar operator
in Perl is the backslash, which creates a reference.
.IP "\(bu" 4
\&\f(CW\*(C`ARGV\*(C'\fR must be capitalized.  \f(CW$ARGV[0]\fR is C's \f(CW\*(C`argv[1]\*(C'\fR, and \f(CW\*(C`argv[0]\*(C'\fR
ends up in \f(CW$0\fR.
.IP "\(bu" 4
System calls such as \fIlink()\fR, \fIunlink()\fR, \fIrename()\fR, etc. return nonzero for
success, not 0. (\fIsystem()\fR, however, returns zero for success.)
.IP "\(bu" 4
Signal handlers deal with signal names, not numbers.  Use \f(CW\*(C`kill \-l\*(C'\fR
to find their names on your system.
.SS "Sed Traps"
.IX Subsection "Sed Traps"
Seasoned \fBsed\fR programmers should take note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
Backreferences in substitutions use \*(L"$\*(R" rather than \*(L"\e\*(R".
.IP "\(bu" 4
The pattern matching metacharacters \*(L"(\*(R", \*(L")\*(R", and \*(L"|\*(R" do not have backslashes
in front.
.IP "\(bu" 4
The range operator is \f(CW\*(C`...\*(C'\fR, rather than comma.
.SS "Shell Traps"
.IX Subsection "Shell Traps"
Sharp shell programmers should take note of the following:
.IP "\(bu" 4
The backtick operator does variable interpolation without regard to
the presence of single quotes in the command.
.IP "\(bu" 4
The backtick operator does no translation of the return value, unlike \fBcsh\fR.
.IP "\(bu" 4
Shells (especially \fBcsh\fR) do several levels of substitution on each
command line.  Perl does substitution in only certain constructs
such as double quotes, backticks, angle brackets, and search patterns.
.IP "\(bu" 4
Shells interpret scripts a little bit at a time.  Perl compiles the
entire program before executing it (except for \f(CW\*(C`BEGIN\*(C'\fR blocks, which
execute at compile time).
.IP "\(bu" 4
The arguments are available via \f(CW@ARGV\fR, not \f(CW$1\fR, \f(CW$2\fR, etc.
.IP "\(bu" 4
The environment is not automatically made available as separate scalar
variables.
.IP "\(bu" 4
The shell's \f(CW\*(C`test\*(C'\fR uses \*(L"=\*(R", \*(L"!=\*(R", \*(L"<\*(R" etc for string comparisons and \*(L"\-eq\*(R",
\&\*(L"\-ne\*(R", \*(L"\-lt\*(R" etc for numeric comparisons. This is the reverse of Perl, which
uses \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`ne\*(C'\fR, \f(CW\*(C`lt\*(C'\fR for string comparisons, and \f(CW\*(C`==\*(C'\fR, \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`<\*(C'\fR etc
for numeric comparisons.
.SS "Perl Traps"
.IX Subsection "Perl Traps"
Practicing Perl Programmers should take note of the following:
.IP "\(bu" 4
Remember that many operations behave differently in a list
context than they do in a scalar one.  See perldata for details.
.IP "\(bu" 4
Avoid barewords if you can, especially all lowercase ones.
You can't tell by just looking at it whether a bareword is
a function or a string.  By using quotes on strings and
parentheses on function calls, you won't ever get them confused.
.IP "\(bu" 4
You cannot discern from mere inspection which builtins
are unary operators (like \fIchop()\fR and \fIchdir()\fR)
and which are list operators (like \fIprint()\fR and \fIunlink()\fR).
(Unless prototyped, user-defined subroutines can \fBonly\fR be list
operators, never unary ones.)  See perlop and perlsub.
.IP "\(bu" 4
People have a hard time remembering that some functions
default to \f(CW$_\fR, or \f(CW@ARGV\fR, or whatever, but that others which
you might expect to do not.
.IP "\(bu" 4
The <\s-1FH\s0> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is assigned to \f(CW$_\fR only if the
file read is the sole condition in a while loop:
.Sp
.Vb 3
\&    while (<FH>)      { }
\&    while (defined($_ = <FH>)) { }..
\&    <FH>;  # data discarded!
.Ve
.IP "\(bu" 4
Remember not to use \f(CW\*(C`=\*(C'\fR when you need \f(CW\*(C`=~\*(C'\fR;
these two constructs are quite different:
.Sp
.Vb 2
\&    $x =  /foo/;
\&    $x =~ /foo/;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`do {}\*(C'\fR construct isn't a real loop that you can use
loop control on.
.IP "\(bu" 4
Use \f(CW\*(C`my()\*(C'\fR for local variables whenever you can get away with
it (but see perlform for where you can't).
Using \f(CW\*(C`local()\*(C'\fR actually gives a local value to a global
variable, which leaves you open to unforeseen side-effects
of dynamic scoping.
.IP "\(bu" 4
If you localize an exported variable in a module, its exported value will
not change.  The local name becomes an alias to a new value but the
external name is still an alias for the original.
.SS "Perl4 to Perl5 Traps"
.IX Subsection "Perl4 to Perl5 Traps"
Practicing Perl4 Programmers should take note of the following
Perl4\-to\-Perl5 specific traps.
.PP
They're crudely ordered according to the following list:
.IP "Discontinuance, Deprecation, and BugFix traps" 4
.IX Item "Discontinuance, Deprecation, and BugFix traps"
Anything that's been fixed as a perl4 bug, removed as a perl4 feature
or deprecated as a perl4 feature with the intent to encourage usage of
some other perl5 feature.
.IP "Parsing Traps" 4
.IX Item "Parsing Traps"
Traps that appear to stem from the new parser.
.IP "Numerical Traps" 4
.IX Item "Numerical Traps"
Traps having to do with numerical or mathematical operators.
.IP "General data type traps" 4
.IX Item "General data type traps"
Traps involving perl standard data types.
.IP "Context Traps \- scalar, list contexts" 4
.IX Item "Context Traps - scalar, list contexts"
Traps related to context within lists, scalar statements/declarations.
.IP "Precedence Traps" 4
.IX Item "Precedence Traps"
Traps related to the precedence of parsing, evaluation, and execution of
code.
.IP "General Regular Expression Traps using s///, etc." 4
.IX Item "General Regular Expression Traps using s///, etc."
Traps related to the use of pattern matching.
.IP "Subroutine, Signal, Sorting Traps" 4
.IX Item "Subroutine, Signal, Sorting Traps"
Traps related to the use of signals and signal handlers, general subroutines,
and sorting, along with sorting subroutines.
.IP "\s-1OS\s0 Traps" 4
.IX Item "OS Traps"
OS-specific traps.
.IP "\s-1DBM\s0 Traps" 4
.IX Item "DBM Traps"
Traps specific to the use of \f(CW\*(C`dbmopen()\*(C'\fR, and specific dbm implementations.
.IP "Unclassified Traps" 4
.IX Item "Unclassified Traps"
Everything else.
.PP
If you find an example of a conversion trap that is not listed here,
please submit it to <\fIperlbug@perl.org\fR> for inclusion.
Also note that at least some of these can be caught with the
\&\f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR switch.
.SS "Discontinuance, Deprecation, and BugFix traps"
.IX Subsection "Discontinuance, Deprecation, and BugFix traps"
Anything that has been discontinued, deprecated, or fixed as
a bug from perl4.
.IP "\(bu" 4
Symbols starting with \*(L"_\*(R" no longer forced into main
.Sp
Symbols starting with \*(L"_\*(R" are no longer forced into package main, except
for \f(CW$_\fR itself (and \f(CW@_\fR, etc.).
.Sp
.Vb 2
\&    package test;
\&    $_legacy = 1;
\&
\&    package main;
\&    print "\e$_legacy is ",$_legacy,"\en";
\&
\&    # perl4 prints: $_legacy is 1
\&    # perl5 prints: $_legacy is
.Ve
.IP "\(bu" 4
Double-colon valid package separator in variable name
.Sp
Double-colon is now a valid package separator in a variable name.  Thus these
behave differently in perl4 vs. perl5, because the packages don't exist.
.Sp
.Vb 3
\&    $a=1;$b=2;$c=3;$var=4;
\&    print "$a::$b::$c ";
\&    print "$var::abc::xyz\en";
\&
\&    # perl4 prints: 1::2::3 4::abc::xyz
\&    # perl5 prints: 3
.Ve
.Sp
Given that \f(CW\*(C`::\*(C'\fR is now the preferred package delimiter, it is debatable
whether this should be classed as a bug or not.
(The older package delimiter, ' ,is used here)
.Sp
.Vb 2
\&    $x = 10;
\&    print "x=${\*(Aqx}\en";
\&
\&    # perl4 prints: x=10
\&    # perl5 prints: Can\*(Aqt find string terminator "\*(Aq" anywhere before EOF
.Ve
.Sp
You can avoid this problem, and remain compatible with perl4, if you
always explicitly include the package name:
.Sp
.Vb 2
\&    $x = 10;
\&    print "x=${main\*(Aqx}\en";
.Ve
.Sp
Also see precedence traps, for parsing \f(CW$:\fR.
.IP "\(bu" 4
2nd and 3rd args to \f(CW\*(C`splice()\*(C'\fR are now in scalar context
.Sp
The second and third arguments of \f(CW\*(C`splice()\*(C'\fR are now evaluated in scalar
context (as the Camel says) rather than list context.
.Sp
.Vb 5
\&    sub sub1{return(0,2) }          # return a 2\-element list
\&    sub sub2{ return(1,2,3)}        # return a 3\-element list
\&    @a1 = ("a","b","c","d","e");
\&    @a2 = splice(@a1,&sub1,&sub2);
\&    print join(\*(Aq \*(Aq,@a2),"\en";
\&
\&    # perl4 prints: a b
\&    # perl5 prints: c d e
.Ve
.IP "\(bu" 4
Can't do \f(CW\*(C`goto\*(C'\fR into a block that is optimized away
.Sp
You can't do a \f(CW\*(C`goto\*(C'\fR into a block that is optimized away.  Darn.
.Sp
.Vb 1
\&    goto marker1;
\&
\&    for(1){
\&    marker1:
\&        print "Here I is!\en";
\&    }
\&
\&    # perl4 prints: Here I is!
\&    # perl5 errors: Can\*(Aqt "goto" into the middle of a foreach loop
.Ve
.IP "\(bu" 4
Can't use whitespace as variable name or quote delimiter
.Sp
It is no longer syntactically legal to use whitespace as the name
of a variable, or as a delimiter for any kind of quote construct.
Double darn.
.Sp
.Vb 3
\&    $a = ("foo bar");
\&    $b = q baz ;
\&    print "a is $a, b is $b\en";
\&
\&    # perl4 prints: a is foo bar, b is baz
\&    # perl5 errors: Bareword found where operator expected
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`while/if BLOCK BLOCK\*(C'\fR gone
.Sp
The archaic while/if \s-1BLOCK\s0 \s-1BLOCK\s0 syntax is no longer supported.
.Sp
.Vb 6
\&    if { 1 } {
\&        print "True!";
\&    }
\&    else {
\&        print "False!";
\&    }
\&
\&    # perl4 prints: True!
\&    # perl5 errors: syntax error at test.pl line 1, near "if {"
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`**\*(C'\fR binds tighter than unary minus
.Sp
The \f(CW\*(C`**\*(C'\fR operator now binds more tightly than unary minus.
It was documented to work this way before, but didn't.
.Sp
.Vb 1
\&    print \-4**2,"\en";
\&
\&    # perl4 prints: 16
\&    # perl5 prints: \-16
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`foreach\*(C'\fR changed when iterating over a list
.Sp
The meaning of \f(CW\*(C`foreach{}\*(C'\fR has changed slightly when it is iterating over a
list which is not an array.  This used to assign the list to a
temporary array, but no longer does so (for efficiency).  This means
that you'll now be iterating over the actual values, not over copies of
the values.  Modifications to the loop variable can change the original
values.
.Sp
.Vb 5
\&    @list = (\*(Aqab\*(Aq,\*(Aqabc\*(Aq,\*(Aqbcd\*(Aq,\*(Aqdef\*(Aq);
\&    foreach $var (grep(/ab/,@list)){
\&        $var = 1;
\&    }
\&    print (join(\*(Aq:\*(Aq,@list));
\&
\&    # perl4 prints: ab:abc:bcd:def
\&    # perl5 prints: 1:1:bcd:def
.Ve
.Sp
To retain Perl4 semantics you need to assign your list
explicitly to a temporary array and then iterate over that.  For
example, you might need to change
.Sp
.Vb 1
\&    foreach $var (grep(/ab/,@list)){
.Ve
.Sp
to
.Sp
.Vb 1
\&    foreach $var (@tmp = grep(/ab/,@list)){
.Ve
.Sp
Otherwise changing \f(CW$var\fR will clobber the values of \f(CW@list\fR.  (This most often
happens when you use \f(CW$_\fR for the loop variable, and call subroutines in
the loop that don't properly localize \f(CW$_\fR.)
.IP "\(bu" 4
\&\f(CW\*(C`split\*(C'\fR with no args behavior changed
.Sp
\&\f(CW\*(C`split\*(C'\fR with no arguments now behaves like \f(CW\*(C`split \*(Aq \*(Aq\*(C'\fR (which doesn't
return an initial null field if \f(CW$_\fR starts with whitespace), it used to
behave like \f(CW\*(C`split /\es+/\*(C'\fR (which does).
.Sp
.Vb 2
\&    $_ = \*(Aq hi mom\*(Aq;
\&    print join(\*(Aq:\*(Aq, split);
\&
\&    # perl4 prints: :hi:mom
\&    # perl5 prints: hi:mom
.Ve
.IP "\(bu" 4
\&\fB\-e\fR behavior fixed
.Sp
Perl 4 would ignore any text which was attached to an \fB\-e\fR switch,
always taking the code snippet from the following arg.  Additionally, it
would silently accept an \fB\-e\fR switch without a following arg.  Both of
these behaviors have been fixed.
.Sp
.Vb 1
\&    perl \-e\*(Aqprint "attached to \-e"\*(Aq \*(Aqprint "separate arg"\*(Aq
\&
\&    # perl4 prints: separate arg
\&    # perl5 prints: attached to \-e
\&
\&    perl \-e
\&
\&    # perl4 prints:
\&    # perl5 dies: No code specified for \-e.
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`push\*(C'\fR returns number of elements in resulting list
.Sp
In Perl 4 the return value of \f(CW\*(C`push\*(C'\fR was undocumented, but it was
actually the last value being pushed onto the target list.  In Perl 5
the return value of \f(CW\*(C`push\*(C'\fR is documented, but has changed, it is the
number of elements in the resulting list.
.Sp
.Vb 2
\&    @x = (\*(Aqexisting\*(Aq);
\&    print push(@x, \*(Aqfirst new\*(Aq, \*(Aqsecond new\*(Aq);
\&
\&    # perl4 prints: second new
\&    # perl5 prints: 3
.Ve
.IP "\(bu" 4
Some error messages differ
.Sp
Some error messages will be different.
.IP "\(bu" 4
\&\f(CW\*(C`split()\*(C'\fR honors subroutine args
.Sp
In Perl 4, if in list context the delimiters to the first argument of
\&\f(CW\*(C`split()\*(C'\fR were \f(CW\*(C`??\*(C'\fR, the result would be placed in \f(CW@_\fR as well as
being returned.   Perl 5 has more respect for your subroutine arguments.
.IP "\(bu" 4
Bugs removed
.Sp
Some bugs may have been inadvertently removed.  :\-)
.SS "Parsing Traps"
.IX Subsection "Parsing Traps"
Perl4\-to\-Perl5 traps from having to do with parsing.
.IP "\(bu" 4
Space between . and = triggers syntax error
.Sp
Note the space between . and =
.Sp
.Vb 2
\&    $string . = "more string";
\&    print $string;
\&
\&    # perl4 prints: more string
\&    # perl5 prints: syntax error at \- line 1, near ". ="
.Ve
.IP "\(bu" 4
Better parsing in perl 5
.Sp
Better parsing in perl 5
.Sp
.Vb 3
\&    sub foo {}
\&    &foo
\&    print("hello, world\en");
\&
\&    # perl4 prints: hello, world
\&    # perl5 prints: syntax error
.Ve
.IP "\(bu" 4
Function parsing
.Sp
\&\*(L"if it looks like a function, it is a function\*(R" rule.
.Sp
.Vb 2
\&  print
\&    ($foo == 1) ? "is one\en" : "is zero\en";
\&
\&    # perl4 prints: is zero
\&    # perl5 warns: "Useless use of a constant in void context" if using \-w
.Ve
.IP "\(bu" 4
String interpolation of \f(CW$#array\fR differs
.Sp
String interpolation of the \f(CW$#array\fR construct differs when braces
are to used around the name.
.Sp
.Vb 2
\&    @a = (1..3);
\&    print "${#a}";
\&
\&    # perl4 prints: 2
\&    # perl5 fails with syntax error
\&
\&    @a = (1..3);
\&    print "$#{a}";
\&
\&    # perl4 prints: {a}
\&    # perl5 prints: 2
.Ve
.IP "\(bu" 4
Perl guesses on \f(CW\*(C`map\*(C'\fR, \f(CW\*(C`grep\*(C'\fR followed by \f(CW\*(C`{\*(C'\fR if it starts \s-1BLOCK\s0 or hash ref
.Sp
When perl sees \f(CW\*(C`map {\*(C'\fR (or \f(CW\*(C`grep {\*(C'\fR), it has to guess whether the \f(CW\*(C`{\*(C'\fR
starts a \s-1BLOCK\s0 or a hash reference. If it guesses wrong, it will report
a syntax error near the \f(CW\*(C`}\*(C'\fR and the missing (or unexpected) comma.
.Sp
Use unary \f(CW\*(C`+\*(C'\fR before \f(CW\*(C`{\*(C'\fR on a hash reference, and unary \f(CW\*(C`+\*(C'\fR applied
to the first thing in a \s-1BLOCK\s0 (after \f(CW\*(C`{\*(C'\fR), for perl to guess right all
the time. (See \*(L"map\*(R" in perlfunc.)
.SS "Numerical Traps"
.IX Subsection "Numerical Traps"
Perl4\-to\-Perl5 traps having to do with numerical operators,
operands, or output from same.
.IP "\(bu" 5
Formatted output and significant digits
.Sp
Formatted output and significant digits.  In general, Perl 5
tries to be more precise.  For example, on a Solaris Sparc:
.Sp
.Vb 2
\&    print 7.373504 \- 0, "\en";
\&    printf "%20.18f\en", 7.373504 \- 0;
\&
\&    # Perl4 prints:
\&    7.3750399999999996141
\&    7.375039999999999614
\&
\&    # Perl5 prints:
\&    7.373504
\&    7.373503999999999614
.Ve
.Sp
Notice how the first result looks better in Perl 5.
.Sp
Your results may vary, since your floating point formatting routines
and even floating point format may be slightly different.
.IP "\(bu" 5
Auto-increment operator over signed int limit deleted
.Sp
This specific item has been deleted.  It demonstrated how the auto-increment
operator would not catch when a number went over the signed int limit.  Fixed
in version 5.003_04.  But always be wary when using large integers.
If in doubt:
.Sp
.Vb 1
\&   use Math::BigInt;
.Ve
.IP "\(bu" 5
Assignment of return values from numeric equality tests doesn't work
.Sp
Assignment of return values from numeric equality tests
does not work in perl5 when the test evaluates to false (0).
Logical tests now return a null, instead of 0
.Sp
.Vb 2
\&    $p = ($test == 1);
\&    print $p,"\en";
\&
\&    # perl4 prints: 0
\&    # perl5 prints:
.Ve
.Sp
Also see \*(L"//, etc.\*(R"\*(L" in \*(R"General Regular Expression Traps using s
for another example of this new feature...
.IP "\(bu" 5
Bitwise string ops
.Sp
When bitwise operators which can operate upon either numbers or
strings (\f(CW\*(C`& | ^ ~\*(C'\fR) are given only strings as arguments, perl4 would
treat the operands as bitstrings so long as the program contained a call
to the \f(CW\*(C`vec()\*(C'\fR function. perl5 treats the string operands as bitstrings.
(See \*(L"Bitwise String Operators\*(R" in perlop for more details.)
.Sp
.Vb 6
\&    $fred = "10";
\&    $barney = "12";
\&    $betty = $fred & $barney;
\&    print "$betty\en";
\&    # Uncomment the next line to change perl4\*(Aqs behavior
\&    # ($dummy) = vec("dummy", 0, 0);
\&
\&    # Perl4 prints:
\&    8
\&
\&    # Perl5 prints:
\&    10
\&
\&    # If vec() is used anywhere in the program, both print:
\&    10
.Ve
.SS "General data type traps"
.IX Subsection "General data type traps"
Perl4\-to\-Perl5 traps involving most data-types, and their usage
within certain expressions and/or context.
.IP "\(bu" 5
Negative array subscripts now count from the end of array
.Sp
Negative array subscripts now count from the end of the array.
.Sp
.Vb 2
\&    @a = (1, 2, 3, 4, 5);
\&    print "The third element of the array is $a[3] also expressed as $a[\-2] \en";
\&
\&    # perl4 prints: The third element of the array is 4 also expressed as
\&    # perl5 prints: The third element of the array is 4 also expressed as 4
.Ve
.IP "\(bu" 5
Setting \f(CW$#array\fR lower now discards array elements
.Sp
Setting \f(CW$#array\fR lower now discards array elements, and makes them
impossible to recover.
.Sp
.Vb 6
\&    @a = (a,b,c,d,e);
\&    print "Before: ",join(\*(Aq\*(Aq,@a);
\&    $#a =1;
\&    print ", After: ",join(\*(Aq\*(Aq,@a);
\&    $#a =3;
\&    print ", Recovered: ",join(\*(Aq\*(Aq,@a),"\en";
\&
\&    # perl4 prints: Before: abcde, After: ab, Recovered: abcd
\&    # perl5 prints: Before: abcde, After: ab, Recovered: ab
.Ve
.IP "\(bu" 5
Hashes get defined before use
.Sp
Hashes get defined before use
.Sp
.Vb 4
\&    local($s,@a,%h);
\&    die "scalar \e$s defined" if defined($s);
\&    die "array \e@a defined" if defined(@a);
\&    die "hash \e%h defined" if defined(%h);
\&
\&    # perl4 prints:
\&    # perl5 dies: hash %h defined
.Ve
.Sp
Perl will now generate a warning when it sees defined(@a) and
defined(%h).
.IP "\(bu" 5
Glob assignment from localized variable to variable
.Sp
glob assignment from variable to variable will fail if the assigned
variable is localized subsequent to the assignment
.Sp
.Vb 4
\&    @a = ("This is Perl 4");
\&    *b = *a;
\&    local(@a);
\&    print @b,"\en";
\&
\&    # perl4 prints: This is Perl 4
\&    # perl5 prints:
.Ve
.IP "\(bu" 5
Assigning \f(CW\*(C`undef\*(C'\fR to glob
.Sp
Assigning \f(CW\*(C`undef\*(C'\fR to a glob has no effect in Perl 5.   In Perl 4
it undefines the associated scalar (but may have other side effects
including SEGVs). Perl 5 will also warn if \f(CW\*(C`undef\*(C'\fR is assigned to a
typeglob. (Note that assigning \f(CW\*(C`undef\*(C'\fR to a typeglob is different
than calling the \f(CW\*(C`undef\*(C'\fR function on a typeglob (\f(CW\*(C`undef *foo\*(C'\fR), which
has quite a few effects.
.Sp
.Vb 3
\&    $foo = "bar";
\&    *foo = undef;
\&    print $foo;
\&
\&    # perl4 prints:
\&    # perl4 warns: "Use of uninitialized variable" if using \-w
\&    # perl5 prints: bar
\&    # perl5 warns: "Undefined value assigned to typeglob" if using \-w
.Ve
.IP "\(bu" 5
Changes in unary negation (of strings)
.Sp
Changes in unary negation (of strings)
This change effects both the return value and what it
does to auto(magic)increment.
.Sp
.Vb 4
\&    $x = "aaa";
\&    print ++$x," : ";
\&    print \-$x," : ";
\&    print ++$x,"\en";
\&
\&    # perl4 prints: aab : \-0 : 1
\&    # perl5 prints: aab : \-aab : aac
.Ve
.IP "\(bu" 5
Modifying of constants prohibited
.Sp
perl 4 lets you modify constants:
.Sp
.Vb 10
\&    $foo = "x";
\&    &mod($foo);
\&    for ($x = 0; $x < 3; $x++) {
\&        &mod("a");
\&    }
\&    sub mod {
\&        print "before: $_[0]";
\&        $_[0] = "m";
\&        print "  after: $_[0]\en";
\&    }
\&
\&    # perl4:
\&    # before: x  after: m
\&    # before: a  after: m
\&    # before: m  after: m
\&    # before: m  after: m
\&
\&    # Perl5:
\&    # before: x  after: m
\&    # Modification of a read\-only value attempted at foo.pl line 12.
\&    # before: a
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`defined $var\*(C'\fR behavior changed
.Sp
The behavior is slightly different for:
.Sp
.Vb 1
\&    print "$x", defined $x
\&
\&    # perl 4: 1
\&    # perl 5: <no output, $x is not called into existence>
.Ve
.IP "\(bu" 5
Variable Suicide
.Sp
Variable suicide behavior is more consistent under Perl 5.
Perl5 exhibits the same behavior for hashes and scalars,
that perl4 exhibits for only scalars.
.Sp
.Vb 4
\&    $aGlobal{ "aKey" } = "global value";
\&    print "MAIN:", $aGlobal{"aKey"}, "\en";
\&    $GlobalLevel = 0;
\&    &test( *aGlobal );
\&
\&    sub test {
\&        local( *theArgument ) = @_;
\&        local( %aNewLocal ); # perl 4 != 5.001l,m
\&        $aNewLocal{"aKey"} = "this should never appear";
\&        print "SUB: ", $theArgument{"aKey"}, "\en";
\&        $aNewLocal{"aKey"} = "level $GlobalLevel";   # what should print
\&        $GlobalLevel++;
\&        if( $GlobalLevel<4 ) {
\&            &test( *aNewLocal );
\&        }
\&    }
\&
\&    # Perl4:
\&    # MAIN:global value
\&    # SUB: global value
\&    # SUB: level 0
\&    # SUB: level 1
\&    # SUB: level 2
\&
\&    # Perl5:
\&    # MAIN:global value
\&    # SUB: global value
\&    # SUB: this should never appear
\&    # SUB: this should never appear
\&    # SUB: this should never appear
.Ve
.SS "Context Traps \- scalar, list contexts"
.IX Subsection "Context Traps - scalar, list contexts"
.IP "\(bu" 5
Elements of argument lists for formats evaluated in list context
.Sp
The elements of argument lists for formats are now evaluated in list
context.  This means you can interpolate list values now.
.Sp
.Vb 6
\&    @fmt = ("foo","bar","baz");
\&    format STDOUT=
\&    @<<<<< @||||| @>>>>>
\&    @fmt;
\&    .
\&    write;
\&
\&    # perl4 errors:  Please use commas to separate fields in file
\&    # perl5 prints: foo     bar      baz
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`caller()\*(C'\fR returns false value in scalar context if no caller present
.Sp
The \f(CW\*(C`caller()\*(C'\fR function now returns a false value in a scalar context
if there is no caller.  This lets library files determine if they're
being required.
.Sp
.Vb 1
\&    caller() ? (print "You rang?\en") : (print "Got a 0\en");
\&
\&    # perl4 errors: There is no caller
\&    # perl5 prints: Got a 0
.Ve
.IP "\(bu" 5
Comma operator in scalar context gives scalar context to args
.Sp
The comma operator in a scalar context is now guaranteed to give a
scalar context to its last argument. It gives scalar or void context
to any preceding arguments, depending on circumstances.
.Sp
.Vb 3
\&    @y= (\*(Aqa\*(Aq,\*(Aqb\*(Aq,\*(Aqc\*(Aq);
\&    $x = (1, 2, @y);
\&    print "x = $x\en";
\&
\&    # Perl4 prints:  x = c   # Interpolates array @y into the list
\&    # Perl5 prints:  x = 3   # Evaluates array @y in scalar context
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`sprintf()\*(C'\fR prototyped as \f(CW\*(C`($;@)\*(C'\fR
.Sp
\&\f(CW\*(C`sprintf()\*(C'\fR is prototyped as ($;@), so its first argument is given scalar
context. Thus, if passed an array, it will probably not do what you want,
unlike Perl 4:
.Sp
.Vb 3
\&    @z = (\*(Aq%s%s\*(Aq, \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq);
\&    $x = sprintf(@z);
\&    print $x;
\&
\&    # perl4 prints: foobar
\&    # perl5 prints: 3
.Ve
.Sp
\&\f(CW\*(C`printf()\*(C'\fR works the same as it did in Perl 4, though:
.Sp
.Vb 2
\&    @z = (\*(Aq%s%s\*(Aq, \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq);
\&    printf STDOUT (@z);
\&
\&    # perl4 prints: foobar
\&    # perl5 prints: foobar
.Ve
.SS "Precedence Traps"
.IX Subsection "Precedence Traps"
Perl4\-to\-Perl5 traps involving precedence order.
.PP
Perl 4 has almost the same precedence rules as Perl 5 for the operators
that they both have.  Perl 4 however, seems to have had some
inconsistencies that made the behavior differ from what was documented.
.IP "\(bu" 5
\&\s-1LHS\s0 vs. \s-1RHS\s0 of any assignment operator
.Sp
\&\s-1LHS\s0 vs. \s-1RHS\s0 of any assignment operator.  \s-1LHS\s0 is evaluated first
in perl4, second in perl5; this can affect the relationship
between side-effects in sub-expressions.
.Sp
.Vb 3
\&    @arr = ( \*(Aqleft\*(Aq, \*(Aqright\*(Aq );
\&    $a{shift @arr} = shift @arr;
\&    print join( \*(Aq \*(Aq, keys %a );
\&
\&    # perl4 prints: left
\&    # perl5 prints: right
.Ve
.IP "\(bu" 5
Semantic errors introduced due to precedence
.Sp
These are now semantic errors because of precedence:
.Sp
.Vb 6
\&    @list = (1,2,3,4,5);
\&    %map = ("a",1,"b",2,"c",3,"d",4);
\&    $n = shift @list + 2;   # first item in list plus 2
\&    print "n is $n, ";
\&    $m = keys %map + 2;     # number of items in hash plus 2
\&    print "m is $m\en";
\&
\&    # perl4 prints: n is 3, m is 6
\&    # perl5 errors and fails to compile
.Ve
.IP "\(bu" 5
Precedence of assignment operators same as the precedence of assignment
.Sp
The precedence of assignment operators is now the same as the precedence
of assignment.  Perl 4 mistakenly gave them the precedence of the associated
operator.  So you now must parenthesize them in expressions like
.Sp
.Vb 1
\&    /foo/ ? ($a += 2) : ($a \-= 2);
.Ve
.Sp
Otherwise
.Sp
.Vb 1
\&    /foo/ ? $a += 2 : $a \-= 2
.Ve
.Sp
would be erroneously parsed as
.Sp
.Vb 1
\&    (/foo/ ? $a += 2 : $a) \-= 2;
.Ve
.Sp
On the other hand,
.Sp
.Vb 1
\&    $a += /foo/ ? 1 : 2;
.Ve
.Sp
now works as a C programmer would expect.
.IP "\(bu" 5
\&\f(CW\*(C`open\*(C'\fR requires parentheses around filehandle
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.Sp
is now incorrect.  You need parentheses around the filehandle.
Otherwise, perl5 leaves the statement as its default precedence:
.Sp
.Vb 1
\&    open(FOO || die);
\&
\&    # perl4 opens or dies
\&    # perl5 opens FOO, dying only if \*(AqFOO\*(Aq is false, i.e. never
.Ve
.IP "\(bu" 5
\&\f(CW$:\fR precedence over \f(CW$::\fR gone
.Sp
perl4 gives the special variable, \f(CW$:\fR precedence, where perl5
treats \f(CW$::\fR as main \f(CW\*(C`package\*(C'\fR
.Sp
.Vb 1
\&    $a = "x"; print "$::a";
\&
\&    # perl 4 prints: \-:a
\&    # perl 5 prints: x
.Ve
.IP "\(bu" 5
Precedence of file test operators documented
.Sp
perl4 had buggy precedence for the file test operators vis-a-vis
the assignment operators.  Thus, although the precedence table
for perl4 leads one to believe \f(CW\*(C`\-e $foo .= "q"\*(C'\fR should parse as
\&\f(CW\*(C`((\-e $foo) .= "q")\*(C'\fR, it actually parses as \f(CW\*(C`(\-e ($foo .= "q"))\*(C'\fR.
In perl5, the precedence is as documented.
.Sp
.Vb 1
\&    \-e $foo .= "q"
\&
\&    # perl4 prints: no output
\&    # perl5 prints: Can\*(Aqt modify \-e in concatenation
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`values\*(C'\fR are regular named unary operators
.Sp
In perl4, \fIkeys()\fR, \fIeach()\fR and \fIvalues()\fR were special high-precedence operators
that operated on a single hash, but in perl5, they are regular named unary
operators.  As documented, named unary operators have lower precedence
than the arithmetic and concatenation operators \f(CW\*(C`+ \- .\*(C'\fR, but the perl4
variants of these operators actually bind tighter than \f(CW\*(C`+ \- .\*(C'\fR.
Thus, for:
.Sp
.Vb 2
\&    %foo = 1..10;
\&    print keys %foo \- 1
\&
\&    # perl4 prints: 4
\&    # perl5 prints: Type of arg 1 to keys must be hash (not subtraction)
.Ve
.Sp
The perl4 behavior was probably more useful, if less consistent.
.SS "General Regular Expression Traps using s///, etc."
.IX Subsection "General Regular Expression Traps using s///, etc."
All types of \s-1RE\s0 traps.
.IP "\(bu" 5
\&\f(CW\*(C`s\*(Aq$lhs\*(Aq$rhs\*(Aq\*(C'\fR interpolates on either side
.Sp
\&\f(CW\*(C`s\*(Aq$lhs\*(Aq$rhs\*(Aq\*(C'\fR now does no interpolation on either side.  It used to
interpolate \f(CW$lhs\fR but not \f(CW$rhs\fR.  (And still does not match a literal
\&'$' in string)
.Sp
.Vb 4
\&    $a=1;$b=2;
\&    $string = \*(Aq1 2 $a $b\*(Aq;
\&    $string =~ s\*(Aq$a\*(Aq$b\*(Aq;
\&    print $string,"\en";
\&
\&    # perl4 prints: $b 2 $a $b
\&    # perl5 prints: 1 2 $a $b
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`m//g\*(C'\fR attaches its state to the searched string
.Sp
\&\f(CW\*(C`m//g\*(C'\fR now attaches its state to the searched string rather than the
regular expression.  (Once the scope of a block is left for the sub, the
state of the searched string is lost)
.Sp
.Vb 5
\&    $_ = "ababab";
\&    while(m/ab/g){
\&        &doit("blah");
\&    }
\&    sub doit{local($_) = shift; print "Got $_ "}
\&
\&    # perl4 prints: Got blah Got blah Got blah Got blah
\&    # perl5 prints: infinite loop blah...
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`m//o\*(C'\fR used within an anonymous sub
.Sp
Currently, if you use the \f(CW\*(C`m//o\*(C'\fR qualifier on a regular expression
within an anonymous sub, \fIall\fR closures generated from that anonymous
sub will use the regular expression as it was compiled when it was used
the very first time in any such closure.  For instance, if you say
.Sp
.Vb 9
\&    sub build_match {
\&        my($left,$right) = @_;
\&        return sub { $_[0] =~ /$left stuff $right/o; };
\&    }
\&    $good = build_match(\*(Aqfoo\*(Aq,\*(Aqbar\*(Aq);
\&    $bad = build_match(\*(Aqbaz\*(Aq,\*(Aqblarch\*(Aq);
\&    print $good\->(\*(Aqfoo stuff bar\*(Aq) ? "ok\en" : "not ok\en";
\&    print $bad\->(\*(Aqbaz stuff blarch\*(Aq) ? "ok\en" : "not ok\en";
\&    print $bad\->(\*(Aqfoo stuff bar\*(Aq) ? "not ok\en" : "ok\en";
.Ve
.Sp
For most builds of Perl5, this will print:
ok
not ok
not ok
.Sp
\&\fIbuild_match()\fR will always return a sub which matches the contents of
\&\f(CW$left\fR and \f(CW$right\fR as they were the \fIfirst\fR time that \fIbuild_match()\fR
was called, not as they are in the current call.
.IP "\(bu" 5
\&\f(CW$+\fR isn't set to whole match
.Sp
If no parentheses are used in a match, Perl4 sets \f(CW$+\fR to
the whole match, just like \f(CW$&\fR. Perl5 does not.
.Sp
.Vb 2
\&    "abcdef" =~ /b.*e/;
\&    print "\e$+ = $+\en";
\&
\&    # perl4 prints: bcde
\&    # perl5 prints:
.Ve
.IP "\(bu" 5
Substitution now returns null string if it fails
.Sp
substitution now returns the null string if it fails
.Sp
.Vb 3
\&    $string = "test";
\&    $value = ($string =~ s/foo//);
\&    print $value, "\en";
\&
\&    # perl4 prints: 0
\&    # perl5 prints:
.Ve
.Sp
Also see \*(L"Numerical Traps\*(R" for another example of this new feature.
.IP "\(bu" 5
\&\f(CW\*(C`s\`lhs\`rhs\`\*(C'\fR is now a normal substitution
.Sp
\&\f(CW\*(C`s\`lhs\`rhs\`\*(C'\fR (using backticks) is now a normal substitution, with no
backtick expansion
.Sp
.Vb 3
\&    $string = "";
\&    $string =~ s\`^\`hostname\`;
\&    print $string, "\en";
\&
\&    # perl4 prints: <the local hostname>
\&    # perl5 prints: hostname
.Ve
.IP "\(bu" 5
Stricter parsing of variables in regular expressions
.Sp
Stricter parsing of variables used in regular expressions
.Sp
.Vb 1
\&    s/^([^$grpc]*$grpc[$opt$plus$rep]?)//o;
\&
\&    # perl4: compiles w/o error
\&    # perl5: with Scalar found where operator expected ..., near "$opt$plus"
.Ve
.Sp
an added component of this example, apparently from the same script, is
the actual value of the s'd string after the substitution.
\&\f(CW\*(C`[$opt]\*(C'\fR is a character class in perl4 and an array subscript in perl5
.Sp
.Vb 5
\&    $grpc = \*(Aqa\*(Aq;
\&    $opt  = \*(Aqr\*(Aq;
\&    $_ = \*(Aqbar\*(Aq;
\&    s/^([^$grpc]*$grpc[$opt]?)/foo/;
\&    print;
\&
\&    # perl4 prints: foo
\&    # perl5 prints: foobar
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`m?x?\*(C'\fR matches only once
.Sp
Under perl5, \f(CW\*(C`m?x?\*(C'\fR matches only once, like \f(CW\*(C`?x?\*(C'\fR. Under perl4, it matched
repeatedly, like \f(CW\*(C`/x/\*(C'\fR or \f(CW\*(C`m!x!\*(C'\fR.
.Sp
.Vb 10
\&    $test = "once";
\&    sub match { $test =~ m?once?; }
\&    &match();
\&    if( &match() ) {
\&        # m?x? matches more then once
\&        print "perl4\en";
\&    } else {
\&        # m?x? matches only once
\&        print "perl5\en";
\&    }
\&
\&    # perl4 prints: perl4
\&    # perl5 prints: perl5
.Ve
.IP "\(bu" 5
Failed matches don't reset the match variables
.Sp
Unlike in Ruby, failed matches in Perl do not reset the match variables
($1, \f(CW$2\fR, ..., \f(CW\*(C`$\`\*(C'\fR, ...).
.SS "Subroutine, Signal, Sorting Traps"
.IX Subsection "Subroutine, Signal, Sorting Traps"
The general group of Perl4\-to\-Perl5 traps having to do with
Signals, Sorting, and their related subroutines, as well as
general subroutine traps.  Includes some OS-Specific traps.
.IP "\(bu" 5
Barewords that used to look like strings look like subroutine calls
.Sp
Barewords that used to look like strings to Perl will now look like subroutine
calls if a subroutine by that name is defined before the compiler sees them.
.Sp
.Vb 3
\&    sub SeeYa { warn"Hasta la vista, baby!" }
\&    $SIG{\*(AqTERM\*(Aq} = SeeYa;
\&    print "SIGTERM is now $SIG{\*(AqTERM\*(Aq}\en";
\&
\&    # perl4 prints: SIGTERM is now main\*(AqSeeYa
\&    # perl5 prints: SIGTERM is now main::1 (and warns "Hasta la vista, baby!")
.Ve
.Sp
Use \fB\-w\fR to catch this one
.IP "\(bu" 5
Reverse is no longer allowed as the name of a sort subroutine
.Sp
reverse is no longer allowed as the name of a sort subroutine.
.Sp
.Vb 2
\&    sub reverse{ print "yup "; $a <=> $b }
\&    print sort reverse (2,1,3);
\&
\&    # perl4 prints: yup yup 123
\&    # perl5 prints: 123
\&    # perl5 warns (if using \-w): Ambiguous call resolved as CORE::reverse()
.Ve
.IP "\(bu" 5
\&\f(CW\*(C`warn()\*(C'\fR won't let you specify a filehandle.
.Sp
Although it _always_ printed to \s-1STDERR\s0, \fIwarn()\fR would let you specify a
filehandle in perl4.  With perl5 it does not.
.Sp
.Vb 1
\&    warn STDERR "Foo!";
\&
\&    # perl4 prints: Foo!
\&    # perl5 prints: String found where operator expected
.Ve
.SS "\s-1OS\s0 Traps"
.IX Subsection "OS Traps"
.IP "\(bu" 5
SysV resets signal handler correctly
.Sp
Under \s-1HPUX\s0, and some other SysV OSes, one had to reset any signal handler,
within  the signal handler function, each time a signal was handled with
perl4.  With perl5, the reset is now done correctly.  Any code relying
on the handler _not_ being reset will have to be reworked.
.Sp
Since version 5.002, Perl uses \fIsigaction()\fR under SysV.
.Sp
.Vb 4
\&    sub gotit {
\&        print "Got @_... ";
\&    }
\&    $SIG{\*(AqINT\*(Aq} = \*(Aqgotit\*(Aq;
\&
\&    $| = 1;
\&    $pid = fork;
\&    if ($pid) {
\&        kill(\*(AqINT\*(Aq, $pid);
\&        sleep(1);
\&        kill(\*(AqINT\*(Aq, $pid);
\&    } else {
\&        while (1) {sleep(10);}
\&    }
\&
\&    # perl4 (HPUX) prints: Got INT...
\&    # perl5 (HPUX) prints: Got INT... Got INT...
.Ve
.IP "\(bu" 5
SysV \f(CW\*(C`seek()\*(C'\fR appends correctly
.Sp
Under SysV OSes, \f(CW\*(C`seek()\*(C'\fR on a file opened to append \f(CW\*(C`>>\*(C'\fR now does
the right thing w.r.t. the \fIfopen()\fR manpage. e.g., \- When a file is opened
for append,  it  is  impossible to overwrite information already in
the file.
.Sp
.Vb 8
\&    open(TEST,">>seek.test");
\&    $start = tell TEST;
\&    foreach(1 .. 9){
\&        print TEST "$_ ";
\&    }
\&    $end = tell TEST;
\&    seek(TEST,$start,0);
\&    print TEST "18 characters here";
\&
\&    # perl4 (solaris) seek.test has: 18 characters here
\&    # perl5 (solaris) seek.test has: 1 2 3 4 5 6 7 8 9 18 characters here
.Ve
.SS "Interpolation Traps"
.IX Subsection "Interpolation Traps"
Perl4\-to\-Perl5 traps having to do with how things get interpolated
within certain expressions, statements, contexts, or whatever.
.IP "\(bu" 5
\&\f(CW\*(C`@\*(C'\fR always interpolates an array in double-quotish strings
.Sp
@ now always interpolates an array in double-quotish strings.
.Sp
.Vb 1
\&    print "To: someone@somewhere.com\en";
\&
\&    # perl4 prints: To:someone@somewhere.com
\&    # perl < 5.6.1, error : In string, @somewhere now must be written as \e@somewhere
\&    # perl >= 5.6.1, warning : Possible unintended interpolation of @somewhere in string
.Ve
.IP "\(bu" 5
Double-quoted strings may no longer end with an unescaped $
.Sp
Double-quoted strings may no longer end with an unescaped $.
.Sp
.Vb 2
\&    $foo = "foo$";
\&    print "foo is $foo\en";
\&
\&    # perl4 prints: foo is foo$
\&    # perl5 errors: Final $ should be \e$ or $name
.Ve
.Sp
Note: perl5 \s-1DOES\s0 \s-1NOT\s0 error on the terminating @ in \f(CW$bar\fR
.IP "\(bu" 5
Arbitrary expressions are evaluated inside braces within double quotes
.Sp
Perl now sometimes evaluates arbitrary expressions inside braces that occur
within double quotes (usually when the opening brace is preceded by \f(CW\*(C`$\*(C'\fR
or \f(CW\*(C`@\*(C'\fR).
.Sp
.Vb 5
\&    @www = "buz";
\&    $foo = "foo";
\&    $bar = "bar";
\&    sub foo { return "bar" };
\&    print "|@{w.w.w}|${main\*(Aqfoo}|";
\&
\&    # perl4 prints: |@{w.w.w}|foo|
\&    # perl5 prints: |buz|bar|
.Ve
.Sp
Note that you can \f(CW\*(C`use strict;\*(C'\fR to ward off such trappiness under perl5.
.IP "\(bu" 5
\&\f(CW$$x\fR now tries to dereference \f(CW$x\fR
.Sp
The construct \*(L"this is $$x\*(R" used to interpolate the pid at that point, but
now tries to dereference \f(CW$x\fR.  \f(CW$$\fR by itself still works fine, however.
.Sp
.Vb 3
\&    $s = "a reference";
\&    $x = *s;
\&    print "this is $$x\en";
\&
\&    # perl4 prints: this is XXXx   (XXX is the current pid)
\&    # perl5 prints: this is a reference
.Ve
.IP "\(bu" 5
Creation of hashes on the fly with \f(CW\*(C`eval "EXPR"\*(C'\fR requires protection
.Sp
Creation of hashes on the fly with \f(CW\*(C`eval "EXPR"\*(C'\fR now requires either both
\&\f(CW\*(C`$\*(C'\fR's to be protected in the specification of the hash name, or both curlies
to be protected.  If both curlies are protected, the result will be compatible
with perl4 and perl5.  This is a very common practice, and should be changed
to use the block form of \f(CW\*(C`eval{}\*(C'\fR  if possible.
.Sp
.Vb 5
\&    $hashname = "foobar";
\&    $key = "baz";
\&    $value = 1234;
\&    eval "\e$$hashname{\*(Aq$key\*(Aq} = q|$value|";
\&    (defined($foobar{\*(Aqbaz\*(Aq})) ?  (print "Yup") : (print "Nope");
\&
\&    # perl4 prints: Yup
\&    # perl5 prints: Nope
.Ve
.Sp
Changing
.Sp
.Vb 1
\&    eval "\e$$hashname{\*(Aq$key\*(Aq} = q|$value|";
.Ve
.Sp
to
.Sp
.Vb 1
\&    eval "\e$\e$hashname{\*(Aq$key\*(Aq} = q|$value|";
.Ve
.Sp
causes the following result:
.Sp
.Vb 2
\&    # perl4 prints: Nope
\&    # perl5 prints: Yup
.Ve
.Sp
or, changing to
.Sp
.Vb 1
\&    eval "\e$$hashname\e{\*(Aq$key\*(Aq\e} = q|$value|";
.Ve
.Sp
causes the following result:
.Sp
.Vb 3
\&    # perl4 prints: Yup
\&    # perl5 prints: Yup
\&    # and is compatible for both versions
.Ve
.IP "\(bu" 5
Bugs in earlier perl versions
.Sp
perl4 programs which unconsciously rely on the bugs in earlier perl versions.
.Sp
.Vb 1
\&    perl \-e \*(Aq$bar=q/not/; print "This is $foo{$bar} perl5"\*(Aq
\&
\&    # perl4 prints: This is not perl5
\&    # perl5 prints: This is perl5
.Ve
.IP "\(bu" 5
Array and hash brackets during interpolation
.Sp
You also have to be careful about array and hash brackets during
interpolation.
.Sp
.Vb 1
\&    print "$foo["
\&
\&    perl 4 prints: [
\&    perl 5 prints: syntax error
\&
\&    print "$foo{"
\&
\&    perl 4 prints: {
\&    perl 5 prints: syntax error
.Ve
.Sp
Perl 5 is expecting to find an index or key name following the respective
brackets, as well as an ending bracket of the appropriate type.  In order
to mimic the behavior of Perl 4, you must escape the bracket like so.
.Sp
.Vb 2
\&    print "$foo\e[";
\&    print "$foo\e{";
.Ve
.IP "\(bu" 5
Interpolation of \f(CW\*(C`\e$$foo{bar}\*(C'\fR
.Sp
Similarly, watch out for: \f(CW\*(C`\e$$foo{bar}\*(C'\fR
.Sp
.Vb 2
\&    $foo = "baz";
\&    print "\e$$foo{bar}\en";
\&
\&    # perl4 prints: $baz{bar}
\&    # perl5 prints: $
.Ve
.Sp
Perl 5 is looking for \f(CW$foo{bar}\fR which doesn't exist, but perl 4 is
happy just to expand \f(CW$foo\fR to \*(L"baz\*(R" by itself.  Watch out for this
especially in \f(CW\*(C`eval\*(C'\fR's.
.IP "\(bu" 5
\&\f(CW\*(C`qq()\*(C'\fR string passed to \f(CW\*(C`eval\*(C'\fR will not find string terminator
.Sp
\&\f(CW\*(C`qq()\*(C'\fR string passed to \f(CW\*(C`eval\*(C'\fR
.Sp
.Vb 5
\&    eval qq(
\&        foreach \e$y (keys %\e$x\e) {
\&            \e$count++;
\&        }
\&    );
\&
\&    # perl4 runs this ok
\&    # perl5 prints: Can\*(Aqt find string terminator ")"
.Ve
.SS "\s-1DBM\s0 Traps"
.IX Subsection "DBM Traps"
General \s-1DBM\s0 traps.
.IP "\(bu" 5
Perl5 must have been linked with same dbm/ndbm as the default for \f(CW\*(C`dbmopen()\*(C'\fR
.Sp
Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The build of perl5
must have been linked with the same dbm/ndbm as the default for \f(CW\*(C`dbmopen()\*(C'\fR
to function properly without \f(CW\*(C`tie\*(C'\fR'ing to an extension dbm implementation.
.Sp
.Vb 2
\&    dbmopen (%dbm, "file", undef);
\&    print "ok\en";
\&
\&    # perl4 prints: ok
\&    # perl5 prints: ok (IFF linked with \-ldbm or \-lndbm)
.Ve
.IP "\(bu" 5
\&\s-1DBM\s0 exceeding limit on the key/value size will cause perl5 to exit immediately
.Sp
Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The error generated
when exceeding the limit on the key/value size will cause perl5 to exit
immediately.
.Sp
.Vb 3
\&    dbmopen(DB, "testdb",0600) || die "couldn\*(Aqt open db! $!";
\&    $DB{\*(Aqtrap\*(Aq} = "x" x 1024;  # value too large for most dbm/ndbm
\&    print "YUP\en";
\&
\&    # perl4 prints:
\&    dbm store returned \-1, errno 28, key "trap" at \- line 3.
\&    YUP
\&
\&    # perl5 prints:
\&    dbm store returned \-1, errno 28, key "trap" at \- line 3.
.Ve
.SS "Unclassified Traps"
.IX Subsection "Unclassified Traps"
Everything else.
.IP "\(bu" 5
\&\f(CW\*(C`require\*(C'\fR/\f(CW\*(C`do\*(C'\fR trap using returned value
.Sp
If the file doit.pl has:
.Sp
.Vb 5
\&    sub foo {
\&        $rc = do "./do.pl";
\&        return 8;
\&    }
\&    print &foo, "\en";
.Ve
.Sp
And the do.pl file has the following single line:
.Sp
.Vb 1
\&    return 3;
.Ve
.Sp
Running doit.pl gives the following:
.Sp
.Vb 2
\&    # perl 4 prints: 3 (aborts the subroutine early)
\&    # perl 5 prints: 8
.Ve
.Sp
Same behavior if you replace \f(CW\*(C`do\*(C'\fR with \f(CW\*(C`require\*(C'\fR.
.IP "\(bu" 5
\&\f(CW\*(C`split\*(C'\fR on empty string with \s-1LIMIT\s0 specified
.Sp
.Vb 2
\&    $string = \*(Aq\*(Aq;
\&    @list = split(/foo/, $string, 2)
.Ve
.Sp
Perl4 returns a one element list containing the empty string but Perl5
returns an empty list.
.PP
As always, if any of these are ever officially declared as bugs,
they'll be fixed and removed.
                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltrap5.18.1                               0100644 0001750 0001750 00000032645 12566207447 023124  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRAP 1"
.TH PERLTRAP 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltrap \- Perl traps for the unwary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The biggest trap of all is forgetting to \f(CW\*(C`use warnings\*(C'\fR or use the \fB\-w\fR
switch; see perllexwarn and perlrun. The second biggest trap is not
making your entire program runnable under \f(CW\*(C`use strict\*(C'\fR.  The third biggest
trap is not reading the list of changes in this version of Perl; see
perldelta.
.SS "Awk Traps"
.IX Subsection "Awk Traps"
Accustomed \fBawk\fR users should take special note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
The English module, loaded via
.Sp
.Vb 1
\&    use English;
.Ve
.Sp
allows you to refer to special variables (like \f(CW$/\fR) with names (like
\&\f(CW$RS\fR), as though they were in \fBawk\fR; see perlvar for details.
.IP "\(bu" 4
Semicolons are required after all simple statements in Perl (except
at the end of a block).  Newline is not a statement delimiter.
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fRs and \f(CW\*(C`while\*(C'\fRs.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Arrays index from 0.  Likewise string positions in \fIsubstr()\fR and
\&\fIindex()\fR.
.IP "\(bu" 4
You have to decide whether your array has numeric or string indices.
.IP "\(bu" 4
Hash values do not spring into existence upon mere reference.
.IP "\(bu" 4
You have to decide whether you want to use string or numeric
comparisons.
.IP "\(bu" 4
Reading an input line does not split it for you.  You get to split it
to an array yourself.  And the \fIsplit()\fR operator has different
arguments than \fBawk\fR's.
.IP "\(bu" 4
The current input line is normally in \f(CW$_\fR, not \f(CW$0\fR.  It generally does
not have the newline stripped.  ($0 is the name of the program
executed.)  See perlvar.
.IP "\(bu" 4
$<\fIdigit\fR> does not refer to fields\*(--it refers to substrings matched
by the last match pattern.
.IP "\(bu" 4
The \fIprint()\fR statement does not add field and record separators unless
you set \f(CW$,\fR and \f(CW\*(C`$\e\*(C'\fR.  You can set \f(CW$OFS\fR and \f(CW$ORS\fR if you're using
the English module.
.IP "\(bu" 4
You must open your files before you print to them.
.IP "\(bu" 4
The range operator is \*(L"..\*(R", not comma.  The comma operator works as in
C.
.IP "\(bu" 4
The match operator is \*(L"=~\*(R", not \*(L"~\*(R".  (\*(L"~\*(R" is the one's complement
operator, as in C.)
.IP "\(bu" 4
The exponentiation operator is \*(L"**\*(R", not \*(L"^\*(R".  \*(L"^\*(R" is the \s-1XOR\s0
operator, as in C.  (You know, one could get the feeling that \fBawk\fR is
basically incompatible with C.)
.IP "\(bu" 4
The concatenation operator is \*(L".\*(R", not the null string.  (Using the
null string would render \f(CW\*(C`/pat/ /pat/\*(C'\fR unparsable, because the third slash
would be interpreted as a division operator\*(--the tokenizer is in fact
slightly context sensitive for operators like \*(L"/\*(R", \*(L"?\*(R", and \*(L">\*(R".
And in fact, \*(L".\*(R" itself can be the beginning of a number.)
.IP "\(bu" 4
The \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`exit\*(C'\fR, and \f(CW\*(C`continue\*(C'\fR keywords work differently.
.IP "\(bu" 4
The following variables work differently:
.Sp
.Vb 10
\&      Awk       Perl
\&      ARGC      scalar @ARGV (compare with $#ARGV)
\&      ARGV[0]   $0
\&      FILENAME  $ARGV
\&      FNR       $. \- something
\&      FS        (whatever you like)
\&      NF        $#Fld, or some such
\&      NR        $.
\&      OFMT      $#
\&      OFS       $,
\&      ORS       $\e
\&      RLENGTH   length($&)
\&      RS        $/
\&      RSTART    length($\`)
\&      SUBSEP    $;
.Ve
.IP "\(bu" 4
You cannot set \f(CW$RS\fR to a pattern, only a string.
.IP "\(bu" 4
When in doubt, run the \fBawk\fR construct through \fBa2p\fR and see what it
gives you.
.SS "C/\*(C+ Traps"
.IX Subsection "C/ Traps"
Cerebral C and \*(C+ programmers should take note of the following:
.IP "\(bu" 4
Curly brackets are required on \f(CW\*(C`if\*(C'\fR's and \f(CW\*(C`while\*(C'\fR's.
.IP "\(bu" 4
You must use \f(CW\*(C`elsif\*(C'\fR rather than \f(CW\*(C`else if\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`break\*(C'\fR and \f(CW\*(C`continue\*(C'\fR keywords from C become in Perl \f(CW\*(C`last\*(C'\fR
and \f(CW\*(C`next\*(C'\fR, respectively.  Unlike in C, these do \fInot\fR work within a
\&\f(CW\*(C`do { } while\*(C'\fR construct.  See \*(L"Loop Control\*(R" in perlsyn.
.IP "\(bu" 4
The switch statement is called \f(CW\*(C`given/when\*(C'\fR and only available in
perl 5.10 or newer.  See \*(L"Switch Statements\*(R" in perlsyn.
.IP "\(bu" 4
Variables begin with \*(L"$\*(R", \*(L"@\*(R" or \*(L"%\*(R" in Perl.
.IP "\(bu" 4
Comments begin with \*(L"#\*(R", not \*(L"/*\*(R" or \*(L"//\*(R".  Perl may interpret C/\*(C+
comments as division operators, unterminated regular expressions or
the defined-or operator.
.IP "\(bu" 4
You can't take the address of anything, although a similar operator
in Perl is the backslash, which creates a reference.
.IP "\(bu" 4
\&\f(CW\*(C`ARGV\*(C'\fR must be capitalized.  \f(CW$ARGV[0]\fR is C's \f(CW\*(C`argv[1]\*(C'\fR, and \f(CW\*(C`argv[0]\*(C'\fR
ends up in \f(CW$0\fR.
.IP "\(bu" 4
System calls such as \fIlink()\fR, \fIunlink()\fR, \fIrename()\fR, etc. return nonzero for
success, not 0. (\fIsystem()\fR, however, returns zero for success.)
.IP "\(bu" 4
Signal handlers deal with signal names, not numbers.  Use \f(CW\*(C`kill \-l\*(C'\fR
to find their names on your system.
.SS "Sed Traps"
.IX Subsection "Sed Traps"
Seasoned \fBsed\fR programmers should take note of the following:
.IP "\(bu" 4
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR.
.IP "\(bu" 4
Backreferences in substitutions use \*(L"$\*(R" rather than \*(L"\e\*(R".
.IP "\(bu" 4
The pattern matching metacharacters \*(L"(\*(R", \*(L")\*(R", and \*(L"|\*(R" do not have backslashes
in front.
.IP "\(bu" 4
The range operator is \f(CW\*(C`...\*(C'\fR, rather than comma.
.SS "Shell Traps"
.IX Subsection "Shell Traps"
Sharp shell programmers should take note of the following:
.IP "\(bu" 4
The backtick operator does variable interpolation without regard to
the presence of single quotes in the command.
.IP "\(bu" 4
The backtick operator does no translation of the return value, unlike \fBcsh\fR.
.IP "\(bu" 4
Shells (especially \fBcsh\fR) do several levels of substitution on each
command line.  Perl does substitution in only certain constructs
such as double quotes, backticks, angle brackets, and search patterns.
.IP "\(bu" 4
Shells interpret scripts a little bit at a time.  Perl compiles the
entire program before executing it (except for \f(CW\*(C`BEGIN\*(C'\fR blocks, which
execute at compile time).
.IP "\(bu" 4
The arguments are available via \f(CW@ARGV\fR, not \f(CW$1\fR, \f(CW$2\fR, etc.
.IP "\(bu" 4
The environment is not automatically made available as separate scalar
variables.
.IP "\(bu" 4
The shell's \f(CW\*(C`test\*(C'\fR uses \*(L"=\*(R", \*(L"!=\*(R", \*(L"<\*(R" etc for string comparisons and \*(L"\-eq\*(R",
\&\*(L"\-ne\*(R", \*(L"\-lt\*(R" etc for numeric comparisons. This is the reverse of Perl, which
uses \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`ne\*(C'\fR, \f(CW\*(C`lt\*(C'\fR for string comparisons, and \f(CW\*(C`==\*(C'\fR, \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`<\*(C'\fR etc
for numeric comparisons.
.SS "Perl Traps"
.IX Subsection "Perl Traps"
Practicing Perl Programmers should take note of the following:
.IP "\(bu" 4
Remember that many operations behave differently in a list
context than they do in a scalar one.  See perldata for details.
.IP "\(bu" 4
Avoid barewords if you can, especially all lowercase ones.
You can't tell by just looking at it whether a bareword is
a function or a string.  By using quotes on strings and
parentheses on function calls, you won't ever get them confused.
.IP "\(bu" 4
You cannot discern from mere inspection which builtins
are unary operators (like \fIchop()\fR and \fIchdir()\fR)
and which are list operators (like \fIprint()\fR and \fIunlink()\fR).
(Unless prototyped, user-defined subroutines can \fBonly\fR be list
operators, never unary ones.)  See perlop and perlsub.
.IP "\(bu" 4
People have a hard time remembering that some functions
default to \f(CW$_\fR, or \f(CW@ARGV\fR, or whatever, but that others which
you might expect to do not.
.IP "\(bu" 4
The <\s-1FH\s0> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is assigned to \f(CW$_\fR only if the
file read is the sole condition in a while loop:
.Sp
.Vb 3
\&    while (<FH>)      { }
\&    while (defined($_ = <FH>)) { }..
\&    <FH>;  # data discarded!
.Ve
.IP "\(bu" 4
Remember not to use \f(CW\*(C`=\*(C'\fR when you need \f(CW\*(C`=~\*(C'\fR;
these two constructs are quite different:
.Sp
.Vb 2
\&    $x =  /foo/;
\&    $x =~ /foo/;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`do {}\*(C'\fR construct isn't a real loop that you can use
loop control on.
.IP "\(bu" 4
Use \f(CW\*(C`my()\*(C'\fR for local variables whenever you can get away with
it (but see perlform for where you can't).
Using \f(CW\*(C`local()\*(C'\fR actually gives a local value to a global
variable, which leaves you open to unforeseen side-effects
of dynamic scoping.
.IP "\(bu" 4
If you localize an exported variable in a module, its exported value will
not change.  The local name becomes an alias to a new value but the
external name is still an alias for the original.
.PP
As always, if any of these are ever officially declared as bugs,
they'll be fixed and removed.
                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltru64.1                                  0100644 0001750 0001750 00000030424 12566207447 022617  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRU64 1"
.TH PERLTRU64 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltru64 \- Perl version 5 on Tru64 (formerly known as Digital UNIX formerly known as DEC OSF/1) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's (formerly Compaq's,
formerly Digital's) Unix operating system (Tru64) that will affect
how Perl version 5 (hereafter just Perl) is configured, compiled
and/or runs.
.SS "Compiling Perl 5 on Tru64"
.IX Subsection "Compiling Perl 5 on Tru64"
The recommended compiler to use in Tru64 is the native C compiler.
The native compiler produces much faster code (the speed difference is
noticeable: several dozen percentages) and also more correct code: if
you are considering using the \s-1GNU C\s0 compiler you should use at the
very least the release of 2.95.3 since all older gcc releases are
known to produce broken code when compiling Perl.  One manifestation
of this brokenness is the lib/sdbm test dumping core; another is many
of the op/regexp and op/pat, or ext/Storable tests dumping core
(the exact pattern of failures depending on the \s-1GCC\s0 release and
optimization flags).
.PP
gcc 3.2.1 is known to work okay with Perl 5.8.0.  However, when
optimizing the toke.c gcc likes to have a lot of memory, 256 megabytes
seems to be enough.  The default setting of the process data section
in Tru64 should be one gigabyte, but some sites/setups might have
lowered that.  The configuration process of Perl checks for too low
process limits, and lowers the optimization for the toke.c if
necessary, and also gives advice on how to raise the process limits.
.PP
Also, Configure might abort with
.PP
.Vb 2
\&    Build a threading Perl? [n]
\&    Configure[2437]: Syntax error at line 1 : \*(Aqconfig.sh\*(Aq is not expected.
.Ve
.PP
This indicates that Configure is being run with a broken Korn shell
(even though you think you are using a Bourne shell by using
\&\*(L"sh Configure\*(R" or \*(L"./Configure\*(R").  The Korn shell bug has been reported
to Compaq as of February 1999 but in the meanwhile, the reason ksh is
being used is that you have the environment variable \s-1BIN_SH\s0 set to
\&'xpg4'.  This causes /bin/sh to delegate its duties to /bin/posix/sh
(a ksh).  Unset the environment variable and rerun Configure.
.SS "Using Large Files with Perl on Tru64"
.IX Subsection "Using Large Files with Perl on Tru64"
In Tru64 Perl is automatically able to use large files, that is,
files larger than 2 gigabytes, there is no need to use the Configure
\&\-Duselargefiles option as described in \s-1INSTALL \s0(though using the option
is harmless).
.SS "Threaded Perl on Tru64"
.IX Subsection "Threaded Perl on Tru64"
If you want to use threads, you should primarily use the Perl
5.8.0 threads model by running Configure with \-Duseithreads.
.PP
Perl threading is going to work only in Tru64 4.0 and newer releases,
older operating releases like 3.2 aren't probably going to work
properly with threads.
.PP
In Tru64 V5 (at least V5.1A, V5.1B) you cannot build threaded Perl with gcc
because the system header <pthread.h> explicitly checks for supported
C compilers, gcc (at least 3.2.2) not being one of them.  But the
system C compiler should work just fine.
.SS "Long Doubles on Tru64"
.IX Subsection "Long Doubles on Tru64"
You cannot Configure Perl to use long doubles unless you have at least
Tru64 V5.0, the long double support simply wasn't functional enough
before that.  Perl's Configure will override attempts to use the long
doubles (you can notice this by Configure finding out that the \fImodfl()\fR
function does not work as it should).
.PP
At the time of this writing (June 2002), there is a known bug in the
Tru64 libc printing of long doubles when not using \*(L"e\*(R" notation.
The values are correct and usable, but you only get a limited number
of digits displayed unless you force the issue by using \f(CW\*(C`printf
"%.33e",$num\*(C'\fR or the like.  For Tru64 versions V5.0A through V5.1A, a
patch is expected sometime after perl 5.8.0 is released.  If your libc
has not yet been patched, you'll get a warning from Configure when
selecting long doubles.
.SS "DB_File tests failing on Tru64"
.IX Subsection "DB_File tests failing on Tru64"
The DB_File tests (db\-btree.t, db\-hash.t, db\-recno.t) may fail you
have installed a newer version of Berkeley \s-1DB\s0 into the system and the
\&\-I and \-L compiler and linker flags introduce version conflicts with
the \s-1DB 1.85\s0 headers and libraries that came with the Tru64.  For example, 
mixing a \s-1DB\s0 v2 library with the \s-1DB\s0 v1 headers is a bad idea.  Watch
out for Configure options \-Dlocincpth and \-Dloclibpth, and check your
/usr/local/include and /usr/local/lib since they are included by default.
.PP
The second option is to explicitly instruct Configure to detect the
newer Berkeley \s-1DB\s0 installation, by supplying the right directories with
\&\f(CW\*(C`\-Dlocincpth=/some/include\*(C'\fR and \f(CW\*(C`\-Dloclibpth=/some/lib\*(C'\fR \fBand\fR before
running \*(L"make test\*(R" setting your \s-1LD_LIBRARY_PATH\s0 to \fI/some/lib\fR.
.PP
The third option is to work around the problem by disabling the
DB_File completely when build Perl by specifying \-Ui_db to Configure,
and then using the BerkeleyDB module from \s-1CPAN\s0 instead of DB_File.
The BerkeleyDB works with Berkeley \s-1DB\s0 versions 2.* or greater.
.PP
The Berkeley \s-1DB 4.1.25\s0 has been tested with Tru64 V5.1A and found
to work.  The latest Berkeley \s-1DB\s0 can be found from <http://www.sleepycat.com>.
.SS "64\-bit Perl on Tru64"
.IX Subsection "64-bit Perl on Tru64"
In Tru64 Perl's integers are automatically 64\-bit wide, there is
no need to use the Configure \-Duse64bitint option as described
in \s-1INSTALL. \s0 Similarly, there is no need for \-Duse64bitall
since pointers are automatically 64\-bit wide.
.SS "Warnings about floating-point overflow when compiling Perl on Tru64"
.IX Subsection "Warnings about floating-point overflow when compiling Perl on Tru64"
When compiling Perl in Tru64 you may (depending on the compiler
release) see two warnings like this
.PP
.Vb 3
\&    cc: Warning: numeric.c, line 104: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&        return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
and when compiling the \s-1POSIX\s0 extension
.PP
.Vb 3
\&    cc: Warning: const\-c.inc, line 2007: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&                return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
The exact line numbers may vary between Perl releases.  The warnings
are benign and can be ignored: in later C compiler releases the warnings
should be gone.
.PP
When the file \fIpp_sys.c\fR is being compiled you may (depending on the
operating system release) see an additional compiler flag being used:
\&\f(CW\*(C`\-DNO_EFF_ONLY_OK\*(C'\fR.  This is normal and refers to a feature that is
relevant only if you use the \f(CW\*(C`filetest\*(C'\fR pragma.  In older releases of
the operating system the feature was broken and the \s-1NO_EFF_ONLY_OK\s0
instructs Perl not to use the feature.
.SH "Testing Perl on Tru64"
.IX Header "Testing Perl on Tru64"
During \*(L"make test\*(R" the \f(CW\*(C`comp/cpp\*(C'\fR will be skipped because on Tru64 it
cannot be tested before Perl has been installed.  The test refers to
the use of the \f(CW\*(C`\-P\*(C'\fR option of Perl.
.SH "ext/ODBM_File/odbm Test Failing With Static Builds"
.IX Header "ext/ODBM_File/odbm Test Failing With Static Builds"
The ext/ODBM_File/odbm is known to fail with static builds
(Configure \-Uusedl) due to a known bug in Tru64's static libdbm
library.  The good news is that you very probably don't need to ever
use the ODBM_File extension since more advanced NDBM_File works fine,
not to mention the even more advanced DB_File.
.SH "Perl Fails Because Of Unresolved Symbol sockatmark"
.IX Header "Perl Fails Because Of Unresolved Symbol sockatmark"
If you get an error like
.PP
.Vb 1
\&    Can\*(Aqt load \*(Aq.../OSF1/lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so\*(Aq for module IO: Unresolved symbol in .../lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so: sockatmark at .../lib/perl5/5.8.0/alpha\-dec_osf/XSLoader.pm line 75.
.Ve
.PP
you need to either recompile your Perl in Tru64 4.0D or upgrade your
Tru64 4.0D to at least 4.0F: the \fIsockatmark()\fR system call was
added in Tru64 4.0F, and the \s-1IO\s0 extension refers that symbol.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi <jhi@iki.fi>
                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltru645.16.1                              0100644 0001750 0001750 00000030103 12566207426 023120  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRU64 1"
.TH PERLTRU64 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltru64 \- Perl version 5 on Tru64 (formerly known as Digital UNIX formerly known as DEC OSF/1) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's (formerly Compaq's,
formerly Digital's) Unix operating system (Tru64) that will affect
how Perl version 5 (hereafter just Perl) is configured, compiled
and/or runs.
.SS "Compiling Perl 5 on Tru64"
.IX Subsection "Compiling Perl 5 on Tru64"
The recommended compiler to use in Tru64 is the native C compiler.
The native compiler produces much faster code (the speed difference is
noticeable: several dozen percentages) and also more correct code: if
you are considering using the \s-1GNU\s0 C compiler you should use at the
very least the release of 2.95.3 since all older gcc releases are
known to produce broken code when compiling Perl.  One manifestation
of this brokenness is the lib/sdbm test dumping core; another is many
of the op/regexp and op/pat, or ext/Storable tests dumping core
(the exact pattern of failures depending on the \s-1GCC\s0 release and
optimization flags).
.PP
gcc 3.2.1 is known to work okay with Perl 5.8.0.  However, when
optimizing the toke.c gcc likes to have a lot of memory, 256 megabytes
seems to be enough.  The default setting of the process data section
in Tru64 should be one gigabyte, but some sites/setups might have
lowered that.  The configuration process of Perl checks for too low
process limits, and lowers the optimization for the toke.c if
necessary, and also gives advice on how to raise the process limits.
.PP
Also, Configure might abort with
.PP
.Vb 2
\&    Build a threading Perl? [n]
\&    Configure[2437]: Syntax error at line 1 : \*(Aqconfig.sh\*(Aq is not expected.
.Ve
.PP
This indicates that Configure is being run with a broken Korn shell
(even though you think you are using a Bourne shell by using
\&\*(L"sh Configure\*(R" or \*(L"./Configure\*(R").  The Korn shell bug has been reported
to Compaq as of February 1999 but in the meanwhile, the reason ksh is
being used is that you have the environment variable \s-1BIN_SH\s0 set to
\&'xpg4'.  This causes /bin/sh to delegate its duties to /bin/posix/sh
(a ksh).  Unset the environment variable and rerun Configure.
.SS "Using Large Files with Perl on Tru64"
.IX Subsection "Using Large Files with Perl on Tru64"
In Tru64 Perl is automatically able to use large files, that is,
files larger than 2 gigabytes, there is no need to use the Configure
\&\-Duselargefiles option as described in \s-1INSTALL\s0 (though using the option
is harmless).
.SS "Threaded Perl on Tru64"
.IX Subsection "Threaded Perl on Tru64"
If you want to use threads, you should primarily use the Perl
5.8.0 threads model by running Configure with \-Duseithreads.
.PP
Perl threading is going to work only in Tru64 4.0 and newer releases,
older operating releases like 3.2 aren't probably going to work
properly with threads.
.PP
In Tru64 V5 (at least V5.1A, V5.1B) you cannot build threaded Perl with gcc
because the system header <pthread.h> explicitly checks for supported
C compilers, gcc (at least 3.2.2) not being one of them.  But the
system C compiler should work just fine.
.SS "Long Doubles on Tru64"
.IX Subsection "Long Doubles on Tru64"
You cannot Configure Perl to use long doubles unless you have at least
Tru64 V5.0, the long double support simply wasn't functional enough
before that.  Perl's Configure will override attempts to use the long
doubles (you can notice this by Configure finding out that the \fImodfl()\fR
function does not work as it should).
.PP
At the time of this writing (June 2002), there is a known bug in the
Tru64 libc printing of long doubles when not using \*(L"e\*(R" notation.
The values are correct and usable, but you only get a limited number
of digits displayed unless you force the issue by using \f(CW\*(C`printf
"%.33e",$num\*(C'\fR or the like.  For Tru64 versions V5.0A through V5.1A, a
patch is expected sometime after perl 5.8.0 is released.  If your libc
has not yet been patched, you'll get a warning from Configure when
selecting long doubles.
.SS "DB_File tests failing on Tru64"
.IX Subsection "DB_File tests failing on Tru64"
The DB_File tests (db\-btree.t, db\-hash.t, db\-recno.t) may fail you
have installed a newer version of Berkeley \s-1DB\s0 into the system and the
\&\-I and \-L compiler and linker flags introduce version conflicts with
the \s-1DB\s0 1.85 headers and libraries that came with the Tru64.  For example, 
mixing a \s-1DB\s0 v2 library with the \s-1DB\s0 v1 headers is a bad idea.  Watch
out for Configure options \-Dlocincpth and \-Dloclibpth, and check your
/usr/local/include and /usr/local/lib since they are included by default.
.PP
The second option is to explicitly instruct Configure to detect the
newer Berkeley \s-1DB\s0 installation, by supplying the right directories with
\&\f(CW\*(C`\-Dlocincpth=/some/include\*(C'\fR and \f(CW\*(C`\-Dloclibpth=/some/lib\*(C'\fR \fBand\fR before
running \*(L"make test\*(R" setting your \s-1LD_LIBRARY_PATH\s0 to \fI/some/lib\fR.
.PP
The third option is to work around the problem by disabling the
DB_File completely when build Perl by specifying \-Ui_db to Configure,
and then using the BerkeleyDB module from \s-1CPAN\s0 instead of DB_File.
The BerkeleyDB works with Berkeley \s-1DB\s0 versions 2.* or greater.
.PP
The Berkeley \s-1DB\s0 4.1.25 has been tested with Tru64 V5.1A and found
to work.  The latest Berkeley \s-1DB\s0 can be found from <http://www.sleepycat.com>.
.SS "64\-bit Perl on Tru64"
.IX Subsection "64-bit Perl on Tru64"
In Tru64 Perl's integers are automatically 64\-bit wide, there is
no need to use the Configure \-Duse64bitint option as described
in \s-1INSTALL\s0.  Similarly, there is no need for \-Duse64bitall
since pointers are automatically 64\-bit wide.
.SS "Warnings about floating-point overflow when compiling Perl on Tru64"
.IX Subsection "Warnings about floating-point overflow when compiling Perl on Tru64"
When compiling Perl in Tru64 you may (depending on the compiler
release) see two warnings like this
.PP
.Vb 3
\&    cc: Warning: numeric.c, line 104: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&        return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
and when compiling the \s-1POSIX\s0 extension
.PP
.Vb 3
\&    cc: Warning: const\-c.inc, line 2007: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&                return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
The exact line numbers may vary between Perl releases.  The warnings
are benign and can be ignored: in later C compiler releases the warnings
should be gone.
.PP
When the file \fIpp_sys.c\fR is being compiled you may (depending on the
operating system release) see an additional compiler flag being used:
\&\f(CW\*(C`\-DNO_EFF_ONLY_OK\*(C'\fR.  This is normal and refers to a feature that is
relevant only if you use the \f(CW\*(C`filetest\*(C'\fR pragma.  In older releases of
the operating system the feature was broken and the \s-1NO_EFF_ONLY_OK\s0
instructs Perl not to use the feature.
.SH "Testing Perl on Tru64"
.IX Header "Testing Perl on Tru64"
During \*(L"make test\*(R" the \f(CW\*(C`comp/cpp\*(C'\fR will be skipped because on Tru64 it
cannot be tested before Perl has been installed.  The test refers to
the use of the \f(CW\*(C`\-P\*(C'\fR option of Perl.
.SH "ext/ODBM_File/odbm Test Failing With Static Builds"
.IX Header "ext/ODBM_File/odbm Test Failing With Static Builds"
The ext/ODBM_File/odbm is known to fail with static builds
(Configure \-Uusedl) due to a known bug in Tru64's static libdbm
library.  The good news is that you very probably don't need to ever
use the ODBM_File extension since more advanced NDBM_File works fine,
not to mention the even more advanced DB_File.
.SH "Perl Fails Because Of Unresolved Symbol sockatmark"
.IX Header "Perl Fails Because Of Unresolved Symbol sockatmark"
If you get an error like
.PP
.Vb 1
\&    Can\*(Aqt load \*(Aq.../OSF1/lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so\*(Aq for module IO: Unresolved symbol in .../lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so: sockatmark at .../lib/perl5/5.8.0/alpha\-dec_osf/XSLoader.pm line 75.
.Ve
.PP
you need to either recompile your Perl in Tru64 4.0D or upgrade your
Tru64 4.0D to at least 4.0F: the \fIsockatmark()\fR system call was
added in Tru64 4.0F, and the \s-1IO\s0 extension refers that symbol.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi <jhi@iki.fi>
                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltru645.18.1                              0100644 0001750 0001750 00000030424 12566207447 023133  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTRU64 1"
.TH PERLTRU64 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltru64 \- Perl version 5 on Tru64 (formerly known as Digital UNIX formerly known as DEC OSF/1) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's (formerly Compaq's,
formerly Digital's) Unix operating system (Tru64) that will affect
how Perl version 5 (hereafter just Perl) is configured, compiled
and/or runs.
.SS "Compiling Perl 5 on Tru64"
.IX Subsection "Compiling Perl 5 on Tru64"
The recommended compiler to use in Tru64 is the native C compiler.
The native compiler produces much faster code (the speed difference is
noticeable: several dozen percentages) and also more correct code: if
you are considering using the \s-1GNU C\s0 compiler you should use at the
very least the release of 2.95.3 since all older gcc releases are
known to produce broken code when compiling Perl.  One manifestation
of this brokenness is the lib/sdbm test dumping core; another is many
of the op/regexp and op/pat, or ext/Storable tests dumping core
(the exact pattern of failures depending on the \s-1GCC\s0 release and
optimization flags).
.PP
gcc 3.2.1 is known to work okay with Perl 5.8.0.  However, when
optimizing the toke.c gcc likes to have a lot of memory, 256 megabytes
seems to be enough.  The default setting of the process data section
in Tru64 should be one gigabyte, but some sites/setups might have
lowered that.  The configuration process of Perl checks for too low
process limits, and lowers the optimization for the toke.c if
necessary, and also gives advice on how to raise the process limits.
.PP
Also, Configure might abort with
.PP
.Vb 2
\&    Build a threading Perl? [n]
\&    Configure[2437]: Syntax error at line 1 : \*(Aqconfig.sh\*(Aq is not expected.
.Ve
.PP
This indicates that Configure is being run with a broken Korn shell
(even though you think you are using a Bourne shell by using
\&\*(L"sh Configure\*(R" or \*(L"./Configure\*(R").  The Korn shell bug has been reported
to Compaq as of February 1999 but in the meanwhile, the reason ksh is
being used is that you have the environment variable \s-1BIN_SH\s0 set to
\&'xpg4'.  This causes /bin/sh to delegate its duties to /bin/posix/sh
(a ksh).  Unset the environment variable and rerun Configure.
.SS "Using Large Files with Perl on Tru64"
.IX Subsection "Using Large Files with Perl on Tru64"
In Tru64 Perl is automatically able to use large files, that is,
files larger than 2 gigabytes, there is no need to use the Configure
\&\-Duselargefiles option as described in \s-1INSTALL \s0(though using the option
is harmless).
.SS "Threaded Perl on Tru64"
.IX Subsection "Threaded Perl on Tru64"
If you want to use threads, you should primarily use the Perl
5.8.0 threads model by running Configure with \-Duseithreads.
.PP
Perl threading is going to work only in Tru64 4.0 and newer releases,
older operating releases like 3.2 aren't probably going to work
properly with threads.
.PP
In Tru64 V5 (at least V5.1A, V5.1B) you cannot build threaded Perl with gcc
because the system header <pthread.h> explicitly checks for supported
C compilers, gcc (at least 3.2.2) not being one of them.  But the
system C compiler should work just fine.
.SS "Long Doubles on Tru64"
.IX Subsection "Long Doubles on Tru64"
You cannot Configure Perl to use long doubles unless you have at least
Tru64 V5.0, the long double support simply wasn't functional enough
before that.  Perl's Configure will override attempts to use the long
doubles (you can notice this by Configure finding out that the \fImodfl()\fR
function does not work as it should).
.PP
At the time of this writing (June 2002), there is a known bug in the
Tru64 libc printing of long doubles when not using \*(L"e\*(R" notation.
The values are correct and usable, but you only get a limited number
of digits displayed unless you force the issue by using \f(CW\*(C`printf
"%.33e",$num\*(C'\fR or the like.  For Tru64 versions V5.0A through V5.1A, a
patch is expected sometime after perl 5.8.0 is released.  If your libc
has not yet been patched, you'll get a warning from Configure when
selecting long doubles.
.SS "DB_File tests failing on Tru64"
.IX Subsection "DB_File tests failing on Tru64"
The DB_File tests (db\-btree.t, db\-hash.t, db\-recno.t) may fail you
have installed a newer version of Berkeley \s-1DB\s0 into the system and the
\&\-I and \-L compiler and linker flags introduce version conflicts with
the \s-1DB 1.85\s0 headers and libraries that came with the Tru64.  For example, 
mixing a \s-1DB\s0 v2 library with the \s-1DB\s0 v1 headers is a bad idea.  Watch
out for Configure options \-Dlocincpth and \-Dloclibpth, and check your
/usr/local/include and /usr/local/lib since they are included by default.
.PP
The second option is to explicitly instruct Configure to detect the
newer Berkeley \s-1DB\s0 installation, by supplying the right directories with
\&\f(CW\*(C`\-Dlocincpth=/some/include\*(C'\fR and \f(CW\*(C`\-Dloclibpth=/some/lib\*(C'\fR \fBand\fR before
running \*(L"make test\*(R" setting your \s-1LD_LIBRARY_PATH\s0 to \fI/some/lib\fR.
.PP
The third option is to work around the problem by disabling the
DB_File completely when build Perl by specifying \-Ui_db to Configure,
and then using the BerkeleyDB module from \s-1CPAN\s0 instead of DB_File.
The BerkeleyDB works with Berkeley \s-1DB\s0 versions 2.* or greater.
.PP
The Berkeley \s-1DB 4.1.25\s0 has been tested with Tru64 V5.1A and found
to work.  The latest Berkeley \s-1DB\s0 can be found from <http://www.sleepycat.com>.
.SS "64\-bit Perl on Tru64"
.IX Subsection "64-bit Perl on Tru64"
In Tru64 Perl's integers are automatically 64\-bit wide, there is
no need to use the Configure \-Duse64bitint option as described
in \s-1INSTALL. \s0 Similarly, there is no need for \-Duse64bitall
since pointers are automatically 64\-bit wide.
.SS "Warnings about floating-point overflow when compiling Perl on Tru64"
.IX Subsection "Warnings about floating-point overflow when compiling Perl on Tru64"
When compiling Perl in Tru64 you may (depending on the compiler
release) see two warnings like this
.PP
.Vb 3
\&    cc: Warning: numeric.c, line 104: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&        return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
and when compiling the \s-1POSIX\s0 extension
.PP
.Vb 3
\&    cc: Warning: const\-c.inc, line 2007: In this statement, floating\-point overflow occurs in evaluating the expression "1.8e308". (floatoverfl)
\&                return HUGE_VAL;
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-^
.Ve
.PP
The exact line numbers may vary between Perl releases.  The warnings
are benign and can be ignored: in later C compiler releases the warnings
should be gone.
.PP
When the file \fIpp_sys.c\fR is being compiled you may (depending on the
operating system release) see an additional compiler flag being used:
\&\f(CW\*(C`\-DNO_EFF_ONLY_OK\*(C'\fR.  This is normal and refers to a feature that is
relevant only if you use the \f(CW\*(C`filetest\*(C'\fR pragma.  In older releases of
the operating system the feature was broken and the \s-1NO_EFF_ONLY_OK\s0
instructs Perl not to use the feature.
.SH "Testing Perl on Tru64"
.IX Header "Testing Perl on Tru64"
During \*(L"make test\*(R" the \f(CW\*(C`comp/cpp\*(C'\fR will be skipped because on Tru64 it
cannot be tested before Perl has been installed.  The test refers to
the use of the \f(CW\*(C`\-P\*(C'\fR option of Perl.
.SH "ext/ODBM_File/odbm Test Failing With Static Builds"
.IX Header "ext/ODBM_File/odbm Test Failing With Static Builds"
The ext/ODBM_File/odbm is known to fail with static builds
(Configure \-Uusedl) due to a known bug in Tru64's static libdbm
library.  The good news is that you very probably don't need to ever
use the ODBM_File extension since more advanced NDBM_File works fine,
not to mention the even more advanced DB_File.
.SH "Perl Fails Because Of Unresolved Symbol sockatmark"
.IX Header "Perl Fails Because Of Unresolved Symbol sockatmark"
If you get an error like
.PP
.Vb 1
\&    Can\*(Aqt load \*(Aq.../OSF1/lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so\*(Aq for module IO: Unresolved symbol in .../lib/perl5/5.8.0/alpha\-dec_osf/auto/IO/IO.so: sockatmark at .../lib/perl5/5.8.0/alpha\-dec_osf/XSLoader.pm line 75.
.Ve
.PP
you need to either recompile your Perl in Tru64 4.0D or upgrade your
Tru64 4.0D to at least 4.0F: the \fIsockatmark()\fR system call was
added in Tru64 4.0F, and the \s-1IO\s0 extension refers that symbol.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jarkko Hietaniemi <jhi@iki.fi>
                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltw.1                                     0100644 0001750 0001750 00000021047 12566207447 022266  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTW 1"
.TH PERLTW 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\&\s-1XXXXXXXXXXXXXXXXXX, XXXXXXXXXXXX.
XXXXXX POD \s0(\s-1XXXXXX\s0) \s-1XX\s0; \s-1XXXXXXXXXXXXXX,
XXXXXX. XXXXXXXXXXX, XXX\s0 perlpod \s-1XXXX.\s0
.SH "NAME"
perltw \- XXXX Perl XX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XXXX\s0 Perl \s-1XXX\s0!
.PP
X 5.8.0 \s-1XXX,\s0 Perl \s-1XXXXXX\s0 Unicode (\s-1XXX\s0) \s-1XX,
XXXXXXXXXXXXXXXXXXX\s0; \s-1CJK \s0(\s-1XXX\s0) \s-1XXXXXXXX.\s0
Unicode \s-1XXXXXXX, XXXXXXXXXXXX: XXXX, XXXX,
XXXXXXXX \s0(\s-1XXX, XXXX, XXXX, XXXX, XXX,
XXXX, XX\s0). \s-1XXXXXXXXXXXXXX \s0(X \s-1PC XXXX\s0).
.PP
Perl \s-1XXX\s0 Unicode \s-1XXXX. XXX\s0 Perl \s-1XXXXXXXXX\s0 Unicode
\&\s-1XX\s0; Perl \s-1XXXXXX \s0(\s-1XXXXXXXXX\s0) \s-1XXX\s0 Unicode \s-1XXXX.
XXXXXXX, XXXXX\s0 Unicode \s-1XXXXXXXXXXXX,\s0 Perl
\&\s-1XXX\s0 Encode \s-1XXXX, XXXXXXXXXXXXXXXXXXX.\s0
.PP
Encode \s-1XXXXXXXXXXXXXXXXX \s0('big5' \s-1XX \s0'big5\-eten'):
.PP
.Vb 3
\&    big5\-eten   Big5 XX (XXXXXXX)
\&    big5\-hkscs  Big5 + XXXXX, 2001 XX
\&    cp950       XXX 950 (Big5 + XXXXXXX)
.Ve
.PP
\&\s-1XXXX, X\s0 Big5 \s-1XXXXXXX\s0 Unicode, \s-1XXXXXXXX:\s0
.PP
.Vb 1
\&    perl \-Mencoding=big5,STDOUT,utf8 \-pe1 < file.big5 > file.utf8
.Ve
.PP
Perl \s-1XXXX \s0\*(L"piconv\*(R", \s-1XXXXX\s0 Perl \s-1XXXXXXXXXXX, XXXX:\s0
.PP
.Vb 2
\&    piconv \-f big5 \-t utf8 < file.big5 > file.utf8
\&    piconv \-f utf8 \-t big5 < file.utf8 > file.big5
.Ve
.PP
\&\s-1XX, XX\s0 encoding \s-1XX, XXXXXXXXXXXXXXXXX, XXXX:\s0
.PP
.Vb 7
\&    #!/usr/bin/env perl
\&    # XX big5 XXXX; XXXXXXXXXXXXX big5 XX
\&    use encoding \*(Aqbig5\*(Aq, STDIN => \*(Aqbig5\*(Aq, STDOUT => \*(Aqbig5\*(Aq;
\&    print length("XX");      #  2 (XXXXXXX)
\&    print length(\*(AqXX\*(Aq);      #  4 (XXXXXXXX)
\&    print index("XXXX", "XX"); # \-1 (XXXXXXX)
\&    print index(\*(AqXXXX\*(Aq, \*(AqXX\*(Aq); #  1 (XXXXXXXXX)
.Ve
.PP
\&\s-1XXXXXXXX, \*(L"X\*(R" XXXXXXXX \*(L"X\*(R" XXXXXXXXXX\s0 Big5
\&\s-1XX \*(L"X\*(R"\s0; \*(L"X\*(R" \s-1XXXXXXXXX \*(L"X\*(R" XXXXXXXXXX \*(L"X\*(R".
XXXXXX\s0 Big5 \s-1XXXXXXXXXXX.\s0
.SS "\s-1XXXXXXX\s0"
.IX Subsection "XXXXXXX"
\&\s-1XXXXXXXXXXX, XXX CPAN \s0(<http://www.cpan.org/>) \s-1XX\s0
Encode::HanExtra \s-1XX. XXXXXXXXXXX:\s0
.PP
.Vb 4
\&    cccii       1980 XXXXXXXXXXXX
\&    euc\-tw      Unix XXXXX, XX CNS11643 XX 1\-7
\&    big5plus    XXXXXXXXXXXXX Big5+
\&    big5ext     XXXXXXXXXXXXX Big5e
.Ve
.PP
\&\s-1XX,\s0 Encode::HanConvert \s-1XXXXXXXXXXXXXXXX:\s0
.PP
.Vb 2
\&    big5\-simp   Big5 XXXXX Unicode XXXXXX
\&    gbk\-trad    GBK XXXXX Unicode XXXXXX
.Ve
.PP
\&\s-1XXX GBK X\s0 Big5 \s-1XXXX, XXXXXXXXX\s0 b2g.pl X g2b.pl \s-1XXXX,
XXXXXXXXXXX:\s0
.PP
.Vb 3
\&    use Encode::HanConvert;
\&    $euc_cn = big5_to_gb($big5); # X Big5 XX GBK
\&    $big5 = gb_to_big5($euc_cn); # X GBK XX Big5
.Ve
.SS "\s-1XXXXXX\s0"
.IX Subsection "XXXXXX"
\&\s-1XXX\s0 Perl \s-1XXXXXXXXX \s0(\s-1XXXXXXXXX\s0), \s-1XXXXXXX\s0
Perl \s-1XXX, XX\s0 Unicode \s-1XXXXX. XX, XXXXXXXXX:\s0
.SS "\s-1XX\s0 Perl \s-1XXXXX\s0"
.IX Subsection "XX Perl XXXXX"
.IP "<http://www.perl.com/>" 4
.IX Item "<http://www.perl.com/>"
Perl \s-1XXX \s0(\s-1XXXXXXXX\s0)
.IP "<http://www.cpan.org/>" 4
.IX Item "<http://www.cpan.org/>"
Perl \s-1XXXXX \s0(Comprehensive Perl Archive Network)
.IP "<http://lists.perl.org/>" 4
.IX Item "<http://lists.perl.org/>"
Perl \s-1XXXXXX\s0
.SS "\s-1XX\s0 Perl \s-1XXX\s0"
.IX Subsection "XX Perl XXX"
.IP "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>" 4
.IX Item "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>"
\&\s-1XXXXXXXXX\s0 Perl \s-1XX\s0
.IP "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>" 4
.IX Item "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>"
\&\s-1XX\s0 Perl \s-1XXXXX \s0(\s-1XXXXX BBS X\s0 Perl \s-1XXX\s0)
.SS "Perl \s-1XXXXX\s0"
.IX Subsection "Perl XXXXX"
.IP "<http://www.pm.org/groups/taiwan.html>" 4
.IX Item "<http://www.pm.org/groups/taiwan.html>"
\&\s-1XX\s0 Perl \s-1XXXXX\s0
.IP "<irc://irc.freenode.org/#perl.tw>" 4
.IX Item "<irc://irc.freenode.org/#perl.tw>"
Perl.tw \s-1XXXXX\s0
.SS "Unicode \s-1XXXX\s0"
.IX Subsection "Unicode XXXX"
.IP "<http://www.unicode.org/>" 4
.IX Item "<http://www.unicode.org/>"
Unicode \s-1XXXX \s0(Unicode \s-1XXXXXX\s0)
.IP "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>" 4
.IX Item "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>"
Unix/Linux \s-1XX UTF\-8 X\s0 Unicode \s-1XXX\s0
.SS "\s-1XXXXX\s0"
.IX Subsection "XXXXX"
.IP "\s-1XXXXXXX\s0" 4
.IX Item "XXXXXXX"
<http://www.cpatch.org/>
.IP "Linux \s-1XXXXXXX\s0" 4
.IX Item "Linux XXXXXXX"
<http://www.linux.org.tw/CLDP/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::TW, encoding, perluniintro, perlunicode
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <jhi@iki.fi>
.PP
Audrey Tang (\s-1XX\s0) <audreyt@audreyt.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltw5.16.1                                 0100644 0001750 0001750 00000020701 12566207426 022571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTW 1"
.TH PERLTW 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perltw \- XXXX Perl XX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XXXX\s0 Perl \s-1XXX\s0!
.PP
X 5.8.0 \s-1XXX\s0, Perl \s-1XXXXXX\s0 Unicode (\s-1XXX\s0) \s-1XX\s0,
\&\s-1XXXXXXXXXXXXXXXXXXX\s0; \s-1CJK\s0 (\s-1XXX\s0) \s-1XXXXXXXX\s0.
Unicode \s-1XXXXXXX\s0, \s-1XXXXXXXXXXXX:\s0 \s-1XXXX\s0, \s-1XXXX\s0,
\&\s-1XXXXXXXX\s0 (\s-1XXX\s0, \s-1XXXX\s0, \s-1XXXX\s0, \s-1XXXX\s0, \s-1XXX\s0,
\&\s-1XXXX\s0, \s-1XX\s0). \s-1XXXXXXXXXXXXXX\s0 (X \s-1PC\s0 \s-1XXXX\s0).
.PP
Perl \s-1XXX\s0 Unicode \s-1XXXX\s0. \s-1XXX\s0 Perl \s-1XXXXXXXXX\s0 Unicode
\&\s-1XX\s0; Perl \s-1XXXXXX\s0 (\s-1XXXXXXXXX\s0) \s-1XXX\s0 Unicode \s-1XXXX\s0.
\&\s-1XXXXXXX\s0, \s-1XXXXX\s0 Unicode \s-1XXXXXXXXXXXX\s0, Perl
\&\s-1XXX\s0 Encode \s-1XXXX\s0, \s-1XXXXXXXXXXXXXXXXXXX\s0.
.PP
Encode \s-1XXXXXXXXXXXXXXXXX\s0 ('big5' \s-1XX\s0 'big5\-eten'):
.PP
.Vb 3
\&    big5\-eten   Big5 XX (XXXXXXX)
\&    big5\-hkscs  Big5 + XXXXX, 2001 XX
\&    cp950       XXX 950 (Big5 + XXXXXXX)
.Ve
.PP
\&\s-1XXXX\s0, X Big5 \s-1XXXXXXX\s0 Unicode, \s-1XXXXXXXX:\s0
.PP
.Vb 1
\&    perl \-Mencoding=big5,STDOUT,utf8 \-pe1 < file.big5 > file.utf8
.Ve
.PP
Perl \s-1XXXX\s0 \*(L"piconv\*(R", \s-1XXXXX\s0 Perl \s-1XXXXXXXXXXX\s0, \s-1XXXX:\s0
.PP
.Vb 2
\&    piconv \-f big5 \-t utf8 < file.big5 > file.utf8
\&    piconv \-f utf8 \-t big5 < file.utf8 > file.big5
.Ve
.PP
\&\s-1XX\s0, \s-1XX\s0 encoding \s-1XX\s0, \s-1XXXXXXXXXXXXXXXXX\s0, \s-1XXXX:\s0
.PP
.Vb 7
\&    #!/usr/bin/env perl
\&    # XX big5 XXXX; XXXXXXXXXXXXX big5 XX
\&    use encoding \*(Aqbig5\*(Aq, STDIN => \*(Aqbig5\*(Aq, STDOUT => \*(Aqbig5\*(Aq;
\&    print length("XX");      #  2 (XXXXXXX)
\&    print length(\*(AqXX\*(Aq);      #  4 (XXXXXXXX)
\&    print index("XXXX", "XX"); # \-1 (XXXXXXX)
\&    print index(\*(AqXXXX\*(Aq, \*(AqXX\*(Aq); #  1 (XXXXXXXXX)
.Ve
.PP
\&\s-1XXXXXXXX\s0, \*(L"X\*(R" \s-1XXXXXXXX\s0 \*(L"X\*(R" \s-1XXXXXXXXXX\s0 Big5
\&\s-1XX\s0 \*(L"X\*(R"; \*(L"X\*(R" \s-1XXXXXXXXX\s0 \*(L"X\*(R" \s-1XXXXXXXXXX\s0 \*(L"X\*(R".
\&\s-1XXXXXX\s0 Big5 \s-1XXXXXXXXXXX\s0.
.SS "\s-1XXXXXXX\s0"
.IX Subsection "XXXXXXX"
\&\s-1XXXXXXXXXXX\s0, \s-1XXX\s0 \s-1CPAN\s0 (<http://www.cpan.org/>) \s-1XX\s0
Encode::HanExtra \s-1XX\s0. \s-1XXXXXXXXXXX:\s0
.PP
.Vb 4
\&    cccii       1980 XXXXXXXXXXXX
\&    euc\-tw      Unix XXXXX, XX CNS11643 XX 1\-7
\&    big5plus    XXXXXXXXXXXXX Big5+
\&    big5ext     XXXXXXXXXXXXX Big5e
.Ve
.PP
\&\s-1XX\s0, Encode::HanConvert \s-1XXXXXXXXXXXXXXXX:\s0
.PP
.Vb 2
\&    big5\-simp   Big5 XXXXX Unicode XXXXXX
\&    gbk\-trad    GBK XXXXX Unicode XXXXXX
.Ve
.PP
\&\s-1XXX\s0 \s-1GBK\s0 X Big5 \s-1XXXX\s0, \s-1XXXXXXXXX\s0 b2g.pl X g2b.pl \s-1XXXX\s0,
\&\s-1XXXXXXXXXXX:\s0
.PP
.Vb 3
\&    use Encode::HanConvert;
\&    $euc_cn = big5_to_gb($big5); # X Big5 XX GBK
\&    $big5 = gb_to_big5($euc_cn); # X GBK XX Big5
.Ve
.SS "\s-1XXXXXX\s0"
.IX Subsection "XXXXXX"
\&\s-1XXX\s0 Perl \s-1XXXXXXXXX\s0 (\s-1XXXXXXXXX\s0), \s-1XXXXXXX\s0
Perl \s-1XXX\s0, \s-1XX\s0 Unicode \s-1XXXXX\s0. \s-1XX\s0, \s-1XXXXXXXXX:\s0
.SS "\s-1XX\s0 Perl \s-1XXXXX\s0"
.IX Subsection "XX Perl XXXXX"
.IP "<http://www.perl.com/>" 4
.IX Item "<http://www.perl.com/>"
Perl \s-1XXX\s0 (\s-1XXXXXXXX\s0)
.IP "<http://www.cpan.org/>" 4
.IX Item "<http://www.cpan.org/>"
Perl \s-1XXXXX\s0 (Comprehensive Perl Archive Network)
.IP "<http://lists.perl.org/>" 4
.IX Item "<http://lists.perl.org/>"
Perl \s-1XXXXXX\s0
.SS "\s-1XX\s0 Perl \s-1XXX\s0"
.IX Subsection "XX Perl XXX"
.IP "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>" 4
.IX Item "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>"
\&\s-1XXXXXXXXX\s0 Perl \s-1XX\s0
.IP "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>" 4
.IX Item "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>"
\&\s-1XX\s0 Perl \s-1XXXXX\s0 (\s-1XXXXX\s0 \s-1BBS\s0 X Perl \s-1XXX\s0)
.SS "Perl \s-1XXXXX\s0"
.IX Subsection "Perl XXXXX"
.IP "<http://www.pm.org/groups/taiwan.html>" 4
.IX Item "<http://www.pm.org/groups/taiwan.html>"
\&\s-1XX\s0 Perl \s-1XXXXX\s0
.IP "<irc://irc.freenode.org/#perl.tw>" 4
.IX Item "<irc://irc.freenode.org/#perl.tw>"
Perl.tw \s-1XXXXX\s0
.SS "Unicode \s-1XXXX\s0"
.IX Subsection "Unicode XXXX"
.IP "<http://www.unicode.org/>" 4
.IX Item "<http://www.unicode.org/>"
Unicode \s-1XXXX\s0 (Unicode \s-1XXXXXX\s0)
.IP "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>" 4
.IX Item "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>"
Unix/Linux \s-1XX\s0 \s-1UTF\-8\s0 X Unicode \s-1XXX\s0
.SS "\s-1XXXXX\s0"
.IX Subsection "XXXXX"
.IP "\s-1XXXXXXX\s0" 4
.IX Item "XXXXXXX"
<http://www.cpatch.org/>
.IP "Linux \s-1XXXXXXX\s0" 4
.IX Item "Linux XXXXXXX"
<http://www.linux.org.tw/CLDP/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::TW, encoding, perluniintro, perlunicode
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <jhi@iki.fi>
.PP
Audrey Tang (\s-1XX\s0) <audreyt@audreyt.org>
                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perltw5.18.1                                 0100644 0001750 0001750 00000021047 12566207447 022602  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLTW 1"
.TH PERLTW 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\&\s-1XXXXXXXXXXXXXXXXXX, XXXXXXXXXXXX.
XXXXXX POD \s0(\s-1XXXXXX\s0) \s-1XX\s0; \s-1XXXXXXXXXXXXXX,
XXXXXX. XXXXXXXXXXX, XXX\s0 perlpod \s-1XXXX.\s0
.SH "NAME"
perltw \- XXXX Perl XX
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XXXX\s0 Perl \s-1XXX\s0!
.PP
X 5.8.0 \s-1XXX,\s0 Perl \s-1XXXXXX\s0 Unicode (\s-1XXX\s0) \s-1XX,
XXXXXXXXXXXXXXXXXXX\s0; \s-1CJK \s0(\s-1XXX\s0) \s-1XXXXXXXX.\s0
Unicode \s-1XXXXXXX, XXXXXXXXXXXX: XXXX, XXXX,
XXXXXXXX \s0(\s-1XXX, XXXX, XXXX, XXXX, XXX,
XXXX, XX\s0). \s-1XXXXXXXXXXXXXX \s0(X \s-1PC XXXX\s0).
.PP
Perl \s-1XXX\s0 Unicode \s-1XXXX. XXX\s0 Perl \s-1XXXXXXXXX\s0 Unicode
\&\s-1XX\s0; Perl \s-1XXXXXX \s0(\s-1XXXXXXXXX\s0) \s-1XXX\s0 Unicode \s-1XXXX.
XXXXXXX, XXXXX\s0 Unicode \s-1XXXXXXXXXXXX,\s0 Perl
\&\s-1XXX\s0 Encode \s-1XXXX, XXXXXXXXXXXXXXXXXXX.\s0
.PP
Encode \s-1XXXXXXXXXXXXXXXXX \s0('big5' \s-1XX \s0'big5\-eten'):
.PP
.Vb 3
\&    big5\-eten   Big5 XX (XXXXXXX)
\&    big5\-hkscs  Big5 + XXXXX, 2001 XX
\&    cp950       XXX 950 (Big5 + XXXXXXX)
.Ve
.PP
\&\s-1XXXX, X\s0 Big5 \s-1XXXXXXX\s0 Unicode, \s-1XXXXXXXX:\s0
.PP
.Vb 1
\&    perl \-Mencoding=big5,STDOUT,utf8 \-pe1 < file.big5 > file.utf8
.Ve
.PP
Perl \s-1XXXX \s0\*(L"piconv\*(R", \s-1XXXXX\s0 Perl \s-1XXXXXXXXXXX, XXXX:\s0
.PP
.Vb 2
\&    piconv \-f big5 \-t utf8 < file.big5 > file.utf8
\&    piconv \-f utf8 \-t big5 < file.utf8 > file.big5
.Ve
.PP
\&\s-1XX, XX\s0 encoding \s-1XX, XXXXXXXXXXXXXXXXX, XXXX:\s0
.PP
.Vb 7
\&    #!/usr/bin/env perl
\&    # XX big5 XXXX; XXXXXXXXXXXXX big5 XX
\&    use encoding \*(Aqbig5\*(Aq, STDIN => \*(Aqbig5\*(Aq, STDOUT => \*(Aqbig5\*(Aq;
\&    print length("XX");      #  2 (XXXXXXX)
\&    print length(\*(AqXX\*(Aq);      #  4 (XXXXXXXX)
\&    print index("XXXX", "XX"); # \-1 (XXXXXXX)
\&    print index(\*(AqXXXX\*(Aq, \*(AqXX\*(Aq); #  1 (XXXXXXXXX)
.Ve
.PP
\&\s-1XXXXXXXX, \*(L"X\*(R" XXXXXXXX \*(L"X\*(R" XXXXXXXXXX\s0 Big5
\&\s-1XX \*(L"X\*(R"\s0; \*(L"X\*(R" \s-1XXXXXXXXX \*(L"X\*(R" XXXXXXXXXX \*(L"X\*(R".
XXXXXX\s0 Big5 \s-1XXXXXXXXXXX.\s0
.SS "\s-1XXXXXXX\s0"
.IX Subsection "XXXXXXX"
\&\s-1XXXXXXXXXXX, XXX CPAN \s0(<http://www.cpan.org/>) \s-1XX\s0
Encode::HanExtra \s-1XX. XXXXXXXXXXX:\s0
.PP
.Vb 4
\&    cccii       1980 XXXXXXXXXXXX
\&    euc\-tw      Unix XXXXX, XX CNS11643 XX 1\-7
\&    big5plus    XXXXXXXXXXXXX Big5+
\&    big5ext     XXXXXXXXXXXXX Big5e
.Ve
.PP
\&\s-1XX,\s0 Encode::HanConvert \s-1XXXXXXXXXXXXXXXX:\s0
.PP
.Vb 2
\&    big5\-simp   Big5 XXXXX Unicode XXXXXX
\&    gbk\-trad    GBK XXXXX Unicode XXXXXX
.Ve
.PP
\&\s-1XXX GBK X\s0 Big5 \s-1XXXX, XXXXXXXXX\s0 b2g.pl X g2b.pl \s-1XXXX,
XXXXXXXXXXX:\s0
.PP
.Vb 3
\&    use Encode::HanConvert;
\&    $euc_cn = big5_to_gb($big5); # X Big5 XX GBK
\&    $big5 = gb_to_big5($euc_cn); # X GBK XX Big5
.Ve
.SS "\s-1XXXXXX\s0"
.IX Subsection "XXXXXX"
\&\s-1XXX\s0 Perl \s-1XXXXXXXXX \s0(\s-1XXXXXXXXX\s0), \s-1XXXXXXX\s0
Perl \s-1XXX, XX\s0 Unicode \s-1XXXXX. XX, XXXXXXXXX:\s0
.SS "\s-1XX\s0 Perl \s-1XXXXX\s0"
.IX Subsection "XX Perl XXXXX"
.IP "<http://www.perl.com/>" 4
.IX Item "<http://www.perl.com/>"
Perl \s-1XXX \s0(\s-1XXXXXXXX\s0)
.IP "<http://www.cpan.org/>" 4
.IX Item "<http://www.cpan.org/>"
Perl \s-1XXXXX \s0(Comprehensive Perl Archive Network)
.IP "<http://lists.perl.org/>" 4
.IX Item "<http://lists.perl.org/>"
Perl \s-1XXXXXX\s0
.SS "\s-1XX\s0 Perl \s-1XXX\s0"
.IX Subsection "XX Perl XXX"
.IP "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>" 4
.IX Item "<http://www.oreilly.com.tw/product_perl.php?id=index_perl>"
\&\s-1XXXXXXXXX\s0 Perl \s-1XX\s0
.IP "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>" 4
.IX Item "<http://groups.google.com/groups?q=tw.bbs.comp.lang.perl>"
\&\s-1XX\s0 Perl \s-1XXXXX \s0(\s-1XXXXX BBS X\s0 Perl \s-1XXX\s0)
.SS "Perl \s-1XXXXX\s0"
.IX Subsection "Perl XXXXX"
.IP "<http://www.pm.org/groups/taiwan.html>" 4
.IX Item "<http://www.pm.org/groups/taiwan.html>"
\&\s-1XX\s0 Perl \s-1XXXXX\s0
.IP "<irc://irc.freenode.org/#perl.tw>" 4
.IX Item "<irc://irc.freenode.org/#perl.tw>"
Perl.tw \s-1XXXXX\s0
.SS "Unicode \s-1XXXX\s0"
.IX Subsection "Unicode XXXX"
.IP "<http://www.unicode.org/>" 4
.IX Item "<http://www.unicode.org/>"
Unicode \s-1XXXX \s0(Unicode \s-1XXXXXX\s0)
.IP "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>" 4
.IX Item "<http://www.cl.cam.ac.uk/%7Emgk25/unicode.html>"
Unix/Linux \s-1XX UTF\-8 X\s0 Unicode \s-1XXX\s0
.SS "\s-1XXXXX\s0"
.IX Subsection "XXXXX"
.IP "\s-1XXXXXXX\s0" 4
.IX Item "XXXXXXX"
<http://www.cpatch.org/>
.IP "Linux \s-1XXXXXXX\s0" 4
.IX Item "Linux XXXXXXX"
<http://www.linux.org.tw/CLDP/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::TW, encoding, perluniintro, perlunicode
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <jhi@iki.fi>
.PP
Audrey Tang (\s-1XX\s0) <audreyt@audreyt.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlunicode.1                                0100644 0001750 0001750 00000256744 12566207447 023300  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUNICODE 1"
.TH PERLUNICODE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlunicode \- Unicode support in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Important Caveats"
.IX Subsection "Important Caveats"
Unicode support is an extensive requirement. While Perl does not
implement the Unicode standard or the accompanying technical reports
from cover to cover, Perl does support many Unicode features.
.PP
People who want to learn to use Unicode in Perl, should probably read
the Perl Unicode tutorial, perlunitut and
perluniintro, before reading
this reference document.
.PP
Also, the use of Unicode may present security issues that aren't obvious.
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
.ie n .IP "Safest if you ""use feature 'unicode_strings'""" 4
.el .IP "Safest if you ``use feature 'unicode_strings'''" 4
.IX Item "Safest if you use feature 'unicode_strings'"
In order to preserve backward compatibility, Perl does not turn
on full internal Unicode support unless the pragma
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified.  (This is automatically
selected if you use \f(CW\*(C`use 5.012\*(C'\fR or higher.)  Failure to do this can
trigger unexpected surprises.  See \*(L"The \*(R"Unicode Bug"" below.
.Sp
This pragma doesn't affect I/O.  Nor does it change the internal
representation of strings, only their interpretation.  There are still
several places where Unicode isn't fully supported, such as in
filenames.
.IP "Input and Output Layers" 4
.IX Item "Input and Output Layers"
Perl knows when a filehandle uses Perl's internal Unicode encodings
(\s-1UTF\-8,\s0 or UTF-EBCDIC if in \s-1EBCDIC\s0) if the filehandle is opened with
the \*(L":encoding(utf8)\*(R" layer.  Other encodings can be converted to Perl's
encoding on input or from Perl's encoding on output by use of the
\&\*(L":encoding(...)\*(R"  layer.  See open.
.Sp
To indicate that Perl source itself is in \s-1UTF\-8,\s0 use \f(CW\*(C`use utf8;\*(C'\fR.
.ie n .IP """use utf8"" still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.el .IP "\f(CWuse utf8\fR still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.IX Item "use utf8 still needed to enable UTF-8/UTF-EBCDIC in scripts"
As a compatibility measure, the \f(CW\*(C`use utf8\*(C'\fR pragma must be explicitly
included to enable recognition of \s-1UTF\-8\s0 in the Perl scripts themselves
(in string or regular expression literals, or in identifier names) on
ASCII-based machines or to recognize UTF-EBCDIC on EBCDIC-based
machines.  \fBThese are the only times when an explicit \f(CB\*(C`use utf8\*(C'\fB
is needed.\fR  See utf8.
.IP "BOM-marked scripts and \s-1UTF\-16\s0 scripts autodetected" 4
.IX Item "BOM-marked scripts and UTF-16 scripts autodetected"
If a Perl script begins marked with the Unicode \s-1BOM \s0(\s-1UTF\-16LE, UTF16\-BE,\s0
or \s-1UTF\-8\s0), or if the script looks like non-BOM-marked \s-1UTF\-16\s0 of either
endianness, Perl will correctly read in the script as Unicode.
(BOMless \s-1UTF\-8\s0 cannot be effectively recognized or differentiated from
\&\s-1ISO 8859\-1\s0 or other eight-bit encodings.)
.ie n .IP """use encoding"" needed to upgrade non\-Latin\-1 byte strings" 4
.el .IP "\f(CWuse encoding\fR needed to upgrade non\-Latin\-1 byte strings" 4
.IX Item "use encoding needed to upgrade non-Latin-1 byte strings"
By default, there is a fundamental asymmetry in Perl's Unicode model:
implicit upgrading from byte strings to Unicode strings assumes that
they were encoded in \fI\s-1ISO 8859\-1 \s0(Latin\-1)\fR, but Unicode strings are
downgraded with \s-1UTF\-8\s0 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin\-1.
.Sp
See \*(L"Byte and Character Semantics\*(R" for more details.
.SS "Byte and Character Semantics"
.IX Subsection "Byte and Character Semantics"
Perl uses logically-wide characters to represent strings internally.
.PP
Starting in Perl 5.14, Perl-level operations work with
characters rather than bytes within the scope of a
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (or equivalently
\&\f(CW\*(C`use 5.012\*(C'\fR or higher).  (This is not true if bytes have been
explicitly requested by \f(CW\*(C`use bytes\*(C'\fR, nor necessarily true
for interactions with the platform's operating system.)
.PP
For earlier Perls, and when \f(CW\*(C`unicode_strings\*(C'\fR is not in effect, Perl
provides a fairly safe environment that can handle both types of
semantics in programs.  For operations where Perl can unambiguously
decide that the input data are characters, Perl switches to character
semantics.  For operations where this determination cannot be made
without additional information from the user, Perl decides in favor of
compatibility and chooses to use byte semantics.
.PP
When \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in
effect, Perl uses the semantics associated with the current locale.
(\f(CW\*(C`use locale\*(C'\fR overrides \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in the same scope;
while \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR effectively also selects
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in its scope; see perllocale.)
Otherwise, Perl uses the platform's native
byte semantics for characters whose code points are less than 256, and
Unicode semantics for those greater than 255.  That means that non-ASCII
characters are undefined except for their
ordinal numbers.  This means that none have case (upper and lower), nor are any
a member of character classes, like \f(CW\*(C`[:alpha:]\*(C'\fR or \f(CW\*(C`\ew\*(C'\fR.  (But all do belong
to the \f(CW\*(C`\eW\*(C'\fR class or the Perl regular expression extension \f(CW\*(C`[:^alpha:]\*(C'\fR.)
.PP
This behavior preserves compatibility with earlier versions of Perl,
which allowed byte semantics in Perl operations only if
none of the program's inputs were marked as being a source of Unicode
character data.  Such data may come from filehandles, from calls to
external programs, from information provided by the system (such as \f(CW%ENV\fR),
or from literals and constants in the source text.
.PP
The \f(CW\*(C`utf8\*(C'\fR pragma is primarily a compatibility device that enables
recognition of \s-1UTF\-\s0(8|EBCDIC) in literals encountered by the parser.
Note that this pragma is only required while Perl defaults to byte
semantics; when character semantics become the default, this pragma
may become a no-op.  See utf8.
.PP
If strings operating under byte semantics and strings with Unicode
character data are concatenated, the new string will have
character semantics.  This can cause surprises: See \*(L"\s-1BUGS\*(R"\s0, below.
You can choose to be warned when this happens.  See encoding::warnings.
.PP
Under character semantics, many operations that formerly operated on
bytes now operate on characters. A character in Perl is
logically just a number ranging from 0 to 2**31 or so. Larger
characters may encode into longer sequences of bytes internally, but
this internal detail is mostly hidden for Perl code.
See perluniintro for more.
.SS "Effects of Character Semantics"
.IX Subsection "Effects of Character Semantics"
Character semantics have the following effects:
.IP "\(bu" 4
Strings\*(--including hash keys\*(--and regular expression patterns may
contain characters that have an ordinal value larger than 255.
.Sp
If you use a Unicode editor to edit your program, Unicode characters may
occur directly within the literal strings in \s-1UTF\-8\s0 encoding, or \s-1UTF\-16.
\&\s0(The former requires a \s-1BOM\s0 or \f(CW\*(C`use utf8\*(C'\fR, the latter requires a \s-1BOM.\s0)
.Sp
Unicode characters can also be added to a string by using the \f(CW\*(C`\eN{U+...}\*(C'\fR
notation.  The Unicode code for the desired character, in hexadecimal,
should be placed in the braces, after the \f(CW\*(C`U\*(C'\fR. For instance, a smiley face is
\&\f(CW\*(C`\eN{U+263A}\*(C'\fR.
.Sp
Alternatively, you can use the \f(CW\*(C`\ex{...}\*(C'\fR notation for characters 0x100 and
above.  For characters below 0x100 you may get byte semantics instead of
character semantics;  see \*(L"The \*(R"Unicode Bug"".  On \s-1EBCDIC\s0 machines there is
the additional problem that the value for such characters gives the \s-1EBCDIC\s0
character rather than the Unicode one, thus it is more portable to use
\&\f(CW\*(C`\eN{U+...}\*(C'\fR instead.
.Sp
Additionally, you can use the \f(CW\*(C`\eN{...}\*(C'\fR notation and put the official
Unicode character name within the braces, such as
\&\f(CW\*(C`\eN{WHITE SMILING FACE}\*(C'\fR.  This automatically loads the charnames
module with the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR options.  If you prefer different
options for this module, you can instead, before the \f(CW\*(C`\eN{...}\*(C'\fR,
explicitly load it with your desired options; for example,
.Sp
.Vb 1
\&   use charnames \*(Aq:loose\*(Aq;
.Ve
.IP "\(bu" 4
If an appropriate encoding is specified, identifiers within the
Perl script may contain Unicode alphanumeric characters, including
ideographs.  Perl does not currently attempt to canonicalize variable
names.
.IP "\(bu" 4
Regular expressions match characters instead of bytes.  \*(L".\*(R" matches
a character instead of a byte.
.IP "\(bu" 4
Bracketed character classes in regular expressions match characters instead of
bytes and match against the character properties specified in the
Unicode properties database.  \f(CW\*(C`\ew\*(C'\fR can be used to match a Japanese
ideograph, for instance.
.IP "\(bu" 4
Named Unicode properties, scripts, and block ranges may be used (like bracketed
character classes) by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct and
the \f(CW\*(C`\eP{}\*(C'\fR negation, \*(L"doesn't match property\*(R".
See \*(L"Unicode Character Properties\*(R" for more details.
.Sp
You can define your own character properties and use them
in the regular expression with the \f(CW\*(C`\ep{}\*(C'\fR or \f(CW\*(C`\eP{}\*(C'\fR construct.
See \*(L"User-Defined Character Properties\*(R" for more details.
.IP "\(bu" 4
The special pattern \f(CW\*(C`\eX\*(C'\fR matches a logical character, an \*(L"extended grapheme
cluster\*(R" in Standardese.  In Unicode what appears to the user to be a single
character, for example an accented \f(CW\*(C`G\*(C'\fR, may in fact be composed of a sequence
of characters, in this case a \f(CW\*(C`G\*(C'\fR followed by an accent character.  \f(CW\*(C`\eX\*(C'\fR
will match the entire sequence.
.IP "\(bu" 4
The \f(CW\*(C`tr///\*(C'\fR operator translates characters instead of bytes.  Note
that the \f(CW\*(C`tr///CU\*(C'\fR functionality has been removed.  For similar
functionality see pack('U0', ...) and pack('C0', ...).
.IP "\(bu" 4
Case translation operators use the Unicode case translation tables
when character input is provided.  Note that \f(CW\*(C`uc()\*(C'\fR, or \f(CW\*(C`\eU\*(C'\fR in
interpolated strings, translates to uppercase, while \f(CW\*(C`ucfirst\*(C'\fR,
or \f(CW\*(C`\eu\*(C'\fR in interpolated strings, translates to titlecase in languages
that make the distinction (which is equivalent to uppercase in languages
without the distinction).
.IP "\(bu" 4
Most operators that deal with positions or lengths in a string will
automatically switch to using character positions, including
\&\f(CW\*(C`chop()\*(C'\fR, \f(CW\*(C`chomp()\*(C'\fR, \f(CW\*(C`substr()\*(C'\fR, \f(CW\*(C`pos()\*(C'\fR, \f(CW\*(C`index()\*(C'\fR, \f(CW\*(C`rindex()\*(C'\fR,
\&\f(CW\*(C`sprintf()\*(C'\fR, \f(CW\*(C`write()\*(C'\fR, and \f(CW\*(C`length()\*(C'\fR.  An operator that
specifically does not switch is \f(CW\*(C`vec()\*(C'\fR.  Operators that really don't
care include operators that treat strings as a bucket of bits such as
\&\f(CW\*(C`sort()\*(C'\fR, and operators dealing with filenames.
.IP "\(bu" 4
The \f(CW\*(C`pack()\*(C'\fR/\f(CW\*(C`unpack()\*(C'\fR letter \f(CW\*(C`C\*(C'\fR does \fInot\fR change, since it is often
used for byte-oriented formats.  Again, think \f(CW\*(C`char\*(C'\fR in the C language.
.Sp
There is a new \f(CW\*(C`U\*(C'\fR specifier that converts between Unicode characters
and code points. There is also a \f(CW\*(C`W\*(C'\fR specifier that is the equivalent of
\&\f(CW\*(C`chr\*(C'\fR/\f(CW\*(C`ord\*(C'\fR and properly handles character values even if they are above 255.
.IP "\(bu" 4
The \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR functions work on characters, similar to
\&\f(CW\*(C`pack("W")\*(C'\fR and \f(CW\*(C`unpack("W")\*(C'\fR, \fInot\fR \f(CW\*(C`pack("C")\*(C'\fR and
\&\f(CW\*(C`unpack("C")\*(C'\fR.  \f(CW\*(C`pack("C")\*(C'\fR and \f(CW\*(C`unpack("C")\*(C'\fR are methods for
emulating byte-oriented \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR on Unicode strings.
While these methods reveal the internal encoding of Unicode strings,
that is not something one normally needs to care about at all.
.IP "\(bu" 4
The bit string operators, \f(CW\*(C`& | ^ ~\*(C'\fR, can operate on character data.
However, for backward compatibility, such as when using bit string
operations when characters are all less than 256 in ordinal value, one
should not use \f(CW\*(C`~\*(C'\fR (the bit complement) with characters of both
values less than 256 and values greater than 256.  Most importantly,
DeMorgan's laws (\f(CW\*(C`~($x|$y) eq ~$x&~$y\*(C'\fR and \f(CW\*(C`~($x&$y) eq ~$x|~$y\*(C'\fR)
will not hold.  The reason for this mathematical \fIfaux pas\fR is that
the complement cannot return \fBboth\fR the 8\-bit (byte-wide) bit
complement \fBand\fR the full character-wide bit complement.
.IP "\(bu" 4
There is a \s-1CPAN\s0 module, Unicode::Casing, which allows you to define
your own mappings to be used in \f(CW\*(C`lc()\*(C'\fR, \f(CW\*(C`lcfirst()\*(C'\fR, \f(CW\*(C`uc()\*(C'\fR,
\&\f(CW\*(C`ucfirst()\*(C'\fR, and \f(CW\*(C`fc\*(C'\fR (or their double-quoted string inlined
versions such as \f(CW\*(C`\eU\*(C'\fR).
(Prior to Perl 5.16, this functionality was partially provided
in the Perl core, but suffered from a number of insurmountable
drawbacks, so the \s-1CPAN\s0 module was written instead.)
.IP "\(bu" 4
And finally, \f(CW\*(C`scalar reverse()\*(C'\fR reverses by character rather than by byte.
.SS "Unicode Character Properties"
.IX Subsection "Unicode Character Properties"
(The only time that Perl considers a sequence of individual code
points as a single logical character is in the \f(CW\*(C`\eX\*(C'\fR construct, already
mentioned above.   Therefore \*(L"character\*(R" in this discussion means a single
Unicode code point.)
.PP
Very nearly all Unicode character properties are accessible through
regular expressions by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct
and the \f(CW\*(C`\eP{}\*(C'\fR \*(L"doesn't match property\*(R" for its negation.
.PP
For instance, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character with the Unicode
\&\*(L"Uppercase\*(R" property, while \f(CW\*(C`\ep{L}\*(C'\fR matches any character with a
General_Category of \*(L"L\*(R" (letter) property.  Brackets are not
required for single letter property names, so \f(CW\*(C`\ep{L}\*(C'\fR is equivalent to \f(CW\*(C`\epL\*(C'\fR.
.PP
More formally, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character whose Unicode
Uppercase property value is True, and \f(CW\*(C`\eP{Uppercase}\*(C'\fR matches any character
whose Uppercase property value is False, and they could have been written as
\&\f(CW\*(C`\ep{Uppercase=True}\*(C'\fR and \f(CW\*(C`\ep{Uppercase=False}\*(C'\fR, respectively.
.PP
This formality is needed when properties are not binary; that is, if they can
take on more values than just True and False.  For example, the Bidi_Class (see
\&\*(L"Bidirectional Character Types\*(R" below), can take on several different
values, such as Left, Right, Whitespace, and others.  To match these, one needs
to specify both the property name (Bidi_Class), \s-1AND\s0 the value being
matched against
(Left, Right, etc.).  This is done, as in the examples above, by having the
two components separated by an equal sign (or interchangeably, a colon), like
\&\f(CW\*(C`\ep{Bidi_Class: Left}\*(C'\fR.
.PP
All Unicode-defined character properties may be written in these compound forms
of \f(CW\*(C`\ep{property=value}\*(C'\fR or \f(CW\*(C`\ep{property:value}\*(C'\fR, but Perl provides some
additional properties that are written only in the single form, as well as
single-form short-cuts for all binary properties and certain others described
below, in which you may omit the property name and the equals or colon
separator.
.PP
Most Unicode character properties have at least two synonyms (or aliases if you
prefer): a short one that is easier to type and a longer one that is more
descriptive and hence easier to understand.  Thus the \*(L"L\*(R" and \*(L"Letter\*(R" properties
above are equivalent and can be used interchangeably.  Likewise,
\&\*(L"Upper\*(R" is a synonym for \*(L"Uppercase\*(R", and we could have written
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR equivalently as \f(CW\*(C`\ep{Upper}\*(C'\fR.  Also, there are typically
various synonyms for the values the property can be.   For binary properties,
\&\*(L"True\*(R" has 3 synonyms: \*(L"T\*(R", \*(L"Yes\*(R", and \*(L"Y\*(R"; and \*(L"False has correspondingly \*(R"F\*(L",
\&\*(R"No\*(L", and \*(R"N\*(L".  But be careful.  A short form of a value for one property may
not mean the same thing as the same short form for another.  Thus, for the
General_Category property, \*(R"L\*(L" means \*(R"Letter\*(L", but for the Bidi_Class property,
\&\*(R"L\*(L" means \*(R"Left".  A complete list of properties and synonyms is in
perluniprops.
.PP
Upper/lower case differences in property names and values are irrelevant;
thus \f(CW\*(C`\ep{Upper}\*(C'\fR means the same thing as \f(CW\*(C`\ep{upper}\*(C'\fR or even \f(CW\*(C`\ep{UpPeR}\*(C'\fR.
Similarly, you can add or subtract underscores anywhere in the middle of a
word, so that these are also equivalent to \f(CW\*(C`\ep{U_p_p_e_r}\*(C'\fR.  And white space
is irrelevant adjacent to non-word characters, such as the braces and the equals
or colon separators, so \f(CW\*(C`\ep{   Upper  }\*(C'\fR and \f(CW\*(C`\ep{ Upper_case : Y }\*(C'\fR are
equivalent to these as well.  In fact, white space and even
hyphens can usually be added or deleted anywhere.  So even \f(CW\*(C`\ep{ Up\-per case = Yes}\*(C'\fR is
equivalent.  All this is called \*(L"loose-matching\*(R" by Unicode.  The few places
where stricter matching is used is in the middle of numbers, and in the Perl
extension properties that begin or end with an underscore.  Stricter matching
cares about white space (except adjacent to non-word characters),
hyphens, and non-interior underscores.
.PP
You can also use negation in both \f(CW\*(C`\ep{}\*(C'\fR and \f(CW\*(C`\eP{}\*(C'\fR by introducing a caret
(^) between the first brace and the property name: \f(CW\*(C`\ep{^Tamil}\*(C'\fR is
equal to \f(CW\*(C`\eP{Tamil}\*(C'\fR.
.PP
Almost all properties are immune to case-insensitive matching.  That is,
adding a \f(CW\*(C`/i\*(C'\fR regular expression modifier does not change what they
match.  There are two sets that are affected.
The first set is
\&\f(CW\*(C`Uppercase_Letter\*(C'\fR,
\&\f(CW\*(C`Lowercase_Letter\*(C'\fR,
and \f(CW\*(C`Titlecase_Letter\*(C'\fR,
all of which match \f(CW\*(C`Cased_Letter\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
And the second set is
\&\f(CW\*(C`Uppercase\*(C'\fR,
\&\f(CW\*(C`Lowercase\*(C'\fR,
and \f(CW\*(C`Titlecase\*(C'\fR,
all of which match \f(CW\*(C`Cased\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
This set also includes its subsets \f(CW\*(C`PosixUpper\*(C'\fR and \f(CW\*(C`PosixLower\*(C'\fR both
of which under \f(CW\*(C`/i\*(C'\fR matching match \f(CW\*(C`PosixAlpha\*(C'\fR.
(The difference between these sets is that some things, such as Roman
numerals, come in both upper and lower case so they are \f(CW\*(C`Cased\*(C'\fR, but aren't considered
letters, so they aren't \f(CW\*(C`Cased_Letter\*(C'\fRs.)
.PP
The result is undefined if you try to match a non-Unicode code point
(that is, one above 0x10FFFF) against a Unicode property.  Currently, a
warning is raised, and the match will fail.  In some cases, this is
counterintuitive, as both these fail:
.PP
.Vb 2
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=True}      # Fails.
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=False}     # Fails!
.Ve
.PP
\fI\f(BIGeneral_Category\fI\fR
.IX Subsection "General_Category"
.PP
Every Unicode character is assigned a general category, which is the \*(L"most
usual categorization of a character\*(R" (from
<http://www.unicode.org/reports/tr44>).
.PP
The compound way of writing these is like \f(CW\*(C`\ep{General_Category=Number}\*(C'\fR
(short, \f(CW\*(C`\ep{gc:n}\*(C'\fR).  But Perl furnishes shortcuts in which everything up
through the equal or colon separator is omitted.  So you can instead just write
\&\f(CW\*(C`\epN\*(C'\fR.
.PP
Here are the short and long forms of the General Category properties:
.PP
.Vb 1
\&    Short       Long
\&
\&    L           Letter
\&    LC, L&      Cased_Letter (that is: [\ep{Ll}\ep{Lu}\ep{Lt}])
\&    Lu          Uppercase_Letter
\&    Ll          Lowercase_Letter
\&    Lt          Titlecase_Letter
\&    Lm          Modifier_Letter
\&    Lo          Other_Letter
\&
\&    M           Mark
\&    Mn          Nonspacing_Mark
\&    Mc          Spacing_Mark
\&    Me          Enclosing_Mark
\&
\&    N           Number
\&    Nd          Decimal_Number (also Digit)
\&    Nl          Letter_Number
\&    No          Other_Number
\&
\&    P           Punctuation (also Punct)
\&    Pc          Connector_Punctuation
\&    Pd          Dash_Punctuation
\&    Ps          Open_Punctuation
\&    Pe          Close_Punctuation
\&    Pi          Initial_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Pf          Final_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Po          Other_Punctuation
\&
\&    S           Symbol
\&    Sm          Math_Symbol
\&    Sc          Currency_Symbol
\&    Sk          Modifier_Symbol
\&    So          Other_Symbol
\&
\&    Z           Separator
\&    Zs          Space_Separator
\&    Zl          Line_Separator
\&    Zp          Paragraph_Separator
\&
\&    C           Other
\&    Cc          Control (also Cntrl)
\&    Cf          Format
\&    Cs          Surrogate
\&    Co          Private_Use
\&    Cn          Unassigned
.Ve
.PP
Single-letter properties match all characters in any of the
two-letter sub-properties starting with the same letter.
\&\f(CW\*(C`LC\*(C'\fR and \f(CW\*(C`L&\*(C'\fR are special: both are aliases for the set consisting of everything matched by \f(CW\*(C`Ll\*(C'\fR, \f(CW\*(C`Lu\*(C'\fR, and \f(CW\*(C`Lt\*(C'\fR.
.PP
\fI\f(BIBidirectional Character Types\fI\fR
.IX Subsection "Bidirectional Character Types"
.PP
Because scripts differ in their directionality (Hebrew and Arabic are
written right to left, for example) Unicode supplies these properties in
the Bidi_Class class:
.PP
.Vb 1
\&    Property    Meaning
\&
\&    L           Left\-to\-Right
\&    LRE         Left\-to\-Right Embedding
\&    LRO         Left\-to\-Right Override
\&    R           Right\-to\-Left
\&    AL          Arabic Letter
\&    RLE         Right\-to\-Left Embedding
\&    RLO         Right\-to\-Left Override
\&    PDF         Pop Directional Format
\&    EN          European Number
\&    ES          European Separator
\&    ET          European Terminator
\&    AN          Arabic Number
\&    CS          Common Separator
\&    NSM         Non\-Spacing Mark
\&    BN          Boundary Neutral
\&    B           Paragraph Separator
\&    S           Segment Separator
\&    WS          Whitespace
\&    ON          Other Neutrals
.Ve
.PP
This property is always written in the compound form.
For example, \f(CW\*(C`\ep{Bidi_Class:R}\*(C'\fR matches characters that are normally
written right to left.
.PP
\fI\f(BIScripts\fI\fR
.IX Subsection "Scripts"
.PP
The world's languages are written in many different scripts.  This sentence
(unless you're reading it in translation) is written in Latin, while Russian is
written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in
Hiragana or Katakana.  There are many more.
.PP
The Unicode Script and Script_Extensions properties give what script a
given character is in.  Either property can be specified with the
compound form like
\&\f(CW\*(C`\ep{Script=Hebrew}\*(C'\fR (short: \f(CW\*(C`\ep{sc=hebr}\*(C'\fR), or
\&\f(CW\*(C`\ep{Script_Extensions=Javanese}\*(C'\fR (short: \f(CW\*(C`\ep{scx=java}\*(C'\fR).
In addition, Perl furnishes shortcuts for all
\&\f(CW\*(C`Script\*(C'\fR property names.  You can omit everything up through the equals
(or colon), and simply write \f(CW\*(C`\ep{Latin}\*(C'\fR or \f(CW\*(C`\eP{Cyrillic}\*(C'\fR.
(This is not true for \f(CW\*(C`Script_Extensions\*(C'\fR, which is required to be
written in the compound form.)
.PP
The difference between these two properties involves characters that are
used in multiple scripts.  For example the digits '0' through '9' are
used in many parts of the world.  These are placed in a script named
\&\f(CW\*(C`Common\*(C'\fR.  Other characters are used in just a few scripts.  For
example, the \*(L"KATAKANA-HIRAGANA \s-1DOUBLE HYPHEN\*(R"\s0 is used in both Japanese
scripts, Katakana and Hiragana, but nowhere else.  The \f(CW\*(C`Script\*(C'\fR
property places all characters that are used in multiple scripts in the
\&\f(CW\*(C`Common\*(C'\fR script, while the \f(CW\*(C`Script_Extensions\*(C'\fR property places those
that are used in only a few scripts into each of those scripts; while
still using \f(CW\*(C`Common\*(C'\fR for those used in many scripts.  Thus both these
match:
.PP
.Vb 2
\& "0" =~ /\ep{sc=Common}/     # Matches
\& "0" =~ /\ep{scx=Common}/    # Matches
.Ve
.PP
and only the first of these match:
.PP
.Vb 2
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Common}  # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Common} # No match
.Ve
.PP
And only the last two of these match:
.PP
.Vb 4
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Hiragana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Katakana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Hiragana} # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Katakana} # Matches
.Ve
.PP
\&\f(CW\*(C`Script_Extensions\*(C'\fR is thus an improved \f(CW\*(C`Script\*(C'\fR, in which there are
fewer characters in the \f(CW\*(C`Common\*(C'\fR script, and correspondingly more in
other scripts.  It is new in Unicode version 6.0, and its data are likely
to change significantly in later releases, as things get sorted out.
.PP
(Actually, besides \f(CW\*(C`Common\*(C'\fR, the \f(CW\*(C`Inherited\*(C'\fR script, contains
characters that are used in multiple scripts.  These are modifier
characters which modify other characters, and inherit the script value
of the controlling character.  Some of these are used in many scripts,
and so go into \f(CW\*(C`Inherited\*(C'\fR in both \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extensions\*(C'\fR.
Others are used in just a few scripts, so are in \f(CW\*(C`Inherited\*(C'\fR in
\&\f(CW\*(C`Script\*(C'\fR, but not in \f(CW\*(C`Script_Extensions\*(C'\fR.)
.PP
It is worth stressing that there are several different sets of digits in
Unicode that are equivalent to 0\-9 and are matchable by \f(CW\*(C`\ed\*(C'\fR in a
regular expression.  If they are used in a single language only, they
are in that language's \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extension\*(C'\fR.  If they are
used in more than one script, they will be in \f(CW\*(C`sc=Common\*(C'\fR, but only
if they are used in many scripts should they be in \f(CW\*(C`scx=Common\*(C'\fR.
.PP
A complete list of scripts and their shortcuts is in perluniprops.
.PP
\fI\f(BIUse of \*(L"Is\*(R" Prefix\fI\fR
.IX Subsection "Use of Is Prefix"
.PP
For backward compatibility (with Perl 5.6), all properties mentioned
so far may have \f(CW\*(C`Is\*(C'\fR or \f(CW\*(C`Is_\*(C'\fR prepended to their name, so \f(CW\*(C`\eP{Is_Lu}\*(C'\fR, for
example, is equal to \f(CW\*(C`\eP{Lu}\*(C'\fR, and \f(CW\*(C`\ep{IsScript:Arabic}\*(C'\fR is equal to
\&\f(CW\*(C`\ep{Arabic}\*(C'\fR.
.PP
\fI\f(BIBlocks\fI\fR
.IX Subsection "Blocks"
.PP
In addition to \fBscripts\fR, Unicode also defines \fBblocks\fR of
characters.  The difference between scripts and blocks is that the
concept of scripts is closer to natural languages, while the concept
of blocks is more of an artificial grouping based on groups of Unicode
characters with consecutive ordinal values. For example, the \*(L"Basic Latin\*(R"
block is all characters whose ordinals are between 0 and 127, inclusive; in
other words, the \s-1ASCII\s0 characters.  The \*(L"Latin\*(R" script contains some letters
from this as well as several other blocks, like \*(L"Latin\-1 Supplement\*(R",
\&\*(L"Latin Extended-A\*(R", etc., but it does not contain all the characters from
those blocks. It does not, for example, contain the digits 0\-9, because
those digits are shared across many scripts, and hence are in the
\&\f(CW\*(C`Common\*(C'\fR script.
.PP
For more about scripts versus blocks, see UAX#24 \*(L"Unicode Script Property\*(R":
<http://www.unicode.org/reports/tr24>
.PP
The \f(CW\*(C`Script\*(C'\fR or \f(CW\*(C`Script_Extensions\*(C'\fR properties are likely to be the
ones you want to use when processing
natural language; the Block property may occasionally be useful in working
with the nuts and bolts of Unicode.
.PP
Block names are matched in the compound form, like \f(CW\*(C`\ep{Block: Arrows}\*(C'\fR or
\&\f(CW\*(C`\ep{Blk=Hebrew}\*(C'\fR.  Unlike most other properties, only a few block names have a
Unicode-defined short name.  But Perl does provide a (slight) shortcut:  You
can say, for example \f(CW\*(C`\ep{In_Arrows}\*(C'\fR or \f(CW\*(C`\ep{In_Hebrew}\*(C'\fR.  For backwards
compatibility, the \f(CW\*(C`In\*(C'\fR prefix may be omitted if there is no naming conflict
with a script or any other property, and you can even use an \f(CW\*(C`Is\*(C'\fR prefix
instead in those cases.  But it is not a good idea to do this, for a couple
reasons:
.IP "1." 4
It is confusing.  There are many naming conflicts, and you may forget some.
For example, \f(CW\*(C`\ep{Hebrew}\*(C'\fR means the \fIscript\fR Hebrew, and \s-1NOT\s0 the \fIblock\fR
Hebrew.  But would you remember that 6 months from now?
.IP "2." 4
It is unstable.  A new version of Unicode may pre-empt the current meaning by
creating a property with the same name.  There was a time in very early Unicode
releases when \f(CW\*(C`\ep{Hebrew}\*(C'\fR would have matched the \fIblock\fR Hebrew; now it
doesn't.
.PP
Some people prefer to always use \f(CW\*(C`\ep{Block: foo}\*(C'\fR and \f(CW\*(C`\ep{Script: bar}\*(C'\fR
instead of the shortcuts, whether for clarity, because they can't remember the
difference between 'In' and 'Is' anyway, or they aren't confident that those who
eventually will read their code will know that difference.
.PP
A complete list of blocks and their shortcuts is in perluniprops.
.PP
\fI\f(BIOther Properties\fI\fR
.IX Subsection "Other Properties"
.PP
There are many more properties than the very basic ones described here.
A complete list is in perluniprops.
.PP
Unicode defines all its properties in the compound form, so all single-form
properties are Perl extensions.  Most of these are just synonyms for the
Unicode ones, but some are genuine extensions, including several that are in
the compound form.  And quite a few of these are actually recommended by Unicode
(in <http://www.unicode.org/reports/tr18>).
.PP
This section gives some details on all extensions that aren't just
synonyms for compound-form Unicode properties
(for those properties, you'll have to refer to the
Unicode Standard <http://www.unicode.org/reports/tr44>.
.ie n .IP "\fB\fB""\ep{All}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{All}\fB\fR" 4
.IX Item "p{All}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{Any}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{Alnum}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Alnum}\fB\fR" 4
.IX Item "p{Alnum}"
This matches any \f(CW\*(C`\ep{Alphabetic}\*(C'\fR or \f(CW\*(C`\ep{Decimal_Number}\*(C'\fR character.
.ie n .IP "\fB\fB""\ep{Any}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Any}\fB\fR" 4
.IX Item "p{Any}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{All}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{ASCII}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{ASCII}\fB\fR" 4
.IX Item "p{ASCII}"
This matches any of the 128 characters in the US-ASCII character set,
which is a subset of Unicode.
.ie n .IP "\fB\fB""\ep{Assigned}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Assigned}\fB\fR" 4
.IX Item "p{Assigned}"
This matches any assigned code point; that is, any code point whose general
category is not Unassigned (or equivalently, not Cn).
.ie n .IP "\fB\fB""\ep{Blank}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Blank}\fB\fR" 4
.IX Item "p{Blank}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{HorizSpace}\*(C'\fR:  A character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{Decomposition_Type: Non_Canonical}""\fB\fR    (Short: ""\ep{Dt=NonCanon}"")" 4
.el .IP "\fB\f(CB\ep{Decomposition_Type: Non_Canonical}\fB\fR    (Short: \f(CW\ep{Dt=NonCanon}\fR)" 4
.IX Item "p{Decomposition_Type: Non_Canonical} (Short: p{Dt=NonCanon})"
Matches a character that has a non-canonical decomposition.
.Sp
To understand the use of this rarely used property=value combination, it is
necessary to know some basics about decomposition.
Consider a character, say H.  It could appear with various marks around it,
such as an acute accent, or a circumflex, or various hooks, circles, arrows,
\&\fIetc.\fR, above, below, to one side or the other, etc.  There are many
possibilities among the world's languages.  The number of combinations is
astronomical, and if there were a character for each combination, it would
soon exhaust Unicode's more than a million possible characters.  So Unicode
took a different approach: there is a character for the base H, and a
character for each of the possible marks, and these can be variously combined
to get a final logical character.  So a logical character\*(--what appears to be a
single character\*(--can be a sequence of more than one individual characters.
This is called an \*(L"extended grapheme cluster\*(R";  Perl furnishes the \f(CW\*(C`\eX\*(C'\fR
regular expression construct to match such sequences.
.Sp
But Unicode's intent is to unify the existing character set standards and
practices, and several pre-existing standards have single characters that
mean the same thing as some of these combinations.  An example is \s-1ISO\-8859\-1,\s0
which has quite a few of these in the Latin\-1 range, an example being \*(L"\s-1LATIN
CAPITAL LETTER E WITH ACUTE\*(R". \s0 Because this character was in this pre-existing
standard, Unicode added it to its repertoire.  But this character is considered
by Unicode to be equivalent to the sequence consisting of the character
\&\*(L"\s-1LATIN CAPITAL LETTER E\*(R"\s0 followed by the character \*(L"\s-1COMBINING ACUTE ACCENT\*(R".\s0
.Sp
\&\*(L"\s-1LATIN CAPITAL LETTER E WITH ACUTE\*(R"\s0 is called a \*(L"pre-composed\*(R" character, and
its equivalence with the sequence is called canonical equivalence.  All
pre-composed characters are said to have a decomposition (into the equivalent
sequence), and the decomposition type is also called canonical.
.Sp
However, many more characters have a different type of decomposition, a
\&\*(L"compatible\*(R" or \*(L"non-canonical\*(R" decomposition.  The sequences that form these
decompositions are not considered canonically equivalent to the pre-composed
character.  An example, again in the Latin\-1 range, is the \*(L"\s-1SUPERSCRIPT ONE\*(R".\s0
It is somewhat like a regular digit 1, but not exactly; its decomposition
into the digit 1 is called a \*(L"compatible\*(R" decomposition, specifically a
\&\*(L"super\*(R" decomposition.  There are several such compatibility
decompositions (see <http://www.unicode.org/reports/tr44>), including one
called \*(L"compat\*(R", which means some miscellaneous type of decomposition
that doesn't fit into the decomposition categories that Unicode has chosen.
.Sp
Note that most Unicode characters don't have a decomposition, so their
decomposition type is \*(L"None\*(R".
.Sp
For your convenience, Perl has added the \f(CW\*(C`Non_Canonical\*(C'\fR decomposition
type to mean any of the several compatibility decompositions.
.ie n .IP "\fB\fB""\ep{Graph}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Graph}\fB\fR" 4
.IX Item "p{Graph}"
Matches any character that is graphic.  Theoretically, this means a character
that on a printer would cause ink to be used.
.ie n .IP "\fB\fB""\ep{HorizSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{HorizSpace}\fB\fR" 4
.IX Item "p{HorizSpace}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{Blank}\*(C'\fR:  a character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{In=*}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{In=*}\fB\fR" 4
.IX Item "p{In=*}"
This is a synonym for \f(CW\*(C`\ep{Present_In=*}\*(C'\fR
.ie n .IP "\fB\fB""\ep{PerlSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlSpace}\fB\fR" 4
.IX Item "p{PerlSpace}"
This is the same as \f(CW\*(C`\es\*(C'\fR, restricted to \s-1ASCII,\s0 namely \f(CW\*(C`[\ \ef\en\er\et]\*(C'\fR
and starting in Perl v5.18, experimentally, a vertical tab.
.Sp
Mnemonic: Perl's (original) space
.ie n .IP "\fB\fB""\ep{PerlWord}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlWord}\fB\fR" 4
.IX Item "p{PerlWord}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, restricted to \s-1ASCII,\s0 namely \f(CW\*(C`[A\-Za\-z0\-9_]\*(C'\fR
.Sp
Mnemonic: Perl's (original) word.
.ie n .IP "\fB\fB""\ep{Posix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Posix...}\fB\fR" 4
.IX Item "p{Posix...}"
There are several of these, which are equivalents using the \f(CW\*(C`\ep\*(C'\fR
notation for Posix classes and are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.ie n .IP "\fB\fB""\ep{Present_In: *}""\fB\fR    (Short: ""\ep{In=*}"")" 4
.el .IP "\fB\f(CB\ep{Present_In: *}\fB\fR    (Short: \f(CW\ep{In=*}\fR)" 4
.IX Item "p{Present_In: *} (Short: p{In=*})"
This property is used when you need to know in what Unicode version(s) a
character is.
.Sp
The \*(L"*\*(R" above stands for some two digit Unicode version number, such as
\&\f(CW1.1\fR or \f(CW4.0\fR; or the \*(L"*\*(R" can also be \f(CW\*(C`Unassigned\*(C'\fR.  This property will
match the code points whose final disposition has been settled as of the
Unicode release given by the version number; \f(CW\*(C`\ep{Present_In: Unassigned}\*(C'\fR
will match those code points whose meaning has yet to be assigned.
.Sp
For example, \f(CW\*(C`U+0041\*(C'\fR \*(L"\s-1LATIN CAPITAL LETTER A\*(R"\s0 was present in the very first
Unicode release available, which is \f(CW1.1\fR, so this property is true for all
valid \*(L"*\*(R" versions.  On the other hand, \f(CW\*(C`U+1EFF\*(C'\fR was not assigned until version
5.1 when it became \*(L"\s-1LATIN SMALL LETTER Y WITH LOOP\*(R",\s0 so the only \*(L"*\*(R" that
would match it are 5.1, 5.2, and later.
.Sp
Unicode furnishes the \f(CW\*(C`Age\*(C'\fR property from which this is derived.  The problem
with Age is that a strict interpretation of it (which Perl takes) has it
matching the precise release a code point's meaning is introduced in.  Thus
\&\f(CW\*(C`U+0041\*(C'\fR would match only 1.1; and \f(CW\*(C`U+1EFF\*(C'\fR only 5.1.  This is not usually what
you want.
.Sp
Some non-Perl implementations of the Age property may change its meaning to be
the same as the Perl Present_In property; just be aware of that.
.Sp
Another confusion with both these properties is that the definition is not
that the code point has been \fIassigned\fR, but that the meaning of the code point
has been \fIdetermined\fR.  This is because 66 code points will always be
unassigned, and so the Age for them is the Unicode version in which the decision
to make them so was made.  For example, \f(CW\*(C`U+FDD0\*(C'\fR is to be permanently
unassigned to a character, and the decision to do that was made in version 3.1,
so \f(CW\*(C`\ep{Age=3.1}\*(C'\fR matches this character, as also does \f(CW\*(C`\ep{Present_In: 3.1}\*(C'\fR and up.
.ie n .IP "\fB\fB""\ep{Print}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Print}\fB\fR" 4
.IX Item "p{Print}"
This matches any character that is graphical or blank, except controls.
.ie n .IP "\fB\fB""\ep{SpacePerl}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{SpacePerl}\fB\fR" 4
.IX Item "p{SpacePerl}"
This is the same as \f(CW\*(C`\es\*(C'\fR, including beyond \s-1ASCII.\s0
.Sp
Mnemonic: Space, as modified by Perl.  (It doesn't include the vertical tab
which both the Posix standard and Unicode consider white space.)
.ie n .IP "\fB\fB""\ep{Title}""\fB\fR and  \fB\fB""\ep{Titlecase}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Title}\fB\fR and  \fB\f(CB\ep{Titlecase}\fB\fR" 4
.IX Item "p{Title} and p{Titlecase}"
Under case-sensitive matching, these both match the same code points as
\&\f(CW\*(C`\ep{General Category=Titlecase_Letter}\*(C'\fR (\f(CW\*(C`\ep{gc=lt}\*(C'\fR).  The difference
is that under \f(CW\*(C`/i\*(C'\fR caseless matching, these match the same as
\&\f(CW\*(C`\ep{Cased}\*(C'\fR, whereas \f(CW\*(C`\ep{gc=lt}\*(C'\fR matches \f(CW\*(C`\ep{Cased_Letter\*(C'\fR).
.ie n .IP "\fB\fB""\ep{VertSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{VertSpace}\fB\fR" 4
.IX Item "p{VertSpace}"
This is the same as \f(CW\*(C`\ev\*(C'\fR:  A character that changes the spacing vertically.
.ie n .IP "\fB\fB""\ep{Word}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Word}\fB\fR" 4
.IX Item "p{Word}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, including over 100_000 characters beyond \s-1ASCII.\s0
.ie n .IP "\fB\fB""\ep{XPosix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{XPosix...}\fB\fR" 4
.IX Item "p{XPosix...}"
There are several of these, which are the standard Posix classes
extended to the full Unicode range.  They are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.SS "User-Defined Character Properties"
.IX Subsection "User-Defined Character Properties"
You can define your own binary character properties by defining subroutines
whose names begin with \*(L"In\*(R" or \*(L"Is\*(R".  (The experimental feature
\&\*(L"(?[ ])\*(R" in perlre provides an alternative which allows more complex
definitions.)  The subroutines can be defined in any
package.  The user-defined properties can be used in the regular expression
\&\f(CW\*(C`\ep\*(C'\fR and \f(CW\*(C`\eP\*(C'\fR constructs; if you are using a user-defined property from a
package other than the one you are in, you must specify its package in the
\&\f(CW\*(C`\ep\*(C'\fR or \f(CW\*(C`\eP\*(C'\fR construct.
.PP
.Vb 3
\&    # assuming property Is_Foreign defined in Lang::
\&    package main;  # property package name required
\&    if ($txt =~ /\ep{Lang::IsForeign}+/) { ... }
\&
\&    package Lang;  # property package name not required
\&    if ($txt =~ /\ep{IsForeign}+/) { ... }
.Ve
.PP
Note that the effect is compile-time and immutable once defined.
However, the subroutines are passed a single parameter, which is 0 if
case-sensitive matching is in effect and non-zero if caseless matching
is in effect.  The subroutine may return different values depending on
the value of the flag, and one set of values will immutably be in effect
for all case-sensitive matches, and the other set for all case-insensitive
matches.
.PP
Note that if the regular expression is tainted, then Perl will die rather
than calling the subroutine, where the name of the subroutine is
determined by the tainted data.
.PP
The subroutines must return a specially-formatted string, with one
or more newline-separated lines.  Each line must be one of the following:
.IP "\(bu" 4
A single hexadecimal number denoting a Unicode code point to include.
.IP "\(bu" 4
Two hexadecimal numbers separated by horizontal whitespace (space or
tabular characters) denoting a range of Unicode code points to include.
.IP "\(bu" 4
Something to include, prefixed by \*(L"+\*(R": a built-in character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to exclude, prefixed by \*(L"\-\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to negate, prefixed \*(L"!\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to intersect with, prefixed by \*(L"&\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
for all the characters except the characters in the property; two
hexadecimal code points for a range; or a single hexadecimal code point.
.PP
For example, to define a property that covers both the Japanese
syllabaries (hiragana and katakana), you can define
.PP
.Vb 6
\&    sub InKana {
\&        return <<END;
\&    3040\et309F
\&    30A0\et30FF
\&    END
\&    }
.Ve
.PP
Imagine that the here-doc end marker is at the beginning of the line.
Now you can use \f(CW\*(C`\ep{InKana}\*(C'\fR and \f(CW\*(C`\eP{InKana}\*(C'\fR.
.PP
You could also have used the existing block property names:
.PP
.Vb 6
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    END
\&    }
.Ve
.PP
Suppose you wanted to match only the allocated characters,
not the raw block ranges: in other words, you want to remove
the non-characters:
.PP
.Vb 7
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    \-utf8::IsCn
\&    END
\&    }
.Ve
.PP
The negation is useful for defining (surprise!) negated classes.
.PP
.Vb 7
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    END
\&    }
.Ve
.PP
This will match all non-Unicode code points, since every one of them is
not in Kana.  You can use intersection to exclude these, if desired, as
this modified example shows:
.PP
.Vb 8
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    &utf8::Any
\&    END
\&    }
.Ve
.PP
\&\f(CW&utf8::Any\fR must be the last line in the definition.
.PP
Intersection is used generally for getting the common characters matched
by two (or more) classes.  It's important to remember not to use \*(L"&\*(R" for
the first set; that would be intersecting with nothing, resulting in an
empty set.
.PP
(Note that official Unicode properties differ from these in that they
automatically exclude non-Unicode code points and a warning is raised if
a match is attempted on one of those.)
.SS "User-Defined Case Mappings (for serious hackers only)"
.IX Subsection "User-Defined Case Mappings (for serious hackers only)"
\&\fBThis feature has been removed as of Perl 5.16.\fR
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had.  If you are using a Perl earlier
than 5.16, this feature was most fully documented in the 5.14 version of
this pod:
<http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29>
.SS "Character Encodings for Input and Output"
.IX Subsection "Character Encodings for Input and Output"
See Encode.
.SS "Unicode Regular Expression Support Level"
.IX Subsection "Unicode Regular Expression Support Level"
The following list of Unicode supported features for regular expressions describes
all features currently directly supported by core Perl.  The references to \*(L"Level N\*(R"
and the section numbers refer to the Unicode Technical Standard #18,
\&\*(L"Unicode Regular Expressions\*(R", version 13, from August 2008.
.IP "\(bu" 4
Level 1 \- Basic Unicode Support
.Sp
.Vb 8
\& RL1.1   Hex Notation                     \- done          [1]
\& RL1.2   Properties                       \- done          [2][3]
\& RL1.2a  Compatibility Properties         \- done          [4]
\& RL1.3   Subtraction and Intersection     \- experimental  [5]
\& RL1.4   Simple Word Boundaries           \- done          [6]
\& RL1.5   Simple Loose Matches             \- done          [7]
\& RL1.6   Line Boundaries                  \- MISSING       [8][9]
\& RL1.7   Supplementary Code Points        \- done          [10]
.Ve
.RS 4
.IP "[1]" 4
.IX Item "[1]"
\&\ex{...}
.IP "[2]" 4
.IX Item "[2]"
\&\ep{...} \eP{...}
.IP "[3]" 4
.IX Item "[3]"
supports not only minimal list, but all Unicode character properties (see Unicode Character Properties above)
.IP "[4]" 4
.IX Item "[4]"
\&\ed \eD \es \eS \ew \eW \eX [:prop:] [:^prop:]
.IP "[5]" 4
.IX Item "[5]"
The experimental feature in v5.18 \*(L"(?[...])\*(R" accomplishes this.  See
\&\*(L"(?[ ])\*(R" in perlre.  If you don't want to use an experimental feature,
you can use one of the following:
.RS 4
.IP "\(bu" 4
Regular expression look-ahead
.Sp
You can mimic class subtraction using lookahead.
For example, what UTS#18 might write as
.Sp
.Vb 1
\&    [{Block=Greek}\-[{UNASSIGNED}]]
.Ve
.Sp
in Perl can be written as:
.Sp
.Vb 2
\&    (?!\ep{Unassigned})\ep{Block=Greek}
\&    (?=\ep{Assigned})\ep{Block=Greek}
.Ve
.Sp
But in this particular example, you probably really want
.Sp
.Vb 1
\&    \ep{Greek}
.Ve
.Sp
which will match assigned characters known to be part of the Greek script.
.IP "\(bu" 4
\&\s-1CPAN\s0 module Unicode::Regex::Set
.Sp
It does implement the full UTS#18 grouping, intersection, union, and
removal (subtraction) syntax.
.IP "\(bu" 4
\&\*(L"User-Defined Character Properties\*(R"
.Sp
\&'+' for union, '\-' for removal (set-difference), '&' for intersection
.RE
.RS 4
.RE
.IP "[6]" 4
.IX Item "[6]"
\&\eb \eB
.IP "[7]" 4
.IX Item "[7]"
Note that Perl does Full case-folding in matching (but with bugs), not Simple: for example U+1F88 is equivalent to U+1F00 U+03B9, instead of just U+1F80.  This difference matters mainly for certain Greek capital letters with certain modifiers: the Full case-folding decomposes the letter, while the Simple case-folding would map it to a single character.
.IP "[8]" 4
.IX Item "[8]"
Should do ^ and $ also on U+000B (\ev in C), \s-1FF \s0(\ef), \s-1CR \s0(\er), \s-1CRLF
\&\s0(\er\en), \s-1NEL \s0(U+0085), \s-1LS \s0(U+2028), and \s-1PS \s0(U+2029); should also affect
<>, $., and script line numbers; should not split lines within \s-1CRLF
\&\s0(i.e. there is no empty line between \er and \en).  For \s-1CRLF,\s0 try the
\&\f(CW\*(C`:crlf\*(C'\fR layer (see PerlIO).
.IP "[9]" 4
.IX Item "[9]"
Linebreaking conformant with UAX#14 \*(L"Unicode Line Breaking Algorithm\*(R" is available through the Unicode::LineBreaking module.
.IP "[10]" 4
.IX Item "[10]"
\&\s-1UTF\-8/UTF\-EBDDIC\s0 used in Perl allows not only U+10000 to
U+10FFFF but also beyond U+10FFFF
.RE
.RS 4
.RE
.IP "\(bu" 4
Level 2 \- Extended Unicode Support
.Sp
.Vb 6
\& RL2.1   Canonical Equivalents           \- MISSING       [10][11]
\& RL2.2   Default Grapheme Clusters       \- MISSING       [12]
\& RL2.3   Default Word Boundaries         \- MISSING       [14]
\& RL2.4   Default Loose Matches           \- MISSING       [15]
\& RL2.5   Name Properties                 \- DONE
\& RL2.6   Wildcard Properties             \- MISSING
\&
\& [10] see UAX#15 "Unicode Normalization Forms"
\& [11] have Unicode::Normalize but not integrated to regexes
\& [12] have \eX but we don\*(Aqt have a "Grapheme Cluster Mode"
\& [14] see UAX#29, Word Boundaries
\& [15] This is covered in Chapter 3.13 (in Unicode 6.0)
.Ve
.IP "\(bu" 4
Level 3 \- Tailored Support
.Sp
.Vb 11
\& RL3.1   Tailored Punctuation            \- MISSING
\& RL3.2   Tailored Grapheme Clusters      \- MISSING       [17][18]
\& RL3.3   Tailored Word Boundaries        \- MISSING
\& RL3.4   Tailored Loose Matches          \- MISSING
\& RL3.5   Tailored Ranges                 \- MISSING
\& RL3.6   Context Matching                \- MISSING       [19]
\& RL3.7   Incremental Matches             \- MISSING
\&      ( RL3.8   Unicode Set Sharing )
\& RL3.9   Possible Match Sets             \- MISSING
\& RL3.10  Folded Matching                 \- MISSING       [20]
\& RL3.11  Submatchers                     \- MISSING
\&
\& [17] see UAX#10 "Unicode Collation Algorithms"
\& [18] have Unicode::Collate but not integrated to regexes
\& [19] have (?<=x) and (?=x), but look\-aheads or look\-behinds
\&      should see outside of the target substring
\& [20] need insensitive matching for linguistic features other
\&      than case; for example, hiragana to katakana, wide and
\&      narrow, simplified Han to traditional Han (see UTR#30
\&      "Character Foldings")
.Ve
.SS "Unicode Encodings"
.IX Subsection "Unicode Encodings"
Unicode characters are assigned to \fIcode points\fR, which are abstract
numbers.  To use these numbers, various encodings are needed.
.IP "\(bu" 4
\&\s-1UTF\-8\s0
.Sp
\&\s-1UTF\-8\s0 is a variable-length (1 to 4 bytes), byte-order independent
encoding. For \s-1ASCII \s0(and we really do mean 7\-bit \s-1ASCII,\s0 not another
8\-bit encoding), \s-1UTF\-8\s0 is transparent.
.Sp
The following table is from Unicode 3.2.
.Sp
.Vb 1
\& Code Points            1st Byte  2nd Byte  3rd Byte 4th Byte
\&
\&   U+0000..U+007F       00..7F
\&   U+0080..U+07FF     * C2..DF    80..BF
\&   U+0800..U+0FFF       E0      * A0..BF    80..BF
\&   U+1000..U+CFFF       E1..EC    80..BF    80..BF
\&   U+D000..U+D7FF       ED        80..9F    80..BF
\&   U+D800..U+DFFF       +++++ utf16 surrogates, not legal utf8 +++++
\&   U+E000..U+FFFF       EE..EF    80..BF    80..BF
\&  U+10000..U+3FFFF      F0      * 90..BF    80..BF    80..BF
\&  U+40000..U+FFFFF      F1..F3    80..BF    80..BF    80..BF
\& U+100000..U+10FFFF     F4        80..8F    80..BF    80..BF
.Ve
.Sp
Note the gaps marked by \*(L"*\*(R" before several of the byte entries above.  These are
caused by legal \s-1UTF\-8\s0 avoiding non-shortest encodings: it is technically
possible to UTF\-8\-encode a single code point in different ways, but that is
explicitly forbidden, and the shortest possible encoding should always be used
(and that is what Perl does).
.Sp
Another way to look at it is via bits:
.Sp
.Vb 1
\&                Code Points  1st Byte  2nd Byte  3rd Byte  4th Byte
\&
\&                   0aaaaaaa  0aaaaaaa
\&           00000bbbbbaaaaaa  110bbbbb  10aaaaaa
\&           ccccbbbbbbaaaaaa  1110cccc  10bbbbbb  10aaaaaa
\& 00000dddccccccbbbbbbaaaaaa  11110ddd  10cccccc  10bbbbbb  10aaaaaa
.Ve
.Sp
As you can see, the continuation bytes all begin with \*(L"10\*(R", and the
leading bits of the start byte tell how many bytes there are in the
encoded character.
.Sp
The original \s-1UTF\-8\s0 specification allowed up to 6 bytes, to allow
encoding of numbers up to 0x7FFF_FFFF.  Perl continues to allow those,
and has extended that up to 13 bytes to encode code points up to what
can fit in a 64\-bit word.  However, Perl will warn if you output any of
these as being non-portable; and under strict \s-1UTF\-8\s0 input protocols,
they are forbidden.
.Sp
The Unicode non-character code points are also disallowed in \s-1UTF\-8\s0 in
\&\*(L"open interchange\*(R".  See \*(L"Non-character code points\*(R".
.IP "\(bu" 4
UTF-EBCDIC
.Sp
Like \s-1UTF\-8\s0 but EBCDIC-safe, in the way that \s-1UTF\-8\s0 is ASCII-safe.
.IP "\(bu" 4
\&\s-1UTF\-16, UTF\-16BE, UTF\-16LE,\s0 Surrogates, and BOMs (Byte Order Marks)
.Sp
The followings items are mostly for reference and general Unicode
knowledge, Perl doesn't use these constructs internally.
.Sp
Like \s-1UTF\-8, UTF\-16\s0 is a variable-width encoding, but where
\&\s-1UTF\-8\s0 uses 8\-bit code units, \s-1UTF\-16\s0 uses 16\-bit code units.
All code points occupy either 2 or 4 bytes in \s-1UTF\-16:\s0 code points
\&\f(CW\*(C`U+0000..U+FFFF\*(C'\fR are stored in a single 16\-bit unit, and code
points \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR in two 16\-bit units.  The latter case is
using \fIsurrogates\fR, the first 16\-bit unit being the \fIhigh
surrogate\fR, and the second being the \fIlow surrogate\fR.
.Sp
Surrogates are code points set aside to encode the \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR
range of Unicode code points in pairs of 16\-bit units.  The \fIhigh
surrogates\fR are the range \f(CW\*(C`U+D800..U+DBFF\*(C'\fR and the \fIlow surrogates\fR
are the range \f(CW\*(C`U+DC00..U+DFFF\*(C'\fR.  The surrogate encoding is
.Sp
.Vb 2
\&    $hi = ($uni \- 0x10000) / 0x400 + 0xD800;
\&    $lo = ($uni \- 0x10000) % 0x400 + 0xDC00;
.Ve
.Sp
and the decoding is
.Sp
.Vb 1
\&    $uni = 0x10000 + ($hi \- 0xD800) * 0x400 + ($lo \- 0xDC00);
.Ve
.Sp
Because of the 16\-bitness, \s-1UTF\-16\s0 is byte-order dependent.  \s-1UTF\-16\s0
itself can be used for in-memory computations, but if storage or
transfer is required either \s-1UTF\-16BE \s0(big-endian) or \s-1UTF\-16LE
\&\s0(little-endian) encodings must be chosen.
.Sp
This introduces another problem: what if you just know that your data
is \s-1UTF\-16,\s0 but you don't know which endianness?  Byte Order Marks, or
BOMs, are a solution to this.  A special character has been reserved
in Unicode to function as a byte order marker: the character with the
code point \f(CW\*(C`U+FEFF\*(C'\fR is the \s-1BOM.\s0
.Sp
The trick is that if you read a \s-1BOM,\s0 you will know the byte order,
since if it was written on a big-endian platform, you will read the
bytes \f(CW\*(C`0xFE 0xFF\*(C'\fR, but if it was written on a little-endian platform,
you will read the bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR.  (And if the originating platform
was writing in \s-1UTF\-8,\s0 you will read the bytes \f(CW\*(C`0xEF 0xBB 0xBF\*(C'\fR.)
.Sp
The way this trick works is that the character with the code point
\&\f(CW\*(C`U+FFFE\*(C'\fR is not supposed to be in input streams, so the
sequence of bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR is unambiguously \*(L"\s-1BOM,\s0 represented in
little-endian format\*(R" and cannot be \f(CW\*(C`U+FFFE\*(C'\fR, represented in big-endian
format".
.Sp
Surrogates have no meaning in Unicode outside their use in pairs to
represent other code points.  However, Perl allows them to be
represented individually internally, for example by saying
\&\f(CW\*(C`chr(0xD801)\*(C'\fR, so that all code points, not just those valid for open
interchange, are
representable.  Unicode does define semantics for them, such as their
General Category is \*(L"Cs\*(R".  But because their use is somewhat dangerous,
Perl will warn (using the warning category \*(L"surrogate\*(R", which is a
sub-category of \*(L"utf8\*(R") if an attempt is made
to do things like take the lower case of one, or match
case-insensitively, or to output them.  (But don't try this on Perls
before 5.14.)
.IP "\(bu" 4
\&\s-1UTF\-32, UTF\-32BE, UTF\-32LE\s0
.Sp
The \s-1UTF\-32\s0 family is pretty much like the \s-1UTF\-16\s0 family, expect that
the units are 32\-bit, and therefore the surrogate scheme is not
needed.  \s-1UTF\-32\s0 is a fixed-width encoding.  The \s-1BOM\s0 signatures are
\&\f(CW\*(C`0x00 0x00 0xFE 0xFF\*(C'\fR for \s-1BE\s0 and \f(CW\*(C`0xFF 0xFE 0x00 0x00\*(C'\fR for \s-1LE.\s0
.IP "\(bu" 4
\&\s-1UCS\-2, UCS\-4\s0
.Sp
Legacy, fixed-width encodings defined by the \s-1ISO 10646\s0 standard.  \s-1UCS\-2\s0 is a 16\-bit
encoding.  Unlike \s-1UTF\-16, UCS\-2\s0 is not extensible beyond \f(CW\*(C`U+FFFF\*(C'\fR,
because it does not use surrogates.  \s-1UCS\-4\s0 is a 32\-bit encoding,
functionally identical to \s-1UTF\-32 \s0(the difference being that
\&\s-1UCS\-4\s0 forbids neither surrogates nor code points larger than 0x10_FFFF).
.IP "\(bu" 4
\&\s-1UTF\-7\s0
.Sp
A seven-bit safe (non-eight-bit) encoding, which is useful if the
transport or storage is not eight-bit safe.  Defined by \s-1RFC 2152.\s0
.SS "Non-character code points"
.IX Subsection "Non-character code points"
66 code points are set aside in Unicode as \*(L"non-character code points\*(R".
These all have the Unassigned (Cn) General Category, and they never will
be assigned.  These are never supposed to be in legal Unicode input
streams, so that code can use them as sentinels that can be mixed in
with character data, and they always will be distinguishable from that data.
To keep them out of Perl input streams, strict \s-1UTF\-8\s0 should be
specified, such as by using the layer \f(CW\*(C`:encoding(\*(AqUTF\-8\*(Aq)\*(C'\fR.  The
non-character code points are the 32 between U+FDD0 and U+FDEF, and the
34 code points U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, ... U+10FFFE, U+10FFFF.
Some people are under the mistaken impression that these are \*(L"illegal\*(R",
but that is not true.  An application or cooperating set of applications
can legally use them at will internally; but these code points are
\&\*(L"illegal for open interchange\*(R".  Therefore, Perl will not accept these
from input streams unless lax rules are being used, and will warn
(using the warning category \*(L"nonchar\*(R", which is a sub-category of \*(L"utf8\*(R") if
an attempt is made to output them.
.SS "Beyond Unicode code points"
.IX Subsection "Beyond Unicode code points"
The maximum Unicode code point is U+10FFFF.  But Perl accepts code
points up to the maximum permissible unsigned number available on the
platform.  However, Perl will not accept these from input streams unless
lax rules are being used, and will warn (using the warning category
\&\*(L"non_unicode\*(R", which is a sub-category of \*(L"utf8\*(R") if an attempt is made to
operate on or output them.  For example, \f(CW\*(C`uc(0x11_0000)\*(C'\fR will generate
this warning, returning the input parameter as its result, as the upper
case of every non-Unicode code point is the code point itself.
.SS "Security Implications of Unicode"
.IX Subsection "Security Implications of Unicode"
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
Also, note the following:
.IP "\(bu" 4
Malformed \s-1UTF\-8\s0
.Sp
Unfortunately, the original specification of \s-1UTF\-8\s0 leaves some room for
interpretation of how many bytes of encoded output one should generate
from one input Unicode character.  Strictly speaking, the shortest
possible sequence of \s-1UTF\-8\s0 bytes should be generated,
because otherwise there is potential for an input buffer overflow at
the receiving end of a \s-1UTF\-8\s0 connection.  Perl always generates the
shortest length \s-1UTF\-8,\s0 and with warnings on, Perl will warn about
non-shortest length \s-1UTF\-8\s0 along with other malformations, such as the
surrogates, which are not Unicode code points valid for interchange.
.IP "\(bu" 4
Regular expression pattern matching may surprise you if you're not
accustomed to Unicode.  Starting in Perl 5.14, several pattern
modifiers are available to control this, called the character set
modifiers.  Details are given in \*(L"Character set modifiers\*(R" in perlre.
.PP
As discussed elsewhere, Perl has one foot (two hooves?) planted in
each of two worlds: the old world of bytes and the new world of
characters, upgrading from bytes to characters when necessary.
If your legacy code does not explicitly use Unicode, no automatic
switch-over to characters should happen.  Characters shouldn't get
downgraded to bytes, either.  It is possible to accidentally mix bytes
and characters, however (see perluniintro), in which case \f(CW\*(C`\ew\*(C'\fR in
regular expressions might start behaving differently (unless the \f(CW\*(C`/a\*(C'\fR
modifier is in effect).  Review your code.  Use warnings and the \f(CW\*(C`strict\*(C'\fR pragma.
.SS "Unicode in Perl on \s-1EBCDIC\s0"
.IX Subsection "Unicode in Perl on EBCDIC"
The way Unicode is handled on \s-1EBCDIC\s0 platforms is still
experimental.  On such platforms, references to \s-1UTF\-8\s0 encoding in this
document and elsewhere should be read as meaning the UTF-EBCDIC
specified in Unicode Technical Report 16, unless \s-1ASCII\s0 vs. \s-1EBCDIC\s0 issues
are specifically discussed. There is no \f(CW\*(C`utfebcdic\*(C'\fR pragma or
\&\*(L":utfebcdic\*(R" layer; rather, \*(L"utf8\*(R" and \*(L":utf8\*(R" are reused to mean
the platform's \*(L"natural\*(R" 8\-bit encoding of Unicode. See perlebcdic
for more discussion of the issues.
.SS "Locales"
.IX Subsection "Locales"
See \*(L"Unicode and \s-1UTF\-8\*(R"\s0 in perllocale
.SS "When Unicode Does Not Happen"
.IX Subsection "When Unicode Does Not Happen"
While Perl does have extensive ways to input and output in Unicode,
and a few other \*(L"entry points\*(R" like the \f(CW@ARGV\fR array (which can sometimes be
interpreted as \s-1UTF\-8\s0), there are still many places where Unicode
(in some encoding or another) could be given as arguments or received as
results, or both, but it is not.
.PP
The following are such interfaces.  Also, see \*(L"The \*(R"Unicode Bug"".
For all of these interfaces Perl
currently (as of v5.16.0) simply assumes byte strings both as arguments
and results, or \s-1UTF\-8\s0 strings if the (problematic) \f(CW\*(C`encoding\*(C'\fR pragma has been used.
.PP
One reason that Perl does not attempt to resolve the role of Unicode in
these situations is that the answers are highly dependent on the operating
system and the file system(s).  For example, whether filenames can be
in Unicode and in exactly what kind of encoding, is not exactly a
portable concept.  Similarly for \f(CW\*(C`qx\*(C'\fR and \f(CW\*(C`system\*(C'\fR: how well will the
\&\*(L"command-line interface\*(R" (and which of them?) handle Unicode?
.IP "\(bu" 4
chdir, chmod, chown, chroot, exec, link, lstat, mkdir,
rename, rmdir, stat, symlink, truncate, unlink, utime, \-X
.IP "\(bu" 4
\&\f(CW%ENV\fR
.IP "\(bu" 4
glob (aka the <*>)
.IP "\(bu" 4
open, opendir, sysopen
.IP "\(bu" 4
qx (aka the backtick operator), system
.IP "\(bu" 4
readdir, readlink
.ie n .SS "The ""Unicode Bug"""
.el .SS "The ``Unicode Bug''"
.IX Subsection "The Unicode Bug"
The term, \*(L"Unicode bug\*(R" has been applied to an inconsistency
on \s-1ASCII\s0 platforms with the
Unicode code points in the Latin\-1 Supplement block, that
is, between 128 and 255.  Without a locale specified, unlike all other
characters or code points, these characters have very different semantics in
byte semantics versus character semantics, unless
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified, directly or indirectly.
(It is indirectly specified by a \f(CW\*(C`use v5.12\*(C'\fR or higher.)
.PP
In character semantics these upper\-Latin1 characters are interpreted as
Unicode code points, which means
they have the same semantics as Latin\-1 (\s-1ISO\-8859\-1\s0).
.PP
In byte semantics (without \f(CW\*(C`unicode_strings\*(C'\fR), they are considered to
be unassigned characters, meaning that the only semantics they have is
their ordinal numbers, and that they are
not members of various character classes.  None are considered to match \f(CW\*(C`\ew\*(C'\fR
for example, but all match \f(CW\*(C`\eW\*(C'\fR.
.PP
Perl 5.12.0 added \f(CW\*(C`unicode_strings\*(C'\fR to force character semantics on
these code points in some circumstances, which fixed portions of the
bug; Perl 5.14.0 fixed almost all of it; and Perl 5.16.0 fixed the
remainder (so far as we know, anyway).  The lesson here is to enable
\&\f(CW\*(C`unicode_strings\*(C'\fR to avoid the headaches described below.
.PP
The old, problematic behavior affects these areas:
.IP "\(bu" 4
Changing the case of a scalar, that is, using \f(CW\*(C`uc()\*(C'\fR, \f(CW\*(C`ucfirst()\*(C'\fR, \f(CW\*(C`lc()\*(C'\fR,
and \f(CW\*(C`lcfirst()\*(C'\fR, or \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR and \f(CW\*(C`\el\*(C'\fR in double-quotish
contexts, such as regular expression substitutions.
Under \f(CW\*(C`unicode_strings\*(C'\fR starting in Perl 5.12.0, character semantics are
generally used.  See \*(L"lc\*(R" in perlfunc for details on how this works
in combination with various other pragmas.
.IP "\(bu" 4
Using caseless (\f(CW\*(C`/i\*(C'\fR) regular expression matching.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
Matching any of several properties in regular expressions, namely \f(CW\*(C`\eb\*(C'\fR,
\&\f(CW\*(C`\eB\*(C'\fR, \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\eS\*(C'\fR, \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\eW\*(C'\fR, and all the Posix character classes
\&\fIexcept\fR \f(CW\*(C`[[:ascii:]]\*(C'\fR.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
In \f(CW\*(C`quotemeta\*(C'\fR or its inline equivalent \f(CW\*(C`\eQ\*(C'\fR, no code points above 127
are quoted in \s-1UTF\-8\s0 encoded strings, but in byte encoded strings, code
points between 128\-255 are always quoted.
Starting in Perl 5.16.0, consistent quoting rules are used within the
scope of \f(CW\*(C`unicode_strings\*(C'\fR, as described in \*(L"quotemeta\*(R" in perlfunc.
.PP
This behavior can lead to unexpected results in which a string's semantics
suddenly change if a code point above 255 is appended to or removed from it,
which changes the string's semantics from byte to character or vice versa.  As
an example, consider the following program and its output:
.PP
.Vb 11
\& $ perl \-le\*(Aq
\&     no feature \*(Aqunicode_strings\*(Aq;
\&     $s1 = "\exC2";
\&     $s2 = "\ex{2660}";
\&     for ($s1, $s2, $s1.$s2) {
\&         print /\ew/ || 0;
\&     }
\& \*(Aq
\& 0
\& 0
\& 1
.Ve
.PP
If there's no \f(CW\*(C`\ew\*(C'\fR in \f(CW\*(C`s1\*(C'\fR or in \f(CW\*(C`s2\*(C'\fR, why does their concatenation have one?
.PP
This anomaly stems from Perl's attempt to not disturb older programs that
didn't use Unicode, and hence had no semantics for characters outside of the
\&\s-1ASCII\s0 range (except in a locale), along with Perl's desire to add Unicode
support seamlessly.  The result wasn't seamless: these characters were
orphaned.
.PP
For Perls earlier than those described above, or when a string is passed
to a function outside the subpragma's scope, a workaround is to always
call \f(CW\*(C`utf8::upgrade($string)\*(C'\fR,
or to use the standard module Encode.   Also, a scalar that has any characters
whose ordinal is above 0x100, or which were specified using either of the
\&\f(CW\*(C`\eN{...}\*(C'\fR notations, will automatically have character semantics.
.SS "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
.IX Subsection "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
Sometimes (see \*(L"When Unicode Does Not Happen\*(R" or \*(L"The \*(R"Unicode Bug"")
there are situations where you simply need to force a byte
string into \s-1UTF\-8,\s0 or vice versa.  The low-level calls
utf8::upgrade($bytestring) and utf8::downgrade($utf8string[, \s-1FAIL_OK\s0]) are
the answers.
.PP
Note that \fIutf8::downgrade()\fR can fail if the string contains characters
that don't fit into a byte.
.PP
Calling either function on a string that already is in the desired state is a
no-op.
.SS "Using Unicode in \s-1XS\s0"
.IX Subsection "Using Unicode in XS"
If you want to handle Perl Unicode in \s-1XS\s0 extensions, you may find the
following C APIs useful.  See also \*(L"Unicode Support\*(R" in perlguts for an
explanation about Unicode at the \s-1XS\s0 level, and perlapi for the \s-1API\s0
details.
.IP "\(bu" 4
\&\f(CW\*(C`DO_UTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR flag is on and the bytes
pragma is not in effect.  \f(CW\*(C`SvUTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR
flag is on; the bytes pragma is ignored.  The \f(CW\*(C`UTF8\*(C'\fR flag being on
does \fBnot\fR mean that there are any characters of code points greater
than 255 (or 127) in the scalar or that there are even any characters
in the scalar.  What the \f(CW\*(C`UTF8\*(C'\fR flag means is that the sequence of
octets in the representation of the scalar is the sequence of \s-1UTF\-8\s0
encoded code points of the characters of a string.  The \f(CW\*(C`UTF8\*(C'\fR flag
being off means that each octet in this representation encodes a
single character with code point 0..255 within the string.  Perl's
Unicode model is not to use \s-1UTF\-8\s0 until it is absolutely necessary.
.IP "\(bu" 4
\&\f(CW\*(C`uvchr_to_utf8(buf, chr)\*(C'\fR writes a Unicode character code point into
a buffer encoding the code point as \s-1UTF\-8,\s0 and returns a pointer
pointing after the \s-1UTF\-8\s0 bytes.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_to_uvchr_buf(buf, bufend, lenp)\*(C'\fR reads \s-1UTF\-8\s0 encoded bytes from a
buffer and
returns the Unicode character code point and, optionally, the length of
the \s-1UTF\-8\s0 byte sequence.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_length(start, end)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded buffer
in characters.  \f(CW\*(C`sv_len_utf8(sv)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded
scalar.
.IP "\(bu" 4
\&\f(CW\*(C`sv_utf8_upgrade(sv)\*(C'\fR converts the string of the scalar to its \s-1UTF\-8\s0
encoded form.  \f(CW\*(C`sv_utf8_downgrade(sv)\*(C'\fR does the opposite, if
possible.  \f(CW\*(C`sv_utf8_encode(sv)\*(C'\fR is like sv_utf8_upgrade except that
it does not set the \f(CW\*(C`UTF8\*(C'\fR flag.  \f(CW\*(C`sv_utf8_decode()\*(C'\fR does the
opposite of \f(CW\*(C`sv_utf8_encode()\*(C'\fR.  Note that none of these are to be
used as general-purpose encoding or decoding interfaces: \f(CW\*(C`use Encode\*(C'\fR
for that.  \f(CW\*(C`sv_utf8_upgrade()\*(C'\fR is affected by the encoding pragma
but \f(CW\*(C`sv_utf8_downgrade()\*(C'\fR is not (since the encoding pragma is
designed to be a one-way street).
.IP "\(bu" 4
\&\f(CW\*(C`is_utf8_string(buf, len)\*(C'\fR returns true if \f(CW\*(C`len\*(C'\fR bytes of the buffer
are valid \s-1UTF\-8.\s0
.IP "\(bu" 4
\&\f(CW\*(C`is_utf8_char_buf(buf, buf_end)\*(C'\fR returns true if the pointer points to
a valid \s-1UTF\-8\s0 character.
.IP "\(bu" 4
\&\f(CW\*(C`UTF8SKIP(buf)\*(C'\fR will return the number of bytes in the \s-1UTF\-8\s0 encoded
character in the buffer.  \f(CW\*(C`UNISKIP(chr)\*(C'\fR will return the number of bytes
required to UTF\-8\-encode the Unicode character code point.  \f(CW\*(C`UTF8SKIP()\*(C'\fR
is useful for example for iterating over the characters of a \s-1UTF\-8\s0
encoded buffer; \f(CW\*(C`UNISKIP()\*(C'\fR is useful, for example, in computing
the size required for a \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_distance(a, b)\*(C'\fR will tell the distance in characters between the
two pointers pointing to the same \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_hop(s, off)\*(C'\fR will return a pointer to a \s-1UTF\-8\s0 encoded buffer
that is \f(CW\*(C`off\*(C'\fR (positive or negative) Unicode characters displaced
from the \s-1UTF\-8\s0 buffer \f(CW\*(C`s\*(C'\fR.  Be careful not to overstep the buffer:
\&\f(CW\*(C`utf8_hop()\*(C'\fR will merrily run off the end or the beginning of the
buffer if told to do so.
.IP "\(bu" 4
\&\f(CW\*(C`pv_uni_display(dsv, spv, len, pvlim, flags)\*(C'\fR and
\&\f(CW\*(C`sv_uni_display(dsv, ssv, pvlim, flags)\*(C'\fR are useful for debugging the
output of Unicode strings and scalars.  By default they are useful
only for debugging\*(--they display \fBall\fR characters as hexadecimal code
points\*(--but with the flags \f(CW\*(C`UNI_DISPLAY_ISPRINT\*(C'\fR,
\&\f(CW\*(C`UNI_DISPLAY_BACKSLASH\*(C'\fR, and \f(CW\*(C`UNI_DISPLAY_QQ\*(C'\fR you can make the
output more readable.
.IP "\(bu" 4
\&\f(CW\*(C`foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2)\*(C'\fR can be used to
compare two strings case-insensitively in Unicode.  For case-sensitive
comparisons you can just use \f(CW\*(C`memEQ()\*(C'\fR and \f(CW\*(C`memNE()\*(C'\fR as usual, except
if one string is in utf8 and the other isn't.
.PP
For more information, see perlapi, and \fIutf8.c\fR and \fIutf8.h\fR
in the Perl source code distribution.
.SS "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
.IX Subsection "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
Perl by default comes with the latest supported Unicode version built in, but
you can change to use any earlier one.
.PP
Download the files in the desired version of Unicode from the Unicode web
site <http://www.unicode.org>).  These should replace the existing files in
\&\fIlib/unicore\fR in the Perl source tree.  Follow the instructions in
\&\fI\s-1README\s0.perl\fR in that directory to change some of their names, and then build
perl (see \s-1INSTALL\s0).
.SH "BUGS"
.IX Header "BUGS"
.SS "Interaction with Locales"
.IX Subsection "Interaction with Locales"
See \*(L"Unicode and \s-1UTF\-8\*(R"\s0 in perllocale
.SS "Problems with characters in the Latin\-1 Supplement range"
.IX Subsection "Problems with characters in the Latin-1 Supplement range"
See \*(L"The \*(R"Unicode Bug""
.SS "Interaction with Extensions"
.IX Subsection "Interaction with Extensions"
When Perl exchanges data with an extension, the extension should be
able to understand the \s-1UTF8\s0 flag and act accordingly. If the
extension doesn't recognize that flag, it's likely that the extension
will return incorrectly-flagged data.
.PP
So if you're working with Unicode data, consult the documentation of
every module you're using if there are any issues with Unicode data
exchange. If the documentation does not talk about Unicode at all,
suspect the worst and probably look at the source to learn how the
module is implemented. Modules written completely in Perl shouldn't
cause problems. Modules that directly or indirectly access code written
in other programming languages are at risk.
.PP
For affected functions, the simple strategy to avoid data corruption is
to always make the encoding of the exchanged data explicit. Choose an
encoding that you know the extension can handle. Convert arguments passed
to the extensions to that encoding and convert results back from that
encoding. Write wrapper functions that do the conversions for you, so
you can later change the functions when the extension catches up.
.PP
To provide an example, let's say the popular Foo::Bar::escape_html
function doesn't deal with Unicode data yet. The wrapper function
would convert the argument to raw \s-1UTF\-8\s0 and convert the result back to
Perl's internal representation like so:
.PP
.Vb 6
\&    sub my_escape_html ($) {
\&        my($what) = shift;
\&        return unless defined $what;
\&        Encode::decode_utf8(Foo::Bar::escape_html(
\&                                         Encode::encode_utf8($what)));
\&    }
.Ve
.PP
Sometimes, when the extension does not convert data but just stores
and retrieves them, you will be able to use the otherwise
dangerous \fIEncode::_utf8_on()\fR function. Let's say the popular
\&\f(CW\*(C`Foo::Bar\*(C'\fR extension, written in C, provides a \f(CW\*(C`param\*(C'\fR method that
lets you store and retrieve data according to these prototypes:
.PP
.Vb 2
\&    $self\->param($name, $value);            # set a scalar
\&    $value = $self\->param($name);           # retrieve a scalar
.Ve
.PP
If it does not yet provide support for any encoding, one could write a
derived class with such a \f(CW\*(C`param\*(C'\fR method:
.PP
.Vb 12
\&    sub param {
\&      my($self,$name,$value) = @_;
\&      utf8::upgrade($name);     # make sure it is UTF\-8 encoded
\&      if (defined $value) {
\&        utf8::upgrade($value);  # make sure it is UTF\-8 encoded
\&        return $self\->SUPER::param($name,$value);
\&      } else {
\&        my $ret = $self\->SUPER::param($name);
\&        Encode::_utf8_on($ret); # we know, it is UTF\-8 encoded
\&        return $ret;
\&      }
\&    }
.Ve
.PP
Some extensions provide filters on data entry/exit points, such as
DB_File::filter_store_key and family. Look out for such filters in
the documentation of your extensions, they can make the transition to
Unicode data much easier.
.SS "Speed"
.IX Subsection "Speed"
Some functions are slower when working on \s-1UTF\-8\s0 encoded strings than
on byte encoded strings.  All functions that need to hop over
characters such as \fIlength()\fR, \fIsubstr()\fR or \fIindex()\fR, or matching regular
expressions can work \fBmuch\fR faster when the underlying data are
byte-encoded.
.PP
In Perl 5.8.0 the slowness was often quite spectacular; in Perl 5.8.1
a caching scheme was introduced which will hopefully make the slowness
somewhat less spectacular, at least for some operations.  In general,
operations with \s-1UTF\-8\s0 encoded strings are still slower. As an example,
the Unicode properties (character classes) like \f(CW\*(C`\ep{Nd}\*(C'\fR are known to
be quite a bit slower (5\-20 times) than their simpler counterparts
like \f(CW\*(C`\ed\*(C'\fR (then again, there are hundreds of Unicode characters matching \f(CW\*(C`Nd\*(C'\fR
compared with the 10 \s-1ASCII\s0 characters matching \f(CW\*(C`d\*(C'\fR).
.SS "Problems on \s-1EBCDIC\s0 platforms"
.IX Subsection "Problems on EBCDIC platforms"
There are several known problems with Perl on \s-1EBCDIC\s0 platforms.  If you
want to use Perl there, send email to perlbug@perl.org.
.PP
In earlier versions, when byte and character data were concatenated,
the new string was sometimes created by
decoding the byte strings as \fI\s-1ISO 8859\-1 \s0(Latin\-1)\fR, even if the
old Unicode string used \s-1EBCDIC.\s0
.PP
If you find any of these, please report them as bugs.
.SS "Porting code from perl\-5.6.X"
.IX Subsection "Porting code from perl-5.6.X"
Perl 5.8 has a different Unicode model from 5.6. In 5.6 the programmer
was required to use the \f(CW\*(C`utf8\*(C'\fR pragma to declare that a given scope
expected to deal with Unicode data and had to make sure that only
Unicode data were reaching that scope. If you have code that is
working with 5.6, you will need some of the following adjustments to
your code. The examples are written such that the code will continue
to work under 5.6, so you should be safe to try them out.
.IP "\(bu" 3
A filehandle that should read or write \s-1UTF\-8\s0
.Sp
.Vb 3
\&  if ($] > 5.008) {
\&    binmode $fh, ":encoding(utf8)";
\&  }
.Ve
.IP "\(bu" 3
A scalar that is going to be passed to some extension
.Sp
Be it Compress::Zlib, Apache::Request or any extension that has no
mention of Unicode in the manpage, you need to make sure that the
\&\s-1UTF8\s0 flag is stripped off. Note that at the time of this writing
(January 2012) the mentioned modules are not UTF\-8\-aware. Please
check the documentation to verify if this is still true.
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    $val = Encode::encode_utf8($val); # make octets
\&  }
.Ve
.IP "\(bu" 3
A scalar we got back from an extension
.Sp
If you believe the scalar comes back as \s-1UTF\-8,\s0 you will most likely
want the \s-1UTF8\s0 flag restored:
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    $val = Encode::decode_utf8($val);
\&  }
.Ve
.IP "\(bu" 3
Same thing, if you are really sure it is \s-1UTF\-8\s0
.Sp
.Vb 4
\&  if ($] > 5.008) {
\&    require Encode;
\&    Encode::_utf8_on($val);
\&  }
.Ve
.IP "\(bu" 3
A wrapper for fetchrow_array and fetchrow_hashref
.Sp
When the database contains only \s-1UTF\-8,\s0 a wrapper function or method is
a convenient way to replace all your fetchrow_array and
fetchrow_hashref calls. A wrapper function will also make it easier to
adapt to future enhancements in your database driver. Note that at the
time of this writing (January 2012), the \s-1DBI\s0 has no standardized way
to deal with \s-1UTF\-8\s0 data. Please check the documentation to verify if
that is still true.
.Sp
.Vb 10
\&  sub fetchrow {
\&    # $what is one of fetchrow_{array,hashref}
\&    my($self, $sth, $what) = @_;
\&    if ($] < 5.008) {
\&      return $sth\->$what;
\&    } else {
\&      require Encode;
\&      if (wantarray) {
\&        my @arr = $sth\->$what;
\&        for (@arr) {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_);
\&        }
\&        return @arr;
\&      } else {
\&        my $ret = $sth\->$what;
\&        if (ref $ret) {
\&          for my $k (keys %$ret) {
\&            defined
\&            && /[^\e000\-\e177]/
\&            && Encode::_utf8_on($_) for $ret\->{$k};
\&          }
\&          return $ret;
\&        } else {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_) for $ret;
\&          return $ret;
\&        }
\&      }
\&    }
\&  }
.Ve
.IP "\(bu" 3
A large scalar that you know can only contain \s-1ASCII\s0
.Sp
Scalars that contain only \s-1ASCII\s0 and are marked as \s-1UTF\-8\s0 are sometimes
a drag to your program. If you recognize such a situation, just remove
the \s-1UTF8\s0 flag:
.Sp
.Vb 1
\&  utf8::downgrade($val) if $] > 5.008;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunitut, perluniintro, perluniprops, Encode, open, utf8, bytes,
perlretut, \*(L"${^UNICODE}\*(R" in perlvar
<http://www.unicode.org/reports/tr44>).
                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlunicode5.16.1                            0100644 0001750 0001750 00000257055 12566207426 023603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUNICODE 1"
.TH PERLUNICODE 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlunicode \- Unicode support in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Important Caveats"
.IX Subsection "Important Caveats"
Unicode support is an extensive requirement. While Perl does not
implement the Unicode standard or the accompanying technical reports
from cover to cover, Perl does support many Unicode features.
.PP
People who want to learn to use Unicode in Perl, should probably read
the Perl Unicode tutorial, perlunitut and
perluniintro, before reading
this reference document.
.PP
Also, the use of Unicode may present security issues that aren't obvious.
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
.ie n .IP "Safest if you ""use feature 'unicode_strings'""" 4
.el .IP "Safest if you ``use feature 'unicode_strings'''" 4
.IX Item "Safest if you use feature 'unicode_strings'"
In order to preserve backward compatibility, Perl does not turn
on full internal Unicode support unless the pragma
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified.  (This is automatically
selected if you use \f(CW\*(C`use 5.012\*(C'\fR or higher.)  Failure to do this can
trigger unexpected surprises.  See \*(L"The \*(R"Unicode Bug"" below.
.Sp
This pragma doesn't affect I/O, and there are still several places
where Unicode isn't fully supported, such as in filenames.
.IP "Input and Output Layers" 4
.IX Item "Input and Output Layers"
Perl knows when a filehandle uses Perl's internal Unicode encodings
(\s-1UTF\-8\s0, or UTF-EBCDIC if in \s-1EBCDIC\s0) if the filehandle is opened with
the \*(L":encoding(utf8)\*(R" layer.  Other encodings can be converted to Perl's
encoding on input or from Perl's encoding on output by use of the
\&\*(L":encoding(...)\*(R"  layer.  See open.
.Sp
To indicate that Perl source itself is in \s-1UTF\-8\s0, use \f(CW\*(C`use utf8;\*(C'\fR.
.ie n .IP """use utf8"" still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.el .IP "\f(CWuse utf8\fR still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.IX Item "use utf8 still needed to enable UTF-8/UTF-EBCDIC in scripts"
As a compatibility measure, the \f(CW\*(C`use utf8\*(C'\fR pragma must be explicitly
included to enable recognition of \s-1UTF\-8\s0 in the Perl scripts themselves
(in string or regular expression literals, or in identifier names) on
ASCII-based machines or to recognize UTF-EBCDIC on EBCDIC-based
machines.  \fBThese are the only times when an explicit \f(CB\*(C`use utf8\*(C'\fB
is needed.\fR  See utf8.
.IP "BOM-marked scripts and \s-1UTF\-16\s0 scripts autodetected" 4
.IX Item "BOM-marked scripts and UTF-16 scripts autodetected"
If a Perl script begins marked with the Unicode \s-1BOM\s0 (\s-1UTF\-16LE\s0, \s-1UTF16\-BE\s0,
or \s-1UTF\-8\s0), or if the script looks like non-BOM-marked \s-1UTF\-16\s0 of either
endianness, Perl will correctly read in the script as Unicode.
(BOMless \s-1UTF\-8\s0 cannot be effectively recognized or differentiated from
\&\s-1ISO\s0 8859\-1 or other eight-bit encodings.)
.ie n .IP """use encoding"" needed to upgrade non\-Latin\-1 byte strings" 4
.el .IP "\f(CWuse encoding\fR needed to upgrade non\-Latin\-1 byte strings" 4
.IX Item "use encoding needed to upgrade non-Latin-1 byte strings"
By default, there is a fundamental asymmetry in Perl's Unicode model:
implicit upgrading from byte strings to Unicode strings assumes that
they were encoded in \fI\s-1ISO\s0 8859\-1 (Latin\-1)\fR, but Unicode strings are
downgraded with \s-1UTF\-8\s0 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin\-1.
.Sp
See \*(L"Byte and Character Semantics\*(R" for more details.
.SS "Byte and Character Semantics"
.IX Subsection "Byte and Character Semantics"
Beginning with version 5.6, Perl uses logically-wide characters to
represent strings internally.
.PP
Starting in Perl 5.14, Perl-level operations work with
characters rather than bytes within the scope of a
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (or equivalently
\&\f(CW\*(C`use 5.012\*(C'\fR or higher).  (This is not true if bytes have been
explicitly requested by \f(CW\*(C`use bytes\*(C'\fR, nor necessarily true
for interactions with the platform's operating system.)
.PP
For earlier Perls, and when \f(CW\*(C`unicode_strings\*(C'\fR is not in effect, Perl
provides a fairly safe environment that can handle both types of
semantics in programs.  For operations where Perl can unambiguously
decide that the input data are characters, Perl switches to character
semantics.  For operations where this determination cannot be made
without additional information from the user, Perl decides in favor of
compatibility and chooses to use byte semantics.
.PP
When \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in
effect, Perl uses the semantics associated with the current locale.
(\f(CW\*(C`use locale\*(C'\fR overrides \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in the same scope;
while \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR effectively also selects
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in its scope; see perllocale.)
Otherwise, Perl uses the platform's native
byte semantics for characters whose code points are less than 256, and
Unicode semantics for those greater than 255.  On \s-1EBCDIC\s0 platforms, this
is almost seamless, as the \s-1EBCDIC\s0 code pages that Perl handles are
equivalent to Unicode's first 256 code points.  (The exception is that
\&\s-1EBCDIC\s0 regular expression case-insensitive matching rules are not as
as robust as Unicode's.)   But on \s-1ASCII\s0 platforms, Perl uses US-ASCII
(or Basic Latin in Unicode terminology) byte semantics, meaning that characters
whose ordinal numbers are in the range 128 \- 255 are undefined except for their
ordinal numbers.  This means that none have case (upper and lower), nor are any
a member of character classes, like \f(CW\*(C`[:alpha:]\*(C'\fR or \f(CW\*(C`\ew\*(C'\fR.  (But all do belong
to the \f(CW\*(C`\eW\*(C'\fR class or the Perl regular expression extension \f(CW\*(C`[:^alpha:]\*(C'\fR.)
.PP
This behavior preserves compatibility with earlier versions of Perl,
which allowed byte semantics in Perl operations only if
none of the program's inputs were marked as being a source of Unicode
character data.  Such data may come from filehandles, from calls to
external programs, from information provided by the system (such as \f(CW%ENV\fR),
or from literals and constants in the source text.
.PP
The \f(CW\*(C`utf8\*(C'\fR pragma is primarily a compatibility device that enables
recognition of \s-1UTF\-\s0(8|EBCDIC) in literals encountered by the parser.
Note that this pragma is only required while Perl defaults to byte
semantics; when character semantics become the default, this pragma
may become a no-op.  See utf8.
.PP
If strings operating under byte semantics and strings with Unicode
character data are concatenated, the new string will have
character semantics.  This can cause surprises: See \*(L"\s-1BUGS\s0\*(R", below.
You can choose to be warned when this happens.  See encoding::warnings.
.PP
Under character semantics, many operations that formerly operated on
bytes now operate on characters. A character in Perl is
logically just a number ranging from 0 to 2**31 or so. Larger
characters may encode into longer sequences of bytes internally, but
this internal detail is mostly hidden for Perl code.
See perluniintro for more.
.SS "Effects of Character Semantics"
.IX Subsection "Effects of Character Semantics"
Character semantics have the following effects:
.IP "\(bu" 4
Strings\*(--including hash keys\*(--and regular expression patterns may
contain characters that have an ordinal value larger than 255.
.Sp
If you use a Unicode editor to edit your program, Unicode characters may
occur directly within the literal strings in \s-1UTF\-8\s0 encoding, or \s-1UTF\-16\s0.
(The former requires a \s-1BOM\s0 or \f(CW\*(C`use utf8\*(C'\fR, the latter requires a \s-1BOM\s0.)
.Sp
Unicode characters can also be added to a string by using the \f(CW\*(C`\eN{U+...}\*(C'\fR
notation.  The Unicode code for the desired character, in hexadecimal,
should be placed in the braces, after the \f(CW\*(C`U\*(C'\fR. For instance, a smiley face is
\&\f(CW\*(C`\eN{U+263A}\*(C'\fR.
.Sp
Alternatively, you can use the \f(CW\*(C`\ex{...}\*(C'\fR notation for characters 0x100 and
above.  For characters below 0x100 you may get byte semantics instead of
character semantics;  see \*(L"The \*(R"Unicode Bug"".  On \s-1EBCDIC\s0 machines there is
the additional problem that the value for such characters gives the \s-1EBCDIC\s0
character rather than the Unicode one, thus it is more portable to use
\&\f(CW\*(C`\eN{U+...}\*(C'\fR instead.
.Sp
Additionally, you can use the \f(CW\*(C`\eN{...}\*(C'\fR notation and put the official
Unicode character name within the braces, such as
\&\f(CW\*(C`\eN{WHITE SMILING FACE}\*(C'\fR.  This automatically loads the charnames
module with the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR options.  If you prefer different
options for this module, you can instead, before the \f(CW\*(C`\eN{...}\*(C'\fR,
explicitly load it with your desired options; for example,
.Sp
.Vb 1
\&   use charnames \*(Aq:loose\*(Aq;
.Ve
.IP "\(bu" 4
If an appropriate encoding is specified, identifiers within the
Perl script may contain Unicode alphanumeric characters, including
ideographs.  Perl does not currently attempt to canonicalize variable
names.
.IP "\(bu" 4
Regular expressions match characters instead of bytes.  \*(L".\*(R" matches
a character instead of a byte.
.IP "\(bu" 4
Bracketed character classes in regular expressions match characters instead of
bytes and match against the character properties specified in the
Unicode properties database.  \f(CW\*(C`\ew\*(C'\fR can be used to match a Japanese
ideograph, for instance.
.IP "\(bu" 4
Named Unicode properties, scripts, and block ranges may be used (like bracketed
character classes) by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct and
the \f(CW\*(C`\eP{}\*(C'\fR negation, \*(L"doesn't match property\*(R".
See \*(L"Unicode Character Properties\*(R" for more details.
.Sp
You can define your own character properties and use them
in the regular expression with the \f(CW\*(C`\ep{}\*(C'\fR or \f(CW\*(C`\eP{}\*(C'\fR construct.
See \*(L"User-Defined Character Properties\*(R" for more details.
.IP "\(bu" 4
The special pattern \f(CW\*(C`\eX\*(C'\fR matches a logical character, an \*(L"extended grapheme
cluster\*(R" in Standardese.  In Unicode what appears to the user to be a single
character, for example an accented \f(CW\*(C`G\*(C'\fR, may in fact be composed of a sequence
of characters, in this case a \f(CW\*(C`G\*(C'\fR followed by an accent character.  \f(CW\*(C`\eX\*(C'\fR
will match the entire sequence.
.IP "\(bu" 4
The \f(CW\*(C`tr///\*(C'\fR operator translates characters instead of bytes.  Note
that the \f(CW\*(C`tr///CU\*(C'\fR functionality has been removed.  For similar
functionality see pack('U0', ...) and pack('C0', ...).
.IP "\(bu" 4
Case translation operators use the Unicode case translation tables
when character input is provided.  Note that \f(CW\*(C`uc()\*(C'\fR, or \f(CW\*(C`\eU\*(C'\fR in
interpolated strings, translates to uppercase, while \f(CW\*(C`ucfirst\*(C'\fR,
or \f(CW\*(C`\eu\*(C'\fR in interpolated strings, translates to titlecase in languages
that make the distinction (which is equivalent to uppercase in languages
without the distinction).
.IP "\(bu" 4
Most operators that deal with positions or lengths in a string will
automatically switch to using character positions, including
\&\f(CW\*(C`chop()\*(C'\fR, \f(CW\*(C`chomp()\*(C'\fR, \f(CW\*(C`substr()\*(C'\fR, \f(CW\*(C`pos()\*(C'\fR, \f(CW\*(C`index()\*(C'\fR, \f(CW\*(C`rindex()\*(C'\fR,
\&\f(CW\*(C`sprintf()\*(C'\fR, \f(CW\*(C`write()\*(C'\fR, and \f(CW\*(C`length()\*(C'\fR.  An operator that
specifically does not switch is \f(CW\*(C`vec()\*(C'\fR.  Operators that really don't
care include operators that treat strings as a bucket of bits such as
\&\f(CW\*(C`sort()\*(C'\fR, and operators dealing with filenames.
.IP "\(bu" 4
The \f(CW\*(C`pack()\*(C'\fR/\f(CW\*(C`unpack()\*(C'\fR letter \f(CW\*(C`C\*(C'\fR does \fInot\fR change, since it is often
used for byte-oriented formats.  Again, think \f(CW\*(C`char\*(C'\fR in the C language.
.Sp
There is a new \f(CW\*(C`U\*(C'\fR specifier that converts between Unicode characters
and code points. There is also a \f(CW\*(C`W\*(C'\fR specifier that is the equivalent of
\&\f(CW\*(C`chr\*(C'\fR/\f(CW\*(C`ord\*(C'\fR and properly handles character values even if they are above 255.
.IP "\(bu" 4
The \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR functions work on characters, similar to
\&\f(CW\*(C`pack("W")\*(C'\fR and \f(CW\*(C`unpack("W")\*(C'\fR, \fInot\fR \f(CW\*(C`pack("C")\*(C'\fR and
\&\f(CW\*(C`unpack("C")\*(C'\fR.  \f(CW\*(C`pack("C")\*(C'\fR and \f(CW\*(C`unpack("C")\*(C'\fR are methods for
emulating byte-oriented \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR on Unicode strings.
While these methods reveal the internal encoding of Unicode strings,
that is not something one normally needs to care about at all.
.IP "\(bu" 4
The bit string operators, \f(CW\*(C`& | ^ ~\*(C'\fR, can operate on character data.
However, for backward compatibility, such as when using bit string
operations when characters are all less than 256 in ordinal value, one
should not use \f(CW\*(C`~\*(C'\fR (the bit complement) with characters of both
values less than 256 and values greater than 256.  Most importantly,
DeMorgan's laws (\f(CW\*(C`~($x|$y) eq ~$x&~$y\*(C'\fR and \f(CW\*(C`~($x&$y) eq ~$x|~$y\*(C'\fR)
will not hold.  The reason for this mathematical \fIfaux pas\fR is that
the complement cannot return \fBboth\fR the 8\-bit (byte-wide) bit
complement \fBand\fR the full character-wide bit complement.
.IP "\(bu" 4
There is a \s-1CPAN\s0 module, Unicode::Casing, which allows you to define
your own mappings to be used in \f(CW\*(C`lc()\*(C'\fR, \f(CW\*(C`lcfirst()\*(C'\fR, \f(CW\*(C`uc()\*(C'\fR,
\&\f(CW\*(C`ucfirst()\*(C'\fR, and \f(CW\*(C`fc\*(C'\fR (or their double-quoted string inlined
versions such as \f(CW\*(C`\eU\*(C'\fR).
(Prior to Perl 5.16, this functionality was partially provided
in the Perl core, but suffered from a number of insurmountable
drawbacks, so the \s-1CPAN\s0 module was written instead.)
.IP "\(bu" 4
And finally, \f(CW\*(C`scalar reverse()\*(C'\fR reverses by character rather than by byte.
.SS "Unicode Character Properties"
.IX Subsection "Unicode Character Properties"
(The only time that Perl considers a sequence of individual code
points as a single logical character is in the \f(CW\*(C`\eX\*(C'\fR construct, already
mentioned above.   Therefore \*(L"character\*(R" in this discussion means a single
Unicode code point.)
.PP
Very nearly all Unicode character properties are accessible through
regular expressions by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct
and the \f(CW\*(C`\eP{}\*(C'\fR \*(L"doesn't match property\*(R" for its negation.
.PP
For instance, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character with the Unicode
\&\*(L"Uppercase\*(R" property, while \f(CW\*(C`\ep{L}\*(C'\fR matches any character with a
General_Category of \*(L"L\*(R" (letter) property.  Brackets are not
required for single letter property names, so \f(CW\*(C`\ep{L}\*(C'\fR is equivalent to \f(CW\*(C`\epL\*(C'\fR.
.PP
More formally, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character whose Unicode
Uppercase property value is True, and \f(CW\*(C`\eP{Uppercase}\*(C'\fR matches any character
whose Uppercase property value is False, and they could have been written as
\&\f(CW\*(C`\ep{Uppercase=True}\*(C'\fR and \f(CW\*(C`\ep{Uppercase=False}\*(C'\fR, respectively.
.PP
This formality is needed when properties are not binary; that is, if they can
take on more values than just True and False.  For example, the Bidi_Class (see
\&\*(L"Bidirectional Character Types\*(R" below), can take on several different
values, such as Left, Right, Whitespace, and others.  To match these, one needs
to specify both the property name (Bidi_Class), \s-1AND\s0 the value being
matched against
(Left, Right, etc.).  This is done, as in the examples above, by having the
two components separated by an equal sign (or interchangeably, a colon), like
\&\f(CW\*(C`\ep{Bidi_Class: Left}\*(C'\fR.
.PP
All Unicode-defined character properties may be written in these compound forms
of \f(CW\*(C`\ep{property=value}\*(C'\fR or \f(CW\*(C`\ep{property:value}\*(C'\fR, but Perl provides some
additional properties that are written only in the single form, as well as
single-form short-cuts for all binary properties and certain others described
below, in which you may omit the property name and the equals or colon
separator.
.PP
Most Unicode character properties have at least two synonyms (or aliases if you
prefer): a short one that is easier to type and a longer one that is more
descriptive and hence easier to understand.  Thus the \*(L"L\*(R" and \*(L"Letter\*(R" properties
above are equivalent and can be used interchangeably.  Likewise,
\&\*(L"Upper\*(R" is a synonym for \*(L"Uppercase\*(R", and we could have written
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR equivalently as \f(CW\*(C`\ep{Upper}\*(C'\fR.  Also, there are typically
various synonyms for the values the property can be.   For binary properties,
\&\*(L"True\*(R" has 3 synonyms: \*(L"T\*(R", \*(L"Yes\*(R", and \*(L"Y\*(R"; and \*(L"False has correspondingly \*(R"F\*(L",
\&\*(R"No\*(L", and \*(R"N\*(L".  But be careful.  A short form of a value for one property may
not mean the same thing as the same short form for another.  Thus, for the
General_Category property, \*(R"L\*(L" means \*(R"Letter\*(L", but for the Bidi_Class property,
\&\*(R"L\*(L" means \*(R"Left".  A complete list of properties and synonyms is in
perluniprops.
.PP
Upper/lower case differences in property names and values are irrelevant;
thus \f(CW\*(C`\ep{Upper}\*(C'\fR means the same thing as \f(CW\*(C`\ep{upper}\*(C'\fR or even \f(CW\*(C`\ep{UpPeR}\*(C'\fR.
Similarly, you can add or subtract underscores anywhere in the middle of a
word, so that these are also equivalent to \f(CW\*(C`\ep{U_p_p_e_r}\*(C'\fR.  And white space
is irrelevant adjacent to non-word characters, such as the braces and the equals
or colon separators, so \f(CW\*(C`\ep{   Upper  }\*(C'\fR and \f(CW\*(C`\ep{ Upper_case : Y }\*(C'\fR are
equivalent to these as well.  In fact, white space and even
hyphens can usually be added or deleted anywhere.  So even \f(CW\*(C`\ep{ Up\-per case = Yes}\*(C'\fR is
equivalent.  All this is called \*(L"loose-matching\*(R" by Unicode.  The few places
where stricter matching is used is in the middle of numbers, and in the Perl
extension properties that begin or end with an underscore.  Stricter matching
cares about white space (except adjacent to non-word characters),
hyphens, and non-interior underscores.
.PP
You can also use negation in both \f(CW\*(C`\ep{}\*(C'\fR and \f(CW\*(C`\eP{}\*(C'\fR by introducing a caret
(^) between the first brace and the property name: \f(CW\*(C`\ep{^Tamil}\*(C'\fR is
equal to \f(CW\*(C`\eP{Tamil}\*(C'\fR.
.PP
Almost all properties are immune to case-insensitive matching.  That is,
adding a \f(CW\*(C`/i\*(C'\fR regular expression modifier does not change what they
match.  There are two sets that are affected.
The first set is
\&\f(CW\*(C`Uppercase_Letter\*(C'\fR,
\&\f(CW\*(C`Lowercase_Letter\*(C'\fR,
and \f(CW\*(C`Titlecase_Letter\*(C'\fR,
all of which match \f(CW\*(C`Cased_Letter\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
And the second set is
\&\f(CW\*(C`Uppercase\*(C'\fR,
\&\f(CW\*(C`Lowercase\*(C'\fR,
and \f(CW\*(C`Titlecase\*(C'\fR,
all of which match \f(CW\*(C`Cased\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
This set also includes its subsets \f(CW\*(C`PosixUpper\*(C'\fR and \f(CW\*(C`PosixLower\*(C'\fR both
of which under \f(CW\*(C`/i\*(C'\fR matching match \f(CW\*(C`PosixAlpha\*(C'\fR.
(The difference between these sets is that some things, such as Roman
numerals, come in both upper and lower case so they are \f(CW\*(C`Cased\*(C'\fR, but aren't considered
letters, so they aren't \f(CW\*(C`Cased_Letter\*(C'\fRs.)
.PP
The result is undefined if you try to match a non-Unicode code point
(that is, one above 0x10FFFF) against a Unicode property.  Currently, a
warning is raised, and the match will fail.  In some cases, this is
counterintuitive, as both these fail:
.PP
.Vb 2
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=True}      # Fails.
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=False}     # Fails!
.Ve
.PP
\fI\f(BIGeneral_Category\fI\fR
.IX Subsection "General_Category"
.PP
Every Unicode character is assigned a general category, which is the \*(L"most
usual categorization of a character\*(R" (from
<http://www.unicode.org/reports/tr44>).
.PP
The compound way of writing these is like \f(CW\*(C`\ep{General_Category=Number}\*(C'\fR
(short, \f(CW\*(C`\ep{gc:n}\*(C'\fR).  But Perl furnishes shortcuts in which everything up
through the equal or colon separator is omitted.  So you can instead just write
\&\f(CW\*(C`\epN\*(C'\fR.
.PP
Here are the short and long forms of the General Category properties:
.PP
.Vb 1
\&    Short       Long
\&
\&    L           Letter
\&    LC, L&      Cased_Letter (that is: [\ep{Ll}\ep{Lu}\ep{Lt}])
\&    Lu          Uppercase_Letter
\&    Ll          Lowercase_Letter
\&    Lt          Titlecase_Letter
\&    Lm          Modifier_Letter
\&    Lo          Other_Letter
\&
\&    M           Mark
\&    Mn          Nonspacing_Mark
\&    Mc          Spacing_Mark
\&    Me          Enclosing_Mark
\&
\&    N           Number
\&    Nd          Decimal_Number (also Digit)
\&    Nl          Letter_Number
\&    No          Other_Number
\&
\&    P           Punctuation (also Punct)
\&    Pc          Connector_Punctuation
\&    Pd          Dash_Punctuation
\&    Ps          Open_Punctuation
\&    Pe          Close_Punctuation
\&    Pi          Initial_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Pf          Final_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Po          Other_Punctuation
\&
\&    S           Symbol
\&    Sm          Math_Symbol
\&    Sc          Currency_Symbol
\&    Sk          Modifier_Symbol
\&    So          Other_Symbol
\&
\&    Z           Separator
\&    Zs          Space_Separator
\&    Zl          Line_Separator
\&    Zp          Paragraph_Separator
\&
\&    C           Other
\&    Cc          Control (also Cntrl)
\&    Cf          Format
\&    Cs          Surrogate
\&    Co          Private_Use
\&    Cn          Unassigned
.Ve
.PP
Single-letter properties match all characters in any of the
two-letter sub-properties starting with the same letter.
\&\f(CW\*(C`LC\*(C'\fR and \f(CW\*(C`L&\*(C'\fR are special: both are aliases for the set consisting of everything matched by \f(CW\*(C`Ll\*(C'\fR, \f(CW\*(C`Lu\*(C'\fR, and \f(CW\*(C`Lt\*(C'\fR.
.PP
\fI\f(BIBidirectional Character Types\fI\fR
.IX Subsection "Bidirectional Character Types"
.PP
Because scripts differ in their directionality (Hebrew and Arabic are
written right to left, for example) Unicode supplies these properties in
the Bidi_Class class:
.PP
.Vb 1
\&    Property    Meaning
\&
\&    L           Left\-to\-Right
\&    LRE         Left\-to\-Right Embedding
\&    LRO         Left\-to\-Right Override
\&    R           Right\-to\-Left
\&    AL          Arabic Letter
\&    RLE         Right\-to\-Left Embedding
\&    RLO         Right\-to\-Left Override
\&    PDF         Pop Directional Format
\&    EN          European Number
\&    ES          European Separator
\&    ET          European Terminator
\&    AN          Arabic Number
\&    CS          Common Separator
\&    NSM         Non\-Spacing Mark
\&    BN          Boundary Neutral
\&    B           Paragraph Separator
\&    S           Segment Separator
\&    WS          Whitespace
\&    ON          Other Neutrals
.Ve
.PP
This property is always written in the compound form.
For example, \f(CW\*(C`\ep{Bidi_Class:R}\*(C'\fR matches characters that are normally
written right to left.
.PP
\fI\f(BIScripts\fI\fR
.IX Subsection "Scripts"
.PP
The world's languages are written in many different scripts.  This sentence
(unless you're reading it in translation) is written in Latin, while Russian is
written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in
Hiragana or Katakana.  There are many more.
.PP
The Unicode Script and Script_Extensions properties give what script a
given character is in.  Either property can be specified with the
compound form like
\&\f(CW\*(C`\ep{Script=Hebrew}\*(C'\fR (short: \f(CW\*(C`\ep{sc=hebr}\*(C'\fR), or
\&\f(CW\*(C`\ep{Script_Extensions=Javanese}\*(C'\fR (short: \f(CW\*(C`\ep{scx=java}\*(C'\fR).
In addition, Perl furnishes shortcuts for all
\&\f(CW\*(C`Script\*(C'\fR property names.  You can omit everything up through the equals
(or colon), and simply write \f(CW\*(C`\ep{Latin}\*(C'\fR or \f(CW\*(C`\eP{Cyrillic}\*(C'\fR.
(This is not true for \f(CW\*(C`Script_Extensions\*(C'\fR, which is required to be
written in the compound form.)
.PP
The difference between these two properties involves characters that are
used in multiple scripts.  For example the digits '0' through '9' are
used in many parts of the world.  These are placed in a script named
\&\f(CW\*(C`Common\*(C'\fR.  Other characters are used in just a few scripts.  For
example, the \*(L"KATAKANA-HIRAGANA \s-1DOUBLE\s0 \s-1HYPHEN\s0\*(R" is used in both Japanese
scripts, Katakana and Hiragana, but nowhere else.  The \f(CW\*(C`Script\*(C'\fR
property places all characters that are used in multiple scripts in the
\&\f(CW\*(C`Common\*(C'\fR script, while the \f(CW\*(C`Script_Extensions\*(C'\fR property places those
that are used in only a few scripts into each of those scripts; while
still using \f(CW\*(C`Common\*(C'\fR for those used in many scripts.  Thus both these
match:
.PP
.Vb 2
\& "0" =~ /\ep{sc=Common}/     # Matches
\& "0" =~ /\ep{scx=Common}/    # Matches
.Ve
.PP
and only the first of these match:
.PP
.Vb 2
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Common}  # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Common} # No match
.Ve
.PP
And only the last two of these match:
.PP
.Vb 4
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Hiragana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Katakana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Hiragana} # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Katakana} # Matches
.Ve
.PP
\&\f(CW\*(C`Script_Extensions\*(C'\fR is thus an improved \f(CW\*(C`Script\*(C'\fR, in which there are
fewer characters in the \f(CW\*(C`Common\*(C'\fR script, and correspondingly more in
other scripts.  It is new in Unicode version 6.0, and its data are likely
to change significantly in later releases, as things get sorted out.
.PP
(Actually, besides \f(CW\*(C`Common\*(C'\fR, the \f(CW\*(C`Inherited\*(C'\fR script, contains
characters that are used in multiple scripts.  These are modifier
characters which modify other characters, and inherit the script value
of the controlling character.  Some of these are used in many scripts,
and so go into \f(CW\*(C`Inherited\*(C'\fR in both \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extensions\*(C'\fR.
Others are used in just a few scripts, so are in \f(CW\*(C`Inherited\*(C'\fR in
\&\f(CW\*(C`Script\*(C'\fR, but not in \f(CW\*(C`Script_Extensions\*(C'\fR.)
.PP
It is worth stressing that there are several different sets of digits in
Unicode that are equivalent to 0\-9 and are matchable by \f(CW\*(C`\ed\*(C'\fR in a
regular expression.  If they are used in a single language only, they
are in that language's \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extension\*(C'\fR.  If they are
used in more than one script, they will be in \f(CW\*(C`sc=Common\*(C'\fR, but only
if they are used in many scripts should they be in \f(CW\*(C`scx=Common\*(C'\fR.
.PP
A complete list of scripts and their shortcuts is in perluniprops.
.PP
\fI\f(BIUse of \*(L"Is\*(R" Prefix\fI\fR
.IX Subsection "Use of Is Prefix"
.PP
For backward compatibility (with Perl 5.6), all properties mentioned
so far may have \f(CW\*(C`Is\*(C'\fR or \f(CW\*(C`Is_\*(C'\fR prepended to their name, so \f(CW\*(C`\eP{Is_Lu}\*(C'\fR, for
example, is equal to \f(CW\*(C`\eP{Lu}\*(C'\fR, and \f(CW\*(C`\ep{IsScript:Arabic}\*(C'\fR is equal to
\&\f(CW\*(C`\ep{Arabic}\*(C'\fR.
.PP
\fI\f(BIBlocks\fI\fR
.IX Subsection "Blocks"
.PP
In addition to \fBscripts\fR, Unicode also defines \fBblocks\fR of
characters.  The difference between scripts and blocks is that the
concept of scripts is closer to natural languages, while the concept
of blocks is more of an artificial grouping based on groups of Unicode
characters with consecutive ordinal values. For example, the \*(L"Basic Latin\*(R"
block is all characters whose ordinals are between 0 and 127, inclusive; in
other words, the \s-1ASCII\s0 characters.  The \*(L"Latin\*(R" script contains some letters
from this as well as several other blocks, like \*(L"Latin\-1 Supplement\*(R",
\&\*(L"Latin Extended-A\*(R", etc., but it does not contain all the characters from
those blocks. It does not, for example, contain the digits 0\-9, because
those digits are shared across many scripts, and hence are in the
\&\f(CW\*(C`Common\*(C'\fR script.
.PP
For more about scripts versus blocks, see UAX#24 \*(L"Unicode Script Property\*(R":
<http://www.unicode.org/reports/tr24>
.PP
The \f(CW\*(C`Script\*(C'\fR or \f(CW\*(C`Script_Extensions\*(C'\fR properties are likely to be the
ones you want to use when processing
natural language; the Block property may occasionally be useful in working
with the nuts and bolts of Unicode.
.PP
Block names are matched in the compound form, like \f(CW\*(C`\ep{Block: Arrows}\*(C'\fR or
\&\f(CW\*(C`\ep{Blk=Hebrew}\*(C'\fR.  Unlike most other properties, only a few block names have a
Unicode-defined short name.  But Perl does provide a (slight) shortcut:  You
can say, for example \f(CW\*(C`\ep{In_Arrows}\*(C'\fR or \f(CW\*(C`\ep{In_Hebrew}\*(C'\fR.  For backwards
compatibility, the \f(CW\*(C`In\*(C'\fR prefix may be omitted if there is no naming conflict
with a script or any other property, and you can even use an \f(CW\*(C`Is\*(C'\fR prefix
instead in those cases.  But it is not a good idea to do this, for a couple
reasons:
.IP "1." 4
It is confusing.  There are many naming conflicts, and you may forget some.
For example, \f(CW\*(C`\ep{Hebrew}\*(C'\fR means the \fIscript\fR Hebrew, and \s-1NOT\s0 the \fIblock\fR
Hebrew.  But would you remember that 6 months from now?
.IP "2." 4
It is unstable.  A new version of Unicode may pre-empt the current meaning by
creating a property with the same name.  There was a time in very early Unicode
releases when \f(CW\*(C`\ep{Hebrew}\*(C'\fR would have matched the \fIblock\fR Hebrew; now it
doesn't.
.PP
Some people prefer to always use \f(CW\*(C`\ep{Block: foo}\*(C'\fR and \f(CW\*(C`\ep{Script: bar}\*(C'\fR
instead of the shortcuts, whether for clarity, because they can't remember the
difference between 'In' and 'Is' anyway, or they aren't confident that those who
eventually will read their code will know that difference.
.PP
A complete list of blocks and their shortcuts is in perluniprops.
.PP
\fI\f(BIOther Properties\fI\fR
.IX Subsection "Other Properties"
.PP
There are many more properties than the very basic ones described here.
A complete list is in perluniprops.
.PP
Unicode defines all its properties in the compound form, so all single-form
properties are Perl extensions.  Most of these are just synonyms for the
Unicode ones, but some are genuine extensions, including several that are in
the compound form.  And quite a few of these are actually recommended by Unicode
(in <http://www.unicode.org/reports/tr18>).
.PP
This section gives some details on all extensions that aren't just
synonyms for compound-form Unicode properties
(for those properties, you'll have to refer to the
Unicode Standard <http://www.unicode.org/reports/tr44>.
.ie n .IP "\fB\fB""\ep{All}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{All}\fB\fR" 4
.IX Item "p{All}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{Any}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{Alnum}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Alnum}\fB\fR" 4
.IX Item "p{Alnum}"
This matches any \f(CW\*(C`\ep{Alphabetic}\*(C'\fR or \f(CW\*(C`\ep{Decimal_Number}\*(C'\fR character.
.ie n .IP "\fB\fB""\ep{Any}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Any}\fB\fR" 4
.IX Item "p{Any}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{All}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{ASCII}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{ASCII}\fB\fR" 4
.IX Item "p{ASCII}"
This matches any of the 128 characters in the US-ASCII character set,
which is a subset of Unicode.
.ie n .IP "\fB\fB""\ep{Assigned}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Assigned}\fB\fR" 4
.IX Item "p{Assigned}"
This matches any assigned code point; that is, any code point whose general
category is not Unassigned (or equivalently, not Cn).
.ie n .IP "\fB\fB""\ep{Blank}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Blank}\fB\fR" 4
.IX Item "p{Blank}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{HorizSpace}\*(C'\fR:  A character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{Decomposition_Type: Non_Canonical}""\fB\fR    (Short: ""\ep{Dt=NonCanon}"")" 4
.el .IP "\fB\f(CB\ep{Decomposition_Type: Non_Canonical}\fB\fR    (Short: \f(CW\ep{Dt=NonCanon}\fR)" 4
.IX Item "p{Decomposition_Type: Non_Canonical}    (Short: p{Dt=NonCanon})"
Matches a character that has a non-canonical decomposition.
.Sp
To understand the use of this rarely used property=value combination, it is
necessary to know some basics about decomposition.
Consider a character, say H.  It could appear with various marks around it,
such as an acute accent, or a circumflex, or various hooks, circles, arrows,
\&\fIetc.\fR, above, below, to one side or the other, etc.  There are many
possibilities among the world's languages.  The number of combinations is
astronomical, and if there were a character for each combination, it would
soon exhaust Unicode's more than a million possible characters.  So Unicode
took a different approach: there is a character for the base H, and a
character for each of the possible marks, and these can be variously combined
to get a final logical character.  So a logical character\*(--what appears to be a
single character\*(--can be a sequence of more than one individual characters.
This is called an \*(L"extended grapheme cluster\*(R";  Perl furnishes the \f(CW\*(C`\eX\*(C'\fR
regular expression construct to match such sequences.
.Sp
But Unicode's intent is to unify the existing character set standards and
practices, and several pre-existing standards have single characters that
mean the same thing as some of these combinations.  An example is \s-1ISO\-8859\-1\s0,
which has quite a few of these in the Latin\-1 range, an example being \*(L"\s-1LATIN\s0
\&\s-1CAPITAL\s0 \s-1LETTER\s0 E \s-1WITH\s0 \s-1ACUTE\s0\*(R".  Because this character was in this pre-existing
standard, Unicode added it to its repertoire.  But this character is considered
by Unicode to be equivalent to the sequence consisting of the character
\&\*(L"\s-1LATIN\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 E\*(R" followed by the character \*(L"\s-1COMBINING\s0 \s-1ACUTE\s0 \s-1ACCENT\s0\*(R".
.Sp
\&\*(L"\s-1LATIN\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 E \s-1WITH\s0 \s-1ACUTE\s0\*(R" is called a \*(L"pre-composed\*(R" character, and
its equivalence with the sequence is called canonical equivalence.  All
pre-composed characters are said to have a decomposition (into the equivalent
sequence), and the decomposition type is also called canonical.
.Sp
However, many more characters have a different type of decomposition, a
\&\*(L"compatible\*(R" or \*(L"non-canonical\*(R" decomposition.  The sequences that form these
decompositions are not considered canonically equivalent to the pre-composed
character.  An example, again in the Latin\-1 range, is the \*(L"\s-1SUPERSCRIPT\s0 \s-1ONE\s0\*(R".
It is somewhat like a regular digit 1, but not exactly; its decomposition
into the digit 1 is called a \*(L"compatible\*(R" decomposition, specifically a
\&\*(L"super\*(R" decomposition.  There are several such compatibility
decompositions (see <http://www.unicode.org/reports/tr44>), including one
called \*(L"compat\*(R", which means some miscellaneous type of decomposition
that doesn't fit into the decomposition categories that Unicode has chosen.
.Sp
Note that most Unicode characters don't have a decomposition, so their
decomposition type is \*(L"None\*(R".
.Sp
For your convenience, Perl has added the \f(CW\*(C`Non_Canonical\*(C'\fR decomposition
type to mean any of the several compatibility decompositions.
.ie n .IP "\fB\fB""\ep{Graph}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Graph}\fB\fR" 4
.IX Item "p{Graph}"
Matches any character that is graphic.  Theoretically, this means a character
that on a printer would cause ink to be used.
.ie n .IP "\fB\fB""\ep{HorizSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{HorizSpace}\fB\fR" 4
.IX Item "p{HorizSpace}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{Blank}\*(C'\fR:  a character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{In=*}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{In=*}\fB\fR" 4
.IX Item "p{In=*}"
This is a synonym for \f(CW\*(C`\ep{Present_In=*}\*(C'\fR
.ie n .IP "\fB\fB""\ep{PerlSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlSpace}\fB\fR" 4
.IX Item "p{PerlSpace}"
This is the same as \f(CW\*(C`\es\*(C'\fR, restricted to \s-1ASCII\s0, namely \f(CW\*(C`[\ \ef\en\er\et]\*(C'\fR.
.Sp
Mnemonic: Perl's (original) space
.ie n .IP "\fB\fB""\ep{PerlWord}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{PerlWord}\fB\fR" 4
.IX Item "p{PerlWord}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, restricted to \s-1ASCII\s0, namely \f(CW\*(C`[A\-Za\-z0\-9_]\*(C'\fR
.Sp
Mnemonic: Perl's (original) word.
.ie n .IP "\fB\fB""\ep{Posix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Posix...}\fB\fR" 4
.IX Item "p{Posix...}"
There are several of these, which are equivalents using the \f(CW\*(C`\ep\*(C'\fR
notation for Posix classes and are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.ie n .IP "\fB\fB""\ep{Present_In: *}""\fB\fR    (Short: ""\ep{In=*}"")" 4
.el .IP "\fB\f(CB\ep{Present_In: *}\fB\fR    (Short: \f(CW\ep{In=*}\fR)" 4
.IX Item "p{Present_In: *}    (Short: p{In=*})"
This property is used when you need to know in what Unicode version(s) a
character is.
.Sp
The \*(L"*\*(R" above stands for some two digit Unicode version number, such as
\&\f(CW1.1\fR or \f(CW4.0\fR; or the \*(L"*\*(R" can also be \f(CW\*(C`Unassigned\*(C'\fR.  This property will
match the code points whose final disposition has been settled as of the
Unicode release given by the version number; \f(CW\*(C`\ep{Present_In: Unassigned}\*(C'\fR
will match those code points whose meaning has yet to be assigned.
.Sp
For example, \f(CW\*(C`U+0041\*(C'\fR \*(L"\s-1LATIN\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 A\*(R" was present in the very first
Unicode release available, which is \f(CW1.1\fR, so this property is true for all
valid \*(L"*\*(R" versions.  On the other hand, \f(CW\*(C`U+1EFF\*(C'\fR was not assigned until version
5.1 when it became \*(L"\s-1LATIN\s0 \s-1SMALL\s0 \s-1LETTER\s0 Y \s-1WITH\s0 \s-1LOOP\s0\*(R", so the only \*(L"*\*(R" that
would match it are 5.1, 5.2, and later.
.Sp
Unicode furnishes the \f(CW\*(C`Age\*(C'\fR property from which this is derived.  The problem
with Age is that a strict interpretation of it (which Perl takes) has it
matching the precise release a code point's meaning is introduced in.  Thus
\&\f(CW\*(C`U+0041\*(C'\fR would match only 1.1; and \f(CW\*(C`U+1EFF\*(C'\fR only 5.1.  This is not usually what
you want.
.Sp
Some non-Perl implementations of the Age property may change its meaning to be
the same as the Perl Present_In property; just be aware of that.
.Sp
Another confusion with both these properties is that the definition is not
that the code point has been \fIassigned\fR, but that the meaning of the code point
has been \fIdetermined\fR.  This is because 66 code points will always be
unassigned, and so the Age for them is the Unicode version in which the decision
to make them so was made.  For example, \f(CW\*(C`U+FDD0\*(C'\fR is to be permanently
unassigned to a character, and the decision to do that was made in version 3.1,
so \f(CW\*(C`\ep{Age=3.1}\*(C'\fR matches this character, as also does \f(CW\*(C`\ep{Present_In: 3.1}\*(C'\fR and up.
.ie n .IP "\fB\fB""\ep{Print}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Print}\fB\fR" 4
.IX Item "p{Print}"
This matches any character that is graphical or blank, except controls.
.ie n .IP "\fB\fB""\ep{SpacePerl}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{SpacePerl}\fB\fR" 4
.IX Item "p{SpacePerl}"
This is the same as \f(CW\*(C`\es\*(C'\fR, including beyond \s-1ASCII\s0.
.Sp
Mnemonic: Space, as modified by Perl.  (It doesn't include the vertical tab
which both the Posix standard and Unicode consider white space.)
.ie n .IP "\fB\fB""\ep{Title}""\fB\fR and  \fB\fB""\ep{Titlecase}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Title}\fB\fR and  \fB\f(CB\ep{Titlecase}\fB\fR" 4
.IX Item "p{Title} and  p{Titlecase}"
Under case-sensitive matching, these both match the same code points as
\&\f(CW\*(C`\ep{General Category=Titlecase_Letter}\*(C'\fR (\f(CW\*(C`\ep{gc=lt}\*(C'\fR).  The difference
is that under \f(CW\*(C`/i\*(C'\fR caseless matching, these match the same as
\&\f(CW\*(C`\ep{Cased}\*(C'\fR, whereas \f(CW\*(C`\ep{gc=lt}\*(C'\fR matches \f(CW\*(C`\ep{Cased_Letter\*(C'\fR).
.ie n .IP "\fB\fB""\ep{VertSpace}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{VertSpace}\fB\fR" 4
.IX Item "p{VertSpace}"
This is the same as \f(CW\*(C`\ev\*(C'\fR:  A character that changes the spacing vertically.
.ie n .IP "\fB\fB""\ep{Word}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Word}\fB\fR" 4
.IX Item "p{Word}"
This is the same as \f(CW\*(C`\ew\*(C'\fR, including over 100_000 characters beyond \s-1ASCII\s0.
.ie n .IP "\fB\fB""\ep{XPosix...}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{XPosix...}\fB\fR" 4
.IX Item "p{XPosix...}"
There are several of these, which are the standard Posix classes
extended to the full Unicode range.  They are described in
\&\*(L"\s-1POSIX\s0 Character Classes\*(R" in perlrecharclass.
.SS "User-Defined Character Properties"
.IX Subsection "User-Defined Character Properties"
You can define your own binary character properties by defining subroutines
whose names begin with \*(L"In\*(R" or \*(L"Is\*(R".  The subroutines can be defined in any
package.  The user-defined properties can be used in the regular expression
\&\f(CW\*(C`\ep\*(C'\fR and \f(CW\*(C`\eP\*(C'\fR constructs; if you are using a user-defined property from a
package other than the one you are in, you must specify its package in the
\&\f(CW\*(C`\ep\*(C'\fR or \f(CW\*(C`\eP\*(C'\fR construct.
.PP
.Vb 3
\&    # assuming property Is_Foreign defined in Lang::
\&    package main;  # property package name required
\&    if ($txt =~ /\ep{Lang::IsForeign}+/) { ... }
\&
\&    package Lang;  # property package name not required
\&    if ($txt =~ /\ep{IsForeign}+/) { ... }
.Ve
.PP
Note that the effect is compile-time and immutable once defined.
However, the subroutines are passed a single parameter, which is 0 if
case-sensitive matching is in effect and non-zero if caseless matching
is in effect.  The subroutine may return different values depending on
the value of the flag, and one set of values will immutably be in effect
for all case-sensitive matches, and the other set for all case-insensitive
matches.
.PP
Note that if the regular expression is tainted, then Perl will die rather
than calling the subroutine, where the name of the subroutine is
determined by the tainted data.
.PP
The subroutines must return a specially-formatted string, with one
or more newline-separated lines.  Each line must be one of the following:
.IP "\(bu" 4
A single hexadecimal number denoting a Unicode code point to include.
.IP "\(bu" 4
Two hexadecimal numbers separated by horizontal whitespace (space or
tabular characters) denoting a range of Unicode code points to include.
.IP "\(bu" 4
Something to include, prefixed by \*(L"+\*(R": a built-in character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to exclude, prefixed by \*(L"\-\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to negate, prefixed \*(L"!\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.
.IP "\(bu" 4
Something to intersect with, prefixed by \*(L"&\*(R": an existing character
property (prefixed by \*(L"utf8::\*(R") or a fully qualified (including package
name) user-defined character property,
for all the characters except the characters in the property; two
hexadecimal code points for a range; or a single hexadecimal code point.
.PP
For example, to define a property that covers both the Japanese
syllabaries (hiragana and katakana), you can define
.PP
.Vb 6
\&    sub InKana {
\&        return <<END;
\&    3040\et309F
\&    30A0\et30FF
\&    END
\&    }
.Ve
.PP
Imagine that the here-doc end marker is at the beginning of the line.
Now you can use \f(CW\*(C`\ep{InKana}\*(C'\fR and \f(CW\*(C`\eP{InKana}\*(C'\fR.
.PP
You could also have used the existing block property names:
.PP
.Vb 6
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    END
\&    }
.Ve
.PP
Suppose you wanted to match only the allocated characters,
not the raw block ranges: in other words, you want to remove
the non-characters:
.PP
.Vb 7
\&    sub InKana {
\&        return <<\*(AqEND\*(Aq;
\&    +utf8::InHiragana
\&    +utf8::InKatakana
\&    \-utf8::IsCn
\&    END
\&    }
.Ve
.PP
The negation is useful for defining (surprise!) negated classes.
.PP
.Vb 7
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    END
\&    }
.Ve
.PP
This will match all non-Unicode code points, since every one of them is
not in Kana.  You can use intersection to exclude these, if desired, as
this modified example shows:
.PP
.Vb 8
\&    sub InNotKana {
\&        return <<\*(AqEND\*(Aq;
\&    !utf8::InHiragana
\&    \-utf8::InKatakana
\&    +utf8::IsCn
\&    &utf8::Any
\&    END
\&    }
.Ve
.PP
\&\f(CW&utf8::Any\fR must be the last line in the definition.
.PP
Intersection is used generally for getting the common characters matched
by two (or more) classes.  It's important to remember not to use \*(L"&\*(R" for
the first set; that would be intersecting with nothing, resulting in an
empty set.
.PP
(Note that official Unicode properties differ from these in that they
automatically exclude non-Unicode code points and a warning is raised if
a match is attempted on one of those.)
.SS "User-Defined Case Mappings (for serious hackers only)"
.IX Subsection "User-Defined Case Mappings (for serious hackers only)"
\&\fBThis feature has been removed as of Perl 5.16.\fR
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had.  If you are using a Perl earlier
than 5.16, this feature was most fully documented in the 5.14 version of
this pod:
http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29 <http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>
.SS "Character Encodings for Input and Output"
.IX Subsection "Character Encodings for Input and Output"
See Encode.
.SS "Unicode Regular Expression Support Level"
.IX Subsection "Unicode Regular Expression Support Level"
The following list of Unicode supported features for regular expressions describes
all features currently directly supported by core Perl.  The references to \*(L"Level N\*(R"
and the section numbers refer to the Unicode Technical Standard #18,
\&\*(L"Unicode Regular Expressions\*(R", version 13, from August 2008.
.IP "\(bu" 4
Level 1 \- Basic Unicode Support
.Sp
.Vb 8
\& RL1.1   Hex Notation                     \- done          [1]
\& RL1.2   Properties                       \- done          [2][3]
\& RL1.2a  Compatibility Properties         \- done          [4]
\& RL1.3   Subtraction and Intersection     \- MISSING       [5]
\& RL1.4   Simple Word Boundaries           \- done          [6]
\& RL1.5   Simple Loose Matches             \- done          [7]
\& RL1.6   Line Boundaries                  \- MISSING       [8][9]
\& RL1.7   Supplementary Code Points        \- done          [10]
\&
\& [1]  \ex{...}
\& [2]  \ep{...} \eP{...}
\& [3]  supports not only minimal list, but all Unicode character
\&      properties (see Unicode Character Properties above)
\& [4]  \ed \eD \es \eS \ew \eW \eX [:prop:] [:^prop:]
\& [5]  can use regular expression look\-ahead [a] or
\&      user\-defined character properties [b] to emulate set
\&      operations
\& [6]  \eb \eB
\& [7]  note that Perl does Full case\-folding in matching (but with
\&      bugs), not Simple: for example U+1F88 is equivalent to
\&      U+1F00 U+03B9, instead of just U+1F80.  This difference
\&      matters mainly for certain Greek capital letters with certain
\&      modifiers: the Full case\-folding decomposes the letter,
\&      while the Simple case\-folding would map it to a single
\&      character.
\& [8]  should do ^ and $ also on U+000B (\ev in C), FF (\ef), CR
\&      (\er), CRLF (\er\en), NEL (U+0085), LS (U+2028), and PS
\&      (U+2029); should also affect <>, $., and script line
\&      numbers; should not split lines within CRLF [c] (i.e. there
\&      is no empty line between \er and \en)
\& [9]  Linebreaking conformant with UAX#14 "Unicode Line Breaking
\&      Algorithm" is available through the Unicode::LineBreaking
\&      module.
\& [10] UTF\-8/UTF\-EBDDIC used in Perl allows not only U+10000 to
\&      U+10FFFF but also beyond U+10FFFF
.Ve
.Sp
[a] You can mimic class subtraction using lookahead.
For example, what UTS#18 might write as
.Sp
.Vb 1
\&    [{Greek}\-[{UNASSIGNED}]]
.Ve
.Sp
in Perl can be written as:
.Sp
.Vb 2
\&    (?!\ep{Unassigned})\ep{InGreekAndCoptic}
\&    (?=\ep{Assigned})\ep{InGreekAndCoptic}
.Ve
.Sp
But in this particular example, you probably really want
.Sp
.Vb 1
\&    \ep{GreekAndCoptic}
.Ve
.Sp
which will match assigned characters known to be part of the Greek script.
.Sp
Also see the Unicode::Regex::Set module; it does implement the full
UTS#18 grouping, intersection, union, and removal (subtraction) syntax.
.Sp
[b] '+' for union, '\-' for removal (set-difference), '&' for intersection
(see \*(L"User-Defined Character Properties\*(R")
.Sp
[c] Try the \f(CW\*(C`:crlf\*(C'\fR layer (see PerlIO).
.IP "\(bu" 4
Level 2 \- Extended Unicode Support
.Sp
.Vb 6
\& RL2.1   Canonical Equivalents           \- MISSING       [10][11]
\& RL2.2   Default Grapheme Clusters       \- MISSING       [12]
\& RL2.3   Default Word Boundaries         \- MISSING       [14]
\& RL2.4   Default Loose Matches           \- MISSING       [15]
\& RL2.5   Name Properties                 \- DONE
\& RL2.6   Wildcard Properties             \- MISSING
\&
\& [10] see UAX#15 "Unicode Normalization Forms"
\& [11] have Unicode::Normalize but not integrated to regexes
\& [12] have \eX but we don\*(Aqt have a "Grapheme Cluster Mode"
\& [14] see UAX#29, Word Boundaries
\& [15] This is covered in Chapter 3.13 (in Unicode 6.0)
.Ve
.IP "\(bu" 4
Level 3 \- Tailored Support
.Sp
.Vb 11
\& RL3.1   Tailored Punctuation            \- MISSING
\& RL3.2   Tailored Grapheme Clusters      \- MISSING       [17][18]
\& RL3.3   Tailored Word Boundaries        \- MISSING
\& RL3.4   Tailored Loose Matches          \- MISSING
\& RL3.5   Tailored Ranges                 \- MISSING
\& RL3.6   Context Matching                \- MISSING       [19]
\& RL3.7   Incremental Matches             \- MISSING
\&      ( RL3.8   Unicode Set Sharing )
\& RL3.9   Possible Match Sets             \- MISSING
\& RL3.10  Folded Matching                 \- MISSING       [20]
\& RL3.11  Submatchers                     \- MISSING
\&
\& [17] see UAX#10 "Unicode Collation Algorithms"
\& [18] have Unicode::Collate but not integrated to regexes
\& [19] have (?<=x) and (?=x), but look\-aheads or look\-behinds
\&      should see outside of the target substring
\& [20] need insensitive matching for linguistic features other
\&      than case; for example, hiragana to katakana, wide and
\&      narrow, simplified Han to traditional Han (see UTR#30
\&      "Character Foldings")
.Ve
.SS "Unicode Encodings"
.IX Subsection "Unicode Encodings"
Unicode characters are assigned to \fIcode points\fR, which are abstract
numbers.  To use these numbers, various encodings are needed.
.IP "\(bu" 4
\&\s-1UTF\-8\s0
.Sp
\&\s-1UTF\-8\s0 is a variable-length (1 to 4 bytes), byte-order independent
encoding. For \s-1ASCII\s0 (and we really do mean 7\-bit \s-1ASCII\s0, not another
8\-bit encoding), \s-1UTF\-8\s0 is transparent.
.Sp
The following table is from Unicode 3.2.
.Sp
.Vb 1
\& Code Points            1st Byte  2nd Byte  3rd Byte 4th Byte
\&
\&   U+0000..U+007F       00..7F
\&   U+0080..U+07FF     * C2..DF    80..BF
\&   U+0800..U+0FFF       E0      * A0..BF    80..BF
\&   U+1000..U+CFFF       E1..EC    80..BF    80..BF
\&   U+D000..U+D7FF       ED        80..9F    80..BF
\&   U+D800..U+DFFF       +++++ utf16 surrogates, not legal utf8 +++++
\&   U+E000..U+FFFF       EE..EF    80..BF    80..BF
\&  U+10000..U+3FFFF      F0      * 90..BF    80..BF    80..BF
\&  U+40000..U+FFFFF      F1..F3    80..BF    80..BF    80..BF
\& U+100000..U+10FFFF     F4        80..8F    80..BF    80..BF
.Ve
.Sp
Note the gaps marked by \*(L"*\*(R" before several of the byte entries above.  These are
caused by legal \s-1UTF\-8\s0 avoiding non-shortest encodings: it is technically
possible to UTF\-8\-encode a single code point in different ways, but that is
explicitly forbidden, and the shortest possible encoding should always be used
(and that is what Perl does).
.Sp
Another way to look at it is via bits:
.Sp
.Vb 1
\&                Code Points  1st Byte  2nd Byte  3rd Byte  4th Byte
\&
\&                   0aaaaaaa  0aaaaaaa
\&           00000bbbbbaaaaaa  110bbbbb  10aaaaaa
\&           ccccbbbbbbaaaaaa  1110cccc  10bbbbbb  10aaaaaa
\& 00000dddccccccbbbbbbaaaaaa  11110ddd  10cccccc  10bbbbbb  10aaaaaa
.Ve
.Sp
As you can see, the continuation bytes all begin with \*(L"10\*(R", and the
leading bits of the start byte tell how many bytes there are in the
encoded character.
.Sp
The original \s-1UTF\-8\s0 specification allowed up to 6 bytes, to allow
encoding of numbers up to 0x7FFF_FFFF.  Perl continues to allow those,
and has extended that up to 13 bytes to encode code points up to what
can fit in a 64\-bit word.  However, Perl will warn if you output any of
these as being non-portable; and under strict \s-1UTF\-8\s0 input protocols,
they are forbidden.
.Sp
The Unicode non-character code points are also disallowed in \s-1UTF\-8\s0 in
\&\*(L"open interchange\*(R".  See \*(L"Non-character code points\*(R".
.IP "\(bu" 4
UTF-EBCDIC
.Sp
Like \s-1UTF\-8\s0 but EBCDIC-safe, in the way that \s-1UTF\-8\s0 is ASCII-safe.
.IP "\(bu" 4
\&\s-1UTF\-16\s0, \s-1UTF\-16BE\s0, \s-1UTF\-16LE\s0, Surrogates, and BOMs (Byte Order Marks)
.Sp
The followings items are mostly for reference and general Unicode
knowledge, Perl doesn't use these constructs internally.
.Sp
Like \s-1UTF\-8\s0, \s-1UTF\-16\s0 is a variable-width encoding, but where
\&\s-1UTF\-8\s0 uses 8\-bit code units, \s-1UTF\-16\s0 uses 16\-bit code units.
All code points occupy either 2 or 4 bytes in \s-1UTF\-16:\s0 code points
\&\f(CW\*(C`U+0000..U+FFFF\*(C'\fR are stored in a single 16\-bit unit, and code
points \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR in two 16\-bit units.  The latter case is
using \fIsurrogates\fR, the first 16\-bit unit being the \fIhigh
surrogate\fR, and the second being the \fIlow surrogate\fR.
.Sp
Surrogates are code points set aside to encode the \f(CW\*(C`U+10000..U+10FFFF\*(C'\fR
range of Unicode code points in pairs of 16\-bit units.  The \fIhigh
surrogates\fR are the range \f(CW\*(C`U+D800..U+DBFF\*(C'\fR and the \fIlow surrogates\fR
are the range \f(CW\*(C`U+DC00..U+DFFF\*(C'\fR.  The surrogate encoding is
.Sp
.Vb 2
\&    $hi = ($uni \- 0x10000) / 0x400 + 0xD800;
\&    $lo = ($uni \- 0x10000) % 0x400 + 0xDC00;
.Ve
.Sp
and the decoding is
.Sp
.Vb 1
\&    $uni = 0x10000 + ($hi \- 0xD800) * 0x400 + ($lo \- 0xDC00);
.Ve
.Sp
Because of the 16\-bitness, \s-1UTF\-16\s0 is byte-order dependent.  \s-1UTF\-16\s0
itself can be used for in-memory computations, but if storage or
transfer is required either \s-1UTF\-16BE\s0 (big-endian) or \s-1UTF\-16LE\s0
(little-endian) encodings must be chosen.
.Sp
This introduces another problem: what if you just know that your data
is \s-1UTF\-16\s0, but you don't know which endianness?  Byte Order Marks, or
BOMs, are a solution to this.  A special character has been reserved
in Unicode to function as a byte order marker: the character with the
code point \f(CW\*(C`U+FEFF\*(C'\fR is the \s-1BOM\s0.
.Sp
The trick is that if you read a \s-1BOM\s0, you will know the byte order,
since if it was written on a big-endian platform, you will read the
bytes \f(CW\*(C`0xFE 0xFF\*(C'\fR, but if it was written on a little-endian platform,
you will read the bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR.  (And if the originating platform
was writing in \s-1UTF\-8\s0, you will read the bytes \f(CW\*(C`0xEF 0xBB 0xBF\*(C'\fR.)
.Sp
The way this trick works is that the character with the code point
\&\f(CW\*(C`U+FFFE\*(C'\fR is not supposed to be in input streams, so the
sequence of bytes \f(CW\*(C`0xFF 0xFE\*(C'\fR is unambiguously \*(L"\s-1BOM\s0, represented in
little-endian format\*(R" and cannot be \f(CW\*(C`U+FFFE\*(C'\fR, represented in big-endian
format".
.Sp
Surrogates have no meaning in Unicode outside their use in pairs to
represent other code points.  However, Perl allows them to be
represented individually internally, for example by saying
\&\f(CW\*(C`chr(0xD801)\*(C'\fR, so that all code points, not just those valid for open
interchange, are
representable.  Unicode does define semantics for them, such as their
General Category is \*(L"Cs\*(R".  But because their use is somewhat dangerous,
Perl will warn (using the warning category \*(L"surrogate\*(R", which is a
sub-category of \*(L"utf8\*(R") if an attempt is made
to do things like take the lower case of one, or match
case-insensitively, or to output them.  (But don't try this on Perls
before 5.14.)
.IP "\(bu" 4
\&\s-1UTF\-32\s0, \s-1UTF\-32BE\s0, \s-1UTF\-32LE\s0
.Sp
The \s-1UTF\-32\s0 family is pretty much like the \s-1UTF\-16\s0 family, expect that
the units are 32\-bit, and therefore the surrogate scheme is not
needed.  \s-1UTF\-32\s0 is a fixed-width encoding.  The \s-1BOM\s0 signatures are
\&\f(CW\*(C`0x00 0x00 0xFE 0xFF\*(C'\fR for \s-1BE\s0 and \f(CW\*(C`0xFF 0xFE 0x00 0x00\*(C'\fR for \s-1LE\s0.
.IP "\(bu" 4
\&\s-1UCS\-2\s0, \s-1UCS\-4\s0
.Sp
Legacy, fixed-width encodings defined by the \s-1ISO\s0 10646 standard.  \s-1UCS\-2\s0 is a 16\-bit
encoding.  Unlike \s-1UTF\-16\s0, \s-1UCS\-2\s0 is not extensible beyond \f(CW\*(C`U+FFFF\*(C'\fR,
because it does not use surrogates.  \s-1UCS\-4\s0 is a 32\-bit encoding,
functionally identical to \s-1UTF\-32\s0 (the difference being that
\&\s-1UCS\-4\s0 forbids neither surrogates nor code points larger than 0x10_FFFF).
.IP "\(bu" 4
\&\s-1UTF\-7\s0
.Sp
A seven-bit safe (non-eight-bit) encoding, which is useful if the
transport or storage is not eight-bit safe.  Defined by \s-1RFC\s0 2152.
.SS "Non-character code points"
.IX Subsection "Non-character code points"
66 code points are set aside in Unicode as \*(L"non-character code points\*(R".
These all have the Unassigned (Cn) General Category, and they never will
be assigned.  These are never supposed to be in legal Unicode input
streams, so that code can use them as sentinels that can be mixed in
with character data, and they always will be distinguishable from that data.
To keep them out of Perl input streams, strict \s-1UTF\-8\s0 should be
specified, such as by using the layer \f(CW\*(C`:encoding(\*(AqUTF\-8\*(Aq)\*(C'\fR.  The
non-character code points are the 32 between U+FDD0 and U+FDEF, and the
34 code points U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, ... U+10FFFE, U+10FFFF.
Some people are under the mistaken impression that these are \*(L"illegal\*(R",
but that is not true.  An application or cooperating set of applications
can legally use them at will internally; but these code points are
\&\*(L"illegal for open interchange\*(R".  Therefore, Perl will not accept these
from input streams unless lax rules are being used, and will warn
(using the warning category \*(L"nonchar\*(R", which is a sub-category of \*(L"utf8\*(R") if
an attempt is made to output them.
.SS "Beyond Unicode code points"
.IX Subsection "Beyond Unicode code points"
The maximum Unicode code point is U+10FFFF.  But Perl accepts code
points up to the maximum permissible unsigned number available on the
platform.  However, Perl will not accept these from input streams unless
lax rules are being used, and will warn (using the warning category
\&\*(L"non_unicode\*(R", which is a sub-category of \*(L"utf8\*(R") if an attempt is made to
operate on or output them.  For example, \f(CW\*(C`uc(0x11_0000)\*(C'\fR will generate
this warning, returning the input parameter as its result, as the upper
case of every non-Unicode code point is the code point itself.
.SS "Security Implications of Unicode"
.IX Subsection "Security Implications of Unicode"
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
Also, note the following:
.IP "\(bu" 4
Malformed \s-1UTF\-8\s0
.Sp
Unfortunately, the original specification of \s-1UTF\-8\s0 leaves some room for
interpretation of how many bytes of encoded output one should generate
from one input Unicode character.  Strictly speaking, the shortest
possible sequence of \s-1UTF\-8\s0 bytes should be generated,
because otherwise there is potential for an input buffer overflow at
the receiving end of a \s-1UTF\-8\s0 connection.  Perl always generates the
shortest length \s-1UTF\-8\s0, and with warnings on, Perl will warn about
non-shortest length \s-1UTF\-8\s0 along with other malformations, such as the
surrogates, which are not Unicode code points valid for interchange.
.IP "\(bu" 4
Regular expression pattern matching may surprise you if you're not
accustomed to Unicode.  Starting in Perl 5.14, several pattern
modifiers are available to control this, called the character set
modifiers.  Details are given in \*(L"Character set modifiers\*(R" in perlre.
.PP
As discussed elsewhere, Perl has one foot (two hooves?) planted in
each of two worlds: the old world of bytes and the new world of
characters, upgrading from bytes to characters when necessary.
If your legacy code does not explicitly use Unicode, no automatic
switch-over to characters should happen.  Characters shouldn't get
downgraded to bytes, either.  It is possible to accidentally mix bytes
and characters, however (see perluniintro), in which case \f(CW\*(C`\ew\*(C'\fR in
regular expressions might start behaving differently (unless the \f(CW\*(C`/a\*(C'\fR
modifier is in effect).  Review your code.  Use warnings and the \f(CW\*(C`strict\*(C'\fR pragma.
.SS "Unicode in Perl on \s-1EBCDIC\s0"
.IX Subsection "Unicode in Perl on EBCDIC"
The way Unicode is handled on \s-1EBCDIC\s0 platforms is still
experimental.  On such platforms, references to \s-1UTF\-8\s0 encoding in this
document and elsewhere should be read as meaning the UTF-EBCDIC
specified in Unicode Technical Report 16, unless \s-1ASCII\s0 vs. \s-1EBCDIC\s0 issues
are specifically discussed. There is no \f(CW\*(C`utfebcdic\*(C'\fR pragma or
\&\*(L":utfebcdic\*(R" layer; rather, \*(L"utf8\*(R" and \*(L":utf8\*(R" are reused to mean
the platform's \*(L"natural\*(R" 8\-bit encoding of Unicode. See perlebcdic
for more discussion of the issues.
.SS "Locales"
.IX Subsection "Locales"
See \*(L"Unicode and \s-1UTF\-8\s0\*(R" in perllocale
.SS "When Unicode Does Not Happen"
.IX Subsection "When Unicode Does Not Happen"
While Perl does have extensive ways to input and output in Unicode,
and a few other \*(L"entry points\*(R" like the \f(CW@ARGV\fR array (which can sometimes be
interpreted as \s-1UTF\-8\s0), there are still many places where Unicode
(in some encoding or another) could be given as arguments or received as
results, or both, but it is not.
.PP
The following are such interfaces.  Also, see \*(L"The \*(R"Unicode Bug"".
For all of these interfaces Perl
currently (as of 5.8.3) simply assumes byte strings both as arguments
and results, or \s-1UTF\-8\s0 strings if the (problematic) \f(CW\*(C`encoding\*(C'\fR pragma has been used.
.PP
One reason that Perl does not attempt to resolve the role of Unicode in
these situations is that the answers are highly dependent on the operating
system and the file system(s).  For example, whether filenames can be
in Unicode and in exactly what kind of encoding, is not exactly a
portable concept.  Similarly for \f(CW\*(C`qx\*(C'\fR and \f(CW\*(C`system\*(C'\fR: how well will the
\&\*(L"command-line interface\*(R" (and which of them?) handle Unicode?
.IP "\(bu" 4
chdir, chmod, chown, chroot, exec, link, lstat, mkdir,
rename, rmdir, stat, symlink, truncate, unlink, utime, \-X
.IP "\(bu" 4
\&\f(CW%ENV\fR
.IP "\(bu" 4
glob (aka the <*>)
.IP "\(bu" 4
open, opendir, sysopen
.IP "\(bu" 4
qx (aka the backtick operator), system
.IP "\(bu" 4
readdir, readlink
.ie n .SS "The ""Unicode Bug"""
.el .SS "The ``Unicode Bug''"
.IX Subsection "The Unicode Bug"
The term, \*(L"Unicode bug\*(R" has been applied to an inconsistency
on \s-1ASCII\s0 platforms with the
Unicode code points in the Latin\-1 Supplement block, that
is, between 128 and 255.  Without a locale specified, unlike all other
characters or code points, these characters have very different semantics in
byte semantics versus character semantics, unless
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified, directly or indirectly.
(It is indirectly specified by a \f(CW\*(C`use v5.12\*(C'\fR or higher.)
.PP
In character semantics these upper\-Latin1 characters are interpreted as
Unicode code points, which means
they have the same semantics as Latin\-1 (\s-1ISO\-8859\-1\s0).
.PP
In byte semantics (without \f(CW\*(C`unicode_strings\*(C'\fR), they are considered to
be unassigned characters, meaning that the only semantics they have is
their ordinal numbers, and that they are
not members of various character classes.  None are considered to match \f(CW\*(C`\ew\*(C'\fR
for example, but all match \f(CW\*(C`\eW\*(C'\fR.
.PP
Perl 5.12.0 added \f(CW\*(C`unicode_strings\*(C'\fR to force character semantics on
these code points in some circumstances, which fixed portions of the
bug; Perl 5.14.0 fixed almost all of it; and Perl 5.16.0 fixed the
remainder (so far as we know, anyway).  The lesson here is to enable
\&\f(CW\*(C`unicode_strings\*(C'\fR to avoid the headaches described below.
.PP
The old, problematic behavior affects these areas:
.IP "\(bu" 4
Changing the case of a scalar, that is, using \f(CW\*(C`uc()\*(C'\fR, \f(CW\*(C`ucfirst()\*(C'\fR, \f(CW\*(C`lc()\*(C'\fR,
and \f(CW\*(C`lcfirst()\*(C'\fR, or \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR and \f(CW\*(C`\el\*(C'\fR in double-quotish
contexts, such as regular expression substitutions.
Under \f(CW\*(C`unicode_strings\*(C'\fR starting in Perl 5.12.0, character semantics are
generally used.  See \*(L"lc\*(R" in perlfunc for details on how this works
in combination with various other pragmas.
.IP "\(bu" 4
Using caseless (\f(CW\*(C`/i\*(C'\fR) regular expression matching.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
Matching any of several properties in regular expressions, namely \f(CW\*(C`\eb\*(C'\fR,
\&\f(CW\*(C`\eB\*(C'\fR, \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\eS\*(C'\fR, \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\eW\*(C'\fR, and all the Posix character classes
\&\fIexcept\fR \f(CW\*(C`[[:ascii:]]\*(C'\fR.
Starting in Perl 5.14.0, regular expressions compiled within
the scope of \f(CW\*(C`unicode_strings\*(C'\fR use character semantics
even when executed or compiled into larger
regular expressions outside the scope.
.IP "\(bu" 4
In \f(CW\*(C`quotemeta\*(C'\fR or its inline equivalent \f(CW\*(C`\eQ\*(C'\fR, no code points above 127
are quoted in \s-1UTF\-8\s0 encoded strings, but in byte encoded strings, code
points between 128\-255 are always quoted.
Starting in Perl 5.16.0, consistent quoting rules are used within the
scope of \f(CW\*(C`unicode_strings\*(C'\fR, as described in \*(L"quotemeta\*(R" in perlfunc.
.PP
This behavior can lead to unexpected results in which a string's semantics
suddenly change if a code point above 255 is appended to or removed from it,
which changes the string's semantics from byte to character or vice versa.  As
an example, consider the following program and its output:
.PP
.Vb 11
\& $ perl \-le\*(Aq
\&     no feature \*(Aqunicode_strings\*(Aq;
\&     $s1 = "\exC2";
\&     $s2 = "\ex{2660}";
\&     for ($s1, $s2, $s1.$s2) {
\&         print /\ew/ || 0;
\&     }
\& \*(Aq
\& 0
\& 0
\& 1
.Ve
.PP
If there's no \f(CW\*(C`\ew\*(C'\fR in \f(CW\*(C`s1\*(C'\fR or in \f(CW\*(C`s2\*(C'\fR, why does their concatenation have one?
.PP
This anomaly stems from Perl's attempt to not disturb older programs that
didn't use Unicode, and hence had no semantics for characters outside of the
\&\s-1ASCII\s0 range (except in a locale), along with Perl's desire to add Unicode
support seamlessly.  The result wasn't seamless: these characters were
orphaned.
.PP
For Perls earlier than those described above, or when a string is passed
to a function outside the subpragma's scope, a workaround is to always
call \f(CW\*(C`utf8::upgrade($string)\*(C'\fR,
or to use the standard module Encode.   Also, a scalar that has any characters
whose ordinal is above 0x100, or which were specified using either of the
\&\f(CW\*(C`\eN{...}\*(C'\fR notations, will automatically have character semantics.
.SS "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
.IX Subsection "Forcing Unicode in Perl (Or Unforcing Unicode in Perl)"
Sometimes (see \*(L"When Unicode Does Not Happen\*(R" or \*(L"The \*(R"Unicode Bug"")
there are situations where you simply need to force a byte
string into \s-1UTF\-8\s0, or vice versa.  The low-level calls
utf8::upgrade($bytestring) and utf8::downgrade($utf8string[, \s-1FAIL_OK\s0]) are
the answers.
.PP
Note that \fIutf8::downgrade()\fR can fail if the string contains characters
that don't fit into a byte.
.PP
Calling either function on a string that already is in the desired state is a
no-op.
.SS "Using Unicode in \s-1XS\s0"
.IX Subsection "Using Unicode in XS"
If you want to handle Perl Unicode in \s-1XS\s0 extensions, you may find the
following C APIs useful.  See also \*(L"Unicode Support\*(R" in perlguts for an
explanation about Unicode at the \s-1XS\s0 level, and perlapi for the \s-1API\s0
details.
.IP "\(bu" 4
\&\f(CW\*(C`DO_UTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR flag is on and the bytes
pragma is not in effect.  \f(CW\*(C`SvUTF8(sv)\*(C'\fR returns true if the \f(CW\*(C`UTF8\*(C'\fR
flag is on; the bytes pragma is ignored.  The \f(CW\*(C`UTF8\*(C'\fR flag being on
does \fBnot\fR mean that there are any characters of code points greater
than 255 (or 127) in the scalar or that there are even any characters
in the scalar.  What the \f(CW\*(C`UTF8\*(C'\fR flag means is that the sequence of
octets in the representation of the scalar is the sequence of \s-1UTF\-8\s0
encoded code points of the characters of a string.  The \f(CW\*(C`UTF8\*(C'\fR flag
being off means that each octet in this representation encodes a
single character with code point 0..255 within the string.  Perl's
Unicode model is not to use \s-1UTF\-8\s0 until it is absolutely necessary.
.IP "\(bu" 4
\&\f(CW\*(C`uvchr_to_utf8(buf, chr)\*(C'\fR writes a Unicode character code point into
a buffer encoding the code point as \s-1UTF\-8\s0, and returns a pointer
pointing after the \s-1UTF\-8\s0 bytes.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_to_uvchr_buf(buf, bufend, lenp)\*(C'\fR reads \s-1UTF\-8\s0 encoded bytes from a
buffer and
returns the Unicode character code point and, optionally, the length of
the \s-1UTF\-8\s0 byte sequence.  It works appropriately on \s-1EBCDIC\s0 machines.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_length(start, end)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded buffer
in characters.  \f(CW\*(C`sv_len_utf8(sv)\*(C'\fR returns the length of the \s-1UTF\-8\s0 encoded
scalar.
.IP "\(bu" 4
\&\f(CW\*(C`sv_utf8_upgrade(sv)\*(C'\fR converts the string of the scalar to its \s-1UTF\-8\s0
encoded form.  \f(CW\*(C`sv_utf8_downgrade(sv)\*(C'\fR does the opposite, if
possible.  \f(CW\*(C`sv_utf8_encode(sv)\*(C'\fR is like sv_utf8_upgrade except that
it does not set the \f(CW\*(C`UTF8\*(C'\fR flag.  \f(CW\*(C`sv_utf8_decode()\*(C'\fR does the
opposite of \f(CW\*(C`sv_utf8_encode()\*(C'\fR.  Note that none of these are to be
used as general-purpose encoding or decoding interfaces: \f(CW\*(C`use Encode\*(C'\fR
for that.  \f(CW\*(C`sv_utf8_upgrade()\*(C'\fR is affected by the encoding pragma
but \f(CW\*(C`sv_utf8_downgrade()\*(C'\fR is not (since the encoding pragma is
designed to be a one-way street).
.IP "\(bu" 4
\&\f(CW\*(C`is_utf8_string(buf, len)\*(C'\fR returns true if \f(CW\*(C`len\*(C'\fR bytes of the buffer
are valid \s-1UTF\-8\s0.
.IP "\(bu" 4
\&\f(CWis_utf8_char(s)\fR returns true if the pointer points to a valid \s-1UTF\-8\s0
character.  However, this function should not be used because of
security concerns.  Instead, use \f(CW\*(C`is_utf8_string()\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`UTF8SKIP(buf)\*(C'\fR will return the number of bytes in the \s-1UTF\-8\s0 encoded
character in the buffer.  \f(CW\*(C`UNISKIP(chr)\*(C'\fR will return the number of bytes
required to UTF\-8\-encode the Unicode character code point.  \f(CW\*(C`UTF8SKIP()\*(C'\fR
is useful for example for iterating over the characters of a \s-1UTF\-8\s0
encoded buffer; \f(CW\*(C`UNISKIP()\*(C'\fR is useful, for example, in computing
the size required for a \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_distance(a, b)\*(C'\fR will tell the distance in characters between the
two pointers pointing to the same \s-1UTF\-8\s0 encoded buffer.
.IP "\(bu" 4
\&\f(CW\*(C`utf8_hop(s, off)\*(C'\fR will return a pointer to a \s-1UTF\-8\s0 encoded buffer
that is \f(CW\*(C`off\*(C'\fR (positive or negative) Unicode characters displaced
from the \s-1UTF\-8\s0 buffer \f(CW\*(C`s\*(C'\fR.  Be careful not to overstep the buffer:
\&\f(CW\*(C`utf8_hop()\*(C'\fR will merrily run off the end or the beginning of the
buffer if told to do so.
.IP "\(bu" 4
\&\f(CW\*(C`pv_uni_display(dsv, spv, len, pvlim, flags)\*(C'\fR and
\&\f(CW\*(C`sv_uni_display(dsv, ssv, pvlim, flags)\*(C'\fR are useful for debugging the
output of Unicode strings and scalars.  By default they are useful
only for debugging\*(--they display \fBall\fR characters as hexadecimal code
points\*(--but with the flags \f(CW\*(C`UNI_DISPLAY_ISPRINT\*(C'\fR,
\&\f(CW\*(C`UNI_DISPLAY_BACKSLASH\*(C'\fR, and \f(CW\*(C`UNI_DISPLAY_QQ\*(C'\fR you can make the
output more readable.
.IP "\(bu" 4
\&\f(CW\*(C`foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2)\*(C'\fR can be used to
compare two strings case-insensitively in Unicode.  For case-sensitive
comparisons you can just use \f(CW\*(C`memEQ()\*(C'\fR and \f(CW\*(C`memNE()\*(C'\fR as usual, except
if one string is in utf8 and the other isn't.
.PP
For more information, see perlapi, and \fIutf8.c\fR and \fIutf8.h\fR
in the Perl source code distribution.
.SS "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
.IX Subsection "Hacking Perl to work on earlier Unicode versions (for very serious hackers only)"
Perl by default comes with the latest supported Unicode version built in, but
you can change to use any earlier one.
.PP
Download the files in the desired version of Unicode from the Unicode web
site <http://www.unicode.org>).  These should replace the existing files in
\&\fIlib/unicore\fR in the Perl source tree.  Follow the instructions in
\&\fI\s-1README\s0.perl\fR in that directory to change some of their names, and then build
perl (see \s-1INSTALL\s0).
.SH "BUGS"
.IX Header "BUGS"
.SS "Interaction with Locales"
.IX Subsection "Interaction with Locales"
See \*(L"Unicode and \s-1UTF\-8\s0\*(R" in perllocale
.SS "Problems with characters in the Latin\-1 Supplement range"
.IX Subsection "Problems with characters in the Latin-1 Supplement range"
See \*(L"The \*(R"Unicode Bug""
.SS "Interaction with Extensions"
.IX Subsection "Interaction with Extensions"
When Perl exchanges data with an extension, the extension should be
able to understand the \s-1UTF8\s0 flag and act accordingly. If the
extension doesn't recognize that flag, it's likely that the extension
will return incorrectly-flagged data.
.PP
So if you're working with Unicode data, consult the documentation of
every module you're using if there are any issues with Unicode data
exchange. If the documentation does not talk about Unicode at all,
suspect the worst and probably look at the source to learn how the
module is implemented. Modules written completely in Perl shouldn't
cause problems. Modules that directly or indirectly access code written
in other programming languages are at risk.
.PP
For affected functions, the simple strategy to avoid data corruption is
to always make the encoding of the exchanged data explicit. Choose an
encoding that you know the extension can handle. Convert arguments passed
to the extensions to that encoding and convert results back from that
encoding. Write wrapper functions that do the conversions for you, so
you can later change the functions when the extension catches up.
.PP
To provide an example, let's say the popular Foo::Bar::escape_html
function doesn't deal with Unicode data yet. The wrapper function
would convert the argument to raw \s-1UTF\-8\s0 and convert the result back to
Perl's internal representation like so:
.PP
.Vb 6
\&    sub my_escape_html ($) {
\&        my($what) = shift;
\&        return unless defined $what;
\&        Encode::decode_utf8(Foo::Bar::escape_html(
\&                                         Encode::encode_utf8($what)));
\&    }
.Ve
.PP
Sometimes, when the extension does not convert data but just stores
and retrieves them, you will be able to use the otherwise
dangerous \fIEncode::_utf8_on()\fR function. Let's say the popular
\&\f(CW\*(C`Foo::Bar\*(C'\fR extension, written in C, provides a \f(CW\*(C`param\*(C'\fR method that
lets you store and retrieve data according to these prototypes:
.PP
.Vb 2
\&    $self\->param($name, $value);            # set a scalar
\&    $value = $self\->param($name);           # retrieve a scalar
.Ve
.PP
If it does not yet provide support for any encoding, one could write a
derived class with such a \f(CW\*(C`param\*(C'\fR method:
.PP
.Vb 12
\&    sub param {
\&      my($self,$name,$value) = @_;
\&      utf8::upgrade($name);     # make sure it is UTF\-8 encoded
\&      if (defined $value) {
\&        utf8::upgrade($value);  # make sure it is UTF\-8 encoded
\&        return $self\->SUPER::param($name,$value);
\&      } else {
\&        my $ret = $self\->SUPER::param($name);
\&        Encode::_utf8_on($ret); # we know, it is UTF\-8 encoded
\&        return $ret;
\&      }
\&    }
.Ve
.PP
Some extensions provide filters on data entry/exit points, such as
DB_File::filter_store_key and family. Look out for such filters in
the documentation of your extensions, they can make the transition to
Unicode data much easier.
.SS "Speed"
.IX Subsection "Speed"
Some functions are slower when working on \s-1UTF\-8\s0 encoded strings than
on byte encoded strings.  All functions that need to hop over
characters such as \fIlength()\fR, \fIsubstr()\fR or \fIindex()\fR, or matching regular
expressions can work \fBmuch\fR faster when the underlying data are
byte-encoded.
.PP
In Perl 5.8.0 the slowness was often quite spectacular; in Perl 5.8.1
a caching scheme was introduced which will hopefully make the slowness
somewhat less spectacular, at least for some operations.  In general,
operations with \s-1UTF\-8\s0 encoded strings are still slower. As an example,
the Unicode properties (character classes) like \f(CW\*(C`\ep{Nd}\*(C'\fR are known to
be quite a bit slower (5\-20 times) than their simpler counterparts
like \f(CW\*(C`\ed\*(C'\fR (then again, there are hundreds of Unicode characters matching \f(CW\*(C`Nd\*(C'\fR
compared with the 10 \s-1ASCII\s0 characters matching \f(CW\*(C`d\*(C'\fR).
.SS "Problems on \s-1EBCDIC\s0 platforms"
.IX Subsection "Problems on EBCDIC platforms"
There are several known problems with Perl on \s-1EBCDIC\s0 platforms.  If you
want to use Perl there, send email to perlbug@perl.org.
.PP
In earlier versions, when byte and character data were concatenated,
the new string was sometimes created by
decoding the byte strings as \fI\s-1ISO\s0 8859\-1 (Latin\-1)\fR, even if the
old Unicode string used \s-1EBCDIC\s0.
.PP
If you find any of these, please report them as bugs.
.SS "Porting code from perl\-5.6.X"
.IX Subsection "Porting code from perl-5.6.X"
Perl 5.8 has a different Unicode model from 5.6. In 5.6 the programmer
was required to use the \f(CW\*(C`utf8\*(C'\fR pragma to declare that a given scope
expected to deal with Unicode data and had to make sure that only
Unicode data were reaching that scope. If you have code that is
working with 5.6, you will need some of the following adjustments to
your code. The examples are written such that the code will continue
to work under 5.6, so you should be safe to try them out.
.IP "\(bu" 3
A filehandle that should read or write \s-1UTF\-8\s0
.Sp
.Vb 3
\&  if ($] > 5.007) {
\&    binmode $fh, ":encoding(utf8)";
\&  }
.Ve
.IP "\(bu" 3
A scalar that is going to be passed to some extension
.Sp
Be it Compress::Zlib, Apache::Request or any extension that has no
mention of Unicode in the manpage, you need to make sure that the
\&\s-1UTF8\s0 flag is stripped off. Note that at the time of this writing
(October 2002) the mentioned modules are not UTF\-8\-aware. Please
check the documentation to verify if this is still true.
.Sp
.Vb 4
\&  if ($] > 5.007) {
\&    require Encode;
\&    $val = Encode::encode_utf8($val); # make octets
\&  }
.Ve
.IP "\(bu" 3
A scalar we got back from an extension
.Sp
If you believe the scalar comes back as \s-1UTF\-8\s0, you will most likely
want the \s-1UTF8\s0 flag restored:
.Sp
.Vb 4
\&  if ($] > 5.007) {
\&    require Encode;
\&    $val = Encode::decode_utf8($val);
\&  }
.Ve
.IP "\(bu" 3
Same thing, if you are really sure it is \s-1UTF\-8\s0
.Sp
.Vb 4
\&  if ($] > 5.007) {
\&    require Encode;
\&    Encode::_utf8_on($val);
\&  }
.Ve
.IP "\(bu" 3
A wrapper for fetchrow_array and fetchrow_hashref
.Sp
When the database contains only \s-1UTF\-8\s0, a wrapper function or method is
a convenient way to replace all your fetchrow_array and
fetchrow_hashref calls. A wrapper function will also make it easier to
adapt to future enhancements in your database driver. Note that at the
time of this writing (October 2002), the \s-1DBI\s0 has no standardized way
to deal with \s-1UTF\-8\s0 data. Please check the documentation to verify if
that is still true.
.Sp
.Vb 10
\&  sub fetchrow {
\&    # $what is one of fetchrow_{array,hashref}
\&    my($self, $sth, $what) = @_;
\&    if ($] < 5.007) {
\&      return $sth\->$what;
\&    } else {
\&      require Encode;
\&      if (wantarray) {
\&        my @arr = $sth\->$what;
\&        for (@arr) {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_);
\&        }
\&        return @arr;
\&      } else {
\&        my $ret = $sth\->$what;
\&        if (ref $ret) {
\&          for my $k (keys %$ret) {
\&            defined
\&            && /[^\e000\-\e177]/
\&            && Encode::_utf8_on($_) for $ret\->{$k};
\&          }
\&          return $ret;
\&        } else {
\&          defined && /[^\e000\-\e177]/ && Encode::_utf8_on($_) for $ret;
\&          return $ret;
\&        }
\&      }
\&    }
\&  }
.Ve
.IP "\(bu" 3
A large scalar that you know can only contain \s-1ASCII\s0
.Sp
Scalars that contain only \s-1ASCII\s0 and are marked as \s-1UTF\-8\s0 are sometimes
a drag to your program. If you recognize such a situation, just remove
the \s-1UTF8\s0 flag:
.Sp
.Vb 1
\&  utf8::downgrade($val) if $] > 5.007;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunitut, perluniintro, perluniprops, Encode, open, utf8, bytes,
perlretut, \*(L"${^UNICODE}\*(R" in perlvar
<http://www.unicode.org/reports/tr44>).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlunicode5.18.1                            0100644 0001750 0001750 00000256744 12566207447 023614  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUNICODE 1"
.TH PERLUNICODE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlunicode \- Unicode support in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Important Caveats"
.IX Subsection "Important Caveats"
Unicode support is an extensive requirement. While Perl does not
implement the Unicode standard or the accompanying technical reports
from cover to cover, Perl does support many Unicode features.
.PP
People who want to learn to use Unicode in Perl, should probably read
the Perl Unicode tutorial, perlunitut and
perluniintro, before reading
this reference document.
.PP
Also, the use of Unicode may present security issues that aren't obvious.
Read Unicode Security Considerations <http://www.unicode.org/reports/tr36>.
.ie n .IP "Safest if you ""use feature 'unicode_strings'""" 4
.el .IP "Safest if you ``use feature 'unicode_strings'''" 4
.IX Item "Safest if you use feature 'unicode_strings'"
In order to preserve backward compatibility, Perl does not turn
on full internal Unicode support unless the pragma
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is specified.  (This is automatically
selected if you use \f(CW\*(C`use 5.012\*(C'\fR or higher.)  Failure to do this can
trigger unexpected surprises.  See \*(L"The \*(R"Unicode Bug"" below.
.Sp
This pragma doesn't affect I/O.  Nor does it change the internal
representation of strings, only their interpretation.  There are still
several places where Unicode isn't fully supported, such as in
filenames.
.IP "Input and Output Layers" 4
.IX Item "Input and Output Layers"
Perl knows when a filehandle uses Perl's internal Unicode encodings
(\s-1UTF\-8,\s0 or UTF-EBCDIC if in \s-1EBCDIC\s0) if the filehandle is opened with
the \*(L":encoding(utf8)\*(R" layer.  Other encodings can be converted to Perl's
encoding on input or from Perl's encoding on output by use of the
\&\*(L":encoding(...)\*(R"  layer.  See open.
.Sp
To indicate that Perl source itself is in \s-1UTF\-8,\s0 use \f(CW\*(C`use utf8;\*(C'\fR.
.ie n .IP """use utf8"" still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.el .IP "\f(CWuse utf8\fR still needed to enable \s-1UTF\-8/UTF\-EBCDIC\s0 in scripts" 4
.IX Item "use utf8 still needed to enable UTF-8/UTF-EBCDIC in scripts"
As a compatibility measure, the \f(CW\*(C`use utf8\*(C'\fR pragma must be explicitly
included to enable recognition of \s-1UTF\-8\s0 in the Perl scripts themselves
(in string or regular expression literals, or in identifier names) on
ASCII-based machines or to recognize UTF-EBCDIC on EBCDIC-based
machines.  \fBThese are the only times when an explicit \f(CB\*(C`use utf8\*(C'\fB
is needed.\fR  See utf8.
.IP "BOM-marked scripts and \s-1UTF\-16\s0 scripts autodetected" 4
.IX Item "BOM-marked scripts and UTF-16 scripts autodetected"
If a Perl script begins marked with the Unicode \s-1BOM \s0(\s-1UTF\-16LE, UTF16\-BE,\s0
or \s-1UTF\-8\s0), or if the script looks like non-BOM-marked \s-1UTF\-16\s0 of either
endianness, Perl will correctly read in the script as Unicode.
(BOMless \s-1UTF\-8\s0 cannot be effectively recognized or differentiated from
\&\s-1ISO 8859\-1\s0 or other eight-bit encodings.)
.ie n .IP """use encoding"" needed to upgrade non\-Latin\-1 byte strings" 4
.el .IP "\f(CWuse encoding\fR needed to upgrade non\-Latin\-1 byte strings" 4
.IX Item "use encoding needed to upgrade non-Latin-1 byte strings"
By default, there is a fundamental asymmetry in Perl's Unicode model:
implicit upgrading from byte strings to Unicode strings assumes that
they were encoded in \fI\s-1ISO 8859\-1 \s0(Latin\-1)\fR, but Unicode strings are
downgraded with \s-1UTF\-8\s0 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin\-1.
.Sp
See \*(L"Byte and Character Semantics\*(R" for more details.
.SS "Byte and Character Semantics"
.IX Subsection "Byte and Character Semantics"
Perl uses logically-wide characters to represent strings internally.
.PP
Starting in Perl 5.14, Perl-level operations work with
characters rather than bytes within the scope of a
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (or equivalently
\&\f(CW\*(C`use 5.012\*(C'\fR or higher).  (This is not true if bytes have been
explicitly requested by \f(CW\*(C`use bytes\*(C'\fR, nor necessarily true
for interactions with the platform's operating system.)
.PP
For earlier Perls, and when \f(CW\*(C`unicode_strings\*(C'\fR is not in effect, Perl
provides a fairly safe environment that can handle both types of
semantics in programs.  For operations where Perl can unambiguously
decide that the input data are characters, Perl switches to character
semantics.  For operations where this determination cannot be made
without additional information from the user, Perl decides in favor of
compatibility and chooses to use byte semantics.
.PP
When \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in
effect, Perl uses the semantics associated with the current locale.
(\f(CW\*(C`use locale\*(C'\fR overrides \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in the same scope;
while \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR effectively also selects
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR in its scope; see perllocale.)
Otherwise, Perl uses the platform's native
byte semantics for characters whose code points are less than 256, and
Unicode semantics for those greater than 255.  That means that non-ASCII
characters are undefined except for their
ordinal numbers.  This means that none have case (upper and lower), nor are any
a member of character classes, like \f(CW\*(C`[:alpha:]\*(C'\fR or \f(CW\*(C`\ew\*(C'\fR.  (But all do belong
to the \f(CW\*(C`\eW\*(C'\fR class or the Perl regular expression extension \f(CW\*(C`[:^alpha:]\*(C'\fR.)
.PP
This behavior preserves compatibility with earlier versions of Perl,
which allowed byte semantics in Perl operations only if
none of the program's inputs were marked as being a source of Unicode
character data.  Such data may come from filehandles, from calls to
external programs, from information provided by the system (such as \f(CW%ENV\fR),
or from literals and constants in the source text.
.PP
The \f(CW\*(C`utf8\*(C'\fR pragma is primarily a compatibility device that enables
recognition of \s-1UTF\-\s0(8|EBCDIC) in literals encountered by the parser.
Note that this pragma is only required while Perl defaults to byte
semantics; when character semantics become the default, this pragma
may become a no-op.  See utf8.
.PP
If strings operating under byte semantics and strings with Unicode
character data are concatenated, the new string will have
character semantics.  This can cause surprises: See \*(L"\s-1BUGS\*(R"\s0, below.
You can choose to be warned when this happens.  See encoding::warnings.
.PP
Under character semantics, many operations that formerly operated on
bytes now operate on characters. A character in Perl is
logically just a number ranging from 0 to 2**31 or so. Larger
characters may encode into longer sequences of bytes internally, but
this internal detail is mostly hidden for Perl code.
See perluniintro for more.
.SS "Effects of Character Semantics"
.IX Subsection "Effects of Character Semantics"
Character semantics have the following effects:
.IP "\(bu" 4
Strings\*(--including hash keys\*(--and regular expression patterns may
contain characters that have an ordinal value larger than 255.
.Sp
If you use a Unicode editor to edit your program, Unicode characters may
occur directly within the literal strings in \s-1UTF\-8\s0 encoding, or \s-1UTF\-16.
\&\s0(The former requires a \s-1BOM\s0 or \f(CW\*(C`use utf8\*(C'\fR, the latter requires a \s-1BOM.\s0)
.Sp
Unicode characters can also be added to a string by using the \f(CW\*(C`\eN{U+...}\*(C'\fR
notation.  The Unicode code for the desired character, in hexadecimal,
should be placed in the braces, after the \f(CW\*(C`U\*(C'\fR. For instance, a smiley face is
\&\f(CW\*(C`\eN{U+263A}\*(C'\fR.
.Sp
Alternatively, you can use the \f(CW\*(C`\ex{...}\*(C'\fR notation for characters 0x100 and
above.  For characters below 0x100 you may get byte semantics instead of
character semantics;  see \*(L"The \*(R"Unicode Bug"".  On \s-1EBCDIC\s0 machines there is
the additional problem that the value for such characters gives the \s-1EBCDIC\s0
character rather than the Unicode one, thus it is more portable to use
\&\f(CW\*(C`\eN{U+...}\*(C'\fR instead.
.Sp
Additionally, you can use the \f(CW\*(C`\eN{...}\*(C'\fR notation and put the official
Unicode character name within the braces, such as
\&\f(CW\*(C`\eN{WHITE SMILING FACE}\*(C'\fR.  This automatically loads the charnames
module with the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR options.  If you prefer different
options for this module, you can instead, before the \f(CW\*(C`\eN{...}\*(C'\fR,
explicitly load it with your desired options; for example,
.Sp
.Vb 1
\&   use charnames \*(Aq:loose\*(Aq;
.Ve
.IP "\(bu" 4
If an appropriate encoding is specified, identifiers within the
Perl script may contain Unicode alphanumeric characters, including
ideographs.  Perl does not currently attempt to canonicalize variable
names.
.IP "\(bu" 4
Regular expressions match characters instead of bytes.  \*(L".\*(R" matches
a character instead of a byte.
.IP "\(bu" 4
Bracketed character classes in regular expressions match characters instead of
bytes and match against the character properties specified in the
Unicode properties database.  \f(CW\*(C`\ew\*(C'\fR can be used to match a Japanese
ideograph, for instance.
.IP "\(bu" 4
Named Unicode properties, scripts, and block ranges may be used (like bracketed
character classes) by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct and
the \f(CW\*(C`\eP{}\*(C'\fR negation, \*(L"doesn't match property\*(R".
See \*(L"Unicode Character Properties\*(R" for more details.
.Sp
You can define your own character properties and use them
in the regular expression with the \f(CW\*(C`\ep{}\*(C'\fR or \f(CW\*(C`\eP{}\*(C'\fR construct.
See \*(L"User-Defined Character Properties\*(R" for more details.
.IP "\(bu" 4
The special pattern \f(CW\*(C`\eX\*(C'\fR matches a logical character, an \*(L"extended grapheme
cluster\*(R" in Standardese.  In Unicode what appears to the user to be a single
character, for example an accented \f(CW\*(C`G\*(C'\fR, may in fact be composed of a sequence
of characters, in this case a \f(CW\*(C`G\*(C'\fR followed by an accent character.  \f(CW\*(C`\eX\*(C'\fR
will match the entire sequence.
.IP "\(bu" 4
The \f(CW\*(C`tr///\*(C'\fR operator translates characters instead of bytes.  Note
that the \f(CW\*(C`tr///CU\*(C'\fR functionality has been removed.  For similar
functionality see pack('U0', ...) and pack('C0', ...).
.IP "\(bu" 4
Case translation operators use the Unicode case translation tables
when character input is provided.  Note that \f(CW\*(C`uc()\*(C'\fR, or \f(CW\*(C`\eU\*(C'\fR in
interpolated strings, translates to uppercase, while \f(CW\*(C`ucfirst\*(C'\fR,
or \f(CW\*(C`\eu\*(C'\fR in interpolated strings, translates to titlecase in languages
that make the distinction (which is equivalent to uppercase in languages
without the distinction).
.IP "\(bu" 4
Most operators that deal with positions or lengths in a string will
automatically switch to using character positions, including
\&\f(CW\*(C`chop()\*(C'\fR, \f(CW\*(C`chomp()\*(C'\fR, \f(CW\*(C`substr()\*(C'\fR, \f(CW\*(C`pos()\*(C'\fR, \f(CW\*(C`index()\*(C'\fR, \f(CW\*(C`rindex()\*(C'\fR,
\&\f(CW\*(C`sprintf()\*(C'\fR, \f(CW\*(C`write()\*(C'\fR, and \f(CW\*(C`length()\*(C'\fR.  An operator that
specifically does not switch is \f(CW\*(C`vec()\*(C'\fR.  Operators that really don't
care include operators that treat strings as a bucket of bits such as
\&\f(CW\*(C`sort()\*(C'\fR, and operators dealing with filenames.
.IP "\(bu" 4
The \f(CW\*(C`pack()\*(C'\fR/\f(CW\*(C`unpack()\*(C'\fR letter \f(CW\*(C`C\*(C'\fR does \fInot\fR change, since it is often
used for byte-oriented formats.  Again, think \f(CW\*(C`char\*(C'\fR in the C language.
.Sp
There is a new \f(CW\*(C`U\*(C'\fR specifier that converts between Unicode characters
and code points. There is also a \f(CW\*(C`W\*(C'\fR specifier that is the equivalent of
\&\f(CW\*(C`chr\*(C'\fR/\f(CW\*(C`ord\*(C'\fR and properly handles character values even if they are above 255.
.IP "\(bu" 4
The \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR functions work on characters, similar to
\&\f(CW\*(C`pack("W")\*(C'\fR and \f(CW\*(C`unpack("W")\*(C'\fR, \fInot\fR \f(CW\*(C`pack("C")\*(C'\fR and
\&\f(CW\*(C`unpack("C")\*(C'\fR.  \f(CW\*(C`pack("C")\*(C'\fR and \f(CW\*(C`unpack("C")\*(C'\fR are methods for
emulating byte-oriented \f(CW\*(C`chr()\*(C'\fR and \f(CW\*(C`ord()\*(C'\fR on Unicode strings.
While these methods reveal the internal encoding of Unicode strings,
that is not something one normally needs to care about at all.
.IP "\(bu" 4
The bit string operators, \f(CW\*(C`& | ^ ~\*(C'\fR, can operate on character data.
However, for backward compatibility, such as when using bit string
operations when characters are all less than 256 in ordinal value, one
should not use \f(CW\*(C`~\*(C'\fR (the bit complement) with characters of both
values less than 256 and values greater than 256.  Most importantly,
DeMorgan's laws (\f(CW\*(C`~($x|$y) eq ~$x&~$y\*(C'\fR and \f(CW\*(C`~($x&$y) eq ~$x|~$y\*(C'\fR)
will not hold.  The reason for this mathematical \fIfaux pas\fR is that
the complement cannot return \fBboth\fR the 8\-bit (byte-wide) bit
complement \fBand\fR the full character-wide bit complement.
.IP "\(bu" 4
There is a \s-1CPAN\s0 module, Unicode::Casing, which allows you to define
your own mappings to be used in \f(CW\*(C`lc()\*(C'\fR, \f(CW\*(C`lcfirst()\*(C'\fR, \f(CW\*(C`uc()\*(C'\fR,
\&\f(CW\*(C`ucfirst()\*(C'\fR, and \f(CW\*(C`fc\*(C'\fR (or their double-quoted string inlined
versions such as \f(CW\*(C`\eU\*(C'\fR).
(Prior to Perl 5.16, this functionality was partially provided
in the Perl core, but suffered from a number of insurmountable
drawbacks, so the \s-1CPAN\s0 module was written instead.)
.IP "\(bu" 4
And finally, \f(CW\*(C`scalar reverse()\*(C'\fR reverses by character rather than by byte.
.SS "Unicode Character Properties"
.IX Subsection "Unicode Character Properties"
(The only time that Perl considers a sequence of individual code
points as a single logical character is in the \f(CW\*(C`\eX\*(C'\fR construct, already
mentioned above.   Therefore \*(L"character\*(R" in this discussion means a single
Unicode code point.)
.PP
Very nearly all Unicode character properties are accessible through
regular expressions by using the \f(CW\*(C`\ep{}\*(C'\fR \*(L"matches property\*(R" construct
and the \f(CW\*(C`\eP{}\*(C'\fR \*(L"doesn't match property\*(R" for its negation.
.PP
For instance, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character with the Unicode
\&\*(L"Uppercase\*(R" property, while \f(CW\*(C`\ep{L}\*(C'\fR matches any character with a
General_Category of \*(L"L\*(R" (letter) property.  Brackets are not
required for single letter property names, so \f(CW\*(C`\ep{L}\*(C'\fR is equivalent to \f(CW\*(C`\epL\*(C'\fR.
.PP
More formally, \f(CW\*(C`\ep{Uppercase}\*(C'\fR matches any single character whose Unicode
Uppercase property value is True, and \f(CW\*(C`\eP{Uppercase}\*(C'\fR matches any character
whose Uppercase property value is False, and they could have been written as
\&\f(CW\*(C`\ep{Uppercase=True}\*(C'\fR and \f(CW\*(C`\ep{Uppercase=False}\*(C'\fR, respectively.
.PP
This formality is needed when properties are not binary; that is, if they can
take on more values than just True and False.  For example, the Bidi_Class (see
\&\*(L"Bidirectional Character Types\*(R" below), can take on several different
values, such as Left, Right, Whitespace, and others.  To match these, one needs
to specify both the property name (Bidi_Class), \s-1AND\s0 the value being
matched against
(Left, Right, etc.).  This is done, as in the examples above, by having the
two components separated by an equal sign (or interchangeably, a colon), like
\&\f(CW\*(C`\ep{Bidi_Class: Left}\*(C'\fR.
.PP
All Unicode-defined character properties may be written in these compound forms
of \f(CW\*(C`\ep{property=value}\*(C'\fR or \f(CW\*(C`\ep{property:value}\*(C'\fR, but Perl provides some
additional properties that are written only in the single form, as well as
single-form short-cuts for all binary properties and certain others described
below, in which you may omit the property name and the equals or colon
separator.
.PP
Most Unicode character properties have at least two synonyms (or aliases if you
prefer): a short one that is easier to type and a longer one that is more
descriptive and hence easier to understand.  Thus the \*(L"L\*(R" and \*(L"Letter\*(R" properties
above are equivalent and can be used interchangeably.  Likewise,
\&\*(L"Upper\*(R" is a synonym for \*(L"Uppercase\*(R", and we could have written
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR equivalently as \f(CW\*(C`\ep{Upper}\*(C'\fR.  Also, there are typically
various synonyms for the values the property can be.   For binary properties,
\&\*(L"True\*(R" has 3 synonyms: \*(L"T\*(R", \*(L"Yes\*(R", and \*(L"Y\*(R"; and \*(L"False has correspondingly \*(R"F\*(L",
\&\*(R"No\*(L", and \*(R"N\*(L".  But be careful.  A short form of a value for one property may
not mean the same thing as the same short form for another.  Thus, for the
General_Category property, \*(R"L\*(L" means \*(R"Letter\*(L", but for the Bidi_Class property,
\&\*(R"L\*(L" means \*(R"Left".  A complete list of properties and synonyms is in
perluniprops.
.PP
Upper/lower case differences in property names and values are irrelevant;
thus \f(CW\*(C`\ep{Upper}\*(C'\fR means the same thing as \f(CW\*(C`\ep{upper}\*(C'\fR or even \f(CW\*(C`\ep{UpPeR}\*(C'\fR.
Similarly, you can add or subtract underscores anywhere in the middle of a
word, so that these are also equivalent to \f(CW\*(C`\ep{U_p_p_e_r}\*(C'\fR.  And white space
is irrelevant adjacent to non-word characters, such as the braces and the equals
or colon separators, so \f(CW\*(C`\ep{   Upper  }\*(C'\fR and \f(CW\*(C`\ep{ Upper_case : Y }\*(C'\fR are
equivalent to these as well.  In fact, white space and even
hyphens can usually be added or deleted anywhere.  So even \f(CW\*(C`\ep{ Up\-per case = Yes}\*(C'\fR is
equivalent.  All this is called \*(L"loose-matching\*(R" by Unicode.  The few places
where stricter matching is used is in the middle of numbers, and in the Perl
extension properties that begin or end with an underscore.  Stricter matching
cares about white space (except adjacent to non-word characters),
hyphens, and non-interior underscores.
.PP
You can also use negation in both \f(CW\*(C`\ep{}\*(C'\fR and \f(CW\*(C`\eP{}\*(C'\fR by introducing a caret
(^) between the first brace and the property name: \f(CW\*(C`\ep{^Tamil}\*(C'\fR is
equal to \f(CW\*(C`\eP{Tamil}\*(C'\fR.
.PP
Almost all properties are immune to case-insensitive matching.  That is,
adding a \f(CW\*(C`/i\*(C'\fR regular expression modifier does not change what they
match.  There are two sets that are affected.
The first set is
\&\f(CW\*(C`Uppercase_Letter\*(C'\fR,
\&\f(CW\*(C`Lowercase_Letter\*(C'\fR,
and \f(CW\*(C`Titlecase_Letter\*(C'\fR,
all of which match \f(CW\*(C`Cased_Letter\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
And the second set is
\&\f(CW\*(C`Uppercase\*(C'\fR,
\&\f(CW\*(C`Lowercase\*(C'\fR,
and \f(CW\*(C`Titlecase\*(C'\fR,
all of which match \f(CW\*(C`Cased\*(C'\fR under \f(CW\*(C`/i\*(C'\fR matching.
This set also includes its subsets \f(CW\*(C`PosixUpper\*(C'\fR and \f(CW\*(C`PosixLower\*(C'\fR both
of which under \f(CW\*(C`/i\*(C'\fR matching match \f(CW\*(C`PosixAlpha\*(C'\fR.
(The difference between these sets is that some things, such as Roman
numerals, come in both upper and lower case so they are \f(CW\*(C`Cased\*(C'\fR, but aren't considered
letters, so they aren't \f(CW\*(C`Cased_Letter\*(C'\fRs.)
.PP
The result is undefined if you try to match a non-Unicode code point
(that is, one above 0x10FFFF) against a Unicode property.  Currently, a
warning is raised, and the match will fail.  In some cases, this is
counterintuitive, as both these fail:
.PP
.Vb 2
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=True}      # Fails.
\& chr(0x110000) =~ \ep{ASCII_Hex_Digit=False}     # Fails!
.Ve
.PP
\fI\f(BIGeneral_Category\fI\fR
.IX Subsection "General_Category"
.PP
Every Unicode character is assigned a general category, which is the \*(L"most
usual categorization of a character\*(R" (from
<http://www.unicode.org/reports/tr44>).
.PP
The compound way of writing these is like \f(CW\*(C`\ep{General_Category=Number}\*(C'\fR
(short, \f(CW\*(C`\ep{gc:n}\*(C'\fR).  But Perl furnishes shortcuts in which everything up
through the equal or colon separator is omitted.  So you can instead just write
\&\f(CW\*(C`\epN\*(C'\fR.
.PP
Here are the short and long forms of the General Category properties:
.PP
.Vb 1
\&    Short       Long
\&
\&    L           Letter
\&    LC, L&      Cased_Letter (that is: [\ep{Ll}\ep{Lu}\ep{Lt}])
\&    Lu          Uppercase_Letter
\&    Ll          Lowercase_Letter
\&    Lt          Titlecase_Letter
\&    Lm          Modifier_Letter
\&    Lo          Other_Letter
\&
\&    M           Mark
\&    Mn          Nonspacing_Mark
\&    Mc          Spacing_Mark
\&    Me          Enclosing_Mark
\&
\&    N           Number
\&    Nd          Decimal_Number (also Digit)
\&    Nl          Letter_Number
\&    No          Other_Number
\&
\&    P           Punctuation (also Punct)
\&    Pc          Connector_Punctuation
\&    Pd          Dash_Punctuation
\&    Ps          Open_Punctuation
\&    Pe          Close_Punctuation
\&    Pi          Initial_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Pf          Final_Punctuation
\&                (may behave like Ps or Pe depending on usage)
\&    Po          Other_Punctuation
\&
\&    S           Symbol
\&    Sm          Math_Symbol
\&    Sc          Currency_Symbol
\&    Sk          Modifier_Symbol
\&    So          Other_Symbol
\&
\&    Z           Separator
\&    Zs          Space_Separator
\&    Zl          Line_Separator
\&    Zp          Paragraph_Separator
\&
\&    C           Other
\&    Cc          Control (also Cntrl)
\&    Cf          Format
\&    Cs          Surrogate
\&    Co          Private_Use
\&    Cn          Unassigned
.Ve
.PP
Single-letter properties match all characters in any of the
two-letter sub-properties starting with the same letter.
\&\f(CW\*(C`LC\*(C'\fR and \f(CW\*(C`L&\*(C'\fR are special: both are aliases for the set consisting of everything matched by \f(CW\*(C`Ll\*(C'\fR, \f(CW\*(C`Lu\*(C'\fR, and \f(CW\*(C`Lt\*(C'\fR.
.PP
\fI\f(BIBidirectional Character Types\fI\fR
.IX Subsection "Bidirectional Character Types"
.PP
Because scripts differ in their directionality (Hebrew and Arabic are
written right to left, for example) Unicode supplies these properties in
the Bidi_Class class:
.PP
.Vb 1
\&    Property    Meaning
\&
\&    L           Left\-to\-Right
\&    LRE         Left\-to\-Right Embedding
\&    LRO         Left\-to\-Right Override
\&    R           Right\-to\-Left
\&    AL          Arabic Letter
\&    RLE         Right\-to\-Left Embedding
\&    RLO         Right\-to\-Left Override
\&    PDF         Pop Directional Format
\&    EN          European Number
\&    ES          European Separator
\&    ET          European Terminator
\&    AN          Arabic Number
\&    CS          Common Separator
\&    NSM         Non\-Spacing Mark
\&    BN          Boundary Neutral
\&    B           Paragraph Separator
\&    S           Segment Separator
\&    WS          Whitespace
\&    ON          Other Neutrals
.Ve
.PP
This property is always written in the compound form.
For example, \f(CW\*(C`\ep{Bidi_Class:R}\*(C'\fR matches characters that are normally
written right to left.
.PP
\fI\f(BIScripts\fI\fR
.IX Subsection "Scripts"
.PP
The world's languages are written in many different scripts.  This sentence
(unless you're reading it in translation) is written in Latin, while Russian is
written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in
Hiragana or Katakana.  There are many more.
.PP
The Unicode Script and Script_Extensions properties give what script a
given character is in.  Either property can be specified with the
compound form like
\&\f(CW\*(C`\ep{Script=Hebrew}\*(C'\fR (short: \f(CW\*(C`\ep{sc=hebr}\*(C'\fR), or
\&\f(CW\*(C`\ep{Script_Extensions=Javanese}\*(C'\fR (short: \f(CW\*(C`\ep{scx=java}\*(C'\fR).
In addition, Perl furnishes shortcuts for all
\&\f(CW\*(C`Script\*(C'\fR property names.  You can omit everything up through the equals
(or colon), and simply write \f(CW\*(C`\ep{Latin}\*(C'\fR or \f(CW\*(C`\eP{Cyrillic}\*(C'\fR.
(This is not true for \f(CW\*(C`Script_Extensions\*(C'\fR, which is required to be
written in the compound form.)
.PP
The difference between these two properties involves characters that are
used in multiple scripts.  For example the digits '0' through '9' are
used in many parts of the world.  These are placed in a script named
\&\f(CW\*(C`Common\*(C'\fR.  Other characters are used in just a few scripts.  For
example, the \*(L"KATAKANA-HIRAGANA \s-1DOUBLE HYPHEN\*(R"\s0 is used in both Japanese
scripts, Katakana and Hiragana, but nowhere else.  The \f(CW\*(C`Script\*(C'\fR
property places all characters that are used in multiple scripts in the
\&\f(CW\*(C`Common\*(C'\fR script, while the \f(CW\*(C`Script_Extensions\*(C'\fR property places those
that are used in only a few scripts into each of those scripts; while
still using \f(CW\*(C`Common\*(C'\fR for those used in many scripts.  Thus both these
match:
.PP
.Vb 2
\& "0" =~ /\ep{sc=Common}/     # Matches
\& "0" =~ /\ep{scx=Common}/    # Matches
.Ve
.PP
and only the first of these match:
.PP
.Vb 2
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Common}  # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Common} # No match
.Ve
.PP
And only the last two of these match:
.PP
.Vb 4
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Hiragana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{sc=Katakana}  # No match
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Hiragana} # Matches
\& "\eN{KATAKANA\-HIRAGANA DOUBLE HYPHEN}" =~ /\ep{scx=Katakana} # Matches
.Ve
.PP
\&\f(CW\*(C`Script_Extensions\*(C'\fR is thus an improved \f(CW\*(C`Script\*(C'\fR, in which there are
fewer characters in the \f(CW\*(C`Common\*(C'\fR script, and correspondingly more in
other scripts.  It is new in Unicode version 6.0, and its data are likely
to change significantly in later releases, as things get sorted out.
.PP
(Actually, besides \f(CW\*(C`Common\*(C'\fR, the \f(CW\*(C`Inherited\*(C'\fR script, contains
characters that are used in multiple scripts.  These are modifier
characters which modify other characters, and inherit the script value
of the controlling character.  Some of these are used in many scripts,
and so go into \f(CW\*(C`Inherited\*(C'\fR in both \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extensions\*(C'\fR.
Others are used in just a few scripts, so are in \f(CW\*(C`Inherited\*(C'\fR in
\&\f(CW\*(C`Script\*(C'\fR, but not in \f(CW\*(C`Script_Extensions\*(C'\fR.)
.PP
It is worth stressing that there are several different sets of digits in
Unicode that are equivalent to 0\-9 and are matchable by \f(CW\*(C`\ed\*(C'\fR in a
regular expression.  If they are used in a single language only, they
are in that language's \f(CW\*(C`Script\*(C'\fR and \f(CW\*(C`Script_Extension\*(C'\fR.  If they are
used in more than one script, they will be in \f(CW\*(C`sc=Common\*(C'\fR, but only
if they are used in many scripts should they be in \f(CW\*(C`scx=Common\*(C'\fR.
.PP
A complete list of scripts and their shortcuts is in perluniprops.
.PP
\fI\f(BIUse of \*(L"Is\*(R" Prefix\fI\fR
.IX Subsection "Use of Is Prefix"
.PP
For backward compatibility (with Perl 5.6), all properties mentioned
so far may have \f(CW\*(C`Is\*(C'\fR or \f(CW\*(C`Is_\*(C'\fR prepended to their name, so \f(CW\*(C`\eP{Is_Lu}\*(C'\fR, for
example, is equal to \f(CW\*(C`\eP{Lu}\*(C'\fR, and \f(CW\*(C`\ep{IsScript:Arabic}\*(C'\fR is equal to
\&\f(CW\*(C`\ep{Arabic}\*(C'\fR.
.PP
\fI\f(BIBlocks\fI\fR
.IX Subsection "Blocks"
.PP
In addition to \fBscripts\fR, Unicode also defines \fBblocks\fR of
characters.  The difference between scripts and blocks is that the
concept of scripts is closer to natural languages, while the concept
of blocks is more of an artificial grouping based on groups of Unicode
characters with consecutive ordinal values. For example, the \*(L"Basic Latin\*(R"
block is all characters whose ordinals are between 0 and 127, inclusive; in
other words, the \s-1ASCII\s0 characters.  The \*(L"Latin\*(R" script contains some letters
from this as well as several other blocks, like \*(L"Latin\-1 Supplement\*(R",
\&\*(L"Latin Extended-A\*(R", etc., but it does not contain all the characters from
those blocks. It does not, for example, contain the digits 0\-9, because
those digits are shared across many scripts, and hence are in the
\&\f(CW\*(C`Common\*(C'\fR script.
.PP
For more about scripts versus blocks, see UAX#24 \*(L"Unicode Script Property\*(R":
<http://www.unicode.org/reports/tr24>
.PP
The \f(CW\*(C`Script\*(C'\fR or \f(CW\*(C`Script_Extensions\*(C'\fR properties are likely to be the
ones you want to use when processing
natural language; the Block property may occasionally be useful in working
with the nuts and bolts of Unicode.
.PP
Block names are matched in the compound form, like \f(CW\*(C`\ep{Block: Arrows}\*(C'\fR or
\&\f(CW\*(C`\ep{Blk=Hebrew}\*(C'\fR.  Unlike most other properties, only a few block names have a
Unicode-defined short name.  But Perl does provide a (slight) shortcut:  You
can say, for example \f(CW\*(C`\ep{In_Arrows}\*(C'\fR or \f(CW\*(C`\ep{In_Hebrew}\*(C'\fR.  For backwards
compatibility, the \f(CW\*(C`In\*(C'\fR prefix may be omitted if there is no naming conflict
with a script or any other property, and you can even use an \f(CW\*(C`Is\*(C'\fR prefix
instead in those cases.  But it is not a good idea to do this, for a couple
reasons:
.IP "1." 4
It is confusing.  There are many naming conflicts, and you may forget some.
For example, \f(CW\*(C`\ep{Hebrew}\*(C'\fR means the \fIscript\fR Hebrew, and \s-1NOT\s0 the \fIblock\fR
Hebrew.  But would you remember that 6 months from now?
.IP "2." 4
It is unstable.  A new version of Unicode may pre-empt the current meaning by
creating a property with the same name.  There was a time in very early Unicode
releases when \f(CW\*(C`\ep{Hebrew}\*(C'\fR would have matched the \fIblock\fR Hebrew; now it
doesn't.
.PP
Some people prefer to always use \f(CW\*(C`\ep{Block: foo}\*(C'\fR and \f(CW\*(C`\ep{Script: bar}\*(C'\fR
instead of the shortcuts, whether for clarity, because they can't remember the
difference between 'In' and 'Is' anyway, or they aren't confident that those who
eventually will read their code will know that difference.
.PP
A complete list of blocks and their shortcuts is in perluniprops.
.PP
\fI\f(BIOther Properties\fI\fR
.IX Subsection "Other Properties"
.PP
There are many more properties than the very basic ones described here.
A complete list is in perluniprops.
.PP
Unicode defines all its properties in the compound form, so all single-form
properties are Perl extensions.  Most of these are just synonyms for the
Unicode ones, but some are genuine extensions, including several that are in
the compound form.  And quite a few of these are actually recommended by Unicode
(in <http://www.unicode.org/reports/tr18>).
.PP
This section gives some details on all extensions that aren't just
synonyms for compound-form Unicode properties
(for those properties, you'll have to refer to the
Unicode Standard <http://www.unicode.org/reports/tr44>.
.ie n .IP "\fB\fB""\ep{All}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{All}\fB\fR" 4
.IX Item "p{All}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{Any}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{Alnum}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Alnum}\fB\fR" 4
.IX Item "p{Alnum}"
This matches any \f(CW\*(C`\ep{Alphabetic}\*(C'\fR or \f(CW\*(C`\ep{Decimal_Number}\*(C'\fR character.
.ie n .IP "\fB\fB""\ep{Any}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Any}\fB\fR" 4
.IX Item "p{Any}"
This matches any of the 1_114_112 Unicode code points.  It is a synonym for
\&\f(CW\*(C`\ep{All}\*(C'\fR.
.ie n .IP "\fB\fB""\ep{ASCII}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{ASCII}\fB\fR" 4
.IX Item "p{ASCII}"
This matches any of the 128 characters in the US-ASCII character set,
which is a subset of Unicode.
.ie n .IP "\fB\fB""\ep{Assigned}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Assigned}\fB\fR" 4
.IX Item "p{Assigned}"
This matches any assigned code point; that is, any code point whose general
category is not Unassigned (or equivalently, not Cn).
.ie n .IP "\fB\fB""\ep{Blank}""\fB\fR" 4
.el .IP "\fB\f(CB\ep{Blank}\fB\fR" 4
.IX Item "p{Blank}"
This is the same as \f(CW\*(C`\eh\*(C'\fR and \f(CW\*(C`\ep{HorizSpace}\*(C'\fR:  A character that changes the
spacing horizontally.
.ie n .IP "\fB\fB""\ep{Decomposition_Type: Non_Canonical}""\fB\fR    (Short: ""\ep{Dt=NonCanon}"")" 4
.el .IP "\fB\f(CB\ep{Decomposition_Type: Non_Canonical}\fB\fR    (Short: \f(CW\ep{Dt=NonCanon}\fR)" 4
.IX Item "p{Decomposition_Type: Non_Canonical} (Short: p{Dt=NonCanon})"
Matches a character that has a non-canonical decomposition.
.Sp
To understand the use of this rarely used property=value combination, it is
necessary to know some basics about decomposition.
Consider a character, say H.  It could appear with various marks around it,
such as an acute accent, or a circumflex, or various hooks, circles, arrows,
\&\fIetc.\fR, above, below, to one side or the other, etc.  There are many
possibilities among the world's languages.  The number of combinations is
astronomical, and if there were a character for each combination, it would
soon exhaust Unicode's more than a million possible characters.  So Unicode
took a different approach: there is a character for the base H, and a
character for each of the possible marks, and these can be variously combined
to get a final logical character.  So a logical character\*(--what appears to be a
single character\*(--can be a sequence of more than one individual characters.
This is called an \*(L"extended grapheme cluster\*(R";  Perl furnishes the \f(CW\*(C`\eX\*(C'\fR
regular expression construct to match such sequences.
.Sp
But Unicode's intent is to unify the existing character set standards and
practices, and several pre-existing standards have single characters that
mean the same thing as some of these combinations.  An example is \s-1ISO\-8859\-1,\s0
which has quite a few of these in the Latin\-1 range, an example being \*(L"\s-1LATIN
CAPITAL LETTER E WITH ACUTE\*(R". \s0 Because this character was in this pre-existing
standard, Unicode added it to its repertoire.  But this character is considered
by Unicode to be equivalent to the sequence consisting of the character
\&\*(L"\s-1LATIN CAPITAL LETTER E\*(R"\s0 followed by the character \*(L"\s-1COMBINING ACUTE ACCENT\*(R".\s0
.Sp
\&\*(L"\s-1LATIN CAPITAL LETTER E WITH ACUTE\*(R"\s0 is called a \*(L"pre-composed\*(R" character, and
its equivalence with the sequence is called canonical equivalence.  All
pre-composed characters are said to have a decomposi