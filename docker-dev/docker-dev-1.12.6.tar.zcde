name, $ast := .}}{{$filename}}:
{{node $ $ast}}{{end}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if and $filtered (not (or .PDoc .PAst))}}No match found.
{{end}}{{with .PDoc}}{{if $.IsMain}}COMMAND DOCUMENTATION

{{comment_text .Doc "    " "\t"}}
{{else}}{{if not $filtered}}PACKAGE DOCUMENTATION

package {{.Name}}
    import "{{.ImportPath}}"

{{comment_text .Doc "    " "\t"}}
{{example_text $ "" "    "}}{{end}}{{/*

---------------------------------------

*/}}{{with .Consts}}{{if not $filtered}}CONSTANTS

{{end}}{{range .}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{end}}{{end}}{{/*

---------------------------------------

*/}}{{with .Vars}}{{if not $filtered}}VARIABLES

{{end}}{{range .}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{end}}{{end}}{{/*

---------------------------------------

*/}}{{with .Funcs}}{{if not $filtered}}FUNCTIONS

{{end}}{{range .}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{example_text $ .Name "    "}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{with .Types}}{{if not $filtered}}TYPES

{{end}}{{range .}}{{$tname := .Name}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{/*

---------------------------------------

*/}}{{if .Consts}}{{range .Consts}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if .Vars}}{{range .Vars}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{range $name := .Names}}{{example_text $ $name "    "}}{{end}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if .Funcs}}{{range .Funcs}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{example_text $ .Name "    "}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if .Methods}}{{range .Methods}}{{node $ .Decl}}
{{comment_text .Doc "    " "\t"}}
{{$name := printf "%s_%s" $tname .Name}}{{example_text $ $name "    "}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if and $filtered (not (or .Consts (or .Vars (or .Funcs .Types))))}}No match found.
{{end}}{{/*

---------------------------------------

*/}}{{end}}{{/*

---------------------------------------

*/}}{{with $.Notes}}
{{range $marker, $content := .}}
{{$marker}}S

{{range $content}}{{comment_text .Body "   " "\t"}}
{{end}}{{end}}{{end}}{{end}}{{/*

---------------------------------------

*/}}{{if not $filtered}}{{with .Dirs}}SUBDIRECTORIES
{{if $.DirFlat}}{{range .List}}{{if .HasPkg}}
	{{.Path}}{{end}}{{end}}
{{else}}{{range .List}}
	{{repeat ` + "`" + `. ` + "`" + ` .Depth}}{{.Name}}{{end}}
{{end}}{{end}}{{/*

---------------------------------------

*/}}{{end}}{{/*
Make sure there is no newline at the end of this file.
perl -i -pe 'chomp if eof' package.txt
*/}}
`,

	"play.js": `// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

function initPlayground(transport) {
	"use strict";

	function text(node) {
		var s = "";
		for (var i = 0; i < node.childNodes.length; i++) {
			var n = node.childNodes[i];
			if (n.nodeType === 1) {
				if (n.tagName === "BUTTON") continue
				if (n.tagName === "SPAN" && n.className === "number") continue;
				if (n.tagName === "DIV" || n.tagName == "BR") {
					s += "\n";
				}
				s += text(n);
				continue;
			}
			if (n.nodeType === 3) {
				s += n.nodeValue;
			}
		}
		return s.replace("\xA0", " "); // replace non-breaking spaces
	}

	function init(code) {
		var output = document.createElement('div');
		var outpre = document.createElement('pre');
		var running;

		if ($ && $(output).resizable) {
			$(output).resizable({
				handles: "n,w,nw",
				minHeight:	27,
				minWidth:	135,
				maxHeight: 608,
				maxWidth:	990
			});
		}

		function onKill() {
			if (running) running.Kill();
		}

		function onRun(e) {
			onKill();
			output.style.display = "block";
			outpre.innerHTML = "";
			run1.style.display = "none";
			var options = {Race: e.shiftKey};
			running = transport.Run(text(code), PlaygroundOutput(outpre), options);
		}

		function onClose() {
			onKill();
			output.style.display = "none";
			run1.style.display = "inline-block";
		}

		var run1 = document.createElement('button');
		run1.innerHTML = 'Run';
		run1.className = 'run';
		run1.addEventListener("click", onRun, false);
		var run2 = document.createElement('button');
		run2.className = 'run';
		run2.innerHTML = 'Run';
		run2.addEventListener("click", onRun, false);
		var kill = document.createElement('button');
		kill.className = 'kill';
		kill.innerHTML = 'Kill';
		kill.addEventListener("click", onKill, false);
		var close = document.createElement('button');
		close.className = 'close';
		close.innerHTML = 'Close';
		close.addEventListener("click", onClose, false);

		var button = document.createElement('div');
		button.classList.add('buttons');
		button.appendChild(run1);
		// Hack to simulate insertAfter
		code.parentNode.insertBefore(button, code.nextSibling);

		var buttons = document.createElement('div');
		buttons.classList.add('buttons');
		buttons.appendChild(run2);
		buttons.appendChild(kill);
		buttons.appendChild(close);

		output.classList.add('output');
		output.appendChild(buttons);
		output.appendChild(outpre);
		output.style.display = "none";
		code.parentNode.insertBefore(output, button.nextSibling);
	}

	var play = document.querySelectorAll('div.playground');
	for (var i = 0; i < play.length; i++) {
		init(play[i]);
	}
}

`,

	"playground.js": `// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
In the absence of any formal way to specify interfaces in JavaScript,
here's a skeleton implementation of a playground transport.

        function Transport() {
                // Set up any transport state (eg, make a websocket connection).
                return {
                        Run: function(body, output, options) {
                                // Compile and run the program 'body' with 'options'.
				// Call the 'output' callback to display program output.
                                return {
                                        Kill: function() {
                                                // Kill the running program.
                                        }
                                };
                        }
                };
        }

	// The output callback is called multiple times, and each time it is
	// passed an object of this form.
        var write = {
                Kind: 'string', // 'start', 'stdout', 'stderr', 'end'
                Body: 'string'  // content of write or end status message
        }

	// The first call must be of Kind 'start' with no body.
	// Subsequent calls may be of Kind 'stdout' or 'stderr'
	// and must have a non-null Body string.
	// The final call should be of Kind 'end' with an optional
	// Body string, signifying a failure ("killed", for example).

	// The output callback must be of this form.
	// See PlaygroundOutput (below) for an implementation.
        function outputCallback(write) {
        }
*/

function HTTPTransport() {
	'use strict';

	// TODO(adg): support stderr

	function playback(output, events) {
		var timeout;
		output({Kind: 'start'});
		function next() {
			if (!events || events.length === 0) {
				output({Kind: 'end'});
				return;
			}
			var e = events.shift();
			if (e.Delay === 0) {
				output({Kind: 'stdout', Body: e.Message});
				next();
				return;
			}
			timeout = setTimeout(function() {
				output({Kind: 'stdout', Body: e.Message});
				next();
			}, e.Delay / 1000000);
		}
		next();
		return {
			Stop: function() {
				clearTimeout(timeout);
			}
		}
	}

	function error(output, msg) {
		output({Kind: 'start'});
		output({Kind: 'stderr', Body: msg});
		output({Kind: 'end'});
	}

	var seq = 0;
	return {
		Run: function(body, output, options) {
			seq++;
			var cur = seq;
			var playing;
			$.ajax('/compile', {
				type: 'POST',
				data: {'version': 2, 'body': body},
				dataType: 'json',
				success: function(data) {
					if (seq != cur) return;
					if (!data) return;
					if (playing != null) playing.Stop();
					if (data.Errors) {
						error(output, data.Errors);
						return;
					}
					playing = playback(output, data.Events);
				},
				error: function() {
					error(output, 'Error communicating with remote server.');
				}
			});
			return {
				Kill: function() {
					if (playing != null) playing.Stop();
					output({Kind: 'end', Body: 'killed'});
				}
			};
		}
	};
}

function SocketTransport() {
	'use strict';

	var id = 0;
	var outputs = {};
	var started = {};
	var websocket = new WebSocket('ws://' + window.location.host + '/socket');

	websocket.onclose = function() {
		console.log('websocket connection closed');
	}

	websocket.onmessage = function(e) {
		var m = JSON.parse(e.data);
		var output = outputs[m.Id];
		if (output === null)
			return;
		if (!started[m.Id]) {
			output({Kind: 'start'});
			started[m.Id] = true;
		}
		output({Kind: m.Kind, Body: m.Body});
	}

	function send(m) {
		websocket.send(JSON.stringify(m));
	}

	return {
		Run: function(body, output, options) {
			var thisID = id+'';
			id++;
			outputs[thisID] = output;
			send({Id: thisID, Kind: 'run', Body: body, Options: options});
			return {
				Kill: function() {
					send({Id: thisID, Kind: 'kill'});
				}
			};
		}
	};
}

function PlaygroundOutput(el) {
	'use strict';

	return function(write) {
		if (write.Kind == 'start') {
			el.innerHTML = '';
			return;
		}

		var cl = 'system';
		if (write.Kind == 'stdout' || write.Kind == 'stderr')
			cl = write.Kind;

		var m = write.Body;
		if (write.Kind == 'end') 
			m = '\nProgram exited' + (m?(': '+m):'.');

		if (m.indexOf('IMAGE:') === 0) {
			// TODO(adg): buffer all writes before creating image
			var url = 'data:image/png;base64,' + m.substr(6);
			var img = document.createElement('img');
			img.src = url;
			el.appendChild(img);
			return;
		}

		// ^L clears the screen.
		var s = m.split('\x0c');
		if (s.length > 1) {
			el.innerHTML = '';
			m = s.pop();
		}

		m = m.replace(/&/g, '&amp;');
		m = m.replace(/</g, '&lt;');
		m = m.replace(/>/g, '&gt;');

		var needScroll = (el.scrollTop + el.offsetHeight) == el.scrollHeight;

		var span = document.createElement('span');
		span.className = cl;
		span.innerHTML = m;
		el.appendChild(span);

		if (needScroll)
			el.scrollTop = el.scrollHeight - el.offsetHeight;
	}
}

(function() {
  function lineHighlight(error) {
    var regex = /prog.go:([0-9]+)/g;
    var r = regex.exec(error);
    while (r) {
      $(".lines div").eq(r[1]-1).addClass("lineerror");
      r = regex.exec(error);
    }
  }
  function highlightOutput(wrappedOutput) {
    return function(write) {
      if (write.Body) lineHighlight(write.Body);
      wrappedOutput(write);
    }
  }
  function lineClear() {
    $(".lineerror").removeClass("lineerror");
  }

  // opts is an object with these keys
  //  codeEl - code editor element
  //  outputEl - program output element
  //  runEl - run button element
  //  fmtEl - fmt button element (optional)
  //  fmtImportEl - fmt "imports" checkbox element (optional)
  //  shareEl - share button element (optional)
  //  shareURLEl - share URL text input element (optional)
  //  shareRedirect - base URL to redirect to on share (optional)
  //  toysEl - toys select element (optional)
  //  enableHistory - enable using HTML5 history API (optional)
  //  transport - playground transport to use (default is HTTPTransport)
  function playground(opts) {
    var code = $(opts.codeEl);
    var transport = opts['transport'] || new HTTPTransport();
    var running;
  
    // autoindent helpers.
    function insertTabs(n) {
      // find the selection start and end
      var start = code[0].selectionStart;
      var end   = code[0].selectionEnd;
      // split the textarea content into two, and insert n tabs
      var v = code[0].value;
      var u = v.substr(0, start);
      for (var i=0; i<n; i++) {
        u += "\t";
      }
      u += v.substr(end);
      // set revised content
      code[0].value = u;
      // reset caret position after inserted tabs
      code[0].selectionStart = start+n;
      code[0].selectionEnd = start+n;
    }
    function autoindent(el) {
      var curpos = el.selectionStart;
      var tabs = 0;
      while (curpos > 0) {
        curpos--;
        if (el.value[curpos] == "\t") {
          tabs++;
        } else if (tabs > 0 || el.value[curpos] == "\n") {
          break;
        }
      }
      setTimeout(function() {
        insertTabs(tabs);
      }, 1);
    }
  
    function keyHandler(e) {
      if (e.keyCode == 9 && !e.ctrlKey) { // tab (but not ctrl-tab)
        insertTabs(1);
        e.preventDefault();
        return false;
      }
      if (e.keyCode == 13) { // enter
        if (e.shiftKey) { // +shift
          run();
          e.preventDefault();
          return false;
        } if (e.ctrlKey) { // +control
          fmt();
          e.preventDefault();
        } else {
          autoindent(e.target);
        }
      }
      return true;
    }
    code.unbind('keydown').bind('keydown', keyHandler);
    var outdiv = $(opts.outputEl).empty();
    var output = $('<pre/>').appendTo(outdiv);
  
    function body() {
      return $(opts.codeEl).val();
    }
    function setBody(text) {
      $(opts.codeEl).val(text);
    }
    function origin(href) {
      return (""+href).split("/").slice(0, 3).join("/");
    }
  
    var pushedEmpty = (window.location.pathname == "/");
    function inputChanged() {
      if (pushedEmpty) {
        return;
      }
      pushedEmpty = true;
      $(opts.shareURLEl).hide();
      window.history.pushState(null, "", "/");
    }
    function popState(e) {
      if (e === null) {
        return;
      }
      if (e && e.state && e.state.code) {
        setBody(e.state.code);
      }
    }
    var rewriteHistory = false;
    if (window.history && window.history.pushState && window.addEventListener && opts.enableHistory) {
      rewriteHistory = true;
      code[0].addEventListener('input', inputChanged);
      window.addEventListener('popstate', popState);
    }

    function setError(error) {
      if (running) running.Kill();
      lineClear();
      lineHighlight(error);
      output.empty().addClass("error").text(error);
    }
    function loading() {
      lineClear();
      if (running) running.Kill();
      output.removeClass("error").text('Waiting for remote server...');
    }
    function run() {
      loading();
      running = transport.Run(body(), highlightOutput(PlaygroundOutput(output[0])));
    }

    function fmt() {
      loading();
      var data = {"body": body()}; 
      if ($(opts.fmtImportEl).is(":checked")) {
        data["imports"] = "true";
      }
      $.ajax("/fmt", {
        data: data,
        type: "POST",
        dataType: "json",
        success: function(data) {
          if (data.Error) {
            setError(data.Error);
          } else {
            setBody(data.Body);
            setError("");
          }
        }
      });
    }

    $(opts.runEl).click(run);
    $(opts.fmtEl).click(fmt);

    if (opts.shareEl !== null && (opts.shareURLEl !== null || opts.shareRedirect !== null)) {
      var shareURL;
      if (opts.shareURLEl) {
        shareURL = $(opts.shareURLEl).hide();
      }
      var sharing = false;
      $(opts.shareEl).click(function() {
        if (sharing) return;
        sharing = true;
        var sharingData = body();
        $.ajax("/share", {
          processData: false,
          data: sharingData,
          type: "POST",
          complete: function(xhr) {
            sharing = false;
            if (xhr.status != 200) {
              alert("Server error; try again.");
              return;
            }
            if (opts.shareRedirect) {
              window.location = opts.shareRedirect + xhr.responseText;
            }
            if (shareURL) {
              var path = "/p/" + xhr.responseText;
              var url = origin(window.location) + path;
              shareURL.show().val(url).focus().select();
  
              if (rewriteHistory) {
                var historyData = {"code": sharingData};
                window.history.pushState(historyData, "", path);
                pushedEmpty = false;
              }
            }
          }
        });
      });
    }
  
    if (opts.toysEl !== null) {
      $(opts.toysEl).bind('change', function() {
        var toy = $(this).val();
        $.ajax("/doc/play/"+toy, {
          processData: false,
          type: "GET",
          complete: function(xhr) {
            if (xhr.status != 200) {
              alert("Server error; try again.");
              return;
            }
            setBody(xhr.responseText);
          }
        });
      });
    }
  }

  window.playground = playground;
})();
`,

	"search.html": `<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
{{with .Alert}}
	<p>
	<span class="alert" style="font-size:120%">{{html .}}</span>
	</p>
{{end}}
{{with .Alt}}
	<p>
	<span class="alert" style="font-size:120%">Did you mean: </span>
	{{range .Alts}}
		<a href="search?q={{urlquery .}}" style="font-size:120%">{{html .}}</a>
	{{end}}
	</p>
{{end}}
`,

	"search.txt": `QUERY
	{{.Query}}

{{with .Alert}}{{.}}
{{end}}{{/* .Alert */}}{{/*

---------------------------------------

*/}}{{with .Alt}}DID YOU MEAN

{{range .Alts}}	{{.}}
{{end}}
{{end}}{{/* .Alt */}}{{/*

---------------------------------------

*/}}{{with .Pak}}PACKAGE {{$.Query}}

{{range .}}	{{pkgLink .Pak.Path}}
{{end}}
{{end}}{{/* .Pak */}}{{/*

---------------------------------------

*/}}{{range $key, $val := .Idents}}{{if $val}}{{$key.Name}}
{{range $val}}    {{.Path}}.{{.Name}}
{{end}}
{{end}}{{end}}{{/* .Idents */}}{{/*

---------------------------------------

*/}}{{with .Hit}}{{with .Decls}}PACKAGE-LEVEL DECLARATIONS

{{range .}}package {{.Pak.Name}}
{{range $file := .Files}}{{range .Groups}}{{range .}}	{{srcLink $file.File.Path}}:{{infoLine .}}{{end}}
{{end}}{{end}}{{/* .Files */}}
{{end}}{{end}}{{/* .Decls */}}{{/*

---------------------------------------

*/}}{{with .Others}}LOCAL DECLARATIONS AND USES

{{range .}}package {{.Pak.Name}}
{{range $file := .Files}}{{range .Groups}}{{range .}}	{{srcLink $file.File.Path}}:{{infoLine .}}
{{end}}{{end}}{{end}}{{/* .Files */}}
{{end}}{{end}}{{/* .Others */}}{{end}}{{/* .Hit */}}{{/*

---------------------------------------

*/}}{{if .Textual}}{{if .Complete}}{{.Found}} TEXTUAL OCCURRENCES{{else}}MORE THAN {{.Found}} TEXTUAL OCCURRENCES{{end}}

{{range .Textual}}{{len .Lines}}	{{srcLink .Filename}}
{{end}}{{if not .Complete}}...	...
{{end}}{{end}}
`,

	"searchcode.html": `<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
{{$query_url := urlquery .Query}}
{{if not .Idents}}
	{{with .Pak}}
		<h2 id="Packages">Package {{html $.Query}}</h2>
		<p>
		<table class="layout">
		{{range .}}
			{{$pkg_html := pkgLink .Pak.Path | html}}
			<tr><td><a href="/{{$pkg_html}}">{{$pkg_html}}</a></td></tr>
		{{end}}
		</table>
		</p>
	{{end}}
{{end}}
{{with .Hit}}
	{{with .Decls}}
		<h2 id="Global">Package-level declarations</h2>
		{{range .}}
			{{$pkg_html := pkgLink .Pak.Path | html}}
			<h3 id="Global_{{$pkg_html}}">package <a href="/{{$pkg_html}}">{{html .Pak.Name}}</a></h3>
			{{range .Files}}
				{{$file := .File.Path}}
				{{range .Groups}}
					{{range .}}
						{{$line := infoLine .}}
						<a href="{{queryLink $file $query_url $line | html}}">{{$file}}:{{$line}}</a>
						{{infoSnippet_html .}}
					{{end}}
				{{end}}
			{{end}}
		{{end}}
	{{end}}
	{{with .Others}}
		<h2 id="Local">Local declarations and uses</h2>
		{{range .}}
			{{$pkg_html := pkgLink .Pak.Path | html}}
			<h3 id="Local_{{$pkg_html}}">package <a href="/{{$pkg_html}}">{{html .Pak.Name}}</a></h3>
			{{range .Files}}
				{{$file := .File.Path}}
				<a href="{{queryLink $file $query_url 0 | html}}">{{$file}}</a>
				<table class="layout">
				{{range .Groups}}
					<tr>
					<td width="25"></td>
					<th align="left" valign="top">{{index . 0 | infoKind_html}}</th>
					<td align="left" width="4"></td>
					<td>
					{{range .}}
						{{$line := infoLine .}}
						<a href="{{queryLink $file $query_url $line | html}}">{{$line}}</a>
					{{end}}
					</td>
					</tr>
				{{end}}
				</table>
			{{end}}
		{{end}}
	{{end}}
{{end}}
`,

	"searchdoc.html": `<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
{{range $key, $val := .Idents}}
	{{if $val}}
		<h2 id="{{$key.Name}}">{{$key.Name}}</h2>
		{{range $val}}
			{{$pkg_html := pkgLink .Path | html}}
			{{if eq "Packages" $key.Name}}
				<a href="/{{$pkg_html}}">{{html .Path}}</a>
			{{else}}
				{{$doc_html := docLink .Path .Name| html}}
				<a href="/{{$pkg_html}}">{{html .Package}}</a>.<a href="{{$doc_html}}">{{.Name}}</a>
			{{end}}
			{{if .Doc}}
				<p>{{comment_html .Doc}}</p>
			{{else}}
				<p><em>No documentation available</em></p>
			{{end}}
		{{end}}
	{{end}}
{{end}}
`,

	"searchtxt.html": `<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
{{$query_url := urlquery .Query}}
{{with .Textual}}
	{{if $.Complete}}
		<h2 id="Textual">{{html $.Found}} textual occurrences</h2>
	{{else}}
		<h2 id="Textual">More than {{html $.Found}} textual occurrences</h2>
		<p>
		<span class="alert" style="font-size:120%">Not all files or lines containing "{{html $.Query}}" are shown.</span>
		</p>
	{{end}}
	<p>
	<table class="layout">
	{{range .}}
		{{$file := .Filename}}
		<tr>
		<td align="left" valign="top">
		<a href="{{queryLink $file $query_url 0}}">{{$file}}</a>:
		</td>
		<td align="left" width="4"></td>
		<th align="left" valign="top">{{len .Lines}}</th>
		<td align="left" width="4"></td>
		<td align="left">
		{{range .Lines}}
			<a href="{{queryLink $file $query_url .}}">{{html .}}</a>
		{{end}}
		{{if not $.Complete}}
			...
		{{end}}
		</td>
		</tr>
	{{end}}
	{{if not $.Complete}}
		<tr><td align="left">...</td></tr>
	{{end}}
	</table>
	</p>
{{end}}
`,

	"style.css": `body {
	margin: 0;
	font-family: Arial, sans-serif;
	font-size: 16px;
	background-color: #fff;
	line-height: 1.3em;
}
pre,
code {
	font-family: Menlo, monospace;
	font-size: 14px;
}
pre {
	line-height: 1.4em;
	overflow-x: auto;
}
pre .comment {
	color: #006600;
}
pre .highlight,
pre .highlight-comment,
pre .selection-highlight,
pre .selection-highlight-comment {
	background: #FFFF00;
}
pre .selection,
pre .selection-comment {
	background: #FF9632;
}
pre .ln {
	color: #999;
}
body {
	color: #222;
}
a,
.exampleHeading .text {
	color: #375EAB;
	text-decoration: none;
}
a:hover,
.exampleHeading .text:hover {
	text-decoration: underline;
}
p {
	max-width: 800px;
	word-wrap: break-word;
}
p,
pre,
ul,
ol {
	margin: 20px;
}
pre {
	background: #EFEFEF;
	padding: 10px;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}

h1,
h2,
h3,
h4,
.rootHeading {
	margin: 20px 0 20px;
	padding: 0;
	color: #375EAB;
	font-weight: bold;
}
h1 {
	font-size: 28px;
	line-height: 1;
}
h2 {
	font-size: 20px;
	background: #E0EBF5;
	padding: 8px;
	line-height: 1.25;
	font-weight: normal;
}
h2 a {
	font-weight: bold;
}
h3 {
	font-size: 20px;
}
h3,
h4 {
	margin: 20px 5px;
}
h4 {
	font-size: 16px;
}
.rootHeading {
	font-size: 20px;
	margin: 0;
}

dl {
	margin: 20px;
}
dd {
	margin: 0;
}
dd.indent {
	margin: 0 20px;
}
dl,
dd {
	font-size: 14px;
}
div#nav table td {
	vertical-align: top;
}


.pkg-dir {
	padding: 0 10px;
}
.pkg-dir table {
	border-collapse: collapse;
	border-spacing: 0;
}
.pkg-name {
	padding-right: 10px;
}
.alert {
	color: #AA0000;
}

.top-heading {
	float: left;
	padding: 21px 0;
	font-size: 20px;
	font-weight: normal;
}
.top-heading a {
	color: #222;
	text-decoration: none;
}

div#topbar {
	background: #E0EBF5;
	height: 64px;
	overflow: hidden;
}

body {
	text-align: center;
}
div#page {
	width: 100%;
}
div#page > .container,
div#topbar > .container {
	text-align: left;
	margin-left: auto;
	margin-right: auto;
	padding: 0 20px;
}
div#topbar > .container,
div#page > .container {
	max-width: 950px;
}
div#page.wide > .container,
div#topbar.wide > .container {
	max-width: none;
}
div#plusone {
	float: right;
	clear: right;
	margin-top: 5px;
}

div#footer {
	text-align: center;
	color: #666;
	font-size: 14px;
	margin: 40px 0;
}

div#menu > a,
div#menu > input,
div#learn .buttons a,
div.play .buttons a,
div#blog .read a,
#menu-button {
	padding: 10px;

	text-decoration: none;
	font-size: 16px;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
div#playground .buttons a,
div#menu > a,
div#menu > input,
#menu-button {
	border: 1px solid #375EAB;
}
div#playground .buttons a,
div#menu > a,
#menu-button {
	color: white;
	background: #375EAB;
}
#playgroundButton.active {
	background: white;
	color: #375EAB;
}
a#start,
div#learn .buttons a,
div.play .buttons a,
div#blog .read a {
	color: #222;
	border: 1px solid #375EAB;
	background: #E0EBF5;
}
.download {
	width: 150px;
}

div#menu {
	text-align: right;
	padding: 10px;
	white-space: nowrap;
	max-height: 0;
	-moz-transition: max-height .25s linear;
	transition: max-height .25s linear;
	width: 100%;
}
div#menu.menu-visible {
	max-height: 500px;
}
div#menu > a,
#menu-button {
	margin: 10px 2px;
	padding: 10px;
}
div#menu > input {
	position: relative;
	top: 1px;
	width: 140px;
	background: white;
	color: #222;
	box-sizing: border-box;
}
div#menu > input.inactive {
	color: #999;
}

#menu-button {
	display: none;
	position: absolute;
	right: 5px;
	top: 0;
	margin-right: 5px;
}
#menu-button-arrow {
	display: inline-block;
}
.vertical-flip {
	transform: rotate(-180deg);
}

div.left {
	float: left;
	clear: left;
	margin-right: 2.5%;
}
div.right {
	float: right;
	clear: right;
	margin-left: 2.5%;
}
div.left,
div.right {
	width: 45%;
}

div#learn,
div#about {
	padding-top: 20px;
}
div#learn h2,
div#about {
	margin: 0;
}
div#about {
	font-size: 20px;
	margin: 0 auto 30px;
}
div#gopher {
	background: url(/doc/gopher/frontpage.png) no-repeat;
	background-position: center top;
	height: 155px;
}
a#start {
	display: block;
	padding: 10px;

	text-align: center;
	text-decoration: none;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
a#start .big {
	display: block;
	font-weight: bold;
	font-size: 20px;
}
a#start .desc {
	display: block;
	font-size: 14px;
	font-weight: normal;
	margin-top: 5px;
}

div#learn .popout {
	float: right;
	display: block;
	cursor: pointer;
	font-size: 12px;
	background: url(/doc/share.png) no-repeat;
	background-position: right top;
	padding: 5px 27px;
}
div#learn pre,
div#learn textarea {
	padding: 0;
	margin: 0;
	font-family: Menlo, monospace;
	font-size: 14px;
}
div#learn .input {
	padding: 10px;
	margin-top: 10px;
	height: 150px;

	-webkit-border-top-left-radius: 5px;
	-webkit-border-top-right-radius: 5px;
	-moz-border-radius-topleft: 5px;
	-moz-border-radius-topright: 5px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
}
div#learn .input textarea {
	width: 100%;
	height: 100%;
	border: none;
	outline: none;
	resize: none;
}
div#learn .output {
	border-top: none !important;

	padding: 10px;
	height: 59px;
	overflow: auto;

	-webkit-border-bottom-right-radius: 5px;
	-webkit-border-bottom-left-radius: 5px;
	-moz-border-radius-bottomright: 5px;
	-moz-border-radius-bottomleft: 5px;
	border-bottom-right-radius: 5px;
	border-bottom-left-radius: 5px;
}
div#learn .output pre {
	padding: 0;

	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	border-radius: 0;
}
div#learn .input,
div#learn .input textarea,
div#learn .output,
div#learn .output pre {
	background: #FFFFD8;
}
div#learn .input,
div#learn .output {
	border: 1px solid #375EAB;
}
div#learn .buttons {
	float: right;
	padding: 20px 0 10px 0;
	text-align: right;
}
div#learn .buttons a {
	height: 16px;
	margin-left: 5px;
	padding: 10px;
}
div#learn .toys {
	margin-top: 8px;
}
div#learn .toys select {
	border: 1px solid #375EAB;
	margin: 0;
}
div#learn .output .exit {
	display: none;
}

div#video {
	max-width: 100%;
}
div#blog,
div#video {
	margin-top: 40px;
}
div#blog > a,
div#blog > div,
div#blog > h2,
div#video > a,
div#video > div,
div#video > h2 {
	margin-bottom: 10px;
}
div#blog .title,
div#video .title {
	display: block;
	font-size: 20px;
}
div#blog .when {
	color: #666;
	font-size: 14px;
}
div#blog .read {
	text-align: right;
}

.toggleButton { cursor: pointer; }
.toggle .collapsed { display: block; }
.toggle .expanded { display: none; }
.toggleVisible .collapsed { display: none; }
.toggleVisible .expanded { display: block; }

table.codetable { margin-left: auto; margin-right: auto; border-style: none; }
table.codetable td { padding-right: 10px; }
hr { border-style: none; border-top: 1px solid black; }

img.gopher {
	float: right;
	margin-left: 10px;
	margin-bottom: 10px;
	z-index: -1;
}
h2 { clear: right; }

/* example and drop-down playground */
div.play {
	padding: 0 20px 40px 20px;
}
div.play pre,
div.play textarea,
div.play .lines {
	padding: 0;
	margin: 0;
	font-family: Menlo, monospace;
	font-size: 14px;
}
div.play .input {
	padding: 10px;
	margin-top: 10px;

	-webkit-border-top-left-radius: 5px;
	-webkit-border-top-right-radius: 5px;
	-moz-border-radius-topleft: 5px;
	-moz-border-radius-topright: 5px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;

	overflow: hidden;
}
div.play .input textarea {
	width: 100%;
	height: 100%;
	border: none;
	outline: none;
	resize: none;

	overflow: hidden;
}
div#playground .input textarea {
	overflow: auto;
	resize: auto;
}
div.play .output {
	border-top: none !important;

	padding: 10px;
	max-height: 200px;
	overflow: auto;

	-webkit-border-bottom-right-radius: 5px;
	-webkit-border-bottom-left-radius: 5px;
	-moz-border-radius-bottomright: 5px;
	-moz-border-radius-bottomleft: 5px;
	border-bottom-right-radius: 5px;
	border-bottom-left-radius: 5px;
}
div.play .output pre {
	padding: 0;

	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	border-radius: 0;
}
div.play .input,
div.play .input textarea,
div.play .output,
div.play .output pre {
	background: #FFFFD8;
}
div.play .input,
div.play .output {
	border: 1px solid #375EAB;
}
div.play .buttons {
	float: right;
	padding: 20px 0 10px 0;
	text-align: right;
}
div.play .buttons a {
	height: 16px;
	margin-left: 5px;
	padding: 10px;
	cursor: pointer;
}
.output .stderr {
	color: #933;
}
.output .system {
	color: #999;
}

/* drop-down playground */
#playgroundButton,
div#playground {
	/* start hidden; revealed by javascript */
	display: none;
}
div#playground {
	position: absolute;
	top: 63px;
	right: 20px;
	padding: 0 10px 10px 10px;
	z-index: 1;
	text-align: left;
	background: #E0EBF5;

	border: 1px solid #B0BBC5;
	border-top: none;

	-webkit-border-bottom-left-radius: 5px;
	-webkit-border-bottom-right-radius: 5px;
	-moz-border-radius-bottomleft: 5px;
	-moz-border-radius-bottomright: 5px;
	border-bottom-left-radius: 5px;
	border-bottom-right-radius: 5px;
}
div#playground .code {
	width: 520px;
	height: 200px;
}
div#playground .output {
	height: 100px;
}

/* Inline runnable snippets (play.js/initPlayground) */
#content .code pre, #content .playground pre, #content .output pre {
        margin: 0;
        padding: 0;
        background: none;
        border: none;
	outline: 0px solid transparent;
        overflow: auto;
}
#content .playground .number, #content .code .number {
        color: #999;
}
#content .code, #content .playground, #content .output {
	width: auto;
        margin: 20px;
        padding: 10px;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
}
#content .code, #content .playground {
        background: #e9e9e9;
}
#content .output {
        background: #202020;
}
#content .output .stdout, #content .output pre {
        color: #e6e6e6;
}
#content .output .stderr, #content .output .error {
        color: rgb(244, 74, 63);
}
#content .output .system, #content .output .exit {
        color: rgb(255, 209, 77)
}
#content .buttons {
        position: relative;
        float: right;
        top: -50px;
        right: 30px;
}
#content .output .buttons {
        top: -60px;
        right: 0;
        height: 0;
}
#content .buttons .kill {
        display: none;
        visibility: hidden;
}
a.error {
	font-weight: bold;
        color: white;
	background-color: darkred;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        padding: 2px 4px 2px 4px; /* TRBL */
}


#heading-narrow {
	display: none;
}

.downloading {
	background: #F9F9BE;
	padding: 10px;
	text-align: center;
	border-radius: 5px;
}

@media (max-width: 930px) {
	#heading-wide {
		display: none;
	}
	#heading-narrow {
		display: block;
	}
}


@media (max-width: 760px) {
	.container .left,
	.container .right {
		width: auto;
		float: none;
	}

	div#about {
		max-width: 500px;
		text-align: center;
	}
}

@media (min-width: 700px) and (max-width: 1000px) {
	div#menu > a {
		margin: 5px 0;
		font-size: 14px;
	}

	div#menu > input {
		font-size: 14px;
	}
}

@media (max-width: 700px) {
	body {
		font-size: 15px;
	}

	pre,
	code {
		font-size: 13px;
	}

	div#page > .container {
		padding: 0 10px;
	}

	div#topbar {
		height: auto;
		padding: 10px;
	}

	div#topbar > .container {
		padding: 0;
	}

	#heading-wide {
		display: block;
	}
	#heading-narrow {
		display: none;
	}

	.top-heading {
		float: none;
		display: inline-block;
		padding: 12px;
	}

	div#menu {
		padding: 0;
		min-width: 0;
		text-align: left;
		float: left;
	}

	div#menu > a,
	div#menu > input {
		display: block;
		margin-left: 0;
		margin-right: 0;
	}

	div#menu > input {
		width: 100%;
	}

	#menu-button {
		display: inline-block;
	}

	p,
	pre,
	ul,
	ol {
		margin: 10px;
	}

	.pkg-synopsis {
		display: none;
	}

	img.gopher {
		display: none;
	}
}

@media (max-width: 480px) {
	#heading-wide {
		display: none;
	}
	#heading-narrow {
		display: block;
	}
}

@media print {
	pre {
		background: #FFF;
		border: 1px solid #BBB;
		white-space: pre-wrap;
	}
}
`,
}
                                                                                                                                                                                                          go/src/golang.org/x/tools/godoc/static/style.css                                                    0100644 0000000 0000000 00000027406 13101127476 020354  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        body {
	margin: 0;
	font-family: Arial, sans-serif;
	font-size: 16px;
	background-color: #fff;
	line-height: 1.3em;
}
pre,
code {
	font-family: Menlo, monospace;
	font-size: 14px;
}
pre {
	line-height: 1.4em;
	overflow-x: auto;
}
pre .comment {
	color: #006600;
}
pre .highlight,
pre .highlight-comment,
pre .selection-highlight,
pre .selection-highlight-comment {
	background: #FFFF00;
}
pre .selection,
pre .selection-comment {
	background: #FF9632;
}
pre .ln {
	color: #999;
}
body {
	color: #222;
}
a,
.exampleHeading .text {
	color: #375EAB;
	text-decoration: none;
}
a:hover,
.exampleHeading .text:hover {
	text-decoration: underline;
}
p {
	max-width: 800px;
	word-wrap: break-word;
}
p,
pre,
ul,
ol {
	margin: 20px;
}
pre {
	background: #EFEFEF;
	padding: 10px;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}

h1,
h2,
h3,
h4,
.rootHeading {
	margin: 20px 0 20px;
	padding: 0;
	color: #375EAB;
	font-weight: bold;
}
h1 {
	font-size: 28px;
	line-height: 1;
}
h2 {
	font-size: 20px;
	background: #E0EBF5;
	padding: 8px;
	line-height: 1.25;
	font-weight: normal;
}
h2 a {
	font-weight: bold;
}
h3 {
	font-size: 20px;
}
h3,
h4 {
	margin: 20px 5px;
}
h4 {
	font-size: 16px;
}
.rootHeading {
	font-size: 20px;
	margin: 0;
}

dl {
	margin: 20px;
}
dd {
	margin: 0;
}
dd.indent {
	margin: 0 20px;
}
dl,
dd {
	font-size: 14px;
}
div#nav table td {
	vertical-align: top;
}


.pkg-dir {
	padding: 0 10px;
}
.pkg-dir table {
	border-collapse: collapse;
	border-spacing: 0;
}
.pkg-name {
	padding-right: 10px;
}
.alert {
	color: #AA0000;
}

.top-heading {
	float: left;
	padding: 21px 0;
	font-size: 20px;
	font-weight: normal;
}
.top-heading a {
	color: #222;
	text-decoration: none;
}

div#topbar {
	background: #E0EBF5;
	height: 64px;
	overflow: hidden;
}

body {
	text-align: center;
}
div#page {
	width: 100%;
}
div#page > .container,
div#topbar > .container {
	text-align: left;
	margin-left: auto;
	margin-right: auto;
	padding: 0 20px;
}
div#topbar > .container,
div#page > .container {
	max-width: 950px;
}
div#page.wide > .container,
div#topbar.wide > .container {
	max-width: none;
}
div#plusone {
	float: right;
	clear: right;
	margin-top: 5px;
}

div#footer {
	text-align: center;
	color: #666;
	font-size: 14px;
	margin: 40px 0;
}

div#menu > a,
div#menu > input,
div#learn .buttons a,
div.play .buttons a,
div#blog .read a,
#menu-button {
	padding: 10px;

	text-decoration: none;
	font-size: 16px;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
div#playground .buttons a,
div#menu > a,
div#menu > input,
#menu-button {
	border: 1px solid #375EAB;
}
div#playground .buttons a,
div#menu > a,
#menu-button {
	color: white;
	background: #375EAB;
}
#playgroundButton.active {
	background: white;
	color: #375EAB;
}
a#start,
div#learn .buttons a,
div.play .buttons a,
div#blog .read a {
	color: #222;
	border: 1px solid #375EAB;
	background: #E0EBF5;
}
.download {
	width: 150px;
}

div#menu {
	text-align: right;
	padding: 10px;
	white-space: nowrap;
	max-height: 0;
	-moz-transition: max-height .25s linear;
	transition: max-height .25s linear;
	width: 100%;
}
div#menu.menu-visible {
	max-height: 500px;
}
div#menu > a,
#menu-button {
	margin: 10px 2px;
	padding: 10px;
}
div#menu > input {
	position: relative;
	top: 1px;
	width: 140px;
	background: white;
	color: #222;
	box-sizing: border-box;
}
div#menu > input.inactive {
	color: #999;
}

#menu-button {
	display: none;
	position: absolute;
	right: 5px;
	top: 0;
	margin-right: 5px;
}
#menu-button-arrow {
	display: inline-block;
}
.vertical-flip {
	transform: rotate(-180deg);
}

div.left {
	float: left;
	clear: left;
	margin-right: 2.5%;
}
div.right {
	float: right;
	clear: right;
	margin-left: 2.5%;
}
div.left,
div.right {
	width: 45%;
}

div#learn,
div#about {
	padding-top: 20px;
}
div#learn h2,
div#about {
	margin: 0;
}
div#about {
	font-size: 20px;
	margin: 0 auto 30px;
}
div#gopher {
	background: url(/doc/gopher/frontpage.png) no-repeat;
	background-position: center top;
	height: 155px;
}
a#start {
	display: block;
	padding: 10px;

	text-align: center;
	text-decoration: none;

	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
a#start .big {
	display: block;
	font-weight: bold;
	font-size: 20px;
}
a#start .desc {
	display: block;
	font-size: 14px;
	font-weight: normal;
	margin-top: 5px;
}

div#learn .popout {
	float: right;
	display: block;
	cursor: pointer;
	font-size: 12px;
	background: url(/doc/share.png) no-repeat;
	background-position: right top;
	padding: 5px 27px;
}
div#learn pre,
div#learn textarea {
	padding: 0;
	margin: 0;
	font-family: Menlo, monospace;
	font-size: 14px;
}
div#learn .input {
	padding: 10px;
	margin-top: 10px;
	height: 150px;

	-webkit-border-top-left-radius: 5px;
	-webkit-border-top-right-radius: 5px;
	-moz-border-radius-topleft: 5px;
	-moz-border-radius-topright: 5px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
}
div#learn .input textarea {
	width: 100%;
	height: 100%;
	border: none;
	outline: none;
	resize: none;
}
div#learn .output {
	border-top: none !important;

	padding: 10px;
	height: 59px;
	overflow: auto;

	-webkit-border-bottom-right-radius: 5px;
	-webkit-border-bottom-left-radius: 5px;
	-moz-border-radius-bottomright: 5px;
	-moz-border-radius-bottomleft: 5px;
	border-bottom-right-radius: 5px;
	border-bottom-left-radius: 5px;
}
div#learn .output pre {
	padding: 0;

	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	border-radius: 0;
}
div#learn .input,
div#learn .input textarea,
div#learn .output,
div#learn .output pre {
	background: #FFFFD8;
}
div#learn .input,
div#learn .output {
	border: 1px solid #375EAB;
}
div#learn .buttons {
	float: right;
	padding: 20px 0 10px 0;
	text-align: right;
}
div#learn .buttons a {
	height: 16px;
	margin-left: 5px;
	padding: 10px;
}
div#learn .toys {
	margin-top: 8px;
}
div#learn .toys select {
	border: 1px solid #375EAB;
	margin: 0;
}
div#learn .output .exit {
	display: none;
}

div#video {
	max-width: 100%;
}
div#blog,
div#video {
	margin-top: 40px;
}
div#blog > a,
div#blog > div,
div#blog > h2,
div#video > a,
div#video > div,
div#video > h2 {
	margin-bottom: 10px;
}
div#blog .title,
div#video .title {
	display: block;
	font-size: 20px;
}
div#blog .when {
	color: #666;
	font-size: 14px;
}
div#blog .read {
	text-align: right;
}

.toggleButton { cursor: pointer; }
.toggle .collapsed { display: block; }
.toggle .expanded { display: none; }
.toggleVisible .collapsed { display: none; }
.toggleVisible .expanded { display: block; }

table.codetable { margin-left: auto; margin-right: auto; border-style: none; }
table.codetable td { padding-right: 10px; }
hr { border-style: none; border-top: 1px solid black; }

img.gopher {
	float: right;
	margin-left: 10px;
	margin-bottom: 10px;
	z-index: -1;
}
h2 { clear: right; }

/* example and drop-down playground */
div.play {
	padding: 0 20px 40px 20px;
}
div.play pre,
div.play textarea,
div.play .lines {
	padding: 0;
	margin: 0;
	font-family: Menlo, monospace;
	font-size: 14px;
}
div.play .input {
	padding: 10px;
	margin-top: 10px;

	-webkit-border-top-left-radius: 5px;
	-webkit-border-top-right-radius: 5px;
	-moz-border-radius-topleft: 5px;
	-moz-border-radius-topright: 5px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;

	overflow: hidden;
}
div.play .input textarea {
	width: 100%;
	height: 100%;
	border: none;
	outline: none;
	resize: none;

	overflow: hidden;
}
div#playground .input textarea {
	overflow: auto;
	resize: auto;
}
div.play .output {
	border-top: none !important;

	padding: 10px;
	max-height: 200px;
	overflow: auto;

	-webkit-border-bottom-right-radius: 5px;
	-webkit-border-bottom-left-radius: 5px;
	-moz-border-radius-bottomright: 5px;
	-moz-border-radius-bottomleft: 5px;
	border-bottom-right-radius: 5px;
	border-bottom-left-radius: 5px;
}
div.play .output pre {
	padding: 0;

	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	border-radius: 0;
}
div.play .input,
div.play .input textarea,
div.play .output,
div.play .output pre {
	background: #FFFFD8;
}
div.play .input,
div.play .output {
	border: 1px solid #375EAB;
}
div.play .buttons {
	float: right;
	padding: 20px 0 10px 0;
	text-align: right;
}
div.play .buttons a {
	height: 16px;
	margin-left: 5px;
	padding: 10px;
	cursor: pointer;
}
.output .stderr {
	color: #933;
}
.output .system {
	color: #999;
}

/* drop-down playground */
#playgroundButton,
div#playground {
	/* start hidden; revealed by javascript */
	display: none;
}
div#playground {
	position: absolute;
	top: 63px;
	right: 20px;
	padding: 0 10px 10px 10px;
	z-index: 1;
	text-align: left;
	background: #E0EBF5;

	border: 1px solid #B0BBC5;
	border-top: none;

	-webkit-border-bottom-left-radius: 5px;
	-webkit-border-bottom-right-radius: 5px;
	-moz-border-radius-bottomleft: 5px;
	-moz-border-radius-bottomright: 5px;
	border-bottom-left-radius: 5px;
	border-bottom-right-radius: 5px;
}
div#playground .code {
	width: 520px;
	height: 200px;
}
div#playground .output {
	height: 100px;
}

/* Inline runnable snippets (play.js/initPlayground) */
#content .code pre, #content .playground pre, #content .output pre {
        margin: 0;
        padding: 0;
        background: none;
        border: none;
	outline: 0px solid transparent;
        overflow: auto;
}
#content .playground .number, #content .code .number {
        color: #999;
}
#content .code, #content .playground, #content .output {
	width: auto;
        margin: 20px;
        padding: 10px;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
}
#content .code, #content .playground {
        background: #e9e9e9;
}
#content .output {
        background: #202020;
}
#content .output .stdout, #content .output pre {
        color: #e6e6e6;
}
#content .output .stderr, #content .output .error {
        color: rgb(244, 74, 63);
}
#content .output .system, #content .output .exit {
        color: rgb(255, 209, 77)
}
#content .buttons {
        position: relative;
        float: right;
        top: -50px;
        right: 30px;
}
#content .output .buttons {
        top: -60px;
        right: 0;
        height: 0;
}
#content .buttons .kill {
        display: none;
        visibility: hidden;
}
a.error {
	font-weight: bold;
        color: white;
	background-color: darkred;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        padding: 2px 4px 2px 4px; /* TRBL */
}


#heading-narrow {
	display: none;
}

.downloading {
	background: #F9F9BE;
	padding: 10px;
	text-align: center;
	border-radius: 5px;
}

@media (max-width: 930px) {
	#heading-wide {
		display: none;
	}
	#heading-narrow {
		display: block;
	}
}


@media (max-width: 760px) {
	.container .left,
	.container .right {
		width: auto;
		float: none;
	}

	div#about {
		max-width: 500px;
		text-align: center;
	}
}

@media (min-width: 700px) and (max-width: 1000px) {
	div#menu > a {
		margin: 5px 0;
		font-size: 14px;
	}

	div#menu > input {
		font-size: 14px;
	}
}

@media (max-width: 700px) {
	body {
		font-size: 15px;
	}

	pre,
	code {
		font-size: 13px;
	}

	div#page > .container {
		padding: 0 10px;
	}

	div#topbar {
		height: auto;
		padding: 10px;
	}

	div#topbar > .container {
		padding: 0;
	}

	#heading-wide {
		display: block;
	}
	#heading-narrow {
		display: none;
	}

	.top-heading {
		float: none;
		display: inline-block;
		padding: 12px;
	}

	div#menu {
		padding: 0;
		min-width: 0;
		text-align: left;
		float: left;
	}

	div#menu > a,
	div#menu > input {
		display: block;
		margin-left: 0;
		margin-right: 0;
	}

	div#menu > input {
		width: 100%;
	}

	#menu-button {
		display: inline-block;
	}

	p,
	pre,
	ul,
	ol {
		margin: 10px;
	}

	.pkg-synopsis {
		display: none;
	}

	img.gopher {
		display: none;
	}
}

@media (max-width: 480px) {
	#heading-wide {
		display: none;
	}
	#heading-narrow {
		display: block;
	}
}

@media print {
	pre {
		background: #FFF;
		border: 1px solid #BBB;
		white-space: pre-wrap;
	}
}
                                                                                                                                                                                                                                                          go/src/golang.org/x/tools/godoc/tab.go                                                              0100644 0000000 0000000 00000003133 13101127475 016276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// TODO(bradfitz,adg): move to util

package godoc

import "io"

var spaces = []byte("                                ") // 32 spaces seems like a good number

const (
	indenting = iota
	collecting
)

// A tconv is an io.Writer filter for converting leading tabs into spaces.
type tconv struct {
	output io.Writer
	state  int // indenting or collecting
	indent int // valid if state == indenting
	p      *Presentation
}

func (p *tconv) writeIndent() (err error) {
	i := p.indent
	for i >= len(spaces) {
		i -= len(spaces)
		if _, err = p.output.Write(spaces); err != nil {
			return
		}
	}
	// i < len(spaces)
	if i > 0 {
		_, err = p.output.Write(spaces[0:i])
	}
	return
}

func (p *tconv) Write(data []byte) (n int, err error) {
	if len(data) == 0 {
		return
	}
	pos := 0 // valid if p.state == collecting
	var b byte
	for n, b = range data {
		switch p.state {
		case indenting:
			switch b {
			case '\t':
				p.indent += p.p.TabWidth
			case '\n':
				p.indent = 0
				if _, err = p.output.Write(data[n : n+1]); err != nil {
					return
				}
			case ' ':
				p.indent++
			default:
				p.state = collecting
				pos = n
				if err = p.writeIndent(); err != nil {
					return
				}
			}
		case collecting:
			if b == '\n' {
				p.state = indenting
				p.indent = 0
				if _, err = p.output.Write(data[pos : n+1]); err != nil {
					return
				}
			}
		}
	}
	n = len(data)
	if pos < n && p.state == collecting {
		_, err = p.output.Write(data[pos:])
	}
	return
}
                                                                                                                                                                                                                                                                                                                                                                                                                                     go/src/golang.org/x/tools/godoc/template.go                                                         0100644 0000000 0000000 00000012671 13101127475 017352  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Template support for writing HTML documents.
// Documents that include Template: true in their
// metadata are executed as input to text/template.
//
// This file defines functions for those templates to invoke.

// The template uses the function "code" to inject program
// source into the output by extracting code from files and
// injecting them as HTML-escaped <pre> blocks.
//
// The syntax is simple: 1, 2, or 3 space-separated arguments:
//
// Whole file:
//	{{code "foo.go"}}
// One line (here the signature of main):
//	{{code "foo.go" `/^func.main/`}}
// Block of text, determined by start and end (here the body of main):
//	{{code "foo.go" `/^func.main/` `/^}/`
//
// Patterns can be `/regular expression/`, a decimal number, or "$"
// to signify the end of the file. In multi-line matches,
// lines that end with the four characters
//	OMIT
// are omitted from the output, making it easy to provide marker
// lines in the input that will not appear in the output but are easy
// to identify by pattern.

package godoc

import (
	"bytes"
	"fmt"
	"log"
	"regexp"
	"strings"

	"golang.org/x/tools/godoc/vfs"
)

// Functions in this file panic on error, but the panic is recovered
// to an error by 'code'.

// contents reads and returns the content of the named file
// (from the virtual file system, so for example /doc refers to $GOROOT/doc).
func (c *Corpus) contents(name string) string {
	file, err := vfs.ReadFile(c.fs, name)
	if err != nil {
		log.Panic(err)
	}
	return string(file)
}

// stringFor returns a textual representation of the arg, formatted according to its nature.
func stringFor(arg interface{}) string {
	switch arg := arg.(type) {
	case int:
		return fmt.Sprintf("%d", arg)
	case string:
		if len(arg) > 2 && arg[0] == '/' && arg[len(arg)-1] == '/' {
			return fmt.Sprintf("%#q", arg)
		}
		return fmt.Sprintf("%q", arg)
	default:
		log.Panicf("unrecognized argument: %v type %T", arg, arg)
	}
	return ""
}

func (p *Presentation) code(file string, arg ...interface{}) (s string, err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("%v", r)
		}
	}()

	text := p.Corpus.contents(file)
	var command string
	switch len(arg) {
	case 0:
		// text is already whole file.
		command = fmt.Sprintf("code %q", file)
	case 1:
		command = fmt.Sprintf("code %q %s", file, stringFor(arg[0]))
		text = p.Corpus.oneLine(file, text, arg[0])
	case 2:
		command = fmt.Sprintf("code %q %s %s", file, stringFor(arg[0]), stringFor(arg[1]))
		text = p.Corpus.multipleLines(file, text, arg[0], arg[1])
	default:
		return "", fmt.Errorf("incorrect code invocation: code %q %q", file, arg)
	}
	// Trim spaces from output.
	text = strings.Trim(text, "\n")
	// Replace tabs by spaces, which work better in HTML.
	text = strings.Replace(text, "\t", "    ", -1)
	var buf bytes.Buffer
	// HTML-escape text and syntax-color comments like elsewhere.
	FormatText(&buf, []byte(text), -1, true, "", nil)
	// Include the command as a comment.
	text = fmt.Sprintf("<pre><!--{{%s}}\n-->%s</pre>", command, buf.Bytes())
	return text, nil
}

// parseArg returns the integer or string value of the argument and tells which it is.
func parseArg(arg interface{}, file string, max int) (ival int, sval string, isInt bool) {
	switch n := arg.(type) {
	case int:
		if n <= 0 || n > max {
			log.Panicf("%q:%d is out of range", file, n)
		}
		return n, "", true
	case string:
		return 0, n, false
	}
	log.Panicf("unrecognized argument %v type %T", arg, arg)
	return
}

// oneLine returns the single line generated by a two-argument code invocation.
func (c *Corpus) oneLine(file, text string, arg interface{}) string {
	lines := strings.SplitAfter(c.contents(file), "\n")
	line, pattern, isInt := parseArg(arg, file, len(lines))
	if isInt {
		return lines[line-1]
	}
	return lines[match(file, 0, lines, pattern)-1]
}

// multipleLines returns the text generated by a three-argument code invocation.
func (c *Corpus) multipleLines(file, text string, arg1, arg2 interface{}) string {
	lines := strings.SplitAfter(c.contents(file), "\n")
	line1, pattern1, isInt1 := parseArg(arg1, file, len(lines))
	line2, pattern2, isInt2 := parseArg(arg2, file, len(lines))
	if !isInt1 {
		line1 = match(file, 0, lines, pattern1)
	}
	if !isInt2 {
		line2 = match(file, line1, lines, pattern2)
	} else if line2 < line1 {
		log.Panicf("lines out of order for %q: %d %d", text, line1, line2)
	}
	for k := line1 - 1; k < line2; k++ {
		if strings.HasSuffix(lines[k], "OMIT\n") {
			lines[k] = ""
		}
	}
	return strings.Join(lines[line1-1:line2], "")
}

// match identifies the input line that matches the pattern in a code invocation.
// If start>0, match lines starting there rather than at the beginning.
// The return value is 1-indexed.
func match(file string, start int, lines []string, pattern string) int {
	// $ matches the end of the file.
	if pattern == "$" {
		if len(lines) == 0 {
			log.Panicf("%q: empty file", file)
		}
		return len(lines)
	}
	// /regexp/ matches the line that matches the regexp.
	if len(pattern) > 2 && pattern[0] == '/' && pattern[len(pattern)-1] == '/' {
		re, err := regexp.Compile(pattern[1 : len(pattern)-1])
		if err != nil {
			log.Panic(err)
		}
		for i := start; i < len(lines); i++ {
			if re.MatchString(lines[i]) {
				return i + 1
			}
		}
		log.Panicf("%s: no match for %#q", file, pattern)
	}
	log.Panicf("unrecognized pattern: %q", pattern)
	return 0
}
                                                                       go/src/golang.org/x/tools/godoc/util/                                                               0040755 0000000 0000000 00000000000 13101127475 016161  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/util/throttle.go                                                    0100644 0000000 0000000 00000004570 13101127475 020360  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package util

import "time"

// A Throttle permits throttling of a goroutine by
// calling the Throttle method repeatedly.
//
type Throttle struct {
	f  float64       // f = (1-r)/r for 0 < r < 1
	dt time.Duration // minimum run time slice; >= 0
	tr time.Duration // accumulated time running
	ts time.Duration // accumulated time stopped
	tt time.Time     // earliest throttle time (= time Throttle returned + tm)
}

// NewThrottle creates a new Throttle with a throttle value r and
// a minimum allocated run time slice of dt:
//
//	r == 0: "empty" throttle; the goroutine is always sleeping
//	r == 1: full throttle; the goroutine is never sleeping
//
// A value of r == 0.6 throttles a goroutine such that it runs
// approx. 60% of the time, and sleeps approx. 40% of the time.
// Values of r < 0 or r > 1 are clamped down to values between 0 and 1.
// Values of dt < 0 are set to 0.
//
func NewThrottle(r float64, dt time.Duration) *Throttle {
	var f float64
	switch {
	case r <= 0:
		f = -1 // indicates always sleep
	case r >= 1:
		f = 0 // assume r == 1 (never sleep)
	default:
		// 0 < r < 1
		f = (1 - r) / r
	}
	if dt < 0 {
		dt = 0
	}
	return &Throttle{f: f, dt: dt, tt: time.Now().Add(dt)}
}

// Throttle calls time.Sleep such that over time the ratio tr/ts between
// accumulated run (tr) and sleep times (ts) approximates the value 1/(1-r)
// where r is the throttle value. Throttle returns immediately (w/o sleeping)
// if less than tm ns have passed since the last call to Throttle.
//
func (p *Throttle) Throttle() {
	if p.f < 0 {
		select {} // always sleep
	}

	t0 := time.Now()
	if t0.Before(p.tt) {
		return // keep running (minimum time slice not exhausted yet)
	}

	// accumulate running time
	p.tr += t0.Sub(p.tt) + p.dt

	// compute sleep time
	// Over time we want:
	//
	//	tr/ts = r/(1-r)
	//
	// Thus:
	//
	//	ts = tr*f with f = (1-r)/r
	//
	// After some incremental run time δr added to the total run time
	// tr, the incremental sleep-time δs to get to the same ratio again
	// after waking up from time.Sleep is:
	if δs := time.Duration(float64(p.tr)*p.f) - p.ts; δs > 0 {
		time.Sleep(δs)
	}

	// accumulate (actual) sleep time
	t1 := time.Now()
	p.ts += t1.Sub(t0)

	// set earliest next throttle time
	p.tt = t1.Add(p.dt)
}
                                                                                                                                        go/src/golang.org/x/tools/godoc/util/util.go                                                        0100644 0000000 0000000 00000004403 13101127475 017463  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package util contains utility types and functions for godoc.
package util // import "golang.org/x/tools/godoc/util"

import (
	pathpkg "path"
	"sync"
	"time"
	"unicode/utf8"

	"golang.org/x/tools/godoc/vfs"
)

// An RWValue wraps a value and permits mutually exclusive
// access to it and records the time the value was last set.
type RWValue struct {
	mutex     sync.RWMutex
	value     interface{}
	timestamp time.Time // time of last set()
}

func (v *RWValue) Set(value interface{}) {
	v.mutex.Lock()
	v.value = value
	v.timestamp = time.Now()
	v.mutex.Unlock()
}

func (v *RWValue) Get() (interface{}, time.Time) {
	v.mutex.RLock()
	defer v.mutex.RUnlock()
	return v.value, v.timestamp
}

// IsText reports whether a significant prefix of s looks like correct UTF-8;
// that is, if it is likely that s is human-readable text.
func IsText(s []byte) bool {
	const max = 1024 // at least utf8.UTFMax
	if len(s) > max {
		s = s[0:max]
	}
	for i, c := range string(s) {
		if i+utf8.UTFMax > len(s) {
			// last char may be incomplete - ignore
			break
		}
		if c == 0xFFFD || c < ' ' && c != '\n' && c != '\t' && c != '\f' {
			// decoding error or control character - not a text file
			return false
		}
	}
	return true
}

// textExt[x] is true if the extension x indicates a text file, and false otherwise.
var textExt = map[string]bool{
	".css": false, // must be served raw
	".js":  false, // must be served raw
}

// IsTextFile reports whether the file has a known extension indicating
// a text file, or if a significant chunk of the specified file looks like
// correct UTF-8; that is, if it is likely that the file contains human-
// readable text.
func IsTextFile(fs vfs.Opener, filename string) bool {
	// if the extension is known, use it for decision making
	if isText, found := textExt[pathpkg.Ext(filename)]; found {
		return isText
	}

	// the extension is not known; read an initial chunk
	// of the file and check if it looks like text
	f, err := fs.Open(filename)
	if err != nil {
		return false
	}
	defer f.Close()

	var buf [1024]byte
	n, err := f.Read(buf[0:])
	if err != nil {
		return false
	}

	return IsText(buf[0:n])
}
                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/godoc/vfs/                                                                0040755 0000000 0000000 00000000000 13101127476 016003  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/gatefs/                                                         0040755 0000000 0000000 00000000000 13101127475 017253  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/gatefs/gatefs.go                                                0100644 0000000 0000000 00000003501 13101127475 021047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package gatefs provides an implementation of the FileSystem
// interface that wraps another FileSystem and limits its concurrency.
package gatefs // import "golang.org/x/tools/godoc/vfs/gatefs"

import (
	"fmt"
	"os"

	"golang.org/x/tools/godoc/vfs"
)

// New returns a new FileSystem that delegates to fs.
// If gateCh is non-nil and buffered, it's used as a gate
// to limit concurrency on calls to fs.
func New(fs vfs.FileSystem, gateCh chan bool) vfs.FileSystem {
	if cap(gateCh) == 0 {
		return fs
	}
	return gatefs{fs, gate(gateCh)}
}

type gate chan bool

func (g gate) enter() { g <- true }
func (g gate) leave() { <-g }

type gatefs struct {
	fs vfs.FileSystem
	gate
}

func (fs gatefs) String() string {
	return fmt.Sprintf("gated(%s, %d)", fs.fs.String(), cap(fs.gate))
}

func (fs gatefs) Open(p string) (vfs.ReadSeekCloser, error) {
	fs.enter()
	defer fs.leave()
	rsc, err := fs.fs.Open(p)
	if err != nil {
		return nil, err
	}
	return gatef{rsc, fs.gate}, nil
}

func (fs gatefs) Lstat(p string) (os.FileInfo, error) {
	fs.enter()
	defer fs.leave()
	return fs.fs.Lstat(p)
}

func (fs gatefs) Stat(p string) (os.FileInfo, error) {
	fs.enter()
	defer fs.leave()
	return fs.fs.Stat(p)
}

func (fs gatefs) ReadDir(p string) ([]os.FileInfo, error) {
	fs.enter()
	defer fs.leave()
	return fs.fs.ReadDir(p)
}

type gatef struct {
	rsc vfs.ReadSeekCloser
	gate
}

func (f gatef) Read(p []byte) (n int, err error) {
	f.enter()
	defer f.leave()
	return f.rsc.Read(p)
}

func (f gatef) Seek(offset int64, whence int) (ret int64, err error) {
	f.enter()
	defer f.leave()
	return f.rsc.Seek(offset, whence)
}

func (f gatef) Close() error {
	f.enter()
	defer f.leave()
	return f.rsc.Close()
}
                                                                                                                                                                                               go/src/golang.org/x/tools/godoc/vfs/httpfs/                                                         0040755 0000000 0000000 00000000000 13101127475 017312  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/httpfs/httpfs.go                                                0100644 0000000 0000000 00000004176 13101127475 021156  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package httpfs implements http.FileSystem using a godoc vfs.FileSystem.
package httpfs // import "golang.org/x/tools/godoc/vfs/httpfs"

import (
	"fmt"
	"io"
	"net/http"
	"os"

	"golang.org/x/tools/godoc/vfs"
)

func New(fs vfs.FileSystem) http.FileSystem {
	return &httpFS{fs}
}

type httpFS struct {
	fs vfs.FileSystem
}

func (h *httpFS) Open(name string) (http.File, error) {
	fi, err := h.fs.Stat(name)
	if err != nil {
		return nil, err
	}
	if fi.IsDir() {
		return &httpDir{h.fs, name, nil}, nil
	}
	f, err := h.fs.Open(name)
	if err != nil {
		return nil, err
	}
	return &httpFile{h.fs, f, name}, nil
}

// httpDir implements http.File for a directory in a FileSystem.
type httpDir struct {
	fs      vfs.FileSystem
	name    string
	pending []os.FileInfo
}

func (h *httpDir) Close() error               { return nil }
func (h *httpDir) Stat() (os.FileInfo, error) { return h.fs.Stat(h.name) }
func (h *httpDir) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", h.name)
}

func (h *httpDir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == 0 {
		h.pending = nil
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", h.name)
}

func (h *httpDir) Readdir(count int) ([]os.FileInfo, error) {
	if h.pending == nil {
		d, err := h.fs.ReadDir(h.name)
		if err != nil {
			return nil, err
		}
		if d == nil {
			d = []os.FileInfo{} // not nil
		}
		h.pending = d
	}

	if len(h.pending) == 0 && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(h.pending) {
		count = len(h.pending)
	}
	d := h.pending[:count]
	h.pending = h.pending[count:]
	return d, nil
}

// httpFile implements http.File for a file (not directory) in a FileSystem.
type httpFile struct {
	fs vfs.FileSystem
	vfs.ReadSeekCloser
	name string
}

func (h *httpFile) Stat() (os.FileInfo, error) { return h.fs.Stat(h.name) }
func (h *httpFile) Readdir(int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", h.name)
}
                                                                                                                                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/godoc/vfs/mapfs/                                                          0040755 0000000 0000000 00000000000 13101127475 017110  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/mapfs/mapfs.go                                                  0100644 0000000 0000000 00000006347 13101127475 020554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package mapfs file provides an implementation of the FileSystem
// interface based on the contents of a map[string]string.
package mapfs // import "golang.org/x/tools/godoc/vfs/mapfs"

import (
	"io"
	"os"
	pathpkg "path"
	"sort"
	"strings"
	"time"

	"golang.org/x/tools/godoc/vfs"
)

// New returns a new FileSystem from the provided map.
// Map keys should be forward slash-separated pathnames
// and not contain a leading slash.
func New(m map[string]string) vfs.FileSystem {
	return mapFS(m)
}

// mapFS is the map based implementation of FileSystem
type mapFS map[string]string

func (fs mapFS) String() string { return "mapfs" }

func (fs mapFS) Close() error { return nil }

func filename(p string) string {
	return strings.TrimPrefix(p, "/")
}

func (fs mapFS) Open(p string) (vfs.ReadSeekCloser, error) {
	b, ok := fs[filename(p)]
	if !ok {
		return nil, os.ErrNotExist
	}
	return nopCloser{strings.NewReader(b)}, nil
}

func fileInfo(name, contents string) os.FileInfo {
	return mapFI{name: pathpkg.Base(name), size: len(contents)}
}

func dirInfo(name string) os.FileInfo {
	return mapFI{name: pathpkg.Base(name), dir: true}
}

func (fs mapFS) Lstat(p string) (os.FileInfo, error) {
	b, ok := fs[filename(p)]
	if ok {
		return fileInfo(p, b), nil
	}
	ents, _ := fs.ReadDir(p)
	if len(ents) > 0 {
		return dirInfo(p), nil
	}
	return nil, os.ErrNotExist
}

func (fs mapFS) Stat(p string) (os.FileInfo, error) {
	return fs.Lstat(p)
}

// slashdir returns path.Dir(p), but special-cases paths not beginning
// with a slash to be in the root.
func slashdir(p string) string {
	d := pathpkg.Dir(p)
	if d == "." {
		return "/"
	}
	if strings.HasPrefix(p, "/") {
		return d
	}
	return "/" + d
}

func (fs mapFS) ReadDir(p string) ([]os.FileInfo, error) {
	p = pathpkg.Clean(p)
	var ents []string
	fim := make(map[string]os.FileInfo) // base -> fi
	for fn, b := range fs {
		dir := slashdir(fn)
		isFile := true
		var lastBase string
		for {
			if dir == p {
				base := lastBase
				if isFile {
					base = pathpkg.Base(fn)
				}
				if fim[base] == nil {
					var fi os.FileInfo
					if isFile {
						fi = fileInfo(fn, b)
					} else {
						fi = dirInfo(base)
					}
					ents = append(ents, base)
					fim[base] = fi
				}
			}
			if dir == "/" {
				break
			} else {
				isFile = false
				lastBase = pathpkg.Base(dir)
				dir = pathpkg.Dir(dir)
			}
		}
	}
	if len(ents) == 0 {
		return nil, os.ErrNotExist
	}

	sort.Strings(ents)
	var list []os.FileInfo
	for _, dir := range ents {
		list = append(list, fim[dir])
	}
	return list, nil
}

// mapFI is the map-based implementation of FileInfo.
type mapFI struct {
	name string
	size int
	dir  bool
}

func (fi mapFI) IsDir() bool        { return fi.dir }
func (fi mapFI) ModTime() time.Time { return time.Time{} }
func (fi mapFI) Mode() os.FileMode {
	if fi.IsDir() {
		return 0755 | os.ModeDir
	}
	return 0444
}
func (fi mapFI) Name() string     { return pathpkg.Base(fi.name) }
func (fi mapFI) Size() int64      { return int64(fi.size) }
func (fi mapFI) Sys() interface{} { return nil }

type nopCloser struct {
	io.ReadSeeker
}

func (nc nopCloser) Close() error { return nil }
                                                                                                                                                                                                                                                                                         go/src/golang.org/x/tools/godoc/vfs/mapfs/mapfs_test.go                                             0100644 0000000 0000000 00000004420 13101127475 021601  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mapfs

import (
	"io/ioutil"
	"os"
	"reflect"
	"testing"
)

func TestOpenRoot(t *testing.T) {
	fs := New(map[string]string{
		"foo/bar/three.txt": "a",
		"foo/bar.txt":       "b",
		"top.txt":           "c",
		"other-top.txt":     "d",
	})
	tests := []struct {
		path string
		want string
	}{
		{"/foo/bar/three.txt", "a"},
		{"foo/bar/three.txt", "a"},
		{"foo/bar.txt", "b"},
		{"top.txt", "c"},
		{"/top.txt", "c"},
		{"other-top.txt", "d"},
		{"/other-top.txt", "d"},
	}
	for _, tt := range tests {
		rsc, err := fs.Open(tt.path)
		if err != nil {
			t.Errorf("Open(%q) = %v", tt.path, err)
			continue
		}
		slurp, err := ioutil.ReadAll(rsc)
		if err != nil {
			t.Error(err)
		}
		if string(slurp) != tt.want {
			t.Errorf("Read(%q) = %q; want %q", tt.path, tt.want, slurp)
		}
		rsc.Close()
	}

	_, err := fs.Open("/xxxx")
	if !os.IsNotExist(err) {
		t.Errorf("ReadDir /xxxx = %v; want os.IsNotExist error", err)
	}
}

func TestReaddir(t *testing.T) {
	fs := New(map[string]string{
		"foo/bar/three.txt": "333",
		"foo/bar.txt":       "22",
		"top.txt":           "top.txt file",
		"other-top.txt":     "other-top.txt file",
	})
	tests := []struct {
		dir  string
		want []os.FileInfo
	}{
		{
			dir: "/",
			want: []os.FileInfo{
				mapFI{name: "foo", dir: true},
				mapFI{name: "other-top.txt", size: len("other-top.txt file")},
				mapFI{name: "top.txt", size: len("top.txt file")},
			},
		},
		{
			dir: "/foo",
			want: []os.FileInfo{
				mapFI{name: "bar", dir: true},
				mapFI{name: "bar.txt", size: 2},
			},
		},
		{
			dir: "/foo/",
			want: []os.FileInfo{
				mapFI{name: "bar", dir: true},
				mapFI{name: "bar.txt", size: 2},
			},
		},
		{
			dir: "/foo/bar",
			want: []os.FileInfo{
				mapFI{name: "three.txt", size: 3},
			},
		},
	}
	for _, tt := range tests {
		fis, err := fs.ReadDir(tt.dir)
		if err != nil {
			t.Errorf("ReadDir(%q) = %v", tt.dir, err)
			continue
		}
		if !reflect.DeepEqual(fis, tt.want) {
			t.Errorf("ReadDir(%q) = %#v; want %#v", tt.dir, fis, tt.want)
			continue
		}
	}

	_, err := fs.ReadDir("/xxxx")
	if !os.IsNotExist(err) {
		t.Errorf("ReadDir /xxxx = %v; want os.IsNotExist error", err)
	}
}
                                                                                                                                                                                                                                                go/src/golang.org/x/tools/godoc/vfs/namespace.go                                                    0100644 0000000 0000000 00000025465 13101127476 020277  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package vfs

import (
	"fmt"
	"io"
	"os"
	pathpkg "path"
	"sort"
	"strings"
	"time"
)

// Setting debugNS = true will enable debugging prints about
// name space translations.
const debugNS = false

// A NameSpace is a file system made up of other file systems
// mounted at specific locations in the name space.
//
// The representation is a map from mount point locations
// to the list of file systems mounted at that location.  A traditional
// Unix mount table would use a single file system per mount point,
// but we want to be able to mount multiple file systems on a single
// mount point and have the system behave as if the union of those
// file systems were present at the mount point.
// For example, if the OS file system has a Go installation in
// c:\Go and additional Go path trees in  d:\Work1 and d:\Work2, then
// this name space creates the view we want for the godoc server:
//
//	NameSpace{
//		"/": {
//			{old: "/", fs: OS(`c:\Go`), new: "/"},
//		},
//		"/src/pkg": {
//			{old: "/src/pkg", fs: OS(`c:\Go`), new: "/src/pkg"},
//			{old: "/src/pkg", fs: OS(`d:\Work1`), new: "/src"},
//			{old: "/src/pkg", fs: OS(`d:\Work2`), new: "/src"},
//		},
//	}
//
// This is created by executing:
//
//	ns := NameSpace{}
//	ns.Bind("/", OS(`c:\Go`), "/", BindReplace)
//	ns.Bind("/src/pkg", OS(`d:\Work1`), "/src", BindAfter)
//	ns.Bind("/src/pkg", OS(`d:\Work2`), "/src", BindAfter)
//
// A particular mount point entry is a triple (old, fs, new), meaning that to
// operate on a path beginning with old, replace that prefix (old) with new
// and then pass that path to the FileSystem implementation fs.
//
// Given this name space, a ReadDir of /src/pkg/code will check each prefix
// of the path for a mount point (first /src/pkg/code, then /src/pkg, then /src,
// then /), stopping when it finds one.  For the above example, /src/pkg/code
// will find the mount point at /src/pkg:
//
//	{old: "/src/pkg", fs: OS(`c:\Go`), new: "/src/pkg"},
//	{old: "/src/pkg", fs: OS(`d:\Work1`), new: "/src"},
//	{old: "/src/pkg", fs: OS(`d:\Work2`), new: "/src"},
//
// ReadDir will when execute these three calls and merge the results:
//
//	OS(`c:\Go`).ReadDir("/src/pkg/code")
//	OS(`d:\Work1').ReadDir("/src/code")
//	OS(`d:\Work2').ReadDir("/src/code")
//
// Note that the "/src/pkg" in "/src/pkg/code" has been replaced by
// just "/src" in the final two calls.
//
// OS is itself an implementation of a file system: it implements
// OS(`c:\Go`).ReadDir("/src/pkg/code") as ioutil.ReadDir(`c:\Go\src\pkg\code`).
//
// Because the new path is evaluated by fs (here OS(root)), another way
// to read the mount table is to mentally combine fs+new, so that this table:
//
//	{old: "/src/pkg", fs: OS(`c:\Go`), new: "/src/pkg"},
//	{old: "/src/pkg", fs: OS(`d:\Work1`), new: "/src"},
//	{old: "/src/pkg", fs: OS(`d:\Work2`), new: "/src"},
//
// reads as:
//
//	"/src/pkg" -> c:\Go\src\pkg
//	"/src/pkg" -> d:\Work1\src
//	"/src/pkg" -> d:\Work2\src
//
// An invariant (a redundancy) of the name space representation is that
// ns[mtpt][i].old is always equal to mtpt (in the example, ns["/src/pkg"]'s
// mount table entries always have old == "/src/pkg").  The 'old' field is
// useful to callers, because they receive just a []mountedFS and not any
// other indication of which mount point was found.
//
type NameSpace map[string][]mountedFS

// A mountedFS handles requests for path by replacing
// a prefix 'old' with 'new' and then calling the fs methods.
type mountedFS struct {
	old string
	fs  FileSystem
	new string
}

// hasPathPrefix returns true if x == y or x == y + "/" + more
func hasPathPrefix(x, y string) bool {
	return x == y || strings.HasPrefix(x, y) && (strings.HasSuffix(y, "/") || strings.HasPrefix(x[len(y):], "/"))
}

// translate translates path for use in m, replacing old with new.
//
// mountedFS{"/src/pkg", fs, "/src"}.translate("/src/pkg/code") == "/src/code".
func (m mountedFS) translate(path string) string {
	path = pathpkg.Clean("/" + path)
	if !hasPathPrefix(path, m.old) {
		panic("translate " + path + " but old=" + m.old)
	}
	return pathpkg.Join(m.new, path[len(m.old):])
}

func (NameSpace) String() string {
	return "ns"
}

// Fprint writes a text representation of the name space to w.
func (ns NameSpace) Fprint(w io.Writer) {
	fmt.Fprint(w, "name space {\n")
	var all []string
	for mtpt := range ns {
		all = append(all, mtpt)
	}
	sort.Strings(all)
	for _, mtpt := range all {
		fmt.Fprintf(w, "\t%s:\n", mtpt)
		for _, m := range ns[mtpt] {
			fmt.Fprintf(w, "\t\t%s %s\n", m.fs, m.new)
		}
	}
	fmt.Fprint(w, "}\n")
}

// clean returns a cleaned, rooted path for evaluation.
// It canonicalizes the path so that we can use string operations
// to analyze it.
func (NameSpace) clean(path string) string {
	return pathpkg.Clean("/" + path)
}

type BindMode int

const (
	BindReplace BindMode = iota
	BindBefore
	BindAfter
)

// Bind causes references to old to redirect to the path new in newfs.
// If mode is BindReplace, old redirections are discarded.
// If mode is BindBefore, this redirection takes priority over existing ones,
// but earlier ones are still consulted for paths that do not exist in newfs.
// If mode is BindAfter, this redirection happens only after existing ones
// have been tried and failed.
func (ns NameSpace) Bind(old string, newfs FileSystem, new string, mode BindMode) {
	old = ns.clean(old)
	new = ns.clean(new)
	m := mountedFS{old, newfs, new}
	var mtpt []mountedFS
	switch mode {
	case BindReplace:
		mtpt = append(mtpt, m)
	case BindAfter:
		mtpt = append(mtpt, ns.resolve(old)...)
		mtpt = append(mtpt, m)
	case BindBefore:
		mtpt = append(mtpt, m)
		mtpt = append(mtpt, ns.resolve(old)...)
	}

	// Extend m.old, m.new in inherited mount point entries.
	for i := range mtpt {
		m := &mtpt[i]
		if m.old != old {
			if !hasPathPrefix(old, m.old) {
				// This should not happen.  If it does, panic so
				// that we can see the call trace that led to it.
				panic(fmt.Sprintf("invalid Bind: old=%q m={%q, %s, %q}", old, m.old, m.fs.String(), m.new))
			}
			suffix := old[len(m.old):]
			m.old = pathpkg.Join(m.old, suffix)
			m.new = pathpkg.Join(m.new, suffix)
		}
	}

	ns[old] = mtpt
}

// resolve resolves a path to the list of mountedFS to use for path.
func (ns NameSpace) resolve(path string) []mountedFS {
	path = ns.clean(path)
	for {
		if m := ns[path]; m != nil {
			if debugNS {
				fmt.Printf("resolve %s: %v\n", path, m)
			}
			return m
		}
		if path == "/" {
			break
		}
		path = pathpkg.Dir(path)
	}
	return nil
}

// Open implements the FileSystem Open method.
func (ns NameSpace) Open(path string) (ReadSeekCloser, error) {
	var err error
	for _, m := range ns.resolve(path) {
		if debugNS {
			fmt.Printf("tx %s: %v\n", path, m.translate(path))
		}
		r, err1 := m.fs.Open(m.translate(path))
		if err1 == nil {
			return r, nil
		}
		if err == nil {
			err = err1
		}
	}
	if err == nil {
		err = &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}
	return nil, err
}

// stat implements the FileSystem Stat and Lstat methods.
func (ns NameSpace) stat(path string, f func(FileSystem, string) (os.FileInfo, error)) (os.FileInfo, error) {
	var err error
	for _, m := range ns.resolve(path) {
		fi, err1 := f(m.fs, m.translate(path))
		if err1 == nil {
			return fi, nil
		}
		if err == nil {
			err = err1
		}
	}
	if err == nil {
		err = &os.PathError{Op: "stat", Path: path, Err: os.ErrNotExist}
	}
	return nil, err
}

func (ns NameSpace) Stat(path string) (os.FileInfo, error) {
	return ns.stat(path, FileSystem.Stat)
}

func (ns NameSpace) Lstat(path string) (os.FileInfo, error) {
	return ns.stat(path, FileSystem.Lstat)
}

// dirInfo is a trivial implementation of os.FileInfo for a directory.
type dirInfo string

func (d dirInfo) Name() string       { return string(d) }
func (d dirInfo) Size() int64        { return 0 }
func (d dirInfo) Mode() os.FileMode  { return os.ModeDir | 0555 }
func (d dirInfo) ModTime() time.Time { return startTime }
func (d dirInfo) IsDir() bool        { return true }
func (d dirInfo) Sys() interface{}   { return nil }

var startTime = time.Now()

// ReadDir implements the FileSystem ReadDir method.  It's where most of the magic is.
// (The rest is in resolve.)
//
// Logically, ReadDir must return the union of all the directories that are named
// by path.  In order to avoid misinterpreting Go packages, of all the directories
// that contain Go source code, we only include the files from the first,
// but we include subdirectories from all.
//
// ReadDir must also return directory entries needed to reach mount points.
// If the name space looks like the example in the type NameSpace comment,
// but c:\Go does not have a src/pkg subdirectory, we still want to be able
// to find that subdirectory, because we've mounted d:\Work1 and d:\Work2
// there.  So if we don't see "src" in the directory listing for c:\Go, we add an
// entry for it before returning.
//
func (ns NameSpace) ReadDir(path string) ([]os.FileInfo, error) {
	path = ns.clean(path)

	var (
		haveGo   = false
		haveName = map[string]bool{}
		all      []os.FileInfo
		err      error
		first    []os.FileInfo
	)

	for _, m := range ns.resolve(path) {
		dir, err1 := m.fs.ReadDir(m.translate(path))
		if err1 != nil {
			if err == nil {
				err = err1
			}
			continue
		}

		if dir == nil {
			dir = []os.FileInfo{}
		}

		if first == nil {
			first = dir
		}

		// If we don't yet have Go files in 'all' and this directory
		// has some, add all the files from this directory.
		// Otherwise, only add subdirectories.
		useFiles := false
		if !haveGo {
			for _, d := range dir {
				if strings.HasSuffix(d.Name(), ".go") {
					useFiles = true
					haveGo = true
					break
				}
			}
		}

		for _, d := range dir {
			name := d.Name()
			if (d.IsDir() || useFiles) && !haveName[name] {
				haveName[name] = true
				all = append(all, d)
			}
		}
	}

	// We didn't find any directories containing Go files.
	// If some directory returned successfully, use that.
	if !haveGo {
		for _, d := range first {
			if !haveName[d.Name()] {
				haveName[d.Name()] = true
				all = append(all, d)
			}
		}
	}

	// Built union.  Add any missing directories needed to reach mount points.
	for old := range ns {
		if hasPathPrefix(old, path) && old != path {
			// Find next element after path in old.
			elem := old[len(path):]
			elem = strings.TrimPrefix(elem, "/")
			if i := strings.Index(elem, "/"); i >= 0 {
				elem = elem[:i]
			}
			if !haveName[elem] {
				haveName[elem] = true
				all = append(all, dirInfo(elem))
			}
		}
	}

	if len(all) == 0 {
		return nil, err
	}

	sort.Sort(byName(all))
	return all, nil
}

// byName implements sort.Interface.
type byName []os.FileInfo

func (f byName) Len() int           { return len(f) }
func (f byName) Less(i, j int) bool { return f[i].Name() < f[j].Name() }
func (f byName) Swap(i, j int)      { f[i], f[j] = f[j], f[i] }
                                                                                                                                                                                                           go/src/golang.org/x/tools/godoc/vfs/os.go                                                           0100644 0000000 0000000 00000003234 13101127475 016751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package vfs

import (
	"fmt"
	"io/ioutil"
	"os"
	pathpkg "path"
	"path/filepath"
)

// OS returns an implementation of FileSystem reading from the
// tree rooted at root.  Recording a root is convenient everywhere
// but necessary on Windows, because the slash-separated path
// passed to Open has no way to specify a drive letter.  Using a root
// lets code refer to OS(`c:\`), OS(`d:\`) and so on.
func OS(root string) FileSystem {
	return osFS(root)
}

type osFS string

func (root osFS) String() string { return "os(" + string(root) + ")" }

func (root osFS) resolve(path string) string {
	// Clean the path so that it cannot possibly begin with ../.
	// If it did, the result of filepath.Join would be outside the
	// tree rooted at root.  We probably won't ever see a path
	// with .. in it, but be safe anyway.
	path = pathpkg.Clean("/" + path)

	return filepath.Join(string(root), path)
}

func (root osFS) Open(path string) (ReadSeekCloser, error) {
	f, err := os.Open(root.resolve(path))
	if err != nil {
		return nil, err
	}
	fi, err := f.Stat()
	if err != nil {
		f.Close()
		return nil, err
	}
	if fi.IsDir() {
		f.Close()
		return nil, fmt.Errorf("Open: %s is a directory", path)
	}
	return f, nil
}

func (root osFS) Lstat(path string) (os.FileInfo, error) {
	return os.Lstat(root.resolve(path))
}

func (root osFS) Stat(path string) (os.FileInfo, error) {
	return os.Stat(root.resolve(path))
}

func (root osFS) ReadDir(path string) ([]os.FileInfo, error) {
	return ioutil.ReadDir(root.resolve(path)) // is sorted
}
                                                                                                                                                                                                                                                                                                                                                                    go/src/golang.org/x/tools/godoc/vfs/vfs.go                                                          0100644 0000000 0000000 00000002270 13101127475 017125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package vfs defines types for abstract file system access and provides an
// implementation accessing the file system of the underlying OS.
package vfs // import "golang.org/x/tools/godoc/vfs"

import (
	"io"
	"io/ioutil"
	"os"
)

// The FileSystem interface specifies the methods godoc is using
// to access the file system for which it serves documentation.
type FileSystem interface {
	Opener
	Lstat(path string) (os.FileInfo, error)
	Stat(path string) (os.FileInfo, error)
	ReadDir(path string) ([]os.FileInfo, error)
	String() string
}

// Opener is a minimal virtual filesystem that can only open regular files.
type Opener interface {
	Open(name string) (ReadSeekCloser, error)
}

// A ReadSeekCloser can Read, Seek, and Close.
type ReadSeekCloser interface {
	io.Reader
	io.Seeker
	io.Closer
}

// ReadFile reads the file named by path from fs and returns the contents.
func ReadFile(fs Opener, path string) ([]byte, error) {
	rc, err := fs.Open(path)
	if err != nil {
		return nil, err
	}
	defer rc.Close()
	return ioutil.ReadAll(rc)
}
                                                                                                                                                                                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/zipfs/                                                          0040755 0000000 0000000 00000000000 13101127476 017136  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/godoc/vfs/zipfs/zipfs.go                                                  0100644 0000000 0000000 00000013302 13101127476 020614  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package zipfs file provides an implementation of the FileSystem
// interface based on the contents of a .zip file.
//
// Assumptions:
//
// - The file paths stored in the zip file must use a slash ('/') as path
//   separator; and they must be relative (i.e., they must not start with
//   a '/' - this is usually the case if the file was created w/o special
//   options).
// - The zip file system treats the file paths found in the zip internally
//   like absolute paths w/o a leading '/'; i.e., the paths are considered
//   relative to the root of the file system.
// - All path arguments to file system methods must be absolute paths.
package zipfs // import "golang.org/x/tools/godoc/vfs/zipfs"

import (
	"archive/zip"
	"fmt"
	"io"
	"os"
	"path"
	"sort"
	"strings"
	"time"

	"golang.org/x/tools/godoc/vfs"
)

// zipFI is the zip-file based implementation of FileInfo
type zipFI struct {
	name string    // directory-local name
	file *zip.File // nil for a directory
}

func (fi zipFI) Name() string {
	return fi.name
}

func (fi zipFI) Size() int64 {
	if f := fi.file; f != nil {
		return int64(f.UncompressedSize)
	}
	return 0 // directory
}

func (fi zipFI) ModTime() time.Time {
	if f := fi.file; f != nil {
		return f.ModTime()
	}
	return time.Time{} // directory has no modified time entry
}

func (fi zipFI) Mode() os.FileMode {
	if fi.file == nil {
		// Unix directories typically are executable, hence 555.
		return os.ModeDir | 0555
	}
	return 0444
}

func (fi zipFI) IsDir() bool {
	return fi.file == nil
}

func (fi zipFI) Sys() interface{} {
	return nil
}

// zipFS is the zip-file based implementation of FileSystem
type zipFS struct {
	*zip.ReadCloser
	list zipList
	name string
}

func (fs *zipFS) String() string {
	return "zip(" + fs.name + ")"
}

func (fs *zipFS) Close() error {
	fs.list = nil
	return fs.ReadCloser.Close()
}

func zipPath(name string) string {
	name = path.Clean(name)
	if !path.IsAbs(name) {
		panic(fmt.Sprintf("stat: not an absolute path: %s", name))
	}
	return name[1:] // strip leading '/'
}

func (fs *zipFS) stat(abspath string) (int, zipFI, error) {
	i, exact := fs.list.lookup(abspath)
	if i < 0 {
		// abspath has leading '/' stripped - print it explicitly
		return -1, zipFI{}, fmt.Errorf("file not found: /%s", abspath)
	}
	_, name := path.Split(abspath)
	var file *zip.File
	if exact {
		file = fs.list[i] // exact match found - must be a file
	}
	return i, zipFI{name, file}, nil
}

func (fs *zipFS) Open(abspath string) (vfs.ReadSeekCloser, error) {
	_, fi, err := fs.stat(zipPath(abspath))
	if err != nil {
		return nil, err
	}
	if fi.IsDir() {
		return nil, fmt.Errorf("Open: %s is a directory", abspath)
	}
	r, err := fi.file.Open()
	if err != nil {
		return nil, err
	}
	return &zipSeek{fi.file, r}, nil
}

type zipSeek struct {
	file *zip.File
	io.ReadCloser
}

func (f *zipSeek) Seek(offset int64, whence int) (int64, error) {
	if whence == 0 && offset == 0 {
		r, err := f.file.Open()
		if err != nil {
			return 0, err
		}
		f.Close()
		f.ReadCloser = r
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in %s", f.file.Name)
}

func (fs *zipFS) Lstat(abspath string) (os.FileInfo, error) {
	_, fi, err := fs.stat(zipPath(abspath))
	return fi, err
}

func (fs *zipFS) Stat(abspath string) (os.FileInfo, error) {
	_, fi, err := fs.stat(zipPath(abspath))
	return fi, err
}

func (fs *zipFS) ReadDir(abspath string) ([]os.FileInfo, error) {
	path := zipPath(abspath)
	i, fi, err := fs.stat(path)
	if err != nil {
		return nil, err
	}
	if !fi.IsDir() {
		return nil, fmt.Errorf("ReadDir: %s is not a directory", abspath)
	}

	var list []os.FileInfo
	dirname := path + "/"
	prevname := ""
	for _, e := range fs.list[i:] {
		if !strings.HasPrefix(e.Name, dirname) {
			break // not in the same directory anymore
		}
		name := e.Name[len(dirname):] // local name
		file := e
		if i := strings.IndexRune(name, '/'); i >= 0 {
			// We infer directories from files in subdirectories.
			// If we have x/y, return a directory entry for x.
			name = name[0:i] // keep local directory name only
			file = nil
		}
		// If we have x/y and x/z, don't return two directory entries for x.
		// TODO(gri): It should be possible to do this more efficiently
		// by determining the (fs.list) range of local directory entries
		// (via two binary searches).
		if name != prevname {
			list = append(list, zipFI{name, file})
			prevname = name
		}
	}

	return list, nil
}

func New(rc *zip.ReadCloser, name string) vfs.FileSystem {
	list := make(zipList, len(rc.File))
	copy(list, rc.File) // sort a copy of rc.File
	sort.Sort(list)
	return &zipFS{rc, list, name}
}

type zipList []*zip.File

// zipList implements sort.Interface
func (z zipList) Len() int           { return len(z) }
func (z zipList) Less(i, j int) bool { return z[i].Name < z[j].Name }
func (z zipList) Swap(i, j int)      { z[i], z[j] = z[j], z[i] }

// lookup returns the smallest index of an entry with an exact match
// for name, or an inexact match starting with name/. If there is no
// such entry, the result is -1, false.
func (z zipList) lookup(name string) (index int, exact bool) {
	// look for exact match first (name comes before name/ in z)
	i := sort.Search(len(z), func(i int) bool {
		return name <= z[i].Name
	})
	if i >= len(z) {
		return -1, false
	}
	// 0 <= i < len(z)
	if z[i].Name == name {
		return i, true
	}

	// look for inexact match (must be in z[i:], if present)
	z = z[i:]
	name += "/"
	j := sort.Search(len(z), func(i int) bool {
		return name <= z[i].Name
	})
	if j >= len(z) {
		return -1, false
	}
	// 0 <= j < len(z)
	if strings.HasPrefix(z[j].Name, name) {
		return i + j, false
	}

	return -1, false
}
                                                                                                                                                                                                                                                                                                                              go/src/golang.org/x/tools/imports/                                                                  0040755 0000000 0000000 00000000000 13101127476 015607  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/imports/fix.go                                                            0100644 0000000 0000000 00000023421 13101127476 016723  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package imports

import (
	"fmt"
	"go/ast"
	"go/build"
	"go/parser"
	"go/token"
	"os"
	"path"
	"path/filepath"
	"strings"
	"sync"

	"golang.org/x/tools/go/ast/astutil"
)

// importToGroup is a list of functions which map from an import path to
// a group number.
var importToGroup = []func(importPath string) (num int, ok bool){
	func(importPath string) (num int, ok bool) {
		if strings.HasPrefix(importPath, "appengine") {
			return 2, true
		}
		return
	},
	func(importPath string) (num int, ok bool) {
		if strings.Contains(importPath, ".") {
			return 1, true
		}
		return
	},
}

func importGroup(importPath string) int {
	for _, fn := range importToGroup {
		if n, ok := fn(importPath); ok {
			return n
		}
	}
	return 0
}

func fixImports(fset *token.FileSet, f *ast.File) (added []string, err error) {
	// refs are a set of possible package references currently unsatisfied by imports.
	// first key: either base package (e.g. "fmt") or renamed package
	// second key: referenced package symbol (e.g. "Println")
	refs := make(map[string]map[string]bool)

	// decls are the current package imports. key is base package or renamed package.
	decls := make(map[string]*ast.ImportSpec)

	// collect potential uses of packages.
	var visitor visitFn
	visitor = visitFn(func(node ast.Node) ast.Visitor {
		if node == nil {
			return visitor
		}
		switch v := node.(type) {
		case *ast.ImportSpec:
			if v.Name != nil {
				decls[v.Name.Name] = v
			} else {
				local := importPathToName(strings.Trim(v.Path.Value, `\"`))
				decls[local] = v
			}
		case *ast.SelectorExpr:
			xident, ok := v.X.(*ast.Ident)
			if !ok {
				break
			}
			if xident.Obj != nil {
				// if the parser can resolve it, it's not a package ref
				break
			}
			pkgName := xident.Name
			if refs[pkgName] == nil {
				refs[pkgName] = make(map[string]bool)
			}
			if decls[pkgName] == nil {
				refs[pkgName][v.Sel.Name] = true
			}
		}
		return visitor
	})
	ast.Walk(visitor, f)

	// Nil out any unused ImportSpecs, to be removed in following passes
	unusedImport := map[string]bool{}
	for pkg, is := range decls {
		if refs[pkg] == nil && pkg != "_" && pkg != "." {
			unusedImport[strings.Trim(is.Path.Value, `"`)] = true
		}
	}
	for ipath := range unusedImport {
		if ipath == "C" {
			// Don't remove cgo stuff.
			continue
		}
		astutil.DeleteImport(fset, f, ipath)
	}

	// Search for imports matching potential package references.
	searches := 0
	type result struct {
		ipath string
		name  string
		err   error
	}
	results := make(chan result)
	for pkgName, symbols := range refs {
		if len(symbols) == 0 {
			continue // skip over packages already imported
		}
		go func(pkgName string, symbols map[string]bool) {
			ipath, rename, err := findImport(pkgName, symbols)
			r := result{ipath: ipath, err: err}
			if rename {
				r.name = pkgName
			}
			results <- r
		}(pkgName, symbols)
		searches++
	}
	for i := 0; i < searches; i++ {
		result := <-results
		if result.err != nil {
			return nil, result.err
		}
		if result.ipath != "" {
			if result.name != "" {
				astutil.AddNamedImport(fset, f, result.name, result.ipath)
			} else {
				astutil.AddImport(fset, f, result.ipath)
			}
			added = append(added, result.ipath)
		}
	}

	return added, nil
}

// importPathToName returns the package name for the given import path.
var importPathToName = importPathToNameGoPath

// importPathToNameBasic assumes the package name is the base of import path.
func importPathToNameBasic(importPath string) (packageName string) {
	return path.Base(importPath)
}

// importPathToNameGoPath finds out the actual package name, as declared in its .go files.
// If there's a problem, it falls back to using importPathToNameBasic.
func importPathToNameGoPath(importPath string) (packageName string) {
	if buildPkg, err := build.Import(importPath, "", 0); err == nil {
		return buildPkg.Name
	} else {
		return importPathToNameBasic(importPath)
	}
}

type pkg struct {
	importpath string // full pkg import path, e.g. "net/http"
	dir        string // absolute file path to pkg directory e.g. "/usr/lib/go/src/fmt"
}

var pkgIndexOnce sync.Once

var pkgIndex struct {
	sync.Mutex
	m map[string][]pkg // shortname => []pkg, e.g "http" => "net/http"
}

// gate is a semaphore for limiting concurrency.
type gate chan struct{}

func (g gate) enter() { g <- struct{}{} }
func (g gate) leave() { <-g }

// fsgate protects the OS & filesystem from too much concurrency.
// Too much disk I/O -> too many threads -> swapping and bad scheduling.
var fsgate = make(gate, 8)

func loadPkgIndex() {
	pkgIndex.Lock()
	pkgIndex.m = make(map[string][]pkg)
	pkgIndex.Unlock()

	var wg sync.WaitGroup
	for _, path := range build.Default.SrcDirs() {
		fsgate.enter()
		f, err := os.Open(path)
		if err != nil {
			fsgate.leave()
			fmt.Fprint(os.Stderr, err)
			continue
		}
		children, err := f.Readdir(-1)
		f.Close()
		fsgate.leave()
		if err != nil {
			fmt.Fprint(os.Stderr, err)
			continue
		}
		for _, child := range children {
			if child.IsDir() {
				wg.Add(1)
				go func(path, name string) {
					defer wg.Done()
					loadPkg(&wg, path, name)
				}(path, child.Name())
			}
		}
	}
	wg.Wait()
}

func loadPkg(wg *sync.WaitGroup, root, pkgrelpath string) {
	importpath := filepath.ToSlash(pkgrelpath)
	dir := filepath.Join(root, importpath)

	fsgate.enter()
	defer fsgate.leave()
	pkgDir, err := os.Open(dir)
	if err != nil {
		return
	}
	children, err := pkgDir.Readdir(-1)
	pkgDir.Close()
	if err != nil {
		return
	}
	// hasGo tracks whether a directory actually appears to be a
	// Go source code directory. If $GOPATH == $HOME, and
	// $HOME/src has lots of other large non-Go projects in it,
	// then the calls to importPathToName below can be expensive.
	hasGo := false
	for _, child := range children {
		// Avoid .foo, _foo, and testdata directory trees.
		name := child.Name()
		if name == "" || name[0] == '.' || name[0] == '_' || name == "testdata" {
			continue
		}
		if strings.HasSuffix(name, ".go") {
			hasGo = true
		}
		if child.IsDir() {
			wg.Add(1)
			go func(root, name string) {
				defer wg.Done()
				loadPkg(wg, root, name)
			}(root, filepath.Join(importpath, name))
		}
	}
	if hasGo {
		shortName := importPathToName(importpath)
		pkgIndex.Lock()
		pkgIndex.m[shortName] = append(pkgIndex.m[shortName], pkg{
			importpath: importpath,
			dir:        dir,
		})
		pkgIndex.Unlock()
	}

}

// loadExports returns a list exports for a package.
var loadExports = loadExportsGoPath

func loadExportsGoPath(dir string) map[string]bool {
	exports := make(map[string]bool)
	buildPkg, err := build.ImportDir(dir, 0)
	if err != nil {
		if strings.Contains(err.Error(), "no buildable Go source files in") {
			return nil
		}
		fmt.Fprintf(os.Stderr, "could not import %q: %v\n", dir, err)
		return nil
	}
	fset := token.NewFileSet()
	for _, files := range [...][]string{buildPkg.GoFiles, buildPkg.CgoFiles} {
		for _, file := range files {
			f, err := parser.ParseFile(fset, filepath.Join(dir, file), nil, 0)
			if err != nil {
				fmt.Fprintf(os.Stderr, "could not parse %q: %v\n", file, err)
				continue
			}
			for name := range f.Scope.Objects {
				if ast.IsExported(name) {
					exports[name] = true
				}
			}
		}
	}
	return exports
}

// findImport searches for a package with the given symbols.
// If no package is found, findImport returns "".
// Declared as a variable rather than a function so goimports can be easily
// extended by adding a file with an init function.
var findImport = findImportGoPath

func findImportGoPath(pkgName string, symbols map[string]bool) (string, bool, error) {
	// Fast path for the standard library.
	// In the common case we hopefully never have to scan the GOPATH, which can
	// be slow with moving disks.
	if pkg, rename, ok := findImportStdlib(pkgName, symbols); ok {
		return pkg, rename, nil
	}

	// TODO(sameer): look at the import lines for other Go files in the
	// local directory, since the user is likely to import the same packages
	// in the current Go file.  Return rename=true when the other Go files
	// use a renamed package that's also used in the current file.

	pkgIndexOnce.Do(loadPkgIndex)

	// Collect exports for packages with matching names.
	var wg sync.WaitGroup
	var pkgsMu sync.Mutex // guards pkgs
	// full importpath => exported symbol => True
	// e.g. "net/http" => "Client" => True
	pkgs := make(map[string]map[string]bool)
	pkgIndex.Lock()
	for _, pkg := range pkgIndex.m[pkgName] {
		wg.Add(1)
		go func(importpath, dir string) {
			defer wg.Done()
			exports := loadExports(dir)
			if exports != nil {
				pkgsMu.Lock()
				pkgs[importpath] = exports
				pkgsMu.Unlock()
			}
		}(pkg.importpath, pkg.dir)
	}
	pkgIndex.Unlock()
	wg.Wait()

	// Filter out packages missing required exported symbols.
	for symbol := range symbols {
		for importpath, exports := range pkgs {
			if !exports[symbol] {
				delete(pkgs, importpath)
			}
		}
	}
	if len(pkgs) == 0 {
		return "", false, nil
	}

	// If there are multiple candidate packages, the shortest one wins.
	// This is a heuristic to prefer the standard library (e.g. "bytes")
	// over e.g. "github.com/foo/bar/bytes".
	shortest := ""
	for importPath := range pkgs {
		if shortest == "" || len(importPath) < len(shortest) {
			shortest = importPath
		}
	}
	return shortest, false, nil
}

type visitFn func(node ast.Node) ast.Visitor

func (fn visitFn) Visit(node ast.Node) ast.Visitor {
	return fn(node)
}

func findImportStdlib(shortPkg string, symbols map[string]bool) (importPath string, rename, ok bool) {
	for symbol := range symbols {
		path := stdlib[shortPkg+"."+symbol]
		if path == "" {
			return "", false, false
		}
		if importPath != "" && importPath != path {
			// Ambiguous. Symbols pointed to different things.
			return "", false, false
		}
		importPath = path
	}
	return importPath, false, importPath != ""
}
                                                                                                                                                                                                                                               go/src/golang.org/x/tools/imports/fix_test.go                                                       0100644 0000000 0000000 00000030056 13101127476 017764  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package imports

import (
	"flag"
	"go/build"
	"io/ioutil"
	"os"
	"path/filepath"
	"sync"
	"testing"
)

var only = flag.String("only", "", "If non-empty, the fix test to run")

var tests = []struct {
	name    string
	in, out string
}{
	// Adding an import to an existing parenthesized import
	{
		name: "factored_imports_add",
		in: `package foo
import (
  "fmt"
)
func bar() {
var b bytes.Buffer
fmt.Println(b.String())
}
`,
		out: `package foo

import (
	"bytes"
	"fmt"
)

func bar() {
	var b bytes.Buffer
	fmt.Println(b.String())
}
`,
	},

	// Adding an import to an existing parenthesized import,
	// verifying it goes into the first section.
	{
		name: "factored_imports_add_first_sec",
		in: `package foo
import (
  "fmt"

  "appengine"
)
func bar() {
var b bytes.Buffer
_ = appengine.IsDevServer
fmt.Println(b.String())
}
`,
		out: `package foo

import (
	"bytes"
	"fmt"

	"appengine"
)

func bar() {
	var b bytes.Buffer
	_ = appengine.IsDevServer
	fmt.Println(b.String())
}
`,
	},

	// Adding an import to an existing parenthesized import,
	// verifying it goes into the first section. (test 2)
	{
		name: "factored_imports_add_first_sec_2",
		in: `package foo
import (
  "fmt"

  "appengine"
)
func bar() {
_ = math.NaN
_ = fmt.Sprintf
_ = appengine.IsDevServer
}
`,
		out: `package foo

import (
	"fmt"
	"math"

	"appengine"
)

func bar() {
	_ = math.NaN
	_ = fmt.Sprintf
	_ = appengine.IsDevServer
}
`,
	},

	// Adding a new import line, without parens
	{
		name: "add_import_section",
		in: `package foo
func bar() {
var b bytes.Buffer
}
`,
		out: `package foo

import "bytes"

func bar() {
	var b bytes.Buffer
}
`,
	},

	// Adding two new imports, which should make a parenthesized import decl.
	{
		name: "add_import_paren_section",
		in: `package foo
func bar() {
_, _ := bytes.Buffer, zip.NewReader
}
`,
		out: `package foo

import (
	"archive/zip"
	"bytes"
)

func bar() {
	_, _ := bytes.Buffer, zip.NewReader
}
`,
	},

	// Make sure we don't add things twice
	{
		name: "no_double_add",
		in: `package foo
func bar() {
_, _ := bytes.Buffer, bytes.NewReader
}
`,
		out: `package foo

import "bytes"

func bar() {
	_, _ := bytes.Buffer, bytes.NewReader
}
`,
	},

	// Remove unused imports, 1 of a factored block
	{
		name: "remove_unused_1_of_2",
		in: `package foo
import (
"bytes"
"fmt"
)

func bar() {
_, _ := bytes.Buffer, bytes.NewReader
}
`,
		out: `package foo

import "bytes"

func bar() {
	_, _ := bytes.Buffer, bytes.NewReader
}
`,
	},

	// Remove unused imports, 2 of 2
	{
		name: "remove_unused_2_of_2",
		in: `package foo
import (
"bytes"
"fmt"
)

func bar() {
}
`,
		out: `package foo

func bar() {
}
`,
	},

	// Remove unused imports, 1 of 1
	{
		name: "remove_unused_1_of_1",
		in: `package foo

import "fmt"

func bar() {
}
`,
		out: `package foo

func bar() {
}
`,
	},

	// Don't remove empty imports.
	{
		name: "dont_remove_empty_imports",
		in: `package foo
import (
_ "image/png"
_ "image/jpeg"
)
`,
		out: `package foo

import (
	_ "image/jpeg"
	_ "image/png"
)
`,
	},

	// Don't remove dot imports.
	{
		name: "dont_remove_dot_imports",
		in: `package foo
import (
. "foo"
. "bar"
)
`,
		out: `package foo

import (
	. "bar"
	. "foo"
)
`,
	},

	// Skip refs the parser can resolve.
	{
		name: "skip_resolved_refs",
		in: `package foo

func f() {
	type t struct{ Println func(string) }
	fmt := t{Println: func(string) {}}
	fmt.Println("foo")
}
`,
		out: `package foo

func f() {
	type t struct{ Println func(string) }
	fmt := t{Println: func(string) {}}
	fmt.Println("foo")
}
`,
	},

	// Do not add a package we already have a resolution for.
	{
		name: "skip_template",
		in: `package foo

import "html/template"

func f() { t = template.New("sometemplate") }
`,
		out: `package foo

import "html/template"

func f() { t = template.New("sometemplate") }
`,
	},

	// Don't touch cgo
	{
		name: "cgo",
		in: `package foo

/*
#include <foo.h>
*/
import "C"
`,
		out: `package foo

/*
#include <foo.h>
*/
import "C"
`,
	},

	// Put some things in their own section
	{
		name: "make_sections",
		in: `package foo

import (
"os"
)

func foo () {
_, _ = os.Args, fmt.Println
_, _ = appengine.FooSomething, user.Current
}
`,
		out: `package foo

import (
	"fmt"
	"os"

	"appengine"
	"appengine/user"
)

func foo() {
	_, _ = os.Args, fmt.Println
	_, _ = appengine.FooSomething, user.Current
}
`,
	},

	// Delete existing empty import block
	{
		name: "delete_empty_import_block",
		in: `package foo

import ()
`,
		out: `package foo
`,
	},

	// Use existing empty import block
	{
		name: "use_empty_import_block",
		in: `package foo

import ()

func f() {
	_ = fmt.Println
}
`,
		out: `package foo

import "fmt"

func f() {
	_ = fmt.Println
}
`,
	},

	// Blank line before adding new section.
	{
		name: "blank_line_before_new_group",
		in: `package foo

import (
	"fmt"
	"net"
)

func f() {
	_ = net.Dial
	_ = fmt.Printf
	_ = snappy.Foo
}
`,
		out: `package foo

import (
	"fmt"
	"net"

	"code.google.com/p/snappy-go/snappy"
)

func f() {
	_ = net.Dial
	_ = fmt.Printf
	_ = snappy.Foo
}
`,
	},

	// Blank line between standard library and third-party stuff.
	{
		name: "blank_line_separating_std_and_third_party",
		in: `package foo

import (
	"code.google.com/p/snappy-go/snappy"
	"fmt"
	"net"
)

func f() {
	_ = net.Dial
	_ = fmt.Printf
	_ = snappy.Foo
}
`,
		out: `package foo

import (
	"fmt"
	"net"

	"code.google.com/p/snappy-go/snappy"
)

func f() {
	_ = net.Dial
	_ = fmt.Printf
	_ = snappy.Foo
}
`,
	},

	// golang.org/issue/6884
	{
		name: "issue 6884",
		in: `package main

// A comment
func main() {
	fmt.Println("Hello, world")
}
`,
		out: `package main

import "fmt"

// A comment
func main() {
	fmt.Println("Hello, world")
}
`,
	},

	// golang.org/issue/7132
	{
		name: "issue 7132",
		in: `package main

import (
"fmt"

"gu"
"github.com/foo/bar"
)

var (
a = bar.a
b = gu.a
c = fmt.Printf
)
`,
		out: `package main

import (
	"fmt"

	"gu"

	"github.com/foo/bar"
)

var (
	a = bar.a
	b = gu.a
	c = fmt.Printf
)
`,
	},

	{
		name: "renamed package",
		in: `package main

var _ = str.HasPrefix
`,
		out: `package main

import str "strings"

var _ = str.HasPrefix
`,
	},

	{
		name: "fragment with main",
		in:   `func main(){fmt.Println("Hello, world")}`,
		out: `package main

import "fmt"

func main() { fmt.Println("Hello, world") }
`,
	},

	{
		name: "fragment without main",
		in:   `func notmain(){fmt.Println("Hello, world")}`,
		out: `import "fmt"

func notmain() { fmt.Println("Hello, world") }`,
	},

	// Remove first import within in a 2nd/3rd/4th/etc. section.
	// golang.org/issue/7679
	{
		name: "issue 7679",
		in: `package main

import (
	"fmt"

	"github.com/foo/bar"
	"github.com/foo/qux"
)

func main() {
	var _ = fmt.Println
	//var _ = bar.A
	var _ = qux.B
}
`,
		out: `package main

import (
	"fmt"

	"github.com/foo/qux"
)

func main() {
	var _ = fmt.Println
	//var _ = bar.A
	var _ = qux.B
}
`,
	},

	// Blank line can be added before all types of import declarations.
	// golang.org/issue/7866
	{
		name: "issue 7866",
		in: `package main

import (
	"fmt"
	renamed_bar "github.com/foo/bar"

	. "github.com/foo/baz"
	"io"

	_ "github.com/foo/qux"
	"strings"
)

func main() {
	_, _, _, _, _ = fmt.Errorf, io.Copy, strings.Contains, renamed_bar.A, B
}
`,
		out: `package main

import (
	"fmt"

	renamed_bar "github.com/foo/bar"

	"io"

	. "github.com/foo/baz"

	"strings"

	_ "github.com/foo/qux"
)

func main() {
	_, _, _, _, _ = fmt.Errorf, io.Copy, strings.Contains, renamed_bar.A, B
}
`,
	},

	// Non-idempotent comment formatting
	// golang.org/issue/8035
	{
		name: "issue 8035",
		in: `package main

import (
	"fmt"                     // A
	"go/ast"                  // B
	_ "launchpad.net/gocheck" // C
)

func main() { _, _ = fmt.Print, ast.Walk }
`,
		out: `package main

import (
	"fmt"    // A
	"go/ast" // B

	_ "launchpad.net/gocheck" // C
)

func main() { _, _ = fmt.Print, ast.Walk }
`,
	},

	// Failure to delete all duplicate imports
	// golang.org/issue/8459
	{
		name: "issue 8459",
		in: `package main

import (
	"fmt"
	"log"
	"log"
	"math"
)

func main() { fmt.Println("pi:", math.Pi) }
`,
		out: `package main

import (
	"fmt"
	"math"
)

func main() { fmt.Println("pi:", math.Pi) }
`,
	},

	// Too aggressive prefix matching
	// golang.org/issue/9961
	{
		name: "issue 9961",
		in: `package p

import (
	"zip"

	"rsc.io/p"
)

var (
	_ = fmt.Print
	_ = zip.Store
	_ p.P
	_ = regexp.Compile
)
`,
		out: `package p

import (
	"fmt"
	"regexp"
	"zip"

	"rsc.io/p"
)

var (
	_ = fmt.Print
	_ = zip.Store
	_ p.P
	_ = regexp.Compile
)
`,
	},

	// Unused named import is mistaken for unnamed import
	// golang.org/issue/8149
	{
		name: "issue 8149",
		in: `package main

import foo "fmt"

func main() { fmt.Println() }
`,
		out: `package main

import "fmt"

func main() { fmt.Println() }
`,
	},
}

func TestFixImports(t *testing.T) {
	simplePkgs := map[string]string{
		"appengine": "appengine",
		"bytes":     "bytes",
		"fmt":       "fmt",
		"math":      "math",
		"os":        "os",
		"p":         "rsc.io/p",
		"regexp":    "regexp",
		"snappy":    "code.google.com/p/snappy-go/snappy",
		"str":       "strings",
		"user":      "appengine/user",
		"zip":       "archive/zip",
	}
	findImport = func(pkgName string, symbols map[string]bool) (string, bool, error) {
		return simplePkgs[pkgName], pkgName == "str", nil
	}

	options := &Options{
		TabWidth:  8,
		TabIndent: true,
		Comments:  true,
		Fragment:  true,
	}

	for _, tt := range tests {
		if *only != "" && tt.name != *only {
			continue
		}
		buf, err := Process(tt.name+".go", []byte(tt.in), options)
		if err != nil {
			t.Errorf("error on %q: %v", tt.name, err)
			continue
		}
		if got := string(buf); got != tt.out {
			t.Errorf("results diff on %q\nGOT:\n%s\nWANT:\n%s\n", tt.name, got, tt.out)
		}
	}
}

func TestFindImportGoPath(t *testing.T) {
	goroot, err := ioutil.TempDir("", "goimports-")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(goroot)

	pkgIndexOnce = sync.Once{}

	origStdlib := stdlib
	defer func() {
		stdlib = origStdlib
	}()
	stdlib = nil

	// Test against imaginary bits/bytes package in std lib
	bytesDir := filepath.Join(goroot, "src", "pkg", "bits", "bytes")
	for _, tag := range build.Default.ReleaseTags {
		// Go 1.4 rearranged the GOROOT tree to remove the "pkg" path component.
		if tag == "go1.4" {
			bytesDir = filepath.Join(goroot, "src", "bits", "bytes")
		}
	}
	if err := os.MkdirAll(bytesDir, 0755); err != nil {
		t.Fatal(err)
	}
	bytesSrcPath := filepath.Join(bytesDir, "bytes.go")
	bytesPkgPath := "bits/bytes"
	bytesSrc := []byte(`package bytes

type Buffer2 struct {}
`)
	if err := ioutil.WriteFile(bytesSrcPath, bytesSrc, 0775); err != nil {
		t.Fatal(err)
	}
	oldGOROOT := build.Default.GOROOT
	oldGOPATH := build.Default.GOPATH
	build.Default.GOROOT = goroot
	build.Default.GOPATH = ""
	defer func() {
		build.Default.GOROOT = oldGOROOT
		build.Default.GOPATH = oldGOPATH
	}()

	got, rename, err := findImportGoPath("bytes", map[string]bool{"Buffer2": true})
	if err != nil {
		t.Fatal(err)
	}
	if got != bytesPkgPath || rename {
		t.Errorf(`findImportGoPath("bytes", Buffer2 ...)=%q, %t, want "%s", false`, got, rename, bytesPkgPath)
	}

	got, rename, err = findImportGoPath("bytes", map[string]bool{"Missing": true})
	if err != nil {
		t.Fatal(err)
	}
	if got != "" || rename {
		t.Errorf(`findImportGoPath("bytes", Missing ...)=%q, %t, want "", false`, got, rename)
	}
}

func TestFindImportStdlib(t *testing.T) {
	tests := []struct {
		pkg     string
		symbols []string
		want    string
	}{
		{"http", []string{"Get"}, "net/http"},
		{"http", []string{"Get", "Post"}, "net/http"},
		{"http", []string{"Get", "Foo"}, ""},
		{"bytes", []string{"Buffer"}, "bytes"},
		{"ioutil", []string{"Discard"}, "io/ioutil"},
	}
	for _, tt := range tests {
		got, rename, ok := findImportStdlib(tt.pkg, strSet(tt.symbols))
		if (got != "") != ok {
			t.Error("findImportStdlib return value inconsistent")
		}
		if got != tt.want || rename {
			t.Errorf("findImportStdlib(%q, %q) = %q, %t; want %q, false", tt.pkg, tt.symbols, got, rename, tt.want)
		}
	}
}

func strSet(ss []string) map[string]bool {
	m := make(map[string]bool)
	for _, s := range ss {
		m[s] = true
	}
	return m
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/imports/imports.go                                                        0100644 0000000 0000000 00000016736 13101127476 017645  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package imports implements a Go pretty-printer (like package "go/format")
// that also adds or removes import statements as necessary.
package imports // import "golang.org/x/tools/imports"

import (
	"bufio"
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/printer"
	"go/token"
	"io"
	"regexp"
	"strconv"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
)

// Options specifies options for processing files.
type Options struct {
	Fragment  bool // Accept fragment of a source file (no package statement)
	AllErrors bool // Report all errors (not just the first 10 on different lines)

	Comments  bool // Print comments (true if nil *Options provided)
	TabIndent bool // Use tabs for indent (true if nil *Options provided)
	TabWidth  int  // Tab width (8 if nil *Options provided)
}

// Process formats and adjusts imports for the provided file.
// If opt is nil the defaults are used.
func Process(filename string, src []byte, opt *Options) ([]byte, error) {
	if opt == nil {
		opt = &Options{Comments: true, TabIndent: true, TabWidth: 8}
	}

	fileSet := token.NewFileSet()
	file, adjust, err := parse(fileSet, filename, src, opt)
	if err != nil {
		return nil, err
	}

	_, err = fixImports(fileSet, file)
	if err != nil {
		return nil, err
	}

	sortImports(fileSet, file)
	imps := astutil.Imports(fileSet, file)

	var spacesBefore []string // import paths we need spaces before
	for _, impSection := range imps {
		// Within each block of contiguous imports, see if any
		// import lines are in different group numbers. If so,
		// we'll need to put a space between them so it's
		// compatible with gofmt.
		lastGroup := -1
		for _, importSpec := range impSection {
			importPath, _ := strconv.Unquote(importSpec.Path.Value)
			groupNum := importGroup(importPath)
			if groupNum != lastGroup && lastGroup != -1 {
				spacesBefore = append(spacesBefore, importPath)
			}
			lastGroup = groupNum
		}

	}

	printerMode := printer.UseSpaces
	if opt.TabIndent {
		printerMode |= printer.TabIndent
	}
	printConfig := &printer.Config{Mode: printerMode, Tabwidth: opt.TabWidth}

	var buf bytes.Buffer
	err = printConfig.Fprint(&buf, fileSet, file)
	if err != nil {
		return nil, err
	}
	out := buf.Bytes()
	if adjust != nil {
		out = adjust(src, out)
	}
	if len(spacesBefore) > 0 {
		out = addImportSpaces(bytes.NewReader(out), spacesBefore)
	}

	out, err = format.Source(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// parse parses src, which was read from filename,
// as a Go source file or statement list.
func parse(fset *token.FileSet, filename string, src []byte, opt *Options) (*ast.File, func(orig, src []byte) []byte, error) {
	parserMode := parser.Mode(0)
	if opt.Comments {
		parserMode |= parser.ParseComments
	}
	if opt.AllErrors {
		parserMode |= parser.AllErrors
	}

	// Try as whole source file.
	file, err := parser.ParseFile(fset, filename, src, parserMode)
	if err == nil {
		return file, nil, nil
	}
	// If the error is that the source file didn't begin with a
	// package line and we accept fragmented input, fall through to
	// try as a source fragment.  Stop and return on any other error.
	if !opt.Fragment || !strings.Contains(err.Error(), "expected 'package'") {
		return nil, nil, err
	}

	// If this is a declaration list, make it a source file
	// by inserting a package clause.
	// Insert using a ;, not a newline, so that the line numbers
	// in psrc match the ones in src.
	psrc := append([]byte("package main;"), src...)
	file, err = parser.ParseFile(fset, filename, psrc, parserMode)
	if err == nil {
		// If a main function exists, we will assume this is a main
		// package and leave the file.
		if containsMainFunc(file) {
			return file, nil, nil
		}

		adjust := func(orig, src []byte) []byte {
			// Remove the package clause.
			// Gofmt has turned the ; into a \n.
			src = src[len("package main\n"):]
			return matchSpace(orig, src)
		}
		return file, adjust, nil
	}
	// If the error is that the source file didn't begin with a
	// declaration, fall through to try as a statement list.
	// Stop and return on any other error.
	if !strings.Contains(err.Error(), "expected declaration") {
		return nil, nil, err
	}

	// If this is a statement list, make it a source file
	// by inserting a package clause and turning the list
	// into a function body.  This handles expressions too.
	// Insert using a ;, not a newline, so that the line numbers
	// in fsrc match the ones in src.
	fsrc := append(append([]byte("package p; func _() {"), src...), '}')
	file, err = parser.ParseFile(fset, filename, fsrc, parserMode)
	if err == nil {
		adjust := func(orig, src []byte) []byte {
			// Remove the wrapping.
			// Gofmt has turned the ; into a \n\n.
			src = src[len("package p\n\nfunc _() {"):]
			src = src[:len(src)-len("}\n")]
			// Gofmt has also indented the function body one level.
			// Remove that indent.
			src = bytes.Replace(src, []byte("\n\t"), []byte("\n"), -1)
			return matchSpace(orig, src)
		}
		return file, adjust, nil
	}

	// Failed, and out of options.
	return nil, nil, err
}

// containsMainFunc checks if a file contains a function declaration with the
// function signature 'func main()'
func containsMainFunc(file *ast.File) bool {
	for _, decl := range file.Decls {
		if f, ok := decl.(*ast.FuncDecl); ok {
			if f.Name.Name != "main" {
				continue
			}

			if len(f.Type.Params.List) != 0 {
				continue
			}

			if f.Type.Results != nil && len(f.Type.Results.List) != 0 {
				continue
			}

			return true
		}
	}

	return false
}

func cutSpace(b []byte) (before, middle, after []byte) {
	i := 0
	for i < len(b) && (b[i] == ' ' || b[i] == '\t' || b[i] == '\n') {
		i++
	}
	j := len(b)
	for j > 0 && (b[j-1] == ' ' || b[j-1] == '\t' || b[j-1] == '\n') {
		j--
	}
	if i <= j {
		return b[:i], b[i:j], b[j:]
	}
	return nil, nil, b[j:]
}

// matchSpace reformats src to use the same space context as orig.
// 1) If orig begins with blank lines, matchSpace inserts them at the beginning of src.
// 2) matchSpace copies the indentation of the first non-blank line in orig
//    to every non-blank line in src.
// 3) matchSpace copies the trailing space from orig and uses it in place
//   of src's trailing space.
func matchSpace(orig []byte, src []byte) []byte {
	before, _, after := cutSpace(orig)
	i := bytes.LastIndex(before, []byte{'\n'})
	before, indent := before[:i+1], before[i+1:]

	_, src, _ = cutSpace(src)

	var b bytes.Buffer
	b.Write(before)
	for len(src) > 0 {
		line := src
		if i := bytes.IndexByte(line, '\n'); i >= 0 {
			line, src = line[:i+1], line[i+1:]
		} else {
			src = nil
		}
		if len(line) > 0 && line[0] != '\n' { // not blank
			b.Write(indent)
		}
		b.Write(line)
	}
	b.Write(after)
	return b.Bytes()
}

var impLine = regexp.MustCompile(`^\s+(?:[\w\.]+\s+)?"(.+)"`)

func addImportSpaces(r io.Reader, breaks []string) []byte {
	var out bytes.Buffer
	sc := bufio.NewScanner(r)
	inImports := false
	done := false
	for sc.Scan() {
		s := sc.Text()

		if !inImports && !done && strings.HasPrefix(s, "import") {
			inImports = true
		}
		if inImports && (strings.HasPrefix(s, "var") ||
			strings.HasPrefix(s, "func") ||
			strings.HasPrefix(s, "const") ||
			strings.HasPrefix(s, "type")) {
			done = true
			inImports = false
		}
		if inImports && len(breaks) > 0 {
			if m := impLine.FindStringSubmatch(s); m != nil {
				if m[1] == string(breaks[0]) {
					out.WriteByte('\n')
					breaks = breaks[1:]
				}
			}
		}

		fmt.Fprintln(&out, s)
	}
	return out.Bytes()
}
                                  go/src/golang.org/x/tools/imports/mkindex.go                                                        0100644 0000000 0000000 00000007241 13101127475 017575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build ignore

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Command mkindex creates the file "pkgindex.go" containing an index of the Go
// standard library. The file is intended to be built as part of the imports
// package, so that the package may be used in environments where a GOROOT is
// not available (such as App Engine).
package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
)

var (
	pkgIndex = make(map[string][]pkg)
	exports  = make(map[string]map[string]bool)
)

func main() {
	// Don't use GOPATH.
	ctx := build.Default
	ctx.GOPATH = ""

	// Populate pkgIndex global from GOROOT.
	for _, path := range ctx.SrcDirs() {
		f, err := os.Open(path)
		if err != nil {
			log.Print(err)
			continue
		}
		children, err := f.Readdir(-1)
		f.Close()
		if err != nil {
			log.Print(err)
			continue
		}
		for _, child := range children {
			if child.IsDir() {
				loadPkg(path, child.Name())
			}
		}
	}
	// Populate exports global.
	for _, ps := range pkgIndex {
		for _, p := range ps {
			e := loadExports(p.dir)
			if e != nil {
				exports[p.dir] = e
			}
		}
	}

	// Construct source file.
	var buf bytes.Buffer
	fmt.Fprint(&buf, pkgIndexHead)
	fmt.Fprintf(&buf, "var pkgIndexMaster = %#v\n", pkgIndex)
	fmt.Fprintf(&buf, "var exportsMaster = %#v\n", exports)
	src := buf.Bytes()

	// Replace main.pkg type name with pkg.
	src = bytes.Replace(src, []byte("main.pkg"), []byte("pkg"), -1)
	// Replace actual GOROOT with "/go".
	src = bytes.Replace(src, []byte(ctx.GOROOT), []byte("/go"), -1)
	// Add some line wrapping.
	src = bytes.Replace(src, []byte("}, "), []byte("},\n"), -1)
	src = bytes.Replace(src, []byte("true, "), []byte("true,\n"), -1)

	var err error
	src, err = format.Source(src)
	if err != nil {
		log.Fatal(err)
	}

	// Write out source file.
	err = ioutil.WriteFile("pkgindex.go", src, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

const pkgIndexHead = `package imports

func init() {
	pkgIndexOnce.Do(func() {
		pkgIndex.m = pkgIndexMaster
	})
	loadExports = func(dir string) map[string]bool {
		return exportsMaster[dir]
	}
}
`

type pkg struct {
	importpath string // full pkg import path, e.g. "net/http"
	dir        string // absolute file path to pkg directory e.g. "/usr/lib/go/src/fmt"
}

var fset = token.NewFileSet()

func loadPkg(root, importpath string) {
	shortName := path.Base(importpath)
	if shortName == "testdata" {
		return
	}

	dir := filepath.Join(root, importpath)
	pkgIndex[shortName] = append(pkgIndex[shortName], pkg{
		importpath: importpath,
		dir:        dir,
	})

	pkgDir, err := os.Open(dir)
	if err != nil {
		return
	}
	children, err := pkgDir.Readdir(-1)
	pkgDir.Close()
	if err != nil {
		return
	}
	for _, child := range children {
		name := child.Name()
		if name == "" {
			continue
		}
		if c := name[0]; c == '.' || ('0' <= c && c <= '9') {
			continue
		}
		if child.IsDir() {
			loadPkg(root, filepath.Join(importpath, name))
		}
	}
}

func loadExports(dir string) map[string]bool {
	exports := make(map[string]bool)
	buildPkg, err := build.ImportDir(dir, 0)
	if err != nil {
		if strings.Contains(err.Error(), "no buildable Go source files in") {
			return nil
		}
		log.Printf("could not import %q: %v", dir, err)
		return nil
	}
	for _, file := range buildPkg.GoFiles {
		f, err := parser.ParseFile(fset, filepath.Join(dir, file), nil, 0)
		if err != nil {
			log.Printf("could not parse %q: %v", file, err)
			continue
		}
		for name := range f.Scope.Objects {
			if ast.IsExported(name) {
				exports[name] = true
			}
		}
	}
	return exports
}
                                                                                                                                                                                                                                                                                                                                                               go/src/golang.org/x/tools/imports/mkstdlib.go                                                       0100644 0000000 0000000 00000003734 13101127476 017753  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build ignore

// mkstdlib generates the zstdlib.go file, containing the Go standard
// library API symbols. It's baked into the binary to avoid scanning
// GOPATH in the common case.
package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
)

func mustOpen(name string) io.Reader {
	f, err := os.Open(name)
	if err != nil {
		log.Fatal(err)
	}
	return f
}

func api(base string) string {
	return filepath.Join(os.Getenv("GOROOT"), "api", base)
}

var sym = regexp.MustCompile(`^pkg (\S+).*?, (?:var|func|type|const) ([A-Z]\w*)`)

func main() {
	var buf bytes.Buffer
	outf := func(format string, args ...interface{}) {
		fmt.Fprintf(&buf, format, args...)
	}
	outf("// AUTO-GENERATED BY mkstdlib.go\n\n")
	outf("package imports\n")
	outf("var stdlib = map[string]string{\n")
	f := io.MultiReader(
		mustOpen(api("go1.txt")),
		mustOpen(api("go1.1.txt")),
		mustOpen(api("go1.2.txt")),
		mustOpen(api("go1.3.txt")),
		mustOpen(api("go1.4.txt")),
		mustOpen(api("go1.5.txt")),
	)
	sc := bufio.NewScanner(f)
	fullImport := map[string]string{} // "zip.NewReader" => "archive/zip"
	ambiguous := map[string]bool{}
	var keys []string
	for sc.Scan() {
		l := sc.Text()
		has := func(v string) bool { return strings.Contains(l, v) }
		if has("struct, ") || has("interface, ") || has(", method (") {
			continue
		}
		if m := sym.FindStringSubmatch(l); m != nil {
			full := m[1]
			key := path.Base(full) + "." + m[2]
			if exist, ok := fullImport[key]; ok {
				if exist != full {
					ambiguous[key] = true
				}
			} else {
				fullImport[key] = full
				keys = append(keys, key)
			}
		}
	}
	if err := sc.Err(); err != nil {
		log.Fatal(err)
	}
	sort.Strings(keys)
	for _, key := range keys {
		if ambiguous[key] {
			outf("\t// %q is ambiguous\n", key)
		} else {
			outf("\t%q: %q,\n", key, fullImport[key])
		}
	}
	outf("}\n")
	fmtbuf, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	os.Stdout.Write(fmtbuf)
}
                                    go/src/golang.org/x/tools/imports/sortimports.go                                                    0100644 0000000 0000000 00000012314 13101127476 020541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build go1.2

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Hacked up copy of go/ast/import.go

package imports

import (
	"go/ast"
	"go/token"
	"sort"
	"strconv"
)

// sortImports sorts runs of consecutive import lines in import blocks in f.
// It also removes duplicate imports when it is possible to do so without data loss.
func sortImports(fset *token.FileSet, f *ast.File) {
	for i, d := range f.Decls {
		d, ok := d.(*ast.GenDecl)
		if !ok || d.Tok != token.IMPORT {
			// Not an import declaration, so we're done.
			// Imports are always first.
			break
		}

		if len(d.Specs) == 0 {
			// Empty import block, remove it.
			f.Decls = append(f.Decls[:i], f.Decls[i+1:]...)
		}

		if !d.Lparen.IsValid() {
			// Not a block: sorted by default.
			continue
		}

		// Identify and sort runs of specs on successive lines.
		i := 0
		specs := d.Specs[:0]
		for j, s := range d.Specs {
			if j > i && fset.Position(s.Pos()).Line > 1+fset.Position(d.Specs[j-1].End()).Line {
				// j begins a new run.  End this one.
				specs = append(specs, sortSpecs(fset, f, d.Specs[i:j])...)
				i = j
			}
		}
		specs = append(specs, sortSpecs(fset, f, d.Specs[i:])...)
		d.Specs = specs

		// Deduping can leave a blank line before the rparen; clean that up.
		if len(d.Specs) > 0 {
			lastSpec := d.Specs[len(d.Specs)-1]
			lastLine := fset.Position(lastSpec.Pos()).Line
			if rParenLine := fset.Position(d.Rparen).Line; rParenLine > lastLine+1 {
				fset.File(d.Rparen).MergeLine(rParenLine - 1)
			}
		}
	}
}

func importPath(s ast.Spec) string {
	t, err := strconv.Unquote(s.(*ast.ImportSpec).Path.Value)
	if err == nil {
		return t
	}
	return ""
}

func importName(s ast.Spec) string {
	n := s.(*ast.ImportSpec).Name
	if n == nil {
		return ""
	}
	return n.Name
}

func importComment(s ast.Spec) string {
	c := s.(*ast.ImportSpec).Comment
	if c == nil {
		return ""
	}
	return c.Text()
}

// collapse indicates whether prev may be removed, leaving only next.
func collapse(prev, next ast.Spec) bool {
	if importPath(next) != importPath(prev) || importName(next) != importName(prev) {
		return false
	}
	return prev.(*ast.ImportSpec).Comment == nil
}

type posSpan struct {
	Start token.Pos
	End   token.Pos
}

func sortSpecs(fset *token.FileSet, f *ast.File, specs []ast.Spec) []ast.Spec {
	// Can't short-circuit here even if specs are already sorted,
	// since they might yet need deduplication.
	// A lone import, however, may be safely ignored.
	if len(specs) <= 1 {
		return specs
	}

	// Record positions for specs.
	pos := make([]posSpan, len(specs))
	for i, s := range specs {
		pos[i] = posSpan{s.Pos(), s.End()}
	}

	// Identify comments in this range.
	// Any comment from pos[0].Start to the final line counts.
	lastLine := fset.Position(pos[len(pos)-1].End).Line
	cstart := len(f.Comments)
	cend := len(f.Comments)
	for i, g := range f.Comments {
		if g.Pos() < pos[0].Start {
			continue
		}
		if i < cstart {
			cstart = i
		}
		if fset.Position(g.End()).Line > lastLine {
			cend = i
			break
		}
	}
	comments := f.Comments[cstart:cend]

	// Assign each comment to the import spec preceding it.
	importComment := map[*ast.ImportSpec][]*ast.CommentGroup{}
	specIndex := 0
	for _, g := range comments {
		for specIndex+1 < len(specs) && pos[specIndex+1].Start <= g.Pos() {
			specIndex++
		}
		s := specs[specIndex].(*ast.ImportSpec)
		importComment[s] = append(importComment[s], g)
	}

	// Sort the import specs by import path.
	// Remove duplicates, when possible without data loss.
	// Reassign the import paths to have the same position sequence.
	// Reassign each comment to abut the end of its spec.
	// Sort the comments by new position.
	sort.Sort(byImportSpec(specs))

	// Dedup. Thanks to our sorting, we can just consider
	// adjacent pairs of imports.
	deduped := specs[:0]
	for i, s := range specs {
		if i == len(specs)-1 || !collapse(s, specs[i+1]) {
			deduped = append(deduped, s)
		} else {
			p := s.Pos()
			fset.File(p).MergeLine(fset.Position(p).Line)
		}
	}
	specs = deduped

	// Fix up comment positions
	for i, s := range specs {
		s := s.(*ast.ImportSpec)
		if s.Name != nil {
			s.Name.NamePos = pos[i].Start
		}
		s.Path.ValuePos = pos[i].Start
		s.EndPos = pos[i].End
		for _, g := range importComment[s] {
			for _, c := range g.List {
				c.Slash = pos[i].End
			}
		}
	}

	sort.Sort(byCommentPos(comments))

	return specs
}

type byImportSpec []ast.Spec // slice of *ast.ImportSpec

func (x byImportSpec) Len() int      { return len(x) }
func (x byImportSpec) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
func (x byImportSpec) Less(i, j int) bool {
	ipath := importPath(x[i])
	jpath := importPath(x[j])

	igroup := importGroup(ipath)
	jgroup := importGroup(jpath)
	if igroup != jgroup {
		return igroup < jgroup
	}

	if ipath != jpath {
		return ipath < jpath
	}
	iname := importName(x[i])
	jname := importName(x[j])

	if iname != jname {
		return iname < jname
	}
	return importComment(x[i]) < importComment(x[j])
}

type byCommentPos []*ast.CommentGroup

func (x byCommentPos) Len() int           { return len(x) }
func (x byCommentPos) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
func (x byCommentPos) Less(i, j int) bool { return x[i].Pos() < x[j].Pos() }
                                                                                                                                                                                                                                                                                                                    go/src/golang.org/x/tools/imports/sortimports_compat.go                                             0100644 0000000 0000000 00000000517 13101127476 022106  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !go1.2

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package imports

import "go/ast"

// Go 1.1 users don't get fancy package grouping.
// But this is still gofmt-compliant:

var sortImports = ast.SortImports
                                                                                                                                                                                 go/src/golang.org/x/tools/imports/zstdlib.go                                                        0100644 0000000 0000000 00002177715 13101127476 017632  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // AUTO-GENERATED BY mkstdlib.go

package imports

var stdlib = map[string]string{
	"adler32.Checksum":                              "hash/adler32",
	"adler32.New":                                   "hash/adler32",
	"adler32.Size":                                  "hash/adler32",
	"aes.BlockSize":                                 "crypto/aes",
	"aes.KeySizeError":                              "crypto/aes",
	"aes.NewCipher":                                 "crypto/aes",
	"ascii85.CorruptInputError":                     "encoding/ascii85",
	"ascii85.Decode":                                "encoding/ascii85",
	"ascii85.Encode":                                "encoding/ascii85",
	"ascii85.MaxEncodedLen":                         "encoding/ascii85",
	"ascii85.NewDecoder":                            "encoding/ascii85",
	"ascii85.NewEncoder":                            "encoding/ascii85",
	"asn1.BitString":                                "encoding/asn1",
	"asn1.Enumerated":                               "encoding/asn1",
	"asn1.Flag":                                     "encoding/asn1",
	"asn1.Marshal":                                  "encoding/asn1",
	"asn1.ObjectIdentifier":                         "encoding/asn1",
	"asn1.RawContent":                               "encoding/asn1",
	"asn1.RawValue":                                 "encoding/asn1",
	"asn1.StructuralError":                          "encoding/asn1",
	"asn1.SyntaxError":                              "encoding/asn1",
	"asn1.Unmarshal":                                "encoding/asn1",
	"asn1.UnmarshalWithParams":                      "encoding/asn1",
	"ast.ArrayType":                                 "go/ast",
	"ast.AssignStmt":                                "go/ast",
	"ast.Bad":                                       "go/ast",
	"ast.BadDecl":                                   "go/ast",
	"ast.BadExpr":                                   "go/ast",
	"ast.BadStmt":                                   "go/ast",
	"ast.BasicLit":                                  "go/ast",
	"ast.BinaryExpr":                                "go/ast",
	"ast.BlockStmt":                                 "go/ast",
	"ast.BranchStmt":                                "go/ast",
	"ast.CallExpr":                                  "go/ast",
	"ast.CaseClause":                                "go/ast",
	"ast.ChanDir":                                   "go/ast",
	"ast.ChanType":                                  "go/ast",
	"ast.CommClause":                                "go/ast",
	"ast.Comment":                                   "go/ast",
	"ast.CommentGroup":                              "go/ast",
	"ast.CommentMap":                                "go/ast",
	"ast.CompositeLit":                              "go/ast",
	"ast.Con":                                       "go/ast",
	"ast.DeclStmt":                                  "go/ast",
	"ast.DeferStmt":                                 "go/ast",
	"ast.Ellipsis":                                  "go/ast",
	"ast.EmptyStmt":                                 "go/ast",
	"ast.ExprStmt":                                  "go/ast",
	"ast.Field":                                     "go/ast",
	"ast.FieldFilter":                               "go/ast",
	"ast.FieldList":                                 "go/ast",
	"ast.File":                                      "go/ast",
	"ast.FileExports":                               "go/ast",
	"ast.Filter":                                    "go/ast",
	"ast.FilterDecl":                                "go/ast",
	"ast.FilterFile":                                "go/ast",
	"ast.FilterFuncDuplicates":                      "go/ast",
	"ast.FilterImportDuplicates":                    "go/ast",
	"ast.FilterPackage":                             "go/ast",
	"ast.FilterUnassociatedComments":                "go/ast",
	"ast.ForStmt":                                   "go/ast",
	"ast.Fprint":                                    "go/ast",
	"ast.Fun":                                       "go/ast",
	"ast.FuncDecl":                                  "go/ast",
	"ast.FuncLit":                                   "go/ast",
	"ast.FuncType":                                  "go/ast",
	"ast.GenDecl":                                   "go/ast",
	"ast.GoStmt":                                    "go/ast",
	"ast.Ident":                                     "go/ast",
	"ast.IfStmt":                                    "go/ast",
	"ast.ImportSpec":                                "go/ast",
	"ast.Importer":                                  "go/ast",
	"ast.IncDecStmt":                                "go/ast",
	"ast.IndexExpr":                                 "go/ast",
	"ast.Inspect":                                   "go/ast",
	"ast.InterfaceType":                             "go/ast",
	"ast.IsExported":                                "go/ast",
	"ast.KeyValueExpr":                              "go/ast",
	"ast.LabeledStmt":                               "go/ast",
	"ast.Lbl":                                       "go/ast",
	"ast.MapType":                                   "go/ast",
	"ast.MergeMode":                                 "go/ast",
	"ast.MergePackageFiles":                         "go/ast",
	"ast.NewCommentMap":                             "go/ast",
	"ast.NewIdent":                                  "go/ast",
	"ast.NewObj":                                    "go/ast",
	"ast.NewPackage":                                "go/ast",
	"ast.NewScope":                                  "go/ast",
	"ast.Node":                                      "go/ast",
	"ast.NotNilFilter":                              "go/ast",
	"ast.ObjKind":                                   "go/ast",
	"ast.Object":                                    "go/ast",
	"ast.Package":                                   "go/ast",
	"ast.PackageExports":                            "go/ast",
	"ast.ParenExpr":                                 "go/ast",
	"ast.Pkg":                                       "go/ast",
	"ast.Print":                                     "go/ast",
	"ast.RECV":                                      "go/ast",
	"ast.RangeStmt":                                 "go/ast",
	"ast.ReturnStmt":                                "go/ast",
	"ast.SEND":                                      "go/ast",
	"ast.Scope":                                     "go/ast",
	"ast.SelectStmt":                                "go/ast",
	"ast.SelectorExpr":                              "go/ast",
	"ast.SendStmt":                                  "go/ast",
	"ast.SliceExpr":                                 "go/ast",
	"ast.SortImports":                               "go/ast",
	"ast.StarExpr":                                  "go/ast",
	"ast.StructType":                                "go/ast",
	"ast.SwitchStmt":                                "go/ast",
	"ast.Typ":                                       "go/ast",
	"ast.TypeAssertExpr":                            "go/ast",
	"ast.TypeSpec":                                  "go/ast",
	"ast.TypeSwitchStmt":                            "go/ast",
	"ast.UnaryExpr":                                 "go/ast",
	"ast.ValueSpec":                                 "go/ast",
	"ast.Var":                                       "go/ast",
	"ast.Visitor":                                   "go/ast",
	"ast.Walk":                                      "go/ast",
	"atomic.AddInt32":                               "sync/atomic",
	"atomic.AddInt64":                               "sync/atomic",
	"atomic.AddUint32":                              "sync/atomic",
	"atomic.AddUint64":                              "sync/atomic",
	"atomic.AddUintptr":                             "sync/atomic",
	"atomic.CompareAndSwapInt32":                    "sync/atomic",
	"atomic.CompareAndSwapInt64":                    "sync/atomic",
	"atomic.CompareAndSwapPointer":                  "sync/atomic",
	"atomic.CompareAndSwapUint32":                   "sync/atomic",
	"atomic.CompareAndSwapUint64":                   "sync/atomic",
	"atomic.CompareAndSwapUintptr":                  "sync/atomic",
	"atomic.LoadInt32":                              "sync/atomic",
	"atomic.LoadInt64":                              "sync/atomic",
	"atomic.LoadPointer":                            "sync/atomic",
	"atomic.LoadUint32":                             "sync/atomic",
	"atomic.LoadUint64":                             "sync/atomic",
	"atomic.LoadUintptr":                            "sync/atomic",
	"atomic.StoreInt32":                             "sync/atomic",
	"atomic.StoreInt64":                             "sync/atomic",
	"atomic.StorePointer":                           "sync/atomic",
	"atomic.StoreUint32":                            "sync/atomic",
	"atomic.StoreUint64":                            "sync/atomic",
	"atomic.StoreUintptr":                           "sync/atomic",
	"atomic.SwapInt32":                              "sync/atomic",
	"atomic.SwapInt64":                              "sync/atomic",
	"atomic.SwapPointer":                            "sync/atomic",
	"atomic.SwapUint32":                             "sync/atomic",
	"atomic.SwapUint64":                             "sync/atomic",
	"atomic.SwapUintptr":                            "sync/atomic",
	"atomic.Value":                                  "sync/atomic",
	"base32.CorruptInputError":                      "encoding/base32",
	"base32.Encoding":                               "encoding/base32",
	"base32.HexEncoding":                            "encoding/base32",
	"base32.NewDecoder":                             "encoding/base32",
	"base32.NewEncoder":                             "encoding/base32",
	"base32.NewEncoding":                            "encoding/base32",
	"base32.StdEncoding":                            "encoding/base32",
	"base64.CorruptInputError":                      "encoding/base64",
	"base64.Encoding":                               "encoding/base64",
	"base64.NewDecoder":                             "encoding/base64",
	"base64.NewEncoder":                             "encoding/base64",
	"base64.NewEncoding":                            "encoding/base64",
	"base64.NoPadding":                              "encoding/base64",
	"base64.RawStdEncoding":                         "encoding/base64",
	"base64.RawURLEncoding":                         "encoding/base64",
	"base64.StdEncoding":                            "encoding/base64",
	"base64.StdPadding":                             "encoding/base64",
	"base64.URLEncoding":                            "encoding/base64",
	"big.Above":                                     "math/big",
	"big.Accuracy":                                  "math/big",
	"big.AwayFromZero":                              "math/big",
	"big.Below":                                     "math/big",
	"big.ErrNaN":                                    "math/big",
	"big.Exact":                                     "math/big",
	"big.Float":                                     "math/big",
	"big.Int":                                       "math/big",
	"big.Jacobi":                                    "math/big",
	"big.MaxBase":                                   "math/big",
	"big.MaxExp":                                    "math/big",
	"big.MaxPrec":                                   "math/big",
	"big.MinExp":                                    "math/big",
	"big.NewFloat":                                  "math/big",
	"big.NewInt":                                    "math/big",
	"big.NewRat":                                    "math/big",
	"big.ParseFloat":                                "math/big",
	"big.Rat":                                       "math/big",
	"big.RoundingMode":                              "math/big",
	"big.ToNearestAway":                             "math/big",
	"big.ToNearestEven":                             "math/big",
	"big.ToNegativeInf":                             "math/big",
	"big.ToPositiveInf":                             "math/big",
	"big.ToZero":                                    "math/big",
	"big.Word":                                      "math/big",
	"binary.BigEndian":                              "encoding/binary",
	"binary.ByteOrder":                              "encoding/binary",
	"binary.LittleEndian":                           "encoding/binary",
	"binary.MaxVarintLen16":                         "encoding/binary",
	"binary.MaxVarintLen32":                         "encoding/binary",
	"binary.MaxVarintLen64":                         "encoding/binary",
	"binary.PutUvarint":                             "encoding/binary",
	"binary.PutVarint":                              "encoding/binary",
	"binary.Read":                                   "encoding/binary",
	"binary.ReadUvarint":                            "encoding/binary",
	"binary.ReadVarint":                             "encoding/binary",
	"binary.Size":                                   "encoding/binary",
	"binary.Uvarint":                                "encoding/binary",
	"binary.Varint":                                 "encoding/binary",
	"binary.Write":                                  "encoding/binary",
	"bufio.ErrAdvanceTooFar":                        "bufio",
	"bufio.ErrBufferFull":                           "bufio",
	"bufio.ErrInvalidUnreadByte":                    "bufio",
	"bufio.ErrInvalidUnreadRune":                    "bufio",
	"bufio.ErrNegativeAdvance":                      "bufio",
	"bufio.ErrNegativeCount":                        "bufio",
	"bufio.ErrTooLong":                              "bufio",
	"bufio.MaxScanTokenSize":                        "bufio",
	"bufio.NewReadWriter":                           "bufio",
	"bufio.NewReader":                               "bufio",
	"bufio.NewReaderSize":                           "bufio",
	"bufio.NewScanner":                              "bufio",
	"bufio.NewWriter":                               "bufio",
	"bufio.NewWriterSize":                           "bufio",
	"bufio.ReadWriter":                              "bufio",
	"bufio.Reader":                                  "bufio",
	"bufio.ScanBytes":                               "bufio",
	"bufio.ScanLines":                               "bufio",
	"bufio.ScanRunes":                               "bufio",
	"bufio.ScanWords":                               "bufio",
	"bufio.Scanner":                                 "bufio",
	"bufio.SplitFunc":                               "bufio",
	"bufio.Writer":                                  "bufio",
	"build.AllowBinary":                             "go/build",
	"build.ArchChar":                                "go/build",
	"build.Context":                                 "go/build",
	"build.Default":                                 "go/build",
	"build.FindOnly":                                "go/build",
	"build.Import":                                  "go/build",
	"build.ImportComment":                           "go/build",
	"build.ImportDir":                               "go/build",
	"build.ImportMode":                              "go/build",
	"build.IsLocalImport":                           "go/build",
	"build.MultiplePackageError":                    "go/build",
	"build.NoGoError":                               "go/build",
	"build.Package":                                 "go/build",
	"build.ToolDir":                                 "go/build",
	"bytes.Buffer":                                  "bytes",
	"bytes.Compare":                                 "bytes",
	"bytes.Contains":                                "bytes",
	"bytes.Count":                                   "bytes",
	"bytes.Equal":                                   "bytes",
	"bytes.EqualFold":                               "bytes",
	"bytes.ErrTooLarge":                             "bytes",
	"bytes.Fields":                                  "bytes",
	"bytes.FieldsFunc":                              "bytes",
	"bytes.HasPrefix":                               "bytes",
	"bytes.HasSuffix":                               "bytes",
	"bytes.Index":                                   "bytes",
	"bytes.IndexAny":                                "bytes",
	"bytes.IndexByte":                               "bytes",
	"bytes.IndexFunc":                               "bytes",
	"bytes.IndexRune":                               "bytes",
	"bytes.Join":                                    "bytes",
	"bytes.LastIndex":                               "bytes",
	"bytes.LastIndexAny":                            "bytes",
	"bytes.LastIndexByte":                           "bytes",
	"bytes.LastIndexFunc":                           "bytes",
	"bytes.Map":                                     "bytes",
	"bytes.MinRead":                                 "bytes",
	"bytes.NewBuffer":                               "bytes",
	"bytes.NewBufferString":                         "bytes",
	"bytes.NewReader":                               "bytes",
	"bytes.Reader":                                  "bytes",
	"bytes.Repeat":                                  "bytes",
	"bytes.Replace":                                 "bytes",
	"bytes.Runes":                                   "bytes",
	"bytes.Split":                                   "bytes",
	"bytes.SplitAfter":                              "bytes",
	"bytes.SplitAfterN":                             "bytes",
	"bytes.SplitN":                                  "bytes",
	"bytes.Title":                                   "bytes",
	"bytes.ToLower":                                 "bytes",
	"bytes.ToLowerSpecial":                          "bytes",
	"bytes.ToTitle":                                 "bytes",
	"bytes.ToTitleSpecial":                          "bytes",
	"bytes.ToUpper":                                 "bytes",
	"bytes.ToUpperSpecial":                          "bytes",
	"bytes.Trim":                                    "bytes",
	"bytes.TrimFunc":                                "bytes",
	"bytes.TrimLeft":                                "bytes",
	"bytes.TrimLeftFunc":                            "bytes",
	"bytes.TrimPrefix":                              "bytes",
	"bytes.TrimRight":                               "bytes",
	"bytes.TrimRightFunc":                           "bytes",
	"bytes.TrimSpace":                               "bytes",
	"bytes.TrimSuffix":                              "bytes",
	"bzip2.NewReader":                               "compress/bzip2",
	"bzip2.StructuralError":                         "compress/bzip2",
	"cgi.Handler":                                   "net/http/cgi",
	"cgi.Request":                                   "net/http/cgi",
	"cgi.RequestFromMap":                            "net/http/cgi",
	"cgi.Serve":                                     "net/http/cgi",
	"cipher.AEAD":                                   "crypto/cipher",
	"cipher.Block":                                  "crypto/cipher",
	"cipher.BlockMode":                              "crypto/cipher",
	"cipher.NewCBCDecrypter":                        "crypto/cipher",
	"cipher.NewCBCEncrypter":                        "crypto/cipher",
	"cipher.NewCFBDecrypter":                        "crypto/cipher",
	"cipher.NewCFBEncrypter":                        "crypto/cipher",
	"cipher.NewCTR":                                 "crypto/cipher",
	"cipher.NewGCM":                                 "crypto/cipher",
	"cipher.NewGCMWithNonceSize":                    "crypto/cipher",
	"cipher.NewOFB":                                 "crypto/cipher",
	"cipher.Stream":                                 "crypto/cipher",
	"cipher.StreamReader":                           "crypto/cipher",
	"cipher.StreamWriter":                           "crypto/cipher",
	"cmplx.Abs":                                     "math/cmplx",
	"cmplx.Acos":                                    "math/cmplx",
	"cmplx.Acosh":                                   "math/cmplx",
	"cmplx.Asin":                                    "math/cmplx",
	"cmplx.Asinh":                                   "math/cmplx",
	"cmplx.Atan":                                    "math/cmplx",
	"cmplx.Atanh":                                   "math/cmplx",
	"cmplx.Conj":                                    "math/cmplx",
	"cmplx.Cos":                                     "math/cmplx",
	"cmplx.Cosh":                                    "math/cmplx",
	"cmplx.Cot":                                     "math/cmplx",
	"cmplx.Exp":                                     "math/cmplx",
	"cmplx.Inf":                                     "math/cmplx",
	"cmplx.IsInf":                                   "math/cmplx",
	"cmplx.IsNaN":                                   "math/cmplx",
	"cmplx.Log":                                     "math/cmplx",
	"cmplx.Log10":                                   "math/cmplx",
	"cmplx.NaN":                                     "math/cmplx",
	"cmplx.Phase":                                   "math/cmplx",
	"cmplx.Polar":                                   "math/cmplx",
	"cmplx.Pow":                                     "math/cmplx",
	"cmplx.Rect":                                    "math/cmplx",
	"cmplx.Sin":                                     "math/cmplx",
	"cmplx.Sinh":                                    "math/cmplx",
	"cmplx.Sqrt":                                    "math/cmplx",
	"cmplx.Tan":                                     "math/cmplx",
	"cmplx.Tanh":                                    "math/cmplx",
	"color.Alpha":                                   "image/color",
	"color.Alpha16":                                 "image/color",
	"color.Alpha16Model":                            "image/color",
	"color.AlphaModel":                              "image/color",
	"color.Black":                                   "image/color",
	"color.CMYK":                                    "image/color",
	"color.CMYKModel":                               "image/color",
	"color.CMYKToRGB":                               "image/color",
	"color.Color":                                   "image/color",
	"color.Gray":                                    "image/color",
	"color.Gray16":                                  "image/color",
	"color.Gray16Model":                             "image/color",
	"color.GrayModel":                               "image/color",
	"color.Model":                                   "image/color",
	"color.ModelFunc":                               "image/color",
	"color.NRGBA":                                   "image/color",
	"color.NRGBA64":                                 "image/color",
	"color.NRGBA64Model":                            "image/color",
	"color.NRGBAModel":                              "image/color",
	"color.Opaque":                                  "image/color",
	"color.Palette":                                 "image/color",
	"color.RGBA":                                    "image/color",
	"color.RGBA64":                                  "image/color",
	"color.RGBA64Model":                             "image/color",
	"color.RGBAModel":                               "image/color",
	"color.RGBToCMYK":                               "image/color",
	"color.RGBToYCbCr":                              "image/color",
	"color.Transparent":                             "image/color",
	"color.White":                                   "image/color",
	"color.YCbCr":                                   "image/color",
	"color.YCbCrModel":                              "image/color",
	"color.YCbCrToRGB":                              "image/color",
	"constant.BinaryOp":                             "go/constant",
	"constant.BitLen":                               "go/constant",
	"constant.Bool":                                 "go/constant",
	"constant.BoolVal":                              "go/constant",
	"constant.Bytes":                                "go/constant",
	"constant.Compare":                              "go/constant",
	"constant.Complex":                              "go/constant",
	"constant.Denom":                                "go/constant",
	"constant.Float":                                "go/constant",
	"constant.Float32Val":                           "go/constant",
	"constant.Float64Val":                           "go/constant",
	"constant.Imag":                                 "go/constant",
	"constant.Int":                                  "go/constant",
	"constant.Int64Val":                             "go/constant",
	"constant.Kind":                                 "go/constant",
	"constant.MakeBool":                             "go/constant",
	"constant.MakeFloat64":                          "go/constant",
	"constant.MakeFromBytes":                        "go/constant",
	"constant.MakeFromLiteral":                      "go/constant",
	"constant.MakeImag":                             "go/constant",
	"constant.MakeInt64":                            "go/constant",
	"constant.MakeString":                           "go/constant",
	"constant.MakeUint64":                           "go/constant",
	"constant.MakeUnknown":                          "go/constant",
	"constant.Num":                                  "go/constant",
	"constant.Real":                                 "go/constant",
	"constant.Shift":                                "go/constant",
	"constant.Sign":                                 "go/constant",
	"constant.String":                               "go/constant",
	"constant.StringVal":                            "go/constant",
	"constant.Uint64Val":                            "go/constant",
	"constant.UnaryOp":                              "go/constant",
	"constant.Unknown":                              "go/constant",
	"cookiejar.Jar":                                 "net/http/cookiejar",
	"cookiejar.New":                                 "net/http/cookiejar",
	"cookiejar.Options":                             "net/http/cookiejar",
	"cookiejar.PublicSuffixList":                    "net/http/cookiejar",
	"crc32.Castagnoli":                              "hash/crc32",
	"crc32.Checksum":                                "hash/crc32",
	"crc32.ChecksumIEEE":                            "hash/crc32",
	"crc32.IEEE":                                    "hash/crc32",
	"crc32.IEEETable":                               "hash/crc32",
	"crc32.Koopman":                                 "hash/crc32",
	"crc32.MakeTable":                               "hash/crc32",
	"crc32.New":                                     "hash/crc32",
	"crc32.NewIEEE":                                 "hash/crc32",
	"crc32.Size":                                    "hash/crc32",
	"crc32.Table":                                   "hash/crc32",
	"crc32.Update":                                  "hash/crc32",
	"crc64.Checksum":                                "hash/crc64",
	"crc64.ECMA":                                    "hash/crc64",
	"crc64.ISO":                                     "hash/crc64",
	"crc64.MakeTable":                               "hash/crc64",
	"crc64.New":                                     "hash/crc64",
	"crc64.Size":                                    "hash/crc64",
	"crc64.Table":                                   "hash/crc64",
	"crc64.Update":                                  "hash/crc64",
	"crypto.Decrypter":                              "crypto",
	"crypto.DecrypterOpts":                          "crypto",
	"crypto.Hash":                                   "crypto",
	"crypto.MD4":                                    "crypto",
	"crypto.MD5":                                    "crypto",
	"crypto.MD5SHA1":                                "crypto",
	"crypto.PrivateKey":                             "crypto",
	"crypto.PublicKey":                              "crypto",
	"crypto.RIPEMD160":                              "crypto",
	"crypto.RegisterHash":                           "crypto",
	"crypto.SHA1":                                   "crypto",
	"crypto.SHA224":                                 "crypto",
	"crypto.SHA256":                                 "crypto",
	"crypto.SHA384":                                 "crypto",
	"crypto.SHA3_224":                               "crypto",
	"crypto.SHA3_256":                               "crypto",
	"crypto.SHA3_384":                               "crypto",
	"crypto.SHA3_512":                               "crypto",
	"crypto.SHA512":                                 "crypto",
	"crypto.SHA512_224":                             "crypto",
	"crypto.SHA512_256":                             "crypto",
	"crypto.Signer":                                 "crypto",
	"crypto.SignerOpts":                             "crypto",
	"csv.ErrBareQuote":                              "encoding/csv",
	"csv.ErrFieldCount":                             "encoding/csv",
	"csv.ErrQuote":                                  "encoding/csv",
	"csv.ErrTrailingComma":                          "encoding/csv",
	"csv.NewReader":                                 "encoding/csv",
	"csv.NewWriter":                                 "encoding/csv",
	"csv.ParseError":                                "encoding/csv",
	"csv.Reader":                                    "encoding/csv",
	"csv.Writer":                                    "encoding/csv",
	"debug.FreeOSMemory":                            "runtime/debug",
	"debug.GCStats":                                 "runtime/debug",
	"debug.PrintStack":                              "runtime/debug",
	"debug.ReadGCStats":                             "runtime/debug",
	"debug.SetGCPercent":                            "runtime/debug",
	"debug.SetMaxStack":                             "runtime/debug",
	"debug.SetMaxThreads":                           "runtime/debug",
	"debug.SetPanicOnFault":                         "runtime/debug",
	"debug.Stack":                                   "runtime/debug",
	"debug.WriteHeapDump":                           "runtime/debug",
	"des.BlockSize":                                 "crypto/des",
	"des.KeySizeError":                              "crypto/des",
	"des.NewCipher":                                 "crypto/des",
	"des.NewTripleDESCipher":                        "crypto/des",
	"doc.AllDecls":                                  "go/doc",
	"doc.AllMethods":                                "go/doc",
	"doc.Example":                                   "go/doc",
	"doc.Examples":                                  "go/doc",
	"doc.Filter":                                    "go/doc",
	"doc.Func":                                      "go/doc",
	"doc.IllegalPrefixes":                           "go/doc",
	"doc.Mode":                                      "go/doc",
	"doc.New":                                       "go/doc",
	"doc.Note":                                      "go/doc",
	"doc.Package":                                   "go/doc",
	"doc.Synopsis":                                  "go/doc",
	"doc.ToHTML":                                    "go/doc",
	"doc.ToText":                                    "go/doc",
	"doc.Type":                                      "go/doc",
	"doc.Value":                                     "go/doc",
	"draw.Draw":                                     "image/draw",
	"draw.DrawMask":                                 "image/draw",
	"draw.Drawer":                                   "image/draw",
	"draw.FloydSteinberg":                           "image/draw",
	"draw.Image":                                    "image/draw",
	"draw.Op":                                       "image/draw",
	"draw.Over":                                     "image/draw",
	"draw.Quantizer":                                "image/draw",
	"draw.Src":                                      "image/draw",
	"driver.Bool":                                   "database/sql/driver",
	"driver.ColumnConverter":                        "database/sql/driver",
	"driver.Conn":                                   "database/sql/driver",
	"driver.DefaultParameterConverter":              "database/sql/driver",
	"driver.Driver":                                 "database/sql/driver",
	"driver.ErrBadConn":                             "database/sql/driver",
	"driver.ErrSkip":                                "database/sql/driver",
	"driver.Execer":                                 "database/sql/driver",
	"driver.Int32":                                  "database/sql/driver",
	"driver.IsScanValue":                            "database/sql/driver",
	"driver.IsValue":                                "database/sql/driver",
	"driver.NotNull":                                "database/sql/driver",
	"driver.Null":                                   "database/sql/driver",
	"driver.Queryer":                                "database/sql/driver",
	"driver.Result":                                 "database/sql/driver",
	"driver.ResultNoRows":                           "database/sql/driver",
	"driver.Rows":                                   "database/sql/driver",
	"driver.RowsAffected":                           "database/sql/driver",
	"driver.Stmt":                                   "database/sql/driver",
	"driver.String":                                 "database/sql/driver",
	"driver.Tx":                                     "database/sql/driver",
	"driver.Value":                                  "database/sql/driver",
	"driver.ValueConverter":                         "database/sql/driver",
	"driver.Valuer":                                 "database/sql/driver",
	"dsa.ErrInvalidPublicKey":                       "crypto/dsa",
	"dsa.GenerateKey":                               "crypto/dsa",
	"dsa.GenerateParameters":                        "crypto/dsa",
	"dsa.L1024N160":                                 "crypto/dsa",
	"dsa.L2048N224":                                 "crypto/dsa",
	"dsa.L2048N256":                                 "crypto/dsa",
	"dsa.L3072N256":                                 "crypto/dsa",
	"dsa.ParameterSizes":                            "crypto/dsa",
	"dsa.Parameters":                                "crypto/dsa",
	"dsa.PrivateKey":                                "crypto/dsa",
	"dsa.PublicKey":                                 "crypto/dsa",
	"dsa.Sign":                                      "crypto/dsa",
	"dsa.Verify":                                    "crypto/dsa",
	"dwarf.AddrType":                                "debug/dwarf",
	"dwarf.ArrayType":                               "debug/dwarf",
	"dwarf.Attr":                                    "debug/dwarf",
	"dwarf.AttrAbstractOrigin":                      "debug/dwarf",
	"dwarf.AttrAccessibility":                       "debug/dwarf",
	"dwarf.AttrAddrClass":                           "debug/dwarf",
	"dwarf.AttrAllocated":                           "debug/dwarf",
	"dwarf.AttrArtificial":                          "debug/dwarf",
	"dwarf.AttrAssociated":                          "debug/dwarf",
	"dwarf.AttrBaseTypes":                           "debug/dwarf",
	"dwarf.AttrBitOffset":                           "debug/dwarf",
	"dwarf.AttrBitSize":                             "debug/dwarf",
	"dwarf.AttrByteSize":                            "debug/dwarf",
	"dwarf.AttrCallColumn":                          "debug/dwarf",
	"dwarf.AttrCallFile":                            "debug/dwarf",
	"dwarf.AttrCallLine":                            "debug/dwarf",
	"dwarf.AttrCalling":                             "debug/dwarf",
	"dwarf.AttrCommonRef":                           "debug/dwarf",
	"dwarf.AttrCompDir":                             "debug/dwarf",
	"dwarf.AttrConstValue":                          "debug/dwarf",
	"dwarf.AttrContainingType":                      "debug/dwarf",
	"dwarf.AttrCount":                               "debug/dwarf",
	"dwarf.AttrDataLocation":                        "debug/dwarf",
	"dwarf.AttrDataMemberLoc":                       "debug/dwarf",
	"dwarf.AttrDeclColumn":                          "debug/dwarf",
	"dwarf.AttrDeclFile":                            "debug/dwarf",
	"dwarf.AttrDeclLine":                            "debug/dwarf",
	"dwarf.AttrDeclaration":                         "debug/dwarf",
	"dwarf.AttrDefaultValue":                        "debug/dwarf",
	"dwarf.AttrDescription":                         "debug/dwarf",
	"dwarf.AttrDiscr":                               "debug/dwarf",
	"dwarf.AttrDiscrList":                           "debug/dwarf",
	"dwarf.AttrDiscrValue":                          "debug/dwarf",
	"dwarf.AttrEncoding":                            "debug/dwarf",
	"dwarf.AttrEntrypc":                             "debug/dwarf",
	"dwarf.AttrExtension":                           "debug/dwarf",
	"dwarf.AttrExternal":                            "debug/dwarf",
	"dwarf.AttrFrameBase":                           "debug/dwarf",
	"dwarf.AttrFriend":                              "debug/dwarf",
	"dwarf.AttrHighpc":                              "debug/dwarf",
	"dwarf.AttrIdentifierCase":                      "debug/dwarf",
	"dwarf.AttrImport":                              "debug/dwarf",
	"dwarf.AttrInline":                              "debug/dwarf",
	"dwarf.AttrIsOptional":                          "debug/dwarf",
	"dwarf.AttrLanguage":                            "debug/dwarf",
	"dwarf.AttrLocation":                            "debug/dwarf",
	"dwarf.AttrLowerBound":                          "debug/dwarf",
	"dwarf.AttrLowpc":                               "debug/dwarf",
	"dwarf.AttrMacroInfo":                           "debug/dwarf",
	"dwarf.AttrName":                                "debug/dwarf",
	"dwarf.AttrNamelistItem":                        "debug/dwarf",
	"dwarf.AttrOrdering":                            "debug/dwarf",
	"dwarf.AttrPriority":                            "debug/dwarf",
	"dwarf.AttrProducer":                            "debug/dwarf",
	"dwarf.AttrPrototyped":                          "debug/dwarf",
	"dwarf.AttrRanges":                              "debug/dwarf",
	"dwarf.AttrReturnAddr":                          "debug/dwarf",
	"dwarf.AttrSegment":                             "debug/dwarf",
	"dwarf.AttrSibling":                             "debug/dwarf",
	"dwarf.AttrSpecification":                       "debug/dwarf",
	"dwarf.AttrStartScope":                          "debug/dwarf",
	"dwarf.AttrStaticLink":                          "debug/dwarf",
	"dwarf.AttrStmtList":                            "debug/dwarf",
	"dwarf.AttrStride":                              "debug/dwarf",
	"dwarf.AttrStrideSize":                          "debug/dwarf",
	"dwarf.AttrStringLength":                        "debug/dwarf",
	"dwarf.AttrTrampoline":                          "debug/dwarf",
	"dwarf.AttrType":                                "debug/dwarf",
	"dwarf.AttrUpperBound":                          "debug/dwarf",
	"dwarf.AttrUseLocation":                         "debug/dwarf",
	"dwarf.AttrUseUTF8":                             "debug/dwarf",
	"dwarf.AttrVarParam":                            "debug/dwarf",
	"dwarf.AttrVirtuality":                          "debug/dwarf",
	"dwarf.AttrVisibility":                          "debug/dwarf",
	"dwarf.AttrVtableElemLoc":                       "debug/dwarf",
	"dwarf.BasicType":                               "debug/dwarf",
	"dwarf.BoolType":                                "debug/dwarf",
	"dwarf.CharType":                                "debug/dwarf",
	"dwarf.Class":                                   "debug/dwarf",
	"dwarf.ClassAddress":                            "debug/dwarf",
	"dwarf.ClassBlock":                              "debug/dwarf",
	"dwarf.ClassConstant":                           "debug/dwarf",
	"dwarf.ClassExprLoc":                            "debug/dwarf",
	"dwarf.ClassFlag":                               "debug/dwarf",
	"dwarf.ClassLinePtr":                            "debug/dwarf",
	"dwarf.ClassLocListPtr":                         "debug/dwarf",
	"dwarf.ClassMacPtr":                             "debug/dwarf",
	"dwarf.ClassRangeListPtr":                       "debug/dwarf",
	"dwarf.ClassReference":                          "debug/dwarf",
	"dwarf.ClassReferenceAlt":                       "debug/dwarf",
	"dwarf.ClassReferenceSig":                       "debug/dwarf",
	"dwarf.ClassString":                             "debug/dwarf",
	"dwarf.ClassStringAlt":                          "debug/dwarf",
	"dwarf.CommonType":                              "debug/dwarf",
	"dwarf.ComplexType":                             "debug/dwarf",
	"dwarf.Data":                                    "debug/dwarf",
	"dwarf.DecodeError":                             "debug/dwarf",
	"dwarf.DotDotDotType":                           "debug/dwarf",
	"dwarf.Entry":                                   "debug/dwarf",
	"dwarf.EnumType":                                "debug/dwarf",
	"dwarf.EnumValue":                               "debug/dwarf",
	"dwarf.ErrUnknownPC":                            "debug/dwarf",
	"dwarf.Field":                                   "debug/dwarf",
	"dwarf.FloatType":                               "debug/dwarf",
	"dwarf.FuncType":                                "debug/dwarf",
	"dwarf.IntType":                                 "debug/dwarf",
	"dwarf.LineEntry":                               "debug/dwarf",
	"dwarf.LineFile":                                "debug/dwarf",
	"dwarf.LineReader":                              "debug/dwarf",
	"dwarf.LineReaderPos":                           "debug/dwarf",
	"dwarf.New":                                     "debug/dwarf",
	"dwarf.Offset":                                  "debug/dwarf",
	"dwarf.PtrType":                                 "debug/dwarf",
	"dwarf.QualType":                                "debug/dwarf",
	"dwarf.Reader":                                  "debug/dwarf",
	"dwarf.StructField":                             "debug/dwarf",
	"dwarf.StructType":                              "debug/dwarf",
	"dwarf.Tag":                                     "debug/dwarf",
	"dwarf.TagAccessDeclaration":                    "debug/dwarf",
	"dwarf.TagArrayType":                            "debug/dwarf",
	"dwarf.TagBaseType":                             "debug/dwarf",
	"dwarf.TagCatchDwarfBlock":                      "debug/dwarf",
	"dwarf.TagClassType":                            "debug/dwarf",
	"dwarf.TagCommonDwarfBlock":                     "debug/dwarf",
	"dwarf.TagCommonInclusion":                      "debug/dwarf",
	"dwarf.TagCompileUnit":                          "debug/dwarf",
	"dwarf.TagCondition":                            "debug/dwarf",
	"dwarf.TagConstType":                            "debug/dwarf",
	"dwarf.TagConstant":                             "debug/dwarf",
	"dwarf.TagDwarfProcedure":                       "debug/dwarf",
	"dwarf.TagEntryPoint":                           "debug/dwarf",
	"dwarf.TagEnumerationType":                      "debug/dwarf",
	"dwarf.TagEnumerator":                           "debug/dwarf",
	"dwarf.TagFileType":                             "debug/dwarf",
	"dwarf.TagFormalParameter":                      "debug/dwarf",
	"dwarf.TagFriend":                               "debug/dwarf",
	"dwarf.TagImportedDeclaration":                  "debug/dwarf",
	"dwarf.TagImportedModule":                       "debug/dwarf",
	"dwarf.TagImportedUnit":                         "debug/dwarf",
	"dwarf.TagInheritance":                          "debug/dwarf",
	"dwarf.TagInlinedSubroutine":                    "debug/dwarf",
	"dwarf.TagInterfaceType":                        "debug/dwarf",
	"dwarf.TagLabel":                                "debug/dwarf",
	"dwarf.TagLexDwarfBlock":                        "debug/dwarf",
	"dwarf.TagMember":                               "debug/dwarf",
	"dwarf.TagModule":                               "debug/dwarf",
	"dwarf.TagMutableType":                          "debug/dwarf",
	"dwarf.TagNamelist":                             "debug/dwarf",
	"dwarf.TagNamelistItem":                         "debug/dwarf",
	"dwarf.TagNamespace":                            "debug/dwarf",
	"dwarf.TagPackedType":                           "debug/dwarf",
	"dwarf.TagPartialUnit":                          "debug/dwarf",
	"dwarf.TagPointerType":                          "debug/dwarf",
	"dwarf.TagPtrToMemberType":                      "debug/dwarf",
	"dwarf.TagReferenceType":                        "debug/dwarf",
	"dwarf.TagRestrictType":                         "debug/dwarf",
	"dwarf.TagRvalueReferenceType":                  "debug/dwarf",
	"dwarf.TagSetType":                              "debug/dwarf",
	"dwarf.TagSharedType":                           "debug/dwarf",
	"dwarf.TagStringType":                           "debug/dwarf",
	"dwarf.TagStructType":                           "debug/dwarf",
	"dwarf.TagSubprogram":                           "debug/dwarf",
	"dwarf.TagSubrangeType":                         "debug/dwarf",
	"dwarf.TagSubroutineType":                       "debug/dwarf",
	"dwarf.TagTemplateAlias":                        "debug/dwarf",
	"dwarf.TagTemplateTypeParameter":                "debug/dwarf",
	"dwarf.TagTemplateValueParameter":               "debug/dwarf",
	"dwarf.TagThrownType":                           "debug/dwarf",
	"dwarf.TagTryDwarfBlock":                        "debug/dwarf",
	"dwarf.TagTypeUnit":                             "debug/dwarf",
	"dwarf.TagTypedef":                              "debug/dwarf",
	"dwarf.TagUnionType":                            "debug/dwarf",
	"dwarf.TagUnspecifiedParameters":                "debug/dwarf",
	"dwarf.TagUnspecifiedType":                      "debug/dwarf",
	"dwarf.TagVariable":                             "debug/dwarf",
	"dwarf.TagVariant":                              "debug/dwarf",
	"dwarf.TagVariantPart":                          "debug/dwarf",
	"dwarf.TagVolatileType":                         "debug/dwarf",
	"dwarf.TagWithStmt":                             "debug/dwarf",
	"dwarf.Type":                                    "debug/dwarf",
	"dwarf.TypedefType":                             "debug/dwarf",
	"dwarf.UcharType":                               "debug/dwarf",
	"dwarf.UintType":                                "debug/dwarf",
	"dwarf.UnspecifiedType":                         "debug/dwarf",
	"dwarf.VoidType":                                "debug/dwarf",
	"ecdsa.GenerateKey":                             "crypto/ecdsa",
	"ecdsa.PrivateKey":                              "crypto/ecdsa",
	"ecdsa.PublicKey":                               "crypto/ecdsa",
	"ecdsa.Sign":                                    "crypto/ecdsa",
	"ecdsa.Verify":                                  "crypto/ecdsa",
	"elf.ARM_MAGIC_TRAMP_NUMBER":                    "debug/elf",
	"elf.Class":                                     "debug/elf",
	"elf.DF_BIND_NOW":                               "debug/elf",
	"elf.DF_ORIGIN":                                 "debug/elf",
	"elf.DF_STATIC_TLS":                             "debug/elf",
	"elf.DF_SYMBOLIC":                               "debug/elf",
	"elf.DF_TEXTREL":                                "debug/elf",
	"elf.DT_BIND_NOW":                               "debug/elf",
	"elf.DT_DEBUG":                                  "debug/elf",
	"elf.DT_ENCODING":                               "debug/elf",
	"elf.DT_FINI":                                   "debug/elf",
	"elf.DT_FINI_ARRAY":                             "debug/elf",
	"elf.DT_FINI_ARRAYSZ":                           "debug/elf",
	"elf.DT_FLAGS":                                  "debug/elf",
	"elf.DT_HASH":                                   "debug/elf",
	"elf.DT_HIOS":                                   "debug/elf",
	"elf.DT_HIPROC":                                 "debug/elf",
	"elf.DT_INIT":                                   "debug/elf",
	"elf.DT_INIT_ARRAY":                             "debug/elf",
	"elf.DT_INIT_ARRAYSZ":                           "debug/elf",
	"elf.DT_JMPREL":                                 "debug/elf",
	"elf.DT_LOOS":                                   "debug/elf",
	"elf.DT_LOPROC":                                 "debug/elf",
	"elf.DT_NEEDED":                                 "debug/elf",
	"elf.DT_NULL":                                   "debug/elf",
	"elf.DT_PLTGOT":                                 "debug/elf",
	"elf.DT_PLTREL":                                 "debug/elf",
	"elf.DT_PLTRELSZ":                               "debug/elf",
	"elf.DT_PREINIT_ARRAY":                          "debug/elf",
	"elf.DT_PREINIT_ARRAYSZ":                        "debug/elf",
	"elf.DT_REL":                                    "debug/elf",
	"elf.DT_RELA":                                   "debug/elf",
	"elf.DT_RELAENT":                                "debug/elf",
	"elf.DT_RELASZ":                                 "debug/elf",
	"elf.DT_RELENT":                                 "debug/elf",
	"elf.DT_RELSZ":                                  "debug/elf",
	"elf.DT_RPATH":                                  "debug/elf",
	"elf.DT_RUNPATH":                                "debug/elf",
	"elf.DT_SONAME":                                 "debug/elf",
	"elf.DT_STRSZ":                                  "debug/elf",
	"elf.DT_STRTAB":                                 "debug/elf",
	"elf.DT_SYMBOLIC":                               "debug/elf",
	"elf.DT_SYMENT":                                 "debug/elf",
	"elf.DT_SYMTAB":                                 "debug/elf",
	"elf.DT_TEXTREL":                                "debug/elf",
	"elf.DT_VERNEED":                                "debug/elf",
	"elf.DT_VERNEEDNUM":                             "debug/elf",
	"elf.DT_VERSYM":                                 "debug/elf",
	"elf.Data":                                      "debug/elf",
	"elf.Dyn32":                                     "debug/elf",
	"elf.Dyn64":                                     "debug/elf",
	"elf.DynFlag":                                   "debug/elf",
	"elf.DynTag":                                    "debug/elf",
	"elf.EI_ABIVERSION":                             "debug/elf",
	"elf.EI_CLASS":                                  "debug/elf",
	"elf.EI_DATA":                                   "debug/elf",
	"elf.EI_NIDENT":                                 "debug/elf",
	"elf.EI_OSABI":                                  "debug/elf",
	"elf.EI_PAD":                                    "debug/elf",
	"elf.EI_VERSION":                                "debug/elf",
	"elf.ELFCLASS32":                                "debug/elf",
	"elf.ELFCLASS64":                                "debug/elf",
	"elf.ELFCLASSNONE":                              "debug/elf",
	"elf.ELFDATA2LSB":                               "debug/elf",
	"elf.ELFDATA2MSB":                               "debug/elf",
	"elf.ELFDATANONE":                               "debug/elf",
	"elf.ELFMAG":                                    "debug/elf",
	"elf.ELFOSABI_86OPEN":                           "debug/elf",
	"elf.ELFOSABI_AIX":                              "debug/elf",
	"elf.ELFOSABI_ARM":                              "debug/elf",
	"elf.ELFOSABI_FREEBSD":                          "debug/elf",
	"elf.ELFOSABI_HPUX":                             "debug/elf",
	"elf.ELFOSABI_HURD":                             "debug/elf",
	"elf.ELFOSABI_IRIX":                             "debug/elf",
	"elf.ELFOSABI_LINUX":                            "debug/elf",
	"elf.ELFOSABI_MODESTO":                          "debug/elf",
	"elf.ELFOSABI_NETBSD":                           "debug/elf",
	"elf.ELFOSABI_NONE":                             "debug/elf",
	"elf.ELFOSABI_NSK":                              "debug/elf",
	"elf.ELFOSABI_OPENBSD":                          "debug/elf",
	"elf.ELFOSABI_OPENVMS":                          "debug/elf",
	"elf.ELFOSABI_SOLARIS":                          "debug/elf",
	"elf.ELFOSABI_STANDALONE":                       "debug/elf",
	"elf.ELFOSABI_TRU64":                            "debug/elf",
	"elf.EM_386":                                    "debug/elf",
	"elf.EM_486":                                    "debug/elf",
	"elf.EM_68HC12":                                 "debug/elf",
	"elf.EM_68K":                                    "debug/elf",
	"elf.EM_860":                                    "debug/elf",
	"elf.EM_88K":                                    "debug/elf",
	"elf.EM_960":                                    "debug/elf",
	"elf.EM_AARCH64":                                "debug/elf",
	"elf.EM_ALPHA":                                  "debug/elf",
	"elf.EM_ALPHA_STD":                              "debug/elf",
	"elf.EM_ARC":                                    "debug/elf",
	"elf.EM_ARM":                                    "debug/elf",
	"elf.EM_COLDFIRE":                               "debug/elf",
	"elf.EM_FR20":                                   "debug/elf",
	"elf.EM_H8S":                                    "debug/elf",
	"elf.EM_H8_300":                                 "debug/elf",
	"elf.EM_H8_300H":                                "debug/elf",
	"elf.EM_H8_500":                                 "debug/elf",
	"elf.EM_IA_64":                                  "debug/elf",
	"elf.EM_M32":                                    "debug/elf",
	"elf.EM_ME16":                                   "debug/elf",
	"elf.EM_MIPS":                                   "debug/elf",
	"elf.EM_MIPS_RS3_LE":                            "debug/elf",
	"elf.EM_MIPS_RS4_BE":                            "debug/elf",
	"elf.EM_MIPS_X":                                 "debug/elf",
	"elf.EM_MMA":                                    "debug/elf",
	"elf.EM_NCPU":                                   "debug/elf",
	"elf.EM_NDR1":                                   "debug/elf",
	"elf.EM_NONE":                                   "debug/elf",
	"elf.EM_PARISC":                                 "debug/elf",
	"elf.EM_PCP":                                    "debug/elf",
	"elf.EM_PPC":                                    "debug/elf",
	"elf.EM_PPC64":                                  "debug/elf",
	"elf.EM_RCE":                                    "debug/elf",
	"elf.EM_RH32":                                   "debug/elf",
	"elf.EM_S370":                                   "debug/elf",
	"elf.EM_S390":                                   "debug/elf",
	"elf.EM_SH":                                     "debug/elf",
	"elf.EM_SPARC":                                  "debug/elf",
	"elf.EM_SPARC32PLUS":                            "debug/elf",
	"elf.EM_SPARCV9":                                "debug/elf",
	"elf.EM_ST100":                                  "debug/elf",
	"elf.EM_STARCORE":                               "debug/elf",
	"elf.EM_TINYJ":                                  "debug/elf",
	"elf.EM_TRICORE":                                "debug/elf",
	"elf.EM_V800":                                   "debug/elf",
	"elf.EM_VPP500":                                 "debug/elf",
	"elf.EM_X86_64":                                 "debug/elf",
	"elf.ET_CORE":                                   "debug/elf",
	"elf.ET_DYN":                                    "debug/elf",
	"elf.ET_EXEC":                                   "debug/elf",
	"elf.ET_HIOS":                                   "debug/elf",
	"elf.ET_HIPROC":                                 "debug/elf",
	"elf.ET_LOOS":                                   "debug/elf",
	"elf.ET_LOPROC":                                 "debug/elf",
	"elf.ET_NONE":                                   "debug/elf",
	"elf.ET_REL":                                    "debug/elf",
	"elf.EV_CURRENT":                                "debug/elf",
	"elf.EV_NONE":                                   "debug/elf",
	"elf.ErrNoSymbols":                              "debug/elf",
	"elf.File":                                      "debug/elf",
	"elf.FileHeader":                                "debug/elf",
	"elf.FormatError":                               "debug/elf",
	"elf.Header32":                                  "debug/elf",
	"elf.Header64":                                  "debug/elf",
	"elf.ImportedSymbol":                            "debug/elf",
	"elf.Machine":                                   "debug/elf",
	"elf.NT_FPREGSET":                               "debug/elf",
	"elf.NT_PRPSINFO":                               "debug/elf",
	"elf.NT_PRSTATUS":                               "debug/elf",
	"elf.NType":                                     "debug/elf",
	"elf.NewFile":                                   "debug/elf",
	"elf.OSABI":                                     "debug/elf",
	"elf.Open":                                      "debug/elf",
	"elf.PF_MASKOS":                                 "debug/elf",
	"elf.PF_MASKPROC":                               "debug/elf",
	"elf.PF_R":                                      "debug/elf",
	"elf.PF_W":                                      "debug/elf",
	"elf.PF_X":                                      "debug/elf",
	"elf.PT_DYNAMIC":                                "debug/elf",
	"elf.PT_HIOS":                                   "debug/elf",
	"elf.PT_HIPROC":                                 "debug/elf",
	"elf.PT_INTERP":                                 "debug/elf",
	"elf.PT_LOAD":                                   "debug/elf",
	"elf.PT_LOOS":                                   "debug/elf",
	"elf.PT_LOPROC":                                 "debug/elf",
	"elf.PT_NOTE":                                   "debug/elf",
	"elf.PT_NULL":                                   "debug/elf",
	"elf.PT_PHDR":                                   "debug/elf",
	"elf.PT_SHLIB":                                  "debug/elf",
	"elf.PT_TLS":                                    "debug/elf",
	"elf.Prog":                                      "debug/elf",
	"elf.Prog32":                                    "debug/elf",
	"elf.Prog64":                                    "debug/elf",
	"elf.ProgFlag":                                  "debug/elf",
	"elf.ProgHeader":                                "debug/elf",
	"elf.ProgType":                                  "debug/elf",
	"elf.R_386":                                     "debug/elf",
	"elf.R_386_32":                                  "debug/elf",
	"elf.R_386_COPY":                                "debug/elf",
	"elf.R_386_GLOB_DAT":                            "debug/elf",
	"elf.R_386_GOT32":                               "debug/elf",
	"elf.R_386_GOTOFF":                              "debug/elf",
	"elf.R_386_GOTPC":                               "debug/elf",
	"elf.R_386_JMP_SLOT":                            "debug/elf",
	"elf.R_386_NONE":                                "debug/elf",
	"elf.R_386_PC32":                                "debug/elf",
	"elf.R_386_PLT32":                               "debug/elf",
	"elf.R_386_RELATIVE":                            "debug/elf",
	"elf.R_386_TLS_DTPMOD32":                        "debug/elf",
	"elf.R_386_TLS_DTPOFF32":                        "debug/elf",
	"elf.R_386_TLS_GD":                              "debug/elf",
	"elf.R_386_TLS_GD_32":                           "debug/elf",
	"elf.R_386_TLS_GD_CALL":                         "debug/elf",
	"elf.R_386_TLS_GD_POP":                          "debug/elf",
	"elf.R_386_TLS_GD_PUSH":                         "debug/elf",
	"elf.R_386_TLS_GOTIE":                           "debug/elf",
	"elf.R_386_TLS_IE":                              "debug/elf",
	"elf.R_386_TLS_IE_32":                           "debug/elf",
	"elf.R_386_TLS_LDM":                             "debug/elf",
	"elf.R_386_TLS_LDM_32":                          "debug/elf",
	"elf.R_386_TLS_LDM_CALL":                        "debug/elf",
	"elf.R_386_TLS_LDM_POP":                         "debug/elf",
	"elf.R_386_TLS_LDM_PUSH":                        "debug/elf",
	"elf.R_386_TLS_LDO_32":                          "debug/elf",
	"elf.R_386_TLS_LE":                              "debug/elf",
	"elf.R_386_TLS_LE_32":                           "debug/elf",
	"elf.R_386_TLS_TPOFF":                           "debug/elf",
	"elf.R_386_TLS_TPOFF32":                         "debug/elf",
	"elf.R_AARCH64":                                 "debug/elf",
	"elf.R_AARCH64_ABS16":                           "debug/elf",
	"elf.R_AARCH64_ABS32":                           "debug/elf",
	"elf.R_AARCH64_ABS64":                           "debug/elf",
	"elf.R_AARCH64_ADD_ABS_LO12_NC":                 "debug/elf",
	"elf.R_AARCH64_ADR_GOT_PAGE":                    "debug/elf",
	"elf.R_AARCH64_ADR_PREL_LO21":                   "debug/elf",
	"elf.R_AARCH64_ADR_PREL_PG_HI21":                "debug/elf",
	"elf.R_AARCH64_ADR_PREL_PG_HI21_NC":             "debug/elf",
	"elf.R_AARCH64_CALL26":                          "debug/elf",
	"elf.R_AARCH64_CONDBR19":                        "debug/elf",
	"elf.R_AARCH64_COPY":                            "debug/elf",
	"elf.R_AARCH64_GLOB_DAT":                        "debug/elf",
	"elf.R_AARCH64_GOT_LD_PREL19":                   "debug/elf",
	"elf.R_AARCH64_IRELATIVE":                       "debug/elf",
	"elf.R_AARCH64_JUMP26":                          "debug/elf",
	"elf.R_AARCH64_JUMP_SLOT":                       "debug/elf",
	"elf.R_AARCH64_LD64_GOT_LO12_NC":                "debug/elf",
	"elf.R_AARCH64_LDST128_ABS_LO12_NC":             "debug/elf",
	"elf.R_AARCH64_LDST16_ABS_LO12_NC":              "debug/elf",
	"elf.R_AARCH64_LDST32_ABS_LO12_NC":              "debug/elf",
	"elf.R_AARCH64_LDST64_ABS_LO12_NC":              "debug/elf",
	"elf.R_AARCH64_LDST8_ABS_LO12_NC":               "debug/elf",
	"elf.R_AARCH64_LD_PREL_LO19":                    "debug/elf",
	"elf.R_AARCH64_MOVW_SABS_G0":                    "debug/elf",
	"elf.R_AARCH64_MOVW_SABS_G1":                    "debug/elf",
	"elf.R_AARCH64_MOVW_SABS_G2":                    "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G0":                    "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G0_NC":                 "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G1":                    "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G1_NC":                 "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G2":                    "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G2_NC":                 "debug/elf",
	"elf.R_AARCH64_MOVW_UABS_G3":                    "debug/elf",
	"elf.R_AARCH64_NONE":                            "debug/elf",
	"elf.R_AARCH64_NULL":                            "debug/elf",
	"elf.R_AARCH64_P32_ABS16":                       "debug/elf",
	"elf.R_AARCH64_P32_ABS32":                       "debug/elf",
	"elf.R_AARCH64_P32_ADD_ABS_LO12_NC":             "debug/elf",
	"elf.R_AARCH64_P32_ADR_GOT_PAGE":                "debug/elf",
	"elf.R_AARCH64_P32_ADR_PREL_LO21":               "debug/elf",
	"elf.R_AARCH64_P32_ADR_PREL_PG_HI21":            "debug/elf",
	"elf.R_AARCH64_P32_CALL26":                      "debug/elf",
	"elf.R_AARCH64_P32_CONDBR19":                    "debug/elf",
	"elf.R_AARCH64_P32_COPY":                        "debug/elf",
	"elf.R_AARCH64_P32_GLOB_DAT":                    "debug/elf",
	"elf.R_AARCH64_P32_GOT_LD_PREL19":               "debug/elf",
	"elf.R_AARCH64_P32_IRELATIVE":                   "debug/elf",
	"elf.R_AARCH64_P32_JUMP26":                      "debug/elf",
	"elf.R_AARCH64_P32_JUMP_SLOT":                   "debug/elf",
	"elf.R_AARCH64_P32_LD32_GOT_LO12_NC":            "debug/elf",
	"elf.R_AARCH64_P32_LDST128_ABS_LO12_NC":         "debug/elf",
	"elf.R_AARCH64_P32_LDST16_ABS_LO12_NC":          "debug/elf",
	"elf.R_AARCH64_P32_LDST32_ABS_LO12_NC":          "debug/elf",
	"elf.R_AARCH64_P32_LDST64_ABS_LO12_NC":          "debug/elf",
	"elf.R_AARCH64_P32_LDST8_ABS_LO12_NC":           "debug/elf",
	"elf.R_AARCH64_P32_LD_PREL_LO19":                "debug/elf",
	"elf.R_AARCH64_P32_MOVW_SABS_G0":                "debug/elf",
	"elf.R_AARCH64_P32_MOVW_UABS_G0":                "debug/elf",
	"elf.R_AARCH64_P32_MOVW_UABS_G0_NC":             "debug/elf",
	"elf.R_AARCH64_P32_MOVW_UABS_G1":                "debug/elf",
	"elf.R_AARCH64_P32_PREL16":                      "debug/elf",
	"elf.R_AARCH64_P32_PREL32":                      "debug/elf",
	"elf.R_AARCH64_P32_RELATIVE":                    "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC":                     "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_ADD_LO12_NC":         "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_ADR_PAGE21":          "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_ADR_PREL21":          "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_CALL":                "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_LD32_LO12_NC":        "debug/elf",
	"elf.R_AARCH64_P32_TLSDESC_LD_PREL19":           "debug/elf",
	"elf.R_AARCH64_P32_TLSGD_ADD_LO12_NC":           "debug/elf",
	"elf.R_AARCH64_P32_TLSGD_ADR_PAGE21":            "debug/elf",
	"elf.R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21":   "debug/elf",
	"elf.R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC": "debug/elf",
	"elf.R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19":    "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_ADD_TPREL_HI12":        "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12":        "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC":     "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0":         "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC":      "debug/elf",
	"elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G1":         "debug/elf",
	"elf.R_AARCH64_P32_TLS_DTPMOD":                  "debug/elf",
	"elf.R_AARCH64_P32_TLS_DTPREL":                  "debug/elf",
	"elf.R_AARCH64_P32_TLS_TPREL":                   "debug/elf",
	"elf.R_AARCH64_P32_TSTBR14":                     "debug/elf",
	"elf.R_AARCH64_PREL16":                          "debug/elf",
	"elf.R_AARCH64_PREL32":                          "debug/elf",
	"elf.R_AARCH64_PREL64":                          "debug/elf",
	"elf.R_AARCH64_RELATIVE":                        "debug/elf",
	"elf.R_AARCH64_TLSDESC":                         "debug/elf",
	"elf.R_AARCH64_TLSDESC_ADD":                     "debug/elf",
	"elf.R_AARCH64_TLSDESC_ADD_LO12_NC":             "debug/elf",
	"elf.R_AARCH64_TLSDESC_ADR_PAGE21":              "debug/elf",
	"elf.R_AARCH64_TLSDESC_ADR_PREL21":              "debug/elf",
	"elf.R_AARCH64_TLSDESC_CALL":                    "debug/elf",
	"elf.R_AARCH64_TLSDESC_LD64_LO12_NC":            "debug/elf",
	"elf.R_AARCH64_TLSDESC_LDR":                     "debug/elf",
	"elf.R_AARCH64_TLSDESC_LD_PREL19":               "debug/elf",
	"elf.R_AARCH64_TLSDESC_OFF_G0_NC":               "debug/elf",
	"elf.R_AARCH64_TLSDESC_OFF_G1":                  "debug/elf",
	"elf.R_AARCH64_TLSGD_ADD_LO12_NC":               "debug/elf",
	"elf.R_AARCH64_TLSGD_ADR_PAGE21":                "debug/elf",
	"elf.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21":       "debug/elf",
	"elf.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC":     "debug/elf",
	"elf.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19":        "debug/elf",
	"elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC":       "debug/elf",
	"elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1":          "debug/elf",
	"elf.R_AARCH64_TLSLE_ADD_TPREL_HI12":            "debug/elf",
	"elf.R_AARCH64_TLSLE_ADD_TPREL_LO12":            "debug/elf",
	"elf.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC":         "debug/elf",
	"elf.R_AARCH64_TLSLE_MOVW_TPREL_G0":             "debug/elf",
	"elf.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC":          "debug/elf",
	"elf.R_AARCH64_TLSLE_MOVW_TPREL_G1":             "debug/elf",
	"elf.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC":          "debug/elf",
	"elf.R_AARCH64_TLSLE_MOVW_TPREL_G2":             "debug/elf",
	"elf.R_AARCH64_TLS_DTPMOD64":                    "debug/elf",
	"elf.R_AARCH64_TLS_DTPREL64":                    "debug/elf",
	"elf.R_AARCH64_TLS_TPREL64":                     "debug/elf",
	"elf.R_AARCH64_TSTBR14":                         "debug/elf",
	"elf.R_ALPHA":                                   "debug/elf",
	"elf.R_ALPHA_BRADDR":                            "debug/elf",
	"elf.R_ALPHA_COPY":                              "debug/elf",
	"elf.R_ALPHA_GLOB_DAT":                          "debug/elf",
	"elf.R_ALPHA_GPDISP":                            "debug/elf",
	"elf.R_ALPHA_GPREL32":                           "debug/elf",
	"elf.R_ALPHA_GPRELHIGH":                         "debug/elf",
	"elf.R_ALPHA_GPRELLOW":                          "debug/elf",
	"elf.R_ALPHA_GPVALUE":                           "debug/elf",
	"elf.R_ALPHA_HINT":                              "debug/elf",
	"elf.R_ALPHA_IMMED_BR_HI32":                     "debug/elf",
	"elf.R_ALPHA_IMMED_GP_16":                       "debug/elf",
	"elf.R_ALPHA_IMMED_GP_HI32":                     "debug/elf",
	"elf.R_ALPHA_IMMED_LO32":                        "debug/elf",
	"elf.R_ALPHA_IMMED_SCN_HI32":                    "debug/elf",
	"elf.R_ALPHA_JMP_SLOT":                          "debug/elf",
	"elf.R_ALPHA_LITERAL":                           "debug/elf",
	"elf.R_ALPHA_LITUSE":                            "debug/elf",
	"elf.R_ALPHA_NONE":                              "debug/elf",
	"elf.R_ALPHA_OP_PRSHIFT":                        "debug/elf",
	"elf.R_ALPHA_OP_PSUB":                           "debug/elf",
	"elf.R_ALPHA_OP_PUSH":                           "debug/elf",
	"elf.R_ALPHA_OP_STORE":                          "debug/elf",
	"elf.R_ALPHA_REFLONG":                           "debug/elf",
	"elf.R_ALPHA_REFQUAD":                           "debug/elf",
	"elf.R_ALPHA_RELATIVE":                          "debug/elf",
	"elf.R_ALPHA_SREL16":                            "debug/elf",
	"elf.R_ALPHA_SREL32":                            "debug/elf",
	"elf.R_ALPHA_SREL64":                            "debug/elf",
	"elf.R_ARM":                                     "debug/elf",
	"elf.R_ARM_ABS12":                               "debug/elf",
	"elf.R_ARM_ABS16":                               "debug/elf",
	"elf.R_ARM_ABS32":                               "debug/elf",
	"elf.R_ARM_ABS8":                                "debug/elf",
	"elf.R_ARM_AMP_VCALL9":                          "debug/elf",
	"elf.R_ARM_COPY":                                "debug/elf",
	"elf.R_ARM_GLOB_DAT":                            "debug/elf",
	"elf.R_ARM_GNU_VTENTRY":                         "debug/elf",
	"elf.R_ARM_GNU_VTINHERIT":                       "debug/elf",
	"elf.R_ARM_GOT32":                               "debug/elf",
	"elf.R_ARM_GOTOFF":                              "debug/elf",
	"elf.R_ARM_GOTPC":                               "debug/elf",
	"elf.R_ARM_JUMP_SLOT":                           "debug/elf",
	"elf.R_ARM_NONE":                                "debug/elf",
	"elf.R_ARM_PC13":                                "debug/elf",
	"elf.R_ARM_PC24":                                "debug/elf",
	"elf.R_ARM_PLT32":                               "debug/elf",
	"elf.R_ARM_RABS32":                              "debug/elf",
	"elf.R_ARM_RBASE":                               "debug/elf",
	"elf.R_ARM_REL32":                               "debug/elf",
	"elf.R_ARM_RELATIVE":                            "debug/elf",
	"elf.R_ARM_RPC24":                               "debug/elf",
	"elf.R_ARM_RREL32":                              "debug/elf",
	"elf.R_ARM_RSBREL32":                            "debug/elf",
	"elf.R_ARM_SBREL32":                             "debug/elf",
	"elf.R_ARM_SWI24":                               "debug/elf",
	"elf.R_ARM_THM_ABS5":                            "debug/elf",
	"elf.R_ARM_THM_PC22":                            "debug/elf",
	"elf.R_ARM_THM_PC8":                             "debug/elf",
	"elf.R_ARM_THM_RPC22":                           "debug/elf",
	"elf.R_ARM_THM_SWI8":                            "debug/elf",
	"elf.R_ARM_THM_XPC22":                           "debug/elf",
	"elf.R_ARM_XPC25":                               "debug/elf",
	"elf.R_INFO":                                    "debug/elf",
	"elf.R_INFO32":                                  "debug/elf",
	"elf.R_PPC":                                     "debug/elf",
	"elf.R_PPC64":                                   "debug/elf",
	"elf.R_PPC64_ADDR14":                            "debug/elf",
	"elf.R_PPC64_ADDR14_BRNTAKEN":                   "debug/elf",
	"elf.R_PPC64_ADDR14_BRTAKEN":                    "debug/elf",
	"elf.R_PPC64_ADDR16":                            "debug/elf",
	"elf.R_PPC64_ADDR16_DS":                         "debug/elf",
	"elf.R_PPC64_ADDR16_HA":                         "debug/elf",
	"elf.R_PPC64_ADDR16_HI":                         "debug/elf",
	"elf.R_PPC64_ADDR16_HIGHER":                     "debug/elf",
	"elf.R_PPC64_ADDR16_HIGHERA":                    "debug/elf",
	"elf.R_PPC64_ADDR16_HIGHEST":                    "debug/elf",
	"elf.R_PPC64_ADDR16_HIGHESTA":                   "debug/elf",
	"elf.R_PPC64_ADDR16_LO":                         "debug/elf",
	"elf.R_PPC64_ADDR16_LO_DS":                      "debug/elf",
	"elf.R_PPC64_ADDR24":                            "debug/elf",
	"elf.R_PPC64_ADDR32":                            "debug/elf",
	"elf.R_PPC64_ADDR64":                            "debug/elf",
	"elf.R_PPC64_DTPMOD64":                          "debug/elf",
	"elf.R_PPC64_DTPREL16":                          "debug/elf",
	"elf.R_PPC64_DTPREL16_DS":                       "debug/elf",
	"elf.R_PPC64_DTPREL16_HA":                       "debug/elf",
	"elf.R_PPC64_DTPREL16_HI":                       "debug/elf",
	"elf.R_PPC64_DTPREL16_HIGHER":                   "debug/elf",
	"elf.R_PPC64_DTPREL16_HIGHERA":                  "debug/elf",
	"elf.R_PPC64_DTPREL16_HIGHEST":                  "debug/elf",
	"elf.R_PPC64_DTPREL16_HIGHESTA":                 "debug/elf",
	"elf.R_PPC64_DTPREL16_LO":                       "debug/elf",
	"elf.R_PPC64_DTPREL16_LO_DS":                    "debug/elf",
	"elf.R_PPC64_DTPREL64":                          "debug/elf",
	"elf.R_PPC64_GOT16":                             "debug/elf",
	"elf.R_PPC64_GOT16_DS":                          "debug/elf",
	"elf.R_PPC64_GOT16_HA":                          "debug/elf",
	"elf.R_PPC64_GOT16_HI":                          "debug/elf",
	"elf.R_PPC64_GOT16_LO":                          "debug/elf",
	"elf.R_PPC64_GOT16_LO_DS":                       "debug/elf",
	"elf.R_PPC64_GOT_DTPREL16_DS":                   "debug/elf",
	"elf.R_PPC64_GOT_DTPREL16_HA":                   "debug/elf",
	"elf.R_PPC64_GOT_DTPREL16_HI":                   "debug/elf",
	"elf.R_PPC64_GOT_DTPREL16_LO_DS":                "debug/elf",
	"elf.R_PPC64_GOT_TLSGD16":                       "debug/elf",
	"elf.R_PPC64_GOT_TLSGD16_HA":                    "debug/elf",
	"elf.R_PPC64_GOT_TLSGD16_HI":                    "debug/elf",
	"elf.R_PPC64_GOT_TLSGD16_LO":                    "debug/elf",
	"elf.R_PPC64_GOT_TLSLD16":                       "debug/elf",
	"elf.R_PPC64_GOT_TLSLD16_HA":                    "debug/elf",
	"elf.R_PPC64_GOT_TLSLD16_HI":                    "debug/elf",
	"elf.R_PPC64_GOT_TLSLD16_LO":                    "debug/elf",
	"elf.R_PPC64_GOT_TPREL16_DS":                    "debug/elf",
	"elf.R_PPC64_GOT_TPREL16_HA":                    "debug/elf",
	"elf.R_PPC64_GOT_TPREL16_HI":                    "debug/elf",
	"elf.R_PPC64_GOT_TPREL16_LO_DS":                 "debug/elf",
	"elf.R_PPC64_JMP_SLOT":                          "debug/elf",
	"elf.R_PPC64_NONE":                              "debug/elf",
	"elf.R_PPC64_REL14":                             "debug/elf",
	"elf.R_PPC64_REL14_BRNTAKEN":                    "debug/elf",
	"elf.R_PPC64_REL14_BRTAKEN":                     "debug/elf",
	"elf.R_PPC64_REL16":                             "debug/elf",
	"elf.R_PPC64_REL16_HA":                          "debug/elf",
	"elf.R_PPC64_REL16_HI":                          "debug/elf",
	"elf.R_PPC64_REL16_LO":                          "debug/elf",
	"elf.R_PPC64_REL24":                             "debug/elf",
	"elf.R_PPC64_REL32":                             "debug/elf",
	"elf.R_PPC64_REL64":                             "debug/elf",
	"elf.R_PPC64_TLS":                               "debug/elf",
	"elf.R_PPC64_TLSGD":                             "debug/elf",
	"elf.R_PPC64_TLSLD":                             "debug/elf",
	"elf.R_PPC64_TOC":                               "debug/elf",
	"elf.R_PPC64_TOC16":                             "debug/elf",
	"elf.R_PPC64_TOC16_DS":                          "debug/elf",
	"elf.R_PPC64_TOC16_HA":                          "debug/elf",
	"elf.R_PPC64_TOC16_HI":                          "debug/elf",
	"elf.R_PPC64_TOC16_LO":                          "debug/elf",
	"elf.R_PPC64_TOC16_LO_DS":                       "debug/elf",
	"elf.R_PPC64_TPREL16":                           "debug/elf",
	"elf.R_PPC64_TPREL16_DS":                        "debug/elf",
	"elf.R_PPC64_TPREL16_HA":                        "debug/elf",
	"elf.R_PPC64_TPREL16_HI":                        "debug/elf",
	"elf.R_PPC64_TPREL16_HIGHER":                    "debug/elf",
	"elf.R_PPC64_TPREL16_HIGHERA":                   "debug/elf",
	"elf.R_PPC64_TPREL16_HIGHEST":                   "debug/elf",
	"elf.R_PPC64_TPREL16_HIGHESTA":                  "debug/elf",
	"elf.R_PPC64_TPREL16_LO":                        "debug/elf",
	"elf.R_PPC64_TPREL16_LO_DS":                     "debug/elf",
	"elf.R_PPC64_TPREL64":                           "debug/elf",
	"elf.R_PPC_ADDR14":                              "debug/elf",
	"elf.R_PPC_ADDR14_BRNTAKEN":                     "debug/elf",
	"elf.R_PPC_ADDR14_BRTAKEN":                      "debug/elf",
	"elf.R_PPC_ADDR16":                              "debug/elf",
	"elf.R_PPC_ADDR16_HA":                           "debug/elf",
	"elf.R_PPC_ADDR16_HI":                           "debug/elf",
	"elf.R_PPC_ADDR16_LO":                           "debug/elf",
	"elf.R_PPC_ADDR24":                              "debug/elf",
	"elf.R_PPC_ADDR32":                              "debug/elf",
	"elf.R_PPC_COPY":                                "debug/elf",
	"elf.R_PPC_DTPMOD32":                            "debug/elf",
	"elf.R_PPC_DTPREL16":                            "debug/elf",
	"elf.R_PPC_DTPREL16_HA":                         "debug/elf",
	"elf.R_PPC_DTPREL16_HI":                         "debug/elf",
	"elf.R_PPC_DTPREL16_LO":                         "debug/elf",
	"elf.R_PPC_DTPREL32":                            "debug/elf",
	"elf.R_PPC_EMB_BIT_FLD":                         "debug/elf",
	"elf.R_PPC_EMB_MRKREF":                          "debug/elf",
	"elf.R_PPC_EMB_NADDR16":                         "debug/elf",
	"elf.R_PPC_EMB_NADDR16_HA":                      "debug/elf",
	"elf.R_PPC_EMB_NADDR16_HI":                      "debug/elf",
	"elf.R_PPC_EMB_NADDR16_LO":                      "debug/elf",
	"elf.R_PPC_EMB_NADDR32":                         "debug/elf",
	"elf.R_PPC_EMB_RELSDA":                          "debug/elf",
	"elf.R_PPC_EMB_RELSEC16":                        "debug/elf",
	"elf.R_PPC_EMB_RELST_HA":                        "debug/elf",
	"elf.R_PPC_EMB_RELST_HI":                        "debug/elf",
	"elf.R_PPC_EMB_RELST_LO":                        "debug/elf",
	"elf.R_PPC_EMB_SDA21":                           "debug/elf",
	"elf.R_PPC_EMB_SDA2I16":                         "debug/elf",
	"elf.R_PPC_EMB_SDA2REL":                         "debug/elf",
	"elf.R_PPC_EMB_SDAI16":                          "debug/elf",
	"elf.R_PPC_GLOB_DAT":                            "debug/elf",
	"elf.R_PPC_GOT16":                               "debug/elf",
	"elf.R_PPC_GOT16_HA":                            "debug/elf",
	"elf.R_PPC_GOT16_HI":                            "debug/elf",
	"elf.R_PPC_GOT16_LO":                            "debug/elf",
	"elf.R_PPC_GOT_TLSGD16":                         "debug/elf",
	"elf.R_PPC_GOT_TLSGD16_HA":                      "debug/elf",
	"elf.R_PPC_GOT_TLSGD16_HI":                      "debug/elf",
	"elf.R_PPC_GOT_TLSGD16_LO":                      "debug/elf",
	"elf.R_PPC_GOT_TLSLD16":                         "debug/elf",
	"elf.R_PPC_GOT_TLSLD16_HA":                      "debug/elf",
	"elf.R_PPC_GOT_TLSLD16_HI":                      "debug/elf",
	"elf.R_PPC_GOT_TLSLD16_LO":                      "debug/elf",
	"elf.R_PPC_GOT_TPREL16":                         "debug/elf",
	"elf.R_PPC_GOT_TPREL16_HA":                      "debug/elf",
	"elf.R_PPC_GOT_TPREL16_HI":                      "debug/elf",
	"elf.R_PPC_GOT_TPREL16_LO":                      "debug/elf",
	"elf.R_PPC_JMP_SLOT":                            "debug/elf",
	"elf.R_PPC_LOCAL24PC":                           "debug/elf",
	"elf.R_PPC_NONE":                                "debug/elf",
	"elf.R_PPC_PLT16_HA":                            "debug/elf",
	"elf.R_PPC_PLT16_HI":                            "debug/elf",
	"elf.R_PPC_PLT16_LO":                            "debug/elf",
	"elf.R_PPC_PLT32":                               "debug/elf",
	"elf.R_PPC_PLTREL24":                            "debug/elf",
	"elf.R_PPC_PLTREL32":                            "debug/elf",
	"elf.R_PPC_REL14":                               "debug/elf",
	"elf.R_PPC_REL14_BRNTAKEN":                      "debug/elf",
	"elf.R_PPC_REL14_BRTAKEN":                       "debug/elf",
	"elf.R_PPC_REL24":                               "debug/elf",
	"elf.R_PPC_REL32":                               "debug/elf",
	"elf.R_PPC_RELATIVE":                            "debug/elf",
	"elf.R_PPC_SDAREL16":                            "debug/elf",
	"elf.R_PPC_SECTOFF":                             "debug/elf",
	"elf.R_PPC_SECTOFF_HA":                          "debug/elf",
	"elf.R_PPC_SECTOFF_HI":                          "debug/elf",
	"elf.R_PPC_SECTOFF_LO":                          "debug/elf",
	"elf.R_PPC_TLS":                                 "debug/elf",
	"elf.R_PPC_TPREL16":                             "debug/elf",
	"elf.R_PPC_TPREL16_HA":                          "debug/elf",
	"elf.R_PPC_TPREL16_HI":                          "debug/elf",
	"elf.R_PPC_TPREL16_LO":                          "debug/elf",
	"elf.R_PPC_TPREL32":                             "debug/elf",
	"elf.R_PPC_UADDR16":                             "debug/elf",
	"elf.R_PPC_UADDR32":                             "debug/elf",
	"elf.R_SPARC":                                   "debug/elf",
	"elf.R_SPARC_10":                                "debug/elf",
	"elf.R_SPARC_11":                                "debug/elf",
	"elf.R_SPARC_13":                                "debug/elf",
	"elf.R_SPARC_16":                                "debug/elf",
	"elf.R_SPARC_22":                                "debug/elf",
	"elf.R_SPARC_32":                                "debug/elf",
	"elf.R_SPARC_5":                                 "debug/elf",
	"elf.R_SPARC_6":                                 "debug/elf",
	"elf.R_SPARC_64":                                "debug/elf",
	"elf.R_SPARC_7":                                 "debug/elf",
	"elf.R_SPARC_8":                                 "debug/elf",
	"elf.R_SPARC_COPY":                              "debug/elf",
	"elf.R_SPARC_DISP16":                            "debug/elf",
	"elf.R_SPARC_DISP32":                            "debug/elf",
	"elf.R_SPARC_DISP64":                            "debug/elf",
	"elf.R_SPARC_DISP8":                             "debug/elf",
	"elf.R_SPARC_GLOB_DAT":                          "debug/elf",
	"elf.R_SPARC_GLOB_JMP":                          "debug/elf",
	"elf.R_SPARC_GOT10":                             "debug/elf",
	"elf.R_SPARC_GOT13":                             "debug/elf",
	"elf.R_SPARC_GOT22":                             "debug/elf",
	"elf.R_SPARC_H44":                               "debug/elf",
	"elf.R_SPARC_HH22":                              "debug/elf",
	"elf.R_SPARC_HI22":                              "debug/elf",
	"elf.R_SPARC_HIPLT22":                           "debug/elf",
	"elf.R_SPARC_HIX22":                             "debug/elf",
	"elf.R_SPARC_HM10":                              "debug/elf",
	"elf.R_SPARC_JMP_SLOT":                          "debug/elf",
	"elf.R_SPARC_L44":                               "debug/elf",
	"elf.R_SPARC_LM22":                              "debug/elf",
	"elf.R_SPARC_LO10":                              "debug/elf",
	"elf.R_SPARC_LOPLT10":                           "debug/elf",
	"elf.R_SPARC_LOX10":                             "debug/elf",
	"elf.R_SPARC_M44":                               "debug/elf",
	"elf.R_SPARC_NONE":                              "debug/elf",
	"elf.R_SPARC_OLO10":                             "debug/elf",
	"elf.R_SPARC_PC10":                              "debug/elf",
	"elf.R_SPARC_PC22":                              "debug/elf",
	"elf.R_SPARC_PCPLT10":                           "debug/elf",
	"elf.R_SPARC_PCPLT22":                           "debug/elf",
	"elf.R_SPARC_PCPLT32":                           "debug/elf",
	"elf.R_SPARC_PC_HH22":                           "debug/elf",
	"elf.R_SPARC_PC_HM10":                           "debug/elf",
	"elf.R_SPARC_PC_LM22":                           "debug/elf",
	"elf.R_SPARC_PLT32":                             "debug/elf",
	"elf.R_SPARC_PLT64":                             "debug/elf",
	"elf.R_SPARC_REGISTER":                          "debug/elf",
	"elf.R_SPARC_RELATIVE":                          "debug/elf",
	"elf.R_SPARC_UA16":                              "debug/elf",
	"elf.R_SPARC_UA32":                              "debug/elf",
	"elf.R_SPARC_UA64":                              "debug/elf",
	"elf.R_SPARC_WDISP16":                           "debug/elf",
	"elf.R_SPARC_WDISP19":                           "debug/elf",
	"elf.R_SPARC_WDISP22":                           "debug/elf",
	"elf.R_SPARC_WDISP30":                           "debug/elf",
	"elf.R_SPARC_WPLT30":                            "debug/elf",
	"elf.R_SYM32":                                   "debug/elf",
	"elf.R_SYM64":                                   "debug/elf",
	"elf.R_TYPE32":                                  "debug/elf",
	"elf.R_TYPE64":                                  "debug/elf",
	"elf.R_X86_64":                                  "debug/elf",
	"elf.R_X86_64_16":                               "debug/elf",
	"elf.R_X86_64_32":                               "debug/elf",
	"elf.R_X86_64_32S":                              "debug/elf",
	"elf.R_X86_64_64":                               "debug/elf",
	"elf.R_X86_64_8":                                "debug/elf",
	"elf.R_X86_64_COPY":                             "debug/elf",
	"elf.R_X86_64_DTPMOD64":                         "debug/elf",
	"elf.R_X86_64_DTPOFF32":                         "debug/elf",
	"elf.R_X86_64_DTPOFF64":                         "debug/elf",
	"elf.R_X86_64_GLOB_DAT":                         "debug/elf",
	"elf.R_X86_64_GOT32":                            "debug/elf",
	"elf.R_X86_64_GOTPCREL":                         "debug/elf",
	"elf.R_X86_64_GOTTPOFF":                         "debug/elf",
	"elf.R_X86_64_JMP_SLOT":                         "debug/elf",
	"elf.R_X86_64_NONE":                             "debug/elf",
	"elf.R_X86_64_PC16":                             "debug/elf",
	"elf.R_X86_64_PC32":                             "debug/elf",
	"elf.R_X86_64_PC8":                              "debug/elf",
	"elf.R_X86_64_PLT32":                            "debug/elf",
	"elf.R_X86_64_RELATIVE":                         "debug/elf",
	"elf.R_X86_64_TLSGD":                            "debug/elf",
	"elf.R_X86_64_TLSLD":                            "debug/elf",
	"elf.R_X86_64_TPOFF32":                          "debug/elf",
	"elf.R_X86_64_TPOFF64":                          "debug/elf",
	"elf.Rel32":                                     "debug/elf",
	"elf.Rel64":                                     "debug/elf",
	"elf.Rela32":                                    "debug/elf",
	"elf.Rela64":                                    "debug/elf",
	"elf.SHF_ALLOC":                                 "debug/elf",
	"elf.SHF_EXECINSTR":                             "debug/elf",
	"elf.SHF_GROUP":                                 "debug/elf",
	"elf.SHF_INFO_LINK":                             "debug/elf",
	"elf.SHF_LINK_ORDER":                            "debug/elf",
	"elf.SHF_MASKOS":                                "debug/elf",
	"elf.SHF_MASKPROC":                              "debug/elf",
	"elf.SHF_MERGE":                                 "debug/elf",
	"elf.SHF_OS_NONCONFORMING":                      "debug/elf",
	"elf.SHF_STRINGS":                               "debug/elf",
	"elf.SHF_TLS":                                   "debug/elf",
	"elf.SHF_WRITE":                                 "debug/elf",
	"elf.SHN_ABS":                                   "debug/elf",
	"elf.SHN_COMMON":                                "debug/elf",
	"elf.SHN_HIOS":                                  "debug/elf",
	"elf.SHN_HIPROC":                                "debug/elf",
	"elf.SHN_HIRESERVE":                             "debug/elf",
	"elf.SHN_LOOS":                                  "debug/elf",
	"elf.SHN_LOPROC":                                "debug/elf",
	"elf.SHN_LORESERVE":                             "debug/elf",
	"elf.SHN_UNDEF":                                 "debug/elf",
	"elf.SHN_XINDEX":                                "debug/elf",
	"elf.SHT_DYNAMIC":                               "debug/elf",
	"elf.SHT_DYNSYM":                                "debug/elf",
	"elf.SHT_FINI_ARRAY":                            "debug/elf",
	"elf.SHT_GNU_ATTRIBUTES":                        "debug/elf",
	"elf.SHT_GNU_HASH":                              "debug/elf",
	"elf.SHT_GNU_LIBLIST":                           "debug/elf",
	"elf.SHT_GNU_VERDEF":                            "debug/elf",
	"elf.SHT_GNU_VERNEED":                           "debug/elf",
	"elf.SHT_GNU_VERSYM":                            "debug/elf",
	"elf.SHT_GROUP":                                 "debug/elf",
	"elf.SHT_HASH":                                  "debug/elf",
	"elf.SHT_HIOS":                                  "debug/elf",
	"elf.SHT_HIPROC":                                "debug/elf",
	"elf.SHT_HIUSER":                                "debug/elf",
	"elf.SHT_INIT_ARRAY":                            "debug/elf",
	"elf.SHT_LOOS":                                  "debug/elf",
	"elf.SHT_LOPROC":                                "debug/elf",
	"elf.SHT_LOUSER":                                "debug/elf",
	"elf.SHT_NOBITS":                                "debug/elf",
	"elf.SHT_NOTE":                                  "debug/elf",
	"elf.SHT_NULL":                                  "debug/elf",
	"elf.SHT_PREINIT_ARRAY":                         "debug/elf",
	"elf.SHT_PROGBITS":                              "debug/elf",
	"elf.SHT_REL":                                   "debug/elf",
	"elf.SHT_RELA":                                  "debug/elf",
	"elf.SHT_SHLIB":                                 "debug/elf",
	"elf.SHT_STRTAB":                                "debug/elf",
	"elf.SHT_SYMTAB":                                "debug/elf",
	"elf.SHT_SYMTAB_SHNDX":                          "debug/elf",
	"elf.STB_GLOBAL":                                "debug/elf",
	"elf.STB_HIOS":                                  "debug/elf",
	"elf.STB_HIPROC":                                "debug/elf",
	"elf.STB_LOCAL":                                 "debug/elf",
	"elf.STB_LOOS":                                  "debug/elf",
	"elf.STB_LOPROC":                                "debug/elf",
	"elf.STB_WEAK":                                  "debug/elf",
	"elf.STT_COMMON":                                "debug/elf",
	"elf.STT_FILE":                                  "debug/elf",
	"elf.STT_FUNC":                                  "debug/elf",
	"elf.STT_HIOS":                                  "debug/elf",
	"elf.STT_HIPROC":                                "debug/elf",
	"elf.STT_LOOS":                                  "debug/elf",
	"elf.STT_LOPROC":                                "debug/elf",
	"elf.STT_NOTYPE":                                "debug/elf",
	"elf.STT_OBJECT":                                "debug/elf",
	"elf.STT_SECTION":                               "debug/elf",
	"elf.STT_TLS":                                   "debug/elf",
	"elf.STV_DEFAULT":                               "debug/elf",
	"elf.STV_HIDDEN":                                "debug/elf",
	"elf.STV_INTERNAL":                              "debug/elf",
	"elf.STV_PROTECTED":                             "debug/elf",
	"elf.ST_BIND":                                   "debug/elf",
	"elf.ST_INFO":                                   "debug/elf",
	"elf.ST_TYPE":                                   "debug/elf",
	"elf.ST_VISIBILITY":                             "debug/elf",
	"elf.Section":                                   "debug/elf",
	"elf.Section32":                                 "debug/elf",
	"elf.Section64":                                 "debug/elf",
	"elf.SectionFlag":                               "debug/elf",
	"elf.SectionHeader":                             "debug/elf",
	"elf.SectionIndex":                              "debug/elf",
	"elf.SectionType":                               "debug/elf",
	"elf.Sym32":                                     "debug/elf",
	"elf.Sym32Size":                                 "debug/elf",
	"elf.Sym64":                                     "debug/elf",
	"elf.Sym64Size":                                 "debug/elf",
	"elf.SymBind":                                   "debug/elf",
	"elf.SymType":                                   "debug/elf",
	"elf.SymVis":                                    "debug/elf",
	"elf.Symbol":                                    "debug/elf",
	"elf.Type":                                      "debug/elf",
	"elf.Version":                                   "debug/elf",
	"elliptic.Curve":                                "crypto/elliptic",
	"elliptic.CurveParams":                          "crypto/elliptic",
	"elliptic.GenerateKey":                          "crypto/elliptic",
	"elliptic.Marshal":                              "crypto/elliptic",
	"elliptic.P224":                                 "crypto/elliptic",
	"elliptic.P256":                                 "crypto/elliptic",
	"elliptic.P384":                                 "crypto/elliptic",
	"elliptic.P521":                                 "crypto/elliptic",
	"elliptic.Unmarshal":                            "crypto/elliptic",
	"encoding.BinaryMarshaler":                      "encoding",
	"encoding.BinaryUnmarshaler":                    "encoding",
	"encoding.TextMarshaler":                        "encoding",
	"encoding.TextUnmarshaler":                      "encoding",
	"errors.New":                                    "errors",
	"exec.Cmd":                                      "os/exec",
	"exec.Command":                                  "os/exec",
	"exec.ErrNotFound":                              "os/exec",
	"exec.Error":                                    "os/exec",
	"exec.ExitError":                                "os/exec",
	"exec.LookPath":                                 "os/exec",
	"expvar.Do":                                     "expvar",
	"expvar.Float":                                  "expvar",
	"expvar.Func":                                   "expvar",
	"expvar.Get":                                    "expvar",
	"expvar.Int":                                    "expvar",
	"expvar.KeyValue":                               "expvar",
	"expvar.Map":                                    "expvar",
	"expvar.NewFloat":                               "expvar",
	"expvar.NewInt":                                 "expvar",
	"expvar.NewMap":                                 "expvar",
	"expvar.NewString":                              "expvar",
	"expvar.Publish":                                "expvar",
	"expvar.String":                                 "expvar",
	"expvar.Var":                                    "expvar",
	"fcgi.ErrConnClosed":                            "net/http/fcgi",
	"fcgi.ErrRequestAborted":                        "net/http/fcgi",
	"fcgi.Serve":                                    "net/http/fcgi",
	"filepath.Abs":                                  "path/filepath",
	"filepath.Base":                                 "path/filepath",
	"filepath.Clean":                                "path/filepath",
	"filepath.Dir":                                  "path/filepath",
	"filepath.ErrBadPattern":                        "path/filepath",
	"filepath.EvalSymlinks":                         "path/filepath",
	"filepath.Ext":                                  "path/filepath",
	"filepath.FromSlash":                            "path/filepath",
	"filepath.Glob":                                 "path/filepath",
	"filepath.HasPrefix":                            "path/filepath",
	"filepath.IsAbs":                                "path/filepath",
	"filepath.Join":                                 "path/filepath",
	"filepath.ListSeparator":                        "path/filepath",
	"filepath.Match":                                "path/filepath",
	"filepath.Rel":                                  "path/filepath",
	"filepath.Separator":                            "path/filepath",
	"filepath.SkipDir":                              "path/filepath",
	"filepath.Split":                                "path/filepath",
	"filepath.SplitList":                            "path/filepath",
	"filepath.ToSlash":                              "path/filepath",
	"filepath.VolumeName":                           "path/filepath",
	"filepath.Walk":                                 "path/filepath",
	"filepath.WalkFunc":                             "path/filepath",
	"flag.Arg":                                      "flag",
	"flag.Args":                                     "flag",
	"flag.Bool":                                     "flag",
	"flag.BoolVar":                                  "flag",
	"flag.CommandLine":                              "flag",
	"flag.ContinueOnError":                          "flag",
	"flag.Duration":                                 "flag",
	"flag.DurationVar":                              "flag",
	"flag.ErrHelp":                                  "flag",
	"flag.ErrorHandling":                            "flag",
	"flag.ExitOnError":                              "flag",
	"flag.Flag":                                     "flag",
	"flag.FlagSet":                                  "flag",
	"flag.Float64":                                  "flag",
	"flag.Float64Var":                               "flag",
	"flag.Getter":                                   "flag",
	"flag.Int":                                      "flag",
	"flag.Int64":                                    "flag",
	"flag.Int64Var":                                 "flag",
	"flag.IntVar":                                   "flag",
	"flag.Lookup":                                   "flag",
	"flag.NArg":                                     "flag",
	"flag.NFlag":                                    "flag",
	"flag.NewFlagSet":                               "flag",
	"flag.PanicOnError":                             "flag",
	"flag.Parse":                                    "flag",
	"flag.Parsed":                                   "flag",
	"flag.PrintDefaults":                            "flag",
	"flag.Set":                                      "flag",
	"flag.String":                                   "flag",
	"flag.StringVar":                                "flag",
	"flag.Uint":                                     "flag",
	"flag.Uint64":                                   "flag",
	"flag.Uint64Var":                                "flag",
	"flag.UintVar":                                  "flag",
	"flag.UnquoteUsage":                             "flag",
	"flag.Usage":                                    "flag",
	"flag.Value":                                    "flag",
	"flag.Var":                                      "flag",
	"flag.Visit":                                    "flag",
	"flag.VisitAll":                                 "flag",
	"flate.BestCompression":                         "compress/flate",
	"flate.BestSpeed":                               "compress/flate",
	"flate.CorruptInputError":                       "compress/flate",
	"flate.DefaultCompression":                      "compress/flate",
	"flate.InternalError":                           "compress/flate",
	"flate.NewReader":                               "compress/flate",
	"flate.NewReaderDict":                           "compress/flate",
	"flate.NewWriter":                               "compress/flate",
	"flate.NewWriterDict":                           "compress/flate",
	"flate.NoCompression":                           "compress/flate",
	"flate.ReadError":                               "compress/flate",
	"flate.Reader":                                  "compress/flate",
	"flate.Resetter":                                "compress/flate",
	"flate.WriteError":                              "compress/flate",
	"flate.Writer":                                  "compress/flate",
	"fmt.Errorf":                                    "fmt",
	"fmt.Formatter":                                 "fmt",
	"fmt.Fprint":                                    "fmt",
	"fmt.Fprintf":                                   "fmt",
	"fmt.Fprintln":                                  "fmt",
	"fmt.Fscan":                                     "fmt",
	"fmt.Fscanf":                                    "fmt",
	"fmt.Fscanln":                                   "fmt",
	"fmt.GoStringer":                                "fmt",
	"fmt.Print":                                     "fmt",
	"fmt.Printf":                                    "fmt",
	"fmt.Println":                                   "fmt",
	"fmt.Scan":                                      "fmt",
	"fmt.ScanState":                                 "fmt",
	"fmt.Scanf":                                     "fmt",
	"fmt.Scanln":                                    "fmt",
	"fmt.Scanner":                                   "fmt",
	"fmt.Sprint":                                    "fmt",
	"fmt.Sprintf":                                   "fmt",
	"fmt.Sprintln":                                  "fmt",
	"fmt.Sscan":                                     "fmt",
	"fmt.Sscanf":                                    "fmt",
	"fmt.Sscanln":                                   "fmt",
	"fmt.State":                                     "fmt",
	"fmt.Stringer":                                  "fmt",
	"fnv.New32":                                     "hash/fnv",
	"fnv.New32a":                                    "hash/fnv",
	"fnv.New64":                                     "hash/fnv",
	"fnv.New64a":                                    "hash/fnv",
	"format.Node":                                   "go/format",
	"format.Source":                                 "go/format",
	"gif.Decode":                                    "image/gif",
	"gif.DecodeAll":                                 "image/gif",
	"gif.DecodeConfig":                              "image/gif",
	"gif.DisposalBackground":                        "image/gif",
	"gif.DisposalNone":                              "image/gif",
	"gif.DisposalPrevious":                          "image/gif",
	"gif.Encode":                                    "image/gif",
	"gif.EncodeAll":                                 "image/gif",
	"gif.GIF":                                       "image/gif",
	"gif.Options":                                   "image/gif",
	"gob.CommonType":                                "encoding/gob",
	"gob.Decoder":                                   "encoding/gob",
	"gob.Encoder":                                   "encoding/gob",
	"gob.GobDecoder":                                "encoding/gob",
	"gob.GobEncoder":                                "encoding/gob",
	"gob.NewDecoder":                                "encoding/gob",
	"gob.NewEncoder":                                "encoding/gob",
	"gob.Register":                                  "encoding/gob",
	"gob.RegisterName":                              "encoding/gob",
	"gosym.DecodingError":                           "debug/gosym",
	"gosym.Func":                                    "debug/gosym",
	"gosym.LineTable":                               "debug/gosym",
	"gosym.NewLineTable":                            "debug/gosym",
	"gosym.NewTable":                                "debug/gosym",
	"gosym.Obj":                                     "debug/gosym",
	"gosym.Sym":                                     "debug/gosym",
	"gosym.Table":                                   "debug/gosym",
	"gosym.UnknownFileError":                        "debug/gosym",
	"gosym.UnknownLineError":                        "debug/gosym",
	"gzip.BestCompression":                          "compress/gzip",
	"gzip.BestSpeed":                                "compress/gzip",
	"gzip.DefaultCompression":                       "compress/gzip",
	"gzip.ErrChecksum":                              "compress/gzip",
	"gzip.ErrHeader":                                "compress/gzip",
	"gzip.Header":                                   "compress/gzip",
	"gzip.NewReader":                                "compress/gzip",
	"gzip.NewWriter":                                "compress/gzip",
	"gzip.NewWriterLevel":                           "compress/gzip",
	"gzip.NoCompression":                            "compress/gzip",
	"gzip.Reader":                                   "compress/gzip",
	"gzip.Writer":                                   "compress/gzip",
	"hash.Hash":                                     "hash",
	"hash.Hash32":                                   "hash",
	"hash.Hash64":                                   "hash",
	"heap.Fix":                                      "container/heap",
	"heap.Init":                                     "container/heap",
	"heap.Interface":                                "container/heap",
	"heap.Pop":                                      "container/heap",
	"heap.Push":                                     "container/heap",
	"heap.Remove":                                   "container/heap",
	"hex.Decode":                                    "encoding/hex",
	"hex.DecodeString":                              "encoding/hex",
	"hex.DecodedLen":                                "encoding/hex",
	"hex.Dump":                                      "encoding/hex",
	"hex.Dumper":                                    "encoding/hex",
	"hex.Encode":                                    "encoding/hex",
	"hex.EncodeToString":                            "encoding/hex",
	"hex.EncodedLen":                                "encoding/hex",
	"hex.ErrLength":                                 "encoding/hex",
	"hex.InvalidByteError":                          "encoding/hex",
	"hmac.Equal":                                    "crypto/hmac",
	"hmac.New":                                      "crypto/hmac",
	"html.EscapeString":                             "html",
	"html.UnescapeString":                           "html",
	"http.CanonicalHeaderKey":                       "net/http",
	"http.Client":                                   "net/http",
	"http.CloseNotifier":                            "net/http",
	"http.ConnState":                                "net/http",
	"http.Cookie":                                   "net/http",
	"http.CookieJar":                                "net/http",
	"http.DefaultClient":                            "net/http",
	"http.DefaultMaxHeaderBytes":                    "net/http",
	"http.DefaultMaxIdleConnsPerHost":               "net/http",
	"http.DefaultServeMux":                          "net/http",
	"http.DefaultTransport":                         "net/http",
	"http.DetectContentType":                        "net/http",
	"http.Dir":                                      "net/http",
	"http.ErrBodyNotAllowed":                        "net/http",
	"http.ErrBodyReadAfterClose":                    "net/http",
	"http.ErrContentLength":                         "net/http",
	"http.ErrHandlerTimeout":                        "net/http",
	"http.ErrHeaderTooLong":                         "net/http",
	"http.ErrHijacked":                              "net/http",
	"http.ErrLineTooLong":                           "net/http",
	"http.ErrMissingBoundary":                       "net/http",
	"http.ErrMissingContentLength":                  "net/http",
	"http.ErrMissingFile":                           "net/http",
	"http.ErrNoCookie":                              "net/http",
	"http.ErrNoLocation":                            "net/http",
	"http.ErrNotMultipart":                          "net/http",
	"http.ErrNotSupported":                          "net/http",
	"http.ErrShortBody":                             "net/http",
	"http.ErrUnexpectedTrailer":                     "net/http",
	"http.ErrWriteAfterFlush":                       "net/http",
	"http.Error":                                    "net/http",
	"http.File":                                     "net/http",
	"http.FileServer":                               "net/http",
	"http.FileSystem":                               "net/http",
	"http.Flusher":                                  "net/http",
	"http.Get":                                      "net/http",
	"http.Handle":                                   "net/http",
	"http.HandleFunc":                               "net/http",
	"http.Handler":                                  "net/http",
	"http.HandlerFunc":                              "net/http",
	"http.Head":                                     "net/http",
	"http.Header":                                   "net/http",
	"http.Hijacker":                                 "net/http",
	"http.ListenAndServe":                           "net/http",
	"http.ListenAndServeTLS":                        "net/http",
	"http.MaxBytesReader":                           "net/http",
	"http.NewFileTransport":                         "net/http",
	"http.NewRequest":                               "net/http",
	"http.NewServeMux":                              "net/http",
	"http.NotFound":                                 "net/http",
	"http.NotFoundHandler":                          "net/http",
	"http.ParseHTTPVersion":                         "net/http",
	"http.ParseTime":                                "net/http",
	"http.Post":                                     "net/http",
	"http.PostForm":                                 "net/http",
	"http.ProtocolError":                            "net/http",
	"http.ProxyFromEnvironment":                     "net/http",
	"http.ProxyURL":                                 "net/http",
	"http.ReadRequest":                              "net/http",
	"http.ReadResponse":                             "net/http",
	"http.Redirect":                                 "net/http",
	"http.RedirectHandler":                          "net/http",
	"http.Request":                                  "net/http",
	"http.Response":                                 "net/http",
	"http.ResponseWriter":                           "net/http",
	"http.RoundTripper":                             "net/http",
	"http.Serve":                                    "net/http",
	"http.ServeContent":                             "net/http",
	"http.ServeFile":                                "net/http",
	"http.ServeMux":                                 "net/http",
	"http.Server":                                   "net/http",
	"http.SetCookie":                                "net/http",
	"http.StateActive":                              "net/http",
	"http.StateClosed":                              "net/http",
	"http.StateHijacked":                            "net/http",
	"http.StateIdle":                                "net/http",
	"http.StateNew":                                 "net/http",
	"http.StatusAccepted":                           "net/http",
	"http.StatusBadGateway":                         "net/http",
	"http.StatusBadRequest":                         "net/http",
	"http.StatusConflict":                           "net/http",
	"http.StatusContinue":                           "net/http",
	"http.StatusCreated":                            "net/http",
	"http.StatusExpectationFailed":                  "net/http",
	"http.StatusForbidden":                          "net/http",
	"http.StatusFound":                              "net/http",
	"http.StatusGatewayTimeout":                     "net/http",
	"http.StatusGone":                               "net/http",
	"http.StatusHTTPVersionNotSupported":            "net/http",
	"http.StatusInternalServerError":                "net/http",
	"http.StatusLengthRequired":                     "net/http",
	"http.StatusMethodNotAllowed":                   "net/http",
	"http.StatusMovedPermanently":                   "net/http",
	"http.StatusMultipleChoices":                    "net/http",
	"http.StatusNoContent":                          "net/http",
	"http.StatusNonAuthoritativeInfo":               "net/http",
	"http.StatusNotAcceptable":                      "net/http",
	"http.StatusNotFound":                           "net/http",
	"http.StatusNotImplemented":                     "net/http",
	"http.StatusNotModified":                        "net/http",
	"http.StatusOK":                                 "net/http",
	"http.StatusPartialContent":                     "net/http",
	"http.StatusPaymentRequired":                    "net/http",
	"http.StatusPreconditionFailed":                 "net/http",
	"http.StatusProxyAuthRequired":                  "net/http",
	"http.StatusRequestEntityTooLarge":              "net/http",
	"http.StatusRequestTimeout":                     "net/http",
	"http.StatusRequestURITooLong":                  "net/http",
	"http.StatusRequestedRangeNotSatisfiable":       "net/http",
	"http.StatusResetContent":                       "net/http",
	"http.StatusSeeOther":                           "net/http",
	"http.StatusServiceUnavailable":                 "net/http",
	"http.StatusSwitchingProtocols":                 "net/http",
	"http.StatusTeapot":                             "net/http",
	"http.StatusTemporaryRedirect":                  "net/http",
	"http.StatusText":                               "net/http",
	"http.StatusUnauthorized":                       "net/http",
	"http.StatusUnsupportedMediaType":               "net/http",
	"http.StatusUseProxy":                           "net/http",
	"http.StripPrefix":                              "net/http",
	"http.TimeFormat":                               "net/http",
	"http.TimeoutHandler":                           "net/http",
	"http.Transport":                                "net/http",
	"httptest.DefaultRemoteAddr":                    "net/http/httptest",
	"httptest.NewRecorder":                          "net/http/httptest",
	"httptest.NewServer":                            "net/http/httptest",
	"httptest.NewTLSServer":                         "net/http/httptest",
	"httptest.NewUnstartedServer":                   "net/http/httptest",
	"httptest.ResponseRecorder":                     "net/http/httptest",
	"httptest.Server":                               "net/http/httptest",
	"httputil.ClientConn":                           "net/http/httputil",
	"httputil.DumpRequest":                          "net/http/httputil",
	"httputil.DumpRequestOut":                       "net/http/httputil",
	"httputil.DumpResponse":                         "net/http/httputil",
	"httputil.ErrClosed":                            "net/http/httputil",
	"httputil.ErrLineTooLong":                       "net/http/httputil",
	"httputil.ErrPersistEOF":                        "net/http/httputil",
	"httputil.ErrPipeline":                          "net/http/httputil",
	"httputil.NewChunkedReader":                     "net/http/httputil",
	"httputil.NewChunkedWriter":                     "net/http/httputil",
	"httputil.NewClientConn":                        "net/http/httputil",
	"httputil.NewProxyClientConn":                   "net/http/httputil",
	"httputil.NewServerConn":                        "net/http/httputil",
	"httputil.NewSingleHostReverseProxy":            "net/http/httputil",
	"httputil.ReverseProxy":                         "net/http/httputil",
	"httputil.ServerConn":                           "net/http/httputil",
	"image.Alpha":                                   "image",
	"image.Alpha16":                                 "image",
	"image.Black":                                   "image",
	"image.CMYK":                                    "image",
	"image.Config":                                  "image",
	"image.Decode":                                  "image",
	"image.DecodeConfig":                            "image",
	"image.ErrFormat":                               "image",
	"image.Gray":                                    "image",
	"image.Gray16":                                  "image",
	"image.Image":                                   "image",
	"image.NRGBA":                                   "image",
	"image.NRGBA64":                                 "image",
	"image.NewAlpha":                                "image",
	"image.NewAlpha16":                              "image",
	"image.NewCMYK":                                 "image",
	"image.NewGray":                                 "image",
	"image.NewGray16":                               "image",
	"image.NewNRGBA":                                "image",
	"image.NewNRGBA64":                              "image",
	"image.NewPaletted":                             "image",
	"image.NewRGBA":                                 "image",
	"image.NewRGBA64":                               "image",
	"image.NewUniform":                              "image",
	"image.NewYCbCr":                                "image",
	"image.Opaque":                                  "image",
	"image.Paletted":                                "image",
	"image.PalettedImage":                           "image",
	"image.Point":                                   "image",
	"image.Pt":                                      "image",
	"image.RGBA":                                    "image",
	"image.RGBA64":                                  "image",
	"image.Rect":                                    "image",
	"image.Rectangle":                               "image",
	"image.RegisterFormat":                          "image",
	"image.Transparent":                             "image",
	"image.Uniform":                                 "image",
	"image.White":                                   "image",
	"image.YCbCr":                                   "image",
	"image.YCbCrSubsampleRatio":                     "image",
	"image.YCbCrSubsampleRatio410":                  "image",
	"image.YCbCrSubsampleRatio411":                  "image",
	"image.YCbCrSubsampleRatio420":                  "image",
	"image.YCbCrSubsampleRatio422":                  "image",
	"image.YCbCrSubsampleRatio440":                  "image",
	"image.YCbCrSubsampleRatio444":                  "image",
	"image.ZP":                                      "image",
	"image.ZR":                                      "image",
	"importer.Default":                              "go/importer",
	"importer.For":                                  "go/importer",
	"importer.Lookup":                               "go/importer",
	"io.ByteReader":                                 "io",
	"io.ByteScanner":                                "io",
	"io.ByteWriter":                                 "io",
	"io.Closer":                                     "io",
	"io.Copy":                                       "io",
	"io.CopyBuffer":                                 "io",
	"io.CopyN":                                      "io",
	"io.EOF":                                        "io",
	"io.ErrClosedPipe":                              "io",
	"io.ErrNoProgress":                              "io",
	"io.ErrShortBuffer":                             "io",
	"io.ErrShortWrite":                              "io",
	"io.ErrUnexpectedEOF":                           "io",
	"io.LimitReader":                                "io",
	"io.LimitedReader":                              "io",
	"io.MultiReader":                                "io",
	"io.MultiWriter":                                "io",
	"io.NewSectionReader":                           "io",
	"io.Pipe":                                       "io",
	"io.PipeReader":                                 "io",
	"io.PipeWriter":                                 "io",
	"io.ReadAtLeast":                                "io",
	"io.ReadCloser":                                 "io",
	"io.ReadFull":                                   "io",
	"io.ReadSeeker":                                 "io",
	"io.ReadWriteCloser":                            "io",
	"io.ReadWriteSeeker":                            "io",
	"io.ReadWriter":                                 "io",
	"io.Reader":                                     "io",
	"io.ReaderAt":                                   "io",
	"io.ReaderFrom":                                 "io",
	"io.RuneReader":                                 "io",
	"io.RuneScanner":                                "io",
	"io.SectionReader":                              "io",
	"io.Seeker":                                     "io",
	"io.TeeReader":                                  "io",
	"io.WriteCloser":                                "io",
	"io.WriteSeeker":                                "io",
	"io.WriteString":                                "io",
	"io.Writer":                                     "io",
	"io.WriterAt":                                   "io",
	"io.WriterTo":                                   "io",
	"iotest.DataErrReader":                          "testing/iotest",
	"iotest.ErrTimeout":                             "testing/iotest",
	"iotest.HalfReader":                             "testing/iotest",
	"iotest.NewReadLogger":                          "testing/iotest",
	"iotest.NewWriteLogger":                         "testing/iotest",
	"iotest.OneByteReader":                          "testing/iotest",
	"iotest.TimeoutReader":                          "testing/iotest",
	"iotest.TruncateWriter":                         "testing/iotest",
	"ioutil.Discard":                                "io/ioutil",
	"ioutil.NopCloser":                              "io/ioutil",
	"ioutil.ReadAll":                                "io/ioutil",
	"ioutil.ReadDir":                                "io/ioutil",
	"ioutil.ReadFile":                               "io/ioutil",
	"ioutil.TempDir":                                "io/ioutil",
	"ioutil.TempFile":                               "io/ioutil",
	"ioutil.WriteFile":                              "io/ioutil",
	"jpeg.Decode":                                   "image/jpeg",
	"jpeg.DecodeConfig":                             "image/jpeg",
	"jpeg.DefaultQuality":                           "image/jpeg",
	"jpeg.Encode":                                   "image/jpeg",
	"jpeg.FormatError":                              "image/jpeg",
	"jpeg.Options":                                  "image/jpeg",
	"jpeg.Reader":                                   "image/jpeg",
	"jpeg.UnsupportedError":                         "image/jpeg",
	"json.Compact":                                  "encoding/json",
	"json.Decoder":                                  "encoding/json",
	"json.Delim":                                    "encoding/json",
	"json.Encoder":                                  "encoding/json",
	"json.HTMLEscape":                               "encoding/json",
	"json.Indent":                                   "encoding/json",
	"json.InvalidUTF8Error":                         "encoding/json",
	"json.InvalidUnmarshalError":                    "encoding/json",
	"json.Marshal":                                  "encoding/json",
	"json.MarshalIndent":                            "encoding/json",
	"json.Marshaler":                                "encoding/json",
	"json.MarshalerError":                           "encoding/json",
	"json.NewDecoder":                               "encoding/json",
	"json.NewEncoder":                               "encoding/json",
	"json.Number":                                   "encoding/json",
	"json.RawMessage":                               "encoding/json",
	"json.SyntaxError":                              "encoding/json",
	"json.Token":                                    "encoding/json",
	"json.Unmarshal":                                "encoding/json",
	"json.UnmarshalFieldError":                      "encoding/json",
	"json.UnmarshalTypeError":                       "encoding/json",
	"json.Unmarshaler":                              "encoding/json",
	"json.UnsupportedTypeError":                     "encoding/json",
	"json.UnsupportedValueError":                    "encoding/json",
	"jsonrpc.Dial":                                  "net/rpc/jsonrpc",
	"jsonrpc.NewClient":                             "net/rpc/jsonrpc",
	"jsonrpc.NewClientCodec":                        "net/rpc/jsonrpc",
	"jsonrpc.NewServerCodec":                        "net/rpc/jsonrpc",
	"jsonrpc.ServeConn":                             "net/rpc/jsonrpc",
	"list.Element":                                  "container/list",
	"list.List":                                     "container/list",
	"list.New":                                      "container/list",
	"log.Fatal":                                     "log",
	"log.Fatalf":                                    "log",
	"log.Fatalln":                                   "log",
	"log.Flags":                                     "log",
	"log.LUTC":                                      "log",
	"log.Ldate":                                     "log",
	"log.Llongfile":                                 "log",
	"log.Lmicroseconds":                             "log",
	"log.Logger":                                    "log",
	"log.Lshortfile":                                "log",
	"log.LstdFlags":                                 "log",
	"log.Ltime":                                     "log",
	"log.New":                                       "log",
	"log.Output":                                    "log",
	"log.Panic":                                     "log",
	"log.Panicf":                                    "log",
	"log.Panicln":                                   "log",
	"log.Prefix":                                    "log",
	"log.Print":                                     "log",
	"log.Printf":                                    "log",
	"log.Println":                                   "log",
	"log.SetFlags":                                  "log",
	"log.SetOutput":                                 "log",
	"log.SetPrefix":                                 "log",
	"lzw.LSB":                                       "compress/lzw",
	"lzw.MSB":                                       "compress/lzw",
	"lzw.NewReader":                                 "compress/lzw",
	"lzw.NewWriter":                                 "compress/lzw",
	"lzw.Order":                                     "compress/lzw",
	"macho.Cpu":                                     "debug/macho",
	"macho.Cpu386":                                  "debug/macho",
	"macho.CpuAmd64":                                "debug/macho",
	"macho.CpuArm":                                  "debug/macho",
	"macho.CpuPpc":                                  "debug/macho",
	"macho.CpuPpc64":                                "debug/macho",
	"macho.Dylib":                                   "debug/macho",
	"macho.DylibCmd":                                "debug/macho",
	"macho.Dysymtab":                                "debug/macho",
	"macho.DysymtabCmd":                             "debug/macho",
	"macho.ErrNotFat":                               "debug/macho",
	"macho.FatArch":                                 "debug/macho",
	"macho.FatArchHeader":                           "debug/macho",
	"macho.FatFile":                                 "debug/macho",
	"macho.File":                                    "debug/macho",
	"macho.FileHeader":                              "debug/macho",
	"macho.FormatError":                             "debug/macho",
	"macho.Load":                                    "debug/macho",
	"macho.LoadBytes":                               "debug/macho",
	"macho.LoadCmd":                                 "debug/macho",
	"macho.LoadCmdDylib":                            "debug/macho",
	"macho.LoadCmdDylinker":                         "debug/macho",
	"macho.LoadCmdDysymtab":                         "debug/macho",
	"macho.LoadCmdSegment":                          "debug/macho",
	"macho.LoadCmdSegment64":                        "debug/macho",
	"macho.LoadCmdSymtab":                           "debug/macho",
	"macho.LoadCmdThread":                           "debug/macho",
	"macho.LoadCmdUnixThread":                       "debug/macho",
	"macho.Magic32":                                 "debug/macho",
	"macho.Magic64":                                 "debug/macho",
	"macho.MagicFat":                                "debug/macho",
	"macho.NewFatFile":                              "debug/macho",
	"macho.NewFile":                                 "debug/macho",
	"macho.Nlist32":                                 "debug/macho",
	"macho.Nlist64":                                 "debug/macho",
	"macho.Open":                                    "debug/macho",
	"macho.OpenFat":                                 "debug/macho",
	"macho.Regs386":                                 "debug/macho",
	"macho.RegsAMD64":                               "debug/macho",
	"macho.Section":                                 "debug/macho",
	"macho.Section32":                               "debug/macho",
	"macho.Section64":                               "debug/macho",
	"macho.SectionHeader":                           "debug/macho",
	"macho.Segment":                                 "debug/macho",
	"macho.Segment32":                               "debug/macho",
	"macho.Segment64":                               "debug/macho",
	"macho.SegmentHeader":                           "debug/macho",
	"macho.Symbol":                                  "debug/macho",
	"macho.Symtab":                                  "debug/macho",
	"macho.SymtabCmd":                               "debug/macho",
	"macho.Thread":                                  "debug/macho",
	"macho.Type":                                    "debug/macho",
	"macho.TypeBundle":                              "debug/macho",
	"macho.TypeDylib":                               "debug/macho",
	"macho.TypeExec":                                "debug/macho",
	"macho.TypeObj":                                 "debug/macho",
	"mail.Address":                                  "net/mail",
	"mail.AddressParser":                            "net/mail",
	"mail.ErrHeaderNotPresent":                      "net/mail",
	"mail.Header":                                   "net/mail",
	"mail.Message":                                  "net/mail",
	"mail.ParseAddress":                             "net/mail",
	"mail.ParseAddressList":                         "net/mail",
	"mail.ReadMessage":                              "net/mail",
	"math.Abs":                                      "math",
	"math.Acos":                                     "math",
	"math.Acosh":                                    "math",
	"math.Asin":                                     "math",
	"math.Asinh":                                    "math",
	"math.Atan":                                     "math",
	"math.Atan2":                                    "math",
	"math.Atanh":                                    "math",
	"math.Cbrt":                                     "math",
	"math.Ceil":                                     "math",
	"math.Copysign":                                 "math",
	"math.Cos":                                      "math",
	"math.Cosh":                                     "math",
	"math.Dim":                                      "math",
	"math.E":                                        "math",
	"math.Erf":                                      "math",
	"math.Erfc":                                     "math",
	"math.Exp":                                      "math",
	"math.Exp2":                                     "math",
	"math.Expm1":                                    "math",
	"math.Float32bits":                              "math",
	"math.Float32frombits":                          "math",
	"math.Float64bits":                              "math",
	"math.Float64frombits":                          "math",
	"math.Floor":                                    "math",
	"math.Frexp":                                    "math",
	"math.Gamma":                                    "math",
	"math.Hypot":                                    "math",
	"math.Ilogb":                                    "math",
	"math.Inf":                                      "math",
	"math.IsInf":                                    "math",
	"math.IsNaN":                                    "math",
	"math.J0":                                       "math",
	"math.J1":                                       "math",
	"math.Jn":                                       "math",
	"math.Ldexp":                                    "math",
	"math.Lgamma":                                   "math",
	"math.Ln10":                                     "math",
	"math.Ln2":                                      "math",
	"math.Log":                                      "math",
	"math.Log10":                                    "math",
	"math.Log10E":                                   "math",
	"math.Log1p":                                    "math",
	"math.Log2":                                     "math",
	"math.Log2E":                                    "math",
	"math.Logb":                                     "math",
	"math.Max":                                      "math",
	"math.MaxFloat32":                               "math",
	"math.MaxFloat64":                               "math",
	"math.MaxInt16":                                 "math",
	"math.MaxInt32":                                 "math",
	"math.MaxInt64":                                 "math",
	"math.MaxInt8":                                  "math",
	"math.MaxUint16":                                "math",
	"math.MaxUint32":                                "math",
	"math.MaxUint64":                                "math",
	"math.MaxUint8":                                 "math",
	"math.Min":                                      "math",
	"math.MinInt16":                                 "math",
	"math.MinInt32":                                 "math",
	"math.MinInt64":                                 "math",
	"math.MinInt8":                                  "math",
	"math.Mod":                                      "math",
	"math.Modf":                                     "math",
	"math.NaN":                                      "math",
	"math.Nextafter":                                "math",
	"math.Nextafter32":                              "math",
	"math.Phi":                                      "math",
	"math.Pi":                                       "math",
	"math.Pow":                                      "math",
	"math.Pow10":                                    "math",
	"math.Remainder":                                "math",
	"math.Signbit":                                  "math",
	"math.Sin":                                      "math",
	"math.Sincos":                                   "math",
	"math.Sinh":                                     "math",
	"math.SmallestNonzeroFloat32":                   "math",
	"math.SmallestNonzeroFloat64":                   "math",
	"math.Sqrt":                                     "math",
	"math.Sqrt2":                                    "math",
	"math.SqrtE":                                    "math",
	"math.SqrtPhi":                                  "math",
	"math.SqrtPi":                                   "math",
	"math.Tan":                                      "math",
	"math.Tanh":                                     "math",
	"math.Trunc":                                    "math",
	"math.Y0":                                       "math",
	"math.Y1":                                       "math",
	"math.Yn":                                       "math",
	"md5.BlockSize":                                 "crypto/md5",
	"md5.New":                                       "crypto/md5",
	"md5.Size":                                      "crypto/md5",
	"md5.Sum":                                       "crypto/md5",
	"mime.AddExtensionType":                         "mime",
	"mime.BEncoding":                                "mime",
	"mime.ExtensionsByType":                         "mime",
	"mime.FormatMediaType":                          "mime",
	"mime.ParseMediaType":                           "mime",
	"mime.QEncoding":                                "mime",
	"mime.TypeByExtension":                          "mime",
	"mime.WordDecoder":                              "mime",
	"mime.WordEncoder":                              "mime",
	"multipart.File":                                "mime/multipart",
	"multipart.FileHeader":                          "mime/multipart",
	"multipart.Form":                                "mime/multipart",
	"multipart.NewReader":                           "mime/multipart",
	"multipart.NewWriter":                           "mime/multipart",
	"multipart.Part":                                "mime/multipart",
	"multipart.Reader":                              "mime/multipart",
	"multipart.Writer":                              "mime/multipart",
	"net.Addr":                                      "net",
	"net.AddrError":                                 "net",
	"net.CIDRMask":                                  "net",
	"net.Conn":                                      "net",
	"net.DNSConfigError":                            "net",
	"net.DNSError":                                  "net",
	"net.Dial":                                      "net",
	"net.DialIP":                                    "net",
	"net.DialTCP":                                   "net",
	"net.DialTimeout":                               "net",
	"net.DialUDP":                                   "net",
	"net.DialUnix":                                  "net",
	"net.Dialer":                                    "net",
	"net.ErrWriteToConnected":                       "net",
	"net.Error":                                     "net",
	"net.FileConn":                                  "net",
	"net.FileListener":                              "net",
	"net.FilePacketConn":                            "net",
	"net.FlagBroadcast":                             "net",
	"net.FlagLoopback":                              "net",
	"net.FlagMulticast":                             "net",
	"net.FlagPointToPoint":                          "net",
	"net.FlagUp":                                    "net",
	"net.Flags":                                     "net",
	"net.HardwareAddr":                              "net",
	"net.IP":                                        "net",
	"net.IPAddr":                                    "net",
	"net.IPConn":                                    "net",
	"net.IPMask":                                    "net",
	"net.IPNet":                                     "net",
	"net.IPv4":                                      "net",
	"net.IPv4Mask":                                  "net",
	"net.IPv4allrouter":                             "net",
	"net.IPv4allsys":                                "net",
	"net.IPv4bcast":                                 "net",
	"net.IPv4len":                                   "net",
	"net.IPv4zero":                                  "net",
	"net.IPv6interfacelocalallnodes":                "net",
	"net.IPv6len":                                   "net",
	"net.IPv6linklocalallnodes":                     "net",
	"net.IPv6linklocalallrouters":                   "net",
	"net.IPv6loopback":                              "net",
	"net.IPv6unspecified":                           "net",
	"net.IPv6zero":                                  "net",
	"net.Interface":                                 "net",
	"net.InterfaceAddrs":                            "net",
	"net.InterfaceByIndex":                          "net",
	"net.InterfaceByName":                           "net",
	"net.Interfaces":                                "net",
	"net.InvalidAddrError":                          "net",
	"net.JoinHostPort":                              "net",
	"net.Listen":                                    "net",
	"net.ListenIP":                                  "net",
	"net.ListenMulticastUDP":                        "net",
	"net.ListenPacket":                              "net",
	"net.ListenTCP":                                 "net",
	"net.ListenUDP":                                 "net",
	"net.ListenUnix":                                "net",
	"net.ListenUnixgram":                            "net",
	"net.Listener":                                  "net",
	"net.LookupAddr":                                "net",
	"net.LookupCNAME":                               "net",
	"net.LookupHost":                                "net",
	"net.LookupIP":                                  "net",
	"net.LookupMX":                                  "net",
	"net.LookupNS":                                  "net",
	"net.LookupPort":                                "net",
	"net.LookupSRV":                                 "net",
	"net.LookupTXT":                                 "net",
	"net.MX":                                        "net",
	"net.NS":                                        "net",
	"net.OpError":                                   "net",
	"net.PacketConn":                                "net",
	"net.ParseCIDR":                                 "net",
	"net.ParseError":                                "net",
	"net.ParseIP":                                   "net",
	"net.ParseMAC":                                  "net",
	"net.Pipe":                                      "net",
	"net.ResolveIPAddr":                             "net",
	"net.ResolveTCPAddr":                            "net",
	"net.ResolveUDPAddr":                            "net",
	"net.ResolveUnixAddr":                           "net",
	"net.SRV":                                       "net",
	"net.SplitHostPort":                             "net",
	"net.TCPAddr":                                   "net",
	"net.TCPConn":                                   "net",
	"net.TCPListener":                               "net",
	"net.UDPAddr":                                   "net",
	"net.UDPConn":                                   "net",
	"net.UnixAddr":                                  "net",
	"net.UnixConn":                                  "net",
	"net.UnixListener":                              "net",
	"net.UnknownNetworkError":                       "net",
	"os.Args":                                       "os",
	"os.Chdir":                                      "os",
	"os.Chmod":                                      "os",
	"os.Chown":                                      "os",
	"os.Chtimes":                                    "os",
	"os.Clearenv":                                   "os",
	"os.Create":                                     "os",
	"os.DevNull":                                    "os",
	"os.Environ":                                    "os",
	"os.ErrExist":                                   "os",
	"os.ErrInvalid":                                 "os",
	"os.ErrNotExist":                                "os",
	"os.ErrPermission":                              "os",
	"os.Exit":                                       "os",
	"os.Expand":                                     "os",
	"os.ExpandEnv":                                  "os",
	"os.File":                                       "os",
	"os.FileInfo":                                   "os",
	"os.FileMode":                                   "os",
	"os.FindProcess":                                "os",
	"os.Getegid":                                    "os",
	"os.Getenv":                                     "os",
	"os.Geteuid":                                    "os",
	"os.Getgid":                                     "os",
	"os.Getgroups":                                  "os",
	"os.Getpagesize":                                "os",
	"os.Getpid":                                     "os",
	"os.Getppid":                                    "os",
	"os.Getuid":                                     "os",
	"os.Getwd":                                      "os",
	"os.Hostname":                                   "os",
	"os.Interrupt":                                  "os",
	"os.IsExist":                                    "os",
	"os.IsNotExist":                                 "os",
	"os.IsPathSeparator":                            "os",
	"os.IsPermission":                               "os",
	"os.Kill":                                       "os",
	"os.Lchown":                                     "os",
	"os.Link":                                       "os",
	"os.LinkError":                                  "os",
	"os.LookupEnv":                                  "os",
	"os.Lstat":                                      "os",
	"os.Mkdir":                                      "os",
	"os.MkdirAll":                                   "os",
	"os.ModeAppend":                                 "os",
	"os.ModeCharDevice":                             "os",
	"os.ModeDevice":                                 "os",
	"os.ModeDir":                                    "os",
	"os.ModeExclusive":                              "os",
	"os.ModeNamedPipe":                              "os",
	"os.ModePerm":                                   "os",
	"os.ModeSetgid":                                 "os",
	"os.ModeSetuid":                                 "os",
	"os.ModeSocket":                                 "os",
	"os.ModeSticky":                                 "os",
	"os.ModeSymlink":                                "os",
	"os.ModeTemporary":                              "os",
	"os.ModeType":                                   "os",
	"os.NewFile":                                    "os",
	"os.NewSyscallError":                            "os",
	"os.O_APPEND":                                   "os",
	"os.O_CREATE":                                   "os",
	"os.O_EXCL":                                     "os",
	"os.O_RDONLY":                                   "os",
	"os.O_RDWR":                                     "os",
	"os.O_SYNC":                                     "os",
	"os.O_TRUNC":                                    "os",
	"os.O_WRONLY":                                   "os",
	"os.Open":                                       "os",
	"os.OpenFile":                                   "os",
	"os.PathError":                                  "os",
	"os.PathListSeparator":                          "os",
	"os.PathSeparator":                              "os",
	"os.Pipe":                                       "os",
	"os.ProcAttr":                                   "os",
	"os.Process":                                    "os",
	"os.ProcessState":                               "os",
	"os.Readlink":                                   "os",
	"os.Remove":                                     "os",
	"os.RemoveAll":                                  "os",
	"os.Rename":                                     "os",
	"os.SEEK_CUR":                                   "os",
	"os.SEEK_END":                                   "os",
	"os.SEEK_SET":                                   "os",
	"os.SameFile":                                   "os",
	"os.Setenv":                                     "os",
	"os.Signal":                                     "os",
	"os.StartProcess":                               "os",
	"os.Stat":                                       "os",
	"os.Stderr":                                     "os",
	"os.Stdin":                                      "os",
	"os.Stdout":                                     "os",
	"os.Symlink":                                    "os",
	"os.SyscallError":                               "os",
	"os.TempDir":                                    "os",
	"os.Truncate":                                   "os",
	"os.Unsetenv":                                   "os",
	"palette.Plan9":                                 "image/color/palette",
	"palette.WebSafe":                               "image/color/palette",
	"parse.ActionNode":                              "text/template/parse",
	"parse.BoolNode":                                "text/template/parse",
	"parse.BranchNode":                              "text/template/parse",
	"parse.ChainNode":                               "text/template/parse",
	"parse.CommandNode":                             "text/template/parse",
	"parse.DotNode":                                 "text/template/parse",
	"parse.FieldNode":                               "text/template/parse",
	"parse.IdentifierNode":                          "text/template/parse",
	"parse.IfNode":                                  "text/template/parse",
	"parse.IsEmptyTree":                             "text/template/parse",
	"parse.ListNode":                                "text/template/parse",
	"parse.New":                                     "text/template/parse",
	"parse.NewIdentifier":                           "text/template/parse",
	"parse.NilNode":                                 "text/template/parse",
	"parse.Node":                                    "text/template/parse",
	"parse.NodeAction":                              "text/template/parse",
	"parse.NodeBool":                                "text/template/parse",
	"parse.NodeChain":                               "text/template/parse",
	"parse.NodeCommand":                             "text/template/parse",
	"parse.NodeDot":                                 "text/template/parse",
	"parse.NodeField":                               "text/template/parse",
	"parse.NodeIdentifier":                          "text/template/parse",
	"parse.NodeIf":                                  "text/template/parse",
	"parse.NodeList":                                "text/template/parse",
	"parse.NodeNil":                                 "text/template/parse",
	"parse.NodeNumber":                              "text/template/parse",
	"parse.NodePipe":                                "text/template/parse",
	"parse.NodeRange":                               "text/template/parse",
	"parse.NodeString":                              "text/template/parse",
	"parse.NodeTemplate":                            "text/template/parse",
	"parse.NodeText":                                "text/template/parse",
	"parse.NodeType":                                "text/template/parse",
	"parse.NodeVariable":                            "text/template/parse",
	"parse.NodeWith":                                "text/template/parse",
	"parse.NumberNode":                              "text/template/parse",
	"parse.Parse":                                   "text/template/parse",
	"parse.PipeNode":                                "text/template/parse",
	"parse.Pos":                                     "text/template/parse",
	"parse.RangeNode":                               "text/template/parse",
	"parse.StringNode":                              "text/template/parse",
	"parse.TemplateNode":                            "text/template/parse",
	"parse.TextNode":                                "text/template/parse",
	"parse.Tree":                                    "text/template/parse",
	"parse.VariableNode":                            "text/template/parse",
	"parse.WithNode":                                "text/template/parse",
	"parser.AllErrors":                              "go/parser",
	"parser.DeclarationErrors":                      "go/parser",
	"parser.ImportsOnly":                            "go/parser",
	"parser.Mode":                                   "go/parser",
	"parser.PackageClauseOnly":                      "go/parser",
	"parser.ParseComments":                          "go/parser",
	"parser.ParseDir":                               "go/parser",
	"parser.ParseExpr":                              "go/parser",
	"parser.ParseExprFrom":                          "go/parser",
	"parser.ParseFile":                              "go/parser",
	"parser.SpuriousErrors":                         "go/parser",
	"parser.Trace":                                  "go/parser",
	"path.Base":                                     "path",
	"path.Clean":                                    "path",
	"path.Dir":                                      "path",
	"path.ErrBadPattern":                            "path",
	"path.Ext":                                      "path",
	"path.IsAbs":                                    "path",
	"path.Join":                                     "path",
	"path.Match":                                    "path",
	"path.Split":                                    "path",
	"pe.COFFSymbol":                                 "debug/pe",
	"pe.COFFSymbolSize":                             "debug/pe",
	"pe.DataDirectory":                              "debug/pe",
	"pe.File":                                       "debug/pe",
	"pe.FileHeader":                                 "debug/pe",
	"pe.FormatError":                                "debug/pe",
	"pe.IMAGE_FILE_MACHINE_AM33":                    "debug/pe",
	"pe.IMAGE_FILE_MACHINE_AMD64":                   "debug/pe",
	"pe.IMAGE_FILE_MACHINE_ARM":                     "debug/pe",
	"pe.IMAGE_FILE_MACHINE_EBC":                     "debug/pe",
	"pe.IMAGE_FILE_MACHINE_I386":                    "debug/pe",
	"pe.IMAGE_FILE_MACHINE_IA64":                    "debug/pe",
	"pe.IMAGE_FILE_MACHINE_M32R":                    "debug/pe",
	"pe.IMAGE_FILE_MACHINE_MIPS16":                  "debug/pe",
	"pe.IMAGE_FILE_MACHINE_MIPSFPU":                 "debug/pe",
	"pe.IMAGE_FILE_MACHINE_MIPSFPU16":               "debug/pe",
	"pe.IMAGE_FILE_MACHINE_POWERPC":                 "debug/pe",
	"pe.IMAGE_FILE_MACHINE_POWERPCFP":               "debug/pe",
	"pe.IMAGE_FILE_MACHINE_R4000":                   "debug/pe",
	"pe.IMAGE_FILE_MACHINE_SH3":                     "debug/pe",
	"pe.IMAGE_FILE_MACHINE_SH3DSP":                  "debug/pe",
	"pe.IMAGE_FILE_MACHINE_SH4":                     "debug/pe",
	"pe.IMAGE_FILE_MACHINE_SH5":                     "debug/pe",
	"pe.IMAGE_FILE_MACHINE_THUMB":                   "debug/pe",
	"pe.IMAGE_FILE_MACHINE_UNKNOWN":                 "debug/pe",
	"pe.IMAGE_FILE_MACHINE_WCEMIPSV2":               "debug/pe",
	"pe.ImportDirectory":                            "debug/pe",
	"pe.NewFile":                                    "debug/pe",
	"pe.Open":                                       "debug/pe",
	"pe.OptionalHeader32":                           "debug/pe",
	"pe.OptionalHeader64":                           "debug/pe",
	"pe.Section":                                    "debug/pe",
	"pe.SectionHeader":                              "debug/pe",
	"pe.SectionHeader32":                            "debug/pe",
	"pe.Symbol":                                     "debug/pe",
	"pem.Block":                                     "encoding/pem",
	"pem.Decode":                                    "encoding/pem",
	"pem.Encode":                                    "encoding/pem",
	"pem.EncodeToMemory":                            "encoding/pem",
	"pkix.AlgorithmIdentifier":                      "crypto/x509/pkix",
	"pkix.AttributeTypeAndValue":                    "crypto/x509/pkix",
	"pkix.AttributeTypeAndValueSET":                 "crypto/x509/pkix",
	"pkix.CertificateList":                          "crypto/x509/pkix",
	"pkix.Extension":                                "crypto/x509/pkix",
	"pkix.Name":                                     "crypto/x509/pkix",
	"pkix.RDNSequence":                              "crypto/x509/pkix",
	"pkix.RelativeDistinguishedNameSET":             "crypto/x509/pkix",
	"pkix.RevokedCertificate":                       "crypto/x509/pkix",
	"pkix.TBSCertificateList":                       "crypto/x509/pkix",
	"plan9obj.File":                                 "debug/plan9obj",
	"plan9obj.FileHeader":                           "debug/plan9obj",
	"plan9obj.Magic386":                             "debug/plan9obj",
	"plan9obj.Magic64":                              "debug/plan9obj",
	"plan9obj.MagicAMD64":                           "debug/plan9obj",
	"plan9obj.MagicARM":                             "debug/plan9obj",
	"plan9obj.NewFile":                              "debug/plan9obj",
	"plan9obj.Open":                                 "debug/plan9obj",
	"plan9obj.Section":                              "debug/plan9obj",
	"plan9obj.SectionHeader":                        "debug/plan9obj",
	"plan9obj.Sym":                                  "debug/plan9obj",
	"png.BestCompression":                           "image/png",
	"png.BestSpeed":                                 "image/png",
	"png.CompressionLevel":                          "image/png",
	"png.Decode":                                    "image/png",
	"png.DecodeConfig":                              "image/png",
	"png.DefaultCompression":                        "image/png",
	"png.Encode":                                    "image/png",
	"png.Encoder":                                   "image/png",
	"png.FormatError":                               "image/png",
	"png.NoCompression":                             "image/png",
	"png.UnsupportedError":                          "image/png",
	"pprof.Cmdline":                                 "net/http/pprof",
	"pprof.Handler":                                 "net/http/pprof",
	"pprof.Index":                                   "net/http/pprof",
	"pprof.Lookup":                                  "runtime/pprof",
	"pprof.NewProfile":                              "runtime/pprof",
	// "pprof.Profile" is ambiguous
	"pprof.Profiles":            "runtime/pprof",
	"pprof.StartCPUProfile":     "runtime/pprof",
	"pprof.StopCPUProfile":      "runtime/pprof",
	"pprof.Symbol":              "net/http/pprof",
	"pprof.Trace":               "net/http/pprof",
	"pprof.WriteHeapProfile":    "runtime/pprof",
	"printer.CommentedNode":     "go/printer",
	"printer.Config":            "go/printer",
	"printer.Fprint":            "go/printer",
	"printer.Mode":              "go/printer",
	"printer.RawFormat":         "go/printer",
	"printer.SourcePos":         "go/printer",
	"printer.TabIndent":         "go/printer",
	"printer.UseSpaces":         "go/printer",
	"quick.Check":               "testing/quick",
	"quick.CheckEqual":          "testing/quick",
	"quick.CheckEqualError":     "testing/quick",
	"quick.CheckError":          "testing/quick",
	"quick.Config":              "testing/quick",
	"quick.Generator":           "testing/quick",
	"quick.SetupError":          "testing/quick",
	"quick.Value":               "testing/quick",
	"quotedprintable.NewReader": "mime/quotedprintable",
	"quotedprintable.NewWriter": "mime/quotedprintable",
	"quotedprintable.Reader":    "mime/quotedprintable",
	"quotedprintable.Writer":    "mime/quotedprintable",
	"rand.ExpFloat64":           "math/rand",
	"rand.Float32":              "math/rand",
	"rand.Float64":              "math/rand",
	// "rand.Int" is ambiguous
	"rand.Int31":                    "math/rand",
	"rand.Int31n":                   "math/rand",
	"rand.Int63":                    "math/rand",
	"rand.Int63n":                   "math/rand",
	"rand.Intn":                     "math/rand",
	"rand.New":                      "math/rand",
	"rand.NewSource":                "math/rand",
	"rand.NewZipf":                  "math/rand",
	"rand.NormFloat64":              "math/rand",
	"rand.Perm":                     "math/rand",
	"rand.Prime":                    "crypto/rand",
	"rand.Rand":                     "math/rand",
	"rand.Read":                     "crypto/rand",
	"rand.Reader":                   "crypto/rand",
	"rand.Seed":                     "math/rand",
	"rand.Source":                   "math/rand",
	"rand.Uint32":                   "math/rand",
	"rand.Zipf":                     "math/rand",
	"rc4.Cipher":                    "crypto/rc4",
	"rc4.KeySizeError":              "crypto/rc4",
	"rc4.NewCipher":                 "crypto/rc4",
	"reflect.Append":                "reflect",
	"reflect.AppendSlice":           "reflect",
	"reflect.Array":                 "reflect",
	"reflect.ArrayOf":               "reflect",
	"reflect.Bool":                  "reflect",
	"reflect.BothDir":               "reflect",
	"reflect.Chan":                  "reflect",
	"reflect.ChanDir":               "reflect",
	"reflect.ChanOf":                "reflect",
	"reflect.Complex128":            "reflect",
	"reflect.Complex64":             "reflect",
	"reflect.Copy":                  "reflect",
	"reflect.DeepEqual":             "reflect",
	"reflect.Float32":               "reflect",
	"reflect.Float64":               "reflect",
	"reflect.Func":                  "reflect",
	"reflect.FuncOf":                "reflect",
	"reflect.Indirect":              "reflect",
	"reflect.Int":                   "reflect",
	"reflect.Int16":                 "reflect",
	"reflect.Int32":                 "reflect",
	"reflect.Int64":                 "reflect",
	"reflect.Int8":                  "reflect",
	"reflect.Interface":             "reflect",
	"reflect.Invalid":               "reflect",
	"reflect.Kind":                  "reflect",
	"reflect.MakeChan":              "reflect",
	"reflect.MakeFunc":              "reflect",
	"reflect.MakeMap":               "reflect",
	"reflect.MakeSlice":             "reflect",
	"reflect.Map":                   "reflect",
	"reflect.MapOf":                 "reflect",
	"reflect.Method":                "reflect",
	"reflect.New":                   "reflect",
	"reflect.NewAt":                 "reflect",
	"reflect.Ptr":                   "reflect",
	"reflect.PtrTo":                 "reflect",
	"reflect.RecvDir":               "reflect",
	"reflect.Select":                "reflect",
	"reflect.SelectCase":            "reflect",
	"reflect.SelectDefault":         "reflect",
	"reflect.SelectDir":             "reflect",
	"reflect.SelectRecv":            "reflect",
	"reflect.SelectSend":            "reflect",
	"reflect.SendDir":               "reflect",
	"reflect.Slice":                 "reflect",
	"reflect.SliceHeader":           "reflect",
	"reflect.SliceOf":               "reflect",
	"reflect.String":                "reflect",
	"reflect.StringHeader":          "reflect",
	"reflect.Struct":                "reflect",
	"reflect.StructField":           "reflect",
	"reflect.StructTag":             "reflect",
	"reflect.TypeOf":                "reflect",
	"reflect.Uint":                  "reflect",
	"reflect.Uint16":                "reflect",
	"reflect.Uint32":                "reflect",
	"reflect.Uint64":                "reflect",
	"reflect.Uint8":                 "reflect",
	"reflect.Uintptr":               "reflect",
	"reflect.UnsafePointer":         "reflect",
	"reflect.Value":                 "reflect",
	"reflect.ValueError":            "reflect",
	"reflect.ValueOf":               "reflect",
	"reflect.Zero":                  "reflect",
	"regexp.Compile":                "regexp",
	"regexp.CompilePOSIX":           "regexp",
	"regexp.Match":                  "regexp",
	"regexp.MatchReader":            "regexp",
	"regexp.MatchString":            "regexp",
	"regexp.MustCompile":            "regexp",
	"regexp.MustCompilePOSIX":       "regexp",
	"regexp.QuoteMeta":              "regexp",
	"regexp.Regexp":                 "regexp",
	"ring.New":                      "container/ring",
	"ring.Ring":                     "container/ring",
	"rpc.Accept":                    "net/rpc",
	"rpc.Call":                      "net/rpc",
	"rpc.Client":                    "net/rpc",
	"rpc.ClientCodec":               "net/rpc",
	"rpc.DefaultDebugPath":          "net/rpc",
	"rpc.DefaultRPCPath":            "net/rpc",
	"rpc.DefaultServer":             "net/rpc",
	"rpc.Dial":                      "net/rpc",
	"rpc.DialHTTP":                  "net/rpc",
	"rpc.DialHTTPPath":              "net/rpc",
	"rpc.ErrShutdown":               "net/rpc",
	"rpc.HandleHTTP":                "net/rpc",
	"rpc.NewClient":                 "net/rpc",
	"rpc.NewClientWithCodec":        "net/rpc",
	"rpc.NewServer":                 "net/rpc",
	"rpc.Register":                  "net/rpc",
	"rpc.RegisterName":              "net/rpc",
	"rpc.Request":                   "net/rpc",
	"rpc.Response":                  "net/rpc",
	"rpc.ServeCodec":                "net/rpc",
	"rpc.ServeConn":                 "net/rpc",
	"rpc.ServeRequest":              "net/rpc",
	"rpc.Server":                    "net/rpc",
	"rpc.ServerCodec":               "net/rpc",
	"rpc.ServerError":               "net/rpc",
	"rsa.CRTValue":                  "crypto/rsa",
	"rsa.DecryptOAEP":               "crypto/rsa",
	"rsa.DecryptPKCS1v15":           "crypto/rsa",
	"rsa.DecryptPKCS1v15SessionKey": "crypto/rsa",
	"rsa.EncryptOAEP":               "crypto/rsa",
	"rsa.EncryptPKCS1v15":           "crypto/rsa",
	"rsa.ErrDecryption":             "crypto/rsa",
	"rsa.ErrMessageTooLong":         "crypto/rsa",
	"rsa.ErrVerification":           "crypto/rsa",
	"rsa.GenerateKey":               "crypto/rsa",
	"rsa.GenerateMultiPrimeKey":     "crypto/rsa",
	"rsa.OAEPOptions":               "crypto/rsa",
	"rsa.PKCS1v15DecryptOptions":    "crypto/rsa",
	"rsa.PSSOptions":                "crypto/rsa",
	"rsa.PSSSaltLengthAuto":         "crypto/rsa",
	"rsa.PSSSaltLengthEqualsHash":   "crypto/rsa",
	"rsa.PrecomputedValues":         "crypto/rsa",
	"rsa.PrivateKey":                "crypto/rsa",
	"rsa.PublicKey":                 "crypto/rsa",
	"rsa.SignPKCS1v15":              "crypto/rsa",
	"rsa.SignPSS":                   "crypto/rsa",
	"rsa.VerifyPKCS1v15":            "crypto/rsa",
	"rsa.VerifyPSS":                 "crypto/rsa",
	"runtime.BlockProfile":          "runtime",
	"runtime.BlockProfileRecord":    "runtime",
	"runtime.Breakpoint":            "runtime",
	"runtime.CPUProfile":            "runtime",
	"runtime.Caller":                "runtime",
	"runtime.Callers":               "runtime",
	"runtime.Compiler":              "runtime",
	"runtime.Error":                 "runtime",
	"runtime.Func":                  "runtime",
	"runtime.FuncForPC":             "runtime",
	"runtime.GC":                    "runtime",
	"runtime.GOARCH":                "runtime",
	"runtime.GOMAXPROCS":            "runtime",
	"runtime.GOOS":                  "runtime",
	"runtime.GOROOT":                "runtime",
	"runtime.Goexit":                "runtime",
	"runtime.GoroutineProfile":      "runtime",
	"runtime.Gosched":               "runtime",
	"runtime.LockOSThread":          "runtime",
	"runtime.MemProfile":            "runtime",
	"runtime.MemProfileRate":        "runtime",
	"runtime.MemProfileRecord":      "runtime",
	"runtime.MemStats":              "runtime",
	"runtime.NumCPU":                "runtime",
	"runtime.NumCgoCall":            "runtime",
	"runtime.NumGoroutine":          "runtime",
	"runtime.ReadMemStats":          "runtime",
	"runtime.ReadTrace":             "runtime",
	"runtime.SetBlockProfileRate":   "runtime",
	"runtime.SetCPUProfileRate":     "runtime",
	"runtime.SetFinalizer":          "runtime",
	"runtime.Stack":                 "runtime",
	"runtime.StackRecord":           "runtime",
	"runtime.StartTrace":            "runtime",
	"runtime.StopTrace":             "runtime",
	"runtime.ThreadCreateProfile":   "runtime",
	"runtime.TypeAssertionError":    "runtime",
	"runtime.UnlockOSThread":        "runtime",
	"runtime.Version":               "runtime",
	"scanner.Char":                  "text/scanner",
	"scanner.Comment":               "text/scanner",
	"scanner.EOF":                   "text/scanner",
	"scanner.Error":                 "go/scanner",
	"scanner.ErrorHandler":          "go/scanner",
	"scanner.ErrorList":             "go/scanner",
	"scanner.Float":                 "text/scanner",
	"scanner.GoTokens":              "text/scanner",
	"scanner.GoWhitespace":          "text/scanner",
	"scanner.Ident":                 "text/scanner",
	"scanner.Int":                   "text/scanner",
	"scanner.Mode":                  "go/scanner",
	"scanner.Position":              "text/scanner",
	"scanner.PrintError":            "go/scanner",
	"scanner.RawString":             "text/scanner",
	"scanner.ScanChars":             "text/scanner",
	// "scanner.ScanComments" is ambiguous
	"scanner.ScanFloats":     "text/scanner",
	"scanner.ScanIdents":     "text/scanner",
	"scanner.ScanInts":       "text/scanner",
	"scanner.ScanRawStrings": "text/scanner",
	"scanner.ScanStrings":    "text/scanner",
	// "scanner.Scanner" is ambiguous
	"scanner.SkipComments":                                 "text/scanner",
	"scanner.String":                                       "text/scanner",
	"scanner.TokenString":                                  "text/scanner",
	"sha1.BlockSize":                                       "crypto/sha1",
	"sha1.New":                                             "crypto/sha1",
	"sha1.Size":                                            "crypto/sha1",
	"sha1.Sum":                                             "crypto/sha1",
	"sha256.BlockSize":                                     "crypto/sha256",
	"sha256.New":                                           "crypto/sha256",
	"sha256.New224":                                        "crypto/sha256",
	"sha256.Size":                                          "crypto/sha256",
	"sha256.Size224":                                       "crypto/sha256",
	"sha256.Sum224":                                        "crypto/sha256",
	"sha256.Sum256":                                        "crypto/sha256",
	"sha512.BlockSize":                                     "crypto/sha512",
	"sha512.New":                                           "crypto/sha512",
	"sha512.New384":                                        "crypto/sha512",
	"sha512.New512_224":                                    "crypto/sha512",
	"sha512.New512_256":                                    "crypto/sha512",
	"sha512.Size":                                          "crypto/sha512",
	"sha512.Size224":                                       "crypto/sha512",
	"sha512.Size256":                                       "crypto/sha512",
	"sha512.Size384":                                       "crypto/sha512",
	"sha512.Sum384":                                        "crypto/sha512",
	"sha512.Sum512":                                        "crypto/sha512",
	"sha512.Sum512_224":                                    "crypto/sha512",
	"sha512.Sum512_256":                                    "crypto/sha512",
	"signal.Ignore":                                        "os/signal",
	"signal.Notify":                                        "os/signal",
	"signal.Reset":                                         "os/signal",
	"signal.Stop":                                          "os/signal",
	"smtp.Auth":                                            "net/smtp",
	"smtp.CRAMMD5Auth":                                     "net/smtp",
	"smtp.Client":                                          "net/smtp",
	"smtp.Dial":                                            "net/smtp",
	"smtp.NewClient":                                       "net/smtp",
	"smtp.PlainAuth":                                       "net/smtp",
	"smtp.SendMail":                                        "net/smtp",
	"smtp.ServerInfo":                                      "net/smtp",
	"sort.Float64Slice":                                    "sort",
	"sort.Float64s":                                        "sort",
	"sort.Float64sAreSorted":                               "sort",
	"sort.IntSlice":                                        "sort",
	"sort.Interface":                                       "sort",
	"sort.Ints":                                            "sort",
	"sort.IntsAreSorted":                                   "sort",
	"sort.IsSorted":                                        "sort",
	"sort.Reverse":                                         "sort",
	"sort.Search":                                          "sort",
	"sort.SearchFloat64s":                                  "sort",
	"sort.SearchInts":                                      "sort",
	"sort.SearchStrings":                                   "sort",
	"sort.Sort":                                            "sort",
	"sort.Stable":                                          "sort",
	"sort.StringSlice":                                     "sort",
	"sort.Strings":                                         "sort",
	"sort.StringsAreSorted":                                "sort",
	"sql.DB":                                               "database/sql",
	"sql.DBStats":                                          "database/sql",
	"sql.Drivers":                                          "database/sql",
	"sql.ErrNoRows":                                        "database/sql",
	"sql.ErrTxDone":                                        "database/sql",
	"sql.NullBool":                                         "database/sql",
	"sql.NullFloat64":                                      "database/sql",
	"sql.NullInt64":                                        "database/sql",
	"sql.NullString":                                       "database/sql",
	"sql.Open":                                             "database/sql",
	"sql.RawBytes":                                         "database/sql",
	"sql.Register":                                         "database/sql",
	"sql.Result":                                           "database/sql",
	"sql.Row":                                              "database/sql",
	"sql.Rows":                                             "database/sql",
	"sql.Scanner":                                          "database/sql",
	"sql.Stmt":                                             "database/sql",
	"sql.Tx":                                               "database/sql",
	"strconv.AppendBool":                                   "strconv",
	"strconv.AppendFloat":                                  "strconv",
	"strconv.AppendInt":                                    "strconv",
	"strconv.AppendQuote":                                  "strconv",
	"strconv.AppendQuoteRune":                              "strconv",
	"strconv.AppendQuoteRuneToASCII":                       "strconv",
	"strconv.AppendQuoteToASCII":                           "strconv",
	"strconv.AppendUint":                                   "strconv",
	"strconv.Atoi":                                         "strconv",
	"strconv.CanBackquote":                                 "strconv",
	"strconv.ErrRange":                                     "strconv",
	"strconv.ErrSyntax":                                    "strconv",
	"strconv.FormatBool":                                   "strconv",
	"strconv.FormatFloat":                                  "strconv",
	"strconv.FormatInt":                                    "strconv",
	"strconv.FormatUint":                                   "strconv",
	"strconv.IntSize":                                      "strconv",
	"strconv.IsPrint":                                      "strconv",
	"strconv.Itoa":                                         "strconv",
	"strconv.NumError":                                     "strconv",
	"strconv.ParseBool":                                    "strconv",
	"strconv.ParseFloat":                                   "strconv",
	"strconv.ParseInt":                                     "strconv",
	"strconv.ParseUint":                                    "strconv",
	"strconv.Quote":                                        "strconv",
	"strconv.QuoteRune":                                    "strconv",
	"strconv.QuoteRuneToASCII":                             "strconv",
	"strconv.QuoteToASCII":                                 "strconv",
	"strconv.Unquote":                                      "strconv",
	"strconv.UnquoteChar":                                  "strconv",
	"strings.Compare":                                      "strings",
	"strings.Contains":                                     "strings",
	"strings.ContainsAny":                                  "strings",
	"strings.ContainsRune":                                 "strings",
	"strings.Count":                                        "strings",
	"strings.EqualFold":                                    "strings",
	"strings.Fields":                                       "strings",
	"strings.FieldsFunc":                                   "strings",
	"strings.HasPrefix":                                    "strings",
	"strings.HasSuffix":                                    "strings",
	"strings.Index":                                        "strings",
	"strings.IndexAny":                                     "strings",
	"strings.IndexByte":                                    "strings",
	"strings.IndexFunc":                                    "strings",
	"strings.IndexRune":                                    "strings",
	"strings.Join":                                         "strings",
	"strings.LastIndex":                                    "strings",
	"strings.LastIndexAny":                                 "strings",
	"strings.LastIndexByte":                                "strings",
	"strings.LastIndexFunc":                                "strings",
	"strings.Map":                                          "strings",
	"strings.NewReader":                                    "strings",
	"strings.NewReplacer":                                  "strings",
	"strings.Reader":                                       "strings",
	"strings.Repeat":                                       "strings",
	"strings.Replace":                                      "strings",
	"strings.Replacer":                                     "strings",
	"strings.Split":                                        "strings",
	"strings.SplitAfter":                                   "strings",
	"strings.SplitAfterN":                                  "strings",
	"strings.SplitN":                                       "strings",
	"strings.Title":                                        "strings",
	"strings.ToLower":                                      "strings",
	"strings.ToLowerSpecial":                               "strings",
	"strings.ToTitle":                                      "strings",
	"strings.ToTitleSpecial":                               "strings",
	"strings.ToUpper":                                      "strings",
	"strings.ToUpperSpecial":                               "strings",
	"strings.Trim":                                         "strings",
	"strings.TrimFunc":                                     "strings",
	"strings.TrimLeft":                                     "strings",
	"strings.TrimLeftFunc":                                 "strings",
	"strings.TrimPrefix":                                   "strings",
	"strings.TrimRight":                                    "strings",
	"strings.TrimRightFunc":                                "strings",
	"strings.TrimSpace":                                    "strings",
	"strings.TrimSuffix":                                   "strings",
	"subtle.ConstantTimeByteEq":                            "crypto/subtle",
	"subtle.ConstantTimeCompare":                           "crypto/subtle",
	"subtle.ConstantTimeCopy":                              "crypto/subtle",
	"subtle.ConstantTimeEq":                                "crypto/subtle",
	"subtle.ConstantTimeLessOrEq":                          "crypto/subtle",
	"subtle.ConstantTimeSelect":                            "crypto/subtle",
	"suffixarray.Index":                                    "index/suffixarray",
	"suffixarray.New":                                      "index/suffixarray",
	"sync.Cond":                                            "sync",
	"sync.Locker":                                          "sync",
	"sync.Mutex":                                           "sync",
	"sync.NewCond":                                         "sync",
	"sync.Once":                                            "sync",
	"sync.Pool":                                            "sync",
	"sync.RWMutex":                                         "sync",
	"sync.WaitGroup":                                       "sync",
	"syntax.ClassNL":                                       "regexp/syntax",
	"syntax.Compile":                                       "regexp/syntax",
	"syntax.DotNL":                                         "regexp/syntax",
	"syntax.EmptyBeginLine":                                "regexp/syntax",
	"syntax.EmptyBeginText":                                "regexp/syntax",
	"syntax.EmptyEndLine":                                  "regexp/syntax",
	"syntax.EmptyEndText":                                  "regexp/syntax",
	"syntax.EmptyNoWordBoundary":                           "regexp/syntax",
	"syntax.EmptyOp":                                       "regexp/syntax",
	"syntax.EmptyOpContext":                                "regexp/syntax",
	"syntax.EmptyWordBoundary":                             "regexp/syntax",
	"syntax.ErrInternalError":                              "regexp/syntax",
	"syntax.ErrInvalidCharClass":                           "regexp/syntax",
	"syntax.ErrInvalidCharRange":                           "regexp/syntax",
	"syntax.ErrInvalidEscape":                              "regexp/syntax",
	"syntax.ErrInvalidNamedCapture":                        "regexp/syntax",
	"syntax.ErrInvalidPerlOp":                              "regexp/syntax",
	"syntax.ErrInvalidRepeatOp":                            "regexp/syntax",
	"syntax.ErrInvalidRepeatSize":                          "regexp/syntax",
	"syntax.ErrInvalidUTF8":                                "regexp/syntax",
	"syntax.ErrMissingBracket":                             "regexp/syntax",
	"syntax.ErrMissingParen":                               "regexp/syntax",
	"syntax.ErrMissingRepeatArgument":                      "regexp/syntax",
	"syntax.ErrTrailingBackslash":                          "regexp/syntax",
	"syntax.ErrUnexpectedParen":                            "regexp/syntax",
	"syntax.Error":                                         "regexp/syntax",
	"syntax.ErrorCode":                                     "regexp/syntax",
	"syntax.Flags":                                         "regexp/syntax",
	"syntax.FoldCase":                                      "regexp/syntax",
	"syntax.Inst":                                          "regexp/syntax",
	"syntax.InstAlt":                                       "regexp/syntax",
	"syntax.InstAltMatch":                                  "regexp/syntax",
	"syntax.InstCapture":                                   "regexp/syntax",
	"syntax.InstEmptyWidth":                                "regexp/syntax",
	"syntax.InstFail":                                      "regexp/syntax",
	"syntax.InstMatch":                                     "regexp/syntax",
	"syntax.InstNop":                                       "regexp/syntax",
	"syntax.InstOp":                                        "regexp/syntax",
	"syntax.InstRune":                                      "regexp/syntax",
	"syntax.InstRune1":                                     "regexp/syntax",
	"syntax.InstRuneAny":                                   "regexp/syntax",
	"syntax.InstRuneAnyNotNL":                              "regexp/syntax",
	"syntax.IsWordChar":                                    "regexp/syntax",
	"syntax.Literal":                                       "regexp/syntax",
	"syntax.MatchNL":                                       "regexp/syntax",
	"syntax.NonGreedy":                                     "regexp/syntax",
	"syntax.OneLine":                                       "regexp/syntax",
	"syntax.Op":                                            "regexp/syntax",
	"syntax.OpAlternate":                                   "regexp/syntax",
	"syntax.OpAnyChar":                                     "regexp/syntax",
	"syntax.OpAnyCharNotNL":                                "regexp/syntax",
	"syntax.OpBeginLine":                                   "regexp/syntax",
	"syntax.OpBeginText":                                   "regexp/syntax",
	"syntax.OpCapture":                                     "regexp/syntax",
	"syntax.OpCharClass":                                   "regexp/syntax",
	"syntax.OpConcat":                                      "regexp/syntax",
	"syntax.OpEmptyMatch":                                  "regexp/syntax",
	"syntax.OpEndLine":                                     "regexp/syntax",
	"syntax.OpEndText":                                     "regexp/syntax",
	"syntax.OpLiteral":                                     "regexp/syntax",
	"syntax.OpNoMatch":                                     "regexp/syntax",
	"syntax.OpNoWordBoundary":                              "regexp/syntax",
	"syntax.OpPlus":                                        "regexp/syntax",
	"syntax.OpQuest":                                       "regexp/syntax",
	"syntax.OpRepeat":                                      "regexp/syntax",
	"syntax.OpStar":                                        "regexp/syntax",
	"syntax.OpWordBoundary":                                "regexp/syntax",
	"syntax.POSIX":                                         "regexp/syntax",
	"syntax.Parse":                                         "regexp/syntax",
	"syntax.Perl":                                          "regexp/syntax",
	"syntax.PerlX":                                         "regexp/syntax",
	"syntax.Prog":                                          "regexp/syntax",
	"syntax.Regexp":                                        "regexp/syntax",
	"syntax.Simple":                                        "regexp/syntax",
	"syntax.UnicodeGroups":                                 "regexp/syntax",
	"syntax.WasDollar":                                     "regexp/syntax",
	"syscall.AF_ALG":                                       "syscall",
	"syscall.AF_APPLETALK":                                 "syscall",
	"syscall.AF_ARP":                                       "syscall",
	"syscall.AF_ASH":                                       "syscall",
	"syscall.AF_ATM":                                       "syscall",
	"syscall.AF_ATMPVC":                                    "syscall",
	"syscall.AF_ATMSVC":                                    "syscall",
	"syscall.AF_AX25":                                      "syscall",
	"syscall.AF_BLUETOOTH":                                 "syscall",
	"syscall.AF_BRIDGE":                                    "syscall",
	"syscall.AF_CAIF":                                      "syscall",
	"syscall.AF_CAN":                                       "syscall",
	"syscall.AF_CCITT":                                     "syscall",
	"syscall.AF_CHAOS":                                     "syscall",
	"syscall.AF_CNT":                                       "syscall",
	"syscall.AF_COIP":                                      "syscall",
	"syscall.AF_DATAKIT":                                   "syscall",
	"syscall.AF_DECnet":                                    "syscall",
	"syscall.AF_DLI":                                       "syscall",
	"syscall.AF_E164":                                      "syscall",
	"syscall.AF_ECMA":                                      "syscall",
	"syscall.AF_ECONET":                                    "syscall",
	"syscall.AF_ENCAP":                                     "syscall",
	"syscall.AF_FILE":                                      "syscall",
	"syscall.AF_HYLINK":                                    "syscall",
	"syscall.AF_IEEE80211":                                 "syscall",
	"syscall.AF_IEEE802154":                                "syscall",
	"syscall.AF_IMPLINK":                                   "syscall",
	"syscall.AF_INET":                                      "syscall",
	"syscall.AF_INET6":                                     "syscall",
	"syscall.AF_INET6_SDP":                                 "syscall",
	"syscall.AF_INET_SDP":                                  "syscall",
	"syscall.AF_IPX":                                       "syscall",
	"syscall.AF_IRDA":                                      "syscall",
	"syscall.AF_ISDN":                                      "syscall",
	"syscall.AF_ISO":                                       "syscall",
	"syscall.AF_IUCV":                                      "syscall",
	"syscall.AF_KEY":                                       "syscall",
	"syscall.AF_LAT":                                       "syscall",
	"syscall.AF_LINK":                                      "syscall",
	"syscall.AF_LLC":                                       "syscall",
	"syscall.AF_LOCAL":                                     "syscall",
	"syscall.AF_MAX":                                       "syscall",
	"syscall.AF_MPLS":                                      "syscall",
	"syscall.AF_NATM":                                      "syscall",
	"syscall.AF_NDRV":                                      "syscall",
	"syscall.AF_NETBEUI":                                   "syscall",
	"syscall.AF_NETBIOS":                                   "syscall",
	"syscall.AF_NETGRAPH":                                  "syscall",
	"syscall.AF_NETLINK":                                   "syscall",
	"syscall.AF_NETROM":                                    "syscall",
	"syscall.AF_NS":                                        "syscall",
	"syscall.AF_OROUTE":                                    "syscall",
	"syscall.AF_OSI":                                       "syscall",
	"syscall.AF_PACKET":                                    "syscall",
	"syscall.AF_PHONET":                                    "syscall",
	"syscall.AF_PPP":                                       "syscall",
	"syscall.AF_PPPOX":                                     "syscall",
	"syscall.AF_PUP":                                       "syscall",
	"syscall.AF_RDS":                                       "syscall",
	"syscall.AF_RESERVED_36":                               "syscall",
	"syscall.AF_ROSE":                                      "syscall",
	"syscall.AF_ROUTE":                                     "syscall",
	"syscall.AF_RXRPC":                                     "syscall",
	"syscall.AF_SCLUSTER":                                  "syscall",
	"syscall.AF_SECURITY":                                  "syscall",
	"syscall.AF_SIP":                                       "syscall",
	"syscall.AF_SLOW":                                      "syscall",
	"syscall.AF_SNA":                                       "syscall",
	"syscall.AF_SYSTEM":                                    "syscall",
	"syscall.AF_TIPC":                                      "syscall",
	"syscall.AF_UNIX":                                      "syscall",
	"syscall.AF_UNSPEC":                                    "syscall",
	"syscall.AF_VENDOR00":                                  "syscall",
	"syscall.AF_VENDOR01":                                  "syscall",
	"syscall.AF_VENDOR02":                                  "syscall",
	"syscall.AF_VENDOR03":                                  "syscall",
	"syscall.AF_VENDOR04":                                  "syscall",
	"syscall.AF_VENDOR05":                                  "syscall",
	"syscall.AF_VENDOR06":                                  "syscall",
	"syscall.AF_VENDOR07":                                  "syscall",
	"syscall.AF_VENDOR08":                                  "syscall",
	"syscall.AF_VENDOR09":                                  "syscall",
	"syscall.AF_VENDOR10":                                  "syscall",
	"syscall.AF_VENDOR11":                                  "syscall",
	"syscall.AF_VENDOR12":                                  "syscall",
	"syscall.AF_VENDOR13":                                  "syscall",
	"syscall.AF_VENDOR14":                                  "syscall",
	"syscall.AF_VENDOR15":                                  "syscall",
	"syscall.AF_VENDOR16":                                  "syscall",
	"syscall.AF_VENDOR17":                                  "syscall",
	"syscall.AF_VENDOR18":                                  "syscall",
	"syscall.AF_VENDOR19":                                  "syscall",
	"syscall.AF_VENDOR20":                                  "syscall",
	"syscall.AF_VENDOR21":                                  "syscall",
	"syscall.AF_VENDOR22":                                  "syscall",
	"syscall.AF_VENDOR23":                                  "syscall",
	"syscall.AF_VENDOR24":                                  "syscall",
	"syscall.AF_VENDOR25":                                  "syscall",
	"syscall.AF_VENDOR26":                                  "syscall",
	"syscall.AF_VENDOR27":                                  "syscall",
	"syscall.AF_VENDOR28":                                  "syscall",
	"syscall.AF_VENDOR29":                                  "syscall",
	"syscall.AF_VENDOR30":                                  "syscall",
	"syscall.AF_VENDOR31":                                  "syscall",
	"syscall.AF_VENDOR32":                                  "syscall",
	"syscall.AF_VENDOR33":                                  "syscall",
	"syscall.AF_VENDOR34":                                  "syscall",
	"syscall.AF_VENDOR35":                                  "syscall",
	"syscall.AF_VENDOR36":                                  "syscall",
	"syscall.AF_VENDOR37":                                  "syscall",
	"syscall.AF_VENDOR38":                                  "syscall",
	"syscall.AF_VENDOR39":                                  "syscall",
	"syscall.AF_VENDOR40":                                  "syscall",
	"syscall.AF_VENDOR41":                                  "syscall",
	"syscall.AF_VENDOR42":                                  "syscall",
	"syscall.AF_VENDOR43":                                  "syscall",
	"syscall.AF_VENDOR44":                                  "syscall",
	"syscall.AF_VENDOR45":                                  "syscall",
	"syscall.AF_VENDOR46":                                  "syscall",
	"syscall.AF_VENDOR47":                                  "syscall",
	"syscall.AF_WANPIPE":                                   "syscall",
	"syscall.AF_X25":                                       "syscall",
	"syscall.AI_CANONNAME":                                 "syscall",
	"syscall.AI_NUMERICHOST":                               "syscall",
	"syscall.AI_PASSIVE":                                   "syscall",
	"syscall.APPLICATION_ERROR":                            "syscall",
	"syscall.ARPHRD_ADAPT":                                 "syscall",
	"syscall.ARPHRD_APPLETLK":                              "syscall",
	"syscall.ARPHRD_ARCNET":                                "syscall",
	"syscall.ARPHRD_ASH":                                   "syscall",
	"syscall.ARPHRD_ATM":                                   "syscall",
	"syscall.ARPHRD_AX25":                                  "syscall",
	"syscall.ARPHRD_BIF":                                   "syscall",
	"syscall.ARPHRD_CHAOS":                                 "syscall",
	"syscall.ARPHRD_CISCO":                                 "syscall",
	"syscall.ARPHRD_CSLIP":                                 "syscall",
	"syscall.ARPHRD_CSLIP6":                                "syscall",
	"syscall.ARPHRD_DDCMP":                                 "syscall",
	"syscall.ARPHRD_DLCI":                                  "syscall",
	"syscall.ARPHRD_ECONET":                                "syscall",
	"syscall.ARPHRD_EETHER":                                "syscall",
	"syscall.ARPHRD_ETHER":                                 "syscall",
	"syscall.ARPHRD_EUI64":                                 "syscall",
	"syscall.ARPHRD_FCAL":                                  "syscall",
	"syscall.ARPHRD_FCFABRIC":                              "syscall",
	"syscall.ARPHRD_FCPL":                                  "syscall",
	"syscall.ARPHRD_FCPP":                                  "syscall",
	"syscall.ARPHRD_FDDI":                                  "syscall",
	"syscall.ARPHRD_FRAD":                                  "syscall",
	"syscall.ARPHRD_FRELAY":                                "syscall",
	"syscall.ARPHRD_HDLC":                                  "syscall",
	"syscall.ARPHRD_HIPPI":                                 "syscall",
	"syscall.ARPHRD_HWX25":                                 "syscall",
	"syscall.ARPHRD_IEEE1394":                              "syscall",
	"syscall.ARPHRD_IEEE802":                               "syscall",
	"syscall.ARPHRD_IEEE80211":                             "syscall",
	"syscall.ARPHRD_IEEE80211_PRISM":                       "syscall",
	"syscall.ARPHRD_IEEE80211_RADIOTAP":                    "syscall",
	"syscall.ARPHRD_IEEE802154":                            "syscall",
	"syscall.ARPHRD_IEEE802154_PHY":                        "syscall",
	"syscall.ARPHRD_IEEE802_TR":                            "syscall",
	"syscall.ARPHRD_INFINIBAND":                            "syscall",
	"syscall.ARPHRD_IPDDP":                                 "syscall",
	"syscall.ARPHRD_IPGRE":                                 "syscall",
	"syscall.ARPHRD_IRDA":                                  "syscall",
	"syscall.ARPHRD_LAPB":                                  "syscall",
	"syscall.ARPHRD_LOCALTLK":                              "syscall",
	"syscall.ARPHRD_LOOPBACK":                              "syscall",
	"syscall.ARPHRD_METRICOM":                              "syscall",
	"syscall.ARPHRD_NETROM":                                "syscall",
	"syscall.ARPHRD_NONE":                                  "syscall",
	"syscall.ARPHRD_PIMREG":                                "syscall",
	"syscall.ARPHRD_PPP":                                   "syscall",
	"syscall.ARPHRD_PRONET":                                "syscall",
	"syscall.ARPHRD_RAWHDLC":                               "syscall",
	"syscall.ARPHRD_ROSE":                                  "syscall",
	"syscall.ARPHRD_RSRVD":                                 "syscall",
	"syscall.ARPHRD_SIT":                                   "syscall",
	"syscall.ARPHRD_SKIP":                                  "syscall",
	"syscall.ARPHRD_SLIP":                                  "syscall",
	"syscall.ARPHRD_SLIP6":                                 "syscall",
	"syscall.ARPHRD_STRIP":                                 "syscall",
	"syscall.ARPHRD_TUNNEL":                                "syscall",
	"syscall.ARPHRD_TUNNEL6":                               "syscall",
	"syscall.ARPHRD_VOID":                                  "syscall",
	"syscall.ARPHRD_X25":                                   "syscall",
	"syscall.AUTHTYPE_CLIENT":                              "syscall",
	"syscall.AUTHTYPE_SERVER":                              "syscall",
	"syscall.Accept":                                       "syscall",
	"syscall.Accept4":                                      "syscall",
	"syscall.AcceptEx":                                     "syscall",
	"syscall.Access":                                       "syscall",
	"syscall.Acct":                                         "syscall",
	"syscall.AddrinfoW":                                    "syscall",
	"syscall.Adjtime":                                      "syscall",
	"syscall.Adjtimex":                                     "syscall",
	"syscall.AttachLsf":                                    "syscall",
	"syscall.B0":                                           "syscall",
	"syscall.B1000000":                                     "syscall",
	"syscall.B110":                                         "syscall",
	"syscall.B115200":                                      "syscall",
	"syscall.B1152000":                                     "syscall",
	"syscall.B1200":                                        "syscall",
	"syscall.B134":                                         "syscall",
	"syscall.B14400":                                       "syscall",
	"syscall.B150":                                         "syscall",
	"syscall.B1500000":                                     "syscall",
	"syscall.B1800":                                        "syscall",
	"syscall.B19200":                                       "syscall",
	"syscall.B200":                                         "syscall",
	"syscall.B2000000":                                     "syscall",
	"syscall.B230400":                                      "syscall",
	"syscall.B2400":                                        "syscall",
	"syscall.B2500000":                                     "syscall",
	"syscall.B28800":                                       "syscall",
	"syscall.B300":                                         "syscall",
	"syscall.B3000000":                                     "syscall",
	"syscall.B3500000":                                     "syscall",
	"syscall.B38400":                                       "syscall",
	"syscall.B4000000":                                     "syscall",
	"syscall.B460800":                                      "syscall",
	"syscall.B4800":                                        "syscall",
	"syscall.B50":                                          "syscall",
	"syscall.B500000":                                      "syscall",
	"syscall.B57600":                                       "syscall",
	"syscall.B576000":                                      "syscall",
	"syscall.B600":                                         "syscall",
	"syscall.B7200":                                        "syscall",
	"syscall.B75":                                          "syscall",
	"syscall.B76800":                                       "syscall",
	"syscall.B921600":                                      "syscall",
	"syscall.B9600":                                        "syscall",
	"syscall.BASE_PROTOCOL":                                "syscall",
	"syscall.BIOCFEEDBACK":                                 "syscall",
	"syscall.BIOCFLUSH":                                    "syscall",
	"syscall.BIOCGBLEN":                                    "syscall",
	"syscall.BIOCGDIRECTION":                               "syscall",
	"syscall.BIOCGDIRFILT":                                 "syscall",
	"syscall.BIOCGDLT":                                     "syscall",
	"syscall.BIOCGDLTLIST":                                 "syscall",
	"syscall.BIOCGETBUFMODE":                               "syscall",
	"syscall.BIOCGETIF":                                    "syscall",
	"syscall.BIOCGETZMAX":                                  "syscall",
	"syscall.BIOCGFEEDBACK":                                "syscall",
	"syscall.BIOCGFILDROP":                                 "syscall",
	"syscall.BIOCGHDRCMPLT":                                "syscall",
	"syscall.BIOCGRSIG":                                    "syscall",
	"syscall.BIOCGRTIMEOUT":                                "syscall",
	"syscall.BIOCGSEESENT":                                 "syscall",
	"syscall.BIOCGSTATS":                                   "syscall",
	"syscall.BIOCGSTATSOLD":                                "syscall",
	"syscall.BIOCGTSTAMP":                                  "syscall",
	"syscall.BIOCIMMEDIATE":                                "syscall",
	"syscall.BIOCLOCK":                                     "syscall",
	"syscall.BIOCPROMISC":                                  "syscall",
	"syscall.BIOCROTZBUF":                                  "syscall",
	"syscall.BIOCSBLEN":                                    "syscall",
	"syscall.BIOCSDIRECTION":                               "syscall",
	"syscall.BIOCSDIRFILT":                                 "syscall",
	"syscall.BIOCSDLT":                                     "syscall",
	"syscall.BIOCSETBUFMODE":                               "syscall",
	"syscall.BIOCSETF":                                     "syscall",
	"syscall.BIOCSETFNR":                                   "syscall",
	"syscall.BIOCSETIF":                                    "syscall",
	"syscall.BIOCSETWF":                                    "syscall",
	"syscall.BIOCSETZBUF":                                  "syscall",
	"syscall.BIOCSFEEDBACK":                                "syscall",
	"syscall.BIOCSFILDROP":                                 "syscall",
	"syscall.BIOCSHDRCMPLT":                                "syscall",
	"syscall.BIOCSRSIG":                                    "syscall",
	"syscall.BIOCSRTIMEOUT":                                "syscall",
	"syscall.BIOCSSEESENT":                                 "syscall",
	"syscall.BIOCSTCPF":                                    "syscall",
	"syscall.BIOCSTSTAMP":                                  "syscall",
	"syscall.BIOCSUDPF":                                    "syscall",
	"syscall.BIOCVERSION":                                  "syscall",
	"syscall.BPF_A":                                        "syscall",
	"syscall.BPF_ABS":                                      "syscall",
	"syscall.BPF_ADD":                                      "syscall",
	"syscall.BPF_ALIGNMENT":                                "syscall",
	"syscall.BPF_ALIGNMENT32":                              "syscall",
	"syscall.BPF_ALU":                                      "syscall",
	"syscall.BPF_AND":                                      "syscall",
	"syscall.BPF_B":                                        "syscall",
	"syscall.BPF_BUFMODE_BUFFER":                           "syscall",
	"syscall.BPF_BUFMODE_ZBUF":                             "syscall",
	"syscall.BPF_DFLTBUFSIZE":                              "syscall",
	"syscall.BPF_DIRECTION_IN":                             "syscall",
	"syscall.BPF_DIRECTION_OUT":                            "syscall",
	"syscall.BPF_DIV":                                      "syscall",
	"syscall.BPF_H":                                        "syscall",
	"syscall.BPF_IMM":                                      "syscall",
	"syscall.BPF_IND":                                      "syscall",
	"syscall.BPF_JA":                                       "syscall",
	"syscall.BPF_JEQ":                                      "syscall",
	"syscall.BPF_JGE":                                      "syscall",
	"syscall.BPF_JGT":                                      "syscall",
	"syscall.BPF_JMP":                                      "syscall",
	"syscall.BPF_JSET":                                     "syscall",
	"syscall.BPF_K":                                        "syscall",
	"syscall.BPF_LD":                                       "syscall",
	"syscall.BPF_LDX":                                      "syscall",
	"syscall.BPF_LEN":                                      "syscall",
	"syscall.BPF_LSH":                                      "syscall",
	"syscall.BPF_MAJOR_VERSION":                            "syscall",
	"syscall.BPF_MAXBUFSIZE":                               "syscall",
	"syscall.BPF_MAXINSNS":                                 "syscall",
	"syscall.BPF_MEM":                                      "syscall",
	"syscall.BPF_MEMWORDS":                                 "syscall",
	"syscall.BPF_MINBUFSIZE":                               "syscall",
	"syscall.BPF_MINOR_VERSION":                            "syscall",
	"syscall.BPF_MISC":                                     "syscall",
	"syscall.BPF_MSH":                                      "syscall",
	"syscall.BPF_MUL":                                      "syscall",
	"syscall.BPF_NEG":                                      "syscall",
	"syscall.BPF_OR":                                       "syscall",
	"syscall.BPF_RELEASE":                                  "syscall",
	"syscall.BPF_RET":                                      "syscall",
	"syscall.BPF_RSH":                                      "syscall",
	"syscall.BPF_ST":                                       "syscall",
	"syscall.BPF_STX":                                      "syscall",
	"syscall.BPF_SUB":                                      "syscall",
	"syscall.BPF_TAX":                                      "syscall",
	"syscall.BPF_TXA":                                      "syscall",
	"syscall.BPF_T_BINTIME":                                "syscall",
	"syscall.BPF_T_BINTIME_FAST":                           "syscall",
	"syscall.BPF_T_BINTIME_MONOTONIC":                      "syscall",
	"syscall.BPF_T_BINTIME_MONOTONIC_FAST":                 "syscall",
	"syscall.BPF_T_FAST":                                   "syscall",
	"syscall.BPF_T_FLAG_MASK":                              "syscall",
	"syscall.BPF_T_FORMAT_MASK":                            "syscall",
	"syscall.BPF_T_MICROTIME":                              "syscall",
	"syscall.BPF_T_MICROTIME_FAST":                         "syscall",
	"syscall.BPF_T_MICROTIME_MONOTONIC":                    "syscall",
	"syscall.BPF_T_MICROTIME_MONOTONIC_FAST":               "syscall",
	"syscall.BPF_T_MONOTONIC":                              "syscall",
	"syscall.BPF_T_MONOTONIC_FAST":                         "syscall",
	"syscall.BPF_T_NANOTIME":                               "syscall",
	"syscall.BPF_T_NANOTIME_FAST":                          "syscall",
	"syscall.BPF_T_NANOTIME_MONOTONIC":                     "syscall",
	"syscall.BPF_T_NANOTIME_MONOTONIC_FAST":                "syscall",
	"syscall.BPF_T_NONE":                                   "syscall",
	"syscall.BPF_T_NORMAL":                                 "syscall",
	"syscall.BPF_W":                                        "syscall",
	"syscall.BPF_X":                                        "syscall",
	"syscall.BRKINT":                                       "syscall",
	"syscall.Bind":                                         "syscall",
	"syscall.BindToDevice":                                 "syscall",
	"syscall.BpfBuflen":                                    "syscall",
	"syscall.BpfDatalink":                                  "syscall",
	"syscall.BpfHdr":                                       "syscall",
	"syscall.BpfHeadercmpl":                                "syscall",
	"syscall.BpfInsn":                                      "syscall",
	"syscall.BpfInterface":                                 "syscall",
	"syscall.BpfJump":                                      "syscall",
	"syscall.BpfProgram":                                   "syscall",
	"syscall.BpfStat":                                      "syscall",
	"syscall.BpfStats":                                     "syscall",
	"syscall.BpfStmt":                                      "syscall",
	"syscall.BpfTimeout":                                   "syscall",
	"syscall.BpfTimeval":                                   "syscall",
	"syscall.BpfVersion":                                   "syscall",
	"syscall.BpfZbuf":                                      "syscall",
	"syscall.BpfZbufHeader":                                "syscall",
	"syscall.ByHandleFileInformation":                      "syscall",
	"syscall.BytePtrFromString":                            "syscall",
	"syscall.ByteSliceFromString":                          "syscall",
	"syscall.CCR0_FLUSH":                                   "syscall",
	"syscall.CERT_CHAIN_POLICY_AUTHENTICODE":               "syscall",
	"syscall.CERT_CHAIN_POLICY_AUTHENTICODE_TS":            "syscall",
	"syscall.CERT_CHAIN_POLICY_BASE":                       "syscall",
	"syscall.CERT_CHAIN_POLICY_BASIC_CONSTRAINTS":          "syscall",
	"syscall.CERT_CHAIN_POLICY_EV":                         "syscall",
	"syscall.CERT_CHAIN_POLICY_MICROSOFT_ROOT":             "syscall",
	"syscall.CERT_CHAIN_POLICY_NT_AUTH":                    "syscall",
	"syscall.CERT_CHAIN_POLICY_SSL":                        "syscall",
	"syscall.CERT_E_CN_NO_MATCH":                           "syscall",
	"syscall.CERT_E_EXPIRED":                               "syscall",
	"syscall.CERT_E_PURPOSE":                               "syscall",
	"syscall.CERT_E_ROLE":                                  "syscall",
	"syscall.CERT_E_UNTRUSTEDROOT":                         "syscall",
	"syscall.CERT_STORE_ADD_ALWAYS":                        "syscall",
	"syscall.CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG":  "syscall",
	"syscall.CERT_STORE_PROV_MEMORY":                       "syscall",
	"syscall.CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT":      "syscall",
	"syscall.CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT":   "syscall",
	"syscall.CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT": "syscall",
	"syscall.CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT":    "syscall",
	"syscall.CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT": "syscall",
	"syscall.CERT_TRUST_INVALID_BASIC_CONSTRAINTS":         "syscall",
	"syscall.CERT_TRUST_INVALID_EXTENSION":                 "syscall",
	"syscall.CERT_TRUST_INVALID_NAME_CONSTRAINTS":          "syscall",
	"syscall.CERT_TRUST_INVALID_POLICY_CONSTRAINTS":        "syscall",
	"syscall.CERT_TRUST_IS_CYCLIC":                         "syscall",
	"syscall.CERT_TRUST_IS_EXPLICIT_DISTRUST":              "syscall",
	"syscall.CERT_TRUST_IS_NOT_SIGNATURE_VALID":            "syscall",
	"syscall.CERT_TRUST_IS_NOT_TIME_VALID":                 "syscall",
	"syscall.CERT_TRUST_IS_NOT_VALID_FOR_USAGE":            "syscall",
	"syscall.CERT_TRUST_IS_OFFLINE_REVOCATION":             "syscall",
	"syscall.CERT_TRUST_IS_REVOKED":                        "syscall",
	"syscall.CERT_TRUST_IS_UNTRUSTED_ROOT":                 "syscall",
	"syscall.CERT_TRUST_NO_ERROR":                          "syscall",
	"syscall.CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY":          "syscall",
	"syscall.CERT_TRUST_REVOCATION_STATUS_UNKNOWN":         "syscall",
	"syscall.CFLUSH":                                       "syscall",
	"syscall.CLOCAL":                                       "syscall",
	"syscall.CLONE_CHILD_CLEARTID":                         "syscall",
	"syscall.CLONE_CHILD_SETTID":                           "syscall",
	"syscall.CLONE_CSIGNAL":                                "syscall",
	"syscall.CLONE_DETACHED":                               "syscall",
	"syscall.CLONE_FILES":                                  "syscall",
	"syscall.CLONE_FS":                                     "syscall",
	"syscall.CLONE_IO":                                     "syscall",
	"syscall.CLONE_NEWIPC":                                 "syscall",
	"syscall.CLONE_NEWNET":                                 "syscall",
	"syscall.CLONE_NEWNS":                                  "syscall",
	"syscall.CLONE_NEWPID":                                 "syscall",
	"syscall.CLONE_NEWUSER":                                "syscall",
	"syscall.CLONE_NEWUTS":                                 "syscall",
	"syscall.CLONE_PARENT":                                 "syscall",
	"syscall.CLONE_PARENT_SETTID":                          "syscall",
	"syscall.CLONE_PID":                                    "syscall",
	"syscall.CLONE_PTRACE":                                 "syscall",
	"syscall.CLONE_SETTLS":                                 "syscall",
	"syscall.CLONE_SIGHAND":                                "syscall",
	"syscall.CLONE_SYSVSEM":                                "syscall",
	"syscall.CLONE_THREAD":                                 "syscall",
	"syscall.CLONE_UNTRACED":                               "syscall",
	"syscall.CLONE_VFORK":                                  "syscall",
	"syscall.CLONE_VM":                                     "syscall",
	"syscall.CPUID_CFLUSH":                                 "syscall",
	"syscall.CREAD":                                        "syscall",
	"syscall.CREATE_ALWAYS":                                "syscall",
	"syscall.CREATE_NEW":                                   "syscall",
	"syscall.CREATE_NEW_PROCESS_GROUP":                     "syscall",
	"syscall.CREATE_UNICODE_ENVIRONMENT":                   "syscall",
	"syscall.CRYPT_DEFAULT_CONTAINER_OPTIONAL":             "syscall",
	"syscall.CRYPT_DELETEKEYSET":                           "syscall",
	"syscall.CRYPT_MACHINE_KEYSET":                         "syscall",
	"syscall.CRYPT_NEWKEYSET":                              "syscall",
	"syscall.CRYPT_SILENT":                                 "syscall",
	"syscall.CRYPT_VERIFYCONTEXT":                          "syscall",
	"syscall.CS5":                                          "syscall",
	"syscall.CS6":                                          "syscall",
	"syscall.CS7":                                          "syscall",
	"syscall.CS8":                                          "syscall",
	"syscall.CSIZE":                                        "syscall",
	"syscall.CSTART":                                       "syscall",
	"syscall.CSTATUS":                                      "syscall",
	"syscall.CSTOP":                                        "syscall",
	"syscall.CSTOPB":                                       "syscall",
	"syscall.CSUSP":                                        "syscall",
	"syscall.CTL_MAXNAME":                                  "syscall",
	"syscall.CTL_NET":                                      "syscall",
	"syscall.CTL_QUERY":                                    "syscall",
	"syscall.CTRL_BREAK_EVENT":                             "syscall",
	"syscall.CTRL_C_EVENT":                                 "syscall",
	"syscall.CancelIo":                                     "syscall",
	"syscall.CancelIoEx":                                   "syscall",
	"syscall.CertAddCertificateContextToStore":             "syscall",
	"syscall.CertChainContext":                             "syscall",
	"syscall.CertChainElement":                             "syscall",
	"syscall.CertChainPara":                                "syscall",
	"syscall.CertChainPolicyPara":                          "syscall",
	"syscall.CertChainPolicyStatus":                        "syscall",
	"syscall.CertCloseStore":                               "syscall",
	"syscall.CertContext":                                  "syscall",
	"syscall.CertCreateCertificateContext":                 "syscall",
	"syscall.CertEnhKeyUsage":                              "syscall",
	"syscall.CertEnumCertificatesInStore":                  "syscall",
	"syscall.CertFreeCertificateChain":                     "syscall",
	"syscall.CertFreeCertificateContext":                   "syscall",
	"syscall.CertGetCertificateChain":                      "syscall",
	"syscall.CertOpenStore":                                "syscall",
	"syscall.CertOpenSystemStore":                          "syscall",
	"syscall.CertRevocationInfo":                           "syscall",
	"syscall.CertSimpleChain":                              "syscall",
	"syscall.CertTrustStatus":                              "syscall",
	"syscall.CertUsageMatch":                               "syscall",
	"syscall.CertVerifyCertificateChainPolicy":             "syscall",
	"syscall.Chdir":                                        "syscall",
	"syscall.CheckBpfVersion":                              "syscall",
	"syscall.Chflags":                                      "syscall",
	"syscall.Chmod":                                        "syscall",
	"syscall.Chown":                                        "syscall",
	"syscall.Chroot":                                       "syscall",
	"syscall.Clearenv":                                     "syscall",
	"syscall.Close":                                        "syscall",
	"syscall.CloseHandle":                                  "syscall",
	"syscall.CloseOnExec":                                  "syscall",
	"syscall.Closesocket":                                  "syscall",
	"syscall.CmsgLen":                                      "syscall",
	"syscall.CmsgSpace":                                    "syscall",
	"syscall.Cmsghdr":                                      "syscall",
	"syscall.CommandLineToArgv":                            "syscall",
	"syscall.ComputerName":                                 "syscall",
	"syscall.Connect":                                      "syscall",
	"syscall.ConnectEx":                                    "syscall",
	"syscall.ConvertSidToStringSid":                        "syscall",
	"syscall.ConvertStringSidToSid":                        "syscall",
	"syscall.CopySid":                                      "syscall",
	"syscall.Creat":                                        "syscall",
	"syscall.CreateDirectory":                              "syscall",
	"syscall.CreateFile":                                   "syscall",
	"syscall.CreateFileMapping":                            "syscall",
	"syscall.CreateHardLink":                               "syscall",
	"syscall.CreateIoCompletionPort":                       "syscall",
	"syscall.CreatePipe":                                   "syscall",
	"syscall.CreateProcess":                                "syscall",
	"syscall.CreateSymbolicLink":                           "syscall",
	"syscall.CreateToolhelp32Snapshot":                     "syscall",
	"syscall.Credential":                                   "syscall",
	"syscall.CryptAcquireContext":                          "syscall",
	"syscall.CryptGenRandom":                               "syscall",
	"syscall.CryptReleaseContext":                          "syscall",
	"syscall.DIOCBSFLUSH":                                  "syscall",
	"syscall.DIOCOSFPFLUSH":                                "syscall",
	"syscall.DLL":                                          "syscall",
	"syscall.DLLError":                                     "syscall",
	"syscall.DLT_A429":                                     "syscall",
	"syscall.DLT_A653_ICM":                                 "syscall",
	"syscall.DLT_AIRONET_HEADER":                           "syscall",
	"syscall.DLT_AOS":                                      "syscall",
	"syscall.DLT_APPLE_IP_OVER_IEEE1394":                   "syscall",
	"syscall.DLT_ARCNET":                                   "syscall",
	"syscall.DLT_ARCNET_LINUX":                             "syscall",
	"syscall.DLT_ATM_CLIP":                                 "syscall",
	"syscall.DLT_ATM_RFC1483":                              "syscall",
	"syscall.DLT_AURORA":                                   "syscall",
	"syscall.DLT_AX25":                                     "syscall",
	"syscall.DLT_AX25_KISS":                                "syscall",
	"syscall.DLT_BACNET_MS_TP":                             "syscall",
	"syscall.DLT_BLUETOOTH_HCI_H4":                         "syscall",
	"syscall.DLT_BLUETOOTH_HCI_H4_WITH_PHDR":               "syscall",
	"syscall.DLT_CAN20B":                                   "syscall",
	"syscall.DLT_CAN_SOCKETCAN":                            "syscall",
	"syscall.DLT_CHAOS":                                    "syscall",
	"syscall.DLT_CHDLC":                                    "syscall",
	"syscall.DLT_CISCO_IOS":                                "syscall",
	"syscall.DLT_C_HDLC":                                   "syscall",
	"syscall.DLT_C_HDLC_WITH_DIR":                          "syscall",
	"syscall.DLT_DBUS":                                     "syscall",
	"syscall.DLT_DECT":                                     "syscall",
	"syscall.DLT_DOCSIS":                                   "syscall",
	"syscall.DLT_DVB_CI":                                   "syscall",
	"syscall.DLT_ECONET":                                   "syscall",
	"syscall.DLT_EN10MB":                                   "syscall",
	"syscall.DLT_EN3MB":                                    "syscall",
	"syscall.DLT_ENC":                                      "syscall",
	"syscall.DLT_ERF":                                      "syscall",
	"syscall.DLT_ERF_ETH":                                  "syscall",
	"syscall.DLT_ERF_POS":                                  "syscall",
	"syscall.DLT_FC_2":                                     "syscall",
	"syscall.DLT_FC_2_WITH_FRAME_DELIMS":                   "syscall",
	"syscall.DLT_FDDI":                                     "syscall",
	"syscall.DLT_FLEXRAY":                                  "syscall",
	"syscall.DLT_FRELAY":                                   "syscall",
	"syscall.DLT_FRELAY_WITH_DIR":                          "syscall",
	"syscall.DLT_GCOM_SERIAL":                              "syscall",
	"syscall.DLT_GCOM_T1E1":                                "syscall",
	"syscall.DLT_GPF_F":                                    "syscall",
	"syscall.DLT_GPF_T":                                    "syscall",
	"syscall.DLT_GPRS_LLC":                                 "syscall",
	"syscall.DLT_GSMTAP_ABIS":                              "syscall",
	"syscall.DLT_GSMTAP_UM":                                "syscall",
	"syscall.DLT_HDLC":                                     "syscall",
	"syscall.DLT_HHDLC":                                    "syscall",
	"syscall.DLT_HIPPI":                                    "syscall",
	"syscall.DLT_IBM_SN":                                   "syscall",
	"syscall.DLT_IBM_SP":                                   "syscall",
	"syscall.DLT_IEEE802":                                  "syscall",
	"syscall.DLT_IEEE802_11":                               "syscall",
	"syscall.DLT_IEEE802_11_RADIO":                         "syscall",
	"syscall.DLT_IEEE802_11_RADIO_AVS":                     "syscall",
	"syscall.DLT_IEEE802_15_4":                             "syscall",
	"syscall.DLT_IEEE802_15_4_LINUX":                       "syscall",
	"syscall.DLT_IEEE802_15_4_NOFCS":                       "syscall",
	"syscall.DLT_IEEE802_15_4_NONASK_PHY":                  "syscall",
	"syscall.DLT_IEEE802_16_MAC_CPS":                       "syscall",
	"syscall.DLT_IEEE802_16_MAC_CPS_RADIO":                 "syscall",
	"syscall.DLT_IPFILTER":                                 "syscall",
	"syscall.DLT_IPMB":                                     "syscall",
	"syscall.DLT_IPMB_LINUX":                               "syscall",
	"syscall.DLT_IPNET":                                    "syscall",
	"syscall.DLT_IPOIB":                                    "syscall",
	"syscall.DLT_IPV4":                                     "syscall",
	"syscall.DLT_IPV6":                                     "syscall",
	"syscall.DLT_IP_OVER_FC":                               "syscall",
	"syscall.DLT_JUNIPER_ATM1":                             "syscall",
	"syscall.DLT_JUNIPER_ATM2":                             "syscall",
	"syscall.DLT_JUNIPER_ATM_CEMIC":                        "syscall",
	"syscall.DLT_JUNIPER_CHDLC":                            "syscall",
	"syscall.DLT_JUNIPER_ES":                               "syscall",
	"syscall.DLT_JUNIPER_ETHER":                            "syscall",
	"syscall.DLT_JUNIPER_FIBRECHANNEL":                     "syscall",
	"syscall.DLT_JUNIPER_FRELAY":                           "syscall",
	"syscall.DLT_JUNIPER_GGSN":                             "syscall",
	"syscall.DLT_JUNIPER_ISM":                              "syscall",
	"syscall.DLT_JUNIPER_MFR":                              "syscall",
	"syscall.DLT_JUNIPER_MLFR":                             "syscall",
	"syscall.DLT_JUNIPER_MLPPP":                            "syscall",
	"syscall.DLT_JUNIPER_MONITOR":                          "syscall",
	"syscall.DLT_JUNIPER_PIC_PEER":                         "syscall",
	"syscall.DLT_JUNIPER_PPP":                              "syscall",
	"syscall.DLT_JUNIPER_PPPOE":                            "syscall",
	"syscall.DLT_JUNIPER_PPPOE_ATM":                        "syscall",
	"syscall.DLT_JUNIPER_SERVICES":                         "syscall",
	"syscall.DLT_JUNIPER_SRX_E2E":                          "syscall",
	"syscall.DLT_JUNIPER_ST":                               "syscall",
	"syscall.DLT_JUNIPER_VP":                               "syscall",
	"syscall.DLT_JUNIPER_VS":                               "syscall",
	"syscall.DLT_LAPB_WITH_DIR":                            "syscall",
	"syscall.DLT_LAPD":                                     "syscall",
	"syscall.DLT_LIN":                                      "syscall",
	"syscall.DLT_LINUX_EVDEV":                              "syscall",
	"syscall.DLT_LINUX_IRDA":                               "syscall",
	"syscall.DLT_LINUX_LAPD":                               "syscall",
	"syscall.DLT_LINUX_PPP_WITHDIRECTION":                  "syscall",
	"syscall.DLT_LINUX_SLL":                                "syscall",
	"syscall.DLT_LOOP":                                     "syscall",
	"syscall.DLT_LTALK":                                    "syscall",
	"syscall.DLT_MATCHING_MAX":                             "syscall",
	"syscall.DLT_MATCHING_MIN":                             "syscall",
	"syscall.DLT_MFR":                                      "syscall",
	"syscall.DLT_MOST":                                     "syscall",
	"syscall.DLT_MPEG_2_TS":                                "syscall",
	"syscall.DLT_MPLS":                                     "syscall",
	"syscall.DLT_MTP2":                                     "syscall",
	"syscall.DLT_MTP2_WITH_PHDR":                           "syscall",
	"syscall.DLT_MTP3":                                     "syscall",
	"syscall.DLT_MUX27010":                                 "syscall",
	"syscall.DLT_NETANALYZER":                              "syscall",
	"syscall.DLT_NETANALYZER_TRANSPARENT":                  "syscall",
	"syscall.DLT_NFC_LLCP":                                 "syscall",
	"syscall.DLT_NFLOG":                                    "syscall",
	"syscall.DLT_NG40":                                     "syscall",
	"syscall.DLT_NULL":                                     "syscall",
	"syscall.DLT_PCI_EXP":                                  "syscall",
	"syscall.DLT_PFLOG":                                    "syscall",
	"syscall.DLT_PFSYNC":                                   "syscall",
	"syscall.DLT_PPI":                                      "syscall",
	"syscall.DLT_PPP":                                      "syscall",
	"syscall.DLT_PPP_BSDOS":                                "syscall",
	"syscall.DLT_PPP_ETHER":                                "syscall",
	"syscall.DLT_PPP_PPPD":                                 "syscall",
	"syscall.DLT_PPP_SERIAL":                               "syscall",
	"syscall.DLT_PPP_WITH_DIR":                             "syscall",
	"syscall.DLT_PPP_WITH_DIRECTION":                       "syscall",
	"syscall.DLT_PRISM_HEADER":                             "syscall",
	"syscall.DLT_PRONET":                                   "syscall",
	"syscall.DLT_RAIF1":                                    "syscall",
	"syscall.DLT_RAW":                                      "syscall",
	"syscall.DLT_RAWAF_MASK":                               "syscall",
	"syscall.DLT_RIO":                                      "syscall",
	"syscall.DLT_SCCP":                                     "syscall",
	"syscall.DLT_SITA":                                     "syscall",
	"syscall.DLT_SLIP":                                     "syscall",
	"syscall.DLT_SLIP_BSDOS":                               "syscall",
	"syscall.DLT_STANAG_5066_D_PDU":                        "syscall",
	"syscall.DLT_SUNATM":                                   "syscall",
	"syscall.DLT_SYMANTEC_FIREWALL":                        "syscall",
	"syscall.DLT_TZSP":                                     "syscall",
	"syscall.DLT_USB":                                      "syscall",
	"syscall.DLT_USB_LINUX":                                "syscall",
	"syscall.DLT_USB_LINUX_MMAPPED":                        "syscall",
	"syscall.DLT_USER0":                                    "syscall",
	"syscall.DLT_USER1":                                    "syscall",
	"syscall.DLT_USER10":                                   "syscall",
	"syscall.DLT_USER11":                                   "syscall",
	"syscall.DLT_USER12":                                   "syscall",
	"syscall.DLT_USER13":                                   "syscall",
	"syscall.DLT_USER14":                                   "syscall",
	"syscall.DLT_USER15":                                   "syscall",
	"syscall.DLT_USER2":                                    "syscall",
	"syscall.DLT_USER3":                                    "syscall",
	"syscall.DLT_USER4":                                    "syscall",
	"syscall.DLT_USER5":                                    "syscall",
	"syscall.DLT_USER6":                                    "syscall",
	"syscall.DLT_USER7":                                    "syscall",
	"syscall.DLT_USER8":                                    "syscall",
	"syscall.DLT_USER9":                                    "syscall",
	"syscall.DLT_WIHART":                                   "syscall",
	"syscall.DLT_X2E_SERIAL":                               "syscall",
	"syscall.DLT_X2E_XORAYA":                               "syscall",
	"syscall.DNSMXData":                                    "syscall",
	"syscall.DNSPTRData":                                   "syscall",
	"syscall.DNSRecord":                                    "syscall",
	"syscall.DNSSRVData":                                   "syscall",
	"syscall.DNSTXTData":                                   "syscall",
	"syscall.DNS_INFO_NO_RECORDS":                          "syscall",
	"syscall.DNS_TYPE_A":                                   "syscall",
	"syscall.DNS_TYPE_A6":                                  "syscall",
	"syscall.DNS_TYPE_AAAA":                                "syscall",
	"syscall.DNS_TYPE_ADDRS":                               "syscall",
	"syscall.DNS_TYPE_AFSDB":                               "syscall",
	"syscall.DNS_TYPE_ALL":                                 "syscall",
	"syscall.DNS_TYPE_ANY":                                 "syscall",
	"syscall.DNS_TYPE_ATMA":                                "syscall",
	"syscall.DNS_TYPE_AXFR":                                "syscall",
	"syscall.DNS_TYPE_CERT":                                "syscall",
	"syscall.DNS_TYPE_CNAME":                               "syscall",
	"syscall.DNS_TYPE_DHCID":                               "syscall",
	"syscall.DNS_TYPE_DNAME":                               "syscall",
	"syscall.DNS_TYPE_DNSKEY":                              "syscall",
	"syscall.DNS_TYPE_DS":                                  "syscall",
	"syscall.DNS_TYPE_EID":                                 "syscall",
	"syscall.DNS_TYPE_GID":                                 "syscall",
	"syscall.DNS_TYPE_GPOS":                                "syscall",
	"syscall.DNS_TYPE_HINFO":                               "syscall",
	"syscall.DNS_TYPE_ISDN":                                "syscall",
	"syscall.DNS_TYPE_IXFR":                                "syscall",
	"syscall.DNS_TYPE_KEY":                                 "syscall",
	"syscall.DNS_TYPE_KX":                                  "syscall",
	"syscall.DNS_TYPE_LOC":                                 "syscall",
	"syscall.DNS_TYPE_MAILA":                               "syscall",
	"syscall.DNS_TYPE_MAILB":                               "syscall",
	"syscall.DNS_TYPE_MB":                                  "syscall",
	"syscall.DNS_TYPE_MD":                                  "syscall",
	"syscall.DNS_TYPE_MF":                                  "syscall",
	"syscall.DNS_TYPE_MG":                                  "syscall",
	"syscall.DNS_TYPE_MINFO":                               "syscall",
	"syscall.DNS_TYPE_MR":                                  "syscall",
	"syscall.DNS_TYPE_MX":                                  "syscall",
	"syscall.DNS_TYPE_NAPTR":                               "syscall",
	"syscall.DNS_TYPE_NBSTAT":                              "syscall",
	"syscall.DNS_TYPE_NIMLOC":                              "syscall",
	"syscall.DNS_TYPE_NS":                                  "syscall",
	"syscall.DNS_TYPE_NSAP":                                "syscall",
	"syscall.DNS_TYPE_NSAPPTR":                             "syscall",
	"syscall.DNS_TYPE_NSEC":                                "syscall",
	"syscall.DNS_TYPE_NULL":                                "syscall",
	"syscall.DNS_TYPE_NXT":                                 "syscall",
	"syscall.DNS_TYPE_OPT":                                 "syscall",
	"syscall.DNS_TYPE_PTR":                                 "syscall",
	"syscall.DNS_TYPE_PX":                                  "syscall",
	"syscall.DNS_TYPE_RP":                                  "syscall",
	"syscall.DNS_TYPE_RRSIG":                               "syscall",
	"syscall.DNS_TYPE_RT":                                  "syscall",
	"syscall.DNS_TYPE_SIG":                                 "syscall",
	"syscall.DNS_TYPE_SINK":                                "syscall",
	"syscall.DNS_TYPE_SOA":                                 "syscall",
	"syscall.DNS_TYPE_SRV":                                 "syscall",
	"syscall.DNS_TYPE_TEXT":                                "syscall",
	"syscall.DNS_TYPE_TKEY":                                "syscall",
	"syscall.DNS_TYPE_TSIG":                                "syscall",
	"syscall.DNS_TYPE_UID":                                 "syscall",
	"syscall.DNS_TYPE_UINFO":                               "syscall",
	"syscall.DNS_TYPE_UNSPEC":                              "syscall",
	"syscall.DNS_TYPE_WINS":                                "syscall",
	"syscall.DNS_TYPE_WINSR":                               "syscall",
	"syscall.DNS_TYPE_WKS":                                 "syscall",
	"syscall.DNS_TYPE_X25":                                 "syscall",
	"syscall.DT_BLK":                                       "syscall",
	"syscall.DT_CHR":                                       "syscall",
	"syscall.DT_DIR":                                       "syscall",
	"syscall.DT_FIFO":                                      "syscall",
	"syscall.DT_LNK":                                       "syscall",
	"syscall.DT_REG":                                       "syscall",
	"syscall.DT_SOCK":                                      "syscall",
	"syscall.DT_UNKNOWN":                                   "syscall",
	"syscall.DT_WHT":                                       "syscall",
	"syscall.DUPLICATE_CLOSE_SOURCE":                       "syscall",
	"syscall.DUPLICATE_SAME_ACCESS":                        "syscall",
	"syscall.DeleteFile":                                   "syscall",
	"syscall.DetachLsf":                                    "syscall",
	"syscall.DeviceIoControl":                              "syscall",
	"syscall.Dirent":                                       "syscall",
	"syscall.DnsNameCompare":                               "syscall",
	"syscall.DnsQuery":                                     "syscall",
	"syscall.DnsRecordListFree":                            "syscall",
	"syscall.DnsSectionAdditional":                         "syscall",
	"syscall.DnsSectionAnswer":                             "syscall",
	"syscall.DnsSectionAuthority":                          "syscall",
	"syscall.DnsSectionQuestion":                           "syscall",
	"syscall.Dup":                                          "syscall",
	"syscall.Dup2":                                         "syscall",
	"syscall.Dup3":                                         "syscall",
	"syscall.DuplicateHandle":                              "syscall",
	"syscall.E2BIG":                                        "syscall",
	"syscall.EACCES":                                       "syscall",
	"syscall.EADDRINUSE":                                   "syscall",
	"syscall.EADDRNOTAVAIL":                                "syscall",
	"syscall.EADV":                                         "syscall",
	"syscall.EAFNOSUPPORT":                                 "syscall",
	"syscall.EAGAIN":                                       "syscall",
	"syscall.EALREADY":                                     "syscall",
	"syscall.EAUTH":                                        "syscall",
	"syscall.EBADARCH":                                     "syscall",
	"syscall.EBADE":                                        "syscall",
	"syscall.EBADEXEC":                                     "syscall",
	"syscall.EBADF":                                        "syscall",
	"syscall.EBADFD":                                       "syscall",
	"syscall.EBADMACHO":                                    "syscall",
	"syscall.EBADMSG":                                      "syscall",
	"syscall.EBADR":                                        "syscall",
	"syscall.EBADRPC":                                      "syscall",
	"syscall.EBADRQC":                                      "syscall",
	"syscall.EBADSLT":                                      "syscall",
	"syscall.EBFONT":                                       "syscall",
	"syscall.EBUSY":                                        "syscall",
	"syscall.ECANCELED":                                    "syscall",
	"syscall.ECAPMODE":                                     "syscall",
	"syscall.ECHILD":                                       "syscall",
	"syscall.ECHO":                                         "syscall",
	"syscall.ECHOCTL":                                      "syscall",
	"syscall.ECHOE":                                        "syscall",
	"syscall.ECHOK":                                        "syscall",
	"syscall.ECHOKE":                                       "syscall",
	"syscall.ECHONL":                                       "syscall",
	"syscall.ECHOPRT":                                      "syscall",
	"syscall.ECHRNG":                                       "syscall",
	"syscall.ECOMM":                                        "syscall",
	"syscall.ECONNABORTED":                                 "syscall",
	"syscall.ECONNREFUSED":                                 "syscall",
	"syscall.ECONNRESET":                                   "syscall",
	"syscall.EDEADLK":                                      "syscall",
	"syscall.EDEADLOCK":                                    "syscall",
	"syscall.EDESTADDRREQ":                                 "syscall",
	"syscall.EDEVERR":                                      "syscall",
	"syscall.EDOM":                                         "syscall",
	"syscall.EDOOFUS":                                      "syscall",
	"syscall.EDOTDOT":                                      "syscall",
	"syscall.EDQUOT":                                       "syscall",
	"syscall.EEXIST":                                       "syscall",
	"syscall.EFAULT":                                       "syscall",
	"syscall.EFBIG":                                        "syscall",
	"syscall.EFER_LMA":                                     "syscall",
	"syscall.EFER_LME":                                     "syscall",
	"syscall.EFER_NXE":                                     "syscall",
	"syscall.EFER_SCE":                                     "syscall",
	"syscall.EFTYPE":                                       "syscall",
	"syscall.EHOSTDOWN":                                    "syscall",
	"syscall.EHOSTUNREACH":                                 "syscall",
	"syscall.EHWPOISON":                                    "syscall",
	"syscall.EIDRM":                                        "syscall",
	"syscall.EILSEQ":                                       "syscall",
	"syscall.EINPROGRESS":                                  "syscall",
	"syscall.EINTR":                                        "syscall",
	"syscall.EINVAL":                                       "syscall",
	"syscall.EIO":                                          "syscall",
	"syscall.EIPSEC":                                       "syscall",
	"syscall.EISCONN":                                      "syscall",
	"syscall.EISDIR":                                       "syscall",
	"syscall.EISNAM":                                       "syscall",
	"syscall.EKEYEXPIRED":                                  "syscall",
	"syscall.EKEYREJECTED":                                 "syscall",
	"syscall.EKEYREVOKED":                                  "syscall",
	"syscall.EL2HLT":                                       "syscall",
	"syscall.EL2NSYNC":                                     "syscall",
	"syscall.EL3HLT":                                       "syscall",
	"syscall.EL3RST":                                       "syscall",
	"syscall.ELAST":                                        "syscall",
	"syscall.ELF_NGREG":                                    "syscall",
	"syscall.ELF_PRARGSZ":                                  "syscall",
	"syscall.ELIBACC":                                      "syscall",
	"syscall.ELIBBAD":                                      "syscall",
	"syscall.ELIBEXEC":                                     "syscall",
	"syscall.ELIBMAX":                                      "syscall",
	"syscall.ELIBSCN":                                      "syscall",
	"syscall.ELNRNG":                                       "syscall",
	"syscall.ELOOP":                                        "syscall",
	"syscall.EMEDIUMTYPE":                                  "syscall",
	"syscall.EMFILE":                                       "syscall",
	"syscall.EMLINK":                                       "syscall",
	"syscall.EMSGSIZE":                                     "syscall",
	"syscall.EMT_TAGOVF":                                   "syscall",
	"syscall.EMULTIHOP":                                    "syscall",
	"syscall.EMUL_ENABLED":                                 "syscall",
	"syscall.EMUL_LINUX":                                   "syscall",
	"syscall.EMUL_LINUX32":                                 "syscall",
	"syscall.EMUL_MAXID":                                   "syscall",
	"syscall.EMUL_NATIVE":                                  "syscall",
	"syscall.ENAMETOOLONG":                                 "syscall",
	"syscall.ENAVAIL":                                      "syscall",
	"syscall.ENDRUNDISC":                                   "syscall",
	"syscall.ENEEDAUTH":                                    "syscall",
	"syscall.ENETDOWN":                                     "syscall",
	"syscall.ENETRESET":                                    "syscall",
	"syscall.ENETUNREACH":                                  "syscall",
	"syscall.ENFILE":                                       "syscall",
	"syscall.ENOANO":                                       "syscall",
	"syscall.ENOATTR":                                      "syscall",
	"syscall.ENOBUFS":                                      "syscall",
	"syscall.ENOCSI":                                       "syscall",
	"syscall.ENODATA":                                      "syscall",
	"syscall.ENODEV":                                       "syscall",
	"syscall.ENOENT":                                       "syscall",
	"syscall.ENOEXEC":                                      "syscall",
	"syscall.ENOKEY":                                       "syscall",
	"syscall.ENOLCK":                                       "syscall",
	"syscall.ENOLINK":                                      "syscall",
	"syscall.ENOMEDIUM":                                    "syscall",
	"syscall.ENOMEM":                                       "syscall",
	"syscall.ENOMSG":                                       "syscall",
	"syscall.ENONET":                                       "syscall",
	"syscall.ENOPKG":                                       "syscall",
	"syscall.ENOPOLICY":                                    "syscall",
	"syscall.ENOPROTOOPT":                                  "syscall",
	"syscall.ENOSPC":                                       "syscall",
	"syscall.ENOSR":                                        "syscall",
	"syscall.ENOSTR":                                       "syscall",
	"syscall.ENOSYS":                                       "syscall",
	"syscall.ENOTBLK":                                      "syscall",
	"syscall.ENOTCAPABLE":                                  "syscall",
	"syscall.ENOTCONN":                                     "syscall",
	"syscall.ENOTDIR":                                      "syscall",
	"syscall.ENOTEMPTY":                                    "syscall",
	"syscall.ENOTNAM":                                      "syscall",
	"syscall.ENOTRECOVERABLE":                              "syscall",
	"syscall.ENOTSOCK":                                     "syscall",
	"syscall.ENOTSUP":                                      "syscall",
	"syscall.ENOTTY":                                       "syscall",
	"syscall.ENOTUNIQ":                                     "syscall",
	"syscall.ENXIO":                                        "syscall",
	"syscall.EN_SW_CTL_INF":                                "syscall",
	"syscall.EN_SW_CTL_PREC":                               "syscall",
	"syscall.EN_SW_CTL_ROUND":                              "syscall",
	"syscall.EN_SW_DATACHAIN":                              "syscall",
	"syscall.EN_SW_DENORM":                                 "syscall",
	"syscall.EN_SW_INVOP":                                  "syscall",
	"syscall.EN_SW_OVERFLOW":                               "syscall",
	"syscall.EN_SW_PRECLOSS":                               "syscall",
	"syscall.EN_SW_UNDERFLOW":                              "syscall",
	"syscall.EN_SW_ZERODIV":                                "syscall",
	"syscall.EOPNOTSUPP":                                   "syscall",
	"syscall.EOVERFLOW":                                    "syscall",
	"syscall.EOWNERDEAD":                                   "syscall",
	"syscall.EPERM":                                        "syscall",
	"syscall.EPFNOSUPPORT":                                 "syscall",
	"syscall.EPIPE":                                        "syscall",
	"syscall.EPOLLERR":                                     "syscall",
	"syscall.EPOLLET":                                      "syscall",
	"syscall.EPOLLHUP":                                     "syscall",
	"syscall.EPOLLIN":                                      "syscall",
	"syscall.EPOLLMSG":                                     "syscall",
	"syscall.EPOLLONESHOT":                                 "syscall",
	"syscall.EPOLLOUT":                                     "syscall",
	"syscall.EPOLLPRI":                                     "syscall",
	"syscall.EPOLLRDBAND":                                  "syscall",
	"syscall.EPOLLRDHUP":                                   "syscall",
	"syscall.EPOLLRDNORM":                                  "syscall",
	"syscall.EPOLLWRBAND":                                  "syscall",
	"syscall.EPOLLWRNORM":                                  "syscall",
	"syscall.EPOLL_CLOEXEC":                                "syscall",
	"syscall.EPOLL_CTL_ADD":                                "syscall",
	"syscall.EPOLL_CTL_DEL":                                "syscall",
	"syscall.EPOLL_CTL_MOD":                                "syscall",
	"syscall.EPOLL_NONBLOCK":                               "syscall",
	"syscall.EPROCLIM":                                     "syscall",
	"syscall.EPROCUNAVAIL":                                 "syscall",
	"syscall.EPROGMISMATCH":                                "syscall",
	"syscall.EPROGUNAVAIL":                                 "syscall",
	"syscall.EPROTO":                                       "syscall",
	"syscall.EPROTONOSUPPORT":                              "syscall",
	"syscall.EPROTOTYPE":                                   "syscall",
	"syscall.EPWROFF":                                      "syscall",
	"syscall.ERANGE":                                       "syscall",
	"syscall.EREMCHG":                                      "syscall",
	"syscall.EREMOTE":                                      "syscall",
	"syscall.EREMOTEIO":                                    "syscall",
	"syscall.ERESTART":                                     "syscall",
	"syscall.ERFKILL":                                      "syscall",
	"syscall.EROFS":                                        "syscall",
	"syscall.ERPCMISMATCH":                                 "syscall",
	"syscall.ERROR_ACCESS_DENIED":                          "syscall",
	"syscall.ERROR_ALREADY_EXISTS":                         "syscall",
	"syscall.ERROR_BROKEN_PIPE":                            "syscall",
	"syscall.ERROR_BUFFER_OVERFLOW":                        "syscall",
	"syscall.ERROR_ENVVAR_NOT_FOUND":                       "syscall",
	"syscall.ERROR_FILE_EXISTS":                            "syscall",
	"syscall.ERROR_FILE_NOT_FOUND":                         "syscall",
	"syscall.ERROR_HANDLE_EOF":                             "syscall",
	"syscall.ERROR_INSUFFICIENT_BUFFER":                    "syscall",
	"syscall.ERROR_IO_PENDING":                             "syscall",
	"syscall.ERROR_MOD_NOT_FOUND":                          "syscall",
	"syscall.ERROR_MORE_DATA":                              "syscall",
	"syscall.ERROR_NETNAME_DELETED":                        "syscall",
	"syscall.ERROR_NOT_FOUND":                              "syscall",
	"syscall.ERROR_NO_MORE_FILES":                          "syscall",
	"syscall.ERROR_OPERATION_ABORTED":                      "syscall",
	"syscall.ERROR_PATH_NOT_FOUND":                         "syscall",
	"syscall.ERROR_PRIVILEGE_NOT_HELD":                     "syscall",
	"syscall.ERROR_PROC_NOT_FOUND":                         "syscall",
	"syscall.ESHLIBVERS":                                   "syscall",
	"syscall.ESHUTDOWN":                                    "syscall",
	"syscall.ESOCKTNOSUPPORT":                              "syscall",
	"syscall.ESPIPE":                                       "syscall",
	"syscall.ESRCH":                                        "syscall",
	"syscall.ESRMNT":                                       "syscall",
	"syscall.ESTALE":                                       "syscall",
	"syscall.ESTRPIPE":                                     "syscall",
	"syscall.ETHERCAP_JUMBO_MTU":                           "syscall",
	"syscall.ETHERCAP_VLAN_HWTAGGING":                      "syscall",
	"syscall.ETHERCAP_VLAN_MTU":                            "syscall",
	"syscall.ETHERMIN":                                     "syscall",
	"syscall.ETHERMTU":                                     "syscall",
	"syscall.ETHERMTU_JUMBO":                               "syscall",
	"syscall.ETHERTYPE_8023":                               "syscall",
	"syscall.ETHERTYPE_AARP":                               "syscall",
	"syscall.ETHERTYPE_ACCTON":                             "syscall",
	"syscall.ETHERTYPE_AEONIC":                             "syscall",
	"syscall.ETHERTYPE_ALPHA":                              "syscall",
	"syscall.ETHERTYPE_AMBER":                              "syscall",
	"syscall.ETHERTYPE_AMOEBA":                             "syscall",
	"syscall.ETHERTYPE_AOE":                                "syscall",
	"syscall.ETHERTYPE_APOLLO":                             "syscall",
	"syscall.ETHERTYPE_APOLLODOMAIN":                       "syscall",
	"syscall.ETHERTYPE_APPLETALK":                          "syscall",
	"syscall.ETHERTYPE_APPLITEK":                           "syscall",
	"syscall.ETHERTYPE_ARGONAUT":                           "syscall",
	"syscall.ETHERTYPE_ARP":                                "syscall",
	"syscall.ETHERTYPE_AT":                                 "syscall",
	"syscall.ETHERTYPE_ATALK":                              "syscall",
	"syscall.ETHERTYPE_ATOMIC":                             "syscall",
	"syscall.ETHERTYPE_ATT":                                "syscall",
	"syscall.ETHERTYPE_ATTSTANFORD":                        "syscall",
	"syscall.ETHERTYPE_AUTOPHON":                           "syscall",
	"syscall.ETHERTYPE_AXIS":                               "syscall",
	"syscall.ETHERTYPE_BCLOOP":                             "syscall",
	"syscall.ETHERTYPE_BOFL":                               "syscall",
	"syscall.ETHERTYPE_CABLETRON":                          "syscall",
	"syscall.ETHERTYPE_CHAOS":                              "syscall",
	"syscall.ETHERTYPE_COMDESIGN":                          "syscall",
	"syscall.ETHERTYPE_COMPUGRAPHIC":                       "syscall",
	"syscall.ETHERTYPE_COUNTERPOINT":                       "syscall",
	"syscall.ETHERTYPE_CRONUS":                             "syscall",
	"syscall.ETHERTYPE_CRONUSVLN":                          "syscall",
	"syscall.ETHERTYPE_DCA":                                "syscall",
	"syscall.ETHERTYPE_DDE":                                "syscall",
	"syscall.ETHERTYPE_DEBNI":                              "syscall",
	"syscall.ETHERTYPE_DECAM":                              "syscall",
	"syscall.ETHERTYPE_DECCUST":                            "syscall",
	"syscall.ETHERTYPE_DECDIAG":                            "syscall",
	"syscall.ETHERTYPE_DECDNS":                             "syscall",
	"syscall.ETHERTYPE_DECDTS":                             "syscall",
	"syscall.ETHERTYPE_DECEXPER":                           "syscall",
	"syscall.ETHERTYPE_DECLAST":                            "syscall",
	"syscall.ETHERTYPE_DECLTM":                             "syscall",
	"syscall.ETHERTYPE_DECMUMPS":                           "syscall",
	"syscall.ETHERTYPE_DECNETBIOS":                         "syscall",
	"syscall.ETHERTYPE_DELTACON":                           "syscall",
	"syscall.ETHERTYPE_DIDDLE":                             "syscall",
	"syscall.ETHERTYPE_DLOG1":                              "syscall",
	"syscall.ETHERTYPE_DLOG2":                              "syscall",
	"syscall.ETHERTYPE_DN":                                 "syscall",
	"syscall.ETHERTYPE_DOGFIGHT":                           "syscall",
	"syscall.ETHERTYPE_DSMD":                               "syscall",
	"syscall.ETHERTYPE_ECMA":                               "syscall",
	"syscall.ETHERTYPE_ENCRYPT":                            "syscall",
	"syscall.ETHERTYPE_ES":                                 "syscall",
	"syscall.ETHERTYPE_EXCELAN":                            "syscall",
	"syscall.ETHERTYPE_EXPERDATA":                          "syscall",
	"syscall.ETHERTYPE_FLIP":                               "syscall",
	"syscall.ETHERTYPE_FLOWCONTROL":                        "syscall",
	"syscall.ETHERTYPE_FRARP":                              "syscall",
	"syscall.ETHERTYPE_GENDYN":                             "syscall",
	"syscall.ETHERTYPE_HAYES":                              "syscall",
	"syscall.ETHERTYPE_HIPPI_FP":                           "syscall",
	"syscall.ETHERTYPE_HITACHI":                            "syscall",
	"syscall.ETHERTYPE_HP":                                 "syscall",
	"syscall.ETHERTYPE_IEEEPUP":                            "syscall",
	"syscall.ETHERTYPE_IEEEPUPAT":                          "syscall",
	"syscall.ETHERTYPE_IMLBL":                              "syscall",
	"syscall.ETHERTYPE_IMLBLDIAG":                          "syscall",
	"syscall.ETHERTYPE_IP":                                 "syscall",
	"syscall.ETHERTYPE_IPAS":                               "syscall",
	"syscall.ETHERTYPE_IPV6":                               "syscall",
	"syscall.ETHERTYPE_IPX":                                "syscall",
	"syscall.ETHERTYPE_IPXNEW":                             "syscall",
	"syscall.ETHERTYPE_KALPANA":                            "syscall",
	"syscall.ETHERTYPE_LANBRIDGE":                          "syscall",
	"syscall.ETHERTYPE_LANPROBE":                           "syscall",
	"syscall.ETHERTYPE_LAT":                                "syscall",
	"syscall.ETHERTYPE_LBACK":                              "syscall",
	"syscall.ETHERTYPE_LITTLE":                             "syscall",
	"syscall.ETHERTYPE_LLDP":                               "syscall",
	"syscall.ETHERTYPE_LOGICRAFT":                          "syscall",
	"syscall.ETHERTYPE_LOOPBACK":                           "syscall",
	"syscall.ETHERTYPE_MATRA":                              "syscall",
	"syscall.ETHERTYPE_MAX":                                "syscall",
	"syscall.ETHERTYPE_MERIT":                              "syscall",
	"syscall.ETHERTYPE_MICP":                               "syscall",
	"syscall.ETHERTYPE_MOPDL":                              "syscall",
	"syscall.ETHERTYPE_MOPRC":                              "syscall",
	"syscall.ETHERTYPE_MOTOROLA":                           "syscall",
	"syscall.ETHERTYPE_MPLS":                               "syscall",
	"syscall.ETHERTYPE_MPLS_MCAST":                         "syscall",
	"syscall.ETHERTYPE_MUMPS":                              "syscall",
	"syscall.ETHERTYPE_NBPCC":                              "syscall",
	"syscall.ETHERTYPE_NBPCLAIM":                           "syscall",
	"syscall.ETHERTYPE_NBPCLREQ":                           "syscall",
	"syscall.ETHERTYPE_NBPCLRSP":                           "syscall",
	"syscall.ETHERTYPE_NBPCREQ":                            "syscall",
	"syscall.ETHERTYPE_NBPCRSP":                            "syscall",
	"syscall.ETHERTYPE_NBPDG":                              "syscall",
	"syscall.ETHERTYPE_NBPDGB":                             "syscall",
	"syscall.ETHERTYPE_NBPDLTE":                            "syscall",
	"syscall.ETHERTYPE_NBPRAR":                             "syscall",
	"syscall.ETHERTYPE_NBPRAS":                             "syscall",
	"syscall.ETHERTYPE_NBPRST":                             "syscall",
	"syscall.ETHERTYPE_NBPSCD":                             "syscall",
	"syscall.ETHERTYPE_NBPVCD":                             "syscall",
	"syscall.ETHERTYPE_NBS":                                "syscall",
	"syscall.ETHERTYPE_NCD":                                "syscall",
	"syscall.ETHERTYPE_NESTAR":                             "syscall",
	"syscall.ETHERTYPE_NETBEUI":                            "syscall",
	"syscall.ETHERTYPE_NOVELL":                             "syscall",
	"syscall.ETHERTYPE_NS":                                 "syscall",
	"syscall.ETHERTYPE_NSAT":                               "syscall",
	"syscall.ETHERTYPE_NSCOMPAT":                           "syscall",
	"syscall.ETHERTYPE_NTRAILER":                           "syscall",
	"syscall.ETHERTYPE_OS9":                                "syscall",
	"syscall.ETHERTYPE_OS9NET":                             "syscall",
	"syscall.ETHERTYPE_PACER":                              "syscall",
	"syscall.ETHERTYPE_PAE":                                "syscall",
	"syscall.ETHERTYPE_PCS":                                "syscall",
	"syscall.ETHERTYPE_PLANNING":                           "syscall",
	"syscall.ETHERTYPE_PPP":                                "syscall",
	"syscall.ETHERTYPE_PPPOE":                              "syscall",
	"syscall.ETHERTYPE_PPPOEDISC":                          "syscall",
	"syscall.ETHERTYPE_PRIMENTS":                           "syscall",
	"syscall.ETHERTYPE_PUP":                                "syscall",
	"syscall.ETHERTYPE_PUPAT":                              "syscall",
	"syscall.ETHERTYPE_QINQ":                               "syscall",
	"syscall.ETHERTYPE_RACAL":                              "syscall",
	"syscall.ETHERTYPE_RATIONAL":                           "syscall",
	"syscall.ETHERTYPE_RAWFR":                              "syscall",
	"syscall.ETHERTYPE_RCL":                                "syscall",
	"syscall.ETHERTYPE_RDP":                                "syscall",
	"syscall.ETHERTYPE_RETIX":                              "syscall",
	"syscall.ETHERTYPE_REVARP":                             "syscall",
	"syscall.ETHERTYPE_SCA":                                "syscall",
	"syscall.ETHERTYPE_SECTRA":                             "syscall",
	"syscall.ETHERTYPE_SECUREDATA":                         "syscall",
	"syscall.ETHERTYPE_SGITW":                              "syscall",
	"syscall.ETHERTYPE_SG_BOUNCE":                          "syscall",
	"syscall.ETHERTYPE_SG_DIAG":                            "syscall",
	"syscall.ETHERTYPE_SG_NETGAMES":                        "syscall",
	"syscall.ETHERTYPE_SG_RESV":                            "syscall",
	"syscall.ETHERTYPE_SIMNET":                             "syscall",
	"syscall.ETHERTYPE_SLOW":                               "syscall",
	"syscall.ETHERTYPE_SLOWPROTOCOLS":                      "syscall",
	"syscall.ETHERTYPE_SNA":                                "syscall",
	"syscall.ETHERTYPE_SNMP":                               "syscall",
	"syscall.ETHERTYPE_SONIX":                              "syscall",
	"syscall.ETHERTYPE_SPIDER":                             "syscall",
	"syscall.ETHERTYPE_SPRITE":                             "syscall",
	"syscall.ETHERTYPE_STP":                                "syscall",
	"syscall.ETHERTYPE_TALARIS":                            "syscall",
	"syscall.ETHERTYPE_TALARISMC":                          "syscall",
	"syscall.ETHERTYPE_TCPCOMP":                            "syscall",
	"syscall.ETHERTYPE_TCPSM":                              "syscall",
	"syscall.ETHERTYPE_TEC":                                "syscall",
	"syscall.ETHERTYPE_TIGAN":                              "syscall",
	"syscall.ETHERTYPE_TRAIL":                              "syscall",
	"syscall.ETHERTYPE_TRANSETHER":                         "syscall",
	"syscall.ETHERTYPE_TYMSHARE":                           "syscall",
	"syscall.ETHERTYPE_UBBST":                              "syscall",
	"syscall.ETHERTYPE_UBDEBUG":                            "syscall",
	"syscall.ETHERTYPE_UBDIAGLOOP":                         "syscall",
	"syscall.ETHERTYPE_UBDL":                               "syscall",
	"syscall.ETHERTYPE_UBNIU":                              "syscall",
	"syscall.ETHERTYPE_UBNMC":                              "syscall",
	"syscall.ETHERTYPE_VALID":                              "syscall",
	"syscall.ETHERTYPE_VARIAN":                             "syscall",
	"syscall.ETHERTYPE_VAXELN":                             "syscall",
	"syscall.ETHERTYPE_VEECO":                              "syscall",
	"syscall.ETHERTYPE_VEXP":                               "syscall",
	"syscall.ETHERTYPE_VGLAB":                              "syscall",
	"syscall.ETHERTYPE_VINES":                              "syscall",
	"syscall.ETHERTYPE_VINESECHO":                          "syscall",
	"syscall.ETHERTYPE_VINESLOOP":                          "syscall",
	"syscall.ETHERTYPE_VITAL":                              "syscall",
	"syscall.ETHERTYPE_VLAN":                               "syscall",
	"syscall.ETHERTYPE_VLTLMAN":                            "syscall",
	"syscall.ETHERTYPE_VPROD":                              "syscall",
	"syscall.ETHERTYPE_VURESERVED":                         "syscall",
	"syscall.ETHERTYPE_WATERLOO":                           "syscall",
	"syscall.ETHERTYPE_WELLFLEET":                          "syscall",
	"syscall.ETHERTYPE_X25":                                "syscall",
	"syscall.ETHERTYPE_X75":                                "syscall",
	"syscall.ETHERTYPE_XNSSM":                              "syscall",
	"syscall.ETHERTYPE_XTP":                                "syscall",
	"syscall.ETHER_ADDR_LEN":                               "syscall",
	"syscall.ETHER_ALIGN":                                  "syscall",
	"syscall.ETHER_CRC_LEN":                                "syscall",
	"syscall.ETHER_CRC_POLY_BE":                            "syscall",
	"syscall.ETHER_CRC_POLY_LE":                            "syscall",
	"syscall.ETHER_HDR_LEN":                                "syscall",
	"syscall.ETHER_MAX_DIX_LEN":                            "syscall",
	"syscall.ETHER_MAX_LEN":                                "syscall",
	"syscall.ETHER_MAX_LEN_JUMBO":                          "syscall",
	"syscall.ETHER_MIN_LEN":                                "syscall",
	"syscall.ETHER_PPPOE_ENCAP_LEN":                        "syscall",
	"syscall.ETHER_TYPE_LEN":                               "syscall",
	"syscall.ETHER_VLAN_ENCAP_LEN":                         "syscall",
	"syscall.ETH_P_1588":                                   "syscall",
	"syscall.ETH_P_8021Q":                                  "syscall",
	"syscall.ETH_P_802_2":                                  "syscall",
	"syscall.ETH_P_802_3":                                  "syscall",
	"syscall.ETH_P_AARP":                                   "syscall",
	"syscall.ETH_P_ALL":                                    "syscall",
	"syscall.ETH_P_AOE":                                    "syscall",
	"syscall.ETH_P_ARCNET":                                 "syscall",
	"syscall.ETH_P_ARP":                                    "syscall",
	"syscall.ETH_P_ATALK":                                  "syscall",
	"syscall.ETH_P_ATMFATE":                                "syscall",
	"syscall.ETH_P_ATMMPOA":                                "syscall",
	"syscall.ETH_P_AX25":                                   "syscall",
	"syscall.ETH_P_BPQ":                                    "syscall",
	"syscall.ETH_P_CAIF":                                   "syscall",
	"syscall.ETH_P_CAN":                                    "syscall",
	"syscall.ETH_P_CONTROL":                                "syscall",
	"syscall.ETH_P_CUST":                                   "syscall",
	"syscall.ETH_P_DDCMP":                                  "syscall",
	"syscall.ETH_P_DEC":                                    "syscall",
	"syscall.ETH_P_DIAG":                                   "syscall",
	"syscall.ETH_P_DNA_DL":                                 "syscall",
	"syscall.ETH_P_DNA_RC":                                 "syscall",
	"syscall.ETH_P_DNA_RT":                                 "syscall",
	"syscall.ETH_P_DSA":                                    "syscall",
	"syscall.ETH_P_ECONET":                                 "syscall",
	"syscall.ETH_P_EDSA":                                   "syscall",
	"syscall.ETH_P_FCOE":                                   "syscall",
	"syscall.ETH_P_FIP":                                    "syscall",
	"syscall.ETH_P_HDLC":                                   "syscall",
	"syscall.ETH_P_IEEE802154":                             "syscall",
	"syscall.ETH_P_IEEEPUP":                                "syscall",
	"syscall.ETH_P_IEEEPUPAT":                              "syscall",
	"syscall.ETH_P_IP":                                     "syscall",
	"syscall.ETH_P_IPV6":                                   "syscall",
	"syscall.ETH_P_IPX":                                    "syscall",
	"syscall.ETH_P_IRDA":                                   "syscall",
	"syscall.ETH_P_LAT":                                    "syscall",
	"syscall.ETH_P_LINK_CTL":                               "syscall",
	"syscall.ETH_P_LOCALTALK":                              "syscall",
	"syscall.ETH_P_LOOP":                                   "syscall",
	"syscall.ETH_P_MOBITEX":                                "syscall",
	"syscall.ETH_P_MPLS_MC":                                "syscall",
	"syscall.ETH_P_MPLS_UC":                                "syscall",
	"syscall.ETH_P_PAE":                                    "syscall",
	"syscall.ETH_P_PAUSE":                                  "syscall",
	"syscall.ETH_P_PHONET":                                 "syscall",
	"syscall.ETH_P_PPPTALK":                                "syscall",
	"syscall.ETH_P_PPP_DISC":                               "syscall",
	"syscall.ETH_P_PPP_MP":                                 "syscall",
	"syscall.ETH_P_PPP_SES":                                "syscall",
	"syscall.ETH_P_PUP":                                    "syscall",
	"syscall.ETH_P_PUPAT":                                  "syscall",
	"syscall.ETH_P_RARP":                                   "syscall",
	"syscall.ETH_P_SCA":                                    "syscall",
	"syscall.ETH_P_SLOW":                                   "syscall",
	"syscall.ETH_P_SNAP":                                   "syscall",
	"syscall.ETH_P_TEB":                                    "syscall",
	"syscall.ETH_P_TIPC":                                   "syscall",
	"syscall.ETH_P_TRAILER":                                "syscall",
	"syscall.ETH_P_TR_802_2":                               "syscall",
	"syscall.ETH_P_WAN_PPP":                                "syscall",
	"syscall.ETH_P_WCCP":                                   "syscall",
	"syscall.ETH_P_X25":                                    "syscall",
	"syscall.ETIME":                                        "syscall",
	"syscall.ETIMEDOUT":                                    "syscall",
	"syscall.ETOOMANYREFS":                                 "syscall",
	"syscall.ETXTBSY":                                      "syscall",
	"syscall.EUCLEAN":                                      "syscall",
	"syscall.EUNATCH":                                      "syscall",
	"syscall.EUSERS":                                       "syscall",
	"syscall.EVFILT_AIO":                                   "syscall",
	"syscall.EVFILT_FS":                                    "syscall",
	"syscall.EVFILT_LIO":                                   "syscall",
	"syscall.EVFILT_MACHPORT":                              "syscall",
	"syscall.EVFILT_PROC":                                  "syscall",
	"syscall.EVFILT_READ":                                  "syscall",
	"syscall.EVFILT_SIGNAL":                                "syscall",
	"syscall.EVFILT_SYSCOUNT":                              "syscall",
	"syscall.EVFILT_THREADMARKER":                          "syscall",
	"syscall.EVFILT_TIMER":                                 "syscall",
	"syscall.EVFILT_USER":                                  "syscall",
	"syscall.EVFILT_VM":                                    "syscall",
	"syscall.EVFILT_VNODE":                                 "syscall",
	"syscall.EVFILT_WRITE":                                 "syscall",
	"syscall.EV_ADD":                                       "syscall",
	"syscall.EV_CLEAR":                                     "syscall",
	"syscall.EV_DELETE":                                    "syscall",
	"syscall.EV_DISABLE":                                   "syscall",
	"syscall.EV_DISPATCH":                                  "syscall",
	"syscall.EV_DROP":                                      "syscall",
	"syscall.EV_ENABLE":                                    "syscall",
	"syscall.EV_EOF":                                       "syscall",
	"syscall.EV_ERROR":                                     "syscall",
	"syscall.EV_FLAG0":                                     "syscall",
	"syscall.EV_FLAG1":                                     "syscall",
	"syscall.EV_ONESHOT":                                   "syscall",
	"syscall.EV_OOBAND":                                    "syscall",
	"syscall.EV_POLL":                                      "syscall",
	"syscall.EV_RECEIPT":                                   "syscall",
	"syscall.EV_SYSFLAGS":                                  "syscall",
	"syscall.EWINDOWS":                                     "syscall",
	"syscall.EWOULDBLOCK":                                  "syscall",
	"syscall.EXDEV":                                        "syscall",
	"syscall.EXFULL":                                       "syscall",
	"syscall.EXTA":                                         "syscall",
	"syscall.EXTB":                                         "syscall",
	"syscall.EXTPROC":                                      "syscall",
	"syscall.Environ":                                      "syscall",
	"syscall.EpollCreate":                                  "syscall",
	"syscall.EpollCreate1":                                 "syscall",
	"syscall.EpollCtl":                                     "syscall",
	"syscall.EpollEvent":                                   "syscall",
	"syscall.EpollWait":                                    "syscall",
	"syscall.Errno":                                        "syscall",
	"syscall.EscapeArg":                                    "syscall",
	"syscall.Exchangedata":                                 "syscall",
	"syscall.Exec":                                         "syscall",
	"syscall.Exit":                                         "syscall",
	"syscall.ExitProcess":                                  "syscall",
	"syscall.FD_CLOEXEC":                                   "syscall",
	"syscall.FD_SETSIZE":                                   "syscall",
	"syscall.FILE_ACTION_ADDED":                            "syscall",
	"syscall.FILE_ACTION_MODIFIED":                         "syscall",
	"syscall.FILE_ACTION_REMOVED":                          "syscall",
	"syscall.FILE_ACTION_RENAMED_NEW_NAME":                 "syscall",
	"syscall.FILE_ACTION_RENAMED_OLD_NAME":                 "syscall",
	"syscall.FILE_APPEND_DATA":                             "syscall",
	"syscall.FILE_ATTRIBUTE_ARCHIVE":                       "syscall",
	"syscall.FILE_ATTRIBUTE_DIRECTORY":                     "syscall",
	"syscall.FILE_ATTRIBUTE_HIDDEN":                        "syscall",
	"syscall.FILE_ATTRIBUTE_NORMAL":                        "syscall",
	"syscall.FILE_ATTRIBUTE_READONLY":                      "syscall",
	"syscall.FILE_ATTRIBUTE_REPARSE_POINT":                 "syscall",
	"syscall.FILE_ATTRIBUTE_SYSTEM":                        "syscall",
	"syscall.FILE_BEGIN":                                   "syscall",
	"syscall.FILE_CURRENT":                                 "syscall",
	"syscall.FILE_END":                                     "syscall",
	"syscall.FILE_FLAG_BACKUP_SEMANTICS":                   "syscall",
	"syscall.FILE_FLAG_OPEN_REPARSE_POINT":                 "syscall",
	"syscall.FILE_FLAG_OVERLAPPED":                         "syscall",
	"syscall.FILE_LIST_DIRECTORY":                          "syscall",
	"syscall.FILE_MAP_COPY":                                "syscall",
	"syscall.FILE_MAP_EXECUTE":                             "syscall",
	"syscall.FILE_MAP_READ":                                "syscall",
	"syscall.FILE_MAP_WRITE":                               "syscall",
	"syscall.FILE_NOTIFY_CHANGE_ATTRIBUTES":                "syscall",
	"syscall.FILE_NOTIFY_CHANGE_CREATION":                  "syscall",
	"syscall.FILE_NOTIFY_CHANGE_DIR_NAME":                  "syscall",
	"syscall.FILE_NOTIFY_CHANGE_FILE_NAME":                 "syscall",
	"syscall.FILE_NOTIFY_CHANGE_LAST_ACCESS":               "syscall",
	"syscall.FILE_NOTIFY_CHANGE_LAST_WRITE":                "syscall",
	"syscall.FILE_NOTIFY_CHANGE_SIZE":                      "syscall",
	"syscall.FILE_SHARE_DELETE":                            "syscall",
	"syscall.FILE_SHARE_READ":                              "syscall",
	"syscall.FILE_SHARE_WRITE":                             "syscall",
	"syscall.FILE_SKIP_COMPLETION_PORT_ON_SUCCESS":         "syscall",
	"syscall.FILE_SKIP_SET_EVENT_ON_HANDLE":                "syscall",
	"syscall.FILE_TYPE_CHAR":                               "syscall",
	"syscall.FILE_TYPE_DISK":                               "syscall",
	"syscall.FILE_TYPE_PIPE":                               "syscall",
	"syscall.FILE_TYPE_REMOTE":                             "syscall",
	"syscall.FILE_TYPE_UNKNOWN":                            "syscall",
	"syscall.FILE_WRITE_ATTRIBUTES":                        "syscall",
	"syscall.FLUSHO":                                       "syscall",
	"syscall.FORMAT_MESSAGE_ALLOCATE_BUFFER":               "syscall",
	"syscall.FORMAT_MESSAGE_ARGUMENT_ARRAY":                "syscall",
	"syscall.FORMAT_MESSAGE_FROM_HMODULE":                  "syscall",
	"syscall.FORMAT_MESSAGE_FROM_STRING":                   "syscall",
	"syscall.FORMAT_MESSAGE_FROM_SYSTEM":                   "syscall",
	"syscall.FORMAT_MESSAGE_IGNORE_INSERTS":                "syscall",
	"syscall.FORMAT_MESSAGE_MAX_WIDTH_MASK":                "syscall",
	"syscall.FSCTL_GET_REPARSE_POINT":                      "syscall",
	"syscall.F_ADDFILESIGS":                                "syscall",
	"syscall.F_ADDSIGS":                                    "syscall",
	"syscall.F_ALLOCATEALL":                                "syscall",
	"syscall.F_ALLOCATECONTIG":                             "syscall",
	"syscall.F_CANCEL":                                     "syscall",
	"syscall.F_CHKCLEAN":                                   "syscall",
	"syscall.F_CLOSEM":                                     "syscall",
	"syscall.F_DUP2FD":                                     "syscall",
	"syscall.F_DUP2FD_CLOEXEC":                             "syscall",
	"syscall.F_DUPFD":                                      "syscall",
	"syscall.F_DUPFD_CLOEXEC":                              "syscall",
	"syscall.F_EXLCK":                                      "syscall",
	"syscall.F_FLUSH_DATA":                                 "syscall",
	"syscall.F_FREEZE_FS":                                  "syscall",
	"syscall.F_FSCTL":                                      "syscall",
	"syscall.F_FSDIRMASK":                                  "syscall",
	"syscall.F_FSIN":                                       "syscall",
	"syscall.F_FSINOUT":                                    "syscall",
	"syscall.F_FSOUT":                                      "syscall",
	"syscall.F_FSPRIV":                                     "syscall",
	"syscall.F_FSVOID":                                     "syscall",
	"syscall.F_FULLFSYNC":                                  "syscall",
	"syscall.F_GETFD":                                      "syscall",
	"syscall.F_GETFL":                                      "syscall",
	"syscall.F_GETLEASE":                                   "syscall",
	"syscall.F_GETLK":                                      "syscall",
	"syscall.F_GETLK64":                                    "syscall",
	"syscall.F_GETLKPID":                                   "syscall",
	"syscall.F_GETNOSIGPIPE":                               "syscall",
	"syscall.F_GETOWN":                                     "syscall",
	"syscall.F_GETOWN_EX":                                  "syscall",
	"syscall.F_GETPATH":                                    "syscall",
	"syscall.F_GETPATH_MTMINFO":                            "syscall",
	"syscall.F_GETPIPE_SZ":                                 "syscall",
	"syscall.F_GETPROTECTIONCLASS":                         "syscall",
	"syscall.F_GETSIG":                                     "syscall",
	"syscall.F_GLOBAL_NOCACHE":                             "syscall",
	"syscall.F_LOCK":                                       "syscall",
	"syscall.F_LOG2PHYS":                                   "syscall",
	"syscall.F_LOG2PHYS_EXT":                               "syscall",
	"syscall.F_MARKDEPENDENCY":                             "syscall",
	"syscall.F_MAXFD":                                      "syscall",
	"syscall.F_NOCACHE":                                    "syscall",
	"syscall.F_NODIRECT":                                   "syscall",
	"syscall.F_NOTIFY":                                     "syscall",
	"syscall.F_OGETLK":                                     "syscall",
	"syscall.F_OK":                                         "syscall",
	"syscall.F_OSETLK":                                     "syscall",
	"syscall.F_OSETLKW":                                    "syscall",
	"syscall.F_PARAM_MASK":                                 "syscall",
	"syscall.F_PARAM_MAX":                                  "syscall",
	"syscall.F_PATHPKG_CHECK":                              "syscall",
	"syscall.F_PEOFPOSMODE":                                "syscall",
	"syscall.F_PREALLOCATE":                                "syscall",
	"syscall.F_RDADVISE":                                   "syscall",
	"syscall.F_RDAHEAD":                                    "syscall",
	"syscall.F_RDLCK":                                      "syscall",
	"syscall.F_READAHEAD":                                  "syscall",
	"syscall.F_READBOOTSTRAP":                              "syscall",
	"syscall.F_SETBACKINGSTORE":                            "syscall",
	"syscall.F_SETFD":                                      "syscall",
	"syscall.F_SETFL":                                      "syscall",
	"syscall.F_SETLEASE":                                   "syscall",
	"syscall.F_SETLK":                                      "syscall",
	"syscall.F_SETLK64":                                    "syscall",
	"syscall.F_SETLKW":                                     "syscall",
	"syscall.F_SETLKW64":                                   "syscall",
	"syscall.F_SETLK_REMOTE":                               "syscall",
	"syscall.F_SETNOSIGPIPE":                               "syscall",
	"syscall.F_SETOWN":                                     "syscall",
	"syscall.F_SETOWN_EX":                                  "syscall",
	"syscall.F_SETPIPE_SZ":                                 "syscall",
	"syscall.F_SETPROTECTIONCLASS":                         "syscall",
	"syscall.F_SETSIG":                                     "syscall",
	"syscall.F_SETSIZE":                                    "syscall",
	"syscall.F_SHLCK":                                      "syscall",
	"syscall.F_TEST":                                       "syscall",
	"syscall.F_THAW_FS":                                    "syscall",
	"syscall.F_TLOCK":                                      "syscall",
	"syscall.F_ULOCK":                                      "syscall",
	"syscall.F_UNLCK":                                      "syscall",
	"syscall.F_UNLCKSYS":                                   "syscall",
	"syscall.F_VOLPOSMODE":                                 "syscall",
	"syscall.F_WRITEBOOTSTRAP":                             "syscall",
	"syscall.F_WRLCK":                                      "syscall",
	"syscall.Faccessat":                                    "syscall",
	"syscall.Fallocate":                                    "syscall",
	"syscall.Fbootstraptransfer_t":                         "syscall",
	"syscall.Fchdir":                                       "syscall",
	"syscall.Fchflags":                                     "syscall",
	"syscall.Fchmod":                                       "syscall",
	"syscall.Fchmodat":                                     "syscall",
	"syscall.Fchown":                                       "syscall",
	"syscall.Fchownat":                                     "syscall",
	"syscall.FcntlFlock":                                   "syscall",
	"syscall.FdSet":                                        "syscall",
	"syscall.Fdatasync":                                    "syscall",
	"syscall.FileNotifyInformation":                        "syscall",
	"syscall.Filetime":                                     "syscall",
	"syscall.FindClose":                                    "syscall",
	"syscall.FindFirstFile":                                "syscall",
	"syscall.FindNextFile":                                 "syscall",
	"syscall.Flock":                                        "syscall",
	"syscall.Flock_t":                                      "syscall",
	"syscall.FlushBpf":                                     "syscall",
	"syscall.FlushFileBuffers":                             "syscall",
	"syscall.FlushViewOfFile":                              "syscall",
	"syscall.ForkExec":                                     "syscall",
	"syscall.ForkLock":                                     "syscall",
	"syscall.FormatMessage":                                "syscall",
	"syscall.Fpathconf":                                    "syscall",
	"syscall.FreeAddrInfoW":                                "syscall",
	"syscall.FreeEnvironmentStrings":                       "syscall",
	"syscall.FreeLibrary":                                  "syscall",
	"syscall.Fsid":                                         "syscall",
	"syscall.Fstat":                                        "syscall",
	"syscall.Fstatfs":                                      "syscall",
	"syscall.Fstore_t":                                     "syscall",
	"syscall.Fsync":                                        "syscall",
	"syscall.Ftruncate":                                    "syscall",
	"syscall.FullPath":                                     "syscall",
	"syscall.Futimes":                                      "syscall",
	"syscall.Futimesat":                                    "syscall",
	"syscall.GENERIC_ALL":                                  "syscall",
	"syscall.GENERIC_EXECUTE":                              "syscall",
	"syscall.GENERIC_READ":                                 "syscall",
	"syscall.GENERIC_WRITE":                                "syscall",
	"syscall.GUID":                                         "syscall",
	"syscall.GetAcceptExSockaddrs":                         "syscall",
	"syscall.GetAdaptersInfo":                              "syscall",
	"syscall.GetAddrInfoW":                                 "syscall",
	"syscall.GetCommandLine":                               "syscall",
	"syscall.GetComputerName":                              "syscall",
	"syscall.GetConsoleMode":                               "syscall",
	"syscall.GetCurrentDirectory":                          "syscall",
	"syscall.GetCurrentProcess":                            "syscall",
	"syscall.GetEnvironmentStrings":                        "syscall",
	"syscall.GetEnvironmentVariable":                       "syscall",
	"syscall.GetExitCodeProcess":                           "syscall",
	"syscall.GetFileAttributes":                            "syscall",
	"syscall.GetFileAttributesEx":                          "syscall",
	"syscall.GetFileExInfoStandard":                        "syscall",
	"syscall.GetFileExMaxInfoLevel":                        "syscall",
	"syscall.GetFileInformationByHandle":                   "syscall",
	"syscall.GetFileType":                                  "syscall",
	"syscall.GetFullPathName":                              "syscall",
	"syscall.GetHostByName":                                "syscall",
	"syscall.GetIfEntry":                                   "syscall",
	"syscall.GetLastError":                                 "syscall",
	"syscall.GetLengthSid":                                 "syscall",
	"syscall.GetLongPathName":                              "syscall",
	"syscall.GetProcAddress":                               "syscall",
	"syscall.GetProcessTimes":                              "syscall",
	"syscall.GetProtoByName":                               "syscall",
	"syscall.GetQueuedCompletionStatus":                    "syscall",
	"syscall.GetServByName":                                "syscall",
	"syscall.GetShortPathName":                             "syscall",
	"syscall.GetStartupInfo":                               "syscall",
	"syscall.GetStdHandle":                                 "syscall",
	"syscall.GetSystemTimeAsFileTime":                      "syscall",
	"syscall.GetTempPath":                                  "syscall",
	"syscall.GetTimeZoneInformation":                       "syscall",
	"syscall.GetTokenInformation":                          "syscall",
	"syscall.GetUserNameEx":                                "syscall",
	"syscall.GetUserProfileDirectory":                      "syscall",
	"syscall.GetVersion":                                   "syscall",
	"syscall.Getcwd":                                       "syscall",
	"syscall.Getdents":                                     "syscall",
	"syscall.Getdirentries":                                "syscall",
	"syscall.Getdtablesize":                                "syscall",
	"syscall.Getegid":                                      "syscall",
	"syscall.Getenv":                                       "syscall",
	"syscall.Geteuid":                                      "syscall",
	"syscall.Getfsstat":                                    "syscall",
	"syscall.Getgid":                                       "syscall",
	"syscall.Getgroups":                                    "syscall",
	"syscall.Getpagesize":                                  "syscall",
	"syscall.Getpeername":                                  "syscall",
	"syscall.Getpgid":                                      "syscall",
	"syscall.Getpgrp":                                      "syscall",
	"syscall.Getpid":                                       "syscall",
	"syscall.Getppid":                                      "syscall",
	"syscall.Getpriority":                                  "syscall",
	"syscall.Getrlimit":                                    "syscall",
	"syscall.Getrusage":                                    "syscall",
	"syscall.Getsid":                                       "syscall",
	"syscall.Getsockname":                                  "syscall",
	"syscall.Getsockopt":                                   "syscall",
	"syscall.GetsockoptByte":                               "syscall",
	"syscall.GetsockoptICMPv6Filter":                       "syscall",
	"syscall.GetsockoptIPMreq":                             "syscall",
	"syscall.GetsockoptIPMreqn":                            "syscall",
	"syscall.GetsockoptIPv6MTUInfo":                        "syscall",
	"syscall.GetsockoptIPv6Mreq":                           "syscall",
	"syscall.GetsockoptInet4Addr":                          "syscall",
	"syscall.GetsockoptInt":                                "syscall",
	"syscall.GetsockoptUcred":                              "syscall",
	"syscall.Gettid":                                       "syscall",
	"syscall.Gettimeofday":                                 "syscall",
	"syscall.Getuid":                                       "syscall",
	"syscall.Getwd":                                        "syscall",
	"syscall.Getxattr":                                     "syscall",
	"syscall.HANDLE_FLAG_INHERIT":                          "syscall",
	"syscall.HKEY_CLASSES_ROOT":                            "syscall",
	"syscall.HKEY_CURRENT_CONFIG":                          "syscall",
	"syscall.HKEY_CURRENT_USER":                            "syscall",
	"syscall.HKEY_DYN_DATA":                                "syscall",
	"syscall.HKEY_LOCAL_MACHINE":                           "syscall",
	"syscall.HKEY_PERFORMANCE_DATA":                        "syscall",
	"syscall.HKEY_USERS":                                   "syscall",
	"syscall.HUPCL":                                        "syscall",
	"syscall.Handle":                                       "syscall",
	"syscall.Hostent":                                      "syscall",
	"syscall.ICANON":                                       "syscall",
	"syscall.ICMP6_FILTER":                                 "syscall",
	"syscall.ICMPV6_FILTER":                                "syscall",
	"syscall.ICMPv6Filter":                                 "syscall",
	"syscall.ICRNL":                                        "syscall",
	"syscall.IEXTEN":                                       "syscall",
	"syscall.IFAN_ARRIVAL":                                 "syscall",
	"syscall.IFAN_DEPARTURE":                               "syscall",
	"syscall.IFA_ADDRESS":                                  "syscall",
	"syscall.IFA_ANYCAST":                                  "syscall",
	"syscall.IFA_BROADCAST":                                "syscall",
	"syscall.IFA_CACHEINFO":                                "syscall",
	"syscall.IFA_F_DADFAILED":                              "syscall",
	"syscall.IFA_F_DEPRECATED":                             "syscall",
	"syscall.IFA_F_HOMEADDRESS":                            "syscall",
	"syscall.IFA_F_NODAD":                                  "syscall",
	"syscall.IFA_F_OPTIMISTIC":                             "syscall",
	"syscall.IFA_F_PERMANENT":                              "syscall",
	"syscall.IFA_F_SECONDARY":                              "syscall",
	"syscall.IFA_F_TEMPORARY":                              "syscall",
	"syscall.IFA_F_TENTATIVE":                              "syscall",
	"syscall.IFA_LABEL":                                    "syscall",
	"syscall.IFA_LOCAL":                                    "syscall",
	"syscall.IFA_MAX":                                      "syscall",
	"syscall.IFA_MULTICAST":                                "syscall",
	"syscall.IFA_ROUTE":                                    "syscall",
	"syscall.IFA_UNSPEC":                                   "syscall",
	"syscall.IFF_ALLMULTI":                                 "syscall",
	"syscall.IFF_ALTPHYS":                                  "syscall",
	"syscall.IFF_AUTOMEDIA":                                "syscall",
	"syscall.IFF_BROADCAST":                                "syscall",
	"syscall.IFF_CANTCHANGE":                               "syscall",
	"syscall.IFF_CANTCONFIG":                               "syscall",
	"syscall.IFF_DEBUG":                                    "syscall",
	"syscall.IFF_DRV_OACTIVE":                              "syscall",
	"syscall.IFF_DRV_RUNNING":                              "syscall",
	"syscall.IFF_DYING":                                    "syscall",
	"syscall.IFF_DYNAMIC":                                  "syscall",
	"syscall.IFF_LINK0":                                    "syscall",
	"syscall.IFF_LINK1":                                    "syscall",
	"syscall.IFF_LINK2":                                    "syscall",
	"syscall.IFF_LOOPBACK":                                 "syscall",
	"syscall.IFF_MASTER":                                   "syscall",
	"syscall.IFF_MONITOR":                                  "syscall",
	"syscall.IFF_MULTICAST":                                "syscall",
	"syscall.IFF_NOARP":                                    "syscall",
	"syscall.IFF_NOTRAILERS":                               "syscall",
	"syscall.IFF_NO_PI":                                    "syscall",
	"syscall.IFF_OACTIVE":                                  "syscall",
	"syscall.IFF_ONE_QUEUE":                                "syscall",
	"syscall.IFF_POINTOPOINT":                              "syscall",
	"syscall.IFF_POINTTOPOINT":                             "syscall",
	"syscall.IFF_PORTSEL":                                  "syscall",
	"syscall.IFF_PPROMISC":                                 "syscall",
	"syscall.IFF_PROMISC":                                  "syscall",
	"syscall.IFF_RENAMING":                                 "syscall",
	"syscall.IFF_RUNNING":                                  "syscall",
	"syscall.IFF_SIMPLEX":                                  "syscall",
	"syscall.IFF_SLAVE":                                    "syscall",
	"syscall.IFF_SMART":                                    "syscall",
	"syscall.IFF_STATICARP":                                "syscall",
	"syscall.IFF_TAP":                                      "syscall",
	"syscall.IFF_TUN":                                      "syscall",
	"syscall.IFF_TUN_EXCL":                                 "syscall",
	"syscall.IFF_UP":                                       "syscall",
	"syscall.IFF_VNET_HDR":                                 "syscall",
	"syscall.IFLA_ADDRESS":                                 "syscall",
	"syscall.IFLA_BROADCAST":                               "syscall",
	"syscall.IFLA_COST":                                    "syscall",
	"syscall.IFLA_IFALIAS":                                 "syscall",
	"syscall.IFLA_IFNAME":                                  "syscall",
	"syscall.IFLA_LINK":                                    "syscall",
	"syscall.IFLA_LINKINFO":                                "syscall",
	"syscall.IFLA_LINKMODE":                                "syscall",
	"syscall.IFLA_MAP":                                     "syscall",
	"syscall.IFLA_MASTER":                                  "syscall",
	"syscall.IFLA_MAX":                                     "syscall",
	"syscall.IFLA_MTU":                                     "syscall",
	"syscall.IFLA_NET_NS_PID":                              "syscall",
	"syscall.IFLA_OPERSTATE":                               "syscall",
	"syscall.IFLA_PRIORITY":                                "syscall",
	"syscall.IFLA_PROTINFO":                                "syscall",
	"syscall.IFLA_QDISC":                                   "syscall",
	"syscall.IFLA_STATS":                                   "syscall",
	"syscall.IFLA_TXQLEN":                                  "syscall",
	"syscall.IFLA_UNSPEC":                                  "syscall",
	"syscall.IFLA_WEIGHT":                                  "syscall",
	"syscall.IFLA_WIRELESS":                                "syscall",
	"syscall.IFNAMSIZ":                                     "syscall",
	"syscall.IFT_1822":                                     "syscall",
	"syscall.IFT_A12MPPSWITCH":                             "syscall",
	"syscall.IFT_AAL2":                                     "syscall",
	"syscall.IFT_AAL5":                                     "syscall",
	"syscall.IFT_ADSL":                                     "syscall",
	"syscall.IFT_AFLANE8023":                               "syscall",
	"syscall.IFT_AFLANE8025":                               "syscall",
	"syscall.IFT_ARAP":                                     "syscall",
	"syscall.IFT_ARCNET":                                   "syscall",
	"syscall.IFT_ARCNETPLUS":                               "syscall",
	"syscall.IFT_ASYNC":                                    "syscall",
	"syscall.IFT_ATM":                                      "syscall",
	"syscall.IFT_ATMDXI":                                   "syscall",
	"syscall.IFT_ATMFUNI":                                  "syscall",
	"syscall.IFT_ATMIMA":                                   "syscall",
	"syscall.IFT_ATMLOGICAL":                               "syscall",
	"syscall.IFT_ATMRADIO":                                 "syscall",
	"syscall.IFT_ATMSUBINTERFACE":                          "syscall",
	"syscall.IFT_ATMVCIENDPT":                              "syscall",
	"syscall.IFT_ATMVIRTUAL":                               "syscall",
	"syscall.IFT_BGPPOLICYACCOUNTING":                      "syscall",
	"syscall.IFT_BLUETOOTH":                                "syscall",
	"syscall.IFT_BRIDGE":                                   "syscall",
	"syscall.IFT_BSC":                                      "syscall",
	"syscall.IFT_CARP":                                     "syscall",
	"syscall.IFT_CCTEMUL":                                  "syscall",
	"syscall.IFT_CELLULAR":                                 "syscall",
	"syscall.IFT_CEPT":                                     "syscall",
	"syscall.IFT_CES":                                      "syscall",
	"syscall.IFT_CHANNEL":                                  "syscall",
	"syscall.IFT_CNR":                                      "syscall",
	"syscall.IFT_COFFEE":                                   "syscall",
	"syscall.IFT_COMPOSITELINK":                            "syscall",
	"syscall.IFT_DCN":                                      "syscall",
	"syscall.IFT_DIGITALPOWERLINE":                         "syscall",
	"syscall.IFT_DIGITALWRAPPEROVERHEADCHANNEL":            "syscall",
	"syscall.IFT_DLSW":                                     "syscall",
	"syscall.IFT_DOCSCABLEDOWNSTREAM":                      "syscall",
	"syscall.IFT_DOCSCABLEMACLAYER":                        "syscall",
	"syscall.IFT_DOCSCABLEUPSTREAM":                        "syscall",
	"syscall.IFT_DOCSCABLEUPSTREAMCHANNEL":                 "syscall",
	"syscall.IFT_DS0":                                      "syscall",
	"syscall.IFT_DS0BUNDLE":                                "syscall",
	"syscall.IFT_DS1FDL":                                   "syscall",
	"syscall.IFT_DS3":                                      "syscall",
	"syscall.IFT_DTM":                                      "syscall",
	"syscall.IFT_DUMMY":                                    "syscall",
	"syscall.IFT_DVBASILN":                                 "syscall",
	"syscall.IFT_DVBASIOUT":                                "syscall",
	"syscall.IFT_DVBRCCDOWNSTREAM":                         "syscall",
	"syscall.IFT_DVBRCCMACLAYER":                           "syscall",
	"syscall.IFT_DVBRCCUPSTREAM":                           "syscall",
	"syscall.IFT_ECONET":                                   "syscall",
	"syscall.IFT_ENC":                                      "syscall",
	"syscall.IFT_EON":                                      "syscall",
	"syscall.IFT_EPLRS":                                    "syscall",
	"syscall.IFT_ESCON":                                    "syscall",
	"syscall.IFT_ETHER":                                    "syscall",
	"syscall.IFT_FAITH":                                    "syscall",
	"syscall.IFT_FAST":                                     "syscall",
	"syscall.IFT_FASTETHER":                                "syscall",
	"syscall.IFT_FASTETHERFX":                              "syscall",
	"syscall.IFT_FDDI":                                     "syscall",
	"syscall.IFT_FIBRECHANNEL":                             "syscall",
	"syscall.IFT_FRAMERELAYINTERCONNECT":                   "syscall",
	"syscall.IFT_FRAMERELAYMPI":                            "syscall",
	"syscall.IFT_FRDLCIENDPT":                              "syscall",
	"syscall.IFT_FRELAY":                                   "syscall",
	"syscall.IFT_FRELAYDCE":                                "syscall",
	"syscall.IFT_FRF16MFRBUNDLE":                           "syscall",
	"syscall.IFT_FRFORWARD":                                "syscall",
	"syscall.IFT_G703AT2MB":                                "syscall",
	"syscall.IFT_G703AT64K":                                "syscall",
	"syscall.IFT_GIF":                                      "syscall",
	"syscall.IFT_GIGABITETHERNET":                          "syscall",
	"syscall.IFT_GR303IDT":                                 "syscall",
	"syscall.IFT_GR303RDT":                                 "syscall",
	"syscall.IFT_H323GATEKEEPER":                           "syscall",
	"syscall.IFT_H323PROXY":                                "syscall",
	"syscall.IFT_HDH1822":                                  "syscall",
	"syscall.IFT_HDLC":                                     "syscall",
	"syscall.IFT_HDSL2":                                    "syscall",
	"syscall.IFT_HIPERLAN2":                                "syscall",
	"syscall.IFT_HIPPI":                                    "syscall",
	"syscall.IFT_HIPPIINTERFACE":                           "syscall",
	"syscall.IFT_HOSTPAD":                                  "syscall",
	"syscall.IFT_HSSI":                                     "syscall",
	"syscall.IFT_HY":                                       "syscall",
	"syscall.IFT_IBM370PARCHAN":                            "syscall",
	"syscall.IFT_IDSL":                                     "syscall",
	"syscall.IFT_IEEE1394":                                 "syscall",
	"syscall.IFT_IEEE80211":                                "syscall",
	"syscall.IFT_IEEE80212":                                "syscall",
	"syscall.IFT_IEEE8023ADLAG":                            "syscall",
	"syscall.IFT_IFGSN":                                    "syscall",
	"syscall.IFT_IMT":                                      "syscall",
	"syscall.IFT_INFINIBAND":                               "syscall",
	"syscall.IFT_INTERLEAVE":                               "syscall",
	"syscall.IFT_IP":                                       "syscall",
	"syscall.IFT_IPFORWARD":                                "syscall",
	"syscall.IFT_IPOVERATM":                                "syscall",
	"syscall.IFT_IPOVERCDLC":                               "syscall",
	"syscall.IFT_IPOVERCLAW":                               "syscall",
	"syscall.IFT_IPSWITCH":                                 "syscall",
	"syscall.IFT_IPXIP":                                    "syscall",
	"syscall.IFT_ISDN":                                     "syscall",
	"syscall.IFT_ISDNBASIC":                                "syscall",
	"syscall.IFT_ISDNPRIMARY":                              "syscall",
	"syscall.IFT_ISDNS":                                    "syscall",
	"syscall.IFT_ISDNU":                                    "syscall",
	"syscall.IFT_ISO88022LLC":                              "syscall",
	"syscall.IFT_ISO88023":                                 "syscall",
	"syscall.IFT_ISO88024":                                 "syscall",
	"syscall.IFT_ISO88025":                                 "syscall",
	"syscall.IFT_ISO88025CRFPINT":                          "syscall",
	"syscall.IFT_ISO88025DTR":                              "syscall",
	"syscall.IFT_ISO88025FIBER":                            "syscall",
	"syscall.IFT_ISO88026":                                 "syscall",
	"syscall.IFT_ISUP":                                     "syscall",
	"syscall.IFT_L2VLAN":                                   "syscall",
	"syscall.IFT_L3IPVLAN":                                 "syscall",
	"syscall.IFT_L3IPXVLAN":                                "syscall",
	"syscall.IFT_LAPB":                                     "syscall",
	"syscall.IFT_LAPD":                                     "syscall",
	"syscall.IFT_LAPF":                                     "syscall",
	"syscall.IFT_LINEGROUP":                                "syscall",
	"syscall.IFT_LOCALTALK":                                "syscall",
	"syscall.IFT_LOOP":                                     "syscall",
	"syscall.IFT_MEDIAMAILOVERIP":                          "syscall",
	"syscall.IFT_MFSIGLINK":                                "syscall",
	"syscall.IFT_MIOX25":                                   "syscall",
	"syscall.IFT_MODEM":                                    "syscall",
	"syscall.IFT_MPC":                                      "syscall",
	"syscall.IFT_MPLS":                                     "syscall",
	"syscall.IFT_MPLSTUNNEL":                               "syscall",
	"syscall.IFT_MSDSL":                                    "syscall",
	"syscall.IFT_MVL":                                      "syscall",
	"syscall.IFT_MYRINET":                                  "syscall",
	"syscall.IFT_NFAS":                                     "syscall",
	"syscall.IFT_NSIP":                                     "syscall",
	"syscall.IFT_OPTICALCHANNEL":                           "syscall",
	"syscall.IFT_OPTICALTRANSPORT":                         "syscall",
	"syscall.IFT_OTHER":                                    "syscall",
	"syscall.IFT_P10":                                      "syscall",
	"syscall.IFT_P80":                                      "syscall",
	"syscall.IFT_PARA":                                     "syscall",
	"syscall.IFT_PDP":                                      "syscall",
	"syscall.IFT_PFLOG":                                    "syscall",
	"syscall.IFT_PFLOW":                                    "syscall",
	"syscall.IFT_PFSYNC":                                   "syscall",
	"syscall.IFT_PLC":                                      "syscall",
	"syscall.IFT_PON155":                                   "syscall",
	"syscall.IFT_PON622":                                   "syscall",
	"syscall.IFT_POS":                                      "syscall",
	"syscall.IFT_PPP":                                      "syscall",
	"syscall.IFT_PPPMULTILINKBUNDLE":                       "syscall",
	"syscall.IFT_PROPATM":                                  "syscall",
	"syscall.IFT_PROPBWAP2MP":                              "syscall",
	"syscall.IFT_PROPCNLS":                                 "syscall",
	"syscall.IFT_PROPDOCSWIRELESSDOWNSTREAM":               "syscall",
	"syscall.IFT_PROPDOCSWIRELESSMACLAYER":                 "syscall",
	"syscall.IFT_PROPDOCSWIRELESSUPSTREAM":                 "syscall",
	"syscall.IFT_PROPMUX":                                  "syscall",
	"syscall.IFT_PROPVIRTUAL":                              "syscall",
	"syscall.IFT_PROPWIRELESSP2P":                          "syscall",
	"syscall.IFT_PTPSERIAL":                                "syscall",
	"syscall.IFT_PVC":                                      "syscall",
	"syscall.IFT_Q2931":                                    "syscall",
	"syscall.IFT_QLLC":                                     "syscall",
	"syscall.IFT_RADIOMAC":                                 "syscall",
	"syscall.IFT_RADSL":                                    "syscall",
	"syscall.IFT_REACHDSL":                                 "syscall",
	"syscall.IFT_RFC1483":                                  "syscall",
	"syscall.IFT_RS232":                                    "syscall",
	"syscall.IFT_RSRB":                                     "syscall",
	"syscall.IFT_SDLC":                                     "syscall",
	"syscall.IFT_SDSL":                                     "syscall",
	"syscall.IFT_SHDSL":                                    "syscall",
	"syscall.IFT_SIP":                                      "syscall",
	"syscall.IFT_SIPSIG":                                   "syscall",
	"syscall.IFT_SIPTG":                                    "syscall",
	"syscall.IFT_SLIP":                                     "syscall",
	"syscall.IFT_SMDSDXI":                                  "syscall",
	"syscall.IFT_SMDSICIP":                                 "syscall",
	"syscall.IFT_SONET":                                    "syscall",
	"syscall.IFT_SONETOVERHEADCHANNEL":                     "syscall",
	"syscall.IFT_SONETPATH":                                "syscall",
	"syscall.IFT_SONETVT":                                  "syscall",
	"syscall.IFT_SRP":                                      "syscall",
	"syscall.IFT_SS7SIGLINK":                               "syscall",
	"syscall.IFT_STACKTOSTACK":                             "syscall",
	"syscall.IFT_STARLAN":                                  "syscall",
	"syscall.IFT_STF":                                      "syscall",
	"syscall.IFT_T1":                                       "syscall",
	"syscall.IFT_TDLC":                                     "syscall",
	"syscall.IFT_TELINK":                                   "syscall",
	"syscall.IFT_TERMPAD":                                  "syscall",
	"syscall.IFT_TR008":                                    "syscall",
	"syscall.IFT_TRANSPHDLC":                               "syscall",
	"syscall.IFT_TUNNEL":                                   "syscall",
	"syscall.IFT_ULTRA":                                    "syscall",
	"syscall.IFT_USB":                                      "syscall",
	"syscall.IFT_V11":                                      "syscall",
	"syscall.IFT_V35":                                      "syscall",
	"syscall.IFT_V36":                                      "syscall",
	"syscall.IFT_V37":                                      "syscall",
	"syscall.IFT_VDSL":                                     "syscall",
	"syscall.IFT_VIRTUALIPADDRESS":                         "syscall",
	"syscall.IFT_VIRTUALTG":                                "syscall",
	"syscall.IFT_VOICEDID":                                 "syscall",
	"syscall.IFT_VOICEEM":                                  "syscall",
	"syscall.IFT_VOICEEMFGD":                               "syscall",
	"syscall.IFT_VOICEENCAP":                               "syscall",
	"syscall.IFT_VOICEFGDEANA":                             "syscall",
	"syscall.IFT_VOICEFXO":                                 "syscall",
	"syscall.IFT_VOICEFXS":                                 "syscall",
	"syscall.IFT_VOICEOVERATM":                             "syscall",
	"syscall.IFT_VOICEOVERCABLE":                           "syscall",
	"syscall.IFT_VOICEOVERFRAMERELAY":                      "syscall",
	"syscall.IFT_VOICEOVERIP":                              "syscall",
	"syscall.IFT_X213":                                     "syscall",
	"syscall.IFT_X25":                                      "syscall",
	"syscall.IFT_X25DDN":                                   "syscall",
	"syscall.IFT_X25HUNTGROUP":                             "syscall",
	"syscall.IFT_X25MLP":                                   "syscall",
	"syscall.IFT_X25PLE":                                   "syscall",
	"syscall.IFT_XETHER":                                   "syscall",
	"syscall.IGNBRK":                                       "syscall",
	"syscall.IGNCR":                                        "syscall",
	"syscall.IGNORE":                                       "syscall",
	"syscall.IGNPAR":                                       "syscall",
	"syscall.IMAXBEL":                                      "syscall",
	"syscall.INFINITE":                                     "syscall",
	"syscall.INLCR":                                        "syscall",
	"syscall.INPCK":                                        "syscall",
	"syscall.INVALID_FILE_ATTRIBUTES":                      "syscall",
	"syscall.IN_ACCESS":                                    "syscall",
	"syscall.IN_ALL_EVENTS":                                "syscall",
	"syscall.IN_ATTRIB":                                    "syscall",
	"syscall.IN_CLASSA_HOST":                               "syscall",
	"syscall.IN_CLASSA_MAX":                                "syscall",
	"syscall.IN_CLASSA_NET":                                "syscall",
	"syscall.IN_CLASSA_NSHIFT":                             "syscall",
	"syscall.IN_CLASSB_HOST":                               "syscall",
	"syscall.IN_CLASSB_MAX":                                "syscall",
	"syscall.IN_CLASSB_NET":                                "syscall",
	"syscall.IN_CLASSB_NSHIFT":                             "syscall",
	"syscall.IN_CLASSC_HOST":                               "syscall",
	"syscall.IN_CLASSC_NET":                                "syscall",
	"syscall.IN_CLASSC_NSHIFT":                             "syscall",
	"syscall.IN_CLASSD_HOST":                               "syscall",
	"syscall.IN_CLASSD_NET":                                "syscall",
	"syscall.IN_CLASSD_NSHIFT":                             "syscall",
	"syscall.IN_CLOEXEC":                                   "syscall",
	"syscall.IN_CLOSE":                                     "syscall",
	"syscall.IN_CLOSE_NOWRITE":                             "syscall",
	"syscall.IN_CLOSE_WRITE":                               "syscall",
	"syscall.IN_CREATE":                                    "syscall",
	"syscall.IN_DELETE":                                    "syscall",
	"syscall.IN_DELETE_SELF":                               "syscall",
	"syscall.IN_DONT_FOLLOW":                               "syscall",
	"syscall.IN_EXCL_UNLINK":                               "syscall",
	"syscall.IN_IGNORED":                                   "syscall",
	"syscall.IN_ISDIR":                                     "syscall",
	"syscall.IN_LINKLOCALNETNUM":                           "syscall",
	"syscall.IN_LOOPBACKNET":                               "syscall",
	"syscall.IN_MASK_ADD":                                  "syscall",
	"syscall.IN_MODIFY":                                    "syscall",
	"syscall.IN_MOVE":                                      "syscall",
	"syscall.IN_MOVED_FROM":                                "syscall",
	"syscall.IN_MOVED_TO":                                  "syscall",
	"syscall.IN_MOVE_SELF":                                 "syscall",
	"syscall.IN_NONBLOCK":                                  "syscall",
	"syscall.IN_ONESHOT":                                   "syscall",
	"syscall.IN_ONLYDIR":                                   "syscall",
	"syscall.IN_OPEN":                                      "syscall",
	"syscall.IN_Q_OVERFLOW":                                "syscall",
	"syscall.IN_RFC3021_HOST":                              "syscall",
	"syscall.IN_RFC3021_MASK":                              "syscall",
	"syscall.IN_RFC3021_NET":                               "syscall",
	"syscall.IN_RFC3021_NSHIFT":                            "syscall",
	"syscall.IN_UNMOUNT":                                   "syscall",
	"syscall.IOC_IN":                                       "syscall",
	"syscall.IOC_INOUT":                                    "syscall",
	"syscall.IOC_OUT":                                      "syscall",
	"syscall.IOC_VENDOR":                                   "syscall",
	"syscall.IOC_WS2":                                      "syscall",
	"syscall.IO_REPARSE_TAG_SYMLINK":                       "syscall",
	"syscall.IPMreq":                                       "syscall",
	"syscall.IPMreqn":                                      "syscall",
	"syscall.IPPROTO_3PC":                                  "syscall",
	"syscall.IPPROTO_ADFS":                                 "syscall",
	"syscall.IPPROTO_AH":                                   "syscall",
	"syscall.IPPROTO_AHIP":                                 "syscall",
	"syscall.IPPROTO_APES":                                 "syscall",
	"syscall.IPPROTO_ARGUS":                                "syscall",
	"syscall.IPPROTO_AX25":                                 "syscall",
	"syscall.IPPROTO_BHA":                                  "syscall",
	"syscall.IPPROTO_BLT":                                  "syscall",
	"syscall.IPPROTO_BRSATMON":                             "syscall",
	"syscall.IPPROTO_CARP":                                 "syscall",
	"syscall.IPPROTO_CFTP":                                 "syscall",
	"syscall.IPPROTO_CHAOS":                                "syscall",
	"syscall.IPPROTO_CMTP":                                 "syscall",
	"syscall.IPPROTO_COMP":                                 "syscall",
	"syscall.IPPROTO_CPHB":                                 "syscall",
	"syscall.IPPROTO_CPNX":                                 "syscall",
	"syscall.IPPROTO_DCCP":                                 "syscall",
	"syscall.IPPROTO_DDP":                                  "syscall",
	"syscall.IPPROTO_DGP":                                  "syscall",
	"syscall.IPPROTO_DIVERT":                               "syscall",
	"syscall.IPPROTO_DIVERT_INIT":                          "syscall",
	"syscall.IPPROTO_DIVERT_RESP":                          "syscall",
	"syscall.IPPROTO_DONE":                                 "syscall",
	"syscall.IPPROTO_DSTOPTS":                              "syscall",
	"syscall.IPPROTO_EGP":                                  "syscall",
	"syscall.IPPROTO_EMCON":                                "syscall",
	"syscall.IPPROTO_ENCAP":                                "syscall",
	"syscall.IPPROTO_EON":                                  "syscall",
	"syscall.IPPROTO_ESP":                                  "syscall",
	"syscall.IPPROTO_ETHERIP":                              "syscall",
	"syscall.IPPROTO_FRAGMENT":                             "syscall",
	"syscall.IPPROTO_GGP":                                  "syscall",
	"syscall.IPPROTO_GMTP":                                 "syscall",
	"syscall.IPPROTO_GRE":                                  "syscall",
	"syscall.IPPROTO_HELLO":                                "syscall",
	"syscall.IPPROTO_HMP":                                  "syscall",
	"syscall.IPPROTO_HOPOPTS":                              "syscall",
	"syscall.IPPROTO_ICMP":                                 "syscall",
	"syscall.IPPROTO_ICMPV6":                               "syscall",
	"syscall.IPPROTO_IDP":                                  "syscall",
	"syscall.IPPROTO_IDPR":                                 "syscall",
	"syscall.IPPROTO_IDRP":                                 "syscall",
	"syscall.IPPROTO_IGMP":                                 "syscall",
	"syscall.IPPROTO_IGP":                                  "syscall",
	"syscall.IPPROTO_IGRP":                                 "syscall",
	"syscall.IPPROTO_IL":                                   "syscall",
	"syscall.IPPROTO_INLSP":                                "syscall",
	"syscall.IPPROTO_INP":                                  "syscall",
	"syscall.IPPROTO_IP":                                   "syscall",
	"syscall.IPPROTO_IPCOMP":                               "syscall",
	"syscall.IPPROTO_IPCV":                                 "syscall",
	"syscall.IPPROTO_IPEIP":                                "syscall",
	"syscall.IPPROTO_IPIP":                                 "syscall",
	"syscall.IPPROTO_IPPC":                                 "syscall",
	"syscall.IPPROTO_IPV4":                                 "syscall",
	"syscall.IPPROTO_IPV6":                                 "syscall",
	"syscall.IPPROTO_IPV6_ICMP":                            "syscall",
	"syscall.IPPROTO_IRTP":                                 "syscall",
	"syscall.IPPROTO_KRYPTOLAN":                            "syscall",
	"syscall.IPPROTO_LARP":                                 "syscall",
	"syscall.IPPROTO_LEAF1":                                "syscall",
	"syscall.IPPROTO_LEAF2":                                "syscall",
	"syscall.IPPROTO_MAX":                                  "syscall",
	"syscall.IPPROTO_MAXID":                                "syscall",
	"syscall.IPPROTO_MEAS":                                 "syscall",
	"syscall.IPPROTO_MH":                                   "syscall",
	"syscall.IPPROTO_MHRP":                                 "syscall",
	"syscall.IPPROTO_MICP":                                 "syscall",
	"syscall.IPPROTO_MOBILE":                               "syscall",
	"syscall.IPPROTO_MPLS":                                 "syscall",
	"syscall.IPPROTO_MTP":                                  "syscall",
	"syscall.IPPROTO_MUX":                                  "syscall",
	"syscall.IPPROTO_ND":                                   "syscall",
	"syscall.IPPROTO_NHRP":                                 "syscall",
	"syscall.IPPROTO_NONE":                                 "syscall",
	"syscall.IPPROTO_NSP":                                  "syscall",
	"syscall.IPPROTO_NVPII":                                "syscall",
	"syscall.IPPROTO_OLD_DIVERT":                           "syscall",
	"syscall.IPPROTO_OSPFIGP":                              "syscall",
	"syscall.IPPROTO_PFSYNC":                               "syscall",
	"syscall.IPPROTO_PGM":                                  "syscall",
	"syscall.IPPROTO_PIGP":                                 "syscall",
	"syscall.IPPROTO_PIM":                                  "syscall",
	"syscall.IPPROTO_PRM":                                  "syscall",
	"syscall.IPPROTO_PUP":                                  "syscall",
	"syscall.IPPROTO_PVP":                                  "syscall",
	"syscall.IPPROTO_RAW":                                  "syscall",
	"syscall.IPPROTO_RCCMON":                               "syscall",
	"syscall.IPPROTO_RDP":                                  "syscall",
	"syscall.IPPROTO_ROUTING":                              "syscall",
	"syscall.IPPROTO_RSVP":                                 "syscall",
	"syscall.IPPROTO_RVD":                                  "syscall",
	"syscall.IPPROTO_SATEXPAK":                             "syscall",
	"syscall.IPPROTO_SATMON":                               "syscall",
	"syscall.IPPROTO_SCCSP":                                "syscall",
	"syscall.IPPROTO_SCTP":                                 "syscall",
	"syscall.IPPROTO_SDRP":                                 "syscall",
	"syscall.IPPROTO_SEND":                                 "syscall",
	"syscall.IPPROTO_SEP":                                  "syscall",
	"syscall.IPPROTO_SKIP":                                 "syscall",
	"syscall.IPPROTO_SPACER":                               "syscall",
	"syscall.IPPROTO_SRPC":                                 "syscall",
	"syscall.IPPROTO_ST":                                   "syscall",
	"syscall.IPPROTO_SVMTP":                                "syscall",
	"syscall.IPPROTO_SWIPE":                                "syscall",
	"syscall.IPPROTO_TCF":                                  "syscall",
	"syscall.IPPROTO_TCP":                                  "syscall",
	"syscall.IPPROTO_TLSP":                                 "syscall",
	"syscall.IPPROTO_TP":                                   "syscall",
	"syscall.IPPROTO_TPXX":                                 "syscall",
	"syscall.IPPROTO_TRUNK1":                               "syscall",
	"syscall.IPPROTO_TRUNK2":                               "syscall",
	"syscall.IPPROTO_TTP":                                  "syscall",
	"syscall.IPPROTO_UDP":                                  "syscall",
	"syscall.IPPROTO_UDPLITE":                              "syscall",
	"syscall.IPPROTO_VINES":                                "syscall",
	"syscall.IPPROTO_VISA":                                 "syscall",
	"syscall.IPPROTO_VMTP":                                 "syscall",
	"syscall.IPPROTO_VRRP":                                 "syscall",
	"syscall.IPPROTO_WBEXPAK":                              "syscall",
	"syscall.IPPROTO_WBMON":                                "syscall",
	"syscall.IPPROTO_WSN":                                  "syscall",
	"syscall.IPPROTO_XNET":                                 "syscall",
	"syscall.IPPROTO_XTP":                                  "syscall",
	"syscall.IPV6_2292DSTOPTS":                             "syscall",
	"syscall.IPV6_2292HOPLIMIT":                            "syscall",
	"syscall.IPV6_2292HOPOPTS":                             "syscall",
	"syscall.IPV6_2292NEXTHOP":                             "syscall",
	"syscall.IPV6_2292PKTINFO":                             "syscall",
	"syscall.IPV6_2292PKTOPTIONS":                          "syscall",
	"syscall.IPV6_2292RTHDR":                               "syscall",
	"syscall.IPV6_ADDRFORM":                                "syscall",
	"syscall.IPV6_ADD_MEMBERSHIP":                          "syscall",
	"syscall.IPV6_AUTHHDR":                                 "syscall",
	"syscall.IPV6_AUTH_LEVEL":                              "syscall",
	"syscall.IPV6_AUTOFLOWLABEL":                           "syscall",
	"syscall.IPV6_BINDANY":                                 "syscall",
	"syscall.IPV6_BINDV6ONLY":                              "syscall",
	"syscall.IPV6_BOUND_IF":                                "syscall",
	"syscall.IPV6_CHECKSUM":                                "syscall",
	"syscall.IPV6_DEFAULT_MULTICAST_HOPS":                  "syscall",
	"syscall.IPV6_DEFAULT_MULTICAST_LOOP":                  "syscall",
	"syscall.IPV6_DEFHLIM":                                 "syscall",
	"syscall.IPV6_DONTFRAG":                                "syscall",
	"syscall.IPV6_DROP_MEMBERSHIP":                         "syscall",
	"syscall.IPV6_DSTOPTS":                                 "syscall",
	"syscall.IPV6_ESP_NETWORK_LEVEL":                       "syscall",
	"syscall.IPV6_ESP_TRANS_LEVEL":                         "syscall",
	"syscall.IPV6_FAITH":                                   "syscall",
	"syscall.IPV6_FLOWINFO_MASK":                           "syscall",
	"syscall.IPV6_FLOWLABEL_MASK":                          "syscall",
	"syscall.IPV6_FRAGTTL":                                 "syscall",
	"syscall.IPV6_FW_ADD":                                  "syscall",
	"syscall.IPV6_FW_DEL":                                  "syscall",
	"syscall.IPV6_FW_FLUSH":                                "syscall",
	"syscall.IPV6_FW_GET":                                  "syscall",
	"syscall.IPV6_FW_ZERO":                                 "syscall",
	"syscall.IPV6_HLIMDEC":                                 "syscall",
	"syscall.IPV6_HOPLIMIT":                                "syscall",
	"syscall.IPV6_HOPOPTS":                                 "syscall",
	"syscall.IPV6_IPCOMP_LEVEL":                            "syscall",
	"syscall.IPV6_IPSEC_POLICY":                            "syscall",
	"syscall.IPV6_JOIN_ANYCAST":                            "syscall",
	"syscall.IPV6_JOIN_GROUP":                              "syscall",
	"syscall.IPV6_LEAVE_ANYCAST":                           "syscall",
	"syscall.IPV6_LEAVE_GROUP":                             "syscall",
	"syscall.IPV6_MAXHLIM":                                 "syscall",
	"syscall.IPV6_MAXOPTHDR":                               "syscall",
	"syscall.IPV6_MAXPACKET":                               "syscall",
	"syscall.IPV6_MAX_GROUP_SRC_FILTER":                    "syscall",
	"syscall.IPV6_MAX_MEMBERSHIPS":                         "syscall",
	"syscall.IPV6_MAX_SOCK_SRC_FILTER":                     "syscall",
	"syscall.IPV6_MIN_MEMBERSHIPS":                         "syscall",
	"syscall.IPV6_MMTU":                                    "syscall",
	"syscall.IPV6_MSFILTER":                                "syscall",
	"syscall.IPV6_MTU":                                     "syscall",
	"syscall.IPV6_MTU_DISCOVER":                            "syscall",
	"syscall.IPV6_MULTICAST_HOPS":                          "syscall",
	"syscall.IPV6_MULTICAST_IF":                            "syscall",
	"syscall.IPV6_MULTICAST_LOOP":                          "syscall",
	"syscall.IPV6_NEXTHOP":                                 "syscall",
	"syscall.IPV6_OPTIONS":                                 "syscall",
	"syscall.IPV6_PATHMTU":                                 "syscall",
	"syscall.IPV6_PIPEX":                                   "syscall",
	"syscall.IPV6_PKTINFO":                                 "syscall",
	"syscall.IPV6_PMTUDISC_DO":                             "syscall",
	"syscall.IPV6_PMTUDISC_DONT":                           "syscall",
	"syscall.IPV6_PMTUDISC_PROBE":                          "syscall",
	"syscall.IPV6_PMTUDISC_WANT":                           "syscall",
	"syscall.IPV6_PORTRANGE":                               "syscall",
	"syscall.IPV6_PORTRANGE_DEFAULT":                       "syscall",
	"syscall.IPV6_PORTRANGE_HIGH":                          "syscall",
	"syscall.IPV6_PORTRANGE_LOW":                           "syscall",
	"syscall.IPV6_PREFER_TEMPADDR":                         "syscall",
	"syscall.IPV6_RECVDSTOPTS":                             "syscall",
	"syscall.IPV6_RECVDSTPORT":                             "syscall",
	"syscall.IPV6_RECVERR":                                 "syscall",
	"syscall.IPV6_RECVHOPLIMIT":                            "syscall",
	"syscall.IPV6_RECVHOPOPTS":                             "syscall",
	"syscall.IPV6_RECVPATHMTU":                             "syscall",
	"syscall.IPV6_RECVPKTINFO":                             "syscall",
	"syscall.IPV6_RECVRTHDR":                               "syscall",
	"syscall.IPV6_RECVTCLASS":                              "syscall",
	"syscall.IPV6_ROUTER_ALERT":                            "syscall",
	"syscall.IPV6_RTABLE":                                  "syscall",
	"syscall.IPV6_RTHDR":                                   "syscall",
	"syscall.IPV6_RTHDRDSTOPTS":                            "syscall",
	"syscall.IPV6_RTHDR_LOOSE":                             "syscall",
	"syscall.IPV6_RTHDR_STRICT":                            "syscall",
	"syscall.IPV6_RTHDR_TYPE_0":                            "syscall",
	"syscall.IPV6_RXDSTOPTS":                               "syscall",
	"syscall.IPV6_RXHOPOPTS":                               "syscall",
	"syscall.IPV6_SOCKOPT_RESERVED1":                       "syscall",
	"syscall.IPV6_TCLASS":                                  "syscall",
	"syscall.IPV6_UNICAST_HOPS":                            "syscall",
	"syscall.IPV6_USE_MIN_MTU":                             "syscall",
	"syscall.IPV6_V6ONLY":                                  "syscall",
	"syscall.IPV6_VERSION":                                 "syscall",
	"syscall.IPV6_VERSION_MASK":                            "syscall",
	"syscall.IPV6_XFRM_POLICY":                             "syscall",
	"syscall.IP_ADD_MEMBERSHIP":                            "syscall",
	"syscall.IP_ADD_SOURCE_MEMBERSHIP":                     "syscall",
	"syscall.IP_AUTH_LEVEL":                                "syscall",
	"syscall.IP_BINDANY":                                   "syscall",
	"syscall.IP_BLOCK_SOURCE":                              "syscall",
	"syscall.IP_BOUND_IF":                                  "syscall",
	"syscall.IP_DEFAULT_MULTICAST_LOOP":                    "syscall",
	"syscall.IP_DEFAULT_MULTICAST_TTL":                     "syscall",
	"syscall.IP_DF":                                        "syscall",
	"syscall.IP_DIVERTFL":                                  "syscall",
	"syscall.IP_DONTFRAG":                                  "syscall",
	"syscall.IP_DROP_MEMBERSHIP":                           "syscall",
	"syscall.IP_DROP_SOURCE_MEMBERSHIP":                    "syscall",
	"syscall.IP_DUMMYNET3":                                 "syscall",
	"syscall.IP_DUMMYNET_CONFIGURE":                        "syscall",
	"syscall.IP_DUMMYNET_DEL":                              "syscall",
	"syscall.IP_DUMMYNET_FLUSH":                            "syscall",
	"syscall.IP_DUMMYNET_GET":                              "syscall",
	"syscall.IP_EF":                                        "syscall",
	"syscall.IP_ERRORMTU":                                  "syscall",
	"syscall.IP_ESP_NETWORK_LEVEL":                         "syscall",
	"syscall.IP_ESP_TRANS_LEVEL":                           "syscall",
	"syscall.IP_FAITH":                                     "syscall",
	"syscall.IP_FREEBIND":                                  "syscall",
	"syscall.IP_FW3":                                       "syscall",
	"syscall.IP_FW_ADD":                                    "syscall",
	"syscall.IP_FW_DEL":                                    "syscall",
	"syscall.IP_FW_FLUSH":                                  "syscall",
	"syscall.IP_FW_GET":                                    "syscall",
	"syscall.IP_FW_NAT_CFG":                                "syscall",
	"syscall.IP_FW_NAT_DEL":                                "syscall",
	"syscall.IP_FW_NAT_GET_CONFIG":                         "syscall",
	"syscall.IP_FW_NAT_GET_LOG":                            "syscall",
	"syscall.IP_FW_RESETLOG":                               "syscall",
	"syscall.IP_FW_TABLE_ADD":                              "syscall",
	"syscall.IP_FW_TABLE_DEL":                              "syscall",
	"syscall.IP_FW_TABLE_FLUSH":                            "syscall",
	"syscall.IP_FW_TABLE_GETSIZE":                          "syscall",
	"syscall.IP_FW_TABLE_LIST":                             "syscall",
	"syscall.IP_FW_ZERO":                                   "syscall",
	"syscall.IP_HDRINCL":                                   "syscall",
	"syscall.IP_IPCOMP_LEVEL":                              "syscall",
	"syscall.IP_IPSECFLOWINFO":                             "syscall",
	"syscall.IP_IPSEC_LOCAL_AUTH":                          "syscall",
	"syscall.IP_IPSEC_LOCAL_CRED":                          "syscall",
	"syscall.IP_IPSEC_LOCAL_ID":                            "syscall",
	"syscall.IP_IPSEC_POLICY":                              "syscall",
	"syscall.IP_IPSEC_REMOTE_AUTH":                         "syscall",
	"syscall.IP_IPSEC_REMOTE_CRED":                         "syscall",
	"syscall.IP_IPSEC_REMOTE_ID":                           "syscall",
	"syscall.IP_MAXPACKET":                                 "syscall",
	"syscall.IP_MAX_GROUP_SRC_FILTER":                      "syscall",
	"syscall.IP_MAX_MEMBERSHIPS":                           "syscall",
	"syscall.IP_MAX_SOCK_MUTE_FILTER":                      "syscall",
	"syscall.IP_MAX_SOCK_SRC_FILTER":                       "syscall",
	"syscall.IP_MAX_SOURCE_FILTER":                         "syscall",
	"syscall.IP_MF":                                        "syscall",
	"syscall.IP_MINFRAGSIZE":                               "syscall",
	"syscall.IP_MINTTL":                                    "syscall",
	"syscall.IP_MIN_MEMBERSHIPS":                           "syscall",
	"syscall.IP_MSFILTER":                                  "syscall",
	"syscall.IP_MSS":                                       "syscall",
	"syscall.IP_MTU":                                       "syscall",
	"syscall.IP_MTU_DISCOVER":                              "syscall",
	"syscall.IP_MULTICAST_IF":                              "syscall",
	"syscall.IP_MULTICAST_IFINDEX":                         "syscall",
	"syscall.IP_MULTICAST_LOOP":                            "syscall",
	"syscall.IP_MULTICAST_TTL":                             "syscall",
	"syscall.IP_MULTICAST_VIF":                             "syscall",
	"syscall.IP_NAT__XXX":                                  "syscall",
	"syscall.IP_OFFMASK":                                   "syscall",
	"syscall.IP_OLD_FW_ADD":                                "syscall",
	"syscall.IP_OLD_FW_DEL":                                "syscall",
	"syscall.IP_OLD_FW_FLUSH":                              "syscall",
	"syscall.IP_OLD_FW_GET":                                "syscall",
	"syscall.IP_OLD_FW_RESETLOG":                           "syscall",
	"syscall.IP_OLD_FW_ZERO":                               "syscall",
	"syscall.IP_ONESBCAST":                                 "syscall",
	"syscall.IP_OPTIONS":                                   "syscall",
	"syscall.IP_ORIGDSTADDR":                               "syscall",
	"syscall.IP_PASSSEC":                                   "syscall",
	"syscall.IP_PIPEX":                                     "syscall",
	"syscall.IP_PKTINFO":                                   "syscall",
	"syscall.IP_PKTOPTIONS":                                "syscall",
	"syscall.IP_PMTUDISC":                                  "syscall",
	"syscall.IP_PMTUDISC_DO":                               "syscall",
	"syscall.IP_PMTUDISC_DONT":                             "syscall",
	"syscall.IP_PMTUDISC_PROBE":                            "syscall",
	"syscall.IP_PMTUDISC_WANT":                             "syscall",
	"syscall.IP_PORTRANGE":                                 "syscall",
	"syscall.IP_PORTRANGE_DEFAULT":                         "syscall",
	"syscall.IP_PORTRANGE_HIGH":                            "syscall",
	"syscall.IP_PORTRANGE_LOW":                             "syscall",
	"syscall.IP_RECVDSTADDR":                               "syscall",
	"syscall.IP_RECVDSTPORT":                               "syscall",
	"syscall.IP_RECVERR":                                   "syscall",
	"syscall.IP_RECVIF":                                    "syscall",
	"syscall.IP_RECVOPTS":                                  "syscall",
	"syscall.IP_RECVORIGDSTADDR":                           "syscall",
	"syscall.IP_RECVPKTINFO":                               "syscall",
	"syscall.IP_RECVRETOPTS":                               "syscall",
	"syscall.IP_RECVRTABLE":                                "syscall",
	"syscall.IP_RECVTOS":                                   "syscall",
	"syscall.IP_RECVTTL":                                   "syscall",
	"syscall.IP_RETOPTS":                                   "syscall",
	"syscall.IP_RF":                                        "syscall",
	"syscall.IP_ROUTER_ALERT":                              "syscall",
	"syscall.IP_RSVP_OFF":                                  "syscall",
	"syscall.IP_RSVP_ON":                                   "syscall",
	"syscall.IP_RSVP_VIF_OFF":                              "syscall",
	"syscall.IP_RSVP_VIF_ON":                               "syscall",
	"syscall.IP_RTABLE":                                    "syscall",
	"syscall.IP_SENDSRCADDR":                               "syscall",
	"syscall.IP_STRIPHDR":                                  "syscall",
	"syscall.IP_TOS":                                       "syscall",
	"syscall.IP_TRAFFIC_MGT_BACKGROUND":                    "syscall",
	"syscall.IP_TRANSPARENT":                               "syscall",
	"syscall.IP_TTL":                                       "syscall",
	"syscall.IP_UNBLOCK_SOURCE":                            "syscall",
	"syscall.IP_XFRM_POLICY":                               "syscall",
	"syscall.IPv6MTUInfo":                                  "syscall",
	"syscall.IPv6Mreq":                                     "syscall",
	"syscall.ISIG":                                         "syscall",
	"syscall.ISTRIP":                                       "syscall",
	"syscall.IUCLC":                                        "syscall",
	"syscall.IUTF8":                                        "syscall",
	"syscall.IXANY":                                        "syscall",
	"syscall.IXOFF":                                        "syscall",
	"syscall.IXON":                                         "syscall",
	"syscall.IfAddrmsg":                                    "syscall",
	"syscall.IfAnnounceMsghdr":                             "syscall",
	"syscall.IfData":                                       "syscall",
	"syscall.IfInfomsg":                                    "syscall",
	"syscall.IfMsghdr":                                     "syscall",
	"syscall.IfaMsghdr":                                    "syscall",
	"syscall.IfmaMsghdr":                                   "syscall",
	"syscall.IfmaMsghdr2":                                  "syscall",
	"syscall.ImplementsGetwd":                              "syscall",
	"syscall.Inet4Pktinfo":                                 "syscall",
	"syscall.Inet6Pktinfo":                                 "syscall",
	"syscall.InotifyAddWatch":                              "syscall",
	"syscall.InotifyEvent":                                 "syscall",
	"syscall.InotifyInit":                                  "syscall",
	"syscall.InotifyInit1":                                 "syscall",
	"syscall.InotifyRmWatch":                               "syscall",
	"syscall.InterfaceAddrMessage":                         "syscall",
	"syscall.InterfaceAnnounceMessage":                     "syscall",
	"syscall.InterfaceInfo":                                "syscall",
	"syscall.InterfaceMessage":                             "syscall",
	"syscall.InterfaceMulticastAddrMessage":                "syscall",
	"syscall.InvalidHandle":                                "syscall",
	"syscall.Ioperm":                                       "syscall",
	"syscall.Iopl":                                         "syscall",
	"syscall.Iovec":                                        "syscall",
	"syscall.IpAdapterInfo":                                "syscall",
	"syscall.IpAddrString":                                 "syscall",
	"syscall.IpAddressString":                              "syscall",
	"syscall.IpMaskString":                                 "syscall",
	"syscall.Issetugid":                                    "syscall",
	"syscall.KEY_ALL_ACCESS":                               "syscall",
	"syscall.KEY_CREATE_LINK":                              "syscall",
	"syscall.KEY_CREATE_SUB_KEY":                           "syscall",
	"syscall.KEY_ENUMERATE_SUB_KEYS":                       "syscall",
	"syscall.KEY_EXECUTE":                                  "syscall",
	"syscall.KEY_NOTIFY":                                   "syscall",
	"syscall.KEY_QUERY_VALUE":                              "syscall",
	"syscall.KEY_READ":                                     "syscall",
	"syscall.KEY_SET_VALUE":                                "syscall",
	"syscall.KEY_WOW64_32KEY":                              "syscall",
	"syscall.KEY_WOW64_64KEY":                              "syscall",
	"syscall.KEY_WRITE":                                    "syscall",
	"syscall.Kevent":                                       "syscall",
	"syscall.Kevent_t":                                     "syscall",
	"syscall.Kill":                                         "syscall",
	"syscall.Klogctl":                                      "syscall",
	"syscall.Kqueue":                                       "syscall",
	"syscall.LANG_ENGLISH":                                 "syscall",
	"syscall.LAYERED_PROTOCOL":                             "syscall",
	"syscall.LCNT_OVERLOAD_FLUSH":                          "syscall",
	"syscall.LINUX_REBOOT_CMD_CAD_OFF":                     "syscall",
	"syscall.LINUX_REBOOT_CMD_CAD_ON":                      "syscall",
	"syscall.LINUX_REBOOT_CMD_HALT":                        "syscall",
	"syscall.LINUX_REBOOT_CMD_KEXEC":                       "syscall",
	"syscall.LINUX_REBOOT_CMD_POWER_OFF":                   "syscall",
	"syscall.LINUX_REBOOT_CMD_RESTART":                     "syscall",
	"syscall.LINUX_REBOOT_CMD_RESTART2":                    "syscall",
	"syscall.LINUX_REBOOT_CMD_SW_SUSPEND":                  "syscall",
	"syscall.LINUX_REBOOT_MAGIC1":                          "syscall",
	"syscall.LINUX_REBOOT_MAGIC2":                          "syscall",
	"syscall.LOCK_EX":                                      "syscall",
	"syscall.LOCK_NB":                                      "syscall",
	"syscall.LOCK_SH":                                      "syscall",
	"syscall.LOCK_UN":                                      "syscall",
	"syscall.LazyDLL":                                      "syscall",
	"syscall.LazyProc":                                     "syscall",
	"syscall.Lchown":                                       "syscall",
	"syscall.Linger":                                       "syscall",
	"syscall.Link":                                         "syscall",
	"syscall.Listen":                                       "syscall",
	"syscall.Listxattr":                                    "syscall",
	"syscall.LoadCancelIoEx":                               "syscall",
	"syscall.LoadConnectEx":                                "syscall",
	"syscall.LoadCreateSymbolicLink":                       "syscall",
	"syscall.LoadDLL":                                      "syscall",
	"syscall.LoadGetAddrInfo":                              "syscall",
	"syscall.LoadLibrary":                                  "syscall",
	"syscall.LoadSetFileCompletionNotificationModes":       "syscall",
	"syscall.LocalFree":                                    "syscall",
	"syscall.Log2phys_t":                                   "syscall",
	"syscall.LookupAccountName":                            "syscall",
	"syscall.LookupAccountSid":                             "syscall",
	"syscall.LookupSID":                                    "syscall",
	"syscall.LsfJump":                                      "syscall",
	"syscall.LsfSocket":                                    "syscall",
	"syscall.LsfStmt":                                      "syscall",
	"syscall.Lstat":                                        "syscall",
	"syscall.MADV_AUTOSYNC":                                "syscall",
	"syscall.MADV_CAN_REUSE":                               "syscall",
	"syscall.MADV_CORE":                                    "syscall",
	"syscall.MADV_DOFORK":                                  "syscall",
	"syscall.MADV_DONTFORK":                                "syscall",
	"syscall.MADV_DONTNEED":                                "syscall",
	"syscall.MADV_FREE":                                    "syscall",
	"syscall.MADV_FREE_REUSABLE":                           "syscall",
	"syscall.MADV_FREE_REUSE":                              "syscall",
	"syscall.MADV_HUGEPAGE":                                "syscall",
	"syscall.MADV_HWPOISON":                                "syscall",
	"syscall.MADV_MERGEABLE":                               "syscall",
	"syscall.MADV_NOCORE":                                  "syscall",
	"syscall.MADV_NOHUGEPAGE":                              "syscall",
	"syscall.MADV_NORMAL":                                  "syscall",
	"syscall.MADV_NOSYNC":                                  "syscall",
	"syscall.MADV_PROTECT":                                 "syscall",
	"syscall.MADV_RANDOM":                                  "syscall",
	"syscall.MADV_REMOVE":                                  "syscall",
	"syscall.MADV_SEQUENTIAL":                              "syscall",
	"syscall.MADV_SPACEAVAIL":                              "syscall",
	"syscall.MADV_UNMERGEABLE":                             "syscall",
	"syscall.MADV_WILLNEED":                                "syscall",
	"syscall.MADV_ZERO_WIRED_PAGES":                        "syscall",
	"syscall.MAP_32BIT":                                    "syscall",
	"syscall.MAP_ALIGNED_SUPER":                            "syscall",
	"syscall.MAP_ALIGNMENT_16MB":                           "syscall",
	"syscall.MAP_ALIGNMENT_1TB":                            "syscall",
	"syscall.MAP_ALIGNMENT_256TB":                          "syscall",
	"syscall.MAP_ALIGNMENT_4GB":                            "syscall",
	"syscall.MAP_ALIGNMENT_64KB":                           "syscall",
	"syscall.MAP_ALIGNMENT_64PB":                           "syscall",
	"syscall.MAP_ALIGNMENT_MASK":                           "syscall",
	"syscall.MAP_ALIGNMENT_SHIFT":                          "syscall",
	"syscall.MAP_ANON":                                     "syscall",
	"syscall.MAP_ANONYMOUS":                                "syscall",
	"syscall.MAP_COPY":                                     "syscall",
	"syscall.MAP_DENYWRITE":                                "syscall",
	"syscall.MAP_EXECUTABLE":                               "syscall",
	"syscall.MAP_FILE":                                     "syscall",
	"syscall.MAP_FIXED":                                    "syscall",
	"syscall.MAP_FLAGMASK":                                 "syscall",
	"syscall.MAP_GROWSDOWN":                                "syscall",
	"syscall.MAP_HASSEMAPHORE":                             "syscall",
	"syscall.MAP_HUGETLB":                                  "syscall",
	"syscall.MAP_INHERIT":                                  "syscall",
	"syscall.MAP_INHERIT_COPY":                             "syscall",
	"syscall.MAP_INHERIT_DEFAULT":                          "syscall",
	"syscall.MAP_INHERIT_DONATE_COPY":                      "syscall",
	"syscall.MAP_INHERIT_NONE":                             "syscall",
	"syscall.MAP_INHERIT_SHARE":                            "syscall",
	"syscall.MAP_JIT":                                      "syscall",
	"syscall.MAP_LOCKED":                                   "syscall",
	"syscall.MAP_NOCACHE":                                  "syscall",
	"syscall.MAP_NOCORE":                                   "syscall",
	"syscall.MAP_NOEXTEND":                                 "syscall",
	"syscall.MAP_NONBLOCK":                                 "syscall",
	"syscall.MAP_NORESERVE":                                "syscall",
	"syscall.MAP_NOSYNC":                                   "syscall",
	"syscall.MAP_POPULATE":                                 "syscall",
	"syscall.MAP_PREFAULT_READ":                            "syscall",
	"syscall.MAP_PRIVATE":                                  "syscall",
	"syscall.MAP_RENAME":                                   "syscall",
	"syscall.MAP_RESERVED0080":                             "syscall",
	"syscall.MAP_RESERVED0100":                             "syscall",
	"syscall.MAP_SHARED":                                   "syscall",
	"syscall.MAP_STACK":                                    "syscall",
	"syscall.MAP_TRYFIXED":                                 "syscall",
	"syscall.MAP_TYPE":                                     "syscall",
	"syscall.MAP_WIRED":                                    "syscall",
	"syscall.MAXIMUM_REPARSE_DATA_BUFFER_SIZE":             "syscall",
	"syscall.MAXLEN_IFDESCR":                               "syscall",
	"syscall.MAXLEN_PHYSADDR":                              "syscall",
	"syscall.MAX_ADAPTER_ADDRESS_LENGTH":                   "syscall",
	"syscall.MAX_ADAPTER_DESCRIPTION_LENGTH":               "syscall",
	"syscall.MAX_ADAPTER_NAME_LENGTH":                      "syscall",
	"syscall.MAX_COMPUTERNAME_LENGTH":                      "syscall",
	"syscall.MAX_INTERFACE_NAME_LEN":                       "syscall",
	"syscall.MAX_LONG_PATH":                                "syscall",
	"syscall.MAX_PATH":                                     "syscall",
	"syscall.MAX_PROTOCOL_CHAIN":                           "syscall",
	"syscall.MCL_CURRENT":                                  "syscall",
	"syscall.MCL_FUTURE":                                   "syscall",
	"syscall.MNT_DETACH":                                   "syscall",
	"syscall.MNT_EXPIRE":                                   "syscall",
	"syscall.MNT_FORCE":                                    "syscall",
	"syscall.MSG_BCAST":                                    "syscall",
	"syscall.MSG_CMSG_CLOEXEC":                             "syscall",
	"syscall.MSG_COMPAT":                                   "syscall",
	"syscall.MSG_CONFIRM":                                  "syscall",
	"syscall.MSG_CONTROLMBUF":                              "syscall",
	"syscall.MSG_CTRUNC":                                   "syscall",
	"syscall.MSG_DONTROUTE":                                "syscall",
	"syscall.MSG_DONTWAIT":                                 "syscall",
	"syscall.MSG_EOF":                                      "syscall",
	"syscall.MSG_EOR":                                      "syscall",
	"syscall.MSG_ERRQUEUE":                                 "syscall",
	"syscall.MSG_FASTOPEN":                                 "syscall",
	"syscall.MSG_FIN":                                      "syscall",
	"syscall.MSG_FLUSH":                                    "syscall",
	"syscall.MSG_HAVEMORE":                                 "syscall",
	"syscall.MSG_HOLD":                                     "syscall",
	"syscall.MSG_IOVUSRSPACE":                              "syscall",
	"syscall.MSG_LENUSRSPACE":                              "syscall",
	"syscall.MSG_MCAST":                                    "syscall",
	"syscall.MSG_MORE":                                     "syscall",
	"syscall.MSG_NAMEMBUF":                                 "syscall",
	"syscall.MSG_NBIO":                                     "syscall",
	"syscall.MSG_NEEDSA":                                   "syscall",
	"syscall.MSG_NOSIGNAL":                                 "syscall",
	"syscall.MSG_NOTIFICATION":                             "syscall",
	"syscall.MSG_OOB":                                      "syscall",
	"syscall.MSG_PEEK":                                     "syscall",
	"syscall.MSG_PROXY":                                    "syscall",
	"syscall.MSG_RCVMORE":                                  "syscall",
	"syscall.MSG_RST":                                      "syscall",
	"syscall.MSG_SEND":                                     "syscall",
	"syscall.MSG_SYN":                                      "syscall",
	"syscall.MSG_TRUNC":                                    "syscall",
	"syscall.MSG_TRYHARD":                                  "syscall",
	"syscall.MSG_USERFLAGS":                                "syscall",
	"syscall.MSG_WAITALL":                                  "syscall",
	"syscall.MSG_WAITFORONE":                               "syscall",
	"syscall.MSG_WAITSTREAM":                               "syscall",
	"syscall.MS_ACTIVE":                                    "syscall",
	"syscall.MS_ASYNC":                                     "syscall",
	"syscall.MS_BIND":                                      "syscall",
	"syscall.MS_DEACTIVATE":                                "syscall",
	"syscall.MS_DIRSYNC":                                   "syscall",
	"syscall.MS_INVALIDATE":                                "syscall",
	"syscall.MS_I_VERSION":                                 "syscall",
	"syscall.MS_KERNMOUNT":                                 "syscall",
	"syscall.MS_KILLPAGES":                                 "syscall",
	"syscall.MS_MANDLOCK":                                  "syscall",
	"syscall.MS_MGC_MSK":                                   "syscall",
	"syscall.MS_MGC_VAL":                                   "syscall",
	"syscall.MS_MOVE":                                      "syscall",
	"syscall.MS_NOATIME":                                   "syscall",
	"syscall.MS_NODEV":                                     "syscall",
	"syscall.MS_NODIRATIME":                                "syscall",
	"syscall.MS_NOEXEC":                                    "syscall",
	"syscall.MS_NOSUID":                                    "syscall",
	"syscall.MS_NOUSER":                                    "syscall",
	"syscall.MS_POSIXACL":                                  "syscall",
	"syscall.MS_PRIVATE":                                   "syscall",
	"syscall.MS_RDONLY":                                    "syscall",
	"syscall.MS_REC":                                       "syscall",
	"syscall.MS_RELATIME":                                  "syscall",
	"syscall.MS_REMOUNT":                                   "syscall",
	"syscall.MS_RMT_MASK":                                  "syscall",
	"syscall.MS_SHARED":                                    "syscall",
	"syscall.MS_SILENT":                                    "syscall",
	"syscall.MS_SLAVE":                                     "syscall",
	"syscall.MS_STRICTATIME":                               "syscall",
	"syscall.MS_SYNC":                                      "syscall",
	"syscall.MS_SYNCHRONOUS":                               "syscall",
	"syscall.MS_UNBINDABLE":                                "syscall",
	"syscall.Madvise":                                      "syscall",
	"syscall.MapViewOfFile":                                "syscall",
	"syscall.MaxTokenInfoClass":                            "syscall",
	"syscall.Mclpool":                                      "syscall",
	"syscall.MibIfRow":                                     "syscall",
	"syscall.Mkdir":                                        "syscall",
	"syscall.Mkdirat":                                      "syscall",
	"syscall.Mkfifo":                                       "syscall",
	"syscall.Mknod":                                        "syscall",
	"syscall.Mknodat":                                      "syscall",
	"syscall.Mlock":                                        "syscall",
	"syscall.Mlockall":                                     "syscall",
	"syscall.Mmap":                                         "syscall",
	"syscall.Mount":                                        "syscall",
	"syscall.MoveFile":                                     "syscall",
	"syscall.Mprotect":                                     "syscall",
	"syscall.Msghdr":                                       "syscall",
	"syscall.Munlock":                                      "syscall",
	"syscall.Munlockall":                                   "syscall",
	"syscall.Munmap":                                       "syscall",
	"syscall.MustLoadDLL":                                  "syscall",
	"syscall.NAME_MAX":                                     "syscall",
	"syscall.NETLINK_ADD_MEMBERSHIP":                       "syscall",
	"syscall.NETLINK_AUDIT":                                "syscall",
	"syscall.NETLINK_BROADCAST_ERROR":                      "syscall",
	"syscall.NETLINK_CONNECTOR":                            "syscall",
	"syscall.NETLINK_DNRTMSG":                              "syscall",
	"syscall.NETLINK_DROP_MEMBERSHIP":                      "syscall",
	"syscall.NETLINK_ECRYPTFS":                             "syscall",
	"syscall.NETLINK_FIB_LOOKUP":                           "syscall",
	"syscall.NETLINK_FIREWALL":                             "syscall",
	"syscall.NETLINK_GENERIC":                              "syscall",
	"syscall.NETLINK_INET_DIAG":                            "syscall",
	"syscall.NETLINK_IP6_FW":                               "syscall",
	"syscall.NETLINK_ISCSI":                                "syscall",
	"syscall.NETLINK_KOBJECT_UEVENT":                       "syscall",
	"syscall.NETLINK_NETFILTER":                            "syscall",
	"syscall.NETLINK_NFLOG":                                "syscall",
	"syscall.NETLINK_NO_ENOBUFS":                           "syscall",
	"syscall.NETLINK_PKTINFO":                              "syscall",
	"syscall.NETLINK_RDMA":                                 "syscall",
	"syscall.NETLINK_ROUTE":                                "syscall",
	"syscall.NETLINK_SCSITRANSPORT":                        "syscall",
	"syscall.NETLINK_SELINUX":                              "syscall",
	"syscall.NETLINK_UNUSED":                               "syscall",
	"syscall.NETLINK_USERSOCK":                             "syscall",
	"syscall.NETLINK_XFRM":                                 "syscall",
	"syscall.NET_RT_DUMP":                                  "syscall",
	"syscall.NET_RT_DUMP2":                                 "syscall",
	"syscall.NET_RT_FLAGS":                                 "syscall",
	"syscall.NET_RT_IFLIST":                                "syscall",
	"syscall.NET_RT_IFLIST2":                               "syscall",
	"syscall.NET_RT_IFLISTL":                               "syscall",
	"syscall.NET_RT_IFMALIST":                              "syscall",
	"syscall.NET_RT_MAXID":                                 "syscall",
	"syscall.NET_RT_OIFLIST":                               "syscall",
	"syscall.NET_RT_OOIFLIST":                              "syscall",
	"syscall.NET_RT_STAT":                                  "syscall",
	"syscall.NET_RT_STATS":                                 "syscall",
	"syscall.NET_RT_TABLE":                                 "syscall",
	"syscall.NET_RT_TRASH":                                 "syscall",
	"syscall.NLA_ALIGNTO":                                  "syscall",
	"syscall.NLA_F_NESTED":                                 "syscall",
	"syscall.NLA_F_NET_BYTEORDER":                          "syscall",
	"syscall.NLA_HDRLEN":                                   "syscall",
	"syscall.NLMSG_ALIGNTO":                                "syscall",
	"syscall.NLMSG_DONE":                                   "syscall",
	"syscall.NLMSG_ERROR":                                  "syscall",
	"syscall.NLMSG_HDRLEN":                                 "syscall",
	"syscall.NLMSG_MIN_TYPE":                               "syscall",
	"syscall.NLMSG_NOOP":                                   "syscall",
	"syscall.NLMSG_OVERRUN":                                "syscall",
	"syscall.NLM_F_ACK":                                    "syscall",
	"syscall.NLM_F_APPEND":                                 "syscall",
	"syscall.NLM_F_ATOMIC":                                 "syscall",
	"syscall.NLM_F_CREATE":                                 "syscall",
	"syscall.NLM_F_DUMP":                                   "syscall",
	"syscall.NLM_F_ECHO":                                   "syscall",
	"syscall.NLM_F_EXCL":                                   "syscall",
	"syscall.NLM_F_MATCH":                                  "syscall",
	"syscall.NLM_F_MULTI":                                  "syscall",
	"syscall.NLM_F_REPLACE":                                "syscall",
	"syscall.NLM_F_REQUEST":                                "syscall",
	"syscall.NLM_F_ROOT":                                   "syscall",
	"syscall.NOFLSH":                                       "syscall",
	"syscall.NOTE_ABSOLUTE":                                "syscall",
	"syscall.NOTE_ATTRIB":                                  "syscall",
	"syscall.NOTE_CHILD":                                   "syscall",
	"syscall.NOTE_DELETE":                                  "syscall",
	"syscall.NOTE_EOF":                                     "syscall",
	"syscall.NOTE_EXEC":                                    "syscall",
	"syscall.NOTE_EXIT":                                    "syscall",
	"syscall.NOTE_EXITSTATUS":                              "syscall",
	"syscall.NOTE_EXTEND":                                  "syscall",
	"syscall.NOTE_FFAND":                                   "syscall",
	"syscall.NOTE_FFCOPY":                                  "syscall",
	"syscall.NOTE_FFCTRLMASK":                              "syscall",
	"syscall.NOTE_FFLAGSMASK":                              "syscall",
	"syscall.NOTE_FFNOP":                                   "syscall",
	"syscall.NOTE_FFOR":                                    "syscall",
	"syscall.NOTE_FORK":                                    "syscall",
	"syscall.NOTE_LINK":                                    "syscall",
	"syscall.NOTE_LOWAT":                                   "syscall",
	"syscall.NOTE_NONE":                                    "syscall",
	"syscall.NOTE_NSECONDS":                                "syscall",
	"syscall.NOTE_PCTRLMASK":                               "syscall",
	"syscall.NOTE_PDATAMASK":                               "syscall",
	"syscall.NOTE_REAP":                                    "syscall",
	"syscall.NOTE_RENAME":                                  "syscall",
	"syscall.NOTE_RESOURCEEND":                             "syscall",
	"syscall.NOTE_REVOKE":                                  "syscall",
	"syscall.NOTE_SECONDS":                                 "syscall",
	"syscall.NOTE_SIGNAL":                                  "syscall",
	"syscall.NOTE_TRACK":                                   "syscall",
	"syscall.NOTE_TRACKERR":                                "syscall",
	"syscall.NOTE_TRIGGER":                                 "syscall",
	"syscall.NOTE_TRUNCATE":                                "syscall",
	"syscall.NOTE_USECONDS":                                "syscall",
	"syscall.NOTE_VM_ERROR":                                "syscall",
	"syscall.NOTE_VM_PRESSURE":                             "syscall",
	"syscall.NOTE_VM_PRESSURE_SUDDEN_TERMINATE":            "syscall",
	"syscall.NOTE_VM_PRESSURE_TERMINATE":                   "syscall",
	"syscall.NOTE_WRITE":                                   "syscall",
	"syscall.NameCanonical":                                "syscall",
	"syscall.NameCanonicalEx":                              "syscall",
	"syscall.NameDisplay":                                  "syscall",
	"syscall.NameDnsDomain":                                "syscall",
	"syscall.NameFullyQualifiedDN":                         "syscall",
	"syscall.NameSamCompatible":                            "syscall",
	"syscall.NameServicePrincipal":                         "syscall",
	"syscall.NameUniqueId":                                 "syscall",
	"syscall.NameUnknown":                                  "syscall",
	"syscall.NameUserPrincipal":                            "syscall",
	"syscall.Nanosleep":                                    "syscall",
	"syscall.NetApiBufferFree":                             "syscall",
	"syscall.NetGetJoinInformation":                        "syscall",
	"syscall.NetSetupDomainName":                           "syscall",
	"syscall.NetSetupUnjoined":                             "syscall",
	"syscall.NetSetupUnknownStatus":                        "syscall",
	"syscall.NetSetupWorkgroupName":                        "syscall",
	"syscall.NetUserGetInfo":                               "syscall",
	"syscall.NetlinkMessage":                               "syscall",
	"syscall.NetlinkRIB":                                   "syscall",
	"syscall.NetlinkRouteAttr":                             "syscall",
	"syscall.NetlinkRouteRequest":                          "syscall",
	"syscall.NewCallback":                                  "syscall",
	"syscall.NewCallbackCDecl":                             "syscall",
	"syscall.NewLazyDLL":                                   "syscall",
	"syscall.NlAttr":                                       "syscall",
	"syscall.NlMsgerr":                                     "syscall",
	"syscall.NlMsghdr":                                     "syscall",
	"syscall.NsecToFiletime":                               "syscall",
	"syscall.NsecToTimespec":                               "syscall",
	"syscall.NsecToTimeval":                                "syscall",
	"syscall.Ntohs":                                        "syscall",
	"syscall.OCRNL":                                        "syscall",
	"syscall.OFDEL":                                        "syscall",
	"syscall.OFILL":                                        "syscall",
	"syscall.OFIOGETBMAP":                                  "syscall",
	"syscall.OID_PKIX_KP_SERVER_AUTH":                      "syscall",
	"syscall.OID_SERVER_GATED_CRYPTO":                      "syscall",
	"syscall.OID_SGC_NETSCAPE":                             "syscall",
	"syscall.OLCUC":                                        "syscall",
	"syscall.ONLCR":                                        "syscall",
	"syscall.ONLRET":                                       "syscall",
	"syscall.ONOCR":                                        "syscall",
	"syscall.ONOEOT":                                       "syscall",
	"syscall.OPEN_ALWAYS":                                  "syscall",
	"syscall.OPEN_EXISTING":                                "syscall",
	"syscall.OPOST":                                        "syscall",
	"syscall.O_ACCMODE":                                    "syscall",
	"syscall.O_ALERT":                                      "syscall",
	"syscall.O_ALT_IO":                                     "syscall",
	"syscall.O_APPEND":                                     "syscall",
	"syscall.O_ASYNC":                                      "syscall",
	"syscall.O_CLOEXEC":                                    "syscall",
	"syscall.O_CREAT":                                      "syscall",
	"syscall.O_DIRECT":                                     "syscall",
	"syscall.O_DIRECTORY":                                  "syscall",
	"syscall.O_DSYNC":                                      "syscall",
	"syscall.O_EVTONLY":                                    "syscall",
	"syscall.O_EXCL":                                       "syscall",
	"syscall.O_EXEC":                                       "syscall",
	"syscall.O_EXLOCK":                                     "syscall",
	"syscall.O_FSYNC":                                      "syscall",
	"syscall.O_LARGEFILE":                                  "syscall",
	"syscall.O_NDELAY":                                     "syscall",
	"syscall.O_NOATIME":                                    "syscall",
	"syscall.O_NOCTTY":                                     "syscall",
	"syscall.O_NOFOLLOW":                                   "syscall",
	"syscall.O_NONBLOCK":                                   "syscall",
	"syscall.O_NOSIGPIPE":                                  "syscall",
	"syscall.O_POPUP":                                      "syscall",
	"syscall.O_RDONLY":                                     "syscall",
	"syscall.O_RDWR":                                       "syscall",
	"syscall.O_RSYNC":                                      "syscall",
	"syscall.O_SHLOCK":                                     "syscall",
	"syscall.O_SYMLINK":                                    "syscall",
	"syscall.O_SYNC":                                       "syscall",
	"syscall.O_TRUNC":                                      "syscall",
	"syscall.O_TTY_INIT":                                   "syscall",
	"syscall.O_WRONLY":                                     "syscall",
	"syscall.Open":                                         "syscall",
	"syscall.OpenCurrentProcessToken":                      "syscall",
	"syscall.OpenProcess":                                  "syscall",
	"syscall.OpenProcessToken":                             "syscall",
	"syscall.Openat":                                       "syscall",
	"syscall.Overlapped":                                   "syscall",
	"syscall.PACKET_ADD_MEMBERSHIP":                        "syscall",
	"syscall.PACKET_BROADCAST":                             "syscall",
	"syscall.PACKET_DROP_MEMBERSHIP":                       "syscall",
	"syscall.PACKET_FASTROUTE":                             "syscall",
	"syscall.PACKET_HOST":                                  "syscall",
	"syscall.PACKET_LOOPBACK":                              "syscall",
	"syscall.PACKET_MR_ALLMULTI":                           "syscall",
	"syscall.PACKET_MR_MULTICAST":                          "syscall",
	"syscall.PACKET_MR_PROMISC":                            "syscall",
	"syscall.PACKET_MULTICAST":                             "syscall",
	"syscall.PACKET_OTHERHOST":                             "syscall",
	"syscall.PACKET_OUTGOING":                              "syscall",
	"syscall.PACKET_RECV_OUTPUT":                           "syscall",
	"syscall.PACKET_RX_RING":                               "syscall",
	"syscall.PACKET_STATISTICS":                            "syscall",
	"syscall.PAGE_EXECUTE_READ":                            "syscall",
	"syscall.PAGE_EXECUTE_READWRITE":                       "syscall",
	"syscall.PAGE_EXECUTE_WRITECOPY":                       "syscall",
	"syscall.PAGE_READONLY":                                "syscall",
	"syscall.PAGE_READWRITE":                               "syscall",
	"syscall.PAGE_WRITECOPY":                               "syscall",
	"syscall.PARENB":                                       "syscall",
	"syscall.PARMRK":                                       "syscall",
	"syscall.PARODD":                                       "syscall",
	"syscall.PENDIN":                                       "syscall",
	"syscall.PFL_HIDDEN":                                   "syscall",
	"syscall.PFL_MATCHES_PROTOCOL_ZERO":                    "syscall",
	"syscall.PFL_MULTIPLE_PROTO_ENTRIES":                   "syscall",
	"syscall.PFL_NETWORKDIRECT_PROVIDER":                   "syscall",
	"syscall.PFL_RECOMMENDED_PROTO_ENTRY":                  "syscall",
	"syscall.PF_FLUSH":                                     "syscall",
	"syscall.PKCS_7_ASN_ENCODING":                          "syscall",
	"syscall.PMC5_PIPELINE_FLUSH":                          "syscall",
	"syscall.PRIO_PGRP":                                    "syscall",
	"syscall.PRIO_PROCESS":                                 "syscall",
	"syscall.PRIO_USER":                                    "syscall",
	"syscall.PRI_IOFLUSH":                                  "syscall",
	"syscall.PROCESS_QUERY_INFORMATION":                    "syscall",
	"syscall.PROCESS_TERMINATE":                            "syscall",
	"syscall.PROT_EXEC":                                    "syscall",
	"syscall.PROT_GROWSDOWN":                               "syscall",
	"syscall.PROT_GROWSUP":                                 "syscall",
	"syscall.PROT_NONE":                                    "syscall",
	"syscall.PROT_READ":                                    "syscall",
	"syscall.PROT_WRITE":                                   "syscall",
	"syscall.PROV_DH_SCHANNEL":                             "syscall",
	"syscall.PROV_DSS":                                     "syscall",
	"syscall.PROV_DSS_DH":                                  "syscall",
	"syscall.PROV_EC_ECDSA_FULL":                           "syscall",
	"syscall.PROV_EC_ECDSA_SIG":                            "syscall",
	"syscall.PROV_EC_ECNRA_FULL":                           "syscall",
	"syscall.PROV_EC_ECNRA_SIG":                            "syscall",
	"syscall.PROV_FORTEZZA":                                "syscall",
	"syscall.PROV_INTEL_SEC":                               "syscall",
	"syscall.PROV_MS_EXCHANGE":                             "syscall",
	"syscall.PROV_REPLACE_OWF":                             "syscall",
	"syscall.PROV_RNG":                                     "syscall",
	"syscall.PROV_RSA_AES":                                 "syscall",
	"syscall.PROV_RSA_FULL":                                "syscall",
	"syscall.PROV_RSA_SCHANNEL":                            "syscall",
	"syscall.PROV_RSA_SIG":                                 "syscall",
	"syscall.PROV_SPYRUS_LYNKS":                            "syscall",
	"syscall.PROV_SSL":                                     "syscall",
	"syscall.PR_CAPBSET_DROP":                              "syscall",
	"syscall.PR_CAPBSET_READ":                              "syscall",
	"syscall.PR_CLEAR_SECCOMP_FILTER":                      "syscall",
	"syscall.PR_ENDIAN_BIG":                                "syscall",
	"syscall.PR_ENDIAN_LITTLE":                             "syscall",
	"syscall.PR_ENDIAN_PPC_LITTLE":                         "syscall",
	"syscall.PR_FPEMU_NOPRINT":                             "syscall",
	"syscall.PR_FPEMU_SIGFPE":                              "syscall",
	"syscall.PR_FP_EXC_ASYNC":                              "syscall",
	"syscall.PR_FP_EXC_DISABLED":                           "syscall",
	"syscall.PR_FP_EXC_DIV":                                "syscall",
	"syscall.PR_FP_EXC_INV":                                "syscall",
	"syscall.PR_FP_EXC_NONRECOV":                           "syscall",
	"syscall.PR_FP_EXC_OVF":                                "syscall",
	"syscall.PR_FP_EXC_PRECISE":                            "syscall",
	"syscall.PR_FP_EXC_RES":                                "syscall",
	"syscall.PR_FP_EXC_SW_ENABLE":                          "syscall",
	"syscall.PR_FP_EXC_UND":                                "syscall",
	"syscall.PR_GET_DUMPABLE":                              "syscall",
	"syscall.PR_GET_ENDIAN":                                "syscall",
	"syscall.PR_GET_FPEMU":                                 "syscall",
	"syscall.PR_GET_FPEXC":                                 "syscall",
	"syscall.PR_GET_KEEPCAPS":                              "syscall",
	"syscall.PR_GET_NAME":                                  "syscall",
	"syscall.PR_GET_PDEATHSIG":                             "syscall",
	"syscall.PR_GET_SECCOMP":                               "syscall",
	"syscall.PR_GET_SECCOMP_FILTER":                        "syscall",
	"syscall.PR_GET_SECUREBITS":                            "syscall",
	"syscall.PR_GET_TIMERSLACK":                            "syscall",
	"syscall.PR_GET_TIMING":                                "syscall",
	"syscall.PR_GET_TSC":                                   "syscall",
	"syscall.PR_GET_UNALIGN":                               "syscall",
	"syscall.PR_MCE_KILL":                                  "syscall",
	"syscall.PR_MCE_KILL_CLEAR":                            "syscall",
	"syscall.PR_MCE_KILL_DEFAULT":                          "syscall",
	"syscall.PR_MCE_KILL_EARLY":                            "syscall",
	"syscall.PR_MCE_KILL_GET":                              "syscall",
	"syscall.PR_MCE_KILL_LATE":                             "syscall",
	"syscall.PR_MCE_KILL_SET":                              "syscall",
	"syscall.PR_SECCOMP_FILTER_EVENT":                      "syscall",
	"syscall.PR_SECCOMP_FILTER_SYSCALL":                    "syscall",
	"syscall.PR_SET_DUMPABLE":                              "syscall",
	"syscall.PR_SET_ENDIAN":                                "syscall",
	"syscall.PR_SET_FPEMU":                                 "syscall",
	"syscall.PR_SET_FPEXC":                                 "syscall",
	"syscall.PR_SET_KEEPCAPS":                              "syscall",
	"syscall.PR_SET_NAME":                                  "syscall",
	"syscall.PR_SET_PDEATHSIG":                             "syscall",
	"syscall.PR_SET_PTRACER":                               "syscall",
	"syscall.PR_SET_SECCOMP":                               "syscall",
	"syscall.PR_SET_SECCOMP_FILTER":                        "syscall",
	"syscall.PR_SET_SECUREBITS":                            "syscall",
	"syscall.PR_SET_TIMERSLACK":                            "syscall",
	"syscall.PR_SET_TIMING":                                "syscall",
	"syscall.PR_SET_TSC":                                   "syscall",
	"syscall.PR_SET_UNALIGN":                               "syscall",
	"syscall.PR_TASK_PERF_EVENTS_DISABLE":                  "syscall",
	"syscall.PR_TASK_PERF_EVENTS_ENABLE":                   "syscall",
	"syscall.PR_TIMING_STATISTICAL":                        "syscall",
	"syscall.PR_TIMING_TIMESTAMP":                          "syscall",
	"syscall.PR_TSC_ENABLE":                                "syscall",
	"syscall.PR_TSC_SIGSEGV":                               "syscall",
	"syscall.PR_UNALIGN_NOPRINT":                           "syscall",
	"syscall.PR_UNALIGN_SIGBUS":                            "syscall",
	"syscall.PTRACE_ARCH_PRCTL":                            "syscall",
	"syscall.PTRACE_ATTACH":                                "syscall",
	"syscall.PTRACE_CONT":                                  "syscall",
	"syscall.PTRACE_DETACH":                                "syscall",
	"syscall.PTRACE_EVENT_CLONE":                           "syscall",
	"syscall.PTRACE_EVENT_EXEC":                            "syscall",
	"syscall.PTRACE_EVENT_EXIT":                            "syscall",
	"syscall.PTRACE_EVENT_FORK":                            "syscall",
	"syscall.PTRACE_EVENT_VFORK":                           "syscall",
	"syscall.PTRACE_EVENT_VFORK_DONE":                      "syscall",
	"syscall.PTRACE_GETCRUNCHREGS":                         "syscall",
	"syscall.PTRACE_GETEVENTMSG":                           "syscall",
	"syscall.PTRACE_GETFPREGS":                             "syscall",
	"syscall.PTRACE_GETFPXREGS":                            "syscall",
	"syscall.PTRACE_GETHBPREGS":                            "syscall",
	"syscall.PTRACE_GETREGS":                               "syscall",
	"syscall.PTRACE_GETREGSET":                             "syscall",
	"syscall.PTRACE_GETSIGINFO":                            "syscall",
	"syscall.PTRACE_GETVFPREGS":                            "syscall",
	"syscall.PTRACE_GETWMMXREGS":                           "syscall",
	"syscall.PTRACE_GET_THREAD_AREA":                       "syscall",
	"syscall.PTRACE_KILL":                                  "syscall",
	"syscall.PTRACE_OLDSETOPTIONS":                         "syscall",
	"syscall.PTRACE_O_MASK":                                "syscall",
	"syscall.PTRACE_O_TRACECLONE":                          "syscall",
	"syscall.PTRACE_O_TRACEEXEC":                           "syscall",
	"syscall.PTRACE_O_TRACEEXIT":                           "syscall",
	"syscall.PTRACE_O_TRACEFORK":                           "syscall",
	"syscall.PTRACE_O_TRACESYSGOOD":                        "syscall",
	"syscall.PTRACE_O_TRACEVFORK":                          "syscall",
	"syscall.PTRACE_O_TRACEVFORKDONE":                      "syscall",
	"syscall.PTRACE_PEEKDATA":                              "syscall",
	"syscall.PTRACE_PEEKTEXT":                              "syscall",
	"syscall.PTRACE_PEEKUSR":                               "syscall",
	"syscall.PTRACE_POKEDATA":                              "syscall",
	"syscall.PTRACE_POKETEXT":                              "syscall",
	"syscall.PTRACE_POKEUSR":                               "syscall",
	"syscall.PTRACE_SETCRUNCHREGS":                         "syscall",
	"syscall.PTRACE_SETFPREGS":                             "syscall",
	"syscall.PTRACE_SETFPXREGS":                            "syscall",
	"syscall.PTRACE_SETHBPREGS":                            "syscall",
	"syscall.PTRACE_SETOPTIONS":                            "syscall",
	"syscall.PTRACE_SETREGS":                               "syscall",
	"syscall.PTRACE_SETREGSET":                             "syscall",
	"syscall.PTRACE_SETSIGINFO":                            "syscall",
	"syscall.PTRACE_SETVFPREGS":                            "syscall",
	"syscall.PTRACE_SETWMMXREGS":                           "syscall",
	"syscall.PTRACE_SET_SYSCALL":                           "syscall",
	"syscall.PTRACE_SET_THREAD_AREA":                       "syscall",
	"syscall.PTRACE_SINGLEBLOCK":                           "syscall",
	"syscall.PTRACE_SINGLESTEP":                            "syscall",
	"syscall.PTRACE_SYSCALL":                               "syscall",
	"syscall.PTRACE_SYSEMU":                                "syscall",
	"syscall.PTRACE_SYSEMU_SINGLESTEP":                     "syscall",
	"syscall.PTRACE_TRACEME":                               "syscall",
	"syscall.PT_ATTACH":                                    "syscall",
	"syscall.PT_ATTACHEXC":                                 "syscall",
	"syscall.PT_CONTINUE":                                  "syscall",
	"syscall.PT_DATA_ADDR":                                 "syscall",
	"syscall.PT_DENY_ATTACH":                               "syscall",
	"syscall.PT_DETACH":                                    "syscall",
	"syscall.PT_FIRSTMACH":                                 "syscall",
	"syscall.PT_FORCEQUOTA":                                "syscall",
	"syscall.PT_KILL":                                      "syscall",
	"syscall.PT_MASK":                                      "syscall",
	"syscall.PT_READ_D":                                    "syscall",
	"syscall.PT_READ_I":                                    "syscall",
	"syscall.PT_READ_U":                                    "syscall",
	"syscall.PT_SIGEXC":                                    "syscall",
	"syscall.PT_STEP":                                      "syscall",
	"syscall.PT_TEXT_ADDR":                                 "syscall",
	"syscall.PT_TEXT_END_ADDR":                             "syscall",
	"syscall.PT_THUPDATE":                                  "syscall",
	"syscall.PT_TRACE_ME":                                  "syscall",
	"syscall.PT_WRITE_D":                                   "syscall",
	"syscall.PT_WRITE_I":                                   "syscall",
	"syscall.PT_WRITE_U":                                   "syscall",
	"syscall.ParseDirent":                                  "syscall",
	"syscall.ParseNetlinkMessage":                          "syscall",
	"syscall.ParseNetlinkRouteAttr":                        "syscall",
	"syscall.ParseRoutingMessage":                          "syscall",
	"syscall.ParseRoutingSockaddr":                         "syscall",
	"syscall.ParseSocketControlMessage":                    "syscall",
	"syscall.ParseUnixCredentials":                         "syscall",
	"syscall.ParseUnixRights":                              "syscall",
	"syscall.PathMax":                                      "syscall",
	"syscall.Pathconf":                                     "syscall",
	"syscall.Pause":                                        "syscall",
	"syscall.Pipe":                                         "syscall",
	"syscall.Pipe2":                                        "syscall",
	"syscall.PivotRoot":                                    "syscall",
	"syscall.PostQueuedCompletionStatus":                   "syscall",
	"syscall.Pread":                                        "syscall",
	"syscall.Proc":                                         "syscall",
	"syscall.ProcAttr":                                     "syscall",
	"syscall.Process32First":                               "syscall",
	"syscall.Process32Next":                                "syscall",
	"syscall.ProcessEntry32":                               "syscall",
	"syscall.ProcessInformation":                           "syscall",
	"syscall.Protoent":                                     "syscall",
	"syscall.PtraceAttach":                                 "syscall",
	"syscall.PtraceCont":                                   "syscall",
	"syscall.PtraceDetach":                                 "syscall",
	"syscall.PtraceGetEventMsg":                            "syscall",
	"syscall.PtraceGetRegs":                                "syscall",
	"syscall.PtracePeekData":                               "syscall",
	"syscall.PtracePeekText":                               "syscall",
	"syscall.PtracePokeData":                               "syscall",
	"syscall.PtracePokeText":                               "syscall",
	"syscall.PtraceRegs":                                   "syscall",
	"syscall.PtraceSetOptions":                             "syscall",
	"syscall.PtraceSetRegs":                                "syscall",
	"syscall.PtraceSingleStep":                             "syscall",
	"syscall.PtraceSyscall":                                "syscall",
	"syscall.Pwrite":                                       "syscall",
	"syscall.REG_BINARY":                                   "syscall",
	"syscall.REG_DWORD":                                    "syscall",
	"syscall.REG_DWORD_BIG_ENDIAN":                         "syscall",
	"syscall.REG_DWORD_LITTLE_ENDIAN":                      "syscall",
	"syscall.REG_EXPAND_SZ":                                "syscall",
	"syscall.REG_FULL_RESOURCE_DESCRIPTOR":                 "syscall",
	"syscall.REG_LINK":                                     "syscall",
	"syscall.REG_MULTI_SZ":                                 "syscall",
	"syscall.REG_NONE":                                     "syscall",
	"syscall.REG_QWORD":                                    "syscall",
	"syscall.REG_QWORD_LITTLE_ENDIAN":                      "syscall",
	"syscall.REG_RESOURCE_LIST":                            "syscall",
	"syscall.REG_RESOURCE_REQUIREMENTS_LIST":               "syscall",
	"syscall.REG_SZ":                                       "syscall",
	"syscall.RLIMIT_AS":                                    "syscall",
	"syscall.RLIMIT_CORE":                                  "syscall",
	"syscall.RLIMIT_CPU":                                   "syscall",
	"syscall.RLIMIT_DATA":                                  "syscall",
	"syscall.RLIMIT_FSIZE":                                 "syscall",
	"syscall.RLIMIT_NOFILE":                                "syscall",
	"syscall.RLIMIT_STACK":                                 "syscall",
	"syscall.RLIM_INFINITY":                                "syscall",
	"syscall.RTAX_ADVMSS":                                  "syscall",
	"syscall.RTAX_AUTHOR":                                  "syscall",
	"syscall.RTAX_BRD":                                     "syscall",
	"syscall.RTAX_CWND":                                    "syscall",
	"syscall.RTAX_DST":                                     "syscall",
	"syscall.RTAX_FEATURES":                                "syscall",
	"syscall.RTAX_FEATURE_ALLFRAG":                         "syscall",
	"syscall.RTAX_FEATURE_ECN":                             "syscall",
	"syscall.RTAX_FEATURE_SACK":                            "syscall",
	"syscall.RTAX_FEATURE_TIMESTAMP":                       "syscall",
	"syscall.RTAX_GATEWAY":                                 "syscall",
	"syscall.RTAX_GENMASK":                                 "syscall",
	"syscall.RTAX_HOPLIMIT":                                "syscall",
	"syscall.RTAX_IFA":                                     "syscall",
	"syscall.RTAX_IFP":                                     "syscall",
	"syscall.RTAX_INITCWND":                                "syscall",
	"syscall.RTAX_INITRWND":                                "syscall",
	"syscall.RTAX_LABEL":                                   "syscall",
	"syscall.RTAX_LOCK":                                    "syscall",
	"syscall.RTAX_MAX":                                     "syscall",
	"syscall.RTAX_MTU":                                     "syscall",
	"syscall.RTAX_NETMASK":                                 "syscall",
	"syscall.RTAX_REORDERING":                              "syscall",
	"syscall.RTAX_RTO_MIN":                                 "syscall",
	"syscall.RTAX_RTT":                                     "syscall",
	"syscall.RTAX_RTTVAR":                                  "syscall",
	"syscall.RTAX_SRC":                                     "syscall",
	"syscall.RTAX_SRCMASK":                                 "syscall",
	"syscall.RTAX_SSTHRESH":                                "syscall",
	"syscall.RTAX_TAG":                                     "syscall",
	"syscall.RTAX_UNSPEC":                                  "syscall",
	"syscall.RTAX_WINDOW":                                  "syscall",
	"syscall.RTA_ALIGNTO":                                  "syscall",
	"syscall.RTA_AUTHOR":                                   "syscall",
	"syscall.RTA_BRD":                                      "syscall",
	"syscall.RTA_CACHEINFO":                                "syscall",
	"syscall.RTA_DST":                                      "syscall",
	"syscall.RTA_FLOW":                                     "syscall",
	"syscall.RTA_GATEWAY":                                  "syscall",
	"syscall.RTA_GENMASK":                                  "syscall",
	"syscall.RTA_IFA":                                      "syscall",
	"syscall.RTA_IFP":                                      "syscall",
	"syscall.RTA_IIF":                                      "syscall",
	"syscall.RTA_LABEL":                                    "syscall",
	"syscall.RTA_MAX":                                      "syscall",
	"syscall.RTA_METRICS":                                  "syscall",
	"syscall.RTA_MULTIPATH":                                "syscall",
	"syscall.RTA_NETMASK":                                  "syscall",
	"syscall.RTA_OIF":                                      "syscall",
	"syscall.RTA_PREFSRC":                                  "syscall",
	"syscall.RTA_PRIORITY":                                 "syscall",
	"syscall.RTA_SRC":                                      "syscall",
	"syscall.RTA_SRCMASK":                                  "syscall",
	"syscall.RTA_TABLE":                                    "syscall",
	"syscall.RTA_TAG":                                      "syscall",
	"syscall.RTA_UNSPEC":                                   "syscall",
	"syscall.RTCF_DIRECTSRC":                               "syscall",
	"syscall.RTCF_DOREDIRECT":                              "syscall",
	"syscall.RTCF_LOG":                                     "syscall",
	"syscall.RTCF_MASQ":                                    "syscall",
	"syscall.RTCF_NAT":                                     "syscall",
	"syscall.RTCF_VALVE":                                   "syscall",
	"syscall.RTF_ADDRCLASSMASK":                            "syscall",
	"syscall.RTF_ADDRCONF":                                 "syscall",
	"syscall.RTF_ALLONLINK":                                "syscall",
	"syscall.RTF_ANNOUNCE":                                 "syscall",
	"syscall.RTF_BLACKHOLE":                                "syscall",
	"syscall.RTF_BROADCAST":                                "syscall",
	"syscall.RTF_CACHE":                                    "syscall",
	"syscall.RTF_CLONED":                                   "syscall",
	"syscall.RTF_CLONING":                                  "syscall",
	"syscall.RTF_CONDEMNED":                                "syscall",
	"syscall.RTF_DEFAULT":                                  "syscall",
	"syscall.RTF_DELCLONE":                                 "syscall",
	"syscall.RTF_DONE":                                     "syscall",
	"syscall.RTF_DYNAMIC":                                  "syscall",
	"syscall.RTF_FLOW":                                     "syscall",
	"syscall.RTF_FMASK":                                    "syscall",
	"syscall.RTF_GATEWAY":                                  "syscall",
	"syscall.RTF_GWFLAG_COMPAT":                            "syscall",
	"syscall.RTF_HOST":                                     "syscall",
	"syscall.RTF_IFREF":                                    "syscall",
	"syscall.RTF_IFSCOPE":                                  "syscall",
	"syscall.RTF_INTERFACE":                                "syscall",
	"syscall.RTF_IRTT":                                     "syscall",
	"syscall.RTF_LINKRT":                                   "syscall",
	"syscall.RTF_LLDATA":                                   "syscall",
	"syscall.RTF_LLINFO":                                   "syscall",
	"syscall.RTF_LOCAL":                                    "syscall",
	"syscall.RTF_MASK":                                     "syscall",
	"syscall.RTF_MODIFIED":                                 "syscall",
	"syscall.RTF_MPATH":                                    "syscall",
	"syscall.RTF_MPLS":                                     "syscall",
	"syscall.RTF_MSS":                                      "syscall",
	"syscall.RTF_MTU":                                      "syscall",
	"syscall.RTF_MULTICAST":                                "syscall",
	"syscall.RTF_NAT":                                      "syscall",
	"syscall.RTF_NOFORWARD":                                "syscall",
	"syscall.RTF_NONEXTHOP":                                "syscall",
	"syscall.RTF_NOPMTUDISC":                               "syscall",
	"syscall.RTF_PERMANENT_ARP":                            "syscall",
	"syscall.RTF_PINNED":                                   "syscall",
	"syscall.RTF_POLICY":                                   "syscall",
	"syscall.RTF_PRCLONING":                                "syscall",
	"syscall.RTF_PROTO1":                                   "syscall",
	"syscall.RTF_PROTO2":                                   "syscall",
	"syscall.RTF_PROTO3":                                   "syscall",
	"syscall.RTF_REINSTATE":                                "syscall",
	"syscall.RTF_REJECT":                                   "syscall",
	"syscall.RTF_RNH_LOCKED":                               "syscall",
	"syscall.RTF_SOURCE":                                   "syscall",
	"syscall.RTF_SRC":                                      "syscall",
	"syscall.RTF_STATIC":                                   "syscall",
	"syscall.RTF_STICKY":                                   "syscall",
	"syscall.RTF_THROW":                                    "syscall",
	"syscall.RTF_TUNNEL":                                   "syscall",
	"syscall.RTF_UP":                                       "syscall",
	"syscall.RTF_USETRAILERS":                              "syscall",
	"syscall.RTF_WASCLONED":                                "syscall",
	"syscall.RTF_WINDOW":                                   "syscall",
	"syscall.RTF_XRESOLVE":                                 "syscall",
	"syscall.RTM_ADD":                                      "syscall",
	"syscall.RTM_BASE":                                     "syscall",
	"syscall.RTM_CHANGE":                                   "syscall",
	"syscall.RTM_CHGADDR":                                  "syscall",
	"syscall.RTM_DELACTION":                                "syscall",
	"syscall.RTM_DELADDR":                                  "syscall",
	"syscall.RTM_DELADDRLABEL":                             "syscall",
	"syscall.RTM_DELETE":                                   "syscall",
	"syscall.RTM_DELLINK":                                  "syscall",
	"syscall.RTM_DELMADDR":                                 "syscall",
	"syscall.RTM_DELNEIGH":                                 "syscall",
	"syscall.RTM_DELQDISC":                                 "syscall",
	"syscall.RTM_DELROUTE":                                 "syscall",
	"syscall.RTM_DELRULE":                                  "syscall",
	"syscall.RTM_DELTCLASS":                                "syscall",
	"syscall.RTM_DELTFILTER":                               "syscall",
	"syscall.RTM_DESYNC":                                   "syscall",
	"syscall.RTM_F_CLONED":                                 "syscall",
	"syscall.RTM_F_EQUALIZE":                               "syscall",
	"syscall.RTM_F_NOTIFY":                                 "syscall",
	"syscall.RTM_F_PREFIX":                                 "syscall",
	"syscall.RTM_GET":                                      "syscall",
	"syscall.RTM_GET2":                                     "syscall",
	"syscall.RTM_GETACTION":                                "syscall",
	"syscall.RTM_GETADDR":                                  "syscall",
	"syscall.RTM_GETADDRLABEL":                             "syscall",
	"syscall.RTM_GETANYCAST":                               "syscall",
	"syscall.RTM_GETDCB":                                   "syscall",
	"syscall.RTM_GETLINK":                                  "syscall",
	"syscall.RTM_GETMULTICAST":                             "syscall",
	"syscall.RTM_GETNEIGH":                                 "syscall",
	"syscall.RTM_GETNEIGHTBL":                              "syscall",
	"syscall.RTM_GETQDISC":                                 "syscall",
	"syscall.RTM_GETROUTE":                                 "syscall",
	"syscall.RTM_GETRULE":                                  "syscall",
	"syscall.RTM_GETTCLASS":                                "syscall",
	"syscall.RTM_GETTFILTER":                               "syscall",
	"syscall.RTM_IEEE80211":                                "syscall",
	"syscall.RTM_IFANNOUNCE":                               "syscall",
	"syscall.RTM_IFINFO":                                   "syscall",
	"syscall.RTM_IFINFO2":                                  "syscall",
	"syscall.RTM_LLINFO_UPD":                               "syscall",
	"syscall.RTM_LOCK":                                     "syscall",
	"syscall.RTM_LOSING":                                   "syscall",
	"syscall.RTM_MAX":                                      "syscall",
	"syscall.RTM_MAXSIZE":                                  "syscall",
	"syscall.RTM_MISS":                                     "syscall",
	"syscall.RTM_NEWACTION":                                "syscall",
	"syscall.RTM_NEWADDR":                                  "syscall",
	"syscall.RTM_NEWADDRLABEL":                             "syscall",
	"syscall.RTM_NEWLINK":                                  "syscall",
	"syscall.RTM_NEWMADDR":                                 "syscall",
	"syscall.RTM_NEWMADDR2":                                "syscall",
	"syscall.RTM_NEWNDUSEROPT":                             "syscall",
	"syscall.RTM_NEWNEIGH":                                 "syscall",
	"syscall.RTM_NEWNEIGHTBL":                              "syscall",
	"syscall.RTM_NEWPREFIX":                                "syscall",
	"syscall.RTM_NEWQDISC":                                 "syscall",
	"syscall.RTM_NEWROUTE":                                 "syscall",
	"syscall.RTM_NEWRULE":                                  "syscall",
	"syscall.RTM_NEWTCLASS":                                "syscall",
	"syscall.RTM_NEWTFILTER":                               "syscall",
	"syscall.RTM_NR_FAMILIES":                              "syscall",
	"syscall.RTM_NR_MSGTYPES":                              "syscall",
	"syscall.RTM_OIFINFO":                                  "syscall",
	"syscall.RTM_OLDADD":                                   "syscall",
	"syscall.RTM_OLDDEL":                                   "syscall",
	"syscall.RTM_OOIFINFO":                                 "syscall",
	"syscall.RTM_REDIRECT":                                 "syscall",
	"syscall.RTM_RESOLVE":                                  "syscall",
	"syscall.RTM_RTTUNIT":                                  "syscall",
	"syscall.RTM_SETDCB":                                   "syscall",
	"syscall.RTM_SETGATE":                                  "syscall",
	"syscall.RTM_SETLINK":                                  "syscall",
	"syscall.RTM_SETNEIGHTBL":                              "syscall",
	"syscall.RTM_VERSION":                                  "syscall",
	"syscall.RTNH_ALIGNTO":                                 "syscall",
	"syscall.RTNH_F_DEAD":                                  "syscall",
	"syscall.RTNH_F_ONLINK":                                "syscall",
	"syscall.RTNH_F_PERVASIVE":                             "syscall",
	"syscall.RTNLGRP_IPV4_IFADDR":                          "syscall",
	"syscall.RTNLGRP_IPV4_MROUTE":                          "syscall",
	"syscall.RTNLGRP_IPV4_ROUTE":                           "syscall",
	"syscall.RTNLGRP_IPV4_RULE":                            "syscall",
	"syscall.RTNLGRP_IPV6_IFADDR":                          "syscall",
	"syscall.RTNLGRP_IPV6_IFINFO":                          "syscall",
	"syscall.RTNLGRP_IPV6_MROUTE":                          "syscall",
	"syscall.RTNLGRP_IPV6_PREFIX":                          "syscall",
	"syscall.RTNLGRP_IPV6_ROUTE":                           "syscall",
	"syscall.RTNLGRP_IPV6_RULE":                            "syscall",
	"syscall.RTNLGRP_LINK":                                 "syscall",
	"syscall.RTNLGRP_ND_USEROPT":                           "syscall",
	"syscall.RTNLGRP_NEIGH":                                "syscall",
	"syscall.RTNLGRP_NONE":                                 "syscall",
	"syscall.RTNLGRP_NOTIFY":                               "syscall",
	"syscall.RTNLGRP_TC":                                   "syscall",
	"syscall.RTN_ANYCAST":                                  "syscall",
	"syscall.RTN_BLACKHOLE":                                "syscall",
	"syscall.RTN_BROADCAST":                                "syscall",
	"syscall.RTN_LOCAL":                                    "syscall",
	"syscall.RTN_MAX":                                      "syscall",
	"syscall.RTN_MULTICAST":                                "syscall",
	"syscall.RTN_NAT":                                      "syscall",
	"syscall.RTN_PROHIBIT":                                 "syscall",
	"syscall.RTN_THROW":                                    "syscall",
	"syscall.RTN_UNICAST":                                  "syscall",
	"syscall.RTN_UNREACHABLE":                              "syscall",
	"syscall.RTN_UNSPEC":                                   "syscall",
	"syscall.RTN_XRESOLVE":                                 "syscall",
	"syscall.RTPROT_BIRD":                                  "syscall",
	"syscall.RTPROT_BOOT":                                  "syscall",
	"syscall.RTPROT_DHCP":                                  "syscall",
	"syscall.RTPROT_DNROUTED":                              "syscall",
	"syscall.RTPROT_GATED":                                 "syscall",
	"syscall.RTPROT_KERNEL":                                "syscall",
	"syscall.RTPROT_MRT":                                   "syscall",
	"syscall.RTPROT_NTK":                                   "syscall",
	"syscall.RTPROT_RA":                                    "syscall",
	"syscall.RTPROT_REDIRECT":                              "syscall",
	"syscall.RTPROT_STATIC":                                "syscall",
	"syscall.RTPROT_UNSPEC":                                "syscall",
	"syscall.RTPROT_XORP":                                  "syscall",
	"syscall.RTPROT_ZEBRA":                                 "syscall",
	"syscall.RTV_EXPIRE":                                   "syscall",
	"syscall.RTV_HOPCOUNT":                                 "syscall",
	"syscall.RTV_MTU":                                      "syscall",
	"syscall.RTV_RPIPE":                                    "syscall",
	"syscall.RTV_RTT":                                      "syscall",
	"syscall.RTV_RTTVAR":                                   "syscall",
	"syscall.RTV_SPIPE":                                    "syscall",
	"syscall.RTV_SSTHRESH":                                 "syscall",
	"syscall.RTV_WEIGHT":                                   "syscall",
	"syscall.RT_CACHING_CONTEXT":                           "syscall",
	"syscall.RT_CLASS_DEFAULT":                             "syscall",
	"syscall.RT_CLASS_LOCAL":                               "syscall",
	"syscall.RT_CLASS_MAIN":                                "syscall",
	"syscall.RT_CLASS_MAX":                                 "syscall",
	"syscall.RT_CLASS_UNSPEC":                              "syscall",
	"syscall.RT_DEFAULT_FIB":                               "syscall",
	"syscall.RT_NORTREF":                                   "syscall",
	"syscall.RT_SCOPE_HOST":                                "syscall",
	"syscall.RT_SCOPE_LINK":                                "syscall",
	"syscall.RT_SCOPE_NOWHERE":                             "syscall",
	"syscall.RT_SCOPE_SITE":                                "syscall",
	"syscall.RT_SCOPE_UNIVERSE":                            "syscall",
	"syscall.RT_TABLEID_MAX":                               "syscall",
	"syscall.RT_TABLE_COMPAT":                              "syscall",
	"syscall.RT_TABLE_DEFAULT":                             "syscall",
	"syscall.RT_TABLE_LOCAL":                               "syscall",
	"syscall.RT_TABLE_MAIN":                                "syscall",
	"syscall.RT_TABLE_MAX":                                 "syscall",
	"syscall.RT_TABLE_UNSPEC":                              "syscall",
	"syscall.RUSAGE_CHILDREN":                              "syscall",
	"syscall.RUSAGE_SELF":                                  "syscall",
	"syscall.RUSAGE_THREAD":                                "syscall",
	"syscall.Radvisory_t":                                  "syscall",
	"syscall.RawSockaddr":                                  "syscall",
	"syscall.RawSockaddrAny":                               "syscall",
	"syscall.RawSockaddrDatalink":                          "syscall",
	"syscall.RawSockaddrInet4":                             "syscall",
	"syscall.RawSockaddrInet6":                             "syscall",
	"syscall.RawSockaddrLinklayer":                         "syscall",
	"syscall.RawSockaddrNetlink":                           "syscall",
	"syscall.RawSockaddrUnix":                              "syscall",
	"syscall.RawSyscall":                                   "syscall",
	"syscall.RawSyscall6":                                  "syscall",
	"syscall.Read":                                         "syscall",
	"syscall.ReadConsole":                                  "syscall",
	"syscall.ReadDirectoryChanges":                         "syscall",
	"syscall.ReadDirent":                                   "syscall",
	"syscall.ReadFile":                                     "syscall",
	"syscall.Readlink":                                     "syscall",
	"syscall.Reboot":                                       "syscall",
	"syscall.Recvfrom":                                     "syscall",
	"syscall.Recvmsg":                                      "syscall",
	"syscall.RegCloseKey":                                  "syscall",
	"syscall.RegEnumKeyEx":                                 "syscall",
	"syscall.RegOpenKeyEx":                                 "syscall",
	"syscall.RegQueryInfoKey":                              "syscall",
	"syscall.RegQueryValueEx":                              "syscall",
	"syscall.RemoveDirectory":                              "syscall",
	"syscall.Removexattr":                                  "syscall",
	"syscall.Rename":                                       "syscall",
	"syscall.Renameat":                                     "syscall",
	"syscall.Revoke":                                       "syscall",
	"syscall.Rlimit":                                       "syscall",
	"syscall.Rmdir":                                        "syscall",
	"syscall.RouteMessage":                                 "syscall",
	"syscall.RouteRIB":                                     "syscall",
	"syscall.RtAttr":                                       "syscall",
	"syscall.RtGenmsg":                                     "syscall",
	"syscall.RtMetrics":                                    "syscall",
	"syscall.RtMsg":                                        "syscall",
	"syscall.RtMsghdr":                                     "syscall",
	"syscall.RtNexthop":                                    "syscall",
	"syscall.Rusage":                                       "syscall",
	"syscall.SCM_BINTIME":                                  "syscall",
	"syscall.SCM_CREDENTIALS":                              "syscall",
	"syscall.SCM_CREDS":                                    "syscall",
	"syscall.SCM_RIGHTS":                                   "syscall",
	"syscall.SCM_TIMESTAMP":                                "syscall",
	"syscall.SCM_TIMESTAMPING":                             "syscall",
	"syscall.SCM_TIMESTAMPNS":                              "syscall",
	"syscall.SCM_TIMESTAMP_MONOTONIC":                      "syscall",
	"syscall.SHUT_RD":                                      "syscall",
	"syscall.SHUT_RDWR":                                    "syscall",
	"syscall.SHUT_WR":                                      "syscall",
	"syscall.SID":                                          "syscall",
	"syscall.SIDAndAttributes":                             "syscall",
	"syscall.SIGABRT":                                      "syscall",
	"syscall.SIGALRM":                                      "syscall",
	"syscall.SIGBUS":                                       "syscall",
	"syscall.SIGCHLD":                                      "syscall",
	"syscall.SIGCLD":                                       "syscall",
	"syscall.SIGCONT":                                      "syscall",
	"syscall.SIGEMT":                                       "syscall",
	"syscall.SIGFPE":                                       "syscall",
	"syscall.SIGHUP":                                       "syscall",
	"syscall.SIGILL":                                       "syscall",
	"syscall.SIGINFO":                                      "syscall",
	"syscall.SIGINT":                                       "syscall",
	"syscall.SIGIO":                                        "syscall",
	"syscall.SIGIOT":                                       "syscall",
	"syscall.SIGKILL":                                      "syscall",
	"syscall.SIGLIBRT":                                     "syscall",
	"syscall.SIGLWP":                                       "syscall",
	"syscall.SIGPIPE":                                      "syscall",
	"syscall.SIGPOLL":                                      "syscall",
	"syscall.SIGPROF":                                      "syscall",
	"syscall.SIGPWR":                                       "syscall",
	"syscall.SIGQUIT":                                      "syscall",
	"syscall.SIGSEGV":                                      "syscall",
	"syscall.SIGSTKFLT":                                    "syscall",
	"syscall.SIGSTOP":                                      "syscall",
	"syscall.SIGSYS":                                       "syscall",
	"syscall.SIGTERM":                                      "syscall",
	"syscall.SIGTHR":                                       "syscall",
	"syscall.SIGTRAP":                                      "syscall",
	"syscall.SIGTSTP":                                      "syscall",
	"syscall.SIGTTIN":                                      "syscall",
	"syscall.SIGTTOU":                                      "syscall",
	"syscall.SIGUNUSED":                                    "syscall",
	"syscall.SIGURG":                                       "syscall",
	"syscall.SIGUSR1":                                      "syscall",
	"syscall.SIGUSR2":                                      "syscall",
	"syscall.SIGVTALRM":                                    "syscall",
	"syscall.SIGWINCH":                                     "syscall",
	"syscall.SIGXCPU":                                      "syscall",
	"syscall.SIGXFSZ":                                      "syscall",
	"syscall.SIOCADDDLCI":                                  "syscall",
	"syscall.SIOCADDMULTI":                                 "syscall",
	"syscall.SIOCADDRT":                                    "syscall",
	"syscall.SIOCAIFADDR":                                  "syscall",
	"syscall.SIOCAIFGROUP":                                 "syscall",
	"syscall.SIOCALIFADDR":                                 "syscall",
	"syscall.SIOCARPIPLL":                                  "syscall",
	"syscall.SIOCATMARK":                                   "syscall",
	"syscall.SIOCAUTOADDR":                                 "syscall",
	"syscall.SIOCAUTONETMASK":                              "syscall",
	"syscall.SIOCBRDGADD":                                  "syscall",
	"syscall.SIOCBRDGADDS":                                 "syscall",
	"syscall.SIOCBRDGARL":                                  "syscall",
	"syscall.SIOCBRDGDADDR":                                "syscall",
	"syscall.SIOCBRDGDEL":                                  "syscall",
	"syscall.SIOCBRDGDELS":                                 "syscall",
	"syscall.SIOCBRDGFLUSH":                                "syscall",
	"syscall.SIOCBRDGFRL":                                  "syscall",
	"syscall.SIOCBRDGGCACHE":                               "syscall",
	"syscall.SIOCBRDGGFD":                                  "syscall",
	"syscall.SIOCBRDGGHT":                                  "syscall",
	"syscall.SIOCBRDGGIFFLGS":                              "syscall",
	"syscall.SIOCBRDGGMA":                                  "syscall",
	"syscall.SIOCBRDGGPARAM":                               "syscall",
	"syscall.SIOCBRDGGPRI":                                 "syscall",
	"syscall.SIOCBRDGGRL":                                  "syscall",
	"syscall.SIOCBRDGGSIFS":                                "syscall",
	"syscall.SIOCBRDGGTO":                                  "syscall",
	"syscall.SIOCBRDGIFS":                                  "syscall",
	"syscall.SIOCBRDGRTS":                                  "syscall",
	"syscall.SIOCBRDGSADDR":                                "syscall",
	"syscall.SIOCBRDGSCACHE":                               "syscall",
	"syscall.SIOCBRDGSFD":                                  "syscall",
	"syscall.SIOCBRDGSHT":                                  "syscall",
	"syscall.SIOCBRDGSIFCOST":                              "syscall",
	"syscall.SIOCBRDGSIFFLGS":                              "syscall",
	"syscall.SIOCBRDGSIFPRIO":                              "syscall",
	"syscall.SIOCBRDGSMA":                                  "syscall",
	"syscall.SIOCBRDGSPRI":                                 "syscall",
	"syscall.SIOCBRDGSPROTO":                               "syscall",
	"syscall.SIOCBRDGSTO":                                  "syscall",
	"syscall.SIOCBRDGSTXHC":                                "syscall",
	"syscall.SIOCDARP":                                     "syscall",
	"syscall.SIOCDELDLCI":                                  "syscall",
	"syscall.SIOCDELMULTI":                                 "syscall",
	"syscall.SIOCDELRT":                                    "syscall",
	"syscall.SIOCDEVPRIVATE":                               "syscall",
	"syscall.SIOCDIFADDR":                                  "syscall",
	"syscall.SIOCDIFGROUP":                                 "syscall",
	"syscall.SIOCDIFPHYADDR":                               "syscall",
	"syscall.SIOCDLIFADDR":                                 "syscall",
	"syscall.SIOCDRARP":                                    "syscall",
	"syscall.SIOCGARP":                                     "syscall",
	"syscall.SIOCGDRVSPEC":                                 "syscall",
	"syscall.SIOCGETKALIVE":                                "syscall",
	"syscall.SIOCGETLABEL":                                 "syscall",
	"syscall.SIOCGETPFLOW":                                 "syscall",
	"syscall.SIOCGETPFSYNC":                                "syscall",
	"syscall.SIOCGETSGCNT":                                 "syscall",
	"syscall.SIOCGETVIFCNT":                                "syscall",
	"syscall.SIOCGETVLAN":                                  "syscall",
	"syscall.SIOCGHIWAT":                                   "syscall",
	"syscall.SIOCGIFADDR":                                  "syscall",
	"syscall.SIOCGIFADDRPREF":                              "syscall",
	"syscall.SIOCGIFALIAS":                                 "syscall",
	"syscall.SIOCGIFALTMTU":                                "syscall",
	"syscall.SIOCGIFASYNCMAP":                              "syscall",
	"syscall.SIOCGIFBOND":                                  "syscall",
	"syscall.SIOCGIFBR":                                    "syscall",
	"syscall.SIOCGIFBRDADDR":                               "syscall",
	"syscall.SIOCGIFCAP":                                   "syscall",
	"syscall.SIOCGIFCONF":                                  "syscall",
	"syscall.SIOCGIFCOUNT":                                 "syscall",
	"syscall.SIOCGIFDATA":                                  "syscall",
	"syscall.SIOCGIFDESCR":                                 "syscall",
	"syscall.SIOCGIFDEVMTU":                                "syscall",
	"syscall.SIOCGIFDLT":                                   "syscall",
	"syscall.SIOCGIFDSTADDR":                               "syscall",
	"syscall.SIOCGIFENCAP":                                 "syscall",
	"syscall.SIOCGIFFIB":                                   "syscall",
	"syscall.SIOCGIFFLAGS":                                 "syscall",
	"syscall.SIOCGIFGATTR":                                 "syscall",
	"syscall.SIOCGIFGENERIC":                               "syscall",
	"syscall.SIOCGIFGMEMB":                                 "syscall",
	"syscall.SIOCGIFGROUP":                                 "syscall",
	"syscall.SIOCGIFHARDMTU":                               "syscall",
	"syscall.SIOCGIFHWADDR":                                "syscall",
	"syscall.SIOCGIFINDEX":                                 "syscall",
	"syscall.SIOCGIFKPI":                                   "syscall",
	"syscall.SIOCGIFMAC":                                   "syscall",
	"syscall.SIOCGIFMAP":                                   "syscall",
	"syscall.SIOCGIFMEDIA":                                 "syscall",
	"syscall.SIOCGIFMEM":                                   "syscall",
	"syscall.SIOCGIFMETRIC":                                "syscall",
	"syscall.SIOCGIFMTU":                                   "syscall",
	"syscall.SIOCGIFNAME":                                  "syscall",
	"syscall.SIOCGIFNETMASK":                               "syscall",
	"syscall.SIOCGIFPDSTADDR":                              "syscall",
	"syscall.SIOCGIFPFLAGS":                                "syscall",
	"syscall.SIOCGIFPHYS":                                  "syscall",
	"syscall.SIOCGIFPRIORITY":                              "syscall",
	"syscall.SIOCGIFPSRCADDR":                              "syscall",
	"syscall.SIOCGIFRDOMAIN":                               "syscall",
	"syscall.SIOCGIFRTLABEL":                               "syscall",
	"syscall.SIOCGIFSLAVE":                                 "syscall",
	"syscall.SIOCGIFSTATUS":                                "syscall",
	"syscall.SIOCGIFTIMESLOT":                              "syscall",
	"syscall.SIOCGIFTXQLEN":                                "syscall",
	"syscall.SIOCGIFVLAN":                                  "syscall",
	"syscall.SIOCGIFWAKEFLAGS":                             "syscall",
	"syscall.SIOCGIFXFLAGS":                                "syscall",
	"syscall.SIOCGLIFADDR":                                 "syscall",
	"syscall.SIOCGLIFPHYADDR":                              "syscall",
	"syscall.SIOCGLIFPHYRTABLE":                            "syscall",
	"syscall.SIOCGLIFPHYTTL":                               "syscall",
	"syscall.SIOCGLINKSTR":                                 "syscall",
	"syscall.SIOCGLOWAT":                                   "syscall",
	"syscall.SIOCGPGRP":                                    "syscall",
	"syscall.SIOCGPRIVATE_0":                               "syscall",
	"syscall.SIOCGPRIVATE_1":                               "syscall",
	"syscall.SIOCGRARP":                                    "syscall",
	"syscall.SIOCGSPPPPARAMS":                              "syscall",
	"syscall.SIOCGSTAMP":                                   "syscall",
	"syscall.SIOCGSTAMPNS":                                 "syscall",
	"syscall.SIOCGVH":                                      "syscall",
	"syscall.SIOCGVNETID":                                  "syscall",
	"syscall.SIOCIFCREATE":                                 "syscall",
	"syscall.SIOCIFCREATE2":                                "syscall",
	"syscall.SIOCIFDESTROY":                                "syscall",
	"syscall.SIOCIFGCLONERS":                               "syscall",
	"syscall.SIOCINITIFADDR":                               "syscall",
	"syscall.SIOCPROTOPRIVATE":                             "syscall",
	"syscall.SIOCRSLVMULTI":                                "syscall",
	"syscall.SIOCRTMSG":                                    "syscall",
	"syscall.SIOCSARP":                                     "syscall",
	"syscall.SIOCSDRVSPEC":                                 "syscall",
	"syscall.SIOCSETKALIVE":                                "syscall",
	"syscall.SIOCSETLABEL":                                 "syscall",
	"syscall.SIOCSETPFLOW":                                 "syscall",
	"syscall.SIOCSETPFSYNC":                                "syscall",
	"syscall.SIOCSETVLAN":                                  "syscall",
	"syscall.SIOCSHIWAT":                                   "syscall",
	"syscall.SIOCSIFADDR":                                  "syscall",
	"syscall.SIOCSIFADDRPREF":                              "syscall",
	"syscall.SIOCSIFALTMTU":                                "syscall",
	"syscall.SIOCSIFASYNCMAP":                              "syscall",
	"syscall.SIOCSIFBOND":                                  "syscall",
	"syscall.SIOCSIFBR":                                    "syscall",
	"syscall.SIOCSIFBRDADDR":                               "syscall",
	"syscall.SIOCSIFCAP":                                   "syscall",
	"syscall.SIOCSIFDESCR":                                 "syscall",
	"syscall.SIOCSIFDSTADDR":                               "syscall",
	"syscall.SIOCSIFENCAP":                                 "syscall",
	"syscall.SIOCSIFFIB":                                   "syscall",
	"syscall.SIOCSIFFLAGS":                                 "syscall",
	"syscall.SIOCSIFGATTR":                                 "syscall",
	"syscall.SIOCSIFGENERIC":                               "syscall",
	"syscall.SIOCSIFHWADDR":                                "syscall",
	"syscall.SIOCSIFHWBROADCAST":                           "syscall",
	"syscall.SIOCSIFKPI":                                   "syscall",
	"syscall.SIOCSIFLINK":                                  "syscall",
	"syscall.SIOCSIFLLADDR":                                "syscall",
	"syscall.SIOCSIFMAC":                                   "syscall",
	"syscall.SIOCSIFMAP":                                   "syscall",
	"syscall.SIOCSIFMEDIA":                                 "syscall",
	"syscall.SIOCSIFMEM":                                   "syscall",
	"syscall.SIOCSIFMETRIC":                                "syscall",
	"syscall.SIOCSIFMTU":                                   "syscall",
	"syscall.SIOCSIFNAME":                                  "syscall",
	"syscall.SIOCSIFNETMASK":                               "syscall",
	"syscall.SIOCSIFPFLAGS":                                "syscall",
	"syscall.SIOCSIFPHYADDR":                               "syscall",
	"syscall.SIOCSIFPHYS":                                  "syscall",
	"syscall.SIOCSIFPRIORITY":                              "syscall",
	"syscall.SIOCSIFRDOMAIN":                               "syscall",
	"syscall.SIOCSIFRTLABEL":                               "syscall",
	"syscall.SIOCSIFRVNET":                                 "syscall",
	"syscall.SIOCSIFSLAVE":                                 "syscall",
	"syscall.SIOCSIFTIMESLOT":                              "syscall",
	"syscall.SIOCSIFTXQLEN":                                "syscall",
	"syscall.SIOCSIFVLAN":                                  "syscall",
	"syscall.SIOCSIFVNET":                                  "syscall",
	"syscall.SIOCSIFXFLAGS":                                "syscall",
	"syscall.SIOCSLIFPHYADDR":                              "syscall",
	"syscall.SIOCSLIFPHYRTABLE":                            "syscall",
	"syscall.SIOCSLIFPHYTTL":                               "syscall",
	"syscall.SIOCSLINKSTR":                                 "syscall",
	"syscall.SIOCSLOWAT":                                   "syscall",
	"syscall.SIOCSPGRP":                                    "syscall",
	"syscall.SIOCSRARP":                                    "syscall",
	"syscall.SIOCSSPPPPARAMS":                              "syscall",
	"syscall.SIOCSVH":                                      "syscall",
	"syscall.SIOCSVNETID":                                  "syscall",
	"syscall.SIOCZIFDATA":                                  "syscall",
	"syscall.SIO_GET_EXTENSION_FUNCTION_POINTER":           "syscall",
	"syscall.SIO_GET_INTERFACE_LIST":                       "syscall",
	"syscall.SIO_KEEPALIVE_VALS":                           "syscall",
	"syscall.SIO_UDP_CONNRESET":                            "syscall",
	"syscall.SOCK_CLOEXEC":                                 "syscall",
	"syscall.SOCK_DCCP":                                    "syscall",
	"syscall.SOCK_DGRAM":                                   "syscall",
	"syscall.SOCK_FLAGS_MASK":                              "syscall",
	"syscall.SOCK_MAXADDRLEN":                              "syscall",
	"syscall.SOCK_NONBLOCK":                                "syscall",
	"syscall.SOCK_NOSIGPIPE":                               "syscall",
	"syscall.SOCK_PACKET":                                  "syscall",
	"syscall.SOCK_RAW":                                     "syscall",
	"syscall.SOCK_RDM":                                     "syscall",
	"syscall.SOCK_SEQPACKET":                               "syscall",
	"syscall.SOCK_STREAM":                                  "syscall",
	"syscall.SOL_AAL":                                      "syscall",
	"syscall.SOL_ATM":                                      "syscall",
	"syscall.SOL_DECNET":                                   "syscall",
	"syscall.SOL_ICMPV6":                                   "syscall",
	"syscall.SOL_IP":                                       "syscall",
	"syscall.SOL_IPV6":                                     "syscall",
	"syscall.SOL_IRDA":                                     "syscall",
	"syscall.SOL_PACKET":                                   "syscall",
	"syscall.SOL_RAW":                                      "syscall",
	"syscall.SOL_SOCKET":                                   "syscall",
	"syscall.SOL_TCP":                                      "syscall",
	"syscall.SOL_X25":                                      "syscall",
	"syscall.SOMAXCONN":                                    "syscall",
	"syscall.SO_ACCEPTCONN":                                "syscall",
	"syscall.SO_ACCEPTFILTER":                              "syscall",
	"syscall.SO_ATTACH_FILTER":                             "syscall",
	"syscall.SO_BINDANY":                                   "syscall",
	"syscall.SO_BINDTODEVICE":                              "syscall",
	"syscall.SO_BINTIME":                                   "syscall",
	"syscall.SO_BROADCAST":                                 "syscall",
	"syscall.SO_BSDCOMPAT":                                 "syscall",
	"syscall.SO_DEBUG":                                     "syscall",
	"syscall.SO_DETACH_FILTER":                             "syscall",
	"syscall.SO_DOMAIN":                                    "syscall",
	"syscall.SO_DONTROUTE":                                 "syscall",
	"syscall.SO_DONTTRUNC":                                 "syscall",
	"syscall.SO_ERROR":                                     "syscall",
	"syscall.SO_KEEPALIVE":                                 "syscall",
	"syscall.SO_LABEL":                                     "syscall",
	"syscall.SO_LINGER":                                    "syscall",
	"syscall.SO_LINGER_SEC":                                "syscall",
	"syscall.SO_LISTENINCQLEN":                             "syscall",
	"syscall.SO_LISTENQLEN":                                "syscall",
	"syscall.SO_LISTENQLIMIT":                              "syscall",
	"syscall.SO_MARK":                                      "syscall",
	"syscall.SO_NETPROC":                                   "syscall",
	"syscall.SO_NKE":                                       "syscall",
	"syscall.SO_NOADDRERR":                                 "syscall",
	"syscall.SO_NOHEADER":                                  "syscall",
	"syscall.SO_NOSIGPIPE":                                 "syscall",
	"syscall.SO_NOTIFYCONFLICT":                            "syscall",
	"syscall.SO_NO_CHECK":                                  "syscall",
	"syscall.SO_NO_DDP":                                    "syscall",
	"syscall.SO_NO_OFFLOAD":                                "syscall",
	"syscall.SO_NP_EXTENSIONS":                             "syscall",
	"syscall.SO_NREAD":                                     "syscall",
	"syscall.SO_NWRITE":                                    "syscall",
	"syscall.SO_OOBINLINE":                                 "syscall",
	"syscall.SO_OVERFLOWED":                                "syscall",
	"syscall.SO_PASSCRED":                                  "syscall",
	"syscall.SO_PASSSEC":                                   "syscall",
	"syscall.SO_PEERCRED":                                  "syscall",
	"syscall.SO_PEERLABEL":                                 "syscall",
	"syscall.SO_PEERNAME":                                  "syscall",
	"syscall.SO_PEERSEC":                                   "syscall",
	"syscall.SO_PRIORITY":                                  "syscall",
	"syscall.SO_PROTOCOL":                                  "syscall",
	"syscall.SO_PROTOTYPE":                                 "syscall",
	"syscall.SO_RANDOMPORT":                                "syscall",
	"syscall.SO_RCVBUF":                                    "syscall",
	"syscall.SO_RCVBUFFORCE":                               "syscall",
	"syscall.SO_RCVLOWAT":                                  "syscall",
	"syscall.SO_RCVTIMEO":                                  "syscall",
	"syscall.SO_RESTRICTIONS":                              "syscall",
	"syscall.SO_RESTRICT_DENYIN":                           "syscall",
	"syscall.SO_RESTRICT_DENYOUT":                          "syscall",
	"syscall.SO_RESTRICT_DENYSET":                          "syscall",
	"syscall.SO_REUSEADDR":                                 "syscall",
	"syscall.SO_REUSEPORT":                                 "syscall",
	"syscall.SO_REUSESHAREUID":                             "syscall",
	"syscall.SO_RTABLE":                                    "syscall",
	"syscall.SO_RXQ_OVFL":                                  "syscall",
	"syscall.SO_SECURITY_AUTHENTICATION":                   "syscall",
	"syscall.SO_SECURITY_ENCRYPTION_NETWORK":               "syscall",
	"syscall.SO_SECURITY_ENCRYPTION_TRANSPORT":             "syscall",
	"syscall.SO_SETFIB":                                    "syscall",
	"syscall.SO_SNDBUF":                                    "syscall",
	"syscall.SO_SNDBUFFORCE":                               "syscall",
	"syscall.SO_SNDLOWAT":                                  "syscall",
	"syscall.SO_SNDTIMEO":                                  "syscall",
	"syscall.SO_SPLICE":                                    "syscall",
	"syscall.SO_TIMESTAMP":                                 "syscall",
	"syscall.SO_TIMESTAMPING":                              "syscall",
	"syscall.SO_TIMESTAMPNS":                               "syscall",
	"syscall.SO_TIMESTAMP_MONOTONIC":                       "syscall",
	"syscall.SO_TYPE":                                      "syscall",
	"syscall.SO_UPCALLCLOSEWAIT":                           "syscall",
	"syscall.SO_UPDATE_ACCEPT_CONTEXT":                     "syscall",
	"syscall.SO_UPDATE_CONNECT_CONTEXT":                    "syscall",
	"syscall.SO_USELOOPBACK":                               "syscall",
	"syscall.SO_USER_COOKIE":                               "syscall",
	"syscall.SO_VENDOR":                                    "syscall",
	"syscall.SO_WANTMORE":                                  "syscall",
	"syscall.SO_WANTOOBFLAG":                               "syscall",
	"syscall.SSLExtraCertChainPolicyPara":                  "syscall",
	"syscall.STANDARD_RIGHTS_ALL":                          "syscall",
	"syscall.STANDARD_RIGHTS_EXECUTE":                      "syscall",
	"syscall.STANDARD_RIGHTS_READ":                         "syscall",
	"syscall.STANDARD_RIGHTS_REQUIRED":                     "syscall",
	"syscall.STANDARD_RIGHTS_WRITE":                        "syscall",
	"syscall.STARTF_USESHOWWINDOW":                         "syscall",
	"syscall.STARTF_USESTDHANDLES":                         "syscall",
	"syscall.STD_ERROR_HANDLE":                             "syscall",
	"syscall.STD_INPUT_HANDLE":                             "syscall",
	"syscall.STD_OUTPUT_HANDLE":                            "syscall",
	"syscall.SUBLANG_ENGLISH_US":                           "syscall",
	"syscall.SW_FORCEMINIMIZE":                             "syscall",
	"syscall.SW_HIDE":                                      "syscall",
	"syscall.SW_MAXIMIZE":                                  "syscall",
	"syscall.SW_MINIMIZE":                                  "syscall",
	"syscall.SW_NORMAL":                                    "syscall",
	"syscall.SW_RESTORE":                                   "syscall",
	"syscall.SW_SHOW":                                      "syscall",
	"syscall.SW_SHOWDEFAULT":                               "syscall",
	"syscall.SW_SHOWMAXIMIZED":                             "syscall",
	"syscall.SW_SHOWMINIMIZED":                             "syscall",
	"syscall.SW_SHOWMINNOACTIVE":                           "syscall",
	"syscall.SW_SHOWNA":                                    "syscall",
	"syscall.SW_SHOWNOACTIVATE":                            "syscall",
	"syscall.SW_SHOWNORMAL":                                "syscall",
	"syscall.SYMBOLIC_LINK_FLAG_DIRECTORY":                 "syscall",
	"syscall.SYNCHRONIZE":                                  "syscall",
	"syscall.SYSCTL_VERSION":                               "syscall",
	"syscall.SYSCTL_VERS_0":                                "syscall",
	"syscall.SYSCTL_VERS_1":                                "syscall",
	"syscall.SYSCTL_VERS_MASK":                             "syscall",
	"syscall.SYS_ABORT2":                                   "syscall",
	"syscall.SYS_ACCEPT":                                   "syscall",
	"syscall.SYS_ACCEPT4":                                  "syscall",
	"syscall.SYS_ACCEPT_NOCANCEL":                          "syscall",
	"syscall.SYS_ACCESS":                                   "syscall",
	"syscall.SYS_ACCESS_EXTENDED":                          "syscall",
	"syscall.SYS_ACCT":                                     "syscall",
	"syscall.SYS_ADD_KEY":                                  "syscall",
	"syscall.SYS_ADD_PROFIL":                               "syscall",
	"syscall.SYS_ADJFREQ":                                  "syscall",
	"syscall.SYS_ADJTIME":                                  "syscall",
	"syscall.SYS_ADJTIMEX":                                 "syscall",
	"syscall.SYS_AFS_SYSCALL":                              "syscall",
	"syscall.SYS_AIO_CANCEL":                               "syscall",
	"syscall.SYS_AIO_ERROR":                                "syscall",
	"syscall.SYS_AIO_FSYNC":                                "syscall",
	"syscall.SYS_AIO_READ":                                 "syscall",
	"syscall.SYS_AIO_RETURN":                               "syscall",
	"syscall.SYS_AIO_SUSPEND":                              "syscall",
	"syscall.SYS_AIO_SUSPEND_NOCANCEL":                     "syscall",
	"syscall.SYS_AIO_WRITE":                                "syscall",
	"syscall.SYS_ALARM":                                    "syscall",
	"syscall.SYS_ARCH_PRCTL":                               "syscall",
	"syscall.SYS_ARM_FADVISE64_64":                         "syscall",
	"syscall.SYS_ARM_SYNC_FILE_RANGE":                      "syscall",
	"syscall.SYS_ATGETMSG":                                 "syscall",
	"syscall.SYS_ATPGETREQ":                                "syscall",
	"syscall.SYS_ATPGETRSP":                                "syscall",
	"syscall.SYS_ATPSNDREQ":                                "syscall",
	"syscall.SYS_ATPSNDRSP":                                "syscall",
	"syscall.SYS_ATPUTMSG":                                 "syscall",
	"syscall.SYS_ATSOCKET":                                 "syscall",
	"syscall.SYS_AUDIT":                                    "syscall",
	"syscall.SYS_AUDITCTL":                                 "syscall",
	"syscall.SYS_AUDITON":                                  "syscall",
	"syscall.SYS_AUDIT_SESSION_JOIN":                       "syscall",
	"syscall.SYS_AUDIT_SESSION_PORT":                       "syscall",
	"syscall.SYS_AUDIT_SESSION_SELF":                       "syscall",
	"syscall.SYS_BDFLUSH":                                  "syscall",
	"syscall.SYS_BIND":                                     "syscall",
	"syscall.SYS_BINDAT":                                   "syscall",
	"syscall.SYS_BREAK":                                    "syscall",
	"syscall.SYS_BRK":                                      "syscall",
	"syscall.SYS_BSDTHREAD_CREATE":                         "syscall",
	"syscall.SYS_BSDTHREAD_REGISTER":                       "syscall",
	"syscall.SYS_BSDTHREAD_TERMINATE":                      "syscall",
	"syscall.SYS_CAPGET":                                   "syscall",
	"syscall.SYS_CAPSET":                                   "syscall",
	"syscall.SYS_CAP_ENTER":                                "syscall",
	"syscall.SYS_CAP_FCNTLS_GET":                           "syscall",
	"syscall.SYS_CAP_FCNTLS_LIMIT":                         "syscall",
	"syscall.SYS_CAP_GETMODE":                              "syscall",
	"syscall.SYS_CAP_GETRIGHTS":                            "syscall",
	"syscall.SYS_CAP_IOCTLS_GET":                           "syscall",
	"syscall.SYS_CAP_IOCTLS_LIMIT":                         "syscall",
	"syscall.SYS_CAP_NEW":                                  "syscall",
	"syscall.SYS_CAP_RIGHTS_GET":                           "syscall",
	"syscall.SYS_CAP_RIGHTS_LIMIT":                         "syscall",
	"syscall.SYS_CHDIR":                                    "syscall",
	"syscall.SYS_CHFLAGS":                                  "syscall",
	"syscall.SYS_CHFLAGSAT":                                "syscall",
	"syscall.SYS_CHMOD":                                    "syscall",
	"syscall.SYS_CHMOD_EXTENDED":                           "syscall",
	"syscall.SYS_CHOWN":                                    "syscall",
	"syscall.SYS_CHOWN32":                                  "syscall",
	"syscall.SYS_CHROOT":                                   "syscall",
	"syscall.SYS_CHUD":                                     "syscall",
	"syscall.SYS_CLOCK_ADJTIME":                            "syscall",
	"syscall.SYS_CLOCK_GETCPUCLOCKID2":                     "syscall",
	"syscall.SYS_CLOCK_GETRES":                             "syscall",
	"syscall.SYS_CLOCK_GETTIME":                            "syscall",
	"syscall.SYS_CLOCK_NANOSLEEP":                          "syscall",
	"syscall.SYS_CLOCK_SETTIME":                            "syscall",
	"syscall.SYS_CLONE":                                    "syscall",
	"syscall.SYS_CLOSE":                                    "syscall",
	"syscall.SYS_CLOSEFROM":                                "syscall",
	"syscall.SYS_CLOSE_NOCANCEL":                           "syscall",
	"syscall.SYS_CONNECT":                                  "syscall",
	"syscall.SYS_CONNECTAT":                                "syscall",
	"syscall.SYS_CONNECT_NOCANCEL":                         "syscall",
	"syscall.SYS_COPYFILE":                                 "syscall",
	"syscall.SYS_CPUSET":                                   "syscall",
	"syscall.SYS_CPUSET_GETAFFINITY":                       "syscall",
	"syscall.SYS_CPUSET_GETID":                             "syscall",
	"syscall.SYS_CPUSET_SETAFFINITY":                       "syscall",
	"syscall.SYS_CPUSET_SETID":                             "syscall",
	"syscall.SYS_CREAT":                                    "syscall",
	"syscall.SYS_CREATE_MODULE":                            "syscall",
	"syscall.SYS_CSOPS":                                    "syscall",
	"syscall.SYS_DELETE":                                   "syscall",
	"syscall.SYS_DELETE_MODULE":                            "syscall",
	"syscall.SYS_DUP":                                      "syscall",
	"syscall.SYS_DUP2":                                     "syscall",
	"syscall.SYS_DUP3":                                     "syscall",
	"syscall.SYS_EACCESS":                                  "syscall",
	"syscall.SYS_EPOLL_CREATE":                             "syscall",
	"syscall.SYS_EPOLL_CREATE1":                            "syscall",
	"syscall.SYS_EPOLL_CTL":                                "syscall",
	"syscall.SYS_EPOLL_CTL_OLD":                            "syscall",
	"syscall.SYS_EPOLL_PWAIT":                              "syscall",
	"syscall.SYS_EPOLL_WAIT":                               "syscall",
	"syscall.SYS_EPOLL_WAIT_OLD":                           "syscall",
	"syscall.SYS_EVENTFD":                                  "syscall",
	"syscall.SYS_EVENTFD2":                                 "syscall",
	"syscall.SYS_EXCHANGEDATA":                             "syscall",
	"syscall.SYS_EXECVE":                                   "syscall",
	"syscall.SYS_EXIT":                                     "syscall",
	"syscall.SYS_EXIT_GROUP":                               "syscall",
	"syscall.SYS_EXTATTRCTL":                               "syscall",
	"syscall.SYS_EXTATTR_DELETE_FD":                        "syscall",
	"syscall.SYS_EXTATTR_DELETE_FILE":                      "syscall",
	"syscall.SYS_EXTATTR_DELETE_LINK":                      "syscall",
	"syscall.SYS_EXTATTR_GET_FD":                           "syscall",
	"syscall.SYS_EXTATTR_GET_FILE":                         "syscall",
	"syscall.SYS_EXTATTR_GET_LINK":                         "syscall",
	"syscall.SYS_EXTATTR_LIST_FD":                          "syscall",
	"syscall.SYS_EXTATTR_LIST_FILE":                        "syscall",
	"syscall.SYS_EXTATTR_LIST_LINK":                        "syscall",
	"syscall.SYS_EXTATTR_SET_FD":                           "syscall",
	"syscall.SYS_EXTATTR_SET_FILE":                         "syscall",
	"syscall.SYS_EXTATTR_SET_LINK":                         "syscall",
	"syscall.SYS_FACCESSAT":                                "syscall",
	"syscall.SYS_FADVISE64":                                "syscall",
	"syscall.SYS_FADVISE64_64":                             "syscall",
	"syscall.SYS_FALLOCATE":                                "syscall",
	"syscall.SYS_FANOTIFY_INIT":                            "syscall",
	"syscall.SYS_FANOTIFY_MARK":                            "syscall",
	"syscall.SYS_FCHDIR":                                   "syscall",
	"syscall.SYS_FCHFLAGS":                                 "syscall",
	"syscall.SYS_FCHMOD":                                   "syscall",
	"syscall.SYS_FCHMODAT":                                 "syscall",
	"syscall.SYS_FCHMOD_EXTENDED":                          "syscall",
	"syscall.SYS_FCHOWN":                                   "syscall",
	"syscall.SYS_FCHOWN32":                                 "syscall",
	"syscall.SYS_FCHOWNAT":                                 "syscall",
	"syscall.SYS_FCHROOT":                                  "syscall",
	"syscall.SYS_FCNTL":                                    "syscall",
	"syscall.SYS_FCNTL64":                                  "syscall",
	"syscall.SYS_FCNTL_NOCANCEL":                           "syscall",
	"syscall.SYS_FDATASYNC":                                "syscall",
	"syscall.SYS_FEXECVE":                                  "syscall",
	"syscall.SYS_FFCLOCK_GETCOUNTER":                       "syscall",
	"syscall.SYS_FFCLOCK_GETESTIMATE":                      "syscall",
	"syscall.SYS_FFCLOCK_SETESTIMATE":                      "syscall",
	"syscall.SYS_FFSCTL":                                   "syscall",
	"syscall.SYS_FGETATTRLIST":                             "syscall",
	"syscall.SYS_FGETXATTR":                                "syscall",
	"syscall.SYS_FHOPEN":                                   "syscall",
	"syscall.SYS_FHSTAT":                                   "syscall",
	"syscall.SYS_FHSTATFS":                                 "syscall",
	"syscall.SYS_FILEPORT_MAKEFD":                          "syscall",
	"syscall.SYS_FILEPORT_MAKEPORT":                        "syscall",
	"syscall.SYS_FKTRACE":                                  "syscall",
	"syscall.SYS_FLISTXATTR":                               "syscall",
	"syscall.SYS_FLOCK":                                    "syscall",
	"syscall.SYS_FORK":                                     "syscall",
	"syscall.SYS_FPATHCONF":                                "syscall",
	"syscall.SYS_FREEBSD6_FTRUNCATE":                       "syscall",
	"syscall.SYS_FREEBSD6_LSEEK":                           "syscall",
	"syscall.SYS_FREEBSD6_MMAP":                            "syscall",
	"syscall.SYS_FREEBSD6_PREAD":                           "syscall",
	"syscall.SYS_FREEBSD6_PWRITE":                          "syscall",
	"syscall.SYS_FREEBSD6_TRUNCATE":                        "syscall",
	"syscall.SYS_FREMOVEXATTR":                             "syscall",
	"syscall.SYS_FSCTL":                                    "syscall",
	"syscall.SYS_FSETATTRLIST":                             "syscall",
	"syscall.SYS_FSETXATTR":                                "syscall",
	"syscall.SYS_FSGETPATH":                                "syscall",
	"syscall.SYS_FSTAT":                                    "syscall",
	"syscall.SYS_FSTAT64":                                  "syscall",
	"syscall.SYS_FSTAT64_EXTENDED":                         "syscall",
	"syscall.SYS_FSTATAT":                                  "syscall",
	"syscall.SYS_FSTATAT64":                                "syscall",
	"syscall.SYS_FSTATFS":                                  "syscall",
	"syscall.SYS_FSTATFS64":                                "syscall",
	"syscall.SYS_FSTATV":                                   "syscall",
	"syscall.SYS_FSTATVFS1":                                "syscall",
	"syscall.SYS_FSTAT_EXTENDED":                           "syscall",
	"syscall.SYS_FSYNC":                                    "syscall",
	"syscall.SYS_FSYNC_NOCANCEL":                           "syscall",
	"syscall.SYS_FSYNC_RANGE":                              "syscall",
	"syscall.SYS_FTIME":                                    "syscall",
	"syscall.SYS_FTRUNCATE":                                "syscall",
	"syscall.SYS_FTRUNCATE64":                              "syscall",
	"syscall.SYS_FUTEX":                                    "syscall",
	"syscall.SYS_FUTIMENS":                                 "syscall",
	"syscall.SYS_FUTIMES":                                  "syscall",
	"syscall.SYS_FUTIMESAT":                                "syscall",
	"syscall.SYS_GETATTRLIST":                              "syscall",
	"syscall.SYS_GETAUDIT":                                 "syscall",
	"syscall.SYS_GETAUDIT_ADDR":                            "syscall",
	"syscall.SYS_GETAUID":                                  "syscall",
	"syscall.SYS_GETCONTEXT":                               "syscall",
	"syscall.SYS_GETCPU":                                   "syscall",
	"syscall.SYS_GETCWD":                                   "syscall",
	"syscall.SYS_GETDENTS":                                 "syscall",
	"syscall.SYS_GETDENTS64":                               "syscall",
	"syscall.SYS_GETDIRENTRIES":                            "syscall",
	"syscall.SYS_GETDIRENTRIES64":                          "syscall",
	"syscall.SYS_GETDIRENTRIESATTR":                        "syscall",
	"syscall.SYS_GETDTABLECOUNT":                           "syscall",
	"syscall.SYS_GETDTABLESIZE":                            "syscall",
	"syscall.SYS_GETEGID":                                  "syscall",
	"syscall.SYS_GETEGID32":                                "syscall",
	"syscall.SYS_GETEUID":                                  "syscall",
	"syscall.SYS_GETEUID32":                                "syscall",
	"syscall.SYS_GETFH":                                    "syscall",
	"syscall.SYS_GETFSSTAT":                                "syscall",
	"syscall.SYS_GETFSSTAT64":                              "syscall",
	"syscall.SYS_GETGID":                                   "syscall",
	"syscall.SYS_GETGID32":                                 "syscall",
	"syscall.SYS_GETGROUPS":                                "syscall",
	"syscall.SYS_GETGROUPS32":                              "syscall",
	"syscall.SYS_GETHOSTUUID":                              "syscall",
	"syscall.SYS_GETITIMER":                                "syscall",
	"syscall.SYS_GETLCID":                                  "syscall",
	"syscall.SYS_GETLOGIN":                                 "syscall",
	"syscall.SYS_GETLOGINCLASS":                            "syscall",
	"syscall.SYS_GETPEERNAME":                              "syscall",
	"syscall.SYS_GETPGID":                                  "syscall",
	"syscall.SYS_GETPGRP":                                  "syscall",
	"syscall.SYS_GETPID":                                   "syscall",
	"syscall.SYS_GETPMSG":                                  "syscall",
	"syscall.SYS_GETPPID":                                  "syscall",
	"syscall.SYS_GETPRIORITY":                              "syscall",
	"syscall.SYS_GETRESGID":                                "syscall",
	"syscall.SYS_GETRESGID32":                              "syscall",
	"syscall.SYS_GETRESUID":                                "syscall",
	"syscall.SYS_GETRESUID32":                              "syscall",
	"syscall.SYS_GETRLIMIT":                                "syscall",
	"syscall.SYS_GETRTABLE":                                "syscall",
	"syscall.SYS_GETRUSAGE":                                "syscall",
	"syscall.SYS_GETSGROUPS":                               "syscall",
	"syscall.SYS_GETSID":                                   "syscall",
	"syscall.SYS_GETSOCKNAME":                              "syscall",
	"syscall.SYS_GETSOCKOPT":                               "syscall",
	"syscall.SYS_GETTHRID":                                 "syscall",
	"syscall.SYS_GETTID":                                   "syscall",
	"syscall.SYS_GETTIMEOFDAY":                             "syscall",
	"syscall.SYS_GETUID":                                   "syscall",
	"syscall.SYS_GETUID32":                                 "syscall",
	"syscall.SYS_GETVFSSTAT":                               "syscall",
	"syscall.SYS_GETWGROUPS":                               "syscall",
	"syscall.SYS_GETXATTR":                                 "syscall",
	"syscall.SYS_GET_KERNEL_SYMS":                          "syscall",
	"syscall.SYS_GET_MEMPOLICY":                            "syscall",
	"syscall.SYS_GET_ROBUST_LIST":                          "syscall",
	"syscall.SYS_GET_THREAD_AREA":                          "syscall",
	"syscall.SYS_GTTY":                                     "syscall",
	"syscall.SYS_IDENTITYSVC":                              "syscall",
	"syscall.SYS_IDLE":                                     "syscall",
	"syscall.SYS_INITGROUPS":                               "syscall",
	"syscall.SYS_INIT_MODULE":                              "syscall",
	"syscall.SYS_INOTIFY_ADD_WATCH":                        "syscall",
	"syscall.SYS_INOTIFY_INIT":                             "syscall",
	"syscall.SYS_INOTIFY_INIT1":                            "syscall",
	"syscall.SYS_INOTIFY_RM_WATCH":                         "syscall",
	"syscall.SYS_IOCTL":                                    "syscall",
	"syscall.SYS_IOPERM":                                   "syscall",
	"syscall.SYS_IOPL":                                     "syscall",
	"syscall.SYS_IOPOLICYSYS":                              "syscall",
	"syscall.SYS_IOPRIO_GET":                               "syscall",
	"syscall.SYS_IOPRIO_SET":                               "syscall",
	"syscall.SYS_IO_CANCEL":                                "syscall",
	"syscall.SYS_IO_DESTROY":                               "syscall",
	"syscall.SYS_IO_GETEVENTS":                             "syscall",
	"syscall.SYS_IO_SETUP":                                 "syscall",
	"syscall.SYS_IO_SUBMIT":                                "syscall",
	"syscall.SYS_IPC":                                      "syscall",
	"syscall.SYS_ISSETUGID":                                "syscall",
	"syscall.SYS_JAIL":                                     "syscall",
	"syscall.SYS_JAIL_ATTACH":                              "syscall",
	"syscall.SYS_JAIL_GET":                                 "syscall",
	"syscall.SYS_JAIL_REMOVE":                              "syscall",
	"syscall.SYS_JAIL_SET":                                 "syscall",
	"syscall.SYS_KDEBUG_TRACE":                             "syscall",
	"syscall.SYS_KENV":                                     "syscall",
	"syscall.SYS_KEVENT":                                   "syscall",
	"syscall.SYS_KEVENT64":                                 "syscall",
	"syscall.SYS_KEXEC_LOAD":                               "syscall",
	"syscall.SYS_KEYCTL":                                   "syscall",
	"syscall.SYS_KILL":                                     "syscall",
	"syscall.SYS_KLDFIND":                                  "syscall",
	"syscall.SYS_KLDFIRSTMOD":                              "syscall",
	"syscall.SYS_KLDLOAD":                                  "syscall",
	"syscall.SYS_KLDNEXT":                                  "syscall",
	"syscall.SYS_KLDSTAT":                                  "syscall",
	"syscall.SYS_KLDSYM":                                   "syscall",
	"syscall.SYS_KLDUNLOAD":                                "syscall",
	"syscall.SYS_KLDUNLOADF":                               "syscall",
	"syscall.SYS_KQUEUE":                                   "syscall",
	"syscall.SYS_KQUEUE1":                                  "syscall",
	"syscall.SYS_KTIMER_CREATE":                            "syscall",
	"syscall.SYS_KTIMER_DELETE":                            "syscall",
	"syscall.SYS_KTIMER_GETOVERRUN":                        "syscall",
	"syscall.SYS_KTIMER_GETTIME":                           "syscall",
	"syscall.SYS_KTIMER_SETTIME":                           "syscall",
	"syscall.SYS_KTRACE":                                   "syscall",
	"syscall.SYS_LCHFLAGS":                                 "syscall",
	"syscall.SYS_LCHMOD":                                   "syscall",
	"syscall.SYS_LCHOWN":                                   "syscall",
	"syscall.SYS_LCHOWN32":                                 "syscall",
	"syscall.SYS_LGETFH":                                   "syscall",
	"syscall.SYS_LGETXATTR":                                "syscall",
	"syscall.SYS_LINK":                                     "syscall",
	"syscall.SYS_LINKAT":                                   "syscall",
	"syscall.SYS_LIO_LISTIO":                               "syscall",
	"syscall.SYS_LISTEN":                                   "syscall",
	"syscall.SYS_LISTXATTR":                                "syscall",
	"syscall.SYS_LLISTXATTR":                               "syscall",
	"syscall.SYS_LOCK":                                     "syscall",
	"syscall.SYS_LOOKUP_DCOOKIE":                           "syscall",
	"syscall.SYS_LPATHCONF":                                "syscall",
	"syscall.SYS_LREMOVEXATTR":                             "syscall",
	"syscall.SYS_LSEEK":                                    "syscall",
	"syscall.SYS_LSETXATTR":                                "syscall",
	"syscall.SYS_LSTAT":                                    "syscall",
	"syscall.SYS_LSTAT64":                                  "syscall",
	"syscall.SYS_LSTAT64_EXTENDED":                         "syscall",
	"syscall.SYS_LSTATV":                                   "syscall",
	"syscall.SYS_LSTAT_EXTENDED":                           "syscall",
	"syscall.SYS_LUTIMES":                                  "syscall",
	"syscall.SYS_MAC_SYSCALL":                              "syscall",
	"syscall.SYS_MADVISE":                                  "syscall",
	"syscall.SYS_MADVISE1":                                 "syscall",
	"syscall.SYS_MAXSYSCALL":                               "syscall",
	"syscall.SYS_MBIND":                                    "syscall",
	"syscall.SYS_MIGRATE_PAGES":                            "syscall",
	"syscall.SYS_MINCORE":                                  "syscall",
	"syscall.SYS_MINHERIT":                                 "syscall",
	"syscall.SYS_MKCOMPLEX":                                "syscall",
	"syscall.SYS_MKDIR":                                    "syscall",
	"syscall.SYS_MKDIRAT":                                  "syscall",
	"syscall.SYS_MKDIR_EXTENDED":                           "syscall",
	"syscall.SYS_MKFIFO":                                   "syscall",
	"syscall.SYS_MKFIFOAT":                                 "syscall",
	"syscall.SYS_MKFIFO_EXTENDED":                          "syscall",
	"syscall.SYS_MKNOD":                                    "syscall",
	"syscall.SYS_MKNODAT":                                  "syscall",
	"syscall.SYS_MLOCK":                                    "syscall",
	"syscall.SYS_MLOCKALL":                                 "syscall",
	"syscall.SYS_MMAP":                                     "syscall",
	"syscall.SYS_MMAP2":                                    "syscall",
	"syscall.SYS_MODCTL":                                   "syscall",
	"syscall.SYS_MODFIND":                                  "syscall",
	"syscall.SYS_MODFNEXT":                                 "syscall",
	"syscall.SYS_MODIFY_LDT":                               "syscall",
	"syscall.SYS_MODNEXT":                                  "syscall",
	"syscall.SYS_MODSTAT":                                  "syscall",
	"syscall.SYS_MODWATCH":                                 "syscall",
	"syscall.SYS_MOUNT":                                    "syscall",
	"syscall.SYS_MOVE_PAGES":                               "syscall",
	"syscall.SYS_MPROTECT":                                 "syscall",
	"syscall.SYS_MPX":                                      "syscall",
	"syscall.SYS_MQUERY":                                   "syscall",
	"syscall.SYS_MQ_GETSETATTR":                            "syscall",
	"syscall.SYS_MQ_NOTIFY":                                "syscall",
	"syscall.SYS_MQ_OPEN":                                  "syscall",
	"syscall.SYS_MQ_TIMEDRECEIVE":                          "syscall",
	"syscall.SYS_MQ_TIMEDSEND":                             "syscall",
	"syscall.SYS_MQ_UNLINK":                                "syscall",
	"syscall.SYS_MREMAP":                                   "syscall",
	"syscall.SYS_MSGCTL":                                   "syscall",
	"syscall.SYS_MSGGET":                                   "syscall",
	"syscall.SYS_MSGRCV":                                   "syscall",
	"syscall.SYS_MSGRCV_NOCANCEL":                          "syscall",
	"syscall.SYS_MSGSND":                                   "syscall",
	"syscall.SYS_MSGSND_NOCANCEL":                          "syscall",
	"syscall.SYS_MSGSYS":                                   "syscall",
	"syscall.SYS_MSYNC":                                    "syscall",
	"syscall.SYS_MSYNC_NOCANCEL":                           "syscall",
	"syscall.SYS_MUNLOCK":                                  "syscall",
	"syscall.SYS_MUNLOCKALL":                               "syscall",
	"syscall.SYS_MUNMAP":                                   "syscall",
	"syscall.SYS_NAME_TO_HANDLE_AT":                        "syscall",
	"syscall.SYS_NANOSLEEP":                                "syscall",
	"syscall.SYS_NEWFSTATAT":                               "syscall",
	"syscall.SYS_NFSCLNT":                                  "syscall",
	"syscall.SYS_NFSSERVCTL":                               "syscall",
	"syscall.SYS_NFSSVC":                                   "syscall",
	"syscall.SYS_NFSTAT":                                   "syscall",
	"syscall.SYS_NICE":                                     "syscall",
	"syscall.SYS_NLSTAT":                                   "syscall",
	"syscall.SYS_NMOUNT":                                   "syscall",
	"syscall.SYS_NSTAT":                                    "syscall",
	"syscall.SYS_NTP_ADJTIME":                              "syscall",
	"syscall.SYS_NTP_GETTIME":                              "syscall",
	"syscall.SYS_OABI_SYSCALL_BASE":                        "syscall",
	"syscall.SYS_OBREAK":                                   "syscall",
	"syscall.SYS_OLDFSTAT":                                 "syscall",
	"syscall.SYS_OLDLSTAT":                                 "syscall",
	"syscall.SYS_OLDOLDUNAME":                              "syscall",
	"syscall.SYS_OLDSTAT":                                  "syscall",
	"syscall.SYS_OLDUNAME":                                 "syscall",
	"syscall.SYS_OPEN":                                     "syscall",
	"syscall.SYS_OPENAT":                                   "syscall",
	"syscall.SYS_OPENBSD_POLL":                             "syscall",
	"syscall.SYS_OPEN_BY_HANDLE_AT":                        "syscall",
	"syscall.SYS_OPEN_EXTENDED":                            "syscall",
	"syscall.SYS_OPEN_NOCANCEL":                            "syscall",
	"syscall.SYS_OVADVISE":                                 "syscall",
	"syscall.SYS_PACCEPT":                                  "syscall",
	"syscall.SYS_PATHCONF":                                 "syscall",
	"syscall.SYS_PAUSE":                                    "syscall",
	"syscall.SYS_PCICONFIG_IOBASE":                         "syscall",
	"syscall.SYS_PCICONFIG_READ":                           "syscall",
	"syscall.SYS_PCICONFIG_WRITE":                          "syscall",
	"syscall.SYS_PDFORK":                                   "syscall",
	"syscall.SYS_PDGETPID":                                 "syscall",
	"syscall.SYS_PDKILL":                                   "syscall",
	"syscall.SYS_PERF_EVENT_OPEN":                          "syscall",
	"syscall.SYS_PERSONALITY":                              "syscall",
	"syscall.SYS_PID_HIBERNATE":                            "syscall",
	"syscall.SYS_PID_RESUME":                               "syscall",
	"syscall.SYS_PID_SHUTDOWN_SOCKETS":                     "syscall",
	"syscall.SYS_PID_SUSPEND":                              "syscall",
	"syscall.SYS_PIPE":                                     "syscall",
	"syscall.SYS_PIPE2":                                    "syscall",
	"syscall.SYS_PIVOT_ROOT":                               "syscall",
	"syscall.SYS_PMC_CONTROL":                              "syscall",
	"syscall.SYS_PMC_GET_INFO":                             "syscall",
	"syscall.SYS_POLL":                                     "syscall",
	"syscall.SYS_POLLTS":                                   "syscall",
	"syscall.SYS_POLL_NOCANCEL":                            "syscall",
	"syscall.SYS_POSIX_FADVISE":                            "syscall",
	"syscall.SYS_POSIX_FALLOCATE":                          "syscall",
	"syscall.SYS_POSIX_OPENPT":                             "syscall",
	"syscall.SYS_POSIX_SPAWN":                              "syscall",
	"syscall.SYS_PPOLL":                                    "syscall",
	"syscall.SYS_PRCTL":                                    "syscall",
	"syscall.SYS_PREAD":                                    "syscall",
	"syscall.SYS_PREAD64":                                  "syscall",
	"syscall.SYS_PREADV":                                   "syscall",
	"syscall.SYS_PREAD_NOCANCEL":                           "syscall",
	"syscall.SYS_PRLIMIT64":                                "syscall",
	"syscall.SYS_PROCCTL":                                  "syscall",
	"syscall.SYS_PROCESS_POLICY":                           "syscall",
	"syscall.SYS_PROCESS_VM_READV":                         "syscall",
	"syscall.SYS_PROCESS_VM_WRITEV":                        "syscall",
	"syscall.SYS_PROC_INFO":                                "syscall",
	"syscall.SYS_PROF":                                     "syscall",
	"syscall.SYS_PROFIL":                                   "syscall",
	"syscall.SYS_PSELECT":                                  "syscall",
	"syscall.SYS_PSELECT6":                                 "syscall",
	"syscall.SYS_PSET_ASSIGN":                              "syscall",
	"syscall.SYS_PSET_CREATE":                              "syscall",
	"syscall.SYS_PSET_DESTROY":                             "syscall",
	"syscall.SYS_PSYNCH_CVBROAD":                           "syscall",
	"syscall.SYS_PSYNCH_CVCLRPREPOST":                      "syscall",
	"syscall.SYS_PSYNCH_CVSIGNAL":                          "syscall",
	"syscall.SYS_PSYNCH_CVWAIT":                            "syscall",
	"syscall.SYS_PSYNCH_MUTEXDROP":                         "syscall",
	"syscall.SYS_PSYNCH_MUTEXWAIT":                         "syscall",
	"syscall.SYS_PSYNCH_RW_DOWNGRADE":                      "syscall",
	"syscall.SYS_PSYNCH_RW_LONGRDLOCK":                     "syscall",
	"syscall.SYS_PSYNCH_RW_RDLOCK":                         "syscall",
	"syscall.SYS_PSYNCH_RW_UNLOCK":                         "syscall",
	"syscall.SYS_PSYNCH_RW_UNLOCK2":                        "syscall",
	"syscall.SYS_PSYNCH_RW_UPGRADE":                        "syscall",
	"syscall.SYS_PSYNCH_RW_WRLOCK":                         "syscall",
	"syscall.SYS_PSYNCH_RW_YIELDWRLOCK":                    "syscall",
	"syscall.SYS_PTRACE":                                   "syscall",
	"syscall.SYS_PUTPMSG":                                  "syscall",
	"syscall.SYS_PWRITE":                                   "syscall",
	"syscall.SYS_PWRITE64":                                 "syscall",
	"syscall.SYS_PWRITEV":                                  "syscall",
	"syscall.SYS_PWRITE_NOCANCEL":                          "syscall",
	"syscall.SYS_QUERY_MODULE":                             "syscall",
	"syscall.SYS_QUOTACTL":                                 "syscall",
	"syscall.SYS_RASCTL":                                   "syscall",
	"syscall.SYS_RCTL_ADD_RULE":                            "syscall",
	"syscall.SYS_RCTL_GET_LIMITS":                          "syscall",
	"syscall.SYS_RCTL_GET_RACCT":                           "syscall",
	"syscall.SYS_RCTL_GET_RULES":                           "syscall",
	"syscall.SYS_RCTL_REMOVE_RULE":                         "syscall",
	"syscall.SYS_READ":                                     "syscall",
	"syscall.SYS_READAHEAD":                                "syscall",
	"syscall.SYS_READDIR":                                  "syscall",
	"syscall.SYS_READLINK":                                 "syscall",
	"syscall.SYS_READLINKAT":                               "syscall",
	"syscall.SYS_READV":                                    "syscall",
	"syscall.SYS_READV_NOCANCEL":                           "syscall",
	"syscall.SYS_READ_NOCANCEL":                            "syscall",
	"syscall.SYS_REBOOT":                                   "syscall",
	"syscall.SYS_RECV":                                     "syscall",
	"syscall.SYS_RECVFROM":                                 "syscall",
	"syscall.SYS_RECVFROM_NOCANCEL":                        "syscall",
	"syscall.SYS_RECVMMSG":                                 "syscall",
	"syscall.SYS_RECVMSG":                                  "syscall",
	"syscall.SYS_RECVMSG_NOCANCEL":                         "syscall",
	"syscall.SYS_REMAP_FILE_PAGES":                         "syscall",
	"syscall.SYS_REMOVEXATTR":                              "syscall",
	"syscall.SYS_RENAME":                                   "syscall",
	"syscall.SYS_RENAMEAT":                                 "syscall",
	"syscall.SYS_REQUEST_KEY":                              "syscall",
	"syscall.SYS_RESTART_SYSCALL":                          "syscall",
	"syscall.SYS_REVOKE":                                   "syscall",
	"syscall.SYS_RFORK":                                    "syscall",
	"syscall.SYS_RMDIR":                                    "syscall",
	"syscall.SYS_RTPRIO":                                   "syscall",
	"syscall.SYS_RTPRIO_THREAD":                            "syscall",
	"syscall.SYS_RT_SIGACTION":                             "syscall",
	"syscall.SYS_RT_SIGPENDING":                            "syscall",
	"syscall.SYS_RT_SIGPROCMASK":                           "syscall",
	"syscall.SYS_RT_SIGQUEUEINFO":                          "syscall",
	"syscall.SYS_RT_SIGRETURN":                             "syscall",
	"syscall.SYS_RT_SIGSUSPEND":                            "syscall",
	"syscall.SYS_RT_SIGTIMEDWAIT":                          "syscall",
	"syscall.SYS_RT_TGSIGQUEUEINFO":                        "syscall",
	"syscall.SYS_SBRK":                                     "syscall",
	"syscall.SYS_SCHED_GETAFFINITY":                        "syscall",
	"syscall.SYS_SCHED_GETPARAM":                           "syscall",
	"syscall.SYS_SCHED_GETSCHEDULER":                       "syscall",
	"syscall.SYS_SCHED_GET_PRIORITY_MAX":                   "syscall",
	"syscall.SYS_SCHED_GET_PRIORITY_MIN":                   "syscall",
	"syscall.SYS_SCHED_RR_GET_INTERVAL":                    "syscall",
	"syscall.SYS_SCHED_SETAFFINITY":                        "syscall",
	"syscall.SYS_SCHED_SETPARAM":                           "syscall",
	"syscall.SYS_SCHED_SETSCHEDULER":                       "syscall",
	"syscall.SYS_SCHED_YIELD":                              "syscall",
	"syscall.SYS_SCTP_GENERIC_RECVMSG":                     "syscall",
	"syscall.SYS_SCTP_GENERIC_SENDMSG":                     "syscall",
	"syscall.SYS_SCTP_GENERIC_SENDMSG_IOV":                 "syscall",
	"syscall.SYS_SCTP_PEELOFF":                             "syscall",
	"syscall.SYS_SEARCHFS":                                 "syscall",
	"syscall.SYS_SECURITY":                                 "syscall",
	"syscall.SYS_SELECT":                                   "syscall",
	"syscall.SYS_SELECT_NOCANCEL":                          "syscall",
	"syscall.SYS_SEMCONFIG":                                "syscall",
	"syscall.SYS_SEMCTL":                                   "syscall",
	"syscall.SYS_SEMGET":                                   "syscall",
	"syscall.SYS_SEMOP":                                    "syscall",
	"syscall.SYS_SEMSYS":                                   "syscall",
	"syscall.SYS_SEMTIMEDOP":                               "syscall",
	"syscall.SYS_SEM_CLOSE":                                "syscall",
	"syscall.SYS_SEM_DESTROY":                              "syscall",
	"syscall.SYS_SEM_GETVALUE":                             "syscall",
	"syscall.SYS_SEM_INIT":                                 "syscall",
	"syscall.SYS_SEM_OPEN":                                 "syscall",
	"syscall.SYS_SEM_POST":                                 "syscall",
	"syscall.SYS_SEM_TRYWAIT":                              "syscall",
	"syscall.SYS_SEM_UNLINK":                               "syscall",
	"syscall.SYS_SEM_WAIT":                                 "syscall",
	"syscall.SYS_SEM_WAIT_NOCANCEL":                        "syscall",
	"syscall.SYS_SEND":                                     "syscall",
	"syscall.SYS_SENDFILE":                                 "syscall",
	"syscall.SYS_SENDFILE64":                               "syscall",
	"syscall.SYS_SENDMMSG":                                 "syscall",
	"syscall.SYS_SENDMSG":                                  "syscall",
	"syscall.SYS_SENDMSG_NOCANCEL":                         "syscall",
	"syscall.SYS_SENDTO":                                   "syscall",
	"syscall.SYS_SENDTO_NOCANCEL":                          "syscall",
	"syscall.SYS_SETATTRLIST":                              "syscall",
	"syscall.SYS_SETAUDIT":                                 "syscall",
	"syscall.SYS_SETAUDIT_ADDR":                            "syscall",
	"syscall.SYS_SETAUID":                                  "syscall",
	"syscall.SYS_SETCONTEXT":                               "syscall",
	"syscall.SYS_SETDOMAINNAME":                            "syscall",
	"syscall.SYS_SETEGID":                                  "syscall",
	"syscall.SYS_SETEUID":                                  "syscall",
	"syscall.SYS_SETFIB":                                   "syscall",
	"syscall.SYS_SETFSGID":                                 "syscall",
	"syscall.SYS_SETFSGID32":                               "syscall",
	"syscall.SYS_SETFSUID":                                 "syscall",
	"syscall.SYS_SETFSUID32":                               "syscall",
	"syscall.SYS_SETGID":                                   "syscall",
	"syscall.SYS_SETGID32":                                 "syscall",
	"syscall.SYS_SETGROUPS":                                "syscall",
	"syscall.SYS_SETGROUPS32":                              "syscall",
	"syscall.SYS_SETHOSTNAME":                              "syscall",
	"syscall.SYS_SETITIMER":                                "syscall",
	"syscall.SYS_SETLCID":                                  "syscall",
	"syscall.SYS_SETLOGIN":                                 "syscall",
	"syscall.SYS_SETLOGINCLASS":                            "syscall",
	"syscall.SYS_SETNS":                                    "syscall",
	"syscall.SYS_SETPGID":                                  "syscall",
	"syscall.SYS_SETPRIORITY":                              "syscall",
	"syscall.SYS_SETPRIVEXEC":                              "syscall",
	"syscall.SYS_SETREGID":                                 "syscall",
	"syscall.SYS_SETREGID32":                               "syscall",
	"syscall.SYS_SETRESGID":                                "syscall",
	"syscall.SYS_SETRESGID32":                              "syscall",
	"syscall.SYS_SETRESUID":                                "syscall",
	"syscall.SYS_SETRESUID32":                              "syscall",
	"syscall.SYS_SETREUID":                                 "syscall",
	"syscall.SYS_SETREUID32":                               "syscall",
	"syscall.SYS_SETRLIMIT":                                "syscall",
	"syscall.SYS_SETRTABLE":                                "syscall",
	"syscall.SYS_SETSGROUPS":                               "syscall",
	"syscall.SYS_SETSID":                                   "syscall",
	"syscall.SYS_SETSOCKOPT":                               "syscall",
	"syscall.SYS_SETTID":                                   "syscall",
	"syscall.SYS_SETTID_WITH_PID":                          "syscall",
	"syscall.SYS_SETTIMEOFDAY":                             "syscall",
	"syscall.SYS_SETUID":                                   "syscall",
	"syscall.SYS_SETUID32":                                 "syscall",
	"syscall.SYS_SETWGROUPS":                               "syscall",
	"syscall.SYS_SETXATTR":                                 "syscall",
	"syscall.SYS_SET_MEMPOLICY":                            "syscall",
	"syscall.SYS_SET_ROBUST_LIST":                          "syscall",
	"syscall.SYS_SET_THREAD_AREA":                          "syscall",
	"syscall.SYS_SET_TID_ADDRESS":                          "syscall",
	"syscall.SYS_SGETMASK":                                 "syscall",
	"syscall.SYS_SHARED_REGION_CHECK_NP":                   "syscall",
	"syscall.SYS_SHARED_REGION_MAP_AND_SLIDE_NP":           "syscall",
	"syscall.SYS_SHMAT":                                    "syscall",
	"syscall.SYS_SHMCTL":                                   "syscall",
	"syscall.SYS_SHMDT":                                    "syscall",
	"syscall.SYS_SHMGET":                                   "syscall",
	"syscall.SYS_SHMSYS":                                   "syscall",
	"syscall.SYS_SHM_OPEN":                                 "syscall",
	"syscall.SYS_SHM_UNLINK":                               "syscall",
	"syscall.SYS_SHUTDOWN":                                 "syscall",
	"syscall.SYS_SIGACTION":                                "syscall",
	"syscall.SYS_SIGALTSTACK":                              "syscall",
	"syscall.SYS_SIGNAL":                                   "syscall",
	"syscall.SYS_SIGNALFD":                                 "syscall",
	"syscall.SYS_SIGNALFD4":                                "syscall",
	"syscall.SYS_SIGPENDING":                               "syscall",
	"syscall.SYS_SIGPROCMASK":                              "syscall",
	"syscall.SYS_SIGQUEUE":                                 "syscall",
	"syscall.SYS_SIGQUEUEINFO":                             "syscall",
	"syscall.SYS_SIGRETURN":                                "syscall",
	"syscall.SYS_SIGSUSPEND":                               "syscall",
	"syscall.SYS_SIGSUSPEND_NOCANCEL":                      "syscall",
	"syscall.SYS_SIGTIMEDWAIT":                             "syscall",
	"syscall.SYS_SIGWAIT":                                  "syscall",
	"syscall.SYS_SIGWAITINFO":                              "syscall",
	"syscall.SYS_SOCKET":                                   "syscall",
	"syscall.SYS_SOCKETCALL":                               "syscall",
	"syscall.SYS_SOCKETPAIR":                               "syscall",
	"syscall.SYS_SPLICE":                                   "syscall",
	"syscall.SYS_SSETMASK":                                 "syscall",
	"syscall.SYS_SSTK":                                     "syscall",
	"syscall.SYS_STACK_SNAPSHOT":                           "syscall",
	"syscall.SYS_STAT":                                     "syscall",
	"syscall.SYS_STAT64":                                   "syscall",
	"syscall.SYS_STAT64_EXTENDED":                          "syscall",
	"syscall.SYS_STATFS":                                   "syscall",
	"syscall.SYS_STATFS64":                                 "syscall",
	"syscall.SYS_STATV":                                    "syscall",
	"syscall.SYS_STATVFS1":                                 "syscall",
	"syscall.SYS_STAT_EXTENDED":                            "syscall",
	"syscall.SYS_STIME":                                    "syscall",
	"syscall.SYS_STTY":                                     "syscall",
	"syscall.SYS_SWAPCONTEXT":                              "syscall",
	"syscall.SYS_SWAPCTL":                                  "syscall",
	"syscall.SYS_SWAPOFF":                                  "syscall",
	"syscall.SYS_SWAPON":                                   "syscall",
	"syscall.SYS_SYMLINK":                                  "syscall",
	"syscall.SYS_SYMLINKAT":                                "syscall",
	"syscall.SYS_SYNC":                                     "syscall",
	"syscall.SYS_SYNCFS":                                   "syscall",
	"syscall.SYS_SYNC_FILE_RANGE":                          "syscall",
	"syscall.SYS_SYSARCH":                                  "syscall",
	"syscall.SYS_SYSCALL":                                  "syscall",
	"syscall.SYS_SYSCALL_BASE":                             "syscall",
	"syscall.SYS_SYSFS":                                    "syscall",
	"syscall.SYS_SYSINFO":                                  "syscall",
	"syscall.SYS_SYSLOG":                                   "syscall",
	"syscall.SYS_TEE":                                      "syscall",
	"syscall.SYS_TGKILL":                                   "syscall",
	"syscall.SYS_THREAD_SELFID":                            "syscall",
	"syscall.SYS_THR_CREATE":                               "syscall",
	"syscall.SYS_THR_EXIT":                                 "syscall",
	"syscall.SYS_THR_KILL":                                 "syscall",
	"syscall.SYS_THR_KILL2":                                "syscall",
	"syscall.SYS_THR_NEW":                                  "syscall",
	"syscall.SYS_THR_SELF":                                 "syscall",
	"syscall.SYS_THR_SET_NAME":                             "syscall",
	"syscall.SYS_THR_SUSPEND":                              "syscall",
	"syscall.SYS_THR_WAKE":                                 "syscall",
	"syscall.SYS_TIME":                                     "syscall",
	"syscall.SYS_TIMERFD_CREATE":                           "syscall",
	"syscall.SYS_TIMERFD_GETTIME":                          "syscall",
	"syscall.SYS_TIMERFD_SETTIME":                          "syscall",
	"syscall.SYS_TIMER_CREATE":                             "syscall",
	"syscall.SYS_TIMER_DELETE":                             "syscall",
	"syscall.SYS_TIMER_GETOVERRUN":                         "syscall",
	"syscall.SYS_TIMER_GETTIME":                            "syscall",
	"syscall.SYS_TIMER_SETTIME":                            "syscall",
	"syscall.SYS_TIMES":                                    "syscall",
	"syscall.SYS_TKILL":                                    "syscall",
	"syscall.SYS_TRUNCATE":                                 "syscall",
	"syscall.SYS_TRUNCATE64":                               "syscall",
	"syscall.SYS_TUXCALL":                                  "syscall",
	"syscall.SYS_UGETRLIMIT":                               "syscall",
	"syscall.SYS_ULIMIT":                                   "syscall",
	"syscall.SYS_UMASK":                                    "syscall",
	"syscall.SYS_UMASK_EXTENDED":                           "syscall",
	"syscall.SYS_UMOUNT":                                   "syscall",
	"syscall.SYS_UMOUNT2":                                  "syscall",
	"syscall.SYS_UNAME":                                    "syscall",
	"syscall.SYS_UNDELETE":                                 "syscall",
	"syscall.SYS_UNLINK":                                   "syscall",
	"syscall.SYS_UNLINKAT":                                 "syscall",
	"syscall.SYS_UNMOUNT":                                  "syscall",
	"syscall.SYS_UNSHARE":                                  "syscall",
	"syscall.SYS_USELIB":                                   "syscall",
	"syscall.SYS_USTAT":                                    "syscall",
	"syscall.SYS_UTIME":                                    "syscall",
	"syscall.SYS_UTIMENSAT":                                "syscall",
	"syscall.SYS_UTIMES":                                   "syscall",
	"syscall.SYS_UTRACE":                                   "syscall",
	"syscall.SYS_UUIDGEN":                                  "syscall",
	"syscall.SYS_VADVISE":                                  "syscall",
	"syscall.SYS_VFORK":                                    "syscall",
	"syscall.SYS_VHANGUP":                                  "syscall",
	"syscall.SYS_VM86":                                     "syscall",
	"syscall.SYS_VM86OLD":                                  "syscall",
	"syscall.SYS_VMSPLICE":                                 "syscall",
	"syscall.SYS_VM_PRESSURE_MONITOR":                      "syscall",
	"syscall.SYS_VSERVER":                                  "syscall",
	"syscall.SYS_WAIT4":                                    "syscall",
	"syscall.SYS_WAIT4_NOCANCEL":                           "syscall",
	"syscall.SYS_WAIT6":                                    "syscall",
	"syscall.SYS_WAITEVENT":                                "syscall",
	"syscall.SYS_WAITID":                                   "syscall",
	"syscall.SYS_WAITID_NOCANCEL":                          "syscall",
	"syscall.SYS_WAITPID":                                  "syscall",
	"syscall.SYS_WATCHEVENT":                               "syscall",
	"syscall.SYS_WORKQ_KERNRETURN":                         "syscall",
	"syscall.SYS_WORKQ_OPEN":                               "syscall",
	"syscall.SYS_WRITE":                                    "syscall",
	"syscall.SYS_WRITEV":                                   "syscall",
	"syscall.SYS_WRITEV_NOCANCEL":                          "syscall",
	"syscall.SYS_WRITE_NOCANCEL":                           "syscall",
	"syscall.SYS_YIELD":                                    "syscall",
	"syscall.SYS__LLSEEK":                                  "syscall",
	"syscall.SYS__LWP_CONTINUE":                            "syscall",
	"syscall.SYS__LWP_CREATE":                              "syscall",
	"syscall.SYS__LWP_CTL":                                 "syscall",
	"syscall.SYS__LWP_DETACH":                              "syscall",
	"syscall.SYS__LWP_EXIT":                                "syscall",
	"syscall.SYS__LWP_GETNAME":                             "syscall",
	"syscall.SYS__LWP_GETPRIVATE":                          "syscall",
	"syscall.SYS__LWP_KILL":                                "syscall",
	"syscall.SYS__LWP_PARK":                                "syscall",
	"syscall.SYS__LWP_SELF":                                "syscall",
	"syscall.SYS__LWP_SETNAME":                             "syscall",
	"syscall.SYS__LWP_SETPRIVATE":                          "syscall",
	"syscall.SYS__LWP_SUSPEND":                             "syscall",
	"syscall.SYS__LWP_UNPARK":                              "syscall",
	"syscall.SYS__LWP_UNPARK_ALL":                          "syscall",
	"syscall.SYS__LWP_WAIT":                                "syscall",
	"syscall.SYS__LWP_WAKEUP":                              "syscall",
	"syscall.SYS__NEWSELECT":                               "syscall",
	"syscall.SYS__PSET_BIND":                               "syscall",
	"syscall.SYS__SCHED_GETAFFINITY":                       "syscall",
	"syscall.SYS__SCHED_GETPARAM":                          "syscall",
	"syscall.SYS__SCHED_SETAFFINITY":                       "syscall",
	"syscall.SYS__SCHED_SETPARAM":                          "syscall",
	"syscall.SYS__SYSCTL":                                  "syscall",
	"syscall.SYS__UMTX_LOCK":                               "syscall",
	"syscall.SYS__UMTX_OP":                                 "syscall",
	"syscall.SYS__UMTX_UNLOCK":                             "syscall",
	"syscall.SYS___ACL_ACLCHECK_FD":                        "syscall",
	"syscall.SYS___ACL_ACLCHECK_FILE":                      "syscall",
	"syscall.SYS___ACL_ACLCHECK_LINK":                      "syscall",
	"syscall.SYS___ACL_DELETE_FD":                          "syscall",
	"syscall.SYS___ACL_DELETE_FILE":                        "syscall",
	"syscall.SYS___ACL_DELETE_LINK":                        "syscall",
	"syscall.SYS___ACL_GET_FD":                             "syscall",
	"syscall.SYS___ACL_GET_FILE":                           "syscall",
	"syscall.SYS___ACL_GET_LINK":                           "syscall",
	"syscall.SYS___ACL_SET_FD":                             "syscall",
	"syscall.SYS___ACL_SET_FILE":                           "syscall",
	"syscall.SYS___ACL_SET_LINK":                           "syscall",
	"syscall.SYS___CLONE":                                  "syscall",
	"syscall.SYS___DISABLE_THREADSIGNAL":                   "syscall",
	"syscall.SYS___GETCWD":                                 "syscall",
	"syscall.SYS___GETLOGIN":                               "syscall",
	"syscall.SYS___GET_TCB":                                "syscall",
	"syscall.SYS___MAC_EXECVE":                             "syscall",
	"syscall.SYS___MAC_GETFSSTAT":                          "syscall",
	"syscall.SYS___MAC_GET_FD":                             "syscall",
	"syscall.SYS___MAC_GET_FILE":                           "syscall",
	"syscall.SYS___MAC_GET_LCID":                           "syscall",
	"syscall.SYS___MAC_GET_LCTX":                           "syscall",
	"syscall.SYS___MAC_GET_LINK":                           "syscall",
	"syscall.SYS___MAC_GET_MOUNT":                          "syscall",
	"syscall.SYS___MAC_GET_PID":                            "syscall",
	"syscall.SYS___MAC_GET_PROC":                           "syscall",
	"syscall.SYS___MAC_MOUNT":                              "syscall",
	"syscall.SYS___MAC_SET_FD":                             "syscall",
	"syscall.SYS___MAC_SET_FILE":                           "syscall",
	"syscall.SYS___MAC_SET_LCTX":                           "syscall",
	"syscall.SYS___MAC_SET_LINK":                           "syscall",
	"syscall.SYS___MAC_SET_PROC":                           "syscall",
	"syscall.SYS___MAC_SYSCALL":                            "syscall",
	"syscall.SYS___OLD_SEMWAIT_SIGNAL":                     "syscall",
	"syscall.SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL":            "syscall",
	"syscall.SYS___POSIX_CHOWN":                            "syscall",
	"syscall.SYS___POSIX_FCHOWN":                           "syscall",
	"syscall.SYS___POSIX_LCHOWN":                           "syscall",
	"syscall.SYS___POSIX_RENAME":                           "syscall",
	"syscall.SYS___PTHREAD_CANCELED":                       "syscall",
	"syscall.SYS___PTHREAD_CHDIR":                          "syscall",
	"syscall.SYS___PTHREAD_FCHDIR":                         "syscall",
	"syscall.SYS___PTHREAD_KILL":                           "syscall",
	"syscall.SYS___PTHREAD_MARKCANCEL":                     "syscall",
	"syscall.SYS___PTHREAD_SIGMASK":                        "syscall",
	"syscall.SYS___QUOTACTL":                               "syscall",
	"syscall.SYS___SEMCTL":                                 "syscall",
	"syscall.SYS___SEMWAIT_SIGNAL":                         "syscall",
	"syscall.SYS___SEMWAIT_SIGNAL_NOCANCEL":                "syscall",
	"syscall.SYS___SETLOGIN":                               "syscall",
	"syscall.SYS___SETUGID":                                "syscall",
	"syscall.SYS___SET_TCB":                                "syscall",
	"syscall.SYS___SIGACTION_SIGTRAMP":                     "syscall",
	"syscall.SYS___SIGTIMEDWAIT":                           "syscall",
	"syscall.SYS___SIGWAIT":                                "syscall",
	"syscall.SYS___SIGWAIT_NOCANCEL":                       "syscall",
	"syscall.SYS___SYSCTL":                                 "syscall",
	"syscall.SYS___TFORK":                                  "syscall",
	"syscall.SYS___THREXIT":                                "syscall",
	"syscall.SYS___THRSIGDIVERT":                           "syscall",
	"syscall.SYS___THRSLEEP":                               "syscall",
	"syscall.SYS___THRWAKEUP":                              "syscall",
	"syscall.S_ARCH1":                                      "syscall",
	"syscall.S_ARCH2":                                      "syscall",
	"syscall.S_BLKSIZE":                                    "syscall",
	"syscall.S_IEXEC":                                      "syscall",
	"syscall.S_IFBLK":                                      "syscall",
	"syscall.S_IFCHR":                                      "syscall",
	"syscall.S_IFDIR":                                      "syscall",
	"syscall.S_IFIFO":                                      "syscall",
	"syscall.S_IFLNK":                                      "syscall",
	"syscall.S_IFMT":                                       "syscall",
	"syscall.S_IFREG":                                      "syscall",
	"syscall.S_IFSOCK":                                     "syscall",
	"syscall.S_IFWHT":                                      "syscall",
	"syscall.S_IREAD":                                      "syscall",
	"syscall.S_IRGRP":                                      "syscall",
	"syscall.S_IROTH":                                      "syscall",
	"syscall.S_IRUSR":                                      "syscall",
	"syscall.S_IRWXG":                                      "syscall",
	"syscall.S_IRWXO":                                      "syscall",
	"syscall.S_IRWXU":                                      "syscall",
	"syscall.S_ISGID":                                      "syscall",
	"syscall.S_ISTXT":                                      "syscall",
	"syscall.S_ISUID":                                      "syscall",
	"syscall.S_ISVTX":                                      "syscall",
	"syscall.S_IWGRP":                                      "syscall",
	"syscall.S_IWOTH":                                      "syscall",
	"syscall.S_IWRITE":                                     "syscall",
	"syscall.S_IWUSR":                                      "syscall",
	"syscall.S_IXGRP":                                      "syscall",
	"syscall.S_IXOTH":                                      "syscall",
	"syscall.S_IXUSR":                                      "syscall",
	"syscall.S_LOGIN_SET":                                  "syscall",
	"syscall.SecurityAttributes":                           "syscall",
	"syscall.Seek":                                         "syscall",
	"syscall.Select":                                       "syscall",
	"syscall.Sendfile":                                     "syscall",
	"syscall.Sendmsg":                                      "syscall",
	"syscall.SendmsgN":                                     "syscall",
	"syscall.Sendto":                                       "syscall",
	"syscall.Servent":                                      "syscall",
	"syscall.SetBpf":                                       "syscall",
	"syscall.SetBpfBuflen":                                 "syscall",
	"syscall.SetBpfDatalink":                               "syscall",
	"syscall.SetBpfHeadercmpl":                             "syscall",
	"syscall.SetBpfImmediate":                              "syscall",
	"syscall.SetBpfInterface":                              "syscall",
	"syscall.SetBpfPromisc":                                "syscall",
	"syscall.SetBpfTimeout":                                "syscall",
	"syscall.SetCurrentDirectory":                          "syscall",
	"syscall.SetEndOfFile":                                 "syscall",
	"syscall.SetEnvironmentVariable":                       "syscall",
	"syscall.SetFileAttributes":                            "syscall",
	"syscall.SetFileCompletionNotificationModes":           "syscall",
	"syscall.SetFilePointer":                               "syscall",
	"syscall.SetFileTime":                                  "syscall",
	"syscall.SetHandleInformation":                         "syscall",
	"syscall.SetKevent":                                    "syscall",
	"syscall.SetLsfPromisc":                                "syscall",
	"syscall.SetNonblock":                                  "syscall",
	"syscall.Setdomainname":                                "syscall",
	"syscall.Setegid":                                      "syscall",
	"syscall.Setenv":                                       "syscall",
	"syscall.Seteuid":                                      "syscall",
	"syscall.Setfsgid":                                     "syscall",
	"syscall.Setfsuid":                                     "syscall",
	"syscall.Setgid":                                       "syscall",
	"syscall.Setgroups":                                    "syscall",
	"syscall.Sethostname":                                  "syscall",
	"syscall.Setlogin":                                     "syscall",
	"syscall.Setpgid":                                      "syscall",
	"syscall.Setpriority":                                  "syscall",
	"syscall.Setprivexec":                                  "syscall",
	"syscall.Setregid":                                     "syscall",
	"syscall.Setresgid":                                    "syscall",
	"syscall.Setresuid":                                    "syscall",
	"syscall.Setreuid":                                     "syscall",
	"syscall.Setrlimit":                                    "syscall",
	"syscall.Setsid":                                       "syscall",
	"syscall.Setsockopt":                                   "syscall",
	"syscall.SetsockoptByte":                               "syscall",
	"syscall.SetsockoptICMPv6Filter":                       "syscall",
	"syscall.SetsockoptIPMreq":                             "syscall",
	"syscall.SetsockoptIPMreqn":                            "syscall",
	"syscall.SetsockoptIPv6Mreq":                           "syscall",
	"syscall.SetsockoptInet4Addr":                          "syscall",
	"syscall.SetsockoptInt":                                "syscall",
	"syscall.SetsockoptLinger":                             "syscall",
	"syscall.SetsockoptString":                             "syscall",
	"syscall.SetsockoptTimeval":                            "syscall",
	"syscall.Settimeofday":                                 "syscall",
	"syscall.Setuid":                                       "syscall",
	"syscall.Setxattr":                                     "syscall",
	"syscall.Shutdown":                                     "syscall",
	"syscall.SidTypeAlias":                                 "syscall",
	"syscall.SidTypeComputer":                              "syscall",
	"syscall.SidTypeDeletedAccount":                        "syscall",
	"syscall.SidTypeDomain":                                "syscall",
	"syscall.SidTypeGroup":                                 "syscall",
	"syscall.SidTypeInvalid":                               "syscall",
	"syscall.SidTypeLabel":                                 "syscall",
	"syscall.SidTypeUnknown":                               "syscall",
	"syscall.SidTypeUser":                                  "syscall",
	"syscall.SidTypeWellKnownGroup":                        "syscall",
	"syscall.Signal":                                       "syscall",
	"syscall.SizeofBpfHdr":                                 "syscall",
	"syscall.SizeofBpfInsn":                                "syscall",
	"syscall.SizeofBpfProgram":                             "syscall",
	"syscall.SizeofBpfStat":                                "syscall",
	"syscall.SizeofBpfVersion":                             "syscall",
	"syscall.SizeofBpfZbuf":                                "syscall",
	"syscall.SizeofBpfZbufHeader":                          "syscall",
	"syscall.SizeofCmsghdr":                                "syscall",
	"syscall.SizeofICMPv6Filter":                           "syscall",
	"syscall.SizeofIPMreq":                                 "syscall",
	"syscall.SizeofIPMreqn":                                "syscall",
	"syscall.SizeofIPv6MTUInfo":                            "syscall",
	"syscall.SizeofIPv6Mreq":                               "syscall",
	"syscall.SizeofIfAddrmsg":                              "syscall",
	"syscall.SizeofIfAnnounceMsghdr":                       "syscall",
	"syscall.SizeofIfData":                                 "syscall",
	"syscall.SizeofIfInfomsg":                              "syscall",
	"syscall.SizeofIfMsghdr":                               "syscall",
	"syscall.SizeofIfaMsghdr":                              "syscall",
	"syscall.SizeofIfmaMsghdr":                             "syscall",
	"syscall.SizeofIfmaMsghdr2":                            "syscall",
	"syscall.SizeofInet4Pktinfo":                           "syscall",
	"syscall.SizeofInet6Pktinfo":                           "syscall",
	"syscall.SizeofInotifyEvent":                           "syscall",
	"syscall.SizeofLinger":                                 "syscall",
	"syscall.SizeofMsghdr":                                 "syscall",
	"syscall.SizeofNlAttr":                                 "syscall",
	"syscall.SizeofNlMsgerr":                               "syscall",
	"syscall.SizeofNlMsghdr":                               "syscall",
	"syscall.SizeofRtAttr":                                 "syscall",
	"syscall.SizeofRtGenmsg":                               "syscall",
	"syscall.SizeofRtMetrics":                              "syscall",
	"syscall.SizeofRtMsg":                                  "syscall",
	"syscall.SizeofRtMsghdr":                               "syscall",
	"syscall.SizeofRtNexthop":                              "syscall",
	"syscall.SizeofSockFilter":                             "syscall",
	"syscall.SizeofSockFprog":                              "syscall",
	"syscall.SizeofSockaddrAny":                            "syscall",
	"syscall.SizeofSockaddrDatalink":                       "syscall",
	"syscall.SizeofSockaddrInet4":                          "syscall",
	"syscall.SizeofSockaddrInet6":                          "syscall",
	"syscall.SizeofSockaddrLinklayer":                      "syscall",
	"syscall.SizeofSockaddrNetlink":                        "syscall",
	"syscall.SizeofSockaddrUnix":                           "syscall",
	"syscall.SizeofTCPInfo":                                "syscall",
	"syscall.SizeofUcred":                                  "syscall",
	"syscall.SlicePtrFromStrings":                          "syscall",
	"syscall.SockFilter":                                   "syscall",
	"syscall.SockFprog":                                    "syscall",
	"syscall.SockaddrDatalink":                             "syscall",
	"syscall.SockaddrGen":                                  "syscall",
	"syscall.SockaddrInet4":                                "syscall",
	"syscall.SockaddrInet6":                                "syscall",
	"syscall.SockaddrLinklayer":                            "syscall",
	"syscall.SockaddrNetlink":                              "syscall",
	"syscall.SockaddrUnix":                                 "syscall",
	"syscall.Socket":                                       "syscall",
	"syscall.SocketControlMessage":                         "syscall",
	"syscall.SocketDisableIPv6":                            "syscall",
	"syscall.Socketpair":                                   "syscall",
	"syscall.Splice":                                       "syscall",
	"syscall.StartProcess":                                 "syscall",
	"syscall.StartupInfo":                                  "syscall",
	"syscall.Stat":                                         "syscall",
	"syscall.Stat_t":                                       "syscall",
	"syscall.Statfs":                                       "syscall",
	"syscall.Statfs_t":                                     "syscall",
	"syscall.Stderr":                                       "syscall",
	"syscall.Stdin":                                        "syscall",
	"syscall.Stdout":                                       "syscall",
	"syscall.StringBytePtr":                                "syscall",
	"syscall.StringByteSlice":                              "syscall",
	"syscall.StringSlicePtr":                               "syscall",
	"syscall.StringToSid":                                  "syscall",
	"syscall.StringToUTF16":                                "syscall",
	"syscall.StringToUTF16Ptr":                             "syscall",
	"syscall.Symlink":                                      "syscall",
	"syscall.Sync":                                         "syscall",
	"syscall.SyncFileRange":                                "syscall",
	"syscall.SysProcAttr":                                  "syscall",
	"syscall.SysProcIDMap":                                 "syscall",
	"syscall.Syscall":                                      "syscall",
	"syscall.Syscall12":                                    "syscall",
	"syscall.Syscall15":                                    "syscall",
	"syscall.Syscall6":                                     "syscall",
	"syscall.Syscall9":                                     "syscall",
	"syscall.Sysctl":                                       "syscall",
	"syscall.SysctlUint32":                                 "syscall",
	"syscall.Sysctlnode":                                   "syscall",
	"syscall.Sysinfo":                                      "syscall",
	"syscall.Sysinfo_t":                                    "syscall",
	"syscall.Systemtime":                                   "syscall",
	"syscall.TCGETS":                                       "syscall",
	"syscall.TCIFLUSH":                                     "syscall",
	"syscall.TCIOFLUSH":                                    "syscall",
	"syscall.TCOFLUSH":                                     "syscall",
	"syscall.TCPInfo":                                      "syscall",
	"syscall.TCPKeepalive":                                 "syscall",
	"syscall.TCP_CA_NAME_MAX":                              "syscall",
	"syscall.TCP_CONGCTL":                                  "syscall",
	"syscall.TCP_CONGESTION":                               "syscall",
	"syscall.TCP_CONNECTIONTIMEOUT":                        "syscall",
	"syscall.TCP_CORK":                                     "syscall",
	"syscall.TCP_DEFER_ACCEPT":                             "syscall",
	"syscall.TCP_INFO":                                     "syscall",
	"syscall.TCP_KEEPALIVE":                                "syscall",
	"syscall.TCP_KEEPCNT":                                  "syscall",
	"syscall.TCP_KEEPIDLE":                                 "syscall",
	"syscall.TCP_KEEPINIT":                                 "syscall",
	"syscall.TCP_KEEPINTVL":                                "syscall",
	"syscall.TCP_LINGER2":                                  "syscall",
	"syscall.TCP_MAXBURST":                                 "syscall",
	"syscall.TCP_MAXHLEN":                                  "syscall",
	"syscall.TCP_MAXOLEN":                                  "syscall",
	"syscall.TCP_MAXSEG":                                   "syscall",
	"syscall.TCP_MAXWIN":                                   "syscall",
	"syscall.TCP_MAX_SACK":                                 "syscall",
	"syscall.TCP_MAX_WINSHIFT":                             "syscall",
	"syscall.TCP_MD5SIG":                                   "syscall",
	"syscall.TCP_MD5SIG_MAXKEYLEN":                         "syscall",
	"syscall.TCP_MINMSS":                                   "syscall",
	"syscall.TCP_MINMSSOVERLOAD":                           "syscall",
	"syscall.TCP_MSS":                                      "syscall",
	"syscall.TCP_NODELAY":                                  "syscall",
	"syscall.TCP_NOOPT":                                    "syscall",
	"syscall.TCP_NOPUSH":                                   "syscall",
	"syscall.TCP_NSTATES":                                  "syscall",
	"syscall.TCP_QUICKACK":                                 "syscall",
	"syscall.TCP_RXT_CONNDROPTIME":                         "syscall",
	"syscall.TCP_RXT_FINDROP":                              "syscall",
	"syscall.TCP_SACK_ENABLE":                              "syscall",
	"syscall.TCP_SYNCNT":                                   "syscall",
	"syscall.TCP_VENDOR":                                   "syscall",
	"syscall.TCP_WINDOW_CLAMP":                             "syscall",
	"syscall.TCSAFLUSH":                                    "syscall",
	"syscall.TCSETS":                                       "syscall",
	"syscall.TF_DISCONNECT":                                "syscall",
	"syscall.TF_REUSE_SOCKET":                              "syscall",
	"syscall.TF_USE_DEFAULT_WORKER":                        "syscall",
	"syscall.TF_USE_KERNEL_APC":                            "syscall",
	"syscall.TF_USE_SYSTEM_THREAD":                         "syscall",
	"syscall.TF_WRITE_BEHIND":                              "syscall",
	"syscall.TH32CS_INHERIT":                               "syscall",
	"syscall.TH32CS_SNAPALL":                               "syscall",
	"syscall.TH32CS_SNAPHEAPLIST":                          "syscall",
	"syscall.TH32CS_SNAPMODULE":                            "syscall",
	"syscall.TH32CS_SNAPMODULE32":                          "syscall",
	"syscall.TH32CS_SNAPPROCESS":                           "syscall",
	"syscall.TH32CS_SNAPTHREAD":                            "syscall",
	"syscall.TIME_ZONE_ID_DAYLIGHT":                        "syscall",
	"syscall.TIME_ZONE_ID_STANDARD":                        "syscall",
	"syscall.TIME_ZONE_ID_UNKNOWN":                         "syscall",
	"syscall.TIOCCBRK":                                     "syscall",
	"syscall.TIOCCDTR":                                     "syscall",
	"syscall.TIOCCONS":                                     "syscall",
	"syscall.TIOCDCDTIMESTAMP":                             "syscall",
	"syscall.TIOCDRAIN":                                    "syscall",
	"syscall.TIOCDSIMICROCODE":                             "syscall",
	"syscall.TIOCEXCL":                                     "syscall",
	"syscall.TIOCEXT":                                      "syscall",
	"syscall.TIOCFLAG_CDTRCTS":                             "syscall",
	"syscall.TIOCFLAG_CLOCAL":                              "syscall",
	"syscall.TIOCFLAG_CRTSCTS":                             "syscall",
	"syscall.TIOCFLAG_MDMBUF":                              "syscall",
	"syscall.TIOCFLAG_PPS":                                 "syscall",
	"syscall.TIOCFLAG_SOFTCAR":                             "syscall",
	"syscall.TIOCFLUSH":                                    "syscall",
	"syscall.TIOCGDEV":                                     "syscall",
	"syscall.TIOCGDRAINWAIT":                               "syscall",
	"syscall.TIOCGETA":                                     "syscall",
	"syscall.TIOCGETD":                                     "syscall",
	"syscall.TIOCGFLAGS":                                   "syscall",
	"syscall.TIOCGICOUNT":                                  "syscall",
	"syscall.TIOCGLCKTRMIOS":                               "syscall",
	"syscall.TIOCGLINED":                                   "syscall",
	"syscall.TIOCGPGRP":                                    "syscall",
	"syscall.TIOCGPTN":                                     "syscall",
	"syscall.TIOCGQSIZE":                                   "syscall",
	"syscall.TIOCGRANTPT":                                  "syscall",
	"syscall.TIOCGRS485":                                   "syscall",
	"syscall.TIOCGSERIAL":                                  "syscall",
	"syscall.TIOCGSID":                                     "syscall",
	"syscall.TIOCGSIZE":                                    "syscall",
	"syscall.TIOCGSOFTCAR":                                 "syscall",
	"syscall.TIOCGTSTAMP":                                  "syscall",
	"syscall.TIOCGWINSZ":                                   "syscall",
	"syscall.TIOCINQ":                                      "syscall",
	"syscall.TIOCIXOFF":                                    "syscall",
	"syscall.TIOCIXON":                                     "syscall",
	"syscall.TIOCLINUX":                                    "syscall",
	"syscall.TIOCMBIC":                                     "syscall",
	"syscall.TIOCMBIS":                                     "syscall",
	"syscall.TIOCMGDTRWAIT":                                "syscall",
	"syscall.TIOCMGET":                                     "syscall",
	"syscall.TIOCMIWAIT":                                   "syscall",
	"syscall.TIOCMODG":                                     "syscall",
	"syscall.TIOCMODS":                                     "syscall",
	"syscall.TIOCMSDTRWAIT":                                "syscall",
	"syscall.TIOCMSET":                                     "syscall",
	"syscall.TIOCM_CAR":                                    "syscall",
	"syscall.TIOCM_CD":                                     "syscall",
	"syscall.TIOCM_CTS":                                    "syscall",
	"syscall.TIOCM_DCD":                                    "syscall",
	"syscall.TIOCM_DSR":                                    "syscall",
	"syscall.TIOCM_DTR":                                    "syscall",
	"syscall.TIOCM_LE":                                     "syscall",
	"syscall.TIOCM_RI":                                     "syscall",
	"syscall.TIOCM_RNG":                                    "syscall",
	"syscall.TIOCM_RTS":                                    "syscall",
	"syscall.TIOCM_SR":                                     "syscall",
	"syscall.TIOCM_ST":                                     "syscall",
	"syscall.TIOCNOTTY":                                    "syscall",
	"syscall.TIOCNXCL":                                     "syscall",
	"syscall.TIOCOUTQ":                                     "syscall",
	"syscall.TIOCPKT":                                      "syscall",
	"syscall.TIOCPKT_DATA":                                 "syscall",
	"syscall.TIOCPKT_DOSTOP":                               "syscall",
	"syscall.TIOCPKT_FLUSHREAD":                            "syscall",
	"syscall.TIOCPKT_FLUSHWRITE":                           "syscall",
	"syscall.TIOCPKT_IOCTL":                                "syscall",
	"syscall.TIOCPKT_NOSTOP":                               "syscall",
	"syscall.TIOCPKT_START":                                "syscall",
	"syscall.TIOCPKT_STOP":                                 "syscall",
	"syscall.TIOCPTMASTER":                                 "syscall",
	"syscall.TIOCPTMGET":                                   "syscall",
	"syscall.TIOCPTSNAME":                                  "syscall",
	"syscall.TIOCPTYGNAME":                                 "syscall",
	"syscall.TIOCPTYGRANT":                                 "syscall",
	"syscall.TIOCPTYUNLK":                                  "syscall",
	"syscall.TIOCRCVFRAME":                                 "syscall",
	"syscall.TIOCREMOTE":                                   "syscall",
	"syscall.TIOCSBRK":                                     "syscall",
	"syscall.TIOCSCONS":                                    "syscall",
	"syscall.TIOCSCTTY":                                    "syscall",
	"syscall.TIOCSDRAINWAIT":                               "syscall",
	"syscall.TIOCSDTR":                                     "syscall",
	"syscall.TIOCSERCONFIG":                                "syscall",
	"syscall.TIOCSERGETLSR":                                "syscall",
	"syscall.TIOCSERGETMULTI":                              "syscall",
	"syscall.TIOCSERGSTRUCT":                               "syscall",
	"syscall.TIOCSERGWILD":                                 "syscall",
	"syscall.TIOCSERSETMULTI":                              "syscall",
	"syscall.TIOCSERSWILD":                                 "syscall",
	"syscall.TIOCSER_TEMT":                                 "syscall",
	"syscall.TIOCSETA":                                     "syscall",
	"syscall.TIOCSETAF":                                    "syscall",
	"syscall.TIOCSETAW":                                    "syscall",
	"syscall.TIOCSETD":                                     "syscall",
	"syscall.TIOCSFLAGS":                                   "syscall",
	"syscall.TIOCSIG":                                      "syscall",
	"syscall.TIOCSLCKTRMIOS":                               "syscall",
	"syscall.TIOCSLINED":                                   "syscall",
	"syscall.TIOCSPGRP":                                    "syscall",
	"syscall.TIOCSPTLCK":                                   "syscall",
	"syscall.TIOCSQSIZE":                                   "syscall",
	"syscall.TIOCSRS485":                                   "syscall",
	"syscall.TIOCSSERIAL":                                  "syscall",
	"syscall.TIOCSSIZE":                                    "syscall",
	"syscall.TIOCSSOFTCAR":                                 "syscall",
	"syscall.TIOCSTART":                                    "syscall",
	"syscall.TIOCSTAT":                                     "syscall",
	"syscall.TIOCSTI":                                      "syscall",
	"syscall.TIOCSTOP":                                     "syscall",
	"syscall.TIOCSTSTAMP":                                  "syscall",
	"syscall.TIOCSWINSZ":                                   "syscall",
	"syscall.TIOCTIMESTAMP":                                "syscall",
	"syscall.TIOCUCNTL":                                    "syscall",
	"syscall.TIOCVHANGUP":                                  "syscall",
	"syscall.TIOCXMTFRAME":                                 "syscall",
	"syscall.TOKEN_ADJUST_DEFAULT":                         "syscall",
	"syscall.TOKEN_ADJUST_GROUPS":                          "syscall",
	"syscall.TOKEN_ADJUST_PRIVILEGES":                      "syscall",
	"syscall.TOKEN_ALL_ACCESS":                             "syscall",
	"syscall.TOKEN_ASSIGN_PRIMARY":                         "syscall",
	"syscall.TOKEN_DUPLICATE":                              "syscall",
	"syscall.TOKEN_EXECUTE":                                "syscall",
	"syscall.TOKEN_IMPERSONATE":                            "syscall",
	"syscall.TOKEN_QUERY":                                  "syscall",
	"syscall.TOKEN_QUERY_SOURCE":                           "syscall",
	"syscall.TOKEN_READ":                                   "syscall",
	"syscall.TOKEN_WRITE":                                  "syscall",
	"syscall.TOSTOP":                                       "syscall",
	"syscall.TRUNCATE_EXISTING":                            "syscall",
	"syscall.TUNATTACHFILTER":                              "syscall",
	"syscall.TUNDETACHFILTER":                              "syscall",
	"syscall.TUNGETFEATURES":                               "syscall",
	"syscall.TUNGETIFF":                                    "syscall",
	"syscall.TUNGETSNDBUF":                                 "syscall",
	"syscall.TUNGETVNETHDRSZ":                              "syscall",
	"syscall.TUNSETDEBUG":                                  "syscall",
	"syscall.TUNSETGROUP":                                  "syscall",
	"syscall.TUNSETIFF":                                    "syscall",
	"syscall.TUNSETLINK":                                   "syscall",
	"syscall.TUNSETNOCSUM":                                 "syscall",
	"syscall.TUNSETOFFLOAD":                                "syscall",
	"syscall.TUNSETOWNER":                                  "syscall",
	"syscall.TUNSETPERSIST":                                "syscall",
	"syscall.TUNSETSNDBUF":                                 "syscall",
	"syscall.TUNSETTXFILTER":                               "syscall",
	"syscall.TUNSETVNETHDRSZ":                              "syscall",
	"syscall.Tee":                                          "syscall",
	"syscall.TerminateProcess":                             "syscall",
	"syscall.Termios":                                      "syscall",
	"syscall.Tgkill":                                       "syscall",
	"syscall.Time":                                         "syscall",
	"syscall.Time_t":                                       "syscall",
	"syscall.Times":                                        "syscall",
	"syscall.Timespec":                                     "syscall",
	"syscall.TimespecToNsec":                               "syscall",
	"syscall.Timeval":                                      "syscall",
	"syscall.Timeval32":                                    "syscall",
	"syscall.TimevalToNsec":                                "syscall",
	"syscall.Timex":                                        "syscall",
	"syscall.Timezoneinformation":                          "syscall",
	"syscall.Tms":                                          "syscall",
	"syscall.Token":                                        "syscall",
	"syscall.TokenAccessInformation":                       "syscall",
	"syscall.TokenAuditPolicy":                             "syscall",
	"syscall.TokenDefaultDacl":                             "syscall",
	"syscall.TokenElevation":                               "syscall",
	"syscall.TokenElevationType":                           "syscall",
	"syscall.TokenGroups":                                  "syscall",
	"syscall.TokenGroupsAndPrivileges":                     "syscall",
	"syscall.TokenHasRestrictions":                         "syscall",
	"syscall.TokenImpersonationLevel":                      "syscall",
	"syscall.TokenIntegrityLevel":                          "syscall",
	"syscall.TokenLinkedToken":                             "syscall",
	"syscall.TokenLogonSid":                                "syscall",
	"syscall.TokenMandatoryPolicy":                         "syscall",
	"syscall.TokenOrigin":                                  "syscall",
	"syscall.TokenOwner":                                   "syscall",
	"syscall.TokenPrimaryGroup":                            "syscall",
	"syscall.TokenPrivileges":                              "syscall",
	"syscall.TokenRestrictedSids":                          "syscall",
	"syscall.TokenSandBoxInert":                            "syscall",
	"syscall.TokenSessionId":                               "syscall",
	"syscall.TokenSessionReference":                        "syscall",
	"syscall.TokenSource":                                  "syscall",
	"syscall.TokenStatistics":                              "syscall",
	"syscall.TokenType":                                    "syscall",
	"syscall.TokenUIAccess":                                "syscall",
	"syscall.TokenUser":                                    "syscall",
	"syscall.TokenVirtualizationAllowed":                   "syscall",
	"syscall.TokenVirtualizationEnabled":                   "syscall",
	"syscall.Tokenprimarygroup":                            "syscall",
	"syscall.Tokenuser":                                    "syscall",
	"syscall.TranslateAccountName":                         "syscall",
	"syscall.TranslateName":                                "syscall",
	"syscall.TransmitFile":                                 "syscall",
	"syscall.TransmitFileBuffers":                          "syscall",
	"syscall.Truncate":                                     "syscall",
	"syscall.USAGE_MATCH_TYPE_AND":                         "syscall",
	"syscall.USAGE_MATCH_TYPE_OR":                          "syscall",
	"syscall.UTF16FromString":                              "syscall",
	"syscall.UTF16PtrFromString":                           "syscall",
	"syscall.UTF16ToString":                                "syscall",
	"syscall.Ucred":                                        "syscall",
	"syscall.Umask":                                        "syscall",
	"syscall.Uname":                                        "syscall",
	"syscall.Undelete":                                     "syscall",
	"syscall.UnixCredentials":                              "syscall",
	"syscall.UnixRights":                                   "syscall",
	"syscall.Unlink":                                       "syscall",
	"syscall.Unlinkat":                                     "syscall",
	"syscall.UnmapViewOfFile":                              "syscall",
	"syscall.Unmount":                                      "syscall",
	"syscall.Unsetenv":                                     "syscall",
	"syscall.Unshare":                                      "syscall",
	"syscall.UserInfo10":                                   "syscall",
	"syscall.Ustat":                                        "syscall",
	"syscall.Ustat_t":                                      "syscall",
	"syscall.Utimbuf":                                      "syscall",
	"syscall.Utime":                                        "syscall",
	"syscall.Utimes":                                       "syscall",
	"syscall.UtimesNano":                                   "syscall",
	"syscall.Utsname":                                      "syscall",
	"syscall.VDISCARD":                                     "syscall",
	"syscall.VDSUSP":                                       "syscall",
	"syscall.VEOF":                                         "syscall",
	"syscall.VEOL":                                         "syscall",
	"syscall.VEOL2":                                        "syscall",
	"syscall.VERASE":                                       "syscall",
	"syscall.VERASE2":                                      "syscall",
	"syscall.VINTR":                                        "syscall",
	"syscall.VKILL":                                        "syscall",
	"syscall.VLNEXT":                                       "syscall",
	"syscall.VMIN":                                         "syscall",
	"syscall.VQUIT":                                        "syscall",
	"syscall.VREPRINT":                                     "syscall",
	"syscall.VSTART":                                       "syscall",
	"syscall.VSTATUS":                                      "syscall",
	"syscall.VSTOP":                                        "syscall",
	"syscall.VSUSP":                                        "syscall",
	"syscall.VSWTC":                                        "syscall",
	"syscall.VT0":                                          "syscall",
	"syscall.VT1":                                          "syscall",
	"syscall.VTDLY":                                        "syscall",
	"syscall.VTIME":                                        "syscall",
	"syscall.VWERASE":                                      "syscall",
	"syscall.VirtualLock":                                  "syscall",
	"syscall.VirtualUnlock":                                "syscall",
	"syscall.WAIT_ABANDONED":                               "syscall",
	"syscall.WAIT_FAILED":                                  "syscall",
	"syscall.WAIT_OBJECT_0":                                "syscall",
	"syscall.WAIT_TIMEOUT":                                 "syscall",
	"syscall.WALL":                                         "syscall",
	"syscall.WALLSIG":                                      "syscall",
	"syscall.WALTSIG":                                      "syscall",
	"syscall.WCLONE":                                       "syscall",
	"syscall.WCONTINUED":                                   "syscall",
	"syscall.WCOREFLAG":                                    "syscall",
	"syscall.WEXITED":                                      "syscall",
	"syscall.WLINUXCLONE":                                  "syscall",
	"syscall.WNOHANG":                                      "syscall",
	"syscall.WNOTHREAD":                                    "syscall",
	"syscall.WNOWAIT":                                      "syscall",
	"syscall.WNOZOMBIE":                                    "syscall",
	"syscall.WOPTSCHECKED":                                 "syscall",
	"syscall.WORDSIZE":                                     "syscall",
	"syscall.WSABuf":                                       "syscall",
	"syscall.WSACleanup":                                   "syscall",
	"syscall.WSADESCRIPTION_LEN":                           "syscall",
	"syscall.WSAData":                                      "syscall",
	"syscall.WSAEACCES":                                    "syscall",
	"syscall.WSAECONNRESET":                                "syscall",
	"syscall.WSAEnumProtocols":                             "syscall",
	"syscall.WSAID_CONNECTEX":                              "syscall",
	"syscall.WSAIoctl":                                     "syscall",
	"syscall.WSAPROTOCOL_LEN":                              "syscall",
	"syscall.WSAProtocolChain":                             "syscall",
	"syscall.WSAProtocolInfo":                              "syscall",
	"syscall.WSARecv":                                      "syscall",
	"syscall.WSARecvFrom":                                  "syscall",
	"syscall.WSASYS_STATUS_LEN":                            "syscall",
	"syscall.WSASend":                                      "syscall",
	"syscall.WSASendTo":                                    "syscall",
	"syscall.WSASendto":                                    "syscall",
	"syscall.WSAStartup":                                   "syscall",
	"syscall.WSTOPPED":                                     "syscall",
	"syscall.WTRAPPED":                                     "syscall",
	"syscall.WUNTRACED":                                    "syscall",
	"syscall.Wait4":                                        "syscall",
	"syscall.WaitForSingleObject":                          "syscall",
	"syscall.WaitStatus":                                   "syscall",
	"syscall.Win32FileAttributeData":                       "syscall",
	"syscall.Win32finddata":                                "syscall",
	"syscall.Write":                                        "syscall",
	"syscall.WriteConsole":                                 "syscall",
	"syscall.WriteFile":                                    "syscall",
	"syscall.X509_ASN_ENCODING":                            "syscall",
	"syscall.XCASE":                                        "syscall",
	"syscall.XP1_CONNECTIONLESS":                           "syscall",
	"syscall.XP1_CONNECT_DATA":                             "syscall",
	"syscall.XP1_DISCONNECT_DATA":                          "syscall",
	"syscall.XP1_EXPEDITED_DATA":                           "syscall",
	"syscall.XP1_GRACEFUL_CLOSE":                           "syscall",
	"syscall.XP1_GUARANTEED_DELIVERY":                      "syscall",
	"syscall.XP1_GUARANTEED_ORDER":                         "syscall",
	"syscall.XP1_IFS_HANDLES":                              "syscall",
	"syscall.XP1_MESSAGE_ORIENTED":                         "syscall",
	"syscall.XP1_MULTIPOINT_CONTROL_PLANE":                 "syscall",
	"syscall.XP1_MULTIPOINT_DATA_PLANE":                    "syscall",
	"syscall.XP1_PARTIAL_MESSAGE":                          "syscall",
	"syscall.XP1_PSEUDO_STREAM":                            "syscall",
	"syscall.XP1_QOS_SUPPORTED":                            "syscall",
	"syscall.XP1_SAN_SUPPORT_SDP":                          "syscall",
	"syscall.XP1_SUPPORT_BROADCAST":                        "syscall",
	"syscall.XP1_SUPPORT_MULTIPOINT":                       "syscall",
	"syscall.XP1_UNI_RECV":                                 "syscall",
	"syscall.XP1_UNI_SEND":                                 "syscall",
	"syslog.Dial":                                          "log/syslog",
	"syslog.LOG_ALERT":                                     "log/syslog",
	"syslog.LOG_AUTH":                                      "log/syslog",
	"syslog.LOG_AUTHPRIV":                                  "log/syslog",
	"syslog.LOG_CRIT":                                      "log/syslog",
	"syslog.LOG_CRON":                                      "log/syslog",
	"syslog.LOG_DAEMON":                                    "log/syslog",
	"syslog.LOG_DEBUG":                                     "log/syslog",
	"syslog.LOG_EMERG":                                     "log/syslog",
	"syslog.LOG_ERR":                                       "log/syslog",
	"syslog.LOG_FTP":                                       "log/syslog",
	"syslog.LOG_INFO":                                      "log/syslog",
	"syslog.LOG_KERN":                                      "log/syslog",
	"syslog.LOG_LOCAL0":                                    "log/syslog",
	"syslog.LOG_LOCAL1":                                    "log/syslog",
	"syslog.LOG_LOCAL2":                                    "log/syslog",
	"syslog.LOG_LOCAL3":                                    "log/syslog",
	"syslog.LOG_LOCAL4":                                    "log/syslog",
	"syslog.LOG_LOCAL5":                                    "log/syslog",
	"syslog.LOG_LOCAL6":                                    "log/syslog",
	"syslog.LOG_LOCAL7":                                    "log/syslog",
	"syslog.LOG_LPR":                                       "log/syslog",
	"syslog.LOG_MAIL":                                      "log/syslog",
	"syslog.LOG_NEWS":                                      "log/syslog",
	"syslog.LOG_NOTICE":                                    "log/syslog",
	"syslog.LOG_SYSLOG":                                    "log/syslog",
	"syslog.LOG_USER":                                      "log/syslog",
	"syslog.LOG_UUCP":                                      "log/syslog",
	"syslog.LOG_WARNING":                                   "log/syslog",
	"syslog.New":                                           "log/syslog",
	"syslog.NewLogger":                                     "log/syslog",
	"syslog.Priority":                                      "log/syslog",
	"syslog.Writer":                                        "log/syslog",
	"tabwriter.AlignRight":                                 "text/tabwriter",
	"tabwriter.Debug":                                      "text/tabwriter",
	"tabwriter.DiscardEmptyColumns":                        "text/tabwriter",
	"tabwriter.Escape":                                     "text/tabwriter",
	"tabwriter.FilterHTML":                                 "text/tabwriter",
	"tabwriter.NewWriter":                                  "text/tabwriter",
	"tabwriter.StripEscape":                                "text/tabwriter",
	"tabwriter.TabIndent":                                  "text/tabwriter",
	"tabwriter.Writer":                                     "text/tabwriter",
	"tar.ErrFieldTooLong":                                  "archive/tar",
	"tar.ErrHeader":                                        "archive/tar",
	"tar.ErrWriteAfterClose":                               "archive/tar",
	"tar.ErrWriteTooLong":                                  "archive/tar",
	"tar.FileInfoHeader":                                   "archive/tar",
	"tar.Header":                                           "archive/tar",
	"tar.NewReader":                                        "archive/tar",
	"tar.NewWriter":                                        "archive/tar",
	"tar.Reader":                                           "archive/tar",
	"tar.TypeBlock":                                        "archive/tar",
	"tar.TypeChar":                                         "archive/tar",
	"tar.TypeCont":                                         "archive/tar",
	"tar.TypeDir":                                          "archive/tar",
	"tar.TypeFifo":                                         "archive/tar",
	"tar.TypeGNULongLink":                                  "archive/tar",
	"tar.TypeGNULongName":                                  "archive/tar",
	"tar.TypeGNUSparse":                                    "archive/tar",
	"tar.TypeLink":                                         "archive/tar",
	"tar.TypeReg":                                          "archive/tar",
	"tar.TypeRegA":                                         "archive/tar",
	"tar.TypeSymlink":                                      "archive/tar",
	"tar.TypeXGlobalHeader":                                "archive/tar",
	"tar.TypeXHeader":                                      "archive/tar",
	"tar.Writer":                                           "archive/tar",
	"template.CSS":                                         "html/template",
	"template.ErrAmbigContext":                             "html/template",
	"template.ErrBadHTML":                                  "html/template",
	"template.ErrBranchEnd":                                "html/template",
	"template.ErrEndContext":                               "html/template",
	"template.ErrNoSuchTemplate":                           "html/template",
	"template.ErrOutputContext":                            "html/template",
	"template.ErrPartialCharset":                           "html/template",
	"template.ErrPartialEscape":                            "html/template",
	"template.ErrRangeLoopReentry":                         "html/template",
	"template.ErrSlashAmbig":                               "html/template",
	"template.Error":                                       "html/template",
	"template.ErrorCode":                                   "html/template",
	// "template.FuncMap" is ambiguous
	"template.HTML":     "html/template",
	"template.HTMLAttr": "html/template",
	// "template.HTMLEscape" is ambiguous
	// "template.HTMLEscapeString" is ambiguous
	// "template.HTMLEscaper" is ambiguous
	"template.JS": "html/template",
	// "template.JSEscape" is ambiguous
	// "template.JSEscapeString" is ambiguous
	// "template.JSEscaper" is ambiguous
	"template.JSStr": "html/template",
	// "template.Must" is ambiguous
	// "template.New" is ambiguous
	"template.OK": "html/template",
	// "template.ParseFiles" is ambiguous
	// "template.ParseGlob" is ambiguous
	// "template.Template" is ambiguous
	"template.URL": "html/template",
	// "template.URLQueryEscaper" is ambiguous
	"testing.AllocsPerRun":                        "testing",
	"testing.B":                                   "testing",
	"testing.Benchmark":                           "testing",
	"testing.BenchmarkResult":                     "testing",
	"testing.Cover":                               "testing",
	"testing.CoverBlock":                          "testing",
	"testing.Coverage":                            "testing",
	"testing.InternalBenchmark":                   "testing",
	"testing.InternalExample":                     "testing",
	"testing.InternalTest":                        "testing",
	"testing.M":                                   "testing",
	"testing.Main":                                "testing",
	"testing.MainStart":                           "testing",
	"testing.PB":                                  "testing",
	"testing.RegisterCover":                       "testing",
	"testing.RunBenchmarks":                       "testing",
	"testing.RunExamples":                         "testing",
	"testing.RunTests":                            "testing",
	"testing.Short":                               "testing",
	"testing.T":                                   "testing",
	"testing.Verbose":                             "testing",
	"textproto.CanonicalMIMEHeaderKey":            "net/textproto",
	"textproto.Conn":                              "net/textproto",
	"textproto.Dial":                              "net/textproto",
	"textproto.Error":                             "net/textproto",
	"textproto.MIMEHeader":                        "net/textproto",
	"textproto.NewConn":                           "net/textproto",
	"textproto.NewReader":                         "net/textproto",
	"textproto.NewWriter":                         "net/textproto",
	"textproto.Pipeline":                          "net/textproto",
	"textproto.ProtocolError":                     "net/textproto",
	"textproto.Reader":                            "net/textproto",
	"textproto.TrimBytes":                         "net/textproto",
	"textproto.TrimString":                        "net/textproto",
	"textproto.Writer":                            "net/textproto",
	"time.ANSIC":                                  "time",
	"time.After":                                  "time",
	"time.AfterFunc":                              "time",
	"time.April":                                  "time",
	"time.August":                                 "time",
	"time.Date":                                   "time",
	"time.December":                               "time",
	"time.Duration":                               "time",
	"time.February":                               "time",
	"time.FixedZone":                              "time",
	"time.Friday":                                 "time",
	"time.Hour":                                   "time",
	"time.January":                                "time",
	"time.July":                                   "time",
	"time.June":                                   "time",
	"time.Kitchen":                                "time",
	"time.LoadLocation":                           "time",
	"time.Local":                                  "time",
	"time.Location":                               "time",
	"time.March":                                  "time",
	"time.May":                                    "time",
	"time.Microsecond":                            "time",
	"time.Millisecond":                            "time",
	"time.Minute":                                 "time",
	"time.Monday":                                 "time",
	"time.Month":                                  "time",
	"time.Nanosecond":                             "time",
	"time.NewTicker":                              "time",
	"time.NewTimer":                               "time",
	"time.November":                               "time",
	"time.Now":                                    "time",
	"time.October":                                "time",
	"time.Parse":                                  "time",
	"time.ParseDuration":                          "time",
	"time.ParseError":                             "time",
	"time.ParseInLocation":                        "time",
	"time.RFC1123":                                "time",
	"time.RFC1123Z":                               "time",
	"time.RFC3339":                                "time",
	"time.RFC3339Nano":                            "time",
	"time.RFC822":                                 "time",
	"time.RFC822Z":                                "time",
	"time.RFC850":                                 "time",
	"time.RubyDate":                               "time",
	"time.Saturday":                               "time",
	"time.Second":                                 "time",
	"time.September":                              "time",
	"time.Since":                                  "time",
	"time.Sleep":                                  "time",
	"time.Stamp":                                  "time",
	"time.StampMicro":                             "time",
	"time.StampMilli":                             "time",
	"time.StampNano":                              "time",
	"time.Sunday":                                 "time",
	"time.Thursday":                               "time",
	"time.Tick":                                   "time",
	"time.Ticker":                                 "time",
	"time.Time":                                   "time",
	"time.Timer":                                  "time",
	"time.Tuesday":                                "time",
	"time.UTC":                                    "time",
	"time.Unix":                                   "time",
	"time.UnixDate":                               "time",
	"time.Wednesday":                              "time",
	"time.Weekday":                                "time",
	"tls.Certificate":                             "crypto/tls",
	"tls.Client":                                  "crypto/tls",
	"tls.ClientAuthType":                          "crypto/tls",
	"tls.ClientHelloInfo":                         "crypto/tls",
	"tls.ClientSessionCache":                      "crypto/tls",
	"tls.ClientSessionState":                      "crypto/tls",
	"tls.Config":                                  "crypto/tls",
	"tls.Conn":                                    "crypto/tls",
	"tls.ConnectionState":                         "crypto/tls",
	"tls.CurveID":                                 "crypto/tls",
	"tls.CurveP256":                               "crypto/tls",
	"tls.CurveP384":                               "crypto/tls",
	"tls.CurveP521":                               "crypto/tls",
	"tls.Dial":                                    "crypto/tls",
	"tls.DialWithDialer":                          "crypto/tls",
	"tls.Listen":                                  "crypto/tls",
	"tls.LoadX509KeyPair":                         "crypto/tls",
	"tls.NewLRUClientSessionCache":                "crypto/tls",
	"tls.NewListener":                             "crypto/tls",
	"tls.NoClientCert":                            "crypto/tls",
	"tls.RequestClientCert":                       "crypto/tls",
	"tls.RequireAndVerifyClientCert":              "crypto/tls",
	"tls.RequireAnyClientCert":                    "crypto/tls",
	"tls.Server":                                  "crypto/tls",
	"tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":    "crypto/tls",
	"tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": "crypto/tls",
	"tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    "crypto/tls",
	"tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": "crypto/tls",
	"tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":   "crypto/tls",
	"tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA":          "crypto/tls",
	"tls.TLS_FALLBACK_SCSV":                       "crypto/tls",
	"tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA":           "crypto/tls",
	"tls.TLS_RSA_WITH_AES_128_CBC_SHA":            "crypto/tls",
	"tls.TLS_RSA_WITH_AES_256_CBC_SHA":            "crypto/tls",
	"tls.TLS_RSA_WITH_RC4_128_SHA":                "crypto/tls",
	"tls.VerifyClientCertIfGiven":                 "crypto/tls",
	"tls.VersionSSL30":                            "crypto/tls",
	"tls.VersionTLS10":                            "crypto/tls",
	"tls.VersionTLS11":                            "crypto/tls",
	"tls.VersionTLS12":                            "crypto/tls",
	"tls.X509KeyPair":                             "crypto/tls",
	"token.ADD":                                   "go/token",
	"token.ADD_ASSIGN":                            "go/token",
	"token.AND":                                   "go/token",
	"token.AND_ASSIGN":                            "go/token",
	"token.AND_NOT":                               "go/token",
	"token.AND_NOT_ASSIGN":                        "go/token",
	"token.ARROW":                                 "go/token",
	"token.ASSIGN":                                "go/token",
	"token.BREAK":                                 "go/token",
	"token.CASE":                                  "go/token",
	"token.CHAN":                                  "go/token",
	"token.CHAR":                                  "go/token",
	"token.COLON":                                 "go/token",
	"token.COMMA":                                 "go/token",
	"token.COMMENT":                               "go/token",
	"token.CONST":                                 "go/token",
	"token.CONTINUE":                              "go/token",
	"token.DEC":                                   "go/token",
	"token.DEFAULT":                               "go/token",
	"token.DEFER":                                 "go/token",
	"token.DEFINE":                                "go/token",
	"token.ELLIPSIS":                              "go/token",
	"token.ELSE":                                  "go/token",
	"token.EOF":                                   "go/token",
	"token.EQL":                                   "go/token",
	"token.FALLTHROUGH":                           "go/token",
	"token.FLOAT":                                 "go/token",
	"token.FOR":                                   "go/token",
	"token.FUNC":                                  "go/token",
	"token.File":                                  "go/token",
	"token.FileSet":                               "go/token",
	"token.GEQ":                                   "go/token",
	"token.GO":                                    "go/token",
	"token.GOTO":                                  "go/token",
	"token.GTR":                                   "go/token",
	"token.HighestPrec":                           "go/token",
	"token.IDENT":                                 "go/token",
	"token.IF":                                    "go/token",
	"token.ILLEGAL":                               "go/token",
	"token.IMAG":                                  "go/token",
	"token.IMPORT":                                "go/token",
	"token.INC":                                   "go/token",
	"token.INT":                                   "go/token",
	"token.INTERFACE":                             "go/token",
	"token.LAND":                                  "go/token",
	"token.LBRACE":                                "go/token",
	"token.LBRACK":                                "go/token",
	"token.LEQ":                                   "go/token",
	"token.LOR":                                   "go/token",
	"token.LPAREN":                                "go/token",
	"token.LSS":                                   "go/token",
	"token.Lookup":                                "go/token",
	"token.LowestPrec":                            "go/token",
	"token.MAP":                                   "go/token",
	"token.MUL":                                   "go/token",
	"token.MUL_ASSIGN":                            "go/token",
	"token.NEQ":                                   "go/token",
	"token.NOT":                                   "go/token",
	"token.NewFileSet":                            "go/token",
	"token.NoPos":                                 "go/token",
	"token.OR":                                    "go/token",
	"token.OR_ASSIGN":                             "go/token",
	"token.PACKAGE":                               "go/token",
	"token.PERIOD":                                "go/token",
	"token.Pos":                                   "go/token",
	"token.Position":                              "go/token",
	"token.QUO":                                   "go/token",
	"token.QUO_ASSIGN":                            "go/token",
	"token.RANGE":                                 "go/token",
	"token.RBRACE":                                "go/token",
	"token.RBRACK":                                "go/token",
	"token.REM":                                   "go/token",
	"token.REM_ASSIGN":                            "go/token",
	"token.RETURN":                                "go/token",
	"token.RPAREN":                                "go/token",
	"token.SELECT":                                "go/token",
	"token.SEMICOLON":                             "go/token",
	"token.SHL":                                   "go/token",
	"token.SHL_ASSIGN":                            "go/token",
	"token.SHR":                                   "go/token",
	"token.SHR_ASSIGN":                            "go/token",
	"token.STRING":                                "go/token",
	"token.STRUCT":                                "go/token",
	"token.SUB":                                   "go/token",
	"token.SUB_ASSIGN":                            "go/token",
	"token.SWITCH":                                "go/token",
	"token.TYPE":                                  "go/token",
	"token.Token":                                 "go/token",
	"token.UnaryPrec":                             "go/token",
	"token.VAR":                                   "go/token",
	"token.XOR":                                   "go/token",
	"token.XOR_ASSIGN":                            "go/token",
	"trace.Start":                                 "runtime/trace",
	"trace.Stop":                                  "runtime/trace",
	"types.Array":                                 "go/types",
	"types.AssertableTo":                          "go/types",
	"types.AssignableTo":                          "go/types",
	"types.Basic":                                 "go/types",
	"types.BasicInfo":                             "go/types",
	"types.BasicKind":                             "go/types",
	"types.Bool":                                  "go/types",
	"types.Builtin":                               "go/types",
	"types.Byte":                                  "go/types",
	"types.Chan":                                  "go/types",
	"types.ChanDir":                               "go/types",
	"types.Checker":                               "go/types",
	"types.Comparable":                            "go/types",
	"types.Complex128":                            "go/types",
	"types.Complex64":                             "go/types",
	"types.Config":                                "go/types",
	"types.Const":                                 "go/types",
	"types.ConvertibleTo":                         "go/types",
	"types.DefPredeclaredTestFuncs":               "go/types",
	"types.Error":                                 "go/types",
	"types.Eval":                                  "go/types",
	"types.ExprString":                            "go/types",
	"types.FieldVal":                              "go/types",
	"types.Float32":                               "go/types",
	"types.Float64":                               "go/types",
	"types.Func":                                  "go/types",
	"types.Id":                                    "go/types",
	"types.Identical":                             "go/types",
	"types.Implements":                            "go/types",
	"types.Importer":                              "go/types",
	"types.Info":                                  "go/types",
	"types.Initializer":                           "go/types",
	"types.Int":                                   "go/types",
	"types.Int16":                                 "go/types",
	"types.Int32":                                 "go/types",
	"types.Int64":                                 "go/types",
	"types.Int8":                                  "go/types",
	"types.Interface":                             "go/types",
	"types.Invalid":                               "go/types",
	"types.IsBoolean":                             "go/types",
	"types.IsComplex":                             "go/types",
	"types.IsConstType":                           "go/types",
	"types.IsFloat":                               "go/types",
	"types.IsInteger":                             "go/types",
	"types.IsInterface":                           "go/types",
	"types.IsNumeric":                             "go/types",
	"types.IsOrdered":                             "go/types",
	"types.IsString":                              "go/types",
	"types.IsUnsigned":                            "go/types",
	"types.IsUntyped":                             "go/types",
	"types.Label":                                 "go/types",
	"types.LookupFieldOrMethod":                   "go/types",
	"types.Map":                                   "go/types",
	"types.MethodExpr":                            "go/types",
	"types.MethodSet":                             "go/types",
	"types.MethodVal":                             "go/types",
	"types.MissingMethod":                         "go/types",
	"types.Named":                                 "go/types",
	"types.NewArray":                              "go/types",
	"types.NewChan":                               "go/types",
	"types.NewChecker":                            "go/types",
	"types.NewConst":                              "go/types",
	"types.NewField":                              "go/types",
	"types.NewFunc":                               "go/types",
	"types.NewInterface":                          "go/types",
	"types.NewLabel":                              "go/types",
	"types.NewMap":                                "go/types",
	"types.NewMethodSet":                          "go/types",
	"types.NewNamed":                              "go/types",
	"types.NewPackage":                            "go/types",
	"types.NewParam":                              "go/types",
	"types.NewPkgName":                            "go/types",
	"types.NewPointer":                            "go/types",
	"types.NewScope":                              "go/types",
	"types.NewSignature":                          "go/types",
	"types.NewSlice":                              "go/types",
	"types.NewStruct":                             "go/types",
	"types.NewTuple":                              "go/types",
	"types.NewTypeName":                           "go/types",
	"types.NewVar":                                "go/types",
	"types.Nil":                                   "go/types",
	"types.ObjectString":                          "go/types",
	"types.Package":                               "go/types",
	"types.PkgName":                               "go/types",
	"types.Pointer":                               "go/types",
	"types.Qualifier":                             "go/types",
	"types.RecvOnly":                              "go/types",
	"types.RelativeTo":                            "go/types",
	"types.Rune":                                  "go/types",
	"types.Scope":                                 "go/types",
	"types.Selection":                             "go/types",
	"types.SelectionKind":                         "go/types",
	"types.SelectionString":                       "go/types",
	"types.SendOnly":                              "go/types",
	"types.SendRecv":                              "go/types",
	"types.Signature":                             "go/types",
	"types.Sizes":                                 "go/types",
	"types.Slice":                                 "go/types",
	"types.StdSizes":                              "go/types",
	"types.String":                                "go/types",
	"types.Struct":                                "go/types",
	"types.Tuple":                                 "go/types",
	"types.Typ":                                   "go/types",
	"types.Type":                                  "go/types",
	"types.TypeAndValue":                          "go/types",
	"types.TypeName":                              "go/types",
	"types.TypeString":                            "go/types",
	"types.Uint":                                  "go/types",
	"types.Uint16":                                "go/types",
	"types.Uint32":                                "go/types",
	"types.Uint64":                                "go/types",
	"types.Uint8":                                 "go/types",
	"types.Uintptr":                               "go/types",
	"types.Universe":                              "go/types",
	"types.Unsafe":                                "go/types",
	"types.UnsafePointer":                         "go/types",
	"types.UntypedBool":                           "go/types",
	"types.UntypedComplex":                        "go/types",
	"types.UntypedFloat":                          "go/types",
	"types.UntypedInt":                            "go/types",
	"types.UntypedNil":                            "go/types",
	"types.UntypedRune":                           "go/types",
	"types.UntypedString":                         "go/types",
	"types.Var":                                   "go/types",
	"types.WriteExpr":                             "go/types",
	"types.WriteSignature":                        "go/types",
	"types.WriteType":                             "go/types",
	"unicode.ASCII_Hex_Digit":                     "unicode",
	"unicode.Ahom":                                "unicode",
	"unicode.Anatolian_Hieroglyphs":               "unicode",
	"unicode.Arabic":                              "unicode",
	"unicode.Armenian":                            "unicode",
	"unicode.Avestan":                             "unicode",
	"unicode.AzeriCase":                           "unicode",
	"unicode.Balinese":                            "unicode",
	"unicode.Bamum":                               "unicode",
	"unicode.Bassa_Vah":                           "unicode",
	"unicode.Batak":                               "unicode",
	"unicode.Bengali":                             "unicode",
	"unicode.Bidi_Control":                        "unicode",
	"unicode.Bopomofo":                            "unicode",
	"unicode.Brahmi":                              "unicode",
	"unicode.Braille":                             "unicode",
	"unicode.Buginese":                            "unicode",
	"unicode.Buhid":                               "unicode",
	"unicode.C":                                   "unicode",
	"unicode.Canadian_Aboriginal":                 "unicode",
	"unicode.Carian":                              "unicode",
	"unicode.CaseRange":                           "unicode",
	"unicode.CaseRanges":                          "unicode",
	"unicode.Categories":                          "unicode",
	"unicode.Caucasian_Albanian":                  "unicode",
	"unicode.Cc":                                  "unicode",
	"unicode.Cf":                                  "unicode",
	"unicode.Chakma":                              "unicode",
	"unicode.Cham":                                "unicode",
	"unicode.Cherokee":                            "unicode",
	"unicode.Co":                                  "unicode",
	"unicode.Common":                              "unicode",
	"unicode.Coptic":                              "unicode",
	"unicode.Cs":                                  "unicode",
	"unicode.Cuneiform":                           "unicode",
	"unicode.Cypriot":                             "unicode",
	"unicode.Cyrillic":                            "unicode",
	"unicode.Dash":                                "unicode",
	"unicode.Deprecated":                          "unicode",
	"unicode.Deseret":                             "unicode",
	"unicode.Devanagari":                          "unicode",
	"unicode.Diacritic":                           "unicode",
	"unicode.Digit":                               "unicode",
	"unicode.Duployan":                            "unicode",
	"unicode.Egyptian_Hieroglyphs":                "unicode",
	"unicode.Elbasan":                             "unicode",
	"unicode.Ethiopic":                            "unicode",
	"unicode.Extender":                            "unicode",
	"unicode.FoldCategory":                        "unicode",
	"unicode.FoldScript":                          "unicode",
	"unicode.Georgian":                            "unicode",
	"unicode.Glagolitic":                          "unicode",
	"unicode.Gothic":                              "unicode",
	"unicode.Grantha":                             "unicode",
	"unicode.GraphicRanges":                       "unicode",
	"unicode.Greek":                               "unicode",
	"unicode.Gujarati":                            "unicode",
	"unicode.Gurmukhi":                            "unicode",
	"unicode.Han":                                 "unicode",
	"unicode.Hangul":                              "unicode",
	"unicode.Hanunoo":                             "unicode",
	"unicode.Hatran":                              "unicode",
	"unicode.Hebrew":                              "unicode",
	"unicode.Hex_Digit":                           "unicode",
	"unicode.Hiragana":                            "unicode",
	"unicode.Hyphen":                              "unicode",
	"unicode.IDS_Binary_Operator":                 "unicode",
	"unicode.IDS_Trinary_Operator":                "unicode",
	"unicode.Ideographic":                         "unicode",
	"unicode.Imperial_Aramaic":                    "unicode",
	"unicode.In":                                  "unicode",
	"unicode.Inherited":                           "unicode",
	"unicode.Inscriptional_Pahlavi":               "unicode",
	"unicode.Inscriptional_Parthian":              "unicode",
	"unicode.Is":                                  "unicode",
	"unicode.IsControl":                           "unicode",
	"unicode.IsDigit":                             "unicode",
	"unicode.IsGraphic":                           "unicode",
	"unicode.IsLetter":                            "unicode",
	"unicode.IsLower":                             "unicode",
	"unicode.IsMark":                              "unicode",
	"unicode.IsNumber":                            "unicode",
	"unicode.IsOneOf":                             "unicode",
	"unicode.IsPrint":                             "unicode",
	"unicode.IsPunct":                             "unicode",
	"unicode.IsSpace":                             "unicode",
	"unicode.IsSymbol":                            "unicode",
	"unicode.IsTitle":                             "unicode",
	"unicode.IsUpper":                             "unicode",
	"unicode.Javanese":                            "unicode",
	"unicode.Join_Control":                        "unicode",
	"unicode.Kaithi":                              "unicode",
	"unicode.Kannada":                             "unicode",
	"unicode.Katakana":                            "unicode",
	"unicode.Kayah_Li":                            "unicode",
	"unicode.Kharoshthi":                          "unicode",
	"unicode.Khmer":                               "unicode",
	"unicode.Khojki":                              "unicode",
	"unicode.Khudawadi":                           "unicode",
	"unicode.L":                                   "unicode",
	"unicode.Lao":                                 "unicode",
	"unicode.Latin":                               "unicode",
	"unicode.Lepcha":                              "unicode",
	"unicode.Letter":                              "unicode",
	"unicode.Limbu":                               "unicode",
	"unicode.Linear_A":                            "unicode",
	"unicode.Linear_B":                            "unicode",
	"unicode.Lisu":                                "unicode",
	"unicode.Ll":                                  "unicode",
	"unicode.Lm":                                  "unicode",
	"unicode.Lo":                                  "unicode",
	"unicode.Logical_Order_Exception":             "unicode",
	"unicode.Lower":                               "unicode",
	"unicode.LowerCase":                           "unicode",
	"unicode.Lt":                                  "unicode",
	"unicode.Lu":                                  "unicode",
	"unicode.Lycian":                              "unicode",
	"unicode.Lydian":                              "unicode",
	"unicode.M":                                   "unicode",
	"unicode.Mahajani":                            "unicode",
	"unicode.Malayalam":                           "unicode",
	"unicode.Mandaic":                             "unicode",
	"unicode.Manichaean":                          "unicode",
	"unicode.Mark":                                "unicode",
	"unicode.MaxASCII":                            "unicode",
	"unicode.MaxCase":                             "unicode",
	"unicode.MaxLatin1":                           "unicode",
	"unicode.MaxRune":                             "unicode",
	"unicode.Mc":                                  "unicode",
	"unicode.Me":                                  "unicode",
	"unicode.Meetei_Mayek":                        "unicode",
	"unicode.Mende_Kikakui":                       "unicode",
	"unicode.Meroitic_Cursive":                    "unicode",
	"unicode.Meroitic_Hieroglyphs":                "unicode",
	"unicode.Miao":                                "unicode",
	"unicode.Mn":                                  "unicode",
	"unicode.Modi":                                "unicode",
	"unicode.Mongolian":                           "unicode",
	"unicode.Mro":                                 "unicode",
	"unicode.Multani":                             "unicode",
	"unicode.Myanmar":                             "unicode",
	"unicode.N":                                   "unicode",
	"unicode.Nabataean":                           "unicode",
	"unicode.Nd":                                  "unicode",
	"unicode.New_Tai_Lue":                         "unicode",
	"unicode.Nko":                                 "unicode",
	"unicode.Nl":                                  "unicode",
	"unicode.No":                                  "unicode",
	"unicode.Noncharacter_Code_Point":             "unicode",
	"unicode.Number":                              "unicode",
	"unicode.Ogham":                               "unicode",
	"unicode.Ol_Chiki":                            "unicode",
	"unicode.Old_Hungarian":                       "unicode",
	"unicode.Old_Italic":                          "unicode",
	"unicode.Old_North_Arabian":                   "unicode",
	"unicode.Old_Permic":                          "unicode",
	"unicode.Old_Persian":                         "unicode",
	"unicode.Old_South_Arabian":                   "unicode",
	"unicode.Old_Turkic":                          "unicode",
	"unicode.Oriya":                               "unicode",
	"unicode.Osmanya":                             "unicode",
	"unicode.Other":                               "unicode",
	"unicode.Other_Alphabetic":                    "unicode",
	"unicode.Other_Default_Ignorable_Code_Point":  "unicode",
	"unicode.Other_Grapheme_Extend":               "unicode",
	"unicode.Other_ID_Continue":                   "unicode",
	"unicode.Other_ID_Start":                      "unicode",
	"unicode.Other_Lowercase":                     "unicode",
	"unicode.Other_Math":                          "unicode",
	"unicode.Other_Uppercase":                     "unicode",
	"unicode.P":                                   "unicode",
	"unicode.Pahawh_Hmong":                        "unicode",
	"unicode.Palmyrene":                           "unicode",
	"unicode.Pattern_Syntax":                      "unicode",
	"unicode.Pattern_White_Space":                 "unicode",
	"unicode.Pau_Cin_Hau":                         "unicode",
	"unicode.Pc":                                  "unicode",
	"unicode.Pd":                                  "unicode",
	"unicode.Pe":                                  "unicode",
	"unicode.Pf":                                  "unicode",
	"unicode.Phags_Pa":                            "unicode",
	"unicode.Phoenician":                          "unicode",
	"unicode.Pi":                                  "unicode",
	"unicode.Po":                                  "unicode",
	"unicode.PrintRanges":                         "unicode",
	"unicode.Properties":                          "unicode",
	"unicode.Ps":                                  "unicode",
	"unicode.Psalter_Pahlavi":                     "unicode",
	"unicode.Punct":                               "unicode",
	"unicode.Quotation_Mark":                      "unicode",
	"unicode.Radical":                             "unicode",
	"unicode.Range16":                             "unicode",
	"unicode.Range32":                             "unicode",
	"unicode.RangeTable":                          "unicode",
	"unicode.Rejang":                              "unicode",
	"unicode.ReplacementChar":                     "unicode",
	"unicode.Runic":                               "unicode",
	"unicode.S":                                   "unicode",
	"unicode.STerm":                               "unicode",
	"unicode.Samaritan":                           "unicode",
	"unicode.Saurashtra":                          "unicode",
	"unicode.Sc":                                  "unicode",
	"unicode.Scripts":                             "unicode",
	"unicode.Sharada":                             "unicode",
	"unicode.Shavian":                             "unicode",
	"unicode.Siddham":                             "unicode",
	"unicode.SignWriting":                         "unicode",
	"unicode.SimpleFold":                          "unicode",
	"unicode.Sinhala":                             "unicode",
	"unicode.Sk":                                  "unicode",
	"unicode.Sm":                                  "unicode",
	"unicode.So":                                  "unicode",
	"unicode.Soft_Dotted":                         "unicode",
	"unicode.Sora_Sompeng":                        "unicode",
	"unicode.Space":                               "unicode",
	"unicode.SpecialCase":                         "unicode",
	"unicode.Sundanese":                           "unicode",
	"unicode.Syloti_Nagri":                        "unicode",
	"unicode.Symbol":                              "unicode",
	"unicode.Syriac":                              "unicode",
	"unicode.Tagalog":                             "unicode",
	"unicode.Tagbanwa":                            "unicode",
	"unicode.Tai_Le":                              "unicode",
	"unicode.Tai_Tham":                            "unicode",
	"unicode.Tai_Viet":                            "unicode",
	"unicode.Takri":                               "unicode",
	"unicode.Tamil":                               "unicode",
	"unicode.Telugu":                              "unicode",
	"unicode.Terminal_Punctuation":                "unicode",
	"unicode.Thaana":                              "unicode",
	"unicode.Thai":                                "unicode",
	"unicode.Tibetan":                             "unicode",
	"unicode.Tifinagh":                            "unicode",
	"unicode.Tirhuta":                             "unicode",
	"unicode.Title":                               "unicode",
	"unicode.TitleCase":                           "unicode",
	"unicode.To":                                  "unicode",
	"unicode.ToLower":                             "unicode",
	"unicode.ToTitle":                             "unicode",
	"unicode.ToUpper":                             "unicode",
	"unicode.TurkishCase":                         "unicode",
	"unicode.Ugaritic":                            "unicode",
	"unicode.Unified_Ideograph":                   "unicode",
	"unicode.Upper":                               "unicode",
	"unicode.UpperCase":                           "unicode",
	"unicode.UpperLower":                          "unicode",
	"unicode.Vai":                                 "unicode",
	"unicode.Variation_Selector":                  "unicode",
	"unicode.Version":                             "unicode",
	"unicode.Warang_Citi":                         "unicode",
	"unicode.White_Space":                         "unicode",
	"unicode.Yi":                                  "unicode",
	"unicode.Z":                                   "unicode",
	"unicode.Zl":                                  "unicode",
	"unicode.Zp":                                  "unicode",
	"unicode.Zs":                                  "unicode",
	"url.Error":                                   "net/url",
	"url.EscapeError":                             "net/url",
	"url.Parse":                                   "net/url",
	"url.ParseQuery":                              "net/url",
	"url.ParseRequestURI":                         "net/url",
	"url.QueryEscape":                             "net/url",
	"url.QueryUnescape":                           "net/url",
	"url.URL":                                     "net/url",
	"url.User":                                    "net/url",
	"url.UserPassword":                            "net/url",
	"url.Userinfo":                                "net/url",
	"url.Values":                                  "net/url",
	"user.Current":                                "os/user",
	"user.Lookup":                                 "os/user",
	"user.LookupId":                               "os/user",
	"user.UnknownUserError":                       "os/user",
	"user.UnknownUserIdError":                     "os/user",
	"user.User":                                   "os/user",
	"utf16.Decode":                                "unicode/utf16",
	"utf16.DecodeRune":                            "unicode/utf16",
	"utf16.Encode":                                "unicode/utf16",
	"utf16.EncodeRune":                            "unicode/utf16",
	"utf16.IsSurrogate":                           "unicode/utf16",
	"utf8.DecodeLastRune":                         "unicode/utf8",
	"utf8.DecodeLastRuneInString":                 "unicode/utf8",
	"utf8.DecodeRune":                             "unicode/utf8",
	"utf8.DecodeRuneInString":                     "unicode/utf8",
	"utf8.EncodeRune":                             "unicode/utf8",
	"utf8.FullRune":                               "unicode/utf8",
	"utf8.FullRuneInString":                       "unicode/utf8",
	"utf8.MaxRune":                                "unicode/utf8",
	"utf8.RuneCount":                              "unicode/utf8",
	"utf8.RuneCountInString":                      "unicode/utf8",
	"utf8.RuneError":                              "unicode/utf8",
	"utf8.RuneLen":                                "unicode/utf8",
	"utf8.RuneSelf":                               "unicode/utf8",
	"utf8.RuneStart":                              "unicode/utf8",
	"utf8.UTFMax":                                 "unicode/utf8",
	"utf8.Valid":                                  "unicode/utf8",
	"utf8.ValidRune":                              "unicode/utf8",
	"utf8.ValidString":                            "unicode/utf8",
	"x509.CANotAuthorizedForThisName":             "crypto/x509",
	"x509.CertPool":                               "crypto/x509",
	"x509.Certificate":                            "crypto/x509",
	"x509.CertificateInvalidError":                "crypto/x509",
	"x509.CertificateRequest":                     "crypto/x509",
	"x509.ConstraintViolationError":               "crypto/x509",
	"x509.CreateCertificate":                      "crypto/x509",
	"x509.CreateCertificateRequest":               "crypto/x509",
	"x509.DSA":                                    "crypto/x509",
	"x509.DSAWithSHA1":                            "crypto/x509",
	"x509.DSAWithSHA256":                          "crypto/x509",
	"x509.DecryptPEMBlock":                        "crypto/x509",
	"x509.ECDSA":                                  "crypto/x509",
	"x509.ECDSAWithSHA1":                          "crypto/x509",
	"x509.ECDSAWithSHA256":                        "crypto/x509",
	"x509.ECDSAWithSHA384":                        "crypto/x509",
	"x509.ECDSAWithSHA512":                        "crypto/x509",
	"x509.EncryptPEMBlock":                        "crypto/x509",
	"x509.ErrUnsupportedAlgorithm":                "crypto/x509",
	"x509.Expired":                                "crypto/x509",
	"x509.ExtKeyUsage":                            "crypto/x509",
	"x509.ExtKeyUsageAny":                         "crypto/x509",
	"x509.ExtKeyUsageClientAuth":                  "crypto/x509",
	"x509.ExtKeyUsageCodeSigning":                 "crypto/x509",
	"x509.ExtKeyUsageEmailProtection":             "crypto/x509",
	"x509.ExtKeyUsageIPSECEndSystem":              "crypto/x509",
	"x509.ExtKeyUsageIPSECTunnel":                 "crypto/x509",
	"x509.ExtKeyUsageIPSECUser":                   "crypto/x509",
	"x509.ExtKeyUsageMicrosoftServerGatedCrypto":  "crypto/x509",
	"x509.ExtKeyUsageNetscapeServerGatedCrypto":   "crypto/x509",
	"x509.ExtKeyUsageOCSPSigning":                 "crypto/x509",
	"x509.ExtKeyUsageServerAuth":                  "crypto/x509",
	"x509.ExtKeyUsageTimeStamping":                "crypto/x509",
	"x509.HostnameError":                          "crypto/x509",
	"x509.IncompatibleUsage":                      "crypto/x509",
	"x509.IncorrectPasswordError":                 "crypto/x509",
	"x509.InvalidReason":                          "crypto/x509",
	"x509.IsEncryptedPEMBlock":                    "crypto/x509",
	"x509.KeyUsage":                               "crypto/x509",
	"x509.KeyUsageCRLSign":                        "crypto/x509",
	"x509.KeyUsageCertSign":                       "crypto/x509",
	"x509.KeyUsageContentCommitment":              "crypto/x509",
	"x509.KeyUsageDataEncipherment":               "crypto/x509",
	"x509.KeyUsageDecipherOnly":                   "crypto/x509",
	"x509.KeyUsageDigitalSignature":               "crypto/x509",
	"x509.KeyUsageEncipherOnly":                   "crypto/x509",
	"x509.KeyUsageKeyAgreement":                   "crypto/x509",
	"x509.KeyUsageKeyEncipherment":                "crypto/x509",
	"x509.MD2WithRSA":                             "crypto/x509",
	"x509.MD5WithRSA":                             "crypto/x509",
	"x509.MarshalECPrivateKey":                    "crypto/x509",
	"x509.MarshalPKCS1PrivateKey":                 "crypto/x509",
	"x509.MarshalPKIXPublicKey":                   "crypto/x509",
	"x509.NewCertPool":                            "crypto/x509",
	"x509.NotAuthorizedToSign":                    "crypto/x509",
	"x509.PEMCipher":                              "crypto/x509",
	"x509.PEMCipher3DES":                          "crypto/x509",
	"x509.PEMCipherAES128":                        "crypto/x509",
	"x509.PEMCipherAES192":                        "crypto/x509",
	"x509.PEMCipherAES256":                        "crypto/x509",
	"x509.PEMCipherDES":                           "crypto/x509",
	"x509.ParseCRL":                               "crypto/x509",
	"x509.ParseCertificate":                       "crypto/x509",
	"x509.ParseCertificateRequest":                "crypto/x509",
	"x509.ParseCertificates":                      "crypto/x509",
	"x509.ParseDERCRL":                            "crypto/x509",
	"x509.ParseECPrivateKey":                      "crypto/x509",
	"x509.ParsePKCS1PrivateKey":                   "crypto/x509",
	"x509.ParsePKCS8PrivateKey":                   "crypto/x509",
	"x509.ParsePKIXPublicKey":                     "crypto/x509",
	"x509.PublicKeyAlgorithm":                     "crypto/x509",
	"x509.RSA":                                    "crypto/x509",
	"x509.SHA1WithRSA":                            "crypto/x509",
	"x509.SHA256WithRSA":                          "crypto/x509",
	"x509.SHA384WithRSA":                          "crypto/x509",
	"x509.SHA512WithRSA":                          "crypto/x509",
	"x509.SignatureAlgorithm":                     "crypto/x509",
	"x509.SystemRootsError":                       "crypto/x509",
	"x509.TooManyIntermediates":                   "crypto/x509",
	"x509.UnhandledCriticalExtension":             "crypto/x509",
	"x509.UnknownAuthorityError":                  "crypto/x509",
	"x509.UnknownPublicKeyAlgorithm":              "crypto/x509",
	"x509.UnknownSignatureAlgorithm":              "crypto/x509",
	"x509.VerifyOptions":                          "crypto/x509",
	"xml.Attr":                                    "encoding/xml",
	"xml.CharData":                                "encoding/xml",
	"xml.Comment":                                 "encoding/xml",
	"xml.CopyToken":                               "encoding/xml",
	"xml.Decoder":                                 "encoding/xml",
	"xml.Directive":                               "encoding/xml",
	"xml.Encoder":                                 "encoding/xml",
	"xml.EndElement":                              "encoding/xml",
	"xml.Escape":                                  "encoding/xml",
	"xml.EscapeText":                              "encoding/xml",
	"xml.HTMLAutoClose":                           "encoding/xml",
	"xml.HTMLEntity":                              "encoding/xml",
	"xml.Header":                                  "encoding/xml",
	"xml.Marshal":                                 "encoding/xml",
	"xml.MarshalIndent":                           "encoding/xml",
	"xml.Marshaler":                               "encoding/xml",
	"xml.MarshalerAttr":                           "encoding/xml",
	"xml.Name":                                    "encoding/xml",
	"xml.NewDecoder":                              "encoding/xml",
	"xml.NewEncoder":                              "encoding/xml",
	"xml.ProcInst":                                "encoding/xml",
	"xml.StartElement":                            "encoding/xml",
	"xml.SyntaxError":                             "encoding/xml",
	"xml.TagPathError":                            "encoding/xml",
	"xml.Token":                                   "encoding/xml",
	"xml.Unmarshal":                               "encoding/xml",
	"xml.UnmarshalError":                          "encoding/xml",
	"xml.Unmarshaler":                             "encoding/xml",
	"xml.UnmarshalerAttr":                         "encoding/xml",
	"xml.UnsupportedTypeError":                    "encoding/xml",
	"zip.Compressor":                              "archive/zip",
	"zip.Decompressor":                            "archive/zip",
	"zip.Deflate":                                 "archive/zip",
	"zip.ErrAlgorithm":                            "archive/zip",
	"zip.ErrChecksum":                             "archive/zip",
	"zip.ErrFormat":                               "archive/zip",
	"zip.File":                                    "archive/zip",
	"zip.FileHeader":                              "archive/zip",
	"zip.FileInfoHeader":                          "archive/zip",
	"zip.NewReader":                               "archive/zip",
	"zip.NewWriter":                               "archive/zip",
	"zip.OpenReader":                              "archive/zip",
	"zip.ReadCloser":                              "archive/zip",
	"zip.Reader":                                  "archive/zip",
	"zip.RegisterCompressor":                      "archive/zip",
	"zip.RegisterDecompressor":                    "archive/zip",
	"zip.Store":                                   "archive/zip",
	"zip.Writer":                                  "archive/zip",
	"zlib.BestCompression":                        "compress/zlib",
	"zlib.BestSpeed":                              "compress/zlib",
	"zlib.DefaultCompression":                     "compress/zlib",
	"zlib.ErrChecksum":                            "compress/zlib",
	"zlib.ErrDictionary":                          "compress/zlib",
	"zlib.ErrHeader":                              "compress/zlib",
	"zlib.NewReader":                              "compress/zlib",
	"zlib.NewReaderDict":                          "compress/zlib",
	"zlib.NewWriter":                              "compress/zlib",
	"zlib.NewWriterLevel":                         "compress/zlib",
	"zlib.NewWriterLevelDict":                     "compress/zlib",
	"zlib.NoCompression":                          "compress/zlib",
	"zlib.Resetter":                               "compress/zlib",
	"zlib.Writer":                                 "compress/zlib",
}
                                                   go/src/golang.org/x/tools/oracle/                                                                   0040755 0000000 0000000 00000000000 13101127476 015357  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/TODO                                                               0100644 0000000 0000000 00000004122 13101127476 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        

ORACLE TODO
===========

General
=======

Save unsaved editor buffers into an archive and provide that to the
tools, which should act as if they were saved.

Include complete pos/end information Serial output.
  But beware that sometimes a single token (e.g. +) is more helpful
  than the pos/end of the containing expression (e.g. x \n + \n y).

Specific queries
================

callers, callees

  Use a type-based (e.g. RTA) callgraph when a callers/callees query is
  outside the analysis scope.

implements

   Make it require that the selection is a type, and show only the
   implements relation as it applies to that type.

definition, referrers

  definition: Make it work with qualified identifiers (SelectorExpr) too.

  references: Make it work on things that are implicit idents, like
  import specs, perhaps?

what

  Report def/ref info if available.
  Editors could use it to highlight all idents of the same local var.

  More tests.

pointsto

  When invoked on a function Ident, we get an error.

  When invoked on a named return parameter, we get an error.

describe

  When invoked on a var, we want to see the type and its methods.

  Split "show type" and "describe syntax" into separate commands?

peers

  Permit querying from a makechan, for...range, or reflective op.

  Report aliasing reflect.{Send,Recv,Close} and close() operations.

New queries

"updaters": show all statements that may update the selected lvalue
  (local, global, field, etc).

"creators": show all places where an object of type T is created
  (&T{}, var t T, new(T), new(struct{array [3]T}), etc.
  (Useful for datatypes whose zero value is not safe)


Editor-specific
===============

Add support for "what" to .el; clean up.

Emacs: use JSON to get the raw information from the oracle.  Don't
 open an editor buffer for simpler queries, just jump to the result
 and/or display it in the modeline.

Emacs: go-root-and-paths depends on the current buffer, so be sure to
   call it from within the source file, not the *go-oracle* buffer:
   the user may have switched workspaces and the oracle should run in
   the new one.
                                                                                                                                                                                                                                                                                                                                                                                                                                              go/src/golang.org/x/tools/oracle/callees.go                                                         0100644 0000000 0000000 00000014642 13101127476 017322  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"
	"sort"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/pointer"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

// Callees reports the possible callees of the function call site
// identified by the specified source location.
func callees(q *Query) error {
	lconf := loader.Config{Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, true) // needs exact pos
	if err != nil {
		return err
	}

	// Determine the enclosing call for the specified position.
	var e *ast.CallExpr
	for _, n := range qpos.path {
		if e, _ = n.(*ast.CallExpr); e != nil {
			break
		}
	}
	if e == nil {
		return fmt.Errorf("there is no function call here")
	}
	// TODO(adonovan): issue an error if the call is "too far
	// away" from the current selection, as this most likely is
	// not what the user intended.

	// Reject type conversions.
	if qpos.info.Types[e.Fun].IsType() {
		return fmt.Errorf("this is a type conversion, not a function call")
	}

	// Deal with obviously static calls before constructing SSA form.
	// Some static calls may yet require SSA construction,
	// e.g.  f := func(){}; f().
	switch funexpr := unparen(e.Fun).(type) {
	case *ast.Ident:
		switch obj := qpos.info.Uses[funexpr].(type) {
		case *types.Builtin:
			// Reject calls to built-ins.
			return fmt.Errorf("this is a call to the built-in '%s' operator", obj.Name())
		case *types.Func:
			// This is a static function call
			q.result = &calleesTypesResult{
				site:   e,
				callee: obj,
			}
			return nil
		}
	case *ast.SelectorExpr:
		sel := qpos.info.Selections[funexpr]
		if sel == nil {
			// qualified identifier.
			// May refer to top level function variable
			// or to top level function.
			callee := qpos.info.Uses[funexpr.Sel]
			if obj, ok := callee.(*types.Func); ok {
				q.result = &calleesTypesResult{
					site:   e,
					callee: obj,
				}
				return nil
			}
		} else if sel.Kind() == types.MethodVal {
			recvtype := sel.Recv()
			if !types.IsInterface(recvtype) {
				// static method call
				q.result = &calleesTypesResult{
					site:   e,
					callee: sel.Obj().(*types.Func),
				}
				return nil
			}
		}
	}

	prog := ssautil.CreateProgram(lprog, ssa.GlobalDebug)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	pkg := prog.Package(qpos.info.Pkg)
	if pkg == nil {
		return fmt.Errorf("no SSA package")
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	// Ascertain calling function and call site.
	callerFn := ssa.EnclosingFunction(pkg, qpos.path)
	if callerFn == nil {
		return fmt.Errorf("no SSA function built for this location (dead code?)")
	}

	// Find the call site.
	site, err := findCallSite(callerFn, e)
	if err != nil {
		return err
	}

	funcs, err := findCallees(ptaConfig, site)
	if err != nil {
		return err
	}

	q.result = &calleesSSAResult{
		site:  site,
		funcs: funcs,
	}
	return nil
}

func findCallSite(fn *ssa.Function, call *ast.CallExpr) (ssa.CallInstruction, error) {
	instr, _ := fn.ValueForExpr(call)
	callInstr, _ := instr.(ssa.CallInstruction)
	if instr == nil {
		return nil, fmt.Errorf("this call site is unreachable in this analysis")
	}
	return callInstr, nil
}

func findCallees(conf *pointer.Config, site ssa.CallInstruction) ([]*ssa.Function, error) {
	// Avoid running the pointer analysis for static calls.
	if callee := site.Common().StaticCallee(); callee != nil {
		switch callee.String() {
		case "runtime.SetFinalizer", "(reflect.Value).Call":
			// The PTA treats calls to these intrinsics as dynamic.
			// TODO(adonovan): avoid reliance on PTA internals.

		default:
			return []*ssa.Function{callee}, nil // singleton
		}
	}

	// Dynamic call: use pointer analysis.
	conf.BuildCallGraph = true
	cg := ptrAnalysis(conf).CallGraph
	cg.DeleteSyntheticNodes()

	// Find all call edges from the site.
	n := cg.Nodes[site.Parent()]
	if n == nil {
		return nil, fmt.Errorf("this call site is unreachable in this analysis")
	}
	calleesMap := make(map[*ssa.Function]bool)
	for _, edge := range n.Out {
		if edge.Site == site {
			calleesMap[edge.Callee.Func] = true
		}
	}

	// De-duplicate and sort.
	funcs := make([]*ssa.Function, 0, len(calleesMap))
	for f := range calleesMap {
		funcs = append(funcs, f)
	}
	sort.Sort(byFuncPos(funcs))
	return funcs, nil
}

type calleesSSAResult struct {
	site  ssa.CallInstruction
	funcs []*ssa.Function
}

type calleesTypesResult struct {
	site   *ast.CallExpr
	callee *types.Func
}

func (r *calleesSSAResult) display(printf printfFunc) {
	if len(r.funcs) == 0 {
		// dynamic call on a provably nil func/interface
		printf(r.site, "%s on nil value", r.site.Common().Description())
	} else {
		printf(r.site, "this %s dispatches to:", r.site.Common().Description())
		for _, callee := range r.funcs {
			printf(callee, "\t%s", callee)
		}
	}
}

func (r *calleesSSAResult) toSerial(res *serial.Result, fset *token.FileSet) {
	j := &serial.Callees{
		Pos:  fset.Position(r.site.Pos()).String(),
		Desc: r.site.Common().Description(),
	}
	for _, callee := range r.funcs {
		j.Callees = append(j.Callees, &serial.CalleesItem{
			Name: callee.String(),
			Pos:  fset.Position(callee.Pos()).String(),
		})
	}
	res.Callees = j
}

func (r *calleesTypesResult) display(printf printfFunc) {
	printf(r.site, "this static function call dispatches to:")
	printf(r.callee, "\t%s", r.callee.FullName())
}

func (r *calleesTypesResult) toSerial(res *serial.Result, fset *token.FileSet) {
	j := &serial.Callees{
		Pos:  fset.Position(r.site.Pos()).String(),
		Desc: "static function call",
	}
	j.Callees = []*serial.CalleesItem{
		&serial.CalleesItem{
			Name: r.callee.FullName(),
			Pos:  fset.Position(r.callee.Pos()).String(),
		},
	}
	res.Callees = j
}

// NB: byFuncPos is not deterministic across packages since it depends on load order.
// Use lessPos if the tests need it.
type byFuncPos []*ssa.Function

func (a byFuncPos) Len() int           { return len(a) }
func (a byFuncPos) Less(i, j int) bool { return a[i].Pos() < a[j].Pos() }
func (a byFuncPos) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
                                                                                              go/src/golang.org/x/tools/oracle/callers.go                                                         0100644 0000000 0000000 00000005513 13101127476 017334  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/token"

	"golang.org/x/tools/go/callgraph"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/oracle/serial"
)

// Callers reports the possible callers of the function
// immediately enclosing the specified source location.
//
func callers(q *Query) error {
	lconf := loader.Config{Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	prog := ssautil.CreateProgram(lprog, 0)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	pkg := prog.Package(qpos.info.Pkg)
	if pkg == nil {
		return fmt.Errorf("no SSA package")
	}
	if !ssa.HasEnclosingFunction(pkg, qpos.path) {
		return fmt.Errorf("this position is not inside a function")
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	target := ssa.EnclosingFunction(pkg, qpos.path)
	if target == nil {
		return fmt.Errorf("no SSA function built for this location (dead code?)")
	}

	// TODO(adonovan): opt: if function is never address-taken, skip
	// the pointer analysis.  Just look for direct calls.  This can
	// be done in a single pass over the SSA.

	// Run the pointer analysis, recording each
	// call found to originate from target.
	ptaConfig.BuildCallGraph = true
	cg := ptrAnalysis(ptaConfig).CallGraph
	cg.DeleteSyntheticNodes()
	edges := cg.CreateNode(target).In
	// TODO(adonovan): sort + dedup calls to ensure test determinism.

	q.result = &callersResult{
		target:    target,
		callgraph: cg,
		edges:     edges,
	}
	return nil
}

type callersResult struct {
	target    *ssa.Function
	callgraph *callgraph.Graph
	edges     []*callgraph.Edge
}

func (r *callersResult) display(printf printfFunc) {
	root := r.callgraph.Root
	if r.edges == nil {
		printf(r.target, "%s is not reachable in this program.", r.target)
	} else {
		printf(r.target, "%s is called from these %d sites:", r.target, len(r.edges))
		for _, edge := range r.edges {
			if edge.Caller == root {
				printf(r.target, "the root of the call graph")
			} else {
				printf(edge, "\t%s from %s", edge.Description(), edge.Caller.Func)
			}
		}
	}
}

func (r *callersResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var callers []serial.Caller
	for _, edge := range r.edges {
		callers = append(callers, serial.Caller{
			Caller: edge.Caller.Func.String(),
			Pos:    fset.Position(edge.Pos()).String(),
			Desc:   edge.Description(),
		})
	}
	res.Callers = callers
}
                                                                                                                                                                                     go/src/golang.org/x/tools/oracle/callstack.go                                                       0100644 0000000 0000000 00000006370 13101127476 017652  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/token"

	"golang.org/x/tools/go/callgraph"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/oracle/serial"
)

// Callstack displays an arbitrary path from a root of the callgraph
// to the function at the current position.
//
// The information may be misleading in a context-insensitive
// analysis. e.g. the call path X->Y->Z might be infeasible if Y never
// calls Z when it is called from X.  TODO(adonovan): think about UI.
//
// TODO(adonovan): permit user to specify a starting point other than
// the analysis root.
//
func callstack(q *Query) error {
	fset := token.NewFileSet()
	lconf := loader.Config{Fset: fset, Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	prog := ssautil.CreateProgram(lprog, 0)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	pkg := prog.Package(qpos.info.Pkg)
	if pkg == nil {
		return fmt.Errorf("no SSA package")
	}

	if !ssa.HasEnclosingFunction(pkg, qpos.path) {
		return fmt.Errorf("this position is not inside a function")
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	target := ssa.EnclosingFunction(pkg, qpos.path)
	if target == nil {
		return fmt.Errorf("no SSA function built for this location (dead code?)")
	}

	// Run the pointer analysis and build the complete call graph.
	ptaConfig.BuildCallGraph = true
	cg := ptrAnalysis(ptaConfig).CallGraph
	cg.DeleteSyntheticNodes()

	// Search for an arbitrary path from a root to the target function.
	isEnd := func(n *callgraph.Node) bool { return n.Func == target }
	callpath := callgraph.PathSearch(cg.Root, isEnd)
	if callpath != nil {
		callpath = callpath[1:] // remove synthetic edge from <root>
	}

	q.Fset = fset
	q.result = &callstackResult{
		qpos:     qpos,
		target:   target,
		callpath: callpath,
	}
	return nil
}

type callstackResult struct {
	qpos     *queryPos
	target   *ssa.Function
	callpath []*callgraph.Edge
}

func (r *callstackResult) display(printf printfFunc) {
	if r.callpath != nil {
		printf(r.qpos, "Found a call path from root to %s", r.target)
		printf(r.target, "%s", r.target)
		for i := len(r.callpath) - 1; i >= 0; i-- {
			edge := r.callpath[i]
			printf(edge, "%s from %s", edge.Description(), edge.Caller.Func)
		}
	} else {
		printf(r.target, "%s is unreachable in this analysis scope", r.target)
	}
}

func (r *callstackResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var callers []serial.Caller
	for i := len(r.callpath) - 1; i >= 0; i-- { // (innermost first)
		edge := r.callpath[i]
		callers = append(callers, serial.Caller{
			Pos:    fset.Position(edge.Pos()).String(),
			Caller: edge.Caller.Func.String(),
			Desc:   edge.Description(),
		})
	}
	res.Callstack = &serial.CallStack{
		Pos:     fset.Position(r.target.Pos()).String(),
		Target:  r.target.String(),
		Callers: callers,
	}
}
                                                                                                                                                                                                                                                                        go/src/golang.org/x/tools/oracle/definition.go                                                      0100644 0000000 0000000 00000003355 13101127476 020041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

// definition reports the location of the definition of an identifier.
//
// TODO(adonovan): opt: for intra-file references, the parser's
// resolution might be enough; we should start with that.
//
func definition(q *Query) error {
	lconf := loader.Config{Build: q.Build}
	allowErrors(&lconf)

	if err := importQueryPackage(q.Pos, &lconf); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	id, _ := qpos.path[0].(*ast.Ident)
	if id == nil {
		return fmt.Errorf("no identifier here")
	}

	obj := qpos.info.ObjectOf(id)
	if obj == nil {
		// Happens for y in "switch y := x.(type)",
		// and the package declaration,
		// but I think that's all.
		return fmt.Errorf("no object for identifier")
	}

	q.result = &definitionResult{qpos, obj}
	return nil
}

type definitionResult struct {
	qpos *queryPos
	obj  types.Object // object it denotes
}

func (r *definitionResult) display(printf printfFunc) {
	printf(r.obj, "defined here as %s", r.qpos.objectString(r.obj))
}

func (r *definitionResult) toSerial(res *serial.Result, fset *token.FileSet) {
	definition := &serial.Definition{
		Desc: r.obj.String(),
	}
	if pos := r.obj.Pos(); pos != token.NoPos { // Package objects have no Pos()
		definition.ObjPos = fset.Position(pos).String()
	}
	res.Definition = definition
}
                                                                                                                                                                                                                                                                                   go/src/golang.org/x/tools/oracle/describe.go                                                        0100644 0000000 0000000 00000047356 13101127476 017502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/token"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/exact"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/go/types/typeutil"
	"golang.org/x/tools/oracle/serial"
)

// describe describes the syntax node denoted by the query position,
// including:
// - its syntactic category
// - the definition of its referent (for identifiers) [now redundant]
// - its type and method set (for an expression or type expression)
//
func describe(q *Query) error {
	lconf := loader.Config{Build: q.Build}
	allowErrors(&lconf)

	if err := importQueryPackage(q.Pos, &lconf); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, true) // (need exact pos)
	if err != nil {
		return err
	}

	if false { // debugging
		fprintf(os.Stderr, lprog.Fset, qpos.path[0], "you selected: %s %s",
			astutil.NodeDescription(qpos.path[0]), pathToString(qpos.path))
	}

	path, action := findInterestingNode(qpos.info, qpos.path)
	switch action {
	case actionExpr:
		q.result, err = describeValue(qpos, path)

	case actionType:
		q.result, err = describeType(qpos, path)

	case actionPackage:
		q.result, err = describePackage(qpos, path)

	case actionStmt:
		q.result, err = describeStmt(qpos, path)

	case actionUnknown:
		q.result = &describeUnknownResult{path[0]}

	default:
		panic(action) // unreachable
	}
	return err
}

type describeUnknownResult struct {
	node ast.Node
}

func (r *describeUnknownResult) display(printf printfFunc) {
	// Nothing much to say about misc syntax.
	printf(r.node, "%s", astutil.NodeDescription(r.node))
}

func (r *describeUnknownResult) toSerial(res *serial.Result, fset *token.FileSet) {
	res.Describe = &serial.Describe{
		Desc: astutil.NodeDescription(r.node),
		Pos:  fset.Position(r.node.Pos()).String(),
	}
}

type action int

const (
	actionUnknown action = iota // None of the below
	actionExpr                  // FuncDecl, true Expr or Ident(types.{Const,Var})
	actionType                  // type Expr or Ident(types.TypeName).
	actionStmt                  // Stmt or Ident(types.Label)
	actionPackage               // Ident(types.Package) or ImportSpec
)

// findInterestingNode classifies the syntax node denoted by path as one of:
//    - an expression, part of an expression or a reference to a constant
//      or variable;
//    - a type, part of a type, or a reference to a named type;
//    - a statement, part of a statement, or a label referring to a statement;
//    - part of a package declaration or import spec.
//    - none of the above.
// and returns the most "interesting" associated node, which may be
// the same node, an ancestor or a descendent.
//
func findInterestingNode(pkginfo *loader.PackageInfo, path []ast.Node) ([]ast.Node, action) {
	// TODO(adonovan): integrate with go/types/stdlib_test.go and
	// apply this to every AST node we can find to make sure it
	// doesn't crash.

	// TODO(adonovan): audit for ParenExpr safety, esp. since we
	// traverse up and down.

	// TODO(adonovan): if the users selects the "." in
	// "fmt.Fprintf()", they'll get an ambiguous selection error;
	// we won't even reach here.  Can we do better?

	// TODO(adonovan): describing a field within 'type T struct {...}'
	// describes the (anonymous) struct type and concludes "no methods".
	// We should ascend to the enclosing type decl, if any.

	for len(path) > 0 {
		switch n := path[0].(type) {
		case *ast.GenDecl:
			if len(n.Specs) == 1 {
				// Descend to sole {Import,Type,Value}Spec child.
				path = append([]ast.Node{n.Specs[0]}, path...)
				continue
			}
			return path, actionUnknown // uninteresting

		case *ast.FuncDecl:
			// Descend to function name.
			path = append([]ast.Node{n.Name}, path...)
			continue

		case *ast.ImportSpec:
			return path, actionPackage

		case *ast.ValueSpec:
			if len(n.Names) == 1 {
				// Descend to sole Ident child.
				path = append([]ast.Node{n.Names[0]}, path...)
				continue
			}
			return path, actionUnknown // uninteresting

		case *ast.TypeSpec:
			// Descend to type name.
			path = append([]ast.Node{n.Name}, path...)
			continue

		case ast.Stmt:
			return path, actionStmt

		case *ast.ArrayType,
			*ast.StructType,
			*ast.FuncType,
			*ast.InterfaceType,
			*ast.MapType,
			*ast.ChanType:
			return path, actionType

		case *ast.Comment, *ast.CommentGroup, *ast.File, *ast.KeyValueExpr, *ast.CommClause:
			return path, actionUnknown // uninteresting

		case *ast.Ellipsis:
			// Continue to enclosing node.
			// e.g. [...]T in ArrayType
			//      f(x...) in CallExpr
			//      f(x...T) in FuncType

		case *ast.Field:
			// TODO(adonovan): this needs more thought,
			// since fields can be so many things.
			if len(n.Names) == 1 {
				// Descend to sole Ident child.
				path = append([]ast.Node{n.Names[0]}, path...)
				continue
			}
			// Zero names (e.g. anon field in struct)
			// or multiple field or param names:
			// continue to enclosing field list.

		case *ast.FieldList:
			// Continue to enclosing node:
			// {Struct,Func,Interface}Type or FuncDecl.

		case *ast.BasicLit:
			if _, ok := path[1].(*ast.ImportSpec); ok {
				return path[1:], actionPackage
			}
			return path, actionExpr

		case *ast.SelectorExpr:
			// TODO(adonovan): use Selections info directly.
			if pkginfo.Uses[n.Sel] == nil {
				// TODO(adonovan): is this reachable?
				return path, actionUnknown
			}
			// Descend to .Sel child.
			path = append([]ast.Node{n.Sel}, path...)
			continue

		case *ast.Ident:
			switch pkginfo.ObjectOf(n).(type) {
			case *types.PkgName:
				return path, actionPackage

			case *types.Const:
				return path, actionExpr

			case *types.Label:
				return path, actionStmt

			case *types.TypeName:
				return path, actionType

			case *types.Var:
				// For x in 'struct {x T}', return struct type, for now.
				if _, ok := path[1].(*ast.Field); ok {
					_ = path[2].(*ast.FieldList) // assertion
					if _, ok := path[3].(*ast.StructType); ok {
						return path[3:], actionType
					}
				}
				return path, actionExpr

			case *types.Func:
				return path, actionExpr

			case *types.Builtin:
				// For reference to built-in function, return enclosing call.
				path = path[1:] // ascend to enclosing function call
				continue

			case *types.Nil:
				return path, actionExpr
			}

			// No object.
			switch path[1].(type) {
			case *ast.SelectorExpr:
				// Return enclosing selector expression.
				return path[1:], actionExpr

			case *ast.Field:
				// TODO(adonovan): test this.
				// e.g. all f in:
				//  struct { f, g int }
				//  interface { f() }
				//  func (f T) method(f, g int) (f, g bool)
				//
				// switch path[3].(type) {
				// case *ast.FuncDecl:
				// case *ast.StructType:
				// case *ast.InterfaceType:
				// }
				//
				// return path[1:], actionExpr
				//
				// Unclear what to do with these.
				// Struct.Fields             -- field
				// Interface.Methods         -- field
				// FuncType.{Params.Results} -- actionExpr
				// FuncDecl.Recv             -- actionExpr

			case *ast.File:
				// 'package foo'
				return path, actionPackage

			case *ast.ImportSpec:
				// TODO(adonovan): fix: why no package object? go/types bug?
				return path[1:], actionPackage

			default:
				// e.g. blank identifier
				// or y in "switch y := x.(type)"
				// or code in a _test.go file that's not part of the package.
				log.Printf("unknown reference %s in %T\n", n, path[1])
				return path, actionUnknown
			}

		case *ast.StarExpr:
			if pkginfo.Types[n].IsType() {
				return path, actionType
			}
			return path, actionExpr

		case ast.Expr:
			// All Expr but {BasicLit,Ident,StarExpr} are
			// "true" expressions that evaluate to a value.
			return path, actionExpr
		}

		// Ascend to parent.
		path = path[1:]
	}

	return nil, actionUnknown // unreachable
}

func describeValue(qpos *queryPos, path []ast.Node) (*describeValueResult, error) {
	var expr ast.Expr
	var obj types.Object
	switch n := path[0].(type) {
	case *ast.ValueSpec:
		// ambiguous ValueSpec containing multiple names
		return nil, fmt.Errorf("multiple value specification")
	case *ast.Ident:
		obj = qpos.info.ObjectOf(n)
		expr = n
	case ast.Expr:
		expr = n
	default:
		// TODO(adonovan): is this reachable?
		return nil, fmt.Errorf("unexpected AST for expr: %T", n)
	}

	typ := qpos.info.TypeOf(expr)
	constVal := qpos.info.Types[expr].Value

	return &describeValueResult{
		qpos:     qpos,
		expr:     expr,
		typ:      typ,
		constVal: constVal,
		obj:      obj,
	}, nil
}

type describeValueResult struct {
	qpos     *queryPos
	expr     ast.Expr     // query node
	typ      types.Type   // type of expression
	constVal exact.Value  // value of expression, if constant
	obj      types.Object // var/func/const object, if expr was Ident
}

func (r *describeValueResult) display(printf printfFunc) {
	var prefix, suffix string
	if r.constVal != nil {
		suffix = fmt.Sprintf(" of constant value %s", r.constVal)
	}
	switch obj := r.obj.(type) {
	case *types.Func:
		if recv := obj.Type().(*types.Signature).Recv(); recv != nil {
			if _, ok := recv.Type().Underlying().(*types.Interface); ok {
				prefix = "interface method "
			} else {
				prefix = "method "
			}
		}
	}

	// Describe the expression.
	if r.obj != nil {
		if r.obj.Pos() == r.expr.Pos() {
			// defining ident
			printf(r.expr, "definition of %s%s%s", prefix, r.qpos.objectString(r.obj), suffix)
		} else {
			// referring ident
			printf(r.expr, "reference to %s%s%s", prefix, r.qpos.objectString(r.obj), suffix)
			if def := r.obj.Pos(); def != token.NoPos {
				printf(def, "defined here")
			}
		}
	} else {
		desc := astutil.NodeDescription(r.expr)
		if suffix != "" {
			// constant expression
			printf(r.expr, "%s%s", desc, suffix)
		} else {
			// non-constant expression
			printf(r.expr, "%s of type %s", desc, r.qpos.typeString(r.typ))
		}
	}
}

func (r *describeValueResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var value, objpos string
	if r.constVal != nil {
		value = r.constVal.String()
	}
	if r.obj != nil {
		objpos = fset.Position(r.obj.Pos()).String()
	}

	res.Describe = &serial.Describe{
		Desc:   astutil.NodeDescription(r.expr),
		Pos:    fset.Position(r.expr.Pos()).String(),
		Detail: "value",
		Value: &serial.DescribeValue{
			Type:   r.qpos.typeString(r.typ),
			Value:  value,
			ObjPos: objpos,
		},
	}
}

// ---- TYPE ------------------------------------------------------------

func describeType(qpos *queryPos, path []ast.Node) (*describeTypeResult, error) {
	var description string
	var t types.Type
	switch n := path[0].(type) {
	case *ast.Ident:
		t = qpos.info.TypeOf(n)
		switch t := t.(type) {
		case *types.Basic:
			description = "reference to built-in "

		case *types.Named:
			isDef := t.Obj().Pos() == n.Pos() // see caveats at isDef above
			if isDef {
				description = "definition of "
			} else {
				description = "reference to "
			}
		}

	case ast.Expr:
		t = qpos.info.TypeOf(n)

	default:
		// Unreachable?
		return nil, fmt.Errorf("unexpected AST for type: %T", n)
	}

	description = description + "type " + qpos.typeString(t)

	// Show sizes for structs and named types (it's fairly obvious for others).
	switch t.(type) {
	case *types.Named, *types.Struct:
		szs := types.StdSizes{8, 8} // assume amd64
		description = fmt.Sprintf("%s (size %d, align %d)", description,
			szs.Sizeof(t), szs.Alignof(t))
	}

	return &describeTypeResult{
		qpos:        qpos,
		node:        path[0],
		description: description,
		typ:         t,
		methods:     accessibleMethods(t, qpos.info.Pkg),
	}, nil
}

type describeTypeResult struct {
	qpos        *queryPos
	node        ast.Node
	description string
	typ         types.Type
	methods     []*types.Selection
}

func (r *describeTypeResult) display(printf printfFunc) {
	printf(r.node, "%s", r.description)

	// Show the underlying type for a reference to a named type.
	if nt, ok := r.typ.(*types.Named); ok && r.node.Pos() != nt.Obj().Pos() {
		printf(nt.Obj(), "defined as %s", r.qpos.typeString(nt.Underlying()))
	}

	// Print the method set, if the type kind is capable of bearing methods.
	switch r.typ.(type) {
	case *types.Interface, *types.Struct, *types.Named:
		if len(r.methods) > 0 {
			printf(r.node, "Method set:")
			for _, meth := range r.methods {
				// TODO(adonovan): print these relative
				// to the owning package, not the
				// query package.
				printf(meth.Obj(), "\t%s", r.qpos.selectionString(meth))
			}
		} else {
			printf(r.node, "No methods.")
		}
	}
}

func (r *describeTypeResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var namePos, nameDef string
	if nt, ok := r.typ.(*types.Named); ok {
		namePos = fset.Position(nt.Obj().Pos()).String()
		nameDef = nt.Underlying().String()
	}
	res.Describe = &serial.Describe{
		Desc:   r.description,
		Pos:    fset.Position(r.node.Pos()).String(),
		Detail: "type",
		Type: &serial.DescribeType{
			Type:    r.qpos.typeString(r.typ),
			NamePos: namePos,
			NameDef: nameDef,
			Methods: methodsToSerial(r.qpos.info.Pkg, r.methods, fset),
		},
	}
}

// ---- PACKAGE ------------------------------------------------------------

func describePackage(qpos *queryPos, path []ast.Node) (*describePackageResult, error) {
	var description string
	var pkg *types.Package
	switch n := path[0].(type) {
	case *ast.ImportSpec:
		var pkgname *types.PkgName
		if n.Name != nil {
			pkgname = qpos.info.Defs[n.Name].(*types.PkgName)
		} else if p := qpos.info.Implicits[n]; p != nil {
			pkgname = p.(*types.PkgName)
		}
		pkg = pkgname.Imported()
		description = fmt.Sprintf("import of package %q", pkg.Path())

	case *ast.Ident:
		if _, isDef := path[1].(*ast.File); isDef {
			// e.g. package id
			pkg = qpos.info.Pkg
			description = fmt.Sprintf("definition of package %q", pkg.Path())
		} else {
			// e.g. import id "..."
			//  or  id.F()
			pkg = qpos.info.ObjectOf(n).(*types.PkgName).Imported()
			description = fmt.Sprintf("reference to package %q", pkg.Path())
		}

	default:
		// Unreachable?
		return nil, fmt.Errorf("unexpected AST for package: %T", n)
	}

	var members []*describeMember
	// NB: "unsafe" has no types.Package
	if pkg != nil {
		// Enumerate the accessible package members
		// in lexicographic order.
		for _, name := range pkg.Scope().Names() {
			if pkg == qpos.info.Pkg || ast.IsExported(name) {
				mem := pkg.Scope().Lookup(name)
				var methods []*types.Selection
				if mem, ok := mem.(*types.TypeName); ok {
					methods = accessibleMethods(mem.Type(), qpos.info.Pkg)
				}
				members = append(members, &describeMember{
					mem,
					methods,
				})

			}
		}
	}

	return &describePackageResult{qpos.fset, path[0], description, pkg, members}, nil
}

type describePackageResult struct {
	fset        *token.FileSet
	node        ast.Node
	description string
	pkg         *types.Package
	members     []*describeMember // in lexicographic name order
}

type describeMember struct {
	obj     types.Object
	methods []*types.Selection // in types.MethodSet order
}

func (r *describePackageResult) display(printf printfFunc) {
	printf(r.node, "%s", r.description)

	// Compute max width of name "column".
	maxname := 0
	for _, mem := range r.members {
		if l := len(mem.obj.Name()); l > maxname {
			maxname = l
		}
	}

	for _, mem := range r.members {
		printf(mem.obj, "\t%s", formatMember(mem.obj, maxname))
		for _, meth := range mem.methods {
			printf(meth.Obj(), "\t\t%s", types.SelectionString(meth, types.RelativeTo(r.pkg)))
		}
	}
}

func formatMember(obj types.Object, maxname int) string {
	qualifier := types.RelativeTo(obj.Pkg())
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "%-5s %-*s", tokenOf(obj), maxname, obj.Name())
	switch obj := obj.(type) {
	case *types.Const:
		fmt.Fprintf(&buf, " %s = %s", types.TypeString(obj.Type(), qualifier), obj.Val().String())

	case *types.Func:
		fmt.Fprintf(&buf, " %s", types.TypeString(obj.Type(), qualifier))

	case *types.TypeName:
		// Abbreviate long aggregate type names.
		var abbrev string
		switch t := obj.Type().Underlying().(type) {
		case *types.Interface:
			if t.NumMethods() > 1 {
				abbrev = "interface{...}"
			}
		case *types.Struct:
			if t.NumFields() > 1 {
				abbrev = "struct{...}"
			}
		}
		if abbrev == "" {
			fmt.Fprintf(&buf, " %s", types.TypeString(obj.Type().Underlying(), qualifier))
		} else {
			fmt.Fprintf(&buf, " %s", abbrev)
		}

	case *types.Var:
		fmt.Fprintf(&buf, " %s", types.TypeString(obj.Type(), qualifier))
	}
	return buf.String()
}

func (r *describePackageResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var members []*serial.DescribeMember
	for _, mem := range r.members {
		typ := mem.obj.Type()
		var val string
		switch mem := mem.obj.(type) {
		case *types.Const:
			val = mem.Val().String()
		case *types.TypeName:
			typ = typ.Underlying()
		}
		members = append(members, &serial.DescribeMember{
			Name:    mem.obj.Name(),
			Type:    typ.String(),
			Value:   val,
			Pos:     fset.Position(mem.obj.Pos()).String(),
			Kind:    tokenOf(mem.obj),
			Methods: methodsToSerial(r.pkg, mem.methods, fset),
		})
	}
	res.Describe = &serial.Describe{
		Desc:   r.description,
		Pos:    fset.Position(r.node.Pos()).String(),
		Detail: "package",
		Package: &serial.DescribePackage{
			Path:    r.pkg.Path(),
			Members: members,
		},
	}
}

func tokenOf(o types.Object) string {
	switch o.(type) {
	case *types.Func:
		return "func"
	case *types.Var:
		return "var"
	case *types.TypeName:
		return "type"
	case *types.Const:
		return "const"
	case *types.PkgName:
		return "package"
	}
	panic(o)
}

// ---- STATEMENT ------------------------------------------------------------

func describeStmt(qpos *queryPos, path []ast.Node) (*describeStmtResult, error) {
	var description string
	switch n := path[0].(type) {
	case *ast.Ident:
		if qpos.info.Defs[n] != nil {
			description = "labelled statement"
		} else {
			description = "reference to labelled statement"
		}

	default:
		// Nothing much to say about statements.
		description = astutil.NodeDescription(n)
	}
	return &describeStmtResult{qpos.fset, path[0], description}, nil
}

type describeStmtResult struct {
	fset        *token.FileSet
	node        ast.Node
	description string
}

func (r *describeStmtResult) display(printf printfFunc) {
	printf(r.node, "%s", r.description)
}

func (r *describeStmtResult) toSerial(res *serial.Result, fset *token.FileSet) {
	res.Describe = &serial.Describe{
		Desc:   r.description,
		Pos:    fset.Position(r.node.Pos()).String(),
		Detail: "unknown",
	}
}

// ------------------- Utilities -------------------

// pathToString returns a string containing the concrete types of the
// nodes in path.
func pathToString(path []ast.Node) string {
	var buf bytes.Buffer
	fmt.Fprint(&buf, "[")
	for i, n := range path {
		if i > 0 {
			fmt.Fprint(&buf, " ")
		}
		fmt.Fprint(&buf, strings.TrimPrefix(fmt.Sprintf("%T", n), "*ast."))
	}
	fmt.Fprint(&buf, "]")
	return buf.String()
}

func accessibleMethods(t types.Type, from *types.Package) []*types.Selection {
	var methods []*types.Selection
	for _, meth := range typeutil.IntuitiveMethodSet(t, nil) {
		if isAccessibleFrom(meth.Obj(), from) {
			methods = append(methods, meth)
		}
	}
	return methods
}

func isAccessibleFrom(obj types.Object, pkg *types.Package) bool {
	return ast.IsExported(obj.Name()) || obj.Pkg() == pkg
}

func methodsToSerial(this *types.Package, methods []*types.Selection, fset *token.FileSet) []serial.DescribeMethod {
	qualifier := types.RelativeTo(this)
	var jmethods []serial.DescribeMethod
	for _, meth := range methods {
		var ser serial.DescribeMethod
		if meth != nil { // may contain nils when called by implements (on a method)
			ser = serial.DescribeMethod{
				Name: types.SelectionString(meth, qualifier),
				Pos:  fset.Position(meth.Obj().Pos()).String(),
			}
		}
		jmethods = append(jmethods, ser)
	}
	return jmethods
}
                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/oracle/freevars.go                                                        0100644 0000000 0000000 00000012273 13101127476 017525  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"bytes"
	"go/ast"
	"go/printer"
	"go/token"
	"sort"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

// freevars displays the lexical (not package-level) free variables of
// the selection.
//
// It treats A.B.C as a separate variable from A to reveal the parts
// of an aggregate type that are actually needed.
// This aids refactoring.
//
// TODO(adonovan): optionally display the free references to
// file/package scope objects, and to objects from other packages.
// Depending on where the resulting function abstraction will go,
// these might be interesting.  Perhaps group the results into three
// bands.
//
func freevars(q *Query) error {
	lconf := loader.Config{Build: q.Build}
	allowErrors(&lconf)

	if err := importQueryPackage(q.Pos, &lconf); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	file := qpos.path[len(qpos.path)-1] // the enclosing file
	fileScope := qpos.info.Scopes[file]
	pkgScope := fileScope.Parent()

	// The id and sel functions return non-nil if they denote an
	// object o or selection o.x.y that is referenced by the
	// selection but defined neither within the selection nor at
	// file scope, i.e. it is in the lexical environment.
	var id func(n *ast.Ident) types.Object
	var sel func(n *ast.SelectorExpr) types.Object

	sel = func(n *ast.SelectorExpr) types.Object {
		switch x := unparen(n.X).(type) {
		case *ast.SelectorExpr:
			return sel(x)
		case *ast.Ident:
			return id(x)
		}
		return nil
	}

	id = func(n *ast.Ident) types.Object {
		obj := qpos.info.Uses[n]
		if obj == nil {
			return nil // not a reference
		}
		if _, ok := obj.(*types.PkgName); ok {
			return nil // imported package
		}
		if !(file.Pos() <= obj.Pos() && obj.Pos() <= file.End()) {
			return nil // not defined in this file
		}
		scope := obj.Parent()
		if scope == nil {
			return nil // e.g. interface method, struct field
		}
		if scope == fileScope || scope == pkgScope {
			return nil // defined at file or package scope
		}
		if qpos.start <= obj.Pos() && obj.Pos() <= qpos.end {
			return nil // defined within selection => not free
		}
		return obj
	}

	// Maps each reference that is free in the selection
	// to the object it refers to.
	// The map de-duplicates repeated references.
	refsMap := make(map[string]freevarsRef)

	// Visit all the identifiers in the selected ASTs.
	ast.Inspect(qpos.path[0], func(n ast.Node) bool {
		if n == nil {
			return true // popping DFS stack
		}

		// Is this node contained within the selection?
		// (freevars permits inexact selections,
		// like two stmts in a block.)
		if qpos.start <= n.Pos() && n.End() <= qpos.end {
			var obj types.Object
			var prune bool
			switch n := n.(type) {
			case *ast.Ident:
				obj = id(n)

			case *ast.SelectorExpr:
				obj = sel(n)
				prune = true
			}

			if obj != nil {
				var kind string
				switch obj.(type) {
				case *types.Var:
					kind = "var"
				case *types.Func:
					kind = "func"
				case *types.TypeName:
					kind = "type"
				case *types.Const:
					kind = "const"
				case *types.Label:
					kind = "label"
				default:
					panic(obj)
				}

				typ := qpos.info.TypeOf(n.(ast.Expr))
				ref := freevarsRef{kind, printNode(lprog.Fset, n), typ, obj}
				refsMap[ref.ref] = ref

				if prune {
					return false // don't descend
				}
			}
		}

		return true // descend
	})

	refs := make([]freevarsRef, 0, len(refsMap))
	for _, ref := range refsMap {
		refs = append(refs, ref)
	}
	sort.Sort(byRef(refs))

	q.result = &freevarsResult{
		qpos: qpos,
		refs: refs,
	}
	return nil
}

type freevarsResult struct {
	qpos *queryPos
	refs []freevarsRef
}

type freevarsRef struct {
	kind string
	ref  string
	typ  types.Type
	obj  types.Object
}

func (r *freevarsResult) display(printf printfFunc) {
	if len(r.refs) == 0 {
		printf(r.qpos, "No free identifiers.")
	} else {
		printf(r.qpos, "Free identifiers:")
		qualifier := types.RelativeTo(r.qpos.info.Pkg)
		for _, ref := range r.refs {
			// Avoid printing "type T T".
			var typstr string
			if ref.kind != "type" {
				typstr = " " + types.TypeString(ref.typ, qualifier)
			}
			printf(ref.obj, "%s %s%s", ref.kind, ref.ref, typstr)
		}
	}
}

func (r *freevarsResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var refs []*serial.FreeVar
	for _, ref := range r.refs {
		refs = append(refs,
			&serial.FreeVar{
				Pos:  fset.Position(ref.obj.Pos()).String(),
				Kind: ref.kind,
				Ref:  ref.ref,
				Type: ref.typ.String(),
			})
	}
	res.Freevars = refs
}

// -------- utils --------

type byRef []freevarsRef

func (p byRef) Len() int           { return len(p) }
func (p byRef) Less(i, j int) bool { return p[i].ref < p[j].ref }
func (p byRef) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }

// printNode returns the pretty-printed syntax of n.
func printNode(fset *token.FileSet, n ast.Node) string {
	var buf bytes.Buffer
	printer.Fprint(&buf, fset, n)
	return buf.String()
}
                                                                                                                                                                                                                                                                                                                                     go/src/golang.org/x/tools/oracle/implements.go                                                      0100644 0000000 0000000 00000021632 13101127476 020064  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"
	"reflect"
	"sort"
	"strings"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/go/types/typeutil"
	"golang.org/x/tools/oracle/serial"
)

// Implements displays the "implements" relation as it pertains to the
// selected type within a single package.
// If the selection is a method, 'implements' displays
// the corresponding methods of the types that would have been reported
// by an implements query on the receiver type.
//
func implements(q *Query) error {
	lconf := loader.Config{Build: q.Build}
	allowErrors(&lconf)

	if err := importQueryPackage(q.Pos, &lconf); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	// Find the selected type.
	path, action := findInterestingNode(qpos.info, qpos.path)

	var method *types.Func
	var T types.Type // selected type (receiver if method != nil)

	switch action {
	case actionExpr:
		// method?
		if id, ok := path[0].(*ast.Ident); ok {
			if obj, ok := qpos.info.ObjectOf(id).(*types.Func); ok {
				recv := obj.Type().(*types.Signature).Recv()
				if recv == nil {
					return fmt.Errorf("this function is not a method")
				}
				method = obj
				T = recv.Type()
			}
		}
	case actionType:
		T = qpos.info.TypeOf(path[0].(ast.Expr))
	}
	if T == nil {
		return fmt.Errorf("no type or method here")
	}

	// Find all named types, even local types (which can have
	// methods via promotion) and the built-in "error".
	//
	// TODO(adonovan): include all packages in PTA scope too?
	// i.e. don't reduceScope?
	//
	var allNamed []types.Type
	for _, info := range lprog.AllPackages {
		for _, obj := range info.Defs {
			if obj, ok := obj.(*types.TypeName); ok {
				allNamed = append(allNamed, obj.Type())
			}
		}
	}
	allNamed = append(allNamed, types.Universe.Lookup("error").Type())

	var msets typeutil.MethodSetCache

	// Test each named type.
	var to, from, fromPtr []types.Type
	for _, U := range allNamed {
		if isInterface(T) {
			if msets.MethodSet(T).Len() == 0 {
				continue // empty interface
			}
			if isInterface(U) {
				if msets.MethodSet(U).Len() == 0 {
					continue // empty interface
				}

				// T interface, U interface
				if !types.Identical(T, U) {
					if types.AssignableTo(U, T) {
						to = append(to, U)
					}
					if types.AssignableTo(T, U) {
						from = append(from, U)
					}
				}
			} else {
				// T interface, U concrete
				if types.AssignableTo(U, T) {
					to = append(to, U)
				} else if pU := types.NewPointer(U); types.AssignableTo(pU, T) {
					to = append(to, pU)
				}
			}
		} else if isInterface(U) {
			if msets.MethodSet(U).Len() == 0 {
				continue // empty interface
			}

			// T concrete, U interface
			if types.AssignableTo(T, U) {
				from = append(from, U)
			} else if pT := types.NewPointer(T); types.AssignableTo(pT, U) {
				fromPtr = append(fromPtr, U)
			}
		}
	}

	var pos interface{} = qpos
	if nt, ok := deref(T).(*types.Named); ok {
		pos = nt.Obj()
	}

	// Sort types (arbitrarily) to ensure test determinism.
	sort.Sort(typesByString(to))
	sort.Sort(typesByString(from))
	sort.Sort(typesByString(fromPtr))

	var toMethod, fromMethod, fromPtrMethod []*types.Selection // contain nils
	if method != nil {
		for _, t := range to {
			toMethod = append(toMethod,
				types.NewMethodSet(t).Lookup(method.Pkg(), method.Name()))
		}
		for _, t := range from {
			fromMethod = append(fromMethod,
				types.NewMethodSet(t).Lookup(method.Pkg(), method.Name()))
		}
		for _, t := range fromPtr {
			fromPtrMethod = append(fromPtrMethod,
				types.NewMethodSet(t).Lookup(method.Pkg(), method.Name()))
		}
	}

	q.result = &implementsResult{
		qpos, T, pos, to, from, fromPtr, method, toMethod, fromMethod, fromPtrMethod,
	}
	return nil
}

type implementsResult struct {
	qpos *queryPos

	t       types.Type   // queried type (not necessarily named)
	pos     interface{}  // pos of t (*types.Name or *QueryPos)
	to      []types.Type // named or ptr-to-named types assignable to interface T
	from    []types.Type // named interfaces assignable from T
	fromPtr []types.Type // named interfaces assignable only from *T

	// if a method was queried:
	method        *types.Func        // queried method
	toMethod      []*types.Selection // method of type to[i], if any
	fromMethod    []*types.Selection // method of type from[i], if any
	fromPtrMethod []*types.Selection // method of type fromPtrMethod[i], if any
}

func (r *implementsResult) display(printf printfFunc) {
	relation := "is implemented by"

	meth := func(sel *types.Selection) {
		if sel != nil {
			printf(sel.Obj(), "\t%s method (%s).%s",
				relation, r.qpos.typeString(sel.Recv()), sel.Obj().Name())
		}
	}

	if isInterface(r.t) {
		if types.NewMethodSet(r.t).Len() == 0 { // TODO(adonovan): cache mset
			printf(r.pos, "empty interface type %s", r.qpos.typeString(r.t))
			return
		}

		if r.method == nil {
			printf(r.pos, "interface type %s", r.qpos.typeString(r.t))
		} else {
			printf(r.method, "abstract method %s", r.qpos.objectString(r.method))
		}

		// Show concrete types (or methods) first; use two passes.
		for i, sub := range r.to {
			if !isInterface(sub) {
				if r.method == nil {
					printf(deref(sub).(*types.Named).Obj(), "\t%s %s type %s",
						relation, typeKind(sub), r.qpos.typeString(sub))
				} else {
					meth(r.toMethod[i])
				}
			}
		}
		for i, sub := range r.to {
			if isInterface(sub) {
				if r.method == nil {
					printf(sub.(*types.Named).Obj(), "\t%s %s type %s",
						relation, typeKind(sub), r.qpos.typeString(sub))
				} else {
					meth(r.toMethod[i])
				}
			}
		}

		relation = "implements"
		for i, super := range r.from {
			if r.method == nil {
				printf(super.(*types.Named).Obj(), "\t%s %s",
					relation, r.qpos.typeString(super))
			} else {
				meth(r.fromMethod[i])
			}
		}
	} else {
		relation = "implements"

		if r.from != nil {
			if r.method == nil {
				printf(r.pos, "%s type %s",
					typeKind(r.t), r.qpos.typeString(r.t))
			} else {
				printf(r.method, "concrete method %s",
					r.qpos.objectString(r.method))
			}
			for i, super := range r.from {
				if r.method == nil {
					printf(super.(*types.Named).Obj(), "\t%s %s",
						relation, r.qpos.typeString(super))
				} else {
					meth(r.fromMethod[i])
				}
			}
		}
		if r.fromPtr != nil {
			if r.method == nil {
				printf(r.pos, "pointer type *%s", r.qpos.typeString(r.t))
			} else {
				// TODO(adonovan): de-dup (C).f and (*C).f implementing (I).f.
				printf(r.method, "concrete method %s",
					r.qpos.objectString(r.method))
			}

			for i, psuper := range r.fromPtr {
				if r.method == nil {
					printf(psuper.(*types.Named).Obj(), "\t%s %s",
						relation, r.qpos.typeString(psuper))
				} else {
					meth(r.fromPtrMethod[i])
				}
			}
		} else if r.from == nil {
			printf(r.pos, "%s type %s implements only interface{}",
				typeKind(r.t), r.qpos.typeString(r.t))
		}
	}
}

func (r *implementsResult) toSerial(res *serial.Result, fset *token.FileSet) {
	res.Implements = &serial.Implements{
		T:                       makeImplementsType(r.t, fset),
		AssignableTo:            makeImplementsTypes(r.to, fset),
		AssignableFrom:          makeImplementsTypes(r.from, fset),
		AssignableFromPtr:       makeImplementsTypes(r.fromPtr, fset),
		AssignableToMethod:      methodsToSerial(r.qpos.info.Pkg, r.toMethod, fset),
		AssignableFromMethod:    methodsToSerial(r.qpos.info.Pkg, r.fromMethod, fset),
		AssignableFromPtrMethod: methodsToSerial(r.qpos.info.Pkg, r.fromPtrMethod, fset),
	}
	if r.method != nil {
		res.Implements.Method = &serial.DescribeMethod{
			Name: r.qpos.objectString(r.method),
			Pos:  fset.Position(r.method.Pos()).String(),
		}
	}
}

func makeImplementsTypes(tt []types.Type, fset *token.FileSet) []serial.ImplementsType {
	var r []serial.ImplementsType
	for _, t := range tt {
		r = append(r, makeImplementsType(t, fset))
	}
	return r
}

func makeImplementsType(T types.Type, fset *token.FileSet) serial.ImplementsType {
	var pos token.Pos
	if nt, ok := deref(T).(*types.Named); ok { // implementsResult.t may be non-named
		pos = nt.Obj().Pos()
	}
	return serial.ImplementsType{
		Name: T.String(),
		Pos:  fset.Position(pos).String(),
		Kind: typeKind(T),
	}
}

// typeKind returns a string describing the underlying kind of type,
// e.g. "slice", "array", "struct".
func typeKind(T types.Type) string {
	s := reflect.TypeOf(T.Underlying()).String()
	return strings.ToLower(strings.TrimPrefix(s, "*types."))
}

func isInterface(T types.Type) bool { return types.IsInterface(T) }

type typesByString []types.Type

func (p typesByString) Len() int           { return len(p) }
func (p typesByString) Less(i, j int) bool { return p[i].String() < p[j].String() }
func (p typesByString) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
                                                                                                      go/src/golang.org/x/tools/oracle/oracle.go                                                          0100644 0000000 0000000 00000025433 13101127476 017157  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package oracle contains the implementation of the oracle tool whose
// command-line is provided by golang.org/x/tools/cmd/oracle.
//
// http://golang.org/s/oracle-design
// http://golang.org/s/oracle-user-manual
//
package oracle // import "golang.org/x/tools/oracle"

// This file defines oracle.Query, the entry point for the oracle tool.
// The actual executable is defined in cmd/oracle.

// TODO(adonovan): new queries
// - show all statements that may update the selected lvalue
//   (local, global, field, etc).
// - show all places where an object of type T is created
//   (&T{}, var t T, new(T), new(struct{array [3]T}), etc.

import (
	"fmt"
	"go/ast"
	"go/build"
	"go/parser"
	"go/token"
	"io"
	"path/filepath"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/pointer"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

type printfFunc func(pos interface{}, format string, args ...interface{})

// queryResult is the interface of each query-specific result type.
type queryResult interface {
	toSerial(res *serial.Result, fset *token.FileSet)
	display(printf printfFunc)
}

// A QueryPos represents the position provided as input to a query:
// a textual extent in the program's source code, the AST node it
// corresponds to, and the package to which it belongs.
// Instances are created by parseQueryPos.
type queryPos struct {
	fset       *token.FileSet
	start, end token.Pos           // source extent of query
	path       []ast.Node          // AST path from query node to root of ast.File
	exact      bool                // 2nd result of PathEnclosingInterval
	info       *loader.PackageInfo // type info for the queried package (nil for fastQueryPos)
}

// TypeString prints type T relative to the query position.
func (qpos *queryPos) typeString(T types.Type) string {
	return types.TypeString(T, types.RelativeTo(qpos.info.Pkg))
}

// ObjectString prints object obj relative to the query position.
func (qpos *queryPos) objectString(obj types.Object) string {
	return types.ObjectString(obj, types.RelativeTo(qpos.info.Pkg))
}

// SelectionString prints selection sel relative to the query position.
func (qpos *queryPos) selectionString(sel *types.Selection) string {
	return types.SelectionString(sel, types.RelativeTo(qpos.info.Pkg))
}

// A Query specifies a single oracle query.
type Query struct {
	Mode  string         // query mode ("callers", etc)
	Pos   string         // query position
	Build *build.Context // package loading configuration

	// pointer analysis options
	Scope      []string  // main packages in (*loader.Config).FromArgs syntax
	PTALog     io.Writer // (optional) pointer-analysis log file
	Reflection bool      // model reflection soundly (currently slow).

	// Populated during Run()
	Fset   *token.FileSet
	result queryResult
}

// Serial returns an instance of serial.Result, which implements the
// {xml,json}.Marshaler interfaces so that query results can be
// serialized as JSON or XML.
//
func (q *Query) Serial() *serial.Result {
	resj := &serial.Result{Mode: q.Mode}
	q.result.toSerial(resj, q.Fset)
	return resj
}

// WriteTo writes the oracle query result res to out in a compiler diagnostic format.
func (q *Query) WriteTo(out io.Writer) {
	printf := func(pos interface{}, format string, args ...interface{}) {
		fprintf(out, q.Fset, pos, format, args...)
	}
	q.result.display(printf)
}

// Run runs an oracle query and populates its Fset and Result.
func Run(q *Query) error {
	switch q.Mode {
	case "callees":
		return callees(q)
	case "callers":
		return callers(q)
	case "callstack":
		return callstack(q)
	case "peers":
		return peers(q)
	case "pointsto":
		return pointsto(q)
	case "whicherrs":
		return whicherrs(q)
	case "definition":
		return definition(q)
	case "describe":
		return describe(q)
	case "freevars":
		return freevars(q)
	case "implements":
		return implements(q)
	case "referrers":
		return referrers(q)
	case "what":
		return what(q)
	default:
		return fmt.Errorf("invalid mode: %q", q.Mode)
	}
}

func setPTAScope(lconf *loader.Config, scope []string) error {
	if len(scope) == 0 {
		return fmt.Errorf("no packages specified for pointer analysis scope")
	}

	// Determine initial packages for PTA.
	args, err := lconf.FromArgs(scope, true)
	if err != nil {
		return err
	}
	if len(args) > 0 {
		return fmt.Errorf("surplus arguments: %q", args)
	}
	return nil
}

// Create a pointer.Config whose scope is the initial packages of lprog
// and their dependencies.
func setupPTA(prog *ssa.Program, lprog *loader.Program, ptaLog io.Writer, reflection bool) (*pointer.Config, error) {
	// TODO(adonovan): the body of this function is essentially
	// duplicated in all go/pointer clients.  Refactor.

	// For each initial package (specified on the command line),
	// if it has a main function, analyze that,
	// otherwise analyze its tests, if any.
	var testPkgs, mains []*ssa.Package
	for _, info := range lprog.InitialPackages() {
		initialPkg := prog.Package(info.Pkg)

		// Add package to the pointer analysis scope.
		if initialPkg.Func("main") != nil {
			mains = append(mains, initialPkg)
		} else {
			testPkgs = append(testPkgs, initialPkg)
		}
	}
	if testPkgs != nil {
		if p := prog.CreateTestMainPackage(testPkgs...); p != nil {
			mains = append(mains, p)
		}
	}
	if mains == nil {
		return nil, fmt.Errorf("analysis scope has no main and no tests")
	}
	return &pointer.Config{
		Log:        ptaLog,
		Reflection: reflection,
		Mains:      mains,
	}, nil
}

// importQueryPackage finds the package P containing the
// query position and tells conf to import it.
func importQueryPackage(pos string, conf *loader.Config) error {
	fqpos, err := fastQueryPos(pos)
	if err != nil {
		return err // bad query
	}
	filename := fqpos.fset.File(fqpos.start).Name()

	// This will not work for ad-hoc packages
	// such as $GOROOT/src/net/http/triv.go.
	// TODO(adonovan): ensure we report a clear error.
	_, importPath, err := guessImportPath(filename, conf.Build)
	if err != nil {
		return err // can't find GOPATH dir
	}
	if importPath == "" {
		return fmt.Errorf("can't guess import path from %s", filename)
	}

	// Check that it's possible to load the queried package.
	// (e.g. oracle tests contain different 'package' decls in same dir.)
	// Keep consistent with logic in loader/util.go!
	cfg2 := *conf.Build
	cfg2.CgoEnabled = false
	bp, err := cfg2.Import(importPath, "", 0)
	if err != nil {
		return err // no files for package
	}

	switch pkgContainsFile(bp, filename) {
	case 'T':
		conf.ImportWithTests(importPath)
	case 'X':
		conf.ImportWithTests(importPath)
		importPath += "_test" // for TypeCheckFuncBodies
	case 'G':
		conf.Import(importPath)
	default:
		return fmt.Errorf("package %q doesn't contain file %s",
			importPath, filename)
	}

	conf.TypeCheckFuncBodies = func(p string) bool { return p == importPath }

	return nil
}

// pkgContainsFile reports whether file was among the packages Go
// files, Test files, eXternal test files, or not found.
func pkgContainsFile(bp *build.Package, filename string) byte {
	for i, files := range [][]string{bp.GoFiles, bp.TestGoFiles, bp.XTestGoFiles} {
		for _, file := range files {
			if sameFile(filepath.Join(bp.Dir, file), filename) {
				return "GTX"[i]
			}
		}
	}
	return 0 // not found
}

// ParseQueryPos parses the source query position pos and returns the
// AST node of the loaded program lprog that it identifies.
// If needExact, it must identify a single AST subtree;
// this is appropriate for queries that allow fairly arbitrary syntax,
// e.g. "describe".
//
func parseQueryPos(lprog *loader.Program, posFlag string, needExact bool) (*queryPos, error) {
	filename, startOffset, endOffset, err := parsePosFlag(posFlag)
	if err != nil {
		return nil, err
	}
	start, end, err := findQueryPos(lprog.Fset, filename, startOffset, endOffset)
	if err != nil {
		return nil, err
	}
	info, path, exact := lprog.PathEnclosingInterval(start, end)
	if path == nil {
		return nil, fmt.Errorf("no syntax here")
	}
	if needExact && !exact {
		return nil, fmt.Errorf("ambiguous selection within %s", astutil.NodeDescription(path[0]))
	}
	return &queryPos{lprog.Fset, start, end, path, exact, info}, nil
}

// ---------- Utilities ----------

// allowErrors causes type errors to be silently ignored.
// (Not suitable if SSA construction follows.)
func allowErrors(lconf *loader.Config) {
	ctxt := *lconf.Build // copy
	ctxt.CgoEnabled = false
	lconf.Build = &ctxt
	lconf.AllowErrors = true
	// AllErrors makes the parser always return an AST instead of
	// bailing out after 10 errors and returning an empty ast.File.
	lconf.ParserMode = parser.AllErrors
	lconf.TypeChecker.Error = func(err error) {}
}

// ptrAnalysis runs the pointer analysis and returns its result.
func ptrAnalysis(conf *pointer.Config) *pointer.Result {
	result, err := pointer.Analyze(conf)
	if err != nil {
		panic(err) // pointer analysis internal error
	}
	return result
}

func unparen(e ast.Expr) ast.Expr { return astutil.Unparen(e) }

// deref returns a pointer's element type; otherwise it returns typ.
func deref(typ types.Type) types.Type {
	if p, ok := typ.Underlying().(*types.Pointer); ok {
		return p.Elem()
	}
	return typ
}

// fprintf prints to w a message of the form "location: message\n"
// where location is derived from pos.
//
// pos must be one of:
//    - a token.Pos, denoting a position
//    - an ast.Node, denoting an interval
//    - anything with a Pos() method:
//         ssa.Member, ssa.Value, ssa.Instruction, types.Object, pointer.Label, etc.
//    - a QueryPos, denoting the extent of the user's query.
//    - nil, meaning no position at all.
//
// The output format is is compatible with the 'gnu'
// compilation-error-regexp in Emacs' compilation mode.
// TODO(adonovan): support other editors.
//
func fprintf(w io.Writer, fset *token.FileSet, pos interface{}, format string, args ...interface{}) {
	var start, end token.Pos
	switch pos := pos.(type) {
	case ast.Node:
		start = pos.Pos()
		end = pos.End()
	case token.Pos:
		start = pos
		end = start
	case interface {
		Pos() token.Pos
	}:
		start = pos.Pos()
		end = start
	case *queryPos:
		start = pos.start
		end = pos.end
	case nil:
		// no-op
	default:
		panic(fmt.Sprintf("invalid pos: %T", pos))
	}

	if sp := fset.Position(start); start == end {
		// (prints "-: " for token.NoPos)
		fmt.Fprintf(w, "%s: ", sp)
	} else {
		ep := fset.Position(end)
		// The -1 below is a concession to Emacs's broken use of
		// inclusive (not half-open) intervals.
		// Other editors may not want it.
		// TODO(adonovan): add an -editor=vim|emacs|acme|auto
		// flag; auto uses EMACS=t / VIM=... / etc env vars.
		fmt.Fprintf(w, "%s:%d.%d-%d.%d: ",
			sp.Filename, sp.Line, sp.Column, ep.Line, ep.Column-1)
	}
	fmt.Fprintf(w, format, args...)
	io.WriteString(w, "\n")
}
                                                                                                                                                                                                                                     go/src/golang.org/x/tools/oracle/oracle_test.go                                                     0100644 0000000 0000000 00000016012 13101127476 020207  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle_test

// This file defines a test framework for oracle queries.
//
// The files beneath testdata/src/main contain Go programs containing
// query annotations of the form:
//
//   @verb id "select"
//
// where verb is the query mode (e.g. "callers"), id is a unique name
// for this query, and "select" is a regular expression matching the
// substring of the current line that is the query's input selection.
//
// The expected output for each query is provided in the accompanying
// .golden file.
//
// (Location information is not included because it's too fragile to
// display as text.  TODO(adonovan): think about how we can test its
// correctness, since it is critical information.)
//
// Run this test with:
// 	% go test golang.org/x/tools/oracle -update
// to update the golden files.

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"go/build"
	"go/parser"
	"go/token"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"regexp"
	"runtime"
	"strconv"
	"strings"
	"testing"

	"golang.org/x/tools/oracle"
)

var updateFlag = flag.Bool("update", false, "Update the golden files.")

type query struct {
	id       string         // unique id
	verb     string         // query mode, e.g. "callees"
	posn     token.Position // position of of query
	filename string
	queryPos string // value of -pos flag
}

func parseRegexp(text string) (*regexp.Regexp, error) {
	pattern, err := strconv.Unquote(text)
	if err != nil {
		return nil, fmt.Errorf("can't unquote %s", text)
	}
	return regexp.Compile(pattern)
}

// parseQueries parses and returns the queries in the named file.
func parseQueries(t *testing.T, filename string) []*query {
	filedata, err := ioutil.ReadFile(filename)
	if err != nil {
		t.Fatal(err)
	}

	// Parse the file once to discover the test queries.
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, filename, filedata, parser.ParseComments)
	if err != nil {
		t.Fatal(err)
	}

	lines := bytes.Split(filedata, []byte("\n"))

	var queries []*query
	queriesById := make(map[string]*query)

	// Find all annotations of these forms:
	expectRe := regexp.MustCompile(`@([a-z]+)\s+(\S+)\s+(\".*)$`) // @verb id "regexp"
	for _, c := range f.Comments {
		text := strings.TrimSpace(c.Text())
		if text == "" || text[0] != '@' {
			continue
		}
		posn := fset.Position(c.Pos())

		// @verb id "regexp"
		match := expectRe.FindStringSubmatch(text)
		if match == nil {
			t.Errorf("%s: ill-formed query: %s", posn, text)
			continue
		}

		id := match[2]
		if prev, ok := queriesById[id]; ok {
			t.Errorf("%s: duplicate id %s", posn, id)
			t.Errorf("%s: previously used here", prev.posn)
			continue
		}

		q := &query{
			id:       id,
			verb:     match[1],
			filename: filename,
			posn:     posn,
		}

		if match[3] != `"nopos"` {
			selectRe, err := parseRegexp(match[3])
			if err != nil {
				t.Errorf("%s: %s", posn, err)
				continue
			}

			// Find text of the current line, sans query.
			// (Queries must be // not /**/ comments.)
			line := lines[posn.Line-1][:posn.Column-1]

			// Apply regexp to current line to find input selection.
			loc := selectRe.FindIndex(line)
			if loc == nil {
				t.Errorf("%s: selection pattern %s doesn't match line %q",
					posn, match[3], string(line))
				continue
			}

			// Assumes ASCII. TODO(adonovan): test on UTF-8.
			linestart := posn.Offset - (posn.Column - 1)

			// Compute the file offsets.
			q.queryPos = fmt.Sprintf("%s:#%d,#%d",
				filename, linestart+loc[0], linestart+loc[1])
		}

		queries = append(queries, q)
		queriesById[id] = q
	}

	// Return the slice, not map, for deterministic iteration.
	return queries
}

// WriteResult writes res (-format=plain) to w, stripping file locations.
func WriteResult(w io.Writer, q *oracle.Query) {
	capture := new(bytes.Buffer) // capture standard output
	q.WriteTo(capture)
	for _, line := range strings.Split(capture.String(), "\n") {
		// Remove a "file:line: " prefix.
		if i := strings.Index(line, ": "); i >= 0 {
			line = line[i+2:]
		}
		fmt.Fprintf(w, "%s\n", line)
	}
}

// doQuery poses query q to the oracle and writes its response and
// error (if any) to out.
func doQuery(out io.Writer, q *query, useJson bool) {
	fmt.Fprintf(out, "-------- @%s %s --------\n", q.verb, q.id)

	var buildContext = build.Default
	buildContext.GOPATH = "testdata"
	query := oracle.Query{
		Mode:       q.verb,
		Pos:        q.queryPos,
		Build:      &buildContext,
		Scope:      []string{q.filename},
		Reflection: true,
	}
	if err := oracle.Run(&query); err != nil {
		fmt.Fprintf(out, "\nError: %s\n", err)
		return
	}

	if useJson {
		// JSON output
		b, err := json.MarshalIndent(query.Serial(), "", "\t")
		if err != nil {
			fmt.Fprintf(out, "JSON error: %s\n", err.Error())
			return
		}
		out.Write(b)
		fmt.Fprintln(out)
	} else {
		// "plain" (compiler diagnostic format) output
		WriteResult(out, &query)
	}
}

func TestOracle(t *testing.T) {
	switch runtime.GOOS {
	case "android":
		t.Skipf("skipping test on %q (no testdata dir)", runtime.GOOS)
	case "windows":
		t.Skipf("skipping test on %q (no /usr/bin/diff)", runtime.GOOS)
	}

	for _, filename := range []string{
		"testdata/src/calls/main.go",
		"testdata/src/describe/main.go",
		"testdata/src/freevars/main.go",
		"testdata/src/implements/main.go",
		"testdata/src/implements-methods/main.go",
		"testdata/src/imports/main.go",
		"testdata/src/peers/main.go",
		"testdata/src/pointsto/main.go",
		"testdata/src/referrers/main.go",
		"testdata/src/reflection/main.go",
		"testdata/src/what/main.go",
		"testdata/src/whicherrs/main.go",
		// JSON:
		// TODO(adonovan): most of these are very similar; combine them.
		"testdata/src/calls-json/main.go",
		"testdata/src/peers-json/main.go",
		"testdata/src/describe-json/main.go",
		"testdata/src/implements-json/main.go",
		"testdata/src/implements-methods-json/main.go",
		"testdata/src/pointsto-json/main.go",
		"testdata/src/referrers-json/main.go",
		"testdata/src/what-json/main.go",
	} {
		useJson := strings.Contains(filename, "-json/")
		queries := parseQueries(t, filename)
		golden := filename + "lden"
		got := filename + "t"
		gotfh, err := os.Create(got)
		if err != nil {
			t.Errorf("Create(%s) failed: %s", got, err)
			continue
		}
		defer gotfh.Close()
		defer os.Remove(got)

		// Run the oracle on each query, redirecting its output
		// and error (if any) to the foo.got file.
		for _, q := range queries {
			doQuery(gotfh, q, useJson)
		}

		// Compare foo.got with foo.golden.
		var cmd *exec.Cmd
		switch runtime.GOOS {
		case "plan9":
			cmd = exec.Command("/bin/diff", "-c", golden, got)
		default:
			cmd = exec.Command("/usr/bin/diff", "-u", golden, got)
		}
		buf := new(bytes.Buffer)
		cmd.Stdout = buf
		cmd.Stderr = os.Stderr
		if err := cmd.Run(); err != nil {
			t.Errorf("Oracle tests for %s failed: %s.\n%s\n",
				filename, err, buf)

			if *updateFlag {
				t.Logf("Updating %s...", golden)
				if err := exec.Command("/bin/cp", got, golden).Run(); err != nil {
					t.Errorf("Update failed: %s", err)
				}
			}
		}
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      go/src/golang.org/x/tools/oracle/peers.go                                                           0100644 0000000 0000000 00000015760 13101127476 017032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"
	"sort"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

// peers enumerates, for a given channel send (or receive) operation,
// the set of possible receives (or sends) that correspond to it.
//
// TODO(adonovan): support reflect.{Select,Recv,Send,Close}.
// TODO(adonovan): permit the user to query based on a MakeChan (not send/recv),
// or the implicit receive in "for v := range ch".
func peers(q *Query) error {
	lconf := loader.Config{Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, false)
	if err != nil {
		return err
	}

	prog := ssautil.CreateProgram(lprog, ssa.GlobalDebug)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	opPos := findOp(qpos)
	if opPos == token.NoPos {
		return fmt.Errorf("there is no channel operation here")
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	var queryOp chanOp // the originating send or receive operation
	var ops []chanOp   // all sends/receives of opposite direction

	// Look at all channel operations in the whole ssa.Program.
	// Build a list of those of same type as the query.
	allFuncs := ssautil.AllFunctions(prog)
	for fn := range allFuncs {
		for _, b := range fn.Blocks {
			for _, instr := range b.Instrs {
				for _, op := range chanOps(instr) {
					ops = append(ops, op)
					if op.pos == opPos {
						queryOp = op // we found the query op
					}
				}
			}
		}
	}
	if queryOp.ch == nil {
		return fmt.Errorf("ssa.Instruction for send/receive not found")
	}

	// Discard operations of wrong channel element type.
	// Build set of channel ssa.Values as query to pointer analysis.
	// We compare channels by element types, not channel types, to
	// ignore both directionality and type names.
	queryType := queryOp.ch.Type()
	queryElemType := queryType.Underlying().(*types.Chan).Elem()
	ptaConfig.AddQuery(queryOp.ch)
	i := 0
	for _, op := range ops {
		if types.Identical(op.ch.Type().Underlying().(*types.Chan).Elem(), queryElemType) {
			ptaConfig.AddQuery(op.ch)
			ops[i] = op
			i++
		}
	}
	ops = ops[:i]

	// Run the pointer analysis.
	ptares := ptrAnalysis(ptaConfig)

	// Find the points-to set.
	queryChanPtr := ptares.Queries[queryOp.ch]

	// Ascertain which make(chan) labels the query's channel can alias.
	var makes []token.Pos
	for _, label := range queryChanPtr.PointsTo().Labels() {
		makes = append(makes, label.Pos())
	}
	sort.Sort(byPos(makes))

	// Ascertain which channel operations can alias the same make(chan) labels.
	var sends, receives, closes []token.Pos
	for _, op := range ops {
		if ptr, ok := ptares.Queries[op.ch]; ok && ptr.MayAlias(queryChanPtr) {
			switch op.dir {
			case types.SendOnly:
				sends = append(sends, op.pos)
			case types.RecvOnly:
				receives = append(receives, op.pos)
			case types.SendRecv:
				closes = append(closes, op.pos)
			}
		}
	}
	sort.Sort(byPos(sends))
	sort.Sort(byPos(receives))
	sort.Sort(byPos(closes))

	q.result = &peersResult{
		queryPos:  opPos,
		queryType: queryType,
		makes:     makes,
		sends:     sends,
		receives:  receives,
		closes:    closes,
	}
	return nil
}

// findOp returns the position of the enclosing send/receive/close op.
// For send and receive operations, this is the position of the <- token;
// for close operations, it's the Lparen of the function call.
//
// TODO(adonovan): handle implicit receive operations from 'for...range chan' statements.
func findOp(qpos *queryPos) token.Pos {
	for _, n := range qpos.path {
		switch n := n.(type) {
		case *ast.UnaryExpr:
			if n.Op == token.ARROW {
				return n.OpPos
			}
		case *ast.SendStmt:
			return n.Arrow
		case *ast.CallExpr:
			// close function call can only exist as a direct identifier
			if close, ok := unparen(n.Fun).(*ast.Ident); ok {
				if b, ok := qpos.info.Info.Uses[close].(*types.Builtin); ok && b.Name() == "close" {
					return n.Lparen
				}
			}
		}
	}
	return token.NoPos
}

// chanOp abstracts an ssa.Send, ssa.Unop(ARROW), or a SelectState.
type chanOp struct {
	ch  ssa.Value
	dir types.ChanDir // SendOnly=send, RecvOnly=recv, SendRecv=close
	pos token.Pos
}

// chanOps returns a slice of all the channel operations in the instruction.
func chanOps(instr ssa.Instruction) []chanOp {
	// TODO(adonovan): handle calls to reflect.{Select,Recv,Send,Close} too.
	var ops []chanOp
	switch instr := instr.(type) {
	case *ssa.UnOp:
		if instr.Op == token.ARROW {
			ops = append(ops, chanOp{instr.X, types.RecvOnly, instr.Pos()})
		}
	case *ssa.Send:
		ops = append(ops, chanOp{instr.Chan, types.SendOnly, instr.Pos()})
	case *ssa.Select:
		for _, st := range instr.States {
			ops = append(ops, chanOp{st.Chan, st.Dir, st.Pos})
		}
	case ssa.CallInstruction:
		cc := instr.Common()
		if b, ok := cc.Value.(*ssa.Builtin); ok && b.Name() == "close" {
			ops = append(ops, chanOp{cc.Args[0], types.SendRecv, cc.Pos()})
		}
	}
	return ops
}

type peersResult struct {
	queryPos                       token.Pos   // of queried channel op
	queryType                      types.Type  // type of queried channel
	makes, sends, receives, closes []token.Pos // positions of aliased makechan/send/receive/close instrs
}

func (r *peersResult) display(printf printfFunc) {
	if len(r.makes) == 0 {
		printf(r.queryPos, "This channel can't point to anything.")
		return
	}
	printf(r.queryPos, "This channel of type %s may be:", r.queryType)
	for _, alloc := range r.makes {
		printf(alloc, "\tallocated here")
	}
	for _, send := range r.sends {
		printf(send, "\tsent to, here")
	}
	for _, receive := range r.receives {
		printf(receive, "\treceived from, here")
	}
	for _, clos := range r.closes {
		printf(clos, "\tclosed, here")
	}
}

func (r *peersResult) toSerial(res *serial.Result, fset *token.FileSet) {
	peers := &serial.Peers{
		Pos:  fset.Position(r.queryPos).String(),
		Type: r.queryType.String(),
	}
	for _, alloc := range r.makes {
		peers.Allocs = append(peers.Allocs, fset.Position(alloc).String())
	}
	for _, send := range r.sends {
		peers.Sends = append(peers.Sends, fset.Position(send).String())
	}
	for _, receive := range r.receives {
		peers.Receives = append(peers.Receives, fset.Position(receive).String())
	}
	for _, clos := range r.closes {
		peers.Closes = append(peers.Closes, fset.Position(clos).String())
	}
	res.Peers = peers
}

// -------- utils --------

// NB: byPos is not deterministic across packages since it depends on load order.
// Use lessPos if the tests need it.
type byPos []token.Pos

func (p byPos) Len() int           { return len(p) }
func (p byPos) Less(i, j int) bool { return p[i] < p[j] }
func (p byPos) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
                go/src/golang.org/x/tools/oracle/pointsto.go                                                        0100644 0000000 0000000 00000020203 13101127476 017557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"
	"sort"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/pointer"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

// pointsto runs the pointer analysis on the selected expression,
// and reports its points-to set (for a pointer-like expression)
// or its dynamic types (for an interface, reflect.Value, or
// reflect.Type expression) and their points-to sets.
//
// All printed sets are sorted to ensure determinism.
//
func pointsto(q *Query) error {
	lconf := loader.Config{Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, true) // needs exact pos
	if err != nil {
		return err
	}

	prog := ssautil.CreateProgram(lprog, ssa.GlobalDebug)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	path, action := findInterestingNode(qpos.info, qpos.path)
	if action != actionExpr {
		return fmt.Errorf("pointer analysis wants an expression; got %s",
			astutil.NodeDescription(qpos.path[0]))
	}

	var expr ast.Expr
	var obj types.Object
	switch n := path[0].(type) {
	case *ast.ValueSpec:
		// ambiguous ValueSpec containing multiple names
		return fmt.Errorf("multiple value specification")
	case *ast.Ident:
		obj = qpos.info.ObjectOf(n)
		expr = n
	case ast.Expr:
		expr = n
	default:
		// TODO(adonovan): is this reachable?
		return fmt.Errorf("unexpected AST for expr: %T", n)
	}

	// Reject non-pointerlike types (includes all constants---except nil).
	// TODO(adonovan): reject nil too.
	typ := qpos.info.TypeOf(expr)
	if !pointer.CanPoint(typ) {
		return fmt.Errorf("pointer analysis wants an expression of reference type; got %s", typ)
	}

	// Determine the ssa.Value for the expression.
	var value ssa.Value
	var isAddr bool
	if obj != nil {
		// def/ref of func/var object
		value, isAddr, err = ssaValueForIdent(prog, qpos.info, obj, path)
	} else {
		value, isAddr, err = ssaValueForExpr(prog, qpos.info, path)
	}
	if err != nil {
		return err // e.g. trivially dead code
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	// Run the pointer analysis.
	ptrs, err := runPTA(ptaConfig, value, isAddr)
	if err != nil {
		return err // e.g. analytically unreachable
	}

	q.result = &pointstoResult{
		qpos: qpos,
		typ:  typ,
		ptrs: ptrs,
	}
	return nil
}

// ssaValueForIdent returns the ssa.Value for the ast.Ident whose path
// to the root of the AST is path.  isAddr reports whether the
// ssa.Value is the address denoted by the ast.Ident, not its value.
//
func ssaValueForIdent(prog *ssa.Program, qinfo *loader.PackageInfo, obj types.Object, path []ast.Node) (value ssa.Value, isAddr bool, err error) {
	switch obj := obj.(type) {
	case *types.Var:
		pkg := prog.Package(qinfo.Pkg)
		pkg.Build()
		if v, addr := prog.VarValue(obj, pkg, path); v != nil {
			return v, addr, nil
		}
		return nil, false, fmt.Errorf("can't locate SSA Value for var %s", obj.Name())

	case *types.Func:
		fn := prog.FuncValue(obj)
		if fn == nil {
			return nil, false, fmt.Errorf("%s is an interface method", obj)
		}
		// TODO(adonovan): there's no point running PTA on a *Func ident.
		// Eliminate this feature.
		return fn, false, nil
	}
	panic(obj)
}

// ssaValueForExpr returns the ssa.Value of the non-ast.Ident
// expression whose path to the root of the AST is path.
//
func ssaValueForExpr(prog *ssa.Program, qinfo *loader.PackageInfo, path []ast.Node) (value ssa.Value, isAddr bool, err error) {
	pkg := prog.Package(qinfo.Pkg)
	pkg.SetDebugMode(true)
	pkg.Build()

	fn := ssa.EnclosingFunction(pkg, path)
	if fn == nil {
		return nil, false, fmt.Errorf("no SSA function built for this location (dead code?)")
	}

	if v, addr := fn.ValueForExpr(path[0].(ast.Expr)); v != nil {
		return v, addr, nil
	}

	return nil, false, fmt.Errorf("can't locate SSA Value for expression in %s", fn)
}

// runPTA runs the pointer analysis of the selected SSA value or address.
func runPTA(conf *pointer.Config, v ssa.Value, isAddr bool) (ptrs []pointerResult, err error) {
	T := v.Type()
	if isAddr {
		conf.AddIndirectQuery(v)
		T = deref(T)
	} else {
		conf.AddQuery(v)
	}
	ptares := ptrAnalysis(conf)

	var ptr pointer.Pointer
	if isAddr {
		ptr = ptares.IndirectQueries[v]
	} else {
		ptr = ptares.Queries[v]
	}
	if ptr == (pointer.Pointer{}) {
		return nil, fmt.Errorf("pointer analysis did not find expression (dead code?)")
	}
	pts := ptr.PointsTo()

	if pointer.CanHaveDynamicTypes(T) {
		// Show concrete types for interface/reflect.Value expression.
		if concs := pts.DynamicTypes(); concs.Len() > 0 {
			concs.Iterate(func(conc types.Type, pta interface{}) {
				labels := pta.(pointer.PointsToSet).Labels()
				sort.Sort(byPosAndString(labels)) // to ensure determinism
				ptrs = append(ptrs, pointerResult{conc, labels})
			})
		}
	} else {
		// Show labels for other expressions.
		labels := pts.Labels()
		sort.Sort(byPosAndString(labels)) // to ensure determinism
		ptrs = append(ptrs, pointerResult{T, labels})
	}
	sort.Sort(byTypeString(ptrs)) // to ensure determinism
	return ptrs, nil
}

type pointerResult struct {
	typ    types.Type       // type of the pointer (always concrete)
	labels []*pointer.Label // set of labels
}

type pointstoResult struct {
	qpos *queryPos
	typ  types.Type      // type of expression
	ptrs []pointerResult // pointer info (typ is concrete => len==1)
}

func (r *pointstoResult) display(printf printfFunc) {
	if pointer.CanHaveDynamicTypes(r.typ) {
		// Show concrete types for interface, reflect.Type or
		// reflect.Value expression.

		if len(r.ptrs) > 0 {
			printf(r.qpos, "this %s may contain these dynamic types:", r.qpos.typeString(r.typ))
			for _, ptr := range r.ptrs {
				var obj types.Object
				if nt, ok := deref(ptr.typ).(*types.Named); ok {
					obj = nt.Obj()
				}
				if len(ptr.labels) > 0 {
					printf(obj, "\t%s, may point to:", r.qpos.typeString(ptr.typ))
					printLabels(printf, ptr.labels, "\t\t")
				} else {
					printf(obj, "\t%s", r.qpos.typeString(ptr.typ))
				}
			}
		} else {
			printf(r.qpos, "this %s cannot contain any dynamic types.", r.typ)
		}
	} else {
		// Show labels for other expressions.
		if ptr := r.ptrs[0]; len(ptr.labels) > 0 {
			printf(r.qpos, "this %s may point to these objects:",
				r.qpos.typeString(r.typ))
			printLabels(printf, ptr.labels, "\t")
		} else {
			printf(r.qpos, "this %s may not point to anything.",
				r.qpos.typeString(r.typ))
		}
	}
}

func (r *pointstoResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var pts []serial.PointsTo
	for _, ptr := range r.ptrs {
		var namePos string
		if nt, ok := deref(ptr.typ).(*types.Named); ok {
			namePos = fset.Position(nt.Obj().Pos()).String()
		}
		var labels []serial.PointsToLabel
		for _, l := range ptr.labels {
			labels = append(labels, serial.PointsToLabel{
				Pos:  fset.Position(l.Pos()).String(),
				Desc: l.String(),
			})
		}
		pts = append(pts, serial.PointsTo{
			Type:    r.qpos.typeString(ptr.typ),
			NamePos: namePos,
			Labels:  labels,
		})
	}
	res.PointsTo = pts
}

type byTypeString []pointerResult

func (a byTypeString) Len() int           { return len(a) }
func (a byTypeString) Less(i, j int) bool { return a[i].typ.String() < a[j].typ.String() }
func (a byTypeString) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

type byPosAndString []*pointer.Label

func (a byPosAndString) Len() int { return len(a) }
func (a byPosAndString) Less(i, j int) bool {
	cmp := a[i].Pos() - a[j].Pos()
	return cmp < 0 || (cmp == 0 && a[i].String() < a[j].String())
}
func (a byPosAndString) Swap(i, j int) { a[i], a[j] = a[j], a[i] }

func printLabels(printf printfFunc, labels []*pointer.Label, prefix string) {
	// TODO(adonovan): due to context-sensitivity, many of these
	// labels may differ only by context, which isn't apparent.
	for _, label := range labels {
		printf(label, "%s%s", prefix, label)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/oracle/pos.go                                                             0100644 0000000 0000000 00000007071 13101127476 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package oracle

// This file defines utilities for working with file positions.

import (
	"fmt"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
)

// parseOctothorpDecimal returns the numeric value if s matches "#%d",
// otherwise -1.
func parseOctothorpDecimal(s string) int {
	if s != "" && s[0] == '#' {
		if s, err := strconv.ParseInt(s[1:], 10, 32); err == nil {
			return int(s)
		}
	}
	return -1
}

// parsePosFlag parses a string of the form "file:pos" or
// file:start,end" where pos, start, end match #%d and represent byte
// offsets, and returns its components.
//
// (Numbers without a '#' prefix are reserved for future use,
// e.g. to indicate line/column positions.)
//
func parsePosFlag(posFlag string) (filename string, startOffset, endOffset int, err error) {
	if posFlag == "" {
		err = fmt.Errorf("no source position specified (-pos flag)")
		return
	}

	colon := strings.LastIndex(posFlag, ":")
	if colon < 0 {
		err = fmt.Errorf("invalid source position -pos=%q", posFlag)
		return
	}
	filename, offset := posFlag[:colon], posFlag[colon+1:]
	startOffset = -1
	endOffset = -1
	if hyphen := strings.Index(offset, ","); hyphen < 0 {
		// e.g. "foo.go:#123"
		startOffset = parseOctothorpDecimal(offset)
		endOffset = startOffset
	} else {
		// e.g. "foo.go:#123,#456"
		startOffset = parseOctothorpDecimal(offset[:hyphen])
		endOffset = parseOctothorpDecimal(offset[hyphen+1:])
	}
	if startOffset < 0 || endOffset < 0 {
		err = fmt.Errorf("invalid -pos offset %q", offset)
		return
	}
	return
}

// findQueryPos searches fset for filename and translates the
// specified file-relative byte offsets into token.Pos form.  It
// returns an error if the file was not found or the offsets were out
// of bounds.
//
func findQueryPos(fset *token.FileSet, filename string, startOffset, endOffset int) (start, end token.Pos, err error) {
	var file *token.File
	fset.Iterate(func(f *token.File) bool {
		if sameFile(filename, f.Name()) {
			// (f.Name() is absolute)
			file = f
			return false // done
		}
		return true // continue
	})
	if file == nil {
		err = fmt.Errorf("couldn't find file containing position")
		return
	}

	// Range check [start..end], inclusive of both end-points.

	if 0 <= startOffset && startOffset <= file.Size() {
		start = file.Pos(int(startOffset))
	} else {
		err = fmt.Errorf("start position is beyond end of file")
		return
	}

	if 0 <= endOffset && endOffset <= file.Size() {
		end = file.Pos(int(endOffset))
	} else {
		err = fmt.Errorf("end position is beyond end of file")
		return
	}

	return
}

// sameFile returns true if x and y have the same basename and denote
// the same file.
//
func sameFile(x, y string) bool {
	if filepath.Base(x) == filepath.Base(y) { // (optimisation)
		if xi, err := os.Stat(x); err == nil {
			if yi, err := os.Stat(y); err == nil {
				return os.SameFile(xi, yi)
			}
		}
	}
	return false
}

// fastQueryPos parses the -pos flag and returns a QueryPos.
// It parses only a single file, and does not run the type checker.
func fastQueryPos(posFlag string) (*queryPos, error) {
	filename, startOffset, endOffset, err := parsePosFlag(posFlag)
	if err != nil {
		return nil, err
	}

	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, filename, nil, 0)
	if err != nil {
		return nil, err
	}

	start, end, err := findQueryPos(fset, filename, startOffset, endOffset)
	if err != nil {
		return nil, err
	}

	path, exact := astutil.PathEnclosingInterval(f, start, end)
	if path == nil {
		return nil, fmt.Errorf("no syntax here")
	}

	return &queryPos{fset, start, end, path, exact, nil}, nil
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       go/src/golang.org/x/tools/oracle/referrers.go                                                       0100644 0000000 0000000 00000013210 13101127476 017677  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/token"
	"io/ioutil"
	"sort"

	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
	"golang.org/x/tools/refactor/importgraph"
)

// Referrers reports all identifiers that resolve to the same object
// as the queried identifier, within any package in the analysis scope.
func referrers(q *Query) error {
	lconf := loader.Config{Build: q.Build}
	allowErrors(&lconf)

	if err := importQueryPackage(q.Pos, &lconf); err != nil {
		return err
	}

	var id *ast.Ident
	var obj types.Object
	var lprog *loader.Program
	var pass2 bool
	var qpos *queryPos
	for {
		// Load/parse/type-check the program.
		var err error
		lprog, err = lconf.Load()
		if err != nil {
			return err
		}
		q.Fset = lprog.Fset

		qpos, err = parseQueryPos(lprog, q.Pos, false)
		if err != nil {
			return err
		}

		id, _ = qpos.path[0].(*ast.Ident)
		if id == nil {
			return fmt.Errorf("no identifier here")
		}

		obj = qpos.info.ObjectOf(id)
		if obj == nil {
			// Happens for y in "switch y := x.(type)",
			// the package declaration,
			// and unresolved identifiers.
			if _, ok := qpos.path[1].(*ast.File); ok { // package decl?
				pkg := qpos.info.Pkg
				obj = types.NewPkgName(id.Pos(), pkg, pkg.Name(), pkg)
			} else {
				return fmt.Errorf("no object for identifier: %T", qpos.path[1])
			}
		}

		if pass2 {
			break
		}

		// If the identifier is exported, we must load all packages that
		// depend transitively upon the package that defines it.
		// Treat PkgNames as exported, even though they're lowercase.
		if _, isPkg := obj.(*types.PkgName); !(isPkg || obj.Exported()) {
			break // not exported
		}

		// Scan the workspace and build the import graph.
		// Ignore broken packages.
		_, rev, _ := importgraph.Build(q.Build)

		// Re-load the larger program.
		// Create a new file set so that ...
		// External test packages are never imported,
		// so they will never appear in the graph.
		// (We must reset the Config here, not just reset the Fset field.)
		lconf = loader.Config{
			Fset:  token.NewFileSet(),
			Build: q.Build,
		}
		allowErrors(&lconf)
		for path := range rev.Search(obj.Pkg().Path()) {
			lconf.ImportWithTests(path)
		}
		pass2 = true
	}

	// Iterate over all go/types' Uses facts for the entire program.
	var refs []*ast.Ident
	for _, info := range lprog.AllPackages {
		for id2, obj2 := range info.Uses {
			if sameObj(obj, obj2) {
				refs = append(refs, id2)
			}
		}
	}
	sort.Sort(byNamePos{q.Fset, refs})

	q.result = &referrersResult{
		qpos:  qpos,
		query: id,
		obj:   obj,
		refs:  refs,
	}
	return nil
}

// same reports whether x and y are identical, or both are PkgNames
// that import the same Package.
//
func sameObj(x, y types.Object) bool {
	if x == y {
		return true
	}
	if x, ok := x.(*types.PkgName); ok {
		if y, ok := y.(*types.PkgName); ok {
			return x.Imported() == y.Imported()
		}
	}
	return false
}

// -------- utils --------

// An deterministic ordering for token.Pos that doesn't
// depend on the order in which packages were loaded.
func lessPos(fset *token.FileSet, x, y token.Pos) bool {
	fx := fset.File(x)
	fy := fset.File(y)
	if fx != fy {
		return fx.Name() < fy.Name()
	}
	return x < y
}

type byNamePos struct {
	fset *token.FileSet
	ids  []*ast.Ident
}

func (p byNamePos) Len() int      { return len(p.ids) }
func (p byNamePos) Swap(i, j int) { p.ids[i], p.ids[j] = p.ids[j], p.ids[i] }
func (p byNamePos) Less(i, j int) bool {
	return lessPos(p.fset, p.ids[i].NamePos, p.ids[j].NamePos)
}

type referrersResult struct {
	qpos  *queryPos
	query *ast.Ident   // identifier of query
	obj   types.Object // object it denotes
	refs  []*ast.Ident // set of all other references to it
}

func (r *referrersResult) display(printf printfFunc) {
	printf(r.obj, "%d references to %s", len(r.refs), r.qpos.objectString(r.obj))

	// Show referring lines, like grep.
	type fileinfo struct {
		refs     []*ast.Ident
		linenums []int       // line number of refs[i]
		data     chan []byte // file contents
	}
	var fileinfos []*fileinfo
	fileinfosByName := make(map[string]*fileinfo)

	// First pass: start the file reads concurrently.
	for _, ref := range r.refs {
		posn := r.qpos.fset.Position(ref.Pos())
		fi := fileinfosByName[posn.Filename]
		if fi == nil {
			fi = &fileinfo{data: make(chan []byte)}
			fileinfosByName[posn.Filename] = fi
			fileinfos = append(fileinfos, fi)

			// First request for this file:
			// start asynchronous read.
			go func() {
				content, err := ioutil.ReadFile(posn.Filename)
				if err != nil {
					content = []byte(fmt.Sprintf("error: %v", err))
				}
				fi.data <- content
			}()
		}
		fi.refs = append(fi.refs, ref)
		fi.linenums = append(fi.linenums, posn.Line)
	}

	// Second pass: print refs in original order.
	// One line may have several refs at different columns.
	for _, fi := range fileinfos {
		content := <-fi.data // wait for I/O completion
		lines := bytes.Split(content, []byte("\n"))
		for i, ref := range fi.refs {
			printf(ref, "%s", lines[fi.linenums[i]-1])
		}
	}
}

// TODO(adonovan): encode extent, not just Pos info, in Serial form.

func (r *referrersResult) toSerial(res *serial.Result, fset *token.FileSet) {
	referrers := &serial.Referrers{
		Pos:  fset.Position(r.query.Pos()).String(),
		Desc: r.obj.String(),
	}
	if pos := r.obj.Pos(); pos != token.NoPos { // Package objects have no Pos()
		referrers.ObjPos = fset.Position(pos).String()
	}
	for _, ref := range r.refs {
		referrers.Refs = append(referrers.Refs, fset.Position(ref.NamePos).String())
	}
	res.Referrers = referrers
}
                                                                                                                                                                                                                                                                                                                                                                                        go/src/golang.org/x/tools/oracle/serial/                                                            0040755 0000000 0000000 00000000000 13101127476 016636  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/serial/serial.go                                                   0100644 0000000 0000000 00000026765 13101127476 020461  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package serial defines the oracle's schema for structured data
// serialization using JSON, XML, etc.
package serial

// All 'pos' strings are of the form "file:line:col".
// TODO(adonovan): improve performance by sharing filename strings.
// TODO(adonovan): improve precision by providing the start/end
// interval when available.
//
// TODO(adonovan): consider richer encodings of types, functions,
// methods, etc.

// A Peers is the result of a 'peers' query.
// If Allocs is empty, the selected channel can't point to anything.
type Peers struct {
	Pos      string   `json:"pos"`                // location of the selected channel op (<-)
	Type     string   `json:"type"`               // type of the selected channel
	Allocs   []string `json:"allocs,omitempty"`   // locations of aliased make(chan) ops
	Sends    []string `json:"sends,omitempty"`    // locations of aliased ch<-x ops
	Receives []string `json:"receives,omitempty"` // locations of aliased <-ch ops
	Closes   []string `json:"closes,omitempty"`   // locations of aliased close(ch) ops
}

// A Referrers is the result of a 'referrers' query.
type Referrers struct {
	Pos    string   `json:"pos"`              // location of the query reference
	ObjPos string   `json:"objpos,omitempty"` // location of the definition
	Desc   string   `json:"desc"`             // description of the denoted object
	Refs   []string `json:"refs,omitempty"`   // locations of all references
}

// A Definition is the result of a 'definition' query.
type Definition struct {
	ObjPos string `json:"objpos,omitempty"` // location of the definition
	Desc   string `json:"desc"`             // description of the denoted object
}

type CalleesItem struct {
	Name string `json:"name"` // full name of called function
	Pos  string `json:"pos"`  // location of called function
}

// A Callees is the result of a 'callees' query.
//
// Callees is nonempty unless the call was a dynamic call on a
// provably nil func or interface value.
type Callees struct {
	Pos     string         `json:"pos"`               // location of selected call site
	Desc    string         `json:"desc"`              // description of call site
	Callees []*CalleesItem `json:"callees,omitempty"` // set of possible call targets
}

// A Caller is one element of the slice returned by a 'callers' query.
// (Callstack also contains a similar slice.)
//
// The root of the callgraph has an unspecified "Caller" string.
type Caller struct {
	Pos    string `json:"pos,omitempty"` // location of the calling function
	Desc   string `json:"desc"`          // description of call site
	Caller string `json:"caller"`        // full name of calling function
}

// A CallStack is the result of a 'callstack' query.
// It indicates an arbitrary path from the root of the callgraph to
// the query function.
//
// If the Callers slice is empty, the function was unreachable in this
// analysis scope.
type CallStack struct {
	Pos     string   `json:"pos"`     // location of the selected function
	Target  string   `json:"target"`  // the selected function
	Callers []Caller `json:"callers"` // enclosing calls, innermost first.
}

// A FreeVar is one element of the slice returned by a 'freevars'
// query.  Each one identifies an expression referencing a local
// identifier defined outside the selected region.
type FreeVar struct {
	Pos  string `json:"pos"`  // location of the identifier's definition
	Kind string `json:"kind"` // one of {var,func,type,const,label}
	Ref  string `json:"ref"`  // referring expression (e.g. "x" or "x.y.z")
	Type string `json:"type"` // type of the expression
}

// An Implements contains the result of an 'implements' query.
// It describes the queried type, the set of named non-empty interface
// types to which it is assignable, and the set of named/*named types
// (concrete or non-empty interface) which may be assigned to it.
//
type Implements struct {
	T                 ImplementsType   `json:"type,omitempty"`    // the queried type
	AssignableTo      []ImplementsType `json:"to,omitempty"`      // types assignable to T
	AssignableFrom    []ImplementsType `json:"from,omitempty"`    // interface types assignable from T
	AssignableFromPtr []ImplementsType `json:"fromptr,omitempty"` // interface types assignable only from *T

	// The following fields are set only if the query was a method.
	// Assignable{To,From,FromPtr}Method[i] is the corresponding
	// method of type Assignable{To,From,FromPtr}[i], or blank
	// {"",""} if that type lacks the method.
	Method                  *DescribeMethod  `json:"method,omitempty"` //  the queried method
	AssignableToMethod      []DescribeMethod `json:"to_method,omitempty"`
	AssignableFromMethod    []DescribeMethod `json:"from_method,omitempty"`
	AssignableFromPtrMethod []DescribeMethod `json:"fromptr_method,omitempty"`
}

// An ImplementsType describes a single type as part of an 'implements' query.
type ImplementsType struct {
	Name string `json:"name"` // full name of the type
	Pos  string `json:"pos"`  // location of its definition
	Kind string `json:"kind"` // "basic", "array", etc
}

// A SyntaxNode is one element of a stack of enclosing syntax nodes in
// a "what" query.
type SyntaxNode struct {
	Description string `json:"desc"`  // description of syntax tree
	Start       int    `json:"start"` // start byte offset, 0-based
	End         int    `json:"end"`   // end byte offset
}

// A What is the result of the "what" query, which quickly identifies
// the selection, parsing only a single file.  It is intended for use
// in low-latency GUIs.
type What struct {
	Enclosing  []SyntaxNode `json:"enclosing"`            // enclosing nodes of syntax tree
	Modes      []string     `json:"modes"`                // query modes enabled for this selection.
	SrcDir     string       `json:"srcdir,omitempty"`     // $GOROOT src directory containing queried package
	ImportPath string       `json:"importpath,omitempty"` // import path of queried package
}

// A PointsToLabel describes a pointer analysis label.
//
// A "label" is an object that may be pointed to by a pointer, map,
// channel, 'func', slice or interface.  Labels include:
//    - functions
//    - globals
//    - arrays created by literals (e.g. []byte("foo")) and conversions ([]byte(s))
//    - stack- and heap-allocated variables (including composite literals)
//    - arrays allocated by append()
//    - channels, maps and arrays created by make()
//    - and their subelements, e.g. "alloc.y[*].z"
//
type PointsToLabel struct {
	Pos  string `json:"pos"`  // location of syntax that allocated the object
	Desc string `json:"desc"` // description of the label
}

// A PointsTo is one element of the result of a 'pointsto' query on an
// expression.  It describes a single pointer: its type and the set of
// "labels" it points to.
//
// If the pointer is of interface type, it will have one PTS entry
// describing each concrete type that it may contain.  For each
// concrete type that is a pointer, the PTS entry describes the labels
// it may point to.  The same is true for reflect.Values, except the
// dynamic types needn't be concrete.
//
type PointsTo struct {
	Type    string          `json:"type"`              // (concrete) type of the pointer
	NamePos string          `json:"namepos,omitempty"` // location of type defn, if Named
	Labels  []PointsToLabel `json:"labels,omitempty"`  // pointed-to objects
}

// A DescribeValue is the additional result of a 'describe' query
// if the selection indicates a value or expression.
type DescribeValue struct {
	Type   string `json:"type"`             // type of the expression
	Value  string `json:"value,omitempty"`  // value of the expression, if constant
	ObjPos string `json:"objpos,omitempty"` // location of the definition, if an Ident
}

type DescribeMethod struct {
	Name string `json:"name"` // method name, as defined by types.Selection.String()
	Pos  string `json:"pos"`  // location of the method's definition
}

// A DescribeType is the additional result of a 'describe' query
// if the selection indicates a type.
type DescribeType struct {
	Type    string           `json:"type"`              // the string form of the type
	NamePos string           `json:"namepos,omitempty"` // location of definition of type, if named
	NameDef string           `json:"namedef,omitempty"` // underlying definition of type, if named
	Methods []DescribeMethod `json:"methods,omitempty"` // methods of the type
}

type DescribeMember struct {
	Name    string           `json:"name"`              // name of member
	Type    string           `json:"type,omitempty"`    // type of member (underlying, if 'type')
	Value   string           `json:"value,omitempty"`   // value of member (if 'const')
	Pos     string           `json:"pos"`               // location of definition of member
	Kind    string           `json:"kind"`              // one of {var,const,func,type}
	Methods []DescribeMethod `json:"methods,omitempty"` // methods (if member is a type)
}

// A DescribePackage is the additional result of a 'describe' if
// the selection indicates a package.
type DescribePackage struct {
	Path    string            `json:"path"`              // import path of the package
	Members []*DescribeMember `json:"members,omitempty"` // accessible members of the package
}

// A Describe is the result of a 'describe' query.
// It may contain an element describing the selected semantic entity
// in detail.
type Describe struct {
	Desc   string `json:"desc"`             // description of the selected syntax node
	Pos    string `json:"pos"`              // location of the selected syntax node
	Detail string `json:"detail,omitempty"` // one of {package, type, value}, or "".

	// At most one of the following fields is populated:
	// the one specified by 'detail'.
	Package *DescribePackage `json:"package,omitempty"`
	Type    *DescribeType    `json:"type,omitempty"`
	Value   *DescribeValue   `json:"value,omitempty"`
}

// A WhichErrs is the result of a 'whicherrs' query.
// It contains the position of the queried error and the possible globals,
// constants, and types it may point to.
type WhichErrs struct {
	ErrPos    string          `json:"errpos,omitempty"`    // location of queried error
	Globals   []string        `json:"globals,omitempty"`   // locations of globals
	Constants []string        `json:"constants,omitempty"` // locations of constants
	Types     []WhichErrsType `json:"types,omitempty"`     // Types
}

type WhichErrsType struct {
	Type     string `json:"type,omitempty"`
	Position string `json:"position,omitempty"`
}

// A Result is the common result of any oracle query.
// It contains a query-specific result element.
//
// TODO(adonovan): perhaps include other info such as: analysis scope,
// raw query position, stack of ast nodes, query package, etc.
type Result struct {
	Mode string `json:"mode"` // mode of the query

	// Exactly one of the following fields is populated:
	// the one specified by 'mode'.
	Callees    *Callees    `json:"callees,omitempty"`
	Callers    []Caller    `json:"callers,omitempty"`
	Callstack  *CallStack  `json:"callstack,omitempty"`
	Definition *Definition `json:"definition,omitempty"`
	Describe   *Describe   `json:"describe,omitempty"`
	Freevars   []*FreeVar  `json:"freevars,omitempty"`
	Implements *Implements `json:"implements,omitempty"`
	Peers      *Peers      `json:"peers,omitempty"`
	PointsTo   []PointsTo  `json:"pointsto,omitempty"`
	Referrers  *Referrers  `json:"referrers,omitempty"`
	What       *What       `json:"what,omitempty"`
	WhichErrs  *WhichErrs  `json:"whicherrs,omitempty"`
}
           go/src/golang.org/x/tools/oracle/testdata/                                                          0040755 0000000 0000000 00000000000 13101127476 017170  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/                                                      0040755 0000000 0000000 00000000000 13101127476 017757  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/calls/                                                0040755 0000000 0000000 00000000000 13101127476 021055  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/calls/main.go                                         0100644 0000000 0000000 00000005433 13101127476 022332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import (
	"fmt"
)

// Tests of call-graph queries.
// See go.tools/oracle/oracle_test.go for explanation.
// See calls.golden for expected query results.

func A(x *int) { // @pointsto pointsto-A-x "x"
	// @callers callers-A "^"
	// @callstack callstack-A "^"
}

func B(x *int) { // @pointsto pointsto-B-x "x"
	// @callers callers-B "^"
}

func foo() {
}

// apply is not (yet) treated context-sensitively.
func apply(f func(x *int), x *int) {
	f(x) // @callees callees-apply "f"
	// @callers callers-apply "^"
}

// store *is* treated context-sensitively,
// so the points-to sets for pc, pd are precise.
func store(ptr **int, value *int) {
	*ptr = value
	// @callers callers-store "^"
}

func call(f func() *int) {
	// Result points to anon function.
	f() // @pointsto pointsto-result-f "f"

	// Target of call is anon function.
	f() // @callees callees-main.call-f "f"

	// @callers callers-main.call "^"
}

func main() {
	var a, b int
	go apply(A, &a) // @callees callees-main-apply1 "app"
	defer apply(B, &b)

	var c, d int
	var pc, pd *int // @pointsto pointsto-pc "pc"
	store(&pc, &c)
	store(&pd, &d)
	_ = pd // @pointsto pointsto-pd "pd"

	call(func() *int {
		// We are called twice from main.call
		// @callers callers-main.anon "^"
		return &a
	})

	// Errors
	_ = "no function call here"   // @callees callees-err-no-call "no"
	print("builtin")              // @callees callees-err-builtin "builtin"
	_ = string("type conversion") // @callees callees-err-conversion "str"
	call(nil)                     // @callees callees-err-bad-selection "call\\(nil"
	if false {
		main() // @callees callees-err-deadcode1 "main"
	}
	var nilFunc func()
	nilFunc() // @callees callees-err-nil-func "nilFunc"
	var i interface {
		f()
	}
	i.f() // @callees callees-err-nil-interface "i.f"

	i = new(myint)
	i.f() // @callees callees-not-a-wrapper "f"

	// statically dispatched calls. Handled specially by callees, so test that they work.
	foo()         // @callees callees-static-call "foo"
	fmt.Println() // @callees callees-qualified-call "Println"
	m := new(method)
	m.f() // @callees callees-static-method-call "f"
}

type myint int

func (myint) f() {
	// @callers callers-not-a-wrapper "^"
}

type method int

func (method) f() {
}

var dynamic = func() {}

func deadcode() {
	main() // @callees callees-err-deadcode2 "main"
	// @callers callers-err-deadcode "^"
	// @callstack callstack-err-deadcode "^"

	// Within dead code, dynamic calls have no callees.
	dynamic() // @callees callees-err-deadcode3 "dynamic"
}

// This code belongs to init.
var global = 123 // @callers callers-global "global"

// The package initializer may be called by other packages' inits, or
// in this case, the root of the callgraph.  The source-level init functions
// are in turn called by it.
func init() {
	// @callstack callstack-init "^"
}
                                                                                                                                                                                                                                     go/src/golang.org/x/tools/oracle/testdata/src/calls/main.golden                                     0100644 0000000 0000000 00000006371 13101127476 023177  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @pointsto pointsto-A-x --------
this *int may point to these objects:
	a
	b

-------- @callstack callstack-A --------
Found a call path from root to main.A
main.A
dynamic function call from main.apply
concurrent static function call from main.main

-------- @pointsto pointsto-B-x --------
this *int may point to these objects:
	a
	b

-------- @callers callers-B --------
main.B is called from these 1 sites:
	dynamic function call from main.apply

-------- @callees callees-apply --------
this dynamic function call dispatches to:
	main.A
	main.B

-------- @callers callers-apply --------
main.apply is called from these 2 sites:
	concurrent static function call from main.main
	deferred static function call from main.main

-------- @callers callers-store --------
main.store is called from these 2 sites:
	static function call from main.main
	static function call from main.main

-------- @pointsto pointsto-result-f --------
this func() *int may point to these objects:
	main.main$1

-------- @callees callees-main.call-f --------
this dynamic function call dispatches to:
	main.main$1

-------- @callers callers-main.call --------
main.call is called from these 2 sites:
	static function call from main.main
	static function call from main.main

-------- @callees callees-main-apply1 --------
this static function call dispatches to:
	main.apply

-------- @pointsto pointsto-pc --------
this *int may point to these objects:
	c

-------- @pointsto pointsto-pd --------
this *int may point to these objects:
	d

-------- @callees callees-err-no-call --------

Error: there is no function call here
-------- @callees callees-err-builtin --------

Error: this is a call to the built-in 'print' operator
-------- @callees callees-err-conversion --------

Error: this is a type conversion, not a function call
-------- @callees callees-err-bad-selection --------

Error: ambiguous selection within function call (or conversion)
-------- @callees callees-err-deadcode1 --------
this static function call dispatches to:
	main.main

-------- @callees callees-err-nil-func --------
dynamic function call on nil value

-------- @callees callees-err-nil-interface --------
dynamic method call on nil value

-------- @callees callees-not-a-wrapper --------
this dynamic method call dispatches to:
	(main.myint).f

-------- @callees callees-static-call --------
this static function call dispatches to:
	main.foo

-------- @callees callees-qualified-call --------
this static function call dispatches to:
	fmt.Println

-------- @callees callees-static-method-call --------
this static function call dispatches to:
	(main.method).f

-------- @callers callers-not-a-wrapper --------
(main.myint).f is called from these 1 sites:
	dynamic method call from main.main

-------- @callees callees-err-deadcode2 --------
this static function call dispatches to:
	main.main

-------- @callstack callstack-err-deadcode --------
main.deadcode is unreachable in this analysis scope

-------- @callees callees-err-deadcode3 --------

Error: this call site is unreachable in this analysis
-------- @callers callers-global --------
main.init is called from these 1 sites:
the root of the call graph

-------- @callstack callstack-init --------
Found a call path from root to main.init#1
main.init#1
static function call from main.init

                                                                                                                                                                                                                                                                       go/src/golang.org/x/tools/oracle/testdata/src/calls-json/                                           0040755 0000000 0000000 00000000000 13101127476 022024  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/calls-json/main.go                                    0100644 0000000 0000000 00000000521 13101127476 023272  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of call-graph queries, -format=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See calls-json.golden for expected query results.

func call(f func()) {
	f() // @callees @callees-f "f"
}

func main() {
	call(func() {
		// @callers callers-main.anon "^"
		// @callstack callstack-main.anon "^"
	})
}
                                                                                                                                                                               go/src/golang.org/x/tools/oracle/testdata/src/calls-json/main.golden                                0100644 0000000 0000000 00000001300 13101127476 024131  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @callees @callees-f --------
{
	"mode": "callees",
	"callees": {
		"pos": "testdata/src/calls-json/main.go:8:3",
		"desc": "dynamic function call",
		"callees": [
			{
				"name": "main.main$1",
				"pos": "testdata/src/calls-json/main.go:12:7"
			}
		]
	}
}
-------- @callstack callstack-main.anon --------
{
	"mode": "callstack",
	"callstack": {
		"pos": "testdata/src/calls-json/main.go:12:7",
		"target": "main.main$1",
		"callers": [
			{
				"pos": "testdata/src/calls-json/main.go:8:3",
				"desc": "dynamic function call",
				"caller": "main.call"
			},
			{
				"pos": "testdata/src/calls-json/main.go:12:6",
				"desc": "static function call",
				"caller": "main.main"
			}
		]
	}
}
                                                                                                                                                                                                                                                                                                                                go/src/golang.org/x/tools/oracle/testdata/src/describe/                                             0040755 0000000 0000000 00000000000 13101127476 021537  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/describe/main.go                                      0100644 0000000 0000000 00000005052 13101127476 023011  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package describe // @describe pkgdecl "describe"

// Tests of 'describe' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See describe.golden for expected query results.

// TODO(adonovan): more coverage of the (extensive) logic.

type cake float64 // @describe type-ref-builtin "float64"

const c = iota // @describe const-ref-iota "iota"

const pi = 3.141     // @describe const-def-pi "pi"
const pie = cake(pi) // @describe const-def-pie "pie"
const _ = pi         // @describe const-ref-pi "pi"

var global = new(string) // NB: ssa.Global is indirect, i.e. **string

func main() { // @describe func-def-main "main"
	// func objects
	_ = main   // @describe func-ref-main "main"
	_ = (*C).f // @describe func-ref-*C.f "..C..f"
	_ = D.f    // @describe func-ref-D.f "D.f"
	_ = I.f    // @describe func-ref-I.f "I.f"
	var d D    // @describe type-D "D"
	var i I    // @describe type-I "I"
	_ = d.f    // @describe func-ref-d.f "d.f"
	_ = i.f    // @describe func-ref-i.f "i.f"

	// var objects
	anon := func() {
		_ = d // @describe ref-lexical-d "d"
	}
	_ = anon   // @describe ref-anon "anon"
	_ = global // @describe ref-global "global"

	// SSA affords some local flow sensitivity.
	var a, b int
	var x = &a // @describe var-def-x-1 "x"
	_ = x      // @describe var-ref-x-1 "x"
	x = &b     // @describe var-def-x-2 "x"
	_ = x      // @describe var-ref-x-2 "x"

	i = new(C) // @describe var-ref-i-C "i"
	if i != nil {
		i = D{} // @describe var-ref-i-D "i"
	}
	print(i) // @describe var-ref-i "\\bi\\b"

	// const objects
	const localpi = 3.141     // @describe const-local-pi "localpi"
	const localpie = cake(pi) // @describe const-local-pie "localpie"
	const _ = localpi         // @describe const-ref-localpi "localpi"

	// type objects
	type T int      // @describe type-def-T "T"
	var three T = 3 // @describe type-ref-T "T"
	_ = three

	print(1 + 2*3)        // @describe const-expr " 2.3"
	print(real(1+2i) - 3) // @describe const-expr2 "real.*3"

	m := map[string]*int{"a": &a}
	mapval, _ := m["a"] // @describe map-lookup,ok "m..a.."
	_ = mapval          // @describe mapval "mapval"
	_ = m               // @describe m "m"

	defer main() // @describe defer-stmt "defer"
	go main()    // @describe go-stmt "go"

	panic(3) // @describe builtin-ref-panic "panic"

	var a2 int // @describe var-decl-stmt "var a2 int"
	_ = a2
	var _ int // @describe var-decl-stmt2 "var _ int"
	var _ int // @describe var-def-blank "_"
}

type I interface { // @describe def-iface-I "I"
	f() // @describe def-imethod-I.f "f"
}

type C int
type D struct{}

func (c *C) f() {}
func (d D) f()  {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      go/src/golang.org/x/tools/oracle/testdata/src/describe/main.golden                                  0100644 0000000 0000000 00000007547 13101127476 023667  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @describe pkgdecl --------
definition of package "describe"
	type  C      int
		method (*C) f()
	type  D      struct{}
		method (D) f()
	type  I      interface{f()}
		method (I) f()
	const c      untyped int = 0
	type  cake   float64
	var   global *string
	func  main   func()
	const pi     untyped float = 3141/1000
	const pie    cake = 1768225803696341/562949953421312

-------- @describe type-ref-builtin --------
reference to built-in type float64

-------- @describe const-ref-iota --------
reference to const iota untyped int of constant value 0

-------- @describe const-def-pi --------
definition of const pi untyped float

-------- @describe const-def-pie --------
definition of const pie cake

-------- @describe const-ref-pi --------
reference to const pi untyped float of constant value 3141/1000
defined here

-------- @describe func-def-main --------
definition of func main()

-------- @describe func-ref-main --------
reference to func main()
defined here

-------- @describe func-ref-*C.f --------
reference to method func (*C).f()
defined here

-------- @describe func-ref-D.f --------
reference to method func (D).f()
defined here

-------- @describe func-ref-I.f --------
reference to interface method func (I).f()
defined here

-------- @describe type-D --------
reference to type D (size 0, align 1)
defined as struct{}
Method set:
	method (D) f()

-------- @describe type-I --------
reference to type I (size 16, align 8)
defined as interface{f()}
Method set:
	method (I) f()

-------- @describe func-ref-d.f --------
reference to method func (D).f()
defined here

-------- @describe func-ref-i.f --------
reference to interface method func (I).f()
defined here

-------- @describe ref-lexical-d --------
reference to var d D
defined here

-------- @describe ref-anon --------
reference to var anon func()
defined here

-------- @describe ref-global --------
reference to var global *string
defined here

-------- @describe var-def-x-1 --------
definition of var x *int

-------- @describe var-ref-x-1 --------
reference to var x *int
defined here

-------- @describe var-def-x-2 --------
reference to var x *int
defined here

-------- @describe var-ref-x-2 --------
reference to var x *int
defined here

-------- @describe var-ref-i-C --------
reference to var i I
defined here

-------- @describe var-ref-i-D --------
reference to var i I
defined here

-------- @describe var-ref-i --------
reference to var i I
defined here

-------- @describe const-local-pi --------
definition of const localpi untyped float

-------- @describe const-local-pie --------
definition of const localpie cake

-------- @describe const-ref-localpi --------
reference to const localpi untyped float of constant value 3141/1000
defined here

-------- @describe type-def-T --------
definition of type T (size 8, align 8)
No methods.

-------- @describe type-ref-T --------
reference to type T (size 8, align 8)
defined as int
No methods.

-------- @describe const-expr --------
binary * operation of constant value 6

-------- @describe const-expr2 --------
binary - operation of constant value -2

-------- @describe map-lookup,ok --------
index expression of type (*int, bool)

-------- @describe mapval --------
reference to var mapval *int
defined here

-------- @describe m --------
reference to var m map[string]*int
defined here

-------- @describe defer-stmt --------
defer statement

-------- @describe go-stmt --------
go statement

-------- @describe builtin-ref-panic --------
function call (or conversion) of type ()

-------- @describe var-decl-stmt --------
definition of var a2 int

-------- @describe var-decl-stmt2 --------
definition of var _ int

-------- @describe var-def-blank --------
definition of var _ int

-------- @describe def-iface-I --------
definition of type I (size 16, align 8)
Method set:
	method (I) f()

-------- @describe def-imethod-I.f --------
definition of interface method func (I).f()

                                                                                                                                                         go/src/golang.org/x/tools/oracle/testdata/src/describe-json/                                        0040755 0000000 0000000 00000000000 13101127476 022506  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/describe-json/main.go                                 0100644 0000000 0000000 00000001050 13101127476 023752  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package describe // @describe pkgdecl "describe"

// Tests of 'describe' query, -format=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See describe-json.golden for expected query results.

func main() {
	var s struct{ x [3]int }
	p := &s.x[0] // @describe desc-val-p "p"
	_ = p

	var i I = C(0)
	if i == nil {
		i = new(D)
	}
	print(i) // @describe desc-val-i "\\bi\\b"

	go main() // @describe desc-stmt "go"
}

type I interface {
	f()
}

type C int // @describe desc-type-C "C"
type D struct{}

func (c C) f()  {}
func (d *D) f() {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/describe-json/main.golden                             0100644 0000000 0000000 00000004452 13101127476 024626  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @describe pkgdecl --------
{
	"mode": "describe",
	"describe": {
		"desc": "definition of package \"describe-json\"",
		"pos": "testdata/src/describe-json/main.go:1:9",
		"detail": "package",
		"package": {
			"path": "describe-json",
			"members": [
				{
					"name": "C",
					"type": "int",
					"pos": "testdata/src/describe-json/main.go:25:6",
					"kind": "type",
					"methods": [
						{
							"name": "method (C) f()",
							"pos": "testdata/src/describe-json/main.go:28:12"
						}
					]
				},
				{
					"name": "D",
					"type": "struct{}",
					"pos": "testdata/src/describe-json/main.go:26:6",
					"kind": "type",
					"methods": [
						{
							"name": "method (*D) f()",
							"pos": "testdata/src/describe-json/main.go:29:13"
						}
					]
				},
				{
					"name": "I",
					"type": "interface{f()}",
					"pos": "testdata/src/describe-json/main.go:21:6",
					"kind": "type",
					"methods": [
						{
							"name": "method (I) f()",
							"pos": "testdata/src/describe-json/main.go:22:2"
						}
					]
				},
				{
					"name": "main",
					"type": "func()",
					"pos": "testdata/src/describe-json/main.go:7:6",
					"kind": "func"
				}
			]
		}
	}
}
-------- @describe desc-val-p --------
{
	"mode": "describe",
	"describe": {
		"desc": "identifier",
		"pos": "testdata/src/describe-json/main.go:9:2",
		"detail": "value",
		"value": {
			"type": "*int",
			"objpos": "testdata/src/describe-json/main.go:9:2"
		}
	}
}
-------- @describe desc-val-i --------
{
	"mode": "describe",
	"describe": {
		"desc": "identifier",
		"pos": "testdata/src/describe-json/main.go:16:8",
		"detail": "value",
		"value": {
			"type": "I",
			"objpos": "testdata/src/describe-json/main.go:12:6"
		}
	}
}
-------- @describe desc-stmt --------
{
	"mode": "describe",
	"describe": {
		"desc": "go statement",
		"pos": "testdata/src/describe-json/main.go:18:2",
		"detail": "unknown"
	}
}
-------- @describe desc-type-C --------
{
	"mode": "describe",
	"describe": {
		"desc": "definition of type C (size 8, align 8)",
		"pos": "testdata/src/describe-json/main.go:25:6",
		"detail": "type",
		"type": {
			"type": "C",
			"namepos": "testdata/src/describe-json/main.go:25:6",
			"namedef": "int",
			"methods": [
				{
					"name": "method (C) f()",
					"pos": "testdata/src/describe-json/main.go:28:12"
				}
			]
		}
	}
}
                                                                                                                                                                                                                      go/src/golang.org/x/tools/oracle/testdata/src/freevars/                                             0040755 0000000 0000000 00000000000 13101127476 021574  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/freevars/main.go                                      0100644 0000000 0000000 00000001362 13101127476 023046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'freevars' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See freevars.golden for expected query results.

// TODO(adonovan): it's hard to test this query in a single line of gofmt'd code.

type T struct {
	a, b int
}

type S struct {
	x int
	t T
}

func f(int) {}

func main() {
	type C int
	x := 1
	const exp = 6
	if y := 2; x+y+int(C(3)) != exp { // @freevars fv1 "if.*{"
		panic("expected 6")
	}

	var s S

	for x, y := range "foo" {
		println(s.x + s.t.a + s.t.b + x + int(y)) // @freevars fv2 "print.*y."
	}

	f(x) // @freevars fv3 "f.x."

	// TODO(adonovan): enable when go/types supports labels.
loop: // #@freevars fv-def-label "loop:"
	for {
		break loop // #@freevars fv-ref-label "break loop"
	}
}
                                                                                                                                                                                                                                                                              go/src/golang.org/x/tools/oracle/testdata/src/freevars/main.golden                                  0100644 0000000 0000000 00000000377 13101127476 023716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @freevars fv1 --------
Free identifiers:
type C
const exp int
var x int

-------- @freevars fv2 --------
Free identifiers:
var s.t.a int
var s.t.b int
var s.x int
var x int
var y rune

-------- @freevars fv3 --------
Free identifiers:
var x int

                                                                                                                                                                                                                                                                 go/src/golang.org/x/tools/oracle/testdata/src/implements/                                           0040755 0000000 0000000 00000000000 13101127476 022134  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/implements/main.go                                    0100644 0000000 0000000 00000001456 13101127476 023412  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'implements' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See implements.golden for expected query results.

import _ "lib"

func main() {
}

type E interface{} // @implements E "E"

type F interface { // @implements F "F"
	f()
}

type FG interface { // @implements FG "FG"
	f()
	g() []int // @implements slice "..int"
}

type C int // @implements C "C"
type D struct{}

func (c *C) f() {} // @implements starC ".C"
func (d D) f()  {} // @implements D "D"

func (d *D) g() []int { return nil } // @implements starD ".D"

type sorter []int // @implements sorter "sorter"

func (sorter) Len() int           { return 0 }
func (sorter) Less(i, j int) bool { return false }
func (sorter) Swap(i, j int)      {}

type I interface { // @implements I "I"
	Method(*int) *int
}
                                                                                                                                                                                                                  go/src/golang.org/x/tools/oracle/testdata/src/implements/main.golden                                0100644 0000000 0000000 00000001542 13101127476 024251  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @implements E --------
empty interface type E

-------- @implements F --------
interface type F
	is implemented by pointer type *C
	is implemented by struct type D
	is implemented by interface type FG

-------- @implements FG --------
interface type FG
	is implemented by pointer type *D
	implements F

-------- @implements slice --------
slice type []int implements only interface{}

-------- @implements C --------
pointer type *C
	implements F

-------- @implements starC --------
pointer type *C
	implements F

-------- @implements D --------
struct type D
	implements F
pointer type *D
	implements FG

-------- @implements starD --------
pointer type *D
	implements F
	implements FG

-------- @implements sorter --------
slice type sorter
	implements lib.Sorter

-------- @implements I --------
interface type I
	is implemented by basic type lib.Type

                                                                                                                                                              go/src/golang.org/x/tools/oracle/testdata/src/implements-json/                                      0040755 0000000 0000000 00000000000 13101127476 023103  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/implements-json/main.go                               0100644 0000000 0000000 00000001064 13101127476 024354  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'implements' query, -output=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See implements.golden for expected query results.

func main() {
}

type E interface{} // @implements E "E"

type F interface { // @implements F "F"
	f()
}

type FG interface { // @implements FG "FG"
	f()
	g() []int // @implements slice "..int"
}

type C int // @implements C "C"
type D struct{}

func (c *C) f() {} // @implements starC ".C"
func (d D) f()  {} // @implements D "D"

func (d *D) g() []int { return nil } // @implements starD ".D"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            go/src/golang.org/x/tools/oracle/testdata/src/implements-json/main.golden                           0100644 0000000 0000000 00000006011 13101127476 025214  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @implements E --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-json.E",
			"pos": "testdata/src/implements-json/main.go:10:6",
			"kind": "interface"
		}
	}
}
-------- @implements F --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-json.F",
			"pos": "testdata/src/implements-json/main.go:12:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "*implements-json.C",
				"pos": "testdata/src/implements-json/main.go:21:6",
				"kind": "pointer"
			},
			{
				"name": "implements-json.D",
				"pos": "testdata/src/implements-json/main.go:22:6",
				"kind": "struct"
			},
			{
				"name": "implements-json.FG",
				"pos": "testdata/src/implements-json/main.go:16:6",
				"kind": "interface"
			}
		]
	}
}
-------- @implements FG --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-json.FG",
			"pos": "testdata/src/implements-json/main.go:16:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "*implements-json.D",
				"pos": "testdata/src/implements-json/main.go:22:6",
				"kind": "pointer"
			}
		],
		"from": [
			{
				"name": "implements-json.F",
				"pos": "testdata/src/implements-json/main.go:12:6",
				"kind": "interface"
			}
		]
	}
}
-------- @implements slice --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "[]int",
			"pos": "-",
			"kind": "slice"
		}
	}
}
-------- @implements C --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-json.C",
			"pos": "testdata/src/implements-json/main.go:21:6",
			"kind": "basic"
		},
		"fromptr": [
			{
				"name": "implements-json.F",
				"pos": "testdata/src/implements-json/main.go:12:6",
				"kind": "interface"
			}
		]
	}
}
-------- @implements starC --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "*implements-json.C",
			"pos": "testdata/src/implements-json/main.go:21:6",
			"kind": "pointer"
		},
		"from": [
			{
				"name": "implements-json.F",
				"pos": "testdata/src/implements-json/main.go:12:6",
				"kind": "interface"
			}
		]
	}
}
-------- @implements D --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-json.D",
			"pos": "testdata/src/implements-json/main.go:22:6",
			"kind": "struct"
		},
		"from": [
			{
				"name": "implements-json.F",
				"pos": "testdata/src/implements-json/main.go:12:6",
				"kind": "interface"
			}
		],
		"fromptr": [
			{
				"name": "implements-json.FG",
				"pos": "testdata/src/implements-json/main.go:16:6",
				"kind": "interface"
			}
		]
	}
}
-------- @implements starD --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "*implements-json.D",
			"pos": "testdata/src/implements-json/main.go:22:6",
			"kind": "pointer"
		},
		"from": [
			{
				"name": "implements-json.F",
				"pos": "testdata/src/implements-json/main.go:12:6",
				"kind": "interface"
			},
			{
				"name": "implements-json.FG",
				"pos": "testdata/src/implements-json/main.go:16:6",
				"kind": "interface"
			}
		]
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       go/src/golang.org/x/tools/oracle/testdata/src/implements-methods/                                   0040755 0000000 0000000 00000000000 13101127476 023575  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/implements-methods/main.go                            0100644 0000000 0000000 00000001423 13101127476 025045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'implements' query applied to methods.
// See go.tools/oracle/oracle_test.go for explanation.
// See implements-methods.golden for expected query results.

import _ "lib"

func main() {
}

type F interface {
	f() // @implements F.f "f"
}

type FG interface {
	f()       // @implements FG.f "f"
	g() []int // @implements FG.g "g"
}

type C int
type D struct{}

func (c *C) f() {} // @implements *C.f "f"
func (d D) f()  {} // @implements D.f "f"

func (d *D) g() []int { return nil } // @implements *D.g "g"

type sorter []int

func (sorter) Len() int           { return 0 } // @implements Len "Len"
func (sorter) Less(i, j int) bool { return false }
func (sorter) Swap(i, j int)      {}

type I interface {
	Method(*int) *int // @implements I.Method "Method"
}
                                                                                                                                                                                                                                             go/src/golang.org/x/tools/oracle/testdata/src/implements-methods/main.golden                        0100644 0000000 0000000 00000001702 13101127476 025710  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @implements F.f --------
abstract method func (F).f()
	is implemented by method (*C).f
	is implemented by method (D).f
	is implemented by method (FG).f

-------- @implements FG.f --------
abstract method func (FG).f()
	is implemented by method (*D).f
	implements method (F).f

-------- @implements FG.g --------
abstract method func (FG).g() []int
	is implemented by method (*D).g

-------- @implements *C.f --------
concrete method func (*C).f()
	implements method (F).f

-------- @implements D.f --------
concrete method func (D).f()
	implements method (F).f
concrete method func (D).f()
	implements method (FG).f

-------- @implements *D.g --------
concrete method func (*D).g() []int
	implements method (FG).g

-------- @implements Len --------
concrete method func (sorter).Len() int
	implements method (lib.Sorter).Len

-------- @implements I.Method --------
abstract method func (I).Method(*int) *int
	is implemented by method (lib.Type).Method

                                                              go/src/golang.org/x/tools/oracle/testdata/src/implements-methods-json/                              0040755 0000000 0000000 00000000000 13101127476 024544  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/implements-methods-json/main.go                       0100644 0000000 0000000 00000001441 13101127476 026014  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'implements' query applied to methods, -output=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See implements-methods.golden for expected query results.

import _ "lib"

func main() {
}

type F interface {
	f() // @implements F.f "f"
}

type FG interface {
	f()       // @implements FG.f "f"
	g() []int // @implements FG.g "g"
}

type C int
type D struct{}

func (c *C) f() {} // @implements *C.f "f"
func (d D) f()  {} // @implements D.f "f"

func (d *D) g() []int { return nil } // @implements *D.g "g"

type sorter []int

func (sorter) Len() int           { return 0 } // @implements Len "Len"
func (sorter) Less(i, j int) bool { return false }
func (sorter) Swap(i, j int)      {}

type I interface {
	Method(*int) *int // @implements I.Method "Method"
}
                                                                                                                                                                                                                               go/src/golang.org/x/tools/oracle/testdata/src/implements-methods-json/main.golden                   0100644 0000000 0000000 00000014311 13101127476 026657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @implements F.f --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.F",
			"pos": "testdata/src/implements-methods-json/main.go:12:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "*implements-methods-json.C",
				"pos": "testdata/src/implements-methods-json/main.go:21:6",
				"kind": "pointer"
			},
			{
				"name": "implements-methods-json.D",
				"pos": "testdata/src/implements-methods-json/main.go:22:6",
				"kind": "struct"
			},
			{
				"name": "implements-methods-json.FG",
				"pos": "testdata/src/implements-methods-json/main.go:16:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (F).f()",
			"pos": "testdata/src/implements-methods-json/main.go:13:2"
		},
		"to_method": [
			{
				"name": "method (*C) f()",
				"pos": "testdata/src/implements-methods-json/main.go:24:13"
			},
			{
				"name": "method (D) f()",
				"pos": "testdata/src/implements-methods-json/main.go:25:12"
			},
			{
				"name": "method (FG) f()",
				"pos": "testdata/src/implements-methods-json/main.go:17:2"
			}
		]
	}
}
-------- @implements FG.f --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.FG",
			"pos": "testdata/src/implements-methods-json/main.go:16:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "*implements-methods-json.D",
				"pos": "testdata/src/implements-methods-json/main.go:22:6",
				"kind": "pointer"
			}
		],
		"from": [
			{
				"name": "implements-methods-json.F",
				"pos": "testdata/src/implements-methods-json/main.go:12:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (FG).f()",
			"pos": "testdata/src/implements-methods-json/main.go:17:2"
		},
		"to_method": [
			{
				"name": "method (*D) f()",
				"pos": "testdata/src/implements-methods-json/main.go:25:12"
			}
		],
		"from_method": [
			{
				"name": "method (F) f()",
				"pos": "testdata/src/implements-methods-json/main.go:13:2"
			}
		]
	}
}
-------- @implements FG.g --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.FG",
			"pos": "testdata/src/implements-methods-json/main.go:16:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "*implements-methods-json.D",
				"pos": "testdata/src/implements-methods-json/main.go:22:6",
				"kind": "pointer"
			}
		],
		"from": [
			{
				"name": "implements-methods-json.F",
				"pos": "testdata/src/implements-methods-json/main.go:12:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (FG).g() []int",
			"pos": "testdata/src/implements-methods-json/main.go:18:2"
		},
		"to_method": [
			{
				"name": "method (*D) g() []int",
				"pos": "testdata/src/implements-methods-json/main.go:27:13"
			}
		],
		"from_method": [
			{
				"name": "",
				"pos": ""
			}
		]
	}
}
-------- @implements *C.f --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "*implements-methods-json.C",
			"pos": "testdata/src/implements-methods-json/main.go:21:6",
			"kind": "pointer"
		},
		"from": [
			{
				"name": "implements-methods-json.F",
				"pos": "testdata/src/implements-methods-json/main.go:12:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (*C).f()",
			"pos": "testdata/src/implements-methods-json/main.go:24:13"
		},
		"from_method": [
			{
				"name": "method (F) f()",
				"pos": "testdata/src/implements-methods-json/main.go:13:2"
			}
		]
	}
}
-------- @implements D.f --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.D",
			"pos": "testdata/src/implements-methods-json/main.go:22:6",
			"kind": "struct"
		},
		"from": [
			{
				"name": "implements-methods-json.F",
				"pos": "testdata/src/implements-methods-json/main.go:12:6",
				"kind": "interface"
			}
		],
		"fromptr": [
			{
				"name": "implements-methods-json.FG",
				"pos": "testdata/src/implements-methods-json/main.go:16:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (D).f()",
			"pos": "testdata/src/implements-methods-json/main.go:25:12"
		},
		"from_method": [
			{
				"name": "method (F) f()",
				"pos": "testdata/src/implements-methods-json/main.go:13:2"
			}
		],
		"fromptr_method": [
			{
				"name": "method (FG) f()",
				"pos": "testdata/src/implements-methods-json/main.go:17:2"
			}
		]
	}
}
-------- @implements *D.g --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "*implements-methods-json.D",
			"pos": "testdata/src/implements-methods-json/main.go:22:6",
			"kind": "pointer"
		},
		"from": [
			{
				"name": "implements-methods-json.F",
				"pos": "testdata/src/implements-methods-json/main.go:12:6",
				"kind": "interface"
			},
			{
				"name": "implements-methods-json.FG",
				"pos": "testdata/src/implements-methods-json/main.go:16:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (*D).g() []int",
			"pos": "testdata/src/implements-methods-json/main.go:27:13"
		},
		"from_method": [
			{
				"name": "",
				"pos": ""
			},
			{
				"name": "method (FG) g() []int",
				"pos": "testdata/src/implements-methods-json/main.go:18:2"
			}
		]
	}
}
-------- @implements Len --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.sorter",
			"pos": "testdata/src/implements-methods-json/main.go:29:6",
			"kind": "slice"
		},
		"from": [
			{
				"name": "lib.Sorter",
				"pos": "testdata/src/lib/lib.go:16:6",
				"kind": "interface"
			}
		],
		"method": {
			"name": "func (sorter).Len() int",
			"pos": "testdata/src/implements-methods-json/main.go:31:15"
		},
		"from_method": [
			{
				"name": "method (lib.Sorter) Len() int",
				"pos": "testdata/src/lib/lib.go:17:2"
			}
		]
	}
}
-------- @implements I.Method --------
{
	"mode": "implements",
	"implements": {
		"type": {
			"name": "implements-methods-json.I",
			"pos": "testdata/src/implements-methods-json/main.go:35:6",
			"kind": "interface"
		},
		"to": [
			{
				"name": "lib.Type",
				"pos": "testdata/src/lib/lib.go:3:6",
				"kind": "basic"
			}
		],
		"method": {
			"name": "func (I).Method(*int) *int",
			"pos": "testdata/src/implements-methods-json/main.go:36:2"
		},
		"to_method": [
			{
				"name": "method (lib.Type) Method(x *int) *int",
				"pos": "testdata/src/lib/lib.go:5:13"
			}
		]
	}
}
                                                                                                                                                                                                                                                                                                                       go/src/golang.org/x/tools/oracle/testdata/src/imports/                                              0040755 0000000 0000000 00000000000 13101127476 021454  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/imports/main.go                                       0100644 0000000 0000000 00000001444 13101127476 022727  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import (
	"hash/fnv" // @describe ref-pkg-import2 "fnv"
	"lib"      // @describe ref-pkg-import "lib"
)

// Tests that import another package.  (To make the tests run quickly,
// we avoid using imports in all the other tests.  Remember, each
// query causes parsing and typechecking of the whole program.)
//
// See go.tools/oracle/oracle_test.go for explanation.
// See imports.golden for expected query results.

var a int

func main() {
	const c = lib.Const // @describe ref-const "Const"
	lib.Func()          // @describe ref-func "Func"
	lib.Var++           // @describe ref-var "Var"
	var t lib.Type      // @describe ref-type "Type"
	p := t.Method(&a)   // @describe ref-method "Method"

	print(*p + 1) // @pointsto p "p "

	var _ lib.Type // @describe ref-pkg "lib"

	fnv.New32()
}
                                                                                                                                                                                                                            go/src/golang.org/x/tools/oracle/testdata/src/imports/main.golden                                   0100644 0000000 0000000 00000002643 13101127476 023574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @describe ref-pkg-import2 --------
import of package "hash/fnv"
	func  New32  func() hash.Hash32
	func  New32a func() hash.Hash32
	func  New64  func() hash.Hash64
	func  New64a func() hash.Hash64

-------- @describe ref-pkg-import --------
import of package "lib"
	const Const  untyped int = 3
	func  Func   func()
	type  Sorter interface{...}
		method (Sorter) Len() int
		method (Sorter) Less(i int, j int) bool
		method (Sorter) Swap(i int, j int)
	type  Type   int
		method (Type) Method(x *int) *int
	var   Var    int

-------- @describe ref-const --------
reference to const lib.Const untyped int
defined here

-------- @describe ref-func --------
reference to func lib.Func()
defined here

-------- @describe ref-var --------
reference to var lib.Var int
defined here

-------- @describe ref-type --------
reference to type lib.Type (size 8, align 8)
defined as int
Method set:
	method (lib.Type) Method(x *int) *int

-------- @describe ref-method --------
reference to method func (lib.Type).Method(x *int) *int
defined here

-------- @pointsto p --------
this *int may point to these objects:
	main.a

-------- @describe ref-pkg --------
reference to package "lib"
	const Const  untyped int = 3
	func  Func   func()
	type  Sorter interface{...}
		method (Sorter) Len() int
		method (Sorter) Less(i int, j int) bool
		method (Sorter) Swap(i int, j int)
	type  Type   int
		method (Type) Method(x *int) *int
	var   Var    int

                                                                                             go/src/golang.org/x/tools/oracle/testdata/src/lib/                                                  0040755 0000000 0000000 00000000000 13101127476 020525  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/lib/lib.go                                            0100644 0000000 0000000 00000000304 13101127476 021614  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package lib

type Type int

func (Type) Method(x *int) *int {
	return x
}

func Func() {
}

const Const = 3

var Var = 0

type Sorter interface {
	Len() int
	Less(i, j int) bool
	Swap(i, j int)
}
                                                                                                                                                                                                                                                                                                                            go/src/golang.org/x/tools/oracle/testdata/src/main/                                                 0040755 0000000 0000000 00000000000 13101127476 020703  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/main/multi.go                                         0100644 0000000 0000000 00000000202 13101127476 022353  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

func g(x int) {
}

func f() {
	x := 1
	g(x) // "g(x)" is the selection for multiple queries
}

func main() {
	f()
}
                                                                                                                                                                                                                                                                                                                                                                                              go/src/golang.org/x/tools/oracle/testdata/src/peers/                                                0040755 0000000 0000000 00000000000 13101127476 021075  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/peers/main.go                                         0100644 0000000 0000000 00000002003 13101127476 022340  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of channel 'peers' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See peers.golden for expected query results.

var a2 int

func main() {
	chA := make(chan *int)
	a1 := 1
	chA <- &a1

	chA2 := make(chan *int, 2)
	if a2 == 0 {
		chA = chA2
	}

	chB := make(chan *int)
	b := 3
	chB <- &b

	<-chA  // @pointsto pointsto-chA "chA"
	<-chA2 // @pointsto pointsto-chA2 "chA2"
	<-chB  // @pointsto pointsto-chB "chB"

	select {
	case rA := <-chA: // @peers peer-recv-chA "<-"
		_ = rA // @pointsto pointsto-rA "rA"
	case rB := <-chB: // @peers peer-recv-chB "<-"
		_ = rB // @pointsto pointsto-rB "rB"

	case <-chA: // @peers peer-recv-chA' "<-"

	case chA2 <- &a2: // @peers peer-send-chA' "<-"
	}

	for _ = range chA {
	}

	close(chA) // @peers peer-close-chA "chA"

	chC := make(chan *int)
	(close)(chC) // @peers peer-close-chC "chC"

	close := func(ch chan *int) chan *int {
		return ch
	}

	close(chC) <- &b // @peers peer-send-chC "chC"
	<-close(chC)     // @peers peer-recv-chC "chC"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/oracle/testdata/src/peers/main.golden                                     0100644 0000000 0000000 00000004026 13101127476 023212  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @pointsto pointsto-chA --------
this chan *int may point to these objects:
	makechan
	makechan

-------- @pointsto pointsto-chA2 --------
this chan *int may point to these objects:
	makechan

-------- @pointsto pointsto-chB --------
this chan *int may point to these objects:
	makechan

-------- @peers peer-recv-chA --------
This channel of type chan *int may be:
	allocated here
	allocated here
	sent to, here
	sent to, here
	received from, here
	received from, here
	received from, here
	received from, here
	received from, here
	closed, here

-------- @pointsto pointsto-rA --------
this *int may point to these objects:
	main.a2
	a1

-------- @peers peer-recv-chB --------
This channel of type chan *int may be:
	allocated here
	sent to, here
	received from, here
	received from, here

-------- @pointsto pointsto-rB --------
this *int may point to these objects:
	b

-------- @peers peer-recv-chA' --------
This channel of type chan *int may be:
	allocated here
	allocated here
	sent to, here
	sent to, here
	received from, here
	received from, here
	received from, here
	received from, here
	received from, here
	closed, here

-------- @peers peer-send-chA' --------
This channel of type chan *int may be:
	allocated here
	sent to, here
	received from, here
	received from, here
	received from, here
	received from, here
	received from, here
	closed, here

-------- @peers peer-close-chA --------
This channel of type chan *int may be:
	allocated here
	allocated here
	sent to, here
	sent to, here
	received from, here
	received from, here
	received from, here
	received from, here
	received from, here
	closed, here

-------- @peers peer-close-chC --------
This channel of type chan *int may be:
	allocated here
	sent to, here
	received from, here
	closed, here

-------- @peers peer-send-chC --------
This channel of type chan *int may be:
	allocated here
	sent to, here
	received from, here
	closed, here

-------- @peers peer-recv-chC --------
This channel of type chan *int may be:
	allocated here
	sent to, here
	received from, here
	closed, here

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          go/src/golang.org/x/tools/oracle/testdata/src/peers-json/                                           0040755 0000000 0000000 00000000000 13101127476 022044  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/peers-json/main.go                                    0100644 0000000 0000000 00000000422 13101127476 023312  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of channel 'peers' query, -format=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See peers-json.golden for expected query results.

func main() {
	chA := make(chan *int)
	<-chA
	select {
	case <-chA: // @peers peer-recv-chA "<-"
	}
}
                                                                                                                                                                                                                                              go/src/golang.org/x/tools/oracle/testdata/src/peers-json/main.golden                                0100644 0000000 0000000 00000000471 13101127476 024161  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @peers peer-recv-chA --------
{
	"mode": "peers",
	"peers": {
		"pos": "testdata/src/peers-json/main.go:11:7",
		"type": "chan *int",
		"allocs": [
			"testdata/src/peers-json/main.go:8:13"
		],
		"receives": [
			"testdata/src/peers-json/main.go:9:2",
			"testdata/src/peers-json/main.go:11:7"
		]
	}
}
                                                                                                                                                                                                       go/src/golang.org/x/tools/oracle/testdata/src/pointsto/                                             0040755 0000000 0000000 00000000000 13101127476 021636  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/pointsto/main.go                                      0100644 0000000 0000000 00000003512 13101127476 023107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'pointsto' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See pointsto.golden for expected query results.

const pi = 3.141 // @pointsto const "pi"

var global = new(string) // NB: ssa.Global is indirect, i.e. **string

func main() {
	livecode()

	// func objects
	_ = main   // @pointsto func-ref-main "main"
	_ = (*C).f // @pointsto func-ref-*C.f "..C..f"
	_ = D.f    // @pointsto func-ref-D.f "D.f"
	_ = I.f    // @pointsto func-ref-I.f "I.f"
	var d D
	var i I
	_ = d.f // @pointsto func-ref-d.f "d.f"
	_ = i.f // @pointsto func-ref-i.f "i.f"

	// var objects
	anon := func() {
		_ = d.f // @pointsto ref-lexical-d.f "d.f"
	}
	_ = anon   // @pointsto ref-anon "anon"
	_ = global // @pointsto ref-global "global"

	// SSA affords some local flow sensitivity.
	var a, b int
	var x = &a // @pointsto var-def-x-1 "x"
	_ = x      // @pointsto var-ref-x-1 "x"
	x = &b     // @pointsto var-def-x-2 "x"
	_ = x      // @pointsto var-ref-x-2 "x"

	i = new(C) // @pointsto var-ref-i-C "i"
	if i != nil {
		i = D{} // @pointsto var-ref-i-D "i"
	}
	print(i) // @pointsto var-ref-i "\\bi\\b"

	m := map[string]*int{"a": &a}
	mapval, _ := m["a"] // @pointsto map-lookup,ok "m..a.."
	_ = mapval          // @pointsto mapval "mapval"
	_ = m               // @pointsto m "m"

	if false {
		panic(3) // @pointsto builtin-panic "panic"
	}

	// NB: s.f is addressable per (*ssa.Program).VarValue,
	// but our query concerns the object, not its address.
	s := struct{ f interface{} }{f: make(chan bool)}
	print(s.f) // @pointsto var-ref-s-f "s.f"
}

func livecode() {} // @pointsto func-live "livecode"

func deadcode() { // @pointsto func-dead "deadcode"
	// Pointer analysis can't run on dead code.
	var b = new(int) // @pointsto b "b"
	_ = b
}

type I interface {
	f()
}

type C int
type D struct{}

func (c *C) f() {}
func (d D) f()  {}
                                                                                                                                                                                      go/src/golang.org/x/tools/oracle/testdata/src/pointsto/main.golden                                  0100644 0000000 0000000 00000004533 13101127476 023756  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @pointsto const --------

Error: pointer analysis wants an expression of reference type; got untyped float
-------- @pointsto func-ref-main --------
this func() may point to these objects:
	main.main

-------- @pointsto func-ref-*C.f --------
this func() may point to these objects:
	(*main.C).f

-------- @pointsto func-ref-D.f --------
this func() may point to these objects:
	(main.D).f

-------- @pointsto func-ref-I.f --------

Error: func (main.I).f() is an interface method
-------- @pointsto func-ref-d.f --------
this func() may point to these objects:
	(main.D).f

-------- @pointsto func-ref-i.f --------

Error: func (main.I).f() is an interface method
-------- @pointsto ref-lexical-d.f --------
this func() may point to these objects:
	(main.D).f

-------- @pointsto ref-anon --------
this func() may point to these objects:
	main.main$1

-------- @pointsto ref-global --------
this *string may point to these objects:
	new

-------- @pointsto var-def-x-1 --------
this *int may point to these objects:
	a

-------- @pointsto var-ref-x-1 --------
this *int may point to these objects:
	a

-------- @pointsto var-def-x-2 --------
this *int may point to these objects:
	b

-------- @pointsto var-ref-x-2 --------
this *int may point to these objects:
	b

-------- @pointsto var-ref-i-C --------
this I may contain these dynamic types:
	*C, may point to:
		new

-------- @pointsto var-ref-i-D --------
this I may contain these dynamic types:
	D

-------- @pointsto var-ref-i --------
this I may contain these dynamic types:
	*C, may point to:
		new
	D

-------- @pointsto map-lookup,ok --------

Error: pointer analysis wants an expression of reference type; got (*int, bool)
-------- @pointsto mapval --------
this *int may point to these objects:
	a

-------- @pointsto m --------
this map[string]*int may point to these objects:
	makemap

-------- @pointsto builtin-panic --------

Error: pointer analysis wants an expression of reference type; got ()
-------- @pointsto var-ref-s-f --------
this interface{} may contain these dynamic types:
	chan bool, may point to:
		makechan

-------- @pointsto func-live --------

Error: pointer analysis did not find expression (dead code?)
-------- @pointsto func-dead --------

Error: pointer analysis did not find expression (dead code?)
-------- @pointsto b --------

Error: pointer analysis did not find expression (dead code?)
                                                                                                                                                                     go/src/golang.org/x/tools/oracle/testdata/src/pointsto-json/                                        0040755 0000000 0000000 00000000000 13101127476 022605  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/pointsto-json/main.go                                 0100644 0000000 0000000 00000000672 13101127476 024062  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'pointsto' queries, -format=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See pointsto-json.golden for expected query results.

func main() { //
	var s struct{ x [3]int }
	p := &s.x[0] // @pointsto val-p "p"
	_ = p

	var i I = C(0)
	if i == nil {
		i = new(D)
	}
	print(i) // @pointsto val-i "\\bi\\b"
}

type I interface {
	f()
}

type C int
type D struct{}

func (c C) f()  {}
func (d *D) f() {}
                                                                      go/src/golang.org/x/tools/oracle/testdata/src/pointsto-json/main.golden                             0100644 0000000 0000000 00000001057 13101127476 024723  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @pointsto val-p --------
{
	"mode": "pointsto",
	"pointsto": [
		{
			"type": "*int",
			"labels": [
				{
					"pos": "testdata/src/pointsto-json/main.go:8:6",
					"desc": "s.x[*]"
				}
			]
		}
	]
}
-------- @pointsto val-i --------
{
	"mode": "pointsto",
	"pointsto": [
		{
			"type": "*D",
			"namepos": "testdata/src/pointsto-json/main.go:24:6",
			"labels": [
				{
					"pos": "testdata/src/pointsto-json/main.go:14:10",
					"desc": "new"
				}
			]
		},
		{
			"type": "C",
			"namepos": "testdata/src/pointsto-json/main.go:23:6"
		}
	]
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 go/src/golang.org/x/tools/oracle/testdata/src/referrers/                                            0040755 0000000 0000000 00000000000 13101127476 021756  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/referrers/ext_test.go                                 0100644 0000000 0000000 00000000421 13101127476 024136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main_test

import (
	"lib"
	renamed "referrers" // package has name "main", path "referrers", local name "renamed"
)

func _() {
	// This reference should be found by the ref-method query.
	_ = (lib.Type).Method // ref from external test package
	var _ renamed.T
}
                                                                                                                                                                                                                                               go/src/golang.org/x/tools/oracle/testdata/src/referrers/int_test.go                                 0100644 0000000 0000000 00000000236 13101127476 024134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import "lib"

func _() {
	// This reference should be found by the ref-method query.
	_ = (lib.Type).Method // ref from internal test package
}
                                                                                                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/oracle/testdata/src/referrers/main.go                                     0100644 0000000 0000000 00000001002 13101127476 023217  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main // @referrers package-decl "main"

// Tests of 'referrers' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See referrers.golden for expected query results.

import "lib"

type s struct { // @referrers type " s "
	f int
}

type T int

func main() {
	var v lib.Type = lib.Const // @referrers ref-package "lib"
	_ = v.Method               // @referrers ref-method "Method"
	_ = v.Method
	v++ //@referrers ref-local "v"
	v++

	_ = s{}.f // @referrers ref-field "f"

	var s2 s
	s2.f = 1
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              go/src/golang.org/x/tools/oracle/testdata/src/referrers/main.golden                                 0100644 0000000 0000000 00000002332 13101127476 024071  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @referrers package-decl --------
1 references to package main ("referrers")
	var _ renamed.T

-------- @referrers type --------
2 references to type s struct{f int}
	_ = s{}.f // @referrers ref-field "f"
	var s2 s

-------- @referrers ref-package --------
4 references to package lib
	_ = (lib.Type).Method // ref from external test package
	_ = (lib.Type).Method // ref from internal test package
	var v lib.Type = lib.Const // @referrers ref-package "lib"
	var v lib.Type = lib.Const // @referrers ref-package "lib"

-------- @referrers ref-method --------
7 references to func (lib.Type).Method(x *int) *int
	p := t.Method(&a)   // @describe ref-method "Method"
	_ = v.Method               // @referrers ref-method "Method"
	_ = v.Method
	_ = (lib.Type).Method // ref from external test package
	_ = (lib.Type).Method // ref from internal test package
	_ = v.Method               // @referrers ref-method "Method"
	_ = v.Method

-------- @referrers ref-local --------
4 references to var v lib.Type
	_ = v.Method               // @referrers ref-method "Method"
	_ = v.Method
	v++ //@referrers ref-local "v"
	v++

-------- @referrers ref-field --------
2 references to field f int
	_ = s{}.f // @referrers ref-field "f"
	s2.f = 1

                                                                                                                                                                                                                                                                                                      go/src/golang.org/x/tools/oracle/testdata/src/referrers-json/                                       0040755 0000000 0000000 00000000000 13101127476 022725  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/referrers-json/main.go                                0100644 0000000 0000000 00000000673 13101127476 024203  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'referrers' query.
// See go.tools/oracle/oracle_test.go for explanation.
// See referrers.golden for expected query results.

import "lib"

type s struct {
	f int
}

func main() {
	var v lib.Type = lib.Const // @referrers ref-package "lib"
	_ = v.Method               // @referrers ref-method "Method"
	_ = v.Method
	v++ //@referrers ref-local "v"
	v++

	_ = s{}.f // @referrers ref-field "f"

	var s2 s
	s2.f = 1
}
                                                                     go/src/golang.org/x/tools/oracle/testdata/src/referrers-json/main.golden                            0100644 0000000 0000000 00000003147 13101127476 025045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @referrers ref-package --------
{
	"mode": "referrers",
	"referrers": {
		"pos": "testdata/src/referrers-json/main.go:14:8",
		"objpos": "testdata/src/referrers-json/main.go:7:8",
		"desc": "package lib",
		"refs": [
			"testdata/src/referrers-json/main.go:14:8",
			"testdata/src/referrers-json/main.go:14:19"
		]
	}
}
-------- @referrers ref-method --------
{
	"mode": "referrers",
	"referrers": {
		"pos": "testdata/src/referrers-json/main.go:15:8",
		"objpos": "testdata/src/lib/lib.go:5:13",
		"desc": "func (lib.Type).Method(x *int) *int",
		"refs": [
			"testdata/src/imports/main.go:22:9",
			"testdata/src/referrers-json/main.go:15:8",
			"testdata/src/referrers-json/main.go:16:8",
			"testdata/src/referrers/ext_test.go:10:17",
			"testdata/src/referrers/int_test.go:7:17",
			"testdata/src/referrers/main.go:17:8",
			"testdata/src/referrers/main.go:18:8"
		]
	}
}
-------- @referrers ref-local --------
{
	"mode": "referrers",
	"referrers": {
		"pos": "testdata/src/referrers-json/main.go:17:2",
		"objpos": "testdata/src/referrers-json/main.go:14:6",
		"desc": "var v lib.Type",
		"refs": [
			"testdata/src/referrers-json/main.go:15:6",
			"testdata/src/referrers-json/main.go:16:6",
			"testdata/src/referrers-json/main.go:17:2",
			"testdata/src/referrers-json/main.go:18:2"
		]
	}
}
-------- @referrers ref-field --------
{
	"mode": "referrers",
	"referrers": {
		"pos": "testdata/src/referrers-json/main.go:20:10",
		"objpos": "testdata/src/referrers-json/main.go:10:2",
		"desc": "field f int",
		"refs": [
			"testdata/src/referrers-json/main.go:20:10",
			"testdata/src/referrers-json/main.go:23:5"
		]
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                         go/src/golang.org/x/tools/oracle/testdata/src/reflection/                                           0040755 0000000 0000000 00000000000 13101127476 022111  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/reflection/main.go                                    0100644 0000000 0000000 00000001165 13101127476 023364  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// This is a test of 'pointsto', but we split it into a separate file
// so that pointsto.go doesn't have to import "reflect" each time.

import "reflect"

var a int
var b bool

func main() {
	m := make(map[*int]*bool)
	m[&a] = &b

	mrv := reflect.ValueOf(m)
	if a > 0 {
		mrv = reflect.ValueOf(&b)
	}
	if a > 0 {
		mrv = reflect.ValueOf(&a)
	}

	_ = mrv                  // @pointsto mrv "mrv"
	p1 := mrv.Interface()    // @pointsto p1 "p1"
	p2 := mrv.MapKeys()      // @pointsto p2 "p2"
	p3 := p2[0]              // @pointsto p3 "p3"
	p4 := reflect.TypeOf(p1) // @pointsto p4 "p4"

	_, _, _, _ = p1, p2, p3, p4
}
                                                                                                                                                                                                                                                                                                                                                                                                           go/src/golang.org/x/tools/oracle/testdata/src/reflection/main.golden                                0100644 0000000 0000000 00000001354 13101127476 024227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @pointsto mrv --------
this reflect.Value may contain these dynamic types:
	*bool, may point to:
		main.b
	*int, may point to:
		main.a
	map[*int]*bool, may point to:
		makemap

-------- @pointsto p1 --------
this interface{} may contain these dynamic types:
	*bool, may point to:
		main.b
	*int, may point to:
		main.a
	map[*int]*bool, may point to:
		makemap

-------- @pointsto p2 --------
this []reflect.Value may point to these objects:
	<alloc in (reflect.Value).MapKeys>

-------- @pointsto p3 --------
this reflect.Value may contain these dynamic types:
	*int, may point to:
		main.a

-------- @pointsto p4 --------
this reflect.Type may contain these dynamic types:
	*reflect.rtype, may point to:
		*bool
		*int
		map[*int]*bool

                                                                                                                                                                                                                                                                                    go/src/golang.org/x/tools/oracle/testdata/src/what/                                                 0040755 0000000 0000000 00000000000 13101127476 020722  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/what/main.go                                          0100644 0000000 0000000 00000000444 13101127476 022174  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main // @what pkgdecl "main"

// Tests of 'what' queries.
// See go.tools/oracle/oracle_test.go for explanation.
// See what.golden for expected query results.

func main() {
	f()             // @what call "f"
	var ch chan int // @what var "var"
	<-ch            // @what recv "ch"
}
                                                                                                                                                                                                                            go/src/golang.org/x/tools/oracle/testdata/src/what/main.golden                                      0100644 0000000 0000000 00000001573 13101127476 023043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @what pkgdecl --------
identifier
source file
modes: [definition describe freevars implements pointsto referrers]
srcdir: testdata/src
import path: what

-------- @what call --------
identifier
function call (or conversion)
expression statement
block
function declaration
source file
modes: [callees callers callstack definition describe freevars implements pointsto referrers]
srcdir: testdata/src
import path: what

-------- @what var --------
variable declaration
variable declaration statement
block
function declaration
source file
modes: [callers callstack describe freevars pointsto]
srcdir: testdata/src
import path: what

-------- @what recv --------
identifier
unary <- operation
expression statement
block
function declaration
source file
modes: [callers callstack definition describe freevars implements peers pointsto referrers]
srcdir: testdata/src
import path: what

                                                                                                                                     go/src/golang.org/x/tools/oracle/testdata/src/what-json/                                            0040755 0000000 0000000 00000000000 13101127476 021671  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/what-json/main.go                                     0100644 0000000 0000000 00000000313 13101127476 023136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

// Tests of 'what' queries, -format=json.
// See go.tools/oracle/oracle_test.go for explanation.
// See what-json.golden for expected query results.

func main() {
	f() // @what call "f"
}
                                                                                                                                                                                                                                                                                                                     go/src/golang.org/x/tools/oracle/testdata/src/what-json/main.golden                                 0100644 0000000 0000000 00000001356 13101127476 024011  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @what call --------
{
	"mode": "what",
	"what": {
		"enclosing": [
			{
				"desc": "identifier",
				"start": 179,
				"end": 180
			},
			{
				"desc": "function call (or conversion)",
				"start": 179,
				"end": 182
			},
			{
				"desc": "expression statement",
				"start": 179,
				"end": 182
			},
			{
				"desc": "block",
				"start": 176,
				"end": 202
			},
			{
				"desc": "function declaration",
				"start": 164,
				"end": 202
			},
			{
				"desc": "source file",
				"start": 0,
				"end": 202
			}
		],
		"modes": [
			"callees",
			"callers",
			"callstack",
			"definition",
			"describe",
			"freevars",
			"implements",
			"pointsto",
			"referrers"
		],
		"srcdir": "testdata/src",
		"importpath": "what-json"
	}
}
                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/oracle/testdata/src/whicherrs/                                            0040755 0000000 0000000 00000000000 13101127476 021755  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/oracle/testdata/src/whicherrs/main.go                                     0100644 0000000 0000000 00000000541 13101127476 023225  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

type errType string

const constErr errType = "blah"

func (et errType) Error() string {
	return string(et)
}

var errVar error = errType("foo")

func genErr(i int) error {
	switch i {
	case 0:
		return constErr
	case 1:
		return errVar
	default:
		return nil
	}
}

func main() {
	err := genErr(0) // @whicherrs localerrs "err"
	_ = err
}
                                                                                                                                                               go/src/golang.org/x/tools/oracle/testdata/src/whicherrs/main.golden                                 0100644 0000000 0000000 00000000276 13101127476 024075  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -------- @whicherrs localerrs --------
this error may point to these globals:
	errVar
this error may contain these constants:
	constErr
this error may contain these dynamic types:
	errType

                                                                                                                                                                                                                                                                                                                                  go/src/golang.org/x/tools/oracle/what.go                                                            0100644 0000000 0000000 00000012123 13101127476 016645  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/build"
	"go/token"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/oracle/serial"
)

// what reports all the information about the query selection that can be
// obtained from parsing only its containing source file.
// It is intended to be a very low-latency query callable from GUI
// tools, e.g. to populate a menu of options of slower queries about
// the selected location.
//
func what(q *Query) error {
	qpos, err := fastQueryPos(q.Pos)
	if err != nil {
		return err
	}
	q.Fset = qpos.fset

	// (ignore errors)
	srcdir, importPath, _ := guessImportPath(q.Fset.File(qpos.start).Name(), q.Build)

	// Determine which query modes are applicable to the selection.
	enable := map[string]bool{
		"describe": true, // any syntax; always enabled
	}

	if qpos.end > qpos.start {
		enable["freevars"] = true // nonempty selection?
	}

	for _, n := range qpos.path {
		switch n := n.(type) {
		case *ast.Ident:
			enable["definition"] = true
			enable["referrers"] = true
			enable["implements"] = true
		case *ast.CallExpr:
			enable["callees"] = true
		case *ast.FuncDecl:
			enable["callers"] = true
			enable["callstack"] = true
		case *ast.SendStmt:
			enable["peers"] = true
		case *ast.UnaryExpr:
			if n.Op == token.ARROW {
				enable["peers"] = true
			}
		}

		// For implements, we approximate findInterestingNode.
		if _, ok := enable["implements"]; !ok {
			switch n.(type) {
			case *ast.ArrayType,
				*ast.StructType,
				*ast.FuncType,
				*ast.InterfaceType,
				*ast.MapType,
				*ast.ChanType:
				enable["implements"] = true
			}
		}

		// For pointsto, we approximate findInterestingNode.
		if _, ok := enable["pointsto"]; !ok {
			switch n.(type) {
			case ast.Stmt,
				*ast.ArrayType,
				*ast.StructType,
				*ast.FuncType,
				*ast.InterfaceType,
				*ast.MapType,
				*ast.ChanType:
				enable["pointsto"] = false // not an expr

			case ast.Expr, ast.Decl, *ast.ValueSpec:
				enable["pointsto"] = true // an expr, maybe

			default:
				// Comment, Field, KeyValueExpr, etc: ascend.
			}
		}
	}

	// If we don't have an exact selection, disable modes that need one.
	if !qpos.exact {
		enable["callees"] = false
		enable["pointsto"] = false
		enable["whicherrs"] = false
		enable["describe"] = false
	}

	var modes []string
	for mode := range enable {
		modes = append(modes, mode)
	}
	sort.Strings(modes)

	q.result = &whatResult{
		path:       qpos.path,
		srcdir:     srcdir,
		importPath: importPath,
		modes:      modes,
	}
	return nil
}

// guessImportPath finds the package containing filename, and returns
// its source directory (an element of $GOPATH) and its import path
// relative to it.
//
// TODO(adonovan): what about _test.go files that are not part of the
// package?
//
func guessImportPath(filename string, buildContext *build.Context) (srcdir, importPath string, err error) {
	absFile, err := filepath.Abs(filename)
	if err != nil {
		err = fmt.Errorf("can't form absolute path of %s", filename)
		return
	}
	absFileDir := segments(filepath.Dir(absFile))

	// Find the innermost directory in $GOPATH that encloses filename.
	minD := 1024
	for _, gopathDir := range buildContext.SrcDirs() {
		absDir, err := filepath.Abs(gopathDir)
		if err != nil {
			continue // e.g. non-existent dir on $GOPATH
		}
		d := prefixLen(segments(absDir), absFileDir)
		// If there are multiple matches,
		// prefer the innermost enclosing directory
		// (smallest d).
		if d >= 0 && d < minD {
			minD = d
			srcdir = gopathDir
			importPath = strings.Join(absFileDir[len(absFileDir)-minD:], string(os.PathSeparator))
		}
	}
	if srcdir == "" {
		err = fmt.Errorf("directory %s is not beneath any of these GOROOT/GOPATH directories: %s",
			filepath.Dir(absFile), strings.Join(buildContext.SrcDirs(), ", "))
	}
	return
}

func segments(path string) []string {
	return strings.Split(path, string(os.PathSeparator))
}

// prefixLen returns the length of the remainder of y if x is a prefix
// of y, a negative number otherwise.
func prefixLen(x, y []string) int {
	d := len(y) - len(x)
	if d >= 0 {
		for i := range x {
			if y[i] != x[i] {
				return -1 // not a prefix
			}
		}
	}
	return d
}

type whatResult struct {
	path       []ast.Node
	modes      []string
	srcdir     string
	importPath string
}

func (r *whatResult) display(printf printfFunc) {
	for _, n := range r.path {
		printf(n, "%s", astutil.NodeDescription(n))
	}
	printf(nil, "modes: %s", r.modes)
	printf(nil, "srcdir: %s", r.srcdir)
	printf(nil, "import path: %s", r.importPath)
}

func (r *whatResult) toSerial(res *serial.Result, fset *token.FileSet) {
	var enclosing []serial.SyntaxNode
	for _, n := range r.path {
		enclosing = append(enclosing, serial.SyntaxNode{
			Description: astutil.NodeDescription(n),
			Start:       fset.Position(n.Pos()).Offset,
			End:         fset.Position(n.End()).Offset,
		})
	}
	res.What = &serial.What{
		Modes:      r.modes,
		SrcDir:     r.srcdir,
		ImportPath: r.importPath,
		Enclosing:  enclosing,
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/oracle/whicherrs.go                                                       0100644 0000000 0000000 00000021150 13101127476 017700  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package oracle

import (
	"fmt"
	"go/ast"
	"go/token"
	"sort"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/loader"
	"golang.org/x/tools/go/ssa"
	"golang.org/x/tools/go/ssa/ssautil"
	"golang.org/x/tools/go/types"
	"golang.org/x/tools/oracle/serial"
)

var builtinErrorType = types.Universe.Lookup("error").Type()

// whicherrs takes an position to an error and tries to find all types, constants
// and global value which a given error can point to and which can be checked from the
// scope where the error lives.
// In short, it returns a list of things that can be checked against in order to handle
// an error properly.
//
// TODO(dmorsing): figure out if fields in errors like *os.PathError.Err
// can be queried recursively somehow.
func whicherrs(q *Query) error {
	lconf := loader.Config{Build: q.Build}

	if err := setPTAScope(&lconf, q.Scope); err != nil {
		return err
	}

	// Load/parse/type-check the program.
	lprog, err := lconf.Load()
	if err != nil {
		return err
	}
	q.Fset = lprog.Fset

	qpos, err := parseQueryPos(lprog, q.Pos, true) // needs exact pos
	if err != nil {
		return err
	}

	prog := ssautil.CreateProgram(lprog, ssa.GlobalDebug)

	ptaConfig, err := setupPTA(prog, lprog, q.PTALog, q.Reflection)
	if err != nil {
		return err
	}

	path, action := findInterestingNode(qpos.info, qpos.path)
	if action != actionExpr {
		return fmt.Errorf("whicherrs wants an expression; got %s",
			astutil.NodeDescription(qpos.path[0]))
	}
	var expr ast.Expr
	var obj types.Object
	switch n := path[0].(type) {
	case *ast.ValueSpec:
		// ambiguous ValueSpec containing multiple names
		return fmt.Errorf("multiple value specification")
	case *ast.Ident:
		obj = qpos.info.ObjectOf(n)
		expr = n
	case ast.Expr:
		expr = n
	default:
		return fmt.Errorf("unexpected AST for expr: %T", n)
	}

	typ := qpos.info.TypeOf(expr)
	if !types.Identical(typ, builtinErrorType) {
		return fmt.Errorf("selection is not an expression of type 'error'")
	}
	// Determine the ssa.Value for the expression.
	var value ssa.Value
	if obj != nil {
		// def/ref of func/var object
		value, _, err = ssaValueForIdent(prog, qpos.info, obj, path)
	} else {
		value, _, err = ssaValueForExpr(prog, qpos.info, path)
	}
	if err != nil {
		return err // e.g. trivially dead code
	}

	// Defer SSA construction till after errors are reported.
	prog.Build()

	globals := findVisibleErrs(prog, qpos)
	constants := findVisibleConsts(prog, qpos)

	res := &whicherrsResult{
		qpos:   qpos,
		errpos: expr.Pos(),
	}

	// TODO(adonovan): the following code is heavily duplicated
	// w.r.t.  "pointsto".  Refactor?

	// Find the instruction which initialized the
	// global error. If more than one instruction has stored to the global
	// remove the global from the set of values that we want to query.
	allFuncs := ssautil.AllFunctions(prog)
	for fn := range allFuncs {
		for _, b := range fn.Blocks {
			for _, instr := range b.Instrs {
				store, ok := instr.(*ssa.Store)
				if !ok {
					continue
				}
				gval, ok := store.Addr.(*ssa.Global)
				if !ok {
					continue
				}
				gbl, ok := globals[gval]
				if !ok {
					continue
				}
				// we already found a store to this global
				// The normal error define is just one store in the init
				// so we just remove this global from the set we want to query
				if gbl != nil {
					delete(globals, gval)
				}
				globals[gval] = store.Val
			}
		}
	}

	ptaConfig.AddQuery(value)
	for _, v := range globals {
		ptaConfig.AddQuery(v)
	}

	ptares := ptrAnalysis(ptaConfig)
	valueptr := ptares.Queries[value]
	for g, v := range globals {
		ptr, ok := ptares.Queries[v]
		if !ok {
			continue
		}
		if !ptr.MayAlias(valueptr) {
			continue
		}
		res.globals = append(res.globals, g)
	}
	pts := valueptr.PointsTo()
	dedup := make(map[*ssa.NamedConst]bool)
	for _, label := range pts.Labels() {
		// These values are either MakeInterfaces or reflect
		// generated interfaces. For the purposes of this
		// analysis, we don't care about reflect generated ones
		makeiface, ok := label.Value().(*ssa.MakeInterface)
		if !ok {
			continue
		}
		constval, ok := makeiface.X.(*ssa.Const)
		if !ok {
			continue
		}
		c := constants[*constval]
		if c != nil && !dedup[c] {
			dedup[c] = true
			res.consts = append(res.consts, c)
		}
	}
	concs := pts.DynamicTypes()
	concs.Iterate(func(conc types.Type, _ interface{}) {
		// go/types is a bit annoying here.
		// We want to find all the types that we can
		// typeswitch or assert to. This means finding out
		// if the type pointed to can be seen by us.
		//
		// For the purposes of this analysis, the type is always
		// either a Named type or a pointer to one.
		// There are cases where error can be implemented
		// by unnamed types, but in that case, we can't assert to
		// it, so we don't care about it for this analysis.
		var name *types.TypeName
		switch t := conc.(type) {
		case *types.Pointer:
			named, ok := t.Elem().(*types.Named)
			if !ok {
				return
			}
			name = named.Obj()
		case *types.Named:
			name = t.Obj()
		default:
			return
		}
		if !isAccessibleFrom(name, qpos.info.Pkg) {
			return
		}
		res.types = append(res.types, &errorType{conc, name})
	})
	sort.Sort(membersByPosAndString(res.globals))
	sort.Sort(membersByPosAndString(res.consts))
	sort.Sort(sorterrorType(res.types))

	q.result = res
	return nil
}

// findVisibleErrs returns a mapping from each package-level variable of type "error" to nil.
func findVisibleErrs(prog *ssa.Program, qpos *queryPos) map[*ssa.Global]ssa.Value {
	globals := make(map[*ssa.Global]ssa.Value)
	for _, pkg := range prog.AllPackages() {
		for _, mem := range pkg.Members {
			gbl, ok := mem.(*ssa.Global)
			if !ok {
				continue
			}
			gbltype := gbl.Type()
			// globals are always pointers
			if !types.Identical(deref(gbltype), builtinErrorType) {
				continue
			}
			if !isAccessibleFrom(gbl.Object(), qpos.info.Pkg) {
				continue
			}
			globals[gbl] = nil
		}
	}
	return globals
}

// findVisibleConsts returns a mapping from each package-level constant assignable to type "error", to nil.
func findVisibleConsts(prog *ssa.Program, qpos *queryPos) map[ssa.Const]*ssa.NamedConst {
	constants := make(map[ssa.Const]*ssa.NamedConst)
	for _, pkg := range prog.AllPackages() {
		for _, mem := range pkg.Members {
			obj, ok := mem.(*ssa.NamedConst)
			if !ok {
				continue
			}
			consttype := obj.Type()
			if !types.AssignableTo(consttype, builtinErrorType) {
				continue
			}
			if !isAccessibleFrom(obj.Object(), qpos.info.Pkg) {
				continue
			}
			constants[*obj.Value] = obj
		}
	}

	return constants
}

type membersByPosAndString []ssa.Member

func (a membersByPosAndString) Len() int { return len(a) }
func (a membersByPosAndString) Less(i, j int) bool {
	cmp := a[i].Pos() - a[j].Pos()
	return cmp < 0 || cmp == 0 && a[i].String() < a[j].String()
}
func (a membersByPosAndString) Swap(i, j int) { a[i], a[j] = a[j], a[i] }

type sorterrorType []*errorType

func (a sorterrorType) Len() int { return len(a) }
func (a sorterrorType) Less(i, j int) bool {
	cmp := a[i].obj.Pos() - a[j].obj.Pos()
	return cmp < 0 || cmp == 0 && a[i].typ.String() < a[j].typ.String()
}
func (a sorterrorType) Swap(i, j int) { a[i], a[j] = a[j], a[i] }

type errorType struct {
	typ types.Type      // concrete type N or *N that implements error
	obj *types.TypeName // the named type N
}

type whicherrsResult struct {
	qpos    *queryPos
	errpos  token.Pos
	globals []ssa.Member
	consts  []ssa.Member
	types   []*errorType
}

func (r *whicherrsResult) display(printf printfFunc) {
	if len(r.globals) > 0 {
		printf(r.qpos, "this error may point to these globals:")
		for _, g := range r.globals {
			printf(g.Pos(), "\t%s", g.RelString(r.qpos.info.Pkg))
		}
	}
	if len(r.consts) > 0 {
		printf(r.qpos, "this error may contain these constants:")
		for _, c := range r.consts {
			printf(c.Pos(), "\t%s", c.RelString(r.qpos.info.Pkg))
		}
	}
	if len(r.types) > 0 {
		printf(r.qpos, "this error may contain these dynamic types:")
		for _, t := range r.types {
			printf(t.obj.Pos(), "\t%s", r.qpos.typeString(t.typ))
		}
	}
}

func (r *whicherrsResult) toSerial(res *serial.Result, fset *token.FileSet) {
	we := &serial.WhichErrs{}
	we.ErrPos = fset.Position(r.errpos).String()
	for _, g := range r.globals {
		we.Globals = append(we.Globals, fset.Position(g.Pos()).String())
	}
	for _, c := range r.consts {
		we.Constants = append(we.Constants, fset.Position(c.Pos()).String())
	}
	for _, t := range r.types {
		var et serial.WhichErrsType
		et.Type = r.qpos.typeString(t.typ)
		et.Position = fset.Position(t.obj.Pos()).String()
		we.Types = append(we.Types, et)
	}
	res.WhichErrs = we
}
                                                                                                                                                                                                                                                                                                                                                                                                                        go/src/golang.org/x/tools/playground/                                                               0040755 0000000 0000000 00000000000 13101127476 016276  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/playground/appengine.go                                                   0100644 0000000 0000000 00000000771 13101127475 020574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build appengine

package playground

import (
	"net/http"

	"appengine"
	"appengine/urlfetch"
)

func init() {
	onAppengine = !appengine.IsDevAppServer()
}

func client(r *http.Request) *http.Client {
	return urlfetch.Client(appengine.NewContext(r))
}

func report(r *http.Request, err error) {
	appengine.NewContext(r).Errorf("%v", err)
}
       go/src/golang.org/x/tools/playground/appenginevm.go                                                 0100644 0000000 0000000 00000000360 13101127475 021131  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build appenginevm

package playground

func init() {
	onAppengine = true
}
                                                                                                                                                                                                                                                                                go/src/golang.org/x/tools/playground/common.go                                                      0100644 0000000 0000000 00000003041 13101127476 020110  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package playground registers HTTP handlers at "/compile" and "/share" that
// proxy requests to the golang.org playground service.
// This package may be used unaltered on App Engine.
package playground // import "golang.org/x/tools/playground"

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"net/http"
)

const baseURL = "http://play.golang.org"

func init() {
	http.HandleFunc("/compile", bounce)
	http.HandleFunc("/share", bounce)
}

func bounce(w http.ResponseWriter, r *http.Request) {
	b := new(bytes.Buffer)
	if err := passThru(b, r); err != nil {
		http.Error(w, "Server error.", http.StatusInternalServerError)
		report(r, err)
		return
	}
	io.Copy(w, b)
}

func passThru(w io.Writer, req *http.Request) error {
	if req.URL.Path == "/share" && !allowShare(req) {
		return errors.New("Forbidden")
	}
	defer req.Body.Close()
	url := baseURL + req.URL.Path
	r, err := client(req).Post(url, req.Header.Get("Content-type"), req.Body)
	if err != nil {
		return fmt.Errorf("making POST request: %v", err)
	}
	defer r.Body.Close()
	if _, err := io.Copy(w, r.Body); err != nil {
		return fmt.Errorf("copying response Body: %v", err)
	}
	return nil
}

var onAppengine = false // will be overriden by appengine.go and appenginevm.go

func allowShare(r *http.Request) bool {
	if !onAppengine {
		return true
	}
	switch r.Header.Get("X-AppEngine-Country") {
	case "", "ZZ", "CN":
		return false
	}
	return true
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               go/src/golang.org/x/tools/playground/local.go                                                       0100644 0000000 0000000 00000000562 13101127475 017716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build !appengine

package playground

import (
	"log"
	"net/http"
)

func client(r *http.Request) *http.Client {
	return http.DefaultClient
}

func report(r *http.Request, err error) {
	log.Println(err)
}
                                                                                                                                              go/src/golang.org/x/tools/playground/socket/                                                        0040755 0000000 0000000 00000000000 13101127476 017566  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/playground/socket/socket.go                                               0100644 0000000 0000000 00000032021 13101127476 021400  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build !appengine

// Package socket implements an WebSocket-based playground backend.
// Clients connect to a websocket handler and send run/kill commands, and
// the server sends the output and exit status of the running processes.
// Multiple clients running multiple processes may be served concurrently.
// The wire format is JSON and is described by the Message type.
//
// This will not run on App Engine as WebSockets are not supported there.
package socket // import "golang.org/x/tools/playground/socket"

import (
	"bytes"
	"encoding/json"
	"errors"
	"go/parser"
	"go/token"
	"io"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"golang.org/x/net/websocket"
)

// RunScripts specifies whether the socket handler should execute shell scripts
// (snippets that start with a shebang).
var RunScripts = true

// Environ provides an environment when a binary, such as the go tool, is
// invoked.
var Environ func() []string = os.Environ

const (
	// The maximum number of messages to send per session (avoid flooding).
	msgLimit = 1000

	// Batch messages sent in this interval and send as a single message.
	msgDelay = 10 * time.Millisecond
)

// Message is the wire format for the websocket connection to the browser.
// It is used for both sending output messages and receiving commands, as
// distinguished by the Kind field.
type Message struct {
	Id      string // client-provided unique id for the process
	Kind    string // in: "run", "kill" out: "stdout", "stderr", "end"
	Body    string
	Options *Options `json:",omitempty"`
}

// Options specify additional message options.
type Options struct {
	Race bool // use -race flag when building code (for "run" only)
}

// NewHandler returns a websocket server which checks the origin of requests.
func NewHandler(origin *url.URL) websocket.Server {
	return websocket.Server{
		Config:    websocket.Config{Origin: origin},
		Handshake: handshake,
		Handler:   websocket.Handler(socketHandler),
	}
}

// handshake checks the origin of a request during the websocket handshake.
func handshake(c *websocket.Config, req *http.Request) error {
	o, err := websocket.Origin(c, req)
	if err != nil {
		log.Println("bad websocket origin:", err)
		return websocket.ErrBadWebSocketOrigin
	}
	_, port, err := net.SplitHostPort(c.Origin.Host)
	if err != nil {
		log.Println("bad websocket origin:", err)
		return websocket.ErrBadWebSocketOrigin
	}
	ok := c.Origin.Scheme == o.Scheme && (c.Origin.Host == o.Host || c.Origin.Host == net.JoinHostPort(o.Host, port))
	if !ok {
		log.Println("bad websocket origin:", o)
		return websocket.ErrBadWebSocketOrigin
	}
	log.Println("accepting connection from:", req.RemoteAddr)
	return nil
}

// socketHandler handles the websocket connection for a given present session.
// It handles transcoding Messages to and from JSON format, and starting
// and killing processes.
func socketHandler(c *websocket.Conn) {
	in, out := make(chan *Message), make(chan *Message)
	errc := make(chan error, 1)

	// Decode messages from client and send to the in channel.
	go func() {
		dec := json.NewDecoder(c)
		for {
			var m Message
			if err := dec.Decode(&m); err != nil {
				errc <- err
				return
			}
			in <- &m
		}
	}()

	// Receive messages from the out channel and encode to the client.
	go func() {
		enc := json.NewEncoder(c)
		for m := range out {
			if err := enc.Encode(m); err != nil {
				errc <- err
				return
			}
		}
	}()
	defer close(out)

	// Start and kill processes and handle errors.
	proc := make(map[string]*process)
	for {
		select {
		case m := <-in:
			switch m.Kind {
			case "run":
				log.Println("running snippet from:", c.Request().RemoteAddr)
				proc[m.Id].Kill()
				proc[m.Id] = startProcess(m.Id, m.Body, out, m.Options)
			case "kill":
				proc[m.Id].Kill()
			}
		case err := <-errc:
			if err != io.EOF {
				// A encode or decode has failed; bail.
				log.Println(err)
			}
			// Shut down any running processes.
			for _, p := range proc {
				p.Kill()
			}
			return
		}
	}
}

// process represents a running process.
type process struct {
	out  chan<- *Message
	done chan struct{} // closed when wait completes
	run  *exec.Cmd
	bin  string
}

// startProcess builds and runs the given program, sending its output
// and end event as Messages on the provided channel.
func startProcess(id, body string, dest chan<- *Message, opt *Options) *process {
	var (
		done = make(chan struct{})
		out  = make(chan *Message)
		p    = &process{out: out, done: done}
	)
	go func() {
		defer close(done)
		for m := range buffer(limiter(out, p)) {
			m.Id = id
			dest <- m
		}
	}()
	var err error
	if path, args := shebang(body); path != "" {
		if RunScripts {
			err = p.startProcess(path, args, body)
		} else {
			err = errors.New("script execution is not allowed")
		}
	} else {
		err = p.start(body, opt)
	}
	if err != nil {
		p.end(err)
		return nil
	}
	go func() {
		p.end(p.run.Wait())
	}()
	return p
}

// end sends an "end" message to the client, containing the process id and the
// given error value. It also removes the binary, if present.
func (p *process) end(err error) {
	if p.bin != "" {
		defer os.Remove(p.bin)
	}
	m := &Message{Kind: "end"}
	if err != nil {
		m.Body = err.Error()
	}
	p.out <- m
	close(p.out)
}

// A killer provides a mechanism to terminate a process.
// The Kill method returns only once the process has exited.
type killer interface {
	Kill()
}

// limiter returns a channel that wraps the given channel.
// It receives Messages from the given channel and sends them to the returned
// channel until it passes msgLimit messages, at which point it will kill the
// process and pass only the "end" message.
// When the given channel is closed, or when the "end" message is received,
// it closes the returned channel.
func limiter(in <-chan *Message, p killer) <-chan *Message {
	out := make(chan *Message)
	go func() {
		defer close(out)
		n := 0
		for m := range in {
			switch {
			case n < msgLimit || m.Kind == "end":
				out <- m
				if m.Kind == "end" {
					return
				}
			case n == msgLimit:
				// Kill in a goroutine as Kill will not return
				// until the process' output has been
				// processed, and we're doing that in this loop.
				go p.Kill()
			default:
				continue // don't increment
			}
			n++
		}
	}()
	return out
}

// buffer returns a channel that wraps the given channel. It receives messages
// from the given channel and sends them to the returned channel.
// Message bodies are gathered over the period msgDelay and coalesced into a
// single Message before they are passed on. Messages of the same kind are
// coalesced; when a message of a different kind is received, any buffered
// messages are flushed. When the given channel is closed, buffer flushes the
// remaining buffered messages and closes the returned channel.
func buffer(in <-chan *Message) <-chan *Message {
	out := make(chan *Message)
	go func() {
		defer close(out)
		var (
			t     = time.NewTimer(msgDelay)
			tc    <-chan time.Time
			buf   []byte
			kind  string
			flush = func() {
				if len(buf) == 0 {
					return
				}
				out <- &Message{Kind: kind, Body: safeString(buf)}
				buf = buf[:0] // recycle buffer
				kind = ""
			}
		)
		for {
			select {
			case m, ok := <-in:
				if !ok {
					flush()
					return
				}
				if m.Kind == "end" {
					flush()
					out <- m
					return
				}
				if kind != m.Kind {
					flush()
					kind = m.Kind
					if tc == nil {
						tc = t.C
						t.Reset(msgDelay)
					}
				}
				buf = append(buf, m.Body...)
			case <-tc:
				flush()
				tc = nil
			}
		}
	}()
	return out
}

// Kill stops the process if it is running and waits for it to exit.
func (p *process) Kill() {
	if p == nil || p.run == nil {
		return
	}
	p.run.Process.Kill()
	<-p.done // block until process exits
}

// shebang looks for a shebang ('#!') at the beginning of the passed string.
// If found, it returns the path and args after the shebang.
// args includes the command as args[0].
func shebang(body string) (path string, args []string) {
	body = strings.TrimSpace(body)
	if !strings.HasPrefix(body, "#!") {
		return "", nil
	}
	if i := strings.Index(body, "\n"); i >= 0 {
		body = body[:i]
	}
	fs := strings.Fields(body[2:])
	return fs[0], fs
}

// startProcess starts a given program given its path and passing the given body
// to the command standard input.
func (p *process) startProcess(path string, args []string, body string) error {
	cmd := &exec.Cmd{
		Path:   path,
		Args:   args,
		Stdin:  strings.NewReader(body),
		Stdout: &messageWriter{kind: "stdout", out: p.out},
		Stderr: &messageWriter{kind: "stderr", out: p.out},
	}
	if err := cmd.Start(); err != nil {
		return err
	}
	p.run = cmd
	return nil
}

// start builds and starts the given program, sending its output to p.out,
// and stores the running *exec.Cmd in the run field.
func (p *process) start(body string, opt *Options) error {
	// We "go build" and then exec the binary so that the
	// resultant *exec.Cmd is a handle to the user's program
	// (rather than the go tool process).
	// This makes Kill work.

	bin := filepath.Join(tmpdir, "compile"+strconv.Itoa(<-uniq))
	src := bin + ".go"
	if runtime.GOOS == "windows" {
		bin += ".exe"
	}

	// write body to x.go
	defer os.Remove(src)
	err := ioutil.WriteFile(src, []byte(body), 0666)
	if err != nil {
		return err
	}

	// build x.go, creating x
	p.bin = bin // to be removed by p.end
	dir, file := filepath.Split(src)
	args := []string{"go", "build", "-tags", "OMIT"}
	if opt != nil && opt.Race {
		p.out <- &Message{
			Kind: "stderr",
			Body: "Running with race detector.\n",
		}
		args = append(args, "-race")
	}
	args = append(args, "-o", bin, file)
	cmd := p.cmd(dir, args...)
	cmd.Stdout = cmd.Stderr // send compiler output to stderr
	if err := cmd.Run(); err != nil {
		return err
	}

	// run x
	if isNacl() {
		cmd, err = p.naclCmd(bin)
		if err != nil {
			return err
		}
	} else {
		cmd = p.cmd("", bin)
	}
	if opt != nil && opt.Race {
		cmd.Env = append(cmd.Env, "GOMAXPROCS=2")
	}
	if err := cmd.Start(); err != nil {
		// If we failed to exec, that might be because they built
		// a non-main package instead of an executable.
		// Check and report that.
		if name, err := packageName(body); err == nil && name != "main" {
			return errors.New(`executable programs must use "package main"`)
		}
		return err
	}
	p.run = cmd
	return nil
}

// cmd builds an *exec.Cmd that writes its standard output and error to the
// process' output channel.
func (p *process) cmd(dir string, args ...string) *exec.Cmd {
	cmd := exec.Command(args[0], args[1:]...)
	cmd.Dir = dir
	cmd.Env = Environ()
	cmd.Stdout = &messageWriter{kind: "stdout", out: p.out}
	cmd.Stderr = &messageWriter{kind: "stderr", out: p.out}
	return cmd
}

func isNacl() bool {
	for _, v := range append(Environ(), os.Environ()...) {
		if v == "GOOS=nacl" {
			return true
		}
	}
	return false
}

// naclCmd returns an *exec.Cmd that executes bin under native client.
func (p *process) naclCmd(bin string) (*exec.Cmd, error) {
	pwd, err := os.Getwd()
	if err != nil {
		return nil, err
	}
	var args []string
	env := []string{
		"NACLENV_GOOS=" + runtime.GOOS,
		"NACLENV_GOROOT=/go",
		"NACLENV_NACLPWD=" + strings.Replace(pwd, runtime.GOROOT(), "/go", 1),
	}
	switch runtime.GOARCH {
	case "amd64":
		env = append(env, "NACLENV_GOARCH=amd64p32")
		args = []string{"sel_ldr_x86_64"}
	case "386":
		env = append(env, "NACLENV_GOARCH=386")
		args = []string{"sel_ldr_x86_32"}
	case "arm":
		env = append(env, "NACLENV_GOARCH=arm")
		selLdr, err := exec.LookPath("sel_ldr_arm")
		if err != nil {
			return nil, err
		}
		args = []string{"nacl_helper_bootstrap_arm", selLdr, "--reserved_at_zero=0xXXXXXXXXXXXXXXXX"}
	default:
		return nil, errors.New("native client does not support GOARCH=" + runtime.GOARCH)
	}

	cmd := p.cmd("", append(args, "-l", "/dev/null", "-S", "-e", bin)...)
	cmd.Env = append(cmd.Env, env...)

	return cmd, nil
}

func packageName(body string) (string, error) {
	f, err := parser.ParseFile(token.NewFileSet(), "prog.go",
		strings.NewReader(body), parser.PackageClauseOnly)
	if err != nil {
		return "", err
	}
	return f.Name.String(), nil
}

// messageWriter is an io.Writer that converts all writes to Message sends on
// the out channel with the specified id and kind.
type messageWriter struct {
	kind string
	out  chan<- *Message
}

func (w *messageWriter) Write(b []byte) (n int, err error) {
	w.out <- &Message{Kind: w.kind, Body: safeString(b)}
	return len(b), nil
}

// safeString returns b as a valid UTF-8 string.
func safeString(b []byte) string {
	if utf8.Valid(b) {
		return string(b)
	}
	var buf bytes.Buffer
	for len(b) > 0 {
		r, size := utf8.DecodeRune(b)
		b = b[size:]
		buf.WriteRune(r)
	}
	return buf.String()
}

var tmpdir string

func init() {
	// find real path to temporary directory
	var err error
	tmpdir, err = filepath.EvalSymlinks(os.TempDir())
	if err != nil {
		log.Fatal(err)
	}
}

var uniq = make(chan int) // a source of numbers for naming temporary files

func init() {
	go func() {
		for i := 0; ; i++ {
			uniq <- i
		}
	}()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               go/src/golang.org/x/tools/playground/socket/socket_test.go                                          0100644 0000000 0000000 00000003132 13101127476 022440  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package socket

import (
	"testing"
	"time"
)

func TestBuffer(t *testing.T) {
	ch := make(chan *Message)
	go func() {
		ch <- &Message{Kind: "err", Body: "a"}
		ch <- &Message{Kind: "err", Body: "b"}
		ch <- &Message{Kind: "out", Body: "1"}
		ch <- &Message{Kind: "out", Body: "2"}
		time.Sleep(msgDelay * 2)
		ch <- &Message{Kind: "out", Body: "3"}
		ch <- &Message{Kind: "out", Body: "4"}
		close(ch)
	}()

	var ms []*Message
	for m := range buffer(ch) {
		ms = append(ms, m)
	}
	if len(ms) != 3 {
		t.Fatalf("got %v messages, want 2", len(ms))
	}
	if g, w := ms[0].Body, "ab"; g != w {
		t.Errorf("message 0 body = %q, want %q", g, w)
	}
	if g, w := ms[1].Body, "12"; g != w {
		t.Errorf("message 1 body = %q, want %q", g, w)
	}
	if g, w := ms[2].Body, "34"; g != w {
		t.Errorf("message 2 body = %q, want %q", g, w)
	}
}

type killRecorder chan struct{}

func (k killRecorder) Kill() { close(k) }

func TestLimiter(t *testing.T) {
	ch := make(chan *Message)
	go func() {
		var m Message
		for i := 0; i < msgLimit+10; i++ {
			ch <- &m
		}
		ch <- &Message{Kind: "end"}
	}()

	kr := make(killRecorder)
	n := 0
	for m := range limiter(ch, kr) {
		n++
		if n > msgLimit && m.Kind != "end" {
			t.Errorf("received non-end message after limit")
		}
	}
	if n != msgLimit+1 {
		t.Errorf("received %v messages, want %v", n, msgLimit+1)
	}
	select {
	case <-kr:
	case <-time.After(100 * time.Millisecond):
		t.Errorf("process wasn't killed after reaching limit")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                      go/src/golang.org/x/tools/present/                                                                  0040755 0000000 0000000 00000000000 13101127476 015572  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        go/src/golang.org/x/tools/present/args.go                                                           0100644 0000000 0000000 00000011657 13101127475 017063  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"errors"
	"regexp"
	"strconv"
	"unicode/utf8"
)

// This file is stolen from go/src/cmd/godoc/codewalk.go.
// It's an evaluator for the file address syntax implemented by acme and sam,
// but using Go-native regular expressions.
// To keep things reasonably close, this version uses (?m:re) for all user-provided
// regular expressions. That is the only change to the code from codewalk.go.
// See http://plan9.bell-labs.com/sys/doc/sam/sam.html Table II
// for details on the syntax.

// addrToByte evaluates the given address starting at offset start in data.
// It returns the lo and hi byte offset of the matched region within data.
func addrToByteRange(addr string, start int, data []byte) (lo, hi int, err error) {
	if addr == "" {
		lo, hi = start, len(data)
		return
	}
	var (
		dir        byte
		prevc      byte
		charOffset bool
	)
	lo = start
	hi = start
	for addr != "" && err == nil {
		c := addr[0]
		switch c {
		default:
			err = errors.New("invalid address syntax near " + string(c))
		case ',':
			if len(addr) == 1 {
				hi = len(data)
			} else {
				_, hi, err = addrToByteRange(addr[1:], hi, data)
			}
			return

		case '+', '-':
			if prevc == '+' || prevc == '-' {
				lo, hi, err = addrNumber(data, lo, hi, prevc, 1, charOffset)
			}
			dir = c

		case '$':
			lo = len(data)
			hi = len(data)
			if len(addr) > 1 {
				dir = '+'
			}

		case '#':
			charOffset = true

		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
			var i int
			for i = 1; i < len(addr); i++ {
				if addr[i] < '0' || addr[i] > '9' {
					break
				}
			}
			var n int
			n, err = strconv.Atoi(addr[0:i])
			if err != nil {
				break
			}
			lo, hi, err = addrNumber(data, lo, hi, dir, n, charOffset)
			dir = 0
			charOffset = false
			prevc = c
			addr = addr[i:]
			continue

		case '/':
			var i, j int
		Regexp:
			for i = 1; i < len(addr); i++ {
				switch addr[i] {
				case '\\':
					i++
				case '/':
					j = i + 1
					break Regexp
				}
			}
			if j == 0 {
				j = i
			}
			pattern := addr[1:i]
			lo, hi, err = addrRegexp(data, lo, hi, dir, pattern)
			prevc = c
			addr = addr[j:]
			continue
		}
		prevc = c
		addr = addr[1:]
	}

	if err == nil && dir != 0 {
		lo, hi, err = addrNumber(data, lo, hi, dir, 1, charOffset)
	}
	if err != nil {
		return 0, 0, err
	}
	return lo, hi, nil
}

// addrNumber applies the given dir, n, and charOffset to the address lo, hi.
// dir is '+' or '-', n is the count, and charOffset is true if the syntax
// used was #n.  Applying +n (or +#n) means to advance n lines
// (or characters) after hi.  Applying -n (or -#n) means to back up n lines
// (or characters) before lo.
// The return value is the new lo, hi.
func addrNumber(data []byte, lo, hi int, dir byte, n int, charOffset bool) (int, int, error) {
	switch dir {
	case 0:
		lo = 0
		hi = 0
		fallthrough

	case '+':
		if charOffset {
			pos := hi
			for ; n > 0 && pos < len(data); n-- {
				_, size := utf8.DecodeRune(data[pos:])
				pos += size
			}
			if n == 0 {
				return pos, pos, nil
			}
			break
		}
		// find next beginning of line
		if hi > 0 {
			for hi < len(data) && data[hi-1] != '\n' {
				hi++
			}
		}
		lo = hi
		if n == 0 {
			return lo, hi, nil
		}
		for ; hi < len(data); hi++ {
			if data[hi] != '\n' {
				continue
			}
			switch n--; n {
			case 1:
				lo = hi + 1
			case 0:
				return lo, hi + 1, nil
			}
		}

	case '-':
		if charOffset {
			// Scan backward for bytes that are not UTF-8 continuation bytes.
			pos := lo
			for ; pos > 0 && n > 0; pos-- {
				if data[pos]&0xc0 != 0x80 {
					n--
				}
			}
			if n == 0 {
				return pos, pos, nil
			}
			break
		}
		// find earlier beginning of line
		for lo > 0 && data[lo-1] != '\n' {
			lo--
		}
		hi = lo
		if n == 0 {
			return lo, hi, nil
		}
		for ; lo >= 0; lo-- {
			if lo > 0 && data[lo-1] != '\n' {
				continue
			}
			switch n--; n {
			case 1:
				hi = lo
			case 0:
				return lo, hi, nil
			}
		}
	}

	return 0, 0, errors.New("address out of range")
}

// addrRegexp searches for pattern in the given direction starting at lo, hi.
// The direction dir is '+' (search forward from hi) or '-' (search backward from lo).
// Backward searches are unimplemented.
func addrRegexp(data []byte, lo, hi int, dir byte, pattern string) (int, int, error) {
	// We want ^ and $ to work as in sam/acme, so use ?m.
	re, err := regexp.Compile("(?m:" + pattern + ")")
	if err != nil {
		return 0, 0, err
	}
	if dir == '-' {
		// Could implement reverse search using binary search
		// through file, but that seems like overkill.
		return 0, 0, errors.New("reverse search not implemented")
	}
	m := re.FindIndex(data[hi:])
	if len(m) > 0 {
		m[0] += hi
		m[1] += hi
	} else if hi > 0 {
		// No match.  Wrap to beginning of data.
		m = re.FindIndex(data)
	}
	if len(m) == 0 {
		return 0, 0, errors.New("no match for " + pattern)
	}
	return m[0], m[1], nil
}
                                                                                 go/src/golang.org/x/tools/present/caption.go                                                        0100644 0000000 0000000 00000001003 13101127475 017544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import "strings"

func init() {
	Register("caption", parseCaption)
}

type Caption struct {
	Text string
}

func (c Caption) TemplateName() string { return "caption" }

func parseCaption(_ *Context, _ string, _ int, text string) (Elem, error) {
	text = strings.TrimSpace(strings.TrimPrefix(text, ".caption"))
	return Caption{text}, nil
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/present/code.go                                                           0100644 0000000 0000000 00000020532 13101127476 017032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"bufio"
	"bytes"
	"fmt"
	"html/template"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
)

// Is the playground available?
var PlayEnabled = false

// TOOD(adg): replace the PlayEnabled flag with something less spaghetti-like.
// Instead this will probably be determined by a template execution Context
// value that contains various global metadata required when rendering
// templates.

func init() {
	Register("code", parseCode)
	Register("play", parseCode)
}

type Code struct {
	Text     template.HTML
	Play     bool   // runnable code
	FileName string // file name
	Ext      string // file extension
	Raw      []byte // content of the file
}

func (c Code) TemplateName() string { return "code" }

// The input line is a .code or .play entry with a file name and an optional HLfoo marker on the end.
// Anything between the file and HL (if any) is an address expression, which we treat as a string here.
// We pick off the HL first, for easy parsing.
var (
	highlightRE = regexp.MustCompile(`\s+HL([a-zA-Z0-9_]+)?$`)
	hlCommentRE = regexp.MustCompile(`(.+) // HL(.*)$`)
	codeRE      = regexp.MustCompile(`\.(code|play)\s+((?:(?:-edit|-numbers)\s+)*)([^\s]+)(?:\s+(.*))?$`)
)

// parseCode parses a code present directive. Its syntax:
//   .code [-numbers] [-edit] <filename> [address] [highlight]
// The directive may also be ".play" if the snippet is executable.
func parseCode(ctx *Context, sourceFile string, sourceLine int, cmd string) (Elem, error) {
	cmd = strings.TrimSpace(cmd)

	// Pull off the HL, if any, from the end of the input line.
	highlight := ""
	if hl := highlightRE.FindStringSubmatchIndex(cmd); len(hl) == 4 {
		highlight = cmd[hl[2]:hl[3]]
		cmd = cmd[:hl[2]-2]
	}

	// Parse the remaining command line.
	// Arguments:
	// args[0]: whole match
	// args[1]:  .code/.play
	// args[2]: flags ("-edit -numbers")
	// args[3]: file name
	// args[4]: optional address
	args := codeRE.FindStringSubmatch(cmd)
	if len(args) != 5 {
		return nil, fmt.Errorf("%s:%d: syntax error for .code/.play invocation", sourceFile, sourceLine)
	}
	command, flags, file, addr := args[1], args[2], args[3], strings.TrimSpace(args[4])
	play := command == "play" && PlayEnabled

	// Read in code file and (optionally) match address.
	filename := filepath.Join(filepath.Dir(sourceFile), file)
	textBytes, err := ctx.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("%s:%d: %v", sourceFile, sourceLine, err)
	}
	lo, hi, err := addrToByteRange(addr, 0, textBytes)
	if err != nil {
		return nil, fmt.Errorf("%s:%d: %v", sourceFile, sourceLine, err)
	}

	// Acme pattern matches can stop mid-line,
	// so run to end of line in both directions if not at line start/end.
	for lo > 0 && textBytes[lo-1] != '\n' {
		lo--
	}
	if hi > 0 {
		for hi < len(textBytes) && textBytes[hi-1] != '\n' {
			hi++
		}
	}

	lines := codeLines(textBytes, lo, hi)

	data := &codeTemplateData{
		Lines:   formatLines(lines, highlight),
		Edit:    strings.Contains(flags, "-edit"),
		Numbers: strings.Contains(flags, "-numbers"),
	}

	// Include before and after in a hidden span for playground code.
	if play {
		data.Prefix = textBytes[:lo]
		data.Suffix = textBytes[hi:]
	}

	var buf bytes.Buffer
	if err := codeTemplate.Execute(&buf, data); err != nil {
		return nil, err
	}
	return Code{
		Text:     template.HTML(buf.String()),
		Play:     play,
		FileName: filepath.Base(filename),
		Ext:      filepath.Ext(filename),
		Raw:      rawCode(lines),
	}, nil
}

// formatLines returns a new slice of codeLine with the given lines
// replacing tabs with spaces and adding highlighting where needed.
func formatLines(lines []codeLine, highlight string) []codeLine {
	formatted := make([]codeLine, len(lines))
	for i, line := range lines {
		// Replace tabs with spaces, which work better in HTML.
		line.L = strings.Replace(line.L, "\t", "    ", -1)

		// Highlight lines that end with "// HL[highlight]"
		// and strip the magic comment.
		if m := hlCommentRE.FindStringSubmatch(line.L); m != nil {
			line.L = m[1]
			line.HL = m[2] == highlight
		}

		formatted[i] = line
	}
	return formatted
}

// rawCode returns the code represented by the given codeLines without any kind
// of formatting.
func rawCode(lines []codeLine) []byte {
	b := new(bytes.Buffer)
	for _, line := range lines {
		b.WriteString(line.L)
		b.WriteByte('\n')
	}
	return b.Bytes()
}

type codeTemplateData struct {
	Lines          []codeLine
	Prefix, Suffix []byte
	Edit, Numbers  bool
}

var leadingSpaceRE = regexp.MustCompile(`^[ \t]*`)

var codeTemplate = template.Must(template.New("code").Funcs(template.FuncMap{
	"trimSpace":    strings.TrimSpace,
	"leadingSpace": leadingSpaceRE.FindString,
}).Parse(codeTemplateHTML))

const codeTemplateHTML = `
{{with .Prefix}}<pre style="display: none"><span>{{printf "%s" .}}</span></pre>{{end}}

<pre{{if .Edit}} contenteditable="true" spellcheck="false"{{end}}{{if .Numbers}} class="numbers"{{end}}>{{/*
	*/}}{{range .Lines}}<span num="{{.N}}">{{/*
	*/}}{{if .HL}}{{leadingSpace .L}}<b>{{trimSpace .L}}</b>{{/*
	*/}}{{else}}{{.L}}{{end}}{{/*
*/}}</span>
{{end}}</pre>

{{with .Suffix}}<pre style="display: none"><span>{{printf "%s" .}}</span></pre>{{end}}
`

// codeLine represents a line of code extracted from a source file.
type codeLine struct {
	L  string // The line of code.
	N  int    // The line number from the source file.
	HL bool   // Whether the line should be highlighted.
}

// codeLines takes a source file and returns the lines that
// span the byte range specified by start and end.
// It discards lines that end in "OMIT".
func codeLines(src []byte, start, end int) (lines []codeLine) {
	startLine := 1
	for i, b := range src {
		if i == start {
			break
		}
		if b == '\n' {
			startLine++
		}
	}
	s := bufio.NewScanner(bytes.NewReader(src[start:end]))
	for n := startLine; s.Scan(); n++ {
		l := s.Text()
		if strings.HasSuffix(l, "OMIT") {
			continue
		}
		lines = append(lines, codeLine{L: l, N: n})
	}
	// Trim leading and trailing blank lines.
	for len(lines) > 0 && len(lines[0].L) == 0 {
		lines = lines[1:]
	}
	for len(lines) > 0 && len(lines[len(lines)-1].L) == 0 {
		lines = lines[:len(lines)-1]
	}
	return
}

func parseArgs(name string, line int, args []string) (res []interface{}, err error) {
	res = make([]interface{}, len(args))
	for i, v := range args {
		if len(v) == 0 {
			return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
		}
		switch v[0] {
		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
			n, err := strconv.Atoi(v)
			if err != nil {
				return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
			}
			res[i] = n
		case '/':
			if len(v) < 2 || v[len(v)-1] != '/' {
				return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
			}
			res[i] = v
		case '$':
			res[i] = "$"
		case '_':
			if len(v) == 1 {
				// Do nothing; "_" indicates an intentionally empty parameter.
				break
			}
			fallthrough
		default:
			return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
		}
	}
	return
}

// parseArg returns the integer or string value of the argument and tells which it is.
func parseArg(arg interface{}, max int) (ival int, sval string, isInt bool, err error) {
	switch n := arg.(type) {
	case int:
		if n <= 0 || n > max {
			return 0, "", false, fmt.Errorf("%d is out of range", n)
		}
		return n, "", true, nil
	case string:
		return 0, n, false, nil
	}
	return 0, "", false, fmt.Errorf("unrecognized argument %v type %T", arg, arg)
}

// match identifies the input line that matches the pattern in a code invocation.
// If start>0, match lines starting there rather than at the beginning.
// The return value is 1-indexed.
func match(file string, start int, lines []string, pattern string) (int, error) {
	// $ matches the end of the file.
	if pattern == "$" {
		if len(lines) == 0 {
			return 0, fmt.Errorf("%q: empty file", file)
		}
		return len(lines), nil
	}
	// /regexp/ matches the line that matches the regexp.
	if len(pattern) > 2 && pattern[0] == '/' && pattern[len(pattern)-1] == '/' {
		re, err := regexp.Compile(pattern[1 : len(pattern)-1])
		if err != nil {
			return 0, err
		}
		for i := start; i < len(lines); i++ {
			if re.MatchString(lines[i]) {
				return i + 1, nil
			}
		}
		return 0, fmt.Errorf("%s: no match for %#q", file, pattern)
	}
	return 0, fmt.Errorf("unrecognized pattern: %q", pattern)
}
                                                                                                                                                                      go/src/golang.org/x/tools/present/doc.go                                                            0100644 0000000 0000000 00000013513 13101127476 016666  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
The present file format

Present files have the following format.  The first non-blank non-comment
line is the title, so the header looks like

	Title of document
	Subtitle of document
	15:04 2 Jan 2006
	Tags: foo, bar, baz
	<blank line>
	Author Name
	Job title, Company
	joe@example.com
	http://url/
	@twitter_name

The subtitle, date, and tags lines are optional.

The date line may be written without a time:
	2 Jan 2006
In this case, the time will be interpreted as 10am UTC on that date.

The tags line is a comma-separated list of tags that may be used to categorize
the document.

The author section may contain a mixture of text, twitter names, and links.
For slide presentations, only the plain text lines will be displayed on the
first slide.

Multiple presenters may be specified, separated by a blank line.

After that come slides/sections, each after a blank line:

	* Title of slide or section (must have asterisk)

	Some Text

	** Subsection

	- bullets
	- more bullets
	- a bullet with

	*** Sub-subsection

	Some More text

	  Preformatted text
	  is indented (however you like)

	Further Text, including invocations like:

	.code x.go /^func main/,/^}/
	.play y.go
	.image image.jpg
	.iframe http://foo
	.link http://foo label
	.html file.html
	.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

	Again, more text

Blank lines are OK (not mandatory) after the title and after the
text.  Text, bullets, and .code etc. are all optional; title is
not.

Lines starting with # in column 1 are commentary.

Fonts:

Within the input for plain text or lists, text bracketed by font
markers will be presented in italic, bold, or program font.
Marker characters are _ (italic), * (bold) and ` (program font).
Unmatched markers appear as plain text.
Within marked text, a single marker character becomes a space
and a doubled single marker quotes the marker character.

	_italic_
	*bold*
	`program`
	_this_is_all_italic_
	_Why_use_scoped__ptr_? Use plain ***ptr* instead.

Inline links:

Links can be included in any text with the form [[url][label]], or
[[url]] to use the URL itself as the label.

Functions:

A number of template functions are available through invocations
in the input text. Each such invocation contains a period as the
first character on the line, followed immediately by the name of
the function, followed by any arguments. A typical invocation might
be
	.play demo.go /^func show/,/^}/
(except that the ".play" must be at the beginning of the line and
not be indented like this.)

Here follows a description of the functions:

code:

Injects program source into the output by extracting code from files
and injecting them as HTML-escaped <pre> blocks.  The argument is
a file name followed by an optional address that specifies what
section of the file to display. The address syntax is similar in
its simplest form to that of ed, but comes from sam and is more
general. See
	http://plan9.bell-labs.com/sys/doc/sam/sam.html Table II
for full details. The displayed block is always rounded out to a
full line at both ends.

If no pattern is present, the entire file is displayed.

Any line in the program that ends with the four characters
	OMIT
is deleted from the source before inclusion, making it easy
to write things like
	.code test.go /START OMIT/,/END OMIT/
to find snippets like this
	tedious_code = boring_function()
	// START OMIT
	interesting_code = fascinating_function()
	// END OMIT
and see only this:
	interesting_code = fascinating_function()

Also, inside the displayed text a line that ends
	// HL
will be highlighted in the display; the 'h' key in the browser will
toggle extra emphasis of any highlighted lines. A highlighting mark
may have a suffix word, such as
	// HLxxx
Such highlights are enabled only if the code invocation ends with
"HL" followed by the word:
	.code test.go /^type Foo/,/^}/ HLxxx

The .code function may take one or more flags immediately preceding
the filename. This command shows test.go in an editable text area:
	.code -edit test.go
This command shows test.go with line numbers:
	.code -numbers test.go

play:

The function "play" is the same as "code" but puts a button
on the displayed source so the program can be run from the browser.
Although only the selected text is shown, all the source is included
in the HTML output so it can be presented to the compiler.

link:

Create a hyperlink. The syntax is 1 or 2 space-separated arguments.
The first argument is always the HTTP URL.  If there is a second
argument, it is the text label to display for this link.

	.link http://golang.org golang.org

image:

The template uses the function "image" to inject picture files.

The syntax is simple: 1 or 3 space-separated arguments.
The first argument is always the file name.
If there are more arguments, they are the height and width;
both must be present, or substituted with an underscore.
Replacing a dimension argument with the underscore parameter
preserves the aspect ratio of the image when scaling.

	.image images/betsy.jpg 100 200

	.image images/janet.jpg _ 300


caption:

The template uses the function "caption" to inject figure captions.

The text after ".caption" is embedded in a figcaption element after
processing styling and links as in standard text lines.

	.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

iframe:

The function "iframe" injects iframes (pages inside pages).
Its syntax is the same as that of image.

html:

The function html includes the contents of the specified file as
unescaped HTML. This is useful for including custom HTML elements
that cannot be created using only the slide format.
It is your responsibilty to make sure the included HTML is valid and safe.

	.html file.html

*/
package present // import "golang.org/x/tools/present"
                                                                                                                                                                                     go/src/golang.org/x/tools/present/html.go                                                           0100644 0000000 0000000 00000001063 13101127475 017061  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package present

import (
	"errors"
	"html/template"
	"path/filepath"
	"strings"
)

func init() {
	Register("html", parseHTML)
}

func parseHTML(ctx *Context, fileName string, lineno int, text string) (Elem, error) {
	p := strings.Fields(text)
	if len(p) != 2 {
		return nil, errors.New("invalid .html args")
	}
	name := filepath.Join(filepath.Dir(fileName), p[1])
	b, err := ctx.ReadFile(name)
	if err != nil {
		return nil, err
	}
	return HTML{template.HTML(b)}, nil
}

type HTML struct {
	template.HTML
}

func (s HTML) TemplateName() string { return "html" }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/present/iframe.go                                                         0100644 0000000 0000000 00000001543 13101127476 017364  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"fmt"
	"strings"
)

func init() {
	Register("iframe", parseIframe)
}

type Iframe struct {
	URL    string
	Width  int
	Height int
}

func (i Iframe) TemplateName() string { return "iframe" }

func parseIframe(ctx *Context, fileName string, lineno int, text string) (Elem, error) {
	args := strings.Fields(text)
	i := Iframe{URL: args[1]}
	a, err := parseArgs(fileName, lineno, args[2:])
	if err != nil {
		return nil, err
	}
	switch len(a) {
	case 0:
		// no size parameters
	case 2:
		if v, ok := a[0].(int); ok {
			i.Height = v
		}
		if v, ok := a[1].(int); ok {
			i.Width = v
		}
	default:
		return nil, fmt.Errorf("incorrect image invocation: %q", text)
	}
	return i, nil
}
                                                                                                                                                             go/src/golang.org/x/tools/present/image.go                                                          0100644 0000000 0000000 00000002123 13101127475 017175  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"fmt"
	"strings"
)

func init() {
	Register("image", parseImage)
}

type Image struct {
	URL    string
	Width  int
	Height int
}

func (i Image) TemplateName() string { return "image" }

func parseImage(ctx *Context, fileName string, lineno int, text string) (Elem, error) {
	args := strings.Fields(text)
	img := Image{URL: args[1]}
	a, err := parseArgs(fileName, lineno, args[2:])
	if err != nil {
		return nil, err
	}
	switch len(a) {
	case 0:
		// no size parameters
	case 2:
		// If a parameter is empty (underscore) or invalid
		// leave the field set to zero. The "image" action
		// template will then omit that img tag attribute and
		// the browser will calculate the value to preserve
		// the aspect ratio.
		if v, ok := a[0].(int); ok {
			img.Height = v
		}
		if v, ok := a[1].(int); ok {
			img.Width = v
		}
	default:
		return nil, fmt.Errorf("incorrect image invocation: %q", text)
	}
	return img, nil
}
                                                                                                                                                                                                                                                                                                                                                                                                                                             go/src/golang.org/x/tools/present/link.go                                                           0100644 0000000 0000000 00000004615 13101127475 017060  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"fmt"
	"log"
	"net/url"
	"strings"
)

func init() {
	Register("link", parseLink)
}

type Link struct {
	URL   *url.URL
	Label string
}

func (l Link) TemplateName() string { return "link" }

func parseLink(ctx *Context, fileName string, lineno int, text string) (Elem, error) {
	args := strings.Fields(text)
	url, err := url.Parse(args[1])
	if err != nil {
		return nil, err
	}
	label := ""
	if len(args) > 2 {
		label = strings.Join(args[2:], " ")
	} else {
		scheme := url.Scheme + "://"
		if url.Scheme == "mailto" {
			scheme = "mailto:"
		}
		label = strings.Replace(url.String(), scheme, "", 1)
	}
	return Link{url, label}, nil
}

func renderLink(href, text string) string {
	text = font(text)
	if text == "" {
		text = href
	}
	// Open links in new window only when their url is absolute.
	target := "_blank"
	if u, err := url.Parse(href); err != nil {
		log.Println("rendernLink parsing url:", err)
	} else if !u.IsAbs() || u.Scheme == "javascript" {
		target = "_self"
	}

	return fmt.Sprintf(`<a href="%s" target="%s">%s</a>`, href, target, text)
}

// parseInlineLink parses an inline link at the start of s, and returns
// a rendered HTML link and the total length of the raw inline link.
// If no inline link is present, it returns all zeroes.
func parseInlineLink(s string) (link string, length int) {
	if !strings.HasPrefix(s, "[[") {
		return
	}
	end := strings.Index(s, "]]")
	if end == -1 {
		return
	}
	urlEnd := strings.Index(s, "]")
	rawURL := s[2:urlEnd]
	const badURLChars = `<>"{}|\^[] ` + "`" // per RFC2396 section 2.4.3
	if strings.ContainsAny(rawURL, badURLChars) {
		return
	}
	if urlEnd == end {
		simpleUrl := ""
		url, err := url.Parse(rawURL)
		if err == nil {
			// If the URL is http://foo.com, drop the http://
			// In other words, render [[http://golang.org]] as:
			//   <a href="http://golang.org">golang.org</a>
			if strings.HasPrefix(rawURL, url.Scheme+"://") {
				simpleUrl = strings.TrimPrefix(rawURL, url.Scheme+"://")
			} else if strings.HasPrefix(rawURL, url.Scheme+":") {
				simpleUrl = strings.TrimPrefix(rawURL, url.Scheme+":")
			}
		}
		return renderLink(rawURL, simpleUrl), end + 2
	}
	if s[urlEnd:urlEnd+2] != "][" {
		return
	}
	text := s[urlEnd+2 : end]
	return renderLink(rawURL, text), end + 2
}
                                                                                                                   go/src/golang.org/x/tools/present/link_test.go                                                      0100644 0000000 0000000 00000002765 13101127475 020123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import "testing"

func TestInlineParsing(t *testing.T) {
	var tests = []struct {
		in     string
		link   string
		text   string
		length int
	}{
		{"[[http://golang.org]]", "http://golang.org", "golang.org", 21},
		{"[[http://golang.org][]]", "http://golang.org", "http://golang.org", 23},
		{"[[http://golang.org]] this is ignored", "http://golang.org", "golang.org", 21},
		{"[[http://golang.org][link]]", "http://golang.org", "link", 27},
		{"[[http://golang.org][two words]]", "http://golang.org", "two words", 32},
		{"[[http://golang.org][*link*]]", "http://golang.org", "<b>link</b>", 29},
		{"[[http://bad[url]]", "", "", 0},
		{"[[http://golang.org][a [[link]] ]]", "http://golang.org", "a [[link", 31},
		{"[[http:// *spaces* .com]]", "", "", 0},
		{"[[http://bad`char.com]]", "", "", 0},
		{" [[http://google.com]]", "", "", 0},
		{"[[mailto:gopher@golang.org][Gopher]]", "mailto:gopher@golang.org", "Gopher", 36},
		{"[[mailto:gopher@golang.org]]", "mailto:gopher@golang.org", "gopher@golang.org", 28},
	}

	for i, test := range tests {
		link, length := parseInlineLink(test.in)
		if length == 0 && test.length == 0 {
			continue
		}
		if a := renderLink(test.link, test.text); length != test.length || link != a {
			t.Errorf("#%d: parseInlineLink(%q):\ngot\t%q, %d\nwant\t%q, %d", i, test.in, link, length, a, test.length)
		}
	}
}
           go/src/golang.org/x/tools/present/parse.go                                                          0100644 0000000 0000000 00000027367 13101127476 017247  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"html/template"
	"io"
	"io/ioutil"
	"log"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode"
	"unicode/utf8"
)

var (
	parsers = make(map[string]ParseFunc)
	funcs   = template.FuncMap{}
)

// Template returns an empty template with the action functions in its FuncMap.
func Template() *template.Template {
	return template.New("").Funcs(funcs)
}

// Render renders the doc to the given writer using the provided template.
func (d *Doc) Render(w io.Writer, t *template.Template) error {
	data := struct {
		*Doc
		Template    *template.Template
		PlayEnabled bool
	}{d, t, PlayEnabled}
	return t.ExecuteTemplate(w, "root", data)
}

// Render renders the section to the given writer using the provided template.
func (s *Section) Render(w io.Writer, t *template.Template) error {
	data := struct {
		*Section
		Template    *template.Template
		PlayEnabled bool
	}{s, t, PlayEnabled}
	return t.ExecuteTemplate(w, "section", data)
}

type ParseFunc func(ctx *Context, fileName string, lineNumber int, inputLine string) (Elem, error)

// Register binds the named action, which does not begin with a period, to the
// specified parser to be invoked when the name, with a period, appears in the
// present input text.
func Register(name string, parser ParseFunc) {
	if len(name) == 0 || name[0] == ';' {
		panic("bad name in Register: " + name)
	}
	parsers["."+name] = parser
}

// Doc represents an entire document.
type Doc struct {
	Title    string
	Subtitle string
	Time     time.Time
	Authors  []Author
	Sections []Section
	Tags     []string
}

// Author represents the person who wrote and/or is presenting the document.
type Author struct {
	Elem []Elem
}

// TextElem returns the first text elements of the author details.
// This is used to display the author' name, job title, and company
// without the contact details.
func (p *Author) TextElem() (elems []Elem) {
	for _, el := range p.Elem {
		if _, ok := el.(Text); !ok {
			break
		}
		elems = append(elems, el)
	}
	return
}

// Section represents a section of a document (such as a presentation slide)
// comprising a title and a list of elements.
type Section struct {
	Number []int
	Title  string
	Elem   []Elem
}

func (s Section) Sections() (sections []Section) {
	for _, e := range s.Elem {
		if section, ok := e.(Section); ok {
			sections = append(sections, section)
		}
	}
	return
}

// Level returns the level of the given section.
// The document title is level 1, main section 2, etc.
func (s Section) Level() int {
	return len(s.Number) + 1
}

// FormattedNumber returns a string containing the concatenation of the
// numbers identifying a Section.
func (s Section) FormattedNumber() string {
	b := &bytes.Buffer{}
	for _, n := range s.Number {
		fmt.Fprintf(b, "%v.", n)
	}
	return b.String()
}

func (s Section) TemplateName() string { return "section" }

// Elem defines the interface for a present element. That is, something that
// can provide the name of the template used to render the element.
type Elem interface {
	TemplateName() string
}

// renderElem implements the elem template function, used to render
// sub-templates.
func renderElem(t *template.Template, e Elem) (template.HTML, error) {
	var data interface{} = e
	if s, ok := e.(Section); ok {
		data = struct {
			Section
			Template *template.Template
		}{s, t}
	}
	return execTemplate(t, e.TemplateName(), data)
}

func init() {
	funcs["elem"] = renderElem
}

// execTemplate is a helper to execute a template and return the output as a
// template.HTML value.
func execTemplate(t *template.Template, name string, data interface{}) (template.HTML, error) {
	b := new(bytes.Buffer)
	err := t.ExecuteTemplate(b, name, data)
	if err != nil {
		return "", err
	}
	return template.HTML(b.String()), nil
}

// Text represents an optionally preformatted paragraph.
type Text struct {
	Lines []string
	Pre   bool
}

func (t Text) TemplateName() string { return "text" }

// List represents a bulleted list.
type List struct {
	Bullet []string
}

func (l List) TemplateName() string { return "list" }

// Lines is a helper for parsing line-based input.
type Lines struct {
	line int // 0 indexed, so has 1-indexed number of last line returned
	text []string
}

func readLines(r io.Reader) (*Lines, error) {
	var lines []string
	s := bufio.NewScanner(r)
	for s.Scan() {
		lines = append(lines, s.Text())
	}
	if err := s.Err(); err != nil {
		return nil, err
	}
	return &Lines{0, lines}, nil
}

func (l *Lines) next() (text string, ok bool) {
	for {
		current := l.line
		l.line++
		if current >= len(l.text) {
			return "", false
		}
		text = l.text[current]
		// Lines starting with # are comments.
		if len(text) == 0 || text[0] != '#' {
			ok = true
			break
		}
	}
	return
}

func (l *Lines) back() {
	l.line--
}

func (l *Lines) nextNonEmpty() (text string, ok bool) {
	for {
		text, ok = l.next()
		if !ok {
			return
		}
		if len(text) > 0 {
			break
		}
	}
	return
}

// A Context specifies the supporting context for parsing a presentation.
type Context struct {
	// ReadFile reads the file named by filename and returns the contents.
	ReadFile func(filename string) ([]byte, error)
}

// ParseMode represents flags for the Parse function.
type ParseMode int

const (
	// If set, parse only the title and subtitle.
	TitlesOnly ParseMode = 1
)

// Parse parses a document from r.
func (ctx *Context) Parse(r io.Reader, name string, mode ParseMode) (*Doc, error) {
	doc := new(Doc)
	lines, err := readLines(r)
	if err != nil {
		return nil, err
	}
	err = parseHeader(doc, lines)
	if err != nil {
		return nil, err
	}
	if mode&TitlesOnly != 0 {
		return doc, nil
	}
	// Authors
	if doc.Authors, err = parseAuthors(lines); err != nil {
		return nil, err
	}
	// Sections
	if doc.Sections, err = parseSections(ctx, name, lines, []int{}, doc); err != nil {
		return nil, err
	}
	return doc, nil
}

// Parse parses a document from r. Parse reads assets used by the presentation
// from the file system using ioutil.ReadFile.
func Parse(r io.Reader, name string, mode ParseMode) (*Doc, error) {
	ctx := Context{ReadFile: ioutil.ReadFile}
	return ctx.Parse(r, name, mode)
}

// isHeading matches any section heading.
var isHeading = regexp.MustCompile(`^\*+ `)

// lesserHeading returns true if text is a heading of a lesser or equal level
// than that denoted by prefix.
func lesserHeading(text, prefix string) bool {
	return isHeading.MatchString(text) && !strings.HasPrefix(text, prefix+"*")
}

// parseSections parses Sections from lines for the section level indicated by
// number (a nil number indicates the top level).
func parseSections(ctx *Context, name string, lines *Lines, number []int, doc *Doc) ([]Section, error) {
	var sections []Section
	for i := 1; ; i++ {
		// Next non-empty line is title.
		text, ok := lines.nextNonEmpty()
		for ok && text == "" {
			text, ok = lines.next()
		}
		if !ok {
			break
		}
		prefix := strings.Repeat("*", len(number)+1)
		if !strings.HasPrefix(text, prefix+" ") {
			lines.back()
			break
		}
		section := Section{
			Number: append(append([]int{}, number...), i),
			Title:  text[len(prefix)+1:],
		}
		text, ok = lines.nextNonEmpty()
		for ok && !lesserHeading(text, prefix) {
			var e Elem
			r, _ := utf8.DecodeRuneInString(text)
			switch {
			case unicode.IsSpace(r):
				i := strings.IndexFunc(text, func(r rune) bool {
					return !unicode.IsSpace(r)
				})
				if i < 0 {
					break
				}
				indent := text[:i]
				var s []string
				for ok && (strings.HasPrefix(text, indent) || text == "") {
					if text != "" {
						text = text[i:]
					}
					s = append(s, text)
					text, ok = lines.next()
				}
				lines.back()
				pre := strings.Join(s, "\n")
				pre = strings.Replace(pre, "\t", "    ", -1) // browsers treat tabs badly
				pre = strings.TrimRightFunc(pre, unicode.IsSpace)
				e = Text{Lines: []string{pre}, Pre: true}
			case strings.HasPrefix(text, "- "):
				var b []string
				for ok && strings.HasPrefix(text, "- ") {
					b = append(b, text[2:])
					text, ok = lines.next()
				}
				lines.back()
				e = List{Bullet: b}
			case strings.HasPrefix(text, prefix+"* "):
				lines.back()
				subsecs, err := parseSections(ctx, name, lines, section.Number, doc)
				if err != nil {
					return nil, err
				}
				for _, ss := range subsecs {
					section.Elem = append(section.Elem, ss)
				}
			case strings.HasPrefix(text, "."):
				args := strings.Fields(text)
				parser := parsers[args[0]]
				if parser == nil {
					return nil, fmt.Errorf("%s:%d: unknown command %q\n", name, lines.line, text)
				}
				t, err := parser(ctx, name, lines.line, text)
				if err != nil {
					return nil, err
				}
				e = t
			default:
				var l []string
				for ok && strings.TrimSpace(text) != "" {
					if text[0] == '.' { // Command breaks text block.
						lines.back()
						break
					}
					if strings.HasPrefix(text, `\.`) { // Backslash escapes initial period.
						text = text[1:]
					}
					l = append(l, text)
					text, ok = lines.next()
				}
				if len(l) > 0 {
					e = Text{Lines: l}
				}
			}
			if e != nil {
				section.Elem = append(section.Elem, e)
			}
			text, ok = lines.nextNonEmpty()
		}
		if isHeading.MatchString(text) {
			lines.back()
		}
		sections = append(sections, section)
	}
	return sections, nil
}

func parseHeader(doc *Doc, lines *Lines) error {
	var ok bool
	// First non-empty line starts header.
	doc.Title, ok = lines.nextNonEmpty()
	if !ok {
		return errors.New("unexpected EOF; expected title")
	}
	for {
		text, ok := lines.next()
		if !ok {
			return errors.New("unexpected EOF")
		}
		if text == "" {
			break
		}
		const tagPrefix = "Tags:"
		if strings.HasPrefix(text, tagPrefix) {
			tags := strings.Split(text[len(tagPrefix):], ",")
			for i := range tags {
				tags[i] = strings.TrimSpace(tags[i])
			}
			doc.Tags = append(doc.Tags, tags...)
		} else if t, ok := parseTime(text); ok {
			doc.Time = t
		} else if doc.Subtitle == "" {
			doc.Subtitle = text
		} else {
			return fmt.Errorf("unexpected header line: %q", text)
		}
	}
	return nil
}

func parseAuthors(lines *Lines) (authors []Author, err error) {
	// This grammar demarcates authors with blanks.

	// Skip blank lines.
	if _, ok := lines.nextNonEmpty(); !ok {
		return nil, errors.New("unexpected EOF")
	}
	lines.back()

	var a *Author
	for {
		text, ok := lines.next()
		if !ok {
			return nil, errors.New("unexpected EOF")
		}

		// If we find a section heading, we're done.
		if strings.HasPrefix(text, "* ") {
			lines.back()
			break
		}

		// If we encounter a blank we're done with this author.
		if a != nil && len(text) == 0 {
			authors = append(authors, *a)
			a = nil
			continue
		}
		if a == nil {
			a = new(Author)
		}

		// Parse the line. Those that
		// - begin with @ are twitter names,
		// - contain slashes are links, or
		// - contain an @ symbol are an email address.
		// The rest is just text.
		var el Elem
		switch {
		case strings.HasPrefix(text, "@"):
			el = parseURL("http://twitter.com/" + text[1:])
		case strings.Contains(text, ":"):
			el = parseURL(text)
		case strings.Contains(text, "@"):
			el = parseURL("mailto:" + text)
		}
		if l, ok := el.(Link); ok {
			l.Label = text
			el = l
		}
		if el == nil {
			el = Text{Lines: []string{text}}
		}
		a.Elem = append(a.Elem, el)
	}
	if a != nil {
		authors = append(authors, *a)
	}
	return authors, nil
}

func parseURL(text string) Elem {
	u, err := url.Parse(text)
	if err != nil {
		log.Printf("Parse(%q): %v", text, err)
		return nil
	}
	return Link{URL: u}
}

func parseTime(text string) (t time.Time, ok bool) {
	t, err := time.Parse("15:04 2 Jan 2006", text)
	if err == nil {
		return t, true
	}
	t, err = time.Parse("2 Jan 2006", text)
	if err == nil {
		// at 11am UTC it is the same date everywhere
		t = t.Add(time.Hour * 11)
		return t, true
	}
	return time.Time{}, false
}
                                                                                                                                                                                                                                                                         go/src/golang.org/x/tools/present/style.go                                                          0100644 0000000 0000000 00000007535 13101127476 017270  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"bytes"
	"html"
	"html/template"
	"strings"
	"unicode"
	"unicode/utf8"
)

/*
	Fonts are demarcated by an initial and final char bracketing a
	space-delimited word, plus possibly some terminal punctuation.
	The chars are
		_ for italic
		* for bold
		` (back quote) for fixed width.
	Inner appearances of the char become spaces. For instance,
		_this_is_italic_!
	becomes
		<i>this is italic</i>!
*/

func init() {
	funcs["style"] = Style
}

// Style returns s with HTML entities escaped and font indicators turned into
// HTML font tags.
func Style(s string) template.HTML {
	return template.HTML(font(html.EscapeString(s)))
}

// font returns s with font indicators turned into HTML font tags.
func font(s string) string {
	if strings.IndexAny(s, "[`_*") == -1 {
		return s
	}
	words := split(s)
	var b bytes.Buffer
Word:
	for w, word := range words {
		if len(word) < 2 {
			continue Word
		}
		if link, _ := parseInlineLink(word); link != "" {
			words[w] = link
			continue Word
		}
		const punctuation = `.,;:()!?—–'"`
		const marker = "_*`"
		// Initial punctuation is OK but must be peeled off.
		first := strings.IndexAny(word, marker)
		if first == -1 {
			continue Word
		}
		// Is the marker prefixed only by punctuation?
		for _, r := range word[:first] {
			if !strings.ContainsRune(punctuation, r) {
				continue Word
			}
		}
		open, word := word[:first], word[first:]
		char := word[0] // ASCII is OK.
		close := ""
		switch char {
		default:
			continue Word
		case '_':
			open += "<i>"
			close = "</i>"
		case '*':
			open += "<b>"
			close = "</b>"
		case '`':
			open += "<code>"
			close = "</code>"
		}
		// Terminal punctuation is OK but must be peeled off.
		last := strings.LastIndex(word, word[:1])
		if last == 0 {
			continue Word
		}
		head, tail := word[:last+1], word[last+1:]
		for _, r := range tail {
			if !strings.ContainsRune(punctuation, r) {
				continue Word
			}
		}
		b.Reset()
		b.WriteString(open)
		var wid int
		for i := 1; i < len(head)-1; i += wid {
			var r rune
			r, wid = utf8.DecodeRuneInString(head[i:])
			if r != rune(char) {
				// Ordinary character.
				b.WriteRune(r)
				continue
			}
			if head[i+1] != char {
				// Inner char becomes space.
				b.WriteRune(' ')
				continue
			}
			// Doubled char becomes real char.
			// Not worth worrying about "_x__".
			b.WriteByte(char)
			wid++ // Consumed two chars, both ASCII.
		}
		b.WriteString(close) // Write closing tag.
		b.WriteString(tail)  // Restore trailing punctuation.
		words[w] = b.String()
	}
	return strings.Join(words, "")
}

// split is like strings.Fields but also returns the runs of spaces
// and treats inline links as distinct words.
func split(s string) []string {
	var (
		words = make([]string, 0, 10)
		start = 0
	)

	// appendWord appends the string s[start:end] to the words slice.
	// If the word contains the beginning of a link, the non-link portion
	// of the word and the entire link are appended as separate words,
	// and the start index is advanced to the end of the link.
	appendWord := func(end int) {
		if j := strings.Index(s[start:end], "[["); j > -1 {
			if _, l := parseInlineLink(s[start+j:]); l > 0 {
				// Append portion before link, if any.
				if j > 0 {
					words = append(words, s[start:start+j])
				}
				// Append link itself.
				words = append(words, s[start+j:start+j+l])
				// Advance start index to end of link.
				start = start + j + l
				return
			}
		}
		// No link; just add the word.
		words = append(words, s[start:end])
		start = end
	}

	wasSpace := false
	for i, r := range s {
		isSpace := unicode.IsSpace(r)
		if i > start && isSpace != wasSpace {
			appendWord(i)
		}
		wasSpace = isSpace
	}
	for start < len(s) {
		appendWord(len(s))
	}
	return words
}
                                                                                                                                                                   go/src/golang.org/x/tools/present/style_test.go                                                     0100644 0000000 0000000 00000007107 13101127476 020322  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package present

import (
	"fmt"
	"reflect"
	"testing"
)

func TestSplit(t *testing.T) {
	var tests = []struct {
		in  string
		out []string
	}{
		{"", []string{}},
		{" ", []string{" "}},
		{"abc", []string{"abc"}},
		{"abc def", []string{"abc", " ", "def"}},
		{"abc def ", []string{"abc", " ", "def", " "}},
		{"hey [[http://golang.org][Gophers]] around",
			[]string{"hey", " ", "[[http://golang.org][Gophers]]", " ", "around"}},
		{"A [[http://golang.org/doc][two words]] link",
			[]string{"A", " ", "[[http://golang.org/doc][two words]]", " ", "link"}},
		{"Visit [[http://golang.org/doc]] now",
			[]string{"Visit", " ", "[[http://golang.org/doc]]", " ", "now"}},
		{"not [[http://golang.org/doc][a [[link]] ]] around",
			[]string{"not", " ", "[[http://golang.org/doc][a [[link]]", " ", "]]", " ", "around"}},
		{"[[http://golang.org][foo bar]]",
			[]str