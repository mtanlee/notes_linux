ion "band()"
.Vb 1
\&        $x\->band($y);                   # bitwise and
.Ve
.SS "\fIbior()\fP"
.IX Subsection "bior()"
.Vb 1
\&        $x\->bior($y);                   # bitwise inclusive or
.Ve
.SS "\fIbxor()\fP"
.IX Subsection "bxor()"
.Vb 1
\&        $x\->bxor($y);                   # bitwise exclusive or
.Ve
.SS "\fIbnot()\fP"
.IX Subsection "bnot()"
.Vb 1
\&        $x\->bnot();                     # bitwise not (two\*(Aqs complement)
.Ve
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();                    # calculate square\-root
.Ve
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($N);
.Ve
.PP
Calculates the N'th root of \f(CW$x\fR.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();                     # factorial of $x (1*2*3*4*..$x)
.Ve
.SS "\fIround()\fP"
.IX Subsection "round()"
.Vb 1
\&        $x\->round($A,$P,$round_mode);
.Ve
.PP
Round \f(CW$x\fR to accuracy \f(CW$A\fR or precision \f(CW$P\fR using the round mode
\&\f(CW$round_mode\fR.
.SS "\fIbround()\fP"
.IX Subsection "bround()"
.Vb 1
\&        $x\->bround($N);               # accuracy: preserve $N digits
.Ve
.SS "\fIbfround()\fP"
.IX Subsection "bfround()"
.Vb 1
\&        $x\->bfround($N);
.Ve
.PP
If N is > 0, rounds to the Nth digit from the left. If N < 0, rounds to
the Nth digit after the dot. Since BigInts are integers, the case N < 0
is a no-op for them.
.PP
Examples:
.PP
.Vb 6
\&        Input           N               Result
\&        ===================================================
\&        123456.123456   3               123500
\&        123456.123456   2               123450
\&        123456.123456   \-2              123456.12
\&        123456.123456   \-3              123456.123
.Ve
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Set \f(CW$x\fR to the integer less or equal than \f(CW$x\fR. This is a no-op in BigInt, but
does change \f(CW$x\fR in BigFloat.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR to the integer greater or equal than \f(CW$x\fR. This is a no-op in BigInt, but
does change \f(CW$x\fR in BigFloat.
.SS "\fIbgcd()\fP"
.IX Subsection "bgcd()"
.Vb 1
\&        bgcd(@values);          # greatest common divisor (no OO style)
.Ve
.SS "\fIblcm()\fP"
.IX Subsection "blcm()"
.Vb 1
\&        blcm(@values);          # lowest common multiple (no OO style)
.Ve
.PP
head2 \fIlength()\fR
.PP
.Vb 2
\&        $x\->length();
\&        ($xl,$fl) = $x\->length();
.Ve
.PP
Returns the number of digits in the decimal representation of the number.
In list context, returns the length of the integer and fraction part. For
BigInt's, the length of the fraction part will always be 0.
.SS "\fIexponent()\fP"
.IX Subsection "exponent()"
.Vb 1
\&        $x\->exponent();
.Ve
.PP
Return the exponent of \f(CW$x\fR as BigInt.
.SS "\fImantissa()\fP"
.IX Subsection "mantissa()"
.Vb 1
\&        $x\->mantissa();
.Ve
.PP
Return the signed mantissa of \f(CW$x\fR as BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        $x\->parts();    # return (mantissa,exponent) as BigInt
.Ve
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        $x\->copy();     # make a true copy of $x (unlike $y = $x;)
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 1
\&        $x\->as_int();
.Ve
.PP
Returns \f(CW$x\fR as a BigInt (truncated towards zero). In BigInt this is the same as
\&\f(CW\*(C`copy()\*(C'\fR.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR is an alias to this method. \f(CW\*(C`as_number\*(C'\fR was introduced in
v1.22, while \f(CW\*(C`as_int()\*(C'\fR was only introduced in v1.68.
.SS "\fIbstr()\fP"
.IX Subsection "bstr()"
.Vb 1
\&        $x\->bstr();
.Ve
.PP
Returns a normalized string representation of \f(CW$x\fR.
.SS "\fIbsstr()\fP"
.IX Subsection "bsstr()"
.Vb 1
\&        $x\->bsstr();    # normalized string in scientific notation
.Ve
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 1
\&        $x\->as_hex();   # as signed hexadecimal string with prefixed 0x
.Ve
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 1
\&        $x\->as_bin();   # as signed binary string with prefixed 0b
.Ve
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 1
\&        $x\->as_oct();   # as signed octal string with prefixed 0
.Ve
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        print $x\->numify();
.Ve
.PP
This returns a normal Perl scalar from \f(CW$x\fR. It is used automatically
whenever a scalar is needed, for instance in array index operations.
.PP
This loses precision, to avoid this use \fIas_int()\fR instead.
.SS "\fImodify()\fP"
.IX Subsection "modify()"
.Vb 1
\&        $x\->modify(\*(Aqbpowd\*(Aq);
.Ve
.PP
This method returns 0 if the object can be modified with the given
operation, or 1 if not.
.PP
This is used for instance by Math::BigInt::Constant.
.SS "\fIupgrade()\fP/\fIdowngrade()\fP"
.IX Subsection "upgrade()/downgrade()"
Set/get the class for downgrade/upgrade operations. Thuis is used
for instance by bignum. The defaults are '', thus the following
operation will create a BigInt, not a BigFloat:
.PP
.Vb 2
\&        my $i = Math::BigInt\->new(123);
\&        my $f = Math::BigFloat\->new(\*(Aq123.1\*(Aq);
\&
\&        print $i + $f,"\en";                     # print 246
.Ve
.SS "\fIdiv_scale()\fP"
.IX Subsection "div_scale()"
Set/get the number of digits for the default precision in divide
operations.
.SS "\fIround_mode()\fP"
.IX Subsection "round_mode()"
Set/get the current round mode.
.SH "ACCURACY and PRECISION"
.IX Header "ACCURACY and PRECISION"
Since version v1.33, Math::BigInt and Math::BigFloat have full support for
accuracy and precision based rounding, both automatically after every
operation, as well as manually.
.PP
This section describes the accuracy/precision handling in Math::Big* as it
used to be and as it is now, complete with an explanation of all terms and
abbreviations.
.PP
Not yet implemented things (but with correct description) are marked with '!',
things that need to be answered are marked with '?'.
.PP
In the next paragraph follows a short description of terms used here (because
these may differ from terms used by others people or documentation).
.PP
During the rest of this document, the shortcuts A (for accuracy), P (for
precision), F (fallback) and R (rounding mode) will be used.
.SS "Precision P"
.IX Subsection "Precision P"
A fixed number of digits before (positive) or after (negative)
the decimal point. For example, 123.45 has a precision of \-2. 0 means an
integer like 123 (or 120). A precision of 2 means two digits to the left
of the decimal point are zero, so 123 with P = 1 becomes 120. Note that
numbers with zeros before the decimal point may have different precisions,
because 1200 can have p = 0, 1 or 2 (depending on what the initial value
was). It could also have p < 0, when the digits after the decimal point
are zero.
.PP
The string output (of floating point numbers) will be padded with zeros:
.PP
.Vb 9
\&        Initial value   P       A       Result          String
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        1234.01         \-3              1000            1000
\&        1234            \-2              1200            1200
\&        1234.5          \-1              1230            1230
\&        1234.001        1               1234            1234.0
\&        1234.01         0               1234            1234
\&        1234.01         2               1234.01         1234.01
\&        1234.01         5               1234.01         1234.01000
.Ve
.PP
For BigInts, no padding occurs.
.SS "Accuracy A"
.IX Subsection "Accuracy A"
Number of significant digits. Leading zeros are not counted. A
number may have an accuracy greater than the non-zero digits
when there are zeros in it or trailing zeros. For example, 123.456 has
A of 6, 10203 has 5, 123.0506 has 7, 123.450000 has 8 and 0.000123 has 3.
.PP
The string output (of floating point numbers) will be padded with zeros:
.PP
.Vb 5
\&        Initial value   P       A       Result          String
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        1234.01                 3       1230            1230
\&        1234.01                 6       1234.01         1234.01
\&        1234.1                  8       1234.1          1234.1000
.Ve
.PP
For BigInts, no padding occurs.
.SS "Fallback F"
.IX Subsection "Fallback F"
When both A and P are undefined, this is used as a fallback accuracy when
dividing numbers.
.SS "Rounding mode R"
.IX Subsection "Rounding mode R"
When rounding a number, different 'styles' or 'kinds'
of rounding are possible. (Note that random rounding, as in
Math::Round, is not implemented.)
.IP "'trunc'" 2
.IX Item "'trunc'"
truncation invariably removes all digits following the
rounding place, replacing them with zeros. Thus, 987.65 rounded
to tens (P=1) becomes 980, and rounded to the fourth sigdig
becomes 987.6 (A=4). 123.456 rounded to the second place after the
decimal point (P=\-2) becomes 123.46.
.Sp
All other implemented styles of rounding attempt to round to the
\&\*(L"nearest digit.\*(R" If the digit D immediately to the right of the
rounding place (skipping the decimal point) is greater than 5, the
number is incremented at the rounding place (possibly causing a
cascade of incrementation): e.g. when rounding to units, 0.9 rounds
to 1, and \-19.9 rounds to \-20. If D < 5, the number is similarly
truncated at the rounding place: e.g. when rounding to units, 0.4
rounds to 0, and \-19.4 rounds to \-19.
.Sp
However the results of other styles of rounding differ if the
digit immediately to the right of the rounding place (skipping the
decimal point) is 5 and if there are no digits, or no digits other
than 0, after that 5. In such cases:
.IP "'even'" 2
.IX Item "'even'"
rounds the digit at the rounding place to 0, 2, 4, 6, or 8
if it is not already. E.g., when rounding to the first sigdig, 0.45
becomes 0.4, \-0.55 becomes \-0.6, but 0.4501 becomes 0.5.
.IP "'odd'" 2
.IX Item "'odd'"
rounds the digit at the rounding place to 1, 3, 5, 7, or 9 if
it is not already. E.g., when rounding to the first sigdig, 0.45
becomes 0.5, \-0.55 becomes \-0.5, but 0.5501 becomes 0.6.
.IP "'+inf'" 2
.IX Item "'+inf'"
round to plus infinity, i.e. always round up. E.g., when
rounding to the first sigdig, 0.45 becomes 0.5, \-0.55 becomes \-0.5,
and 0.4501 also becomes 0.5.
.IP "'\-inf'" 2
.IX Item "'-inf'"
round to minus infinity, i.e. always round down. E.g., when
rounding to the first sigdig, 0.45 becomes 0.4, \-0.55 becomes \-0.6,
but 0.4501 becomes 0.5.
.IP "'zero'" 2
.IX Item "'zero'"
round to zero, i.e. positive numbers down, negative ones up.
E.g., when rounding to the first sigdig, 0.45 becomes 0.4, \-0.55
becomes \-0.5, but 0.4501 becomes 0.5.
.IP "'common'" 2
.IX Item "'common'"
round up if the digit immediately to the right of the rounding place
is 5 or greater, otherwise round down. E.g., 0.15 becomes 0.2 and
0.149 becomes 0.1.
.PP
The handling of A & P in \s-1MBI/MBF \s0(the old core code shipped with Perl
versions <= 5.7.2) is like this:
.IP "Precision" 2
.IX Item "Precision"
.Vb 3
\&  * ffround($p) is able to round to $p number of digits after the decimal
\&    point
\&  * otherwise P is unused
.Ve
.IP "Accuracy (significant digits)" 2
.IX Item "Accuracy (significant digits)"
.Vb 10
\&  * fround($a) rounds to $a significant digits
\&  * only fdiv() and fsqrt() take A as (optional) parameter
\&    + other operations simply create the same number (fneg etc), or more (fmul)
\&      of digits
\&    + rounding/truncating is only done when explicitly calling one of fround
\&      or ffround, and never for BigInt (not implemented)
\&  * fsqrt() simply hands its accuracy argument over to fdiv.
\&  * the documentation and the comment in the code indicate two different ways
\&    on how fdiv() determines the maximum number of digits it should calculate,
\&    and the actual code does yet another thing
\&    POD:
\&      max($Math::BigFloat::div_scale,length(dividend)+length(divisor))
\&    Comment:
\&      result has at most max(scale, length(dividend), length(divisor)) digits
\&    Actual code:
\&      scale = max(scale, length(dividend)\-1,length(divisor)\-1);
\&      scale += length(divisor) \- length(dividend);
\&    So for lx = 3, ly = 9, scale = 10, scale will actually be 16 (10+9\-3).
\&    Actually, the \*(Aqdifference\*(Aq added to the scale is calculated from the
\&    number of "significant digits" in dividend and divisor, which is derived
\&    by looking at the length of the mantissa. Which is wrong, since it includes
\&    the + sign (oops) and actually gets 2 for \*(Aq+100\*(Aq and 4 for \*(Aq+101\*(Aq. Oops
\&    again. Thus 124/3 with div_scale=1 will get you \*(Aq41.3\*(Aq based on the strange
\&    assumption that 124 has 3 significant digits, while 120/7 will get you
\&    \*(Aq17\*(Aq, not \*(Aq17.1\*(Aq since 120 is thought to have 2 significant digits.
\&    The rounding after the division then uses the remainder and $y to determine
\&    whether it must round up or down.
\& ?  I have no idea which is the right way. That\*(Aqs why I used a slightly more
\& ?  simple scheme and tweaked the few failing testcases to match it.
.Ve
.PP
This is how it works now:
.IP "Setting/Accessing" 2
.IX Item "Setting/Accessing"
.Vb 10
\&  * You can set the A global via Math::BigInt\->accuracy() or
\&    Math::BigFloat\->accuracy() or whatever class you are using.
\&  * You can also set P globally by using Math::SomeClass\->precision()
\&    likewise.
\&  * Globals are classwide, and not inherited by subclasses.
\&  * to undefine A, use Math::SomeCLass\->accuracy(undef);
\&  * to undefine P, use Math::SomeClass\->precision(undef);
\&  * Setting Math::SomeClass\->accuracy() clears automatically
\&    Math::SomeClass\->precision(), and vice versa.
\&  * To be valid, A must be > 0, P can have any value.
\&  * If P is negative, this means round to the P\*(Aqth place to the right of the
\&    decimal point; positive values mean to the left of the decimal point.
\&    P of 0 means round to integer.
\&  * to find out the current global A, use Math::SomeClass\->accuracy()
\&  * to find out the current global P, use Math::SomeClass\->precision()
\&  * use $x\->accuracy() respective $x\->precision() for the local
\&    setting of $x.
\&  * Please note that $x\->accuracy() respective $x\->precision()
\&    return eventually defined global A or P, when $x\*(Aqs A or P is not
\&    set.
.Ve
.IP "Creating numbers" 2
.IX Item "Creating numbers"
.Vb 12
\&  * When you create a number, you can give the desired A or P via:
\&    $x = Math::BigInt\->new($number,$A,$P);
\&  * Only one of A or P can be defined, otherwise the result is NaN
\&  * If no A or P is give ($x = Math::BigInt\->new($number) form), then the
\&    globals (if set) will be used. Thus changing the global defaults later on
\&    will not change the A or P of previously created numbers (i.e., A and P of
\&    $x will be what was in effect when $x was created)
\&  * If given undef for A and P, NO rounding will occur, and the globals will
\&    NOT be used. This is used by subclasses to create numbers without
\&    suffering rounding in the parent. Thus a subclass is able to have its own
\&    globals enforced upon creation of a number by using
\&    $x = Math::BigInt\->new($number,undef,undef):
\&
\&        use Math::BigInt::SomeSubclass;
\&        use Math::BigInt;
\&
\&        Math::BigInt\->accuracy(2);
\&        Math::BigInt::SomeSubClass\->accuracy(3);
\&        $x = Math::BigInt::SomeSubClass\->new(1234);
\&
\&    $x is now 1230, and not 1200. A subclass might choose to implement
\&    this otherwise, e.g. falling back to the parent\*(Aqs A and P.
.Ve
.IP "Usage" 2
.IX Item "Usage"
.Vb 7
\&  * If A or P are enabled/defined, they are used to round the result of each
\&    operation according to the rules below
\&  * Negative P is ignored in Math::BigInt, since BigInts never have digits
\&    after the decimal point
\&  * Math::BigFloat uses Math::BigInt internally, but setting A or P inside
\&    Math::BigInt as globals does not tamper with the parts of a BigFloat.
\&    A flag is used to mark all Math::BigFloat numbers as \*(Aqnever round\*(Aq.
.Ve
.IP "Precedence" 2
.IX Item "Precedence"
.Vb 10
\&  * It only makes sense that a number has only one of A or P at a time.
\&    If you set either A or P on one object, or globally, the other one will
\&    be automatically cleared.
\&  * If two objects are involved in an operation, and one of them has A in
\&    effect, and the other P, this results in an error (NaN).
\&  * A takes precedence over P (Hint: A comes before P).
\&    If neither of them is defined, nothing is used, i.e. the result will have
\&    as many digits as it can (with an exception for fdiv/fsqrt) and will not
\&    be rounded.
\&  * There is another setting for fdiv() (and thus for fsqrt()). If neither of
\&    A or P is defined, fdiv() will use a fallback (F) of $div_scale digits.
\&    If either the dividend\*(Aqs or the divisor\*(Aqs mantissa has more digits than
\&    the value of F, the higher value will be used instead of F.
\&    This is to limit the digits (A) of the result (just consider what would
\&    happen with unlimited A and P in the case of 1/3 :\-)
\&  * fdiv will calculate (at least) 4 more digits than required (determined by
\&    A, P or F), and, if F is not used, round the result
\&    (this will still fail in the case of a result like 0.12345000000001 with A
\&    or P of 5, but this can not be helped \- or can it?)
\&  * Thus you can have the math done by on Math::Big* class in two modi:
\&    + never round (this is the default):
\&      This is done by setting A and P to undef. No math operation
\&      will round the result, with fdiv() and fsqrt() as exceptions to guard
\&      against overflows. You must explicitly call bround(), bfround() or
\&      round() (the latter with parameters).
\&      Note: Once you have rounded a number, the settings will \*(Aqstick\*(Aq on it
\&      and \*(Aqinfect\*(Aq all other numbers engaged in math operations with it, since
\&      local settings have the highest precedence. So, to get SaferRound[tm],
\&      use a copy() before rounding like this:
\&
\&        $x = Math::BigFloat\->new(12.34);
\&        $y = Math::BigFloat\->new(98.76);
\&        $z = $x * $y;                           # 1218.6984
\&        print $x\->copy()\->fround(3);            # 12.3 (but A is now 3!)
\&        $z = $x * $y;                           # still 1218.6984, without
\&                                                # copy would have been 1210!
\&
\&    + round after each op:
\&      After each single operation (except for testing like is_zero()), the
\&      method round() is called and the result is rounded appropriately. By
\&      setting proper values for A and P, you can have all\-the\-same\-A or
\&      all\-the\-same\-P modes. For example, Math::Currency might set A to undef,
\&      and P to \-2, globally.
\&
\& ?Maybe an extra option that forbids local A & P settings would be in order,
\& ?so that intermediate rounding does not \*(Aqpoison\*(Aq further math?
.Ve
.IP "Overriding globals" 2
.IX Item "Overriding globals"
.Vb 10
\&  * you will be able to give A, P and R as an argument to all the calculation
\&    routines; the second parameter is A, the third one is P, and the fourth is
\&    R (shift right by one for binary operations like badd). P is used only if
\&    the first parameter (A) is undefined. These three parameters override the
\&    globals in the order detailed as follows, i.e. the first defined value
\&    wins:
\&    (local: per object, global: global default, parameter: argument to sub)
\&      + parameter A
\&      + parameter P
\&      + local A (if defined on both of the operands: smaller one is taken)
\&      + local P (if defined on both of the operands: bigger one is taken)
\&      + global A
\&      + global P
\&      + global F
\&  * fsqrt() will hand its arguments to fdiv(), as it used to, only now for two
\&    arguments (A and P) instead of one
.Ve
.IP "Local settings" 2
.IX Item "Local settings"
.Vb 5
\&  * You can set A or P locally by using $x\->accuracy() or
\&    $x\->precision()
\&    and thus force different A and P for different objects/numbers.
\&  * Setting A or P this way immediately rounds $x to the new value.
\&  * $x\->accuracy() clears $x\->precision(), and vice versa.
.Ve
.IP "Rounding" 2
.IX Item "Rounding"
.Vb 10
\&  * the rounding routines will use the respective global or local settings.
\&    fround()/bround() is for accuracy rounding, while ffround()/bfround()
\&    is for precision
\&  * the two rounding functions take as the second parameter one of the
\&    following rounding modes (R):
\&    \*(Aqeven\*(Aq, \*(Aqodd\*(Aq, \*(Aq+inf\*(Aq, \*(Aq\-inf\*(Aq, \*(Aqzero\*(Aq, \*(Aqtrunc\*(Aq, \*(Aqcommon\*(Aq
\&  * you can set/get the global R by using Math::SomeClass\->round_mode()
\&    or by setting $Math::SomeClass::round_mode
\&  * after each operation, $result\->round() is called, and the result may
\&    eventually be rounded (that is, if A or P were set either locally,
\&    globally or as parameter to the operation)
\&  * to manually round a number, call $x\->round($A,$P,$round_mode);
\&    this will round the number by using the appropriate rounding function
\&    and then normalize it.
\&  * rounding modifies the local settings of the number:
\&
\&        $x = Math::BigFloat\->new(123.456);
\&        $x\->accuracy(5);
\&        $x\->bround(4);
\&
\&    Here 4 takes precedence over 5, so 123.5 is the result and $x\->accuracy()
\&    will be 4 from now on.
.Ve
.IP "Default values" 2
.IX Item "Default values"
.Vb 4
\&  * R: \*(Aqeven\*(Aq
\&  * F: 40
\&  * A: undef
\&  * P: undef
.Ve
.IP "Remarks" 2
.IX Item "Remarks"
.Vb 5
\&  * The defaults are set up so that the new code gives the same results as
\&    the old code (except in a few cases on fdiv):
\&    + Both A and P are undefined and thus will not be used for rounding
\&      after each operation.
\&    + round() is thus a no\-op, unless given extra parameters A and P
.Ve
.SH "Infinity and Not a Number"
.IX Header "Infinity and Not a Number"
While BigInt has extensive handling of inf and NaN, certain quirks remain.
.IP "\fIoct()\fR/\fIhex()\fR" 2
.IX Item "oct()/hex()"
These perl routines currently (as of Perl v.5.8.6) cannot handle passed
inf.
.Sp
.Vb 9
\&        te@linux:~> perl \-wle \*(Aqprint 2 ** 3333\*(Aq
\&        inf
\&        te@linux:~> perl \-wle \*(Aqprint 2 ** 3333 == 2 ** 3333\*(Aq
\&        1
\&        te@linux:~> perl \-wle \*(Aqprint oct(2 ** 3333)\*(Aq
\&        0
\&        te@linux:~> perl \-wle \*(Aqprint hex(2 ** 3333)\*(Aq
\&        Illegal hexadecimal digit \*(Aqi\*(Aq ignored at \-e line 1.
\&        0
.Ve
.Sp
The same problems occur if you pass them Math::BigInt\->\fIbinf()\fR objects. Since
overloading these routines is not possible, this cannot be fixed from BigInt.
.IP "==, !=, <, >, <=, >= with NaNs" 2
.IX Item "==, !=, <, >, <=, >= with NaNs"
BigInt's \fIbcmp()\fR routine currently returns undef to signal that a NaN was
involved in a comparison. However, the overload code turns that into
either 1 or '' and thus operations like \f(CW\*(C`NaN != NaN\*(C'\fR might return
wrong values.
.IP "log(\-inf)" 2
.IX Item "log(-inf)"
\&\f(CW\*(C`log(\-inf)\*(C'\fR is highly weird. Since log(\-x)=pi*i+log(x), then
log(\-inf)=pi*i+inf. However, since the imaginary part is finite, the real
infinity \*(L"overshadows\*(R" it, so the number might as well just be infinity.
However, the result is a complex number, and since BigInt/BigFloat can only
have real numbers as results, the result is NaN.
.IP "\fIexp()\fR, \fIcos()\fR, \fIsin()\fR, \fIatan2()\fR" 2
.IX Item "exp(), cos(), sin(), atan2()"
These all might have problems handling infinity right.
.SH "INTERNALS"
.IX Header "INTERNALS"
The actual numbers are stored as unsigned big integers (with separate sign).
.PP
You should neither care about nor depend on the internal representation; it
might change without notice. Use \fB\s-1ONLY\s0\fR method calls like \f(CW\*(C`$x\->sign();\*(C'\fR
instead relying on the internal representation.
.SS "\s-1MATH LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
Math with the numbers is done (by default) by a module called
\&\f(CW\*(C`Math::BigInt::Calc\*(C'\fR. This is equivalent to saying:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqCalc\*(Aq;
.Ve
.PP
You can change this backend library by using:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqGMP\*(Aq;
.Ve
.PP
\&\fBNote\fR: General purpose packages should not be explicit about the library
to use; let the script author decide which is best.
.PP
If your script works with huge numbers and Calc is too slow for them,
you can also for the loading of one of these libraries and if none
of them can be used, the code will die:
.PP
.Vb 1
\&        use Math::BigInt only => \*(AqGMP,Pari\*(Aq;
.Ve
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigInt try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
The library that is loaded last will be used. Note that this can be
overwritten at any time by loading a different library, and numbers
constructed with different libraries cannot be used in math operations
together.
.PP
\fIWhat library to use?\fR
.IX Subsection "What library to use?"
.PP
\&\fBNote\fR: General purpose packages should not be explicit about the library
to use; let the script author decide which is best.
.PP
Math::BigInt::GMP and Math::BigInt::Pari are in cases involving big
numbers much faster than Calc, however it is slower when dealing with very
small numbers (less than about 20 digits) and when converting very large
numbers to decimal (for instance for printing, rounding, calculating their
length in decimal etc).
.PP
So please select carefully what library you want to use.
.PP
Different low-level libraries use different formats to store the numbers.
However, you should \fB\s-1NOT\s0\fR depend on the number having a specific format
internally.
.PP
See the respective math library module documentation for further details.
.SS "\s-1SIGN\s0"
.IX Subsection "SIGN"
The sign is either '+', '\-', 'NaN', '+inf' or '\-inf'.
.PP
A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '\-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
\&'\-inf' when dividing any negative number by 0.
.SS "\fImantissa()\fP, \fIexponent()\fP and \fIparts()\fP"
.IX Subsection "mantissa(), exponent() and parts()"
\&\f(CW\*(C`mantissa()\*(C'\fR and \f(CW\*(C`exponent()\*(C'\fR return the said parts of the BigInt such
that:
.PP
.Vb 4
\&        $m = $x\->mantissa();
\&        $e = $x\->exponent();
\&        $y = $m * ( 10 ** $e );
\&        print "ok\en" if $x == $y;
.Ve
.PP
\&\f(CW\*(C`($m,$e) = $x\->parts()\*(C'\fR is just a shortcut that gives you both of them
in one go. Both the returned mantissa and exponent have a sign.
.PP
Currently, for BigInts \f(CW$e\fR is always 0, except +inf and \-inf, where it is
\&\f(CW\*(C`+inf\*(C'\fR; and for NaN, where it is \f(CW\*(C`NaN\*(C'\fR; and for \f(CW\*(C`$x == 0\*(C'\fR, where it is \f(CW1\fR
(to be compatible with Math::BigFloat's internal representation of a zero as
\&\f(CW0E1\fR).
.PP
\&\f(CW$m\fR is currently just a copy of the original number. The relation between
\&\f(CW$e\fR and \f(CW$m\fR will stay always the same, though their real values might
change.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  use Math::BigInt;
\&
\&  sub bint { Math::BigInt\->new(shift); }
\&
\&  $x = Math::BigInt\->bstr("1234")       # string "1234"
\&  $x = "$x";                            # same as bstr()
\&  $x = Math::BigInt\->bneg("1234");      # BigInt "\-1234"
\&  $x = Math::BigInt\->babs("\-12345");    # BigInt "12345"
\&  $x = Math::BigInt\->bnorm("\-0.00");    # BigInt "0"
\&  $x = bint(1) + bint(2);               # BigInt "3"
\&  $x = bint(1) + "2";                   # ditto (auto\-BigIntify of "2")
\&  $x = bint(1);                         # BigInt "1"
\&  $x = $x + 5 / 2;                      # BigInt "3"
\&  $x = $x ** 3;                         # BigInt "27"
\&  $x *= 2;                              # BigInt "54"
\&  $x = Math::BigInt\->new(0);            # BigInt "0"
\&  $x\-\-;                                 # BigInt "\-1"
\&  $x = Math::BigInt\->badd(4,5)          # BigInt "9"
\&  print $x\->bsstr();                    # 9e+0
.Ve
.PP
Examples for rounding:
.PP
.Vb 2
\&  use Math::BigFloat;
\&  use Test;
\&
\&  $x = Math::BigFloat\->new(123.4567);
\&  $y = Math::BigFloat\->new(123.456789);
\&  Math::BigFloat\->accuracy(4);          # no more A than 4
\&
\&  ok ($x\->copy()\->fround(),123.4);      # even rounding
\&  print $x\->copy()\->fround(),"\en";      # 123.4
\&  Math::BigFloat\->round_mode(\*(Aqodd\*(Aq);    # round to odd
\&  print $x\->copy()\->fround(),"\en";      # 123.5
\&  Math::BigFloat\->accuracy(5);          # no more A than 5
\&  Math::BigFloat\->round_mode(\*(Aqodd\*(Aq);    # round to odd
\&  print $x\->copy()\->fround(),"\en";      # 123.46
\&  $y = $x\->copy()\->fround(4),"\en";      # A = 4: 123.4
\&  print "$y, ",$y\->accuracy(),"\en";     # 123.4, 4
\&
\&  Math::BigFloat\->accuracy(undef);      # A not important now
\&  Math::BigFloat\->precision(2);         # P important
\&  print $x\->copy()\->bnorm(),"\en";       # 123.46
\&  print $x\->copy()\->fround(),"\en";      # 123.46
.Ve
.PP
Examples for converting:
.PP
.Vb 2
\&  my $x = Math::BigInt\->new(\*(Aq0b1\*(Aq.\*(Aq01\*(Aq x 123);
\&  print "bin: ",$x\->as_bin()," hex:",$x\->as_hex()," dec: ",$x,"\en";
.Ve
.SH "Autocreating constants"
.IX Header "Autocreating constants"
After \f(CW\*(C`use Math::BigInt \*(Aq:constant\*(Aq\*(C'\fR all the \fBinteger\fR decimal, hexadecimal
and binary constants in the given scope are converted to \f(CW\*(C`Math::BigInt\*(C'\fR.
This conversion happens at compile time.
.PP
In particular,
.PP
.Vb 1
\&  perl \-MMath::BigInt=:constant \-e \*(Aqprint 2**100,"\en"\*(Aq
.Ve
.PP
prints the integer value of \f(CW\*(C`2**100\*(C'\fR. Note that without conversion of 
constants the expression 2**100 will be calculated as perl scalar.
.PP
Please note that strings and floating point constants are not affected,
so that
.PP
.Vb 1
\&        use Math::BigInt qw/:constant/;
\&
\&        $x = 1234567890123456789012345678901234567890
\&                + 123456789123456789;
\&        $y = \*(Aq1234567890123456789012345678901234567890\*(Aq
\&                + \*(Aq123456789123456789\*(Aq;
.Ve
.PP
do not work. You need an explicit Math::BigInt\->\fInew()\fR around one of the
operands. You should also quote large constants to protect loss of precision:
.PP
.Vb 1
\&        use Math::BigInt;
\&
\&        $x = Math::BigInt\->new(\*(Aq1234567889123456789123456789123456789\*(Aq);
.Ve
.PP
Without the quotes Perl would convert the large number to a floating point
constant at compile time and then hand the result to BigInt, which results in
an truncated result or a NaN.
.PP
This also applies to integers that look like floating point constants:
.PP
.Vb 1
\&        use Math::BigInt \*(Aq:constant\*(Aq;
\&
\&        print ref(123e2),"\en";
\&        print ref(123.2e2),"\en";
.Ve
.PP
will print nothing but newlines. Use either bignum or Math::BigFloat
to get this to work.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
Using the form \f(CW$x\fR += \f(CW$y\fR; etc over \f(CW$x\fR = \f(CW$x\fR + \f(CW$y\fR is faster, since a copy of \f(CW$x\fR
must be made in the second case. For long numbers, the copy can eat up to 20%
of the work (in the case of addition/subtraction, less for
multiplication/division). If \f(CW$y\fR is very small compared to \f(CW$x\fR, the form
\&\f(CW$x\fR += \f(CW$y\fR is \s-1MUCH\s0 faster than \f(CW$x\fR = \f(CW$x\fR + \f(CW$y\fR since making the copy of \f(CW$x\fR takes
more time then the actual addition.
.PP
With a technique called copy-on-write, the cost of copying with overload could
be minimized or even completely avoided. A test implementation of \s-1COW\s0 did show
performance gains for overloaded math, but introduced a performance loss due
to a constant overhead for all other operations. So Math::BigInt does currently
not \s-1COW.\s0
.PP
The rewritten version of this module (vs. v0.01) is slower on certain
operations, like \f(CW\*(C`new()\*(C'\fR, \f(CW\*(C`bstr()\*(C'\fR and \f(CW\*(C`numify()\*(C'\fR. The reason are that it
does now more work and handles much more cases. The time spent in these
operations is usually gained in the other math operations so that code on
the average should get (much) faster. If they don't, please contact the author.
.PP
Some operations may be slower for small numbers, but are significantly faster
for big numbers. Other operations are now constant (O(1), like \f(CW\*(C`bneg()\*(C'\fR,
\&\f(CW\*(C`babs()\*(C'\fR etc), instead of O(N) and thus nearly always take much less time.
These optimizations were done on purpose.
.PP
If you find the Calc module to slow, try to install any of the replacement
modules and see if they help you.
.SS "Alternative math libraries"
.IX Subsection "Alternative math libraries"
You can use an alternative library to drive Math::BigInt. See the section
\&\*(L"\s-1MATH LIBRARY\*(R"\s0 for more information.
.PP
For more benchmark results see <http://bloodgate.com/perl/benchmarks.html>.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
.SS "Subclassing Math::BigInt"
.IX Subsection "Subclassing Math::BigInt"
The basic design of Math::BigInt allows simple subclasses with very little
work, as long as a few simple rules are followed:
.IP "\(bu" 2
The public \s-1API\s0 must remain consistent, i.e. if a sub-class is overloading
addition, the sub-class must use the same name, in this case \fIbadd()\fR. The
reason for this is that Math::BigInt is optimized to call the object methods
directly.
.IP "\(bu" 2
The private object hash keys like \f(CW\*(C`$x\->{sign}\*(C'\fR may not be changed, but
additional keys can be added, like \f(CW\*(C`$x\->{_custom}\*(C'\fR.
.IP "\(bu" 2
Accessor functions are available for all existing object hash keys and should
be used instead of directly accessing the internal hash keys. The reason for
this is that Math::BigInt itself has a pluggable interface which permits it
to support different storage methods.
.PP
More complex sub-classes may have to replicate more of the logic internal of
Math::BigInt if they need to change more basic behaviors. A subclass that
needs to merely change the output only needs to overload \f(CW\*(C`bstr()\*(C'\fR.
.PP
All other object methods and overloaded functions can be directly inherited
from the parent class.
.PP
At the very minimum, any subclass will need to provide its own \f(CW\*(C`new()\*(C'\fR and can
store additional hash keys in the object. There are also some package globals
that must be defined, e.g.:
.PP
.Vb 5
\&  # Globals
\&  $accuracy = undef;
\&  $precision = \-2;       # round to 2 decimal places
\&  $round_mode = \*(Aqeven\*(Aq;
\&  $div_scale = 40;
.Ve
.PP
Additionally, you might want to provide the following two globals to allow
auto-upgrading and auto-downgrading to work correctly:
.PP
.Vb 2
\&  $upgrade = undef;
\&  $downgrade = undef;
.Ve
.PP
This allows Math::BigInt to correctly retrieve package globals from the 
subclass, like \f(CW$SubClass::precision\fR.  See t/Math/BigInt/Subclass.pm or
t/Math/BigFloat/SubClass.pm completely functional subclass examples.
.PP
Don't forget to
.PP
.Vb 1
\&        use overload;
.Ve
.PP
in your subclass to automatically inherit the overloading from the parent. If
you like, you can change part of the overloading, look at Math::String for an
example.
.SH "UPGRADING"
.IX Header "UPGRADING"
When used like this:
.PP
.Vb 1
\&        use Math::BigInt upgrade => \*(AqFoo::Bar\*(Aq;
.Ve
.PP
certain operations will 'upgrade' their calculation and thus the result to
the class Foo::Bar. Usually this is used in conjunction with Math::BigFloat:
.PP
.Vb 1
\&        use Math::BigInt upgrade => \*(AqMath::BigFloat\*(Aq;
.Ve
.PP
As a shortcut, you can use the module \f(CW\*(C`bignum\*(C'\fR:
.PP
.Vb 1
\&        use bignum;
.Ve
.PP
Also good for one-liners:
.PP
.Vb 1
\&        perl \-Mbignum \-le \*(Aqprint 2 ** 255\*(Aq
.Ve
.PP
This makes it possible to mix arguments of different classes (as in 2.5 + 2)
as well es preserve accuracy (as in \fIsqrt\fR\|(3)).
.PP
Beware: This feature is not fully implemented yet.
.SS "Auto-upgrade"
.IX Subsection "Auto-upgrade"
The following methods upgrade themselves unconditionally; that is if upgrade
is in effect, they will always hand up their work:
.IP "\fIbsqrt()\fR" 2
.IX Item "bsqrt()"
.PD 0
.IP "\fIdiv()\fR" 2
.IX Item "div()"
.IP "\fIblog()\fR" 2
.IX Item "blog()"
.IP "\fIbexp()\fR" 2
.IX Item "bexp()"
.PD
.PP
Beware: This list is not complete.
.PP
All other methods upgrade themselves only when one (or all) of their
arguments are of the class mentioned in \f(CW$upgrade\fR (This might change in later
versions to a more sophisticated scheme):
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\f(CW\*(C`Math::BigInt\*(C'\fR exports nothing by default, but can export the following methods:
.PP
.Vb 2
\&        bgcd
\&        blcm
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
Some things might not work as you expect them. Below is documented what is
known to be troublesome:
.IP "\fIbstr()\fR, \fIbsstr()\fR and 'cmp'" 1
.IX Item "bstr(), bsstr() and 'cmp'"
Both \f(CW\*(C`bstr()\*(C'\fR and \f(CW\*(C`bsstr()\*(C'\fR as well as automated stringify via overload now
drop the leading '+'. The old code would return '+3', the new returns '3'.
This is to be consistent with Perl and to make \f(CW\*(C`cmp\*(C'\fR (especially with
overloading) to work as you expect. It also solves problems with \f(CW\*(C`Test.pm\*(C'\fR,
because its \f(CW\*(C`ok()\*(C'\fR uses 'eq' internally.
.Sp
Mark Biggar said, when asked about to drop the '+' altogether, or make only
\&\f(CW\*(C`cmp\*(C'\fR work:
.Sp
.Vb 4
\&        I agree (with the first alternative), don\*(Aqt add the \*(Aq+\*(Aq on positive
\&        numbers.  It\*(Aqs not as important anymore with the new internal 
\&        form for numbers.  It made doing things like abs and neg easier,
\&        but those have to be done differently now anyway.
.Ve
.Sp
So, the following examples will now work all as expected:
.Sp
.Vb 3
\&        use Test;
\&        BEGIN { plan tests => 1 }
\&        use Math::BigInt;
\&
\&        my $x = new Math::BigInt 3*3;
\&        my $y = new Math::BigInt 3*3;
\&
\&        ok ($x,3*3);
\&        print "$x eq 9" if $x eq $y;
\&        print "$x eq 9" if $x eq \*(Aq9\*(Aq;
\&        print "$x eq 9" if $x eq 3*3;
.Ve
.Sp
Additionally, the following still works:
.Sp
.Vb 3
\&        print "$x == 9" if $x == $y;
\&        print "$x == 9" if $x == 9;
\&        print "$x == 9" if $x == 3*3;
.Ve
.Sp
There is now a \f(CW\*(C`bsstr()\*(C'\fR method to get the string in scientific notation aka
\&\f(CW1e+2\fR instead of \f(CW100\fR. Be advised that overloaded 'eq' always uses \fIbstr()\fR
for comparison, but Perl will represent some numbers as 100 and others
as 1e+308. If in doubt, convert both arguments to Math::BigInt before 
comparing them as strings:
.Sp
.Vb 3
\&        use Test;
\&        BEGIN { plan tests => 3 }
\&        use Math::BigInt;
\&
\&        $x = Math::BigInt\->new(\*(Aq1e56\*(Aq); $y = 1e56;
\&        ok ($x,$y);                     # will fail
\&        ok ($x\->bsstr(),$y);            # okay
\&        $y = Math::BigInt\->new($y);
\&        ok ($x,$y);                     # okay
.Ve
.Sp
Alternatively, simple use \f(CW\*(C`<=>\*(C'\fR for comparisons, this will get it
always right. There is not yet a way to get a number automatically represented
as a string that matches exactly the way Perl represents it.
.Sp
See also the section about \*(L"Infinity and Not a Number\*(R" for problems in
comparing NaNs.
.IP "\fIint()\fR" 1
.IX Item "int()"
\&\f(CW\*(C`int()\*(C'\fR will return (at least for Perl v5.7.1 and up) another BigInt, not a 
Perl scalar:
.Sp
.Vb 4
\&        $x = Math::BigInt\->new(123);
\&        $y = int($x);                           # BigInt 123
\&        $x = Math::BigFloat\->new(123.45);
\&        $y = int($x);                           # BigInt 123
.Ve
.Sp
In all Perl versions you can use \f(CW\*(C`as_number()\*(C'\fR or \f(CW\*(C`as_int\*(C'\fR for the same
effect:
.Sp
.Vb 3
\&        $x = Math::BigFloat\->new(123.45);
\&        $y = $x\->as_number();                   # BigInt 123
\&        $y = $x\->as_int();                      # ditto
.Ve
.Sp
This also works for other subclasses, like Math::String.
.Sp
If you want a real Perl scalar, use \f(CW\*(C`numify()\*(C'\fR:
.Sp
.Vb 1
\&        $y = $x\->numify();                      # 123 as scalar
.Ve
.Sp
This is seldom necessary, though, because this is done automatically, like
when you access an array:
.Sp
.Vb 1
\&        $z = $array[$x];                        # does work automatically
.Ve
.IP "length" 1
.IX Item "length"
The following will probably not do what you expect:
.Sp
.Vb 2
\&        $c = Math::BigInt\->new(123);
\&        print $c\->length(),"\en";                # prints 30
.Ve
.Sp
It prints both the number of digits in the number and in the fraction part
since print calls \f(CW\*(C`length()\*(C'\fR in list context. Use something like:
.Sp
.Vb 1
\&        print scalar $c\->length(),"\en";         # prints 3
.Ve
.IP "bdiv" 1
.IX Item "bdiv"
The following will probably not do what you expect:
.Sp
.Vb 1
\&        print $c\->bdiv(10000),"\en";
.Ve
.Sp
It prints both quotient and remainder since print calls \f(CW\*(C`bdiv()\*(C'\fR in list
context. Also, \f(CW\*(C`bdiv()\*(C'\fR will modify \f(CW$c\fR, so be careful. You probably want
to use
.Sp
.Vb 2
\&        print $c / 10000,"\en";
\&        print scalar $c\->bdiv(10000),"\en";  # or if you want to modify $c
.Ve
.Sp
instead.
.Sp
The quotient is always the greatest integer less than or equal to the
real-valued quotient of the two operands, and the remainder (when it is
non-zero) always has the same sign as the second operand; so, for
example,
.Sp
.Vb 6
\&          1 / 4  => ( 0, 1)
\&          1 / \-4 => (\-1,\-3)
\&         \-3 / 4  => (\-1, 1)
\&         \-3 / \-4 => ( 0,\-3)
\&        \-11 / 2  => (\-5,1)
\&         11 /\-2  => (\-5,\-1)
.Ve
.Sp
As a consequence, the behavior of the operator % agrees with the
behavior of Perl's built-in % operator (as documented in the perlop
manpage), and the equation
.Sp
.Vb 1
\&        $x == ($x / $y) * $y + ($x % $y)
.Ve
.Sp
holds true for any \f(CW$x\fR and \f(CW$y\fR, which justifies calling the two return
values of \fIbdiv()\fR the quotient and remainder. The only exception to this rule
are when \f(CW$y\fR == 0 and \f(CW$x\fR is negative, then the remainder will also be
negative. See below under \*(L"infinity handling\*(R" for the reasoning behind this.
.Sp
Perl's 'use integer;' changes the behaviour of % and / for scalars, but will
not change BigInt's way to do things. This is because under 'use integer' Perl
will do what the underlying C thinks is right and this is different for each
system. If you need BigInt's behaving exactly like Perl's 'use integer', bug
the author to implement it ;)
.IP "infinity handling" 1
.IX Item "infinity handling"
Here are some examples that explain the reasons why certain results occur while
handling infinity:
.Sp
The following table shows the result of the division and the remainder, so that
the equation above holds true. Some \*(L"ordinary\*(R" cases are strewn in to show more
clearly the reasoning:
.Sp
.Vb 10
\&        A /  B  =   C,     R so that C *    B +    R =    A
\&     =========================================================
\&        5 /   8 =   0,     5         0 *    8 +    5 =    5
\&        0 /   8 =   0,     0         0 *    8 +    0 =    0
\&        0 / inf =   0,     0         0 *  inf +    0 =    0
\&        0 /\-inf =   0,     0         0 * \-inf +    0 =    0
\&        5 / inf =   0,     5         0 *  inf +    5 =    5
\&        5 /\-inf =   0,     5         0 * \-inf +    5 =    5
\&        \-5/ inf =   0,    \-5         0 *  inf +   \-5 =   \-5
\&        \-5/\-inf =   0,    \-5         0 * \-inf +   \-5 =   \-5
\&       inf/   5 =  inf,    0       inf *    5 +    0 =  inf
\&      \-inf/   5 = \-inf,    0      \-inf *    5 +    0 = \-inf
\&       inf/  \-5 = \-inf,    0      \-inf *   \-5 +    0 =  inf
\&      \-inf/  \-5 =  inf,    0       inf *   \-5 +    0 = \-inf
\&         5/   5 =    1,    0         1 *    5 +    0 =    5
\&        \-5/  \-5 =    1,    0         1 *   \-5 +    0 =   \-5
\&       inf/ inf =    1,    0         1 *  inf +    0 =  inf
\&      \-inf/\-inf =    1,    0         1 * \-inf +    0 = \-inf
\&       inf/\-inf =   \-1,    0        \-1 * \-inf +    0 =  inf
\&      \-inf/ inf =   \-1,    0         1 * \-inf +    0 = \-inf
\&         8/   0 =  inf,    8       inf *    0 +    8 =    8
\&       inf/   0 =  inf,  inf       inf *    0 +  inf =  inf
\&         0/   0 =  NaN
.Ve
.Sp
These cases below violate the \*(L"remainder has the sign of the second of the two
arguments\*(R", since they wouldn't match up otherwise.
.Sp
.Vb 4
\&        A /  B  =   C,     R so that C *    B +    R =    A
\&     ========================================================
\&      \-inf/   0 = \-inf, \-inf      \-inf *    0 +  inf = \-inf
\&        \-8/   0 = \-inf,   \-8      \-inf *    0 +    8 = \-8
.Ve
.IP "Modifying and =" 1
.IX Item "Modifying and ="
Beware of:
.Sp
.Vb 2
\&        $x = Math::BigFloat\->new(5);
\&        $y = $x;
.Ve
.Sp
It will not do what you think, e.g. making a copy of \f(CW$x\fR. Instead it just makes
a second reference to the \fBsame\fR object and stores it in \f(CW$y\fR. Thus anything
that modifies \f(CW$x\fR (except overloaded operators) will modify \f(CW$y\fR, and vice versa.
Or in other words, \f(CW\*(C`=\*(C'\fR is only safe if you modify your BigInts only via
overloaded math. As soon as you use a method call it breaks:
.Sp
.Vb 2
\&        $x\->bmul(2);
\&        print "$x, $y\en";       # prints \*(Aq10, 10\*(Aq
.Ve
.Sp
If you want a true copy of \f(CW$x\fR, use:
.Sp
.Vb 1
\&        $y = $x\->copy();
.Ve
.Sp
You can also chain the calls like this, this will make first a copy and then
multiply it by 2:
.Sp
.Vb 1
\&        $y = $x\->copy()\->bmul(2);
.Ve
.Sp
See also the documentation for overload.pm regarding \f(CW\*(C`=\*(C'\fR.
.IP "bpow" 1
.IX Item "bpow"
\&\f(CW\*(C`bpow()\*(C'\fR (and the rounding functions) now modifies the first argument and
returns it, unlike the old code which left it alone and only returned the
result. This is to be consistent with \f(CW\*(C`badd()\*(C'\fR etc. The first three will
modify \f(CW$x\fR, the last one won't:
.Sp
.Vb 4
\&        print bpow($x,$i),"\en";         # modify $x
\&        print $x\->bpow($i),"\en";        # ditto
\&        print $x **= $i,"\en";           # the same
\&        print $x ** $i,"\en";            # leave $x alone
.Ve
.Sp
The form \f(CW\*(C`$x **= $y\*(C'\fR is faster than \f(CW\*(C`$x = $x ** $y;\*(C'\fR, though.
.IP "Overloading \-$x" 1
.IX Item "Overloading -$x"
The following:
.Sp
.Vb 1
\&        $x = \-$x;
.Ve
.Sp
is slower than
.Sp
.Vb 1
\&        $x\->bneg();
.Ve
.Sp
since overload calls \f(CW\*(C`sub($x,0,1);\*(C'\fR instead of \f(CW\*(C`neg($x)\*(C'\fR. The first variant
needs to preserve \f(CW$x\fR since it does not know that it later will get overwritten.
This makes a copy of \f(CW$x\fR and takes O(N), but \f(CW$x\fR\->\fIbneg()\fR is O(1).
.IP "Mixing different object types" 1
.IX Item "Mixing different object types"
In Perl you will get a floating point value if you do one of the following:
.Sp
.Vb 3
\&        $float = 5.0 + 2;
\&        $float = 2 + 5.0;
\&        $float = 5 / 2;
.Ve
.Sp
With overloaded math, only the first two variants will result in a BigFloat:
.Sp
.Vb 2
\&        use Math::BigInt;
\&        use Math::BigFloat;
\&
\&        $mbf = Math::BigFloat\->new(5);
\&        $mbi2 = Math::BigInteger\->new(5);
\&        $mbi = Math::BigInteger\->new(2);
\&
\&                                        # what actually gets called:
\&        $float = $mbf + $mbi;           # $mbf\->badd()
\&        $float = $mbf / $mbi;           # $mbf\->bdiv()
\&        $integer = $mbi + $mbf;         # $mbi\->badd()
\&        $integer = $mbi2 / $mbi;        # $mbi2\->bdiv()
\&        $integer = $mbi2 / $mbf;        # $mbi2\->bdiv()
.Ve
.Sp
This is because math with overloaded operators follows the first (dominating)
operand, and the operation of that is called and returns thus the result. So,
\&\fIMath::BigInt::bdiv()\fR will always return a Math::BigInt, regardless whether
the result should be a Math::BigFloat or the second operant is one.
.Sp
To get a Math::BigFloat you either need to call the operation manually,
make sure the operands are already of the proper type or casted to that type
via Math::BigFloat\->\fInew()\fR:
.Sp
.Vb 1
\&        $float = Math::BigFloat\->new($mbi2) / $mbi;     # = 2.5
.Ve
.Sp
Beware of simple \*(L"casting\*(R" the entire expression, this would only convert
the already computed result:
.Sp
.Vb 1
\&        $float = Math::BigFloat\->new($mbi2 / $mbi);     # = 2.0 thus wrong!
.Ve
.Sp
Beware also of the order of more complicated expressions like:
.Sp
.Vb 2
\&        $integer = ($mbi2 + $mbi) / $mbf;               # int / float => int
\&        $integer = $mbi2 / Math::BigFloat\->new($mbi);   # ditto
.Ve
.Sp
If in doubt, break the expression into simpler terms, or cast all operands
to the desired resulting type.
.Sp
Scalar values are a bit different, since:
.Sp
.Vb 2
\&        $float = 2 + $mbf;
\&        $float = $mbf + 2;
.Ve
.Sp
will both result in the proper type due to the way the overloaded math works.
.Sp
This section also applies to other overloaded math packages, like Math::String.
.Sp
One solution to you problem might be autoupgrading|upgrading. See the
pragmas bignum, bigint and bigrat for an easy way to do this.
.IP "\fIbsqrt()\fR" 1
.IX Item "bsqrt()"
\&\f(CW\*(C`bsqrt()\*(C'\fR works only good if the result is a big integer, e.g. the square
root of 144 is 12, but from 12 the square root is 3, regardless of rounding
mode. The reason is that the result is always truncated to an integer.
.Sp
If you want a better approximation of the square root, then use:
.Sp
.Vb 4
\&        $x = Math::BigFloat\->new(12);
\&        Math::BigFloat\->precision(0);
\&        Math::BigFloat\->round_mode(\*(Aqeven\*(Aq);
\&        print $x\->copy\->bsqrt(),"\en";           # 4
\&
\&        Math::BigFloat\->precision(2);
\&        print $x\->bsqrt(),"\en";                 # 3.46
\&        print $x\->bsqrt(3),"\en";                # 3.464
.Ve
.IP "\fIbrsft()\fR" 1
.IX Item "brsft()"
For negative numbers in base see also brsft.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat, Math::BigRat and Math::Big as well as
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
The pragmas bignum, bigint and bigrat also might be of interest
because they solve the autoupgrading/downgrading issue, at least partly.
.PP
The package at
<http://search.cpan.org/search?mode=module&query=Math%3A%3ABigInt> contains
more documentation including a full version history, testcases, empty
subclass files and benchmarks.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original code by Mark Biggar, overloaded interface by Ilya Zakharevich.
Completely rewritten by Tels http://bloodgate.com in late 2000, 2001 \- 2006
and still at it in 2007.
.PP
Many people contributed in one or more ways to the final beast, see the file
\&\s-1CREDITS\s0 for an (incomplete) list. If you miss your name, please drop me a
mail. Thank you!
                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::Calc.3pm                       0100644 0001750 0001750 00000044353 12566207460 024433  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::Calc 3pm"
.TH Math::BigInt::Calc 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::Calc \- Pure Perl module to support Math::BigInt
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This library provides support for big integer calculations. It is not
intended to be used by other modules. Other modules which support the same
\&\s-1API \s0(see below) can also be used to support Math::BigInt, like
Math::BigInt::GMP and Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In this library, the numbers are represented in base B = 10**N, where N is
the largest possible value that does not cause overflow in the intermediate
computations. The base B elements are stored in an array, with the least
significant element stored in array element zero. There are no leading zero
elements, except a single zero element when the number is zero.
.PP
For instance, if B = 10000, the number 1234567890 is represented internally
as [3456, 7890, 12].
.SH "THE Math::BigInt API"
.IX Header "THE Math::BigInt API"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use a plug-in library for core math routines. Any module which
conforms to the \s-1API\s0 can be used by Math::BigInt by using this in your program:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name, like 'Math::BigInt::Pari', or only the short
version, like 'Pari'.
.SS "General Notes"
.IX Subsection "General Notes"
A library only needs to deal with unsigned big integers. Testing of input
parameter validity is done by the caller, so there is no need to worry about
underflow (e.g., in \f(CW\*(C`_sub()\*(C'\fR and \f(CW\*(C`_dec()\*(C'\fR) nor about division by zero (e.g.,
in \f(CW\*(C`_div()\*(C'\fR) or similar cases.
.PP
For some methods, the first parameter can be modified. That includes the
possibility that you return a reference to a completely different object
instead. Although keeping the reference and just changing its contents is
preferred over creating and returning a different reference.
.PP
Return values are always objects, strings, Perl scalars, or true/false for
comparison routines.
.SS "\s-1API\s0 version 1"
.IX Subsection "API version 1"
The following methods must be defined in order to support the use by
Math::BigInt v1.70 or later.
.PP
\fI\s-1API\s0 version\fR
.IX Subsection "API version"
.IP "\fI\fIapi_version()\fI\fR" 4
.IX Item "api_version()"
Return \s-1API\s0 version as a Perl scalar, 1 for Math::BigInt v1.70, 2 for
Math::BigInt v1.83.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_new(\s-1STR\s0)\fR" 4
.IX Item "_new(STR)"
Convert a string representing an unsigned decimal number to an object
representing the same number. The input is normalize, i.e., it matches
\&\f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI\fI_zero()\fI\fR" 4
.IX Item "_zero()"
Return an object representing the number zero.
.IP "\fI\fI_one()\fI\fR" 4
.IX Item "_one()"
Return an object representing the number one.
.IP "\fI\fI_two()\fI\fR" 4
.IX Item "_two()"
Return an object representing the number two.
.IP "\fI\fI_ten()\fI\fR" 4
.IX Item "_ten()"
Return an object representing the number ten.
.IP "\fI_from_bin(\s-1STR\s0)\fR" 4
.IX Item "_from_bin(STR)"
Return an object given a string representing a binary number. The input has a
\&'0b' prefix and matches the regular expression \f(CW\*(C`^0[bB](0|1[01]*)$\*(C'\fR.
.IP "\fI_from_oct(\s-1STR\s0)\fR" 4
.IX Item "_from_oct(STR)"
Return an object given a string representing an octal number. The input has a
\&'0' prefix and matches the regular expression \f(CW\*(C`^0[1\-7]*$\*(C'\fR.
.IP "\fI_from_hex(\s-1STR\s0)\fR" 4
.IX Item "_from_hex(STR)"
Return an object given a string representing a hexadecimal number. The input
has a '0x' prefix and matches the regular expression
\&\f(CW\*(C`^0x(0|[1\-9a\-fA\-F][\eda\-fA\-F]*)$\*(C'\fR.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.PP
Each of these methods may modify the first input argument, except \fI\fI_bgcd()\fI\fR,
which shall not modify any input argument, and \fI\fI_sub()\fI\fR which may modify the
second input argument.
.IP "\fI_add(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_add(OBJ1, OBJ2)"
Returns the result of adding \s-1OBJ2\s0 to \s-1OBJ1.\s0
.IP "\fI_mul(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_mul(OBJ1, OBJ2)"
Returns the result of multiplying \s-1OBJ2\s0 and \s-1OBJ1.\s0
.IP "\fI_div(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_div(OBJ1, OBJ2)"
Returns the result of dividing \s-1OBJ1\s0 by \s-1OBJ2\s0 and truncating the result to an
integer.
.IP "\fI_sub(\s-1OBJ1, OBJ2, FLAG\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2, FLAG)"
.PD 0
.IP "\fI_sub(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2)"
.PD
Returns the result of subtracting \s-1OBJ2\s0 by \s-1OBJ1.\s0 If \f(CW\*(C`flag\*(C'\fR is false or omitted,
\&\s-1OBJ1\s0 might be modified. If \f(CW\*(C`flag\*(C'\fR is true, \s-1OBJ2\s0 might be modified.
.IP "\fI_dec(\s-1OBJ\s0)\fR" 4
.IX Item "_dec(OBJ)"
Decrement \s-1OBJ\s0 by one.
.IP "\fI_inc(\s-1OBJ\s0)\fR" 4
.IX Item "_inc(OBJ)"
Increment \s-1OBJ\s0 by one.
.IP "\fI_mod(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_mod(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 modulo \s-1OBJ2,\s0 i.e., the remainder after dividing \s-1OBJ1\s0 by \s-1OBJ2.\s0
.IP "\fI_sqrt(\s-1OBJ\s0)\fR" 4
.IX Item "_sqrt(OBJ)"
Return the square root of the object, truncated to integer.
.IP "\fI_root(\s-1OBJ, N\s0)\fR" 4
.IX Item "_root(OBJ, N)"
Return Nth root of the object, truncated to int. N is >= 3.
.IP "\fI_fac(\s-1OBJ\s0)\fR" 4
.IX Item "_fac(OBJ)"
Return factorial of object (1*2*3*4*...).
.IP "\fI_pow(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_pow(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 to the power of \s-1OBJ2.\s0 By convention, 0**0 = 1.
.IP "\fI_modinv(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_modinv(OBJ1, OBJ2)"
Return modular multiplicative inverse, i.e., return \s-1OBJ3\s0 so that
.Sp
.Vb 1
\&    (OBJ3 * OBJ1) % OBJ2 = 1 % OBJ2
.Ve
.Sp
The result is returned as two arguments. If the modular multiplicative
inverse does not exist, both arguments are undefined. Otherwise, the
arguments are a number (object) and its sign (\*(L"+\*(R" or \*(L"\-\*(R").
.Sp
The output value, with its sign, must either be a positive value in the
range 1,2,...,OBJ2\-1 or the same value subtracted \s-1OBJ2.\s0 For instance, if the
input arguments are objects representing the numbers 7 and 5, the method
must either return an object representing the number 3 and a \*(L"+\*(R" sign, since
(3*7) % 5 = 1 % 5, or an object representing the number 2 and \*(L"\-\*(R" sign,
since (\-2*7) % 5 = 1 % 5.
.IP "\fI_modpow(\s-1OBJ1, OBJ2, OBJ3\s0)\fR" 4
.IX Item "_modpow(OBJ1, OBJ2, OBJ3)"
Return modular exponentiation, (\s-1OBJ1\s0 ** \s-1OBJ2\s0) % \s-1OBJ3.\s0
.IP "\fI_rsft(\s-1OBJ, N, B\s0)\fR" 4
.IX Item "_rsft(OBJ, N, B)"
Shift object N digits right in base B and return the resulting object. This is
equivalent to performing integer division by B**N and discarding the remainder,
except that it might be much faster, depending on how the number is represented
internally.
.Sp
For instance, if the object \f(CW$obj\fR represents the hexadecimal number 0xabcde,
then \f(CW\*(C`_rsft($obj, 2, 16)\*(C'\fR returns an object representing the number 0xabc. The
\&\*(L"remainer\*(R", 0xde, is discarded and not returned.
.IP "\fI_lsft(\s-1OBJ, N, B\s0)\fR" 4
.IX Item "_lsft(OBJ, N, B)"
Shift the object N digits left in base B. This is equivalent to multiplying by
B**N, except that it might be much faster, depending on how the number is
represented internally.
.IP "\fI_log_int(\s-1OBJ, B\s0)\fR" 4
.IX Item "_log_int(OBJ, B)"
Return integer log of \s-1OBJ\s0 to base \s-1BASE.\s0 This method has two output arguments,
the \s-1OBJECT\s0 and a \s-1STATUS.\s0 The \s-1STATUS\s0 is Perl scalar; it is 1 if \s-1OBJ\s0 is the exact
result, 0 if the result was truncted to give \s-1OBJ,\s0 and undef if it is unknown
whether \s-1OBJ\s0 is the exact result.
.IP "\fI_gcd(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_gcd(OBJ1, OBJ2)"
Return the greatest common divisor of \s-1OBJ1\s0 and \s-1OBJ2.\s0
.PP
\fIBitwise operators\fR
.IX Subsection "Bitwise operators"
.PP
Each of these methods may modify the first input argument.
.IP "\fI_and(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_and(OBJ1, OBJ2)"
Return bitwise and. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_or(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_or(OBJ1, OBJ2)"
Return bitwise or. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_xor(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_xor(OBJ1, OBJ2)"
Return bitwise exclusive or. If necessary, the smallest number is padded
with leading zeros.
.PP
\fIBoolean operators\fR
.IX Subsection "Boolean operators"
.IP "\fI_is_zero(\s-1OBJ\s0)\fR" 4
.IX Item "_is_zero(OBJ)"
Returns a true value if \s-1OBJ\s0 is zero, and false value otherwise.
.IP "\fI_is_one(\s-1OBJ\s0)\fR" 4
.IX Item "_is_one(OBJ)"
Returns a true value if \s-1OBJ\s0 is one, and false value otherwise.
.IP "\fI_is_two(\s-1OBJ\s0)\fR" 4
.IX Item "_is_two(OBJ)"
Returns a true value if \s-1OBJ\s0 is two, and false value otherwise.
.IP "\fI_is_ten(\s-1OBJ\s0)\fR" 4
.IX Item "_is_ten(OBJ)"
Returns a true value if \s-1OBJ\s0 is ten, and false value otherwise.
.IP "\fI_is_even(\s-1OBJ\s0)\fR" 4
.IX Item "_is_even(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_is_odd(\s-1OBJ\s0)\fR" 4
.IX Item "_is_odd(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_acmp(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_acmp(OBJ1, OBJ2)"
Compare \s-1OBJ1\s0 and \s-1OBJ2\s0 and return \-1, 0, or 1, if \s-1OBJ1\s0 is less than, equal
to, or larger than \s-1OBJ2,\s0 respectively.
.PP
\fIString conversion\fR
.IX Subsection "String conversion"
.IP "\fI_str(\s-1OBJ\s0)\fR" 4
.IX Item "_str(OBJ)"
Return a string representing the object. The returned string should have no
leading zeros, i.e., it should match \f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI_as_bin(\s-1OBJ\s0)\fR" 4
.IX Item "_as_bin(OBJ)"
Return the binary string representation of the number. The string must have a
\&'0b' prefix.
.IP "\fI_as_oct(\s-1OBJ\s0)\fR" 4
.IX Item "_as_oct(OBJ)"
Return the octal string representation of the number. The string must have
a '0x' prefix.
.Sp
Note: This method was required from Math::BigInt version 1.78, but the required
\&\s-1API\s0 version number was not incremented, so there are older libraries that
support \s-1API\s0 version 1, but do not support \f(CW\*(C`_as_oct()\*(C'\fR.
.IP "\fI_as_hex(\s-1OBJ\s0)\fR" 4
.IX Item "_as_hex(OBJ)"
Return the hexadecimal string representation of the number. The string must
have a '0x' prefix.
.PP
\fINumeric conversion\fR
.IX Subsection "Numeric conversion"
.IP "\fI_num(\s-1OBJ\s0)\fR" 4
.IX Item "_num(OBJ)"
Given an object, return a Perl scalar number (int/float) representing this
number.
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_copy(\s-1OBJ\s0)\fR" 4
.IX Item "_copy(OBJ)"
Return a true copy of the object.
.IP "\fI_len(\s-1OBJ\s0)\fR" 4
.IX Item "_len(OBJ)"
Returns the number of the decimal digits in the number. The output is a
Perl scalar.
.IP "\fI_zeros(\s-1OBJ\s0)\fR" 4
.IX Item "_zeros(OBJ)"
Return the number of trailing decimal zeros. The output is a Perl scalar.
.IP "\fI_digit(\s-1OBJ, N\s0)\fR" 4
.IX Item "_digit(OBJ, N)"
Return the Nth digit as a Perl scalar. N is a Perl scalar, where zero refers to
the rightmost (least significant) digit, and negative values count from the
left (most significant digit). If \f(CW$obj\fR represents the number 123, then
\&\fI_digit($obj, 0)\fR is 3 and \fI_digit(123, \-1)\fR is 1.
.IP "\fI_check(\s-1OBJ\s0)\fR" 4
.IX Item "_check(OBJ)"
Return a true value if the object is \s-1OK,\s0 and a false value otherwise. This is a
check routine to test the internal state of the object for corruption.
.SS "\s-1API\s0 version 2"
.IX Subsection "API version 2"
The following methods are required for an \s-1API\s0 version of 2 or greater.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_1ex(N)\fR" 4
.IX Item "_1ex(N)"
Return an object representing the number 10**N where N >= 0 is a Perl
scalar.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.IP "\fI_nok(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_nok(OBJ1, OBJ2)"
Return the binomial coefficient \s-1OBJ1\s0 over \s-1OBJ1.\s0
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_alen(\s-1OBJ\s0)\fR" 4
.IX Item "_alen(OBJ)"
Return the approximate number of decimal digits of the object. The
output is one Perl scalar. This estimate must be greater than or equal
to what \f(CW\*(C`_len()\*(C'\fR returns.
.SS "\s-1API\s0 optional methods"
.IX Subsection "API optional methods"
The following methods are optional, and can be defined if the underlying lib
has a fast way to do them. If undefined, Math::BigInt will use pure Perl (hence
slow) fallback routines to emulate these:
.PP
\fISigned bitwise operators.\fR
.IX Subsection "Signed bitwise operators."
.PP
Each of these methods may modify the first input argument.
.IP "\fI_signed_or(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_or(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise or.
.IP "\fI_signed_and(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_and(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise and.
.IP "\fI_signed_xor(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_xor(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise exclusive or.
.SH "WRAP YOUR OWN"
.IX Header "WRAP YOUR OWN"
If you want to port your own favourite c\-lib for big numbers to the
Math::BigInt interface, you can take any of the already existing modules as
a rough guideline. You should really wrap up the latest BigInt and BigFloat
testsuites with your module, and replace in them any of the following:
.PP
.Vb 1
\&        use Math::BigInt;
.Ve
.PP
by this:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqyourlib\*(Aq;
.Ve
.PP
This way you ensure that your library really works 100% within Math::BigInt.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
.IP "\(bu" 4
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.IP "\(bu" 4
Fixed, speed-up, streamlined and enhanced by Tels 2001 \- 2007.
.IP "\(bu" 4
\&\s-1API\s0 documentation corrected and extended by Peter John Acklam,
<pjacklam@online.no>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::Calc5.16.3pm                   0100644 0001750 0001750 00000044320 12566207436 024742  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::Calc 3pm"
.TH Math::BigInt::Calc 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::Calc \- Pure Perl module to support Math::BigInt
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This library provides support for big integer calculations. It is not
intended to be used by other modules. Other modules which support the same
\&\s-1API\s0 (see below) can also be used to support Math::BigInt, like
Math::BigInt::GMP and Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In this library, the numbers are represented in base B = 10**N, where N is
the largest possible value that does not cause overflow in the intermediate
computations. The base B elements are stored in an array, with the least
significant element stored in array element zero. There are no leading zero
elements, except a single zero element when the number is zero.
.PP
For instance, if B = 10000, the number 1234567890 is represented internally
as [3456, 7890, 12].
.SH "THE Math::BigInt API"
.IX Header "THE Math::BigInt API"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use a plug-in library for core math routines. Any module which
conforms to the \s-1API\s0 can be used by Math::BigInt by using this in your program:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name, like 'Math::BigInt::Pari', or only the short
version, like 'Pari'.
.SS "General Notes"
.IX Subsection "General Notes"
A library only needs to deal with unsigned big integers. Testing of input
parameter validity is done by the caller, so there is no need to worry about
underflow (e.g., in \f(CW\*(C`_sub()\*(C'\fR and \f(CW\*(C`_dec()\*(C'\fR) nor about division by zero (e.g.,
in \f(CW\*(C`_div()\*(C'\fR) or similar cases.
.PP
For some methods, the first parameter can be modified. That includes the
possibility that you return a reference to a completely different object
instead. Although keeping the reference and just changing its contents is
preferred over creating and returning a different reference.
.PP
Return values are always objects, strings, Perl scalars, or true/false for
comparison routines.
.SS "\s-1API\s0 version 1"
.IX Subsection "API version 1"
The following methods must be defined in order to support the use by
Math::BigInt v1.70 or later.
.PP
\fI\s-1API\s0 version\fR
.IX Subsection "API version"
.IP "\fI\fIapi_version()\fI\fR" 4
.IX Item "api_version()"
Return \s-1API\s0 version as a Perl scalar, 1 for Math::BigInt v1.70, 2 for
Math::BigInt v1.83.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_new(\s-1STR\s0)\fR" 4
.IX Item "_new(STR)"
Convert a string representing an unsigned decimal number to an object
representing the same number. The input is normalize, i.e., it matches
\&\f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI\fI_zero()\fI\fR" 4
.IX Item "_zero()"
Return an object representing the number zero.
.IP "\fI\fI_one()\fI\fR" 4
.IX Item "_one()"
Return an object representing the number one.
.IP "\fI\fI_two()\fI\fR" 4
.IX Item "_two()"
Return an object representing the number two.
.IP "\fI\fI_ten()\fI\fR" 4
.IX Item "_ten()"
Return an object representing the number ten.
.IP "\fI_from_bin(\s-1STR\s0)\fR" 4
.IX Item "_from_bin(STR)"
Return an object given a string representing a binary number. The input has a
\&'0b' prefix and matches the regular expression \f(CW\*(C`^0[bB](0|1[01]*)$\*(C'\fR.
.IP "\fI_from_oct(\s-1STR\s0)\fR" 4
.IX Item "_from_oct(STR)"
Return an object given a string representing an octal number. The input has a
\&'0' prefix and matches the regular expression \f(CW\*(C`^0[1\-7]*$\*(C'\fR.
.IP "\fI_from_hex(\s-1STR\s0)\fR" 4
.IX Item "_from_hex(STR)"
Return an object given a string representing a hexadecimal number. The input
has a '0x' prefix and matches the regular expression
\&\f(CW\*(C`^0x(0|[1\-9a\-fA\-F][\eda\-fA\-F]*)$\*(C'\fR.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.PP
Each of these methods may modify the first input argument, except \fI\fI_bgcd()\fI\fR,
which shall not modify any input argument, and \fI\fI_sub()\fI\fR which may modify the
second input argument.
.IP "\fI_add(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_add(OBJ1, OBJ2)"
Returns the result of adding \s-1OBJ2\s0 to \s-1OBJ1\s0.
.IP "\fI_mul(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_mul(OBJ1, OBJ2)"
Returns the result of multiplying \s-1OBJ2\s0 and \s-1OBJ1\s0.
.IP "\fI_div(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_div(OBJ1, OBJ2)"
Returns the result of dividing \s-1OBJ1\s0 by \s-1OBJ2\s0 and truncating the result to an
integer.
.IP "\fI_sub(\s-1OBJ1\s0, \s-1OBJ2\s0, \s-1FLAG\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2, FLAG)"
.PD 0
.IP "\fI_sub(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2)"
.PD
Returns the result of subtracting \s-1OBJ2\s0 by \s-1OBJ1\s0. If \f(CW\*(C`flag\*(C'\fR is false or omitted,
\&\s-1OBJ1\s0 might be modified. If \f(CW\*(C`flag\*(C'\fR is true, \s-1OBJ2\s0 might be modified.
.IP "\fI_dec(\s-1OBJ\s0)\fR" 4
.IX Item "_dec(OBJ)"
Decrement \s-1OBJ\s0 by one.
.IP "\fI_inc(\s-1OBJ\s0)\fR" 4
.IX Item "_inc(OBJ)"
Increment \s-1OBJ\s0 by one.
.IP "\fI_mod(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_mod(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 modulo \s-1OBJ2\s0, i.e., the remainder after dividing \s-1OBJ1\s0 by \s-1OBJ2\s0.
.IP "\fI_sqrt(\s-1OBJ\s0)\fR" 4
.IX Item "_sqrt(OBJ)"
Return the square root of the object, truncated to integer.
.IP "\fI_root(\s-1OBJ\s0, N)\fR" 4
.IX Item "_root(OBJ, N)"
Return Nth root of the object, truncated to int. N is >= 3.
.IP "\fI_fac(\s-1OBJ\s0)\fR" 4
.IX Item "_fac(OBJ)"
Return factorial of object (1*2*3*4*...).
.IP "\fI_pow(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_pow(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 to the power of \s-1OBJ2\s0. By convention, 0**0 = 1.
.IP "\fI_modinv(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_modinv(OBJ1, OBJ2)"
Return modular multiplicative inverse, i.e., return \s-1OBJ3\s0 so that
.Sp
.Vb 1
\&    (OBJ3 * OBJ1) % OBJ2 = 1 % OBJ2
.Ve
.Sp
The result is returned as two arguments. If the modular multiplicative
inverse does not exist, both arguments are undefined. Otherwise, the
arguments are a number (object) and its sign (\*(L"+\*(R" or \*(L"\-\*(R").
.Sp
The output value, with its sign, must either be a positive value in the
range 1,2,...,OBJ2\-1 or the same value subtracted \s-1OBJ2\s0. For instance, if the
input arguments are objects representing the numbers 7 and 5, the method
must either return an object representing the number 3 and a \*(L"+\*(R" sign, since
(3*7) % 5 = 1 % 5, or an object representing the number 2 and \*(L"\-\*(R" sign,
since (\-2*7) % 5 = 1 % 5.
.IP "\fI_modpow(\s-1OBJ1\s0, \s-1OBJ2\s0, \s-1OBJ3\s0)\fR" 4
.IX Item "_modpow(OBJ1, OBJ2, OBJ3)"
Return modular exponentiation, (\s-1OBJ1\s0 ** \s-1OBJ2\s0) % \s-1OBJ3\s0.
.IP "\fI_rsft(\s-1OBJ\s0, N, B)\fR" 4
.IX Item "_rsft(OBJ, N, B)"
Shift object N digits right in base B and return the resulting object. This is
equivalent to performing integer division by B**N and discarding the remainder,
except that it might be much faster, depending on how the number is represented
internally.
.Sp
For instance, if the object \f(CW$obj\fR represents the hexadecimal number 0xabcde,
then \f(CW\*(C`_rsft($obj, 2, 16)\*(C'\fR returns an object representing the number 0xabc. The
\&\*(L"remainer\*(R", 0xde, is discarded and not returned.
.IP "\fI_lsft(\s-1OBJ\s0, N, B)\fR" 4
.IX Item "_lsft(OBJ, N, B)"
Shift the object N digits left in base B. This is equivalent to multiplying by
B**N, except that it might be much faster, depending on how the number is
represented internally.
.IP "\fI_log_int(\s-1OBJ\s0, B)\fR" 4
.IX Item "_log_int(OBJ, B)"
Return integer log of \s-1OBJ\s0 to base \s-1BASE\s0. This method has two output arguments,
the \s-1OBJECT\s0 and a \s-1STATUS\s0. The \s-1STATUS\s0 is Perl scalar; it is 1 if \s-1OBJ\s0 is the exact
result, 0 if the result was truncted to give \s-1OBJ\s0, and undef if it is unknown
whether \s-1OBJ\s0 is the exact result.
.IP "\fI_gcd(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_gcd(OBJ1, OBJ2)"
Return the greatest common divisor of \s-1OBJ1\s0 and \s-1OBJ2\s0.
.PP
\fIBitwise operators\fR
.IX Subsection "Bitwise operators"
.PP
Each of these methods may modify the first input argument.
.IP "\fI_and(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_and(OBJ1, OBJ2)"
Return bitwise and. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_or(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_or(OBJ1, OBJ2)"
Return bitwise or. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_xor(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_xor(OBJ1, OBJ2)"
Return bitwise exclusive or. If necessary, the smallest number is padded
with leading zeros.
.PP
\fIBoolean operators\fR
.IX Subsection "Boolean operators"
.IP "\fI_is_zero(\s-1OBJ\s0)\fR" 4
.IX Item "_is_zero(OBJ)"
Returns a true value if \s-1OBJ\s0 is zero, and false value otherwise.
.IP "\fI_is_one(\s-1OBJ\s0)\fR" 4
.IX Item "_is_one(OBJ)"
Returns a true value if \s-1OBJ\s0 is one, and false value otherwise.
.IP "\fI_is_two(\s-1OBJ\s0)\fR" 4
.IX Item "_is_two(OBJ)"
Returns a true value if \s-1OBJ\s0 is two, and false value otherwise.
.IP "\fI_is_ten(\s-1OBJ\s0)\fR" 4
.IX Item "_is_ten(OBJ)"
Returns a true value if \s-1OBJ\s0 is ten, and false value otherwise.
.IP "\fI_is_even(\s-1OBJ\s0)\fR" 4
.IX Item "_is_even(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_is_odd(\s-1OBJ\s0)\fR" 4
.IX Item "_is_odd(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_acmp(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_acmp(OBJ1, OBJ2)"
Compare \s-1OBJ1\s0 and \s-1OBJ2\s0 and return \-1, 0, or 1, if \s-1OBJ1\s0 is less than, equal
to, or larger than \s-1OBJ2\s0, respectively.
.PP
\fIString conversion\fR
.IX Subsection "String conversion"
.IP "\fI_str(\s-1OBJ\s0)\fR" 4
.IX Item "_str(OBJ)"
Return a string representing the object. The returned string should have no
leading zeros, i.e., it should match \f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI_as_bin(\s-1OBJ\s0)\fR" 4
.IX Item "_as_bin(OBJ)"
Return the binary string representation of the number. The string must have a
\&'0b' prefix.
.IP "\fI_as_oct(\s-1OBJ\s0)\fR" 4
.IX Item "_as_oct(OBJ)"
Return the octal string representation of the number. The string must have
a '0x' prefix.
.Sp
Note: This method was required from Math::BigInt version 1.78, but the required
\&\s-1API\s0 version number was not incremented, so there are older libraries that
support \s-1API\s0 version 1, but do not support \f(CW\*(C`_as_oct()\*(C'\fR.
.IP "\fI_as_hex(\s-1OBJ\s0)\fR" 4
.IX Item "_as_hex(OBJ)"
Return the hexadecimal string representation of the number. The string must
have a '0x' prefix.
.PP
\fINumeric conversion\fR
.IX Subsection "Numeric conversion"
.IP "\fI_num(\s-1OBJ\s0)\fR" 4
.IX Item "_num(OBJ)"
Given an object, return a Perl scalar number (int/float) representing this
number.
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_copy(\s-1OBJ\s0)\fR" 4
.IX Item "_copy(OBJ)"
Return a true copy of the object.
.IP "\fI_len(\s-1OBJ\s0)\fR" 4
.IX Item "_len(OBJ)"
Returns the number of the decimal digits in the number. The output is a
Perl scalar.
.IP "\fI_zeros(\s-1OBJ\s0)\fR" 4
.IX Item "_zeros(OBJ)"
Return the number of trailing decimal zeros. The output is a Perl scalar.
.IP "\fI_digit(\s-1OBJ\s0, N)\fR" 4
.IX Item "_digit(OBJ, N)"
Return the Nth digit as a Perl scalar. N is a Perl scalar, where zero refers to
the rightmost (least significant) digit, and negative values count from the
left (most significant digit). If \f(CW$obj\fR represents the number 123, then
\&\fI_digit($obj, 0)\fR is 3 and \fI_digit(123, \-1)\fR is 1.
.IP "\fI_check(\s-1OBJ\s0)\fR" 4
.IX Item "_check(OBJ)"
Return a true value if the object is \s-1OK\s0, and a false value otherwise. This is a
check routine to test the internal state of the object for corruption.
.SS "\s-1API\s0 version 2"
.IX Subsection "API version 2"
The following methods are required for an \s-1API\s0 version of 2 or greater.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_1ex(N)\fR" 4
.IX Item "_1ex(N)"
Return an object representing the number 10**N where N >= 0 is a Perl
scalar.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.IP "\fI_nok(\s-1OBJ1\s0, \s-1OBJ2\s0)\fR" 4
.IX Item "_nok(OBJ1, OBJ2)"
Return the binomial coefficient \s-1OBJ1\s0 over \s-1OBJ1\s0.
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_alen(\s-1OBJ\s0)\fR" 4
.IX Item "_alen(OBJ)"
Return the approximate number of decimal digits of the object. The
output is one Perl scalar. This estimate must be greater than or equal
to what \f(CW\*(C`_len()\*(C'\fR returns.
.SS "\s-1API\s0 optional methods"
.IX Subsection "API optional methods"
The following methods are optional, and can be defined if the underlying lib
has a fast way to do them. If undefined, Math::BigInt will use pure Perl (hence
slow) fallback routines to emulate these:
.PP
\fISigned bitwise operators.\fR
.IX Subsection "Signed bitwise operators."
.PP
Each of these methods may modify the first input argument.
.IP "\fI_signed_or(\s-1OBJ1\s0, \s-1OBJ2\s0, \s-1SIGN1\s0, \s-1SIGN2\s0)\fR" 4
.IX Item "_signed_or(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise or.
.IP "\fI_signed_and(\s-1OBJ1\s0, \s-1OBJ2\s0, \s-1SIGN1\s0, \s-1SIGN2\s0)\fR" 4
.IX Item "_signed_and(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise and.
.IP "\fI_signed_xor(\s-1OBJ1\s0, \s-1OBJ2\s0, \s-1SIGN1\s0, \s-1SIGN2\s0)\fR" 4
.IX Item "_signed_xor(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise exclusive or.
.SH "WRAP YOUR OWN"
.IX Header "WRAP YOUR OWN"
If you want to port your own favourite c\-lib for big numbers to the
Math::BigInt interface, you can take any of the already existing modules as
a rough guideline. You should really wrap up the latest BigInt and BigFloat
testsuites with your module, and replace in them any of the following:
.PP
.Vb 1
\&        use Math::BigInt;
.Ve
.PP
by this:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqyourlib\*(Aq;
.Ve
.PP
This way you ensure that your library really works 100% within Math::BigInt.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
.IP "\(bu" 4
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.IP "\(bu" 4
Fixed, speed-up, streamlined and enhanced by Tels 2001 \- 2007.
.IP "\(bu" 4
\&\s-1API\s0 documentation corrected and extended by Peter John Acklam,
<pjacklam@online.no>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::Calc5.18.3pm                   0100644 0001750 0001750 00000044353 12566207460 024747  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::Calc 3pm"
.TH Math::BigInt::Calc 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::Calc \- Pure Perl module to support Math::BigInt
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This library provides support for big integer calculations. It is not
intended to be used by other modules. Other modules which support the same
\&\s-1API \s0(see below) can also be used to support Math::BigInt, like
Math::BigInt::GMP and Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In this library, the numbers are represented in base B = 10**N, where N is
the largest possible value that does not cause overflow in the intermediate
computations. The base B elements are stored in an array, with the least
significant element stored in array element zero. There are no leading zero
elements, except a single zero element when the number is zero.
.PP
For instance, if B = 10000, the number 1234567890 is represented internally
as [3456, 7890, 12].
.SH "THE Math::BigInt API"
.IX Header "THE Math::BigInt API"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use a plug-in library for core math routines. Any module which
conforms to the \s-1API\s0 can be used by Math::BigInt by using this in your program:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name, like 'Math::BigInt::Pari', or only the short
version, like 'Pari'.
.SS "General Notes"
.IX Subsection "General Notes"
A library only needs to deal with unsigned big integers. Testing of input
parameter validity is done by the caller, so there is no need to worry about
underflow (e.g., in \f(CW\*(C`_sub()\*(C'\fR and \f(CW\*(C`_dec()\*(C'\fR) nor about division by zero (e.g.,
in \f(CW\*(C`_div()\*(C'\fR) or similar cases.
.PP
For some methods, the first parameter can be modified. That includes the
possibility that you return a reference to a completely different object
instead. Although keeping the reference and just changing its contents is
preferred over creating and returning a different reference.
.PP
Return values are always objects, strings, Perl scalars, or true/false for
comparison routines.
.SS "\s-1API\s0 version 1"
.IX Subsection "API version 1"
The following methods must be defined in order to support the use by
Math::BigInt v1.70 or later.
.PP
\fI\s-1API\s0 version\fR
.IX Subsection "API version"
.IP "\fI\fIapi_version()\fI\fR" 4
.IX Item "api_version()"
Return \s-1API\s0 version as a Perl scalar, 1 for Math::BigInt v1.70, 2 for
Math::BigInt v1.83.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_new(\s-1STR\s0)\fR" 4
.IX Item "_new(STR)"
Convert a string representing an unsigned decimal number to an object
representing the same number. The input is normalize, i.e., it matches
\&\f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI\fI_zero()\fI\fR" 4
.IX Item "_zero()"
Return an object representing the number zero.
.IP "\fI\fI_one()\fI\fR" 4
.IX Item "_one()"
Return an object representing the number one.
.IP "\fI\fI_two()\fI\fR" 4
.IX Item "_two()"
Return an object representing the number two.
.IP "\fI\fI_ten()\fI\fR" 4
.IX Item "_ten()"
Return an object representing the number ten.
.IP "\fI_from_bin(\s-1STR\s0)\fR" 4
.IX Item "_from_bin(STR)"
Return an object given a string representing a binary number. The input has a
\&'0b' prefix and matches the regular expression \f(CW\*(C`^0[bB](0|1[01]*)$\*(C'\fR.
.IP "\fI_from_oct(\s-1STR\s0)\fR" 4
.IX Item "_from_oct(STR)"
Return an object given a string representing an octal number. The input has a
\&'0' prefix and matches the regular expression \f(CW\*(C`^0[1\-7]*$\*(C'\fR.
.IP "\fI_from_hex(\s-1STR\s0)\fR" 4
.IX Item "_from_hex(STR)"
Return an object given a string representing a hexadecimal number. The input
has a '0x' prefix and matches the regular expression
\&\f(CW\*(C`^0x(0|[1\-9a\-fA\-F][\eda\-fA\-F]*)$\*(C'\fR.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.PP
Each of these methods may modify the first input argument, except \fI\fI_bgcd()\fI\fR,
which shall not modify any input argument, and \fI\fI_sub()\fI\fR which may modify the
second input argument.
.IP "\fI_add(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_add(OBJ1, OBJ2)"
Returns the result of adding \s-1OBJ2\s0 to \s-1OBJ1.\s0
.IP "\fI_mul(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_mul(OBJ1, OBJ2)"
Returns the result of multiplying \s-1OBJ2\s0 and \s-1OBJ1.\s0
.IP "\fI_div(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_div(OBJ1, OBJ2)"
Returns the result of dividing \s-1OBJ1\s0 by \s-1OBJ2\s0 and truncating the result to an
integer.
.IP "\fI_sub(\s-1OBJ1, OBJ2, FLAG\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2, FLAG)"
.PD 0
.IP "\fI_sub(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_sub(OBJ1, OBJ2)"
.PD
Returns the result of subtracting \s-1OBJ2\s0 by \s-1OBJ1.\s0 If \f(CW\*(C`flag\*(C'\fR is false or omitted,
\&\s-1OBJ1\s0 might be modified. If \f(CW\*(C`flag\*(C'\fR is true, \s-1OBJ2\s0 might be modified.
.IP "\fI_dec(\s-1OBJ\s0)\fR" 4
.IX Item "_dec(OBJ)"
Decrement \s-1OBJ\s0 by one.
.IP "\fI_inc(\s-1OBJ\s0)\fR" 4
.IX Item "_inc(OBJ)"
Increment \s-1OBJ\s0 by one.
.IP "\fI_mod(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_mod(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 modulo \s-1OBJ2,\s0 i.e., the remainder after dividing \s-1OBJ1\s0 by \s-1OBJ2.\s0
.IP "\fI_sqrt(\s-1OBJ\s0)\fR" 4
.IX Item "_sqrt(OBJ)"
Return the square root of the object, truncated to integer.
.IP "\fI_root(\s-1OBJ, N\s0)\fR" 4
.IX Item "_root(OBJ, N)"
Return Nth root of the object, truncated to int. N is >= 3.
.IP "\fI_fac(\s-1OBJ\s0)\fR" 4
.IX Item "_fac(OBJ)"
Return factorial of object (1*2*3*4*...).
.IP "\fI_pow(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_pow(OBJ1, OBJ2)"
Return \s-1OBJ1\s0 to the power of \s-1OBJ2.\s0 By convention, 0**0 = 1.
.IP "\fI_modinv(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_modinv(OBJ1, OBJ2)"
Return modular multiplicative inverse, i.e., return \s-1OBJ3\s0 so that
.Sp
.Vb 1
\&    (OBJ3 * OBJ1) % OBJ2 = 1 % OBJ2
.Ve
.Sp
The result is returned as two arguments. If the modular multiplicative
inverse does not exist, both arguments are undefined. Otherwise, the
arguments are a number (object) and its sign (\*(L"+\*(R" or \*(L"\-\*(R").
.Sp
The output value, with its sign, must either be a positive value in the
range 1,2,...,OBJ2\-1 or the same value subtracted \s-1OBJ2.\s0 For instance, if the
input arguments are objects representing the numbers 7 and 5, the method
must either return an object representing the number 3 and a \*(L"+\*(R" sign, since
(3*7) % 5 = 1 % 5, or an object representing the number 2 and \*(L"\-\*(R" sign,
since (\-2*7) % 5 = 1 % 5.
.IP "\fI_modpow(\s-1OBJ1, OBJ2, OBJ3\s0)\fR" 4
.IX Item "_modpow(OBJ1, OBJ2, OBJ3)"
Return modular exponentiation, (\s-1OBJ1\s0 ** \s-1OBJ2\s0) % \s-1OBJ3.\s0
.IP "\fI_rsft(\s-1OBJ, N, B\s0)\fR" 4
.IX Item "_rsft(OBJ, N, B)"
Shift object N digits right in base B and return the resulting object. This is
equivalent to performing integer division by B**N and discarding the remainder,
except that it might be much faster, depending on how the number is represented
internally.
.Sp
For instance, if the object \f(CW$obj\fR represents the hexadecimal number 0xabcde,
then \f(CW\*(C`_rsft($obj, 2, 16)\*(C'\fR returns an object representing the number 0xabc. The
\&\*(L"remainer\*(R", 0xde, is discarded and not returned.
.IP "\fI_lsft(\s-1OBJ, N, B\s0)\fR" 4
.IX Item "_lsft(OBJ, N, B)"
Shift the object N digits left in base B. This is equivalent to multiplying by
B**N, except that it might be much faster, depending on how the number is
represented internally.
.IP "\fI_log_int(\s-1OBJ, B\s0)\fR" 4
.IX Item "_log_int(OBJ, B)"
Return integer log of \s-1OBJ\s0 to base \s-1BASE.\s0 This method has two output arguments,
the \s-1OBJECT\s0 and a \s-1STATUS.\s0 The \s-1STATUS\s0 is Perl scalar; it is 1 if \s-1OBJ\s0 is the exact
result, 0 if the result was truncted to give \s-1OBJ,\s0 and undef if it is unknown
whether \s-1OBJ\s0 is the exact result.
.IP "\fI_gcd(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_gcd(OBJ1, OBJ2)"
Return the greatest common divisor of \s-1OBJ1\s0 and \s-1OBJ2.\s0
.PP
\fIBitwise operators\fR
.IX Subsection "Bitwise operators"
.PP
Each of these methods may modify the first input argument.
.IP "\fI_and(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_and(OBJ1, OBJ2)"
Return bitwise and. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_or(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_or(OBJ1, OBJ2)"
Return bitwise or. If necessary, the smallest number is padded with leading
zeros.
.IP "\fI_xor(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_xor(OBJ1, OBJ2)"
Return bitwise exclusive or. If necessary, the smallest number is padded
with leading zeros.
.PP
\fIBoolean operators\fR
.IX Subsection "Boolean operators"
.IP "\fI_is_zero(\s-1OBJ\s0)\fR" 4
.IX Item "_is_zero(OBJ)"
Returns a true value if \s-1OBJ\s0 is zero, and false value otherwise.
.IP "\fI_is_one(\s-1OBJ\s0)\fR" 4
.IX Item "_is_one(OBJ)"
Returns a true value if \s-1OBJ\s0 is one, and false value otherwise.
.IP "\fI_is_two(\s-1OBJ\s0)\fR" 4
.IX Item "_is_two(OBJ)"
Returns a true value if \s-1OBJ\s0 is two, and false value otherwise.
.IP "\fI_is_ten(\s-1OBJ\s0)\fR" 4
.IX Item "_is_ten(OBJ)"
Returns a true value if \s-1OBJ\s0 is ten, and false value otherwise.
.IP "\fI_is_even(\s-1OBJ\s0)\fR" 4
.IX Item "_is_even(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_is_odd(\s-1OBJ\s0)\fR" 4
.IX Item "_is_odd(OBJ)"
Return a true value if \s-1OBJ\s0 is an even integer, and a false value otherwise.
.IP "\fI_acmp(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_acmp(OBJ1, OBJ2)"
Compare \s-1OBJ1\s0 and \s-1OBJ2\s0 and return \-1, 0, or 1, if \s-1OBJ1\s0 is less than, equal
to, or larger than \s-1OBJ2,\s0 respectively.
.PP
\fIString conversion\fR
.IX Subsection "String conversion"
.IP "\fI_str(\s-1OBJ\s0)\fR" 4
.IX Item "_str(OBJ)"
Return a string representing the object. The returned string should have no
leading zeros, i.e., it should match \f(CW\*(C`^(0|[1\-9]\ed*)$\*(C'\fR.
.IP "\fI_as_bin(\s-1OBJ\s0)\fR" 4
.IX Item "_as_bin(OBJ)"
Return the binary string representation of the number. The string must have a
\&'0b' prefix.
.IP "\fI_as_oct(\s-1OBJ\s0)\fR" 4
.IX Item "_as_oct(OBJ)"
Return the octal string representation of the number. The string must have
a '0x' prefix.
.Sp
Note: This method was required from Math::BigInt version 1.78, but the required
\&\s-1API\s0 version number was not incremented, so there are older libraries that
support \s-1API\s0 version 1, but do not support \f(CW\*(C`_as_oct()\*(C'\fR.
.IP "\fI_as_hex(\s-1OBJ\s0)\fR" 4
.IX Item "_as_hex(OBJ)"
Return the hexadecimal string representation of the number. The string must
have a '0x' prefix.
.PP
\fINumeric conversion\fR
.IX Subsection "Numeric conversion"
.IP "\fI_num(\s-1OBJ\s0)\fR" 4
.IX Item "_num(OBJ)"
Given an object, return a Perl scalar number (int/float) representing this
number.
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_copy(\s-1OBJ\s0)\fR" 4
.IX Item "_copy(OBJ)"
Return a true copy of the object.
.IP "\fI_len(\s-1OBJ\s0)\fR" 4
.IX Item "_len(OBJ)"
Returns the number of the decimal digits in the number. The output is a
Perl scalar.
.IP "\fI_zeros(\s-1OBJ\s0)\fR" 4
.IX Item "_zeros(OBJ)"
Return the number of trailing decimal zeros. The output is a Perl scalar.
.IP "\fI_digit(\s-1OBJ, N\s0)\fR" 4
.IX Item "_digit(OBJ, N)"
Return the Nth digit as a Perl scalar. N is a Perl scalar, where zero refers to
the rightmost (least significant) digit, and negative values count from the
left (most significant digit). If \f(CW$obj\fR represents the number 123, then
\&\fI_digit($obj, 0)\fR is 3 and \fI_digit(123, \-1)\fR is 1.
.IP "\fI_check(\s-1OBJ\s0)\fR" 4
.IX Item "_check(OBJ)"
Return a true value if the object is \s-1OK,\s0 and a false value otherwise. This is a
check routine to test the internal state of the object for corruption.
.SS "\s-1API\s0 version 2"
.IX Subsection "API version 2"
The following methods are required for an \s-1API\s0 version of 2 or greater.
.PP
\fIConstructors\fR
.IX Subsection "Constructors"
.IP "\fI_1ex(N)\fR" 4
.IX Item "_1ex(N)"
Return an object representing the number 10**N where N >= 0 is a Perl
scalar.
.PP
\fIMathematical functions\fR
.IX Subsection "Mathematical functions"
.IP "\fI_nok(\s-1OBJ1, OBJ2\s0)\fR" 4
.IX Item "_nok(OBJ1, OBJ2)"
Return the binomial coefficient \s-1OBJ1\s0 over \s-1OBJ1.\s0
.PP
\fIMiscellaneous\fR
.IX Subsection "Miscellaneous"
.IP "\fI_alen(\s-1OBJ\s0)\fR" 4
.IX Item "_alen(OBJ)"
Return the approximate number of decimal digits of the object. The
output is one Perl scalar. This estimate must be greater than or equal
to what \f(CW\*(C`_len()\*(C'\fR returns.
.SS "\s-1API\s0 optional methods"
.IX Subsection "API optional methods"
The following methods are optional, and can be defined if the underlying lib
has a fast way to do them. If undefined, Math::BigInt will use pure Perl (hence
slow) fallback routines to emulate these:
.PP
\fISigned bitwise operators.\fR
.IX Subsection "Signed bitwise operators."
.PP
Each of these methods may modify the first input argument.
.IP "\fI_signed_or(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_or(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise or.
.IP "\fI_signed_and(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_and(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise and.
.IP "\fI_signed_xor(\s-1OBJ1, OBJ2, SIGN1, SIGN2\s0)\fR" 4
.IX Item "_signed_xor(OBJ1, OBJ2, SIGN1, SIGN2)"
Return the signed bitwise exclusive or.
.SH "WRAP YOUR OWN"
.IX Header "WRAP YOUR OWN"
If you want to port your own favourite c\-lib for big numbers to the
Math::BigInt interface, you can take any of the already existing modules as
a rough guideline. You should really wrap up the latest BigInt and BigFloat
testsuites with your module, and replace in them any of the following:
.PP
.Vb 1
\&        use Math::BigInt;
.Ve
.PP
by this:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqyourlib\*(Aq;
.Ve
.PP
This way you ensure that your library really works 100% within Math::BigInt.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
.IP "\(bu" 4
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.IP "\(bu" 4
Fixed, speed-up, streamlined and enhanced by Tels 2001 \- 2007.
.IP "\(bu" 4
\&\s-1API\s0 documentation corrected and extended by Peter John Acklam,
<pjacklam@online.no>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::CalcEmu.3pm                    0100644 0001750 0001750 00000012102 12566207460 025065  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::CalcEmu 3pm"
.TH Math::BigInt::CalcEmu 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::CalcEmu \- Emulate low\-level math with BigInt code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigInt::CalcEmu;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Contains routines that emulate low-level math functions in BigInt, e.g.
optional routines the low-level math package does not provide on its own.
.PP
Will be loaded on demand and called automatically by BigInt.
.PP
Stuff here is really low-priority to optimize, since it is far better to
implement the operation in the low-level math library directly, possible even
using a call to the native lib.
.SH "METHODS"
.IX Header "METHODS"
.SS "_\|_emu_bxor"
.IX Subsection "__emu_bxor"
.SS "_\|_emu_band"
.IX Subsection "__emu_band"
.SS "_\|_emu_bior"
.IX Subsection "__emu_bior"
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) Tels http://bloodgate.com 2003, 2004 \- based on BigInt code by
Tels from 2001\-2003.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::CalcEmu5.16.3pm                0100644 0001750 0001750 00000011610 12566207436 025405  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::CalcEmu 3pm"
.TH Math::BigInt::CalcEmu 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::CalcEmu \- Emulate low\-level math with BigInt code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigInt::CalcEmu;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Contains routines that emulate low-level math functions in BigInt, e.g.
optional routines the low-level math package does not provide on its own.
.PP
Will be loaded on demand and called automatically by BigInt.
.PP
Stuff here is really low-priority to optimize, since it is far better to
implement the operation in the low-level math library directly, possible even
using a call to the native lib.
.SH "METHODS"
.IX Header "METHODS"
.SS "_\|_emu_bxor"
.IX Subsection "__emu_bxor"
.SS "_\|_emu_band"
.IX Subsection "__emu_band"
.SS "_\|_emu_bior"
.IX Subsection "__emu_bior"
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) Tels http://bloodgate.com 2003, 2004 \- based on BigInt code by
Tels from 2001\-2003.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat, Math::BigInt::BitVect,
Math::BigInt::GMP and Math::BigInt::Pari.
                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::CalcEmu5.18.3pm                0100644 0001750 0001750 00000012102 12566207460 025401  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::CalcEmu 3pm"
.TH Math::BigInt::CalcEmu 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::CalcEmu \- Emulate low\-level math with BigInt code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigInt::CalcEmu;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Contains routines that emulate low-level math functions in BigInt, e.g.
optional routines the low-level math package does not provide on its own.
.PP
Will be loaded on demand and called automatically by BigInt.
.PP
Stuff here is really low-priority to optimize, since it is far better to
implement the operation in the low-level math library directly, possible even
using a call to the native lib.
.SH "METHODS"
.IX Header "METHODS"
.SS "_\|_emu_bxor"
.IX Subsection "__emu_bxor"
.SS "_\|_emu_band"
.IX Subsection "__emu_band"
.SS "_\|_emu_bior"
.IX Subsection "__emu_bior"
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) Tels http://bloodgate.com 2003, 2004 \- based on BigInt code by
Tels from 2001\-2003.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::FastCalc.3pm                   0100644 0001750 0001750 00000014044 12566207460 025243  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::FastCalc 3pm"
.TH Math::BigInt::FastCalc 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::FastCalc \- Math::BigInt::Calc with some XS for more speed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Provides support for big integer calculations. Not intended to be used by
other modules. Other modules which sport the same functions can also be used
to support Math::BigInt, like Math::BigInt::GMP or Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use library modules for core math routines. Any module which
follows the same \s-1API\s0 as this can be used instead by using the following:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name ('Math::BigInt::Pari'), or only the short
version like 'Pari'. To use this library:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(AqFastCalc\*(Aq;
.Ve
.PP
Note that from Math::BigInt v1.76 onwards, FastCalc will be loaded
automatically, if possible.
.SH "STORAGE"
.IX Header "STORAGE"
FastCalc works exactly like Calc, in stores the numbers in decimal form,
chopped into parts.
.SH "METHODS"
.IX Header "METHODS"
The following functions are now implemented in FastCalc.xs:
.PP
.Vb 6
\&        _is_odd         _is_even        _is_one         _is_zero
\&        _is_two         _is_ten
\&        _zero           _one            _two            _ten
\&        _acmp           _len
\&        _inc            _dec
\&        _\|_strip_zeros   _copy
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.PP
Fixed, sped-up and enhanced by Tels http://bloodgate.com 2001\-2003.
Further streamlining (api_version 1 etc.) by Tels 2004\-2007.
.PP
Bug-fixing by Peter John Acklam <pjacklam@online.no> 2010\-2011.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::FastCalc5.16.3pm               0100644 0001750 0001750 00000013523 12566207436 025561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::FastCalc 3pm"
.TH Math::BigInt::FastCalc 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::FastCalc \- Math::BigInt::Calc with some XS for more speed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Provides support for big integer calculations. Not intended to be used by
other modules. Other modules which sport the same functions can also be used
to support Math::BigInt, like Math::BigInt::GMP or Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use library modules for core math routines. Any module which
follows the same \s-1API\s0 as this can be used instead by using the following:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name ('Math::BigInt::Pari'), or only the short
version like 'Pari'. To use this library:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(AqFastCalc\*(Aq;
.Ve
.PP
Note that from Math::BigInt v1.76 onwards, FastCalc will be loaded
automatically, if possible.
.SH "STORAGE"
.IX Header "STORAGE"
FastCalc works exactly like Calc, in stores the numbers in decimal form,
chopped into parts.
.SH "METHODS"
.IX Header "METHODS"
The following functions are now implemented in FastCalc.xs:
.PP
.Vb 6
\&        _is_odd         _is_even        _is_one         _is_zero
\&        _is_two         _is_ten
\&        _zero           _one            _two            _ten
\&        _acmp           _len
\&        _inc            _dec
\&        _\|_strip_zeros   _copy
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.PP
Fixed, sped-up and enhanced by Tels http://bloodgate.com 2001\-2003.
Further streamlining (api_version 1 etc.) by Tels 2004\-2007.
.PP
Bug-fixing by Peter John Acklam <pjacklam@online.no> 2010\-2011.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigInt::FastCalc5.18.3pm               0100644 0001750 0001750 00000014044 12566207460 025557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigInt::FastCalc 3pm"
.TH Math::BigInt::FastCalc 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigInt::FastCalc \- Math::BigInt::Calc with some XS for more speed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Provides support for big integer calculations. Not intended to be used by
other modules. Other modules which sport the same functions can also be used
to support Math::BigInt, like Math::BigInt::GMP or Math::BigInt::Pari.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In order to allow for multiple big integer libraries, Math::BigInt was
rewritten to use library modules for core math routines. Any module which
follows the same \s-1API\s0 as this can be used instead by using the following:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(Aqlibname\*(Aq;
.Ve
.PP
\&'libname' is either the long name ('Math::BigInt::Pari'), or only the short
version like 'Pari'. To use this library:
.PP
.Vb 1
\&        use Math::BigInt lib => \*(AqFastCalc\*(Aq;
.Ve
.PP
Note that from Math::BigInt v1.76 onwards, FastCalc will be loaded
automatically, if possible.
.SH "STORAGE"
.IX Header "STORAGE"
FastCalc works exactly like Calc, in stores the numbers in decimal form,
chopped into parts.
.SH "METHODS"
.IX Header "METHODS"
The following functions are now implemented in FastCalc.xs:
.PP
.Vb 6
\&        _is_odd         _is_even        _is_one         _is_zero
\&        _is_two         _is_ten
\&        _zero           _one            _two            _ten
\&        _acmp           _len
\&        _inc            _dec
\&        _\|_strip_zeros   _copy
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Original math code by Mark Biggar, rewritten by Tels <http://bloodgate.com/>
in late 2000.
Separated from BigInt and shaped \s-1API\s0 with the help of John Peacock.
.PP
Fixed, sped-up and enhanced by Tels http://bloodgate.com 2001\-2003.
Further streamlining (api_version 1 etc.) by Tels 2004\-2007.
.PP
Bug-fixing by Peter John Acklam <pjacklam@online.no> 2010\-2011.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat,
Math::BigInt::GMP, Math::BigInt::FastCalc and Math::BigInt::Pari.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigRat.3pm                             0100644 0001750 0001750 00000045052 12566207460 023455  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigRat 3pm"
.TH Math::BigRat 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigRat \- Arbitrary big rational numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigRat;
\&
\&        my $x = Math::BigRat\->new(\*(Aq3/7\*(Aq); $x += \*(Aq5/9\*(Aq;
\&
\&        print $x\->bstr(),"\en";
\&        print $x ** 2,"\en";
\&
\&        my $y = Math::BigRat\->new(\*(Aqinf\*(Aq);
\&        print "$y ", ($y\->is_inf ? \*(Aqis\*(Aq : \*(Aqis not\*(Aq) , " infinity\en";
\&
\&        my $z = Math::BigRat\->new(144); $z\->bsqrt();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::BigRat complements Math::BigInt and Math::BigFloat by providing support
for arbitrary big rational numbers.
.SS "\s-1MATH LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
You can change the underlying module that does the low-level
math operations by using:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqGMP\*(Aq;
.Ve
.PP
Note: This needs Math::BigInt::GMP installed.
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want to get warned when the fallback occurs, replace \*(L"try\*(R" with
\&\*(L"lib\*(R":
.PP
.Vb 1
\&        use Math::BigRat lib => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want the code to die instead, replace \*(L"try\*(R" with
\&\*(L"only\*(R":
.PP
.Vb 1
\&        use Math::BigRat only => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Any methods not listed here are derived from Math::BigFloat (or
Math::BigInt), so make sure you check these two modules for further
information.
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);
.Ve
.PP
Create a new Math::BigRat object. Input can come in various forms:
.PP
.Vb 9
\&        $x = Math::BigRat\->new(123);                            # scalars
\&        $x = Math::BigRat\->new(\*(Aqinf\*(Aq);                          # infinity
\&        $x = Math::BigRat\->new(\*(Aq123.3\*(Aq);                        # float
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);                          # simple string
\&        $x = Math::BigRat\->new(\*(Aq1 / 3\*(Aq);                        # spaced
\&        $x = Math::BigRat\->new(\*(Aq1 / 0.1\*(Aq);                      # w/ floats
\&        $x = Math::BigRat\->new(Math::BigInt\->new(3));           # BigInt
\&        $x = Math::BigRat\->new(Math::BigFloat\->new(\*(Aq3.1\*(Aq));     # BigFloat
\&        $x = Math::BigRat\->new(Math::BigInt::Lite\->new(\*(Aq2\*(Aq));   # BigLite
\&
\&        # You can also give D and N as different objects:
\&        $x = Math::BigRat\->new(
\&                Math::BigInt\->new(\-123),
\&                Math::BigInt\->new(7),
\&                );                      # => \-123/7
.Ve
.SS "\fInumerator()\fP"
.IX Subsection "numerator()"
.Vb 1
\&        $n = $x\->numerator();
.Ve
.PP
Returns a copy of the numerator (the part above the line) as signed BigInt.
.SS "\fIdenominator()\fP"
.IX Subsection "denominator()"
.Vb 1
\&        $d = $x\->denominator();
.Ve
.PP
Returns a copy of the denominator (the part under the line) as positive BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        ($n,$d) = $x\->parts();
.Ve
.PP
Return a list consisting of (signed) numerator and (unsigned) denominator as
BigInts.
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        my $y = $x\->numify();
.Ve
.PP
Returns the object as a scalar. This will lose some data if the object
cannot be represented by a normal Perl scalar (integer or float), so
use \fIas_int()\fR or \*(L"\fIas_float()\fR\*(R" instead.
.PP
This routine is automatically used whenever a scalar is required:
.PP
.Vb 3
\&        my $x = Math::BigRat\->new(\*(Aq3/1\*(Aq);
\&        @array = (0,1,2,3);
\&        $y = $array[$x];                # set $y to 3
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_int(),"\en";                # \*(Aq1\*(Aq
.Ve
.PP
Returns a copy of the object as BigInt, truncated to an integer.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR is an alias for \f(CW\*(C`as_int()\*(C'\fR.
.SS "\fIas_float()\fP"
.IX Subsection "as_float()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_float(),"\en";              # \*(Aq1\*(Aq
\&
\&        $x = Math::BigRat\->new(\*(Aq2/3\*(Aq);
\&        print $x\->as_float(5),"\en";             # \*(Aq0.66667\*(Aq
.Ve
.PP
Returns a copy of the object as BigFloat, preserving the
accuracy as wanted, or the default of 40 digits.
.PP
This method was added in v0.22 of Math::BigRat (April 2008).
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_hex(),"\en";                # \*(Aq0xd\*(Aq
.Ve
.PP
Returns the BigRat as hexadecimal string. Works only for integers.
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_bin(),"\en";                # \*(Aq0x1101\*(Aq
.Ve
.PP
Returns the BigRat as binary string. Works only for integers.
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_oct(),"\en";                # \*(Aq015\*(Aq
.Ve
.PP
Returns the BigRat as octal string. Works only for integers.
.SS "\fIfrom_hex()\fP/\fIfrom_bin()\fP/\fIfrom_oct()\fP"
.IX Subsection "from_hex()/from_bin()/from_oct()"
.Vb 3
\&        my $h = Math::BigRat\->from_hex(\*(Aq0x10\*(Aq);
\&        my $b = Math::BigRat\->from_bin(\*(Aq0b10000000\*(Aq);
\&        my $o = Math::BigRat\->from_oct(\*(Aq020\*(Aq);
.Ve
.PP
Create a BigRat from an hexadecimal, binary or octal number
in string form.
.SS "\fIlength()\fP"
.IX Subsection "length()"
.Vb 1
\&        $len = $x\->length();
.Ve
.PP
Return the length of \f(CW$x\fR in digits for integer values.
.SS "\fIdigit()\fP"
.IX Subsection "digit()"
.Vb 2
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(1);     # 1
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(\-1);    # 3
.Ve
.PP
Return the N'ths digit from X when X is an integer value.
.SS "\fIbnorm()\fP"
.IX Subsection "bnorm()"
.Vb 1
\&        $x\->bnorm();
.Ve
.PP
Reduce the number to the shortest form. This routine is called
automatically whenever it is needed.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();
.Ve
.PP
Calculates the factorial of \f(CW$x\fR. For instance:
.PP
.Vb 2
\&        print Math::BigRat\->new(\*(Aq3/1\*(Aq)\->bfac(),"\en";    # 1*2*3
\&        print Math::BigRat\->new(\*(Aq5/1\*(Aq)\->bfac(),"\en";    # 1*2*3*4*5
.Ve
.PP
Works currently only for integers.
.SS "\fIbround()\fP/\fIround()\fP/\fIbfround()\fP"
.IX Subsection "bround()/round()/bfround()"
Are not yet implemented.
.SS "\fIbmod()\fP"
.IX Subsection "bmod()"
.Vb 4
\&        use Math::BigRat;
\&        my $x = Math::BigRat\->new(\*(Aq7/4\*(Aq);
\&        my $y = Math::BigRat\->new(\*(Aq4/3\*(Aq);
\&        print $x\->bmod($y);
.Ve
.PP
Set \f(CW$x\fR to the remainder of the division of \f(CW$x\fR by \f(CW$y\fR.
.SS "\fIbneg()\fP"
.IX Subsection "bneg()"
.Vb 1
\&        $x\->bneg();
.Ve
.PP
Used to negate the object in-place.
.SS "\fIis_one()\fP"
.IX Subsection "is_one()"
.Vb 1
\&        print "$x is 1\en" if $x\->is_one();
.Ve
.PP
Return true if \f(CW$x\fR is exactly one, otherwise false.
.SS "\fIis_zero()\fP"
.IX Subsection "is_zero()"
.Vb 1
\&        print "$x is 0\en" if $x\->is_zero();
.Ve
.PP
Return true if \f(CW$x\fR is exactly zero, otherwise false.
.SS "\fIis_pos()\fP/\fIis_positive()\fP"
.IX Subsection "is_pos()/is_positive()"
.Vb 1
\&        print "$x is >= 0\en" if $x\->is_positive();
.Ve
.PP
Return true if \f(CW$x\fR is positive (greater than or equal to zero), otherwise
false. Please note that '+inf' is also positive, while 'NaN' and '\-inf' aren't.
.PP
\&\f(CW\*(C`is_positive()\*(C'\fR is an alias for \f(CW\*(C`is_pos()\*(C'\fR.
.SS "\fIis_neg()\fP/\fIis_negative()\fP"
.IX Subsection "is_neg()/is_negative()"
.Vb 1
\&        print "$x is < 0\en" if $x\->is_negative();
.Ve
.PP
Return true if \f(CW$x\fR is negative (smaller than zero), otherwise false. Please
note that '\-inf' is also negative, while 'NaN' and '+inf' aren't.
.PP
\&\f(CW\*(C`is_negative()\*(C'\fR is an alias for \f(CW\*(C`is_neg()\*(C'\fR.
.SS "\fIis_int()\fP"
.IX Subsection "is_int()"
.Vb 1
\&        print "$x is an integer\en" if $x\->is_int();
.Ve
.PP
Return true if \f(CW$x\fR has a denominator of 1 (e.g. no fraction parts), otherwise
false. Please note that '\-inf', 'inf' and 'NaN' aren't integer.
.SS "\fIis_odd()\fP"
.IX Subsection "is_odd()"
.Vb 1
\&        print "$x is odd\en" if $x\->is_odd();
.Ve
.PP
Return true if \f(CW$x\fR is odd, otherwise false.
.SS "\fIis_even()\fP"
.IX Subsection "is_even()"
.Vb 1
\&        print "$x is even\en" if $x\->is_even();
.Ve
.PP
Return true if \f(CW$x\fR is even, otherwise false.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR to the next bigger integer value (e.g. truncate the number to integer
and then increment it by one).
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Truncate \f(CW$x\fR to an integer value.
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();
.Ve
.PP
Calculate the square root of \f(CW$x\fR.
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($n);
.Ve
.PP
Calculate the N'th root of \f(CW$x\fR.
.SS "\fIbadd()\fP/\fIbmul()\fP/\fIbsub()\fP/\fIbdiv()\fP/\fIbdec()\fP/\fIbinc()\fP"
.IX Subsection "badd()/bmul()/bsub()/bdiv()/bdec()/binc()"
Please see the documentation in Math::BigInt.
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        my $z = $x\->copy();
.Ve
.PP
Makes a deep copy of the object.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbstr()\fP/\fIbsstr()\fP"
.IX Subsection "bstr()/bsstr()"
.Vb 3
\&        my $x = Math::BigInt\->new(\*(Aq8/4\*(Aq);
\&        print $x\->bstr(),"\en";                  # prints 1/2
\&        print $x\->bsstr(),"\en";                 # prints 1/2
.Ve
.PP
Return a string representing this object.
.SS "\fIbacmp()\fP/\fIbcmp()\fP"
.IX Subsection "bacmp()/bcmp()"
Used to compare numbers.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIblsft()\fP/\fIbrsft()\fP"
.IX Subsection "blsft()/brsft()"
Used to shift numbers left/right.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbpow()\fP"
.IX Subsection "bpow()"
.Vb 1
\&        $x\->bpow($y);
.Ve
.PP
Compute \f(CW$x\fR ** \f(CW$y\fR.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbexp()\fP"
.IX Subsection "bexp()"
.Vb 1
\&        $x\->bexp($accuracy);            # calculate e ** X
.Ve
.PP
Calculates two integers A and B so that A/B is equal to \f(CW\*(C`e ** $x\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is
Euler's number.
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.PP
See also \*(L"\fIblog()\fR\*(R".
.SS "\fIbnok()\fP"
.IX Subsection "bnok()"
.Vb 1
\&        $x\->bnok($y);              # x over y (binomial coefficient n over k)
.Ve
.PP
Calculates the binomial coefficient n over k, also called the \*(L"choose\*(R"
function. The result is equivalent to:
.PP
.Vb 3
\&        ( n )      n!
\&        | \- |  = \-\-\-\-\-\-\-
\&        ( k )    k!(n\-k)!
.Ve
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.SS "\fIconfig()\fP"
.IX Subsection "config()"
.Vb 1
\&        use Data::Dumper;
\&
\&        print Dumper ( Math::BigRat\->config() );
\&        print Math::BigRat\->config()\->{lib},"\en";
.Ve
.PP
Returns a hash containing the configuration, e.g. the version number, lib
loaded etc. The following hash keys are currently filled in with the
appropriate information.
.PP
.Vb 10
\&        key             RO/RW   Description
\&                                Example
\&        ============================================================
\&        lib             RO      Name of the Math library
\&                                Math::BigInt::Calc
\&        lib_version     RO      Version of \*(Aqlib\*(Aq
\&                                0.30
\&        class           RO      The class of config you just called
\&                                Math::BigRat
\&        version         RO      version number of the class you used
\&                                0.10
\&        upgrade         RW      To which class numbers are upgraded
\&                                undef
\&        downgrade       RW      To which class numbers are downgraded
\&                                undef
\&        precision       RW      Global precision
\&                                undef
\&        accuracy        RW      Global accuracy
\&                                undef
\&        round_mode      RW      Global round mode
\&                                even
\&        div_scale       RW      Fallback accuracy for div
\&                                40
\&        trap_nan        RW      Trap creation of NaN (undef = no)
\&                                undef
\&        trap_inf        RW      Trap creation of +inf/\-inf (undef = no)
\&                                undef
.Ve
.PP
By passing a reference to a hash you may set the configuration values. This
works only for values that a marked with a \f(CW\*(C`RW\*(C'\fR above, anything else is
read-only.
.SS "\fIobjectify()\fP"
.IX Subsection "objectify()"
This is an internal routine that turns scalars into objects.
.SH "BUGS"
.IX Header "BUGS"
Some things are not yet implemented, or only implemented half-way:
.IP "inf handling (partial)" 2
.IX Item "inf handling (partial)"
.PD 0
.IP "NaN handling (partial)" 2
.IX Item "NaN handling (partial)"
.IP "rounding (not implemented except for bceil/bfloor)" 2
.IX Item "rounding (not implemented except for bceil/bfloor)"
.ie n .IP "$x ** $y where $y is not an integer" 2
.el .IP "\f(CW$x\fR ** \f(CW$y\fR where \f(CW$y\fR is not an integer" 2
.IX Item "$x ** $y where $y is not an integer"
.IP "\fIbmod()\fR, \fIblog()\fR, \fIbmodinv()\fR and \fIbmodpow()\fR (partial)" 2
.IX Item "bmod(), blog(), bmodinv() and bmodpow() (partial)"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat and Math::Big as well as
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
See <http://search.cpan.org/search?dist=bignum> for a way to use
Math::BigRat.
.PP
The package at <http://search.cpan.org/search?dist=Math%3A%3ABigRat>
may contain more documentation and examples as well as testcases.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> 2001 \- 2009.
.PP
Currently maintained by Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> <http://leto.net>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigRat5.16.3pm                         0100644 0001750 0001750 00000044543 12566207437 023777  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigRat 3pm"
.TH Math::BigRat 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigRat \- Arbitrary big rational numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigRat;
\&
\&        my $x = Math::BigRat\->new(\*(Aq3/7\*(Aq); $x += \*(Aq5/9\*(Aq;
\&
\&        print $x\->bstr(),"\en";
\&        print $x ** 2,"\en";
\&
\&        my $y = Math::BigRat\->new(\*(Aqinf\*(Aq);
\&        print "$y ", ($y\->is_inf ? \*(Aqis\*(Aq : \*(Aqis not\*(Aq) , " infinity\en";
\&
\&        my $z = Math::BigRat\->new(144); $z\->bsqrt();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::BigRat complements Math::BigInt and Math::BigFloat by providing support
for arbitrary big rational numbers.
.SS "\s-1MATH\s0 \s-1LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
You can change the underlying module that does the low-level
math operations by using:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqGMP\*(Aq;
.Ve
.PP
Note: This needs Math::BigInt::GMP installed.
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want to get warned when the fallback occurs, replace \*(L"try\*(R" with
\&\*(L"lib\*(R":
.PP
.Vb 1
\&        use Math::BigRat lib => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want the code to die instead, replace \*(L"try\*(R" with
\&\*(L"only\*(R":
.PP
.Vb 1
\&        use Math::BigRat only => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Any methods not listed here are derived from Math::BigFloat (or
Math::BigInt), so make sure you check these two modules for further
information.
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);
.Ve
.PP
Create a new Math::BigRat object. Input can come in various forms:
.PP
.Vb 9
\&        $x = Math::BigRat\->new(123);                            # scalars
\&        $x = Math::BigRat\->new(\*(Aqinf\*(Aq);                          # infinity
\&        $x = Math::BigRat\->new(\*(Aq123.3\*(Aq);                        # float
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);                          # simple string
\&        $x = Math::BigRat\->new(\*(Aq1 / 3\*(Aq);                        # spaced
\&        $x = Math::BigRat\->new(\*(Aq1 / 0.1\*(Aq);                      # w/ floats
\&        $x = Math::BigRat\->new(Math::BigInt\->new(3));           # BigInt
\&        $x = Math::BigRat\->new(Math::BigFloat\->new(\*(Aq3.1\*(Aq));     # BigFloat
\&        $x = Math::BigRat\->new(Math::BigInt::Lite\->new(\*(Aq2\*(Aq));   # BigLite
\&
\&        # You can also give D and N as different objects:
\&        $x = Math::BigRat\->new(
\&                Math::BigInt\->new(\-123),
\&                Math::BigInt\->new(7),
\&                );                      # => \-123/7
.Ve
.SS "\fInumerator()\fP"
.IX Subsection "numerator()"
.Vb 1
\&        $n = $x\->numerator();
.Ve
.PP
Returns a copy of the numerator (the part above the line) as signed BigInt.
.SS "\fIdenominator()\fP"
.IX Subsection "denominator()"
.Vb 1
\&        $d = $x\->denominator();
.Ve
.PP
Returns a copy of the denominator (the part under the line) as positive BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        ($n,$d) = $x\->parts();
.Ve
.PP
Return a list consisting of (signed) numerator and (unsigned) denominator as
BigInts.
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        my $y = $x\->numify();
.Ve
.PP
Returns the object as a scalar. This will lose some data if the object
cannot be represented by a normal Perl scalar (integer or float), so
use \fIas_int()\fR or \fIas_float()\fR instead.
.PP
This routine is automatically used whenever a scalar is required:
.PP
.Vb 3
\&        my $x = Math::BigRat\->new(\*(Aq3/1\*(Aq);
\&        @array = (0,1,2,3);
\&        $y = $array[$x];                # set $y to 3
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_int(),"\en";                # \*(Aq1\*(Aq
.Ve
.PP
Returns a copy of the object as BigInt, truncated to an integer.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR is an alias for \f(CW\*(C`as_int()\*(C'\fR.
.SS "\fIas_float()\fP"
.IX Subsection "as_float()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_float(),"\en";              # \*(Aq1\*(Aq
\&
\&        $x = Math::BigRat\->new(\*(Aq2/3\*(Aq);
\&        print $x\->as_float(5),"\en";             # \*(Aq0.66667\*(Aq
.Ve
.PP
Returns a copy of the object as BigFloat, preserving the
accuracy as wanted, or the default of 40 digits.
.PP
This method was added in v0.22 of Math::BigRat (April 2008).
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_hex(),"\en";                # \*(Aq0xd\*(Aq
.Ve
.PP
Returns the BigRat as hexadecimal string. Works only for integers.
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_bin(),"\en";                # \*(Aq0x1101\*(Aq
.Ve
.PP
Returns the BigRat as binary string. Works only for integers.
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_oct(),"\en";                # \*(Aq015\*(Aq
.Ve
.PP
Returns the BigRat as octal string. Works only for integers.
.SS "\fIfrom_hex()\fP/\fIfrom_bin()\fP/\fIfrom_oct()\fP"
.IX Subsection "from_hex()/from_bin()/from_oct()"
.Vb 3
\&        my $h = Math::BigRat\->from_hex(\*(Aq0x10\*(Aq);
\&        my $b = Math::BigRat\->from_bin(\*(Aq0b10000000\*(Aq);
\&        my $o = Math::BigRat\->from_oct(\*(Aq020\*(Aq);
.Ve
.PP
Create a BigRat from an hexadecimal, binary or octal number
in string form.
.SS "\fIlength()\fP"
.IX Subsection "length()"
.Vb 1
\&        $len = $x\->length();
.Ve
.PP
Return the length of \f(CW$x\fR in digits for integer values.
.SS "\fIdigit()\fP"
.IX Subsection "digit()"
.Vb 2
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(1);     # 1
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(\-1);    # 3
.Ve
.PP
Return the N'ths digit from X when X is an integer value.
.SS "\fIbnorm()\fP"
.IX Subsection "bnorm()"
.Vb 1
\&        $x\->bnorm();
.Ve
.PP
Reduce the number to the shortest form. This routine is called
automatically whenever it is needed.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();
.Ve
.PP
Calculates the factorial of \f(CW$x\fR. For instance:
.PP
.Vb 2
\&        print Math::BigRat\->new(\*(Aq3/1\*(Aq)\->bfac(),"\en";    # 1*2*3
\&        print Math::BigRat\->new(\*(Aq5/1\*(Aq)\->bfac(),"\en";    # 1*2*3*4*5
.Ve
.PP
Works currently only for integers.
.SS "\fIbround()\fP/\fIround()\fP/\fIbfround()\fP"
.IX Subsection "bround()/round()/bfround()"
Are not yet implemented.
.SS "\fIbmod()\fP"
.IX Subsection "bmod()"
.Vb 4
\&        use Math::BigRat;
\&        my $x = Math::BigRat\->new(\*(Aq7/4\*(Aq);
\&        my $y = Math::BigRat\->new(\*(Aq4/3\*(Aq);
\&        print $x\->bmod($y);
.Ve
.PP
Set \f(CW$x\fR to the remainder of the division of \f(CW$x\fR by \f(CW$y\fR.
.SS "\fIbneg()\fP"
.IX Subsection "bneg()"
.Vb 1
\&        $x\->bneg();
.Ve
.PP
Used to negate the object in-place.
.SS "\fIis_one()\fP"
.IX Subsection "is_one()"
.Vb 1
\&        print "$x is 1\en" if $x\->is_one();
.Ve
.PP
Return true if \f(CW$x\fR is exactly one, otherwise false.
.SS "\fIis_zero()\fP"
.IX Subsection "is_zero()"
.Vb 1
\&        print "$x is 0\en" if $x\->is_zero();
.Ve
.PP
Return true if \f(CW$x\fR is exactly zero, otherwise false.
.SS "\fIis_pos()\fP/\fIis_positive()\fP"
.IX Subsection "is_pos()/is_positive()"
.Vb 1
\&        print "$x is >= 0\en" if $x\->is_positive();
.Ve
.PP
Return true if \f(CW$x\fR is positive (greater than or equal to zero), otherwise
false. Please note that '+inf' is also positive, while 'NaN' and '\-inf' aren't.
.PP
\&\f(CW\*(C`is_positive()\*(C'\fR is an alias for \f(CW\*(C`is_pos()\*(C'\fR.
.SS "\fIis_neg()\fP/\fIis_negative()\fP"
.IX Subsection "is_neg()/is_negative()"
.Vb 1
\&        print "$x is < 0\en" if $x\->is_negative();
.Ve
.PP
Return true if \f(CW$x\fR is negative (smaller than zero), otherwise false. Please
note that '\-inf' is also negative, while 'NaN' and '+inf' aren't.
.PP
\&\f(CW\*(C`is_negative()\*(C'\fR is an alias for \f(CW\*(C`is_neg()\*(C'\fR.
.SS "\fIis_int()\fP"
.IX Subsection "is_int()"
.Vb 1
\&        print "$x is an integer\en" if $x\->is_int();
.Ve
.PP
Return true if \f(CW$x\fR has a denominator of 1 (e.g. no fraction parts), otherwise
false. Please note that '\-inf', 'inf' and 'NaN' aren't integer.
.SS "\fIis_odd()\fP"
.IX Subsection "is_odd()"
.Vb 1
\&        print "$x is odd\en" if $x\->is_odd();
.Ve
.PP
Return true if \f(CW$x\fR is odd, otherwise false.
.SS "\fIis_even()\fP"
.IX Subsection "is_even()"
.Vb 1
\&        print "$x is even\en" if $x\->is_even();
.Ve
.PP
Return true if \f(CW$x\fR is even, otherwise false.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR to the next bigger integer value (e.g. truncate the number to integer
and then increment it by one).
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Truncate \f(CW$x\fR to an integer value.
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();
.Ve
.PP
Calculate the square root of \f(CW$x\fR.
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($n);
.Ve
.PP
Calculate the N'th root of \f(CW$x\fR.
.SS "\fIbadd()\fP/\fIbmul()\fP/\fIbsub()\fP/\fIbdiv()\fP/\fIbdec()\fP/\fIbinc()\fP"
.IX Subsection "badd()/bmul()/bsub()/bdiv()/bdec()/binc()"
Please see the documentation in Math::BigInt.
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        my $z = $x\->copy();
.Ve
.PP
Makes a deep copy of the object.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbstr()\fP/\fIbsstr()\fP"
.IX Subsection "bstr()/bsstr()"
.Vb 3
\&        my $x = Math::BigInt\->new(\*(Aq8/4\*(Aq);
\&        print $x\->bstr(),"\en";                  # prints 1/2
\&        print $x\->bsstr(),"\en";                 # prints 1/2
.Ve
.PP
Return a string representing this object.
.SS "\fIbacmp()\fP/\fIbcmp()\fP"
.IX Subsection "bacmp()/bcmp()"
Used to compare numbers.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIblsft()\fP/\fIbrsft()\fP"
.IX Subsection "blsft()/brsft()"
Used to shift numbers left/right.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbpow()\fP"
.IX Subsection "bpow()"
.Vb 1
\&        $x\->bpow($y);
.Ve
.PP
Compute \f(CW$x\fR ** \f(CW$y\fR.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbexp()\fP"
.IX Subsection "bexp()"
.Vb 1
\&        $x\->bexp($accuracy);            # calculate e ** X
.Ve
.PP
Calculates two integers A and B so that A/B is equal to \f(CW\*(C`e ** $x\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is
Euler's number.
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.PP
See also \fIblog()\fR.
.SS "\fIbnok()\fP"
.IX Subsection "bnok()"
.Vb 1
\&        $x\->bnok($y);              # x over y (binomial coefficient n over k)
.Ve
.PP
Calculates the binomial coefficient n over k, also called the \*(L"choose\*(R"
function. The result is equivalent to:
.PP
.Vb 3
\&        ( n )      n!
\&        | \- |  = \-\-\-\-\-\-\-
\&        ( k )    k!(n\-k)!
.Ve
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.SS "\fIconfig()\fP"
.IX Subsection "config()"
.Vb 1
\&        use Data::Dumper;
\&
\&        print Dumper ( Math::BigRat\->config() );
\&        print Math::BigRat\->config()\->{lib},"\en";
.Ve
.PP
Returns a hash containing the configuration, e.g. the version number, lib
loaded etc. The following hash keys are currently filled in with the
appropriate information.
.PP
.Vb 10
\&        key             RO/RW   Description
\&                                Example
\&        ============================================================
\&        lib             RO      Name of the Math library
\&                                Math::BigInt::Calc
\&        lib_version     RO      Version of \*(Aqlib\*(Aq
\&                                0.30
\&        class           RO      The class of config you just called
\&                                Math::BigRat
\&        version         RO      version number of the class you used
\&                                0.10
\&        upgrade         RW      To which class numbers are upgraded
\&                                undef
\&        downgrade       RW      To which class numbers are downgraded
\&                                undef
\&        precision       RW      Global precision
\&                                undef
\&        accuracy        RW      Global accuracy
\&                                undef
\&        round_mode      RW      Global round mode
\&                                even
\&        div_scale       RW      Fallback accuracy for div
\&                                40
\&        trap_nan        RW      Trap creation of NaN (undef = no)
\&                                undef
\&        trap_inf        RW      Trap creation of +inf/\-inf (undef = no)
\&                                undef
.Ve
.PP
By passing a reference to a hash you may set the configuration values. This
works only for values that a marked with a \f(CW\*(C`RW\*(C'\fR above, anything else is
read-only.
.SS "\fIobjectify()\fP"
.IX Subsection "objectify()"
This is an internal routine that turns scalars into objects.
.SH "BUGS"
.IX Header "BUGS"
Some things are not yet implemented, or only implemented half-way:
.IP "inf handling (partial)" 2
.IX Item "inf handling (partial)"
.PD 0
.IP "NaN handling (partial)" 2
.IX Item "NaN handling (partial)"
.IP "rounding (not implemented except for bceil/bfloor)" 2
.IX Item "rounding (not implemented except for bceil/bfloor)"
.ie n .IP "$x ** $y where $y is not an integer" 2
.el .IP "\f(CW$x\fR ** \f(CW$y\fR where \f(CW$y\fR is not an integer" 2
.IX Item "$x ** $y where $y is not an integer"
.IP "\fIbmod()\fR, \fIblog()\fR, \fIbmodinv()\fR and \fIbmodpow()\fR (partial)" 2
.IX Item "bmod(), blog(), bmodinv() and bmodpow() (partial)"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat and Math::Big as well as Math::BigInt::BitVect,
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
See <http://search.cpan.org/search?dist=bignum> for a way to use
Math::BigRat.
.PP
The package at <http://search.cpan.org/search?dist=Math%3A%3ABigRat>
may contain more documentation and examples as well as testcases.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> 2001 \- 2009.
.PP
Currently maintained by Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> <http://leto.net>
                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::BigRat5.18.3pm                         0100644 0001750 0001750 00000045052 12566207460 023771  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigRat 3pm"
.TH Math::BigRat 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigRat \- Arbitrary big rational numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::BigRat;
\&
\&        my $x = Math::BigRat\->new(\*(Aq3/7\*(Aq); $x += \*(Aq5/9\*(Aq;
\&
\&        print $x\->bstr(),"\en";
\&        print $x ** 2,"\en";
\&
\&        my $y = Math::BigRat\->new(\*(Aqinf\*(Aq);
\&        print "$y ", ($y\->is_inf ? \*(Aqis\*(Aq : \*(Aqis not\*(Aq) , " infinity\en";
\&
\&        my $z = Math::BigRat\->new(144); $z\->bsqrt();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::BigRat complements Math::BigInt and Math::BigFloat by providing support
for arbitrary big rational numbers.
.SS "\s-1MATH LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
You can change the underlying module that does the low-level
math operations by using:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqGMP\*(Aq;
.Ve
.PP
Note: This needs Math::BigInt::GMP installed.
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigRat try => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want to get warned when the fallback occurs, replace \*(L"try\*(R" with
\&\*(L"lib\*(R":
.PP
.Vb 1
\&        use Math::BigRat lib => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.PP
If you want the code to die instead, replace \*(L"try\*(R" with
\&\*(L"only\*(R":
.PP
.Vb 1
\&        use Math::BigRat only => \*(AqFoo,Math::BigInt::Bar\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Any methods not listed here are derived from Math::BigFloat (or
Math::BigInt), so make sure you check these two modules for further
information.
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);
.Ve
.PP
Create a new Math::BigRat object. Input can come in various forms:
.PP
.Vb 9
\&        $x = Math::BigRat\->new(123);                            # scalars
\&        $x = Math::BigRat\->new(\*(Aqinf\*(Aq);                          # infinity
\&        $x = Math::BigRat\->new(\*(Aq123.3\*(Aq);                        # float
\&        $x = Math::BigRat\->new(\*(Aq1/3\*(Aq);                          # simple string
\&        $x = Math::BigRat\->new(\*(Aq1 / 3\*(Aq);                        # spaced
\&        $x = Math::BigRat\->new(\*(Aq1 / 0.1\*(Aq);                      # w/ floats
\&        $x = Math::BigRat\->new(Math::BigInt\->new(3));           # BigInt
\&        $x = Math::BigRat\->new(Math::BigFloat\->new(\*(Aq3.1\*(Aq));     # BigFloat
\&        $x = Math::BigRat\->new(Math::BigInt::Lite\->new(\*(Aq2\*(Aq));   # BigLite
\&
\&        # You can also give D and N as different objects:
\&        $x = Math::BigRat\->new(
\&                Math::BigInt\->new(\-123),
\&                Math::BigInt\->new(7),
\&                );                      # => \-123/7
.Ve
.SS "\fInumerator()\fP"
.IX Subsection "numerator()"
.Vb 1
\&        $n = $x\->numerator();
.Ve
.PP
Returns a copy of the numerator (the part above the line) as signed BigInt.
.SS "\fIdenominator()\fP"
.IX Subsection "denominator()"
.Vb 1
\&        $d = $x\->denominator();
.Ve
.PP
Returns a copy of the denominator (the part under the line) as positive BigInt.
.SS "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        ($n,$d) = $x\->parts();
.Ve
.PP
Return a list consisting of (signed) numerator and (unsigned) denominator as
BigInts.
.SS "\fInumify()\fP"
.IX Subsection "numify()"
.Vb 1
\&        my $y = $x\->numify();
.Ve
.PP
Returns the object as a scalar. This will lose some data if the object
cannot be represented by a normal Perl scalar (integer or float), so
use \fIas_int()\fR or \*(L"\fIas_float()\fR\*(R" instead.
.PP
This routine is automatically used whenever a scalar is required:
.PP
.Vb 3
\&        my $x = Math::BigRat\->new(\*(Aq3/1\*(Aq);
\&        @array = (0,1,2,3);
\&        $y = $array[$x];                # set $y to 3
.Ve
.SS "\fIas_int()\fP/\fIas_number()\fP"
.IX Subsection "as_int()/as_number()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_int(),"\en";                # \*(Aq1\*(Aq
.Ve
.PP
Returns a copy of the object as BigInt, truncated to an integer.
.PP
\&\f(CW\*(C`as_number()\*(C'\fR is an alias for \f(CW\*(C`as_int()\*(C'\fR.
.SS "\fIas_float()\fP"
.IX Subsection "as_float()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13/7\*(Aq);
\&        print $x\->as_float(),"\en";              # \*(Aq1\*(Aq
\&
\&        $x = Math::BigRat\->new(\*(Aq2/3\*(Aq);
\&        print $x\->as_float(5),"\en";             # \*(Aq0.66667\*(Aq
.Ve
.PP
Returns a copy of the object as BigFloat, preserving the
accuracy as wanted, or the default of 40 digits.
.PP
This method was added in v0.22 of Math::BigRat (April 2008).
.SS "\fIas_hex()\fP"
.IX Subsection "as_hex()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_hex(),"\en";                # \*(Aq0xd\*(Aq
.Ve
.PP
Returns the BigRat as hexadecimal string. Works only for integers.
.SS "\fIas_bin()\fP"
.IX Subsection "as_bin()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_bin(),"\en";                # \*(Aq0x1101\*(Aq
.Ve
.PP
Returns the BigRat as binary string. Works only for integers.
.SS "\fIas_oct()\fP"
.IX Subsection "as_oct()"
.Vb 2
\&        $x = Math::BigRat\->new(\*(Aq13\*(Aq);
\&        print $x\->as_oct(),"\en";                # \*(Aq015\*(Aq
.Ve
.PP
Returns the BigRat as octal string. Works only for integers.
.SS "\fIfrom_hex()\fP/\fIfrom_bin()\fP/\fIfrom_oct()\fP"
.IX Subsection "from_hex()/from_bin()/from_oct()"
.Vb 3
\&        my $h = Math::BigRat\->from_hex(\*(Aq0x10\*(Aq);
\&        my $b = Math::BigRat\->from_bin(\*(Aq0b10000000\*(Aq);
\&        my $o = Math::BigRat\->from_oct(\*(Aq020\*(Aq);
.Ve
.PP
Create a BigRat from an hexadecimal, binary or octal number
in string form.
.SS "\fIlength()\fP"
.IX Subsection "length()"
.Vb 1
\&        $len = $x\->length();
.Ve
.PP
Return the length of \f(CW$x\fR in digits for integer values.
.SS "\fIdigit()\fP"
.IX Subsection "digit()"
.Vb 2
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(1);     # 1
\&        print Math::BigRat\->new(\*(Aq123/1\*(Aq)\->digit(\-1);    # 3
.Ve
.PP
Return the N'ths digit from X when X is an integer value.
.SS "\fIbnorm()\fP"
.IX Subsection "bnorm()"
.Vb 1
\&        $x\->bnorm();
.Ve
.PP
Reduce the number to the shortest form. This routine is called
automatically whenever it is needed.
.SS "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x\->bfac();
.Ve
.PP
Calculates the factorial of \f(CW$x\fR. For instance:
.PP
.Vb 2
\&        print Math::BigRat\->new(\*(Aq3/1\*(Aq)\->bfac(),"\en";    # 1*2*3
\&        print Math::BigRat\->new(\*(Aq5/1\*(Aq)\->bfac(),"\en";    # 1*2*3*4*5
.Ve
.PP
Works currently only for integers.
.SS "\fIbround()\fP/\fIround()\fP/\fIbfround()\fP"
.IX Subsection "bround()/round()/bfround()"
Are not yet implemented.
.SS "\fIbmod()\fP"
.IX Subsection "bmod()"
.Vb 4
\&        use Math::BigRat;
\&        my $x = Math::BigRat\->new(\*(Aq7/4\*(Aq);
\&        my $y = Math::BigRat\->new(\*(Aq4/3\*(Aq);
\&        print $x\->bmod($y);
.Ve
.PP
Set \f(CW$x\fR to the remainder of the division of \f(CW$x\fR by \f(CW$y\fR.
.SS "\fIbneg()\fP"
.IX Subsection "bneg()"
.Vb 1
\&        $x\->bneg();
.Ve
.PP
Used to negate the object in-place.
.SS "\fIis_one()\fP"
.IX Subsection "is_one()"
.Vb 1
\&        print "$x is 1\en" if $x\->is_one();
.Ve
.PP
Return true if \f(CW$x\fR is exactly one, otherwise false.
.SS "\fIis_zero()\fP"
.IX Subsection "is_zero()"
.Vb 1
\&        print "$x is 0\en" if $x\->is_zero();
.Ve
.PP
Return true if \f(CW$x\fR is exactly zero, otherwise false.
.SS "\fIis_pos()\fP/\fIis_positive()\fP"
.IX Subsection "is_pos()/is_positive()"
.Vb 1
\&        print "$x is >= 0\en" if $x\->is_positive();
.Ve
.PP
Return true if \f(CW$x\fR is positive (greater than or equal to zero), otherwise
false. Please note that '+inf' is also positive, while 'NaN' and '\-inf' aren't.
.PP
\&\f(CW\*(C`is_positive()\*(C'\fR is an alias for \f(CW\*(C`is_pos()\*(C'\fR.
.SS "\fIis_neg()\fP/\fIis_negative()\fP"
.IX Subsection "is_neg()/is_negative()"
.Vb 1
\&        print "$x is < 0\en" if $x\->is_negative();
.Ve
.PP
Return true if \f(CW$x\fR is negative (smaller than zero), otherwise false. Please
note that '\-inf' is also negative, while 'NaN' and '+inf' aren't.
.PP
\&\f(CW\*(C`is_negative()\*(C'\fR is an alias for \f(CW\*(C`is_neg()\*(C'\fR.
.SS "\fIis_int()\fP"
.IX Subsection "is_int()"
.Vb 1
\&        print "$x is an integer\en" if $x\->is_int();
.Ve
.PP
Return true if \f(CW$x\fR has a denominator of 1 (e.g. no fraction parts), otherwise
false. Please note that '\-inf', 'inf' and 'NaN' aren't integer.
.SS "\fIis_odd()\fP"
.IX Subsection "is_odd()"
.Vb 1
\&        print "$x is odd\en" if $x\->is_odd();
.Ve
.PP
Return true if \f(CW$x\fR is odd, otherwise false.
.SS "\fIis_even()\fP"
.IX Subsection "is_even()"
.Vb 1
\&        print "$x is even\en" if $x\->is_even();
.Ve
.PP
Return true if \f(CW$x\fR is even, otherwise false.
.SS "\fIbceil()\fP"
.IX Subsection "bceil()"
.Vb 1
\&        $x\->bceil();
.Ve
.PP
Set \f(CW$x\fR to the next bigger integer value (e.g. truncate the number to integer
and then increment it by one).
.SS "\fIbfloor()\fP"
.IX Subsection "bfloor()"
.Vb 1
\&        $x\->bfloor();
.Ve
.PP
Truncate \f(CW$x\fR to an integer value.
.SS "\fIbsqrt()\fP"
.IX Subsection "bsqrt()"
.Vb 1
\&        $x\->bsqrt();
.Ve
.PP
Calculate the square root of \f(CW$x\fR.
.SS "\fIbroot()\fP"
.IX Subsection "broot()"
.Vb 1
\&        $x\->broot($n);
.Ve
.PP
Calculate the N'th root of \f(CW$x\fR.
.SS "\fIbadd()\fP/\fIbmul()\fP/\fIbsub()\fP/\fIbdiv()\fP/\fIbdec()\fP/\fIbinc()\fP"
.IX Subsection "badd()/bmul()/bsub()/bdiv()/bdec()/binc()"
Please see the documentation in Math::BigInt.
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
.Vb 1
\&        my $z = $x\->copy();
.Ve
.PP
Makes a deep copy of the object.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbstr()\fP/\fIbsstr()\fP"
.IX Subsection "bstr()/bsstr()"
.Vb 3
\&        my $x = Math::BigInt\->new(\*(Aq8/4\*(Aq);
\&        print $x\->bstr(),"\en";                  # prints 1/2
\&        print $x\->bsstr(),"\en";                 # prints 1/2
.Ve
.PP
Return a string representing this object.
.SS "\fIbacmp()\fP/\fIbcmp()\fP"
.IX Subsection "bacmp()/bcmp()"
Used to compare numbers.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIblsft()\fP/\fIbrsft()\fP"
.IX Subsection "blsft()/brsft()"
Used to shift numbers left/right.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbpow()\fP"
.IX Subsection "bpow()"
.Vb 1
\&        $x\->bpow($y);
.Ve
.PP
Compute \f(CW$x\fR ** \f(CW$y\fR.
.PP
Please see the documentation in Math::BigInt for further details.
.SS "\fIbexp()\fP"
.IX Subsection "bexp()"
.Vb 1
\&        $x\->bexp($accuracy);            # calculate e ** X
.Ve
.PP
Calculates two integers A and B so that A/B is equal to \f(CW\*(C`e ** $x\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is
Euler's number.
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.PP
See also \*(L"\fIblog()\fR\*(R".
.SS "\fIbnok()\fP"
.IX Subsection "bnok()"
.Vb 1
\&        $x\->bnok($y);              # x over y (binomial coefficient n over k)
.Ve
.PP
Calculates the binomial coefficient n over k, also called the \*(L"choose\*(R"
function. The result is equivalent to:
.PP
.Vb 3
\&        ( n )      n!
\&        | \- |  = \-\-\-\-\-\-\-
\&        ( k )    k!(n\-k)!
.Ve
.PP
This method was added in v0.20 of Math::BigRat (May 2007).
.SS "\fIconfig()\fP"
.IX Subsection "config()"
.Vb 1
\&        use Data::Dumper;
\&
\&        print Dumper ( Math::BigRat\->config() );
\&        print Math::BigRat\->config()\->{lib},"\en";
.Ve
.PP
Returns a hash containing the configuration, e.g. the version number, lib
loaded etc. The following hash keys are currently filled in with the
appropriate information.
.PP
.Vb 10
\&        key             RO/RW   Description
\&                                Example
\&        ============================================================
\&        lib             RO      Name of the Math library
\&                                Math::BigInt::Calc
\&        lib_version     RO      Version of \*(Aqlib\*(Aq
\&                                0.30
\&        class           RO      The class of config you just called
\&                                Math::BigRat
\&        version         RO      version number of the class you used
\&                                0.10
\&        upgrade         RW      To which class numbers are upgraded
\&                                undef
\&        downgrade       RW      To which class numbers are downgraded
\&                                undef
\&        precision       RW      Global precision
\&                                undef
\&        accuracy        RW      Global accuracy
\&                                undef
\&        round_mode      RW      Global round mode
\&                                even
\&        div_scale       RW      Fallback accuracy for div
\&                                40
\&        trap_nan        RW      Trap creation of NaN (undef = no)
\&                                undef
\&        trap_inf        RW      Trap creation of +inf/\-inf (undef = no)
\&                                undef
.Ve
.PP
By passing a reference to a hash you may set the configuration values. This
works only for values that a marked with a \f(CW\*(C`RW\*(C'\fR above, anything else is
read-only.
.SS "\fIobjectify()\fP"
.IX Subsection "objectify()"
This is an internal routine that turns scalars into objects.
.SH "BUGS"
.IX Header "BUGS"
Some things are not yet implemented, or only implemented half-way:
.IP "inf handling (partial)" 2
.IX Item "inf handling (partial)"
.PD 0
.IP "NaN handling (partial)" 2
.IX Item "NaN handling (partial)"
.IP "rounding (not implemented except for bceil/bfloor)" 2
.IX Item "rounding (not implemented except for bceil/bfloor)"
.ie n .IP "$x ** $y where $y is not an integer" 2
.el .IP "\f(CW$x\fR ** \f(CW$y\fR where \f(CW$y\fR is not an integer" 2
.IX Item "$x ** $y where $y is not an integer"
.IP "\fIbmod()\fR, \fIblog()\fR, \fIbmodinv()\fR and \fIbmodpow()\fR (partial)" 2
.IX Item "bmod(), blog(), bmodinv() and bmodpow() (partial)"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat and Math::Big as well as
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
See <http://search.cpan.org/search?dist=bignum> for a way to use
Math::BigRat.
.PP
The package at <http://search.cpan.org/search?dist=Math%3A%3ABigRat>
may contain more documentation and examples as well as testcases.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> 2001 \- 2009.
.PP
Currently maintained by Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> <http://leto.net>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Complex.3pm                            0100644 0001750 0001750 00000061721 12566207460 023715  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Complex 3pm"
.TH Math::Complex 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Complex \- complex numbers and associated mathematical functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::Complex;
\&
\&        $z = Math::Complex\->make(5, 6);
\&        $t = 4 \- 3*i + $z;
\&        $j = cplxe(1, 2*pi/3);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package lets you create and manipulate complex numbers. By default,
\&\fIPerl\fR limits itself to real numbers, but an extra \f(CW\*(C`use\*(C'\fR statement brings
full complex support, along with a full set of mathematical functions
typically associated with and/or extended to complex numbers.
.PP
If you wonder what complex numbers are, they were invented to be able to solve
the following equation:
.PP
.Vb 1
\&        x*x = \-1
.Ve
.PP
and by definition, the solution is noted \fIi\fR (engineers use \fIj\fR instead since
\&\fIi\fR usually denotes an intensity, but the name does not matter). The number
\&\fIi\fR is a pure \fIimaginary\fR number.
.PP
The arithmetics with pure imaginary numbers works just like you would expect
it with real numbers... you just have to remember that
.PP
.Vb 1
\&        i*i = \-1
.Ve
.PP
so you have:
.PP
.Vb 5
\&        5i + 7i = i * (5 + 7) = 12i
\&        4i \- 3i = i * (4 \- 3) = i
\&        4i * 2i = \-8
\&        6i / 2i = 3
\&        1 / i = \-i
.Ve
.PP
Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:
.PP
.Vb 1
\&        a + bi
.Ve
.PP
where \f(CW\*(C`a\*(C'\fR is the \fIreal\fR part and \f(CW\*(C`b\*(C'\fR is the \fIimaginary\fR part. The
arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the
rules used for real numbers just apply:
.PP
.Vb 2
\&        (4 + 3i) + (5 \- 2i) = (4 + 5) + i(3 \- 2) = 9 + i
\&        (2 + i) * (4 \- i) = 2*4 + 4i \-2i \-i*i = 8 + 2i + 1 = 9 + 2i
.Ve
.PP
A graphical representation of complex numbers is possible in a plane
(also called the \fIcomplex plane\fR, but it's really a 2D plane).
The number
.PP
.Vb 1
\&        z = a + bi
.Ve
.PP
is the point whose coordinates are (a, b). Actually, it would
be the vector originating from (0, 0) to (a, b). It follows that the addition
of two complex numbers is a vectorial addition.
.PP
Since there is a bijection between a point in the 2D plane and a complex
number (i.e. the mapping is unique and reciprocal), a complex number
can also be uniquely identified with polar coordinates:
.PP
.Vb 1
\&        [rho, theta]
.Ve
.PP
where \f(CW\*(C`rho\*(C'\fR is the distance to the origin, and \f(CW\*(C`theta\*(C'\fR the angle between
the vector and the \fIx\fR axis. There is a notation for this using the
exponential form, which is:
.PP
.Vb 1
\&        rho * exp(i * theta)
.Ve
.PP
where \fIi\fR is the famous imaginary number introduced above. Conversion
between this form and the cartesian form \f(CW\*(C`a + bi\*(C'\fR is immediate:
.PP
.Vb 2
\&        a = rho * cos(theta)
\&        b = rho * sin(theta)
.Ve
.PP
which is also expressed by this formula:
.PP
.Vb 1
\&        z = rho * exp(i * theta) = rho * (cos theta + i * sin theta)
.Ve
.PP
In other words, it's the projection of the vector onto the \fIx\fR and \fIy\fR
axes. Mathematicians call \fIrho\fR the \fInorm\fR or \fImodulus\fR and \fItheta\fR
the \fIargument\fR of the complex number. The \fInorm\fR of \f(CW\*(C`z\*(C'\fR is
marked here as \f(CWabs(z)\fR.
.PP
The polar notation (also known as the trigonometric representation) is
much more handy for performing multiplications and divisions of
complex numbers, whilst the cartesian notation is better suited for
additions and subtractions. Real numbers are on the \fIx\fR axis, and
therefore \fIy\fR or \fItheta\fR is zero or \fIpi\fR.
.PP
All the common operations that can be performed on a real number have
been defined to work on complex numbers as well, and are merely
\&\fIextensions\fR of the operations defined on real numbers. This means
they keep their natural meaning when there is no imaginary part, provided
the number is within their definition set.
.PP
For instance, the \f(CW\*(C`sqrt\*(C'\fR routine which computes the square root of
its argument is only defined for non-negative real numbers and yields a
non-negative real number (it is an application from \fBR+\fR to \fBR+\fR).
If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from \fBR\fR to \fBC\fR (the
set of complex numbers):
.PP
.Vb 1
\&        sqrt(x) = x >= 0 ? sqrt(x) : sqrt(\-x)*i
.Ve
.PP
It can also be extended to be an application from \fBC\fR to \fBC\fR,
whilst its restriction to \fBR\fR behaves as defined above by using
the following definition:
.PP
.Vb 1
\&        sqrt(z = [r,t]) = sqrt(r) * exp(i * t/2)
.Ve
.PP
Indeed, a negative real number can be noted \f(CW\*(C`[x,pi]\*(C'\fR (the modulus
\&\fIx\fR is always non-negative, so \f(CW\*(C`[x,pi]\*(C'\fR is really \f(CW\*(C`\-x\*(C'\fR, a negative
number) and the above definition states that
.PP
.Vb 1
\&        sqrt([x,pi]) = sqrt(x) * exp(i*pi/2) = [sqrt(x),pi/2] = sqrt(x)*i
.Ve
.PP
which is exactly what we had defined for negative real numbers above.
The \f(CW\*(C`sqrt\*(C'\fR returns only one of the solutions: if you want the both,
use the \f(CW\*(C`root\*(C'\fR function.
.PP
All the common mathematical functions defined on real numbers that
are extended to complex numbers share that same property of working
\&\fIas usual\fR when the imaginary part is zero (otherwise, it would not
be called an extension, would it?).
.PP
A \fInew\fR operation possible on a complex number that is
the identity for real numbers is called the \fIconjugate\fR, and is noted
with a horizontal bar above the number, or \f(CW\*(C`~z\*(C'\fR here.
.PP
.Vb 2
\&         z = a + bi
\&        ~z = a \- bi
.Ve
.PP
Simple... Now look:
.PP
.Vb 1
\&        z * ~z = (a + bi) * (a \- bi) = a*a + b*b
.Ve
.PP
We saw that the norm of \f(CW\*(C`z\*(C'\fR was noted \f(CWabs(z)\fR and was defined as the
distance to the origin, also known as:
.PP
.Vb 1
\&        rho = abs(z) = sqrt(a*a + b*b)
.Ve
.PP
so
.PP
.Vb 1
\&        z * ~z = abs(z) ** 2
.Ve
.PP
If z is a pure real number (i.e. \f(CW\*(C`b == 0\*(C'\fR), then the above yields:
.PP
.Vb 1
\&        a * a = abs(a) ** 2
.Ve
.PP
which is true (\f(CW\*(C`abs\*(C'\fR has the regular meaning for real number, i.e. stands
for the absolute value). This example explains why the norm of \f(CW\*(C`z\*(C'\fR is
noted \f(CWabs(z)\fR: it extends the \f(CW\*(C`abs\*(C'\fR function to complex numbers, yet
is the regular \f(CW\*(C`abs\*(C'\fR we know when the complex number actually has no
imaginary part... This justifies \fIa posteriori\fR our use of the \f(CW\*(C`abs\*(C'\fR
notation for the norm.
.SH "OPERATIONS"
.IX Header "OPERATIONS"
Given the following notations:
.PP
.Vb 3
\&        z1 = a + bi = r1 * exp(i * t1)
\&        z2 = c + di = r2 * exp(i * t2)
\&        z = <any complex or real number>
.Ve
.PP
the following (overloaded) operations are supported on complex numbers:
.PP
.Vb 10
\&        z1 + z2 = (a + c) + i(b + d)
\&        z1 \- z2 = (a \- c) + i(b \- d)
\&        z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
\&        z1 / z2 = (r1 / r2) * exp(i * (t1 \- t2))
\&        z1 ** z2 = exp(z2 * log z1)
\&        ~z = a \- bi
\&        abs(z) = r1 = sqrt(a*a + b*b)
\&        sqrt(z) = sqrt(r1) * exp(i * t/2)
\&        exp(z) = exp(a) * exp(i * b)
\&        log(z) = log(r1) + i*t
\&        sin(z) = 1/2i (exp(i * z1) \- exp(\-i * z))
\&        cos(z) = 1/2 (exp(i * z1) + exp(\-i * z))
\&        atan2(y, x) = atan(y / x) # Minding the right quadrant, note the order.
.Ve
.PP
The definition used for complex arguments of \fIatan2()\fR is
.PP
.Vb 1
\&       \-i log((x + iy)/sqrt(x*x+y*y))
.Ve
.PP
Note that atan2(0, 0) is not well-defined.
.PP
The following extra operations are supported on both real and complex
numbers:
.PP
.Vb 4
\&        Re(z) = a
\&        Im(z) = b
\&        arg(z) = t
\&        abs(z) = r
\&
\&        cbrt(z) = z ** (1/3)
\&        log10(z) = log(z) / log(10)
\&        logn(z, n) = log(z) / log(n)
\&
\&        tan(z) = sin(z) / cos(z)
\&
\&        csc(z) = 1 / sin(z)
\&        sec(z) = 1 / cos(z)
\&        cot(z) = 1 / tan(z)
\&
\&        asin(z) = \-i * log(i*z + sqrt(1\-z*z))
\&        acos(z) = \-i * log(z + i*sqrt(1\-z*z))
\&        atan(z) = i/2 * log((i+z) / (i\-z))
\&
\&        acsc(z) = asin(1 / z)
\&        asec(z) = acos(1 / z)
\&        acot(z) = atan(1 / z) = \-i/2 * log((i+z) / (z\-i))
\&
\&        sinh(z) = 1/2 (exp(z) \- exp(\-z))
\&        cosh(z) = 1/2 (exp(z) + exp(\-z))
\&        tanh(z) = sinh(z) / cosh(z) = (exp(z) \- exp(\-z)) / (exp(z) + exp(\-z))
\&
\&        csch(z) = 1 / sinh(z)
\&        sech(z) = 1 / cosh(z)
\&        coth(z) = 1 / tanh(z)
\&
\&        asinh(z) = log(z + sqrt(z*z+1))
\&        acosh(z) = log(z + sqrt(z*z\-1))
\&        atanh(z) = 1/2 * log((1+z) / (1\-z))
\&
\&        acsch(z) = asinh(1 / z)
\&        asech(z) = acosh(1 / z)
\&        acoth(z) = atanh(1 / z) = 1/2 * log((1+z) / (z\-1))
.Ve
.PP
\&\fIarg\fR, \fIabs\fR, \fIlog\fR, \fIcsc\fR, \fIcot\fR, \fIacsc\fR, \fIacot\fR, \fIcsch\fR,
\&\fIcoth\fR, \fIacosech\fR, \fIacotanh\fR, have aliases \fIrho\fR, \fItheta\fR, \fIln\fR,
\&\fIcosec\fR, \fIcotan\fR, \fIacosec\fR, \fIacotan\fR, \fIcosech\fR, \fIcotanh\fR,
\&\fIacosech\fR, \fIacotanh\fR, respectively.  \f(CW\*(C`Re\*(C'\fR, \f(CW\*(C`Im\*(C'\fR, \f(CW\*(C`arg\*(C'\fR, \f(CW\*(C`abs\*(C'\fR,
\&\f(CW\*(C`rho\*(C'\fR, and \f(CW\*(C`theta\*(C'\fR can be used also as mutators.  The \f(CW\*(C`cbrt\*(C'\fR
returns only one of the solutions: if you want all three, use the
\&\f(CW\*(C`root\*(C'\fR function.
.PP
The \fIroot\fR function is available to compute all the \fIn\fR
roots of some complex, where \fIn\fR is a strictly positive integer.
There are exactly \fIn\fR such roots, returned as a list. Getting the
number mathematicians call \f(CW\*(C`j\*(C'\fR such that:
.PP
.Vb 1
\&        1 + j + j*j = 0;
.Ve
.PP
is a simple matter of writing:
.PP
.Vb 1
\&        $j = ((root(1, 3))[1];
.Ve
.PP
The \fIk\fRth root for \f(CW\*(C`z = [r,t]\*(C'\fR is given by:
.PP
.Vb 1
\&        (root(z, n))[k] = r**(1/n) * exp(i * (t + 2*k*pi)/n)
.Ve
.PP
You can return the \fIk\fRth root directly by \f(CW\*(C`root(z, n, k)\*(C'\fR,
indexing starting from \fIzero\fR and ending at \fIn \- 1\fR.
.PP
The \fIspaceship\fR numeric comparison operator, <=>, is also
defined. In order to ensure its restriction to real numbers is conform
to what you would expect, the comparison is run on the real part of
the complex number first, and imaginary parts are compared only when
the real parts match.
.SH "CREATION"
.IX Header "CREATION"
To create a complex number, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->make(3, 4);
\&        $z = cplx(3, 4);
.Ve
.PP
if you know the cartesian form of the number, or
.PP
.Vb 1
\&        $z = 3 + 4*i;
.Ve
.PP
if you like. To create a number using the polar form, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->emake(5, pi/3);
\&        $x = cplxe(5, pi/3);
.Ve
.PP
instead. The first argument is the modulus, the second is the angle
(in radians, the full circle is 2*pi).  (Mnemonic: \f(CW\*(C`e\*(C'\fR is used as a
notation for complex numbers in the polar form).
.PP
It is possible to write:
.PP
.Vb 1
\&        $x = cplxe(\-3, pi/4);
.Ve
.PP
but that will be silently converted into \f(CW\*(C`[3,\-3pi/4]\*(C'\fR, since the
modulus must be non-negative (it represents the distance to the origin
in the complex plane).
.PP
It is also possible to have a complex number as either argument of the
\&\f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR: the appropriate component of
the argument will be used.
.PP
.Vb 2
\&        $z1 = cplx(\-2,  1);
\&        $z2 = cplx($z1, 4);
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand a single (string) argument of the forms
.PP
.Vb 5
\&        2\-3i
\&        \-3i
\&        [2,3]
\&        [2,\-3pi/4]
\&        [2]
.Ve
.PP
in which case the appropriate cartesian and exponential components
will be parsed from the string and used to create new complex numbers.
The imaginary component and the theta, respectively, will default to zero.
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand the case of no arguments: this means plain zero or (0, 0).
.SH "DISPLAYING"
.IX Header "DISPLAYING"
When printed, a complex number is usually shown under its cartesian
style \fIa+bi\fR, but there are legitimate cases where the polar style
\&\fI[r,t]\fR is more appropriate.  The process of converting the complex
number into a string that can be displayed is known as \fIstringification\fR.
.PP
By calling the class method \f(CW\*(C`Math::Complex::display_format\*(C'\fR and
supplying either \f(CW"polar"\fR or \f(CW"cartesian"\fR as an argument, you
override the default display style, which is \f(CW"cartesian"\fR. Not
supplying any argument returns the current settings.
.PP
This default can be overridden on a per-number basis by calling the
\&\f(CW\*(C`display_format\*(C'\fR method instead. As before, not supplying any argument
returns the current display style for this number. Otherwise whatever you
specify will be the new display style for \fIthis\fR particular number.
.PP
For instance:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        Math::Complex::display_format(\*(Aqpolar\*(Aq);
\&        $j = (root(1, 3))[1];
\&        print "j = $j\en";               # Prints "j = [1,2pi/3]"
\&        $j\->display_format(\*(Aqcartesian\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.866025403784439i"
.Ve
.PP
The polar style attempts to emphasize arguments like \fIk*pi/n\fR
(where \fIn\fR is a positive integer and \fIk\fR an integer within [\-9, +9]),
this is called \fIpolar pretty-printing\fR.
.PP
For the reverse of stringifying, see the \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR.
.SS "\s-1CHANGED IN PERL 5.6\s0"
.IX Subsection "CHANGED IN PERL 5.6"
The \f(CW\*(C`display_format\*(C'\fR class method and the corresponding
\&\f(CW\*(C`display_format\*(C'\fR object method can now be called using
a parameter hash instead of just a one parameter.
.PP
The old display format style, which can have values \f(CW"cartesian"\fR or
\&\f(CW"polar"\fR, can be changed using the \f(CW"style"\fR parameter.
.PP
.Vb 1
\&        $j\->display_format(style => "polar");
.Ve
.PP
The one parameter calling convention also still works.
.PP
.Vb 1
\&        $j\->display_format("polar");
.Ve
.PP
There are two new display parameters.
.PP
The first one is \f(CW"format"\fR, which is a \fIsprintf()\fR\-style format string
to be used for both numeric parts of the complex number(s).  The is
somewhat system-dependent but most often it corresponds to \f(CW"%.15g"\fR.
You can revert to the default by setting the \f(CW\*(C`format\*(C'\fR to \f(CW\*(C`undef\*(C'\fR.
.PP
.Vb 1
\&        # the $j from the above example
\&
\&        $j\->display_format(\*(Aqformat\*(Aq => \*(Aq%.5f\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.50000+0.86603i"
\&        $j\->display_format(\*(Aqformat\*(Aq => undef);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.86603i"
.Ve
.PP
Notice that this affects also the return values of the
\&\f(CW\*(C`display_format\*(C'\fR methods: in list context the whole parameter hash
will be returned, as opposed to only the style parameter value.
This is a potential incompatibility with earlier versions if you
have been calling the \f(CW\*(C`display_format\*(C'\fR method in list context.
.PP
The second new display parameter is \f(CW"polar_pretty_print"\fR, which can
be set to true or false, the default being true.  See the previous
section for what this means.
.SH "USAGE"
.IX Header "USAGE"
Thanks to overloading, the handling of arithmetics with complex numbers
is simple and almost transparent.
.PP
Here are some examples:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        $j = cplxe(1, 2*pi/3);  # $j ** 3 == 1
\&        print "j = $j, j**3 = ", $j ** 3, "\en";
\&        print "1 + j + j**2 = ", 1 + $j + $j**2, "\en";
\&
\&        $z = \-16 + 0*i;                 # Force it to be a complex
\&        print "sqrt($z) = ", sqrt($z), "\en";
\&
\&        $k = exp(i * 2*pi/3);
\&        print "$j \- $k = ", $j \- $k, "\en";
\&
\&        $z\->Re(3);                      # Re, Im, arg, abs,
\&        $j\->arg(2);                     # (the last two aka rho, theta)
\&                                        # can be used also as mutators.
.Ve
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1PI\s0"
.IX Subsection "PI"
The constant \f(CW\*(C`pi\*(C'\fR and some handy multiples of it (pi2, pi4,
and pip2 (pi/2) and pip4 (pi/4)) are also available if separately
exported:
.PP
.Vb 2
\&    use Math::Complex \*(Aq:pi\*(Aq; 
\&    $third_of_circle = pi2 / 3;
.Ve
.SS "Inf"
.IX Subsection "Inf"
The floating point infinity can be exported as a subroutine \fIInf()\fR:
.PP
.Vb 4
\&    use Math::Complex qw(Inf sinh);
\&    my $AlsoInf = Inf() + 42;
\&    my $AnotherInf = sinh(1e42);
\&    print "$AlsoInf is $AnotherInf\en" if $AlsoInf == $AnotherInf;
.Ve
.PP
Note that the stringified form of infinity varies between platforms:
it can be for example any of
.PP
.Vb 4
\&   inf
\&   infinity
\&   INF
\&   1.#INF
.Ve
.PP
or it can be something else.
.PP
Also note that in some platforms trying to use the infinity in
arithmetic operations may result in Perl crashing because using
an infinity causes \s-1SIGFPE\s0 or its moral equivalent to be sent.
The way to ignore this is
.PP
.Vb 1
\&  local $SIG{FPE} = sub { };
.Ve
.SH "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
.IX Header "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
The division (/) and the following functions
.PP
.Vb 5
\&        log     ln      log10   logn
\&        tan     sec     csc     cot
\&        atan    asec    acsc    acot
\&        tanh    sech    csch    coth
\&        atanh   asech   acsch   acoth
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&        cot(0): Division by zero.
\&        (Because in the definition of cot(0), the divisor sin(0) is 0)
\&        Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&        atanh(\-1): Logarithm of zero.
\&        Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
logarithmic functions and the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot
be \f(CW1\fR (one).  For the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be
\&\f(CW\*(C`\-1\*(C'\fR (minus one).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, the argument cannot be
\&\f(CW\*(C`i\*(C'\fR (the imaginary unit).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument
cannot be \f(CW\*(C`\-i\*(C'\fR (the negative imaginary unit).  For the \f(CW\*(C`tan\*(C'\fR,
\&\f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, the argument cannot be \fIpi/2 + k * pi\fR, where \fIk\fR
is any integer.  atan2(0, 0) is undefined, and if the complex arguments
are used for \fIatan2()\fR, a division by zero will happen if z1**2+z2**2 == 0.
.PP
Note that because we are operating on approximations of real numbers,
these errors can happen when merely `too close' to the singularities
listed above.
.SH "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
.IX Header "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
The \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR accept both real and complex arguments.
When they cannot recognize the arguments they will die with error
messages like the following
.PP
.Vb 4
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::emake: Cannot take rho of ...
\&    Math::Complex::emake: Cannot take theta of ...
.Ve
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Complex;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sqrt\*(C'\fR, \f(CW\*(C`log\*(C'\fR, \f(CW\*(C`atan2\*(C'\fR).
This is construed as a feature by the Authors, actually... ;\-)
.PP
All routines expect to be given real or complex numbers. Don't attempt to
use BigFloat, since Perl has currently no rule to disambiguate a '+'
operation (for instance) between two overloaded entities.
.PP
In Cray \s-1UNICOS\s0 there is some strange numerical instability that results
in \fIroot()\fR, \fIcos()\fR, \fIsin()\fR, \fIcosh()\fR, \fIsinh()\fR, losing accuracy fast.  Beware.
The bug may be in \s-1UNICOS\s0 math libs, in \s-1UNICOS C\s0 compiler, in Math::Complex.
Whatever it is, it does not manifest itself anywhere else where Perl runs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::Trig
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel S. Lewart <\fIlewart!at!uiuc.edu\fR>,
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Complex5.16.3pm                        0100644 0001750 0001750 00000061416 12566207437 024234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Complex 3pm"
.TH Math::Complex 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Complex \- complex numbers and associated mathematical functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::Complex;
\&
\&        $z = Math::Complex\->make(5, 6);
\&        $t = 4 \- 3*i + $z;
\&        $j = cplxe(1, 2*pi/3);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package lets you create and manipulate complex numbers. By default,
\&\fIPerl\fR limits itself to real numbers, but an extra \f(CW\*(C`use\*(C'\fR statement brings
full complex support, along with a full set of mathematical functions
typically associated with and/or extended to complex numbers.
.PP
If you wonder what complex numbers are, they were invented to be able to solve
the following equation:
.PP
.Vb 1
\&        x*x = \-1
.Ve
.PP
and by definition, the solution is noted \fIi\fR (engineers use \fIj\fR instead since
\&\fIi\fR usually denotes an intensity, but the name does not matter). The number
\&\fIi\fR is a pure \fIimaginary\fR number.
.PP
The arithmetics with pure imaginary numbers works just like you would expect
it with real numbers... you just have to remember that
.PP
.Vb 1
\&        i*i = \-1
.Ve
.PP
so you have:
.PP
.Vb 5
\&        5i + 7i = i * (5 + 7) = 12i
\&        4i \- 3i = i * (4 \- 3) = i
\&        4i * 2i = \-8
\&        6i / 2i = 3
\&        1 / i = \-i
.Ve
.PP
Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:
.PP
.Vb 1
\&        a + bi
.Ve
.PP
where \f(CW\*(C`a\*(C'\fR is the \fIreal\fR part and \f(CW\*(C`b\*(C'\fR is the \fIimaginary\fR part. The
arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the
rules used for real numbers just apply:
.PP
.Vb 2
\&        (4 + 3i) + (5 \- 2i) = (4 + 5) + i(3 \- 2) = 9 + i
\&        (2 + i) * (4 \- i) = 2*4 + 4i \-2i \-i*i = 8 + 2i + 1 = 9 + 2i
.Ve
.PP
A graphical representation of complex numbers is possible in a plane
(also called the \fIcomplex plane\fR, but it's really a 2D plane).
The number
.PP
.Vb 1
\&        z = a + bi
.Ve
.PP
is the point whose coordinates are (a, b). Actually, it would
be the vector originating from (0, 0) to (a, b). It follows that the addition
of two complex numbers is a vectorial addition.
.PP
Since there is a bijection between a point in the 2D plane and a complex
number (i.e. the mapping is unique and reciprocal), a complex number
can also be uniquely identified with polar coordinates:
.PP
.Vb 1
\&        [rho, theta]
.Ve
.PP
where \f(CW\*(C`rho\*(C'\fR is the distance to the origin, and \f(CW\*(C`theta\*(C'\fR the angle between
the vector and the \fIx\fR axis. There is a notation for this using the
exponential form, which is:
.PP
.Vb 1
\&        rho * exp(i * theta)
.Ve
.PP
where \fIi\fR is the famous imaginary number introduced above. Conversion
between this form and the cartesian form \f(CW\*(C`a + bi\*(C'\fR is immediate:
.PP
.Vb 2
\&        a = rho * cos(theta)
\&        b = rho * sin(theta)
.Ve
.PP
which is also expressed by this formula:
.PP
.Vb 1
\&        z = rho * exp(i * theta) = rho * (cos theta + i * sin theta)
.Ve
.PP
In other words, it's the projection of the vector onto the \fIx\fR and \fIy\fR
axes. Mathematicians call \fIrho\fR the \fInorm\fR or \fImodulus\fR and \fItheta\fR
the \fIargument\fR of the complex number. The \fInorm\fR of \f(CW\*(C`z\*(C'\fR is
marked here as \f(CWabs(z)\fR.
.PP
The polar notation (also known as the trigonometric representation) is
much more handy for performing multiplications and divisions of
complex numbers, whilst the cartesian notation is better suited for
additions and subtractions. Real numbers are on the \fIx\fR axis, and
therefore \fIy\fR or \fItheta\fR is zero or \fIpi\fR.
.PP
All the common operations that can be performed on a real number have
been defined to work on complex numbers as well, and are merely
\&\fIextensions\fR of the operations defined on real numbers. This means
they keep their natural meaning when there is no imaginary part, provided
the number is within their definition set.
.PP
For instance, the \f(CW\*(C`sqrt\*(C'\fR routine which computes the square root of
its argument is only defined for non-negative real numbers and yields a
non-negative real number (it is an application from \fBR+\fR to \fBR+\fR).
If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from \fBR\fR to \fBC\fR (the
set of complex numbers):
.PP
.Vb 1
\&        sqrt(x) = x >= 0 ? sqrt(x) : sqrt(\-x)*i
.Ve
.PP
It can also be extended to be an application from \fBC\fR to \fBC\fR,
whilst its restriction to \fBR\fR behaves as defined above by using
the following definition:
.PP
.Vb 1
\&        sqrt(z = [r,t]) = sqrt(r) * exp(i * t/2)
.Ve
.PP
Indeed, a negative real number can be noted \f(CW\*(C`[x,pi]\*(C'\fR (the modulus
\&\fIx\fR is always non-negative, so \f(CW\*(C`[x,pi]\*(C'\fR is really \f(CW\*(C`\-x\*(C'\fR, a negative
number) and the above definition states that
.PP
.Vb 1
\&        sqrt([x,pi]) = sqrt(x) * exp(i*pi/2) = [sqrt(x),pi/2] = sqrt(x)*i
.Ve
.PP
which is exactly what we had defined for negative real numbers above.
The \f(CW\*(C`sqrt\*(C'\fR returns only one of the solutions: if you want the both,
use the \f(CW\*(C`root\*(C'\fR function.
.PP
All the common mathematical functions defined on real numbers that
are extended to complex numbers share that same property of working
\&\fIas usual\fR when the imaginary part is zero (otherwise, it would not
be called an extension, would it?).
.PP
A \fInew\fR operation possible on a complex number that is
the identity for real numbers is called the \fIconjugate\fR, and is noted
with a horizontal bar above the number, or \f(CW\*(C`~z\*(C'\fR here.
.PP
.Vb 2
\&         z = a + bi
\&        ~z = a \- bi
.Ve
.PP
Simple... Now look:
.PP
.Vb 1
\&        z * ~z = (a + bi) * (a \- bi) = a*a + b*b
.Ve
.PP
We saw that the norm of \f(CW\*(C`z\*(C'\fR was noted \f(CWabs(z)\fR and was defined as the
distance to the origin, also known as:
.PP
.Vb 1
\&        rho = abs(z) = sqrt(a*a + b*b)
.Ve
.PP
so
.PP
.Vb 1
\&        z * ~z = abs(z) ** 2
.Ve
.PP
If z is a pure real number (i.e. \f(CW\*(C`b == 0\*(C'\fR), then the above yields:
.PP
.Vb 1
\&        a * a = abs(a) ** 2
.Ve
.PP
which is true (\f(CW\*(C`abs\*(C'\fR has the regular meaning for real number, i.e. stands
for the absolute value). This example explains why the norm of \f(CW\*(C`z\*(C'\fR is
noted \f(CWabs(z)\fR: it extends the \f(CW\*(C`abs\*(C'\fR function to complex numbers, yet
is the regular \f(CW\*(C`abs\*(C'\fR we know when the complex number actually has no
imaginary part... This justifies \fIa posteriori\fR our use of the \f(CW\*(C`abs\*(C'\fR
notation for the norm.
.SH "OPERATIONS"
.IX Header "OPERATIONS"
Given the following notations:
.PP
.Vb 3
\&        z1 = a + bi = r1 * exp(i * t1)
\&        z2 = c + di = r2 * exp(i * t2)
\&        z = <any complex or real number>
.Ve
.PP
the following (overloaded) operations are supported on complex numbers:
.PP
.Vb 10
\&        z1 + z2 = (a + c) + i(b + d)
\&        z1 \- z2 = (a \- c) + i(b \- d)
\&        z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
\&        z1 / z2 = (r1 / r2) * exp(i * (t1 \- t2))
\&        z1 ** z2 = exp(z2 * log z1)
\&        ~z = a \- bi
\&        abs(z) = r1 = sqrt(a*a + b*b)
\&        sqrt(z) = sqrt(r1) * exp(i * t/2)
\&        exp(z) = exp(a) * exp(i * b)
\&        log(z) = log(r1) + i*t
\&        sin(z) = 1/2i (exp(i * z1) \- exp(\-i * z))
\&        cos(z) = 1/2 (exp(i * z1) + exp(\-i * z))
\&        atan2(y, x) = atan(y / x) # Minding the right quadrant, note the order.
.Ve
.PP
The definition used for complex arguments of \fIatan2()\fR is
.PP
.Vb 1
\&       \-i log((x + iy)/sqrt(x*x+y*y))
.Ve
.PP
Note that atan2(0, 0) is not well-defined.
.PP
The following extra operations are supported on both real and complex
numbers:
.PP
.Vb 4
\&        Re(z) = a
\&        Im(z) = b
\&        arg(z) = t
\&        abs(z) = r
\&
\&        cbrt(z) = z ** (1/3)
\&        log10(z) = log(z) / log(10)
\&        logn(z, n) = log(z) / log(n)
\&
\&        tan(z) = sin(z) / cos(z)
\&
\&        csc(z) = 1 / sin(z)
\&        sec(z) = 1 / cos(z)
\&        cot(z) = 1 / tan(z)
\&
\&        asin(z) = \-i * log(i*z + sqrt(1\-z*z))
\&        acos(z) = \-i * log(z + i*sqrt(1\-z*z))
\&        atan(z) = i/2 * log((i+z) / (i\-z))
\&
\&        acsc(z) = asin(1 / z)
\&        asec(z) = acos(1 / z)
\&        acot(z) = atan(1 / z) = \-i/2 * log((i+z) / (z\-i))
\&
\&        sinh(z) = 1/2 (exp(z) \- exp(\-z))
\&        cosh(z) = 1/2 (exp(z) + exp(\-z))
\&        tanh(z) = sinh(z) / cosh(z) = (exp(z) \- exp(\-z)) / (exp(z) + exp(\-z))
\&
\&        csch(z) = 1 / sinh(z)
\&        sech(z) = 1 / cosh(z)
\&        coth(z) = 1 / tanh(z)
\&
\&        asinh(z) = log(z + sqrt(z*z+1))
\&        acosh(z) = log(z + sqrt(z*z\-1))
\&        atanh(z) = 1/2 * log((1+z) / (1\-z))
\&
\&        acsch(z) = asinh(1 / z)
\&        asech(z) = acosh(1 / z)
\&        acoth(z) = atanh(1 / z) = 1/2 * log((1+z) / (z\-1))
.Ve
.PP
\&\fIarg\fR, \fIabs\fR, \fIlog\fR, \fIcsc\fR, \fIcot\fR, \fIacsc\fR, \fIacot\fR, \fIcsch\fR,
\&\fIcoth\fR, \fIacosech\fR, \fIacotanh\fR, have aliases \fIrho\fR, \fItheta\fR, \fIln\fR,
\&\fIcosec\fR, \fIcotan\fR, \fIacosec\fR, \fIacotan\fR, \fIcosech\fR, \fIcotanh\fR,
\&\fIacosech\fR, \fIacotanh\fR, respectively.  \f(CW\*(C`Re\*(C'\fR, \f(CW\*(C`Im\*(C'\fR, \f(CW\*(C`arg\*(C'\fR, \f(CW\*(C`abs\*(C'\fR,
\&\f(CW\*(C`rho\*(C'\fR, and \f(CW\*(C`theta\*(C'\fR can be used also as mutators.  The \f(CW\*(C`cbrt\*(C'\fR
returns only one of the solutions: if you want all three, use the
\&\f(CW\*(C`root\*(C'\fR function.
.PP
The \fIroot\fR function is available to compute all the \fIn\fR
roots of some complex, where \fIn\fR is a strictly positive integer.
There are exactly \fIn\fR such roots, returned as a list. Getting the
number mathematicians call \f(CW\*(C`j\*(C'\fR such that:
.PP
.Vb 1
\&        1 + j + j*j = 0;
.Ve
.PP
is a simple matter of writing:
.PP
.Vb 1
\&        $j = ((root(1, 3))[1];
.Ve
.PP
The \fIk\fRth root for \f(CW\*(C`z = [r,t]\*(C'\fR is given by:
.PP
.Vb 1
\&        (root(z, n))[k] = r**(1/n) * exp(i * (t + 2*k*pi)/n)
.Ve
.PP
You can return the \fIk\fRth root directly by \f(CW\*(C`root(z, n, k)\*(C'\fR,
indexing starting from \fIzero\fR and ending at \fIn \- 1\fR.
.PP
The \fIspaceship\fR numeric comparison operator, <=>, is also
defined. In order to ensure its restriction to real numbers is conform
to what you would expect, the comparison is run on the real part of
the complex number first, and imaginary parts are compared only when
the real parts match.
.SH "CREATION"
.IX Header "CREATION"
To create a complex number, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->make(3, 4);
\&        $z = cplx(3, 4);
.Ve
.PP
if you know the cartesian form of the number, or
.PP
.Vb 1
\&        $z = 3 + 4*i;
.Ve
.PP
if you like. To create a number using the polar form, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->emake(5, pi/3);
\&        $x = cplxe(5, pi/3);
.Ve
.PP
instead. The first argument is the modulus, the second is the angle
(in radians, the full circle is 2*pi).  (Mnemonic: \f(CW\*(C`e\*(C'\fR is used as a
notation for complex numbers in the polar form).
.PP
It is possible to write:
.PP
.Vb 1
\&        $x = cplxe(\-3, pi/4);
.Ve
.PP
but that will be silently converted into \f(CW\*(C`[3,\-3pi/4]\*(C'\fR, since the
modulus must be non-negative (it represents the distance to the origin
in the complex plane).
.PP
It is also possible to have a complex number as either argument of the
\&\f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR: the appropriate component of
the argument will be used.
.PP
.Vb 2
\&        $z1 = cplx(\-2,  1);
\&        $z2 = cplx($z1, 4);
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand a single (string) argument of the forms
.PP
.Vb 5
\&        2\-3i
\&        \-3i
\&        [2,3]
\&        [2,\-3pi/4]
\&        [2]
.Ve
.PP
in which case the appropriate cartesian and exponential components
will be parsed from the string and used to create new complex numbers.
The imaginary component and the theta, respectively, will default to zero.
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand the case of no arguments: this means plain zero or (0, 0).
.SH "DISPLAYING"
.IX Header "DISPLAYING"
When printed, a complex number is usually shown under its cartesian
style \fIa+bi\fR, but there are legitimate cases where the polar style
\&\fI[r,t]\fR is more appropriate.  The process of converting the complex
number into a string that can be displayed is known as \fIstringification\fR.
.PP
By calling the class method \f(CW\*(C`Math::Complex::display_format\*(C'\fR and
supplying either \f(CW"polar"\fR or \f(CW"cartesian"\fR as an argument, you
override the default display style, which is \f(CW"cartesian"\fR. Not
supplying any argument returns the current settings.
.PP
This default can be overridden on a per-number basis by calling the
\&\f(CW\*(C`display_format\*(C'\fR method instead. As before, not supplying any argument
returns the current display style for this number. Otherwise whatever you
specify will be the new display style for \fIthis\fR particular number.
.PP
For instance:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        Math::Complex::display_format(\*(Aqpolar\*(Aq);
\&        $j = (root(1, 3))[1];
\&        print "j = $j\en";               # Prints "j = [1,2pi/3]"
\&        $j\->display_format(\*(Aqcartesian\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.866025403784439i"
.Ve
.PP
The polar style attempts to emphasize arguments like \fIk*pi/n\fR
(where \fIn\fR is a positive integer and \fIk\fR an integer within [\-9, +9]),
this is called \fIpolar pretty-printing\fR.
.PP
For the reverse of stringifying, see the \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR.
.SS "\s-1CHANGED\s0 \s-1IN\s0 \s-1PERL\s0 5.6"
.IX Subsection "CHANGED IN PERL 5.6"
The \f(CW\*(C`display_format\*(C'\fR class method and the corresponding
\&\f(CW\*(C`display_format\*(C'\fR object method can now be called using
a parameter hash instead of just a one parameter.
.PP
The old display format style, which can have values \f(CW"cartesian"\fR or
\&\f(CW"polar"\fR, can be changed using the \f(CW"style"\fR parameter.
.PP
.Vb 1
\&        $j\->display_format(style => "polar");
.Ve
.PP
The one parameter calling convention also still works.
.PP
.Vb 1
\&        $j\->display_format("polar");
.Ve
.PP
There are two new display parameters.
.PP
The first one is \f(CW"format"\fR, which is a \fIsprintf()\fR\-style format string
to be used for both numeric parts of the complex number(s).  The is
somewhat system-dependent but most often it corresponds to \f(CW"%.15g"\fR.
You can revert to the default by setting the \f(CW\*(C`format\*(C'\fR to \f(CW\*(C`undef\*(C'\fR.
.PP
.Vb 1
\&        # the $j from the above example
\&
\&        $j\->display_format(\*(Aqformat\*(Aq => \*(Aq%.5f\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.50000+0.86603i"
\&        $j\->display_format(\*(Aqformat\*(Aq => undef);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.86603i"
.Ve
.PP
Notice that this affects also the return values of the
\&\f(CW\*(C`display_format\*(C'\fR methods: in list context the whole parameter hash
will be returned, as opposed to only the style parameter value.
This is a potential incompatibility with earlier versions if you
have been calling the \f(CW\*(C`display_format\*(C'\fR method in list context.
.PP
The second new display parameter is \f(CW"polar_pretty_print"\fR, which can
be set to true or false, the default being true.  See the previous
section for what this means.
.SH "USAGE"
.IX Header "USAGE"
Thanks to overloading, the handling of arithmetics with complex numbers
is simple and almost transparent.
.PP
Here are some examples:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        $j = cplxe(1, 2*pi/3);  # $j ** 3 == 1
\&        print "j = $j, j**3 = ", $j ** 3, "\en";
\&        print "1 + j + j**2 = ", 1 + $j + $j**2, "\en";
\&
\&        $z = \-16 + 0*i;                 # Force it to be a complex
\&        print "sqrt($z) = ", sqrt($z), "\en";
\&
\&        $k = exp(i * 2*pi/3);
\&        print "$j \- $k = ", $j \- $k, "\en";
\&
\&        $z\->Re(3);                      # Re, Im, arg, abs,
\&        $j\->arg(2);                     # (the last two aka rho, theta)
\&                                        # can be used also as mutators.
.Ve
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1PI\s0"
.IX Subsection "PI"
The constant \f(CW\*(C`pi\*(C'\fR and some handy multiples of it (pi2, pi4,
and pip2 (pi/2) and pip4 (pi/4)) are also available if separately
exported:
.PP
.Vb 2
\&    use Math::Complex \*(Aq:pi\*(Aq; 
\&    $third_of_circle = pi2 / 3;
.Ve
.SS "Inf"
.IX Subsection "Inf"
The floating point infinity can be exported as a subroutine \fIInf()\fR:
.PP
.Vb 4
\&    use Math::Complex qw(Inf sinh);
\&    my $AlsoInf = Inf() + 42;
\&    my $AnotherInf = sinh(1e42);
\&    print "$AlsoInf is $AnotherInf\en" if $AlsoInf == $AnotherInf;
.Ve
.PP
Note that the stringified form of infinity varies between platforms:
it can be for example any of
.PP
.Vb 4
\&   inf
\&   infinity
\&   INF
\&   1.#INF
.Ve
.PP
or it can be something else.
.PP
Also note that in some platforms trying to use the infinity in
arithmetic operations may result in Perl crashing because using
an infinity causes \s-1SIGFPE\s0 or its moral equivalent to be sent.
The way to ignore this is
.PP
.Vb 1
\&  local $SIG{FPE} = sub { };
.Ve
.SH "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
.IX Header "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
The division (/) and the following functions
.PP
.Vb 5
\&        log     ln      log10   logn
\&        tan     sec     csc     cot
\&        atan    asec    acsc    acot
\&        tanh    sech    csch    coth
\&        atanh   asech   acsch   acoth
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&        cot(0): Division by zero.
\&        (Because in the definition of cot(0), the divisor sin(0) is 0)
\&        Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&        atanh(\-1): Logarithm of zero.
\&        Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
logarithmic functions and the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot
be \f(CW1\fR (one).  For the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be
\&\f(CW\*(C`\-1\*(C'\fR (minus one).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, the argument cannot be
\&\f(CW\*(C`i\*(C'\fR (the imaginary unit).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument
cannot be \f(CW\*(C`\-i\*(C'\fR (the negative imaginary unit).  For the \f(CW\*(C`tan\*(C'\fR,
\&\f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, the argument cannot be \fIpi/2 + k * pi\fR, where \fIk\fR
is any integer.  atan2(0, 0) is undefined, and if the complex arguments
are used for \fIatan2()\fR, a division by zero will happen if z1**2+z2**2 == 0.
.PP
Note that because we are operating on approximations of real numbers,
these errors can happen when merely `too close' to the singularities
listed above.
.SH "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
.IX Header "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
The \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR accept both real and complex arguments.
When they cannot recognize the arguments they will die with error
messages like the following
.PP
.Vb 4
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::emake: Cannot take rho of ...
\&    Math::Complex::emake: Cannot take theta of ...
.Ve
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Complex;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sqrt\*(C'\fR, \f(CW\*(C`log\*(C'\fR, \f(CW\*(C`atan2\*(C'\fR).
This is construed as a feature by the Authors, actually... ;\-)
.PP
All routines expect to be given real or complex numbers. Don't attempt to
use BigFloat, since Perl has currently no rule to disambiguate a '+'
operation (for instance) between two overloaded entities.
.PP
In Cray \s-1UNICOS\s0 there is some strange numerical instability that results
in \fIroot()\fR, \fIcos()\fR, \fIsin()\fR, \fIcosh()\fR, \fIsinh()\fR, losing accuracy fast.  Beware.
The bug may be in \s-1UNICOS\s0 math libs, in \s-1UNICOS\s0 C compiler, in Math::Complex.
Whatever it is, it does not manifest itself anywhere else where Perl runs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::Trig
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel S. Lewart <\fIlewart!at!uiuc.edu\fR>,
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Complex5.18.3pm                        0100644 0001750 0001750 00000061721 12566207460 024231  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Complex 3pm"
.TH Math::Complex 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Complex \- complex numbers and associated mathematical functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Math::Complex;
\&
\&        $z = Math::Complex\->make(5, 6);
\&        $t = 4 \- 3*i + $z;
\&        $j = cplxe(1, 2*pi/3);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package lets you create and manipulate complex numbers. By default,
\&\fIPerl\fR limits itself to real numbers, but an extra \f(CW\*(C`use\*(C'\fR statement brings
full complex support, along with a full set of mathematical functions
typically associated with and/or extended to complex numbers.
.PP
If you wonder what complex numbers are, they were invented to be able to solve
the following equation:
.PP
.Vb 1
\&        x*x = \-1
.Ve
.PP
and by definition, the solution is noted \fIi\fR (engineers use \fIj\fR instead since
\&\fIi\fR usually denotes an intensity, but the name does not matter). The number
\&\fIi\fR is a pure \fIimaginary\fR number.
.PP
The arithmetics with pure imaginary numbers works just like you would expect
it with real numbers... you just have to remember that
.PP
.Vb 1
\&        i*i = \-1
.Ve
.PP
so you have:
.PP
.Vb 5
\&        5i + 7i = i * (5 + 7) = 12i
\&        4i \- 3i = i * (4 \- 3) = i
\&        4i * 2i = \-8
\&        6i / 2i = 3
\&        1 / i = \-i
.Ve
.PP
Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:
.PP
.Vb 1
\&        a + bi
.Ve
.PP
where \f(CW\*(C`a\*(C'\fR is the \fIreal\fR part and \f(CW\*(C`b\*(C'\fR is the \fIimaginary\fR part. The
arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the
rules used for real numbers just apply:
.PP
.Vb 2
\&        (4 + 3i) + (5 \- 2i) = (4 + 5) + i(3 \- 2) = 9 + i
\&        (2 + i) * (4 \- i) = 2*4 + 4i \-2i \-i*i = 8 + 2i + 1 = 9 + 2i
.Ve
.PP
A graphical representation of complex numbers is possible in a plane
(also called the \fIcomplex plane\fR, but it's really a 2D plane).
The number
.PP
.Vb 1
\&        z = a + bi
.Ve
.PP
is the point whose coordinates are (a, b). Actually, it would
be the vector originating from (0, 0) to (a, b). It follows that the addition
of two complex numbers is a vectorial addition.
.PP
Since there is a bijection between a point in the 2D plane and a complex
number (i.e. the mapping is unique and reciprocal), a complex number
can also be uniquely identified with polar coordinates:
.PP
.Vb 1
\&        [rho, theta]
.Ve
.PP
where \f(CW\*(C`rho\*(C'\fR is the distance to the origin, and \f(CW\*(C`theta\*(C'\fR the angle between
the vector and the \fIx\fR axis. There is a notation for this using the
exponential form, which is:
.PP
.Vb 1
\&        rho * exp(i * theta)
.Ve
.PP
where \fIi\fR is the famous imaginary number introduced above. Conversion
between this form and the cartesian form \f(CW\*(C`a + bi\*(C'\fR is immediate:
.PP
.Vb 2
\&        a = rho * cos(theta)
\&        b = rho * sin(theta)
.Ve
.PP
which is also expressed by this formula:
.PP
.Vb 1
\&        z = rho * exp(i * theta) = rho * (cos theta + i * sin theta)
.Ve
.PP
In other words, it's the projection of the vector onto the \fIx\fR and \fIy\fR
axes. Mathematicians call \fIrho\fR the \fInorm\fR or \fImodulus\fR and \fItheta\fR
the \fIargument\fR of the complex number. The \fInorm\fR of \f(CW\*(C`z\*(C'\fR is
marked here as \f(CWabs(z)\fR.
.PP
The polar notation (also known as the trigonometric representation) is
much more handy for performing multiplications and divisions of
complex numbers, whilst the cartesian notation is better suited for
additions and subtractions. Real numbers are on the \fIx\fR axis, and
therefore \fIy\fR or \fItheta\fR is zero or \fIpi\fR.
.PP
All the common operations that can be performed on a real number have
been defined to work on complex numbers as well, and are merely
\&\fIextensions\fR of the operations defined on real numbers. This means
they keep their natural meaning when there is no imaginary part, provided
the number is within their definition set.
.PP
For instance, the \f(CW\*(C`sqrt\*(C'\fR routine which computes the square root of
its argument is only defined for non-negative real numbers and yields a
non-negative real number (it is an application from \fBR+\fR to \fBR+\fR).
If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from \fBR\fR to \fBC\fR (the
set of complex numbers):
.PP
.Vb 1
\&        sqrt(x) = x >= 0 ? sqrt(x) : sqrt(\-x)*i
.Ve
.PP
It can also be extended to be an application from \fBC\fR to \fBC\fR,
whilst its restriction to \fBR\fR behaves as defined above by using
the following definition:
.PP
.Vb 1
\&        sqrt(z = [r,t]) = sqrt(r) * exp(i * t/2)
.Ve
.PP
Indeed, a negative real number can be noted \f(CW\*(C`[x,pi]\*(C'\fR (the modulus
\&\fIx\fR is always non-negative, so \f(CW\*(C`[x,pi]\*(C'\fR is really \f(CW\*(C`\-x\*(C'\fR, a negative
number) and the above definition states that
.PP
.Vb 1
\&        sqrt([x,pi]) = sqrt(x) * exp(i*pi/2) = [sqrt(x),pi/2] = sqrt(x)*i
.Ve
.PP
which is exactly what we had defined for negative real numbers above.
The \f(CW\*(C`sqrt\*(C'\fR returns only one of the solutions: if you want the both,
use the \f(CW\*(C`root\*(C'\fR function.
.PP
All the common mathematical functions defined on real numbers that
are extended to complex numbers share that same property of working
\&\fIas usual\fR when the imaginary part is zero (otherwise, it would not
be called an extension, would it?).
.PP
A \fInew\fR operation possible on a complex number that is
the identity for real numbers is called the \fIconjugate\fR, and is noted
with a horizontal bar above the number, or \f(CW\*(C`~z\*(C'\fR here.
.PP
.Vb 2
\&         z = a + bi
\&        ~z = a \- bi
.Ve
.PP
Simple... Now look:
.PP
.Vb 1
\&        z * ~z = (a + bi) * (a \- bi) = a*a + b*b
.Ve
.PP
We saw that the norm of \f(CW\*(C`z\*(C'\fR was noted \f(CWabs(z)\fR and was defined as the
distance to the origin, also known as:
.PP
.Vb 1
\&        rho = abs(z) = sqrt(a*a + b*b)
.Ve
.PP
so
.PP
.Vb 1
\&        z * ~z = abs(z) ** 2
.Ve
.PP
If z is a pure real number (i.e. \f(CW\*(C`b == 0\*(C'\fR), then the above yields:
.PP
.Vb 1
\&        a * a = abs(a) ** 2
.Ve
.PP
which is true (\f(CW\*(C`abs\*(C'\fR has the regular meaning for real number, i.e. stands
for the absolute value). This example explains why the norm of \f(CW\*(C`z\*(C'\fR is
noted \f(CWabs(z)\fR: it extends the \f(CW\*(C`abs\*(C'\fR function to complex numbers, yet
is the regular \f(CW\*(C`abs\*(C'\fR we know when the complex number actually has no
imaginary part... This justifies \fIa posteriori\fR our use of the \f(CW\*(C`abs\*(C'\fR
notation for the norm.
.SH "OPERATIONS"
.IX Header "OPERATIONS"
Given the following notations:
.PP
.Vb 3
\&        z1 = a + bi = r1 * exp(i * t1)
\&        z2 = c + di = r2 * exp(i * t2)
\&        z = <any complex or real number>
.Ve
.PP
the following (overloaded) operations are supported on complex numbers:
.PP
.Vb 10
\&        z1 + z2 = (a + c) + i(b + d)
\&        z1 \- z2 = (a \- c) + i(b \- d)
\&        z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
\&        z1 / z2 = (r1 / r2) * exp(i * (t1 \- t2))
\&        z1 ** z2 = exp(z2 * log z1)
\&        ~z = a \- bi
\&        abs(z) = r1 = sqrt(a*a + b*b)
\&        sqrt(z) = sqrt(r1) * exp(i * t/2)
\&        exp(z) = exp(a) * exp(i * b)
\&        log(z) = log(r1) + i*t
\&        sin(z) = 1/2i (exp(i * z1) \- exp(\-i * z))
\&        cos(z) = 1/2 (exp(i * z1) + exp(\-i * z))
\&        atan2(y, x) = atan(y / x) # Minding the right quadrant, note the order.
.Ve
.PP
The definition used for complex arguments of \fIatan2()\fR is
.PP
.Vb 1
\&       \-i log((x + iy)/sqrt(x*x+y*y))
.Ve
.PP
Note that atan2(0, 0) is not well-defined.
.PP
The following extra operations are supported on both real and complex
numbers:
.PP
.Vb 4
\&        Re(z) = a
\&        Im(z) = b
\&        arg(z) = t
\&        abs(z) = r
\&
\&        cbrt(z) = z ** (1/3)
\&        log10(z) = log(z) / log(10)
\&        logn(z, n) = log(z) / log(n)
\&
\&        tan(z) = sin(z) / cos(z)
\&
\&        csc(z) = 1 / sin(z)
\&        sec(z) = 1 / cos(z)
\&        cot(z) = 1 / tan(z)
\&
\&        asin(z) = \-i * log(i*z + sqrt(1\-z*z))
\&        acos(z) = \-i * log(z + i*sqrt(1\-z*z))
\&        atan(z) = i/2 * log((i+z) / (i\-z))
\&
\&        acsc(z) = asin(1 / z)
\&        asec(z) = acos(1 / z)
\&        acot(z) = atan(1 / z) = \-i/2 * log((i+z) / (z\-i))
\&
\&        sinh(z) = 1/2 (exp(z) \- exp(\-z))
\&        cosh(z) = 1/2 (exp(z) + exp(\-z))
\&        tanh(z) = sinh(z) / cosh(z) = (exp(z) \- exp(\-z)) / (exp(z) + exp(\-z))
\&
\&        csch(z) = 1 / sinh(z)
\&        sech(z) = 1 / cosh(z)
\&        coth(z) = 1 / tanh(z)
\&
\&        asinh(z) = log(z + sqrt(z*z+1))
\&        acosh(z) = log(z + sqrt(z*z\-1))
\&        atanh(z) = 1/2 * log((1+z) / (1\-z))
\&
\&        acsch(z) = asinh(1 / z)
\&        asech(z) = acosh(1 / z)
\&        acoth(z) = atanh(1 / z) = 1/2 * log((1+z) / (z\-1))
.Ve
.PP
\&\fIarg\fR, \fIabs\fR, \fIlog\fR, \fIcsc\fR, \fIcot\fR, \fIacsc\fR, \fIacot\fR, \fIcsch\fR,
\&\fIcoth\fR, \fIacosech\fR, \fIacotanh\fR, have aliases \fIrho\fR, \fItheta\fR, \fIln\fR,
\&\fIcosec\fR, \fIcotan\fR, \fIacosec\fR, \fIacotan\fR, \fIcosech\fR, \fIcotanh\fR,
\&\fIacosech\fR, \fIacotanh\fR, respectively.  \f(CW\*(C`Re\*(C'\fR, \f(CW\*(C`Im\*(C'\fR, \f(CW\*(C`arg\*(C'\fR, \f(CW\*(C`abs\*(C'\fR,
\&\f(CW\*(C`rho\*(C'\fR, and \f(CW\*(C`theta\*(C'\fR can be used also as mutators.  The \f(CW\*(C`cbrt\*(C'\fR
returns only one of the solutions: if you want all three, use the
\&\f(CW\*(C`root\*(C'\fR function.
.PP
The \fIroot\fR function is available to compute all the \fIn\fR
roots of some complex, where \fIn\fR is a strictly positive integer.
There are exactly \fIn\fR such roots, returned as a list. Getting the
number mathematicians call \f(CW\*(C`j\*(C'\fR such that:
.PP
.Vb 1
\&        1 + j + j*j = 0;
.Ve
.PP
is a simple matter of writing:
.PP
.Vb 1
\&        $j = ((root(1, 3))[1];
.Ve
.PP
The \fIk\fRth root for \f(CW\*(C`z = [r,t]\*(C'\fR is given by:
.PP
.Vb 1
\&        (root(z, n))[k] = r**(1/n) * exp(i * (t + 2*k*pi)/n)
.Ve
.PP
You can return the \fIk\fRth root directly by \f(CW\*(C`root(z, n, k)\*(C'\fR,
indexing starting from \fIzero\fR and ending at \fIn \- 1\fR.
.PP
The \fIspaceship\fR numeric comparison operator, <=>, is also
defined. In order to ensure its restriction to real numbers is conform
to what you would expect, the comparison is run on the real part of
the complex number first, and imaginary parts are compared only when
the real parts match.
.SH "CREATION"
.IX Header "CREATION"
To create a complex number, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->make(3, 4);
\&        $z = cplx(3, 4);
.Ve
.PP
if you know the cartesian form of the number, or
.PP
.Vb 1
\&        $z = 3 + 4*i;
.Ve
.PP
if you like. To create a number using the polar form, use either:
.PP
.Vb 2
\&        $z = Math::Complex\->emake(5, pi/3);
\&        $x = cplxe(5, pi/3);
.Ve
.PP
instead. The first argument is the modulus, the second is the angle
(in radians, the full circle is 2*pi).  (Mnemonic: \f(CW\*(C`e\*(C'\fR is used as a
notation for complex numbers in the polar form).
.PP
It is possible to write:
.PP
.Vb 1
\&        $x = cplxe(\-3, pi/4);
.Ve
.PP
but that will be silently converted into \f(CW\*(C`[3,\-3pi/4]\*(C'\fR, since the
modulus must be non-negative (it represents the distance to the origin
in the complex plane).
.PP
It is also possible to have a complex number as either argument of the
\&\f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR: the appropriate component of
the argument will be used.
.PP
.Vb 2
\&        $z1 = cplx(\-2,  1);
\&        $z2 = cplx($z1, 4);
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand a single (string) argument of the forms
.PP
.Vb 5
\&        2\-3i
\&        \-3i
\&        [2,3]
\&        [2,\-3pi/4]
\&        [2]
.Ve
.PP
in which case the appropriate cartesian and exponential components
will be parsed from the string and used to create new complex numbers.
The imaginary component and the theta, respectively, will default to zero.
.PP
The \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`emake\*(C'\fR, \f(CW\*(C`cplx\*(C'\fR, and \f(CW\*(C`cplxe\*(C'\fR will also
understand the case of no arguments: this means plain zero or (0, 0).
.SH "DISPLAYING"
.IX Header "DISPLAYING"
When printed, a complex number is usually shown under its cartesian
style \fIa+bi\fR, but there are legitimate cases where the polar style
\&\fI[r,t]\fR is more appropriate.  The process of converting the complex
number into a string that can be displayed is known as \fIstringification\fR.
.PP
By calling the class method \f(CW\*(C`Math::Complex::display_format\*(C'\fR and
supplying either \f(CW"polar"\fR or \f(CW"cartesian"\fR as an argument, you
override the default display style, which is \f(CW"cartesian"\fR. Not
supplying any argument returns the current settings.
.PP
This default can be overridden on a per-number basis by calling the
\&\f(CW\*(C`display_format\*(C'\fR method instead. As before, not supplying any argument
returns the current display style for this number. Otherwise whatever you
specify will be the new display style for \fIthis\fR particular number.
.PP
For instance:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        Math::Complex::display_format(\*(Aqpolar\*(Aq);
\&        $j = (root(1, 3))[1];
\&        print "j = $j\en";               # Prints "j = [1,2pi/3]"
\&        $j\->display_format(\*(Aqcartesian\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.866025403784439i"
.Ve
.PP
The polar style attempts to emphasize arguments like \fIk*pi/n\fR
(where \fIn\fR is a positive integer and \fIk\fR an integer within [\-9, +9]),
this is called \fIpolar pretty-printing\fR.
.PP
For the reverse of stringifying, see the \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR.
.SS "\s-1CHANGED IN PERL 5.6\s0"
.IX Subsection "CHANGED IN PERL 5.6"
The \f(CW\*(C`display_format\*(C'\fR class method and the corresponding
\&\f(CW\*(C`display_format\*(C'\fR object method can now be called using
a parameter hash instead of just a one parameter.
.PP
The old display format style, which can have values \f(CW"cartesian"\fR or
\&\f(CW"polar"\fR, can be changed using the \f(CW"style"\fR parameter.
.PP
.Vb 1
\&        $j\->display_format(style => "polar");
.Ve
.PP
The one parameter calling convention also still works.
.PP
.Vb 1
\&        $j\->display_format("polar");
.Ve
.PP
There are two new display parameters.
.PP
The first one is \f(CW"format"\fR, which is a \fIsprintf()\fR\-style format string
to be used for both numeric parts of the complex number(s).  The is
somewhat system-dependent but most often it corresponds to \f(CW"%.15g"\fR.
You can revert to the default by setting the \f(CW\*(C`format\*(C'\fR to \f(CW\*(C`undef\*(C'\fR.
.PP
.Vb 1
\&        # the $j from the above example
\&
\&        $j\->display_format(\*(Aqformat\*(Aq => \*(Aq%.5f\*(Aq);
\&        print "j = $j\en";               # Prints "j = \-0.50000+0.86603i"
\&        $j\->display_format(\*(Aqformat\*(Aq => undef);
\&        print "j = $j\en";               # Prints "j = \-0.5+0.86603i"
.Ve
.PP
Notice that this affects also the return values of the
\&\f(CW\*(C`display_format\*(C'\fR methods: in list context the whole parameter hash
will be returned, as opposed to only the style parameter value.
This is a potential incompatibility with earlier versions if you
have been calling the \f(CW\*(C`display_format\*(C'\fR method in list context.
.PP
The second new display parameter is \f(CW"polar_pretty_print"\fR, which can
be set to true or false, the default being true.  See the previous
section for what this means.
.SH "USAGE"
.IX Header "USAGE"
Thanks to overloading, the handling of arithmetics with complex numbers
is simple and almost transparent.
.PP
Here are some examples:
.PP
.Vb 1
\&        use Math::Complex;
\&
\&        $j = cplxe(1, 2*pi/3);  # $j ** 3 == 1
\&        print "j = $j, j**3 = ", $j ** 3, "\en";
\&        print "1 + j + j**2 = ", 1 + $j + $j**2, "\en";
\&
\&        $z = \-16 + 0*i;                 # Force it to be a complex
\&        print "sqrt($z) = ", sqrt($z), "\en";
\&
\&        $k = exp(i * 2*pi/3);
\&        print "$j \- $k = ", $j \- $k, "\en";
\&
\&        $z\->Re(3);                      # Re, Im, arg, abs,
\&        $j\->arg(2);                     # (the last two aka rho, theta)
\&                                        # can be used also as mutators.
.Ve
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1PI\s0"
.IX Subsection "PI"
The constant \f(CW\*(C`pi\*(C'\fR and some handy multiples of it (pi2, pi4,
and pip2 (pi/2) and pip4 (pi/4)) are also available if separately
exported:
.PP
.Vb 2
\&    use Math::Complex \*(Aq:pi\*(Aq; 
\&    $third_of_circle = pi2 / 3;
.Ve
.SS "Inf"
.IX Subsection "Inf"
The floating point infinity can be exported as a subroutine \fIInf()\fR:
.PP
.Vb 4
\&    use Math::Complex qw(Inf sinh);
\&    my $AlsoInf = Inf() + 42;
\&    my $AnotherInf = sinh(1e42);
\&    print "$AlsoInf is $AnotherInf\en" if $AlsoInf == $AnotherInf;
.Ve
.PP
Note that the stringified form of infinity varies between platforms:
it can be for example any of
.PP
.Vb 4
\&   inf
\&   infinity
\&   INF
\&   1.#INF
.Ve
.PP
or it can be something else.
.PP
Also note that in some platforms trying to use the infinity in
arithmetic operations may result in Perl crashing because using
an infinity causes \s-1SIGFPE\s0 or its moral equivalent to be sent.
The way to ignore this is
.PP
.Vb 1
\&  local $SIG{FPE} = sub { };
.Ve
.SH "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
.IX Header "ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO"
The division (/) and the following functions
.PP
.Vb 5
\&        log     ln      log10   logn
\&        tan     sec     csc     cot
\&        atan    asec    acsc    acot
\&        tanh    sech    csch    coth
\&        atanh   asech   acsch   acoth
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&        cot(0): Division by zero.
\&        (Because in the definition of cot(0), the divisor sin(0) is 0)
\&        Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&        atanh(\-1): Logarithm of zero.
\&        Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
logarithmic functions and the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot
be \f(CW1\fR (one).  For the \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be
\&\f(CW\*(C`\-1\*(C'\fR (minus one).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, the argument cannot be
\&\f(CW\*(C`i\*(C'\fR (the imaginary unit).  For the \f(CW\*(C`atan\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument
cannot be \f(CW\*(C`\-i\*(C'\fR (the negative imaginary unit).  For the \f(CW\*(C`tan\*(C'\fR,
\&\f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, the argument cannot be \fIpi/2 + k * pi\fR, where \fIk\fR
is any integer.  atan2(0, 0) is undefined, and if the complex arguments
are used for \fIatan2()\fR, a division by zero will happen if z1**2+z2**2 == 0.
.PP
Note that because we are operating on approximations of real numbers,
these errors can happen when merely `too close' to the singularities
listed above.
.SH "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
.IX Header "ERRORS DUE TO INDIGESTIBLE ARGUMENTS"
The \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR accept both real and complex arguments.
When they cannot recognize the arguments they will die with error
messages like the following
.PP
.Vb 4
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::make: Cannot take real part of ...
\&    Math::Complex::emake: Cannot take rho of ...
\&    Math::Complex::emake: Cannot take theta of ...
.Ve
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Complex;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sqrt\*(C'\fR, \f(CW\*(C`log\*(C'\fR, \f(CW\*(C`atan2\*(C'\fR).
This is construed as a feature by the Authors, actually... ;\-)
.PP
All routines expect to be given real or complex numbers. Don't attempt to
use BigFloat, since Perl has currently no rule to disambiguate a '+'
operation (for instance) between two overloaded entities.
.PP
In Cray \s-1UNICOS\s0 there is some strange numerical instability that results
in \fIroot()\fR, \fIcos()\fR, \fIsin()\fR, \fIcosh()\fR, \fIsinh()\fR, losing accuracy fast.  Beware.
The bug may be in \s-1UNICOS\s0 math libs, in \s-1UNICOS C\s0 compiler, in Math::Complex.
Whatever it is, it does not manifest itself anywhere else where Perl runs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::Trig
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel S. Lewart <\fIlewart!at!uiuc.edu\fR>,
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Round.3pm                              0100644 0001750 0001750 00000024620 12566242501 023365  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Round 3"
.TH Round 3 "2006-11-21" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Round \- Perl extension for rounding numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::Round qw(...those desired... or :all);
\&
\&  $rounded = round($scalar);
\&  @rounded = round(LIST...);
\&  $rounded = nearest($target, $scalar);
\&  @rounded = nearest($target, LIST...);
\&
\&  # and other functions as described below
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMath::Round\fR supplies functions that will round numbers in different
ways.  The functions \fBround\fR and \fBnearest\fR are exported by
default; others are available as described below.  \*(L"use ... qw(:all)\*(R"
exports all functions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBround\fR \s-1LIST\s0" 2
.IX Item "round LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded
\&\*(L"to infinity\*(R"; i.e., positive values are rounded up (e.g., 2.5
becomes 3) and negative values down (e.g., \-2.5 becomes \-3).
.IP "\fBround_even\fR \s-1LIST\s0" 2
.IX Item "round_even LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest even number; e.g., 2.5 becomes 2, 3.5 becomes 4, and \-2.5
becomes \-2.
.IP "\fBround_odd\fR \s-1LIST\s0" 2
.IX Item "round_odd LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest odd number; e.g., 3.5 becomes 3, 4.5 becomes 5, and \-3.5
becomes \-3.
.IP "\fBround_rand\fR \s-1LIST\s0" 2
.IX Item "round_rand LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded up or
down in a random fashion.  For example, in a large number of trials,
2.5 will become 2 half the time and 3 half the time.
.IP "\fBnearest\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to infinity.  For example:
.Sp
.Vb 6
\&  nearest(10, 44)    yields  40
\&  nearest(10, 46)            50
\&  nearest(10, 45)            50
\&  nearest(25, 328)          325
\&  nearest(.1, 4.567)          4.6
\&  nearest(10, \-45)          \-50
.Ve
.IP "\fBnearest_ceil\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_ceil TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the ceiling, i.e. the next
algebraically higher multiple.  For example:
.Sp
.Vb 3
\&  nearest_ceil(10, 44)    yields  40
\&  nearest_ceil(10, 45)            50
\&  nearest_ceil(10, \-45)          \-40
.Ve
.IP "\fBnearest_floor\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_floor TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the floor, i.e. the next
algebraically lower multiple.  For example:
.Sp
.Vb 3
\&  nearest_floor(10, 44)    yields  40
\&  nearest_floor(10, 45)            40
\&  nearest_floor(10, \-45)          \-50
.Ve
.IP "\fBnearest_rand\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_rand TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded up or down in a random fashion.
For example, in a large number of trials, \f(CW\*(C`nearest(10, 45)\*(C'\fR will
yield 40 half the time and 50 half the time.
.IP "\fBnlowmult\fR \s-1TARGET, LIST\s0" 2
.IX Item "nlowmult TARGET, LIST"
Returns the next lower multiple of the number(s) in \s-1LIST.
TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically lower. For example:
.Sp
.Vb 5
\&  nlowmult(10, 44)    yields  40
\&  nlowmult(10, 46)            40
\&  nlowmult(25, 328)          325
\&  nlowmult(.1, 4.567)          4.5
\&  nlowmult(10, \-41)          \-50
.Ve
.IP "\fBnhimult\fR \s-1TARGET, LIST\s0" 2
.IX Item "nhimult TARGET, LIST"
Returns the next higher multiple of the number(s) in \s-1LIST.
TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically higher. For example:
.Sp
.Vb 5
\&  nhimult(10, 44)    yields  50
\&  nhimult(10, 46)            50
\&  nhimult(25, 328)          350
\&  nhimult(.1, 4.512)          4.6
\&  nhimult(10, \-49)          \-40
.Ve
.SH "VARIABLE"
.IX Header "VARIABLE"
The variable \fB\f(CB$Math::Round::half\fB\fR is used by most routines in this
module. Its value is very slightly larger than 0.5, for reasons
explained below. If you find that your application does not deliver
the expected results, you may reset this variable at will.
.SH "STANDARD FLOATING-POINT DISCLAIMER"
.IX Header "STANDARD FLOATING-POINT DISCLAIMER"
Floating-point numbers are, of course, a rational subset of the real
numbers, so calculations with them are not always exact.
Numbers that are supposed to be halfway between
two others may surprise you; for instance, 0.85 may not be exactly
halfway between 0.8 and 0.9, and (0.75 \- 0.7) may not be the same as
(0.85 \- 0.8).
.PP
In order to give more predictable results, 
these routines use a value for
one-half that is slightly larger than 0.5.  Nevertheless,
if the numbers to be rounded are stored as floating-point, they will
be subject, as usual, to the mercies of your hardware, your C
compiler, etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Math::Round was written by Geoffrey Rommel <GROMMEL@cpan.org>
in October 2000.
                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Round5.16.3pm                          0100644 0001750 0001750 00000024373 12566242467 023717  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Round 3"
.TH Round 3 "2006-11-21" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Round \- Perl extension for rounding numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::Round qw(...those desired... or :all);
\&
\&  $rounded = round($scalar);
\&  @rounded = round(LIST...);
\&  $rounded = nearest($target, $scalar);
\&  @rounded = nearest($target, LIST...);
\&
\&  # and other functions as described below
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMath::Round\fR supplies functions that will round numbers in different
ways.  The functions \fBround\fR and \fBnearest\fR are exported by
default; others are available as described below.  \*(L"use ... qw(:all)\*(R"
exports all functions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBround\fR \s-1LIST\s0" 2
.IX Item "round LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded
\&\*(L"to infinity\*(R"; i.e., positive values are rounded up (e.g., 2.5
becomes 3) and negative values down (e.g., \-2.5 becomes \-3).
.IP "\fBround_even\fR \s-1LIST\s0" 2
.IX Item "round_even LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest even number; e.g., 2.5 becomes 2, 3.5 becomes 4, and \-2.5
becomes \-2.
.IP "\fBround_odd\fR \s-1LIST\s0" 2
.IX Item "round_odd LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest odd number; e.g., 3.5 becomes 3, 4.5 becomes 5, and \-3.5
becomes \-3.
.IP "\fBround_rand\fR \s-1LIST\s0" 2
.IX Item "round_rand LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded up or
down in a random fashion.  For example, in a large number of trials,
2.5 will become 2 half the time and 3 half the time.
.IP "\fBnearest\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nearest TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to infinity.  For example:
.Sp
.Vb 6
\&  nearest(10, 44)    yields  40
\&  nearest(10, 46)            50
\&  nearest(10, 45)            50
\&  nearest(25, 328)          325
\&  nearest(.1, 4.567)          4.6
\&  nearest(10, \-45)          \-50
.Ve
.IP "\fBnearest_ceil\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nearest_ceil TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the ceiling, i.e. the next
algebraically higher multiple.  For example:
.Sp
.Vb 3
\&  nearest_ceil(10, 44)    yields  40
\&  nearest_ceil(10, 45)            50
\&  nearest_ceil(10, \-45)          \-40
.Ve
.IP "\fBnearest_floor\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nearest_floor TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the floor, i.e. the next
algebraically lower multiple.  For example:
.Sp
.Vb 3
\&  nearest_floor(10, 44)    yields  40
\&  nearest_floor(10, 45)            40
\&  nearest_floor(10, \-45)          \-50
.Ve
.IP "\fBnearest_rand\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nearest_rand TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded up or down in a random fashion.
For example, in a large number of trials, \f(CW\*(C`nearest(10, 45)\*(C'\fR will
yield 40 half the time and 50 half the time.
.IP "\fBnlowmult\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nlowmult TARGET, LIST"
Returns the next lower multiple of the number(s) in \s-1LIST\s0.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically lower. For example:
.Sp
.Vb 5
\&  nlowmult(10, 44)    yields  40
\&  nlowmult(10, 46)            40
\&  nlowmult(25, 328)          325
\&  nlowmult(.1, 4.567)          4.5
\&  nlowmult(10, \-41)          \-50
.Ve
.IP "\fBnhimult\fR \s-1TARGET\s0, \s-1LIST\s0" 2
.IX Item "nhimult TARGET, LIST"
Returns the next higher multiple of the number(s) in \s-1LIST\s0.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically higher. For example:
.Sp
.Vb 5
\&  nhimult(10, 44)    yields  50
\&  nhimult(10, 46)            50
\&  nhimult(25, 328)          350
\&  nhimult(.1, 4.512)          4.6
\&  nhimult(10, \-49)          \-40
.Ve
.SH "VARIABLE"
.IX Header "VARIABLE"
The variable \fB\f(CB$Math::Round::half\fB\fR is used by most routines in this
module. Its value is very slightly larger than 0.5, for reasons
explained below. If you find that your application does not deliver
the expected results, you may reset this variable at will.
.SH "STANDARD FLOATING-POINT DISCLAIMER"
.IX Header "STANDARD FLOATING-POINT DISCLAIMER"
Floating-point numbers are, of course, a rational subset of the real
numbers, so calculations with them are not always exact.
Numbers that are supposed to be halfway between
two others may surprise you; for instance, 0.85 may not be exactly
halfway between 0.8 and 0.9, and (0.75 \- 0.7) may not be the same as
(0.85 \- 0.8).
.PP
In order to give more predictable results, 
these routines use a value for
one-half that is slightly larger than 0.5.  Nevertheless,
if the numbers to be rounded are stored as floating-point, they will
be subject, as usual, to the mercies of your hardware, your C
compiler, etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Math::Round was written by Geoffrey Rommel <GROMMEL@cpan.org>
in October 2000.
                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Round5.18.3pm                          0100644 0001750 0001750 00000024620 12566242501 023701  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Round 3"
.TH Round 3 "2006-11-21" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Round \- Perl extension for rounding numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::Round qw(...those desired... or :all);
\&
\&  $rounded = round($scalar);
\&  @rounded = round(LIST...);
\&  $rounded = nearest($target, $scalar);
\&  @rounded = nearest($target, LIST...);
\&
\&  # and other functions as described below
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMath::Round\fR supplies functions that will round numbers in different
ways.  The functions \fBround\fR and \fBnearest\fR are exported by
default; others are available as described below.  \*(L"use ... qw(:all)\*(R"
exports all functions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBround\fR \s-1LIST\s0" 2
.IX Item "round LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded
\&\*(L"to infinity\*(R"; i.e., positive values are rounded up (e.g., 2.5
becomes 3) and negative values down (e.g., \-2.5 becomes \-3).
.IP "\fBround_even\fR \s-1LIST\s0" 2
.IX Item "round_even LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest even number; e.g., 2.5 becomes 2, 3.5 becomes 4, and \-2.5
becomes \-2.
.IP "\fBround_odd\fR \s-1LIST\s0" 2
.IX Item "round_odd LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded to the
nearest odd number; e.g., 3.5 becomes 3, 4.5 becomes 5, and \-3.5
becomes \-3.
.IP "\fBround_rand\fR \s-1LIST\s0" 2
.IX Item "round_rand LIST"
Rounds the number(s) to the nearest integer.  In scalar context,
returns a single value; in list context, returns a list of values.
Numbers that are halfway between two integers are rounded up or
down in a random fashion.  For example, in a large number of trials,
2.5 will become 2 half the time and 3 half the time.
.IP "\fBnearest\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to infinity.  For example:
.Sp
.Vb 6
\&  nearest(10, 44)    yields  40
\&  nearest(10, 46)            50
\&  nearest(10, 45)            50
\&  nearest(25, 328)          325
\&  nearest(.1, 4.567)          4.6
\&  nearest(10, \-45)          \-50
.Ve
.IP "\fBnearest_ceil\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_ceil TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the ceiling, i.e. the next
algebraically higher multiple.  For example:
.Sp
.Vb 3
\&  nearest_ceil(10, 44)    yields  40
\&  nearest_ceil(10, 45)            50
\&  nearest_ceil(10, \-45)          \-40
.Ve
.IP "\fBnearest_floor\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_floor TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded to the floor, i.e. the next
algebraically lower multiple.  For example:
.Sp
.Vb 3
\&  nearest_floor(10, 44)    yields  40
\&  nearest_floor(10, 45)            40
\&  nearest_floor(10, \-45)          \-50
.Ve
.IP "\fBnearest_rand\fR \s-1TARGET, LIST\s0" 2
.IX Item "nearest_rand TARGET, LIST"
Rounds the number(s) to the nearest multiple of the target value.
\&\s-1TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are halfway between two multiples
of the target will be rounded up or down in a random fashion.
For example, in a large number of trials, \f(CW\*(C`nearest(10, 45)\*(C'\fR will
yield 40 half the time and 50 half the time.
.IP "\fBnlowmult\fR \s-1TARGET, LIST\s0" 2
.IX Item "nlowmult TARGET, LIST"
Returns the next lower multiple of the number(s) in \s-1LIST.
TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically lower. For example:
.Sp
.Vb 5
\&  nlowmult(10, 44)    yields  40
\&  nlowmult(10, 46)            40
\&  nlowmult(25, 328)          325
\&  nlowmult(.1, 4.567)          4.5
\&  nlowmult(10, \-41)          \-50
.Ve
.IP "\fBnhimult\fR \s-1TARGET, LIST\s0" 2
.IX Item "nhimult TARGET, LIST"
Returns the next higher multiple of the number(s) in \s-1LIST.
TARGET\s0 must be positive.
In scalar context, returns a single value; in list context, returns
a list of values.  Numbers that are between two multiples of the
target will be adjusted to the nearest multiples of \s-1LIST\s0 that are
algebraically higher. For example:
.Sp
.Vb 5
\&  nhimult(10, 44)    yields  50
\&  nhimult(10, 46)            50
\&  nhimult(25, 328)          350
\&  nhimult(.1, 4.512)          4.6
\&  nhimult(10, \-49)          \-40
.Ve
.SH "VARIABLE"
.IX Header "VARIABLE"
The variable \fB\f(CB$Math::Round::half\fB\fR is used by most routines in this
module. Its value is very slightly larger than 0.5, for reasons
explained below. If you find that your application does not deliver
the expected results, you may reset this variable at will.
.SH "STANDARD FLOATING-POINT DISCLAIMER"
.IX Header "STANDARD FLOATING-POINT DISCLAIMER"
Floating-point numbers are, of course, a rational subset of the real
numbers, so calculations with them are not always exact.
Numbers that are supposed to be halfway between
two others may surprise you; for instance, 0.85 may not be exactly
halfway between 0.8 and 0.9, and (0.75 \- 0.7) may not be the same as
(0.85 \- 0.8).
.PP
In order to give more predictable results, 
these routines use a value for
one-half that is slightly larger than 0.5.  Nevertheless,
if the numbers to be rounded are stored as floating-point, they will
be subject, as usual, to the mercies of your hardware, your C
compiler, etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Math::Round was written by Geoffrey Rommel <GROMMEL@cpan.org>
in October 2000.
                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Trig.3pm                               0100644 0001750 0001750 00000055210 12566207460 023207  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Trig 3pm"
.TH Math::Trig 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Trig \- trigonometric functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::Trig;
\&
\&    $x = tan(0.9);
\&    $y = acos(3.7);
\&    $z = asin(2.4);
\&
\&    $halfpi = pi/2;
\&
\&    $rad = deg2rad(120);
\&
\&    # Import constants pi2, pip2, pip4 (2*pi, pi/2, pi/4).
\&    use Math::Trig \*(Aq:pi\*(Aq;
\&
\&    # Import the conversions between cartesian/spherical/cylindrical.
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&        # Import the great circle formulas.
\&    use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Math::Trig\*(C'\fR defines many trigonometric functions not defined by the
core Perl which defines only the \f(CW\*(C`sin()\*(C'\fR and \f(CW\*(C`cos()\*(C'\fR.  The constant
\&\fBpi\fR is also defined as are a few convenience functions for angle
conversions, and \fIgreat circle formulas\fR for spherical movement.
.SH "TRIGONOMETRIC FUNCTIONS"
.IX Header "TRIGONOMETRIC FUNCTIONS"
The tangent
.IP "\fBtan\fR" 4
.IX Item "tan"
.PP
The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot
are aliases)
.PP
\&\fBcsc\fR, \fBcosec\fR, \fBsec\fR, \fBsec\fR, \fBcot\fR, \fBcotan\fR
.PP
The arcus (also known as the inverse) functions of the sine, cosine,
and tangent
.PP
\&\fBasin\fR, \fBacos\fR, \fBatan\fR
.PP
The principal value of the arc tangent of y/x
.PP
\&\fBatan2\fR(y, x)
.PP
The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc
and acotan/acot are aliases).  Note that atan2(0, 0) is not well-defined.
.PP
\&\fBacsc\fR, \fBacosec\fR, \fBasec\fR, \fBacot\fR, \fBacotan\fR
.PP
The hyperbolic sine, cosine, and tangent
.PP
\&\fBsinh\fR, \fBcosh\fR, \fBtanh\fR
.PP
The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch
and cotanh/coth are aliases)
.PP
\&\fBcsch\fR, \fBcosech\fR, \fBsech\fR, \fBcoth\fR, \fBcotanh\fR
.PP
The area (also known as the inverse) functions of the hyperbolic
sine, cosine, and tangent
.PP
\&\fBasinh\fR, \fBacosh\fR, \fBatanh\fR
.PP
The area cofunctions of the hyperbolic sine, cosine, and tangent
(acsch/acosech and acoth/acotanh are aliases)
.PP
\&\fBacsch\fR, \fBacosech\fR, \fBasech\fR, \fBacoth\fR, \fBacotanh\fR
.PP
The trigonometric constant \fBpi\fR and some of handy multiples
of it are also defined.
.PP
\&\fBpi, pi2, pi4, pip2, pip4\fR
.SS "\s-1ERRORS DUE TO DIVISION BY ZERO\s0"
.IX Subsection "ERRORS DUE TO DIVISION BY ZERO"
The following functions
.PP
.Vb 10
\&    acoth
\&    acsc
\&    acsch
\&    asec
\&    asech
\&    atanh
\&    cot
\&    coth
\&    csc
\&    csch
\&    sec
\&    sech
\&    tan
\&    tanh
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&    cot(0): Division by zero.
\&    (Because in the definition of cot(0), the divisor sin(0) is 0)
\&    Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&    atanh(\-1): Logarithm of zero.
\&    Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW1\fR (one).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW\*(C`\-1\*(C'\fR (minus one).  For the
\&\f(CW\*(C`tan\*(C'\fR, \f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, \f(CW\*(C`sech\*(C'\fR, the argument cannot be \fIpi/2 + k *
pi\fR, where \fIk\fR is any integer.
.PP
Note that atan2(0, 0) is not well-defined.
.SS "\s-1SIMPLE \s0(\s-1REAL\s0) \s-1ARGUMENTS, COMPLEX RESULTS\s0"
.IX Subsection "SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS"
Please note that some of the trigonometric functions can break out
from the \fBreal axis\fR into the \fBcomplex plane\fR. For example
\&\f(CWasin(2)\fR has no definition for plain real numbers but it has
definition for complex numbers.
.PP
In Perl terms this means that supplying the usual Perl numbers (also
known as scalars, please see perldata) as input for the
trigonometric functions might produce as output results that no more
are simple real numbers: instead they are complex numbers.
.PP
The \f(CW\*(C`Math::Trig\*(C'\fR handles this by using the \f(CW\*(C`Math::Complex\*(C'\fR package
which knows how to handle complex numbers, please see Math::Complex
for more information. In practice you need not to worry about getting
complex numbers as results because the \f(CW\*(C`Math::Complex\*(C'\fR takes care of
details like for example how to display complex numbers. For example:
.PP
.Vb 1
\&    print asin(2), "\en";
.Ve
.PP
should produce something like this (take or leave few last decimals):
.PP
.Vb 1
\&    1.5707963267949\-1.31695789692482i
.Ve
.PP
That is, a complex number with the real part of approximately \f(CW1.571\fR
and the imaginary part of approximately \f(CW\*(C`\-1.317\*(C'\fR.
.SH "PLANE ANGLE CONVERSIONS"
.IX Header "PLANE ANGLE CONVERSIONS"
(Plane, 2\-dimensional) angles may be converted with the following functions.
.IP "deg2rad" 4
.IX Item "deg2rad"
.Vb 1
\&    $radians  = deg2rad($degrees);
.Ve
.IP "grad2rad" 4
.IX Item "grad2rad"
.Vb 1
\&    $radians  = grad2rad($gradians);
.Ve
.IP "rad2deg" 4
.IX Item "rad2deg"
.Vb 1
\&    $degrees  = rad2deg($radians);
.Ve
.IP "grad2deg" 4
.IX Item "grad2deg"
.Vb 1
\&    $degrees  = grad2deg($gradians);
.Ve
.IP "deg2grad" 4
.IX Item "deg2grad"
.Vb 1
\&    $gradians = deg2grad($degrees);
.Ve
.IP "rad2grad" 4
.IX Item "rad2grad"
.Vb 1
\&    $gradians = rad2grad($radians);
.Ve
.PP
The full circle is 2 \fIpi\fR radians or \fI360\fR degrees or \fI400\fR gradians.
The result is by default wrapped to be inside the [0, {2pi,360,400}[ circle.
If you don't want this, supply a true second argument:
.PP
.Vb 2
\&    $zillions_of_radians  = deg2rad($zillions_of_degrees, 1);
\&    $negative_degrees     = rad2deg($negative_radians, 1);
.Ve
.PP
You can also do the wrapping explicitly by \fIrad2rad()\fR, \fIdeg2deg()\fR, and
\&\fIgrad2grad()\fR.
.IP "rad2rad" 4
.IX Item "rad2rad"
.Vb 1
\&    $radians_wrapped_by_2pi = rad2rad($radians);
.Ve
.IP "deg2deg" 4
.IX Item "deg2deg"
.Vb 1
\&    $degrees_wrapped_by_360 = deg2deg($degrees);
.Ve
.IP "grad2grad" 4
.IX Item "grad2grad"
.Vb 1
\&    $gradians_wrapped_by_400 = grad2grad($gradians);
.Ve
.SH "RADIAL COORDINATE CONVERSIONS"
.IX Header "RADIAL COORDINATE CONVERSIONS"
\&\fBRadial coordinate systems\fR are the \fBspherical\fR and the \fBcylindrical\fR
systems, explained shortly in more detail.
.PP
You can import radial coordinate conversion functions by using the
\&\f(CW\*(C`:radial\*(C'\fR tag:
.PP
.Vb 1
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&    ($rho, $theta, $z)     = cartesian_to_cylindrical($x, $y, $z);
\&    ($rho, $theta, $phi)   = cartesian_to_spherical($x, $y, $z);
\&    ($x, $y, $z)           = cylindrical_to_cartesian($rho, $theta, $z);
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
\&    ($x, $y, $z)           = spherical_to_cartesian($rho, $theta, $phi);
\&    ($rho_c, $theta, $z)   = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.PP
\&\fBAll angles are in radians\fR.
.SS "\s-1COORDINATE SYSTEMS\s0"
.IX Subsection "COORDINATE SYSTEMS"
\&\fBCartesian\fR coordinates are the usual rectangular \fI(x, y, z)\fR\-coordinates.
.PP
Spherical coordinates, \fI(rho, theta, pi)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a sphere surface.  The radius of the sphere is \fBrho\fR, also
known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The angle from the \fIz\fR\-axis is \fBphi\fR, also known as the
\&\fIpolar\fR coordinate.  The North Pole is therefore \fI0, 0, rho\fR, and
the Gulf of Guinea (think of the missing big chunk of Africa) \fI0,
pi/2, rho\fR.  In geographical terms \fIphi\fR is latitude (northward
positive, southward negative) and \fItheta\fR is longitude (eastward
positive, westward negative).
.PP
\&\fB\s-1BEWARE\s0\fR: some texts define \fItheta\fR and \fIphi\fR the other way round,
some texts define the \fIphi\fR to start from the horizontal plane, some
texts use \fIr\fR in place of \fIrho\fR.
.PP
Cylindrical coordinates, \fI(rho, theta, z)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a cylinder surface.  The radius of the cylinder is \fBrho\fR,
also known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The third coordinate is the \fIz\fR, pointing up from the
\&\fBtheta\fR\-plane.
.SS "3\-D \s-1ANGLE CONVERSIONS\s0"
.IX Subsection "3-D ANGLE CONVERSIONS"
Conversions to and from spherical and cylindrical coordinates are
available.  Please notice that the conversions are not necessarily
reversible because of the equalities like \fIpi\fR angles being equal to
\&\fI\-pi\fR angles.
.IP "cartesian_to_cylindrical" 4
.IX Item "cartesian_to_cylindrical"
.Vb 1
\&    ($rho, $theta, $z) = cartesian_to_cylindrical($x, $y, $z);
.Ve
.IP "cartesian_to_spherical" 4
.IX Item "cartesian_to_spherical"
.Vb 1
\&    ($rho, $theta, $phi) = cartesian_to_spherical($x, $y, $z);
.Ve
.IP "cylindrical_to_cartesian" 4
.IX Item "cylindrical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = cylindrical_to_cartesian($rho, $theta, $z);
.Ve
.IP "cylindrical_to_spherical" 4
.IX Item "cylindrical_to_spherical"
.Vb 1
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_s\fR is not equal to \f(CW$rho_c\fR.
.IP "spherical_to_cartesian" 4
.IX Item "spherical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = spherical_to_cartesian($rho, $theta, $phi);
.Ve
.IP "spherical_to_cylindrical" 4
.IX Item "spherical_to_cylindrical"
.Vb 1
\&    ($rho_c, $theta, $z) = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_c\fR is not equal to \f(CW$rho_s\fR.
.SH "GREAT CIRCLE DISTANCES AND DIRECTIONS"
.IX Header "GREAT CIRCLE DISTANCES AND DIRECTIONS"
A great circle is section of a circle that contains the circle
diameter: the shortest distance between two (non-antipodal) points on
the spherical surface goes along the great circle connecting those two
points.
.SS "great_circle_distance"
.IX Subsection "great_circle_distance"
You can compute spherical distances, called \fBgreat circle distances\fR,
by importing the \fIgreat_circle_distance()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_distance\*(Aq;
\&
\&  $distance = great_circle_distance($theta0, $phi0, $theta1, $phi1, [, $rho]);
.Ve
.PP
The \fIgreat circle distance\fR is the shortest distance between two
points on a sphere.  The distance is in \f(CW$rho\fR units.  The \f(CW$rho\fR is
optional, it defaults to 1 (the unit sphere), therefore the distance
defaults to radians.
.PP
If you think geographically the \fItheta\fR are longitudes: zero at the
Greenwhich meridian, eastward positive, westward negative \*(-- and the
\&\fIphi\fR are latitudes: zero at the North Pole, northward positive,
southward negative.  \fB\s-1NOTE\s0\fR: this formula thinks in mathematics, not
geographically: the \fIphi\fR zero is at the North Pole, not at the
Equator on the west coast of Africa (Bay of Guinea).  You need to
subtract your geographical coordinates from \fIpi/2\fR (also known as 90
degrees).
.PP
.Vb 2
\&  $distance = great_circle_distance($lon0, pi/2 \- $lat0,
\&                                    $lon1, pi/2 \- $lat1, $rho);
.Ve
.SS "great_circle_direction"
.IX Subsection "great_circle_direction"
The direction you must follow the great circle (also known as \fIbearing\fR)
can be computed by the \fIgreat_circle_direction()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_direction\*(Aq;
\&
\&  $direction = great_circle_direction($theta0, $phi0, $theta1, $phi1);
.Ve
.SS "great_circle_bearing"
.IX Subsection "great_circle_bearing"
Alias 'great_circle_bearing' for 'great_circle_direction' is also available.
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_bearing\*(Aq;
\&
\&  $direction = great_circle_bearing($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The result of great_circle_direction is in radians, zero indicating
straight north, pi or \-pi straight south, pi/2 straight west, and
\&\-pi/2 straight east.
.SS "great_circle_destination"
.IX Subsection "great_circle_destination"
You can inversely compute the destination if you know the
starting point, direction, and distance:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_destination\*(Aq;
\&
\&  # $diro is the original direction,
\&  # for example from great_circle_bearing().
\&  # $distance is the angular distance in radians,
\&  # for example from great_circle_distance().
\&  # $thetad and $phid are the destination coordinates,
\&  # $dird is the final direction at the destination.
\&
\&  ($thetad, $phid, $dird) =
\&    great_circle_destination($theta, $phi, $diro, $distance);
.Ve
.PP
or the midpoint if you know the end points:
.SS "great_circle_midpoint"
.IX Subsection "great_circle_midpoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_midpoint\*(Aq;
\&
\&  ($thetam, $phim) =
\&    great_circle_midpoint($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The \fIgreat_circle_midpoint()\fR is just a special case of
.SS "great_circle_waypoint"
.IX Subsection "great_circle_waypoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_waypoint\*(Aq;
\&
\&  ($thetai, $phii) =
\&    great_circle_waypoint($theta0, $phi0, $theta1, $phi1, $way);
.Ve
.PP
Where the \f(CW$way\fR is a value from zero ($theta0, \f(CW$phi0\fR) to one ($theta1,
\&\f(CW$phi1\fR).  Note that antipodal points (where their distance is \fIpi\fR
radians) do not have waypoints between them (they would have an an
\&\*(L"equator\*(R" between them), and therefore \f(CW\*(C`undef\*(C'\fR is returned for
antipodal points.  If the points are the same and the distance
therefore zero and all waypoints therefore identical, the first point
(either point) is returned.
.PP
The thetas, phis, direction, and distance in the above are all in radians.
.PP
You can import all the great circle formulas by
.PP
.Vb 1
\&  use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.PP
Notice that the resulting directions might be somewhat surprising if
you are looking at a flat worldmap: in such map projections the great
circles quite often do not look like the shortest routes \*(--  but for
example the shortest possible routes from Europe or North America to
Asia do often cross the polar regions.  (The common Mercator projection
does \fBnot\fR show great circles as straight lines: straight lines in the
Mercator projection are lines of constant bearing.)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate the distance between London (51.3N 0.5W) and Tokyo
(35.7N 139.8E) in kilometers:
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_distance deg2rad);
\&
\&    # Notice the 90 \- latitude: phi zero is at the North Pole.
\&    sub NESW { deg2rad($_[0]), deg2rad(90 \- $_[1]) }
\&    my @L = NESW( \-0.5, 51.3);
\&    my @T = NESW(139.8, 35.7);
\&    my $km = great_circle_distance(@L, @T, 6378); # About 9600 km.
.Ve
.PP
The direction you would have to go from London to Tokyo (in radians,
straight north being zero, straight east being pi/2).
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_direction);
\&
\&    my $rad = great_circle_direction(@L, @T); # About 0.547 or 0.174 pi.
.Ve
.PP
The midpoint between London and Tokyo being
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_midpoint);
\&
\&    my @M = great_circle_midpoint(@L, @T);
.Ve
.PP
or about 69 N 89 E, in the frozen wastes of Siberia.
.PP
\&\fB\s-1NOTE\s0\fR: you \fBcannot\fR get from A to B like this:
.PP
.Vb 3
\&   Dist = great_circle_distance(A, B)
\&   Dir  = great_circle_direction(A, B)
\&   C    = great_circle_destination(A, Dist, Dir)
.Ve
.PP
and expect C to be B, because the bearing constantly changes when
going from A to B (except in some special case like the meridians or
the circles of latitudes) and in \fIgreat_circle_destination()\fR one gives
a \fBconstant\fR bearing to follow.
.SS "\s-1CAVEAT FOR GREAT CIRCLE FORMULAS\s0"
.IX Subsection "CAVEAT FOR GREAT CIRCLE FORMULAS"
The answers may be off by few percentages because of the irregular
(slightly aspherical) form of the Earth.  The errors are at worst
about 0.55%, but generally below 0.3%.
.SS "Real-valued asin and acos"
.IX Subsection "Real-valued asin and acos"
For small inputs \fIasin()\fR and \fIacos()\fR may return complex numbers even
when real numbers would be enough and correct, this happens because of
floating-point inaccuracies.  You can see these inaccuracies for
example by trying theses:
.PP
.Vb 2
\&  print cos(1e\-6)**2+sin(1e\-6)**2 \- 1,"\en";
\&  printf "%.20f", cos(1e\-6)**2+sin(1e\-6)**2,"\en";
.Ve
.PP
which will print something like this
.PP
.Vb 2
\&  \-1.11022302462516e\-16
\&  0.99999999999999988898
.Ve
.PP
even though the expected results are of course exactly zero and one.
The formulas used to compute \fIasin()\fR and \fIacos()\fR are quite sensitive to
this, and therefore they might accidentally slip into the complex
plane even when they should not.  To counter this there are two
interfaces that are guaranteed to return a real-valued output.
.IP "asin_real" 4
.IX Item "asin_real"
.Vb 1
\&    use Math::Trig qw(asin_real);
\&
\&    $real_angle = asin_real($input_sin);
.Ve
.Sp
Return a real-valued arcus sine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, pi/2
is returned.  For inputs less than minus one, \-pi/2 is returned.
.IP "acos_real" 4
.IX Item "acos_real"
.Vb 1
\&    use Math::Trig qw(acos_real);
\&
\&    $real_angle = acos_real($input_cos);
.Ve
.Sp
Return a real-valued arcus cosine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, zero
is returned.  For inputs less than minus one, pi is returned.
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Trig;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sin\*(C'\fR, \f(CW\*(C`cos\*(C'\fR).  This is
construed as a feature by the Authors, actually... ;\-)
.PP
The code is not optimized for speed, especially because we use
\&\f(CW\*(C`Math::Complex\*(C'\fR and thus go quite near complex numbers while doing
the computations even when the arguments are not. This, however,
cannot be completely avoided if we want things like \f(CWasin(2)\fR to give
an answer instead of giving a fatal runtime error.
.PP
Do not attempt navigation using these formulas.
.PP
Math::Complex
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Trig5.16.3pm                           0100644 0001750 0001750 00000055022 12566207437 023526  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Trig 3pm"
.TH Math::Trig 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Trig \- trigonometric functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::Trig;
\&
\&    $x = tan(0.9);
\&    $y = acos(3.7);
\&    $z = asin(2.4);
\&
\&    $halfpi = pi/2;
\&
\&    $rad = deg2rad(120);
\&
\&    # Import constants pi2, pip2, pip4 (2*pi, pi/2, pi/4).
\&    use Math::Trig \*(Aq:pi\*(Aq;
\&
\&    # Import the conversions between cartesian/spherical/cylindrical.
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&        # Import the great circle formulas.
\&    use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Math::Trig\*(C'\fR defines many trigonometric functions not defined by the
core Perl which defines only the \f(CW\*(C`sin()\*(C'\fR and \f(CW\*(C`cos()\*(C'\fR.  The constant
\&\fBpi\fR is also defined as are a few convenience functions for angle
conversions, and \fIgreat circle formulas\fR for spherical movement.
.SH "TRIGONOMETRIC FUNCTIONS"
.IX Header "TRIGONOMETRIC FUNCTIONS"
The tangent
.IP "\fBtan\fR" 4
.IX Item "tan"
.PP
The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot
are aliases)
.PP
\&\fBcsc\fR, \fBcosec\fR, \fBsec\fR, \fBsec\fR, \fBcot\fR, \fBcotan\fR
.PP
The arcus (also known as the inverse) functions of the sine, cosine,
and tangent
.PP
\&\fBasin\fR, \fBacos\fR, \fBatan\fR
.PP
The principal value of the arc tangent of y/x
.PP
\&\fBatan2\fR(y, x)
.PP
The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc
and acotan/acot are aliases).  Note that atan2(0, 0) is not well-defined.
.PP
\&\fBacsc\fR, \fBacosec\fR, \fBasec\fR, \fBacot\fR, \fBacotan\fR
.PP
The hyperbolic sine, cosine, and tangent
.PP
\&\fBsinh\fR, \fBcosh\fR, \fBtanh\fR
.PP
The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch
and cotanh/coth are aliases)
.PP
\&\fBcsch\fR, \fBcosech\fR, \fBsech\fR, \fBcoth\fR, \fBcotanh\fR
.PP
The area (also known as the inverse) functions of the hyperbolic
sine, cosine, and tangent
.PP
\&\fBasinh\fR, \fBacosh\fR, \fBatanh\fR
.PP
The area cofunctions of the hyperbolic sine, cosine, and tangent
(acsch/acosech and acoth/acotanh are aliases)
.PP
\&\fBacsch\fR, \fBacosech\fR, \fBasech\fR, \fBacoth\fR, \fBacotanh\fR
.PP
The trigonometric constant \fBpi\fR and some of handy multiples
of it are also defined.
.PP
\&\fBpi, pi2, pi4, pip2, pip4\fR
.SS "\s-1ERRORS\s0 \s-1DUE\s0 \s-1TO\s0 \s-1DIVISION\s0 \s-1BY\s0 \s-1ZERO\s0"
.IX Subsection "ERRORS DUE TO DIVISION BY ZERO"
The following functions
.PP
.Vb 10
\&    acoth
\&    acsc
\&    acsch
\&    asec
\&    asech
\&    atanh
\&    cot
\&    coth
\&    csc
\&    csch
\&    sec
\&    sech
\&    tan
\&    tanh
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&    cot(0): Division by zero.
\&    (Because in the definition of cot(0), the divisor sin(0) is 0)
\&    Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&    atanh(\-1): Logarithm of zero.
\&    Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW1\fR (one).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW\*(C`\-1\*(C'\fR (minus one).  For the
\&\f(CW\*(C`tan\*(C'\fR, \f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, \f(CW\*(C`sech\*(C'\fR, the argument cannot be \fIpi/2 + k *
pi\fR, where \fIk\fR is any integer.
.PP
Note that atan2(0, 0) is not well-defined.
.SS "\s-1SIMPLE\s0 (\s-1REAL\s0) \s-1ARGUMENTS\s0, \s-1COMPLEX\s0 \s-1RESULTS\s0"
.IX Subsection "SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS"
Please note that some of the trigonometric functions can break out
from the \fBreal axis\fR into the \fBcomplex plane\fR. For example
\&\f(CWasin(2)\fR has no definition for plain real numbers but it has
definition for complex numbers.
.PP
In Perl terms this means that supplying the usual Perl numbers (also
known as scalars, please see perldata) as input for the
trigonometric functions might produce as output results that no more
are simple real numbers: instead they are complex numbers.
.PP
The \f(CW\*(C`Math::Trig\*(C'\fR handles this by using the \f(CW\*(C`Math::Complex\*(C'\fR package
which knows how to handle complex numbers, please see Math::Complex
for more information. In practice you need not to worry about getting
complex numbers as results because the \f(CW\*(C`Math::Complex\*(C'\fR takes care of
details like for example how to display complex numbers. For example:
.PP
.Vb 1
\&    print asin(2), "\en";
.Ve
.PP
should produce something like this (take or leave few last decimals):
.PP
.Vb 1
\&    1.5707963267949\-1.31695789692482i
.Ve
.PP
That is, a complex number with the real part of approximately \f(CW1.571\fR
and the imaginary part of approximately \f(CW\*(C`\-1.317\*(C'\fR.
.SH "PLANE ANGLE CONVERSIONS"
.IX Header "PLANE ANGLE CONVERSIONS"
(Plane, 2\-dimensional) angles may be converted with the following functions.
.IP "deg2rad" 4
.IX Item "deg2rad"
.Vb 1
\&    $radians  = deg2rad($degrees);
.Ve
.IP "grad2rad" 4
.IX Item "grad2rad"
.Vb 1
\&    $radians  = grad2rad($gradians);
.Ve
.IP "rad2deg" 4
.IX Item "rad2deg"
.Vb 1
\&    $degrees  = rad2deg($radians);
.Ve
.IP "grad2deg" 4
.IX Item "grad2deg"
.Vb 1
\&    $degrees  = grad2deg($gradians);
.Ve
.IP "deg2grad" 4
.IX Item "deg2grad"
.Vb 1
\&    $gradians = deg2grad($degrees);
.Ve
.IP "rad2grad" 4
.IX Item "rad2grad"
.Vb 1
\&    $gradians = rad2grad($radians);
.Ve
.PP
The full circle is 2 \fIpi\fR radians or \fI360\fR degrees or \fI400\fR gradians.
The result is by default wrapped to be inside the [0, {2pi,360,400}[ circle.
If you don't want this, supply a true second argument:
.PP
.Vb 2
\&    $zillions_of_radians  = deg2rad($zillions_of_degrees, 1);
\&    $negative_degrees     = rad2deg($negative_radians, 1);
.Ve
.PP
You can also do the wrapping explicitly by \fIrad2rad()\fR, \fIdeg2deg()\fR, and
\&\fIgrad2grad()\fR.
.IP "rad2rad" 4
.IX Item "rad2rad"
.Vb 1
\&    $radians_wrapped_by_2pi = rad2rad($radians);
.Ve
.IP "deg2deg" 4
.IX Item "deg2deg"
.Vb 1
\&    $degrees_wrapped_by_360 = deg2deg($degrees);
.Ve
.IP "grad2grad" 4
.IX Item "grad2grad"
.Vb 1
\&    $gradians_wrapped_by_400 = grad2grad($gradians);
.Ve
.SH "RADIAL COORDINATE CONVERSIONS"
.IX Header "RADIAL COORDINATE CONVERSIONS"
\&\fBRadial coordinate systems\fR are the \fBspherical\fR and the \fBcylindrical\fR
systems, explained shortly in more detail.
.PP
You can import radial coordinate conversion functions by using the
\&\f(CW\*(C`:radial\*(C'\fR tag:
.PP
.Vb 1
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&    ($rho, $theta, $z)     = cartesian_to_cylindrical($x, $y, $z);
\&    ($rho, $theta, $phi)   = cartesian_to_spherical($x, $y, $z);
\&    ($x, $y, $z)           = cylindrical_to_cartesian($rho, $theta, $z);
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
\&    ($x, $y, $z)           = spherical_to_cartesian($rho, $theta, $phi);
\&    ($rho_c, $theta, $z)   = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.PP
\&\fBAll angles are in radians\fR.
.SS "\s-1COORDINATE\s0 \s-1SYSTEMS\s0"
.IX Subsection "COORDINATE SYSTEMS"
\&\fBCartesian\fR coordinates are the usual rectangular \fI(x, y, z)\fR\-coordinates.
.PP
Spherical coordinates, \fI(rho, theta, pi)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a sphere surface.  The radius of the sphere is \fBrho\fR, also
known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The angle from the \fIz\fR\-axis is \fBphi\fR, also known as the
\&\fIpolar\fR coordinate.  The North Pole is therefore \fI0, 0, rho\fR, and
the Gulf of Guinea (think of the missing big chunk of Africa) \fI0,
pi/2, rho\fR.  In geographical terms \fIphi\fR is latitude (northward
positive, southward negative) and \fItheta\fR is longitude (eastward
positive, westward negative).
.PP
\&\fB\s-1BEWARE\s0\fR: some texts define \fItheta\fR and \fIphi\fR the other way round,
some texts define the \fIphi\fR to start from the horizontal plane, some
texts use \fIr\fR in place of \fIrho\fR.
.PP
Cylindrical coordinates, \fI(rho, theta, z)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a cylinder surface.  The radius of the cylinder is \fBrho\fR,
also known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The third coordinate is the \fIz\fR, pointing up from the
\&\fBtheta\fR\-plane.
.SS "3\-D \s-1ANGLE\s0 \s-1CONVERSIONS\s0"
.IX Subsection "3-D ANGLE CONVERSIONS"
Conversions to and from spherical and cylindrical coordinates are
available.  Please notice that the conversions are not necessarily
reversible because of the equalities like \fIpi\fR angles being equal to
\&\fI\-pi\fR angles.
.IP "cartesian_to_cylindrical" 4
.IX Item "cartesian_to_cylindrical"
.Vb 1
\&    ($rho, $theta, $z) = cartesian_to_cylindrical($x, $y, $z);
.Ve
.IP "cartesian_to_spherical" 4
.IX Item "cartesian_to_spherical"
.Vb 1
\&    ($rho, $theta, $phi) = cartesian_to_spherical($x, $y, $z);
.Ve
.IP "cylindrical_to_cartesian" 4
.IX Item "cylindrical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = cylindrical_to_cartesian($rho, $theta, $z);
.Ve
.IP "cylindrical_to_spherical" 4
.IX Item "cylindrical_to_spherical"
.Vb 1
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_s\fR is not equal to \f(CW$rho_c\fR.
.IP "spherical_to_cartesian" 4
.IX Item "spherical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = spherical_to_cartesian($rho, $theta, $phi);
.Ve
.IP "spherical_to_cylindrical" 4
.IX Item "spherical_to_cylindrical"
.Vb 1
\&    ($rho_c, $theta, $z) = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_c\fR is not equal to \f(CW$rho_s\fR.
.SH "GREAT CIRCLE DISTANCES AND DIRECTIONS"
.IX Header "GREAT CIRCLE DISTANCES AND DIRECTIONS"
A great circle is section of a circle that contains the circle
diameter: the shortest distance between two (non-antipodal) points on
the spherical surface goes along the great circle connecting those two
points.
.SS "great_circle_distance"
.IX Subsection "great_circle_distance"
You can compute spherical distances, called \fBgreat circle distances\fR,
by importing the \fIgreat_circle_distance()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_distance\*(Aq;
\&
\&  $distance = great_circle_distance($theta0, $phi0, $theta1, $phi1, [, $rho]);
.Ve
.PP
The \fIgreat circle distance\fR is the shortest distance between two
points on a sphere.  The distance is in \f(CW$rho\fR units.  The \f(CW$rho\fR is
optional, it defaults to 1 (the unit sphere), therefore the distance
defaults to radians.
.PP
If you think geographically the \fItheta\fR are longitudes: zero at the
Greenwhich meridian, eastward positive, westward negative \*(-- and the
\&\fIphi\fR are latitudes: zero at the North Pole, northward positive,
southward negative.  \fB\s-1NOTE\s0\fR: this formula thinks in mathematics, not
geographically: the \fIphi\fR zero is at the North Pole, not at the
Equator on the west coast of Africa (Bay of Guinea).  You need to
subtract your geographical coordinates from \fIpi/2\fR (also known as 90
degrees).
.PP
.Vb 2
\&  $distance = great_circle_distance($lon0, pi/2 \- $lat0,
\&                                    $lon1, pi/2 \- $lat1, $rho);
.Ve
.SS "great_circle_direction"
.IX Subsection "great_circle_direction"
The direction you must follow the great circle (also known as \fIbearing\fR)
can be computed by the \fIgreat_circle_direction()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_direction\*(Aq;
\&
\&  $direction = great_circle_direction($theta0, $phi0, $theta1, $phi1);
.Ve
.SS "great_circle_bearing"
.IX Subsection "great_circle_bearing"
Alias 'great_circle_bearing' for 'great_circle_direction' is also available.
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_bearing\*(Aq;
\&
\&  $direction = great_circle_bearing($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The result of great_circle_direction is in radians, zero indicating
straight north, pi or \-pi straight south, pi/2 straight west, and
\&\-pi/2 straight east.
.SS "great_circle_destination"
.IX Subsection "great_circle_destination"
You can inversely compute the destination if you know the
starting point, direction, and distance:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_destination\*(Aq;
\&
\&  # $diro is the original direction,
\&  # for example from great_circle_bearing().
\&  # $distance is the angular distance in radians,
\&  # for example from great_circle_distance().
\&  # $thetad and $phid are the destination coordinates,
\&  # $dird is the final direction at the destination.
\&
\&  ($thetad, $phid, $dird) =
\&    great_circle_destination($theta, $phi, $diro, $distance);
.Ve
.PP
or the midpoint if you know the end points:
.SS "great_circle_midpoint"
.IX Subsection "great_circle_midpoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_midpoint\*(Aq;
\&
\&  ($thetam, $phim) =
\&    great_circle_midpoint($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The \fIgreat_circle_midpoint()\fR is just a special case of
.SS "great_circle_waypoint"
.IX Subsection "great_circle_waypoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_waypoint\*(Aq;
\&
\&  ($thetai, $phii) =
\&    great_circle_waypoint($theta0, $phi0, $theta1, $phi1, $way);
.Ve
.PP
Where the \f(CW$way\fR is a value from zero ($theta0, \f(CW$phi0\fR) to one ($theta1,
\&\f(CW$phi1\fR).  Note that antipodal points (where their distance is \fIpi\fR
radians) do not have waypoints between them (they would have an an
\&\*(L"equator\*(R" between them), and therefore \f(CW\*(C`undef\*(C'\fR is returned for
antipodal points.  If the points are the same and the distance
therefore zero and all waypoints therefore identical, the first point
(either point) is returned.
.PP
The thetas, phis, direction, and distance in the above are all in radians.
.PP
You can import all the great circle formulas by
.PP
.Vb 1
\&  use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.PP
Notice that the resulting directions might be somewhat surprising if
you are looking at a flat worldmap: in such map projections the great
circles quite often do not look like the shortest routes \*(--  but for
example the shortest possible routes from Europe or North America to
Asia do often cross the polar regions.  (The common Mercator projection
does \fBnot\fR show great circles as straight lines: straight lines in the
Mercator projection are lines of constant bearing.)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate the distance between London (51.3N 0.5W) and Tokyo
(35.7N 139.8E) in kilometers:
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_distance deg2rad);
\&
\&    # Notice the 90 \- latitude: phi zero is at the North Pole.
\&    sub NESW { deg2rad($_[0]), deg2rad(90 \- $_[1]) }
\&    my @L = NESW( \-0.5, 51.3);
\&    my @T = NESW(139.8, 35.7);
\&    my $km = great_circle_distance(@L, @T, 6378); # About 9600 km.
.Ve
.PP
The direction you would have to go from London to Tokyo (in radians,
straight north being zero, straight east being pi/2).
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_direction);
\&
\&    my $rad = great_circle_direction(@L, @T); # About 0.547 or 0.174 pi.
.Ve
.PP
The midpoint between London and Tokyo being
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_midpoint);
\&
\&    my @M = great_circle_midpoint(@L, @T);
.Ve
.PP
or about 69 N 89 E, in the frozen wastes of Siberia.
.PP
\&\fB\s-1NOTE\s0\fR: you \fBcannot\fR get from A to B like this:
.PP
.Vb 3
\&   Dist = great_circle_distance(A, B)
\&   Dir  = great_circle_direction(A, B)
\&   C    = great_circle_destination(A, Dist, Dir)
.Ve
.PP
and expect C to be B, because the bearing constantly changes when
going from A to B (except in some special case like the meridians or
the circles of latitudes) and in \fIgreat_circle_destination()\fR one gives
a \fBconstant\fR bearing to follow.
.SS "\s-1CAVEAT\s0 \s-1FOR\s0 \s-1GREAT\s0 \s-1CIRCLE\s0 \s-1FORMULAS\s0"
.IX Subsection "CAVEAT FOR GREAT CIRCLE FORMULAS"
The answers may be off by few percentages because of the irregular
(slightly aspherical) form of the Earth.  The errors are at worst
about 0.55%, but generally below 0.3%.
.SS "Real-valued asin and acos"
.IX Subsection "Real-valued asin and acos"
For small inputs \fIasin()\fR and \fIacos()\fR may return complex numbers even
when real numbers would be enough and correct, this happens because of
floating-point inaccuracies.  You can see these inaccuracies for
example by trying theses:
.PP
.Vb 2
\&  print cos(1e\-6)**2+sin(1e\-6)**2 \- 1,"\en";
\&  printf "%.20f", cos(1e\-6)**2+sin(1e\-6)**2,"\en";
.Ve
.PP
which will print something like this
.PP
.Vb 2
\&  \-1.11022302462516e\-16
\&  0.99999999999999988898
.Ve
.PP
even though the expected results are of course exactly zero and one.
The formulas used to compute \fIasin()\fR and \fIacos()\fR are quite sensitive to
this, and therefore they might accidentally slip into the complex
plane even when they should not.  To counter this there are two
interfaces that are guaranteed to return a real-valued output.
.IP "asin_real" 4
.IX Item "asin_real"
.Vb 1
\&    use Math::Trig qw(asin_real);
\&
\&    $real_angle = asin_real($input_sin);
.Ve
.Sp
Return a real-valued arcus sine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, pi/2
is returned.  For inputs less than minus one, \-pi/2 is returned.
.IP "acos_real" 4
.IX Item "acos_real"
.Vb 1
\&    use Math::Trig qw(acos_real);
\&
\&    $real_angle = acos_real($input_cos);
.Ve
.Sp
Return a real-valued arcus cosine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, zero
is returned.  For inputs less than minus one, pi is returned.
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Trig;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sin\*(C'\fR, \f(CW\*(C`cos\*(C'\fR).  This is
construed as a feature by the Authors, actually... ;\-)
.PP
The code is not optimized for speed, especially because we use
\&\f(CW\*(C`Math::Complex\*(C'\fR and thus go quite near complex numbers while doing
the computations even when the arguments are not. This, however,
cannot be completely avoided if we want things like \f(CWasin(2)\fR to give
an answer instead of giving a fatal runtime error.
.PP
Do not attempt navigation using these formulas.
.PP
Math::Complex
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Math::Trig5.18.3pm                           0100644 0001750 0001750 00000055210 12566207460 023523  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::Trig 3pm"
.TH Math::Trig 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Trig \- trigonometric functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::Trig;
\&
\&    $x = tan(0.9);
\&    $y = acos(3.7);
\&    $z = asin(2.4);
\&
\&    $halfpi = pi/2;
\&
\&    $rad = deg2rad(120);
\&
\&    # Import constants pi2, pip2, pip4 (2*pi, pi/2, pi/4).
\&    use Math::Trig \*(Aq:pi\*(Aq;
\&
\&    # Import the conversions between cartesian/spherical/cylindrical.
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&        # Import the great circle formulas.
\&    use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Math::Trig\*(C'\fR defines many trigonometric functions not defined by the
core Perl which defines only the \f(CW\*(C`sin()\*(C'\fR and \f(CW\*(C`cos()\*(C'\fR.  The constant
\&\fBpi\fR is also defined as are a few convenience functions for angle
conversions, and \fIgreat circle formulas\fR for spherical movement.
.SH "TRIGONOMETRIC FUNCTIONS"
.IX Header "TRIGONOMETRIC FUNCTIONS"
The tangent
.IP "\fBtan\fR" 4
.IX Item "tan"
.PP
The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot
are aliases)
.PP
\&\fBcsc\fR, \fBcosec\fR, \fBsec\fR, \fBsec\fR, \fBcot\fR, \fBcotan\fR
.PP
The arcus (also known as the inverse) functions of the sine, cosine,
and tangent
.PP
\&\fBasin\fR, \fBacos\fR, \fBatan\fR
.PP
The principal value of the arc tangent of y/x
.PP
\&\fBatan2\fR(y, x)
.PP
The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc
and acotan/acot are aliases).  Note that atan2(0, 0) is not well-defined.
.PP
\&\fBacsc\fR, \fBacosec\fR, \fBasec\fR, \fBacot\fR, \fBacotan\fR
.PP
The hyperbolic sine, cosine, and tangent
.PP
\&\fBsinh\fR, \fBcosh\fR, \fBtanh\fR
.PP
The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch
and cotanh/coth are aliases)
.PP
\&\fBcsch\fR, \fBcosech\fR, \fBsech\fR, \fBcoth\fR, \fBcotanh\fR
.PP
The area (also known as the inverse) functions of the hyperbolic
sine, cosine, and tangent
.PP
\&\fBasinh\fR, \fBacosh\fR, \fBatanh\fR
.PP
The area cofunctions of the hyperbolic sine, cosine, and tangent
(acsch/acosech and acoth/acotanh are aliases)
.PP
\&\fBacsch\fR, \fBacosech\fR, \fBasech\fR, \fBacoth\fR, \fBacotanh\fR
.PP
The trigonometric constant \fBpi\fR and some of handy multiples
of it are also defined.
.PP
\&\fBpi, pi2, pi4, pip2, pip4\fR
.SS "\s-1ERRORS DUE TO DIVISION BY ZERO\s0"
.IX Subsection "ERRORS DUE TO DIVISION BY ZERO"
The following functions
.PP
.Vb 10
\&    acoth
\&    acsc
\&    acsch
\&    asec
\&    asech
\&    atanh
\&    cot
\&    coth
\&    csc
\&    csch
\&    sec
\&    sech
\&    tan
\&    tanh
.Ve
.PP
cannot be computed for all arguments because that would mean dividing
by zero or taking logarithm of zero. These situations cause fatal
runtime errors looking like this
.PP
.Vb 3
\&    cot(0): Division by zero.
\&    (Because in the definition of cot(0), the divisor sin(0) is 0)
\&    Died at ...
.Ve
.PP
or
.PP
.Vb 2
\&    atanh(\-1): Logarithm of zero.
\&    Died at...
.Ve
.PP
For the \f(CW\*(C`csc\*(C'\fR, \f(CW\*(C`cot\*(C'\fR, \f(CW\*(C`asec\*(C'\fR, \f(CW\*(C`acsc\*(C'\fR, \f(CW\*(C`acot\*(C'\fR, \f(CW\*(C`csch\*(C'\fR, \f(CW\*(C`coth\*(C'\fR,
\&\f(CW\*(C`asech\*(C'\fR, \f(CW\*(C`acsch\*(C'\fR, the argument cannot be \f(CW0\fR (zero).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW1\fR (one).  For the
\&\f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`acoth\*(C'\fR, the argument cannot be \f(CW\*(C`\-1\*(C'\fR (minus one).  For the
\&\f(CW\*(C`tan\*(C'\fR, \f(CW\*(C`sec\*(C'\fR, \f(CW\*(C`tanh\*(C'\fR, \f(CW\*(C`sech\*(C'\fR, the argument cannot be \fIpi/2 + k *
pi\fR, where \fIk\fR is any integer.
.PP
Note that atan2(0, 0) is not well-defined.
.SS "\s-1SIMPLE \s0(\s-1REAL\s0) \s-1ARGUMENTS, COMPLEX RESULTS\s0"
.IX Subsection "SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS"
Please note that some of the trigonometric functions can break out
from the \fBreal axis\fR into the \fBcomplex plane\fR. For example
\&\f(CWasin(2)\fR has no definition for plain real numbers but it has
definition for complex numbers.
.PP
In Perl terms this means that supplying the usual Perl numbers (also
known as scalars, please see perldata) as input for the
trigonometric functions might produce as output results that no more
are simple real numbers: instead they are complex numbers.
.PP
The \f(CW\*(C`Math::Trig\*(C'\fR handles this by using the \f(CW\*(C`Math::Complex\*(C'\fR package
which knows how to handle complex numbers, please see Math::Complex
for more information. In practice you need not to worry about getting
complex numbers as results because the \f(CW\*(C`Math::Complex\*(C'\fR takes care of
details like for example how to display complex numbers. For example:
.PP
.Vb 1
\&    print asin(2), "\en";
.Ve
.PP
should produce something like this (take or leave few last decimals):
.PP
.Vb 1
\&    1.5707963267949\-1.31695789692482i
.Ve
.PP
That is, a complex number with the real part of approximately \f(CW1.571\fR
and the imaginary part of approximately \f(CW\*(C`\-1.317\*(C'\fR.
.SH "PLANE ANGLE CONVERSIONS"
.IX Header "PLANE ANGLE CONVERSIONS"
(Plane, 2\-dimensional) angles may be converted with the following functions.
.IP "deg2rad" 4
.IX Item "deg2rad"
.Vb 1
\&    $radians  = deg2rad($degrees);
.Ve
.IP "grad2rad" 4
.IX Item "grad2rad"
.Vb 1
\&    $radians  = grad2rad($gradians);
.Ve
.IP "rad2deg" 4
.IX Item "rad2deg"
.Vb 1
\&    $degrees  = rad2deg($radians);
.Ve
.IP "grad2deg" 4
.IX Item "grad2deg"
.Vb 1
\&    $degrees  = grad2deg($gradians);
.Ve
.IP "deg2grad" 4
.IX Item "deg2grad"
.Vb 1
\&    $gradians = deg2grad($degrees);
.Ve
.IP "rad2grad" 4
.IX Item "rad2grad"
.Vb 1
\&    $gradians = rad2grad($radians);
.Ve
.PP
The full circle is 2 \fIpi\fR radians or \fI360\fR degrees or \fI400\fR gradians.
The result is by default wrapped to be inside the [0, {2pi,360,400}[ circle.
If you don't want this, supply a true second argument:
.PP
.Vb 2
\&    $zillions_of_radians  = deg2rad($zillions_of_degrees, 1);
\&    $negative_degrees     = rad2deg($negative_radians, 1);
.Ve
.PP
You can also do the wrapping explicitly by \fIrad2rad()\fR, \fIdeg2deg()\fR, and
\&\fIgrad2grad()\fR.
.IP "rad2rad" 4
.IX Item "rad2rad"
.Vb 1
\&    $radians_wrapped_by_2pi = rad2rad($radians);
.Ve
.IP "deg2deg" 4
.IX Item "deg2deg"
.Vb 1
\&    $degrees_wrapped_by_360 = deg2deg($degrees);
.Ve
.IP "grad2grad" 4
.IX Item "grad2grad"
.Vb 1
\&    $gradians_wrapped_by_400 = grad2grad($gradians);
.Ve
.SH "RADIAL COORDINATE CONVERSIONS"
.IX Header "RADIAL COORDINATE CONVERSIONS"
\&\fBRadial coordinate systems\fR are the \fBspherical\fR and the \fBcylindrical\fR
systems, explained shortly in more detail.
.PP
You can import radial coordinate conversion functions by using the
\&\f(CW\*(C`:radial\*(C'\fR tag:
.PP
.Vb 1
\&    use Math::Trig \*(Aq:radial\*(Aq;
\&
\&    ($rho, $theta, $z)     = cartesian_to_cylindrical($x, $y, $z);
\&    ($rho, $theta, $phi)   = cartesian_to_spherical($x, $y, $z);
\&    ($x, $y, $z)           = cylindrical_to_cartesian($rho, $theta, $z);
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
\&    ($x, $y, $z)           = spherical_to_cartesian($rho, $theta, $phi);
\&    ($rho_c, $theta, $z)   = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.PP
\&\fBAll angles are in radians\fR.
.SS "\s-1COORDINATE SYSTEMS\s0"
.IX Subsection "COORDINATE SYSTEMS"
\&\fBCartesian\fR coordinates are the usual rectangular \fI(x, y, z)\fR\-coordinates.
.PP
Spherical coordinates, \fI(rho, theta, pi)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a sphere surface.  The radius of the sphere is \fBrho\fR, also
known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The angle from the \fIz\fR\-axis is \fBphi\fR, also known as the
\&\fIpolar\fR coordinate.  The North Pole is therefore \fI0, 0, rho\fR, and
the Gulf of Guinea (think of the missing big chunk of Africa) \fI0,
pi/2, rho\fR.  In geographical terms \fIphi\fR is latitude (northward
positive, southward negative) and \fItheta\fR is longitude (eastward
positive, westward negative).
.PP
\&\fB\s-1BEWARE\s0\fR: some texts define \fItheta\fR and \fIphi\fR the other way round,
some texts define the \fIphi\fR to start from the horizontal plane, some
texts use \fIr\fR in place of \fIrho\fR.
.PP
Cylindrical coordinates, \fI(rho, theta, z)\fR, are three-dimensional
coordinates which define a point in three-dimensional space.  They are
based on a cylinder surface.  The radius of the cylinder is \fBrho\fR,
also known as the \fIradial\fR coordinate.  The angle in the \fIxy\fR\-plane
(around the \fIz\fR\-axis) is \fBtheta\fR, also known as the \fIazimuthal\fR
coordinate.  The third coordinate is the \fIz\fR, pointing up from the
\&\fBtheta\fR\-plane.
.SS "3\-D \s-1ANGLE CONVERSIONS\s0"
.IX Subsection "3-D ANGLE CONVERSIONS"
Conversions to and from spherical and cylindrical coordinates are
available.  Please notice that the conversions are not necessarily
reversible because of the equalities like \fIpi\fR angles being equal to
\&\fI\-pi\fR angles.
.IP "cartesian_to_cylindrical" 4
.IX Item "cartesian_to_cylindrical"
.Vb 1
\&    ($rho, $theta, $z) = cartesian_to_cylindrical($x, $y, $z);
.Ve
.IP "cartesian_to_spherical" 4
.IX Item "cartesian_to_spherical"
.Vb 1
\&    ($rho, $theta, $phi) = cartesian_to_spherical($x, $y, $z);
.Ve
.IP "cylindrical_to_cartesian" 4
.IX Item "cylindrical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = cylindrical_to_cartesian($rho, $theta, $z);
.Ve
.IP "cylindrical_to_spherical" 4
.IX Item "cylindrical_to_spherical"
.Vb 1
\&    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_s\fR is not equal to \f(CW$rho_c\fR.
.IP "spherical_to_cartesian" 4
.IX Item "spherical_to_cartesian"
.Vb 1
\&    ($x, $y, $z) = spherical_to_cartesian($rho, $theta, $phi);
.Ve
.IP "spherical_to_cylindrical" 4
.IX Item "spherical_to_cylindrical"
.Vb 1
\&    ($rho_c, $theta, $z) = spherical_to_cylindrical($rho_s, $theta, $phi);
.Ve
.Sp
Notice that when \f(CW$z\fR is not 0 \f(CW$rho_c\fR is not equal to \f(CW$rho_s\fR.
.SH "GREAT CIRCLE DISTANCES AND DIRECTIONS"
.IX Header "GREAT CIRCLE DISTANCES AND DIRECTIONS"
A great circle is section of a circle that contains the circle
diameter: the shortest distance between two (non-antipodal) points on
the spherical surface goes along the great circle connecting those two
points.
.SS "great_circle_distance"
.IX Subsection "great_circle_distance"
You can compute spherical distances, called \fBgreat circle distances\fR,
by importing the \fIgreat_circle_distance()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_distance\*(Aq;
\&
\&  $distance = great_circle_distance($theta0, $phi0, $theta1, $phi1, [, $rho]);
.Ve
.PP
The \fIgreat circle distance\fR is the shortest distance between two
points on a sphere.  The distance is in \f(CW$rho\fR units.  The \f(CW$rho\fR is
optional, it defaults to 1 (the unit sphere), therefore the distance
defaults to radians.
.PP
If you think geographically the \fItheta\fR are longitudes: zero at the
Greenwhich meridian, eastward positive, westward negative \*(-- and the
\&\fIphi\fR are latitudes: zero at the North Pole, northward positive,
southward negative.  \fB\s-1NOTE\s0\fR: this formula thinks in mathematics, not
geographically: the \fIphi\fR zero is at the North Pole, not at the
Equator on the west coast of Africa (Bay of Guinea).  You need to
subtract your geographical coordinates from \fIpi/2\fR (also known as 90
degrees).
.PP
.Vb 2
\&  $distance = great_circle_distance($lon0, pi/2 \- $lat0,
\&                                    $lon1, pi/2 \- $lat1, $rho);
.Ve
.SS "great_circle_direction"
.IX Subsection "great_circle_direction"
The direction you must follow the great circle (also known as \fIbearing\fR)
can be computed by the \fIgreat_circle_direction()\fR function:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_direction\*(Aq;
\&
\&  $direction = great_circle_direction($theta0, $phi0, $theta1, $phi1);
.Ve
.SS "great_circle_bearing"
.IX Subsection "great_circle_bearing"
Alias 'great_circle_bearing' for 'great_circle_direction' is also available.
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_bearing\*(Aq;
\&
\&  $direction = great_circle_bearing($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The result of great_circle_direction is in radians, zero indicating
straight north, pi or \-pi straight south, pi/2 straight west, and
\&\-pi/2 straight east.
.SS "great_circle_destination"
.IX Subsection "great_circle_destination"
You can inversely compute the destination if you know the
starting point, direction, and distance:
.PP
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_destination\*(Aq;
\&
\&  # $diro is the original direction,
\&  # for example from great_circle_bearing().
\&  # $distance is the angular distance in radians,
\&  # for example from great_circle_distance().
\&  # $thetad and $phid are the destination coordinates,
\&  # $dird is the final direction at the destination.
\&
\&  ($thetad, $phid, $dird) =
\&    great_circle_destination($theta, $phi, $diro, $distance);
.Ve
.PP
or the midpoint if you know the end points:
.SS "great_circle_midpoint"
.IX Subsection "great_circle_midpoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_midpoint\*(Aq;
\&
\&  ($thetam, $phim) =
\&    great_circle_midpoint($theta0, $phi0, $theta1, $phi1);
.Ve
.PP
The \fIgreat_circle_midpoint()\fR is just a special case of
.SS "great_circle_waypoint"
.IX Subsection "great_circle_waypoint"
.Vb 1
\&  use Math::Trig \*(Aqgreat_circle_waypoint\*(Aq;
\&
\&  ($thetai, $phii) =
\&    great_circle_waypoint($theta0, $phi0, $theta1, $phi1, $way);
.Ve
.PP
Where the \f(CW$way\fR is a value from zero ($theta0, \f(CW$phi0\fR) to one ($theta1,
\&\f(CW$phi1\fR).  Note that antipodal points (where their distance is \fIpi\fR
radians) do not have waypoints between them (they would have an an
\&\*(L"equator\*(R" between them), and therefore \f(CW\*(C`undef\*(C'\fR is returned for
antipodal points.  If the points are the same and the distance
therefore zero and all waypoints therefore identical, the first point
(either point) is returned.
.PP
The thetas, phis, direction, and distance in the above are all in radians.
.PP
You can import all the great circle formulas by
.PP
.Vb 1
\&  use Math::Trig \*(Aq:great_circle\*(Aq;
.Ve
.PP
Notice that the resulting directions might be somewhat surprising if
you are looking at a flat worldmap: in such map projections the great
circles quite often do not look like the shortest routes \*(--  but for
example the shortest possible routes from Europe or North America to
Asia do often cross the polar regions.  (The common Mercator projection
does \fBnot\fR show great circles as straight lines: straight lines in the
Mercator projection are lines of constant bearing.)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To calculate the distance between London (51.3N 0.5W) and Tokyo
(35.7N 139.8E) in kilometers:
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_distance deg2rad);
\&
\&    # Notice the 90 \- latitude: phi zero is at the North Pole.
\&    sub NESW { deg2rad($_[0]), deg2rad(90 \- $_[1]) }
\&    my @L = NESW( \-0.5, 51.3);
\&    my @T = NESW(139.8, 35.7);
\&    my $km = great_circle_distance(@L, @T, 6378); # About 9600 km.
.Ve
.PP
The direction you would have to go from London to Tokyo (in radians,
straight north being zero, straight east being pi/2).
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_direction);
\&
\&    my $rad = great_circle_direction(@L, @T); # About 0.547 or 0.174 pi.
.Ve
.PP
The midpoint between London and Tokyo being
.PP
.Vb 1
\&    use Math::Trig qw(great_circle_midpoint);
\&
\&    my @M = great_circle_midpoint(@L, @T);
.Ve
.PP
or about 69 N 89 E, in the frozen wastes of Siberia.
.PP
\&\fB\s-1NOTE\s0\fR: you \fBcannot\fR get from A to B like this:
.PP
.Vb 3
\&   Dist = great_circle_distance(A, B)
\&   Dir  = great_circle_direction(A, B)
\&   C    = great_circle_destination(A, Dist, Dir)
.Ve
.PP
and expect C to be B, because the bearing constantly changes when
going from A to B (except in some special case like the meridians or
the circles of latitudes) and in \fIgreat_circle_destination()\fR one gives
a \fBconstant\fR bearing to follow.
.SS "\s-1CAVEAT FOR GREAT CIRCLE FORMULAS\s0"
.IX Subsection "CAVEAT FOR GREAT CIRCLE FORMULAS"
The answers may be off by few percentages because of the irregular
(slightly aspherical) form of the Earth.  The errors are at worst
about 0.55%, but generally below 0.3%.
.SS "Real-valued asin and acos"
.IX Subsection "Real-valued asin and acos"
For small inputs \fIasin()\fR and \fIacos()\fR may return complex numbers even
when real numbers would be enough and correct, this happens because of
floating-point inaccuracies.  You can see these inaccuracies for
example by trying theses:
.PP
.Vb 2
\&  print cos(1e\-6)**2+sin(1e\-6)**2 \- 1,"\en";
\&  printf "%.20f", cos(1e\-6)**2+sin(1e\-6)**2,"\en";
.Ve
.PP
which will print something like this
.PP
.Vb 2
\&  \-1.11022302462516e\-16
\&  0.99999999999999988898
.Ve
.PP
even though the expected results are of course exactly zero and one.
The formulas used to compute \fIasin()\fR and \fIacos()\fR are quite sensitive to
this, and therefore they might accidentally slip into the complex
plane even when they should not.  To counter this there are two
interfaces that are guaranteed to return a real-valued output.
.IP "asin_real" 4
.IX Item "asin_real"
.Vb 1
\&    use Math::Trig qw(asin_real);
\&
\&    $real_angle = asin_real($input_sin);
.Ve
.Sp
Return a real-valued arcus sine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, pi/2
is returned.  For inputs less than minus one, \-pi/2 is returned.
.IP "acos_real" 4
.IX Item "acos_real"
.Vb 1
\&    use Math::Trig qw(acos_real);
\&
\&    $real_angle = acos_real($input_cos);
.Ve
.Sp
Return a real-valued arcus cosine if the input is between [\-1, 1],
\&\fBinclusive\fR the endpoints.  For inputs greater than one, zero
is returned.  For inputs less than minus one, pi is returned.
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CW\*(C`use Math::Trig;\*(C'\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CW\*(C`sin\*(C'\fR, \f(CW\*(C`cos\*(C'\fR).  This is
construed as a feature by the Authors, actually... ;\-)
.PP
The code is not optimized for speed, especially because we use
\&\f(CW\*(C`Math::Complex\*(C'\fR and thus go quite near complex numbers while doing
the computations even when the arguments are not. This, however,
cannot be completely avoided if we want things like \f(CWasin(2)\fR to give
an answer instead of giving a fatal runtime error.
.PP
Do not attempt navigation using these formulas.
.PP
Math::Complex
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <\fIjhi!at!iki.fi\fR>,
Raphael Manfredi <\fIRaphael_Manfredi!at!pobox.com\fR>,
Zefram <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize.3pm                                  0100644 0001750 0001750 00000105164 12566207460 022715  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize 3pm"
.TH Memoize 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize \- Make functions faster by trading space for time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        # This is the documentation for Memoize 1.03
\&        use Memoize;
\&        memoize(\*(Aqslow_function\*(Aq);
\&        slow_function(arguments);    # Is faster than it was before
.Ve
.PP
This is normally all you need to know.  However, many options are available:
.PP
.Vb 1
\&        memoize(function, options...);
.Ve
.PP
Options include:
.PP
.Vb 2
\&        NORMALIZER => function
\&        INSTALL => new_name
\&
\&        SCALAR_CACHE => \*(AqMEMORY\*(Aq
\&        SCALAR_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        SCALAR_CACHE => \*(AqFAULT\*(Aq
\&        SCALAR_CACHE => \*(AqMERGE\*(Aq
\&
\&        LIST_CACHE => \*(AqMEMORY\*(Aq
\&        LIST_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        LIST_CACHE => \*(AqFAULT\*(Aq
\&        LIST_CACHE => \*(AqMERGE\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
`Memoizing' a function makes it faster by trading space for time.  It
does this by caching the return values of the function in a table.
If you call the function again with the same arguments, \f(CW\*(C`memoize\*(C'\fR
jumps in and gives you the value out of the table, instead of letting
the function compute the value all over again.
.PP
Here is an extreme example.  Consider the Fibonacci sequence, defined
by the following function:
.PP
.Vb 6
\&        # Compute Fibonacci numbers
\&        sub fib {
\&          my $n = shift;
\&          return $n if $n < 2;
\&          fib($n\-1) + fib($n\-2);
\&        }
.Ve
.PP
This function is very slow.  Why?  To compute fib(14), it first wants
to compute fib(13) and fib(12), and add the results.  But to compute
fib(13), it first has to compute fib(12) and fib(11), and then it
comes back and computes fib(12) all over again even though the answer
is the same.  And both of the times that it wants to compute fib(12),
it has to compute fib(11) from scratch, and then it has to do it
again each time it wants to compute fib(13).  This function does so
much recomputing of old results that it takes a really long time to
run\-\-\-fib(14) makes 1,200 extra recursive calls to itself, to compute
and recompute things that it already computed.
.PP
This function is a good candidate for memoization.  If you memoize the
`fib' function above, it will compute fib(14) exactly once, the first
time it needs to, and then save the result in a table.  Then if you
ask for fib(14) again, it gives you the result out of the table.
While computing fib(14), instead of computing fib(12) twice, it does
it once; the second time it needs the value it gets it from the table.
It doesn't compute fib(11) four times; it computes it once, getting it
from the table the next three times.  Instead of making 1,200
recursive calls to `fib', it makes 15.  This makes the function about
150 times faster.
.PP
You could do the memoization yourself, by rewriting the function, like
this:
.PP
.Vb 9
\&        # Compute Fibonacci numbers, memoized version
\&        { my @fib;
\&          sub fib {
\&            my $n = shift;
\&            return $fib[$n] if defined $fib[$n];
\&            return $fib[$n] = $n if $n < 2;
\&            $fib[$n] = fib($n\-1) + fib($n\-2);
\&          }
\&        }
.Ve
.PP
Or you could use this module, like this:
.PP
.Vb 2
\&        use Memoize;
\&        memoize(\*(Aqfib\*(Aq);
\&
\&        # Rest of the fib function just like the original version.
.Ve
.PP
This makes it easy to turn memoizing on and off.
.PP
Here's an even simpler example: I wrote a simple ray tracer; the
program would look in a certain direction, figure out what it was
looking at, and then convert the `color' value (typically a string
like `red') of that object to a red, green, and blue pixel value, like
this:
.PP
.Vb 6
\&    for ($direction = 0; $direction < 300; $direction++) {
\&      # Figure out which object is in direction $direction
\&      $color = $object\->{color};
\&      ($r, $g, $b) = @{&ColorToRGB($color)};
\&      ...
\&    }
.Ve
.PP
Since there are relatively few objects in a picture, there are only a
few colors, which get looked up over and over again.  Memoizing
\&\f(CW\*(C`ColorToRGB\*(C'\fR sped up the program by several percent.
.SH "DETAILS"
.IX Header "DETAILS"
This module exports exactly one function, \f(CW\*(C`memoize\*(C'\fR.  The rest of the
functions in this package are None of Your Business.
.PP
You should say
.PP
.Vb 1
\&        memoize(function)
.Ve
.PP
where \f(CW\*(C`function\*(C'\fR is the name of the function you want to memoize, or
a reference to it.  \f(CW\*(C`memoize\*(C'\fR returns a reference to the new,
memoized version of the function, or \f(CW\*(C`undef\*(C'\fR on a non-fatal error.
At present, there are no non-fatal errors, but there might be some in
the future.
.PP
If \f(CW\*(C`function\*(C'\fR was the name of a function, then \f(CW\*(C`memoize\*(C'\fR hides the
old version and installs the new memoized version under the old name,
so that \f(CW\*(C`&function(...)\*(C'\fR actually invokes the memoized version.
.SH "OPTIONS"
.IX Header "OPTIONS"
There are some optional options you can pass to \f(CW\*(C`memoize\*(C'\fR to change
the way it behaves a little.  To supply options, invoke \f(CW\*(C`memoize\*(C'\fR
like this:
.PP
.Vb 5
\&        memoize(function, NORMALIZER => function,
\&                          INSTALL => newname,
\&                          SCALAR_CACHE => option,
\&                          LIST_CACHE => option
\&                         );
.Ve
.PP
Each of these options is optional; you can include some, all, or none
of them.
.SS "\s-1INSTALL\s0"
.IX Subsection "INSTALL"
If you supply a function name with \f(CW\*(C`INSTALL\*(C'\fR, memoize will install
the new, memoized version of the function under the name you give.
For example,
.PP
.Vb 1
\&        memoize(\*(Aqfib\*(Aq, INSTALL => \*(Aqfastfib\*(Aq)
.Ve
.PP
installs the memoized version of \f(CW\*(C`fib\*(C'\fR as \f(CW\*(C`fastfib\*(C'\fR; without the
\&\f(CW\*(C`INSTALL\*(C'\fR option it would have replaced the old \f(CW\*(C`fib\*(C'\fR with the
memoized version.
.PP
To prevent \f(CW\*(C`memoize\*(C'\fR from installing the memoized version anywhere, use
\&\f(CW\*(C`INSTALL => undef\*(C'\fR.
.SS "\s-1NORMALIZER\s0"
.IX Subsection "NORMALIZER"
Suppose your function looks like this:
.PP
.Vb 6
\&        # Typical call: f(\*(Aqaha!\*(Aq, A => 11, B => 12);
\&        sub f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;  # B defaults to 2
\&          $hash{C} ||= 7;  # C defaults to 7
\&
\&          # Do something with $a, %hash
\&        }
.Ve
.PP
Now, the following calls to your function are all completely equivalent:
.PP
.Vb 6
\&        f(OUCH);
\&        f(OUCH, B => 2);
\&        f(OUCH, C => 7);
\&        f(OUCH, B => 2, C => 7);
\&        f(OUCH, C => 7, B => 2);
\&        (etc.)
.Ve
.PP
However, unless you tell \f(CW\*(C`Memoize\*(C'\fR that these calls are equivalent,
it will not know that, and it will compute the values for these
invocations of your function separately, and store them separately.
.PP
To prevent this, supply a \f(CW\*(C`NORMALIZER\*(C'\fR function that turns the
program arguments into a string in a way that equivalent arguments
turn into the same string.  A \f(CW\*(C`NORMALIZER\*(C'\fR function for \f(CW\*(C`f\*(C'\fR above
might look like this:
.PP
.Vb 5
\&        sub normalize_f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;
\&          $hash{C} ||= 7;
\&
\&          join(\*(Aq,\*(Aq, $a, map ($_ => $hash{$_}) sort keys %hash);
\&        }
.Ve
.PP
Each of the argument lists above comes out of the \f(CW\*(C`normalize_f\*(C'\fR
function looking exactly the same, like this:
.PP
.Vb 1
\&        OUCH,B,2,C,7
.Ve
.PP
You would tell \f(CW\*(C`Memoize\*(C'\fR to use this normalizer this way:
.PP
.Vb 1
\&        memoize(\*(Aqf\*(Aq, NORMALIZER => \*(Aqnormalize_f\*(Aq);
.Ve
.PP
\&\f(CW\*(C`memoize\*(C'\fR knows that if the normalized version of the arguments is
the same for two argument lists, then it can safely look up the value
that it computed for one argument list and return it as the result of
calling the function with the other argument list, even if the
argument lists look different.
.PP
The default normalizer just concatenates the arguments with character
28 in between.  (In \s-1ASCII,\s0 this is called \s-1FS\s0 or control\-\e.)  This
always works correctly for functions with only one string argument,
and also when the arguments never contain character 28.  However, it
can confuse certain argument lists:
.PP
.Vb 3
\&        normalizer("a\e034", "b")
\&        normalizer("a", "\e034b")
\&        normalizer("a\e034\e034b")
.Ve
.PP
for example.
.PP
Since hash keys are strings, the default normalizer will not
distinguish between \f(CW\*(C`undef\*(C'\fR and the empty string.  It also won't work
when the function's arguments are references.  For example, consider a
function \f(CW\*(C`g\*(C'\fR which gets two arguments: A number, and a reference to
an array of numbers:
.PP
.Vb 1
\&        g(13, [1,2,3,4,5,6,7]);
.Ve
.PP
The default normalizer will turn this into something like
\&\f(CW"13\e034ARRAY(0x436c1f)"\fR.  That would be all right, except that a
subsequent array of numbers might be stored at a different location
even though it contains the same data.  If this happens, \f(CW\*(C`Memoize\*(C'\fR
will think that the arguments are different, even though they are
equivalent.  In this case, a normalizer like this is appropriate:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, $_[0], @{$_[1]} }
.Ve
.PP
For the example above, this produces the key \*(L"13 1 2 3 4 5 6 7\*(R".
.PP
Another use for normalizers is when the function depends on data other
than those in its arguments.  Suppose you have a function which
returns a value which depends on the current hour of the day:
.PP
.Vb 10
\&        sub on_duty {
\&          my ($problem_type) = @_;
\&          my $hour = (localtime)[2];
\&          open my $fh, "$DIR/$problem_type" or die...;
\&          my $line;
\&          while ($hour\-\- > 0)
\&            $line = <$fh>;
\&          } 
\&          return $line;
\&        }
.Ve
.PP
At 10:23, this function generates the 10th line of a data file; at
3:45 \s-1PM\s0 it generates the 15th line instead.  By default, \f(CW\*(C`Memoize\*(C'\fR
will only see the \f(CW$problem_type\fR argument.  To fix this, include the
current hour in the normalizer:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, (localtime)[2], @_ }
.Ve
.PP
The calling context of the function (scalar or list context) is
propagated to the normalizer.  This means that if the memoized
function will treat its arguments differently in list context than it
would in scalar context, you can have the normalizer function select
its behavior based on the results of \f(CW\*(C`wantarray\*(C'\fR.  Even if called in
a list context, a normalizer should still return a single string.
.ie n .SS """SCALAR_CACHE"", ""LIST_CACHE"""
.el .SS "\f(CWSCALAR_CACHE\fP, \f(CWLIST_CACHE\fP"
.IX Subsection "SCALAR_CACHE, LIST_CACHE"
Normally, \f(CW\*(C`Memoize\*(C'\fR caches your function's return values into an
ordinary Perl hash variable.  However, you might like to have the
values cached on the disk, so that they persist from one run of your
program to the next, or you might like to associate some other
interesting semantics with the cached values.
.PP
There's a slight complication under the hood of \f(CW\*(C`Memoize\*(C'\fR: There are
actually \fItwo\fR caches, one for scalar values and one for list values.
When your function is called in scalar context, its return value is
cached in one hash, and when your function is called in list context,
its value is cached in the other hash.  You can control the caching
behavior of both contexts independently with these options.
.PP
The argument to \f(CW\*(C`LIST_CACHE\*(C'\fR or \f(CW\*(C`SCALAR_CACHE\*(C'\fR must either be one of
the following four strings:
.PP
.Vb 4
\&        MEMORY
\&        FAULT
\&        MERGE
\&        HASH
.Ve
.PP
or else it must be a reference to an array whose first element is one of
these four strings, such as \f(CW\*(C`[HASH, arguments...]\*(C'\fR.
.ie n .IP """MEMORY""" 4
.el .IP "\f(CWMEMORY\fR" 4
.IX Item "MEMORY"
\&\f(CW\*(C`MEMORY\*(C'\fR means that return values from the function will be cached in
an ordinary Perl hash variable.  The hash variable will not persist
after the program exits.  This is the default.
.ie n .IP """HASH""" 4
.el .IP "\f(CWHASH\fR" 4
.IX Item "HASH"
\&\f(CW\*(C`HASH\*(C'\fR allows you to specify that a particular hash that you supply
will be used as the cache.  You can tie this hash beforehand to give
it any behavior you want.
.Sp
A tied hash can have any semantics at all.  It is typically tied to an
on-disk database, so that cached values are stored in the database and
retrieved from it again when needed, and the disk file typically
persists after your program has exited.  See \f(CW\*(C`perltie\*(C'\fR for more
complete details about \f(CW\*(C`tie\*(C'\fR.
.Sp
A typical example is:
.Sp
.Vb 3
\&        use DB_File;
\&        tie my %cache => \*(AqDB_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.Sp
This has the effect of storing the cache in a \f(CW\*(C`DB_File\*(C'\fR database
whose name is in \f(CW$filename\fR.  The cache will persist after the
program has exited.  Next time the program runs, it will find the
cache already populated from the previous run of the program.  Or you
can forcibly populate the cache by constructing a batch program that
runs in the background and populates the cache file.  Then when you
come to run your real program the memoized function will be fast
because all its results have been precomputed.
.Sp
Another reason to use \f(CW\*(C`HASH\*(C'\fR is to provide your own hash variable.
You can then inspect or modify the contents of the hash to gain finer
control over the cache management.
.ie n .IP """TIE""" 4
.el .IP "\f(CWTIE\fR" 4
.IX Item "TIE"
This option is no longer supported.  It is still documented only to
aid in the debugging of old programs that use it.  Old programs should
be converted to use the \f(CW\*(C`HASH\*(C'\fR option instead.
.Sp
.Vb 1
\&        memoize ... [\*(AqTIE\*(Aq, PACKAGE, ARGS...]
.Ve
.Sp
is merely a shortcut for
.Sp
.Vb 4
\&        require PACKAGE;
\&        { tie my %cache, PACKAGE, ARGS...;
\&          memoize ... [HASH => \e%cache];
\&        }
.Ve
.ie n .IP """FAULT""" 4
.el .IP "\f(CWFAULT\fR" 4
.IX Item "FAULT"
\&\f(CW\*(C`FAULT\*(C'\fR means that you never expect to call the function in scalar
(or list) context, and that if \f(CW\*(C`Memoize\*(C'\fR detects such a call, it
should abort the program.  The error message is one of
.Sp
.Vb 2
\&        \`foo\*(Aq function called in forbidden list context at line ...
\&        \`foo\*(Aq function called in forbidden scalar context at line ...
.Ve
.ie n .IP """MERGE""" 4
.el .IP "\f(CWMERGE\fR" 4
.IX Item "MERGE"
\&\f(CW\*(C`MERGE\*(C'\fR normally means that the memoized function does not
distinguish between list and sclar context, and that return values in
both contexts should be stored together.  Both \f(CW\*(C`LIST_CACHE =>
MERGE\*(C'\fR and \f(CW\*(C`SCALAR_CACHE => MERGE\*(C'\fR mean the same thing.
.Sp
Consider this function:
.Sp
.Vb 4
\&        sub complicated {
\&          # ... time\-consuming calculation of $result
\&          return $result;
\&        }
.Ve
.Sp
The \f(CW\*(C`complicated\*(C'\fR function will return the same numeric \f(CW$result\fR
regardless of whether it is called in list or in scalar context.
.Sp
Normally, the following code will result in two calls to \f(CW\*(C`complicated\*(C'\fR, even
if \f(CW\*(C`complicated\*(C'\fR is memoized:
.Sp
.Vb 3
\&    $x = complicated(142);
\&    ($y) = complicated(142);
\&    $z = complicated(142);
.Ve
.Sp
The first call will cache the result, say 37, in the scalar cache; the
second will cach the list \f(CW\*(C`(37)\*(C'\fR in the list cache.  The third call
doesn't call the real \f(CW\*(C`complicated\*(C'\fR function; it gets the value 37
from the scalar cache.
.Sp
Obviously, the second call to \f(CW\*(C`complicated\*(C'\fR is a waste of time, and
storing its return value is a waste of space.  Specifying \f(CW\*(C`LIST_CACHE
=> MERGE\*(C'\fR will make \f(CW\*(C`memoize\*(C'\fR use the same cache for scalar and
list context return values, so that the second call uses the scalar
cache that was populated by the first call.  \f(CW\*(C`complicated\*(C'\fR ends up
being called only once, and both subsequent calls return \f(CW3\fR from the
cache, regardless of the calling context.
.PP
\fIList values in scalar context\fR
.IX Subsection "List values in scalar context"
.PP
Consider this function:
.PP
.Vb 1
\&    sub iota { return reverse (1..$_[0]) }
.Ve
.PP
This function normally returns a list.  Suppose you memoize it and
merge the caches:
.PP
.Vb 1
\&    memoize \*(Aqiota\*(Aq, SCALAR_CACHE => \*(AqMERGE\*(Aq;
\&
\&    @i7 = iota(7);
\&    $i7 = iota(7);
.Ve
.PP
Here the first call caches the list (1,2,3,4,5,6,7).  The second call
does not really make sense. \f(CW\*(C`Memoize\*(C'\fR cannot guess what behavior
\&\f(CW\*(C`iota\*(C'\fR should have in scalar context without actually calling it in
scalar context.  Normally \f(CW\*(C`Memoize\*(C'\fR \fIwould\fR call \f(CW\*(C`iota\*(C'\fR in scalar
context and cache the result, but the \f(CW\*(C`SCALAR_CACHE => \*(AqMERGE\*(Aq\*(C'\fR
option says not to do that, but to use the cache list-context value
instead. But it cannot return a list of seven elements in a scalar
context. In this case \f(CW$i7\fR will receive the \fBfirst element\fR of the
cached list value, namely 7.
.PP
\fIMerged disk caches\fR
.IX Subsection "Merged disk caches"
.PP
Another use for \f(CW\*(C`MERGE\*(C'\fR is when you want both kinds of return values
stored in the same disk file; this saves you from having to deal with
two disk files instead of one.  You can use a normalizer function to
keep the two sets of return values separate.  For example:
.PP
.Vb 1
\&        tie my %cache => \*(AqMLDBM\*(Aq, \*(AqDB_File\*(Aq, $filename, ...;
\&
\&        memoize \*(Aqmyfunc\*(Aq,
\&          NORMALIZER => \*(Aqn\*(Aq,
\&          SCALAR_CACHE => [HASH => \e%cache],
\&          LIST_CACHE => \*(AqMERGE\*(Aq,
\&        ;
\&
\&        sub n {
\&          my $context = wantarray() ? \*(AqL\*(Aq : \*(AqS\*(Aq;
\&          # ... now compute the hash key from the arguments ...
\&          $hashkey = "$context:$hashkey";
\&        }
.Ve
.PP
This normalizer function will store scalar context return values in
the disk file under keys that begin with \f(CW\*(C`S:\*(C'\fR, and list context
return values under keys that begin with \f(CW\*(C`L:\*(C'\fR.
.SH "OTHER FACILITIES"
.IX Header "OTHER FACILITIES"
.ie n .SS """unmemoize"""
.el .SS "\f(CWunmemoize\fP"
.IX Subsection "unmemoize"
There's an \f(CW\*(C`unmemoize\*(C'\fR function that you can import if you want to.
Why would you want to?  Here's an example: Suppose you have your cache
tied to a \s-1DBM\s0 file, and you want to make sure that the cache is
written out to disk if someone interrupts the program.  If the program
exits normally, this will happen anyway, but if someone types
control-C or something then the program will terminate immediately
without synchronizing the database.  So what you can do instead is
.PP
.Vb 1
\&    $SIG{INT} = sub { unmemoize \*(Aqfunction\*(Aq };
.Ve
.PP
\&\f(CW\*(C`unmemoize\*(C'\fR accepts a reference to, or the name of a previously
memoized function, and undoes whatever it did to provide the memoized
version in the first place, including making the name refer to the
unmemoized version if appropriate.  It returns a reference to the
unmemoized version of the function.
.PP
If you ask it to unmemoize a function that was never memoized, it
croaks.
.ie n .SS """flush_cache"""
.el .SS "\f(CWflush_cache\fP"
.IX Subsection "flush_cache"
\&\f(CW\*(C`flush_cache(function)\*(C'\fR will flush out the caches, discarding \fIall\fR
the cached data.  The argument may be a function name or a reference
to a function.  For finer control over when data is discarded or
expired, see the documentation for \f(CW\*(C`Memoize::Expire\*(C'\fR, included in
this package.
.PP
Note that if the cache is a tied hash, \f(CW\*(C`flush_cache\*(C'\fR will attempt to
invoke the \f(CW\*(C`CLEAR\*(C'\fR method on the hash.  If there is no \f(CW\*(C`CLEAR\*(C'\fR
method, this will cause a run-time error.
.PP
An alternative approach to cache flushing is to use the \f(CW\*(C`HASH\*(C'\fR option
(see above) to request that \f(CW\*(C`Memoize\*(C'\fR use a particular hash variable
as its cache.  Then you can examine or modify the hash at any time in
any way you desire.  You may flush the cache by using \f(CW\*(C`%hash = ()\*(C'\fR.
.SH "CAVEATS"
.IX Header "CAVEATS"
Memoization is not a cure-all:
.IP "\(bu" 4
Do not memoize a function whose behavior depends on program
state other than its own arguments, such as global variables, the time
of day, or file input.  These functions will not produce correct
results when memoized.  For a particularly easy example:
.Sp
.Vb 3
\&        sub f {
\&          time;
\&        }
.Ve
.Sp
This function takes no arguments, and as far as \f(CW\*(C`Memoize\*(C'\fR is
concerned, it always returns the same result.  \f(CW\*(C`Memoize\*(C'\fR is wrong, of
course, and the memoized version of this function will call \f(CW\*(C`time\*(C'\fR once
to get the current time, and it will return that same time
every time you call it after that.
.IP "\(bu" 4
Do not memoize a function with side effects.
.Sp
.Vb 5
\&        sub f {
\&          my ($a, $b) = @_;
\&          my $s = $a + $b;
\&          print "$a + $b = $s.\en";
\&        }
.Ve
.Sp
This function accepts two arguments, adds them, and prints their sum.
Its return value is the numuber of characters it printed, but you
probably didn't care about that.  But \f(CW\*(C`Memoize\*(C'\fR doesn't understand
that.  If you memoize this function, you will get the result you
expect the first time you ask it to print the sum of 2 and 3, but
subsequent calls will return 1 (the return value of
\&\f(CW\*(C`print\*(C'\fR) without actually printing anything.
.IP "\(bu" 4
Do not memoize a function that returns a data structure that is
modified by its caller.
.Sp
Consider these functions:  \f(CW\*(C`getusers\*(C'\fR returns a list of users somehow,
and then \f(CW\*(C`main\*(C'\fR throws away the first user on the list and prints the
rest:
.Sp
.Vb 7
\&        sub main {
\&          my $userlist = getusers();
\&          shift @$userlist;
\&          foreach $u (@$userlist) {
\&            print "User $u\en";
\&          }
\&        }
\&
\&        sub getusers {
\&          my @users;
\&          # Do something to get a list of users;
\&          \e@users;  # Return reference to list.
\&        }
.Ve
.Sp
If you memoize \f(CW\*(C`getusers\*(C'\fR here, it will work right exactly once.  The
reference to the users list will be stored in the memo table.  \f(CW\*(C`main\*(C'\fR
will discard the first element from the referenced list.  The next
time you invoke \f(CW\*(C`main\*(C'\fR, \f(CW\*(C`Memoize\*(C'\fR will not call \f(CW\*(C`getusers\*(C'\fR; it will
just return the same reference to the same list it got last time.  But
this time the list has already had its head removed; \f(CW\*(C`main\*(C'\fR will
erroneously remove another element from it.  The list will get shorter
and shorter every time you call \f(CW\*(C`main\*(C'\fR.
.Sp
Similarly, this:
.Sp
.Vb 3
\&        $u1 = getusers();    
\&        $u2 = getusers();    
\&        pop @$u1;
.Ve
.Sp
will modify \f(CW$u2\fR as well as \f(CW$u1\fR, because both variables are references
to the same array.  Had \f(CW\*(C`getusers\*(C'\fR not been memoized, \f(CW$u1\fR and \f(CW$u2\fR
would have referred to different arrays.
.IP "\(bu" 4
Do not memoize a very simple function.
.Sp
Recently someone mentioned to me that the Memoize module made his
program run slower instead of faster.  It turned out that he was
memoizing the following function:
.Sp
.Vb 3
\&    sub square {
\&      $_[0] * $_[0];
\&    }
.Ve
.Sp
I pointed out that \f(CW\*(C`Memoize\*(C'\fR uses a hash, and that looking up a
number in the hash is necessarily going to take a lot longer than a
single multiplication.  There really is no way to speed up the
\&\f(CW\*(C`square\*(C'\fR function.
.Sp
Memoization is not magical.
.SH "PERSISTENT CACHE SUPPORT"
.IX Header "PERSISTENT CACHE SUPPORT"
You can tie the cache tables to any sort of tied hash that you want
to, as long as it supports \f(CW\*(C`TIEHASH\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, and
\&\f(CW\*(C`EXISTS\*(C'\fR.  For example,
.PP
.Vb 2
\&        tie my %cache => \*(AqGDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
works just fine.  For some storage methods, you need a little glue.
.PP
\&\f(CW\*(C`SDBM_File\*(C'\fR doesn't supply an \f(CW\*(C`EXISTS\*(C'\fR method, so included in this
package is a glue module called \f(CW\*(C`Memoize::SDBM_File\*(C'\fR which does
provide one.  Use this instead of plain \f(CW\*(C`SDBM_File\*(C'\fR to store your
cache table on disk in an \f(CW\*(C`SDBM_File\*(C'\fR database:
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::SDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
\&\f(CW\*(C`NDBM_File\*(C'\fR has the same problem and the same solution.  (Use
\&\f(CW\*(C`Memoize::NDBM_File instead of plain NDBM_File.\*(C'\fR)
.PP
\&\f(CW\*(C`Storable\*(C'\fR isn't a tied hash class at all.  You can use it to store a
hash to disk and retrieve it again, but you can't modify the hash while
it's on the disk.  So if you want to store your cache table in a
\&\f(CW\*(C`Storable\*(C'\fR database, use \f(CW\*(C`Memoize::Storable\*(C'\fR, which puts a hashlike
front-end onto \f(CW\*(C`Storable\*(C'\fR.  The hash table is actually kept in
memory, and is loaded from your \f(CW\*(C`Storable\*(C'\fR file at the time you
memoize the function, and stored back at the time you unmemoize the
function (or when your program exits):
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
\&
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename, \*(Aqnstore\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
Include the `nstore' option to have the \f(CW\*(C`Storable\*(C'\fR database written
in `network order'.  (See Storable for more details about this.)
.PP
The \f(CW\*(C`flush_cache()\*(C'\fR function will raise a run-time error unless the
tied package provides a \f(CW\*(C`CLEAR\*(C'\fR method.
.SH "EXPIRATION SUPPORT"
.IX Header "EXPIRATION SUPPORT"
See Memoize::Expire, which is a plug-in module that adds expiration
functionality to Memoize.  If you don't like the kinds of policies
that Memoize::Expire implements, it is easy to write your own plug-in
module to implement whatever policy you desire.  Memoize comes with
several examples.  An expiration manager that implements a \s-1LRU\s0 policy
is available on \s-1CPAN\s0 as Memoize::ExpireLRU.
.SH "BUGS"
.IX Header "BUGS"
The test suite is much better, but always needs improvement.
.PP
There is some problem with the way \f(CW\*(C`goto &f\*(C'\fR works under threaded
Perl, perhaps because of the lexical scoping of \f(CW@_\fR.  This is a bug
in Perl, and until it is resolved, memoized functions will see a
slightly different \f(CW\*(C`caller()\*(C'\fR and will perform a little more slowly
on threaded perls than unthreaded perls.
.PP
Some versions of \f(CW\*(C`DB_File\*(C'\fR won't let you store data under a key of
length 0.  That means that if you have a function \f(CW\*(C`f\*(C'\fR which you
memoized and the cache is in a \f(CW\*(C`DB_File\*(C'\fR database, then the value of
\&\f(CW\*(C`f()\*(C'\fR (\f(CW\*(C`f\*(C'\fR called with no arguments) will not be memoized.  If this
is a big problem, you can supply a normalizer function that prepends
\&\f(CW"x"\fR to every key.
.SH "MAILING LIST"
.IX Header "MAILING LIST"
To join a very low-traffic mailing list for announcements about
\&\f(CW\*(C`Memoize\*(C'\fR, send an empty note to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (\f(CW\*(C`mjd\-perl\-memoize+@plover.com\*(C'\fR), Plover Systems co.
.PP
See the \f(CW\*(C`Memoize.pm\*(C'\fR Page at http://perl.plover.com/Memoize/
for news and upgrades.  Near this page, at
http://perl.plover.com/MiniMemoize/ there is an article about
memoization and about the internals of Memoize that appeared in The
Perl Journal, issue #13.  (This article is also included in the
Memoize distribution as `article.html'.)
.PP
The author's book \fIHigher-Order Perl\fR (2005, \s-1ISBN 1558607013,\s0 published
by Morgan Kaufmann) discusses memoization (and many other 
topics) in tremendous detail. It is available on-line for free.
For more information, visit http://hop.perl.plover.com/ .
.PP
To join a mailing list for announcements about \f(CW\*(C`Memoize\*(C'\fR, send an
empty message to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.  This mailing
list is for announcements only and has extremely low traffic\-\-\-fewer than
two messages per year.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1998, 1999, 2000, 2001, 2012  by Mark Jason Dominus
.PP
This library is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.
.SH "THANK YOU"
.IX Header "THANK YOU"
Many thanks to Florian Ragwitz for administration and packaging
assistance, to John Tromp for bug reports, to Jonathan Roy for bug reports
and suggestions, to Michael Schwern for other bug reports and patches,
to Mike Cariaso for helping me to figure out the Right Thing to Do
About Expiration, to Joshua Gerth, Joshua Chamas, Jonathan Roy
(again), Mark D. Anderson, and Andrew Johnson for more suggestions
about expiration, to Brent Powers for the Memoize::ExpireLRU module,
to Ariel Scolnicov for delightful messages about the Fibonacci
function, to Dion Almaer for thought-provoking suggestions about the
default normalizer, to Walt Mankowski and Kurt Starsinic for much help
investigating problems under threaded Perl, to Alex Dudkevich for
reporting the bug in prototyped functions and for checking my patch,
to Tony Bass for many helpful suggestions, to Jonathan Roy (again) for
finding a use for \f(CW\*(C`unmemoize()\*(C'\fR, to Philippe Verdret for enlightening
discussion of \f(CW\*(C`Hook::PrePostCall\*(C'\fR, to Nat Torkington for advice I
ignored, to Chris Nandor for portability advice, to Randal Schwartz
for suggesting the '\f(CW\*(C`flush_cache\*(C'\fR function, and to Jenda Krynicky for
being a light in the world.
.PP
Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including
this module in the core and for his patient and helpful guidance
during the integration process.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 751:" 4
.IX Item "Around line 751:"
You forgot a '=back' before '=head3'
.IP "Around line 800:" 4
.IX Item "Around line 800:"
=back without =over
                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize5.16.3pm                              0100644 0001750 0001750 00000101152 12566207437 023224  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize 3pm"
.TH Memoize 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize \- Make functions faster by trading space for time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        # This is the documentation for Memoize 1.02
\&        use Memoize;
\&        memoize(\*(Aqslow_function\*(Aq);
\&        slow_function(arguments);    # Is faster than it was before
.Ve
.PP
This is normally all you need to know.  However, many options are available:
.PP
.Vb 1
\&        memoize(function, options...);
.Ve
.PP
Options include:
.PP
.Vb 2
\&        NORMALIZER => function
\&        INSTALL => new_name
\&
\&        SCALAR_CACHE => \*(AqMEMORY\*(Aq
\&        SCALAR_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        SCALAR_CACHE => \*(AqFAULT\*(Aq
\&        SCALAR_CACHE => \*(AqMERGE\*(Aq
\&
\&        LIST_CACHE => \*(AqMEMORY\*(Aq
\&        LIST_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        LIST_CACHE => \*(AqFAULT\*(Aq
\&        LIST_CACHE => \*(AqMERGE\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
`Memoizing' a function makes it faster by trading space for time.  It
does this by caching the return values of the function in a table.
If you call the function again with the same arguments, \f(CW\*(C`memoize\*(C'\fR
jumps in and gives you the value out of the table, instead of letting
the function compute the value all over again.
.PP
Here is an extreme example.  Consider the Fibonacci sequence, defined
by the following function:
.PP
.Vb 6
\&        # Compute Fibonacci numbers
\&        sub fib {
\&          my $n = shift;
\&          return $n if $n < 2;
\&          fib($n\-1) + fib($n\-2);
\&        }
.Ve
.PP
This function is very slow.  Why?  To compute fib(14), it first wants
to compute fib(13) and fib(12), and add the results.  But to compute
fib(13), it first has to compute fib(12) and fib(11), and then it
comes back and computes fib(12) all over again even though the answer
is the same.  And both of the times that it wants to compute fib(12),
it has to compute fib(11) from scratch, and then it has to do it
again each time it wants to compute fib(13).  This function does so
much recomputing of old results that it takes a really long time to
run\-\-\-fib(14) makes 1,200 extra recursive calls to itself, to compute
and recompute things that it already computed.
.PP
This function is a good candidate for memoization.  If you memoize the
`fib' function above, it will compute fib(14) exactly once, the first
time it needs to, and then save the result in a table.  Then if you
ask for fib(14) again, it gives you the result out of the table.
While computing fib(14), instead of computing fib(12) twice, it does
it once; the second time it needs the value it gets it from the table.
It doesn't compute fib(11) four times; it computes it once, getting it
from the table the next three times.  Instead of making 1,200
recursive calls to `fib', it makes 15.  This makes the function about
150 times faster.
.PP
You could do the memoization yourself, by rewriting the function, like
this:
.PP
.Vb 9
\&        # Compute Fibonacci numbers, memoized version
\&        { my @fib;
\&          sub fib {
\&            my $n = shift;
\&            return $fib[$n] if defined $fib[$n];
\&            return $fib[$n] = $n if $n < 2;
\&            $fib[$n] = fib($n\-1) + fib($n\-2);
\&          }
\&        }
.Ve
.PP
Or you could use this module, like this:
.PP
.Vb 2
\&        use Memoize;
\&        memoize(\*(Aqfib\*(Aq);
\&
\&        # Rest of the fib function just like the original version.
.Ve
.PP
This makes it easy to turn memoizing on and off.
.PP
Here's an even simpler example: I wrote a simple ray tracer; the
program would look in a certain direction, figure out what it was
looking at, and then convert the `color' value (typically a string
like `red') of that object to a red, green, and blue pixel value, like
this:
.PP
.Vb 6
\&    for ($direction = 0; $direction < 300; $direction++) {
\&      # Figure out which object is in direction $direction
\&      $color = $object\->{color};
\&      ($r, $g, $b) = @{&ColorToRGB($color)};
\&      ...
\&    }
.Ve
.PP
Since there are relatively few objects in a picture, there are only a
few colors, which get looked up over and over again.  Memoizing
\&\f(CW\*(C`ColorToRGB\*(C'\fR sped up the program by several percent.
.SH "DETAILS"
.IX Header "DETAILS"
This module exports exactly one function, \f(CW\*(C`memoize\*(C'\fR.  The rest of the
functions in this package are None of Your Business.
.PP
You should say
.PP
.Vb 1
\&        memoize(function)
.Ve
.PP
where \f(CW\*(C`function\*(C'\fR is the name of the function you want to memoize, or
a reference to it.  \f(CW\*(C`memoize\*(C'\fR returns a reference to the new,
memoized version of the function, or \f(CW\*(C`undef\*(C'\fR on a non-fatal error.
At present, there are no non-fatal errors, but there might be some in
the future.
.PP
If \f(CW\*(C`function\*(C'\fR was the name of a function, then \f(CW\*(C`memoize\*(C'\fR hides the
old version and installs the new memoized version under the old name,
so that \f(CW\*(C`&function(...)\*(C'\fR actually invokes the memoized version.
.SH "OPTIONS"
.IX Header "OPTIONS"
There are some optional options you can pass to \f(CW\*(C`memoize\*(C'\fR to change
the way it behaves a little.  To supply options, invoke \f(CW\*(C`memoize\*(C'\fR
like this:
.PP
.Vb 5
\&        memoize(function, NORMALIZER => function,
\&                          INSTALL => newname,
\&                          SCALAR_CACHE => option,
\&                          LIST_CACHE => option
\&                         );
.Ve
.PP
Each of these options is optional; you can include some, all, or none
of them.
.SS "\s-1INSTALL\s0"
.IX Subsection "INSTALL"
If you supply a function name with \f(CW\*(C`INSTALL\*(C'\fR, memoize will install
the new, memoized version of the function under the name you give.
For example,
.PP
.Vb 1
\&        memoize(\*(Aqfib\*(Aq, INSTALL => \*(Aqfastfib\*(Aq)
.Ve
.PP
installs the memoized version of \f(CW\*(C`fib\*(C'\fR as \f(CW\*(C`fastfib\*(C'\fR; without the
\&\f(CW\*(C`INSTALL\*(C'\fR option it would have replaced the old \f(CW\*(C`fib\*(C'\fR with the
memoized version.
.PP
To prevent \f(CW\*(C`memoize\*(C'\fR from installing the memoized version anywhere, use
\&\f(CW\*(C`INSTALL => undef\*(C'\fR.
.SS "\s-1NORMALIZER\s0"
.IX Subsection "NORMALIZER"
Suppose your function looks like this:
.PP
.Vb 6
\&        # Typical call: f(\*(Aqaha!\*(Aq, A => 11, B => 12);
\&        sub f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;  # B defaults to 2
\&          $hash{C} ||= 7;  # C defaults to 7
\&
\&          # Do something with $a, %hash
\&        }
.Ve
.PP
Now, the following calls to your function are all completely equivalent:
.PP
.Vb 6
\&        f(OUCH);
\&        f(OUCH, B => 2);
\&        f(OUCH, C => 7);
\&        f(OUCH, B => 2, C => 7);
\&        f(OUCH, C => 7, B => 2);
\&        (etc.)
.Ve
.PP
However, unless you tell \f(CW\*(C`Memoize\*(C'\fR that these calls are equivalent,
it will not know that, and it will compute the values for these
invocations of your function separately, and store them separately.
.PP
To prevent this, supply a \f(CW\*(C`NORMALIZER\*(C'\fR function that turns the
program arguments into a string in a way that equivalent arguments
turn into the same string.  A \f(CW\*(C`NORMALIZER\*(C'\fR function for \f(CW\*(C`f\*(C'\fR above
might look like this:
.PP
.Vb 5
\&        sub normalize_f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;
\&          $hash{C} ||= 7;
\&
\&          join(\*(Aq,\*(Aq, $a, map ($_ => $hash{$_}) sort keys %hash);
\&        }
.Ve
.PP
Each of the argument lists above comes out of the \f(CW\*(C`normalize_f\*(C'\fR
function looking exactly the same, like this:
.PP
.Vb 1
\&        OUCH,B,2,C,7
.Ve
.PP
You would tell \f(CW\*(C`Memoize\*(C'\fR to use this normalizer this way:
.PP
.Vb 1
\&        memoize(\*(Aqf\*(Aq, NORMALIZER => \*(Aqnormalize_f\*(Aq);
.Ve
.PP
\&\f(CW\*(C`memoize\*(C'\fR knows that if the normalized version of the arguments is
the same for two argument lists, then it can safely look up the value
that it computed for one argument list and return it as the result of
calling the function with the other argument list, even if the
argument lists look different.
.PP
The default normalizer just concatenates the arguments with character
28 in between.  (In \s-1ASCII\s0, this is called \s-1FS\s0 or control\-\e.)  This
always works correctly for functions with only one string argument,
and also when the arguments never contain character 28.  However, it
can confuse certain argument lists:
.PP
.Vb 3
\&        normalizer("a\e034", "b")
\&        normalizer("a", "\e034b")
\&        normalizer("a\e034\e034b")
.Ve
.PP
for example.
.PP
Since hash keys are strings, the default normalizer will not
distinguish between \f(CW\*(C`undef\*(C'\fR and the empty string.  It also won't work
when the function's arguments are references.  For example, consider a
function \f(CW\*(C`g\*(C'\fR which gets two arguments: A number, and a reference to
an array of numbers:
.PP
.Vb 1
\&        g(13, [1,2,3,4,5,6,7]);
.Ve
.PP
The default normalizer will turn this into something like
\&\f(CW"13\e034ARRAY(0x436c1f)"\fR.  That would be all right, except that a
subsequent array of numbers might be stored at a different location
even though it contains the same data.  If this happens, \f(CW\*(C`Memoize\*(C'\fR
will think that the arguments are different, even though they are
equivalent.  In this case, a normalizer like this is appropriate:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, $_[0], @{$_[1]} }
.Ve
.PP
For the example above, this produces the key \*(L"13 1 2 3 4 5 6 7\*(R".
.PP
Another use for normalizers is when the function depends on data other
than those in its arguments.  Suppose you have a function which
returns a value which depends on the current hour of the day:
.PP
.Vb 10
\&        sub on_duty {
\&          my ($problem_type) = @_;
\&          my $hour = (localtime)[2];
\&          open my $fh, "$DIR/$problem_type" or die...;
\&          my $line;
\&          while ($hour\-\- > 0)
\&            $line = <$fh>;
\&          } 
\&          return $line;
\&        }
.Ve
.PP
At 10:23, this function generates the 10th line of a data file; at
3:45 \s-1PM\s0 it generates the 15th line instead.  By default, \f(CW\*(C`Memoize\*(C'\fR
will only see the \f(CW$problem_type\fR argument.  To fix this, include the
current hour in the normalizer:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, (localtime)[2], @_ }
.Ve
.PP
The calling context of the function (scalar or list context) is
propagated to the normalizer.  This means that if the memoized
function will treat its arguments differently in list context than it
would in scalar context, you can have the normalizer function select
its behavior based on the results of \f(CW\*(C`wantarray\*(C'\fR.  Even if called in
a list context, a normalizer should still return a single string.
.ie n .SS """SCALAR_CACHE"", ""LIST_CACHE"""
.el .SS "\f(CWSCALAR_CACHE\fP, \f(CWLIST_CACHE\fP"
.IX Subsection "SCALAR_CACHE, LIST_CACHE"
Normally, \f(CW\*(C`Memoize\*(C'\fR caches your function's return values into an
ordinary Perl hash variable.  However, you might like to have the
values cached on the disk, so that they persist from one run of your
program to the next, or you might like to associate some other
interesting semantics with the cached values.
.PP
There's a slight complication under the hood of \f(CW\*(C`Memoize\*(C'\fR: There are
actually \fItwo\fR caches, one for scalar values and one for list values.
When your function is called in scalar context, its return value is
cached in one hash, and when your function is called in list context,
its value is cached in the other hash.  You can control the caching
behavior of both contexts independently with these options.
.PP
The argument to \f(CW\*(C`LIST_CACHE\*(C'\fR or \f(CW\*(C`SCALAR_CACHE\*(C'\fR must either be one of
the following four strings:
.PP
.Vb 4
\&        MEMORY
\&        FAULT
\&        MERGE
\&        HASH
.Ve
.PP
or else it must be a reference to a list whose first element is one of
these four strings, such as \f(CW\*(C`[HASH, arguments...]\*(C'\fR.
.ie n .IP """MEMORY""" 4
.el .IP "\f(CWMEMORY\fR" 4
.IX Item "MEMORY"
\&\f(CW\*(C`MEMORY\*(C'\fR means that return values from the function will be cached in
an ordinary Perl hash variable.  The hash variable will not persist
after the program exits.  This is the default.
.ie n .IP """HASH""" 4
.el .IP "\f(CWHASH\fR" 4
.IX Item "HASH"
\&\f(CW\*(C`HASH\*(C'\fR allows you to specify that a particular hash that you supply
will be used as the cache.  You can tie this hash beforehand to give
it any behavior you want.
.Sp
A tied hash can have any semantics at all.  It is typically tied to an
on-disk database, so that cached values are stored in the database and
retrieved from it again when needed, and the disk file typically
persists after your program has exited.  See \f(CW\*(C`perltie\*(C'\fR for more
complete details about \f(CW\*(C`tie\*(C'\fR.
.Sp
A typical example is:
.Sp
.Vb 3
\&        use DB_File;
\&        tie my %cache => \*(AqDB_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.Sp
This has the effect of storing the cache in a \f(CW\*(C`DB_File\*(C'\fR database
whose name is in \f(CW$filename\fR.  The cache will persist after the
program has exited.  Next time the program runs, it will find the
cache already populated from the previous run of the program.  Or you
can forcibly populate the cache by constructing a batch program that
runs in the background and populates the cache file.  Then when you
come to run your real program the memoized function will be fast
because all its results have been precomputed.
.ie n .IP """TIE""" 4
.el .IP "\f(CWTIE\fR" 4
.IX Item "TIE"
This option is no longer supported.  It is still documented only to
aid in the debugging of old programs that use it.  Old programs should
be converted to use the \f(CW\*(C`HASH\*(C'\fR option instead.
.Sp
.Vb 1
\&        memoize ... [TIE, PACKAGE, ARGS...]
.Ve
.Sp
is merely a shortcut for
.Sp
.Vb 5
\&        require PACKAGE;
\&        { my %cache;
\&          tie %cache, PACKAGE, ARGS...;
\&        }
\&        memoize ... [HASH => \e%cache];
.Ve
.ie n .IP """FAULT""" 4
.el .IP "\f(CWFAULT\fR" 4
.IX Item "FAULT"
\&\f(CW\*(C`FAULT\*(C'\fR means that you never expect to call the function in scalar
(or list) context, and that if \f(CW\*(C`Memoize\*(C'\fR detects such a call, it
should abort the program.  The error message is one of
.Sp
.Vb 2
\&        \`foo\*(Aq function called in forbidden list context at line ...
\&        \`foo\*(Aq function called in forbidden scalar context at line ...
.Ve
.ie n .IP """MERGE""" 4
.el .IP "\f(CWMERGE\fR" 4
.IX Item "MERGE"
\&\f(CW\*(C`MERGE\*(C'\fR normally means the function does not distinguish between list
and sclar context, and that return values in both contexts should be
stored together.  \f(CW\*(C`LIST_CACHE => MERGE\*(C'\fR means that list context
return values should be stored in the same hash that is used for
scalar context returns, and \f(CW\*(C`SCALAR_CACHE => MERGE\*(C'\fR means the
same, mutatis mutandis.  It is an error to specify \f(CW\*(C`MERGE\*(C'\fR for both,
but it probably does something useful.
.Sp
Consider this function:
.Sp
.Vb 1
\&        sub pi { 3; }
.Ve
.Sp
Normally, the following code will result in two calls to \f(CW\*(C`pi\*(C'\fR:
.Sp
.Vb 3
\&    $x = pi();
\&    ($y) = pi();
\&    $z = pi();
.Ve
.Sp
The first call caches the value \f(CW3\fR in the scalar cache; the second
caches the list \f(CW\*(C`(3)\*(C'\fR in the list cache.  The third call doesn't call
the real \f(CW\*(C`pi\*(C'\fR function; it gets the value from the scalar cache.
.Sp
Obviously, the second call to \f(CW\*(C`pi\*(C'\fR is a waste of time, and storing
its return value is a waste of space.  Specifying \f(CW\*(C`LIST_CACHE =>
MERGE\*(C'\fR will make \f(CW\*(C`memoize\*(C'\fR use the same cache for scalar and list
context return values, so that the second call uses the scalar cache
that was populated by the first call.  \f(CW\*(C`pi\*(C'\fR ends up being called only
once, and both subsequent calls return \f(CW3\fR from the cache, regardless
of the calling context.
.Sp
Another use for \f(CW\*(C`MERGE\*(C'\fR is when you want both kinds of return values
stored in the same disk file; this saves you from having to deal with
two disk files instead of one.  You can use a normalizer function to
keep the two sets of return values separate.  For example:
.Sp
.Vb 1
\&        tie my %cache => \*(AqMLDBM\*(Aq, \*(AqDB_File\*(Aq, $filename, ...;
\&
\&        memoize \*(Aqmyfunc\*(Aq,
\&          NORMALIZER => \*(Aqn\*(Aq,
\&          SCALAR_CACHE => [HASH => \e%cache],
\&          LIST_CACHE => MERGE,
\&        ;
\&
\&        sub n {
\&          my $context = wantarray() ? \*(AqL\*(Aq : \*(AqS\*(Aq;
\&          # ... now compute the hash key from the arguments ...
\&          $hashkey = "$context:$hashkey";
\&        }
.Ve
.Sp
This normalizer function will store scalar context return values in
the disk file under keys that begin with \f(CW\*(C`S:\*(C'\fR, and list context
return values under keys that begin with \f(CW\*(C`L:\*(C'\fR.
.SH "OTHER FACILITIES"
.IX Header "OTHER FACILITIES"
.ie n .SS """unmemoize"""
.el .SS "\f(CWunmemoize\fP"
.IX Subsection "unmemoize"
There's an \f(CW\*(C`unmemoize\*(C'\fR function that you can import if you want to.
Why would you want to?  Here's an example: Suppose you have your cache
tied to a \s-1DBM\s0 file, and you want to make sure that the cache is
written out to disk if someone interrupts the program.  If the program
exits normally, this will happen anyway, but if someone types
control-C or something then the program will terminate immediately
without synchronizing the database.  So what you can do instead is
.PP
.Vb 1
\&    $SIG{INT} = sub { unmemoize \*(Aqfunction\*(Aq };
.Ve
.PP
\&\f(CW\*(C`unmemoize\*(C'\fR accepts a reference to, or the name of a previously
memoized function, and undoes whatever it did to provide the memoized
version in the first place, including making the name refer to the
unmemoized version if appropriate.  It returns a reference to the
unmemoized version of the function.
.PP
If you ask it to unmemoize a function that was never memoized, it
croaks.
.ie n .SS """flush_cache"""
.el .SS "\f(CWflush_cache\fP"
.IX Subsection "flush_cache"
\&\f(CW\*(C`flush_cache(function)\*(C'\fR will flush out the caches, discarding \fIall\fR
the cached data.  The argument may be a function name or a reference
to a function.  For finer control over when data is discarded or
expired, see the documentation for \f(CW\*(C`Memoize::Expire\*(C'\fR, included in
this package.
.PP
Note that if the cache is a tied hash, \f(CW\*(C`flush_cache\*(C'\fR will attempt to
invoke the \f(CW\*(C`CLEAR\*(C'\fR method on the hash.  If there is no \f(CW\*(C`CLEAR\*(C'\fR
method, this will cause a run-time error.
.PP
An alternative approach to cache flushing is to use the \f(CW\*(C`HASH\*(C'\fR option
(see above) to request that \f(CW\*(C`Memoize\*(C'\fR use a particular hash variable
as its cache.  Then you can examine or modify the hash at any time in
any way you desire.  You may flush the cache by using \f(CW\*(C`%hash = ()\*(C'\fR.
.SH "CAVEATS"
.IX Header "CAVEATS"
Memoization is not a cure-all:
.IP "\(bu" 4
Do not memoize a function whose behavior depends on program
state other than its own arguments, such as global variables, the time
of day, or file input.  These functions will not produce correct
results when memoized.  For a particularly easy example:
.Sp
.Vb 3
\&        sub f {
\&          time;
\&        }
.Ve
.Sp
This function takes no arguments, and as far as \f(CW\*(C`Memoize\*(C'\fR is
concerned, it always returns the same result.  \f(CW\*(C`Memoize\*(C'\fR is wrong, of
course, and the memoized version of this function will call \f(CW\*(C`time\*(C'\fR once
to get the current time, and it will return that same time
every time you call it after that.
.IP "\(bu" 4
Do not memoize a function with side effects.
.Sp
.Vb 5
\&        sub f {
\&          my ($a, $b) = @_;
\&          my $s = $a + $b;
\&          print "$a + $b = $s.\en";
\&        }
.Ve
.Sp
This function accepts two arguments, adds them, and prints their sum.
Its return value is the numuber of characters it printed, but you
probably didn't care about that.  But \f(CW\*(C`Memoize\*(C'\fR doesn't understand
that.  If you memoize this function, you will get the result you
expect the first time you ask it to print the sum of 2 and 3, but
subsequent calls will return 1 (the return value of
\&\f(CW\*(C`print\*(C'\fR) without actually printing anything.
.IP "\(bu" 4
Do not memoize a function that returns a data structure that is
modified by its caller.
.Sp
Consider these functions:  \f(CW\*(C`getusers\*(C'\fR returns a list of users somehow,
and then \f(CW\*(C`main\*(C'\fR throws away the first user on the list and prints the
rest:
.Sp
.Vb 7
\&        sub main {
\&          my $userlist = getusers();
\&          shift @$userlist;
\&          foreach $u (@$userlist) {
\&            print "User $u\en";
\&          }
\&        }
\&
\&        sub getusers {
\&          my @users;
\&          # Do something to get a list of users;
\&          \e@users;  # Return reference to list.
\&        }
.Ve
.Sp
If you memoize \f(CW\*(C`getusers\*(C'\fR here, it will work right exactly once.  The
reference to the users list will be stored in the memo table.  \f(CW\*(C`main\*(C'\fR
will discard the first element from the referenced list.  The next
time you invoke \f(CW\*(C`main\*(C'\fR, \f(CW\*(C`Memoize\*(C'\fR will not call \f(CW\*(C`getusers\*(C'\fR; it will
just return the same reference to the same list it got last time.  But
this time the list has already had its head removed; \f(CW\*(C`main\*(C'\fR will
erroneously remove another element from it.  The list will get shorter
and shorter every time you call \f(CW\*(C`main\*(C'\fR.
.Sp
Similarly, this:
.Sp
.Vb 3
\&        $u1 = getusers();    
\&        $u2 = getusers();    
\&        pop @$u1;
.Ve
.Sp
will modify \f(CW$u2\fR as well as \f(CW$u1\fR, because both variables are references
to the same array.  Had \f(CW\*(C`getusers\*(C'\fR not been memoized, \f(CW$u1\fR and \f(CW$u2\fR
would have referred to different arrays.
.IP "\(bu" 4
Do not memoize a very simple function.
.Sp
Recently someone mentioned to me that the Memoize module made his
program run slower instead of faster.  It turned out that he was
memoizing the following function:
.Sp
.Vb 3
\&    sub square {
\&      $_[0] * $_[0];
\&    }
.Ve
.Sp
I pointed out that \f(CW\*(C`Memoize\*(C'\fR uses a hash, and that looking up a
number in the hash is necessarily going to take a lot longer than a
single multiplication.  There really is no way to speed up the
\&\f(CW\*(C`square\*(C'\fR function.
.Sp
Memoization is not magical.
.SH "PERSISTENT CACHE SUPPORT"
.IX Header "PERSISTENT CACHE SUPPORT"
You can tie the cache tables to any sort of tied hash that you want
to, as long as it supports \f(CW\*(C`TIEHASH\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, and
\&\f(CW\*(C`EXISTS\*(C'\fR.  For example,
.PP
.Vb 2
\&        tie my %cache => \*(AqGDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
works just fine.  For some storage methods, you need a little glue.
.PP
\&\f(CW\*(C`SDBM_File\*(C'\fR doesn't supply an \f(CW\*(C`EXISTS\*(C'\fR method, so included in this
package is a glue module called \f(CW\*(C`Memoize::SDBM_File\*(C'\fR which does
provide one.  Use this instead of plain \f(CW\*(C`SDBM_File\*(C'\fR to store your
cache table on disk in an \f(CW\*(C`SDBM_File\*(C'\fR database:
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::SDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
\&\f(CW\*(C`NDBM_File\*(C'\fR has the same problem and the same solution.  (Use
\&\f(CW\*(C`Memoize::NDBM_File instead of plain NDBM_File.\*(C'\fR)
.PP
\&\f(CW\*(C`Storable\*(C'\fR isn't a tied hash class at all.  You can use it to store a
hash to disk and retrieve it again, but you can't modify the hash while
it's on the disk.  So if you want to store your cache table in a
\&\f(CW\*(C`Storable\*(C'\fR database, use \f(CW\*(C`Memoize::Storable\*(C'\fR, which puts a hashlike
front-end onto \f(CW\*(C`Storable\*(C'\fR.  The hash table is actually kept in
memory, and is loaded from your \f(CW\*(C`Storable\*(C'\fR file at the time you
memoize the function, and stored back at the time you unmemoize the
function (or when your program exits):
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
\&
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename, \*(Aqnstore\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
Include the `nstore' option to have the \f(CW\*(C`Storable\*(C'\fR database written
in `network order'.  (See Storable for more details about this.)
.PP
The \f(CW\*(C`flush_cache()\*(C'\fR function will raise a run-time error unless the
tied package provides a \f(CW\*(C`CLEAR\*(C'\fR method.
.SH "EXPIRATION SUPPORT"
.IX Header "EXPIRATION SUPPORT"
See Memoize::Expire, which is a plug-in module that adds expiration
functionality to Memoize.  If you don't like the kinds of policies
that Memoize::Expire implements, it is easy to write your own plug-in
module to implement whatever policy you desire.  Memoize comes with
several examples.  An expiration manager that implements a \s-1LRU\s0 policy
is available on \s-1CPAN\s0 as Memoize::ExpireLRU.
.SH "BUGS"
.IX Header "BUGS"
The test suite is much better, but always needs improvement.
.PP
There is some problem with the way \f(CW\*(C`goto &f\*(C'\fR works under threaded
Perl, perhaps because of the lexical scoping of \f(CW@_\fR.  This is a bug
in Perl, and until it is resolved, memoized functions will see a
slightly different \f(CW\*(C`caller()\*(C'\fR and will perform a little more slowly
on threaded perls than unthreaded perls.
.PP
Some versions of \f(CW\*(C`DB_File\*(C'\fR won't let you store data under a key of
length 0.  That means that if you have a function \f(CW\*(C`f\*(C'\fR which you
memoized and the cache is in a \f(CW\*(C`DB_File\*(C'\fR database, then the value of
\&\f(CW\*(C`f()\*(C'\fR (\f(CW\*(C`f\*(C'\fR called with no arguments) will not be memoized.  If this
is a big problem, you can supply a normalizer function that prepends
\&\f(CW"x"\fR to every key.
.SH "MAILING LIST"
.IX Header "MAILING LIST"
To join a very low-traffic mailing list for announcements about
\&\f(CW\*(C`Memoize\*(C'\fR, send an empty note to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (\f(CW\*(C`mjd\-perl\-memoize+@plover.com\*(C'\fR), Plover Systems co.
.PP
See the \f(CW\*(C`Memoize.pm\*(C'\fR Page at http://www.plover.com/~mjd/perl/Memoize/
for news and upgrades.  Near this page, at
http://www.plover.com/~mjd/perl/MiniMemoize/ there is an article about
memoization and about the internals of Memoize that appeared in The
Perl Journal, issue #13.  (This article is also included in the
Memoize distribution as `article.html'.)
.PP
The author's book \fIHigher Order Perl\fR (2005, \s-1ISBN\s0 1558607013, published
by Morgan Kaufmann) discusses memoization (and many other fascinating
topics) in tremendous detail. It will also be available on-line for free.
For more information, visit http://perl.plover.com/book/ .
.PP
To join a mailing list for announcements about \f(CW\*(C`Memoize\*(C'\fR, send an
empty message to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.  This mailing
list is for announcements only and has extremely low traffic\-\-\-about
two messages per year.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1998, 1999, 2000, 2001  by Mark Jason Dominus
.PP
This library is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.
.SH "THANK YOU"
.IX Header "THANK YOU"
Many thanks to Jonathan Roy for bug reports and suggestions, to
Michael Schwern for other bug reports and patches, to Mike Cariaso for
helping me to figure out the Right Thing to Do About Expiration, to
Joshua Gerth, Joshua Chamas, Jonathan Roy (again), Mark D. Anderson,
and Andrew Johnson for more suggestions about expiration, to Brent
Powers for the Memoize::ExpireLRU module, to Ariel Scolnicov for
delightful messages about the Fibonacci function, to Dion Almaer for
thought-provoking suggestions about the default normalizer, to Walt
Mankowski and Kurt Starsinic for much help investigating problems
under threaded Perl, to Alex Dudkevich for reporting the bug in
prototyped functions and for checking my patch, to Tony Bass for many
helpful suggestions, to Jonathan Roy (again) for finding a use for
\&\f(CW\*(C`unmemoize()\*(C'\fR, to Philippe Verdret for enlightening discussion of
\&\f(CW\*(C`Hook::PrePostCall\*(C'\fR, to Nat Torkington for advice I ignored, to Chris
Nandor for portability advice, to Randal Schwartz for suggesting the
\&'\f(CW\*(C`flush_cache\*(C'\fR function, and to Jenda Krynicky for being a light in
the world.
.PP
Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including
this module in the core and for his patient and helpful guidance
during the integration process.
                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize5.18.3pm                              0100644 0001750 0001750 00000105164 12566207460 023231  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize 3pm"
.TH Memoize 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize \- Make functions faster by trading space for time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        # This is the documentation for Memoize 1.03
\&        use Memoize;
\&        memoize(\*(Aqslow_function\*(Aq);
\&        slow_function(arguments);    # Is faster than it was before
.Ve
.PP
This is normally all you need to know.  However, many options are available:
.PP
.Vb 1
\&        memoize(function, options...);
.Ve
.PP
Options include:
.PP
.Vb 2
\&        NORMALIZER => function
\&        INSTALL => new_name
\&
\&        SCALAR_CACHE => \*(AqMEMORY\*(Aq
\&        SCALAR_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        SCALAR_CACHE => \*(AqFAULT\*(Aq
\&        SCALAR_CACHE => \*(AqMERGE\*(Aq
\&
\&        LIST_CACHE => \*(AqMEMORY\*(Aq
\&        LIST_CACHE => [\*(AqHASH\*(Aq, \e%cache_hash ]
\&        LIST_CACHE => \*(AqFAULT\*(Aq
\&        LIST_CACHE => \*(AqMERGE\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
`Memoizing' a function makes it faster by trading space for time.  It
does this by caching the return values of the function in a table.
If you call the function again with the same arguments, \f(CW\*(C`memoize\*(C'\fR
jumps in and gives you the value out of the table, instead of letting
the function compute the value all over again.
.PP
Here is an extreme example.  Consider the Fibonacci sequence, defined
by the following function:
.PP
.Vb 6
\&        # Compute Fibonacci numbers
\&        sub fib {
\&          my $n = shift;
\&          return $n if $n < 2;
\&          fib($n\-1) + fib($n\-2);
\&        }
.Ve
.PP
This function is very slow.  Why?  To compute fib(14), it first wants
to compute fib(13) and fib(12), and add the results.  But to compute
fib(13), it first has to compute fib(12) and fib(11), and then it
comes back and computes fib(12) all over again even though the answer
is the same.  And both of the times that it wants to compute fib(12),
it has to compute fib(11) from scratch, and then it has to do it
again each time it wants to compute fib(13).  This function does so
much recomputing of old results that it takes a really long time to
run\-\-\-fib(14) makes 1,200 extra recursive calls to itself, to compute
and recompute things that it already computed.
.PP
This function is a good candidate for memoization.  If you memoize the
`fib' function above, it will compute fib(14) exactly once, the first
time it needs to, and then save the result in a table.  Then if you
ask for fib(14) again, it gives you the result out of the table.
While computing fib(14), instead of computing fib(12) twice, it does
it once; the second time it needs the value it gets it from the table.
It doesn't compute fib(11) four times; it computes it once, getting it
from the table the next three times.  Instead of making 1,200
recursive calls to `fib', it makes 15.  This makes the function about
150 times faster.
.PP
You could do the memoization yourself, by rewriting the function, like
this:
.PP
.Vb 9
\&        # Compute Fibonacci numbers, memoized version
\&        { my @fib;
\&          sub fib {
\&            my $n = shift;
\&            return $fib[$n] if defined $fib[$n];
\&            return $fib[$n] = $n if $n < 2;
\&            $fib[$n] = fib($n\-1) + fib($n\-2);
\&          }
\&        }
.Ve
.PP
Or you could use this module, like this:
.PP
.Vb 2
\&        use Memoize;
\&        memoize(\*(Aqfib\*(Aq);
\&
\&        # Rest of the fib function just like the original version.
.Ve
.PP
This makes it easy to turn memoizing on and off.
.PP
Here's an even simpler example: I wrote a simple ray tracer; the
program would look in a certain direction, figure out what it was
looking at, and then convert the `color' value (typically a string
like `red') of that object to a red, green, and blue pixel value, like
this:
.PP
.Vb 6
\&    for ($direction = 0; $direction < 300; $direction++) {
\&      # Figure out which object is in direction $direction
\&      $color = $object\->{color};
\&      ($r, $g, $b) = @{&ColorToRGB($color)};
\&      ...
\&    }
.Ve
.PP
Since there are relatively few objects in a picture, there are only a
few colors, which get looked up over and over again.  Memoizing
\&\f(CW\*(C`ColorToRGB\*(C'\fR sped up the program by several percent.
.SH "DETAILS"
.IX Header "DETAILS"
This module exports exactly one function, \f(CW\*(C`memoize\*(C'\fR.  The rest of the
functions in this package are None of Your Business.
.PP
You should say
.PP
.Vb 1
\&        memoize(function)
.Ve
.PP
where \f(CW\*(C`function\*(C'\fR is the name of the function you want to memoize, or
a reference to it.  \f(CW\*(C`memoize\*(C'\fR returns a reference to the new,
memoized version of the function, or \f(CW\*(C`undef\*(C'\fR on a non-fatal error.
At present, there are no non-fatal errors, but there might be some in
the future.
.PP
If \f(CW\*(C`function\*(C'\fR was the name of a function, then \f(CW\*(C`memoize\*(C'\fR hides the
old version and installs the new memoized version under the old name,
so that \f(CW\*(C`&function(...)\*(C'\fR actually invokes the memoized version.
.SH "OPTIONS"
.IX Header "OPTIONS"
There are some optional options you can pass to \f(CW\*(C`memoize\*(C'\fR to change
the way it behaves a little.  To supply options, invoke \f(CW\*(C`memoize\*(C'\fR
like this:
.PP
.Vb 5
\&        memoize(function, NORMALIZER => function,
\&                          INSTALL => newname,
\&                          SCALAR_CACHE => option,
\&                          LIST_CACHE => option
\&                         );
.Ve
.PP
Each of these options is optional; you can include some, all, or none
of them.
.SS "\s-1INSTALL\s0"
.IX Subsection "INSTALL"
If you supply a function name with \f(CW\*(C`INSTALL\*(C'\fR, memoize will install
the new, memoized version of the function under the name you give.
For example,
.PP
.Vb 1
\&        memoize(\*(Aqfib\*(Aq, INSTALL => \*(Aqfastfib\*(Aq)
.Ve
.PP
installs the memoized version of \f(CW\*(C`fib\*(C'\fR as \f(CW\*(C`fastfib\*(C'\fR; without the
\&\f(CW\*(C`INSTALL\*(C'\fR option it would have replaced the old \f(CW\*(C`fib\*(C'\fR with the
memoized version.
.PP
To prevent \f(CW\*(C`memoize\*(C'\fR from installing the memoized version anywhere, use
\&\f(CW\*(C`INSTALL => undef\*(C'\fR.
.SS "\s-1NORMALIZER\s0"
.IX Subsection "NORMALIZER"
Suppose your function looks like this:
.PP
.Vb 6
\&        # Typical call: f(\*(Aqaha!\*(Aq, A => 11, B => 12);
\&        sub f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;  # B defaults to 2
\&          $hash{C} ||= 7;  # C defaults to 7
\&
\&          # Do something with $a, %hash
\&        }
.Ve
.PP
Now, the following calls to your function are all completely equivalent:
.PP
.Vb 6
\&        f(OUCH);
\&        f(OUCH, B => 2);
\&        f(OUCH, C => 7);
\&        f(OUCH, B => 2, C => 7);
\&        f(OUCH, C => 7, B => 2);
\&        (etc.)
.Ve
.PP
However, unless you tell \f(CW\*(C`Memoize\*(C'\fR that these calls are equivalent,
it will not know that, and it will compute the values for these
invocations of your function separately, and store them separately.
.PP
To prevent this, supply a \f(CW\*(C`NORMALIZER\*(C'\fR function that turns the
program arguments into a string in a way that equivalent arguments
turn into the same string.  A \f(CW\*(C`NORMALIZER\*(C'\fR function for \f(CW\*(C`f\*(C'\fR above
might look like this:
.PP
.Vb 5
\&        sub normalize_f {
\&          my $a = shift;
\&          my %hash = @_;
\&          $hash{B} ||= 2;
\&          $hash{C} ||= 7;
\&
\&          join(\*(Aq,\*(Aq, $a, map ($_ => $hash{$_}) sort keys %hash);
\&        }
.Ve
.PP
Each of the argument lists above comes out of the \f(CW\*(C`normalize_f\*(C'\fR
function looking exactly the same, like this:
.PP
.Vb 1
\&        OUCH,B,2,C,7
.Ve
.PP
You would tell \f(CW\*(C`Memoize\*(C'\fR to use this normalizer this way:
.PP
.Vb 1
\&        memoize(\*(Aqf\*(Aq, NORMALIZER => \*(Aqnormalize_f\*(Aq);
.Ve
.PP
\&\f(CW\*(C`memoize\*(C'\fR knows that if the normalized version of the arguments is
the same for two argument lists, then it can safely look up the value
that it computed for one argument list and return it as the result of
calling the function with the other argument list, even if the
argument lists look different.
.PP
The default normalizer just concatenates the arguments with character
28 in between.  (In \s-1ASCII,\s0 this is called \s-1FS\s0 or control\-\e.)  This
always works correctly for functions with only one string argument,
and also when the arguments never contain character 28.  However, it
can confuse certain argument lists:
.PP
.Vb 3
\&        normalizer("a\e034", "b")
\&        normalizer("a", "\e034b")
\&        normalizer("a\e034\e034b")
.Ve
.PP
for example.
.PP
Since hash keys are strings, the default normalizer will not
distinguish between \f(CW\*(C`undef\*(C'\fR and the empty string.  It also won't work
when the function's arguments are references.  For example, consider a
function \f(CW\*(C`g\*(C'\fR which gets two arguments: A number, and a reference to
an array of numbers:
.PP
.Vb 1
\&        g(13, [1,2,3,4,5,6,7]);
.Ve
.PP
The default normalizer will turn this into something like
\&\f(CW"13\e034ARRAY(0x436c1f)"\fR.  That would be all right, except that a
subsequent array of numbers might be stored at a different location
even though it contains the same data.  If this happens, \f(CW\*(C`Memoize\*(C'\fR
will think that the arguments are different, even though they are
equivalent.  In this case, a normalizer like this is appropriate:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, $_[0], @{$_[1]} }
.Ve
.PP
For the example above, this produces the key \*(L"13 1 2 3 4 5 6 7\*(R".
.PP
Another use for normalizers is when the function depends on data other
than those in its arguments.  Suppose you have a function which
returns a value which depends on the current hour of the day:
.PP
.Vb 10
\&        sub on_duty {
\&          my ($problem_type) = @_;
\&          my $hour = (localtime)[2];
\&          open my $fh, "$DIR/$problem_type" or die...;
\&          my $line;
\&          while ($hour\-\- > 0)
\&            $line = <$fh>;
\&          } 
\&          return $line;
\&        }
.Ve
.PP
At 10:23, this function generates the 10th line of a data file; at
3:45 \s-1PM\s0 it generates the 15th line instead.  By default, \f(CW\*(C`Memoize\*(C'\fR
will only see the \f(CW$problem_type\fR argument.  To fix this, include the
current hour in the normalizer:
.PP
.Vb 1
\&        sub normalize { join \*(Aq \*(Aq, (localtime)[2], @_ }
.Ve
.PP
The calling context of the function (scalar or list context) is
propagated to the normalizer.  This means that if the memoized
function will treat its arguments differently in list context than it
would in scalar context, you can have the normalizer function select
its behavior based on the results of \f(CW\*(C`wantarray\*(C'\fR.  Even if called in
a list context, a normalizer should still return a single string.
.ie n .SS """SCALAR_CACHE"", ""LIST_CACHE"""
.el .SS "\f(CWSCALAR_CACHE\fP, \f(CWLIST_CACHE\fP"
.IX Subsection "SCALAR_CACHE, LIST_CACHE"
Normally, \f(CW\*(C`Memoize\*(C'\fR caches your function's return values into an
ordinary Perl hash variable.  However, you might like to have the
values cached on the disk, so that they persist from one run of your
program to the next, or you might like to associate some other
interesting semantics with the cached values.
.PP
There's a slight complication under the hood of \f(CW\*(C`Memoize\*(C'\fR: There are
actually \fItwo\fR caches, one for scalar values and one for list values.
When your function is called in scalar context, its return value is
cached in one hash, and when your function is called in list context,
its value is cached in the other hash.  You can control the caching
behavior of both contexts independently with these options.
.PP
The argument to \f(CW\*(C`LIST_CACHE\*(C'\fR or \f(CW\*(C`SCALAR_CACHE\*(C'\fR must either be one of
the following four strings:
.PP
.Vb 4
\&        MEMORY
\&        FAULT
\&        MERGE
\&        HASH
.Ve
.PP
or else it must be a reference to an array whose first element is one of
these four strings, such as \f(CW\*(C`[HASH, arguments...]\*(C'\fR.
.ie n .IP """MEMORY""" 4
.el .IP "\f(CWMEMORY\fR" 4
.IX Item "MEMORY"
\&\f(CW\*(C`MEMORY\*(C'\fR means that return values from the function will be cached in
an ordinary Perl hash variable.  The hash variable will not persist
after the program exits.  This is the default.
.ie n .IP """HASH""" 4
.el .IP "\f(CWHASH\fR" 4
.IX Item "HASH"
\&\f(CW\*(C`HASH\*(C'\fR allows you to specify that a particular hash that you supply
will be used as the cache.  You can tie this hash beforehand to give
it any behavior you want.
.Sp
A tied hash can have any semantics at all.  It is typically tied to an
on-disk database, so that cached values are stored in the database and
retrieved from it again when needed, and the disk file typically
persists after your program has exited.  See \f(CW\*(C`perltie\*(C'\fR for more
complete details about \f(CW\*(C`tie\*(C'\fR.
.Sp
A typical example is:
.Sp
.Vb 3
\&        use DB_File;
\&        tie my %cache => \*(AqDB_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.Sp
This has the effect of storing the cache in a \f(CW\*(C`DB_File\*(C'\fR database
whose name is in \f(CW$filename\fR.  The cache will persist after the
program has exited.  Next time the program runs, it will find the
cache already populated from the previous run of the program.  Or you
can forcibly populate the cache by constructing a batch program that
runs in the background and populates the cache file.  Then when you
come to run your real program the memoized function will be fast
because all its results have been precomputed.
.Sp
Another reason to use \f(CW\*(C`HASH\*(C'\fR is to provide your own hash variable.
You can then inspect or modify the contents of the hash to gain finer
control over the cache management.
.ie n .IP """TIE""" 4
.el .IP "\f(CWTIE\fR" 4
.IX Item "TIE"
This option is no longer supported.  It is still documented only to
aid in the debugging of old programs that use it.  Old programs should
be converted to use the \f(CW\*(C`HASH\*(C'\fR option instead.
.Sp
.Vb 1
\&        memoize ... [\*(AqTIE\*(Aq, PACKAGE, ARGS...]
.Ve
.Sp
is merely a shortcut for
.Sp
.Vb 4
\&        require PACKAGE;
\&        { tie my %cache, PACKAGE, ARGS...;
\&          memoize ... [HASH => \e%cache];
\&        }
.Ve
.ie n .IP """FAULT""" 4
.el .IP "\f(CWFAULT\fR" 4
.IX Item "FAULT"
\&\f(CW\*(C`FAULT\*(C'\fR means that you never expect to call the function in scalar
(or list) context, and that if \f(CW\*(C`Memoize\*(C'\fR detects such a call, it
should abort the program.  The error message is one of
.Sp
.Vb 2
\&        \`foo\*(Aq function called in forbidden list context at line ...
\&        \`foo\*(Aq function called in forbidden scalar context at line ...
.Ve
.ie n .IP """MERGE""" 4
.el .IP "\f(CWMERGE\fR" 4
.IX Item "MERGE"
\&\f(CW\*(C`MERGE\*(C'\fR normally means that the memoized function does not
distinguish between list and sclar context, and that return values in
both contexts should be stored together.  Both \f(CW\*(C`LIST_CACHE =>
MERGE\*(C'\fR and \f(CW\*(C`SCALAR_CACHE => MERGE\*(C'\fR mean the same thing.
.Sp
Consider this function:
.Sp
.Vb 4
\&        sub complicated {
\&          # ... time\-consuming calculation of $result
\&          return $result;
\&        }
.Ve
.Sp
The \f(CW\*(C`complicated\*(C'\fR function will return the same numeric \f(CW$result\fR
regardless of whether it is called in list or in scalar context.
.Sp
Normally, the following code will result in two calls to \f(CW\*(C`complicated\*(C'\fR, even
if \f(CW\*(C`complicated\*(C'\fR is memoized:
.Sp
.Vb 3
\&    $x = complicated(142);
\&    ($y) = complicated(142);
\&    $z = complicated(142);
.Ve
.Sp
The first call will cache the result, say 37, in the scalar cache; the
second will cach the list \f(CW\*(C`(37)\*(C'\fR in the list cache.  The third call
doesn't call the real \f(CW\*(C`complicated\*(C'\fR function; it gets the value 37
from the scalar cache.
.Sp
Obviously, the second call to \f(CW\*(C`complicated\*(C'\fR is a waste of time, and
storing its return value is a waste of space.  Specifying \f(CW\*(C`LIST_CACHE
=> MERGE\*(C'\fR will make \f(CW\*(C`memoize\*(C'\fR use the same cache for scalar and
list context return values, so that the second call uses the scalar
cache that was populated by the first call.  \f(CW\*(C`complicated\*(C'\fR ends up
being called only once, and both subsequent calls return \f(CW3\fR from the
cache, regardless of the calling context.
.PP
\fIList values in scalar context\fR
.IX Subsection "List values in scalar context"
.PP
Consider this function:
.PP
.Vb 1
\&    sub iota { return reverse (1..$_[0]) }
.Ve
.PP
This function normally returns a list.  Suppose you memoize it and
merge the caches:
.PP
.Vb 1
\&    memoize \*(Aqiota\*(Aq, SCALAR_CACHE => \*(AqMERGE\*(Aq;
\&
\&    @i7 = iota(7);
\&    $i7 = iota(7);
.Ve
.PP
Here the first call caches the list (1,2,3,4,5,6,7).  The second call
does not really make sense. \f(CW\*(C`Memoize\*(C'\fR cannot guess what behavior
\&\f(CW\*(C`iota\*(C'\fR should have in scalar context without actually calling it in
scalar context.  Normally \f(CW\*(C`Memoize\*(C'\fR \fIwould\fR call \f(CW\*(C`iota\*(C'\fR in scalar
context and cache the result, but the \f(CW\*(C`SCALAR_CACHE => \*(AqMERGE\*(Aq\*(C'\fR
option says not to do that, but to use the cache list-context value
instead. But it cannot return a list of seven elements in a scalar
context. In this case \f(CW$i7\fR will receive the \fBfirst element\fR of the
cached list value, namely 7.
.PP
\fIMerged disk caches\fR
.IX Subsection "Merged disk caches"
.PP
Another use for \f(CW\*(C`MERGE\*(C'\fR is when you want both kinds of return values
stored in the same disk file; this saves you from having to deal with
two disk files instead of one.  You can use a normalizer function to
keep the two sets of return values separate.  For example:
.PP
.Vb 1
\&        tie my %cache => \*(AqMLDBM\*(Aq, \*(AqDB_File\*(Aq, $filename, ...;
\&
\&        memoize \*(Aqmyfunc\*(Aq,
\&          NORMALIZER => \*(Aqn\*(Aq,
\&          SCALAR_CACHE => [HASH => \e%cache],
\&          LIST_CACHE => \*(AqMERGE\*(Aq,
\&        ;
\&
\&        sub n {
\&          my $context = wantarray() ? \*(AqL\*(Aq : \*(AqS\*(Aq;
\&          # ... now compute the hash key from the arguments ...
\&          $hashkey = "$context:$hashkey";
\&        }
.Ve
.PP
This normalizer function will store scalar context return values in
the disk file under keys that begin with \f(CW\*(C`S:\*(C'\fR, and list context
return values under keys that begin with \f(CW\*(C`L:\*(C'\fR.
.SH "OTHER FACILITIES"
.IX Header "OTHER FACILITIES"
.ie n .SS """unmemoize"""
.el .SS "\f(CWunmemoize\fP"
.IX Subsection "unmemoize"
There's an \f(CW\*(C`unmemoize\*(C'\fR function that you can import if you want to.
Why would you want to?  Here's an example: Suppose you have your cache
tied to a \s-1DBM\s0 file, and you want to make sure that the cache is
written out to disk if someone interrupts the program.  If the program
exits normally, this will happen anyway, but if someone types
control-C or something then the program will terminate immediately
without synchronizing the database.  So what you can do instead is
.PP
.Vb 1
\&    $SIG{INT} = sub { unmemoize \*(Aqfunction\*(Aq };
.Ve
.PP
\&\f(CW\*(C`unmemoize\*(C'\fR accepts a reference to, or the name of a previously
memoized function, and undoes whatever it did to provide the memoized
version in the first place, including making the name refer to the
unmemoized version if appropriate.  It returns a reference to the
unmemoized version of the function.
.PP
If you ask it to unmemoize a function that was never memoized, it
croaks.
.ie n .SS """flush_cache"""
.el .SS "\f(CWflush_cache\fP"
.IX Subsection "flush_cache"
\&\f(CW\*(C`flush_cache(function)\*(C'\fR will flush out the caches, discarding \fIall\fR
the cached data.  The argument may be a function name or a reference
to a function.  For finer control over when data is discarded or
expired, see the documentation for \f(CW\*(C`Memoize::Expire\*(C'\fR, included in
this package.
.PP
Note that if the cache is a tied hash, \f(CW\*(C`flush_cache\*(C'\fR will attempt to
invoke the \f(CW\*(C`CLEAR\*(C'\fR method on the hash.  If there is no \f(CW\*(C`CLEAR\*(C'\fR
method, this will cause a run-time error.
.PP
An alternative approach to cache flushing is to use the \f(CW\*(C`HASH\*(C'\fR option
(see above) to request that \f(CW\*(C`Memoize\*(C'\fR use a particular hash variable
as its cache.  Then you can examine or modify the hash at any time in
any way you desire.  You may flush the cache by using \f(CW\*(C`%hash = ()\*(C'\fR.
.SH "CAVEATS"
.IX Header "CAVEATS"
Memoization is not a cure-all:
.IP "\(bu" 4
Do not memoize a function whose behavior depends on program
state other than its own arguments, such as global variables, the time
of day, or file input.  These functions will not produce correct
results when memoized.  For a particularly easy example:
.Sp
.Vb 3
\&        sub f {
\&          time;
\&        }
.Ve
.Sp
This function takes no arguments, and as far as \f(CW\*(C`Memoize\*(C'\fR is
concerned, it always returns the same result.  \f(CW\*(C`Memoize\*(C'\fR is wrong, of
course, and the memoized version of this function will call \f(CW\*(C`time\*(C'\fR once
to get the current time, and it will return that same time
every time you call it after that.
.IP "\(bu" 4
Do not memoize a function with side effects.
.Sp
.Vb 5
\&        sub f {
\&          my ($a, $b) = @_;
\&          my $s = $a + $b;
\&          print "$a + $b = $s.\en";
\&        }
.Ve
.Sp
This function accepts two arguments, adds them, and prints their sum.
Its return value is the numuber of characters it printed, but you
probably didn't care about that.  But \f(CW\*(C`Memoize\*(C'\fR doesn't understand
that.  If you memoize this function, you will get the result you
expect the first time you ask it to print the sum of 2 and 3, but
subsequent calls will return 1 (the return value of
\&\f(CW\*(C`print\*(C'\fR) without actually printing anything.
.IP "\(bu" 4
Do not memoize a function that returns a data structure that is
modified by its caller.
.Sp
Consider these functions:  \f(CW\*(C`getusers\*(C'\fR returns a list of users somehow,
and then \f(CW\*(C`main\*(C'\fR throws away the first user on the list and prints the
rest:
.Sp
.Vb 7
\&        sub main {
\&          my $userlist = getusers();
\&          shift @$userlist;
\&          foreach $u (@$userlist) {
\&            print "User $u\en";
\&          }
\&        }
\&
\&        sub getusers {
\&          my @users;
\&          # Do something to get a list of users;
\&          \e@users;  # Return reference to list.
\&        }
.Ve
.Sp
If you memoize \f(CW\*(C`getusers\*(C'\fR here, it will work right exactly once.  The
reference to the users list will be stored in the memo table.  \f(CW\*(C`main\*(C'\fR
will discard the first element from the referenced list.  The next
time you invoke \f(CW\*(C`main\*(C'\fR, \f(CW\*(C`Memoize\*(C'\fR will not call \f(CW\*(C`getusers\*(C'\fR; it will
just return the same reference to the same list it got last time.  But
this time the list has already had its head removed; \f(CW\*(C`main\*(C'\fR will
erroneously remove another element from it.  The list will get shorter
and shorter every time you call \f(CW\*(C`main\*(C'\fR.
.Sp
Similarly, this:
.Sp
.Vb 3
\&        $u1 = getusers();    
\&        $u2 = getusers();    
\&        pop @$u1;
.Ve
.Sp
will modify \f(CW$u2\fR as well as \f(CW$u1\fR, because both variables are references
to the same array.  Had \f(CW\*(C`getusers\*(C'\fR not been memoized, \f(CW$u1\fR and \f(CW$u2\fR
would have referred to different arrays.
.IP "\(bu" 4
Do not memoize a very simple function.
.Sp
Recently someone mentioned to me that the Memoize module made his
program run slower instead of faster.  It turned out that he was
memoizing the following function:
.Sp
.Vb 3
\&    sub square {
\&      $_[0] * $_[0];
\&    }
.Ve
.Sp
I pointed out that \f(CW\*(C`Memoize\*(C'\fR uses a hash, and that looking up a
number in the hash is necessarily going to take a lot longer than a
single multiplication.  There really is no way to speed up the
\&\f(CW\*(C`square\*(C'\fR function.
.Sp
Memoization is not magical.
.SH "PERSISTENT CACHE SUPPORT"
.IX Header "PERSISTENT CACHE SUPPORT"
You can tie the cache tables to any sort of tied hash that you want
to, as long as it supports \f(CW\*(C`TIEHASH\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, and
\&\f(CW\*(C`EXISTS\*(C'\fR.  For example,
.PP
.Vb 2
\&        tie my %cache => \*(AqGDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
works just fine.  For some storage methods, you need a little glue.
.PP
\&\f(CW\*(C`SDBM_File\*(C'\fR doesn't supply an \f(CW\*(C`EXISTS\*(C'\fR method, so included in this
package is a glue module called \f(CW\*(C`Memoize::SDBM_File\*(C'\fR which does
provide one.  Use this instead of plain \f(CW\*(C`SDBM_File\*(C'\fR to store your
cache table on disk in an \f(CW\*(C`SDBM_File\*(C'\fR database:
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::SDBM_File\*(Aq, $filename, O_RDWR|O_CREAT, 0666;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
\&\f(CW\*(C`NDBM_File\*(C'\fR has the same problem and the same solution.  (Use
\&\f(CW\*(C`Memoize::NDBM_File instead of plain NDBM_File.\*(C'\fR)
.PP
\&\f(CW\*(C`Storable\*(C'\fR isn't a tied hash class at all.  You can use it to store a
hash to disk and retrieve it again, but you can't modify the hash while
it's on the disk.  So if you want to store your cache table in a
\&\f(CW\*(C`Storable\*(C'\fR database, use \f(CW\*(C`Memoize::Storable\*(C'\fR, which puts a hashlike
front-end onto \f(CW\*(C`Storable\*(C'\fR.  The hash table is actually kept in
memory, and is loaded from your \f(CW\*(C`Storable\*(C'\fR file at the time you
memoize the function, and stored back at the time you unmemoize the
function (or when your program exits):
.PP
.Vb 2
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
\&
\&        tie my %cache => \*(AqMemoize::Storable\*(Aq, $filename, \*(Aqnstore\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
Include the `nstore' option to have the \f(CW\*(C`Storable\*(C'\fR database written
in `network order'.  (See Storable for more details about this.)
.PP
The \f(CW\*(C`flush_cache()\*(C'\fR function will raise a run-time error unless the
tied package provides a \f(CW\*(C`CLEAR\*(C'\fR method.
.SH "EXPIRATION SUPPORT"
.IX Header "EXPIRATION SUPPORT"
See Memoize::Expire, which is a plug-in module that adds expiration
functionality to Memoize.  If you don't like the kinds of policies
that Memoize::Expire implements, it is easy to write your own plug-in
module to implement whatever policy you desire.  Memoize comes with
several examples.  An expiration manager that implements a \s-1LRU\s0 policy
is available on \s-1CPAN\s0 as Memoize::ExpireLRU.
.SH "BUGS"
.IX Header "BUGS"
The test suite is much better, but always needs improvement.
.PP
There is some problem with the way \f(CW\*(C`goto &f\*(C'\fR works under threaded
Perl, perhaps because of the lexical scoping of \f(CW@_\fR.  This is a bug
in Perl, and until it is resolved, memoized functions will see a
slightly different \f(CW\*(C`caller()\*(C'\fR and will perform a little more slowly
on threaded perls than unthreaded perls.
.PP
Some versions of \f(CW\*(C`DB_File\*(C'\fR won't let you store data under a key of
length 0.  That means that if you have a function \f(CW\*(C`f\*(C'\fR which you
memoized and the cache is in a \f(CW\*(C`DB_File\*(C'\fR database, then the value of
\&\f(CW\*(C`f()\*(C'\fR (\f(CW\*(C`f\*(C'\fR called with no arguments) will not be memoized.  If this
is a big problem, you can supply a normalizer function that prepends
\&\f(CW"x"\fR to every key.
.SH "MAILING LIST"
.IX Header "MAILING LIST"
To join a very low-traffic mailing list for announcements about
\&\f(CW\*(C`Memoize\*(C'\fR, send an empty note to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (\f(CW\*(C`mjd\-perl\-memoize+@plover.com\*(C'\fR), Plover Systems co.
.PP
See the \f(CW\*(C`Memoize.pm\*(C'\fR Page at http://perl.plover.com/Memoize/
for news and upgrades.  Near this page, at
http://perl.plover.com/MiniMemoize/ there is an article about
memoization and about the internals of Memoize that appeared in The
Perl Journal, issue #13.  (This article is also included in the
Memoize distribution as `article.html'.)
.PP
The author's book \fIHigher-Order Perl\fR (2005, \s-1ISBN 1558607013,\s0 published
by Morgan Kaufmann) discusses memoization (and many other 
topics) in tremendous detail. It is available on-line for free.
For more information, visit http://hop.perl.plover.com/ .
.PP
To join a mailing list for announcements about \f(CW\*(C`Memoize\*(C'\fR, send an
empty message to \f(CW\*(C`mjd\-perl\-memoize\-request@plover.com\*(C'\fR.  This mailing
list is for announcements only and has extremely low traffic\-\-\-fewer than
two messages per year.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1998, 1999, 2000, 2001, 2012  by Mark Jason Dominus
.PP
This library is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.
.SH "THANK YOU"
.IX Header "THANK YOU"
Many thanks to Florian Ragwitz for administration and packaging
assistance, to John Tromp for bug reports, to Jonathan Roy for bug reports
and suggestions, to Michael Schwern for other bug reports and patches,
to Mike Cariaso for helping me to figure out the Right Thing to Do
About Expiration, to Joshua Gerth, Joshua Chamas, Jonathan Roy
(again), Mark D. Anderson, and Andrew Johnson for more suggestions
about expiration, to Brent Powers for the Memoize::ExpireLRU module,
to Ariel Scolnicov for delightful messages about the Fibonacci
function, to Dion Almaer for thought-provoking suggestions about the
default normalizer, to Walt Mankowski and Kurt Starsinic for much help
investigating problems under threaded Perl, to Alex Dudkevich for
reporting the bug in prototyped functions and for checking my patch,
to Tony Bass for many helpful suggestions, to Jonathan Roy (again) for
finding a use for \f(CW\*(C`unmemoize()\*(C'\fR, to Philippe Verdret for enlightening
discussion of \f(CW\*(C`Hook::PrePostCall\*(C'\fR, to Nat Torkington for advice I
ignored, to Chris Nandor for portability advice, to Randal Schwartz
for suggesting the '\f(CW\*(C`flush_cache\*(C'\fR function, and to Jenda Krynicky for
being a light in the world.
.PP
Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including
this module in the core and for his patient and helpful guidance
during the integration process.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 751:" 4
.IX Item "Around line 751:"
You forgot a '=back' before '=head3'
.IP "Around line 800:" 4
.IX Item "Around line 800:"
=back without =over
                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::AnyDBM_File.3pm                     0100644 0001750 0001750 00000010117 12566207460 025024  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::AnyDBM_File 3pm"
.TH Memoize::AnyDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::AnyDBM_File \- glue to provide EXISTS for AnyDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::AnyDBM_File5.16.3pm                 0100644 0001750 0001750 00000007576 12566207437 025361  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::AnyDBM_File 3pm"
.TH Memoize::AnyDBM_File 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::AnyDBM_File \- glue to provide EXISTS for AnyDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::AnyDBM_File5.18.3pm                 0100644 0001750 0001750 00000010117 12566207460 025340  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::AnyDBM_File 3pm"
.TH Memoize::AnyDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::AnyDBM_File \- glue to provide EXISTS for AnyDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Expire.3pm                          0100644 0001750 0001750 00000032077 12566207460 024260  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Expire 3pm"
.TH Memoize::Expire 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Expire \- Plug\-in module for automatic expiration of memoized values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Memoize;
\&  use Memoize::Expire;
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq,
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses;
\&
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache ];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Memoize::Expire is a plug-in module for Memoize.  It allows the cached
values for memoized functions to expire automatically.  This manual
assumes you are already familiar with the Memoize module.  If not, you
should study that manual carefully first, paying particular attention
to the \s-1HASH\s0 feature.
.PP
Memoize::Expire is a layer of software that you can insert in between
Memoize itself and whatever underlying package implements the cache.
The layer presents a hash variable whose values expire whenever they
get too old, have been used too often, or both. You tell \f(CW\*(C`Memoize\*(C'\fR to
use this forgetful hash as its cache instead of the default, which is
an ordinary hash.
.PP
To specify a real-time timeout, supply the \f(CW\*(C`LIFETIME\*(C'\fR option with a
numeric value.  Cached data will expire after this many seconds, and
will be looked up afresh when it expires.  When a data item is looked
up afresh, its lifetime is reset.
.PP
If you specify \f(CW\*(C`NUM_USES\*(C'\fR with an argument of \fIn\fR, then each cached
data item will be discarded and looked up afresh after the \fIn\fRth time
you access it.  When a data item is looked up afresh, its number of
uses is reset.
.PP
If you specify both arguments, data will be discarded from the cache
when either expiration condition holds.
.PP
Memoize::Expire uses a real hash internally to store the cached data.
You can use the \f(CW\*(C`HASH\*(C'\fR option to Memoize::Expire to supply a tied
hash in place of the ordinary hash that Memoize::Expire will normally
use.  You can use this feature to add Memoize::Expire as a layer in
between a persistent disk hash and Memoize.  If you do this, you get a
persistent disk cache whose entries expire automatically.  For
example:
.PP
.Vb 7
\&  #   Memoize
\&  #      |
\&  #   Memoize::Expire  enforces data expiration policy
\&  #      |
\&  #   DB_File  implements persistence of data in a disk file
\&  #      |
\&  #   Disk file
\&
\&  use Memoize;
\&  use Memoize::Expire;
\&  use DB_File;
\&
\&  # Set up persistence
\&  tie my %disk_cache => \*(AqDB_File\*(Aq, $filename, O_CREAT|O_RDWR, 0666];
\&
\&  # Set up expiration policy, supplying persistent hash as a target
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq, 
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses,
\&                     HASH => \e%disk_cache; 
\&
\&  # Set up memoization, supplying expiring persistent hash for cache
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [ HASH => \e%cache ];
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
There is nothing special about Memoize::Expire.  It is just an
example.  If you don't like the policy that it implements, you are
free to write your own expiration policy module that implements
whatever policy you desire.  Here is how to do that.  Let us suppose
that your module will be named MyExpirePolicy.
.PP
Short summary: You need to create a package that defines four methods:
.IP " \s-1TIEHASH\s0" 4
.IX Item " TIEHASH"
Construct and return cache object.
.IP " \s-1EXISTS\s0" 4
.IX Item " EXISTS"
Given a function argument, is the corresponding function value in the
cache, and if so, is it fresh enough to use?
.IP " \s-1FETCH\s0" 4
.IX Item " FETCH"
Given a function argument, look up the corresponding function value in
the cache and return it.
.IP " \s-1STORE\s0" 4
.IX Item " STORE"
Given a function argument and the corresponding function value, store
them into the cache.
.IP " \s-1CLEAR\s0" 4
.IX Item " CLEAR"
(Optional.)  Flush the cache completely.
.PP
The user who wants the memoization cache to be expired according to
your policy will say so by writing
.PP
.Vb 2
\&  tie my %cache => \*(AqMyExpirePolicy\*(Aq, args...;
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
This will invoke \f(CW\*(C`MyExpirePolicy\->TIEHASH(args)\*(C'\fR.
MyExpirePolicy::TIEHASH should do whatever is appropriate to set up
the cache, and it should return the cache object to the caller.
.PP
For example, MyExpirePolicy::TIEHASH might create an object that
contains a regular Perl hash (which it will to store the cached
values) and some extra information about the arguments and how old the
data is and things like that.  Let us call this object `C'.
.PP
When Memoize needs to check to see if an entry is in the cache
already, it will invoke \f(CW\*(C`C\->EXISTS(key)\*(C'\fR.  \f(CW\*(C`key\*(C'\fR is the normalized
function argument.  MyExpirePolicy::EXISTS should return 0 if the key
is not in the cache, or if it has expired, and 1 if an unexpired value
is in the cache.  It should \fInot\fR return \f(CW\*(C`undef\*(C'\fR, because there is a
bug in some versions of Perl that will cause a spurious \s-1FETCH\s0 if the
\&\s-1EXISTS\s0 method returns \f(CW\*(C`undef\*(C'\fR.
.PP
If your \s-1EXISTS\s0 function returns true, Memoize will try to fetch the
cached value by invoking \f(CW\*(C`C\->FETCH(key)\*(C'\fR.  MyExpirePolicy::FETCH should
return the cached value.  Otherwise, Memoize will call the memoized
function to compute the appropriate value, and will store it into the
cache by calling \f(CW\*(C`C\->STORE(key, value)\*(C'\fR.
.PP
Here is a very brief example of a policy module that expires each
cache item after ten seconds.
.PP
.Vb 1
\&        package Memoize::TenSecondExpire;
\&
\&        sub TIEHASH {
\&          my ($package, %args) = @_;
\&          my $cache = $args{HASH} || {};
\&          bless $cache => $package;
\&        }
\&
\&        sub EXISTS {
\&          my ($cache, $key) = @_;
\&          if (exists $cache\->{$key} && 
\&              $cache\->{$key}{EXPIRE_TIME} > time) {
\&            return 1
\&          } else {
\&            return 0;  # Do NOT return \`undef\*(Aq here.
\&          }
\&        }
\&
\&        sub FETCH {
\&          my ($cache, $key) = @_;
\&          return $cache\->{$key}{VALUE};
\&        }
\&
\&        sub STORE {
\&          my ($cache, $key, $newvalue) = @_;
\&          $cache\->{$key}{VALUE} = $newvalue;
\&          $cache\->{$key}{EXPIRE_TIME} = time + 10;
\&        }
.Ve
.PP
To use this expiration policy, the user would say
.PP
.Vb 3
\&        use Memoize;
\&        tie my %cache10sec => \*(AqMemoize::TenSecondExpire\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache10sec];
.Ve
.PP
Memoize would then call \f(CW\*(C`function\*(C'\fR whenever a cached value was
entirely absent or was older than ten seconds.
.PP
You should always support a \f(CW\*(C`HASH\*(C'\fR argument to \f(CW\*(C`TIEHASH\*(C'\fR that ties
the underlying cache so that the user can specify that the cache is
also persistent or that it has some other interesting semantics.  The
example above demonstrates how to do this, as does \f(CW\*(C`Memoize::Expire\*(C'\fR.
.PP
Another sample module, Memoize::Saves, is available in a separate
distribution on \s-1CPAN. \s0 It implements a policy that allows you to
specify that certain function values would always be looked up afresh.
See the documentation for details.
.SH "ALTERNATIVES"
.IX Header "ALTERNATIVES"
Brent Powers has a \f(CW\*(C`Memoize::ExpireLRU\*(C'\fR module that was designed to
work with Memoize and provides expiration of least-recently-used data.
The cache is held at a fixed number of entries, and when new data
comes in, the least-recently used data is expired.  See
<http://search.cpan.org/search?mode=module&query=ExpireLRU>.
.PP
Joshua Chamas's Tie::Cache module may be useful as an expiration
manager.  (If you try this, let me know how it works out.)
.PP
If you develop any useful expiration managers that you think should be
distributed with Memoize, please let me know.
.SH "CAVEATS"
.IX Header "CAVEATS"
This module is experimental, and may contain bugs.  Please report bugs
to the address below.
.PP
Number-of-uses is stored as a 16\-bit unsigned integer, so can't exceed
65535.
.PP
Because of clock granularity, expiration times may occur up to one
second sooner than you expect.  For example, suppose you store a value
with a lifetime of ten seconds, and you store it at 12:00:00.998 on a
certain day.  Memoize will look at the clock and see 12:00:00.  Then
9.01 seconds later, at 12:00:10.008 you try to read it back.  Memoize
will look at the clock and see 12:00:10 and conclude that the value
has expired.  This will probably not occur if you have
\&\f(CW\*(C`Time::HiRes\*(C'\fR installed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (mjd\-perl\-memoize+@plover.com)
.PP
Mike Cariaso provided valuable insight into the best way to solve this
problem.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1)
.PP
The Memoize man page.
.PP
http://www.plover.com/~mjd/perl/Memoize/  (for news and updates)
.PP
I maintain a mailing list on which I occasionally announce new
versions of Memoize.  The list is for announcements only, not
discussion.  To join, send an empty message to
mjd\-perl\-memoize\-request@Plover.com.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Expire5.16.3pm                      0100644 0001750 0001750 00000031556 12566207437 024577  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Expire 3pm"
.TH Memoize::Expire 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Expire \- Plug\-in module for automatic expiration of memoized values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Memoize;
\&  use Memoize::Expire;
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq,
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses;
\&
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache ];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Memoize::Expire is a plug-in module for Memoize.  It allows the cached
values for memoized functions to expire automatically.  This manual
assumes you are already familiar with the Memoize module.  If not, you
should study that manual carefully first, paying particular attention
to the \s-1HASH\s0 feature.
.PP
Memoize::Expire is a layer of software that you can insert in between
Memoize itself and whatever underlying package implements the cache.
The layer presents a hash variable whose values expire whenever they
get too old, have been used too often, or both. You tell \f(CW\*(C`Memoize\*(C'\fR to
use this forgetful hash as its cache instead of the default, which is
an ordinary hash.
.PP
To specify a real-time timeout, supply the \f(CW\*(C`LIFETIME\*(C'\fR option with a
numeric value.  Cached data will expire after this many seconds, and
will be looked up afresh when it expires.  When a data item is looked
up afresh, its lifetime is reset.
.PP
If you specify \f(CW\*(C`NUM_USES\*(C'\fR with an argument of \fIn\fR, then each cached
data item will be discarded and looked up afresh after the \fIn\fRth time
you access it.  When a data item is looked up afresh, its number of
uses is reset.
.PP
If you specify both arguments, data will be discarded from the cache
when either expiration condition holds.
.PP
Memoize::Expire uses a real hash internally to store the cached data.
You can use the \f(CW\*(C`HASH\*(C'\fR option to Memoize::Expire to supply a tied
hash in place of the ordinary hash that Memoize::Expire will normally
use.  You can use this feature to add Memoize::Expire as a layer in
between a persistent disk hash and Memoize.  If you do this, you get a
persistent disk cache whose entries expire automatically.  For
example:
.PP
.Vb 7
\&  #   Memoize
\&  #      |
\&  #   Memoize::Expire  enforces data expiration policy
\&  #      |
\&  #   DB_File  implements persistence of data in a disk file
\&  #      |
\&  #   Disk file
\&
\&  use Memoize;
\&  use Memoize::Expire;
\&  use DB_File;
\&
\&  # Set up persistence
\&  tie my %disk_cache => \*(AqDB_File\*(Aq, $filename, O_CREAT|O_RDWR, 0666];
\&
\&  # Set up expiration policy, supplying persistent hash as a target
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq, 
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses,
\&                     HASH => \e%disk_cache; 
\&
\&  # Set up memoization, supplying expiring persistent hash for cache
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [ HASH => \e%cache ];
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
There is nothing special about Memoize::Expire.  It is just an
example.  If you don't like the policy that it implements, you are
free to write your own expiration policy module that implements
whatever policy you desire.  Here is how to do that.  Let us suppose
that your module will be named MyExpirePolicy.
.PP
Short summary: You need to create a package that defines four methods:
.IP " \s-1TIEHASH\s0" 4
.IX Item " TIEHASH"
Construct and return cache object.
.IP " \s-1EXISTS\s0" 4
.IX Item " EXISTS"
Given a function argument, is the corresponding function value in the
cache, and if so, is it fresh enough to use?
.IP " \s-1FETCH\s0" 4
.IX Item " FETCH"
Given a function argument, look up the corresponding function value in
the cache and return it.
.IP " \s-1STORE\s0" 4
.IX Item " STORE"
Given a function argument and the corresponding function value, store
them into the cache.
.IP " \s-1CLEAR\s0" 4
.IX Item " CLEAR"
(Optional.)  Flush the cache completely.
.PP
The user who wants the memoization cache to be expired according to
your policy will say so by writing
.PP
.Vb 2
\&  tie my %cache => \*(AqMyExpirePolicy\*(Aq, args...;
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
This will invoke \f(CW\*(C`MyExpirePolicy\->TIEHASH(args)\*(C'\fR.
MyExpirePolicy::TIEHASH should do whatever is appropriate to set up
the cache, and it should return the cache object to the caller.
.PP
For example, MyExpirePolicy::TIEHASH might create an object that
contains a regular Perl hash (which it will to store the cached
values) and some extra information about the arguments and how old the
data is and things like that.  Let us call this object `C'.
.PP
When Memoize needs to check to see if an entry is in the cache
already, it will invoke \f(CW\*(C`C\->EXISTS(key)\*(C'\fR.  \f(CW\*(C`key\*(C'\fR is the normalized
function argument.  MyExpirePolicy::EXISTS should return 0 if the key
is not in the cache, or if it has expired, and 1 if an unexpired value
is in the cache.  It should \fInot\fR return \f(CW\*(C`undef\*(C'\fR, because there is a
bug in some versions of Perl that will cause a spurious \s-1FETCH\s0 if the
\&\s-1EXISTS\s0 method returns \f(CW\*(C`undef\*(C'\fR.
.PP
If your \s-1EXISTS\s0 function returns true, Memoize will try to fetch the
cached value by invoking \f(CW\*(C`C\->FETCH(key)\*(C'\fR.  MyExpirePolicy::FETCH should
return the cached value.  Otherwise, Memoize will call the memoized
function to compute the appropriate value, and will store it into the
cache by calling \f(CW\*(C`C\->STORE(key, value)\*(C'\fR.
.PP
Here is a very brief example of a policy module that expires each
cache item after ten seconds.
.PP
.Vb 1
\&        package Memoize::TenSecondExpire;
\&
\&        sub TIEHASH {
\&          my ($package, %args) = @_;
\&          my $cache = $args{HASH} || {};
\&          bless $cache => $package;
\&        }
\&
\&        sub EXISTS {
\&          my ($cache, $key) = @_;
\&          if (exists $cache\->{$key} && 
\&              $cache\->{$key}{EXPIRE_TIME} > time) {
\&            return 1
\&          } else {
\&            return 0;  # Do NOT return \`undef\*(Aq here.
\&          }
\&        }
\&
\&        sub FETCH {
\&          my ($cache, $key) = @_;
\&          return $cache\->{$key}{VALUE};
\&        }
\&
\&        sub STORE {
\&          my ($cache, $key, $newvalue) = @_;
\&          $cache\->{$key}{VALUE} = $newvalue;
\&          $cache\->{$key}{EXPIRE_TIME} = time + 10;
\&        }
.Ve
.PP
To use this expiration policy, the user would say
.PP
.Vb 3
\&        use Memoize;
\&        tie my %cache10sec => \*(AqMemoize::TenSecondExpire\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache10sec];
.Ve
.PP
Memoize would then call \f(CW\*(C`function\*(C'\fR whenever a cached value was
entirely absent or was older than ten seconds.
.PP
You should always support a \f(CW\*(C`HASH\*(C'\fR argument to \f(CW\*(C`TIEHASH\*(C'\fR that ties
the underlying cache so that the user can specify that the cache is
also persistent or that it has some other interesting semantics.  The
example above demonstrates how to do this, as does \f(CW\*(C`Memoize::Expire\*(C'\fR.
.PP
Another sample module, Memoize::Saves, is available in a separate
distribution on \s-1CPAN\s0.  It implements a policy that allows you to
specify that certain function values would always be looked up afresh.
See the documentation for details.
.SH "ALTERNATIVES"
.IX Header "ALTERNATIVES"
Brent Powers has a \f(CW\*(C`Memoize::ExpireLRU\*(C'\fR module that was designed to
work with Memoize and provides expiration of least-recently-used data.
The cache is held at a fixed number of entries, and when new data
comes in, the least-recently used data is expired.  See
<http://search.cpan.org/search?mode=module&query=ExpireLRU>.
.PP
Joshua Chamas's Tie::Cache module may be useful as an expiration
manager.  (If you try this, let me know how it works out.)
.PP
If you develop any useful expiration managers that you think should be
distributed with Memoize, please let me know.
.SH "CAVEATS"
.IX Header "CAVEATS"
This module is experimental, and may contain bugs.  Please report bugs
to the address below.
.PP
Number-of-uses is stored as a 16\-bit unsigned integer, so can't exceed
65535.
.PP
Because of clock granularity, expiration times may occur up to one
second sooner than you expect.  For example, suppose you store a value
with a lifetime of ten seconds, and you store it at 12:00:00.998 on a
certain day.  Memoize will look at the clock and see 12:00:00.  Then
9.01 seconds later, at 12:00:10.008 you try to read it back.  Memoize
will look at the clock and see 12:00:10 and conclude that the value
has expired.  This will probably not occur if you have
\&\f(CW\*(C`Time::HiRes\*(C'\fR installed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (mjd\-perl\-memoize+@plover.com)
.PP
Mike Cariaso provided valuable insight into the best way to solve this
problem.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1)
.PP
The Memoize man page.
.PP
http://www.plover.com/~mjd/perl/Memoize/  (for news and updates)
.PP
I maintain a mailing list on which I occasionally announce new
versions of Memoize.  The list is for announcements only, not
discussion.  To join, send an empty message to
mjd\-perl\-memoize\-request@Plover.com.
                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Expire5.18.3pm                      0100644 0001750 0001750 00000032077 12566207460 024574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Expire 3pm"
.TH Memoize::Expire 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Expire \- Plug\-in module for automatic expiration of memoized values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Memoize;
\&  use Memoize::Expire;
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq,
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses;
\&
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache ];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Memoize::Expire is a plug-in module for Memoize.  It allows the cached
values for memoized functions to expire automatically.  This manual
assumes you are already familiar with the Memoize module.  If not, you
should study that manual carefully first, paying particular attention
to the \s-1HASH\s0 feature.
.PP
Memoize::Expire is a layer of software that you can insert in between
Memoize itself and whatever underlying package implements the cache.
The layer presents a hash variable whose values expire whenever they
get too old, have been used too often, or both. You tell \f(CW\*(C`Memoize\*(C'\fR to
use this forgetful hash as its cache instead of the default, which is
an ordinary hash.
.PP
To specify a real-time timeout, supply the \f(CW\*(C`LIFETIME\*(C'\fR option with a
numeric value.  Cached data will expire after this many seconds, and
will be looked up afresh when it expires.  When a data item is looked
up afresh, its lifetime is reset.
.PP
If you specify \f(CW\*(C`NUM_USES\*(C'\fR with an argument of \fIn\fR, then each cached
data item will be discarded and looked up afresh after the \fIn\fRth time
you access it.  When a data item is looked up afresh, its number of
uses is reset.
.PP
If you specify both arguments, data will be discarded from the cache
when either expiration condition holds.
.PP
Memoize::Expire uses a real hash internally to store the cached data.
You can use the \f(CW\*(C`HASH\*(C'\fR option to Memoize::Expire to supply a tied
hash in place of the ordinary hash that Memoize::Expire will normally
use.  You can use this feature to add Memoize::Expire as a layer in
between a persistent disk hash and Memoize.  If you do this, you get a
persistent disk cache whose entries expire automatically.  For
example:
.PP
.Vb 7
\&  #   Memoize
\&  #      |
\&  #   Memoize::Expire  enforces data expiration policy
\&  #      |
\&  #   DB_File  implements persistence of data in a disk file
\&  #      |
\&  #   Disk file
\&
\&  use Memoize;
\&  use Memoize::Expire;
\&  use DB_File;
\&
\&  # Set up persistence
\&  tie my %disk_cache => \*(AqDB_File\*(Aq, $filename, O_CREAT|O_RDWR, 0666];
\&
\&  # Set up expiration policy, supplying persistent hash as a target
\&  tie my %cache => \*(AqMemoize::Expire\*(Aq, 
\&                     LIFETIME => $lifetime,    # In seconds
\&                     NUM_USES => $n_uses,
\&                     HASH => \e%disk_cache; 
\&
\&  # Set up memoization, supplying expiring persistent hash for cache
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [ HASH => \e%cache ];
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
There is nothing special about Memoize::Expire.  It is just an
example.  If you don't like the policy that it implements, you are
free to write your own expiration policy module that implements
whatever policy you desire.  Here is how to do that.  Let us suppose
that your module will be named MyExpirePolicy.
.PP
Short summary: You need to create a package that defines four methods:
.IP " \s-1TIEHASH\s0" 4
.IX Item " TIEHASH"
Construct and return cache object.
.IP " \s-1EXISTS\s0" 4
.IX Item " EXISTS"
Given a function argument, is the corresponding function value in the
cache, and if so, is it fresh enough to use?
.IP " \s-1FETCH\s0" 4
.IX Item " FETCH"
Given a function argument, look up the corresponding function value in
the cache and return it.
.IP " \s-1STORE\s0" 4
.IX Item " STORE"
Given a function argument and the corresponding function value, store
them into the cache.
.IP " \s-1CLEAR\s0" 4
.IX Item " CLEAR"
(Optional.)  Flush the cache completely.
.PP
The user who wants the memoization cache to be expired according to
your policy will say so by writing
.PP
.Vb 2
\&  tie my %cache => \*(AqMyExpirePolicy\*(Aq, args...;
\&  memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache];
.Ve
.PP
This will invoke \f(CW\*(C`MyExpirePolicy\->TIEHASH(args)\*(C'\fR.
MyExpirePolicy::TIEHASH should do whatever is appropriate to set up
the cache, and it should return the cache object to the caller.
.PP
For example, MyExpirePolicy::TIEHASH might create an object that
contains a regular Perl hash (which it will to store the cached
values) and some extra information about the arguments and how old the
data is and things like that.  Let us call this object `C'.
.PP
When Memoize needs to check to see if an entry is in the cache
already, it will invoke \f(CW\*(C`C\->EXISTS(key)\*(C'\fR.  \f(CW\*(C`key\*(C'\fR is the normalized
function argument.  MyExpirePolicy::EXISTS should return 0 if the key
is not in the cache, or if it has expired, and 1 if an unexpired value
is in the cache.  It should \fInot\fR return \f(CW\*(C`undef\*(C'\fR, because there is a
bug in some versions of Perl that will cause a spurious \s-1FETCH\s0 if the
\&\s-1EXISTS\s0 method returns \f(CW\*(C`undef\*(C'\fR.
.PP
If your \s-1EXISTS\s0 function returns true, Memoize will try to fetch the
cached value by invoking \f(CW\*(C`C\->FETCH(key)\*(C'\fR.  MyExpirePolicy::FETCH should
return the cached value.  Otherwise, Memoize will call the memoized
function to compute the appropriate value, and will store it into the
cache by calling \f(CW\*(C`C\->STORE(key, value)\*(C'\fR.
.PP
Here is a very brief example of a policy module that expires each
cache item after ten seconds.
.PP
.Vb 1
\&        package Memoize::TenSecondExpire;
\&
\&        sub TIEHASH {
\&          my ($package, %args) = @_;
\&          my $cache = $args{HASH} || {};
\&          bless $cache => $package;
\&        }
\&
\&        sub EXISTS {
\&          my ($cache, $key) = @_;
\&          if (exists $cache\->{$key} && 
\&              $cache\->{$key}{EXPIRE_TIME} > time) {
\&            return 1
\&          } else {
\&            return 0;  # Do NOT return \`undef\*(Aq here.
\&          }
\&        }
\&
\&        sub FETCH {
\&          my ($cache, $key) = @_;
\&          return $cache\->{$key}{VALUE};
\&        }
\&
\&        sub STORE {
\&          my ($cache, $key, $newvalue) = @_;
\&          $cache\->{$key}{VALUE} = $newvalue;
\&          $cache\->{$key}{EXPIRE_TIME} = time + 10;
\&        }
.Ve
.PP
To use this expiration policy, the user would say
.PP
.Vb 3
\&        use Memoize;
\&        tie my %cache10sec => \*(AqMemoize::TenSecondExpire\*(Aq;
\&        memoize \*(Aqfunction\*(Aq, SCALAR_CACHE => [HASH => \e%cache10sec];
.Ve
.PP
Memoize would then call \f(CW\*(C`function\*(C'\fR whenever a cached value was
entirely absent or was older than ten seconds.
.PP
You should always support a \f(CW\*(C`HASH\*(C'\fR argument to \f(CW\*(C`TIEHASH\*(C'\fR that ties
the underlying cache so that the user can specify that the cache is
also persistent or that it has some other interesting semantics.  The
example above demonstrates how to do this, as does \f(CW\*(C`Memoize::Expire\*(C'\fR.
.PP
Another sample module, Memoize::Saves, is available in a separate
distribution on \s-1CPAN. \s0 It implements a policy that allows you to
specify that certain function values would always be looked up afresh.
See the documentation for details.
.SH "ALTERNATIVES"
.IX Header "ALTERNATIVES"
Brent Powers has a \f(CW\*(C`Memoize::ExpireLRU\*(C'\fR module that was designed to
work with Memoize and provides expiration of least-recently-used data.
The cache is held at a fixed number of entries, and when new data
comes in, the least-recently used data is expired.  See
<http://search.cpan.org/search?mode=module&query=ExpireLRU>.
.PP
Joshua Chamas's Tie::Cache module may be useful as an expiration
manager.  (If you try this, let me know how it works out.)
.PP
If you develop any useful expiration managers that you think should be
distributed with Memoize, please let me know.
.SH "CAVEATS"
.IX Header "CAVEATS"
This module is experimental, and may contain bugs.  Please report bugs
to the address below.
.PP
Number-of-uses is stored as a 16\-bit unsigned integer, so can't exceed
65535.
.PP
Because of clock granularity, expiration times may occur up to one
second sooner than you expect.  For example, suppose you store a value
with a lifetime of ten seconds, and you store it at 12:00:00.998 on a
certain day.  Memoize will look at the clock and see 12:00:00.  Then
9.01 seconds later, at 12:00:10.008 you try to read it back.  Memoize
will look at the clock and see 12:00:10 and conclude that the value
has expired.  This will probably not occur if you have
\&\f(CW\*(C`Time::HiRes\*(C'\fR installed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark-Jason Dominus (mjd\-perl\-memoize+@plover.com)
.PP
Mike Cariaso provided valuable insight into the best way to solve this
problem.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1)
.PP
The Memoize man page.
.PP
http://www.plover.com/~mjd/perl/Memoize/  (for news and updates)
.PP
I maintain a mailing list on which I occasionally announce new
versions of Memoize.  The list is for announcements only, not
discussion.  To join, send an empty message to
mjd\-perl\-memoize\-request@Plover.com.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireFile.3pm                      0100644 0001750 0001750 00000010102 12566207460 025041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireFile 3pm"
.TH Memoize::ExpireFile 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireFile \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize::Expire.
                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireFile5.16.3pm                  0100644 0001750 0001750 00000007561 12566207437 025376  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireFile 3pm"
.TH Memoize::ExpireFile 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireFile \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize::Expire.
                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireFile5.18.3pm                  0100644 0001750 0001750 00000010102 12566207460 025355  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireFile 3pm"
.TH Memoize::ExpireFile 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireFile \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize::Expire.
                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireTest.3pm                      0100644 0001750 0001750 00000010675 12566207460 025120  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireTest 3pm"
.TH Memoize::ExpireTest 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireTest \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is just for testing expiration semantics.  It's not a very
good example of how to write an expiration module.
.PP
If you are looking for an example, I recommend that you look at the
simple example in the Memoize::Expire documentation, or at the code
for Memoize::Expire itself.
.PP
If you have questions, I will be happy to answer them if you send them
to mjd\-perl\-memoize+@plover.com.
                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireTest5.16.3pm                  0100644 0001750 0001750 00000010354 12566207437 025430  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireTest 3pm"
.TH Memoize::ExpireTest 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireTest \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is just for testing expiration semantics.  It's not a very
good example of how to write an expiration module.
.PP
If you are looking for an example, I recommend that you look at the
simple example in the Memoize::Expire documentation, or at the code
for Memoize::Expire itself.
.PP
If you have questions, I will be happy to answer them if you send them
to mjd\-perl\-memoize+@plover.com.
                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::ExpireTest5.18.3pm                  0100644 0001750 0001750 00000010675 12566207460 025434  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireTest 3pm"
.TH Memoize::ExpireTest 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireTest \- test for Memoize expiration semantics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is just for testing expiration semantics.  It's not a very
good example of how to write an expiration module.
.PP
If you are looking for an example, I recommend that you look at the
simple example in the Memoize::Expire documentation, or at the code
for Memoize::Expire itself.
.PP
If you have questions, I will be happy to answer them if you send them
to mjd\-perl\-memoize+@plover.com.
                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::NDBM_File.3pm                       0100644 0001750 0001750 00000010107 12566207460 024471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::NDBM_File 3pm"
.TH Memoize::NDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::NDBM_File \- glue to provide EXISTS for NDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::NDBM_File5.16.3pm                   0100644 0001750 0001750 00000007566 12566207437 025026  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::NDBM_File 3pm"
.TH Memoize::NDBM_File 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::NDBM_File \- glue to provide EXISTS for NDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::NDBM_File5.18.3pm                   0100644 0001750 0001750 00000010107 12566207460 025005  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::NDBM_File 3pm"
.TH Memoize::NDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::NDBM_File \- glue to provide EXISTS for NDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::SDBM_File.3pm                       0100644 0001750 0001750 00000010107 12566207460 024476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::SDBM_File 3pm"
.TH Memoize::SDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::SDBM_File \- glue to provide EXISTS for SDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::SDBM_File5.16.3pm                   0100644 0001750 0001750 00000007566 12566207437 025033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::SDBM_File 3pm"
.TH Memoize::SDBM_File 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::SDBM_File \- glue to provide EXISTS for SDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::SDBM_File5.18.3pm                   0100644 0001750 0001750 00000010107 12566207460 025012  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::SDBM_File 3pm"
.TH Memoize::SDBM_File 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::SDBM_File \- glue to provide EXISTS for SDBM_File for Storable use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Storable.3pm                        0100644 0001750 0001750 00000010067 12566207460 024572  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Storable 3pm"
.TH Memoize::Storable 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Storable \- store Memoized data in Storable database
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Storable5.16.3pm                    0100644 0001750 0001750 00000007546 12566207437 025120  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Storable 3pm"
.TH Memoize::Storable 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Storable \- store Memoized data in Storable database
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Memoize::Storable5.18.3pm                    0100644 0001750 0001750 00000010067 12566207460 025106  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memoize::Storable 3pm"
.TH Memoize::Storable 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::Storable \- store Memoized data in Storable database
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Memoize.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build.3pm                            0100644 0001750 0001750 00000127010 12566207460 023673  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build 3pm"
.TH Module::Build 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build \- Build and install Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Standard process for building & installing modules:
.PP
.Vb 4
\&  perl Build.PL
\&  ./Build
\&  ./Build test
\&  ./Build install
.Ve
.PP
Or, if you're on a platform (like \s-1DOS\s0 or Windows) that doesn't require
the \*(L"./\*(R" notation, you can do this:
.PP
.Vb 4
\&  perl Build.PL
\&  Build
\&  Build test
\&  Build install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Build\*(C'\fR is a system for building, testing, and installing
Perl modules.  It is meant to be an alternative to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  Developers may alter the behavior of the
module through subclassing in a much more straightforward way than
with \f(CW\*(C`MakeMaker\*(C'\fR.  It also does not require a \f(CW\*(C`make\*(C'\fR on your system
\&\- most of the \f(CW\*(C`Module::Build\*(C'\fR code is pure-perl and written in a very
cross-platform way.  In fact, you don't even need a shell, so even
platforms like MacOS (traditional) can use it fairly easily.  Its only
prerequisites are modules that are included with perl 5.6.0, and it
works fine on perl 5.005 if you can install a few additional modules.
.PP
See \*(L"\s-1MOTIVATIONS\*(R"\s0 for more comparisons between \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR
and \f(CW\*(C`Module::Build\*(C'\fR.
.PP
To install \f(CW\*(C`Module::Build\*(C'\fR, and any other module that uses
\&\f(CW\*(C`Module::Build\*(C'\fR for its installation process, do the following:
.PP
.Vb 4
\&  perl Build.PL       # \*(AqBuild.PL\*(Aq script creates the \*(AqBuild\*(Aq script
\&  ./Build             # Need ./ to ensure we\*(Aqre using this "Build" script
\&  ./Build test        # and not another one that happens to be in the PATH
\&  ./Build install
.Ve
.PP
This illustrates initial configuration and the running of three
\&'actions'.  In this case the actions run are 'build' (the default
action), 'test', and 'install'.  Other actions defined so far include:
.PP
.Vb 10
\&  build                          manifest
\&  clean                          manifest_skip
\&  code                           manpages
\&  config_data                    pardist
\&  diff                           ppd
\&  dist                           ppmdist
\&  distcheck                      prereq_data
\&  distclean                      prereq_report
\&  distdir                        pure_install
\&  distinstall                    realclean
\&  distmeta                       retest
\&  distsign                       skipcheck
\&  disttest                       test
\&  docs                           testall
\&  fakeinstall                    testcover
\&  help                           testdb
\&  html                           testpod
\&  install                        testpodcoverage
\&  installdeps                    versioninstall
.Ve
.PP
You can run the 'help' action for a complete list of actions.
.SH "GUIDE TO DOCUMENTATION"
.IX Header "GUIDE TO DOCUMENTATION"
The documentation for \f(CW\*(C`Module::Build\*(C'\fR is broken up into sections:
.IP "General Usage (Module::Build)" 4
.IX Item "General Usage (Module::Build)"
This is the document you are currently reading. It describes basic
usage and background information.  Its main purpose is to assist the
user who wants to learn how to invoke and control \f(CW\*(C`Module::Build\*(C'\fR
scripts at the command line.
.IP "Authoring Reference (Module::Build::Authoring)" 4
.IX Item "Authoring Reference (Module::Build::Authoring)"
This document describes the structure and organization of
\&\f(CW\*(C`Module::Build\*(C'\fR, and the relevant concepts needed by authors who are
writing \fIBuild.PL\fR scripts for a distribution or controlling
\&\f(CW\*(C`Module::Build\*(C'\fR processes programmatically.
.IP "\s-1API\s0 Reference (Module::Build::API)" 4
.IX Item "API Reference (Module::Build::API)"
This is a reference to the \f(CW\*(C`Module::Build\*(C'\fR \s-1API.\s0
.IP "Cookbook (Module::Build::Cookbook)" 4
.IX Item "Cookbook (Module::Build::Cookbook)"
This document demonstrates how to accomplish many common tasks.  It
covers general command line usage and authoring of \fIBuild.PL\fR
scripts.  Includes working examples.
.SH "ACTIONS"
.IX Header "ACTIONS"
There are some general principles at work here.  First, each task when
building a module is called an \*(L"action\*(R".  These actions are listed
above; they correspond to the building, testing, installing,
packaging, etc., tasks.
.PP
Second, arguments are processed in a very systematic way.  Arguments
are always key=value pairs.  They may be specified at \f(CW\*(C`perl Build.PL\*(C'\fR
time (i.e. \f(CW\*(C`perl Build.PL destdir=/my/secret/place\*(C'\fR), in which case
their values last for the lifetime of the \f(CW\*(C`Build\*(C'\fR script.  They may
also be specified when executing a particular action (i.e.
\&\f(CW\*(C`Build test verbose=1\*(C'\fR), in which case their values last only for the
lifetime of that command.  Per-action command line parameters take
precedence over parameters specified at \f(CW\*(C`perl Build.PL\*(C'\fR time.
.PP
The build process also relies heavily on the \f(CW\*(C`Config.pm\*(C'\fR module.
If the user wishes to override any of the
values in \f(CW\*(C`Config.pm\*(C'\fR, she may specify them like so:
.PP
.Vb 1
\&  perl Build.PL \-\-config cc=gcc \-\-config ld=gcc
.Ve
.PP
The following build actions are provided by default.
.IP "build" 4
.IX Item "build"
[version 0.01]
.Sp
If you run the \f(CW\*(C`Build\*(C'\fR script without any arguments, it runs the
\&\f(CW\*(C`build\*(C'\fR action, which in turn runs the \f(CW\*(C`code\*(C'\fR and \f(CW\*(C`docs\*(C'\fR actions.
.Sp
This is analogous to the \f(CW\*(C`MakeMaker\*(C'\fR \fImake all\fR target.
.IP "clean" 4
.IX Item "clean"
[version 0.01]
.Sp
This action will clean up any files that the build process may have
created, including the \f(CW\*(C`blib/\*(C'\fR directory (but not including the
\&\f(CW\*(C`_build/\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script itself).
.IP "code" 4
.IX Item "code"
[version 0.20]
.Sp
This action builds your code base.
.Sp
By default it just creates a \f(CW\*(C`blib/\*(C'\fR directory and copies any \f(CW\*(C`.pm\*(C'\fR
and \f(CW\*(C`.pod\*(C'\fR files from your \f(CW\*(C`lib/\*(C'\fR directory into the \f(CW\*(C`blib/\*(C'\fR
directory.  It also compiles any \f(CW\*(C`.xs\*(C'\fR files from \f(CW\*(C`lib/\*(C'\fR and places
them in \f(CW\*(C`blib/\*(C'\fR.  Of course, you need a working C compiler (probably
the same one that built perl itself) for the compilation to work
properly.
.Sp
The \f(CW\*(C`code\*(C'\fR action also runs any \f(CW\*(C`.PL\*(C'\fR files in your \fIlib/\fR
directory.  Typically these create other files, named the same but
without the \f(CW\*(C`.PL\*(C'\fR ending.  For example, a file \fIlib/Foo/Bar.pm.PL\fR
could create the file \fIlib/Foo/Bar.pm\fR.  The \f(CW\*(C`.PL\*(C'\fR files are
processed first, so any \f(CW\*(C`.pm\*(C'\fR files (or other kinds that we deal
with) will get copied correctly.
.IP "config_data" 4
.IX Item "config_data"
[version 0.26]
.Sp
\&...
.IP "diff" 4
.IX Item "diff"
[version 0.14]
.Sp
This action will compare the files about to be installed with their
installed counterparts.  For .pm and .pod files, a diff will be shown
(this currently requires a 'diff' program to be in your \s-1PATH\s0).  For
other files like compiled binary files, we simply report whether they
differ.
.Sp
A \f(CW\*(C`flags\*(C'\fR parameter may be passed to the action, which will be passed
to the 'diff' program.  Consult your 'diff' documentation for the
parameters it will accept \- a good one is \f(CW\*(C`\-u\*(C'\fR:
.Sp
.Vb 1
\&  ./Build diff flags=\-u
.Ve
.IP "dist" 4
.IX Item "dist"
[version 0.02]
.Sp
This action is helpful for module authors who want to package up their
module for source distribution through a medium like \s-1CPAN. \s0 It will create a
tarball of the files listed in \fI\s-1MANIFEST\s0\fR and compress the tarball using
\&\s-1GZIP\s0 compression.
.Sp
By default, this action will use the \f(CW\*(C`Archive::Tar\*(C'\fR module. However, you can
force it to use binary \*(L"tar\*(R" and \*(L"gzip\*(R" executables by supplying an explicit
\&\f(CW\*(C`tar\*(C'\fR (and optional \f(CW\*(C`gzip\*(C'\fR) parameter:
.Sp
.Vb 1
\&  ./Build dist \-\-tar C:\epath\eto\etar.exe \-\-gzip C:\epath\eto\ezip.exe
.Ve
.IP "distcheck" 4
.IX Item "distcheck"
[version 0.05]
.Sp
Reports which files are in the build directory but not in the
\&\fI\s-1MANIFEST\s0\fR file, and vice versa.  (See manifest for details.)
.IP "distclean" 4
.IX Item "distclean"
[version 0.05]
.Sp
Performs the 'realclean' action and then the 'distcheck' action.
.IP "distdir" 4
.IX Item "distdir"
[version 0.05]
.Sp
Creates a \*(L"distribution directory\*(R" named \f(CW\*(C`$dist_name\-$dist_version\*(C'\fR
(if that directory already exists, it will be removed first), then
copies all the files listed in the \fI\s-1MANIFEST\s0\fR file to that directory.
This directory is what the distribution tarball is created from.
.IP "distinstall" 4
.IX Item "distinstall"
[version 0.37]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'install' actions in that
directory.  Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be
applied during subprocesses
.IP "distmeta" 4
.IX Item "distmeta"
[version 0.21]
.Sp
Creates the \fI\s-1META\s0.yml\fR file that describes the distribution.
.Sp
\&\fI\s-1META\s0.yml\fR is a file containing various bits of \fImetadata\fR about the
distribution.  The metadata includes the distribution name, version,
abstract, prerequisites, license, and various other data about the
distribution.  This file is created as \fI\s-1META\s0.yml\fR in a simplified \s-1YAML\s0 format.
.Sp
\&\fI\s-1META\s0.yml\fR file must also be listed in \fI\s-1MANIFEST\s0\fR \- if it's not, a
warning will be issued.
.Sp
The current version of the \fI\s-1META\s0.yml\fR specification can be found
on \s-1CPAN\s0 as CPAN::Meta::Spec.
.IP "distsign" 4
.IX Item "distsign"
[version 0.16]
.Sp
Uses \f(CW\*(C`Module::Signature\*(C'\fR to create a \s-1SIGNATURE\s0 file for your
distribution, and adds the \s-1SIGNATURE\s0 file to the distribution's
\&\s-1MANIFEST.\s0
.IP "disttest" 4
.IX Item "disttest"
[version 0.05]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'test' actions in that directory.
Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be applied
during subprocesses
.IP "docs" 4
.IX Item "docs"
[version 0.20]
.Sp
This will generate documentation (e.g. Unix man pages and \s-1HTML\s0
documents) for any installable items under \fBblib/\fR that
contain \s-1POD. \s0 If there are no \f(CW\*(C`bindoc\*(C'\fR or \f(CW\*(C`libdoc\*(C'\fR installation
targets defined (as will be the case on systems that don't support
Unix manpages) no action is taken for manpages.  If there are no
\&\f(CW\*(C`binhtml\*(C'\fR or \f(CW\*(C`libhtml\*(C'\fR installation targets defined no action is
taken for \s-1HTML\s0 documents.
.IP "fakeinstall" 4
.IX Item "fakeinstall"
[version 0.02]
.Sp
This is just like the \f(CW\*(C`install\*(C'\fR action, but it won't actually do
anything, it will just report what it \fIwould\fR have done if you had
actually run the \f(CW\*(C`install\*(C'\fR action.
.IP "help" 4
.IX Item "help"
[version 0.03]
.Sp
This action will simply print out a message that is meant to help you
use the build process.  It will show you a list of available build
actions too.
.Sp
With an optional argument specifying an action name (e.g. \f(CW\*(C`Build help
test\*(C'\fR), the 'help' action will show you any \s-1POD\s0 documentation it can
find for that action.
.IP "html" 4
.IX Item "html"
[version 0.26]
.Sp
This will generate \s-1HTML\s0 documentation for any binary or library files
under \fBblib/\fR that contain \s-1POD. \s0 The \s-1HTML\s0 documentation will only be
installed if the install paths can be determined from values in
\&\f(CW\*(C`Config.pm\*(C'\fR.  You can also supply or override install paths on the
command line by specifying \f(CW\*(C`install_path\*(C'\fR values for the \f(CW\*(C`binhtml\*(C'\fR
and/or \f(CW\*(C`libhtml\*(C'\fR installation targets.
.IP "install" 4
.IX Item "install"
[version 0.01]
.Sp
This action will use \f(CW\*(C`ExtUtils::Install\*(C'\fR to install the files from
\&\f(CW\*(C`blib/\*(C'\fR into the system.  See \*(L"\s-1INSTALL PATHS\*(R"\s0
for details about how Module::Build determines where to install
things, and how to influence this process.
.Sp
If you want the installation process to look around in \f(CW@INC\fR for
other versions of the stuff you're installing and try to delete it,
you can use the \f(CW\*(C`uninst\*(C'\fR parameter, which tells \f(CW\*(C`ExtUtils::Install\*(C'\fR to
do so:
.Sp
.Vb 1
\&  ./Build install uninst=1
.Ve
.Sp
This can be a good idea, as it helps prevent multiple versions of a
module from being present on your system, which can be a confusing
situation indeed.
.IP "installdeps" 4
.IX Item "installdeps"
[version 0.36]
.Sp
This action will use the \f(CW\*(C`cpan_client\*(C'\fR parameter as a command to install
missing prerequisites.  You will be prompted whether to install
optional dependencies.
.Sp
The \f(CW\*(C`cpan_client\*(C'\fR option defaults to 'cpan' but can be set as an option or in
\&\fI.modulebuildrc\fR.  It must be a shell command that takes a list of modules to
install as arguments (e.g. 'cpanp \-i' for \s-1CPANPLUS\s0).  If the program part is a
relative path (e.g. 'cpan' or 'cpanp'), it will be located relative to the perl
program that executed Build.PL.
.Sp
.Vb 3
\&  /opt/perl/5.8.9/bin/perl Build.PL
\&  ./Build installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
\&  # installs to 5.8.9
.Ve
.IP "manifest" 4
.IX Item "manifest"
[version 0.05]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will bring the \fI\s-1MANIFEST\s0\fR up to date with the
files currently present in the distribution.  You may use a
\&\fI\s-1MANIFEST.SKIP\s0\fR file to exclude certain files or directories from
inclusion in the \fI\s-1MANIFEST\s0\fR.  \fI\s-1MANIFEST.SKIP\s0\fR should contain a bunch
of regular expressions, one per line.  If a file in the distribution
directory matches any of the regular expressions, it won't be included
in the \fI\s-1MANIFEST\s0\fR.
.Sp
The following is a reasonable \fI\s-1MANIFEST.SKIP\s0\fR starting point, you can
add your own stuff to it:
.Sp
.Vb 7
\&  ^_build
\&  ^Build$
\&  ^blib
\&  ~$
\&  \e.bak$
\&  ^MANIFEST\e.SKIP$
\&  CVS
.Ve
.Sp
See the distcheck and skipcheck actions if you want to find out
what the \f(CW\*(C`manifest\*(C'\fR action would do, without actually doing anything.
.IP "manifest_skip" 4
.IX Item "manifest_skip"
[version 0.3608]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will generate a boilerplate \s-1MANIFEST.SKIP\s0 file
if one does not already exist.
.IP "manpages" 4
.IX Item "manpages"
[version 0.28]
.Sp
This will generate man pages for any binary or library files under
\&\fBblib/\fR that contain \s-1POD. \s0 The man pages will only be installed if the
install paths can be determined from values in \f(CW\*(C`Config.pm\*(C'\fR.  You can
also supply or override install paths by specifying there values on
the command line with the \f(CW\*(C`bindoc\*(C'\fR and \f(CW\*(C`libdoc\*(C'\fR installation
targets.
.IP "pardist" 4
.IX Item "pardist"
[version 0.2806]
.Sp
Generates a \s-1PAR\s0 binary distribution for use with \s-1PAR\s0 or PAR::Dist.
.Sp
It requires that the PAR::Dist module (version 0.17 and up) is
installed on your system.
.IP "ppd" 4
.IX Item "ppd"
[version 0.20]
.Sp
Build a \s-1PPD\s0 file for your distribution.
.Sp
This action takes an optional argument \f(CW\*(C`codebase\*(C'\fR which is used in
the generated \s-1PPD\s0 file to specify the (usually relative) \s-1URL\s0 of the
distribution.  By default, this value is the distribution name without
any path information.
.Sp
Example:
.Sp
.Vb 1
\&  ./Build ppd \-\-codebase "MSWin32\-x86\-multi\-thread/Module\-Build\-0.21.tar.gz"
.Ve
.IP "ppmdist" 4
.IX Item "ppmdist"
[version 0.23]
.Sp
Generates a \s-1PPM\s0 binary distribution and a \s-1PPD\s0 description file.  This
action also invokes the \f(CW\*(C`ppd\*(C'\fR action, so it can accept the same
\&\f(CW\*(C`codebase\*(C'\fR argument described under that action.
.Sp
This uses the same mechanism as the \f(CW\*(C`dist\*(C'\fR action to tar & zip its
output, so you can supply \f(CW\*(C`tar\*(C'\fR and/or \f(CW\*(C`gzip\*(C'\fR parameters to affect
the result.
.IP "prereq_data" 4
.IX Item "prereq_data"
[version 0.32]
.Sp
This action prints out a Perl data structure of all prerequisites and the versions
required.  The output can be loaded again using \f(CW\*(C`eval()\*(C'\fR.  This can be useful for
external tools that wish to query a Build script for prerequisites.
.IP "prereq_report" 4
.IX Item "prereq_report"
[version 0.28]
.Sp
This action prints out a list of all prerequisites, the versions required, and
the versions actually installed.  This can be useful for reviewing the
configuration of your system prior to a build, or when compiling data to send
for a bug report.
.IP "pure_install" 4
.IX Item "pure_install"
[version 0.28]
.Sp
This action is identical to the \f(CW\*(C`install\*(C'\fR action.  In the future,
though, when \f(CW\*(C`install\*(C'\fR starts writing to the file
\&\fI$(\s-1INSTALLARCHLIB\s0)/perllocal.pod\fR, \f(CW\*(C`pure_install\*(C'\fR won't, and that
will be the only difference between them.
.IP "realclean" 4
.IX Item "realclean"
[version 0.01]
.Sp
This action is just like the \f(CW\*(C`clean\*(C'\fR action, but also removes the
\&\f(CW\*(C`_build\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script.  If you run the
\&\f(CW\*(C`realclean\*(C'\fR action, you are essentially starting over, so you will
have to re-create the \f(CW\*(C`Build\*(C'\fR script again.
.IP "retest" 4
.IX Item "retest"
[version 0.2806]
.Sp
This is just like the \f(CW\*(C`test\*(C'\fR action, but doesn't actually build the
distribution first, and doesn't add \fIblib/\fR to the load path, and
therefore will test against a \fIpreviously\fR installed version of the
distribution.  This can be used to verify that a certain installed
distribution still works, or to see whether newer versions of a
distribution still pass the old regression tests, and so on.
.IP "skipcheck" 4
.IX Item "skipcheck"
[version 0.05]
.Sp
Reports which files are skipped due to the entries in the
\&\fI\s-1MANIFEST.SKIP\s0\fR file (See manifest for details)
.IP "test" 4
.IX Item "test"
[version 0.01]
.Sp
This will use \f(CW\*(C`Test::Harness\*(C'\fR or \f(CW\*(C`TAP::Harness\*(C'\fR to run any regression
tests and report their results. Tests can be defined in the standard
places: a file called \f(CW\*(C`test.pl\*(C'\fR in the top-level directory, or several
files ending with \f(CW\*(C`.t\*(C'\fR in a \f(CW\*(C`t/\*(C'\fR directory.
.Sp
If you want tests to be 'verbose', i.e. show details of test execution
rather than just summary information, pass the argument \f(CW\*(C`verbose=1\*(C'\fR.
.Sp
If you want to run tests under the perl debugger, pass the argument
\&\f(CW\*(C`debugger=1\*(C'\fR.
.Sp
If you want to have Module::Build find test files with different file
name extensions, pass the \f(CW\*(C`test_file_exts\*(C'\fR argument with an array
of extensions, such as \f(CW\*(C`[qw( .t .s .z )]\*(C'\fR.
.Sp
If you want test to be run by \f(CW\*(C`TAP::Harness\*(C'\fR, rather than \f(CW\*(C`Test::Harness\*(C'\fR,
pass the argument \f(CW\*(C`tap_harness_args\*(C'\fR as an array reference of arguments to
pass to the TAP::Harness constructor.
.Sp
In addition, if a file called \f(CW\*(C`visual.pl\*(C'\fR exists in the top-level
directory, this file will be executed as a Perl script and its output
will be shown to the user.  This is a good place to put speed tests or
other tests that don't use the \f(CW\*(C`Test::Harness\*(C'\fR format for output.
.Sp
To override the choice of tests to run, you may pass a \f(CW\*(C`test_files\*(C'\fR
argument whose value is a whitespace-separated list of test scripts to
run.  This is especially useful in development, when you only want to
run a single test to see whether you've squashed a certain bug yet:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/something_failing.t
.Ve
.Sp
You may also pass several \f(CW\*(C`test_files\*(C'\fR arguments separately:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/one.t \-\-test_files t/two.t
.Ve
.Sp
or use a \f(CW\*(C`glob()\*(C'\fR\-style pattern:
.Sp
.Vb 1
\&  ./Build test \-\-test_files \*(Aqt/01\-*.t\*(Aq
.Ve
.IP "testall" 4
.IX Item "testall"
[version 0.2807]
.Sp
[Note: the 'testall' action and the code snippets below are currently
in alpha stage, see
\&\*(L"/www.nntp.perl.org/group/perl.module.build/2007/03/msg584.html\*(R"\*(L" in \*(R"http: ]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action plus each of the \f(CW\*(C`test$type\*(C'\fR actions defined by
the keys of the \f(CW\*(C`test_types\*(C'\fR parameter.
.Sp
Currently, you need to define the ACTION_test$type method yourself and
enumerate them in the test_types parameter.
.Sp
.Vb 12
\&  my $mb = Module::Build\->subclass(
\&    code => q(
\&      sub ACTION_testspecial { shift\->generic_test(type => \*(Aqspecial\*(Aq); }
\&      sub ACTION_testauthor  { shift\->generic_test(type => \*(Aqauthor\*(Aq); }
\&    )
\&  )\->new(
\&    ...
\&    test_types  => {
\&      special => \*(Aq.st\*(Aq,
\&      author  => [\*(Aq.at\*(Aq, \*(Aq.pt\*(Aq ],
\&    },
\&    ...
.Ve
.IP "testcover" 4
.IX Item "testcover"
[version 0.26]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action using \f(CW\*(C`Devel::Cover\*(C'\fR, generating a
code-coverage report showing which parts of the code were actually
exercised during the tests.
.Sp
To pass options to \f(CW\*(C`Devel::Cover\*(C'\fR, set the \f(CW$DEVEL_COVER_OPTIONS\fR
environment variable:
.Sp
.Vb 1
\&  DEVEL_COVER_OPTIONS=\-ignore,Build ./Build testcover
.Ve
.IP "testdb" 4
.IX Item "testdb"
[version 0.05]
.Sp
This is a synonym for the 'test' action with the \f(CW\*(C`debugger=1\*(C'\fR
argument.
.IP "testpod" 4
.IX Item "testpod"
[version 0.25]
.Sp
This checks all the files described in the \f(CW\*(C`docs\*(C'\fR action and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output.  If you are a module author,
this is useful to run before creating a new release.
.IP "testpodcoverage" 4
.IX Item "testpodcoverage"
[version 0.28]
.Sp
This checks the pod coverage of the distribution and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output. If you are a module author,
this is useful to run before creating a new release.
.IP "versioninstall" 4
.IX Item "versioninstall"
[version 0.16]
.Sp
** Note: since \f(CW\*(C`only.pm\*(C'\fR is so new, and since we just recently added
support for it here too, this feature is to be considered
experimental. **
.Sp
If you have the \f(CW\*(C`only.pm\*(C'\fR module installed on your system, you can
use this action to install a module into the version-specific library
trees.  This means that you can have several versions of the same
module installed and \f(CW\*(C`use\*(C'\fR a specific one like this:
.Sp
.Vb 1
\&  use only MyModule => 0.55;
.Ve
.Sp
To override the default installation libraries in \f(CW\*(C`only::config\*(C'\fR,
specify the \f(CW\*(C`versionlib\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-versionlib /my/version/place/
.Ve
.Sp
To override which version the module is installed as, specify the
\&\f(CW\*(C`version\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-version 0.50
.Ve
.Sp
See the \f(CW\*(C`only.pm\*(C'\fR documentation for more information on
version-specific installs.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Command Line Options"
.IX Subsection "Command Line Options"
The following options can be used during any invocation of \f(CW\*(C`Build.PL\*(C'\fR
or the Build script, during any action.  For information on other
options specific to an action, see the documentation for the
respective action.
.PP
\&\s-1NOTE:\s0 There is some preliminary support for options to use the more
familiar long option style.  Most options can be preceded with the
\&\f(CW\*(C`\-\-\*(C'\fR long option prefix, and the underscores changed to dashes
(e.g. \f(CW\*(C`\-\-use\-rcfile\*(C'\fR).  Additionally, the argument to boolean options is
optional, and boolean options can be negated by prefixing them with
\&\f(CW\*(C`no\*(C'\fR or \f(CW\*(C`no\-\*(C'\fR (e.g. \f(CW\*(C`\-\-noverbose\*(C'\fR or \f(CW\*(C`\-\-no\-verbose\*(C'\fR).
.IP "quiet" 4
.IX Item "quiet"
Suppress informative messages on output.
.IP "verbose" 4
.IX Item "verbose"
Display extra information about the Build on output.  \f(CW\*(C`verbose\*(C'\fR will
turn off \f(CW\*(C`quiet\*(C'\fR
.IP "cpan_client" 4
.IX Item "cpan_client"
Sets the \f(CW\*(C`cpan_client\*(C'\fR command for use with the \f(CW\*(C`installdeps\*(C'\fR action.
See \f(CW\*(C`installdeps\*(C'\fR for more details.
.IP "use_rcfile" 4
.IX Item "use_rcfile"
Load the \fI~/.modulebuildrc\fR option file.  This option can be set to
false to prevent the custom resource file from being loaded.
.IP "allow_mb_mismatch" 4
.IX Item "allow_mb_mismatch"
Suppresses the check upon startup that the version of Module::Build
we're now running under is the same version that was initially invoked
when building the distribution (i.e. when the \f(CW\*(C`Build.PL\*(C'\fR script was
first run).  As of 0.3601, a mismatch results in a warning instead of
a fatal error, so this option effectively just suppresses the warning.
.IP "debug" 4
.IX Item "debug"
Prints Module::Build debugging information to \s-1STDOUT,\s0 such as a trace of
executed build actions.
.SS "Default Options File (\fI.modulebuildrc\fP)"
.IX Subsection "Default Options File (.modulebuildrc)"
[version 0.28]
.PP
When Module::Build starts up, it will look first for a file,
\&\fI\f(CI$ENV\fI{\s-1HOME\s0}/.modulebuildrc\fR.  If it's not found there, it will look
in the the \fI.modulebuildrc\fR file in the directories referred to by
the environment variables \f(CW\*(C`HOMEDRIVE\*(C'\fR + \f(CW\*(C`HOMEDIR\*(C'\fR, \f(CW\*(C`USERPROFILE\*(C'\fR,
\&\f(CW\*(C`APPDATA\*(C'\fR, \f(CW\*(C`WINDIR\*(C'\fR, \f(CW\*(C`SYS$LOGIN\*(C'\fR.  If the file exists, the options
specified there will be used as defaults, as if they were typed on the
command line.  The defaults can be overridden by specifying new values
on the command line.
.PP
The action name must come at the beginning of the line, followed by any
amount of whitespace and then the options.  Options are given the same
as they would be on the command line.  They can be separated by any
amount of whitespace, including newlines, as long there is whitespace at
the beginning of each continued line.  Anything following a hash mark (\f(CW\*(C`#\*(C'\fR)
is considered a comment, and is stripped before parsing.  If more than
one line begins with the same action name, those lines are merged into
one set of options.
.PP
Besides the regular actions, there are two special pseudo-actions: the
key \f(CW\*(C`*\*(C'\fR (asterisk) denotes any global options that should be applied
to all actions, and the key 'Build_PL' specifies options to be applied
when you invoke \f(CW\*(C`perl Build.PL\*(C'\fR.
.PP
.Vb 5
\&  *           verbose=1   # global options
\&  diff        flags=\-u
\&  install     \-\-install_base /home/ken
\&              \-\-install_path html=/home/ken/docs/html
\&  installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
.Ve
.PP
If you wish to locate your resource file in a different location, you
can set the environment variable \f(CW\*(C`MODULEBUILDRC\*(C'\fR to the complete
absolute path of the file containing your options.
.SS "Environment variables"
.IX Subsection "Environment variables"
.IP "\s-1MODULEBUILDRC\s0" 4
.IX Item "MODULEBUILDRC"
[version 0.28]
.Sp
Specifies an alternate location for a default options file as described above.
.IP "\s-1PERL_MB_OPT\s0" 4
.IX Item "PERL_MB_OPT"
[version 0.36]
.Sp
Command line options that are applied to Build.PL or any Build action.  The
string is split as the shell would (e.g. whitespace) and the result is
prepended to any actual command-line arguments.
.SH "INSTALL PATHS"
.IX Header "INSTALL PATHS"
[version 0.19]
.PP
When you invoke Module::Build's \f(CW\*(C`build\*(C'\fR action, it needs to figure
out where to install things.  The nutshell version of how this works
is that default installation locations are determined from
\&\fIConfig.pm\fR, and they may be overridden by using the \f(CW\*(C`install_path\*(C'\fR
parameter.  An \f(CW\*(C`install_base\*(C'\fR parameter lets you specify an
alternative installation root like \fI/home/foo\fR, and a \f(CW\*(C`destdir\*(C'\fR lets
you specify a temporary installation directory like \fI/tmp/install\fR in
case you want to create bundled-up installable packages.
.PP
Natively, Module::Build provides default installation locations for
the following types of installable items:
.IP "lib" 4
.IX Item "lib"
Usually pure-Perl module files ending in \fI.pm\fR.
.IP "arch" 4
.IX Item "arch"
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling
\&\s-1XS, \s0Inline, or similar code.
.IP "script" 4
.IX Item "script"
Programs written in pure Perl.  In order to improve reuse, try to make
these as small as possible \- put the code into modules whenever
possible.
.IP "bin" 4
.IX Item "bin"
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or
something.  Pretty rare to see this in a perl distribution, but it
happens.
.IP "bindoc" 4
.IX Item "bindoc"
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually
generated from the \s-1POD\s0 in those files.  Under Unix, these are manual
pages belonging to the 'man1' category.
.IP "libdoc" 4
.IX Item "libdoc"
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually
generated from the \s-1POD\s0 in \fI.pm\fR files.  Under Unix, these are manual
pages belonging to the 'man3' category.
.IP "binhtml" 4
.IX Item "binhtml"
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.IP "libhtml" 4
.IX Item "libhtml"
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.PP
Four other parameters let you control various aspects of how
installation paths are determined:
.IP "installdirs" 4
.IX Item "installdirs"
The default destinations for these installable things come from
entries in your system's \f(CW\*(C`Config.pm\*(C'\fR.  You can select from three
different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR
parameter as follows:
.Sp
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from Config.pm:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitescript   installvendorscript
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is
\&    determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.Sp
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".  If you're creating
vendor distributions of module packages, you may want to do something
like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-installdirs vendor
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-installdirs vendor
.Ve
.Sp
If you're installing an updated version of a module that was included
with perl itself (i.e. a \*(L"core module\*(R"), then you may set
\&\f(CW\*(C`installdirs\*(C'\fR to \*(L"core\*(R" to overwrite the module in its present
location.
.Sp
(Note that the 'script' line is different from \f(CW\*(C`MakeMaker\*(C'\fR \-
unfortunately there's no such thing as \*(L"installsitescript\*(R" or
\&\*(L"installvendorscript\*(R" entry in \f(CW\*(C`Config.pm\*(C'\fR, so we use the
\&\*(L"installsitebin\*(R" and \*(L"installvendorbin\*(R" entries to at least get the
general location right.  In the future, if \f(CW\*(C`Config.pm\*(C'\fR adds some more
appropriate entries, we'll start using those.)
.IP "install_path" 4
.IX Item "install_path"
Once the defaults have been set, you can override them.
.Sp
On the command line, that would look like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.Sp
or this:
.Sp
.Vb 1
\&  ./Build install \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.IP "install_base" 4
.IX Item "install_base"
You can also set the whole bunch of installation paths by supplying the
\&\f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For
instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux
system, you'll install as follows:
.Sp
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.Sp
Note that this is \fIdifferent\fR from how \f(CW\*(C`MakeMaker\*(C'\fR's \f(CW\*(C`PREFIX\*(C'\fR
parameter works.  \f(CW\*(C`install_base\*(C'\fR just gives you a default layout under the
directory you specify, which may have little to do with the
\&\f(CW\*(C`installdirs=site\*(C'\fR layout.
.Sp
The exact layout under the directory you specify may vary by system \-
we try to do the \*(L"sensible\*(R" thing on each platform.
.IP "destdir" 4
.IX Item "destdir"
If you want to install everything into a temporary directory first
(for instance, if you want to create a directory tree that a package
manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can
use the \f(CW\*(C`destdir\*(C'\fR parameter:
.Sp
.Vb 1
\&  perl Build.PL \-\-destdir /tmp/foo
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-destdir /tmp/foo
.Ve
.Sp
This will effectively install to \*(L"/tmp/foo/$sitelib\*(R",
\&\*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use
\&\f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever
platform you're installing on.
.IP "prefix" 4
.IX Item "prefix"
Provided for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR's \s-1PREFIX\s0 argument.
\&\f(CW\*(C`prefix\*(C'\fR should be used when you want Module::Build to install your
modules, documentation, and scripts in the same place as
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR's \s-1PREFIX\s0 mechanism.
.Sp
The following are equivalent.
.Sp
.Vb 2
\&    perl Build.PL \-\-prefix /tmp/foo
\&    perl Makefile.PL PREFIX=/tmp/foo
.Ve
.Sp
Because of the complex nature of the prefixification logic, the
behavior of \s-1PREFIX\s0 in \f(CW\*(C`MakeMaker\*(C'\fR has changed subtly over time.
Module::Build's \-\-prefix logic is equivalent to the \s-1PREFIX\s0 logic found
in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR 6.30.
.Sp
The maintainers of \f(CW\*(C`MakeMaker\*(C'\fR do understand the troubles with the
\&\s-1PREFIX\s0 mechanism, and added \s-1INSTALL_BASE\s0 support in version 6.31 of
\&\f(CW\*(C`MakeMaker\*(C'\fR, which was released in 2006.
.Sp
If you don't need to retain compatibility with old versions (pre\-6.31) of \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or
are starting a fresh Perl installation we recommend you use
\&\f(CW\*(C`install_base\*(C'\fR instead (and \f(CW\*(C`INSTALL_BASE\*(C'\fR in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR).
See \*(L"Installing in the same location as
ExtUtils::MakeMaker\*(R" in Module::Build::Cookbook for further information.
.SH "MOTIVATIONS"
.IX Header "MOTIVATIONS"
There are several reasons I wanted to start over, and not just fix
what I didn't like about \f(CW\*(C`MakeMaker\*(C'\fR:
.IP "\(bu" 4
I don't like the core idea of \f(CW\*(C`MakeMaker\*(C'\fR, namely that \f(CW\*(C`make\*(C'\fR should be
involved in the build process.  Here are my reasons:
.RS 4
.IP "+" 4
When a person is installing a Perl module, what can you assume about
their environment?  Can you assume they have \f(CW\*(C`make\*(C'\fR?  No, but you can
assume they have some version of Perl.
.IP "+" 4
When a person is writing a Perl module for intended distribution, can
you assume that they know how to build a Makefile, so they can
customize their build process?  No, but you can assume they know Perl,
and could customize that way.
.RE
.RS 4
.Sp
For years, these things have been a barrier to people getting the
build/install process to do what they want.
.RE
.IP "\(bu" 4
There are several architectural decisions in \f(CW\*(C`MakeMaker\*(C'\fR that make it
very difficult to customize its behavior.  For instance, when using
\&\f(CW\*(C`MakeMaker\*(C'\fR you do \f(CW\*(C`use ExtUtils::MakeMaker\*(C'\fR, but the object created in
\&\f(CW\*(C`WriteMakefile()\*(C'\fR is actually blessed into a package name that's
created on the fly, so you can't simply subclass
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  There is a workaround \f(CW\*(C`MY\*(C'\fR package that lets
you override certain \f(CW\*(C`MakeMaker\*(C'\fR methods, but only certain explicitly
preselected (by \f(CW\*(C`MakeMaker\*(C'\fR) methods can be overridden.  Also, the method
of customization is very crude: you have to modify a string containing
the Makefile text for the particular target.  Since these strings
aren't documented, and \fIcan't\fR be documented (they take on different
values depending on the platform, version of perl, version of
\&\f(CW\*(C`MakeMaker\*(C'\fR, etc.), you have no guarantee that your modifications will
work on someone else's machine or after an upgrade of \f(CW\*(C`MakeMaker\*(C'\fR or
perl.
.IP "\(bu" 4
It is risky to make major changes to \f(CW\*(C`MakeMaker\*(C'\fR, since it does so many
things, is so important, and generally works.  \f(CW\*(C`Module::Build\*(C'\fR is an
entirely separate package so that I can work on it all I want, without
worrying about backward compatibility with \f(CW\*(C`MakeMaker\*(C'\fR.
.IP "\(bu" 4
Finally, Perl is said to be a language for system administration.
Could it really be the case that Perl isn't up to the task of building
and installing software?  Even if that software is a bunch of
\&\f(CW\*(C`.pm\*(C'\fR files that just need to be copied from one place to
another?  My sense was that we could design a system to accomplish
this in a flexible, extensible, and friendly manner.  Or die trying.
.SH "TO DO"
.IX Header "TO DO"
The current method of relying on time stamps to determine whether a
derived file is out of date isn't likely to scale well, since it
requires tracing all dependencies backward, it runs into problems on
\&\s-1NFS,\s0 and it's just generally flimsy.  It would be better to use an \s-1MD5\s0
signature or the like, if available.  See \f(CW\*(C`cons\*(C'\fR for an example.
.PP
.Vb 2
\& \- append to perllocal.pod
\& \- add a \*(Aqplugin\*(Aq functionality
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.PP
Development questions, bug reports, and patches should be sent to the
Module-Build mailing list at <module\-build@perl.org>.
.PP
Bug reports are also welcome at
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Module\-Build>.
.PP
The latest development version is available from the Git
repository at <https://github.com/Perl\-Toolchain\-Gang/Module\-Build>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build::Cookbook, Module::Build::Authoring,
Module::Build::API, ExtUtils::MakeMaker
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::Meta::Spec
.PP
<http://www.dsmit.com/cons/>
.PP
<http://search.cpan.org/dist/PerlBuildSystem/>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build5.16.3pm                        0100644 0001750 0001750 00000126004 12566207437 024213  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build 3pm"
.TH Module::Build 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build \- Build and install Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Standard process for building & installing modules:
.PP
.Vb 4
\&  perl Build.PL
\&  ./Build
\&  ./Build test
\&  ./Build install
.Ve
.PP
Or, if you're on a platform (like \s-1DOS\s0 or Windows) that doesn't require
the \*(L"./\*(R" notation, you can do this:
.PP
.Vb 4
\&  perl Build.PL
\&  Build
\&  Build test
\&  Build install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Build\*(C'\fR is a system for building, testing, and installing
Perl modules.  It is meant to be an alternative to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  Developers may alter the behavior of the
module through subclassing in a much more straightforward way than
with \f(CW\*(C`MakeMaker\*(C'\fR.  It also does not require a \f(CW\*(C`make\*(C'\fR on your system
\&\- most of the \f(CW\*(C`Module::Build\*(C'\fR code is pure-perl and written in a very
cross-platform way.  In fact, you don't even need a shell, so even
platforms like MacOS (traditional) can use it fairly easily.  Its only
prerequisites are modules that are included with perl 5.6.0, and it
works fine on perl 5.005 if you can install a few additional modules.
.PP
See \*(L"\s-1MOTIVATIONS\s0\*(R" for more comparisons between \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR
and \f(CW\*(C`Module::Build\*(C'\fR.
.PP
To install \f(CW\*(C`Module::Build\*(C'\fR, and any other module that uses
\&\f(CW\*(C`Module::Build\*(C'\fR for its installation process, do the following:
.PP
.Vb 4
\&  perl Build.PL       # \*(AqBuild.PL\*(Aq script creates the \*(AqBuild\*(Aq script
\&  ./Build             # Need ./ to ensure we\*(Aqre using this "Build" script
\&  ./Build test        # and not another one that happens to be in the PATH
\&  ./Build install
.Ve
.PP
This illustrates initial configuration and the running of three
\&'actions'.  In this case the actions run are 'build' (the default
action), 'test', and 'install'.  Other actions defined so far include:
.PP
.Vb 10
\&  build                          manifest
\&  clean                          manifest_skip
\&  code                           manpages
\&  config_data                    pardist
\&  diff                           ppd
\&  dist                           ppmdist
\&  distcheck                      prereq_data
\&  distclean                      prereq_report
\&  distdir                        pure_install
\&  distinstall                    realclean
\&  distmeta                       retest
\&  distsign                       skipcheck
\&  disttest                       test
\&  docs                           testall
\&  fakeinstall                    testcover
\&  help                           testdb
\&  html                           testpod
\&  install                        testpodcoverage
\&  installdeps                    versioninstall
.Ve
.PP
You can run the 'help' action for a complete list of actions.
.SH "GUIDE TO DOCUMENTATION"
.IX Header "GUIDE TO DOCUMENTATION"
The documentation for \f(CW\*(C`Module::Build\*(C'\fR is broken up into sections:
.IP "General Usage (Module::Build)" 4
.IX Item "General Usage (Module::Build)"
This is the document you are currently reading. It describes basic
usage and background information.  Its main purpose is to assist the
user who wants to learn how to invoke and control \f(CW\*(C`Module::Build\*(C'\fR
scripts at the command line.
.IP "Authoring Reference (Module::Build::Authoring)" 4
.IX Item "Authoring Reference (Module::Build::Authoring)"
This document describes the structure and organization of
\&\f(CW\*(C`Module::Build\*(C'\fR, and the relevant concepts needed by authors who are
writing \fIBuild.PL\fR scripts for a distribution or controlling
\&\f(CW\*(C`Module::Build\*(C'\fR processes programmatically.
.IP "\s-1API\s0 Reference (Module::Build::API)" 4
.IX Item "API Reference (Module::Build::API)"
This is a reference to the \f(CW\*(C`Module::Build\*(C'\fR \s-1API\s0.
.IP "Cookbook (Module::Build::Cookbook)" 4
.IX Item "Cookbook (Module::Build::Cookbook)"
This document demonstrates how to accomplish many common tasks.  It
covers general command line usage and authoring of \fIBuild.PL\fR
scripts.  Includes working examples.
.SH "ACTIONS"
.IX Header "ACTIONS"
There are some general principles at work here.  First, each task when
building a module is called an \*(L"action\*(R".  These actions are listed
above; they correspond to the building, testing, installing,
packaging, etc., tasks.
.PP
Second, arguments are processed in a very systematic way.  Arguments
are always key=value pairs.  They may be specified at \f(CW\*(C`perl Build.PL\*(C'\fR
time (i.e. \f(CW\*(C`perl Build.PL destdir=/my/secret/place\*(C'\fR), in which case
their values last for the lifetime of the \f(CW\*(C`Build\*(C'\fR script.  They may
also be specified when executing a particular action (i.e.
\&\f(CW\*(C`Build test verbose=1\*(C'\fR), in which case their values last only for the
lifetime of that command.  Per-action command line parameters take
precedence over parameters specified at \f(CW\*(C`perl Build.PL\*(C'\fR time.
.PP
The build process also relies heavily on the \f(CW\*(C`Config.pm\*(C'\fR module.
If the user wishes to override any of the
values in \f(CW\*(C`Config.pm\*(C'\fR, she may specify them like so:
.PP
.Vb 1
\&  perl Build.PL \-\-config cc=gcc \-\-config ld=gcc
.Ve
.PP
The following build actions are provided by default.
.IP "build" 4
.IX Item "build"
[version 0.01]
.Sp
If you run the \f(CW\*(C`Build\*(C'\fR script without any arguments, it runs the
\&\f(CW\*(C`build\*(C'\fR action, which in turn runs the \f(CW\*(C`code\*(C'\fR and \f(CW\*(C`docs\*(C'\fR actions.
.Sp
This is analogous to the \f(CW\*(C`MakeMaker\*(C'\fR \fImake all\fR target.
.IP "clean" 4
.IX Item "clean"
[version 0.01]
.Sp
This action will clean up any files that the build process may have
created, including the \f(CW\*(C`blib/\*(C'\fR directory (but not including the
\&\f(CW\*(C`_build/\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script itself).
.IP "code" 4
.IX Item "code"
[version 0.20]
.Sp
This action builds your code base.
.Sp
By default it just creates a \f(CW\*(C`blib/\*(C'\fR directory and copies any \f(CW\*(C`.pm\*(C'\fR
and \f(CW\*(C`.pod\*(C'\fR files from your \f(CW\*(C`lib/\*(C'\fR directory into the \f(CW\*(C`blib/\*(C'\fR
directory.  It also compiles any \f(CW\*(C`.xs\*(C'\fR files from \f(CW\*(C`lib/\*(C'\fR and places
them in \f(CW\*(C`blib/\*(C'\fR.  Of course, you need a working C compiler (probably
the same one that built perl itself) for the compilation to work
properly.
.Sp
The \f(CW\*(C`code\*(C'\fR action also runs any \f(CW\*(C`.PL\*(C'\fR files in your \fIlib/\fR
directory.  Typically these create other files, named the same but
without the \f(CW\*(C`.PL\*(C'\fR ending.  For example, a file \fIlib/Foo/Bar.pm.PL\fR
could create the file \fIlib/Foo/Bar.pm\fR.  The \f(CW\*(C`.PL\*(C'\fR files are
processed first, so any \f(CW\*(C`.pm\*(C'\fR files (or other kinds that we deal
with) will get copied correctly.
.IP "config_data" 4
.IX Item "config_data"
[version 0.26]
.Sp
\&...
.IP "diff" 4
.IX Item "diff"
[version 0.14]
.Sp
This action will compare the files about to be installed with their
installed counterparts.  For .pm and .pod files, a diff will be shown
(this currently requires a 'diff' program to be in your \s-1PATH\s0).  For
other files like compiled binary files, we simply report whether they
differ.
.Sp
A \f(CW\*(C`flags\*(C'\fR parameter may be passed to the action, which will be passed
to the 'diff' program.  Consult your 'diff' documentation for the
parameters it will accept \- a good one is \f(CW\*(C`\-u\*(C'\fR:
.Sp
.Vb 1
\&  ./Build diff flags=\-u
.Ve
.IP "dist" 4
.IX Item "dist"
[version 0.02]
.Sp
This action is helpful for module authors who want to package up their
module for source distribution through a medium like \s-1CPAN\s0.  It will create a
tarball of the files listed in \fI\s-1MANIFEST\s0\fR and compress the tarball using
\&\s-1GZIP\s0 compression.
.Sp
By default, this action will use the \f(CW\*(C`Archive::Tar\*(C'\fR module. However, you can
force it to use binary \*(L"tar\*(R" and \*(L"gzip\*(R" executables by supplying an explicit
\&\f(CW\*(C`tar\*(C'\fR (and optional \f(CW\*(C`gzip\*(C'\fR) parameter:
.Sp
.Vb 1
\&  ./Build dist \-\-tar C:\epath\eto\etar.exe \-\-gzip C:\epath\eto\ezip.exe
.Ve
.IP "distcheck" 4
.IX Item "distcheck"
[version 0.05]
.Sp
Reports which files are in the build directory but not in the
\&\fI\s-1MANIFEST\s0\fR file, and vice versa.  (See manifest for details.)
.IP "distclean" 4
.IX Item "distclean"
[version 0.05]
.Sp
Performs the 'realclean' action and then the 'distcheck' action.
.IP "distdir" 4
.IX Item "distdir"
[version 0.05]
.Sp
Creates a \*(L"distribution directory\*(R" named \f(CW\*(C`$dist_name\-$dist_version\*(C'\fR
(if that directory already exists, it will be removed first), then
copies all the files listed in the \fI\s-1MANIFEST\s0\fR file to that directory.
This directory is what the distribution tarball is created from.
.IP "distinstall" 4
.IX Item "distinstall"
[version 0.37]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'install' actions in that
directory.  Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be
applied during subprocesses
.IP "distmeta" 4
.IX Item "distmeta"
[version 0.21]
.Sp
Creates the \fI\s-1META\s0.yml\fR file that describes the distribution.
.Sp
\&\fI\s-1META\s0.yml\fR is a file containing various bits of \fImetadata\fR about the
distribution.  The metadata includes the distribution name, version,
abstract, prerequisites, license, and various other data about the
distribution.  This file is created as \fI\s-1META\s0.yml\fR in a simplified \s-1YAML\s0 format.
.Sp
\&\fI\s-1META\s0.yml\fR file must also be listed in \fI\s-1MANIFEST\s0\fR \- if it's not, a
warning will be issued.
.Sp
The current version of the \fI\s-1META\s0.yml\fR specification can be found
on \s-1CPAN\s0 as CPAN::Meta::Spec.
.IP "distsign" 4
.IX Item "distsign"
[version 0.16]
.Sp
Uses \f(CW\*(C`Module::Signature\*(C'\fR to create a \s-1SIGNATURE\s0 file for your
distribution, and adds the \s-1SIGNATURE\s0 file to the distribution's
\&\s-1MANIFEST\s0.
.IP "disttest" 4
.IX Item "disttest"
[version 0.05]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'test' actions in that directory.
Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be applied
during subprocesses
.IP "docs" 4
.IX Item "docs"
[version 0.20]
.Sp
This will generate documentation (e.g. Unix man pages and \s-1HTML\s0
documents) for any installable items under \fBblib/\fR that
contain \s-1POD\s0.  If there are no \f(CW\*(C`bindoc\*(C'\fR or \f(CW\*(C`libdoc\*(C'\fR installation
targets defined (as will be the case on systems that don't support
Unix manpages) no action is taken for manpages.  If there are no
\&\f(CW\*(C`binhtml\*(C'\fR or \f(CW\*(C`libhtml\*(C'\fR installation targets defined no action is
taken for \s-1HTML\s0 documents.
.IP "fakeinstall" 4
.IX Item "fakeinstall"
[version 0.02]
.Sp
This is just like the \f(CW\*(C`install\*(C'\fR action, but it won't actually do
anything, it will just report what it \fIwould\fR have done if you had
actually run the \f(CW\*(C`install\*(C'\fR action.
.IP "help" 4
.IX Item "help"
[version 0.03]
.Sp
This action will simply print out a message that is meant to help you
use the build process.  It will show you a list of available build
actions too.
.Sp
With an optional argument specifying an action name (e.g. \f(CW\*(C`Build help
test\*(C'\fR), the 'help' action will show you any \s-1POD\s0 documentation it can
find for that action.
.IP "html" 4
.IX Item "html"
[version 0.26]
.Sp
This will generate \s-1HTML\s0 documentation for any binary or library files
under \fBblib/\fR that contain \s-1POD\s0.  The \s-1HTML\s0 documentation will only be
installed if the install paths can be determined from values in
\&\f(CW\*(C`Config.pm\*(C'\fR.  You can also supply or override install paths on the
command line by specifying \f(CW\*(C`install_path\*(C'\fR values for the \f(CW\*(C`binhtml\*(C'\fR
and/or \f(CW\*(C`libhtml\*(C'\fR installation targets.
.IP "install" 4
.IX Item "install"
[version 0.01]
.Sp
This action will use \f(CW\*(C`ExtUtils::Install\*(C'\fR to install the files from
\&\f(CW\*(C`blib/\*(C'\fR into the system.  See \*(L"\s-1INSTALL\s0 \s-1PATHS\s0\*(R"
for details about how Module::Build determines where to install
things, and how to influence this process.
.Sp
If you want the installation process to look around in \f(CW@INC\fR for
other versions of the stuff you're installing and try to delete it,
you can use the \f(CW\*(C`uninst\*(C'\fR parameter, which tells \f(CW\*(C`ExtUtils::Install\*(C'\fR to
do so:
.Sp
.Vb 1
\&  ./Build install uninst=1
.Ve
.Sp
This can be a good idea, as it helps prevent multiple versions of a
module from being present on your system, which can be a confusing
situation indeed.
.IP "installdeps" 4
.IX Item "installdeps"
[version 0.36]
.Sp
This action will use the \f(CW\*(C`cpan_client\*(C'\fR parameter as a command to install
missing prerequisites.  You will be prompted whether to install
optional dependencies.
.Sp
The \f(CW\*(C`cpan_client\*(C'\fR option defaults to 'cpan' but can be set as an option or in
\&\fI.modulebuildrc\fR.  It must be a shell command that takes a list of modules to
install as arguments (e.g. 'cpanp \-i' for \s-1CPANPLUS\s0).  If the program part is a
relative path (e.g. 'cpan' or 'cpanp'), it will be located relative to the perl
program that executed Build.PL.
.Sp
.Vb 3
\&  /opt/perl/5.8.9/bin/perl Build.PL
\&  ./Build installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
\&  # installs to 5.8.9
.Ve
.IP "manifest" 4
.IX Item "manifest"
[version 0.05]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will bring the \fI\s-1MANIFEST\s0\fR up to date with the
files currently present in the distribution.  You may use a
\&\fI\s-1MANIFEST\s0.SKIP\fR file to exclude certain files or directories from
inclusion in the \fI\s-1MANIFEST\s0\fR.  \fI\s-1MANIFEST\s0.SKIP\fR should contain a bunch
of regular expressions, one per line.  If a file in the distribution
directory matches any of the regular expressions, it won't be included
in the \fI\s-1MANIFEST\s0\fR.
.Sp
The following is a reasonable \fI\s-1MANIFEST\s0.SKIP\fR starting point, you can
add your own stuff to it:
.Sp
.Vb 7
\&  ^_build
\&  ^Build$
\&  ^blib
\&  ~$
\&  \e.bak$
\&  ^MANIFEST\e.SKIP$
\&  CVS
.Ve
.Sp
See the distcheck and skipcheck actions if you want to find out
what the \f(CW\*(C`manifest\*(C'\fR action would do, without actually doing anything.
.IP "manifest_skip" 4
.IX Item "manifest_skip"
[version 0.3608]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will generate a boilerplate \s-1MANIFEST\s0.SKIP file
if one does not already exist.
.IP "manpages" 4
.IX Item "manpages"
[version 0.28]
.Sp
This will generate man pages for any binary or library files under
\&\fBblib/\fR that contain \s-1POD\s0.  The man pages will only be installed if the
install paths can be determined from values in \f(CW\*(C`Config.pm\*(C'\fR.  You can
also supply or override install paths by specifying there values on
the command line with the \f(CW\*(C`bindoc\*(C'\fR and \f(CW\*(C`libdoc\*(C'\fR installation
targets.
.IP "pardist" 4
.IX Item "pardist"
[version 0.2806]
.Sp
Generates a \s-1PAR\s0 binary distribution for use with \s-1PAR\s0 or PAR::Dist.
.Sp
It requires that the PAR::Dist module (version 0.17 and up) is
installed on your system.
.IP "ppd" 4
.IX Item "ppd"
[version 0.20]
.Sp
Build a \s-1PPD\s0 file for your distribution.
.Sp
This action takes an optional argument \f(CW\*(C`codebase\*(C'\fR which is used in
the generated \s-1PPD\s0 file to specify the (usually relative) \s-1URL\s0 of the
distribution.  By default, this value is the distribution name without
any path information.
.Sp
Example:
.Sp
.Vb 1
\&  ./Build ppd \-\-codebase "MSWin32\-x86\-multi\-thread/Module\-Build\-0.21.tar.gz"
.Ve
.IP "ppmdist" 4
.IX Item "ppmdist"
[version 0.23]
.Sp
Generates a \s-1PPM\s0 binary distribution and a \s-1PPD\s0 description file.  This
action also invokes the \f(CW\*(C`ppd\*(C'\fR action, so it can accept the same
\&\f(CW\*(C`codebase\*(C'\fR argument described under that action.
.Sp
This uses the same mechanism as the \f(CW\*(C`dist\*(C'\fR action to tar & zip its
output, so you can supply \f(CW\*(C`tar\*(C'\fR and/or \f(CW\*(C`gzip\*(C'\fR parameters to affect
the result.
.IP "prereq_data" 4
.IX Item "prereq_data"
[version 0.32]
.Sp
This action prints out a Perl data structure of all prerequisites and the versions
required.  The output can be loaded again using \f(CW\*(C`eval()\*(C'\fR.  This can be useful for
external tools that wish to query a Build script for prerequisites.
.IP "prereq_report" 4
.IX Item "prereq_report"
[version 0.28]
.Sp
This action prints out a list of all prerequisites, the versions required, and
the versions actually installed.  This can be useful for reviewing the
configuration of your system prior to a build, or when compiling data to send
for a bug report.
.IP "pure_install" 4
.IX Item "pure_install"
[version 0.28]
.Sp
This action is identical to the \f(CW\*(C`install\*(C'\fR action.  In the future,
though, when \f(CW\*(C`install\*(C'\fR starts writing to the file
\&\fI$(\s-1INSTALLARCHLIB\s0)/perllocal.pod\fR, \f(CW\*(C`pure_install\*(C'\fR won't, and that
will be the only difference between them.
.IP "realclean" 4
.IX Item "realclean"
[version 0.01]
.Sp
This action is just like the \f(CW\*(C`clean\*(C'\fR action, but also removes the
\&\f(CW\*(C`_build\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script.  If you run the
\&\f(CW\*(C`realclean\*(C'\fR action, you are essentially starting over, so you will
have to re-create the \f(CW\*(C`Build\*(C'\fR script again.
.IP "retest" 4
.IX Item "retest"
[version 0.2806]
.Sp
This is just like the \f(CW\*(C`test\*(C'\fR action, but doesn't actually build the
distribution first, and doesn't add \fIblib/\fR to the load path, and
therefore will test against a \fIpreviously\fR installed version of the
distribution.  This can be used to verify that a certain installed
distribution still works, or to see whether newer versions of a
distribution still pass the old regression tests, and so on.
.IP "skipcheck" 4
.IX Item "skipcheck"
[version 0.05]
.Sp
Reports which files are skipped due to the entries in the
\&\fI\s-1MANIFEST\s0.SKIP\fR file (See manifest for details)
.IP "test" 4
.IX Item "test"
[version 0.01]
.Sp
This will use \f(CW\*(C`Test::Harness\*(C'\fR or \f(CW\*(C`TAP::Harness\*(C'\fR to run any regression
tests and report their results. Tests can be defined in the standard
places: a file called \f(CW\*(C`test.pl\*(C'\fR in the top-level directory, or several
files ending with \f(CW\*(C`.t\*(C'\fR in a \f(CW\*(C`t/\*(C'\fR directory.
.Sp
If you want tests to be 'verbose', i.e. show details of test execution
rather than just summary information, pass the argument \f(CW\*(C`verbose=1\*(C'\fR.
.Sp
If you want to run tests under the perl debugger, pass the argument
\&\f(CW\*(C`debugger=1\*(C'\fR.
.Sp
If you want to have Module::Build find test files with different file
name extensions, pass the \f(CW\*(C`test_file_exts\*(C'\fR argument with an array
of extensions, such as \f(CW\*(C`[qw( .t .s .z )]\*(C'\fR.
.Sp
If you want test to be run by \f(CW\*(C`TAP::Harness\*(C'\fR, rather than \f(CW\*(C`Test::Harness\*(C'\fR,
pass the argument \f(CW\*(C`tap_harness_args\*(C'\fR as an array reference of arguments to
pass to the TAP::Harness constructor.
.Sp
In addition, if a file called \f(CW\*(C`visual.pl\*(C'\fR exists in the top-level
directory, this file will be executed as a Perl script and its output
will be shown to the user.  This is a good place to put speed tests or
other tests that don't use the \f(CW\*(C`Test::Harness\*(C'\fR format for output.
.Sp
To override the choice of tests to run, you may pass a \f(CW\*(C`test_files\*(C'\fR
argument whose value is a whitespace-separated list of test scripts to
run.  This is especially useful in development, when you only want to
run a single test to see whether you've squashed a certain bug yet:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/something_failing.t
.Ve
.Sp
You may also pass several \f(CW\*(C`test_files\*(C'\fR arguments separately:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/one.t \-\-test_files t/two.t
.Ve
.Sp
or use a \f(CW\*(C`glob()\*(C'\fR\-style pattern:
.Sp
.Vb 1
\&  ./Build test \-\-test_files \*(Aqt/01\-*.t\*(Aq
.Ve
.IP "testall" 4
.IX Item "testall"
[version 0.2807]
.Sp
[Note: the 'testall' action and the code snippets below are currently
in alpha stage, see
\&\*(L"/www.nntp.perl.org/group/perl.module.build/2007/03/msg584.html\*(R"\*(L" in \*(R"http: ]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action plus each of the \f(CW\*(C`test$type\*(C'\fR actions defined by
the keys of the \f(CW\*(C`test_types\*(C'\fR parameter.
.Sp
Currently, you need to define the ACTION_test$type method yourself and
enumerate them in the test_types parameter.
.Sp
.Vb 12
\&  my $mb = Module::Build\->subclass(
\&    code => q(
\&      sub ACTION_testspecial { shift\->generic_test(type => \*(Aqspecial\*(Aq); }
\&      sub ACTION_testauthor  { shift\->generic_test(type => \*(Aqauthor\*(Aq); }
\&    )
\&  )\->new(
\&    ...
\&    test_types  => {
\&      special => \*(Aq.st\*(Aq,
\&      author  => [\*(Aq.at\*(Aq, \*(Aq.pt\*(Aq ],
\&    },
\&    ...
.Ve
.IP "testcover" 4
.IX Item "testcover"
[version 0.26]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action using \f(CW\*(C`Devel::Cover\*(C'\fR, generating a
code-coverage report showing which parts of the code were actually
exercised during the tests.
.Sp
To pass options to \f(CW\*(C`Devel::Cover\*(C'\fR, set the \f(CW$DEVEL_COVER_OPTIONS\fR
environment variable:
.Sp
.Vb 1
\&  DEVEL_COVER_OPTIONS=\-ignore,Build ./Build testcover
.Ve
.IP "testdb" 4
.IX Item "testdb"
[version 0.05]
.Sp
This is a synonym for the 'test' action with the \f(CW\*(C`debugger=1\*(C'\fR
argument.
.IP "testpod" 4
.IX Item "testpod"
[version 0.25]
.Sp
This checks all the files described in the \f(CW\*(C`docs\*(C'\fR action and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output.  If you are a module author,
this is useful to run before creating a new release.
.IP "testpodcoverage" 4
.IX Item "testpodcoverage"
[version 0.28]
.Sp
This checks the pod coverage of the distribution and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output. If you are a module author,
this is useful to run before creating a new release.
.IP "versioninstall" 4
.IX Item "versioninstall"
[version 0.16]
.Sp
** Note: since \f(CW\*(C`only.pm\*(C'\fR is so new, and since we just recently added
support for it here too, this feature is to be considered
experimental. **
.Sp
If you have the \f(CW\*(C`only.pm\*(C'\fR module installed on your system, you can
use this action to install a module into the version-specific library
trees.  This means that you can have several versions of the same
module installed and \f(CW\*(C`use\*(C'\fR a specific one like this:
.Sp
.Vb 1
\&  use only MyModule => 0.55;
.Ve
.Sp
To override the default installation libraries in \f(CW\*(C`only::config\*(C'\fR,
specify the \f(CW\*(C`versionlib\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-versionlib /my/version/place/
.Ve
.Sp
To override which version the module is installed as, specify the
\&\f(CW\*(C`version\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-version 0.50
.Ve
.Sp
See the \f(CW\*(C`only.pm\*(C'\fR documentation for more information on
version-specific installs.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Command Line Options"
.IX Subsection "Command Line Options"
The following options can be used during any invocation of \f(CW\*(C`Build.PL\*(C'\fR
or the Build script, during any action.  For information on other
options specific to an action, see the documentation for the
respective action.
.PP
\&\s-1NOTE:\s0 There is some preliminary support for options to use the more
familiar long option style.  Most options can be preceded with the
\&\f(CW\*(C`\-\-\*(C'\fR long option prefix, and the underscores changed to dashes
(e.g. \f(CW\*(C`\-\-use\-rcfile\*(C'\fR).  Additionally, the argument to boolean options is
optional, and boolean options can be negated by prefixing them with
\&\f(CW\*(C`no\*(C'\fR or \f(CW\*(C`no\-\*(C'\fR (e.g. \f(CW\*(C`\-\-noverbose\*(C'\fR or \f(CW\*(C`\-\-no\-verbose\*(C'\fR).
.IP "quiet" 4
.IX Item "quiet"
Suppress informative messages on output.
.IP "verbose" 4
.IX Item "verbose"
Display extra information about the Build on output.  \f(CW\*(C`verbose\*(C'\fR will
turn off \f(CW\*(C`quiet\*(C'\fR
.IP "cpan_client" 4
.IX Item "cpan_client"
Sets the \f(CW\*(C`cpan_client\*(C'\fR command for use with the \f(CW\*(C`installdeps\*(C'\fR action.
See \f(CW\*(C`installdeps\*(C'\fR for more details.
.IP "use_rcfile" 4
.IX Item "use_rcfile"
Load the \fI~/.modulebuildrc\fR option file.  This option can be set to
false to prevent the custom resource file from being loaded.
.IP "allow_mb_mismatch" 4
.IX Item "allow_mb_mismatch"
Suppresses the check upon startup that the version of Module::Build
we're now running under is the same version that was initially invoked
when building the distribution (i.e. when the \f(CW\*(C`Build.PL\*(C'\fR script was
first run).  As of 0.3601, a mismatch results in a warning instead of
a fatal error, so this option effectively just suppresses the warning.
.IP "debug" 4
.IX Item "debug"
Prints Module::Build debugging information to \s-1STDOUT\s0, such as a trace of
executed build actions.
.SS "Default Options File (\fI.modulebuildrc\fP)"
.IX Subsection "Default Options File (.modulebuildrc)"
[version 0.28]
.PP
When Module::Build starts up, it will look first for a file,
\&\fI\f(CI$ENV\fI{\s-1HOME\s0}/.modulebuildrc\fR.  If it's not found there, it will look
in the the \fI.modulebuildrc\fR file in the directories referred to by
the environment variables \f(CW\*(C`HOMEDRIVE\*(C'\fR + \f(CW\*(C`HOMEDIR\*(C'\fR, \f(CW\*(C`USERPROFILE\*(C'\fR,
\&\f(CW\*(C`APPDATA\*(C'\fR, \f(CW\*(C`WINDIR\*(C'\fR, \f(CW\*(C`SYS$LOGIN\*(C'\fR.  If the file exists, the options
specified there will be used as defaults, as if they were typed on the
command line.  The defaults can be overridden by specifying new values
on the command line.
.PP
The action name must come at the beginning of the line, followed by any
amount of whitespace and then the options.  Options are given the same
as they would be on the command line.  They can be separated by any
amount of whitespace, including newlines, as long there is whitespace at
the beginning of each continued line.  Anything following a hash mark (\f(CW\*(C`#\*(C'\fR)
is considered a comment, and is stripped before parsing.  If more than
one line begins with the same action name, those lines are merged into
one set of options.
.PP
Besides the regular actions, there are two special pseudo-actions: the
key \f(CW\*(C`*\*(C'\fR (asterisk) denotes any global options that should be applied
to all actions, and the key 'Build_PL' specifies options to be applied
when you invoke \f(CW\*(C`perl Build.PL\*(C'\fR.
.PP
.Vb 5
\&  *           verbose=1   # global options
\&  diff        flags=\-u
\&  install     \-\-install_base /home/ken
\&              \-\-install_path html=/home/ken/docs/html
\&  installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
.Ve
.PP
If you wish to locate your resource file in a different location, you
can set the environment variable \f(CW\*(C`MODULEBUILDRC\*(C'\fR to the complete
absolute path of the file containing your options.
.SS "Environment variables"
.IX Subsection "Environment variables"
.IP "\s-1MODULEBUILDRC\s0" 4
.IX Item "MODULEBUILDRC"
[version 0.28]
.Sp
Specifies an alternate location for a default options file as described above.
.IP "\s-1PERL_MB_OPT\s0" 4
.IX Item "PERL_MB_OPT"
[version 0.36]
.Sp
Command line options that are applied to Build.PL or any Build action.  The
string is split as the shell would (e.g. whitespace) and the result is
prepended to any actual command-line arguments.
.SH "INSTALL PATHS"
.IX Header "INSTALL PATHS"
[version 0.19]
.PP
When you invoke Module::Build's \f(CW\*(C`build\*(C'\fR action, it needs to figure
out where to install things.  The nutshell version of how this works
is that default installation locations are determined from
\&\fIConfig.pm\fR, and they may be overridden by using the \f(CW\*(C`install_path\*(C'\fR
parameter.  An \f(CW\*(C`install_base\*(C'\fR parameter lets you specify an
alternative installation root like \fI/home/foo\fR, and a \f(CW\*(C`destdir\*(C'\fR lets
you specify a temporary installation directory like \fI/tmp/install\fR in
case you want to create bundled-up installable packages.
.PP
Natively, Module::Build provides default installation locations for
the following types of installable items:
.IP "lib" 4
.IX Item "lib"
Usually pure-Perl module files ending in \fI.pm\fR.
.IP "arch" 4
.IX Item "arch"
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling
\&\s-1XS\s0, Inline, or similar code.
.IP "script" 4
.IX Item "script"
Programs written in pure Perl.  In order to improve reuse, try to make
these as small as possible \- put the code into modules whenever
possible.
.IP "bin" 4
.IX Item "bin"
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or
something.  Pretty rare to see this in a perl distribution, but it
happens.
.IP "bindoc" 4
.IX Item "bindoc"
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually
generated from the \s-1POD\s0 in those files.  Under Unix, these are manual
pages belonging to the 'man1' category.
.IP "libdoc" 4
.IX Item "libdoc"
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually
generated from the \s-1POD\s0 in \fI.pm\fR files.  Under Unix, these are manual
pages belonging to the 'man3' category.
.IP "binhtml" 4
.IX Item "binhtml"
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.IP "libhtml" 4
.IX Item "libhtml"
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.PP
Four other parameters let you control various aspects of how
installation paths are determined:
.IP "installdirs" 4
.IX Item "installdirs"
The default destinations for these installable things come from
entries in your system's \f(CW\*(C`Config.pm\*(C'\fR.  You can select from three
different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR
parameter as follows:
.Sp
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from Config.pm:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitebin      installvendorbin
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is
\&    determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.Sp
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".  If you're creating
vendor distributions of module packages, you may want to do something
like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-installdirs vendor
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-installdirs vendor
.Ve
.Sp
If you're installing an updated version of a module that was included
with perl itself (i.e. a \*(L"core module\*(R"), then you may set
\&\f(CW\*(C`installdirs\*(C'\fR to \*(L"core\*(R" to overwrite the module in its present
location.
.Sp
(Note that the 'script' line is different from \f(CW\*(C`MakeMaker\*(C'\fR \-
unfortunately there's no such thing as \*(L"installsitescript\*(R" or
\&\*(L"installvendorscript\*(R" entry in \f(CW\*(C`Config.pm\*(C'\fR, so we use the
\&\*(L"installsitebin\*(R" and \*(L"installvendorbin\*(R" entries to at least get the
general location right.  In the future, if \f(CW\*(C`Config.pm\*(C'\fR adds some more
appropriate entries, we'll start using those.)
.IP "install_path" 4
.IX Item "install_path"
Once the defaults have been set, you can override them.
.Sp
On the command line, that would look like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.Sp
or this:
.Sp
.Vb 1
\&  ./Build install \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.IP "install_base" 4
.IX Item "install_base"
You can also set the whole bunch of installation paths by supplying the
\&\f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For
instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux
system, you'll install as follows:
.Sp
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.Sp
Note that this is \fIdifferent\fR from how \f(CW\*(C`MakeMaker\*(C'\fR's \f(CW\*(C`PREFIX\*(C'\fR
parameter works.  \f(CW\*(C`install_base\*(C'\fR just gives you a default layout under the
directory you specify, which may have little to do with the
\&\f(CW\*(C`installdirs=site\*(C'\fR layout.
.Sp
The exact layout under the directory you specify may vary by system \-
we try to do the \*(L"sensible\*(R" thing on each platform.
.IP "destdir" 4
.IX Item "destdir"
If you want to install everything into a temporary directory first
(for instance, if you want to create a directory tree that a package
manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can
use the \f(CW\*(C`destdir\*(C'\fR parameter:
.Sp
.Vb 1
\&  perl Build.PL \-\-destdir /tmp/foo
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-destdir /tmp/foo
.Ve
.Sp
This will effectively install to \*(L"/tmp/foo/$sitelib\*(R",
\&\*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use
\&\f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever
platform you're installing on.
.IP "prefix" 4
.IX Item "prefix"
Provided for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR's \s-1PREFIX\s0 argument.
\&\f(CW\*(C`prefix\*(C'\fR should be used when you wish Module::Build to install your
modules, documentation and scripts in the same place
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR does.
.Sp
The following are equivalent.
.Sp
.Vb 2
\&    perl Build.PL \-\-prefix /tmp/foo
\&    perl Makefile.PL PREFIX=/tmp/foo
.Ve
.Sp
Because of the very complex nature of the prefixification logic, the
behavior of \s-1PREFIX\s0 in \f(CW\*(C`MakeMaker\*(C'\fR has changed subtly over time.
Module::Build's \-\-prefix logic is equivalent to the \s-1PREFIX\s0 logic found
in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR 6.30.
.Sp
If you do not need to retain compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or
are starting a fresh Perl installation we recommend you use
\&\f(CW\*(C`install_base\*(C'\fR instead (and \f(CW\*(C`INSTALL_BASE\*(C'\fR in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR).
See \*(L"Instaling in the same location as
ExtUtils::MakeMaker\*(R" in Module::Build::Cookbook for further information.
.SH "MOTIVATIONS"
.IX Header "MOTIVATIONS"
There are several reasons I wanted to start over, and not just fix
what I didn't like about \f(CW\*(C`MakeMaker\*(C'\fR:
.IP "\(bu" 4
I don't like the core idea of \f(CW\*(C`MakeMaker\*(C'\fR, namely that \f(CW\*(C`make\*(C'\fR should be
involved in the build process.  Here are my reasons:
.RS 4
.IP "+" 4
When a person is installing a Perl module, what can you assume about
their environment?  Can you assume they have \f(CW\*(C`make\*(C'\fR?  No, but you can
assume they have some version of Perl.
.IP "+" 4
When a person is writing a Perl module for intended distribution, can
you assume that they know how to build a Makefile, so they can
customize their build process?  No, but you can assume they know Perl,
and could customize that way.
.RE
.RS 4
.Sp
For years, these things have been a barrier to people getting the
build/install process to do what they want.
.RE
.IP "\(bu" 4
There are several architectural decisions in \f(CW\*(C`MakeMaker\*(C'\fR that make it
very difficult to customize its behavior.  For instance, when using
\&\f(CW\*(C`MakeMaker\*(C'\fR you do \f(CW\*(C`use ExtUtils::MakeMaker\*(C'\fR, but the object created in
\&\f(CW\*(C`WriteMakefile()\*(C'\fR is actually blessed into a package name that's
created on the fly, so you can't simply subclass
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  There is a workaround \f(CW\*(C`MY\*(C'\fR package that lets
you override certain \f(CW\*(C`MakeMaker\*(C'\fR methods, but only certain explicitly
preselected (by \f(CW\*(C`MakeMaker\*(C'\fR) methods can be overridden.  Also, the method
of customization is very crude: you have to modify a string containing
the Makefile text for the particular target.  Since these strings
aren't documented, and \fIcan't\fR be documented (they take on different
values depending on the platform, version of perl, version of
\&\f(CW\*(C`MakeMaker\*(C'\fR, etc.), you have no guarantee that your modifications will
work on someone else's machine or after an upgrade of \f(CW\*(C`MakeMaker\*(C'\fR or
perl.
.IP "\(bu" 4
It is risky to make major changes to \f(CW\*(C`MakeMaker\*(C'\fR, since it does so many
things, is so important, and generally works.  \f(CW\*(C`Module::Build\*(C'\fR is an
entirely separate package so that I can work on it all I want, without
worrying about backward compatibility.
.IP "\(bu" 4
Finally, Perl is said to be a language for system administration.
Could it really be the case that Perl isn't up to the task of building
and installing software?  Even if that software is a bunch of stupid
little \f(CW\*(C`.pm\*(C'\fR files that just need to be copied from one place to
another?  My sense was that we could design a system to accomplish
this in a flexible, extensible, and friendly manner.  Or die trying.
.SH "TO DO"
.IX Header "TO DO"
The current method of relying on time stamps to determine whether a
derived file is out of date isn't likely to scale well, since it
requires tracing all dependencies backward, it runs into problems on
\&\s-1NFS\s0, and it's just generally flimsy.  It would be better to use an \s-1MD5\s0
signature or the like, if available.  See \f(CW\*(C`cons\*(C'\fR for an example.
.PP
.Vb 2
\& \- append to perllocal.pod
\& \- add a \*(Aqplugin\*(Aq functionality
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.PP
Development questions, bug reports, and patches should be sent to the
Module-Build mailing list at <module\-build@perl.org>.
.PP
Bug reports are also welcome at
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Module\-Build>.
.PP
The latest development version is available from the Git
repository at <https://github.com/dagolden/module\-build/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build::Cookbook, Module::Build::Authoring,
Module::Build::API, ExtUtils::MakeMaker
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::Meta::Spec
.PP
<http://www.dsmit.com/cons/>
.PP
<http://search.cpan.org/dist/PerlBuildSystem/>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build5.18.3pm                        0100644 0001750 0001750 00000127010 12566207460 024207  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build 3pm"
.TH Module::Build 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build \- Build and install Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Standard process for building & installing modules:
.PP
.Vb 4
\&  perl Build.PL
\&  ./Build
\&  ./Build test
\&  ./Build install
.Ve
.PP
Or, if you're on a platform (like \s-1DOS\s0 or Windows) that doesn't require
the \*(L"./\*(R" notation, you can do this:
.PP
.Vb 4
\&  perl Build.PL
\&  Build
\&  Build test
\&  Build install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Build\*(C'\fR is a system for building, testing, and installing
Perl modules.  It is meant to be an alternative to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  Developers may alter the behavior of the
module through subclassing in a much more straightforward way than
with \f(CW\*(C`MakeMaker\*(C'\fR.  It also does not require a \f(CW\*(C`make\*(C'\fR on your system
\&\- most of the \f(CW\*(C`Module::Build\*(C'\fR code is pure-perl and written in a very
cross-platform way.  In fact, you don't even need a shell, so even
platforms like MacOS (traditional) can use it fairly easily.  Its only
prerequisites are modules that are included with perl 5.6.0, and it
works fine on perl 5.005 if you can install a few additional modules.
.PP
See \*(L"\s-1MOTIVATIONS\*(R"\s0 for more comparisons between \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR
and \f(CW\*(C`Module::Build\*(C'\fR.
.PP
To install \f(CW\*(C`Module::Build\*(C'\fR, and any other module that uses
\&\f(CW\*(C`Module::Build\*(C'\fR for its installation process, do the following:
.PP
.Vb 4
\&  perl Build.PL       # \*(AqBuild.PL\*(Aq script creates the \*(AqBuild\*(Aq script
\&  ./Build             # Need ./ to ensure we\*(Aqre using this "Build" script
\&  ./Build test        # and not another one that happens to be in the PATH
\&  ./Build install
.Ve
.PP
This illustrates initial configuration and the running of three
\&'actions'.  In this case the actions run are 'build' (the default
action), 'test', and 'install'.  Other actions defined so far include:
.PP
.Vb 10
\&  build                          manifest
\&  clean                          manifest_skip
\&  code                           manpages
\&  config_data                    pardist
\&  diff                           ppd
\&  dist                           ppmdist
\&  distcheck                      prereq_data
\&  distclean                      prereq_report
\&  distdir                        pure_install
\&  distinstall                    realclean
\&  distmeta                       retest
\&  distsign                       skipcheck
\&  disttest                       test
\&  docs                           testall
\&  fakeinstall                    testcover
\&  help                           testdb
\&  html                           testpod
\&  install                        testpodcoverage
\&  installdeps                    versioninstall
.Ve
.PP
You can run the 'help' action for a complete list of actions.
.SH "GUIDE TO DOCUMENTATION"
.IX Header "GUIDE TO DOCUMENTATION"
The documentation for \f(CW\*(C`Module::Build\*(C'\fR is broken up into sections:
.IP "General Usage (Module::Build)" 4
.IX Item "General Usage (Module::Build)"
This is the document you are currently reading. It describes basic
usage and background information.  Its main purpose is to assist the
user who wants to learn how to invoke and control \f(CW\*(C`Module::Build\*(C'\fR
scripts at the command line.
.IP "Authoring Reference (Module::Build::Authoring)" 4
.IX Item "Authoring Reference (Module::Build::Authoring)"
This document describes the structure and organization of
\&\f(CW\*(C`Module::Build\*(C'\fR, and the relevant concepts needed by authors who are
writing \fIBuild.PL\fR scripts for a distribution or controlling
\&\f(CW\*(C`Module::Build\*(C'\fR processes programmatically.
.IP "\s-1API\s0 Reference (Module::Build::API)" 4
.IX Item "API Reference (Module::Build::API)"
This is a reference to the \f(CW\*(C`Module::Build\*(C'\fR \s-1API.\s0
.IP "Cookbook (Module::Build::Cookbook)" 4
.IX Item "Cookbook (Module::Build::Cookbook)"
This document demonstrates how to accomplish many common tasks.  It
covers general command line usage and authoring of \fIBuild.PL\fR
scripts.  Includes working examples.
.SH "ACTIONS"
.IX Header "ACTIONS"
There are some general principles at work here.  First, each task when
building a module is called an \*(L"action\*(R".  These actions are listed
above; they correspond to the building, testing, installing,
packaging, etc., tasks.
.PP
Second, arguments are processed in a very systematic way.  Arguments
are always key=value pairs.  They may be specified at \f(CW\*(C`perl Build.PL\*(C'\fR
time (i.e. \f(CW\*(C`perl Build.PL destdir=/my/secret/place\*(C'\fR), in which case
their values last for the lifetime of the \f(CW\*(C`Build\*(C'\fR script.  They may
also be specified when executing a particular action (i.e.
\&\f(CW\*(C`Build test verbose=1\*(C'\fR), in which case their values last only for the
lifetime of that command.  Per-action command line parameters take
precedence over parameters specified at \f(CW\*(C`perl Build.PL\*(C'\fR time.
.PP
The build process also relies heavily on the \f(CW\*(C`Config.pm\*(C'\fR module.
If the user wishes to override any of the
values in \f(CW\*(C`Config.pm\*(C'\fR, she may specify them like so:
.PP
.Vb 1
\&  perl Build.PL \-\-config cc=gcc \-\-config ld=gcc
.Ve
.PP
The following build actions are provided by default.
.IP "build" 4
.IX Item "build"
[version 0.01]
.Sp
If you run the \f(CW\*(C`Build\*(C'\fR script without any arguments, it runs the
\&\f(CW\*(C`build\*(C'\fR action, which in turn runs the \f(CW\*(C`code\*(C'\fR and \f(CW\*(C`docs\*(C'\fR actions.
.Sp
This is analogous to the \f(CW\*(C`MakeMaker\*(C'\fR \fImake all\fR target.
.IP "clean" 4
.IX Item "clean"
[version 0.01]
.Sp
This action will clean up any files that the build process may have
created, including the \f(CW\*(C`blib/\*(C'\fR directory (but not including the
\&\f(CW\*(C`_build/\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script itself).
.IP "code" 4
.IX Item "code"
[version 0.20]
.Sp
This action builds your code base.
.Sp
By default it just creates a \f(CW\*(C`blib/\*(C'\fR directory and copies any \f(CW\*(C`.pm\*(C'\fR
and \f(CW\*(C`.pod\*(C'\fR files from your \f(CW\*(C`lib/\*(C'\fR directory into the \f(CW\*(C`blib/\*(C'\fR
directory.  It also compiles any \f(CW\*(C`.xs\*(C'\fR files from \f(CW\*(C`lib/\*(C'\fR and places
them in \f(CW\*(C`blib/\*(C'\fR.  Of course, you need a working C compiler (probably
the same one that built perl itself) for the compilation to work
properly.
.Sp
The \f(CW\*(C`code\*(C'\fR action also runs any \f(CW\*(C`.PL\*(C'\fR files in your \fIlib/\fR
directory.  Typically these create other files, named the same but
without the \f(CW\*(C`.PL\*(C'\fR ending.  For example, a file \fIlib/Foo/Bar.pm.PL\fR
could create the file \fIlib/Foo/Bar.pm\fR.  The \f(CW\*(C`.PL\*(C'\fR files are
processed first, so any \f(CW\*(C`.pm\*(C'\fR files (or other kinds that we deal
with) will get copied correctly.
.IP "config_data" 4
.IX Item "config_data"
[version 0.26]
.Sp
\&...
.IP "diff" 4
.IX Item "diff"
[version 0.14]
.Sp
This action will compare the files about to be installed with their
installed counterparts.  For .pm and .pod files, a diff will be shown
(this currently requires a 'diff' program to be in your \s-1PATH\s0).  For
other files like compiled binary files, we simply report whether they
differ.
.Sp
A \f(CW\*(C`flags\*(C'\fR parameter may be passed to the action, which will be passed
to the 'diff' program.  Consult your 'diff' documentation for the
parameters it will accept \- a good one is \f(CW\*(C`\-u\*(C'\fR:
.Sp
.Vb 1
\&  ./Build diff flags=\-u
.Ve
.IP "dist" 4
.IX Item "dist"
[version 0.02]
.Sp
This action is helpful for module authors who want to package up their
module for source distribution through a medium like \s-1CPAN. \s0 It will create a
tarball of the files listed in \fI\s-1MANIFEST\s0\fR and compress the tarball using
\&\s-1GZIP\s0 compression.
.Sp
By default, this action will use the \f(CW\*(C`Archive::Tar\*(C'\fR module. However, you can
force it to use binary \*(L"tar\*(R" and \*(L"gzip\*(R" executables by supplying an explicit
\&\f(CW\*(C`tar\*(C'\fR (and optional \f(CW\*(C`gzip\*(C'\fR) parameter:
.Sp
.Vb 1
\&  ./Build dist \-\-tar C:\epath\eto\etar.exe \-\-gzip C:\epath\eto\ezip.exe
.Ve
.IP "distcheck" 4
.IX Item "distcheck"
[version 0.05]
.Sp
Reports which files are in the build directory but not in the
\&\fI\s-1MANIFEST\s0\fR file, and vice versa.  (See manifest for details.)
.IP "distclean" 4
.IX Item "distclean"
[version 0.05]
.Sp
Performs the 'realclean' action and then the 'distcheck' action.
.IP "distdir" 4
.IX Item "distdir"
[version 0.05]
.Sp
Creates a \*(L"distribution directory\*(R" named \f(CW\*(C`$dist_name\-$dist_version\*(C'\fR
(if that directory already exists, it will be removed first), then
copies all the files listed in the \fI\s-1MANIFEST\s0\fR file to that directory.
This directory is what the distribution tarball is created from.
.IP "distinstall" 4
.IX Item "distinstall"
[version 0.37]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'install' actions in that
directory.  Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be
applied during subprocesses
.IP "distmeta" 4
.IX Item "distmeta"
[version 0.21]
.Sp
Creates the \fI\s-1META\s0.yml\fR file that describes the distribution.
.Sp
\&\fI\s-1META\s0.yml\fR is a file containing various bits of \fImetadata\fR about the
distribution.  The metadata includes the distribution name, version,
abstract, prerequisites, license, and various other data about the
distribution.  This file is created as \fI\s-1META\s0.yml\fR in a simplified \s-1YAML\s0 format.
.Sp
\&\fI\s-1META\s0.yml\fR file must also be listed in \fI\s-1MANIFEST\s0\fR \- if it's not, a
warning will be issued.
.Sp
The current version of the \fI\s-1META\s0.yml\fR specification can be found
on \s-1CPAN\s0 as CPAN::Meta::Spec.
.IP "distsign" 4
.IX Item "distsign"
[version 0.16]
.Sp
Uses \f(CW\*(C`Module::Signature\*(C'\fR to create a \s-1SIGNATURE\s0 file for your
distribution, and adds the \s-1SIGNATURE\s0 file to the distribution's
\&\s-1MANIFEST.\s0
.IP "disttest" 4
.IX Item "disttest"
[version 0.05]
.Sp
Performs the 'distdir' action, then switches into that directory and runs a
\&\f(CW\*(C`perl Build.PL\*(C'\fR, followed by the 'build' and 'test' actions in that directory.
Use \s-1PERL_MB_OPT\s0 or \fI.modulebuildrc\fR to set options that should be applied
during subprocesses
.IP "docs" 4
.IX Item "docs"
[version 0.20]
.Sp
This will generate documentation (e.g. Unix man pages and \s-1HTML\s0
documents) for any installable items under \fBblib/\fR that
contain \s-1POD. \s0 If there are no \f(CW\*(C`bindoc\*(C'\fR or \f(CW\*(C`libdoc\*(C'\fR installation
targets defined (as will be the case on systems that don't support
Unix manpages) no action is taken for manpages.  If there are no
\&\f(CW\*(C`binhtml\*(C'\fR or \f(CW\*(C`libhtml\*(C'\fR installation targets defined no action is
taken for \s-1HTML\s0 documents.
.IP "fakeinstall" 4
.IX Item "fakeinstall"
[version 0.02]
.Sp
This is just like the \f(CW\*(C`install\*(C'\fR action, but it won't actually do
anything, it will just report what it \fIwould\fR have done if you had
actually run the \f(CW\*(C`install\*(C'\fR action.
.IP "help" 4
.IX Item "help"
[version 0.03]
.Sp
This action will simply print out a message that is meant to help you
use the build process.  It will show you a list of available build
actions too.
.Sp
With an optional argument specifying an action name (e.g. \f(CW\*(C`Build help
test\*(C'\fR), the 'help' action will show you any \s-1POD\s0 documentation it can
find for that action.
.IP "html" 4
.IX Item "html"
[version 0.26]
.Sp
This will generate \s-1HTML\s0 documentation for any binary or library files
under \fBblib/\fR that contain \s-1POD. \s0 The \s-1HTML\s0 documentation will only be
installed if the install paths can be determined from values in
\&\f(CW\*(C`Config.pm\*(C'\fR.  You can also supply or override install paths on the
command line by specifying \f(CW\*(C`install_path\*(C'\fR values for the \f(CW\*(C`binhtml\*(C'\fR
and/or \f(CW\*(C`libhtml\*(C'\fR installation targets.
.IP "install" 4
.IX Item "install"
[version 0.01]
.Sp
This action will use \f(CW\*(C`ExtUtils::Install\*(C'\fR to install the files from
\&\f(CW\*(C`blib/\*(C'\fR into the system.  See \*(L"\s-1INSTALL PATHS\*(R"\s0
for details about how Module::Build determines where to install
things, and how to influence this process.
.Sp
If you want the installation process to look around in \f(CW@INC\fR for
other versions of the stuff you're installing and try to delete it,
you can use the \f(CW\*(C`uninst\*(C'\fR parameter, which tells \f(CW\*(C`ExtUtils::Install\*(C'\fR to
do so:
.Sp
.Vb 1
\&  ./Build install uninst=1
.Ve
.Sp
This can be a good idea, as it helps prevent multiple versions of a
module from being present on your system, which can be a confusing
situation indeed.
.IP "installdeps" 4
.IX Item "installdeps"
[version 0.36]
.Sp
This action will use the \f(CW\*(C`cpan_client\*(C'\fR parameter as a command to install
missing prerequisites.  You will be prompted whether to install
optional dependencies.
.Sp
The \f(CW\*(C`cpan_client\*(C'\fR option defaults to 'cpan' but can be set as an option or in
\&\fI.modulebuildrc\fR.  It must be a shell command that takes a list of modules to
install as arguments (e.g. 'cpanp \-i' for \s-1CPANPLUS\s0).  If the program part is a
relative path (e.g. 'cpan' or 'cpanp'), it will be located relative to the perl
program that executed Build.PL.
.Sp
.Vb 3
\&  /opt/perl/5.8.9/bin/perl Build.PL
\&  ./Build installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
\&  # installs to 5.8.9
.Ve
.IP "manifest" 4
.IX Item "manifest"
[version 0.05]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will bring the \fI\s-1MANIFEST\s0\fR up to date with the
files currently present in the distribution.  You may use a
\&\fI\s-1MANIFEST.SKIP\s0\fR file to exclude certain files or directories from
inclusion in the \fI\s-1MANIFEST\s0\fR.  \fI\s-1MANIFEST.SKIP\s0\fR should contain a bunch
of regular expressions, one per line.  If a file in the distribution
directory matches any of the regular expressions, it won't be included
in the \fI\s-1MANIFEST\s0\fR.
.Sp
The following is a reasonable \fI\s-1MANIFEST.SKIP\s0\fR starting point, you can
add your own stuff to it:
.Sp
.Vb 7
\&  ^_build
\&  ^Build$
\&  ^blib
\&  ~$
\&  \e.bak$
\&  ^MANIFEST\e.SKIP$
\&  CVS
.Ve
.Sp
See the distcheck and skipcheck actions if you want to find out
what the \f(CW\*(C`manifest\*(C'\fR action would do, without actually doing anything.
.IP "manifest_skip" 4
.IX Item "manifest_skip"
[version 0.3608]
.Sp
This is an action intended for use by module authors, not people
installing modules.  It will generate a boilerplate \s-1MANIFEST.SKIP\s0 file
if one does not already exist.
.IP "manpages" 4
.IX Item "manpages"
[version 0.28]
.Sp
This will generate man pages for any binary or library files under
\&\fBblib/\fR that contain \s-1POD. \s0 The man pages will only be installed if the
install paths can be determined from values in \f(CW\*(C`Config.pm\*(C'\fR.  You can
also supply or override install paths by specifying there values on
the command line with the \f(CW\*(C`bindoc\*(C'\fR and \f(CW\*(C`libdoc\*(C'\fR installation
targets.
.IP "pardist" 4
.IX Item "pardist"
[version 0.2806]
.Sp
Generates a \s-1PAR\s0 binary distribution for use with \s-1PAR\s0 or PAR::Dist.
.Sp
It requires that the PAR::Dist module (version 0.17 and up) is
installed on your system.
.IP "ppd" 4
.IX Item "ppd"
[version 0.20]
.Sp
Build a \s-1PPD\s0 file for your distribution.
.Sp
This action takes an optional argument \f(CW\*(C`codebase\*(C'\fR which is used in
the generated \s-1PPD\s0 file to specify the (usually relative) \s-1URL\s0 of the
distribution.  By default, this value is the distribution name without
any path information.
.Sp
Example:
.Sp
.Vb 1
\&  ./Build ppd \-\-codebase "MSWin32\-x86\-multi\-thread/Module\-Build\-0.21.tar.gz"
.Ve
.IP "ppmdist" 4
.IX Item "ppmdist"
[version 0.23]
.Sp
Generates a \s-1PPM\s0 binary distribution and a \s-1PPD\s0 description file.  This
action also invokes the \f(CW\*(C`ppd\*(C'\fR action, so it can accept the same
\&\f(CW\*(C`codebase\*(C'\fR argument described under that action.
.Sp
This uses the same mechanism as the \f(CW\*(C`dist\*(C'\fR action to tar & zip its
output, so you can supply \f(CW\*(C`tar\*(C'\fR and/or \f(CW\*(C`gzip\*(C'\fR parameters to affect
the result.
.IP "prereq_data" 4
.IX Item "prereq_data"
[version 0.32]
.Sp
This action prints out a Perl data structure of all prerequisites and the versions
required.  The output can be loaded again using \f(CW\*(C`eval()\*(C'\fR.  This can be useful for
external tools that wish to query a Build script for prerequisites.
.IP "prereq_report" 4
.IX Item "prereq_report"
[version 0.28]
.Sp
This action prints out a list of all prerequisites, the versions required, and
the versions actually installed.  This can be useful for reviewing the
configuration of your system prior to a build, or when compiling data to send
for a bug report.
.IP "pure_install" 4
.IX Item "pure_install"
[version 0.28]
.Sp
This action is identical to the \f(CW\*(C`install\*(C'\fR action.  In the future,
though, when \f(CW\*(C`install\*(C'\fR starts writing to the file
\&\fI$(\s-1INSTALLARCHLIB\s0)/perllocal.pod\fR, \f(CW\*(C`pure_install\*(C'\fR won't, and that
will be the only difference between them.
.IP "realclean" 4
.IX Item "realclean"
[version 0.01]
.Sp
This action is just like the \f(CW\*(C`clean\*(C'\fR action, but also removes the
\&\f(CW\*(C`_build\*(C'\fR directory and the \f(CW\*(C`Build\*(C'\fR script.  If you run the
\&\f(CW\*(C`realclean\*(C'\fR action, you are essentially starting over, so you will
have to re-create the \f(CW\*(C`Build\*(C'\fR script again.
.IP "retest" 4
.IX Item "retest"
[version 0.2806]
.Sp
This is just like the \f(CW\*(C`test\*(C'\fR action, but doesn't actually build the
distribution first, and doesn't add \fIblib/\fR to the load path, and
therefore will test against a \fIpreviously\fR installed version of the
distribution.  This can be used to verify that a certain installed
distribution still works, or to see whether newer versions of a
distribution still pass the old regression tests, and so on.
.IP "skipcheck" 4
.IX Item "skipcheck"
[version 0.05]
.Sp
Reports which files are skipped due to the entries in the
\&\fI\s-1MANIFEST.SKIP\s0\fR file (See manifest for details)
.IP "test" 4
.IX Item "test"
[version 0.01]
.Sp
This will use \f(CW\*(C`Test::Harness\*(C'\fR or \f(CW\*(C`TAP::Harness\*(C'\fR to run any regression
tests and report their results. Tests can be defined in the standard
places: a file called \f(CW\*(C`test.pl\*(C'\fR in the top-level directory, or several
files ending with \f(CW\*(C`.t\*(C'\fR in a \f(CW\*(C`t/\*(C'\fR directory.
.Sp
If you want tests to be 'verbose', i.e. show details of test execution
rather than just summary information, pass the argument \f(CW\*(C`verbose=1\*(C'\fR.
.Sp
If you want to run tests under the perl debugger, pass the argument
\&\f(CW\*(C`debugger=1\*(C'\fR.
.Sp
If you want to have Module::Build find test files with different file
name extensions, pass the \f(CW\*(C`test_file_exts\*(C'\fR argument with an array
of extensions, such as \f(CW\*(C`[qw( .t .s .z )]\*(C'\fR.
.Sp
If you want test to be run by \f(CW\*(C`TAP::Harness\*(C'\fR, rather than \f(CW\*(C`Test::Harness\*(C'\fR,
pass the argument \f(CW\*(C`tap_harness_args\*(C'\fR as an array reference of arguments to
pass to the TAP::Harness constructor.
.Sp
In addition, if a file called \f(CW\*(C`visual.pl\*(C'\fR exists in the top-level
directory, this file will be executed as a Perl script and its output
will be shown to the user.  This is a good place to put speed tests or
other tests that don't use the \f(CW\*(C`Test::Harness\*(C'\fR format for output.
.Sp
To override the choice of tests to run, you may pass a \f(CW\*(C`test_files\*(C'\fR
argument whose value is a whitespace-separated list of test scripts to
run.  This is especially useful in development, when you only want to
run a single test to see whether you've squashed a certain bug yet:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/something_failing.t
.Ve
.Sp
You may also pass several \f(CW\*(C`test_files\*(C'\fR arguments separately:
.Sp
.Vb 1
\&  ./Build test \-\-test_files t/one.t \-\-test_files t/two.t
.Ve
.Sp
or use a \f(CW\*(C`glob()\*(C'\fR\-style pattern:
.Sp
.Vb 1
\&  ./Build test \-\-test_files \*(Aqt/01\-*.t\*(Aq
.Ve
.IP "testall" 4
.IX Item "testall"
[version 0.2807]
.Sp
[Note: the 'testall' action and the code snippets below are currently
in alpha stage, see
\&\*(L"/www.nntp.perl.org/group/perl.module.build/2007/03/msg584.html\*(R"\*(L" in \*(R"http: ]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action plus each of the \f(CW\*(C`test$type\*(C'\fR actions defined by
the keys of the \f(CW\*(C`test_types\*(C'\fR parameter.
.Sp
Currently, you need to define the ACTION_test$type method yourself and
enumerate them in the test_types parameter.
.Sp
.Vb 12
\&  my $mb = Module::Build\->subclass(
\&    code => q(
\&      sub ACTION_testspecial { shift\->generic_test(type => \*(Aqspecial\*(Aq); }
\&      sub ACTION_testauthor  { shift\->generic_test(type => \*(Aqauthor\*(Aq); }
\&    )
\&  )\->new(
\&    ...
\&    test_types  => {
\&      special => \*(Aq.st\*(Aq,
\&      author  => [\*(Aq.at\*(Aq, \*(Aq.pt\*(Aq ],
\&    },
\&    ...
.Ve
.IP "testcover" 4
.IX Item "testcover"
[version 0.26]
.Sp
Runs the \f(CW\*(C`test\*(C'\fR action using \f(CW\*(C`Devel::Cover\*(C'\fR, generating a
code-coverage report showing which parts of the code were actually
exercised during the tests.
.Sp
To pass options to \f(CW\*(C`Devel::Cover\*(C'\fR, set the \f(CW$DEVEL_COVER_OPTIONS\fR
environment variable:
.Sp
.Vb 1
\&  DEVEL_COVER_OPTIONS=\-ignore,Build ./Build testcover
.Ve
.IP "testdb" 4
.IX Item "testdb"
[version 0.05]
.Sp
This is a synonym for the 'test' action with the \f(CW\*(C`debugger=1\*(C'\fR
argument.
.IP "testpod" 4
.IX Item "testpod"
[version 0.25]
.Sp
This checks all the files described in the \f(CW\*(C`docs\*(C'\fR action and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output.  If you are a module author,
this is useful to run before creating a new release.
.IP "testpodcoverage" 4
.IX Item "testpodcoverage"
[version 0.28]
.Sp
This checks the pod coverage of the distribution and
produces \f(CW\*(C`Test::Harness\*(C'\fR\-style output. If you are a module author,
this is useful to run before creating a new release.
.IP "versioninstall" 4
.IX Item "versioninstall"
[version 0.16]
.Sp
** Note: since \f(CW\*(C`only.pm\*(C'\fR is so new, and since we just recently added
support for it here too, this feature is to be considered
experimental. **
.Sp
If you have the \f(CW\*(C`only.pm\*(C'\fR module installed on your system, you can
use this action to install a module into the version-specific library
trees.  This means that you can have several versions of the same
module installed and \f(CW\*(C`use\*(C'\fR a specific one like this:
.Sp
.Vb 1
\&  use only MyModule => 0.55;
.Ve
.Sp
To override the default installation libraries in \f(CW\*(C`only::config\*(C'\fR,
specify the \f(CW\*(C`versionlib\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-versionlib /my/version/place/
.Ve
.Sp
To override which version the module is installed as, specify the
\&\f(CW\*(C`version\*(C'\fR parameter when you run the \f(CW\*(C`Build.PL\*(C'\fR script:
.Sp
.Vb 1
\&  perl Build.PL \-\-version 0.50
.Ve
.Sp
See the \f(CW\*(C`only.pm\*(C'\fR documentation for more information on
version-specific installs.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Command Line Options"
.IX Subsection "Command Line Options"
The following options can be used during any invocation of \f(CW\*(C`Build.PL\*(C'\fR
or the Build script, during any action.  For information on other
options specific to an action, see the documentation for the
respective action.
.PP
\&\s-1NOTE:\s0 There is some preliminary support for options to use the more
familiar long option style.  Most options can be preceded with the
\&\f(CW\*(C`\-\-\*(C'\fR long option prefix, and the underscores changed to dashes
(e.g. \f(CW\*(C`\-\-use\-rcfile\*(C'\fR).  Additionally, the argument to boolean options is
optional, and boolean options can be negated by prefixing them with
\&\f(CW\*(C`no\*(C'\fR or \f(CW\*(C`no\-\*(C'\fR (e.g. \f(CW\*(C`\-\-noverbose\*(C'\fR or \f(CW\*(C`\-\-no\-verbose\*(C'\fR).
.IP "quiet" 4
.IX Item "quiet"
Suppress informative messages on output.
.IP "verbose" 4
.IX Item "verbose"
Display extra information about the Build on output.  \f(CW\*(C`verbose\*(C'\fR will
turn off \f(CW\*(C`quiet\*(C'\fR
.IP "cpan_client" 4
.IX Item "cpan_client"
Sets the \f(CW\*(C`cpan_client\*(C'\fR command for use with the \f(CW\*(C`installdeps\*(C'\fR action.
See \f(CW\*(C`installdeps\*(C'\fR for more details.
.IP "use_rcfile" 4
.IX Item "use_rcfile"
Load the \fI~/.modulebuildrc\fR option file.  This option can be set to
false to prevent the custom resource file from being loaded.
.IP "allow_mb_mismatch" 4
.IX Item "allow_mb_mismatch"
Suppresses the check upon startup that the version of Module::Build
we're now running under is the same version that was initially invoked
when building the distribution (i.e. when the \f(CW\*(C`Build.PL\*(C'\fR script was
first run).  As of 0.3601, a mismatch results in a warning instead of
a fatal error, so this option effectively just suppresses the warning.
.IP "debug" 4
.IX Item "debug"
Prints Module::Build debugging information to \s-1STDOUT,\s0 such as a trace of
executed build actions.
.SS "Default Options File (\fI.modulebuildrc\fP)"
.IX Subsection "Default Options File (.modulebuildrc)"
[version 0.28]
.PP
When Module::Build starts up, it will look first for a file,
\&\fI\f(CI$ENV\fI{\s-1HOME\s0}/.modulebuildrc\fR.  If it's not found there, it will look
in the the \fI.modulebuildrc\fR file in the directories referred to by
the environment variables \f(CW\*(C`HOMEDRIVE\*(C'\fR + \f(CW\*(C`HOMEDIR\*(C'\fR, \f(CW\*(C`USERPROFILE\*(C'\fR,
\&\f(CW\*(C`APPDATA\*(C'\fR, \f(CW\*(C`WINDIR\*(C'\fR, \f(CW\*(C`SYS$LOGIN\*(C'\fR.  If the file exists, the options
specified there will be used as defaults, as if they were typed on the
command line.  The defaults can be overridden by specifying new values
on the command line.
.PP
The action name must come at the beginning of the line, followed by any
amount of whitespace and then the options.  Options are given the same
as they would be on the command line.  They can be separated by any
amount of whitespace, including newlines, as long there is whitespace at
the beginning of each continued line.  Anything following a hash mark (\f(CW\*(C`#\*(C'\fR)
is considered a comment, and is stripped before parsing.  If more than
one line begins with the same action name, those lines are merged into
one set of options.
.PP
Besides the regular actions, there are two special pseudo-actions: the
key \f(CW\*(C`*\*(C'\fR (asterisk) denotes any global options that should be applied
to all actions, and the key 'Build_PL' specifies options to be applied
when you invoke \f(CW\*(C`perl Build.PL\*(C'\fR.
.PP
.Vb 5
\&  *           verbose=1   # global options
\&  diff        flags=\-u
\&  install     \-\-install_base /home/ken
\&              \-\-install_path html=/home/ken/docs/html
\&  installdeps \-\-cpan_client \*(Aqcpanp \-i\*(Aq
.Ve
.PP
If you wish to locate your resource file in a different location, you
can set the environment variable \f(CW\*(C`MODULEBUILDRC\*(C'\fR to the complete
absolute path of the file containing your options.
.SS "Environment variables"
.IX Subsection "Environment variables"
.IP "\s-1MODULEBUILDRC\s0" 4
.IX Item "MODULEBUILDRC"
[version 0.28]
.Sp
Specifies an alternate location for a default options file as described above.
.IP "\s-1PERL_MB_OPT\s0" 4
.IX Item "PERL_MB_OPT"
[version 0.36]
.Sp
Command line options that are applied to Build.PL or any Build action.  The
string is split as the shell would (e.g. whitespace) and the result is
prepended to any actual command-line arguments.
.SH "INSTALL PATHS"
.IX Header "INSTALL PATHS"
[version 0.19]
.PP
When you invoke Module::Build's \f(CW\*(C`build\*(C'\fR action, it needs to figure
out where to install things.  The nutshell version of how this works
is that default installation locations are determined from
\&\fIConfig.pm\fR, and they may be overridden by using the \f(CW\*(C`install_path\*(C'\fR
parameter.  An \f(CW\*(C`install_base\*(C'\fR parameter lets you specify an
alternative installation root like \fI/home/foo\fR, and a \f(CW\*(C`destdir\*(C'\fR lets
you specify a temporary installation directory like \fI/tmp/install\fR in
case you want to create bundled-up installable packages.
.PP
Natively, Module::Build provides default installation locations for
the following types of installable items:
.IP "lib" 4
.IX Item "lib"
Usually pure-Perl module files ending in \fI.pm\fR.
.IP "arch" 4
.IX Item "arch"
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling
\&\s-1XS, \s0Inline, or similar code.
.IP "script" 4
.IX Item "script"
Programs written in pure Perl.  In order to improve reuse, try to make
these as small as possible \- put the code into modules whenever
possible.
.IP "bin" 4
.IX Item "bin"
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or
something.  Pretty rare to see this in a perl distribution, but it
happens.
.IP "bindoc" 4
.IX Item "bindoc"
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually
generated from the \s-1POD\s0 in those files.  Under Unix, these are manual
pages belonging to the 'man1' category.
.IP "libdoc" 4
.IX Item "libdoc"
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually
generated from the \s-1POD\s0 in \fI.pm\fR files.  Under Unix, these are manual
pages belonging to the 'man3' category.
.IP "binhtml" 4
.IX Item "binhtml"
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.IP "libhtml" 4
.IX Item "libhtml"
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents.
.PP
Four other parameters let you control various aspects of how
installation paths are determined:
.IP "installdirs" 4
.IX Item "installdirs"
The default destinations for these installable things come from
entries in your system's \f(CW\*(C`Config.pm\*(C'\fR.  You can select from three
different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR
parameter as follows:
.Sp
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from Config.pm:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitescript   installvendorscript
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is
\&    determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.Sp
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".  If you're creating
vendor distributions of module packages, you may want to do something
like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-installdirs vendor
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-installdirs vendor
.Ve
.Sp
If you're installing an updated version of a module that was included
with perl itself (i.e. a \*(L"core module\*(R"), then you may set
\&\f(CW\*(C`installdirs\*(C'\fR to \*(L"core\*(R" to overwrite the module in its present
location.
.Sp
(Note that the 'script' line is different from \f(CW\*(C`MakeMaker\*(C'\fR \-
unfortunately there's no such thing as \*(L"installsitescript\*(R" or
\&\*(L"installvendorscript\*(R" entry in \f(CW\*(C`Config.pm\*(C'\fR, so we use the
\&\*(L"installsitebin\*(R" and \*(L"installvendorbin\*(R" entries to at least get the
general location right.  In the future, if \f(CW\*(C`Config.pm\*(C'\fR adds some more
appropriate entries, we'll start using those.)
.IP "install_path" 4
.IX Item "install_path"
Once the defaults have been set, you can override them.
.Sp
On the command line, that would look like this:
.Sp
.Vb 1
\&  perl Build.PL \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.Sp
or this:
.Sp
.Vb 1
\&  ./Build install \-\-install_path lib=/foo/lib \-\-install_path arch=/foo/lib/arch
.Ve
.IP "install_base" 4
.IX Item "install_base"
You can also set the whole bunch of installation paths by supplying the
\&\f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For
instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux
system, you'll install as follows:
.Sp
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.Sp
Note that this is \fIdifferent\fR from how \f(CW\*(C`MakeMaker\*(C'\fR's \f(CW\*(C`PREFIX\*(C'\fR
parameter works.  \f(CW\*(C`install_base\*(C'\fR just gives you a default layout under the
directory you specify, which may have little to do with the
\&\f(CW\*(C`installdirs=site\*(C'\fR layout.
.Sp
The exact layout under the directory you specify may vary by system \-
we try to do the \*(L"sensible\*(R" thing on each platform.
.IP "destdir" 4
.IX Item "destdir"
If you want to install everything into a temporary directory first
(for instance, if you want to create a directory tree that a package
manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can
use the \f(CW\*(C`destdir\*(C'\fR parameter:
.Sp
.Vb 1
\&  perl Build.PL \-\-destdir /tmp/foo
.Ve
.Sp
or
.Sp
.Vb 1
\&  ./Build install \-\-destdir /tmp/foo
.Ve
.Sp
This will effectively install to \*(L"/tmp/foo/$sitelib\*(R",
\&\*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use
\&\f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever
platform you're installing on.
.IP "prefix" 4
.IX Item "prefix"
Provided for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR's \s-1PREFIX\s0 argument.
\&\f(CW\*(C`prefix\*(C'\fR should be used when you want Module::Build to install your
modules, documentation, and scripts in the same place as
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR's \s-1PREFIX\s0 mechanism.
.Sp
The following are equivalent.
.Sp
.Vb 2
\&    perl Build.PL \-\-prefix /tmp/foo
\&    perl Makefile.PL PREFIX=/tmp/foo
.Ve
.Sp
Because of the complex nature of the prefixification logic, the
behavior of \s-1PREFIX\s0 in \f(CW\*(C`MakeMaker\*(C'\fR has changed subtly over time.
Module::Build's \-\-prefix logic is equivalent to the \s-1PREFIX\s0 logic found
in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR 6.30.
.Sp
The maintainers of \f(CW\*(C`MakeMaker\*(C'\fR do understand the troubles with the
\&\s-1PREFIX\s0 mechanism, and added \s-1INSTALL_BASE\s0 support in version 6.31 of
\&\f(CW\*(C`MakeMaker\*(C'\fR, which was released in 2006.
.Sp
If you don't need to retain compatibility with old versions (pre\-6.31) of \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or
are starting a fresh Perl installation we recommend you use
\&\f(CW\*(C`install_base\*(C'\fR instead (and \f(CW\*(C`INSTALL_BASE\*(C'\fR in \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR).
See \*(L"Installing in the same location as
ExtUtils::MakeMaker\*(R" in Module::Build::Cookbook for further information.
.SH "MOTIVATIONS"
.IX Header "MOTIVATIONS"
There are several reasons I wanted to start over, and not just fix
what I didn't like about \f(CW\*(C`MakeMaker\*(C'\fR:
.IP "\(bu" 4
I don't like the core idea of \f(CW\*(C`MakeMaker\*(C'\fR, namely that \f(CW\*(C`make\*(C'\fR should be
involved in the build process.  Here are my reasons:
.RS 4
.IP "+" 4
When a person is installing a Perl module, what can you assume about
their environment?  Can you assume they have \f(CW\*(C`make\*(C'\fR?  No, but you can
assume they have some version of Perl.
.IP "+" 4
When a person is writing a Perl module for intended distribution, can
you assume that they know how to build a Makefile, so they can
customize their build process?  No, but you can assume they know Perl,
and could customize that way.
.RE
.RS 4
.Sp
For years, these things have been a barrier to people getting the
build/install process to do what they want.
.RE
.IP "\(bu" 4
There are several architectural decisions in \f(CW\*(C`MakeMaker\*(C'\fR that make it
very difficult to customize its behavior.  For instance, when using
\&\f(CW\*(C`MakeMaker\*(C'\fR you do \f(CW\*(C`use ExtUtils::MakeMaker\*(C'\fR, but the object created in
\&\f(CW\*(C`WriteMakefile()\*(C'\fR is actually blessed into a package name that's
created on the fly, so you can't simply subclass
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  There is a workaround \f(CW\*(C`MY\*(C'\fR package that lets
you override certain \f(CW\*(C`MakeMaker\*(C'\fR methods, but only certain explicitly
preselected (by \f(CW\*(C`MakeMaker\*(C'\fR) methods can be overridden.  Also, the method
of customization is very crude: you have to modify a string containing
the Makefile text for the particular target.  Since these strings
aren't documented, and \fIcan't\fR be documented (they take on different
values depending on the platform, version of perl, version of
\&\f(CW\*(C`MakeMaker\*(C'\fR, etc.), you have no guarantee that your modifications will
work on someone else's machine or after an upgrade of \f(CW\*(C`MakeMaker\*(C'\fR or
perl.
.IP "\(bu" 4
It is risky to make major changes to \f(CW\*(C`MakeMaker\*(C'\fR, since it does so many
things, is so important, and generally works.  \f(CW\*(C`Module::Build\*(C'\fR is an
entirely separate package so that I can work on it all I want, without
worrying about backward compatibility with \f(CW\*(C`MakeMaker\*(C'\fR.
.IP "\(bu" 4
Finally, Perl is said to be a language for system administration.
Could it really be the case that Perl isn't up to the task of building
and installing software?  Even if that software is a bunch of
\&\f(CW\*(C`.pm\*(C'\fR files that just need to be copied from one place to
another?  My sense was that we could design a system to accomplish
this in a flexible, extensible, and friendly manner.  Or die trying.
.SH "TO DO"
.IX Header "TO DO"
The current method of relying on time stamps to determine whether a
derived file is out of date isn't likely to scale well, since it
requires tracing all dependencies backward, it runs into problems on
\&\s-1NFS,\s0 and it's just generally flimsy.  It would be better to use an \s-1MD5\s0
signature or the like, if available.  See \f(CW\*(C`cons\*(C'\fR for an example.
.PP
.Vb 2
\& \- append to perllocal.pod
\& \- add a \*(Aqplugin\*(Aq functionality
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.PP
Development questions, bug reports, and patches should be sent to the
Module-Build mailing list at <module\-build@perl.org>.
.PP
Bug reports are also welcome at
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Module\-Build>.
.PP
The latest development version is available from the Git
repository at <https://github.com/Perl\-Toolchain\-Gang/Module\-Build>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build::Cookbook, Module::Build::Authoring,
Module::Build::API, ExtUtils::MakeMaker
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::Meta::Spec
.PP
<http://www.dsmit.com/cons/>
.PP
<http://search.cpan.org/dist/PerlBuildSystem/>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build::API.3pm                       0100644 0001750 0001750 00000254235 12566207461 024424  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::API 3pm"
.TH Module::Build::API 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::API \- API Reference for Module Authors
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I list here some of the most important methods in \f(CW\*(C`Module::Build\*(C'\fR.
Normally you won't need to deal with these methods unless you want to
subclass \f(CW\*(C`Module::Build\*(C'\fR.  But since one of the reasons I created
this module in the first place was so that subclassing is possible
(and easy), I will certainly write more docs as the interface
stabilizes.
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
.IP "\fIcurrent()\fR" 4
.IX Item "current()"
[version 0.20]
.Sp
This method returns a reasonable facsimile of the currently-executing
\&\f(CW\*(C`Module::Build\*(C'\fR object representing the current build.  You can use
this object to query its \*(L"\fInotes()\fR\*(R" method, inquire about installed
modules, and so on.  This is a great way to share information between
different parts of your build process.  For instance, you can ask
the user a question during \f(CW\*(C`perl Build.PL\*(C'\fR, then use their answer
during a regression test:
.Sp
.Vb 3
\&  # In Build.PL:
\&  my $color = $build\->prompt("What is your favorite color?");
\&  $build\->notes(color => $color);
\&
\&  # In t/colortest.t:
\&  use Module::Build;
\&  my $build = Module::Build\->current;
\&  my $color = $build\->notes(\*(Aqcolor\*(Aq);
\&  ...
.Ve
.Sp
The way the \f(CW\*(C`current()\*(C'\fR method is currently implemented, there may be
slight differences between the \f(CW$build\fR object in Build.PL and the
one in \f(CW\*(C`t/colortest.t\*(C'\fR.  It is our goal to minimize these differences
in future releases of Module::Build, so please report any anomalies
you find.
.Sp
One important caveat: in its current implementation, \f(CW\*(C`current()\*(C'\fR will
\&\fB\s-1NOT\s0\fR work correctly if you have changed out of the directory that
\&\f(CW\*(C`Module::Build\*(C'\fR was invoked from.
.IP "\fInew()\fR" 4
.IX Item "new()"
[version 0.03]
.Sp
Creates a new Module::Build object.  Arguments to the \fInew()\fR method are
listed below.  Most arguments are optional, but you must provide
either the \*(L"module_name\*(R" argument, or \*(L"dist_name\*(R" and one of
\&\*(L"dist_version\*(R" or \*(L"dist_version_from\*(R".  In other words, you must
provide enough information to determine both a distribution name and
version.
.RS 4
.IP "add_to_cleanup" 4
.IX Item "add_to_cleanup"
[version 0.19]
.Sp
An array reference of files to be cleaned up when the \f(CW\*(C`clean\*(C'\fR action
is performed. See also the \fIadd_to_cleanup()\fR
method.
.IP "auto_configure_requires" 4
.IX Item "auto_configure_requires"
[version 0.34]
.Sp
This parameter determines whether Module::Build will add itself
automatically to configure_requires (and build_requires) if Module::Build
is not already there.  The required version will be the last 'major' release,
as defined by the decimal version truncated to two decimal places (e.g. 0.34,
instead of 0.3402).  The default value is true.
.IP "auto_features" 4
.IX Item "auto_features"
[version 0.26]
.Sp
This parameter supports the setting of features (see
\&\*(L"feature($name)\*(R") automatically based on a set of prerequisites.  For
instance, for a module that could optionally use either MySQL or
PostgreSQL databases, you might use \f(CW\*(C`auto_features\*(C'\fR like this:
.Sp
.Vb 10
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     auto_features => {
\&       pg_support    => {
\&                         description => "Interface with Postgres databases",
\&                         requires    => { \*(AqDBD::Pg\*(Aq => 23.3,
\&                                          \*(AqDateTime::Format::Pg\*(Aq => 0 },
\&                        },
\&       mysql_support => {
\&                         description => "Interface with MySQL databases",
\&                         requires    => { \*(AqDBD::mysql\*(Aq => 17.9,
\&                                          \*(AqDateTime::Format::MySQL\*(Aq => 0 },
\&                        },
\&     }
\&    );
.Ve
.Sp
For each feature named, the required prerequisites will be checked, and
if there are no failures, the feature will be enabled (set to \f(CW1\fR).
Otherwise the failures will be displayed to the user and the feature
will be disabled (set to \f(CW0\fR).
.Sp
See the documentation for \*(L"requires\*(R" for the details of how
requirements can be specified.
.IP "autosplit" 4
.IX Item "autosplit"
[version 0.04]
.Sp
An optional \f(CW\*(C`autosplit\*(C'\fR argument specifies a file which should be run
through the \fIAutoSplit::autosplit()\fR function.
If multiple files should be split, the argument may be given as an
array of the files to split.
.Sp
In general I don't consider autosplitting a great idea, because it's
not always clear that autosplitting achieves its intended performance
benefits.  It may even harm performance in environments like mod_perl,
where as much as possible of a module's code should be loaded during
startup.
.IP "build_class" 4
.IX Item "build_class"
[version 0.28]
.Sp
The Module::Build class or subclass to use in the build script.
Defaults to \*(L"Module::Build\*(R" or the class name passed to or created by
a call to \*(L"\fIsubclass()\fR\*(R".  This property is useful if you're
writing a custom Module::Build subclass and have a bootstrapping
problem\*(--that is, your subclass requires modules that may not be
installed when \f(CW\*(C`perl Build.PL\*(C'\fR is executed, but you've listed in
\&\*(L"build_requires\*(R" so that they should be available when \f(CW\*(C`./Build\*(C'\fR is
executed.
.IP "build_requires" 4
.IX Item "build_requires"
[version 0.07]
.Sp
Modules listed in this section are necessary to build and install the
given module, but are not necessary for regular usage of it.  This is
actually an important distinction \- it allows for tighter control over
the body of installed modules, and facilitates correct dependency
checking on binary/packaged distributions of the module.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "configure_requires" 4
.IX Item "configure_requires"
[version 0.30]
.Sp
Modules listed in this section must be installed \fIbefore\fR configuring
this distribution (i.e. before running the \fIBuild.PL\fR script).
This might be a specific minimum version of \f(CW\*(C`Module::Build\*(C'\fR or any
other module the \fIBuild.PL\fR needs in order to do its stuff.  Clients
like \f(CW\*(C`CPAN.pm\*(C'\fR or \f(CW\*(C`CPANPLUS\*(C'\fR will be expected to pick
\&\f(CW\*(C`configure_requires\*(C'\fR out of the \fI\s-1META\s0.yml\fR file and install these
items before running the \f(CW\*(C`Build.PL\*(C'\fR.
.Sp
Module::Build may automatically add itself to configure_requires.
See \*(L"auto_configure_requires\*(R" for details.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_packlist" 4
.IX Item "create_packlist"
[version 0.28]
.Sp
If true, this parameter tells Module::Build to create a \fI.packlist\fR
file during the \f(CW\*(C`install\*(C'\fR action, just like \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR does.
The file is created in a subdirectory of the \f(CW\*(C`arch\*(C'\fR installation
location.  It is used by some other tools (\s-1CPAN, CPANPLUS,\s0 etc.) for
determining what files are part of an install.
.Sp
The default value is true.  This parameter was introduced in
Module::Build version 0.2609; previously no packlists were ever
created by Module::Build.
.IP "c_source" 4
.IX Item "c_source"
[version 0.04]
.Sp
An optional \f(CW\*(C`c_source\*(C'\fR argument specifies a directory which contains
C source files that the rest of the build may depend on.  Any \f(CW\*(C`.c\*(C'\fR
files in the directory will be compiled to object files.  The
directory will be added to the search path during the compilation and
linking phases of any C or \s-1XS\s0 files.
.Sp
[version 0.3604]
.Sp
A list of directories can be supplied using an anonymous array
reference of strings.
.IP "conflicts" 4
.IX Item "conflicts"
[version 0.07]
.Sp
Modules listed in this section conflict in some serious way with the
given module.  \f(CW\*(C`Module::Build\*(C'\fR (or some higher-level tool) will
refuse to install the given module if the given module/version is also
installed.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_license" 4
.IX Item "create_license"
[version 0.31]
.Sp
This parameter tells Module::Build to automatically create a
\&\fI\s-1LICENSE\s0\fR file at the top level of your distribution, containing the
full text of the author's chosen license.  This requires
\&\f(CW\*(C`Software::License\*(C'\fR on the author's machine, and further requires
that the \f(CW\*(C`license\*(C'\fR parameter specifies a license that it knows about.
.IP "create_makefile_pl" 4
.IX Item "create_makefile_pl"
[version 0.19]
.Sp
This parameter lets you use \f(CW\*(C`Module::Build::Compat\*(C'\fR during the
\&\f(CW\*(C`distdir\*(C'\fR (or \f(CW\*(C`dist\*(C'\fR) action to automatically create a Makefile.PL
for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The parameter's value
should be one of the styles named in the Module::Build::Compat
documentation.
.IP "create_readme" 4
.IX Item "create_readme"
[version 0.22]
.Sp
This parameter tells Module::Build to automatically create a \fI\s-1README\s0\fR
file at the top level of your distribution.  Currently it will simply
use \f(CW\*(C`Pod::Text\*(C'\fR (or \f(CW\*(C`Pod::Readme\*(C'\fR if it's installed) on the file
indicated by \f(CW\*(C`dist_version_from\*(C'\fR and put the result in the \fI\s-1README\s0\fR
file.  This is by no means the only recommended style for writing a
\&\fI\s-1README\s0\fR, but it seems to be one common one used on the \s-1CPAN.\s0
.Sp
If you generate a \fI\s-1README\s0\fR in this way, it's probably a good idea to
create a separate \fI\s-1INSTALL\s0\fR file if that information isn't in the
generated \fI\s-1README\s0\fR.
.IP "dist_abstract" 4
.IX Item "dist_abstract"
[version 0.20]
.Sp
This should be a short description of the distribution.  This is used when
generating metadata for \fI\s-1META\s0.yml\fR and \s-1PPD\s0 files.  If it is not given
then \f(CW\*(C`Module::Build\*(C'\fR looks in the \s-1POD\s0 of the module from which it gets
the distribution's version.  If it finds a \s-1POD\s0 section marked \*(L"=head1
\&\s-1NAME\*(R",\s0 then it looks for the first line matching \f(CW\*(C`\es+\-\es+(.+)\*(C'\fR,
and uses the captured text as the abstract.
.IP "dist_author" 4
.IX Item "dist_author"
[version 0.20]
.Sp
This should be something like \*(L"John Doe <jdoe@example.com>\*(R", or if
there are multiple authors, an anonymous array of strings may be
specified.  This is used when generating metadata for \fI\s-1META\s0.yml\fR and
\&\s-1PPD\s0 files.  If this is not specified, then \f(CW\*(C`Module::Build\*(C'\fR looks at
the module from which it gets the distribution's version.  If it finds
a \s-1POD\s0 section marked \*(L"=head1 \s-1AUTHOR\*(R",\s0 then it uses the contents of
this section.
.IP "dist_name" 4
.IX Item "dist_name"
[version 0.11]
.Sp
Specifies the name for this distribution.  Most authors won't need to
set this directly, they can use \f(CW\*(C`module_name\*(C'\fR to set \f(CW\*(C`dist_name\*(C'\fR to
a reasonable default.  However, some agglomerative distributions like
\&\f(CW\*(C`libwww\-perl\*(C'\fR or \f(CW\*(C`bioperl\*(C'\fR have names that don't correspond directly
to a module name, so \f(CW\*(C`dist_name\*(C'\fR can be set independently.
.IP "dist_suffix" 4
.IX Item "dist_suffix"
[version 0.37]
.Sp
Specifies an optional suffix to include after the version number
in the distribution directory (and tarball) name.  The only suffix
currently recognized by \s-1PAUSE\s0 is '\s-1TRIAL\s0', which indicates that the
distribution should not be indexed.  For example:
.Sp
.Vb 1
\&  Foo\-Bar\-1.23\-TRIAL.tar.gz
.Ve
.Sp
This will automatically do the \*(L"right thing\*(R" depending on \f(CW\*(C`dist_version\*(C'\fR and
\&\f(CW\*(C`release_status\*(C'\fR.  When \f(CW\*(C`dist_version\*(C'\fR does not have an underscore and
\&\f(CW\*(C`release_status\*(C'\fR is not 'stable', then \f(CW\*(C`dist_suffix\*(C'\fR will default to '\s-1TRIAL\s0'.
Otherwise it will default to the empty string, disabling the suffix.
.Sp
In general, authors should only set this if they \fBmust\fR override the default
behavior for some particular purpose.
.IP "dist_version" 4
.IX Item "dist_version"
[version 0.11]
.Sp
Specifies a version number for the distribution.  See \*(L"module_name\*(R"
or \*(L"dist_version_from\*(R" for ways to have this set automatically from a
\&\f(CW$VERSION\fR variable in a module.  One way or another, a version
number needs to be set.
.IP "dist_version_from" 4
.IX Item "dist_version_from"
[version 0.11]
.Sp
Specifies a file to look for the distribution version in.  Most
authors won't need to set this directly, they can use \*(L"module_name\*(R"
to set it to a reasonable default.
.Sp
The version is extracted from the specified file according to the same
rules as ExtUtils::MakeMaker and \f(CW\*(C`CPAN.pm\*(C'\fR.  It involves finding
the first line that matches the regular expression
.Sp
.Vb 1
\&   /([\e$*])(([\ew\e:\e\*(Aq]*)\ebVERSION)\eb.*\e=/
.Ve
.Sp
\&\fIeval()\fR\-ing that line, then checking the value of the \f(CW$VERSION\fR
variable.  Quite ugly, really, but all the modules on \s-1CPAN\s0 depend on
this process, so there's no real opportunity to change to something
better.
.Sp
If the target file of \*(L"dist_version_from\*(R" contains more than one package
declaration, the version returned will be the one matching the configured
\&\*(L"module_name\*(R".
.IP "dynamic_config" 4
.IX Item "dynamic_config"
[version 0.07]
.Sp
A boolean flag indicating whether the \fIBuild.PL\fR file must be
executed, or whether this module can be built, tested and installed
solely from consulting its metadata file.  The main reason to set this
to a true value is that your module performs some dynamic
configuration as part of its build/install process.  If the flag is
omitted, the \fI\s-1META\s0.yml\fR spec says that installation tools should
treat it as 1 (true), because this is a safer way to behave.
.Sp
Currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually do anything with this flag
\&\- it's up to higher-level tools like \f(CW\*(C`CPAN.pm\*(C'\fR to do something useful
with it.  It can potentially bring lots of security, packaging, and
convenience improvements.
.IP "extra_compiler_flags" 4
.IX Item "extra_compiler_flags"
.PD 0
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
.PD
[version 0.19]
.Sp
These parameters can contain array references (or strings, in which
case they will be split into arrays) to pass through to the compiler
and linker phases when compiling/linking C code.  For example, to tell
the compiler that your code is \*(C+, you might do:
.Sp
.Vb 5
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     extra_compiler_flags => [\*(Aq\-x\*(Aq, \*(Aqc++\*(Aq],
\&    );
.Ve
.Sp
To link your \s-1XS\s0 code against glib you might write something like:
.Sp
.Vb 7
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     dynamic_config       => 1,
\&     extra_compiler_flags => scalar \`glib\-config \-\-cflags\`,
\&     extra_linker_flags   => scalar \`glib\-config \-\-libs\`,
\&    );
.Ve
.IP "get_options" 4
.IX Item "get_options"
[version 0.26]
.Sp
You can pass arbitrary command line options to \fIBuild.PL\fR or
\&\fIBuild\fR, and they will be stored in the Module::Build object and can
be accessed via the \*(L"\fIargs()\fR\*(R" method.  However, sometimes you want
more flexibility out of your argument processing than this allows.  In
such cases, use the \f(CW\*(C`get_options\*(C'\fR parameter to pass in a hash
reference of argument specifications, and the list of arguments to
\&\fIBuild.PL\fR or \fIBuild\fR will be processed according to those
specifications before they're passed on to \f(CW\*(C`Module::Build\*(C'\fR's own
argument processing.
.Sp
The supported option specification hash keys are:
.RS 4
.IP "type" 4
.IX Item "type"
The type of option.  The types are those supported by Getopt::Long; consult
its documentation for a complete list.  Typical types are \f(CW\*(C`=s\*(C'\fR for strings,
\&\f(CW\*(C`+\*(C'\fR for additive options, and \f(CW\*(C`!\*(C'\fR for negatable options.  If the
type is not specified, it will be considered a boolean, i.e. no
argument is taken and a value of 1 will be assigned when the option is
encountered.
.IP "store" 4
.IX Item "store"
A reference to a scalar in which to store the value passed to the option.
If not specified, the value will be stored under the option name in the
hash returned by the \f(CW\*(C`args()\*(C'\fR method.
.IP "default" 4
.IX Item "default"
A default value for the option.  If no default value is specified and no option
is passed, then the option key will not exist in the hash returned by
\&\f(CW\*(C`args()\*(C'\fR.
.RE
.RS 4
.Sp
You can combine references to your own variables or subroutines with
unreferenced specifications, for which the result will also be stored in the
hash returned by \f(CW\*(C`args()\*(C'\fR.  For example:
.Sp
.Vb 10
\&  my $loud = 0;
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     get_options => {
\&                     Loud =>     { store => \e$loud },
\&                     Dbd  =>     { type  => \*(Aq=s\*(Aq   },
\&                     Quantity => { type  => \*(Aq+\*(Aq    },
\&                    }
\&    );
\&
\&  print STDERR "HEY, ARE YOU LISTENING??\en" if $loud;
\&  print "We\*(Aqll use the ", $build\->args(\*(AqDbd\*(Aq), " DBI driver\en";
\&  print "Are you sure you want that many?\en"
\&    if $build\->args(\*(AqQuantity\*(Aq) > 2;
.Ve
.Sp
The arguments for such a specification can be called like so:
.Sp
.Vb 1
\&  perl Build.PL \-\-Loud \-\-Dbd=DBD::pg \-\-Quantity \-\-Quantity \-\-Quantity
.Ve
.Sp
\&\fB\s-1WARNING:\s0\fR Any option specifications that conflict with Module::Build's own
options (defined by its properties) will throw an exception.  Use capitalized
option names to avoid unintended conflicts with future Module::Build options.
.Sp
Consult the Getopt::Long documentation for details on its usage.
.RE
.IP "include_dirs" 4
.IX Item "include_dirs"
[version 0.24]
.Sp
Specifies any additional directories in which to search for C header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.IP "install_path" 4
.IX Item "install_path"
[version 0.19]
.Sp
You can set paths for individual installable elements by using the
\&\f(CW\*(C`install_path\*(C'\fR parameter:
.Sp
.Vb 8
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     install_path => {
\&                      lib  => \*(Aq/foo/lib\*(Aq,
\&                      arch => \*(Aq/foo/lib/arch\*(Aq,
\&                     }
\&    );
.Ve
.IP "installdirs" 4
.IX Item "installdirs"
[version 0.19]
.Sp
Determines where files are installed within the normal perl hierarchy
as determined by \fIConfig.pm\fR.  Valid values are: \f(CW\*(C`core\*(C'\fR, \f(CW\*(C`site\*(C'\fR,
\&\f(CW\*(C`vendor\*(C'\fR.  The default is \f(CW\*(C`site\*(C'\fR.  See
\&\*(L"\s-1INSTALL PATHS\*(R"\s0 in Module::Build
.IP "license" 4
.IX Item "license"
[version 0.07]
.Sp
Specifies the licensing terms of your distribution.
.Sp
As of Module::Build version 0.36_14, you may use a Software::License
subclass name (e.g. 'Apache_2_0') instead of one of the keys below.
.Sp
The legacy list of valid license values include:
.RS 4
.IP "apache" 4
.IX Item "apache"
The distribution is licensed under the Apache License, Version 2.0
(<http://apache.org/licenses/LICENSE\-2.0>).
.IP "apache_1_1" 4
.IX Item "apache_1_1"
The distribution is licensed under the Apache Software License, Version 1.1
(<http://apache.org/licenses/LICENSE\-1.1>).
.IP "artistic" 4
.IX Item "artistic"
The distribution is licensed under the Artistic License, as specified
by the \fIArtistic\fR file in the standard Perl distribution.
.IP "artistic_2" 4
.IX Item "artistic_2"
The distribution is licensed under the Artistic 2.0 License
(<http://opensource.org/licenses/artistic\-license\-2.0.php>.)
.IP "bsd" 4
.IX Item "bsd"
The distribution is licensed under the \s-1BSD\s0 License
(<http://www.opensource.org/licenses/bsd\-license.php>).
.IP "gpl" 4
.IX Item "gpl"
The distribution is licensed under the terms of the \s-1GNU\s0 General
Public License (<http://www.opensource.org/licenses/gpl\-license.php>).
.IP "lgpl" 4
.IX Item "lgpl"
The distribution is licensed under the terms of the \s-1GNU\s0 Lesser
General Public License
(<http://www.opensource.org/licenses/lgpl\-license.php>).
.IP "mit" 4
.IX Item "mit"
The distribution is licensed under the \s-1MIT\s0 License
(<http://opensource.org/licenses/mit\-license.php>).
.IP "mozilla" 4
.IX Item "mozilla"
The distribution is licensed under the Mozilla Public
License.  (<http://opensource.org/licenses/mozilla1.0.php> or
<http://opensource.org/licenses/mozilla1.1.php>)
.IP "open_source" 4
.IX Item "open_source"
The distribution is licensed under some other Open Source
Initiative-approved license listed at
<http://www.opensource.org/licenses/>.
.IP "perl" 4
.IX Item "perl"
The distribution may be copied and redistributed under the same terms
as Perl itself (this is by far the most common licensing option for
modules on \s-1CPAN\s0).  This is a dual license, in which the user may
choose between either the \s-1GPL\s0 or the Artistic license.
.IP "restrictive" 4
.IX Item "restrictive"
The distribution may not be redistributed without special permission
from the author and/or copyright holder.
.IP "unrestricted" 4
.IX Item "unrestricted"
The distribution is licensed under a license that is \fBnot\fR approved
by www.opensource.org but that allows distribution without
restrictions.
.RE
.RS 4
.Sp
Note that you must still include the terms of your license in your
code and documentation \- this field only sets the information that is included
in distribution metadata to let automated tools figure out your
licensing restrictions.  Humans still need something to read.  If you
choose to provide this field, you should make sure that you keep it in
sync with your written documentation if you ever change your licensing
terms.
.Sp
You may also use a license type of \f(CW\*(C`unknown\*(C'\fR if you don't wish to
specify your terms in the metadata.
.Sp
Also see the \f(CW\*(C`create_license\*(C'\fR parameter.
.RE
.IP "meta_add" 4
.IX Item "meta_add"
[version 0.28]
.Sp
A hash of key/value pairs that should be added to the \fI\s-1META\s0.yml\fR file
during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the same
names will be overridden.
.Sp
See the \*(L"\s-1MODULE METADATA\*(R"\s0 section for details.
.IP "meta_merge" 4
.IX Item "meta_merge"
[version 0.28]
.Sp
A hash of key/value pairs that should be merged into the \fI\s-1META\s0.yml\fR
file during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the
same names will be overridden.
.Sp
The only difference between \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR is their
behavior on hash-valued and array-valued entries: \f(CW\*(C`meta_add\*(C'\fR will
completely blow away the existing hash or array value, but
\&\f(CW\*(C`meta_merge\*(C'\fR will merge the supplied data into the existing hash or
array value.
.Sp
See the \*(L"\s-1MODULE METADATA\*(R"\s0 section for details.
.IP "module_name" 4
.IX Item "module_name"
[version 0.03]
.Sp
The \f(CW\*(C`module_name\*(C'\fR is a shortcut for setting default values of
\&\f(CW\*(C`dist_name\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR, reflecting the fact that the
majority of \s-1CPAN\s0 distributions are centered around one \*(L"main\*(R" module.
For instance, if you set \f(CW\*(C`module_name\*(C'\fR to \f(CW\*(C`Foo::Bar\*(C'\fR, then
\&\f(CW\*(C`dist_name\*(C'\fR will default to \f(CW\*(C`Foo\-Bar\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR will
default to \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.  \f(CW\*(C`dist_version_from\*(C'\fR will in turn be
used to set \f(CW\*(C`dist_version\*(C'\fR.
.Sp
Setting \f(CW\*(C`module_name\*(C'\fR won't override a \f(CW\*(C`dist_*\*(C'\fR parameter you
specify explicitly.
.IP "needs_compiler" 4
.IX Item "needs_compiler"
[version 0.36]
.Sp
The \f(CW\*(C`needs_compiler\*(C'\fR parameter indicates whether a compiler is required to
build the distribution.  The default is false, unless \s-1XS\s0 files are found or
the \f(CW\*(C`c_source\*(C'\fR parameter is set, in which case it is true.  If true,
ExtUtils::CBuilder is automatically added to \f(CW\*(C`build_requires\*(C'\fR if needed.
.Sp
For a distribution where a compiler is \fIoptional\fR, e.g. a dual XS/pure\-Perl
distribution, \f(CW\*(C`needs_compiler\*(C'\fR should explicitly be set to a false value.
.IP "PL_files" 4
.IX Item "PL_files"
[version 0.06]
.Sp
An optional parameter specifying a set of \f(CW\*(C`.PL\*(C'\fR files in your
distribution.  These will be run as Perl scripts prior to processing
the rest of the files in your distribution with the name of the file
they're generating as an argument.  They are usually used as templates
for creating other files dynamically, so that a file like
\&\f(CW\*(C`lib/Foo/Bar.pm.PL\*(C'\fR might create the file \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.
.Sp
The files are specified with the \f(CW\*(C`.PL\*(C'\fR files as hash keys, and the
file(s) they generate as hash values, like so:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     PL_files => { \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the path specifications are \fIalways\fR given in Unix-like
format, not in the style of the local system.
.Sp
If your \f(CW\*(C`.PL\*(C'\fR scripts don't create any files, or if they create files
with unexpected names, or even if they create multiple files, you can
indicate that so that Module::Build can properly handle these created
files:
.Sp
.Vb 5
\&  PL_files => {
\&               \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq,
\&               \*(Aqlib/something.PL\*(Aq  => [\*(Aq/lib/something\*(Aq, \*(Aq/lib/else\*(Aq],
\&               \*(Aqlib/funny.PL\*(Aq      => [],
\&              }
.Ve
.Sp
Here's an example of a simple \s-1PL\s0 file.
.Sp
.Vb 2
\&    my $output_file = shift;
\&    open my $fh, ">", $output_file or die "Can\*(Aqt open $output_file: $!";
\&
\&    print $fh <<\*(AqEND\*(Aq;
\&    #!/usr/bin/perl
\&
\&    print "Hello, world!\en";
\&    END
.Ve
.Sp
\&\s-1PL\s0 files are not installed by default, so its safe to put them in
\&\fIlib/\fR and \fIbin/\fR.
.IP "pm_files" 4
.IX Item "pm_files"
[version 0.19]
.Sp
An optional parameter specifying the set of \f(CW\*(C`.pm\*(C'\fR files in this
distribution, specified as a hash reference whose keys are the files'
locations in the distributions, and whose values are their logical
locations based on their package name, i.e. where they would be found
in a \*(L"normal\*(R" Module::Build\-style distribution.  This parameter is
mainly intended to support alternative layouts of files.
.Sp
For instance, if you have an old-style \f(CW\*(C`MakeMaker\*(C'\fR distribution for a
module called \f(CW\*(C`Foo::Bar\*(C'\fR and a \fIBar.pm\fR file at the top level of the
distribution, you could specify your layout in your \f(CW\*(C`Build.PL\*(C'\fR like
this:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     pm_files => { \*(AqBar.pm\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the values should include \f(CW\*(C`lib/\*(C'\fR, because this is where
they would be found in a \*(L"normal\*(R" Module::Build\-style distribution.
.Sp
Note also that the path specifications are \fIalways\fR given in
Unix-like format, not in the style of the local system.
.IP "pod_files" 4
.IX Item "pod_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.pod\*(C'\fR
files in your distribution.
.IP "recommends" 4
.IX Item "recommends"
[version 0.08]
.Sp
This is just like the \*(L"requires\*(R" argument, except that modules listed
in this section aren't essential, just a good idea.  We'll just print
a friendly warning if one of these modules aren't found, but we'll
continue running.
.Sp
If a module is recommended but not required, all tests should still
pass if the module isn't installed.  This may mean that some tests
may be skipped if recommended dependencies aren't present.
.Sp
Automated tools like \s-1CPAN\s0.pm should inform the user when recommended
modules aren't installed, and it should offer to install them if it
wants to be helpful.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "recursive_test_files" 4
.IX Item "recursive_test_files"
[version 0.28]
.Sp
Normally, \f(CW\*(C`Module::Build\*(C'\fR does not search subdirectories when looking
for tests to run. When this options is set it will search recursively
in all subdirectories of the standard 't' test directory.
.IP "release_status" 4
.IX Item "release_status"
[version 0.37]
.Sp
The \s-1CPAN\s0 Meta Spec version 2 adds \f(CW\*(C`release_status\*(C'\fR to allow authors
to specify how a distribution should be indexed.  Consistent with the
spec, this parameter can only have one three values: 'stable',
\&'testing' or 'unstable'.
.Sp
Unless explicitly set by the author, \f(CW\*(C`release_status\*(C'\fR will default
to 'stable' unless \f(CW\*(C`dist_version\*(C'\fR contains an underscore, in which
case it will default to 'testing'.
.Sp
It is an error to specify a \f(CW\*(C`release_status\*(C'\fR of 'stable' when
\&\f(CW\*(C`dist_version\*(C'\fR contains an underscore character.
.IP "requires" 4
.IX Item "requires"
[version 0.07]
.Sp
An optional \f(CW\*(C`requires\*(C'\fR argument specifies any module prerequisites
that the current module depends on.
.Sp
One note: currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually \fIrequire\fR the
user to have dependencies installed, it just strongly urges.  In the
future we may require it.  There's also a \*(L"recommends\*(R" section for
things that aren't absolutely required.
.Sp
Automated tools like \s-1CPAN\s0.pm should refuse to install a module if one
of its dependencies isn't satisfied, unless a \*(L"force\*(R" command is given
by the user.  If the tools are helpful, they should also offer to
install the dependencies.
.Sp
A synonym for \f(CW\*(C`requires\*(C'\fR is \f(CW\*(C`prereq\*(C'\fR, to help succour people
transitioning from \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The \f(CW\*(C`requires\*(C'\fR term is
preferred, but the \f(CW\*(C`prereq\*(C'\fR term will remain valid in future
distributions.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "script_files" 4
.IX Item "script_files"
[version 0.18]
.Sp
An optional parameter specifying a set of files that should be
installed as executable Perl scripts when the module is installed.
May be given as an array reference of the files, as a hash reference
whose keys are the files (and whose values will currently be ignored),
as a string giving the name of a directory in which to find scripts,
or as a string giving the name of a single script file.
.Sp
The default is to install any scripts found in a \fIbin\fR directory at
the top level of the distribution, minus any keys of PL_files.
.Sp
For backward compatibility, you may use the parameter \f(CW\*(C`scripts\*(C'\fR
instead of \f(CW\*(C`script_files\*(C'\fR.  Please consider this usage deprecated,
though it will continue to exist for several version releases.
.IP "share_dir" 4
.IX Item "share_dir"
[version 0.36]
.Sp
An optional parameter specifying directories of static data files to
be installed as read-only files for use with File::ShareDir.  The
\&\f(CW\*(C`share_dir\*(C'\fR property supports both distribution-level and
module-level share files.
.Sp
The simplest use of \f(CW\*(C`share_dir\*(C'\fR is to set it to a directory name or an
arrayref of directory names containing files to be installed in the
distribution-level share directory.
.Sp
.Vb 1
\&  share_dir => \*(Aqshare\*(Aq
.Ve
.Sp
Alternatively, if \f(CW\*(C`share_dir\*(C'\fR is a hashref, it may have \f(CW\*(C`dist\*(C'\fR or
\&\f(CW\*(C`module\*(C'\fR keys providing full flexibility in defining how share
directories should be installed.
.Sp
.Vb 7
\&  share_dir => {
\&    dist => [ \*(Aqexamples\*(Aq, \*(Aqmore_examples\*(Aq ],
\&    module => {
\&      Foo::Templates => [\*(Aqshare/html\*(Aq, \*(Aqshare/text\*(Aq],
\&      Foo::Config    => \*(Aqshare/config\*(Aq,
\&    }
\&  }
.Ve
.Sp
If \f(CW\*(C`share_dir\*(C'\fR is set, then File::ShareDir will automatically be added
to the \f(CW\*(C`requires\*(C'\fR hash.
.IP "sign" 4
.IX Item "sign"
[version 0.16]
.Sp
If a true value is specified for this parameter, Module::Signature
will be used (via the 'distsign' action) to create a \s-1SIGNATURE\s0 file
for your distribution during the 'distdir' action, and to add the
\&\s-1SIGNATURE\s0 file to the \s-1MANIFEST \s0(therefore, don't add it yourself).
.Sp
The default value is false.  In the future, the default may change to
true if you have \f(CW\*(C`Module::Signature\*(C'\fR installed on your system.
.IP "tap_harness_args" 4
.IX Item "tap_harness_args"
[version 0.2808_03]
.Sp
An optional parameter specifying parameters to be passed to TAP::Harness when
running tests. Must be given as a hash reference of parameters; see the
TAP::Harness documentation for details. Note that specifying
this parameter will implicitly set \f(CW\*(C`use_tap_harness\*(C'\fR to a true value. You
must therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R".
.IP "test_files" 4
.IX Item "test_files"
[version 0.23]
.Sp
An optional parameter specifying a set of files that should be used as
\&\f(CW\*(C`Test::Harness\*(C'\fR\-style regression tests to be run during the \f(CW\*(C`test\*(C'\fR
action.  May be given as an array reference of the files, or as a hash
reference whose keys are the files (and whose values will currently be
ignored).  If the argument is given as a single string (not in an
array reference), that string will be treated as a \f(CW\*(C`glob()\*(C'\fR pattern
specifying the files to use.
.Sp
The default is to look for a \fItest.pl\fR script in the top-level
directory of the distribution, and any files matching the glob pattern
\&\f(CW\*(C`*.t\*(C'\fR in the \fIt/\fR subdirectory.  If the \f(CW\*(C`recursive_test_files\*(C'\fR
property is true, then the \f(CW\*(C`t/\*(C'\fR directory will be scanned recursively
for \f(CW\*(C`*.t\*(C'\fR files.
.IP "use_tap_harness" 4
.IX Item "use_tap_harness"
[version 0.2808_03]
.Sp
An optional parameter indicating whether or not to use TAP::Harness for
testing rather than Test::Harness. Defaults to false. If set to true, you must
therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R". Implicitly set to a true value if \f(CW\*(C`tap_harness_args\*(C'\fR is
specified.
.IP "xs_files" 4
.IX Item "xs_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.xs\*(C'\fR
files in your distribution.
.RE
.RS 4
.RE
.IP "new_from_context(%args)" 4
.IX Item "new_from_context(%args)"
[version 0.28]
.Sp
When called from a directory containing a \fIBuild.PL\fR script (in other words,
the base directory of a distribution), this method will run the \fIBuild.PL\fR and
call \f(CW\*(C`resume()\*(C'\fR to return the resulting \f(CW\*(C`Module::Build\*(C'\fR object to the caller.
Any key-value arguments given to \f(CW\*(C`new_from_context()\*(C'\fR are essentially like
command line arguments given to the \fIBuild.PL\fR script, so for example you
could pass \f(CW\*(C`verbose => 1\*(C'\fR to this method to turn on verbosity.
.IP "\fIresume()\fR" 4
.IX Item "resume()"
[version 0.03]
.Sp
You'll probably never call this method directly, it's only called from the
auto-generated \f(CW\*(C`Build\*(C'\fR script (and the \f(CW\*(C`new_from_context\*(C'\fR method).  The
\&\f(CW\*(C`new()\*(C'\fR method is only called once, when the user runs \f(CW\*(C`perl Build.PL\*(C'\fR.
Thereafter, when the user runs \f(CW\*(C`Build test\*(C'\fR or another action, the
\&\f(CW\*(C`Module::Build\*(C'\fR object is created using the \f(CW\*(C`resume()\*(C'\fR method to
re-instantiate with the settings given earlier to \f(CW\*(C`new()\*(C'\fR.
.IP "\fIsubclass()\fR" 4
.IX Item "subclass()"
[version 0.06]
.Sp
This creates a new \f(CW\*(C`Module::Build\*(C'\fR subclass on the fly, as described
in the \*(L"\s-1SUBCLASSING\*(R"\s0 in Module::Build::Authoring section.  The caller
must provide either a \f(CW\*(C`class\*(C'\fR or \f(CW\*(C`code\*(C'\fR parameter, or both.  The
\&\f(CW\*(C`class\*(C'\fR parameter indicates the name to use for the new subclass, and
defaults to \f(CW\*(C`MyModuleBuilder\*(C'\fR.  The \f(CW\*(C`code\*(C'\fR parameter specifies Perl
code to use as the body of the subclass.
.IP "add_property" 4
.IX Item "add_property"
[version 0.31]
.Sp
.Vb 10
\&  package \*(AqMy::Build\*(Aq;
\&  use base \*(AqModule::Build\*(Aq;
\&  _\|_PACKAGE_\|_\->add_property( \*(Aqpedantic\*(Aq );
\&  _\|_PACKAGE_\|_\->add_property( answer => 42 );
\&  _\|_PACKAGE_\|_\->add_property(
\&     \*(Aqepoch\*(Aq,
\&      default => sub { time },
\&      check   => sub {
\&          return 1 if /^\ed+$/;
\&          shift\->property_error( "\*(Aq$_\*(Aq is not an epoch time" );
\&          return 0;
\&      },
\&  );
.Ve
.Sp
Adds a property to a Module::Build class. Properties are those attributes of a
Module::Build object which can be passed to the constructor and which have
accessors to get and set them. All of the core properties, such as
\&\f(CW\*(C`module_name\*(C'\fR and \f(CW\*(C`license\*(C'\fR, are defined using this class method.
.Sp
The first argument to \f(CW\*(C`add_property()\*(C'\fR is always the name of the property.
The second argument can be either a default value for the property, or a list
of key/value pairs. The supported keys are:
.RS 4
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
The default value. May optionally be specified as a code reference, in which
case the return value from the execution of the code reference will be used.
If you need the default to be a code reference, just use a code reference to
return it, e.g.:
.Sp
.Vb 1
\&      default => sub { sub { ... } },
.Ve
.ie n .IP """check""" 4
.el .IP "\f(CWcheck\fR" 4
.IX Item "check"
A code reference that checks that a value specified for the property is valid.
During the execution of the code reference, the new value will be included in
the \f(CW$_\fR variable. If the value is correct, the \f(CW\*(C`check\*(C'\fR code reference
should return true. If the value is not correct, it sends an error message to
\&\f(CW\*(C`property_error()\*(C'\fR and returns false.
.RE
.RS 4
.Sp
When this method is called, a new property will be installed in the
Module::Build class, and an accessor will be built to allow the property to be
get or set on the build object.
.Sp
.Vb 2
\&  print $build\->pedantic, $/;
\&  $build\->pedantic(0);
.Ve
.Sp
If the default value is a hash reference, this generates a special-case
accessor method, wherein individual key/value pairs may be set or fetched:
.Sp
.Vb 3
\&  print "stuff{foo} is: ", $build\->stuff( \*(Aqfoo\*(Aq ), $/;
\&  $build\->stuff( foo => \*(Aqbar\*(Aq );
\&  print $build\->stuff( \*(Aqfoo\*(Aq ), $/; # Outputs "bar"
.Ve
.Sp
Of course, you can still set the entire hash reference at once, as well:
.Sp
.Vb 1
\&  $build\->stuff( { foo => \*(Aqbar\*(Aq, baz => \*(Aqyo\*(Aq } );
.Ve
.Sp
In either case, if a \f(CW\*(C`check\*(C'\fR has been specified for the property, it will be
applied to the entire hash. So the check code reference should look something
like:
.Sp
.Vb 5
\&      check => sub {
\&            return 1 if defined $_ && exists $_\->{foo};
\&            shift\->property_error(qq{Property "stuff" needs "foo"});
\&            return 0;
\&      },
.Ve
.RE
.IP "property_error" 4
.IX Item "property_error"
[version 0.31]
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "add_build_element($type)" 4
.IX Item "add_build_element($type)"
[version 0.26]
.Sp
Adds a new type of entry to the build process.  Accepts a single
string specifying its type-name.  There must also be a method defined
to process things of that type, e.g. if you add a build element called
\&\f(CW\*(Aqfoo\*(Aq\fR, then you must also define a method called
\&\f(CW\*(C`process_foo_files()\*(C'\fR.
.Sp
See also
\&\*(L"Adding new file types to the build process\*(R" in Module::Build::Cookbook.
.IP "add_to_cleanup(@files)" 4
.IX Item "add_to_cleanup(@files)"
[version 0.03]
.Sp
You may call \f(CW\*(C`$self\->add_to_cleanup(@patterns)\*(C'\fR to tell
\&\f(CW\*(C`Module::Build\*(C'\fR that certain files should be removed when the user
performs the \f(CW\*(C`Build clean\*(C'\fR action.  The arguments to the method are
patterns suitable for passing to Perl's \f(CW\*(C`glob()\*(C'\fR function, specified
in either Unix format or the current machine's native format.  It's
usually convenient to use Unix format when you hard-code the filenames
(e.g. in \fIBuild.PL\fR) and the native format when the names are
programmatically generated (e.g. in a testing script).
.Sp
I decided to provide a dynamic method of the \f(CW$build\fR object, rather
than just use a static list of files named in the \fIBuild.PL\fR, because
these static lists can get difficult to manage.  I usually prefer to
keep the responsibility for registering temporary files close to the
code that creates them.
.IP "\fIargs()\fR" 4
.IX Item "args()"
[version 0.26]
.Sp
.Vb 4
\&  my $args_href = $build\->args;
\&  my %args = $build\->args;
\&  my $arg_value = $build\->args($key);
\&  $build\->args($key, $value);
.Ve
.Sp
This method is the preferred interface for retrieving the arguments passed via
command line options to \fIBuild.PL\fR or \fIBuild\fR, minus the Module-Build
specific options.
.Sp
When called in in a scalar context with no arguments, this method returns a
reference to the hash storing all of the arguments; in an array context, it
returns the hash itself.  When passed a single argument, it returns the value
stored in the args hash for that option key.  When called with two arguments,
the second argument is assigned to the args hash under the key passed as the
first argument.
.ie n .IP "autosplit_file($from, $to)" 4
.el .IP "autosplit_file($from, \f(CW$to\fR)" 4
.IX Item "autosplit_file($from, $to)"
[version 0.28]
.Sp
Invokes the AutoSplit module on the \f(CW$from\fR file, sending the
output to the \f(CW\*(C`lib/auto\*(C'\fR directory inside \f(CW$to\fR.  \f(CW$to\fR is
typically the \f(CW\*(C`blib/\*(C'\fR directory.
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
[version 0.14]
.Sp
Returns a string containing the root-level directory of this build,
i.e. where the \f(CW\*(C`Build.PL\*(C'\fR script and the \f(CW\*(C`lib\*(C'\fR directory can be
found.  This is usually the same as the current working directory,
because the \f(CW\*(C`Build\*(C'\fR script will \f(CW\*(C`chdir()\*(C'\fR into this directory as
soon as it begins execution.
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`build_requires\*(C'\fR
prerequisites that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "can_action( $action )" 4
.el .IP "can_action( \f(CW$action\fR )" 4
.IX Item "can_action( $action )"
Returns a reference to the method that defines \f(CW$action\fR, or false
otherwise. This is handy for actions defined (or maybe not!) in subclasses.
.Sp
[version 0.32_xx]
.IP "\fIcbuilder()\fR" 4
.IX Item "cbuilder()"
[version 0.2809]
.Sp
Returns the internal ExtUtils::CBuilder object that can be used for
compiling & linking C code.  If no such object is available (e.g. if
the system has no compiler installed) an exception will be thrown.
.ie n .IP "check_installed_status($module, $version)" 4
.el .IP "check_installed_status($module, \f(CW$version\fR)" 4
.IX Item "check_installed_status($module, $version)"
[version 0.11]
.Sp
This method returns a hash reference indicating whether a version
dependency on a certain module is satisfied.  The \f(CW$module\fR argument
is given as a string like \f(CW"Data::Dumper"\fR or \f(CW"perl"\fR, and the
\&\f(CW$version\fR argument can take any of the forms described in \*(L"requires\*(R"
above.  This allows very fine-grained version checking.
.Sp
The returned hash reference has the following structure:
.Sp
.Vb 6
\&  {
\&   ok => $whether_the_dependency_is_satisfied,
\&   have => $version_already_installed,
\&   need => $version_requested, # Same as incoming $version argument
\&   message => $informative_error_message,
\&  }
.Ve
.Sp
If no version of \f(CW$module\fR is currently installed, the \f(CW\*(C`have\*(C'\fR value
will be the string \f(CW"<none>"\fR.  Otherwise the \f(CW\*(C`have\*(C'\fR value will
simply be the version of the installed module.  Note that this means
that if \f(CW$module\fR is installed but doesn't define a version number,
the \f(CW\*(C`have\*(C'\fR value will be \f(CW\*(C`undef\*(C'\fR \- this is why we don't use \f(CW\*(C`undef\*(C'\fR
for the case when \f(CW$module\fR isn't installed at all.
.Sp
This method may be called either as an object method
(\f(CW\*(C`$build\->check_installed_status($module, $version)\*(C'\fR)
or as a class method
(\f(CW\*(C`Module::Build\->check_installed_status($module, $version)\*(C'\fR).
.ie n .IP "check_installed_version($module, $version)" 4
.el .IP "check_installed_version($module, \f(CW$version\fR)" 4
.IX Item "check_installed_version($module, $version)"
[version 0.05]
.Sp
Like \fIcheck_installed_status()\fR,
but simply returns true or false depending on whether module
\&\f(CW$module\fR satisfies the dependency \f(CW$version\fR.
.Sp
If the check succeeds, the return value is the actual version of
\&\f(CW$module\fR installed on the system.  This allows you to do the
following:
.Sp
.Vb 6
\&  my $installed = $build\->check_installed_version(\*(AqDBI\*(Aq, \*(Aq1.15\*(Aq);
\&  if ($installed) {
\&    print "Congratulations, version $installed of DBI is installed.\en";
\&  } else {
\&    die "Sorry, you must install DBI.\en";
\&  }
.Ve
.Sp
If the check fails, we return false and set \f(CW$@\fR to an informative
error message.
.Sp
If \f(CW$version\fR is any non-true value (notably zero) and any version of
\&\f(CW$module\fR is installed, we return true.  In this case, if \f(CW$module\fR
doesn't define a version, or if its version is zero, we return the
special value \*(L"0 but true\*(R", which is numerically zero, but logically
true.
.Sp
In general you might prefer to use \f(CW\*(C`check_installed_status\*(C'\fR if you
need detailed information, or this method if you just need a yes/no
answer.
.ie n .IP "compare_versions($v1, $op, $v2)" 4
.el .IP "compare_versions($v1, \f(CW$op\fR, \f(CW$v2\fR)" 4
.IX Item "compare_versions($v1, $op, $v2)"
[version 0.28]
.Sp
Compares two module versions \f(CW$v1\fR and \f(CW$v2\fR using the operator
\&\f(CW$op\fR, which should be one of Perl's numeric operators like \f(CW\*(C`!=\*(C'\fR or
\&\f(CW\*(C`>=\*(C'\fR or the like.  We do at least a halfway-decent job of
handling versions that aren't strictly numeric, like \f(CW\*(C`0.27_02\*(C'\fR, but
exotic stuff will likely cause problems.
.Sp
In the future, the guts of this method might be replaced with a call
out to \f(CW\*(C`version.pm\*(C'\fR.
.IP "config($key)" 4
.IX Item "config($key)"
.PD 0
.ie n .IP "config($key, $value)" 4
.el .IP "config($key, \f(CW$value\fR)" 4
.IX Item "config($key, $value)"
.IP "\fIconfig()\fR [deprecated]" 4
.IX Item "config() [deprecated]"
.PD
[version 0.22]
.Sp
With a single argument \f(CW$key\fR, returns the value associated with that
key in the \f(CW\*(C`Config.pm\*(C'\fR hash, including any changes the author or user
has specified.
.Sp
With \f(CW$key\fR and \f(CW$value\fR arguments, sets the value for future
callers of \f(CW\*(C`config($key)\*(C'\fR.
.Sp
With no arguments, returns a hash reference containing all such
key-value pairs.  This usage is deprecated, though, because it's a
resource hog and violates encapsulation.
.IP "config_data($name)" 4
.IX Item "config_data($name)"
.PD 0
.ie n .IP "config_data($name => $value)" 4
.el .IP "config_data($name => \f(CW$value\fR)" 4
.IX Item "config_data($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns the value of the configuration
variable \f(CW$name\fR.  With two arguments, sets the given configuration
variable to the given value.  The value may be any Perl scalar that's
serializable with \f(CW\*(C`Data::Dumper\*(C'\fR.  For instance, if you write a
module that can use a MySQL or PostgreSQL back-end, you might create
configuration variables called \f(CW\*(C`mysql_connect\*(C'\fR and
\&\f(CW\*(C`postgres_connect\*(C'\fR, and set each to an array of connection parameters
for \f(CW\*(C`DBI\->connect()\*(C'\fR.
.Sp
Configuration values set in this way using the Module::Build object
will be available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->config($name)\*(C'\fR.
.Sp
The \fIfeature()\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING CONFIGURATION INFORMATION\*(R"\s0 in Module::Build::Authoring.
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`conflicts\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "contains_pod($file) [deprecated]" 4
.IX Item "contains_pod($file) [deprecated]"
[version 0.20]
.Sp
[Deprecated] Please see Module::Build::ModuleInfo instead.
.Sp
Returns true if the given file appears to contain \s-1POD\s0 documentation.
Currently this checks whether the file has a line beginning with
\&'=pod', '=head', or '=item', but the exact semantics may change in the
future.
.IP "copy_if_modified(%parameters)" 4
.IX Item "copy_if_modified(%parameters)"
[version 0.19]
.Sp
Takes the file in the \f(CW\*(C`from\*(C'\fR parameter and copies it to the file in
the \f(CW\*(C`to\*(C'\fR parameter, or the directory in the \f(CW\*(C`to_dir\*(C'\fR parameter, if
the file has changed since it was last copied (or if it doesn't exist
in the new location).  By default the entire directory structure of
\&\f(CW\*(C`from\*(C'\fR will be copied into \f(CW\*(C`to_dir\*(C'\fR; an optional \f(CW\*(C`flatten\*(C'\fR
parameter will copy into \f(CW\*(C`to_dir\*(C'\fR without doing so.
.Sp
Returns the path to the destination file, or \f(CW\*(C`undef\*(C'\fR if nothing
needed to be copied.
.Sp
Any directories that need to be created in order to perform the
copying will be automatically created.
.Sp
The destination file is set to read-only. If the source file has the
executable bit set, then the destination file will be made executable.
.IP "\fIcreate_build_script()\fR" 4
.IX Item "create_build_script()"
[version 0.05]
.Sp
Creates an executable script called \f(CW\*(C`Build\*(C'\fR in the current directory
that will be used to execute further user actions.  This script is
roughly analogous (in function, not in form) to the Makefile created
by \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  This method also creates some temporary
data in a directory called \f(CW\*(C`_build/\*(C'\fR.  Both of these will be removed
when the \f(CW\*(C`realclean\*(C'\fR action is performed.
.Sp
Among the files created in \f(CW\*(C`_build/\*(C'\fR is a \fI_build/prereqs\fR file
containing the set of prerequisites for this distribution, as a hash
of hashes.  This file may be \f(CW\*(C`eval()\*(C'\fR\-ed to obtain the authoritative
set of prerequisites, which might be different from the contents of
\&\fI\s-1META\s0.yml\fR (because \fIBuild.PL\fR might have set them dynamically).
But fancy developers take heed: do not put any fancy custom runtime
code in the \fI_build/prereqs\fR file, leave it as a static declaration
containing only strings and numbers.  Similarly, do not alter the
structure of the internal \f(CW\*(C`$self\->{properties}{requires}\*(C'\fR (etc.)
data members, because that's where this data comes from.
.IP "\fIcurrent_action()\fR" 4
.IX Item "current_action()"
[version 0.28]
.Sp
Returns the name of the currently-running action, such as \*(L"build\*(R" or
\&\*(L"test\*(R".  This action is not necessarily the action that was originally
invoked by the user.  For example, if the user invoked the \*(L"test\*(R"
action, \fIcurrent_action()\fR would initially return \*(L"test\*(R".  However,
action \*(L"test\*(R" depends on action \*(L"code\*(R", so \fIcurrent_action()\fR will
return \*(L"code\*(R" while that dependency is being executed.  Once that
action has completed, \fIcurrent_action()\fR will again return \*(L"test\*(R".
.Sp
If you need to know the name of the original action invoked by the
user, see \*(L"\fIinvoked_action()\fR\*(R" below.
.IP "depends_on(@actions)" 4
.IX Item "depends_on(@actions)"
[version 0.28]
.Sp
Invokes the named action or list of actions in sequence.  Using this
method is preferred to calling the action explicitly because it
performs some internal record-keeping, and it ensures that the same
action is not invoked multiple times (note: in future versions of
Module::Build it's conceivable that this run-only-once mechanism will
be changed to something more intelligent).
.Sp
Note that the name of this method is something of a misnomer; it
should really be called something like
\&\f(CW\*(C`invoke_actions_unless_already_invoked()\*(C'\fR or something, but for
better or worse (perhaps better!) we were still thinking in
\&\f(CW\*(C`make\*(C'\fR\-like dependency terms when we created this method.
.Sp
See also \fIdispatch()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.ie n .IP "dir_contains($first_dir, $second_dir)" 4
.el .IP "dir_contains($first_dir, \f(CW$second_dir\fR)" 4
.IX Item "dir_contains($first_dir, $second_dir)"
[version 0.28]
.Sp
Returns true if the first directory logically contains the second
directory.  This is just a convenience function because \f(CW\*(C`File::Spec\*(C'\fR
doesn't really provide an easy way to figure this out (but
\&\f(CW\*(C`Path::Class\*(C'\fR does...).
.ie n .IP "dispatch($action, %args)" 4
.el .IP "dispatch($action, \f(CW%args\fR)" 4
.IX Item "dispatch($action, %args)"
[version 0.03]
.Sp
Invokes the build action \f(CW$action\fR.  Optionally, a list of options
and their values can be passed in.  This is equivalent to invoking an
action at the command line, passing in a list of options.
.Sp
Custom options that have not been registered must be passed in as a
hash reference in a key named \*(L"args\*(R":
.Sp
.Vb 1
\&  $build\->dispatch(\*(Aqfoo\*(Aq, verbose => 1, args => { my_option => \*(Aqvalue\*(Aq });
.Ve
.Sp
This method is intended to be used to programmatically invoke build
actions, e.g. by applications controlling Module::Build\-based builds
rather than by subclasses.
.Sp
See also \fIdepends_on()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.IP "\fIdist_dir()\fR" 4
.IX Item "dist_dir()"
[version 0.28]
.Sp
Returns the name of the directory that will be created during the
\&\f(CW\*(C`dist\*(C'\fR action.  The name is derived from the \f(CW\*(C`dist_name\*(C'\fR and
\&\f(CW\*(C`dist_version\*(C'\fR properties.
.IP "\fIdist_name()\fR" 4
.IX Item "dist_name()"
[version 0.21]
.Sp
Returns the name of the current distribution, as passed to the
\&\f(CW\*(C`new()\*(C'\fR method in a \f(CW\*(C`dist_name\*(C'\fR or modified \f(CW\*(C`module_name\*(C'\fR
parameter.
.IP "\fIdist_version()\fR" 4
.IX Item "dist_version()"
[version 0.21]
.Sp
Returns the version of the current distribution, as determined by the
\&\f(CW\*(C`new()\*(C'\fR method from a \f(CW\*(C`dist_version\*(C'\fR, \f(CW\*(C`dist_version_from\*(C'\fR, or
\&\f(CW\*(C`module_name\*(C'\fR parameter.
.ie n .IP "do_system($cmd, @args)" 4
.el .IP "do_system($cmd, \f(CW@args\fR)" 4
.IX Item "do_system($cmd, @args)"
[version 0.21]
.Sp
This is a fairly simple wrapper around Perl's \f(CW\*(C`system()\*(C'\fR built-in
command.  Given a command and an array of optional arguments, this
method will print the command to \f(CW\*(C`STDOUT\*(C'\fR, and then execute it using
Perl's \f(CW\*(C`system()\*(C'\fR.  It returns true or false to indicate success or
failure (the opposite of how \f(CW\*(C`system()\*(C'\fR works, but more intuitive).
.Sp
Note that if you supply a single argument to \f(CW\*(C`do_system()\*(C'\fR, it
will/may be processed by the system's shell, and any special
characters will do their special things.  If you supply multiple
arguments, no shell will get involved and the command will be executed
directly.
.IP "\fIextra_compiler_flags()\fR" 4
.IX Item "extra_compiler_flags()"
.PD 0
.IP "extra_compiler_flags(@flags)" 4
.IX Item "extra_compiler_flags(@flags)"
.PD
[version 0.25]
.Sp
Set or retrieve the extra compiler flags. Returns an arrayref of flags.
.IP "\fIextra_linker_flags()\fR" 4
.IX Item "extra_linker_flags()"
.PD 0
.IP "extra_linker_flags(@flags)" 4
.IX Item "extra_linker_flags(@flags)"
.PD
[version 0.25]
.Sp
Set or retrieve the extra linker flags. Returns an arrayref of flags.
.IP "feature($name)" 4
.IX Item "feature($name)"
.PD 0
.ie n .IP "feature($name => $value)" 4
.el .IP "feature($name => \f(CW$value\fR)" 4
.IX Item "feature($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns true if the given feature is set.
With two arguments, sets the given feature to the given boolean value.
In this context, a \*(L"feature\*(R" is any optional functionality of an
installed module.  For instance, if you write a module that could
optionally support a MySQL or PostgreSQL backend, you might create
features called \f(CW\*(C`mysql_support\*(C'\fR and \f(CW\*(C`postgres_support\*(C'\fR, and set them
to true/false depending on whether the user has the proper databases
installed and configured.
.Sp
Features set in this way using the Module::Build object will be
available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->feature($name)\*(C'\fR.
.Sp
The \f(CW\*(C`feature()\*(C'\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING CONFIGURATION INFORMATION\*(R"\s0 in Module::Build::Authoring.
.IP "fix_shebang_line(@files)" 4
.IX Item "fix_shebang_line(@files)"
[version 0.??]
.Sp
Modify any \*(L"shebang\*(R" line in the specified files to use the path to the
perl executable being used for the current build.  Files are modified
in-place.  The existing shebang line must have a command that contains
"\f(CW\*(C`perl\*(C'\fR"; arguments to the command do not count.  In particular, this
means that the use of \f(CW\*(C`#!/usr/bin/env perl\*(C'\fR will not be changed.
.Sp
For an explanation of shebang lines, see
<http://en.wikipedia.org/wiki/Shebang_%28Unix%29>.
.IP "\fIhave_c_compiler()\fR" 4
.IX Item "have_c_compiler()"
[version 0.21]
.Sp
Returns true if the current system seems to have a working C compiler.
We currently determine this by attempting to compile a simple C source
file and reporting whether the attempt was successful.
.IP "\fIinstall_base_relpaths()\fR" 4
.IX Item "install_base_relpaths()"
.PD 0
.IP "install_base_relpaths($type)" 4
.IX Item "install_base_relpaths($type)"
.ie n .IP "install_base_relpaths($type => $path)" 4
.el .IP "install_base_relpaths($type => \f(CW$path\fR)" 4
.IX Item "install_base_relpaths($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to
\&\f(CW\*(C`install_base\*(C'\fR for any installable element. This is useful if you
want to set the relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "install_destination($type)" 4
.IX Item "install_destination($type)"
[version 0.28]
.Sp
Returns the directory in which items of type \f(CW$type\fR (e.g. \f(CW\*(C`lib\*(C'\fR,
\&\f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR, or anything else returned by the \*(L"\fIinstall_types()\fR\*(R"
method) will be installed during the \f(CW\*(C`install\*(C'\fR action.  Any settings
for \f(CW\*(C`install_path\*(C'\fR, \f(CW\*(C`install_base\*(C'\fR, and \f(CW\*(C`prefix\*(C'\fR are taken into
account when determining the return value.
.IP "\fIinstall_path()\fR" 4
.IX Item "install_path()"
.PD 0
.IP "install_path($type)" 4
.IX Item "install_path($type)"
.ie n .IP "install_path($type => $path)" 4
.el .IP "install_path($type => \f(CW$path\fR)" 4
.IX Item "install_path($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve paths for specific installable elements. This is
useful when you want to examine any explicit install paths specified
by the user on the command line, or if you want to set the install
path for a specific installable element based on another attribute
like \f(CW\*(C`install_base()\*(C'\fR.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
The supplied \f(CW$path\fR should be an absolute path to install elements
of \f(CW$type\fR.  The return value is \f(CW$path\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIinstall_types()\fR" 4
.IX Item "install_types()"
[version 0.28]
.Sp
Returns a list of installable types that this build knows about.
These types each correspond to the name of a directory in \fIblib/\fR,
and the list usually includes items such as \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR,
\&\f(CW\*(C`script\*(C'\fR, \f(CW\*(C`libdoc\*(C'\fR, \f(CW\*(C`bindoc\*(C'\fR, and if \s-1HTML\s0 documentation is to be
built, \f(CW\*(C`libhtml\*(C'\fR and \f(CW\*(C`binhtml\*(C'\fR.  Other user-defined types may also
exist.
.IP "\fIinvoked_action()\fR" 4
.IX Item "invoked_action()"
[version 0.28]
.Sp
This is the name of the original action invoked by the user.  This
value is set when the user invokes \fIBuild.PL\fR, the \fIBuild\fR script,
or programmatically through the \fIdispatch()\fR
method.  It does not change as sub-actions are executed as
dependencies are evaluated.
.Sp
To get the name of the currently executing dependency, see
\&\*(L"\fIcurrent_action()\fR\*(R" above.
.IP "\fInotes()\fR" 4
.IX Item "notes()"
.PD 0
.IP "notes($key)" 4
.IX Item "notes($key)"
.ie n .IP "notes($key => $value)" 4
.el .IP "notes($key => \f(CW$value\fR)" 4
.IX Item "notes($key => $value)"
.PD
[version 0.20]
.Sp
The \f(CW\*(C`notes()\*(C'\fR value allows you to store your own persistent
information about the build, and to share that information among
different entities involved in the build.  See the example in the
\&\f(CW\*(C`current()\*(C'\fR method.
.Sp
The \f(CW\*(C`notes()\*(C'\fR method is essentially a glorified hash access.  With no
arguments, \f(CW\*(C`notes()\*(C'\fR returns the entire hash of notes.  With one argument,
\&\f(CW\*(C`notes($key)\*(C'\fR returns the value associated with the given key.  With two
arguments, \f(CW\*(C`notes($key, $value)\*(C'\fR sets the value associated with the given key
to \f(CW$value\fR and returns the new value.
.Sp
The lifetime of the \f(CW\*(C`notes\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`notes\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is run, if the Module::Build Perl \s-1API\s0 is being used
instead of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is
run again or the \f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
[version 0.28]
.Sp
Returns a string containing the working directory that was in effect
before the \fIBuild\fR script \fIchdir()\fR\-ed into the \f(CW\*(C`base_dir\*(C'\fR.  This
might be useful for writing wrapper tools that might need to \fIchdir()\fR
back out.
.IP "\fIos_type()\fR" 4
.IX Item "os_type()"
[version 0.04]
.Sp
If you're subclassing Module::Build and some code needs to alter its
behavior based on the current platform, you may only need to know
whether you're running on Windows, Unix, MacOS, \s-1VMS,\s0 etc., and not the
fine-grained value of Perl's \f(CW$^O\fR variable.  The \f(CW\*(C`os_type()\*(C'\fR method
will return a string like \f(CW\*(C`Windows\*(C'\fR, \f(CW\*(C`Unix\*(C'\fR, \f(CW\*(C`MacOS\*(C'\fR, \f(CW\*(C`VMS\*(C'\fR, or
whatever is appropriate.  If you're running on an unknown platform, it
will return \f(CW\*(C`undef\*(C'\fR \- there shouldn't be many unknown platforms
though.
.IP "\fIis_vmsish()\fR" 4
.IX Item "is_vmsish()"
.PD 0
.IP "\fIis_windowsish()\fR" 4
.IX Item "is_windowsish()"
.IP "\fIis_unixish()\fR" 4
.IX Item "is_unixish()"
.PD
Convenience functions that return a boolean value indicating whether
this platform behaves respectively like \s-1VMS,\s0 Windows, or Unix.  For
arbitrary reasons other platforms don't get their own such functions,
at least not yet.
.IP "\fIprefix_relpaths()\fR" 4
.IX Item "prefix_relpaths()"
.PD 0
.IP "prefix_relpaths($installdirs)" 4
.IX Item "prefix_relpaths($installdirs)"
.ie n .IP "prefix_relpaths($installdirs, $type)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type)"
.ie n .IP "prefix_relpaths($installdirs, $type => $path)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR => \f(CW$path\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to \f(CW\*(C`prefix\*(C'\fR for
any installable element.  This is useful if you want to set the
relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values as defined by the current
\&\f(CW\*(C`installdirs\*(C'\fR setting.
.Sp
With a single argument, it returns a reference to a hash containing
all elements and their respective values as defined by
\&\f(CW$installdirs\fR.
.Sp
The hash returned by the above calls should not be modified directly;
use the three-argument below form to change values.
.Sp
The two argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIget_metadata()\fR" 4
.IX Item "get_metadata()"
[version 0.36]
.Sp
This method returns a hash reference of metadata that can be used to create a
\&\s-1YAML\s0 datastream. It is provided for authors to override or customize the fields
of \fI\s-1META\s0.yml\fR.   E.g.
.Sp
.Vb 2
\&  package My::Builder;
\&  use base \*(AqModule::Build\*(Aq;
\&
\&  sub get_metadata {
\&    my $self, @args = @_;
\&    my $data = $self\->SUPER::get_metadata(@args);
\&    $data\->{custom_field} = \*(Aqfoo\*(Aq;
\&    return $data;
\&  }
.Ve
.Sp
Valid arguments include:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`fatal\*(C'\fR \*(-- indicates whether missing required
metadata fields should be a fatal error or not.  For \s-1META\s0 creation, it
generally should, but for \s-1MYMETA\s0 creation for end-users, it should not be
fatal.
.IP "\(bu" 4
\&\f(CW\*(C`auto\*(C'\fR \*(-- indicates whether any necessary configure_requires should be
automatically added.  This is used in \s-1META\s0 creation.
.RE
.RS 4
.Sp
This method is a wrapper around the old prepare_metadata \s-1API\s0 now that we
no longer use YAML::Node to hold metadata.
.RE
.IP "\fIprepare_metadata()\fR [deprecated]" 4
.IX Item "prepare_metadata() [deprecated]"
[version 0.36]
.Sp
[Deprecated] As of 0.36, authors should use \f(CW\*(C`get_metadata\*(C'\fR instead.  This
method is preserved for backwards compatibility only.
.Sp
It takes three positional arguments: a hashref (to which metadata will be
added), an optional arrayref (to which metadata keys will be added in order if
the arrayref exists), and a hashref of arguments (as provided to get_metadata).
The latter argument is new as of 0.36.  Earlier versions are always fatal on
errors.
.Sp
Prior to version 0.36, this method took a YAML::Node as an argument to hold
assembled metadata.
.IP "\fIprereq_failures()\fR" 4
.IX Item "prereq_failures()"
[version 0.11]
.Sp
Returns a data structure containing information about any failed
prerequisites (of any of the types described above), or \f(CW\*(C`undef\*(C'\fR if
all prerequisites are met.
.Sp
The data structure returned is a hash reference.  The top level keys
are the type of prerequisite failed, one of \*(L"requires\*(R",
\&\*(L"build_requires\*(R", \*(L"conflicts\*(R", or \*(L"recommends\*(R".  The associated values
are hash references whose keys are the names of required (or
conflicting) modules.  The associated values of those are hash
references indicating some information about the failure.  For example:
.Sp
.Vb 5
\&  {
\&   have => \*(Aq0.42\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqVersion 0.42 is installed, but we need version 0.59\*(Aq,
\&  }
.Ve
.Sp
or
.Sp
.Vb 5
\&  {
\&   have => \*(Aq<none>\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqPrerequisite Foo isn\*(Aqt installed\*(Aq,
\&  }
.Ve
.Sp
This hash has the same structure as the hash returned by the
\&\f(CW\*(C`check_installed_status()\*(C'\fR method, except that in the case of
\&\*(L"conflicts\*(R" dependencies we change the \*(L"need\*(R" key to \*(L"conflicts\*(R" and
construct a proper message.
.Sp
Examples:
.Sp
.Vb 2
\&  # Check a required dependency on Foo::Bar
\&  if ( $build\->prereq_failures\->{requires}{Foo::Bar} ) { ...
\&
\&  # Check whether there were any failures
\&  if ( $build\->prereq_failures ) { ...
\&
\&  # Show messages for all failures
\&  my $failures = $build\->prereq_failures;
\&  while (my ($type, $list) = each %$failures) {
\&    while (my ($name, $hash) = each %$list) {
\&      print "Failure for $name: $hash\->{message}\en";
\&    }
\&  }
.Ve
.IP "\fIprereq_data()\fR" 4
.IX Item "prereq_data()"
[version 0.32]
.Sp
Returns a reference to a hash describing all prerequisites.  The keys of the
hash will be the various prerequisite types ('requires', 'build_requires',
\&'configure_requires', 'recommends', or 'conflicts') and the values will be
references to hashes of module names and version numbers.  Only prerequisites
types that are defined will be included.  The \f(CW\*(C`prereq_data\*(C'\fR action is just a
thin wrapper around the \f(CW\*(C`prereq_data()\*(C'\fR method and dumps the hash as a string
that can be loaded using \f(CW\*(C`eval()\*(C'\fR.
.IP "\fIprereq_report()\fR" 4
.IX Item "prereq_report()"
[version 0.28]
.Sp
Returns a human-readable (table-form) string showing all
prerequisites, the versions required, and the versions actually
installed.  This can be useful for reviewing the configuration of your
system prior to a build, or when compiling data to send for a bug
report.  The \f(CW\*(C`prereq_report\*(C'\fR action is just a thin wrapper around the
\&\f(CW\*(C`prereq_report()\*(C'\fR method.
.ie n .IP "prompt($message, $default)" 4
.el .IP "prompt($message, \f(CW$default\fR)" 4
.IX Item "prompt($message, $default)"
[version 0.12]
.Sp
Asks the user a question and returns their response as a string.  The
first argument specifies the message to display to the user (for
example, \f(CW"Where do you keep your money?"\fR).  The second argument,
which is optional, specifies a default answer (for example,
\&\f(CW"wallet"\fR).  The user will be asked the question once.
.Sp
If \f(CW\*(C`prompt()\*(C'\fR detects that it is not running interactively and there
is nothing on \s-1STDIN\s0 or if the \s-1PERL_MM_USE_DEFAULT\s0 environment variable
is set to true, the \f(CW$default\fR will be used without prompting.
.Sp
To prevent automated processes from blocking, the user must either set
\&\s-1PERL_MM_USE_DEFAULT\s0 or attach something to \s-1STDIN \s0(this can be a
pipe/file containing a scripted set of answers or /dev/null.)
.Sp
If no \f(CW$default\fR is provided an empty string will be used instead.  In
non-interactive mode, the absence of \f(CW$default\fR is an error (though
explicitly passing \f(CW\*(C`undef()\*(C'\fR as the default is valid as of 0.27.)
.Sp
This method may be called as a class or object method.
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`recommends\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`requires\*(C'\fR prerequisites that
were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "rscan_dir($dir, $pattern)" 4
.el .IP "rscan_dir($dir, \f(CW$pattern\fR)" 4
.IX Item "rscan_dir($dir, $pattern)"
[version 0.28]
.Sp
Uses \f(CW\*(C`File::Find\*(C'\fR to traverse the directory \f(CW$dir\fR, returning a
reference to an array of entries matching \f(CW$pattern\fR.  \f(CW$pattern\fR
may either be a regular expression (using \f(CW\*(C`qr//\*(C'\fR or just a plain
string), or a reference to a subroutine that will return true for
wanted entries.  If \f(CW$pattern\fR is not given, all entries will be
returned.
.Sp
Examples:
.Sp
.Vb 2
\& # All the *.pm files in lib/
\& $m\->rscan_dir(\*(Aqlib\*(Aq, qr/\e.pm$/)
\&
\& # All the files in blib/ that aren\*(Aqt *.html files
\& $m\->rscan_dir(\*(Aqblib\*(Aq, sub {\-f $_ and not /\e.html$/});
\&
\& # All the files in t/
\& $m\->rscan_dir(\*(Aqt\*(Aq);
.Ve
.IP "\fIruntime_params()\fR" 4
.IX Item "runtime_params()"
.PD 0
.IP "runtime_params($key)" 4
.IX Item "runtime_params($key)"
.PD
[version 0.28]
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method stores the values passed on the command line
for valid properties (that is, any command line options for which
\&\f(CW\*(C`valid_property()\*(C'\fR returns a true value).  The value on the command line may
override the default value for a property, as well as any value specified in a
call to \f(CW\*(C`new()\*(C'\fR.  This allows you to programmatically tell if \f(CW\*(C`perl Build.PL\*(C'\fR
or any execution of \f(CW\*(C`./Build\*(C'\fR had command line options specified that
override valid properties.
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method is essentially a glorified read-only hash.  With
no arguments, \f(CW\*(C`runtime_params()\*(C'\fR returns the entire hash of properties
specified on the command line.  With one argument, \f(CW\*(C`runtime_params($key)\*(C'\fR
returns the value associated with the given key.
.Sp
The lifetime of the \f(CW\*(C`runtime_params\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`runtime_params\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is called, if the Module::Build Perl \s-1API\s0 is being used instead
of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is run again or the
\&\f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIscript_files()\fR" 4
.IX Item "script_files()"
[version 0.18]
.Sp
Returns a hash reference whose keys are the perl script files to be
installed, if any.  This corresponds to the \f(CW\*(C`script_files\*(C'\fR parameter to the
\&\f(CW\*(C`new()\*(C'\fR method.  With an optional argument, this parameter may be set
dynamically.
.Sp
For backward compatibility, the \f(CW\*(C`scripts()\*(C'\fR method does exactly the
same thing as \f(CW\*(C`script_files()\*(C'\fR.  \f(CW\*(C`scripts()\*(C'\fR is deprecated, but it
will stay around for several versions to give people time to
transition.
.ie n .IP "up_to_date($source_file, $derived_file)" 4
.el .IP "up_to_date($source_file, \f(CW$derived_file\fR)" 4
.IX Item "up_to_date($source_file, $derived_file)"
.PD 0
.IP "up_to_date(\e@source_files, \e@derived_files)" 4
.IX Item "up_to_date(@source_files, @derived_files)"
.PD
[version 0.20]
.Sp
This method can be used to compare a set of source files to a set of
derived files.  If any of the source files are newer than any of the
derived files, it returns false.  Additionally, if any of the derived
files do not exist, it returns false.  Otherwise it returns true.
.Sp
The arguments may be either a scalar or an array reference of file
names.
.ie n .IP "y_n($message, $default)" 4
.el .IP "y_n($message, \f(CW$default\fR)" 4
.IX Item "y_n($message, $default)"
[version 0.12]
.Sp
Asks the user a yes/no question using \f(CW\*(C`prompt()\*(C'\fR and returns true or
false accordingly.  The user will be asked the question repeatedly
until they give an answer that looks like \*(L"yes\*(R" or \*(L"no\*(R".
.Sp
The first argument specifies the message to display to the user (for
example, \f(CW"Shall I invest your money for you?"\fR), and the second
argument specifies the default answer (for example, \f(CW"y"\fR).
.Sp
Note that the default is specified as a string like \f(CW"y"\fR or \f(CW"n"\fR,
and the return value is a Perl boolean value like 1 or 0.  I thought
about this for a while and this seemed like the most useful way to do
it.
.Sp
This method may be called as a class or object method.
.SS "Autogenerated Accessors"
.IX Subsection "Autogenerated Accessors"
In addition to the aforementioned methods, there are also some get/set
accessor methods for the following properties:
.IP "\fIPL_files()\fR" 4
.IX Item "PL_files()"
.PD 0
.IP "\fIallow_mb_mismatch()\fR" 4
.IX Item "allow_mb_mismatch()"
.IP "\fIauto_configure_requires()\fR" 4
.IX Item "auto_configure_requires()"
.IP "\fIautosplit()\fR" 4
.IX Item "autosplit()"
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
.IP "\fIbindoc_dirs()\fR" 4
.IX Item "bindoc_dirs()"
.IP "\fIblib()\fR" 4
.IX Item "blib()"
.IP "\fIbuild_bat()\fR" 4
.IX Item "build_bat()"
.IP "\fIbuild_class()\fR" 4
.IX Item "build_class()"
.IP "\fIbuild_elements()\fR" 4
.IX Item "build_elements()"
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
.IP "\fIbuild_script()\fR" 4
.IX Item "build_script()"
.IP "\fIbundle_inc()\fR" 4
.IX Item "bundle_inc()"
.IP "\fIbundle_inc_preload()\fR" 4
.IX Item "bundle_inc_preload()"
.IP "\fIc_source()\fR" 4
.IX Item "c_source()"
.IP "\fIconfig_dir()\fR" 4
.IX Item "config_dir()"
.IP "\fIconfigure_requires()\fR" 4
.IX Item "configure_requires()"
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
.IP "\fIcpan_client()\fR" 4
.IX Item "cpan_client()"
.IP "\fIcreate_license()\fR" 4
.IX Item "create_license()"
.IP "\fIcreate_makefile_pl()\fR" 4
.IX Item "create_makefile_pl()"
.IP "\fIcreate_packlist()\fR" 4
.IX Item "create_packlist()"
.IP "\fIcreate_readme()\fR" 4
.IX Item "create_readme()"
.IP "\fIdebug()\fR" 4
.IX Item "debug()"
.IP "\fIdebugger()\fR" 4
.IX Item "debugger()"
.IP "\fIdestdir()\fR" 4
.IX Item "destdir()"
.IP "\fIdynamic_config()\fR" 4
.IX Item "dynamic_config()"
.IP "\fIget_options()\fR" 4
.IX Item "get_options()"
.IP "\fIhtml_css()\fR" 4
.IX Item "html_css()"
.IP "\fIinclude_dirs()\fR" 4
.IX Item "include_dirs()"
.IP "\fIinstall_base()\fR" 4
.IX Item "install_base()"
.IP "\fIinstalldirs()\fR" 4
.IX Item "installdirs()"
.IP "\fIlibdoc_dirs()\fR" 4
.IX Item "libdoc_dirs()"
.IP "\fIlicense()\fR" 4
.IX Item "license()"
.IP "\fImagic_number()\fR" 4
.IX Item "magic_number()"
.IP "\fImb_version()\fR" 4
.IX Item "mb_version()"
.IP "\fImeta_add()\fR" 4
.IX Item "meta_add()"
.IP "\fImeta_merge()\fR" 4
.IX Item "meta_merge()"
.IP "\fImetafile()\fR" 4
.IX Item "metafile()"
.IP "\fImetafile2()\fR" 4
.IX Item "metafile2()"
.IP "\fImodule_name()\fR" 4
.IX Item "module_name()"
.IP "\fImymetafile()\fR" 4
.IX Item "mymetafile()"
.IP "\fImymetafile2()\fR" 4
.IX Item "mymetafile2()"
.IP "\fIneeds_compiler()\fR" 4
.IX Item "needs_compiler()"
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
.IP "\fIperl()\fR" 4
.IX Item "perl()"
.IP "\fIpm_files()\fR" 4
.IX Item "pm_files()"
.IP "\fIpod_files()\fR" 4
.IX Item "pod_files()"
.IP "\fIpollute()\fR" 4
.IX Item "pollute()"
.IP "\fIprefix()\fR" 4
.IX Item "prefix()"
.IP "\fIprereq_action_types()\fR" 4
.IX Item "prereq_action_types()"
.IP "\fIprogram_name()\fR" 4
.IX Item "program_name()"
.IP "\fIquiet()\fR" 4
.IX Item "quiet()"
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
.IP "\fIrecurse_into()\fR" 4
.IX Item "recurse_into()"
.IP "\fIrecursive_test_files()\fR" 4
.IX Item "recursive_test_files()"
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
.IP "\fIscripts()\fR" 4
.IX Item "scripts()"
.IP "\fIsign()\fR" 4
.IX Item "sign()"
.IP "\fItap_harness_args()\fR" 4
.IX Item "tap_harness_args()"
.IP "\fItest_file_exts()\fR" 4
.IX Item "test_file_exts()"
.IP "\fIuse_rcfile()\fR" 4
.IX Item "use_rcfile()"
.IP "\fIuse_tap_harness()\fR" 4
.IX Item "use_tap_harness()"
.IP "\fIverbose()\fR" 4
.IX Item "verbose()"
.IP "\fIxs_files()\fR" 4
.IX Item "xs_files()"
.PD
.SH "MODULE METADATA"
.IX Header "MODULE METADATA"
If you would like to add other useful metadata, \f(CW\*(C`Module::Build\*(C'\fR
supports this with the \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR arguments to
\&\*(L"\fInew()\fR\*(R". The authoritative list of supported metadata can be found at
CPAN::META::Spec but for convenience \- here are a few of the more useful ones:
.IP "keywords" 4
.IX Item "keywords"
For describing the distribution using keyword (or \*(L"tags\*(R") in order to
make \s-1CPAN\s0.org indexing and search more efficient and useful.
.IP "resources" 4
.IX Item "resources"
A list of additional resources available for users of the
distribution. This can include links to a homepage on the web, a
bug tracker, the repository location, and even a subscription page for the
distribution mailing list.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build(3), Module::Build::Authoring(3),
Module::Build::Cookbook(3), ExtUtils::MakeMaker(3)
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::META::Spec
                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build::API5.16.3pm                   0100644 0001750 0001750 00000252005 12566207437 024732  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::API 3pm"
.TH Module::Build::API 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::API \- API Reference for Module Authors
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I list here some of the most important methods in \f(CW\*(C`Module::Build\*(C'\fR.
Normally you won't need to deal with these methods unless you want to
subclass \f(CW\*(C`Module::Build\*(C'\fR.  But since one of the reasons I created
this module in the first place was so that subclassing is possible
(and easy), I will certainly write more docs as the interface
stabilizes.
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
.IP "\fIcurrent()\fR" 4
.IX Item "current()"
[version 0.20]
.Sp
This method returns a reasonable facsimile of the currently-executing
\&\f(CW\*(C`Module::Build\*(C'\fR object representing the current build.  You can use
this object to query its \*(L"\fInotes()\fR\*(R" method, inquire about installed
modules, and so on.  This is a great way to share information between
different parts of your build process.  For instance, you can ask
the user a question during \f(CW\*(C`perl Build.PL\*(C'\fR, then use their answer
during a regression test:
.Sp
.Vb 3
\&  # In Build.PL:
\&  my $color = $build\->prompt("What is your favorite color?");
\&  $build\->notes(color => $color);
\&
\&  # In t/colortest.t:
\&  use Module::Build;
\&  my $build = Module::Build\->current;
\&  my $color = $build\->notes(\*(Aqcolor\*(Aq);
\&  ...
.Ve
.Sp
The way the \f(CW\*(C`current()\*(C'\fR method is currently implemented, there may be
slight differences between the \f(CW$build\fR object in Build.PL and the
one in \f(CW\*(C`t/colortest.t\*(C'\fR.  It is our goal to minimize these differences
in future releases of Module::Build, so please report any anomalies
you find.
.Sp
One important caveat: in its current implementation, \f(CW\*(C`current()\*(C'\fR will
\&\fB\s-1NOT\s0\fR work correctly if you have changed out of the directory that
\&\f(CW\*(C`Module::Build\*(C'\fR was invoked from.
.IP "\fInew()\fR" 4
.IX Item "new()"
[version 0.03]
.Sp
Creates a new Module::Build object.  Arguments to the \fInew()\fR method are
listed below.  Most arguments are optional, but you must provide
either the \*(L"module_name\*(R" argument, or \*(L"dist_name\*(R" and one of
\&\*(L"dist_version\*(R" or \*(L"dist_version_from\*(R".  In other words, you must
provide enough information to determine both a distribution name and
version.
.RS 4
.IP "add_to_cleanup" 4
.IX Item "add_to_cleanup"
[version 0.19]
.Sp
An array reference of files to be cleaned up when the \f(CW\*(C`clean\*(C'\fR action
is performed. See also the \fIadd_to_cleanup()\fR
method.
.IP "auto_configure_requires" 4
.IX Item "auto_configure_requires"
[version 0.34]
.Sp
This parameter determines whether Module::Build will add itself
automatically to configure_requires (and build_requires) if Module::Build
is not already there.  The required version will be the last 'major' release,
as defined by the decimal version truncated to two decimal places (e.g. 0.34,
instead of 0.3402).  The default value is true.
.IP "auto_features" 4
.IX Item "auto_features"
[version 0.26]
.Sp
This parameter supports the setting of features (see
\&\*(L"feature($name)\*(R") automatically based on a set of prerequisites.  For
instance, for a module that could optionally use either MySQL or
PostgreSQL databases, you might use \f(CW\*(C`auto_features\*(C'\fR like this:
.Sp
.Vb 10
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     auto_features => {
\&       pg_support    => {
\&                         description => "Interface with Postgres databases",
\&                         requires    => { \*(AqDBD::Pg\*(Aq => 23.3,
\&                                          \*(AqDateTime::Format::Pg\*(Aq => 0 },
\&                        },
\&       mysql_support => {
\&                         description => "Interface with MySQL databases",
\&                         requires    => { \*(AqDBD::mysql\*(Aq => 17.9,
\&                                          \*(AqDateTime::Format::MySQL\*(Aq => 0 },
\&                        },
\&     }
\&    );
.Ve
.Sp
For each feature named, the required prerequisites will be checked, and
if there are no failures, the feature will be enabled (set to \f(CW1\fR).
Otherwise the failures will be displayed to the user and the feature
will be disabled (set to \f(CW0\fR).
.Sp
See the documentation for \*(L"requires\*(R" for the details of how
requirements can be specified.
.IP "autosplit" 4
.IX Item "autosplit"
[version 0.04]
.Sp
An optional \f(CW\*(C`autosplit\*(C'\fR argument specifies a file which should be run
through the \fIAutoSplit::autosplit()\fR function.
If multiple files should be split, the argument may be given as an
array of the files to split.
.Sp
In general I don't consider autosplitting a great idea, because it's
not always clear that autosplitting achieves its intended performance
benefits.  It may even harm performance in environments like mod_perl,
where as much as possible of a module's code should be loaded during
startup.
.IP "build_class" 4
.IX Item "build_class"
[version 0.28]
.Sp
The Module::Build class or subclass to use in the build script.
Defaults to \*(L"Module::Build\*(R" or the class name passed to or created by
a call to \*(L"\fIsubclass()\fR\*(R".  This property is useful if you're
writing a custom Module::Build subclass and have a bootstrapping
problem\*(--that is, your subclass requires modules that may not be
installed when \f(CW\*(C`perl Build.PL\*(C'\fR is executed, but you've listed in
\&\*(L"build_requires\*(R" so that they should be available when \f(CW\*(C`./Build\*(C'\fR is
executed.
.IP "build_requires" 4
.IX Item "build_requires"
[version 0.07]
.Sp
Modules listed in this section are necessary to build and install the
given module, but are not necessary for regular usage of it.  This is
actually an important distinction \- it allows for tighter control over
the body of installed modules, and facilitates correct dependency
checking on binary/packaged distributions of the module.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\s0\*(R" in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_packlist" 4
.IX Item "create_packlist"
[version 0.28]
.Sp
If true, this parameter tells Module::Build to create a \fI.packlist\fR
file during the \f(CW\*(C`install\*(C'\fR action, just like \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR does.
The file is created in a subdirectory of the \f(CW\*(C`arch\*(C'\fR installation
location.  It is used by some other tools (\s-1CPAN\s0, \s-1CPANPLUS\s0, etc.) for
determining what files are part of an install.
.Sp
The default value is true.  This parameter was introduced in
Module::Build version 0.2609; previously no packlists were ever
created by Module::Build.
.IP "c_source" 4
.IX Item "c_source"
[version 0.04]
.Sp
An optional \f(CW\*(C`c_source\*(C'\fR argument specifies a directory which contains
C source files that the rest of the build may depend on.  Any \f(CW\*(C`.c\*(C'\fR
files in the directory will be compiled to object files.  The
directory will be added to the search path during the compilation and
linking phases of any C or \s-1XS\s0 files.
.Sp
[version 0.3604]
.Sp
A list of directories can be supplied using an anonymous array
reference of strings.
.IP "conflicts" 4
.IX Item "conflicts"
[version 0.07]
.Sp
Modules listed in this section conflict in some serious way with the
given module.  \f(CW\*(C`Module::Build\*(C'\fR (or some higher-level tool) will
refuse to install the given module if the given module/version is also
installed.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\s0\*(R" in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_license" 4
.IX Item "create_license"
[version 0.31]
.Sp
This parameter tells Module::Build to automatically create a
\&\fI\s-1LICENSE\s0\fR file at the top level of your distribution, containing the
full text of the author's chosen license.  This requires
\&\f(CW\*(C`Software::License\*(C'\fR on the author's machine, and further requires
that the \f(CW\*(C`license\*(C'\fR parameter specifies a license that it knows about.
.IP "create_makefile_pl" 4
.IX Item "create_makefile_pl"
[version 0.19]
.Sp
This parameter lets you use \f(CW\*(C`Module::Build::Compat\*(C'\fR during the
\&\f(CW\*(C`distdir\*(C'\fR (or \f(CW\*(C`dist\*(C'\fR) action to automatically create a Makefile.PL
for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The parameter's value
should be one of the styles named in the Module::Build::Compat
documentation.
.IP "create_readme" 4
.IX Item "create_readme"
[version 0.22]
.Sp
This parameter tells Module::Build to automatically create a \fI\s-1README\s0\fR
file at the top level of your distribution.  Currently it will simply
use \f(CW\*(C`Pod::Text\*(C'\fR (or \f(CW\*(C`Pod::Readme\*(C'\fR if it's installed) on the file
indicated by \f(CW\*(C`dist_version_from\*(C'\fR and put the result in the \fI\s-1README\s0\fR
file.  This is by no means the only recommended style for writing a
\&\fI\s-1README\s0\fR, but it seems to be one common one used on the \s-1CPAN\s0.
.Sp
If you generate a \fI\s-1README\s0\fR in this way, it's probably a good idea to
create a separate \fI\s-1INSTALL\s0\fR file if that information isn't in the
generated \fI\s-1README\s0\fR.
.IP "dist_abstract" 4
.IX Item "dist_abstract"
[version 0.20]
.Sp
This should be a short description of the distribution.  This is used when
generating metadata for \fI\s-1META\s0.yml\fR and \s-1PPD\s0 files.  If it is not given
then \f(CW\*(C`Module::Build\*(C'\fR looks in the \s-1POD\s0 of the module from which it gets
the distribution's version.  If it finds a \s-1POD\s0 section marked \*(L"=head1
\&\s-1NAME\s0\*(R", then it looks for the first line matching \f(CW\*(C`\es+\-\es+(.+)\*(C'\fR,
and uses the captured text as the abstract.
.IP "dist_author" 4
.IX Item "dist_author"
[version 0.20]
.Sp
This should be something like \*(L"John Doe <jdoe@example.com>\*(R", or if
there are multiple authors, an anonymous array of strings may be
specified.  This is used when generating metadata for \fI\s-1META\s0.yml\fR and
\&\s-1PPD\s0 files.  If this is not specified, then \f(CW\*(C`Module::Build\*(C'\fR looks at
the module from which it gets the distribution's version.  If it finds
a \s-1POD\s0 section marked \*(L"=head1 \s-1AUTHOR\s0\*(R", then it uses the contents of
this section.
.IP "dist_name" 4
.IX Item "dist_name"
[version 0.11]
.Sp
Specifies the name for this distribution.  Most authors won't need to
set this directly, they can use \f(CW\*(C`module_name\*(C'\fR to set \f(CW\*(C`dist_name\*(C'\fR to
a reasonable default.  However, some agglomerative distributions like
\&\f(CW\*(C`libwww\-perl\*(C'\fR or \f(CW\*(C`bioperl\*(C'\fR have names that don't correspond directly
to a module name, so \f(CW\*(C`dist_name\*(C'\fR can be set independently.
.IP "dist_suffix" 4
.IX Item "dist_suffix"
[version 0.37]
.Sp
Specifies an optional suffix to include after the version number
in the distribution directory (and tarball) name.  The only suffix
currently recognized by \s-1PAUSE\s0 is '\s-1TRIAL\s0', which indicates that the
distribution should not be indexed.  For example:
.Sp
.Vb 1
\&  Foo\-Bar\-1.23\-TRIAL.tar.gz
.Ve
.Sp
This will automatically do the \*(L"right thing\*(R" depending on \f(CW\*(C`dist_version\*(C'\fR and
\&\f(CW\*(C`release_status\*(C'\fR.  When \f(CW\*(C`dist_version\*(C'\fR does not have an underscore and
\&\f(CW\*(C`release_status\*(C'\fR is not 'stable', then \f(CW\*(C`dist_suffix\*(C'\fR will default to '\s-1TRIAL\s0'.
Otherwise it will default to the empty string, disabling the suffix.
.Sp
In general, authors should only set this if they \fBmust\fR override the default
behavior for some particular purpose.
.IP "dist_version" 4
.IX Item "dist_version"
[version 0.11]
.Sp
Specifies a version number for the distribution.  See \*(L"module_name\*(R"
or \*(L"dist_version_from\*(R" for ways to have this set automatically from a
\&\f(CW$VERSION\fR variable in a module.  One way or another, a version
number needs to be set.
.IP "dist_version_from" 4
.IX Item "dist_version_from"
[version 0.11]
.Sp
Specifies a file to look for the distribution version in.  Most
authors won't need to set this directly, they can use \*(L"module_name\*(R"
to set it to a reasonable default.
.Sp
The version is extracted from the specified file according to the same
rules as ExtUtils::MakeMaker and \f(CW\*(C`CPAN.pm\*(C'\fR.  It involves finding
the first line that matches the regular expression
.Sp
.Vb 1
\&   /([\e$*])(([\ew\e:\e\*(Aq]*)\ebVERSION)\eb.*\e=/
.Ve
.Sp
\&\fIeval()\fR\-ing that line, then checking the value of the \f(CW$VERSION\fR
variable.  Quite ugly, really, but all the modules on \s-1CPAN\s0 depend on
this process, so there's no real opportunity to change to something
better.
.Sp
If the target file of \*(L"dist_version_from\*(R" contains more than one package
declaration, the version returned will be the one matching the configured
\&\*(L"module_name\*(R".
.IP "dynamic_config" 4
.IX Item "dynamic_config"
[version 0.07]
.Sp
A boolean flag indicating whether the \fIBuild.PL\fR file must be
executed, or whether this module can be built, tested and installed
solely from consulting its metadata file.  The main reason to set this
to a true value is that your module performs some dynamic
configuration as part of its build/install process.  If the flag is
omitted, the \fI\s-1META\s0.yml\fR spec says that installation tools should
treat it as 1 (true), because this is a safer way to behave.
.Sp
Currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually do anything with this flag
\&\- it's up to higher-level tools like \f(CW\*(C`CPAN.pm\*(C'\fR to do something useful
with it.  It can potentially bring lots of security, packaging, and
convenience improvements.
.IP "extra_compiler_flags" 4
.IX Item "extra_compiler_flags"
.PD 0
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
.PD
[version 0.19]
.Sp
These parameters can contain array references (or strings, in which
case they will be split into arrays) to pass through to the compiler
and linker phases when compiling/linking C code.  For example, to tell
the compiler that your code is \*(C+, you might do:
.Sp
.Vb 5
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     extra_compiler_flags => [\*(Aq\-x\*(Aq, \*(Aqc++\*(Aq],
\&    );
.Ve
.Sp
To link your \s-1XS\s0 code against glib you might write something like:
.Sp
.Vb 7
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     dynamic_config       => 1,
\&     extra_compiler_flags => scalar \`glib\-config \-\-cflags\`,
\&     extra_linker_flags   => scalar \`glib\-config \-\-libs\`,
\&    );
.Ve
.IP "get_options" 4
.IX Item "get_options"
[version 0.26]
.Sp
You can pass arbitrary command line options to \fIBuild.PL\fR or
\&\fIBuild\fR, and they will be stored in the Module::Build object and can
be accessed via the \*(L"\fIargs()\fR\*(R" method.  However, sometimes you want
more flexibility out of your argument processing than this allows.  In
such cases, use the \f(CW\*(C`get_options\*(C'\fR parameter to pass in a hash
reference of argument specifications, and the list of arguments to
\&\fIBuild.PL\fR or \fIBuild\fR will be processed according to those
specifications before they're passed on to \f(CW\*(C`Module::Build\*(C'\fR's own
argument processing.
.Sp
The supported option specification hash keys are:
.RS 4
.IP "type" 4
.IX Item "type"
The type of option.  The types are those supported by Getopt::Long; consult
its documentation for a complete list.  Typical types are \f(CW\*(C`=s\*(C'\fR for strings,
\&\f(CW\*(C`+\*(C'\fR for additive options, and \f(CW\*(C`!\*(C'\fR for negatable options.  If the
type is not specified, it will be considered a boolean, i.e. no
argument is taken and a value of 1 will be assigned when the option is
encountered.
.IP "store" 4
.IX Item "store"
A reference to a scalar in which to store the value passed to the option.
If not specified, the value will be stored under the option name in the
hash returned by the \f(CW\*(C`args()\*(C'\fR method.
.IP "default" 4
.IX Item "default"
A default value for the option.  If no default value is specified and no option
is passed, then the option key will not exist in the hash returned by
\&\f(CW\*(C`args()\*(C'\fR.
.RE
.RS 4
.Sp
You can combine references to your own variables or subroutines with
unreferenced specifications, for which the result will also be stored in the
hash returned by \f(CW\*(C`args()\*(C'\fR.  For example:
.Sp
.Vb 10
\&  my $loud = 0;
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     get_options => {
\&                     Loud =>     { store => \e$loud },
\&                     Dbd  =>     { type  => \*(Aq=s\*(Aq   },
\&                     Quantity => { type  => \*(Aq+\*(Aq    },
\&                    }
\&    );
\&
\&  print STDERR "HEY, ARE YOU LISTENING??\en" if $loud;
\&  print "We\*(Aqll use the ", $build\->args(\*(AqDbd\*(Aq), " DBI driver\en";
\&  print "Are you sure you want that many?\en"
\&    if $build\->args(\*(AqQuantity\*(Aq) > 2;
.Ve
.Sp
The arguments for such a specification can be called like so:
.Sp
.Vb 1
\&  perl Build.PL \-\-Loud \-\-Dbd=DBD::pg \-\-Quantity \-\-Quantity \-\-Quantity
.Ve
.Sp
\&\fB\s-1WARNING:\s0\fR Any option specifications that conflict with Module::Build's own
options (defined by its properties) will throw an exception.  Use capitalized
option names to avoid unintended conflicts with future Module::Build options.
.Sp
Consult the Getopt::Long documentation for details on its usage.
.RE
.IP "include_dirs" 4
.IX Item "include_dirs"
[version 0.24]
.Sp
Specifies any additional directories in which to search for C header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.IP "install_path" 4
.IX Item "install_path"
[version 0.19]
.Sp
You can set paths for individual installable elements by using the
\&\f(CW\*(C`install_path\*(C'\fR parameter:
.Sp
.Vb 8
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     install_path => {
\&                      lib  => \*(Aq/foo/lib\*(Aq,
\&                      arch => \*(Aq/foo/lib/arch\*(Aq,
\&                     }
\&    );
.Ve
.IP "installdirs" 4
.IX Item "installdirs"
[version 0.19]
.Sp
Determines where files are installed within the normal perl hierarchy
as determined by \fIConfig.pm\fR.  Valid values are: \f(CW\*(C`core\*(C'\fR, \f(CW\*(C`site\*(C'\fR,
\&\f(CW\*(C`vendor\*(C'\fR.  The default is \f(CW\*(C`site\*(C'\fR.  See
\&\*(L"\s-1INSTALL\s0 \s-1PATHS\s0\*(R" in Module::Build
.IP "license" 4
.IX Item "license"
[version 0.07]
.Sp
Specifies the licensing terms of your distribution.
.Sp
As of Module::Build version 0.36_14, you may use a Software::License
subclass name (e.g. 'Apache_2_0') instead of one of the keys below.
.Sp
The legacy list of valid license values include:
.RS 4
.IP "apache" 4
.IX Item "apache"
The distribution is licensed under the Apache License, Version 2.0
(http://apache.org/licenses/LICENSE\-2.0 <http://apache.org/licenses/LICENSE-2.0>).
.IP "apache_1_1" 4
.IX Item "apache_1_1"
The distribution is licensed under the Apache Software License, Version 1.1
(http://apache.org/licenses/LICENSE\-1.1 <http://apache.org/licenses/LICENSE-1.1>).
.IP "artistic" 4
.IX Item "artistic"
The distribution is licensed under the Artistic License, as specified
by the \fIArtistic\fR file in the standard Perl distribution.
.IP "artistic_2" 4
.IX Item "artistic_2"
The distribution is licensed under the Artistic 2.0 License
(http://opensource.org/licenses/artistic\-license\-2.0.php <http://opensource.org/licenses/artistic-license-2.0.php>.)
.IP "bsd" 4
.IX Item "bsd"
The distribution is licensed under the \s-1BSD\s0 License
(http://www.opensource.org/licenses/bsd\-license.php <http://www.opensource.org/licenses/bsd-license.php>).
.IP "gpl" 4
.IX Item "gpl"
The distribution is licensed under the terms of the \s-1GNU\s0 General
Public License (http://www.opensource.org/licenses/gpl\-license.php <http://www.opensource.org/licenses/gpl-license.php>).
.IP "lgpl" 4
.IX Item "lgpl"
The distribution is licensed under the terms of the \s-1GNU\s0 Lesser
General Public License
(http://www.opensource.org/licenses/lgpl\-license.php <http://www.opensource.org/licenses/lgpl-license.php>).
.IP "mit" 4
.IX Item "mit"
The distribution is licensed under the \s-1MIT\s0 License
(http://opensource.org/licenses/mit\-license.php <http://opensource.org/licenses/mit-license.php>).
.IP "mozilla" 4
.IX Item "mozilla"
The distribution is licensed under the Mozilla Public
License.  (<http://opensource.org/licenses/mozilla1.0.php> or
<http://opensource.org/licenses/mozilla1.1.php>)
.IP "open_source" 4
.IX Item "open_source"
The distribution is licensed under some other Open Source
Initiative-approved license listed at
<http://www.opensource.org/licenses/>.
.IP "perl" 4
.IX Item "perl"
The distribution may be copied and redistributed under the same terms
as Perl itself (this is by far the most common licensing option for
modules on \s-1CPAN\s0).  This is a dual license, in which the user may
choose between either the \s-1GPL\s0 or the Artistic license.
.IP "restrictive" 4
.IX Item "restrictive"
The distribution may not be redistributed without special permission
from the author and/or copyright holder.
.IP "unrestricted" 4
.IX Item "unrestricted"
The distribution is licensed under a license that is \fBnot\fR approved
by www.opensource.org but that allows distribution without
restrictions.
.RE
.RS 4
.Sp
Note that you must still include the terms of your license in your
code and documentation \- this field only sets the information that is included
in distribution metadata to let automated tools figure out your
licensing restrictions.  Humans still need something to read.  If you
choose to provide this field, you should make sure that you keep it in
sync with your written documentation if you ever change your licensing
terms.
.Sp
You may also use a license type of \f(CW\*(C`unknown\*(C'\fR if you don't wish to
specify your terms in the metadata.
.Sp
Also see the \f(CW\*(C`create_license\*(C'\fR parameter.
.RE
.IP "meta_add" 4
.IX Item "meta_add"
[version 0.28]
.Sp
A hash of key/value pairs that should be added to the \fI\s-1META\s0.yml\fR file
during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the same
names will be overridden.
.Sp
See the \*(L"\s-1MODULE\s0 \s-1METADATA\s0\*(R" section for details.
.IP "meta_merge" 4
.IX Item "meta_merge"
[version 0.28]
.Sp
A hash of key/value pairs that should be merged into the \fI\s-1META\s0.yml\fR
file during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the
same names will be overridden.
.Sp
The only difference between \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR is their
behavior on hash-valued and array-valued entries: \f(CW\*(C`meta_add\*(C'\fR will
completely blow away the existing hash or array value, but
\&\f(CW\*(C`meta_merge\*(C'\fR will merge the supplied data into the existing hash or
array value.
.Sp
See the \*(L"\s-1MODULE\s0 \s-1METADATA\s0\*(R" section for details.
.IP "module_name" 4
.IX Item "module_name"
[version 0.03]
.Sp
The \f(CW\*(C`module_name\*(C'\fR is a shortcut for setting default values of
\&\f(CW\*(C`dist_name\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR, reflecting the fact that the
majority of \s-1CPAN\s0 distributions are centered around one \*(L"main\*(R" module.
For instance, if you set \f(CW\*(C`module_name\*(C'\fR to \f(CW\*(C`Foo::Bar\*(C'\fR, then
\&\f(CW\*(C`dist_name\*(C'\fR will default to \f(CW\*(C`Foo\-Bar\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR will
default to \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.  \f(CW\*(C`dist_version_from\*(C'\fR will in turn be
used to set \f(CW\*(C`dist_version\*(C'\fR.
.Sp
Setting \f(CW\*(C`module_name\*(C'\fR won't override a \f(CW\*(C`dist_*\*(C'\fR parameter you
specify explicitly.
.IP "needs_compiler" 4
.IX Item "needs_compiler"
[version 0.36]
.Sp
The \f(CW\*(C`needs_compiler\*(C'\fR parameter indicates whether a compiler is required to
build the distsribution.  The default is false, unless \s-1XS\s0 files are found or
the \f(CW\*(C`c_source\*(C'\fR parameter is set, in which case it is true.  If true,
ExtUtils::CBuilder is automatically added to \f(CW\*(C`build_requires\*(C'\fR if needed.
.Sp
For a distribution where a compiler is \fIoptional\fR, e.g. a dual XS/pure\-Perl
distribution, \f(CW\*(C`needs_compiler\*(C'\fR should explicitly be set to a false value.
.IP "PL_files" 4
.IX Item "PL_files"
[version 0.06]
.Sp
An optional parameter specifying a set of \f(CW\*(C`.PL\*(C'\fR files in your
distribution.  These will be run as Perl scripts prior to processing
the rest of the files in your distribution with the name of the file
they're generating as an argument.  They are usually used as templates
for creating other files dynamically, so that a file like
\&\f(CW\*(C`lib/Foo/Bar.pm.PL\*(C'\fR might create the file \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.
.Sp
The files are specified with the \f(CW\*(C`.PL\*(C'\fR files as hash keys, and the
file(s) they generate as hash values, like so:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     PL_files => { \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the path specifications are \fIalways\fR given in Unix-like
format, not in the style of the local system.
.Sp
If your \f(CW\*(C`.PL\*(C'\fR scripts don't create any files, or if they create files
with unexpected names, or even if they create multiple files, you can
indicate that so that Module::Build can properly handle these created
files:
.Sp
.Vb 5
\&  PL_files => {
\&               \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq,
\&               \*(Aqlib/something.PL\*(Aq  => [\*(Aq/lib/something\*(Aq, \*(Aq/lib/else\*(Aq],
\&               \*(Aqlib/funny.PL\*(Aq      => [],
\&              }
.Ve
.Sp
Here's an example of a simple \s-1PL\s0 file.
.Sp
.Vb 2
\&    my $output_file = shift;
\&    open my $fh, ">", $output_file or die "Can\*(Aqt open $output_file: $!";
\&
\&    print $fh <<\*(AqEND\*(Aq;
\&    #!/usr/bin/perl
\&
\&    print "Hello, world!\en";
\&    END
.Ve
.Sp
\&\s-1PL\s0 files are not installed by default, so its safe to put them in
\&\fIlib/\fR and \fIbin/\fR.
.IP "pm_files" 4
.IX Item "pm_files"
[version 0.19]
.Sp
An optional parameter specifying the set of \f(CW\*(C`.pm\*(C'\fR files in this
distribution, specified as a hash reference whose keys are the files'
locations in the distributions, and whose values are their logical
locations based on their package name, i.e. where they would be found
in a \*(L"normal\*(R" Module::Build\-style distribution.  This parameter is
mainly intended to support alternative layouts of files.
.Sp
For instance, if you have an old-style \f(CW\*(C`MakeMaker\*(C'\fR distribution for a
module called \f(CW\*(C`Foo::Bar\*(C'\fR and a \fIBar.pm\fR file at the top level of the
distribution, you could specify your layout in your \f(CW\*(C`Build.PL\*(C'\fR like
this:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     pm_files => { \*(AqBar.pm\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the values should include \f(CW\*(C`lib/\*(C'\fR, because this is where
they would be found in a \*(L"normal\*(R" Module::Build\-style distribution.
.Sp
Note also that the path specifications are \fIalways\fR given in
Unix-like format, not in the style of the local system.
.IP "pod_files" 4
.IX Item "pod_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.pod\*(C'\fR
files in your distribution.
.IP "recommends" 4
.IX Item "recommends"
[version 0.08]
.Sp
This is just like the \*(L"requires\*(R" argument, except that modules listed
in this section aren't essential, just a good idea.  We'll just print
a friendly warning if one of these modules aren't found, but we'll
continue running.
.Sp
If a module is recommended but not required, all tests should still
pass if the module isn't installed.  This may mean that some tests
may be skipped if recommended dependencies aren't present.
.Sp
Automated tools like \s-1CPAN\s0.pm should inform the user when recommended
modules aren't installed, and it should offer to install them if it
wants to be helpful.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\s0\*(R" in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "recursive_test_files" 4
.IX Item "recursive_test_files"
[version 0.28]
.Sp
Normally, \f(CW\*(C`Module::Build\*(C'\fR does not search subdirectories when looking
for tests to run. When this options is set it will search recursively
in all subdirectories of the standard 't' test directory.
.IP "release_status" 4
.IX Item "release_status"
[version 0.37]
.Sp
The \s-1CPAN\s0 Meta Spec version 2 adds \f(CW\*(C`release_status\*(C'\fR to allow authors
to specify how a distribution should be indexed.  Consistent with the
spec, this parameter can only have one three values: 'stable',
\&'testing' or 'unstable'.
.Sp
Unless explicitly set by the author, \f(CW\*(C`release_status\*(C'\fR will default
to 'stable' unless \f(CW\*(C`dist_version\*(C'\fR contains an underscore, in which
case it will default to 'testing'.
.Sp
It is an error to specify a \f(CW\*(C`release_status\*(C'\fR of 'stable' when
\&\f(CW\*(C`dist_version\*(C'\fR contains an underscore character.
.IP "requires" 4
.IX Item "requires"
[version 0.07]
.Sp
An optional \f(CW\*(C`requires\*(C'\fR argument specifies any module prerequisites
that the current module depends on.
.Sp
One note: currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually \fIrequire\fR the
user to have dependencies installed, it just strongly urges.  In the
future we may require it.  There's also a \*(L"recommends\*(R" section for
things that aren't absolutely required.
.Sp
Automated tools like \s-1CPAN\s0.pm should refuse to install a module if one
of its dependencies isn't satisfied, unless a \*(L"force\*(R" command is given
by the user.  If the tools are helpful, they should also offer to
install the dependencies.
.Sp
A synonym for \f(CW\*(C`requires\*(C'\fR is \f(CW\*(C`prereq\*(C'\fR, to help succour people
transitioning from \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The \f(CW\*(C`requires\*(C'\fR term is
preferred, but the \f(CW\*(C`prereq\*(C'\fR term will remain valid in future
distributions.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\s0\*(R" in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "script_files" 4
.IX Item "script_files"
[version 0.18]
.Sp
An optional parameter specifying a set of files that should be
installed as executable Perl scripts when the module is installed.
May be given as an array reference of the files, as a hash reference
whose keys are the files (and whose values will currently be ignored),
as a string giving the name of a directory in which to find scripts,
or as a string giving the name of a single script file.
.Sp
The default is to install any scripts found in a \fIbin\fR directory at
the top level of the distribution, minus any keys of PL_files.
.Sp
For backward compatibility, you may use the parameter \f(CW\*(C`scripts\*(C'\fR
instead of \f(CW\*(C`script_files\*(C'\fR.  Please consider this usage deprecated,
though it will continue to exist for several version releases.
.IP "share_dir" 4
.IX Item "share_dir"
[version 0.36]
.Sp
An optional parameter specifying directories of static data files to
be installed as read-only files for use with File::ShareDir.  The
\&\f(CW\*(C`share_dir\*(C'\fR property supports both distribution-level and
module-level share files.
.Sp
The simplest use of \f(CW\*(C`share_dir\*(C'\fR is to set it to a directory name or an
arrayref of directory names containing files to be installed in the
distribution-level share directory.
.Sp
.Vb 1
\&  share_dir => \*(Aqshare\*(Aq
.Ve
.Sp
Alternatively, if \f(CW\*(C`share_dir\*(C'\fR is a hashref, it may have \f(CW\*(C`dist\*(C'\fR or
\&\f(CW\*(C`module\*(C'\fR keys providing full flexibility in defining how share
directories should be installed.
.Sp
.Vb 7
\&  share_dir => {
\&    dist => [ \*(Aqexamples\*(Aq, \*(Aqmore_examples\*(Aq ],
\&    module => {
\&      Foo::Templates => [\*(Aqshare/html\*(Aq, \*(Aqshare/text\*(Aq],
\&      Foo::Config    => \*(Aqshare/config\*(Aq,
\&    }
\&  }
.Ve
.Sp
If \f(CW\*(C`share_dir\*(C'\fR is set, then File::ShareDir will automatically be added
to the \f(CW\*(C`requires\*(C'\fR hash.
.IP "sign" 4
.IX Item "sign"
[version 0.16]
.Sp
If a true value is specified for this parameter, Module::Signature
will be used (via the 'distsign' action) to create a \s-1SIGNATURE\s0 file
for your distribution during the 'distdir' action, and to add the
\&\s-1SIGNATURE\s0 file to the \s-1MANIFEST\s0 (therefore, don't add it yourself).
.Sp
The default value is false.  In the future, the default may change to
true if you have \f(CW\*(C`Module::Signature\*(C'\fR installed on your system.
.IP "test_files" 4
.IX Item "test_files"
[version 0.23]
.Sp
An optional parameter specifying a set of files that should be used as
\&\f(CW\*(C`Test::Harness\*(C'\fR\-style regression tests to be run during the \f(CW\*(C`test\*(C'\fR
action.  May be given as an array reference of the files, or as a hash
reference whose keys are the files (and whose values will currently be
ignored).  If the argument is given as a single string (not in an
array reference), that string will be treated as a \f(CW\*(C`glob()\*(C'\fR pattern
specifying the files to use.
.Sp
The default is to look for a \fItest.pl\fR script in the top-level
directory of the distribution, and any files matching the glob pattern
\&\f(CW\*(C`*.t\*(C'\fR in the \fIt/\fR subdirectory.  If the \f(CW\*(C`recursive_test_files\*(C'\fR
property is true, then the \f(CW\*(C`t/\*(C'\fR directory will be scanned recursively
for \f(CW\*(C`*.t\*(C'\fR files.
.IP "use_tap_harness" 4
.IX Item "use_tap_harness"
[version 0.2808_03]
.Sp
An optional parameter indicating whether or not to use TAP::Harness for
testing rather than Test::Harness. Defaults to false. If set to true, you must
therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R". Implicitly set to a true value if \f(CW\*(C`tap_harness_args\*(C'\fR is
specified.
.IP "tap_harness_args" 4
.IX Item "tap_harness_args"
[version 0.2808_03]
.Sp
An optional parameter specifying parameters to be passed to TAP::Harness when
running tests. Must be given as a hash reference of parameters; see the
TAP::Harness documentation for details. Note that specifying
this parameter will implicitly set \f(CW\*(C`use_tap_harness\*(C'\fR to a true value. You
must therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R".
.IP "xs_files" 4
.IX Item "xs_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.xs\*(C'\fR
files in your distribution.
.RE
.RS 4
.RE
.IP "new_from_context(%args)" 4
.IX Item "new_from_context(%args)"
[version 0.28]
.Sp
When called from a directory containing a \fIBuild.PL\fR script (in other words,
the base directory of a distribution), this method will run the \fIBuild.PL\fR and
call \f(CW\*(C`resume()\*(C'\fR to return the resulting \f(CW\*(C`Module::Build\*(C'\fR object to the caller.
Any key-value arguments given to \f(CW\*(C`new_from_context()\*(C'\fR are essentially like
command line arguments given to the \fIBuild.PL\fR script, so for example you
could pass \f(CW\*(C`verbose => 1\*(C'\fR to this method to turn on verbosity.
.IP "\fIresume()\fR" 4
.IX Item "resume()"
[version 0.03]
.Sp
You'll probably never call this method directly, it's only called from the
auto-generated \f(CW\*(C`Build\*(C'\fR script (and the \f(CW\*(C`new_from_context\*(C'\fR method).  The
\&\f(CW\*(C`new()\*(C'\fR method is only called once, when the user runs \f(CW\*(C`perl Build.PL\*(C'\fR.
Thereafter, when the user runs \f(CW\*(C`Build test\*(C'\fR or another action, the
\&\f(CW\*(C`Module::Build\*(C'\fR object is created using the \f(CW\*(C`resume()\*(C'\fR method to
re-instantiate with the settings given earlier to \f(CW\*(C`new()\*(C'\fR.
.IP "\fIsubclass()\fR" 4
.IX Item "subclass()"
[version 0.06]
.Sp
This creates a new \f(CW\*(C`Module::Build\*(C'\fR subclass on the fly, as described
in the \*(L"\s-1SUBCLASSING\s0\*(R" in Module::Build::Authoring section.  The caller
must provide either a \f(CW\*(C`class\*(C'\fR or \f(CW\*(C`code\*(C'\fR parameter, or both.  The
\&\f(CW\*(C`class\*(C'\fR parameter indicates the name to use for the new subclass, and
defaults to \f(CW\*(C`MyModuleBuilder\*(C'\fR.  The \f(CW\*(C`code\*(C'\fR parameter specifies Perl
code to use as the body of the subclass.
.IP "add_property" 4
.IX Item "add_property"
[version 0.31]
.Sp
.Vb 10
\&  package \*(AqMy::Build\*(Aq;
\&  use base \*(AqModule::Build\*(Aq;
\&  _\|_PACKAGE_\|_\->add_property( \*(Aqpedantic\*(Aq );
\&  _\|_PACKAGE_\|_\->add_property( answer => 42 );
\&  _\|_PACKAGE_\|_\->add_property(
\&     \*(Aqepoch\*(Aq,
\&      default => sub { time },
\&      check   => sub {
\&          return 1 if /^\ed+$/;
\&          shift\->property_error( "\*(Aq$_\*(Aq is not an epoch time" );
\&          return 0;
\&      },
\&  );
.Ve
.Sp
Adds a property to a Module::Build class. Properties are those attributes of a
Module::Build object which can be passed to the constructor and which have
accessors to get and set them. All of the core properties, such as
\&\f(CW\*(C`module_name\*(C'\fR and \f(CW\*(C`license\*(C'\fR, are defined using this class method.
.Sp
The first argument to \f(CW\*(C`add_property()\*(C'\fR is always the name of the property.
The second argument can be either a default value for the property, or a list
of key/value pairs. The supported keys are:
.RS 4
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
The default value. May optionally be specified as a code reference, in which
case the return value from the execution of the code reference will be used.
If you need the default to be a code reference, just use a code reference to
return it, e.g.:
.Sp
.Vb 1
\&      default => sub { sub { ... } },
.Ve
.ie n .IP """check""" 4
.el .IP "\f(CWcheck\fR" 4
.IX Item "check"
A code reference that checks that a value specified for the property is valid.
During the execution of the code reference, the new value will be included in
the \f(CW$_\fR variable. If the value is correct, the \f(CW\*(C`check\*(C'\fR code reference
should return true. If the value is not correct, it sends an error message to
\&\f(CW\*(C`property_error()\*(C'\fR and returns false.
.RE
.RS 4
.Sp
When this method is called, a new property will be installed in the
Module::Build class, and an accessor will be built to allow the property to be
get or set on the build object.
.Sp
.Vb 2
\&  print $build\->pedantic, $/;
\&  $build\->pedantic(0);
.Ve
.Sp
If the default value is a hash reference, this generates a special-case
accessor method, wherein individual key/value pairs may be set or fetched:
.Sp
.Vb 3
\&  print "stuff{foo} is: ", $build\->stuff( \*(Aqfoo\*(Aq ), $/;
\&  $build\->stuff( foo => \*(Aqbar\*(Aq );
\&  print $build\->stuff( \*(Aqfoo\*(Aq ), $/; # Outputs "bar"
.Ve
.Sp
Of course, you can still set the entire hash reference at once, as well:
.Sp
.Vb 1
\&  $build\->stuff( { foo => \*(Aqbar\*(Aq, baz => \*(Aqyo\*(Aq } );
.Ve
.Sp
In either case, if a \f(CW\*(C`check\*(C'\fR has been specified for the property, it will be
applied to the entire hash. So the check code reference should look something
like:
.Sp
.Vb 5
\&      check => sub {
\&            return 1 if defined $_ && exists $_\->{foo};
\&            shift\->property_error(qq{Property "stuff" needs "foo"});
\&            return 0;
\&      },
.Ve
.RE
.IP "property_error" 4
.IX Item "property_error"
[version 0.31]
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "add_build_element($type)" 4
.IX Item "add_build_element($type)"
[version 0.26]
.Sp
Adds a new type of entry to the build process.  Accepts a single
string specifying its type-name.  There must also be a method defined
to process things of that type, e.g. if you add a build element called
\&\f(CW\*(Aqfoo\*(Aq\fR, then you must also define a method called
\&\f(CW\*(C`process_foo_files()\*(C'\fR.
.Sp
See also
\&\*(L"Adding new file types to the build process\*(R" in Module::Build::Cookbook.
.IP "add_to_cleanup(@files)" 4
.IX Item "add_to_cleanup(@files)"
[version 0.03]
.Sp
You may call \f(CW\*(C`$self\->add_to_cleanup(@patterns)\*(C'\fR to tell
\&\f(CW\*(C`Module::Build\*(C'\fR that certain files should be removed when the user
performs the \f(CW\*(C`Build clean\*(C'\fR action.  The arguments to the method are
patterns suitable for passing to Perl's \f(CW\*(C`glob()\*(C'\fR function, specified
in either Unix format or the current machine's native format.  It's
usually convenient to use Unix format when you hard-code the filenames
(e.g. in \fIBuild.PL\fR) and the native format when the names are
programmatically generated (e.g. in a testing script).
.Sp
I decided to provide a dynamic method of the \f(CW$build\fR object, rather
than just use a static list of files named in the \fIBuild.PL\fR, because
these static lists can get difficult to manage.  I usually prefer to
keep the responsibility for registering temporary files close to the
code that creates them.
.IP "\fIargs()\fR" 4
.IX Item "args()"
[version 0.26]
.Sp
.Vb 4
\&  my $args_href = $build\->args;
\&  my %args = $build\->args;
\&  my $arg_value = $build\->args($key);
\&  $build\->args($key, $value);
.Ve
.Sp
This method is the preferred interface for retrieving the arguments passed via
command line options to \fIBuild.PL\fR or \fIBuild\fR, minus the Module-Build
specific options.
.Sp
When called in in a scalar context with no arguments, this method returns a
reference to the hash storing all of the arguments; in an array context, it
returns the hash itself.  When passed a single argument, it returns the value
stored in the args hash for that option key.  When called with two arguments,
the second argument is assigned to the args hash under the key passed as the
first argument.
.ie n .IP "autosplit_file($from, $to)" 4
.el .IP "autosplit_file($from, \f(CW$to\fR)" 4
.IX Item "autosplit_file($from, $to)"
[version 0.28]
.Sp
Invokes the AutoSplit module on the \f(CW$from\fR file, sending the
output to the \f(CW\*(C`lib/auto\*(C'\fR directory inside \f(CW$to\fR.  \f(CW$to\fR is
typically the \f(CW\*(C`blib/\*(C'\fR directory.
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
[version 0.14]
.Sp
Returns a string containing the root-level directory of this build,
i.e. where the \f(CW\*(C`Build.PL\*(C'\fR script and the \f(CW\*(C`lib\*(C'\fR directory can be
found.  This is usually the same as the current working directory,
because the \f(CW\*(C`Build\*(C'\fR script will \f(CW\*(C`chdir()\*(C'\fR into this directory as
soon as it begins execution.
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`build_requires\*(C'\fR
prerequisites that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "can_action( $action )" 4
.el .IP "can_action( \f(CW$action\fR )" 4
.IX Item "can_action( $action )"
Returns a reference to the method that defines \f(CW$action\fR, or false
otherwise. This is handy for actions defined (or maybe not!) in subclasses.
.Sp
[version 0.32_xx]
.IP "\fIcbuilder()\fR" 4
.IX Item "cbuilder()"
[version 0.2809]
.Sp
Returns the internal ExtUtils::CBuilder object that can be used for
compiling & linking C code.  If no such object is available (e.g. if
the system has no compiler installed) an exception will be thrown.
.ie n .IP "check_installed_status($module, $version)" 4
.el .IP "check_installed_status($module, \f(CW$version\fR)" 4
.IX Item "check_installed_status($module, $version)"
[version 0.11]
.Sp
This method returns a hash reference indicating whether a version
dependency on a certain module is satisfied.  The \f(CW$module\fR argument
is given as a string like \f(CW"Data::Dumper"\fR or \f(CW"perl"\fR, and the
\&\f(CW$version\fR argument can take any of the forms described in \*(L"requires\*(R"
above.  This allows very fine-grained version checking.
.Sp
The returned hash reference has the following structure:
.Sp
.Vb 6
\&  {
\&   ok => $whether_the_dependency_is_satisfied,
\&   have => $version_already_installed,
\&   need => $version_requested, # Same as incoming $version argument
\&   message => $informative_error_message,
\&  }
.Ve
.Sp
If no version of \f(CW$module\fR is currently installed, the \f(CW\*(C`have\*(C'\fR value
will be the string \f(CW"<none>"\fR.  Otherwise the \f(CW\*(C`have\*(C'\fR value will
simply be the version of the installed module.  Note that this means
that if \f(CW$module\fR is installed but doesn't define a version number,
the \f(CW\*(C`have\*(C'\fR value will be \f(CW\*(C`undef\*(C'\fR \- this is why we don't use \f(CW\*(C`undef\*(C'\fR
for the case when \f(CW$module\fR isn't installed at all.
.Sp
This method may be called either as an object method
(\f(CW\*(C`$build\->check_installed_status($module, $version)\*(C'\fR)
or as a class method
(\f(CW\*(C`Module::Build\->check_installed_status($module, $version)\*(C'\fR).
.ie n .IP "check_installed_version($module, $version)" 4
.el .IP "check_installed_version($module, \f(CW$version\fR)" 4
.IX Item "check_installed_version($module, $version)"
[version 0.05]
.Sp
Like \fIcheck_installed_status()\fR,
but simply returns true or false depending on whether module
\&\f(CW$module\fR satisfies the dependency \f(CW$version\fR.
.Sp
If the check succeeds, the return value is the actual version of
\&\f(CW$module\fR installed on the system.  This allows you to do the
following:
.Sp
.Vb 6
\&  my $installed = $build\->check_installed_version(\*(AqDBI\*(Aq, \*(Aq1.15\*(Aq);
\&  if ($installed) {
\&    print "Congratulations, version $installed of DBI is installed.\en";
\&  } else {
\&    die "Sorry, you must install DBI.\en";
\&  }
.Ve
.Sp
If the check fails, we return false and set \f(CW$@\fR to an informative
error message.
.Sp
If \f(CW$version\fR is any non-true value (notably zero) and any version of
\&\f(CW$module\fR is installed, we return true.  In this case, if \f(CW$module\fR
doesn't define a version, or if its version is zero, we return the
special value \*(L"0 but true\*(R", which is numerically zero, but logically
true.
.Sp
In general you might prefer to use \f(CW\*(C`check_installed_status\*(C'\fR if you
need detailed information, or this method if you just need a yes/no
answer.
.ie n .IP "compare_versions($v1, $op, $v2)" 4
.el .IP "compare_versions($v1, \f(CW$op\fR, \f(CW$v2\fR)" 4
.IX Item "compare_versions($v1, $op, $v2)"
[version 0.28]
.Sp
Compares two module versions \f(CW$v1\fR and \f(CW$v2\fR using the operator
\&\f(CW$op\fR, which should be one of Perl's numeric operators like \f(CW\*(C`!=\*(C'\fR or
\&\f(CW\*(C`>=\*(C'\fR or the like.  We do at least a halfway-decent job of
handling versions that aren't strictly numeric, like \f(CW\*(C`0.27_02\*(C'\fR, but
exotic stuff will likely cause problems.
.Sp
In the future, the guts of this method might be replaced with a call
out to \f(CW\*(C`version.pm\*(C'\fR.
.IP "config($key)" 4
.IX Item "config($key)"
.PD 0
.ie n .IP "config($key, $value)" 4
.el .IP "config($key, \f(CW$value\fR)" 4
.IX Item "config($key, $value)"
.IP "\fIconfig()\fR [deprecated]" 4
.IX Item "config() [deprecated]"
.PD
[version 0.22]
.Sp
With a single argument \f(CW$key\fR, returns the value associated with that
key in the \f(CW\*(C`Config.pm\*(C'\fR hash, including any changes the author or user
has specified.
.Sp
With \f(CW$key\fR and \f(CW$value\fR arguments, sets the value for future
callers of \f(CW\*(C`config($key)\*(C'\fR.
.Sp
With no arguments, returns a hash reference containing all such
key-value pairs.  This usage is deprecated, though, because it's a
resource hog and violates encapsulation.
.IP "config_data($name)" 4
.IX Item "config_data($name)"
.PD 0
.ie n .IP "config_data($name => $value)" 4
.el .IP "config_data($name => \f(CW$value\fR)" 4
.IX Item "config_data($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns the value of the configuration
variable \f(CW$name\fR.  With two arguments, sets the given configuration
variable to the given value.  The value may be any Perl scalar that's
serializable with \f(CW\*(C`Data::Dumper\*(C'\fR.  For instance, if you write a
module that can use a MySQL or PostgreSQL back-end, you might create
configuration variables called \f(CW\*(C`mysql_connect\*(C'\fR and
\&\f(CW\*(C`postgres_connect\*(C'\fR, and set each to an array of connection parameters
for \f(CW\*(C`DBI\->connect()\*(C'\fR.
.Sp
Configuration values set in this way using the Module::Build object
will be available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->config($name)\*(C'\fR.
.Sp
The \fIfeature()\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING\s0 \s-1CONFIGURATION\s0 \s-1INFORMATION\s0\*(R" in Module::Build::Authoring.
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`conflicts\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "contains_pod($file) [deprecated]" 4
.IX Item "contains_pod($file) [deprecated]"
[version 0.20]
.Sp
[Deprecated] Please see Module::Build::ModuleInfo instead.
.Sp
Returns true if the given file appears to contain \s-1POD\s0 documentation.
Currently this checks whether the file has a line beginning with
\&'=pod', '=head', or '=item', but the exact semantics may change in the
future.
.IP "copy_if_modified(%parameters)" 4
.IX Item "copy_if_modified(%parameters)"
[version 0.19]
.Sp
Takes the file in the \f(CW\*(C`from\*(C'\fR parameter and copies it to the file in
the \f(CW\*(C`to\*(C'\fR parameter, or the directory in the \f(CW\*(C`to_dir\*(C'\fR parameter, if
the file has changed since it was last copied (or if it doesn't exist
in the new location).  By default the entire directory structure of
\&\f(CW\*(C`from\*(C'\fR will be copied into \f(CW\*(C`to_dir\*(C'\fR; an optional \f(CW\*(C`flatten\*(C'\fR
parameter will copy into \f(CW\*(C`to_dir\*(C'\fR without doing so.
.Sp
Returns the path to the destination file, or \f(CW\*(C`undef\*(C'\fR if nothing
needed to be copied.
.Sp
Any directories that need to be created in order to perform the
copying will be automatically created.
.Sp
The destination file is set to read-only. If the source file has the
executable bit set, then the destination file will be made executable.
.IP "\fIcreate_build_script()\fR" 4
.IX Item "create_build_script()"
[version 0.05]
.Sp
Creates an executable script called \f(CW\*(C`Build\*(C'\fR in the current directory
that will be used to execute further user actions.  This script is
roughly analogous (in function, not in form) to the Makefile created
by \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  This method also creates some temporary
data in a directory called \f(CW\*(C`_build/\*(C'\fR.  Both of these will be removed
when the \f(CW\*(C`realclean\*(C'\fR action is performed.
.Sp
Among the files created in \f(CW\*(C`_build/\*(C'\fR is a \fI_build/prereqs\fR file
containing the set of prerequisites for this distribution, as a hash
of hashes.  This file may be \f(CW\*(C`eval()\*(C'\fR\-ed to obtain the authoritative
set of prerequisites, which might be different from the contents of
\&\fI\s-1META\s0.yml\fR (because \fIBuild.PL\fR might have set them dynamically).
But fancy developers take heed: do not put any fancy custom runtime
code in the \fI_build/prereqs\fR file, leave it as a static declaration
containing only strings and numbers.  Similarly, do not alter the
structure of the internal \f(CW\*(C`$self\->{properties}{requires}\*(C'\fR (etc.)
data members, because that's where this data comes from.
.IP "\fIcurrent_action()\fR" 4
.IX Item "current_action()"
[version 0.28]
.Sp
Returns the name of the currently-running action, such as \*(L"build\*(R" or
\&\*(L"test\*(R".  This action is not necessarily the action that was originally
invoked by the user.  For example, if the user invoked the \*(L"test\*(R"
action, \fIcurrent_action()\fR would initially return \*(L"test\*(R".  However,
action \*(L"test\*(R" depends on action \*(L"code\*(R", so \fIcurrent_action()\fR will
return \*(L"code\*(R" while that dependency is being executed.  Once that
action has completed, \fIcurrent_action()\fR will again return \*(L"test\*(R".
.Sp
If you need to know the name of the original action invoked by the
user, see \*(L"\fIinvoked_action()\fR\*(R" below.
.IP "depends_on(@actions)" 4
.IX Item "depends_on(@actions)"
[version 0.28]
.Sp
Invokes the named action or list of actions in sequence.  Using this
method is preferred to calling the action explicitly because it
performs some internal record-keeping, and it ensures that the same
action is not invoked multiple times (note: in future versions of
Module::Build it's conceivable that this run-only-once mechanism will
be changed to something more intelligent).
.Sp
Note that the name of this method is something of a misnomer; it
should really be called something like
\&\f(CW\*(C`invoke_actions_unless_already_invoked()\*(C'\fR or something, but for
better or worse (perhaps better!) we were still thinking in
\&\f(CW\*(C`make\*(C'\fR\-like dependency terms when we created this method.
.Sp
See also \fIdispatch()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.ie n .IP "dir_contains($first_dir, $second_dir)" 4
.el .IP "dir_contains($first_dir, \f(CW$second_dir\fR)" 4
.IX Item "dir_contains($first_dir, $second_dir)"
[version 0.28]
.Sp
Returns true if the first directory logically contains the second
directory.  This is just a convenience function because \f(CW\*(C`File::Spec\*(C'\fR
doesn't really provide an easy way to figure this out (but
\&\f(CW\*(C`Path::Class\*(C'\fR does...).
.ie n .IP "dispatch($action, %args)" 4
.el .IP "dispatch($action, \f(CW%args\fR)" 4
.IX Item "dispatch($action, %args)"
[version 0.03]
.Sp
Invokes the build action \f(CW$action\fR.  Optionally, a list of options
and their values can be passed in.  This is equivalent to invoking an
action at the command line, passing in a list of options.
.Sp
Custom options that have not been registered must be passed in as a
hash reference in a key named \*(L"args\*(R":
.Sp
.Vb 1
\&  $build\->dispatch(\*(Aqfoo\*(Aq, verbose => 1, args => { my_option => \*(Aqvalue\*(Aq });
.Ve
.Sp
This method is intended to be used to programmatically invoke build
actions, e.g. by applications controlling Module::Build\-based builds
rather than by subclasses.
.Sp
See also \fIdepends_on()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.IP "\fIdist_dir()\fR" 4
.IX Item "dist_dir()"
[version 0.28]
.Sp
Returns the name of the directory that will be created during the
\&\f(CW\*(C`dist\*(C'\fR action.  The name is derived from the \f(CW\*(C`dist_name\*(C'\fR and
\&\f(CW\*(C`dist_version\*(C'\fR properties.
.IP "\fIdist_name()\fR" 4
.IX Item "dist_name()"
[version 0.21]
.Sp
Returns the name of the current distribution, as passed to the
\&\f(CW\*(C`new()\*(C'\fR method in a \f(CW\*(C`dist_name\*(C'\fR or modified \f(CW\*(C`module_name\*(C'\fR
parameter.
.IP "\fIdist_version()\fR" 4
.IX Item "dist_version()"
[version 0.21]
.Sp
Returns the version of the current distribution, as determined by the
\&\f(CW\*(C`new()\*(C'\fR method from a \f(CW\*(C`dist_version\*(C'\fR, \f(CW\*(C`dist_version_from\*(C'\fR, or
\&\f(CW\*(C`module_name\*(C'\fR parameter.
.ie n .IP "do_system($cmd, @args)" 4
.el .IP "do_system($cmd, \f(CW@args\fR)" 4
.IX Item "do_system($cmd, @args)"
[version 0.21]
.Sp
This is a fairly simple wrapper around Perl's \f(CW\*(C`system()\*(C'\fR built-in
command.  Given a command and an array of optional arguments, this
method will print the command to \f(CW\*(C`STDOUT\*(C'\fR, and then execute it using
Perl's \f(CW\*(C`system()\*(C'\fR.  It returns true or false to indicate success or
failure (the opposite of how \f(CW\*(C`system()\*(C'\fR works, but more intuitive).
.Sp
Note that if you supply a single argument to \f(CW\*(C`do_system()\*(C'\fR, it
will/may be processed by the system's shell, and any special
characters will do their special things.  If you supply multiple
arguments, no shell will get involved and the command will be executed
directly.
.IP "feature($name)" 4
.IX Item "feature($name)"
.PD 0
.ie n .IP "feature($name => $value)" 4
.el .IP "feature($name => \f(CW$value\fR)" 4
.IX Item "feature($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns true if the given feature is set.
With two arguments, sets the given feature to the given boolean value.
In this context, a \*(L"feature\*(R" is any optional functionality of an
installed module.  For instance, if you write a module that could
optionally support a MySQL or PostgreSQL backend, you might create
features called \f(CW\*(C`mysql_support\*(C'\fR and \f(CW\*(C`postgres_support\*(C'\fR, and set them
to true/false depending on whether the user has the proper databases
installed and configured.
.Sp
Features set in this way using the Module::Build object will be
available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->feature($name)\*(C'\fR.
.Sp
The \f(CW\*(C`feature()\*(C'\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING\s0 \s-1CONFIGURATION\s0 \s-1INFORMATION\s0\*(R" in Module::Build::Authoring.
.IP "fix_shebang_line(@files)" 4
.IX Item "fix_shebang_line(@files)"
[version 0.??]
.Sp
Modify any \*(L"shebang\*(R" line in the specified files to use the path to the
perl executable being used for the current build.  Files are modified
in-place.  The existing shebang line must have a command that contains
"\f(CW\*(C`perl\*(C'\fR"; arguments to the command do not count.  In particular, this
means that the use of \f(CW\*(C`#!/usr/bin/env perl\*(C'\fR will not be changed.
.Sp
For an explanation of shebang lines, see
<http://en.wikipedia.org/wiki/Shebang_%28Unix%29>.
.IP "\fIhave_c_compiler()\fR" 4
.IX Item "have_c_compiler()"
[version 0.21]
.Sp
Returns true if the current system seems to have a working C compiler.
We currently determine this by attempting to compile a simple C source
file and reporting whether the attempt was successful.
.IP "\fIinstall_base_relpaths()\fR" 4
.IX Item "install_base_relpaths()"
.PD 0
.IP "install_base_relpaths($type)" 4
.IX Item "install_base_relpaths($type)"
.ie n .IP "install_base_relpaths($type => $path)" 4
.el .IP "install_base_relpaths($type => \f(CW$path\fR)" 4
.IX Item "install_base_relpaths($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to
\&\f(CW\*(C`install_base\*(C'\fR for any installable element. This is useful if you
want to set the relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "install_destination($type)" 4
.IX Item "install_destination($type)"
[version 0.28]
.Sp
Returns the directory in which items of type \f(CW$type\fR (e.g. \f(CW\*(C`lib\*(C'\fR,
\&\f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR, or anything else returned by the \*(L"\fIinstall_types()\fR\*(R"
method) will be installed during the \f(CW\*(C`install\*(C'\fR action.  Any settings
for \f(CW\*(C`install_path\*(C'\fR, \f(CW\*(C`install_base\*(C'\fR, and \f(CW\*(C`prefix\*(C'\fR are taken into
account when determining the return value.
.IP "\fIinstall_path()\fR" 4
.IX Item "install_path()"
.PD 0
.IP "install_path($type)" 4
.IX Item "install_path($type)"
.ie n .IP "install_path($type => $path)" 4
.el .IP "install_path($type => \f(CW$path\fR)" 4
.IX Item "install_path($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve paths for specific installable elements. This is
useful when you want to examine any explicit install paths specified
by the user on the command line, or if you want to set the install
path for a specific installable element based on another attribute
like \f(CW\*(C`install_base()\*(C'\fR.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
The supplied \f(CW$path\fR should be an absolute path to install elements
of \f(CW$type\fR.  The return value is \f(CW$path\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIinstall_types()\fR" 4
.IX Item "install_types()"
[version 0.28]
.Sp
Returns a list of installable types that this build knows about.
These types each correspond to the name of a directory in \fIblib/\fR,
and the list usually includes items such as \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR,
\&\f(CW\*(C`script\*(C'\fR, \f(CW\*(C`libdoc\*(C'\fR, \f(CW\*(C`bindoc\*(C'\fR, and if \s-1HTML\s0 documentation is to be
built, \f(CW\*(C`libhtml\*(C'\fR and \f(CW\*(C`binhtml\*(C'\fR.  Other user-defined types may also
exist.
.IP "\fIinvoked_action()\fR" 4
.IX Item "invoked_action()"
[version 0.28]
.Sp
This is the name of the original action invoked by the user.  This
value is set when the user invokes \fIBuild.PL\fR, the \fIBuild\fR script,
or programmatically through the \fIdispatch()\fR
method.  It does not change as sub-actions are executed as
dependencies are evaluated.
.Sp
To get the name of the currently executing dependency, see
\&\*(L"\fIcurrent_action()\fR\*(R" above.
.IP "\fInotes()\fR" 4
.IX Item "notes()"
.PD 0
.IP "notes($key)" 4
.IX Item "notes($key)"
.ie n .IP "notes($key => $value)" 4
.el .IP "notes($key => \f(CW$value\fR)" 4
.IX Item "notes($key => $value)"
.PD
[version 0.20]
.Sp
The \f(CW\*(C`notes()\*(C'\fR value allows you to store your own persistent
information about the build, and to share that information among
different entities involved in the build.  See the example in the
\&\f(CW\*(C`current()\*(C'\fR method.
.Sp
The \f(CW\*(C`notes()\*(C'\fR method is essentially a glorified hash access.  With no
arguments, \f(CW\*(C`notes()\*(C'\fR returns the entire hash of notes.  With one argument,
\&\f(CW\*(C`notes($key)\*(C'\fR returns the value associated with the given key.  With two
arguments, \f(CW\*(C`notes($key, $value)\*(C'\fR sets the value associated with the given key
to \f(CW$value\fR and returns the new value.
.Sp
The lifetime of the \f(CW\*(C`notes\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`notes\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is run, if the Module::Build Perl \s-1API\s0 is being used
instead of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is
run again or the \f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
[version 0.28]
.Sp
Returns a string containing the working directory that was in effect
before the \fIBuild\fR script \fIchdir()\fR\-ed into the \f(CW\*(C`base_dir\*(C'\fR.  This
might be useful for writing wrapper tools that might need to \fIchdir()\fR
back out.
.IP "\fIos_type()\fR" 4
.IX Item "os_type()"
[version 0.04]
.Sp
If you're subclassing Module::Build and some code needs to alter its
behavior based on the current platform, you may only need to know
whether you're running on Windows, Unix, MacOS, \s-1VMS\s0, etc., and not the
fine-grained value of Perl's \f(CW$^O\fR variable.  The \f(CW\*(C`os_type()\*(C'\fR method
will return a string like \f(CW\*(C`Windows\*(C'\fR, \f(CW\*(C`Unix\*(C'\fR, \f(CW\*(C`MacOS\*(C'\fR, \f(CW\*(C`VMS\*(C'\fR, or
whatever is appropriate.  If you're running on an unknown platform, it
will return \f(CW\*(C`undef\*(C'\fR \- there shouldn't be many unknown platforms
though.
.IP "\fIis_vmsish()\fR" 4
.IX Item "is_vmsish()"
.PD 0
.IP "\fIis_windowsish()\fR" 4
.IX Item "is_windowsish()"
.IP "\fIis_unixish()\fR" 4
.IX Item "is_unixish()"
.PD
Convenience functions that return a boolean value indicating whether
this platform behaves respectively like \s-1VMS\s0, Windows, or Unix.  For
arbitrary reasons other platforms don't get their own such functions,
at least not yet.
.IP "\fIprefix_relpaths()\fR" 4
.IX Item "prefix_relpaths()"
.PD 0
.IP "prefix_relpaths($installdirs)" 4
.IX Item "prefix_relpaths($installdirs)"
.ie n .IP "prefix_relpaths($installdirs, $type)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type)"
.ie n .IP "prefix_relpaths($installdirs, $type => $path)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR => \f(CW$path\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to \f(CW\*(C`prefix\*(C'\fR for
any installable element.  This is useful if you want to set the
relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values as defined by the current
\&\f(CW\*(C`installdirs\*(C'\fR setting.
.Sp
With a single argument, it returns a reference to a hash containing
all elements and their respective values as defined by
\&\f(CW$installdirs\fR.
.Sp
The hash returned by the above calls should not be modified directly;
use the three-argument below form to change values.
.Sp
The two argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIget_metadata()\fR" 4
.IX Item "get_metadata()"
[version 0.36]
.Sp
This method returns a hash reference of metadata that can be used to create a
\&\s-1YAML\s0 datastream. It is provided for authors to override or customize the fields
of \fI\s-1META\s0.yml\fR.   E.g.
.Sp
.Vb 2
\&  package My::Builder;
\&  use base \*(AqModule::Build\*(Aq;
\&
\&  sub get_metadata {
\&    my $self, @args = @_;
\&    my $data = $self\->SUPER::get_metadata(@args);
\&    $data\->{custom_field} = \*(Aqfoo\*(Aq;
\&    return $data;
\&  }
.Ve
.Sp
Valid arguments include:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`fatal\*(C'\fR \*(-- indicates whether missing required
metadata fields should be a fatal error or not.  For \s-1META\s0 creation, it
generally should, but for \s-1MYMETA\s0 creation for end-users, it should not be
fatal.
.IP "\(bu" 4
\&\f(CW\*(C`auto\*(C'\fR \*(-- indicates whether any necessary configure_requires should be
automatically added.  This is used in \s-1META\s0 creation.
.RE
.RS 4
.Sp
This method is a wrapper around the old prepare_metadata \s-1API\s0 now that we
no longer use YAML::Node to hold metadata.
.RE
.IP "\fIprepare_metadata()\fR [deprecated]" 4
.IX Item "prepare_metadata() [deprecated]"
[version 0.36]
.Sp
[Deprecated] As of 0.36, authors should use \f(CW\*(C`get_metadata\*(C'\fR instead.  This
method is preserved for backwards compatibility only.
.Sp
It takes three positional arguments: a hashref (to which metadata will be
added), an optional arrayref (to which metadata keys will be added in order if
the arrayref exists), and a hashref of arguments (as provided to get_metadata).
The latter argument is new as of 0.36.  Earlier versions are always fatal on
errors.
.Sp
Prior to version 0.36, this method took a YAML::Node as an argument to hold
assembled metadata.
.IP "\fIprereq_failures()\fR" 4
.IX Item "prereq_failures()"
[version 0.11]
.Sp
Returns a data structure containing information about any failed
prerequisites (of any of the types described above), or \f(CW\*(C`undef\*(C'\fR if
all prerequisites are met.
.Sp
The data structure returned is a hash reference.  The top level keys
are the type of prerequisite failed, one of \*(L"requires\*(R",
\&\*(L"build_requires\*(R", \*(L"conflicts\*(R", or \*(L"recommends\*(R".  The associated values
are hash references whose keys are the names of required (or
conflicting) modules.  The associated values of those are hash
references indicating some information about the failure.  For example:
.Sp
.Vb 5
\&  {
\&   have => \*(Aq0.42\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqVersion 0.42 is installed, but we need version 0.59\*(Aq,
\&  }
.Ve
.Sp
or
.Sp
.Vb 5
\&  {
\&   have => \*(Aq<none>\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqPrerequisite Foo isn\*(Aqt installed\*(Aq,
\&  }
.Ve
.Sp
This hash has the same structure as the hash returned by the
\&\f(CW\*(C`check_installed_status()\*(C'\fR method, except that in the case of
\&\*(L"conflicts\*(R" dependencies we change the \*(L"need\*(R" key to \*(L"conflicts\*(R" and
construct a proper message.
.Sp
Examples:
.Sp
.Vb 2
\&  # Check a required dependency on Foo::Bar
\&  if ( $build\->prereq_failures\->{requires}{Foo::Bar} ) { ...
\&
\&  # Check whether there were any failures
\&  if ( $build\->prereq_failures ) { ...
\&
\&  # Show messages for all failures
\&  my $failures = $build\->prereq_failures;
\&  while (my ($type, $list) = each %$failures) {
\&    while (my ($name, $hash) = each %$list) {
\&      print "Failure for $name: $hash\->{message}\en";
\&    }
\&  }
.Ve
.IP "\fIprereq_data()\fR" 4
.IX Item "prereq_data()"
[version 0.32]
.Sp
Returns a reference to a hash describing all prerequisites.  The keys of the
hash will be the various prerequisite types ('requires', 'build_requires',
\&'configure_requires', 'recommends', or 'conflicts') and the values will be
references to hashes of module names and version numbers.  Only prerequisites
types that are defined will be included.  The \f(CW\*(C`prereq_data\*(C'\fR action is just a
thin wrapper around the \f(CW\*(C`prereq_data()\*(C'\fR method and dumps the hash as a string
that can be loaded using \f(CW\*(C`eval()\*(C'\fR.
.IP "\fIprereq_report()\fR" 4
.IX Item "prereq_report()"
[version 0.28]
.Sp
Returns a human-readable (table-form) string showing all
prerequisites, the versions required, and the versions actually
installed.  This can be useful for reviewing the configuration of your
system prior to a build, or when compiling data to send for a bug
report.  The \f(CW\*(C`prereq_report\*(C'\fR action is just a thin wrapper around the
\&\f(CW\*(C`prereq_report()\*(C'\fR method.
.ie n .IP "prompt($message, $default)" 4
.el .IP "prompt($message, \f(CW$default\fR)" 4
.IX Item "prompt($message, $default)"
[version 0.12]
.Sp
Asks the user a question and returns their response as a string.  The
first argument specifies the message to display to the user (for
example, \f(CW"Where do you keep your money?"\fR).  The second argument,
which is optional, specifies a default answer (for example,
\&\f(CW"wallet"\fR).  The user will be asked the question once.
.Sp
If \f(CW\*(C`prompt()\*(C'\fR detects that it is not running interactively and there
is nothing on \s-1STDIN\s0 or if the \s-1PERL_MM_USE_DEFAULT\s0 environment variable
is set to true, the \f(CW$default\fR will be used without prompting.
.Sp
To prevent automated processes from blocking, the user must either set
\&\s-1PERL_MM_USE_DEFAULT\s0 or attach something to \s-1STDIN\s0 (this can be a
pipe/file containing a scripted set of answers or /dev/null.)
.Sp
If no \f(CW$default\fR is provided an empty string will be used instead.  In
non-interactive mode, the absence of \f(CW$default\fR is an error (though
explicitly passing \f(CW\*(C`undef()\*(C'\fR as the default is valid as of 0.27.)
.Sp
This method may be called as a class or object method.
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`recommends\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`requires\*(C'\fR prerequisites that
were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "rscan_dir($dir, $pattern)" 4
.el .IP "rscan_dir($dir, \f(CW$pattern\fR)" 4
.IX Item "rscan_dir($dir, $pattern)"
[version 0.28]
.Sp
Uses \f(CW\*(C`File::Find\*(C'\fR to traverse the directory \f(CW$dir\fR, returning a
reference to an array of entries matching \f(CW$pattern\fR.  \f(CW$pattern\fR
may either be a regular expression (using \f(CW\*(C`qr//\*(C'\fR or just a plain
string), or a reference to a subroutine that will return true for
wanted entries.  If \f(CW$pattern\fR is not given, all entries will be
returned.
.Sp
Examples:
.Sp
.Vb 2
\& # All the *.pm files in lib/
\& $m\->rscan_dir(\*(Aqlib\*(Aq, qr/\e.pm$/)
\&
\& # All the files in blib/ that aren\*(Aqt *.html files
\& $m\->rscan_dir(\*(Aqblib\*(Aq, sub {\-f $_ and not /\e.html$/});
\&
\& # All the files in t/
\& $m\->rscan_dir(\*(Aqt\*(Aq);
.Ve
.IP "\fIruntime_params()\fR" 4
.IX Item "runtime_params()"
.PD 0
.IP "runtime_params($key)" 4
.IX Item "runtime_params($key)"
.PD
[version 0.28]
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method stores the values passed on the command line
for valid properties (that is, any command line options for which
\&\f(CW\*(C`valid_property()\*(C'\fR returns a true value).  The value on the command line may
override the default value for a property, as well as any value specified in a
call to \f(CW\*(C`new()\*(C'\fR.  This allows you to programmatically tell if \f(CW\*(C`perl Build.PL\*(C'\fR
or any execution of \f(CW\*(C`./Build\*(C'\fR had command line options specified that
override valid properties.
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method is essentially a glorified read-only hash.  With
no arguments, \f(CW\*(C`runtime_params()\*(C'\fR returns the entire hash of properties
specified on the command line.  With one argument, \f(CW\*(C`runtime_params($key)\*(C'\fR
returns the value associated with the given key.
.Sp
The lifetime of the \f(CW\*(C`runtime_params\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`runtime_params\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is called, if the Module::Build Perl \s-1API\s0 is being used instead
of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is run again or the
\&\f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIscript_files()\fR" 4
.IX Item "script_files()"
[version 0.18]
.Sp
Returns a hash reference whose keys are the perl script files to be
installed, if any.  This corresponds to the \f(CW\*(C`script_files\*(C'\fR parameter to the
\&\f(CW\*(C`new()\*(C'\fR method.  With an optional argument, this parameter may be set
dynamically.
.Sp
For backward compatibility, the \f(CW\*(C`scripts()\*(C'\fR method does exactly the
same thing as \f(CW\*(C`script_files()\*(C'\fR.  \f(CW\*(C`scripts()\*(C'\fR is deprecated, but it
will stay around for several versions to give people time to
transition.
.ie n .IP "up_to_date($source_file, $derived_file)" 4
.el .IP "up_to_date($source_file, \f(CW$derived_file\fR)" 4
.IX Item "up_to_date($source_file, $derived_file)"
.PD 0
.IP "up_to_date(\e@source_files, \e@derived_files)" 4
.IX Item "up_to_date(@source_files, @derived_files)"
.PD
[version 0.20]
.Sp
This method can be used to compare a set of source files to a set of
derived files.  If any of the source files are newer than any of the
derived files, it returns false.  Additionally, if any of the derived
files do not exist, it returns false.  Otherwise it returns true.
.Sp
The arguments may be either a scalar or an array reference of file
names.
.ie n .IP "y_n($message, $default)" 4
.el .IP "y_n($message, \f(CW$default\fR)" 4
.IX Item "y_n($message, $default)"
[version 0.12]
.Sp
Asks the user a yes/no question using \f(CW\*(C`prompt()\*(C'\fR and returns true or
false accordingly.  The user will be asked the question repeatedly
until they give an answer that looks like \*(L"yes\*(R" or \*(L"no\*(R".
.Sp
The first argument specifies the message to display to the user (for
example, \f(CW"Shall I invest your money for you?"\fR), and the second
argument specifies the default answer (for example, \f(CW"y"\fR).
.Sp
Note that the default is specified as a string like \f(CW"y"\fR or \f(CW"n"\fR,
and the return value is a Perl boolean value like 1 or 0.  I thought
about this for a while and this seemed like the most useful way to do
it.
.Sp
This method may be called as a class or object method.
.SS "Autogenerated Accessors"
.IX Subsection "Autogenerated Accessors"
In addition to the aforementioned methods, there are also some get/set
accessor methods for the following properties:
.IP "\fIPL_files()\fR" 4
.IX Item "PL_files()"
.PD 0
.IP "\fIallow_mb_mismatch()\fR" 4
.IX Item "allow_mb_mismatch()"
.IP "\fIauto_configure_requires()\fR" 4
.IX Item "auto_configure_requires()"
.IP "\fIautosplit()\fR" 4
.IX Item "autosplit()"
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
.IP "\fIbindoc_dirs()\fR" 4
.IX Item "bindoc_dirs()"
.IP "\fIblib()\fR" 4
.IX Item "blib()"
.IP "\fIbuild_bat()\fR" 4
.IX Item "build_bat()"
.IP "\fIbuild_class()\fR" 4
.IX Item "build_class()"
.IP "\fIbuild_elements()\fR" 4
.IX Item "build_elements()"
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
.IP "\fIbuild_script()\fR" 4
.IX Item "build_script()"
.IP "\fIbundle_inc()\fR" 4
.IX Item "bundle_inc()"
.IP "\fIbundle_inc_preload()\fR" 4
.IX Item "bundle_inc_preload()"
.IP "\fIc_source()\fR" 4
.IX Item "c_source()"
.IP "\fIconfig_dir()\fR" 4
.IX Item "config_dir()"
.IP "\fIconfigure_requires()\fR" 4
.IX Item "configure_requires()"
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
.IP "\fIcpan_client()\fR" 4
.IX Item "cpan_client()"
.IP "\fIcreate_license()\fR" 4
.IX Item "create_license()"
.IP "\fIcreate_makefile_pl()\fR" 4
.IX Item "create_makefile_pl()"
.IP "\fIcreate_packlist()\fR" 4
.IX Item "create_packlist()"
.IP "\fIcreate_readme()\fR" 4
.IX Item "create_readme()"
.IP "\fIdebug()\fR" 4
.IX Item "debug()"
.IP "\fIdebugger()\fR" 4
.IX Item "debugger()"
.IP "\fIdestdir()\fR" 4
.IX Item "destdir()"
.IP "\fIdynamic_config()\fR" 4
.IX Item "dynamic_config()"
.IP "\fIget_options()\fR" 4
.IX Item "get_options()"
.IP "\fIhtml_css()\fR" 4
.IX Item "html_css()"
.IP "\fIinclude_dirs()\fR" 4
.IX Item "include_dirs()"
.IP "\fIinstall_base()\fR" 4
.IX Item "install_base()"
.IP "\fIinstalldirs()\fR" 4
.IX Item "installdirs()"
.IP "\fIlibdoc_dirs()\fR" 4
.IX Item "libdoc_dirs()"
.IP "\fIlicense()\fR" 4
.IX Item "license()"
.IP "\fImagic_number()\fR" 4
.IX Item "magic_number()"
.IP "\fImb_version()\fR" 4
.IX Item "mb_version()"
.IP "\fImeta_add()\fR" 4
.IX Item "meta_add()"
.IP "\fImeta_merge()\fR" 4
.IX Item "meta_merge()"
.IP "\fImetafile()\fR" 4
.IX Item "metafile()"
.IP "\fImetafile2()\fR" 4
.IX Item "metafile2()"
.IP "\fImodule_name()\fR" 4
.IX Item "module_name()"
.IP "\fImymetafile()\fR" 4
.IX Item "mymetafile()"
.IP "\fImymetafile2()\fR" 4
.IX Item "mymetafile2()"
.IP "\fIneeds_compiler()\fR" 4
.IX Item "needs_compiler()"
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
.IP "\fIperl()\fR" 4
.IX Item "perl()"
.IP "\fIpm_files()\fR" 4
.IX Item "pm_files()"
.IP "\fIpod_files()\fR" 4
.IX Item "pod_files()"
.IP "\fIpollute()\fR" 4
.IX Item "pollute()"
.IP "\fIprefix()\fR" 4
.IX Item "prefix()"
.IP "\fIprereq_action_types()\fR" 4
.IX Item "prereq_action_types()"
.IP "\fIprogram_name()\fR" 4
.IX Item "program_name()"
.IP "\fIquiet()\fR" 4
.IX Item "quiet()"
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
.IP "\fIrecurse_into()\fR" 4
.IX Item "recurse_into()"
.IP "\fIrecursive_test_files()\fR" 4
.IX Item "recursive_test_files()"
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
.IP "\fIscripts()\fR" 4
.IX Item "scripts()"
.IP "\fIsign()\fR" 4
.IX Item "sign()"
.IP "\fItap_harness_args()\fR" 4
.IX Item "tap_harness_args()"
.IP "\fItest_file_exts()\fR" 4
.IX Item "test_file_exts()"
.IP "\fIuse_rcfile()\fR" 4
.IX Item "use_rcfile()"
.IP "\fIuse_tap_harness()\fR" 4
.IX Item "use_tap_harness()"
.IP "\fIverbose()\fR" 4
.IX Item "verbose()"
.IP "\fIxs_files()\fR" 4
.IX Item "xs_files()"
.PD
.SH "MODULE METADATA"
.IX Header "MODULE METADATA"
If you would like to add other useful metadata, \f(CW\*(C`Module::Build\*(C'\fR
supports this with the \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR arguments to
\&\*(L"\fInew()\fR\*(R". The authoritative list of supported metadata can be found at
CPAN::META::Spec but for convenience \- here are a few of the more useful ones:
.IP "keywords" 4
.IX Item "keywords"
For describing the distribution using keyword (or \*(L"tags\*(R") in order to
make \s-1CPAN\s0.org indexing and search more efficient and useful.
.IP "resources" 4
.IX Item "resources"
A list of additional resources available for users of the
distribution. This can include links to a homepage on the web, a
bug tracker, the repository location, and even a subscription page for the
distribution mailing list.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build(3), Module::Build::Authoring(3),
Module::Build::Cookbook(3), ExtUtils::MakeMaker(3)
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::META::Spec
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build::API5.18.3pm                   0100644 0001750 0001750 00000254235 12566207461 024740  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::API 3pm"
.TH Module::Build::API 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::API \- API Reference for Module Authors
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I list here some of the most important methods in \f(CW\*(C`Module::Build\*(C'\fR.
Normally you won't need to deal with these methods unless you want to
subclass \f(CW\*(C`Module::Build\*(C'\fR.  But since one of the reasons I created
this module in the first place was so that subclassing is possible
(and easy), I will certainly write more docs as the interface
stabilizes.
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
.IP "\fIcurrent()\fR" 4
.IX Item "current()"
[version 0.20]
.Sp
This method returns a reasonable facsimile of the currently-executing
\&\f(CW\*(C`Module::Build\*(C'\fR object representing the current build.  You can use
this object to query its \*(L"\fInotes()\fR\*(R" method, inquire about installed
modules, and so on.  This is a great way to share information between
different parts of your build process.  For instance, you can ask
the user a question during \f(CW\*(C`perl Build.PL\*(C'\fR, then use their answer
during a regression test:
.Sp
.Vb 3
\&  # In Build.PL:
\&  my $color = $build\->prompt("What is your favorite color?");
\&  $build\->notes(color => $color);
\&
\&  # In t/colortest.t:
\&  use Module::Build;
\&  my $build = Module::Build\->current;
\&  my $color = $build\->notes(\*(Aqcolor\*(Aq);
\&  ...
.Ve
.Sp
The way the \f(CW\*(C`current()\*(C'\fR method is currently implemented, there may be
slight differences between the \f(CW$build\fR object in Build.PL and the
one in \f(CW\*(C`t/colortest.t\*(C'\fR.  It is our goal to minimize these differences
in future releases of Module::Build, so please report any anomalies
you find.
.Sp
One important caveat: in its current implementation, \f(CW\*(C`current()\*(C'\fR will
\&\fB\s-1NOT\s0\fR work correctly if you have changed out of the directory that
\&\f(CW\*(C`Module::Build\*(C'\fR was invoked from.
.IP "\fInew()\fR" 4
.IX Item "new()"
[version 0.03]
.Sp
Creates a new Module::Build object.  Arguments to the \fInew()\fR method are
listed below.  Most arguments are optional, but you must provide
either the \*(L"module_name\*(R" argument, or \*(L"dist_name\*(R" and one of
\&\*(L"dist_version\*(R" or \*(L"dist_version_from\*(R".  In other words, you must
provide enough information to determine both a distribution name and
version.
.RS 4
.IP "add_to_cleanup" 4
.IX Item "add_to_cleanup"
[version 0.19]
.Sp
An array reference of files to be cleaned up when the \f(CW\*(C`clean\*(C'\fR action
is performed. See also the \fIadd_to_cleanup()\fR
method.
.IP "auto_configure_requires" 4
.IX Item "auto_configure_requires"
[version 0.34]
.Sp
This parameter determines whether Module::Build will add itself
automatically to configure_requires (and build_requires) if Module::Build
is not already there.  The required version will be the last 'major' release,
as defined by the decimal version truncated to two decimal places (e.g. 0.34,
instead of 0.3402).  The default value is true.
.IP "auto_features" 4
.IX Item "auto_features"
[version 0.26]
.Sp
This parameter supports the setting of features (see
\&\*(L"feature($name)\*(R") automatically based on a set of prerequisites.  For
instance, for a module that could optionally use either MySQL or
PostgreSQL databases, you might use \f(CW\*(C`auto_features\*(C'\fR like this:
.Sp
.Vb 10
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     auto_features => {
\&       pg_support    => {
\&                         description => "Interface with Postgres databases",
\&                         requires    => { \*(AqDBD::Pg\*(Aq => 23.3,
\&                                          \*(AqDateTime::Format::Pg\*(Aq => 0 },
\&                        },
\&       mysql_support => {
\&                         description => "Interface with MySQL databases",
\&                         requires    => { \*(AqDBD::mysql\*(Aq => 17.9,
\&                                          \*(AqDateTime::Format::MySQL\*(Aq => 0 },
\&                        },
\&     }
\&    );
.Ve
.Sp
For each feature named, the required prerequisites will be checked, and
if there are no failures, the feature will be enabled (set to \f(CW1\fR).
Otherwise the failures will be displayed to the user and the feature
will be disabled (set to \f(CW0\fR).
.Sp
See the documentation for \*(L"requires\*(R" for the details of how
requirements can be specified.
.IP "autosplit" 4
.IX Item "autosplit"
[version 0.04]
.Sp
An optional \f(CW\*(C`autosplit\*(C'\fR argument specifies a file which should be run
through the \fIAutoSplit::autosplit()\fR function.
If multiple files should be split, the argument may be given as an
array of the files to split.
.Sp
In general I don't consider autosplitting a great idea, because it's
not always clear that autosplitting achieves its intended performance
benefits.  It may even harm performance in environments like mod_perl,
where as much as possible of a module's code should be loaded during
startup.
.IP "build_class" 4
.IX Item "build_class"
[version 0.28]
.Sp
The Module::Build class or subclass to use in the build script.
Defaults to \*(L"Module::Build\*(R" or the class name passed to or created by
a call to \*(L"\fIsubclass()\fR\*(R".  This property is useful if you're
writing a custom Module::Build subclass and have a bootstrapping
problem\*(--that is, your subclass requires modules that may not be
installed when \f(CW\*(C`perl Build.PL\*(C'\fR is executed, but you've listed in
\&\*(L"build_requires\*(R" so that they should be available when \f(CW\*(C`./Build\*(C'\fR is
executed.
.IP "build_requires" 4
.IX Item "build_requires"
[version 0.07]
.Sp
Modules listed in this section are necessary to build and install the
given module, but are not necessary for regular usage of it.  This is
actually an important distinction \- it allows for tighter control over
the body of installed modules, and facilitates correct dependency
checking on binary/packaged distributions of the module.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "configure_requires" 4
.IX Item "configure_requires"
[version 0.30]
.Sp
Modules listed in this section must be installed \fIbefore\fR configuring
this distribution (i.e. before running the \fIBuild.PL\fR script).
This might be a specific minimum version of \f(CW\*(C`Module::Build\*(C'\fR or any
other module the \fIBuild.PL\fR needs in order to do its stuff.  Clients
like \f(CW\*(C`CPAN.pm\*(C'\fR or \f(CW\*(C`CPANPLUS\*(C'\fR will be expected to pick
\&\f(CW\*(C`configure_requires\*(C'\fR out of the \fI\s-1META\s0.yml\fR file and install these
items before running the \f(CW\*(C`Build.PL\*(C'\fR.
.Sp
Module::Build may automatically add itself to configure_requires.
See \*(L"auto_configure_requires\*(R" for details.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_packlist" 4
.IX Item "create_packlist"
[version 0.28]
.Sp
If true, this parameter tells Module::Build to create a \fI.packlist\fR
file during the \f(CW\*(C`install\*(C'\fR action, just like \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR does.
The file is created in a subdirectory of the \f(CW\*(C`arch\*(C'\fR installation
location.  It is used by some other tools (\s-1CPAN, CPANPLUS,\s0 etc.) for
determining what files are part of an install.
.Sp
The default value is true.  This parameter was introduced in
Module::Build version 0.2609; previously no packlists were ever
created by Module::Build.
.IP "c_source" 4
.IX Item "c_source"
[version 0.04]
.Sp
An optional \f(CW\*(C`c_source\*(C'\fR argument specifies a directory which contains
C source files that the rest of the build may depend on.  Any \f(CW\*(C`.c\*(C'\fR
files in the directory will be compiled to object files.  The
directory will be added to the search path during the compilation and
linking phases of any C or \s-1XS\s0 files.
.Sp
[version 0.3604]
.Sp
A list of directories can be supplied using an anonymous array
reference of strings.
.IP "conflicts" 4
.IX Item "conflicts"
[version 0.07]
.Sp
Modules listed in this section conflict in some serious way with the
given module.  \f(CW\*(C`Module::Build\*(C'\fR (or some higher-level tool) will
refuse to install the given module if the given module/version is also
installed.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "create_license" 4
.IX Item "create_license"
[version 0.31]
.Sp
This parameter tells Module::Build to automatically create a
\&\fI\s-1LICENSE\s0\fR file at the top level of your distribution, containing the
full text of the author's chosen license.  This requires
\&\f(CW\*(C`Software::License\*(C'\fR on the author's machine, and further requires
that the \f(CW\*(C`license\*(C'\fR parameter specifies a license that it knows about.
.IP "create_makefile_pl" 4
.IX Item "create_makefile_pl"
[version 0.19]
.Sp
This parameter lets you use \f(CW\*(C`Module::Build::Compat\*(C'\fR during the
\&\f(CW\*(C`distdir\*(C'\fR (or \f(CW\*(C`dist\*(C'\fR) action to automatically create a Makefile.PL
for compatibility with \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The parameter's value
should be one of the styles named in the Module::Build::Compat
documentation.
.IP "create_readme" 4
.IX Item "create_readme"
[version 0.22]
.Sp
This parameter tells Module::Build to automatically create a \fI\s-1README\s0\fR
file at the top level of your distribution.  Currently it will simply
use \f(CW\*(C`Pod::Text\*(C'\fR (or \f(CW\*(C`Pod::Readme\*(C'\fR if it's installed) on the file
indicated by \f(CW\*(C`dist_version_from\*(C'\fR and put the result in the \fI\s-1README\s0\fR
file.  This is by no means the only recommended style for writing a
\&\fI\s-1README\s0\fR, but it seems to be one common one used on the \s-1CPAN.\s0
.Sp
If you generate a \fI\s-1README\s0\fR in this way, it's probably a good idea to
create a separate \fI\s-1INSTALL\s0\fR file if that information isn't in the
generated \fI\s-1README\s0\fR.
.IP "dist_abstract" 4
.IX Item "dist_abstract"
[version 0.20]
.Sp
This should be a short description of the distribution.  This is used when
generating metadata for \fI\s-1META\s0.yml\fR and \s-1PPD\s0 files.  If it is not given
then \f(CW\*(C`Module::Build\*(C'\fR looks in the \s-1POD\s0 of the module from which it gets
the distribution's version.  If it finds a \s-1POD\s0 section marked \*(L"=head1
\&\s-1NAME\*(R",\s0 then it looks for the first line matching \f(CW\*(C`\es+\-\es+(.+)\*(C'\fR,
and uses the captured text as the abstract.
.IP "dist_author" 4
.IX Item "dist_author"
[version 0.20]
.Sp
This should be something like \*(L"John Doe <jdoe@example.com>\*(R", or if
there are multiple authors, an anonymous array of strings may be
specified.  This is used when generating metadata for \fI\s-1META\s0.yml\fR and
\&\s-1PPD\s0 files.  If this is not specified, then \f(CW\*(C`Module::Build\*(C'\fR looks at
the module from which it gets the distribution's version.  If it finds
a \s-1POD\s0 section marked \*(L"=head1 \s-1AUTHOR\*(R",\s0 then it uses the contents of
this section.
.IP "dist_name" 4
.IX Item "dist_name"
[version 0.11]
.Sp
Specifies the name for this distribution.  Most authors won't need to
set this directly, they can use \f(CW\*(C`module_name\*(C'\fR to set \f(CW\*(C`dist_name\*(C'\fR to
a reasonable default.  However, some agglomerative distributions like
\&\f(CW\*(C`libwww\-perl\*(C'\fR or \f(CW\*(C`bioperl\*(C'\fR have names that don't correspond directly
to a module name, so \f(CW\*(C`dist_name\*(C'\fR can be set independently.
.IP "dist_suffix" 4
.IX Item "dist_suffix"
[version 0.37]
.Sp
Specifies an optional suffix to include after the version number
in the distribution directory (and tarball) name.  The only suffix
currently recognized by \s-1PAUSE\s0 is '\s-1TRIAL\s0', which indicates that the
distribution should not be indexed.  For example:
.Sp
.Vb 1
\&  Foo\-Bar\-1.23\-TRIAL.tar.gz
.Ve
.Sp
This will automatically do the \*(L"right thing\*(R" depending on \f(CW\*(C`dist_version\*(C'\fR and
\&\f(CW\*(C`release_status\*(C'\fR.  When \f(CW\*(C`dist_version\*(C'\fR does not have an underscore and
\&\f(CW\*(C`release_status\*(C'\fR is not 'stable', then \f(CW\*(C`dist_suffix\*(C'\fR will default to '\s-1TRIAL\s0'.
Otherwise it will default to the empty string, disabling the suffix.
.Sp
In general, authors should only set this if they \fBmust\fR override the default
behavior for some particular purpose.
.IP "dist_version" 4
.IX Item "dist_version"
[version 0.11]
.Sp
Specifies a version number for the distribution.  See \*(L"module_name\*(R"
or \*(L"dist_version_from\*(R" for ways to have this set automatically from a
\&\f(CW$VERSION\fR variable in a module.  One way or another, a version
number needs to be set.
.IP "dist_version_from" 4
.IX Item "dist_version_from"
[version 0.11]
.Sp
Specifies a file to look for the distribution version in.  Most
authors won't need to set this directly, they can use \*(L"module_name\*(R"
to set it to a reasonable default.
.Sp
The version is extracted from the specified file according to the same
rules as ExtUtils::MakeMaker and \f(CW\*(C`CPAN.pm\*(C'\fR.  It involves finding
the first line that matches the regular expression
.Sp
.Vb 1
\&   /([\e$*])(([\ew\e:\e\*(Aq]*)\ebVERSION)\eb.*\e=/
.Ve
.Sp
\&\fIeval()\fR\-ing that line, then checking the value of the \f(CW$VERSION\fR
variable.  Quite ugly, really, but all the modules on \s-1CPAN\s0 depend on
this process, so there's no real opportunity to change to something
better.
.Sp
If the target file of \*(L"dist_version_from\*(R" contains more than one package
declaration, the version returned will be the one matching the configured
\&\*(L"module_name\*(R".
.IP "dynamic_config" 4
.IX Item "dynamic_config"
[version 0.07]
.Sp
A boolean flag indicating whether the \fIBuild.PL\fR file must be
executed, or whether this module can be built, tested and installed
solely from consulting its metadata file.  The main reason to set this
to a true value is that your module performs some dynamic
configuration as part of its build/install process.  If the flag is
omitted, the \fI\s-1META\s0.yml\fR spec says that installation tools should
treat it as 1 (true), because this is a safer way to behave.
.Sp
Currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually do anything with this flag
\&\- it's up to higher-level tools like \f(CW\*(C`CPAN.pm\*(C'\fR to do something useful
with it.  It can potentially bring lots of security, packaging, and
convenience improvements.
.IP "extra_compiler_flags" 4
.IX Item "extra_compiler_flags"
.PD 0
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
.PD
[version 0.19]
.Sp
These parameters can contain array references (or strings, in which
case they will be split into arrays) to pass through to the compiler
and linker phases when compiling/linking C code.  For example, to tell
the compiler that your code is \*(C+, you might do:
.Sp
.Vb 5
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     extra_compiler_flags => [\*(Aq\-x\*(Aq, \*(Aqc++\*(Aq],
\&    );
.Ve
.Sp
To link your \s-1XS\s0 code against glib you might write something like:
.Sp
.Vb 7
\&  my $build = Module::Build\->new
\&    (
\&     module_name          => \*(AqFoo::Bar\*(Aq,
\&     dynamic_config       => 1,
\&     extra_compiler_flags => scalar \`glib\-config \-\-cflags\`,
\&     extra_linker_flags   => scalar \`glib\-config \-\-libs\`,
\&    );
.Ve
.IP "get_options" 4
.IX Item "get_options"
[version 0.26]
.Sp
You can pass arbitrary command line options to \fIBuild.PL\fR or
\&\fIBuild\fR, and they will be stored in the Module::Build object and can
be accessed via the \*(L"\fIargs()\fR\*(R" method.  However, sometimes you want
more flexibility out of your argument processing than this allows.  In
such cases, use the \f(CW\*(C`get_options\*(C'\fR parameter to pass in a hash
reference of argument specifications, and the list of arguments to
\&\fIBuild.PL\fR or \fIBuild\fR will be processed according to those
specifications before they're passed on to \f(CW\*(C`Module::Build\*(C'\fR's own
argument processing.
.Sp
The supported option specification hash keys are:
.RS 4
.IP "type" 4
.IX Item "type"
The type of option.  The types are those supported by Getopt::Long; consult
its documentation for a complete list.  Typical types are \f(CW\*(C`=s\*(C'\fR for strings,
\&\f(CW\*(C`+\*(C'\fR for additive options, and \f(CW\*(C`!\*(C'\fR for negatable options.  If the
type is not specified, it will be considered a boolean, i.e. no
argument is taken and a value of 1 will be assigned when the option is
encountered.
.IP "store" 4
.IX Item "store"
A reference to a scalar in which to store the value passed to the option.
If not specified, the value will be stored under the option name in the
hash returned by the \f(CW\*(C`args()\*(C'\fR method.
.IP "default" 4
.IX Item "default"
A default value for the option.  If no default value is specified and no option
is passed, then the option key will not exist in the hash returned by
\&\f(CW\*(C`args()\*(C'\fR.
.RE
.RS 4
.Sp
You can combine references to your own variables or subroutines with
unreferenced specifications, for which the result will also be stored in the
hash returned by \f(CW\*(C`args()\*(C'\fR.  For example:
.Sp
.Vb 10
\&  my $loud = 0;
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     get_options => {
\&                     Loud =>     { store => \e$loud },
\&                     Dbd  =>     { type  => \*(Aq=s\*(Aq   },
\&                     Quantity => { type  => \*(Aq+\*(Aq    },
\&                    }
\&    );
\&
\&  print STDERR "HEY, ARE YOU LISTENING??\en" if $loud;
\&  print "We\*(Aqll use the ", $build\->args(\*(AqDbd\*(Aq), " DBI driver\en";
\&  print "Are you sure you want that many?\en"
\&    if $build\->args(\*(AqQuantity\*(Aq) > 2;
.Ve
.Sp
The arguments for such a specification can be called like so:
.Sp
.Vb 1
\&  perl Build.PL \-\-Loud \-\-Dbd=DBD::pg \-\-Quantity \-\-Quantity \-\-Quantity
.Ve
.Sp
\&\fB\s-1WARNING:\s0\fR Any option specifications that conflict with Module::Build's own
options (defined by its properties) will throw an exception.  Use capitalized
option names to avoid unintended conflicts with future Module::Build options.
.Sp
Consult the Getopt::Long documentation for details on its usage.
.RE
.IP "include_dirs" 4
.IX Item "include_dirs"
[version 0.24]
.Sp
Specifies any additional directories in which to search for C header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.IP "install_path" 4
.IX Item "install_path"
[version 0.19]
.Sp
You can set paths for individual installable elements by using the
\&\f(CW\*(C`install_path\*(C'\fR parameter:
.Sp
.Vb 8
\&  my $build = Module::Build\->new
\&    (
\&     ...other stuff here...
\&     install_path => {
\&                      lib  => \*(Aq/foo/lib\*(Aq,
\&                      arch => \*(Aq/foo/lib/arch\*(Aq,
\&                     }
\&    );
.Ve
.IP "installdirs" 4
.IX Item "installdirs"
[version 0.19]
.Sp
Determines where files are installed within the normal perl hierarchy
as determined by \fIConfig.pm\fR.  Valid values are: \f(CW\*(C`core\*(C'\fR, \f(CW\*(C`site\*(C'\fR,
\&\f(CW\*(C`vendor\*(C'\fR.  The default is \f(CW\*(C`site\*(C'\fR.  See
\&\*(L"\s-1INSTALL PATHS\*(R"\s0 in Module::Build
.IP "license" 4
.IX Item "license"
[version 0.07]
.Sp
Specifies the licensing terms of your distribution.
.Sp
As of Module::Build version 0.36_14, you may use a Software::License
subclass name (e.g. 'Apache_2_0') instead of one of the keys below.
.Sp
The legacy list of valid license values include:
.RS 4
.IP "apache" 4
.IX Item "apache"
The distribution is licensed under the Apache License, Version 2.0
(<http://apache.org/licenses/LICENSE\-2.0>).
.IP "apache_1_1" 4
.IX Item "apache_1_1"
The distribution is licensed under the Apache Software License, Version 1.1
(<http://apache.org/licenses/LICENSE\-1.1>).
.IP "artistic" 4
.IX Item "artistic"
The distribution is licensed under the Artistic License, as specified
by the \fIArtistic\fR file in the standard Perl distribution.
.IP "artistic_2" 4
.IX Item "artistic_2"
The distribution is licensed under the Artistic 2.0 License
(<http://opensource.org/licenses/artistic\-license\-2.0.php>.)
.IP "bsd" 4
.IX Item "bsd"
The distribution is licensed under the \s-1BSD\s0 License
(<http://www.opensource.org/licenses/bsd\-license.php>).
.IP "gpl" 4
.IX Item "gpl"
The distribution is licensed under the terms of the \s-1GNU\s0 General
Public License (<http://www.opensource.org/licenses/gpl\-license.php>).
.IP "lgpl" 4
.IX Item "lgpl"
The distribution is licensed under the terms of the \s-1GNU\s0 Lesser
General Public License
(<http://www.opensource.org/licenses/lgpl\-license.php>).
.IP "mit" 4
.IX Item "mit"
The distribution is licensed under the \s-1MIT\s0 License
(<http://opensource.org/licenses/mit\-license.php>).
.IP "mozilla" 4
.IX Item "mozilla"
The distribution is licensed under the Mozilla Public
License.  (<http://opensource.org/licenses/mozilla1.0.php> or
<http://opensource.org/licenses/mozilla1.1.php>)
.IP "open_source" 4
.IX Item "open_source"
The distribution is licensed under some other Open Source
Initiative-approved license listed at
<http://www.opensource.org/licenses/>.
.IP "perl" 4
.IX Item "perl"
The distribution may be copied and redistributed under the same terms
as Perl itself (this is by far the most common licensing option for
modules on \s-1CPAN\s0).  This is a dual license, in which the user may
choose between either the \s-1GPL\s0 or the Artistic license.
.IP "restrictive" 4
.IX Item "restrictive"
The distribution may not be redistributed without special permission
from the author and/or copyright holder.
.IP "unrestricted" 4
.IX Item "unrestricted"
The distribution is licensed under a license that is \fBnot\fR approved
by www.opensource.org but that allows distribution without
restrictions.
.RE
.RS 4
.Sp
Note that you must still include the terms of your license in your
code and documentation \- this field only sets the information that is included
in distribution metadata to let automated tools figure out your
licensing restrictions.  Humans still need something to read.  If you
choose to provide this field, you should make sure that you keep it in
sync with your written documentation if you ever change your licensing
terms.
.Sp
You may also use a license type of \f(CW\*(C`unknown\*(C'\fR if you don't wish to
specify your terms in the metadata.
.Sp
Also see the \f(CW\*(C`create_license\*(C'\fR parameter.
.RE
.IP "meta_add" 4
.IX Item "meta_add"
[version 0.28]
.Sp
A hash of key/value pairs that should be added to the \fI\s-1META\s0.yml\fR file
during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the same
names will be overridden.
.Sp
See the \*(L"\s-1MODULE METADATA\*(R"\s0 section for details.
.IP "meta_merge" 4
.IX Item "meta_merge"
[version 0.28]
.Sp
A hash of key/value pairs that should be merged into the \fI\s-1META\s0.yml\fR
file during the \f(CW\*(C`distmeta\*(C'\fR action.  Any existing entries with the
same names will be overridden.
.Sp
The only difference between \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR is their
behavior on hash-valued and array-valued entries: \f(CW\*(C`meta_add\*(C'\fR will
completely blow away the existing hash or array value, but
\&\f(CW\*(C`meta_merge\*(C'\fR will merge the supplied data into the existing hash or
array value.
.Sp
See the \*(L"\s-1MODULE METADATA\*(R"\s0 section for details.
.IP "module_name" 4
.IX Item "module_name"
[version 0.03]
.Sp
The \f(CW\*(C`module_name\*(C'\fR is a shortcut for setting default values of
\&\f(CW\*(C`dist_name\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR, reflecting the fact that the
majority of \s-1CPAN\s0 distributions are centered around one \*(L"main\*(R" module.
For instance, if you set \f(CW\*(C`module_name\*(C'\fR to \f(CW\*(C`Foo::Bar\*(C'\fR, then
\&\f(CW\*(C`dist_name\*(C'\fR will default to \f(CW\*(C`Foo\-Bar\*(C'\fR and \f(CW\*(C`dist_version_from\*(C'\fR will
default to \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.  \f(CW\*(C`dist_version_from\*(C'\fR will in turn be
used to set \f(CW\*(C`dist_version\*(C'\fR.
.Sp
Setting \f(CW\*(C`module_name\*(C'\fR won't override a \f(CW\*(C`dist_*\*(C'\fR parameter you
specify explicitly.
.IP "needs_compiler" 4
.IX Item "needs_compiler"
[version 0.36]
.Sp
The \f(CW\*(C`needs_compiler\*(C'\fR parameter indicates whether a compiler is required to
build the distribution.  The default is false, unless \s-1XS\s0 files are found or
the \f(CW\*(C`c_source\*(C'\fR parameter is set, in which case it is true.  If true,
ExtUtils::CBuilder is automatically added to \f(CW\*(C`build_requires\*(C'\fR if needed.
.Sp
For a distribution where a compiler is \fIoptional\fR, e.g. a dual XS/pure\-Perl
distribution, \f(CW\*(C`needs_compiler\*(C'\fR should explicitly be set to a false value.
.IP "PL_files" 4
.IX Item "PL_files"
[version 0.06]
.Sp
An optional parameter specifying a set of \f(CW\*(C`.PL\*(C'\fR files in your
distribution.  These will be run as Perl scripts prior to processing
the rest of the files in your distribution with the name of the file
they're generating as an argument.  They are usually used as templates
for creating other files dynamically, so that a file like
\&\f(CW\*(C`lib/Foo/Bar.pm.PL\*(C'\fR might create the file \f(CW\*(C`lib/Foo/Bar.pm\*(C'\fR.
.Sp
The files are specified with the \f(CW\*(C`.PL\*(C'\fR files as hash keys, and the
file(s) they generate as hash values, like so:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     PL_files => { \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the path specifications are \fIalways\fR given in Unix-like
format, not in the style of the local system.
.Sp
If your \f(CW\*(C`.PL\*(C'\fR scripts don't create any files, or if they create files
with unexpected names, or even if they create multiple files, you can
indicate that so that Module::Build can properly handle these created
files:
.Sp
.Vb 5
\&  PL_files => {
\&               \*(Aqlib/Foo/Bar.pm.PL\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq,
\&               \*(Aqlib/something.PL\*(Aq  => [\*(Aq/lib/something\*(Aq, \*(Aq/lib/else\*(Aq],
\&               \*(Aqlib/funny.PL\*(Aq      => [],
\&              }
.Ve
.Sp
Here's an example of a simple \s-1PL\s0 file.
.Sp
.Vb 2
\&    my $output_file = shift;
\&    open my $fh, ">", $output_file or die "Can\*(Aqt open $output_file: $!";
\&
\&    print $fh <<\*(AqEND\*(Aq;
\&    #!/usr/bin/perl
\&
\&    print "Hello, world!\en";
\&    END
.Ve
.Sp
\&\s-1PL\s0 files are not installed by default, so its safe to put them in
\&\fIlib/\fR and \fIbin/\fR.
.IP "pm_files" 4
.IX Item "pm_files"
[version 0.19]
.Sp
An optional parameter specifying the set of \f(CW\*(C`.pm\*(C'\fR files in this
distribution, specified as a hash reference whose keys are the files'
locations in the distributions, and whose values are their logical
locations based on their package name, i.e. where they would be found
in a \*(L"normal\*(R" Module::Build\-style distribution.  This parameter is
mainly intended to support alternative layouts of files.
.Sp
For instance, if you have an old-style \f(CW\*(C`MakeMaker\*(C'\fR distribution for a
module called \f(CW\*(C`Foo::Bar\*(C'\fR and a \fIBar.pm\fR file at the top level of the
distribution, you could specify your layout in your \f(CW\*(C`Build.PL\*(C'\fR like
this:
.Sp
.Vb 6
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     ...
\&     pm_files => { \*(AqBar.pm\*(Aq => \*(Aqlib/Foo/Bar.pm\*(Aq },
\&    );
.Ve
.Sp
Note that the values should include \f(CW\*(C`lib/\*(C'\fR, because this is where
they would be found in a \*(L"normal\*(R" Module::Build\-style distribution.
.Sp
Note also that the path specifications are \fIalways\fR given in
Unix-like format, not in the style of the local system.
.IP "pod_files" 4
.IX Item "pod_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.pod\*(C'\fR
files in your distribution.
.IP "recommends" 4
.IX Item "recommends"
[version 0.08]
.Sp
This is just like the \*(L"requires\*(R" argument, except that modules listed
in this section aren't essential, just a good idea.  We'll just print
a friendly warning if one of these modules aren't found, but we'll
continue running.
.Sp
If a module is recommended but not required, all tests should still
pass if the module isn't installed.  This may mean that some tests
may be skipped if recommended dependencies aren't present.
.Sp
Automated tools like \s-1CPAN\s0.pm should inform the user when recommended
modules aren't installed, and it should offer to install them if it
wants to be helpful.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "recursive_test_files" 4
.IX Item "recursive_test_files"
[version 0.28]
.Sp
Normally, \f(CW\*(C`Module::Build\*(C'\fR does not search subdirectories when looking
for tests to run. When this options is set it will search recursively
in all subdirectories of the standard 't' test directory.
.IP "release_status" 4
.IX Item "release_status"
[version 0.37]
.Sp
The \s-1CPAN\s0 Meta Spec version 2 adds \f(CW\*(C`release_status\*(C'\fR to allow authors
to specify how a distribution should be indexed.  Consistent with the
spec, this parameter can only have one three values: 'stable',
\&'testing' or 'unstable'.
.Sp
Unless explicitly set by the author, \f(CW\*(C`release_status\*(C'\fR will default
to 'stable' unless \f(CW\*(C`dist_version\*(C'\fR contains an underscore, in which
case it will default to 'testing'.
.Sp
It is an error to specify a \f(CW\*(C`release_status\*(C'\fR of 'stable' when
\&\f(CW\*(C`dist_version\*(C'\fR contains an underscore character.
.IP "requires" 4
.IX Item "requires"
[version 0.07]
.Sp
An optional \f(CW\*(C`requires\*(C'\fR argument specifies any module prerequisites
that the current module depends on.
.Sp
One note: currently \f(CW\*(C`Module::Build\*(C'\fR doesn't actually \fIrequire\fR the
user to have dependencies installed, it just strongly urges.  In the
future we may require it.  There's also a \*(L"recommends\*(R" section for
things that aren't absolutely required.
.Sp
Automated tools like \s-1CPAN\s0.pm should refuse to install a module if one
of its dependencies isn't satisfied, unless a \*(L"force\*(R" command is given
by the user.  If the tools are helpful, they should also offer to
install the dependencies.
.Sp
A synonym for \f(CW\*(C`requires\*(C'\fR is \f(CW\*(C`prereq\*(C'\fR, to help succour people
transitioning from \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  The \f(CW\*(C`requires\*(C'\fR term is
preferred, but the \f(CW\*(C`prereq\*(C'\fR term will remain valid in future
distributions.
.Sp
See the documentation for \*(L"\s-1PREREQUISITES\*(R"\s0 in Module::Build::Authoring
for the details of how requirements can be specified.
.IP "script_files" 4
.IX Item "script_files"
[version 0.18]
.Sp
An optional parameter specifying a set of files that should be
installed as executable Perl scripts when the module is installed.
May be given as an array reference of the files, as a hash reference
whose keys are the files (and whose values will currently be ignored),
as a string giving the name of a directory in which to find scripts,
or as a string giving the name of a single script file.
.Sp
The default is to install any scripts found in a \fIbin\fR directory at
the top level of the distribution, minus any keys of PL_files.
.Sp
For backward compatibility, you may use the parameter \f(CW\*(C`scripts\*(C'\fR
instead of \f(CW\*(C`script_files\*(C'\fR.  Please consider this usage deprecated,
though it will continue to exist for several version releases.
.IP "share_dir" 4
.IX Item "share_dir"
[version 0.36]
.Sp
An optional parameter specifying directories of static data files to
be installed as read-only files for use with File::ShareDir.  The
\&\f(CW\*(C`share_dir\*(C'\fR property supports both distribution-level and
module-level share files.
.Sp
The simplest use of \f(CW\*(C`share_dir\*(C'\fR is to set it to a directory name or an
arrayref of directory names containing files to be installed in the
distribution-level share directory.
.Sp
.Vb 1
\&  share_dir => \*(Aqshare\*(Aq
.Ve
.Sp
Alternatively, if \f(CW\*(C`share_dir\*(C'\fR is a hashref, it may have \f(CW\*(C`dist\*(C'\fR or
\&\f(CW\*(C`module\*(C'\fR keys providing full flexibility in defining how share
directories should be installed.
.Sp
.Vb 7
\&  share_dir => {
\&    dist => [ \*(Aqexamples\*(Aq, \*(Aqmore_examples\*(Aq ],
\&    module => {
\&      Foo::Templates => [\*(Aqshare/html\*(Aq, \*(Aqshare/text\*(Aq],
\&      Foo::Config    => \*(Aqshare/config\*(Aq,
\&    }
\&  }
.Ve
.Sp
If \f(CW\*(C`share_dir\*(C'\fR is set, then File::ShareDir will automatically be added
to the \f(CW\*(C`requires\*(C'\fR hash.
.IP "sign" 4
.IX Item "sign"
[version 0.16]
.Sp
If a true value is specified for this parameter, Module::Signature
will be used (via the 'distsign' action) to create a \s-1SIGNATURE\s0 file
for your distribution during the 'distdir' action, and to add the
\&\s-1SIGNATURE\s0 file to the \s-1MANIFEST \s0(therefore, don't add it yourself).
.Sp
The default value is false.  In the future, the default may change to
true if you have \f(CW\*(C`Module::Signature\*(C'\fR installed on your system.
.IP "tap_harness_args" 4
.IX Item "tap_harness_args"
[version 0.2808_03]
.Sp
An optional parameter specifying parameters to be passed to TAP::Harness when
running tests. Must be given as a hash reference of parameters; see the
TAP::Harness documentation for details. Note that specifying
this parameter will implicitly set \f(CW\*(C`use_tap_harness\*(C'\fR to a true value. You
must therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R".
.IP "test_files" 4
.IX Item "test_files"
[version 0.23]
.Sp
An optional parameter specifying a set of files that should be used as
\&\f(CW\*(C`Test::Harness\*(C'\fR\-style regression tests to be run during the \f(CW\*(C`test\*(C'\fR
action.  May be given as an array reference of the files, or as a hash
reference whose keys are the files (and whose values will currently be
ignored).  If the argument is given as a single string (not in an
array reference), that string will be treated as a \f(CW\*(C`glob()\*(C'\fR pattern
specifying the files to use.
.Sp
The default is to look for a \fItest.pl\fR script in the top-level
directory of the distribution, and any files matching the glob pattern
\&\f(CW\*(C`*.t\*(C'\fR in the \fIt/\fR subdirectory.  If the \f(CW\*(C`recursive_test_files\*(C'\fR
property is true, then the \f(CW\*(C`t/\*(C'\fR directory will be scanned recursively
for \f(CW\*(C`*.t\*(C'\fR files.
.IP "use_tap_harness" 4
.IX Item "use_tap_harness"
[version 0.2808_03]
.Sp
An optional parameter indicating whether or not to use TAP::Harness for
testing rather than Test::Harness. Defaults to false. If set to true, you must
therefore be sure to add TAP::Harness as a requirement for your module in
\&\*(L"build_requires\*(R". Implicitly set to a true value if \f(CW\*(C`tap_harness_args\*(C'\fR is
specified.
.IP "xs_files" 4
.IX Item "xs_files"
[version 0.19]
.Sp
Just like \f(CW\*(C`pm_files\*(C'\fR, but used for specifying the set of \f(CW\*(C`.xs\*(C'\fR
files in your distribution.
.RE
.RS 4
.RE
.IP "new_from_context(%args)" 4
.IX Item "new_from_context(%args)"
[version 0.28]
.Sp
When called from a directory containing a \fIBuild.PL\fR script (in other words,
the base directory of a distribution), this method will run the \fIBuild.PL\fR and
call \f(CW\*(C`resume()\*(C'\fR to return the resulting \f(CW\*(C`Module::Build\*(C'\fR object to the caller.
Any key-value arguments given to \f(CW\*(C`new_from_context()\*(C'\fR are essentially like
command line arguments given to the \fIBuild.PL\fR script, so for example you
could pass \f(CW\*(C`verbose => 1\*(C'\fR to this method to turn on verbosity.
.IP "\fIresume()\fR" 4
.IX Item "resume()"
[version 0.03]
.Sp
You'll probably never call this method directly, it's only called from the
auto-generated \f(CW\*(C`Build\*(C'\fR script (and the \f(CW\*(C`new_from_context\*(C'\fR method).  The
\&\f(CW\*(C`new()\*(C'\fR method is only called once, when the user runs \f(CW\*(C`perl Build.PL\*(C'\fR.
Thereafter, when the user runs \f(CW\*(C`Build test\*(C'\fR or another action, the
\&\f(CW\*(C`Module::Build\*(C'\fR object is created using the \f(CW\*(C`resume()\*(C'\fR method to
re-instantiate with the settings given earlier to \f(CW\*(C`new()\*(C'\fR.
.IP "\fIsubclass()\fR" 4
.IX Item "subclass()"
[version 0.06]
.Sp
This creates a new \f(CW\*(C`Module::Build\*(C'\fR subclass on the fly, as described
in the \*(L"\s-1SUBCLASSING\*(R"\s0 in Module::Build::Authoring section.  The caller
must provide either a \f(CW\*(C`class\*(C'\fR or \f(CW\*(C`code\*(C'\fR parameter, or both.  The
\&\f(CW\*(C`class\*(C'\fR parameter indicates the name to use for the new subclass, and
defaults to \f(CW\*(C`MyModuleBuilder\*(C'\fR.  The \f(CW\*(C`code\*(C'\fR parameter specifies Perl
code to use as the body of the subclass.
.IP "add_property" 4
.IX Item "add_property"
[version 0.31]
.Sp
.Vb 10
\&  package \*(AqMy::Build\*(Aq;
\&  use base \*(AqModule::Build\*(Aq;
\&  _\|_PACKAGE_\|_\->add_property( \*(Aqpedantic\*(Aq );
\&  _\|_PACKAGE_\|_\->add_property( answer => 42 );
\&  _\|_PACKAGE_\|_\->add_property(
\&     \*(Aqepoch\*(Aq,
\&      default => sub { time },
\&      check   => sub {
\&          return 1 if /^\ed+$/;
\&          shift\->property_error( "\*(Aq$_\*(Aq is not an epoch time" );
\&          return 0;
\&      },
\&  );
.Ve
.Sp
Adds a property to a Module::Build class. Properties are those attributes of a
Module::Build object which can be passed to the constructor and which have
accessors to get and set them. All of the core properties, such as
\&\f(CW\*(C`module_name\*(C'\fR and \f(CW\*(C`license\*(C'\fR, are defined using this class method.
.Sp
The first argument to \f(CW\*(C`add_property()\*(C'\fR is always the name of the property.
The second argument can be either a default value for the property, or a list
of key/value pairs. The supported keys are:
.RS 4
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
The default value. May optionally be specified as a code reference, in which
case the return value from the execution of the code reference will be used.
If you need the default to be a code reference, just use a code reference to
return it, e.g.:
.Sp
.Vb 1
\&      default => sub { sub { ... } },
.Ve
.ie n .IP """check""" 4
.el .IP "\f(CWcheck\fR" 4
.IX Item "check"
A code reference that checks that a value specified for the property is valid.
During the execution of the code reference, the new value will be included in
the \f(CW$_\fR variable. If the value is correct, the \f(CW\*(C`check\*(C'\fR code reference
should return true. If the value is not correct, it sends an error message to
\&\f(CW\*(C`property_error()\*(C'\fR and returns false.
.RE
.RS 4
.Sp
When this method is called, a new property will be installed in the
Module::Build class, and an accessor will be built to allow the property to be
get or set on the build object.
.Sp
.Vb 2
\&  print $build\->pedantic, $/;
\&  $build\->pedantic(0);
.Ve
.Sp
If the default value is a hash reference, this generates a special-case
accessor method, wherein individual key/value pairs may be set or fetched:
.Sp
.Vb 3
\&  print "stuff{foo} is: ", $build\->stuff( \*(Aqfoo\*(Aq ), $/;
\&  $build\->stuff( foo => \*(Aqbar\*(Aq );
\&  print $build\->stuff( \*(Aqfoo\*(Aq ), $/; # Outputs "bar"
.Ve
.Sp
Of course, you can still set the entire hash reference at once, as well:
.Sp
.Vb 1
\&  $build\->stuff( { foo => \*(Aqbar\*(Aq, baz => \*(Aqyo\*(Aq } );
.Ve
.Sp
In either case, if a \f(CW\*(C`check\*(C'\fR has been specified for the property, it will be
applied to the entire hash. So the check code reference should look something
like:
.Sp
.Vb 5
\&      check => sub {
\&            return 1 if defined $_ && exists $_\->{foo};
\&            shift\->property_error(qq{Property "stuff" needs "foo"});
\&            return 0;
\&      },
.Ve
.RE
.IP "property_error" 4
.IX Item "property_error"
[version 0.31]
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "add_build_element($type)" 4
.IX Item "add_build_element($type)"
[version 0.26]
.Sp
Adds a new type of entry to the build process.  Accepts a single
string specifying its type-name.  There must also be a method defined
to process things of that type, e.g. if you add a build element called
\&\f(CW\*(Aqfoo\*(Aq\fR, then you must also define a method called
\&\f(CW\*(C`process_foo_files()\*(C'\fR.
.Sp
See also
\&\*(L"Adding new file types to the build process\*(R" in Module::Build::Cookbook.
.IP "add_to_cleanup(@files)" 4
.IX Item "add_to_cleanup(@files)"
[version 0.03]
.Sp
You may call \f(CW\*(C`$self\->add_to_cleanup(@patterns)\*(C'\fR to tell
\&\f(CW\*(C`Module::Build\*(C'\fR that certain files should be removed when the user
performs the \f(CW\*(C`Build clean\*(C'\fR action.  The arguments to the method are
patterns suitable for passing to Perl's \f(CW\*(C`glob()\*(C'\fR function, specified
in either Unix format or the current machine's native format.  It's
usually convenient to use Unix format when you hard-code the filenames
(e.g. in \fIBuild.PL\fR) and the native format when the names are
programmatically generated (e.g. in a testing script).
.Sp
I decided to provide a dynamic method of the \f(CW$build\fR object, rather
than just use a static list of files named in the \fIBuild.PL\fR, because
these static lists can get difficult to manage.  I usually prefer to
keep the responsibility for registering temporary files close to the
code that creates them.
.IP "\fIargs()\fR" 4
.IX Item "args()"
[version 0.26]
.Sp
.Vb 4
\&  my $args_href = $build\->args;
\&  my %args = $build\->args;
\&  my $arg_value = $build\->args($key);
\&  $build\->args($key, $value);
.Ve
.Sp
This method is the preferred interface for retrieving the arguments passed via
command line options to \fIBuild.PL\fR or \fIBuild\fR, minus the Module-Build
specific options.
.Sp
When called in in a scalar context with no arguments, this method returns a
reference to the hash storing all of the arguments; in an array context, it
returns the hash itself.  When passed a single argument, it returns the value
stored in the args hash for that option key.  When called with two arguments,
the second argument is assigned to the args hash under the key passed as the
first argument.
.ie n .IP "autosplit_file($from, $to)" 4
.el .IP "autosplit_file($from, \f(CW$to\fR)" 4
.IX Item "autosplit_file($from, $to)"
[version 0.28]
.Sp
Invokes the AutoSplit module on the \f(CW$from\fR file, sending the
output to the \f(CW\*(C`lib/auto\*(C'\fR directory inside \f(CW$to\fR.  \f(CW$to\fR is
typically the \f(CW\*(C`blib/\*(C'\fR directory.
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
[version 0.14]
.Sp
Returns a string containing the root-level directory of this build,
i.e. where the \f(CW\*(C`Build.PL\*(C'\fR script and the \f(CW\*(C`lib\*(C'\fR directory can be
found.  This is usually the same as the current working directory,
because the \f(CW\*(C`Build\*(C'\fR script will \f(CW\*(C`chdir()\*(C'\fR into this directory as
soon as it begins execution.
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`build_requires\*(C'\fR
prerequisites that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "can_action( $action )" 4
.el .IP "can_action( \f(CW$action\fR )" 4
.IX Item "can_action( $action )"
Returns a reference to the method that defines \f(CW$action\fR, or false
otherwise. This is handy for actions defined (or maybe not!) in subclasses.
.Sp
[version 0.32_xx]
.IP "\fIcbuilder()\fR" 4
.IX Item "cbuilder()"
[version 0.2809]
.Sp
Returns the internal ExtUtils::CBuilder object that can be used for
compiling & linking C code.  If no such object is available (e.g. if
the system has no compiler installed) an exception will be thrown.
.ie n .IP "check_installed_status($module, $version)" 4
.el .IP "check_installed_status($module, \f(CW$version\fR)" 4
.IX Item "check_installed_status($module, $version)"
[version 0.11]
.Sp
This method returns a hash reference indicating whether a version
dependency on a certain module is satisfied.  The \f(CW$module\fR argument
is given as a string like \f(CW"Data::Dumper"\fR or \f(CW"perl"\fR, and the
\&\f(CW$version\fR argument can take any of the forms described in \*(L"requires\*(R"
above.  This allows very fine-grained version checking.
.Sp
The returned hash reference has the following structure:
.Sp
.Vb 6
\&  {
\&   ok => $whether_the_dependency_is_satisfied,
\&   have => $version_already_installed,
\&   need => $version_requested, # Same as incoming $version argument
\&   message => $informative_error_message,
\&  }
.Ve
.Sp
If no version of \f(CW$module\fR is currently installed, the \f(CW\*(C`have\*(C'\fR value
will be the string \f(CW"<none>"\fR.  Otherwise the \f(CW\*(C`have\*(C'\fR value will
simply be the version of the installed module.  Note that this means
that if \f(CW$module\fR is installed but doesn't define a version number,
the \f(CW\*(C`have\*(C'\fR value will be \f(CW\*(C`undef\*(C'\fR \- this is why we don't use \f(CW\*(C`undef\*(C'\fR
for the case when \f(CW$module\fR isn't installed at all.
.Sp
This method may be called either as an object method
(\f(CW\*(C`$build\->check_installed_status($module, $version)\*(C'\fR)
or as a class method
(\f(CW\*(C`Module::Build\->check_installed_status($module, $version)\*(C'\fR).
.ie n .IP "check_installed_version($module, $version)" 4
.el .IP "check_installed_version($module, \f(CW$version\fR)" 4
.IX Item "check_installed_version($module, $version)"
[version 0.05]
.Sp
Like \fIcheck_installed_status()\fR,
but simply returns true or false depending on whether module
\&\f(CW$module\fR satisfies the dependency \f(CW$version\fR.
.Sp
If the check succeeds, the return value is the actual version of
\&\f(CW$module\fR installed on the system.  This allows you to do the
following:
.Sp
.Vb 6
\&  my $installed = $build\->check_installed_version(\*(AqDBI\*(Aq, \*(Aq1.15\*(Aq);
\&  if ($installed) {
\&    print "Congratulations, version $installed of DBI is installed.\en";
\&  } else {
\&    die "Sorry, you must install DBI.\en";
\&  }
.Ve
.Sp
If the check fails, we return false and set \f(CW$@\fR to an informative
error message.
.Sp
If \f(CW$version\fR is any non-true value (notably zero) and any version of
\&\f(CW$module\fR is installed, we return true.  In this case, if \f(CW$module\fR
doesn't define a version, or if its version is zero, we return the
special value \*(L"0 but true\*(R", which is numerically zero, but logically
true.
.Sp
In general you might prefer to use \f(CW\*(C`check_installed_status\*(C'\fR if you
need detailed information, or this method if you just need a yes/no
answer.
.ie n .IP "compare_versions($v1, $op, $v2)" 4
.el .IP "compare_versions($v1, \f(CW$op\fR, \f(CW$v2\fR)" 4
.IX Item "compare_versions($v1, $op, $v2)"
[version 0.28]
.Sp
Compares two module versions \f(CW$v1\fR and \f(CW$v2\fR using the operator
\&\f(CW$op\fR, which should be one of Perl's numeric operators like \f(CW\*(C`!=\*(C'\fR or
\&\f(CW\*(C`>=\*(C'\fR or the like.  We do at least a halfway-decent job of
handling versions that aren't strictly numeric, like \f(CW\*(C`0.27_02\*(C'\fR, but
exotic stuff will likely cause problems.
.Sp
In the future, the guts of this method might be replaced with a call
out to \f(CW\*(C`version.pm\*(C'\fR.
.IP "config($key)" 4
.IX Item "config($key)"
.PD 0
.ie n .IP "config($key, $value)" 4
.el .IP "config($key, \f(CW$value\fR)" 4
.IX Item "config($key, $value)"
.IP "\fIconfig()\fR [deprecated]" 4
.IX Item "config() [deprecated]"
.PD
[version 0.22]
.Sp
With a single argument \f(CW$key\fR, returns the value associated with that
key in the \f(CW\*(C`Config.pm\*(C'\fR hash, including any changes the author or user
has specified.
.Sp
With \f(CW$key\fR and \f(CW$value\fR arguments, sets the value for future
callers of \f(CW\*(C`config($key)\*(C'\fR.
.Sp
With no arguments, returns a hash reference containing all such
key-value pairs.  This usage is deprecated, though, because it's a
resource hog and violates encapsulation.
.IP "config_data($name)" 4
.IX Item "config_data($name)"
.PD 0
.ie n .IP "config_data($name => $value)" 4
.el .IP "config_data($name => \f(CW$value\fR)" 4
.IX Item "config_data($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns the value of the configuration
variable \f(CW$name\fR.  With two arguments, sets the given configuration
variable to the given value.  The value may be any Perl scalar that's
serializable with \f(CW\*(C`Data::Dumper\*(C'\fR.  For instance, if you write a
module that can use a MySQL or PostgreSQL back-end, you might create
configuration variables called \f(CW\*(C`mysql_connect\*(C'\fR and
\&\f(CW\*(C`postgres_connect\*(C'\fR, and set each to an array of connection parameters
for \f(CW\*(C`DBI\->connect()\*(C'\fR.
.Sp
Configuration values set in this way using the Module::Build object
will be available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->config($name)\*(C'\fR.
.Sp
The \fIfeature()\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING CONFIGURATION INFORMATION\*(R"\s0 in Module::Build::Authoring.
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`conflicts\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "contains_pod($file) [deprecated]" 4
.IX Item "contains_pod($file) [deprecated]"
[version 0.20]
.Sp
[Deprecated] Please see Module::Build::ModuleInfo instead.
.Sp
Returns true if the given file appears to contain \s-1POD\s0 documentation.
Currently this checks whether the file has a line beginning with
\&'=pod', '=head', or '=item', but the exact semantics may change in the
future.
.IP "copy_if_modified(%parameters)" 4
.IX Item "copy_if_modified(%parameters)"
[version 0.19]
.Sp
Takes the file in the \f(CW\*(C`from\*(C'\fR parameter and copies it to the file in
the \f(CW\*(C`to\*(C'\fR parameter, or the directory in the \f(CW\*(C`to_dir\*(C'\fR parameter, if
the file has changed since it was last copied (or if it doesn't exist
in the new location).  By default the entire directory structure of
\&\f(CW\*(C`from\*(C'\fR will be copied into \f(CW\*(C`to_dir\*(C'\fR; an optional \f(CW\*(C`flatten\*(C'\fR
parameter will copy into \f(CW\*(C`to_dir\*(C'\fR without doing so.
.Sp
Returns the path to the destination file, or \f(CW\*(C`undef\*(C'\fR if nothing
needed to be copied.
.Sp
Any directories that need to be created in order to perform the
copying will be automatically created.
.Sp
The destination file is set to read-only. If the source file has the
executable bit set, then the destination file will be made executable.
.IP "\fIcreate_build_script()\fR" 4
.IX Item "create_build_script()"
[version 0.05]
.Sp
Creates an executable script called \f(CW\*(C`Build\*(C'\fR in the current directory
that will be used to execute further user actions.  This script is
roughly analogous (in function, not in form) to the Makefile created
by \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.  This method also creates some temporary
data in a directory called \f(CW\*(C`_build/\*(C'\fR.  Both of these will be removed
when the \f(CW\*(C`realclean\*(C'\fR action is performed.
.Sp
Among the files created in \f(CW\*(C`_build/\*(C'\fR is a \fI_build/prereqs\fR file
containing the set of prerequisites for this distribution, as a hash
of hashes.  This file may be \f(CW\*(C`eval()\*(C'\fR\-ed to obtain the authoritative
set of prerequisites, which might be different from the contents of
\&\fI\s-1META\s0.yml\fR (because \fIBuild.PL\fR might have set them dynamically).
But fancy developers take heed: do not put any fancy custom runtime
code in the \fI_build/prereqs\fR file, leave it as a static declaration
containing only strings and numbers.  Similarly, do not alter the
structure of the internal \f(CW\*(C`$self\->{properties}{requires}\*(C'\fR (etc.)
data members, because that's where this data comes from.
.IP "\fIcurrent_action()\fR" 4
.IX Item "current_action()"
[version 0.28]
.Sp
Returns the name of the currently-running action, such as \*(L"build\*(R" or
\&\*(L"test\*(R".  This action is not necessarily the action that was originally
invoked by the user.  For example, if the user invoked the \*(L"test\*(R"
action, \fIcurrent_action()\fR would initially return \*(L"test\*(R".  However,
action \*(L"test\*(R" depends on action \*(L"code\*(R", so \fIcurrent_action()\fR will
return \*(L"code\*(R" while that dependency is being executed.  Once that
action has completed, \fIcurrent_action()\fR will again return \*(L"test\*(R".
.Sp
If you need to know the name of the original action invoked by the
user, see \*(L"\fIinvoked_action()\fR\*(R" below.
.IP "depends_on(@actions)" 4
.IX Item "depends_on(@actions)"
[version 0.28]
.Sp
Invokes the named action or list of actions in sequence.  Using this
method is preferred to calling the action explicitly because it
performs some internal record-keeping, and it ensures that the same
action is not invoked multiple times (note: in future versions of
Module::Build it's conceivable that this run-only-once mechanism will
be changed to something more intelligent).
.Sp
Note that the name of this method is something of a misnomer; it
should really be called something like
\&\f(CW\*(C`invoke_actions_unless_already_invoked()\*(C'\fR or something, but for
better or worse (perhaps better!) we were still thinking in
\&\f(CW\*(C`make\*(C'\fR\-like dependency terms when we created this method.
.Sp
See also \fIdispatch()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.ie n .IP "dir_contains($first_dir, $second_dir)" 4
.el .IP "dir_contains($first_dir, \f(CW$second_dir\fR)" 4
.IX Item "dir_contains($first_dir, $second_dir)"
[version 0.28]
.Sp
Returns true if the first directory logically contains the second
directory.  This is just a convenience function because \f(CW\*(C`File::Spec\*(C'\fR
doesn't really provide an easy way to figure this out (but
\&\f(CW\*(C`Path::Class\*(C'\fR does...).
.ie n .IP "dispatch($action, %args)" 4
.el .IP "dispatch($action, \f(CW%args\fR)" 4
.IX Item "dispatch($action, %args)"
[version 0.03]
.Sp
Invokes the build action \f(CW$action\fR.  Optionally, a list of options
and their values can be passed in.  This is equivalent to invoking an
action at the command line, passing in a list of options.
.Sp
Custom options that have not been registered must be passed in as a
hash reference in a key named \*(L"args\*(R":
.Sp
.Vb 1
\&  $build\->dispatch(\*(Aqfoo\*(Aq, verbose => 1, args => { my_option => \*(Aqvalue\*(Aq });
.Ve
.Sp
This method is intended to be used to programmatically invoke build
actions, e.g. by applications controlling Module::Build\-based builds
rather than by subclasses.
.Sp
See also \fIdepends_on()\fR.  The main
distinction between the two is that \f(CW\*(C`depends_on()\*(C'\fR is meant to call
an action from inside another action, whereas \f(CW\*(C`dispatch()\*(C'\fR is meant
to set the very top action in motion.
.IP "\fIdist_dir()\fR" 4
.IX Item "dist_dir()"
[version 0.28]
.Sp
Returns the name of the directory that will be created during the
\&\f(CW\*(C`dist\*(C'\fR action.  The name is derived from the \f(CW\*(C`dist_name\*(C'\fR and
\&\f(CW\*(C`dist_version\*(C'\fR properties.
.IP "\fIdist_name()\fR" 4
.IX Item "dist_name()"
[version 0.21]
.Sp
Returns the name of the current distribution, as passed to the
\&\f(CW\*(C`new()\*(C'\fR method in a \f(CW\*(C`dist_name\*(C'\fR or modified \f(CW\*(C`module_name\*(C'\fR
parameter.
.IP "\fIdist_version()\fR" 4
.IX Item "dist_version()"
[version 0.21]
.Sp
Returns the version of the current distribution, as determined by the
\&\f(CW\*(C`new()\*(C'\fR method from a \f(CW\*(C`dist_version\*(C'\fR, \f(CW\*(C`dist_version_from\*(C'\fR, or
\&\f(CW\*(C`module_name\*(C'\fR parameter.
.ie n .IP "do_system($cmd, @args)" 4
.el .IP "do_system($cmd, \f(CW@args\fR)" 4
.IX Item "do_system($cmd, @args)"
[version 0.21]
.Sp
This is a fairly simple wrapper around Perl's \f(CW\*(C`system()\*(C'\fR built-in
command.  Given a command and an array of optional arguments, this
method will print the command to \f(CW\*(C`STDOUT\*(C'\fR, and then execute it using
Perl's \f(CW\*(C`system()\*(C'\fR.  It returns true or false to indicate success or
failure (the opposite of how \f(CW\*(C`system()\*(C'\fR works, but more intuitive).
.Sp
Note that if you supply a single argument to \f(CW\*(C`do_system()\*(C'\fR, it
will/may be processed by the system's shell, and any special
characters will do their special things.  If you supply multiple
arguments, no shell will get involved and the command will be executed
directly.
.IP "\fIextra_compiler_flags()\fR" 4
.IX Item "extra_compiler_flags()"
.PD 0
.IP "extra_compiler_flags(@flags)" 4
.IX Item "extra_compiler_flags(@flags)"
.PD
[version 0.25]
.Sp
Set or retrieve the extra compiler flags. Returns an arrayref of flags.
.IP "\fIextra_linker_flags()\fR" 4
.IX Item "extra_linker_flags()"
.PD 0
.IP "extra_linker_flags(@flags)" 4
.IX Item "extra_linker_flags(@flags)"
.PD
[version 0.25]
.Sp
Set or retrieve the extra linker flags. Returns an arrayref of flags.
.IP "feature($name)" 4
.IX Item "feature($name)"
.PD 0
.ie n .IP "feature($name => $value)" 4
.el .IP "feature($name => \f(CW$value\fR)" 4
.IX Item "feature($name => $value)"
.PD
[version 0.26]
.Sp
With a single argument, returns true if the given feature is set.
With two arguments, sets the given feature to the given boolean value.
In this context, a \*(L"feature\*(R" is any optional functionality of an
installed module.  For instance, if you write a module that could
optionally support a MySQL or PostgreSQL backend, you might create
features called \f(CW\*(C`mysql_support\*(C'\fR and \f(CW\*(C`postgres_support\*(C'\fR, and set them
to true/false depending on whether the user has the proper databases
installed and configured.
.Sp
Features set in this way using the Module::Build object will be
available for querying during the build/test process and after
installation via the generated \f(CW\*(C`...::ConfigData\*(C'\fR module, as
\&\f(CW\*(C`...::ConfigData\->feature($name)\*(C'\fR.
.Sp
The \f(CW\*(C`feature()\*(C'\fR and \f(CW\*(C`config_data()\*(C'\fR methods represent
Module::Build's main support for configuration of installed modules.
See also \*(L"\s-1SAVING CONFIGURATION INFORMATION\*(R"\s0 in Module::Build::Authoring.
.IP "fix_shebang_line(@files)" 4
.IX Item "fix_shebang_line(@files)"
[version 0.??]
.Sp
Modify any \*(L"shebang\*(R" line in the specified files to use the path to the
perl executable being used for the current build.  Files are modified
in-place.  The existing shebang line must have a command that contains
"\f(CW\*(C`perl\*(C'\fR"; arguments to the command do not count.  In particular, this
means that the use of \f(CW\*(C`#!/usr/bin/env perl\*(C'\fR will not be changed.
.Sp
For an explanation of shebang lines, see
<http://en.wikipedia.org/wiki/Shebang_%28Unix%29>.
.IP "\fIhave_c_compiler()\fR" 4
.IX Item "have_c_compiler()"
[version 0.21]
.Sp
Returns true if the current system seems to have a working C compiler.
We currently determine this by attempting to compile a simple C source
file and reporting whether the attempt was successful.
.IP "\fIinstall_base_relpaths()\fR" 4
.IX Item "install_base_relpaths()"
.PD 0
.IP "install_base_relpaths($type)" 4
.IX Item "install_base_relpaths($type)"
.ie n .IP "install_base_relpaths($type => $path)" 4
.el .IP "install_base_relpaths($type => \f(CW$path\fR)" 4
.IX Item "install_base_relpaths($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to
\&\f(CW\*(C`install_base\*(C'\fR for any installable element. This is useful if you
want to set the relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "install_destination($type)" 4
.IX Item "install_destination($type)"
[version 0.28]
.Sp
Returns the directory in which items of type \f(CW$type\fR (e.g. \f(CW\*(C`lib\*(C'\fR,
\&\f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR, or anything else returned by the \*(L"\fIinstall_types()\fR\*(R"
method) will be installed during the \f(CW\*(C`install\*(C'\fR action.  Any settings
for \f(CW\*(C`install_path\*(C'\fR, \f(CW\*(C`install_base\*(C'\fR, and \f(CW\*(C`prefix\*(C'\fR are taken into
account when determining the return value.
.IP "\fIinstall_path()\fR" 4
.IX Item "install_path()"
.PD 0
.IP "install_path($type)" 4
.IX Item "install_path($type)"
.ie n .IP "install_path($type => $path)" 4
.el .IP "install_path($type => \f(CW$path\fR)" 4
.IX Item "install_path($type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve paths for specific installable elements. This is
useful when you want to examine any explicit install paths specified
by the user on the command line, or if you want to set the install
path for a specific installable element based on another attribute
like \f(CW\*(C`install_base()\*(C'\fR.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values. This hash should not be modified
directly; use the multiple argument below form to change values.
.Sp
The single argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
The supplied \f(CW$path\fR should be an absolute path to install elements
of \f(CW$type\fR.  The return value is \f(CW$path\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIinstall_types()\fR" 4
.IX Item "install_types()"
[version 0.28]
.Sp
Returns a list of installable types that this build knows about.
These types each correspond to the name of a directory in \fIblib/\fR,
and the list usually includes items such as \f(CW\*(C`lib\*(C'\fR, \f(CW\*(C`arch\*(C'\fR, \f(CW\*(C`bin\*(C'\fR,
\&\f(CW\*(C`script\*(C'\fR, \f(CW\*(C`libdoc\*(C'\fR, \f(CW\*(C`bindoc\*(C'\fR, and if \s-1HTML\s0 documentation is to be
built, \f(CW\*(C`libhtml\*(C'\fR and \f(CW\*(C`binhtml\*(C'\fR.  Other user-defined types may also
exist.
.IP "\fIinvoked_action()\fR" 4
.IX Item "invoked_action()"
[version 0.28]
.Sp
This is the name of the original action invoked by the user.  This
value is set when the user invokes \fIBuild.PL\fR, the \fIBuild\fR script,
or programmatically through the \fIdispatch()\fR
method.  It does not change as sub-actions are executed as
dependencies are evaluated.
.Sp
To get the name of the currently executing dependency, see
\&\*(L"\fIcurrent_action()\fR\*(R" above.
.IP "\fInotes()\fR" 4
.IX Item "notes()"
.PD 0
.IP "notes($key)" 4
.IX Item "notes($key)"
.ie n .IP "notes($key => $value)" 4
.el .IP "notes($key => \f(CW$value\fR)" 4
.IX Item "notes($key => $value)"
.PD
[version 0.20]
.Sp
The \f(CW\*(C`notes()\*(C'\fR value allows you to store your own persistent
information about the build, and to share that information among
different entities involved in the build.  See the example in the
\&\f(CW\*(C`current()\*(C'\fR method.
.Sp
The \f(CW\*(C`notes()\*(C'\fR method is essentially a glorified hash access.  With no
arguments, \f(CW\*(C`notes()\*(C'\fR returns the entire hash of notes.  With one argument,
\&\f(CW\*(C`notes($key)\*(C'\fR returns the value associated with the given key.  With two
arguments, \f(CW\*(C`notes($key, $value)\*(C'\fR sets the value associated with the given key
to \f(CW$value\fR and returns the new value.
.Sp
The lifetime of the \f(CW\*(C`notes\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`notes\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is run, if the Module::Build Perl \s-1API\s0 is being used
instead of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is
run again or the \f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
[version 0.28]
.Sp
Returns a string containing the working directory that was in effect
before the \fIBuild\fR script \fIchdir()\fR\-ed into the \f(CW\*(C`base_dir\*(C'\fR.  This
might be useful for writing wrapper tools that might need to \fIchdir()\fR
back out.
.IP "\fIos_type()\fR" 4
.IX Item "os_type()"
[version 0.04]
.Sp
If you're subclassing Module::Build and some code needs to alter its
behavior based on the current platform, you may only need to know
whether you're running on Windows, Unix, MacOS, \s-1VMS,\s0 etc., and not the
fine-grained value of Perl's \f(CW$^O\fR variable.  The \f(CW\*(C`os_type()\*(C'\fR method
will return a string like \f(CW\*(C`Windows\*(C'\fR, \f(CW\*(C`Unix\*(C'\fR, \f(CW\*(C`MacOS\*(C'\fR, \f(CW\*(C`VMS\*(C'\fR, or
whatever is appropriate.  If you're running on an unknown platform, it
will return \f(CW\*(C`undef\*(C'\fR \- there shouldn't be many unknown platforms
though.
.IP "\fIis_vmsish()\fR" 4
.IX Item "is_vmsish()"
.PD 0
.IP "\fIis_windowsish()\fR" 4
.IX Item "is_windowsish()"
.IP "\fIis_unixish()\fR" 4
.IX Item "is_unixish()"
.PD
Convenience functions that return a boolean value indicating whether
this platform behaves respectively like \s-1VMS,\s0 Windows, or Unix.  For
arbitrary reasons other platforms don't get their own such functions,
at least not yet.
.IP "\fIprefix_relpaths()\fR" 4
.IX Item "prefix_relpaths()"
.PD 0
.IP "prefix_relpaths($installdirs)" 4
.IX Item "prefix_relpaths($installdirs)"
.ie n .IP "prefix_relpaths($installdirs, $type)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type)"
.ie n .IP "prefix_relpaths($installdirs, $type => $path)" 4
.el .IP "prefix_relpaths($installdirs, \f(CW$type\fR => \f(CW$path\fR)" 4
.IX Item "prefix_relpaths($installdirs, $type => $path)"
.PD
[version 0.28]
.Sp
Set or retrieve the relative paths that are appended to \f(CW\*(C`prefix\*(C'\fR for
any installable element.  This is useful if you want to set the
relative install path for custom build elements.
.Sp
With no argument, it returns a reference to a hash containing all
elements and their respective values as defined by the current
\&\f(CW\*(C`installdirs\*(C'\fR setting.
.Sp
With a single argument, it returns a reference to a hash containing
all elements and their respective values as defined by
\&\f(CW$installdirs\fR.
.Sp
The hash returned by the above calls should not be modified directly;
use the three-argument below form to change values.
.Sp
The two argument form returns the value associated with the
element \f(CW$type\fR.
.Sp
The multiple argument form allows you to set the paths for element types.
\&\f(CW$value\fR must be a relative path using Unix-like paths.  (A series of
directories separated by slashes, e.g. \f(CW\*(C`foo/bar\*(C'\fR.)  The return value is a
localized path based on \f(CW$value\fR.
.Sp
Assigning the value \f(CW\*(C`undef\*(C'\fR to an element causes it to be removed.
.IP "\fIget_metadata()\fR" 4
.IX Item "get_metadata()"
[version 0.36]
.Sp
This method returns a hash reference of metadata that can be used to create a
\&\s-1YAML\s0 datastream. It is provided for authors to override or customize the fields
of \fI\s-1META\s0.yml\fR.   E.g.
.Sp
.Vb 2
\&  package My::Builder;
\&  use base \*(AqModule::Build\*(Aq;
\&
\&  sub get_metadata {
\&    my $self, @args = @_;
\&    my $data = $self\->SUPER::get_metadata(@args);
\&    $data\->{custom_field} = \*(Aqfoo\*(Aq;
\&    return $data;
\&  }
.Ve
.Sp
Valid arguments include:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`fatal\*(C'\fR \*(-- indicates whether missing required
metadata fields should be a fatal error or not.  For \s-1META\s0 creation, it
generally should, but for \s-1MYMETA\s0 creation for end-users, it should not be
fatal.
.IP "\(bu" 4
\&\f(CW\*(C`auto\*(C'\fR \*(-- indicates whether any necessary configure_requires should be
automatically added.  This is used in \s-1META\s0 creation.
.RE
.RS 4
.Sp
This method is a wrapper around the old prepare_metadata \s-1API\s0 now that we
no longer use YAML::Node to hold metadata.
.RE
.IP "\fIprepare_metadata()\fR [deprecated]" 4
.IX Item "prepare_metadata() [deprecated]"
[version 0.36]
.Sp
[Deprecated] As of 0.36, authors should use \f(CW\*(C`get_metadata\*(C'\fR instead.  This
method is preserved for backwards compatibility only.
.Sp
It takes three positional arguments: a hashref (to which metadata will be
added), an optional arrayref (to which metadata keys will be added in order if
the arrayref exists), and a hashref of arguments (as provided to get_metadata).
The latter argument is new as of 0.36.  Earlier versions are always fatal on
errors.
.Sp
Prior to version 0.36, this method took a YAML::Node as an argument to hold
assembled metadata.
.IP "\fIprereq_failures()\fR" 4
.IX Item "prereq_failures()"
[version 0.11]
.Sp
Returns a data structure containing information about any failed
prerequisites (of any of the types described above), or \f(CW\*(C`undef\*(C'\fR if
all prerequisites are met.
.Sp
The data structure returned is a hash reference.  The top level keys
are the type of prerequisite failed, one of \*(L"requires\*(R",
\&\*(L"build_requires\*(R", \*(L"conflicts\*(R", or \*(L"recommends\*(R".  The associated values
are hash references whose keys are the names of required (or
conflicting) modules.  The associated values of those are hash
references indicating some information about the failure.  For example:
.Sp
.Vb 5
\&  {
\&   have => \*(Aq0.42\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqVersion 0.42 is installed, but we need version 0.59\*(Aq,
\&  }
.Ve
.Sp
or
.Sp
.Vb 5
\&  {
\&   have => \*(Aq<none>\*(Aq,
\&   need => \*(Aq0.59\*(Aq,
\&   message => \*(AqPrerequisite Foo isn\*(Aqt installed\*(Aq,
\&  }
.Ve
.Sp
This hash has the same structure as the hash returned by the
\&\f(CW\*(C`check_installed_status()\*(C'\fR method, except that in the case of
\&\*(L"conflicts\*(R" dependencies we change the \*(L"need\*(R" key to \*(L"conflicts\*(R" and
construct a proper message.
.Sp
Examples:
.Sp
.Vb 2
\&  # Check a required dependency on Foo::Bar
\&  if ( $build\->prereq_failures\->{requires}{Foo::Bar} ) { ...
\&
\&  # Check whether there were any failures
\&  if ( $build\->prereq_failures ) { ...
\&
\&  # Show messages for all failures
\&  my $failures = $build\->prereq_failures;
\&  while (my ($type, $list) = each %$failures) {
\&    while (my ($name, $hash) = each %$list) {
\&      print "Failure for $name: $hash\->{message}\en";
\&    }
\&  }
.Ve
.IP "\fIprereq_data()\fR" 4
.IX Item "prereq_data()"
[version 0.32]
.Sp
Returns a reference to a hash describing all prerequisites.  The keys of the
hash will be the various prerequisite types ('requires', 'build_requires',
\&'configure_requires', 'recommends', or 'conflicts') and the values will be
references to hashes of module names and version numbers.  Only prerequisites
types that are defined will be included.  The \f(CW\*(C`prereq_data\*(C'\fR action is just a
thin wrapper around the \f(CW\*(C`prereq_data()\*(C'\fR method and dumps the hash as a string
that can be loaded using \f(CW\*(C`eval()\*(C'\fR.
.IP "\fIprereq_report()\fR" 4
.IX Item "prereq_report()"
[version 0.28]
.Sp
Returns a human-readable (table-form) string showing all
prerequisites, the versions required, and the versions actually
installed.  This can be useful for reviewing the configuration of your
system prior to a build, or when compiling data to send for a bug
report.  The \f(CW\*(C`prereq_report\*(C'\fR action is just a thin wrapper around the
\&\f(CW\*(C`prereq_report()\*(C'\fR method.
.ie n .IP "prompt($message, $default)" 4
.el .IP "prompt($message, \f(CW$default\fR)" 4
.IX Item "prompt($message, $default)"
[version 0.12]
.Sp
Asks the user a question and returns their response as a string.  The
first argument specifies the message to display to the user (for
example, \f(CW"Where do you keep your money?"\fR).  The second argument,
which is optional, specifies a default answer (for example,
\&\f(CW"wallet"\fR).  The user will be asked the question once.
.Sp
If \f(CW\*(C`prompt()\*(C'\fR detects that it is not running interactively and there
is nothing on \s-1STDIN\s0 or if the \s-1PERL_MM_USE_DEFAULT\s0 environment variable
is set to true, the \f(CW$default\fR will be used without prompting.
.Sp
To prevent automated processes from blocking, the user must either set
\&\s-1PERL_MM_USE_DEFAULT\s0 or attach something to \s-1STDIN \s0(this can be a
pipe/file containing a scripted set of answers or /dev/null.)
.Sp
If no \f(CW$default\fR is provided an empty string will be used instead.  In
non-interactive mode, the absence of \f(CW$default\fR is an error (though
explicitly passing \f(CW\*(C`undef()\*(C'\fR as the default is valid as of 0.27.)
.Sp
This method may be called as a class or object method.
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`recommends\*(C'\fR prerequisites
that were passed to the \f(CW\*(C`new()\*(C'\fR method.
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
[version 0.21]
.Sp
Returns a hash reference indicating the \f(CW\*(C`requires\*(C'\fR prerequisites that
were passed to the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "rscan_dir($dir, $pattern)" 4
.el .IP "rscan_dir($dir, \f(CW$pattern\fR)" 4
.IX Item "rscan_dir($dir, $pattern)"
[version 0.28]
.Sp
Uses \f(CW\*(C`File::Find\*(C'\fR to traverse the directory \f(CW$dir\fR, returning a
reference to an array of entries matching \f(CW$pattern\fR.  \f(CW$pattern\fR
may either be a regular expression (using \f(CW\*(C`qr//\*(C'\fR or just a plain
string), or a reference to a subroutine that will return true for
wanted entries.  If \f(CW$pattern\fR is not given, all entries will be
returned.
.Sp
Examples:
.Sp
.Vb 2
\& # All the *.pm files in lib/
\& $m\->rscan_dir(\*(Aqlib\*(Aq, qr/\e.pm$/)
\&
\& # All the files in blib/ that aren\*(Aqt *.html files
\& $m\->rscan_dir(\*(Aqblib\*(Aq, sub {\-f $_ and not /\e.html$/});
\&
\& # All the files in t/
\& $m\->rscan_dir(\*(Aqt\*(Aq);
.Ve
.IP "\fIruntime_params()\fR" 4
.IX Item "runtime_params()"
.PD 0
.IP "runtime_params($key)" 4
.IX Item "runtime_params($key)"
.PD
[version 0.28]
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method stores the values passed on the command line
for valid properties (that is, any command line options for which
\&\f(CW\*(C`valid_property()\*(C'\fR returns a true value).  The value on the command line may
override the default value for a property, as well as any value specified in a
call to \f(CW\*(C`new()\*(C'\fR.  This allows you to programmatically tell if \f(CW\*(C`perl Build.PL\*(C'\fR
or any execution of \f(CW\*(C`./Build\*(C'\fR had command line options specified that
override valid properties.
.Sp
The \f(CW\*(C`runtime_params()\*(C'\fR method is essentially a glorified read-only hash.  With
no arguments, \f(CW\*(C`runtime_params()\*(C'\fR returns the entire hash of properties
specified on the command line.  With one argument, \f(CW\*(C`runtime_params($key)\*(C'\fR
returns the value associated with the given key.
.Sp
The lifetime of the \f(CW\*(C`runtime_params\*(C'\fR data is for \*(L"a build\*(R" \- that is, the
\&\f(CW\*(C`runtime_params\*(C'\fR hash is created when \f(CW\*(C`perl Build.PL\*(C'\fR is run (or when the
\&\f(CW\*(C`new()\*(C'\fR method is called, if the Module::Build Perl \s-1API\s0 is being used instead
of called from a shell), and lasts until \f(CW\*(C`perl Build.PL\*(C'\fR is run again or the
\&\f(CW\*(C`clean\*(C'\fR action is run.
.IP "\fIscript_files()\fR" 4
.IX Item "script_files()"
[version 0.18]
.Sp
Returns a hash reference whose keys are the perl script files to be
installed, if any.  This corresponds to the \f(CW\*(C`script_files\*(C'\fR parameter to the
\&\f(CW\*(C`new()\*(C'\fR method.  With an optional argument, this parameter may be set
dynamically.
.Sp
For backward compatibility, the \f(CW\*(C`scripts()\*(C'\fR method does exactly the
same thing as \f(CW\*(C`script_files()\*(C'\fR.  \f(CW\*(C`scripts()\*(C'\fR is deprecated, but it
will stay around for several versions to give people time to
transition.
.ie n .IP "up_to_date($source_file, $derived_file)" 4
.el .IP "up_to_date($source_file, \f(CW$derived_file\fR)" 4
.IX Item "up_to_date($source_file, $derived_file)"
.PD 0
.IP "up_to_date(\e@source_files, \e@derived_files)" 4
.IX Item "up_to_date(@source_files, @derived_files)"
.PD
[version 0.20]
.Sp
This method can be used to compare a set of source files to a set of
derived files.  If any of the source files are newer than any of the
derived files, it returns false.  Additionally, if any of the derived
files do not exist, it returns false.  Otherwise it returns true.
.Sp
The arguments may be either a scalar or an array reference of file
names.
.ie n .IP "y_n($message, $default)" 4
.el .IP "y_n($message, \f(CW$default\fR)" 4
.IX Item "y_n($message, $default)"
[version 0.12]
.Sp
Asks the user a yes/no question using \f(CW\*(C`prompt()\*(C'\fR and returns true or
false accordingly.  The user will be asked the question repeatedly
until they give an answer that looks like \*(L"yes\*(R" or \*(L"no\*(R".
.Sp
The first argument specifies the message to display to the user (for
example, \f(CW"Shall I invest your money for you?"\fR), and the second
argument specifies the default answer (for example, \f(CW"y"\fR).
.Sp
Note that the default is specified as a string like \f(CW"y"\fR or \f(CW"n"\fR,
and the return value is a Perl boolean value like 1 or 0.  I thought
about this for a while and this seemed like the most useful way to do
it.
.Sp
This method may be called as a class or object method.
.SS "Autogenerated Accessors"
.IX Subsection "Autogenerated Accessors"
In addition to the aforementioned methods, there are also some get/set
accessor methods for the following properties:
.IP "\fIPL_files()\fR" 4
.IX Item "PL_files()"
.PD 0
.IP "\fIallow_mb_mismatch()\fR" 4
.IX Item "allow_mb_mismatch()"
.IP "\fIauto_configure_requires()\fR" 4
.IX Item "auto_configure_requires()"
.IP "\fIautosplit()\fR" 4
.IX Item "autosplit()"
.IP "\fIbase_dir()\fR" 4
.IX Item "base_dir()"
.IP "\fIbindoc_dirs()\fR" 4
.IX Item "bindoc_dirs()"
.IP "\fIblib()\fR" 4
.IX Item "blib()"
.IP "\fIbuild_bat()\fR" 4
.IX Item "build_bat()"
.IP "\fIbuild_class()\fR" 4
.IX Item "build_class()"
.IP "\fIbuild_elements()\fR" 4
.IX Item "build_elements()"
.IP "\fIbuild_requires()\fR" 4
.IX Item "build_requires()"
.IP "\fIbuild_script()\fR" 4
.IX Item "build_script()"
.IP "\fIbundle_inc()\fR" 4
.IX Item "bundle_inc()"
.IP "\fIbundle_inc_preload()\fR" 4
.IX Item "bundle_inc_preload()"
.IP "\fIc_source()\fR" 4
.IX Item "c_source()"
.IP "\fIconfig_dir()\fR" 4
.IX Item "config_dir()"
.IP "\fIconfigure_requires()\fR" 4
.IX Item "configure_requires()"
.IP "\fIconflicts()\fR" 4
.IX Item "conflicts()"
.IP "\fIcpan_client()\fR" 4
.IX Item "cpan_client()"
.IP "\fIcreate_license()\fR" 4
.IX Item "create_license()"
.IP "\fIcreate_makefile_pl()\fR" 4
.IX Item "create_makefile_pl()"
.IP "\fIcreate_packlist()\fR" 4
.IX Item "create_packlist()"
.IP "\fIcreate_readme()\fR" 4
.IX Item "create_readme()"
.IP "\fIdebug()\fR" 4
.IX Item "debug()"
.IP "\fIdebugger()\fR" 4
.IX Item "debugger()"
.IP "\fIdestdir()\fR" 4
.IX Item "destdir()"
.IP "\fIdynamic_config()\fR" 4
.IX Item "dynamic_config()"
.IP "\fIget_options()\fR" 4
.IX Item "get_options()"
.IP "\fIhtml_css()\fR" 4
.IX Item "html_css()"
.IP "\fIinclude_dirs()\fR" 4
.IX Item "include_dirs()"
.IP "\fIinstall_base()\fR" 4
.IX Item "install_base()"
.IP "\fIinstalldirs()\fR" 4
.IX Item "installdirs()"
.IP "\fIlibdoc_dirs()\fR" 4
.IX Item "libdoc_dirs()"
.IP "\fIlicense()\fR" 4
.IX Item "license()"
.IP "\fImagic_number()\fR" 4
.IX Item "magic_number()"
.IP "\fImb_version()\fR" 4
.IX Item "mb_version()"
.IP "\fImeta_add()\fR" 4
.IX Item "meta_add()"
.IP "\fImeta_merge()\fR" 4
.IX Item "meta_merge()"
.IP "\fImetafile()\fR" 4
.IX Item "metafile()"
.IP "\fImetafile2()\fR" 4
.IX Item "metafile2()"
.IP "\fImodule_name()\fR" 4
.IX Item "module_name()"
.IP "\fImymetafile()\fR" 4
.IX Item "mymetafile()"
.IP "\fImymetafile2()\fR" 4
.IX Item "mymetafile2()"
.IP "\fIneeds_compiler()\fR" 4
.IX Item "needs_compiler()"
.IP "\fIorig_dir()\fR" 4
.IX Item "orig_dir()"
.IP "\fIperl()\fR" 4
.IX Item "perl()"
.IP "\fIpm_files()\fR" 4
.IX Item "pm_files()"
.IP "\fIpod_files()\fR" 4
.IX Item "pod_files()"
.IP "\fIpollute()\fR" 4
.IX Item "pollute()"
.IP "\fIprefix()\fR" 4
.IX Item "prefix()"
.IP "\fIprereq_action_types()\fR" 4
.IX Item "prereq_action_types()"
.IP "\fIprogram_name()\fR" 4
.IX Item "program_name()"
.IP "\fIquiet()\fR" 4
.IX Item "quiet()"
.IP "\fIrecommends()\fR" 4
.IX Item "recommends()"
.IP "\fIrecurse_into()\fR" 4
.IX Item "recurse_into()"
.IP "\fIrecursive_test_files()\fR" 4
.IX Item "recursive_test_files()"
.IP "\fIrequires()\fR" 4
.IX Item "requires()"
.IP "\fIscripts()\fR" 4
.IX Item "scripts()"
.IP "\fIsign()\fR" 4
.IX Item "sign()"
.IP "\fItap_harness_args()\fR" 4
.IX Item "tap_harness_args()"
.IP "\fItest_file_exts()\fR" 4
.IX Item "test_file_exts()"
.IP "\fIuse_rcfile()\fR" 4
.IX Item "use_rcfile()"
.IP "\fIuse_tap_harness()\fR" 4
.IX Item "use_tap_harness()"
.IP "\fIverbose()\fR" 4
.IX Item "verbose()"
.IP "\fIxs_files()\fR" 4
.IX Item "xs_files()"
.PD
.SH "MODULE METADATA"
.IX Header "MODULE METADATA"
If you would like to add other useful metadata, \f(CW\*(C`Module::Build\*(C'\fR
supports this with the \f(CW\*(C`meta_add\*(C'\fR and \f(CW\*(C`meta_merge\*(C'\fR arguments to
\&\*(L"\fInew()\fR\*(R". The authoritative list of supported metadata can be found at
CPAN::META::Spec but for convenience \- here are a few of the more useful ones:
.IP "keywords" 4
.IX Item "keywords"
For describing the distribution using keyword (or \*(L"tags\*(R") in order to
make \s-1CPAN\s0.org indexing and search more efficient and useful.
.IP "resources" 4
.IX Item "resources"
A list of additional resources available for users of the
distribution. This can include links to a homepage on the web, a
bug tracker, the repository location, and even a subscription page for the
distribution mailing list.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <kwilliams@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2006 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Module::Build(3), Module::Build::Authoring(3),
Module::Build::Cookbook(3), ExtUtils::MakeMaker(3)
.PP
\&\fI\s-1META\s0.yml\fR Specification:
CPAN::META::Spec
                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Module::Build::Authoring.3pm                 0100644 0001750 0001750 00000041577 12566207461 025756  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Build::Authoring 3pm"
.TH Module::Build::Authoring 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Build::Authoring \- Authoring Module::Build modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When creating a \f(CW\*(C`Build.PL\*(C'\fR script for a module, something like the
following code will typically be used:
.PP
.Vb 12
\&  use Module::Build;
\&  my $build = Module::Build\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,
\&     license  => \*(Aqperl\*(Aq,
\&     requires => {
\&                  \*(Aqperl\*(Aq          => \*(Aq5.6.1\*(Aq,
\&                  \*(AqSome::Module\*(Aq  => \*(Aq1.23\*(Aq,
\&                  \*(AqOther::Module\*(Aq => \*(Aq>= 1.2, != 1.5, < 2.0\*(Aq,
\&                 },
\&    );
\&  $build\->create_build_script;
.Ve
.PP
A simple module could get away with something as short as this for its
\&\f(CW\*(C`Build.PL\*(C'\fR script:
.PP
.Vb 5
\&  use Module::Build;
\&  Module::Build\->new(
\&    module_name => \*(AqFoo::Bar\*(Aq,
\&    license     => \*(Aqperl\*(Aq,
\&  )\->create_build_script;
.Ve
.PP
The model used by \f(CW\*(C`Module::Build\*(C'\fR is a lot like the \f(CW\*(C`MakeMaker\*(C'\fR
metaphor, with the following correspondences:
.PP
.Vb 5
\&   In Module::Build                 In ExtUtils::MakeMaker
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   Build.PL (initial script)        Makefile.PL (initial script)
\&   Build (a short perl script)      Makefile (a long Makefile)
\&   _build/ (saved state info)       various config text in the Makefile
.Ve
.PP
Any customization can be done simply by subclassing \f(CW\*(C`Module::Build\*(C'\fR
and adding a method called (for example) \f(CW\*(C`ACTION_test\*(C'\fR, overriding
the default 'test' action.  You could also add a method called
\&\f(CW\*(C`ACTION_whatever\*(C'\fR, and then you could perform the action \f(CW\*(C`Build
whatever\*(C'\fR.
.PP
For information on providing compatibility with
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR, see Module::Build::Compat and
<http://www.makemaker.org/wiki/index.cgi?ModuleBuildConversionGuide>.
.SH "STRUCTURE"
.IX Header "STRUCTURE"
Module::Build creates a class hierarchy conducive to customization.
Here is the parent-child class hierarchy in classy \s-1ASCII\s0 art:
.PP
.Vb 10
\&   /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e
\&   |   Your::Parent     |  (If you subclass Module::Build)
\&   \e\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-/
\&            |
\&            |
\&   /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e  (Doesn\*(Aqt define any functionality
\&   |   Module::Build    |   of its own \- just figures out what
\&   \e\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-/   other modules to load.)
\&            |
\&            |
\&   /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e  (Some values of $^O may
\&   |   Module::Build::Platform::$^O    |   define specialized functionality.
\&   \e\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-/   Otherwise it\*(Aqs ...::Default, a
\&            |                              pass\-through class.)
\&            |
\&   /\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\e
\&   |   Module::Build::Base    |  (Most of the functionality of 
\&   \e\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-/   Module::Build is defined here.)
.Ve
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Right now, there are two ways to subclass Module::Build.  The first
way is to create a regular module (in a \f(CW\*(C`.pm\*(C'\fR file) that inherits
from Module::Build, and use that module's class instead of using
Module::Build directly:
.PP
.Vb 2
\&  \-\-\-\-\-\- in Build.PL: \-\-\-\-\-\-\-\-\-\-
\&  #!/usr/bin/perl
\&
\&  use lib q(/nonstandard/library/path);
\&  use My::Builder;  # Or whatever you want to call it
\&
\&  my $build = My::Builder\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,  # All the regular args...
\&     license     => \*(Aqperl\*(Aq,
\&     dist_author => \*(AqA N Other <me@here.net.au>\*(Aq,
\&     requires    => { Carp => 0 }
\&    );
\&  $build\->create_build_script;
.Ve
.PP
This is relatively straightforward, and is the best way to do things
if your My::Builder class contains lots of code.  The
\&\f(CW\*(C`create_build_script()\*(C'\fR method will ensure that the current value of
\&\f(CW@INC\fR (including the \f(CW\*(C`/nonstandard/library/path\*(C'\fR) is propagated to
the Build script, so that My::Builder can be found when running build
actions.  If you find that you need to \f(CW\*(C`chdir\*(C'\fR into a different directories
in your subclass methods or actions, be sure to always return to the original
directory (available via the \f(CW\*(C`base_dir()\*(C'\fR method) before returning control
to the parent class.  This is important to avoid data serialization problems.
.PP
For very small additions, Module::Build provides a \f(CW\*(C`subclass()\*(C'\fR
method that lets you subclass Module::Build more conveniently, without
creating a separate file for your module:
.PP
.Vb 2
\&  \-\-\-\-\-\- in Build.PL: \-\-\-\-\-\-\-\-\-\-
\&  #!/usr/bin/perl
\&
\&  use Module::Build;
\&  my $class = Module::Build\->subclass
\&    (
\&     class => \*(AqMy::Builder\*(Aq,
\&     code => q{
\&       sub ACTION_foo {
\&         print "I\*(Aqm fooing to death!\en";
\&       }
\&     },
\&    );
\&
\&  my $build = $class\->new
\&    (
\&     module_name => \*(AqFoo::Bar\*(Aq,  # All the regular args...
\&     license     => \*(Aqperl\*(Aq,
\&     dist_author => \*(AqA N Other <me@here.net.au>\*(Aq,
\&     requires    => { Carp => 0 }
\&    );
\&  $build\->create_build_script;
.Ve
.PP
Behind the scenes, this actually does create a \f(CW\*(C`.pm\*(C'\fR file, since the
code you provide must persist after Build.PL is run if it is to be
very useful.
.PP
See also the documentation for the \*(L"\fIsubclass()\fR\*(R" in Module::Build::API
method.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.SS "Types of prerequisites"
.IX Subsection "Types of prerequisites"
To specify what versions of other modules are used by this
distribution, several types of prerequisites can be defined with the
following parameters:
.IP "configure_requires" 3
.IX Item "configure_requires"
Items that must be installed \fIbefore\fR configuring this distribution
(i.e. before running the \fIBuild.PL\fR script).  This might be a
specific minimum version of \f(CW\*(C`Module::Build\*(C'\fR or any other module the
\&\fIBuild.PL\fR needs in order to do its stuff.  Clients like \f(CW\*(C`CPAN.pm\*(C'\fR
or \f(CW\*(C`CPANPLUS\*(C'\fR will be expected to pick \f(CW\*(C`configure_requires\*(C'\fR out of the
\&\fI\s-1META\s0.yml\fR file and install these items before running the
\&\f(CW\*(C`Build.PL\*(C'\fR.
.Sp
If no configure_requires is specified, the current version of Module::Build
is automatically added to configure_requires.
.IP "build_requires" 3
.IX Item "build_requires"
Items that are necessary for building and testing this distribution,
but aren't necessary after installation.  This can help users who only
want to install these items temporarily.  It also helps reduce the
size of the \s-1CPAN\s0 dependency graph if everything isn't smooshed into
\&\f(CW\*(C`requires\*(C'\fR.
.IP "requires" 3
.IX Item "requires"
Items that are necessary for basic functioning.
.IP "recommends" 3
.IX Item "recommends"
Items that are recommended for enhanced functionality, but there are
ways to use this distribution without having them installed.  You
might also think of this as \*(L"can use\*(R" or \*(L"is aware of\*(R" or \*(L"changes
behavior in the presence of\*(R".
.IP "conflicts" 3
.IX Item "conflicts"
Items that can cause problems with this distribution when installed.
This is pretty rare.
.SS "Format of prerequisites"
.IX Subsection "Format of prerequisites"
The prerequisites are given in a hash reference, where the keys are
the module names and the values are version specifiers:
.PP
.Vb 6
\&  requires => {
\&               Foo::Module => \*(Aq2.4\*(Aq,
\&               Bar::Module => 0,
\&               Ken::Module => \*(Aq>= 1.2, != 1.5, < 2.0\*(Aq,
\&               perl => \*(Aq5.6.0\*(Aq
\&              },
.Ve
.PP
The above four version specifiers have different effects.  The value
\&\f(CW\*(Aq2.4\*(Aq\fR means that \fBat least\fR version 2.4 of \f(CW\*(C`Foo::Module\*(C'\fR must be
installed.  The value \f(CW0\fR means that \fBany\fR version of \f(CW\*(C`Bar::Module\*(C'\fR
is acceptable, even if \f(CW\*(C`Bar::Module\*(C'\fR doesn't define a version.  The
more verbose value \f(CW\*(Aq>= 1.2, != 1.5, < 2.0\*(Aq\fR means that
\&\f(CW\*(C`Ken::Module\*(C'\fR's version must be \fBat least\fR 1.2, \fBless than\fR 2.0,
and \fBnot equal to\fR 1.5.  The list of criteria is separated by commas,
and all criteria must be satisfied.
.PP
A special \f(CW\*(C`perl\*(C'\fR entry lets you specify the versions of the Perl
interpreter that are supported by your module.  The same version
dependency-checking semantics are available, except that we also
understand perl's new double-dotted version numbers.
.SS "\s-1XS\s0 Extensions"
.IX Subsection "XS Extensions"
Modules which need to compile \s-1XS\s0 code should list \f(CW\*(C`ExtUtils::CBuilder\*(C'\fR
as a \f(CW\*(C`build_requires\*(C'\fR element.
.SH "SAVING CONFIGURATION INFORMATION"
.IX Header "SAVING CONFIGURATION INFORM