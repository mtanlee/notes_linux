s_get_Schema_Proxy(IADs *This,BSTR *retval);
  void __RPC_STUB IADs_get_Schema_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_GetInfo_Proxy(IADs *This);
  void __RPC_STUB IADs_GetInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_SetInfo_Proxy(IADs *This);
  void __RPC_STUB IADs_SetInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_Get_Proxy(IADs *This,BSTR bstrName,VARIANT *pvProp);
  void __RPC_STUB IADs_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_Put_Proxy(IADs *This,BSTR bstrName,VARIANT vProp);
  void __RPC_STUB IADs_Put_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_GetEx_Proxy(IADs *This,BSTR bstrName,VARIANT *pvProp);
  void __RPC_STUB IADs_GetEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_PutEx_Proxy(IADs *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
  void __RPC_STUB IADs_PutEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADs_GetInfoEx_Proxy(IADs *This,VARIANT vProperties,__LONG32 lnReserved);
  void __RPC_STUB IADs_GetInfoEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsContainer_INTERFACE_DEFINED__
#define __IADsContainer_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsContainer;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsContainer : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Count(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get__NewEnum(IUnknown **retval) = 0;
    virtual HRESULT WINAPI get_Filter(VARIANT *pVar) = 0;
    virtual HRESULT WINAPI put_Filter(VARIANT Var) = 0;
    virtual HRESULT WINAPI get_Hints(VARIANT *pvFilter) = 0;
    virtual HRESULT WINAPI put_Hints(VARIANT vHints) = 0;
    virtual HRESULT WINAPI GetObject(BSTR ClassName,BSTR RelativeName,IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI Create(BSTR ClassName,BSTR RelativeName,IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI Delete(BSTR bstrClassName,BSTR bstrRelativeName) = 0;
    virtual HRESULT WINAPI CopyHere(BSTR SourceName,BSTR NewName,IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI MoveHere(BSTR SourceName,BSTR NewName,IDispatch **ppObject) = 0;
  };
#else
  typedef struct IADsContainerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsContainer *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsContainer *This);
      ULONG (WINAPI *Release)(IADsContainer *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsContainer *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsContainer *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsContainer *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsContainer *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Count)(IADsContainer *This,__LONG32 *retval);
      HRESULT (WINAPI *get__NewEnum)(IADsContainer *This,IUnknown **retval);
      HRESULT (WINAPI *get_Filter)(IADsContainer *This,VARIANT *pVar);
      HRESULT (WINAPI *put_Filter)(IADsContainer *This,VARIANT Var);
      HRESULT (WINAPI *get_Hints)(IADsContainer *This,VARIANT *pvFilter);
      HRESULT (WINAPI *put_Hints)(IADsContainer *This,VARIANT vHints);
      HRESULT (WINAPI *GetObject)(IADsContainer *This,BSTR ClassName,BSTR RelativeName,IDispatch **ppObject);
      HRESULT (WINAPI *Create)(IADsContainer *This,BSTR ClassName,BSTR RelativeName,IDispatch **ppObject);
      HRESULT (WINAPI *Delete)(IADsContainer *This,BSTR bstrClassName,BSTR bstrRelativeName);
      HRESULT (WINAPI *CopyHere)(IADsContainer *This,BSTR SourceName,BSTR NewName,IDispatch **ppObject);
      HRESULT (WINAPI *MoveHere)(IADsContainer *This,BSTR SourceName,BSTR NewName,IDispatch **ppObject);
    END_INTERFACE
  } IADsContainerVtbl;
  struct IADsContainer {
    CONST_VTBL struct IADsContainerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsContainer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsContainer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsContainer_Release(This) (This)->lpVtbl->Release(This)
#define IADsContainer_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsContainer_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsContainer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsContainer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsContainer_get_Count(This,retval) (This)->lpVtbl->get_Count(This,retval)
#define IADsContainer_get__NewEnum(This,retval) (This)->lpVtbl->get__NewEnum(This,retval)
#define IADsContainer_get_Filter(This,pVar) (This)->lpVtbl->get_Filter(This,pVar)
#define IADsContainer_put_Filter(This,Var) (This)->lpVtbl->put_Filter(This,Var)
#define IADsContainer_get_Hints(This,pvFilter) (This)->lpVtbl->get_Hints(This,pvFilter)
#define IADsContainer_put_Hints(This,vHints) (This)->lpVtbl->put_Hints(This,vHints)
#define IADsContainer_GetObject(This,ClassName,RelativeName,ppObject) (This)->lpVtbl->GetObject(This,ClassName,RelativeName,ppObject)
#define IADsContainer_Create(This,ClassName,RelativeName,ppObject) (This)->lpVtbl->Create(This,ClassName,RelativeName,ppObject)
#define IADsContainer_Delete(This,bstrClassName,bstrRelativeName) (This)->lpVtbl->Delete(This,bstrClassName,bstrRelativeName)
#define IADsContainer_CopyHere(This,SourceName,NewName,ppObject) (This)->lpVtbl->CopyHere(This,SourceName,NewName,ppObject)
#define IADsContainer_MoveHere(This,SourceName,NewName,ppObject) (This)->lpVtbl->MoveHere(This,SourceName,NewName,ppObject)
#endif
#endif
  HRESULT WINAPI IADsContainer_get_Count_Proxy(IADsContainer *This,__LONG32 *retval);
  void __RPC_STUB IADsContainer_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_get__NewEnum_Proxy(IADsContainer *This,IUnknown **retval);
  void __RPC_STUB IADsContainer_get__NewEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_get_Filter_Proxy(IADsContainer *This,VARIANT *pVar);
  void __RPC_STUB IADsContainer_get_Filter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_put_Filter_Proxy(IADsContainer *This,VARIANT Var);
  void __RPC_STUB IADsContainer_put_Filter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_get_Hints_Proxy(IADsContainer *This,VARIANT *pvFilter);
  void __RPC_STUB IADsContainer_get_Hints_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_put_Hints_Proxy(IADsContainer *This,VARIANT vHints);
  void __RPC_STUB IADsContainer_put_Hints_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_GetObject_Proxy(IADsContainer *This,BSTR ClassName,BSTR RelativeName,IDispatch **ppObject);
  void __RPC_STUB IADsContainer_GetObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_Create_Proxy(IADsContainer *This,BSTR ClassName,BSTR RelativeName,IDispatch **ppObject);
  void __RPC_STUB IADsContainer_Create_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_Delete_Proxy(IADsContainer *This,BSTR bstrClassName,BSTR bstrRelativeName);
  void __RPC_STUB IADsContainer_Delete_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_CopyHere_Proxy(IADsContainer *This,BSTR SourceName,BSTR NewName,IDispatch **ppObject);
  void __RPC_STUB IADsContainer_CopyHere_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsContainer_MoveHere_Proxy(IADsContainer *This,BSTR SourceName,BSTR NewName,IDispatch **ppObject);
  void __RPC_STUB IADsContainer_MoveHere_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsCollection_INTERFACE_DEFINED__
#define __IADsCollection_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsCollection;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsCollection : public IDispatch {
  public:
    virtual HRESULT WINAPI get__NewEnum(IUnknown **ppEnumerator) = 0;
    virtual HRESULT WINAPI Add(BSTR bstrName,VARIANT vItem) = 0;
    virtual HRESULT WINAPI Remove(BSTR bstrItemToBeRemoved) = 0;
    virtual HRESULT WINAPI GetObject(BSTR bstrName,VARIANT *pvItem) = 0;
  };
#else
  typedef struct IADsCollectionVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsCollection *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsCollection *This);
      ULONG (WINAPI *Release)(IADsCollection *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsCollection *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsCollection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsCollection *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsCollection *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get__NewEnum)(IADsCollection *This,IUnknown **ppEnumerator);
      HRESULT (WINAPI *Add)(IADsCollection *This,BSTR bstrName,VARIANT vItem);
      HRESULT (WINAPI *Remove)(IADsCollection *This,BSTR bstrItemToBeRemoved);
      HRESULT (WINAPI *GetObject)(IADsCollection *This,BSTR bstrName,VARIANT *pvItem);
    END_INTERFACE
  } IADsCollectionVtbl;
  struct IADsCollection {
    CONST_VTBL struct IADsCollectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsCollection_Release(This) (This)->lpVtbl->Release(This)
#define IADsCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsCollection_get__NewEnum(This,ppEnumerator) (This)->lpVtbl->get__NewEnum(This,ppEnumerator)
#define IADsCollection_Add(This,bstrName,vItem) (This)->lpVtbl->Add(This,bstrName,vItem)
#define IADsCollection_Remove(This,bstrItemToBeRemoved) (This)->lpVtbl->Remove(This,bstrItemToBeRemoved)
#define IADsCollection_GetObject(This,bstrName,pvItem) (This)->lpVtbl->GetObject(This,bstrName,pvItem)
#endif
#endif
  HRESULT WINAPI IADsCollection_get__NewEnum_Proxy(IADsCollection *This,IUnknown **ppEnumerator);
  void __RPC_STUB IADsCollection_get__NewEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsCollection_Add_Proxy(IADsCollection *This,BSTR bstrName,VARIANT vItem);
  void __RPC_STUB IADsCollection_Add_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsCollection_Remove_Proxy(IADsCollection *This,BSTR bstrItemToBeRemoved);
  void __RPC_STUB IADsCollection_Remove_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsCollection_GetObject_Proxy(IADsCollection *This,BSTR bstrName,VARIANT *pvItem);
  void __RPC_STUB IADsCollection_GetObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsMembers_INTERFACE_DEFINED__
#define __IADsMembers_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsMembers;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsMembers : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Count(__LONG32 *plCount) = 0;
    virtual HRESULT WINAPI get__NewEnum(IUnknown **ppEnumerator) = 0;
    virtual HRESULT WINAPI get_Filter(VARIANT *pvFilter) = 0;
    virtual HRESULT WINAPI put_Filter(VARIANT pvFilter) = 0;
  };
#else
  typedef struct IADsMembersVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsMembers *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsMembers *This);
      ULONG (WINAPI *Release)(IADsMembers *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsMembers *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsMembers *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsMembers *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsMembers *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Count)(IADsMembers *This,__LONG32 *plCount);
      HRESULT (WINAPI *get__NewEnum)(IADsMembers *This,IUnknown **ppEnumerator);
      HRESULT (WINAPI *get_Filter)(IADsMembers *This,VARIANT *pvFilter);
      HRESULT (WINAPI *put_Filter)(IADsMembers *This,VARIANT pvFilter);
    END_INTERFACE
  } IADsMembersVtbl;
  struct IADsMembers {
    CONST_VTBL struct IADsMembersVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsMembers_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsMembers_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsMembers_Release(This) (This)->lpVtbl->Release(This)
#define IADsMembers_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsMembers_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsMembers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsMembers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsMembers_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#define IADsMembers_get__NewEnum(This,ppEnumerator) (This)->lpVtbl->get__NewEnum(This,ppEnumerator)
#define IADsMembers_get_Filter(This,pvFilter) (This)->lpVtbl->get_Filter(This,pvFilter)
#define IADsMembers_put_Filter(This,pvFilter) (This)->lpVtbl->put_Filter(This,pvFilter)
#endif
#endif
  HRESULT WINAPI IADsMembers_get_Count_Proxy(IADsMembers *This,__LONG32 *plCount);
  void __RPC_STUB IADsMembers_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsMembers_get__NewEnum_Proxy(IADsMembers *This,IUnknown **ppEnumerator);
  void __RPC_STUB IADsMembers_get__NewEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsMembers_get_Filter_Proxy(IADsMembers *This,VARIANT *pvFilter);
  void __RPC_STUB IADsMembers_get_Filter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsMembers_put_Filter_Proxy(IADsMembers *This,VARIANT pvFilter);
  void __RPC_STUB IADsMembers_put_Filter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPropertyList_INTERFACE_DEFINED__
#define __IADsPropertyList_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPropertyList;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPropertyList : public IDispatch {
  public:
    virtual HRESULT WINAPI get_PropertyCount(__LONG32 *plCount) = 0;
    virtual HRESULT WINAPI Next(VARIANT *pVariant) = 0;
    virtual HRESULT WINAPI Skip(__LONG32 cElements) = 0;
    virtual HRESULT WINAPI Reset(void) = 0;
    virtual HRESULT WINAPI Item(VARIANT varIndex,VARIANT *pVariant) = 0;
    virtual HRESULT WINAPI GetPropertyItem(BSTR bstrName,LONG lnADsType,VARIANT *pVariant) = 0;
    virtual HRESULT WINAPI PutPropertyItem(VARIANT varData) = 0;
    virtual HRESULT WINAPI ResetPropertyItem(VARIANT varEntry) = 0;
    virtual HRESULT WINAPI PurgePropertyList(void) = 0;
  };
#else
  typedef struct IADsPropertyListVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPropertyList *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPropertyList *This);
      ULONG (WINAPI *Release)(IADsPropertyList *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPropertyList *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPropertyList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPropertyList *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPropertyList *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_PropertyCount)(IADsPropertyList *This,__LONG32 *plCount);
      HRESULT (WINAPI *Next)(IADsPropertyList *This,VARIANT *pVariant);
      HRESULT (WINAPI *Skip)(IADsPropertyList *This,__LONG32 cElements);
      HRESULT (WINAPI *Reset)(IADsPropertyList *This);
      HRESULT (WINAPI *Item)(IADsPropertyList *This,VARIANT varIndex,VARIANT *pVariant);
      HRESULT (WINAPI *GetPropertyItem)(IADsPropertyList *This,BSTR bstrName,LONG lnADsType,VARIANT *pVariant);
      HRESULT (WINAPI *PutPropertyItem)(IADsPropertyList *This,VARIANT varData);
      HRESULT (WINAPI *ResetPropertyItem)(IADsPropertyList *This,VARIANT varEntry);
      HRESULT (WINAPI *PurgePropertyList)(IADsPropertyList *This);
    END_INTERFACE
  } IADsPropertyListVtbl;
  struct IADsPropertyList {
    CONST_VTBL struct IADsPropertyListVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPropertyList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPropertyList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPropertyList_Release(This) (This)->lpVtbl->Release(This)
#define IADsPropertyList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPropertyList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPropertyList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPropertyList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPropertyList_get_PropertyCount(This,plCount) (This)->lpVtbl->get_PropertyCount(This,plCount)
#define IADsPropertyList_Next(This,pVariant) (This)->lpVtbl->Next(This,pVariant)
#define IADsPropertyList_Skip(This,cElements) (This)->lpVtbl->Skip(This,cElements)
#define IADsPropertyList_Reset(This) (This)->lpVtbl->Reset(This)
#define IADsPropertyList_Item(This,varIndex,pVariant) (This)->lpVtbl->Item(This,varIndex,pVariant)
#define IADsPropertyList_GetPropertyItem(This,bstrName,lnADsType,pVariant) (This)->lpVtbl->GetPropertyItem(This,bstrName,lnADsType,pVariant)
#define IADsPropertyList_PutPropertyItem(This,varData) (This)->lpVtbl->PutPropertyItem(This,varData)
#define IADsPropertyList_ResetPropertyItem(This,varEntry) (This)->lpVtbl->ResetPropertyItem(This,varEntry)
#define IADsPropertyList_PurgePropertyList(This) (This)->lpVtbl->PurgePropertyList(This)
#endif
#endif
  HRESULT WINAPI IADsPropertyList_get_PropertyCount_Proxy(IADsPropertyList *This,__LONG32 *plCount);
  void __RPC_STUB IADsPropertyList_get_PropertyCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_Next_Proxy(IADsPropertyList *This,VARIANT *pVariant);
  void __RPC_STUB IADsPropertyList_Next_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_Skip_Proxy(IADsPropertyList *This,__LONG32 cElements);
  void __RPC_STUB IADsPropertyList_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_Reset_Proxy(IADsPropertyList *This);
  void __RPC_STUB IADsPropertyList_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_Item_Proxy(IADsPropertyList *This,VARIANT varIndex,VARIANT *pVariant);
  void __RPC_STUB IADsPropertyList_Item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_GetPropertyItem_Proxy(IADsPropertyList *This,BSTR bstrName,LONG lnADsType,VARIANT *pVariant);
  void __RPC_STUB IADsPropertyList_GetPropertyItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_PutPropertyItem_Proxy(IADsPropertyList *This,VARIANT varData);
  void __RPC_STUB IADsPropertyList_PutPropertyItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_ResetPropertyItem_Proxy(IADsPropertyList *This,VARIANT varEntry);
  void __RPC_STUB IADsPropertyList_ResetPropertyItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyList_PurgePropertyList_Proxy(IADsPropertyList *This);
  void __RPC_STUB IADsPropertyList_PurgePropertyList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPropertyEntry_INTERFACE_DEFINED__
#define __IADsPropertyEntry_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPropertyEntry;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPropertyEntry : public IDispatch {
  public:
    virtual HRESULT WINAPI Clear(void) = 0;
    virtual HRESULT WINAPI get_Name(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Name(BSTR bstrName) = 0;
    virtual HRESULT WINAPI get_ADsType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ADsType(__LONG32 lnADsType) = 0;
    virtual HRESULT WINAPI get_ControlCode(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ControlCode(__LONG32 lnControlCode) = 0;
    virtual HRESULT WINAPI get_Values(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Values(VARIANT vValues) = 0;
  };
#else
  typedef struct IADsPropertyEntryVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPropertyEntry *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPropertyEntry *This);
      ULONG (WINAPI *Release)(IADsPropertyEntry *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPropertyEntry *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPropertyEntry *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPropertyEntry *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPropertyEntry *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *Clear)(IADsPropertyEntry *This);
      HRESULT (WINAPI *get_Name)(IADsPropertyEntry *This,BSTR *retval);
      HRESULT (WINAPI *put_Name)(IADsPropertyEntry *This,BSTR bstrName);
      HRESULT (WINAPI *get_ADsType)(IADsPropertyEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ADsType)(IADsPropertyEntry *This,__LONG32 lnADsType);
      HRESULT (WINAPI *get_ControlCode)(IADsPropertyEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ControlCode)(IADsPropertyEntry *This,__LONG32 lnControlCode);
      HRESULT (WINAPI *get_Values)(IADsPropertyEntry *This,VARIANT *retval);
      HRESULT (WINAPI *put_Values)(IADsPropertyEntry *This,VARIANT vValues);
    END_INTERFACE
  } IADsPropertyEntryVtbl;
  struct IADsPropertyEntry {
    CONST_VTBL struct IADsPropertyEntryVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPropertyEntry_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPropertyEntry_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPropertyEntry_Release(This) (This)->lpVtbl->Release(This)
#define IADsPropertyEntry_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPropertyEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPropertyEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPropertyEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPropertyEntry_Clear(This) (This)->lpVtbl->Clear(This)
#define IADsPropertyEntry_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsPropertyEntry_put_Name(This,bstrName) (This)->lpVtbl->put_Name(This,bstrName)
#define IADsPropertyEntry_get_ADsType(This,retval) (This)->lpVtbl->get_ADsType(This,retval)
#define IADsPropertyEntry_put_ADsType(This,lnADsType) (This)->lpVtbl->put_ADsType(This,lnADsType)
#define IADsPropertyEntry_get_ControlCode(This,retval) (This)->lpVtbl->get_ControlCode(This,retval)
#define IADsPropertyEntry_put_ControlCode(This,lnControlCode) (This)->lpVtbl->put_ControlCode(This,lnControlCode)
#define IADsPropertyEntry_get_Values(This,retval) (This)->lpVtbl->get_Values(This,retval)
#define IADsPropertyEntry_put_Values(This,vValues) (This)->lpVtbl->put_Values(This,vValues)
#endif
#endif
  HRESULT WINAPI IADsPropertyEntry_Clear_Proxy(IADsPropertyEntry *This);
  void __RPC_STUB IADsPropertyEntry_Clear_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_get_Name_Proxy(IADsPropertyEntry *This,BSTR *retval);
  void __RPC_STUB IADsPropertyEntry_get_Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_put_Name_Proxy(IADsPropertyEntry *This,BSTR bstrName);
  void __RPC_STUB IADsPropertyEntry_put_Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_get_ADsType_Proxy(IADsPropertyEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsPropertyEntry_get_ADsType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_put_ADsType_Proxy(IADsPropertyEntry *This,__LONG32 lnADsType);
  void __RPC_STUB IADsPropertyEntry_put_ADsType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_get_ControlCode_Proxy(IADsPropertyEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsPropertyEntry_get_ControlCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_put_ControlCode_Proxy(IADsPropertyEntry *This,__LONG32 lnControlCode);
  void __RPC_STUB IADsPropertyEntry_put_ControlCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_get_Values_Proxy(IADsPropertyEntry *This,VARIANT *retval);
  void __RPC_STUB IADsPropertyEntry_get_Values_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyEntry_put_Values_Proxy(IADsPropertyEntry *This,VARIANT vValues);
  void __RPC_STUB IADsPropertyEntry_put_Values_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_PropertyEntry;
#ifdef __cplusplus
  class PropertyEntry;
#endif

#ifndef __IADsPropertyValue_INTERFACE_DEFINED__
#define __IADsPropertyValue_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPropertyValue;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPropertyValue : public IDispatch {
  public:
    virtual HRESULT WINAPI Clear(void) = 0;
    virtual HRESULT WINAPI get_ADsType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ADsType(__LONG32 lnADsType) = 0;
    virtual HRESULT WINAPI get_DNString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_DNString(BSTR bstrDNString) = 0;
    virtual HRESULT WINAPI get_CaseExactString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_CaseExactString(BSTR bstrCaseExactString) = 0;
    virtual HRESULT WINAPI get_CaseIgnoreString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_CaseIgnoreString(BSTR bstrCaseIgnoreString) = 0;
    virtual HRESULT WINAPI get_PrintableString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PrintableString(BSTR bstrPrintableString) = 0;
    virtual HRESULT WINAPI get_NumericString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_NumericString(BSTR bstrNumericString) = 0;
    virtual HRESULT WINAPI get_Boolean(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Boolean(__LONG32 lnBoolean) = 0;
    virtual HRESULT WINAPI get_Integer(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Integer(__LONG32 lnInteger) = 0;
    virtual HRESULT WINAPI get_OctetString(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_OctetString(VARIANT vOctetString) = 0;
    virtual HRESULT WINAPI get_SecurityDescriptor(IDispatch **retval) = 0;
    virtual HRESULT WINAPI put_SecurityDescriptor(IDispatch *pSecurityDescriptor) = 0;
    virtual HRESULT WINAPI get_LargeInteger(IDispatch **retval) = 0;
    virtual HRESULT WINAPI put_LargeInteger(IDispatch *pLargeInteger) = 0;
    virtual HRESULT WINAPI get_UTCTime(DATE *retval) = 0;
    virtual HRESULT WINAPI put_UTCTime(DATE daUTCTime) = 0;
  };
#else
  typedef struct IADsPropertyValueVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPropertyValue *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPropertyValue *This);
      ULONG (WINAPI *Release)(IADsPropertyValue *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPropertyValue *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPropertyValue *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPropertyValue *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPropertyValue *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *Clear)(IADsPropertyValue *This);
      HRESULT (WINAPI *get_ADsType)(IADsPropertyValue *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ADsType)(IADsPropertyValue *This,__LONG32 lnADsType);
      HRESULT (WINAPI *get_DNString)(IADsPropertyValue *This,BSTR *retval);
      HRESULT (WINAPI *put_DNString)(IADsPropertyValue *This,BSTR bstrDNString);
      HRESULT (WINAPI *get_CaseExactString)(IADsPropertyValue *This,BSTR *retval);
      HRESULT (WINAPI *put_CaseExactString)(IADsPropertyValue *This,BSTR bstrCaseExactString);
      HRESULT (WINAPI *get_CaseIgnoreString)(IADsPropertyValue *This,BSTR *retval);
      HRESULT (WINAPI *put_CaseIgnoreString)(IADsPropertyValue *This,BSTR bstrCaseIgnoreString);
      HRESULT (WINAPI *get_PrintableString)(IADsPropertyValue *This,BSTR *retval);
      HRESULT (WINAPI *put_PrintableString)(IADsPropertyValue *This,BSTR bstrPrintableString);
      HRESULT (WINAPI *get_NumericString)(IADsPropertyValue *This,BSTR *retval);
      HRESULT (WINAPI *put_NumericString)(IADsPropertyValue *This,BSTR bstrNumericString);
      HRESULT (WINAPI *get_Boolean)(IADsPropertyValue *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Boolean)(IADsPropertyValue *This,__LONG32 lnBoolean);
      HRESULT (WINAPI *get_Integer)(IADsPropertyValue *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Integer)(IADsPropertyValue *This,__LONG32 lnInteger);
      HRESULT (WINAPI *get_OctetString)(IADsPropertyValue *This,VARIANT *retval);
      HRESULT (WINAPI *put_OctetString)(IADsPropertyValue *This,VARIANT vOctetString);
      HRESULT (WINAPI *get_SecurityDescriptor)(IADsPropertyValue *This,IDispatch **retval);
      HRESULT (WINAPI *put_SecurityDescriptor)(IADsPropertyValue *This,IDispatch *pSecurityDescriptor);
      HRESULT (WINAPI *get_LargeInteger)(IADsPropertyValue *This,IDispatch **retval);
      HRESULT (WINAPI *put_LargeInteger)(IADsPropertyValue *This,IDispatch *pLargeInteger);
      HRESULT (WINAPI *get_UTCTime)(IADsPropertyValue *This,DATE *retval);
      HRESULT (WINAPI *put_UTCTime)(IADsPropertyValue *This,DATE daUTCTime);
    END_INTERFACE
  } IADsPropertyValueVtbl;
  struct IADsPropertyValue {
    CONST_VTBL struct IADsPropertyValueVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPropertyValue_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPropertyValue_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPropertyValue_Release(This) (This)->lpVtbl->Release(This)
#define IADsPropertyValue_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPropertyValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPropertyValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPropertyValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPropertyValue_Clear(This) (This)->lpVtbl->Clear(This)
#define IADsPropertyValue_get_ADsType(This,retval) (This)->lpVtbl->get_ADsType(This,retval)
#define IADsPropertyValue_put_ADsType(This,lnADsType) (This)->lpVtbl->put_ADsType(This,lnADsType)
#define IADsPropertyValue_get_DNString(This,retval) (This)->lpVtbl->get_DNString(This,retval)
#define IADsPropertyValue_put_DNString(This,bstrDNString) (This)->lpVtbl->put_DNString(This,bstrDNString)
#define IADsPropertyValue_get_CaseExactString(This,retval) (This)->lpVtbl->get_CaseExactString(This,retval)
#define IADsPropertyValue_put_CaseExactString(This,bstrCaseExactString) (This)->lpVtbl->put_CaseExactString(This,bstrCaseExactString)
#define IADsPropertyValue_get_CaseIgnoreString(This,retval) (This)->lpVtbl->get_CaseIgnoreString(This,retval)
#define IADsPropertyValue_put_CaseIgnoreString(This,bstrCaseIgnoreString) (This)->lpVtbl->put_CaseIgnoreString(This,bstrCaseIgnoreString)
#define IADsPropertyValue_get_PrintableString(This,retval) (This)->lpVtbl->get_PrintableString(This,retval)
#define IADsPropertyValue_put_PrintableString(This,bstrPrintableString) (This)->lpVtbl->put_PrintableString(This,bstrPrintableString)
#define IADsPropertyValue_get_NumericString(This,retval) (This)->lpVtbl->get_NumericString(This,retval)
#define IADsPropertyValue_put_NumericString(This,bstrNumericString) (This)->lpVtbl->put_NumericString(This,bstrNumericString)
#define IADsPropertyValue_get_Boolean(This,retval) (This)->lpVtbl->get_Boolean(This,retval)
#define IADsPropertyValue_put_Boolean(This,lnBoolean) (This)->lpVtbl->put_Boolean(This,lnBoolean)
#define IADsPropertyValue_get_Integer(This,retval) (This)->lpVtbl->get_Integer(This,retval)
#define IADsPropertyValue_put_Integer(This,lnInteger) (This)->lpVtbl->put_Integer(This,lnInteger)
#define IADsPropertyValue_get_OctetString(This,retval) (This)->lpVtbl->get_OctetString(This,retval)
#define IADsPropertyValue_put_OctetString(This,vOctetString) (This)->lpVtbl->put_OctetString(This,vOctetString)
#define IADsPropertyValue_get_SecurityDescriptor(This,retval) (This)->lpVtbl->get_SecurityDescriptor(This,retval)
#define IADsPropertyValue_put_SecurityDescriptor(This,pSecurityDescriptor) (This)->lpVtbl->put_SecurityDescriptor(This,pSecurityDescriptor)
#define IADsPropertyValue_get_LargeInteger(This,retval) (This)->lpVtbl->get_LargeInteger(This,retval)
#define IADsPropertyValue_put_LargeInteger(This,pLargeInteger) (This)->lpVtbl->put_LargeInteger(This,pLargeInteger)
#define IADsPropertyValue_get_UTCTime(This,retval) (This)->lpVtbl->get_UTCTime(This,retval)
#define IADsPropertyValue_put_UTCTime(This,daUTCTime) (This)->lpVtbl->put_UTCTime(This,daUTCTime)
#endif
#endif
  HRESULT WINAPI IADsPropertyValue_Clear_Proxy(IADsPropertyValue *This);
  void __RPC_STUB IADsPropertyValue_Clear_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_ADsType_Proxy(IADsPropertyValue *This,__LONG32 *retval);
  void __RPC_STUB IADsPropertyValue_get_ADsType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_ADsType_Proxy(IADsPropertyValue *This,__LONG32 lnADsType);
  void __RPC_STUB IADsPropertyValue_put_ADsType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_DNString_Proxy(IADsPropertyValue *This,BSTR *retval);
  void __RPC_STUB IADsPropertyValue_get_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_DNString_Proxy(IADsPropertyValue *This,BSTR bstrDNString);
  void __RPC_STUB IADsPropertyValue_put_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_CaseExactString_Proxy(IADsPropertyValue *This,BSTR *retval);
  void __RPC_STUB IADsPropertyValue_get_CaseExactString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_CaseExactString_Proxy(IADsPropertyValue *This,BSTR bstrCaseExactString);
  void __RPC_STUB IADsPropertyValue_put_CaseExactString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_CaseIgnoreString_Proxy(IADsPropertyValue *This,BSTR *retval);
  void __RPC_STUB IADsPropertyValue_get_CaseIgnoreString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_CaseIgnoreString_Proxy(IADsPropertyValue *This,BSTR bstrCaseIgnoreString);
  void __RPC_STUB IADsPropertyValue_put_CaseIgnoreString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_PrintableString_Proxy(IADsPropertyValue *This,BSTR *retval);
  void __RPC_STUB IADsPropertyValue_get_PrintableString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_PrintableString_Proxy(IADsPropertyValue *This,BSTR bstrPrintableString);
  void __RPC_STUB IADsPropertyValue_put_PrintableString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_NumericString_Proxy(IADsPropertyValue *This,BSTR *retval);
  void __RPC_STUB IADsPropertyValue_get_NumericString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_NumericString_Proxy(IADsPropertyValue *This,BSTR bstrNumericString);
  void __RPC_STUB IADsPropertyValue_put_NumericString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_Boolean_Proxy(IADsPropertyValue *This,__LONG32 *retval);
  void __RPC_STUB IADsPropertyValue_get_Boolean_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_Boolean_Proxy(IADsPropertyValue *This,__LONG32 lnBoolean);
  void __RPC_STUB IADsPropertyValue_put_Boolean_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_Integer_Proxy(IADsPropertyValue *This,__LONG32 *retval);
  void __RPC_STUB IADsPropertyValue_get_Integer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_Integer_Proxy(IADsPropertyValue *This,__LONG32 lnInteger);
  void __RPC_STUB IADsPropertyValue_put_Integer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_OctetString_Proxy(IADsPropertyValue *This,VARIANT *retval);
  void __RPC_STUB IADsPropertyValue_get_OctetString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_OctetString_Proxy(IADsPropertyValue *This,VARIANT vOctetString);
  void __RPC_STUB IADsPropertyValue_put_OctetString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_SecurityDescriptor_Proxy(IADsPropertyValue *This,IDispatch **retval);
  void __RPC_STUB IADsPropertyValue_get_SecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_SecurityDescriptor_Proxy(IADsPropertyValue *This,IDispatch *pSecurityDescriptor);
  void __RPC_STUB IADsPropertyValue_put_SecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_LargeInteger_Proxy(IADsPropertyValue *This,IDispatch **retval);
  void __RPC_STUB IADsPropertyValue_get_LargeInteger_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_LargeInteger_Proxy(IADsPropertyValue *This,IDispatch *pLargeInteger);
  void __RPC_STUB IADsPropertyValue_put_LargeInteger_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_get_UTCTime_Proxy(IADsPropertyValue *This,DATE *retval);
  void __RPC_STUB IADsPropertyValue_get_UTCTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue_put_UTCTime_Proxy(IADsPropertyValue *This,DATE daUTCTime);
  void __RPC_STUB IADsPropertyValue_put_UTCTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPropertyValue2_INTERFACE_DEFINED__
#define __IADsPropertyValue2_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPropertyValue2;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPropertyValue2 : public IDispatch {
  public:
    virtual HRESULT WINAPI GetObjectProperty(__LONG32 *lnADsType,VARIANT *pvProp) = 0;
    virtual HRESULT WINAPI PutObjectProperty(__LONG32 lnADsType,VARIANT vProp) = 0;
  };
#else
  typedef struct IADsPropertyValue2Vtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPropertyValue2 *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPropertyValue2 *This);
      ULONG (WINAPI *Release)(IADsPropertyValue2 *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPropertyValue2 *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPropertyValue2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPropertyValue2 *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPropertyValue2 *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *GetObjectProperty)(IADsPropertyValue2 *This,__LONG32 *lnADsType,VARIANT *pvProp);
      HRESULT (WINAPI *PutObjectProperty)(IADsPropertyValue2 *This,__LONG32 lnADsType,VARIANT vProp);
    END_INTERFACE
  } IADsPropertyValue2Vtbl;
  struct IADsPropertyValue2 {
    CONST_VTBL struct IADsPropertyValue2Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPropertyValue2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPropertyValue2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPropertyValue2_Release(This) (This)->lpVtbl->Release(This)
#define IADsPropertyValue2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPropertyValue2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPropertyValue2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPropertyValue2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPropertyValue2_GetObjectProperty(This,lnADsType,pvProp) (This)->lpVtbl->GetObjectProperty(This,lnADsType,pvProp)
#define IADsPropertyValue2_PutObjectProperty(This,lnADsType,vProp) (This)->lpVtbl->PutObjectProperty(This,lnADsType,vProp)
#endif
#endif
  HRESULT WINAPI IADsPropertyValue2_GetObjectProperty_Proxy(IADsPropertyValue2 *This,__LONG32 *lnADsType,VARIANT *pvProp);
  void __RPC_STUB IADsPropertyValue2_GetObjectProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPropertyValue2_PutObjectProperty_Proxy(IADsPropertyValue2 *This,__LONG32 lnADsType,VARIANT vProp);
  void __RPC_STUB IADsPropertyValue2_PutObjectProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_PropertyValue;
#ifdef __cplusplus
  class PropertyValue;
#endif

#ifndef __IPrivateDispatch_INTERFACE_DEFINED__
#define __IPrivateDispatch_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IPrivateDispatch;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IPrivateDispatch : public IUnknown {
  public:
    virtual HRESULT WINAPI ADSIInitializeDispatchManager(__LONG32 dwExtensionId) = 0;
    virtual HRESULT WINAPI ADSIGetTypeInfoCount(UINT *pctinfo) = 0;
    virtual HRESULT WINAPI ADSIGetTypeInfo(UINT itinfo,LCID lcid,ITypeInfo **pptinfo) = 0;
    virtual HRESULT WINAPI ADSIGetIDsOfNames(REFIID riid,OLECHAR **rgszNames,UINT cNames,LCID lcid,DISPID *rgdispid) = 0;
    virtual HRESULT WINAPI ADSIInvoke(DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr) = 0;
  };
#else
  typedef struct IPrivateDispatchVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IPrivateDispatch *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IPrivateDispatch *This);
      ULONG (WINAPI *Release)(IPrivateDispatch *This);
      HRESULT (WINAPI *ADSIInitializeDispatchManager)(IPrivateDispatch *This,__LONG32 dwExtensionId);
      HRESULT (WINAPI *ADSIGetTypeInfoCount)(IPrivateDispatch *This,UINT *pctinfo);
      HRESULT (WINAPI *ADSIGetTypeInfo)(IPrivateDispatch *This,UINT itinfo,LCID lcid,ITypeInfo **pptinfo);
      HRESULT (WINAPI *ADSIGetIDsOfNames)(IPrivateDispatch *This,REFIID riid,OLECHAR **rgszNames,UINT cNames,LCID lcid,DISPID *rgdispid);
      HRESULT (WINAPI *ADSIInvoke)(IPrivateDispatch *This,DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr);
    END_INTERFACE
  } IPrivateDispatchVtbl;
  struct IPrivateDispatch {
    CONST_VTBL struct IPrivateDispatchVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IPrivateDispatch_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPrivateDispatch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPrivateDispatch_Release(This) (This)->lpVtbl->Release(This)
#define IPrivateDispatch_ADSIInitializeDispatchManager(This,dwExtensionId) (This)->lpVtbl->ADSIInitializeDispatchManager(This,dwExtensionId)
#define IPrivateDispatch_ADSIGetTypeInfoCount(This,pctinfo) (This)->lpVtbl->ADSIGetTypeInfoCount(This,pctinfo)
#define IPrivateDispatch_ADSIGetTypeInfo(This,itinfo,lcid,pptinfo) (This)->lpVtbl->ADSIGetTypeInfo(This,itinfo,lcid,pptinfo)
#define IPrivateDispatch_ADSIGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid) (This)->lpVtbl->ADSIGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid)
#define IPrivateDispatch_ADSIInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr) (This)->lpVtbl->ADSIInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr)
#endif
#endif
  HRESULT WINAPI IPrivateDispatch_ADSIInitializeDispatchManager_Proxy(IPrivateDispatch *This,__LONG32 dwExtensionId);
  void __RPC_STUB IPrivateDispatch_ADSIInitializeDispatchManager_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPrivateDispatch_ADSIGetTypeInfoCount_Proxy(IPrivateDispatch *This,UINT *pctinfo);
  void __RPC_STUB IPrivateDispatch_ADSIGetTypeInfoCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPrivateDispatch_ADSIGetTypeInfo_Proxy(IPrivateDispatch *This,UINT itinfo,LCID lcid,ITypeInfo **pptinfo);
  void __RPC_STUB IPrivateDispatch_ADSIGetTypeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPrivateDispatch_ADSIGetIDsOfNames_Proxy(IPrivateDispatch *This,REFIID riid,OLECHAR **rgszNames,UINT cNames,LCID lcid,DISPID *rgdispid);
  void __RPC_STUB IPrivateDispatch_ADSIGetIDsOfNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPrivateDispatch_ADSIInvoke_Proxy(IPrivateDispatch *This,DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr);
  void __RPC_STUB IPrivateDispatch_ADSIInvoke_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IPrivateUnknown_INTERFACE_DEFINED__
#define __IPrivateUnknown_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IPrivateUnknown;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IPrivateUnknown : public IUnknown {
  public:
    virtual HRESULT WINAPI ADSIInitializeObject(BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved) = 0;
    virtual HRESULT WINAPI ADSIReleaseObject(void) = 0;
  };
#else
  typedef struct IPrivateUnknownVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IPrivateUnknown *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IPrivateUnknown *This);
      ULONG (WINAPI *Release)(IPrivateUnknown *This);
      HRESULT (WINAPI *ADSIInitializeObject)(IPrivateUnknown *This,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved);
      HRESULT (WINAPI *ADSIReleaseObject)(IPrivateUnknown *This);
    END_INTERFACE
  } IPrivateUnknownVtbl;
  struct IPrivateUnknown {
    CONST_VTBL struct IPrivateUnknownVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IPrivateUnknown_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPrivateUnknown_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPrivateUnknown_Release(This) (This)->lpVtbl->Release(This)
#define IPrivateUnknown_ADSIInitializeObject(This,lpszUserName,lpszPassword,lnReserved) (This)->lpVtbl->ADSIInitializeObject(This,lpszUserName,lpszPassword,lnReserved)
#define IPrivateUnknown_ADSIReleaseObject(This) (This)->lpVtbl->ADSIReleaseObject(This)
#endif
#endif
  HRESULT WINAPI IPrivateUnknown_ADSIInitializeObject_Proxy(IPrivateUnknown *This,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved);
  void __RPC_STUB IPrivateUnknown_ADSIInitializeObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPrivateUnknown_ADSIReleaseObject_Proxy(IPrivateUnknown *This);
  void __RPC_STUB IPrivateUnknown_ADSIReleaseObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsExtension_INTERFACE_DEFINED__
#define __IADsExtension_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsExtension;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsExtension : public IUnknown {
  public:
    virtual HRESULT WINAPI Operate(DWORD dwCode,VARIANT varData1,VARIANT varData2,VARIANT varData3) = 0;
    virtual HRESULT WINAPI PrivateGetIDsOfNames(REFIID riid,OLECHAR **rgszNames,unsigned int cNames,LCID lcid,DISPID *rgDispid) = 0;
    virtual HRESULT WINAPI PrivateInvoke(DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,unsigned int *puArgErr) = 0;
  };
#else
  typedef struct IADsExtensionVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsExtension *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsExtension *This);
      ULONG (WINAPI *Release)(IADsExtension *This);
      HRESULT (WINAPI *Operate)(IADsExtension *This,DWORD dwCode,VARIANT varData1,VARIANT varData2,VARIANT varData3);
      HRESULT (WINAPI *PrivateGetIDsOfNames)(IADsExtension *This,REFIID riid,OLECHAR **rgszNames,unsigned int cNames,LCID lcid,DISPID *rgDispid);
      HRESULT (WINAPI *PrivateInvoke)(IADsExtension *This,DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,unsigned int *puArgErr);
    END_INTERFACE
  } IADsExtensionVtbl;
  struct IADsExtension {
    CONST_VTBL struct IADsExtensionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsExtension_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsExtension_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsExtension_Release(This) (This)->lpVtbl->Release(This)
#define IADsExtension_Operate(This,dwCode,varData1,varData2,varData3) (This)->lpVtbl->Operate(This,dwCode,varData1,varData2,varData3)
#define IADsExtension_PrivateGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispid) (This)->lpVtbl->PrivateGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispid)
#define IADsExtension_PrivateInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr) (This)->lpVtbl->PrivateInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr)
#endif
#endif
  HRESULT WINAPI IADsExtension_Operate_Proxy(IADsExtension *This,DWORD dwCode,VARIANT varData1,VARIANT varData2,VARIANT varData3);
  void __RPC_STUB IADsExtension_Operate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsExtension_PrivateGetIDsOfNames_Proxy(IADsExtension *This,REFIID riid,OLECHAR **rgszNames,unsigned int cNames,LCID lcid,DISPID *rgDispid);
  void __RPC_STUB IADsExtension_PrivateGetIDsOfNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsExtension_PrivateInvoke_Proxy(IADsExtension *This,DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pdispparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,unsigned int *puArgErr);
  void __RPC_STUB IADsExtension_PrivateInvoke_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsDeleteOps_INTERFACE_DEFINED__
#define __IADsDeleteOps_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsDeleteOps;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsDeleteOps : public IDispatch {
  public:
    virtual HRESULT WINAPI DeleteObject(__LONG32 lnFlags) = 0;
  };
#else
  typedef struct IADsDeleteOpsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsDeleteOps *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsDeleteOps *This);
      ULONG (WINAPI *Release)(IADsDeleteOps *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsDeleteOps *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsDeleteOps *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsDeleteOps *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsDeleteOps *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *DeleteObject)(IADsDeleteOps *This,__LONG32 lnFlags);
    END_INTERFACE
  } IADsDeleteOpsVtbl;
  struct IADsDeleteOps {
    CONST_VTBL struct IADsDeleteOpsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsDeleteOps_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsDeleteOps_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsDeleteOps_Release(This) (This)->lpVtbl->Release(This)
#define IADsDeleteOps_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsDeleteOps_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsDeleteOps_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsDeleteOps_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsDeleteOps_DeleteObject(This,lnFlags) (This)->lpVtbl->DeleteObject(This,lnFlags)
#endif
#endif
  HRESULT WINAPI IADsDeleteOps_DeleteObject_Proxy(IADsDeleteOps *This,__LONG32 lnFlags);
  void __RPC_STUB IADsDeleteOps_DeleteObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsNamespaces_INTERFACE_DEFINED__
#define __IADsNamespaces_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsNamespaces;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsNamespaces : public IADs {
  public:
    virtual HRESULT WINAPI get_DefaultContainer(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_DefaultContainer(BSTR bstrDefaultContainer) = 0;
  };
#else
  typedef struct IADsNamespacesVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsNamespaces *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsNamespaces *This);
      ULONG (WINAPI *Release)(IADsNamespaces *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsNamespaces *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsNamespaces *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsNamespaces *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsNamespaces *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsNamespaces *This);
      HRESULT (WINAPI *SetInfo)(IADsNamespaces *This);
      HRESULT (WINAPI *Get)(IADsNamespaces *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsNamespaces *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsNamespaces *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsNamespaces *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsNamespaces *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_DefaultContainer)(IADsNamespaces *This,BSTR *retval);
      HRESULT (WINAPI *put_DefaultContainer)(IADsNamespaces *This,BSTR bstrDefaultContainer);
    END_INTERFACE
  } IADsNamespacesVtbl;
  struct IADsNamespaces {
    CONST_VTBL struct IADsNamespacesVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsNamespaces_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsNamespaces_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsNamespaces_Release(This) (This)->lpVtbl->Release(This)
#define IADsNamespaces_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsNamespaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsNamespaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsNamespaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsNamespaces_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsNamespaces_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsNamespaces_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsNamespaces_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsNamespaces_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsNamespaces_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsNamespaces_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsNamespaces_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsNamespaces_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsNamespaces_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsNamespaces_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsNamespaces_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsNamespaces_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsNamespaces_get_DefaultContainer(This,retval) (This)->lpVtbl->get_DefaultContainer(This,retval)
#define IADsNamespaces_put_DefaultContainer(This,bstrDefaultContainer) (This)->lpVtbl->put_DefaultContainer(This,bstrDefaultContainer)
#endif
#endif
  HRESULT WINAPI IADsNamespaces_get_DefaultContainer_Proxy(IADsNamespaces *This,BSTR *retval);
  void __RPC_STUB IADsNamespaces_get_DefaultContainer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNamespaces_put_DefaultContainer_Proxy(IADsNamespaces *This,BSTR bstrDefaultContainer);
  void __RPC_STUB IADsNamespaces_put_DefaultContainer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsClass_INTERFACE_DEFINED__
#define __IADsClass_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsClass;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsClass : public IADs {
  public:
    virtual HRESULT WINAPI get_PrimaryInterface(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_CLSID(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_CLSID(BSTR bstrCLSID) = 0;
    virtual HRESULT WINAPI get_OID(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_OID(BSTR bstrOID) = 0;
    virtual HRESULT WINAPI get_Abstract(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Abstract(VARIANT_BOOL fAbstract) = 0;
    virtual HRESULT WINAPI get_Auxiliary(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Auxiliary(VARIANT_BOOL fAuxiliary) = 0;
    virtual HRESULT WINAPI get_MandatoryProperties(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_MandatoryProperties(VARIANT vMandatoryProperties) = 0;
    virtual HRESULT WINAPI get_OptionalProperties(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_OptionalProperties(VARIANT vOptionalProperties) = 0;
    virtual HRESULT WINAPI get_NamingProperties(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_NamingProperties(VARIANT vNamingProperties) = 0;
    virtual HRESULT WINAPI get_DerivedFrom(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_DerivedFrom(VARIANT vDerivedFrom) = 0;
    virtual HRESULT WINAPI get_AuxDerivedFrom(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_AuxDerivedFrom(VARIANT vAuxDerivedFrom) = 0;
    virtual HRESULT WINAPI get_PossibleSuperiors(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_PossibleSuperiors(VARIANT vPossibleSuperiors) = 0;
    virtual HRESULT WINAPI get_Containment(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Containment(VARIANT vContainment) = 0;
    virtual HRESULT WINAPI get_Container(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Container(VARIANT_BOOL fContainer) = 0;
    virtual HRESULT WINAPI get_HelpFileName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_HelpFileName(BSTR bstrHelpFileName) = 0;
    virtual HRESULT WINAPI get_HelpFileContext(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_HelpFileContext(__LONG32 lnHelpFileContext) = 0;
    virtual HRESULT WINAPI Qualifiers(IADsCollection **ppQualifiers) = 0;
  };
#else
  typedef struct IADsClassVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsClass *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsClass *This);
      ULONG (WINAPI *Release)(IADsClass *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsClass *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsClass *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsClass *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsClass *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsClass *This);
      HRESULT (WINAPI *SetInfo)(IADsClass *This);
      HRESULT (WINAPI *Get)(IADsClass *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsClass *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsClass *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsClass *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsClass *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_PrimaryInterface)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *get_CLSID)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *put_CLSID)(IADsClass *This,BSTR bstrCLSID);
      HRESULT (WINAPI *get_OID)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *put_OID)(IADsClass *This,BSTR bstrOID);
      HRESULT (WINAPI *get_Abstract)(IADsClass *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Abstract)(IADsClass *This,VARIANT_BOOL fAbstract);
      HRESULT (WINAPI *get_Auxiliary)(IADsClass *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Auxiliary)(IADsClass *This,VARIANT_BOOL fAuxiliary);
      HRESULT (WINAPI *get_MandatoryProperties)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_MandatoryProperties)(IADsClass *This,VARIANT vMandatoryProperties);
      HRESULT (WINAPI *get_OptionalProperties)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_OptionalProperties)(IADsClass *This,VARIANT vOptionalProperties);
      HRESULT (WINAPI *get_NamingProperties)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_NamingProperties)(IADsClass *This,VARIANT vNamingProperties);
      HRESULT (WINAPI *get_DerivedFrom)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_DerivedFrom)(IADsClass *This,VARIANT vDerivedFrom);
      HRESULT (WINAPI *get_AuxDerivedFrom)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_AuxDerivedFrom)(IADsClass *This,VARIANT vAuxDerivedFrom);
      HRESULT (WINAPI *get_PossibleSuperiors)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_PossibleSuperiors)(IADsClass *This,VARIANT vPossibleSuperiors);
      HRESULT (WINAPI *get_Containment)(IADsClass *This,VARIANT *retval);
      HRESULT (WINAPI *put_Containment)(IADsClass *This,VARIANT vContainment);
      HRESULT (WINAPI *get_Container)(IADsClass *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Container)(IADsClass *This,VARIANT_BOOL fContainer);
      HRESULT (WINAPI *get_HelpFileName)(IADsClass *This,BSTR *retval);
      HRESULT (WINAPI *put_HelpFileName)(IADsClass *This,BSTR bstrHelpFileName);
      HRESULT (WINAPI *get_HelpFileContext)(IADsClass *This,__LONG32 *retval);
      HRESULT (WINAPI *put_HelpFileContext)(IADsClass *This,__LONG32 lnHelpFileContext);
      HRESULT (WINAPI *Qualifiers)(IADsClass *This,IADsCollection **ppQualifiers);
    END_INTERFACE
  } IADsClassVtbl;
  struct IADsClass {
    CONST_VTBL struct IADsClassVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsClass_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsClass_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsClass_Release(This) (This)->lpVtbl->Release(This)
#define IADsClass_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsClass_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsClass_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsClass_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsClass_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsClass_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsClass_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsClass_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsClass_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsClass_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsClass_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsClass_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsClass_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsClass_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsClass_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsClass_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsClass_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsClass_get_PrimaryInterface(This,retval) (This)->lpVtbl->get_PrimaryInterface(This,retval)
#define IADsClass_get_CLSID(This,retval) (This)->lpVtbl->get_CLSID(This,retval)
#define IADsClass_put_CLSID(This,bstrCLSID) (This)->lpVtbl->put_CLSID(This,bstrCLSID)
#define IADsClass_get_OID(This,retval) (This)->lpVtbl->get_OID(This,retval)
#define IADsClass_put_OID(This,bstrOID) (This)->lpVtbl->put_OID(This,bstrOID)
#define IADsClass_get_Abstract(This,retval) (This)->lpVtbl->get_Abstract(This,retval)
#define IADsClass_put_Abstract(This,fAbstract) (This)->lpVtbl->put_Abstract(This,fAbstract)
#define IADsClass_get_Auxiliary(This,retval) (This)->lpVtbl->get_Auxiliary(This,retval)
#define IADsClass_put_Auxiliary(This,fAuxiliary) (This)->lpVtbl->put_Auxiliary(This,fAuxiliary)
#define IADsClass_get_MandatoryProperties(This,retval) (This)->lpVtbl->get_MandatoryProperties(This,retval)
#define IADsClass_put_MandatoryProperties(This,vMandatoryProperties) (This)->lpVtbl->put_MandatoryProperties(This,vMandatoryProperties)
#define IADsClass_get_OptionalProperties(This,retval) (This)->lpVtbl->get_OptionalProperties(This,retval)
#define IADsClass_put_OptionalProperties(This,vOptionalProperties) (This)->lpVtbl->put_OptionalProperties(This,vOptionalProperties)
#define IADsClass_get_NamingProperties(This,retval) (This)->lpVtbl->get_NamingProperties(This,retval)
#define IADsClass_put_NamingProperties(This,vNamingProperties) (This)->lpVtbl->put_NamingProperties(This,vNamingProperties)
#define IADsClass_get_DerivedFrom(This,retval) (This)->lpVtbl->get_DerivedFrom(This,retval)
#define IADsClass_put_DerivedFrom(This,vDerivedFrom) (This)->lpVtbl->put_DerivedFrom(This,vDerivedFrom)
#define IADsClass_get_AuxDerivedFrom(This,retval) (This)->lpVtbl->get_AuxDerivedFrom(This,retval)
#define IADsClass_put_AuxDerivedFrom(This,vAuxDerivedFrom) (This)->lpVtbl->put_AuxDerivedFrom(This,vAuxDerivedFrom)
#define IADsClass_get_PossibleSuperiors(This,retval) (This)->lpVtbl->get_PossibleSuperiors(This,retval)
#define IADsClass_put_PossibleSuperiors(This,vPossibleSuperiors) (This)->lpVtbl->put_PossibleSuperiors(This,vPossibleSuperiors)
#define IADsClass_get_Containment(This,retval) (This)->lpVtbl->get_Containment(This,retval)
#define IADsClass_put_Containment(This,vContainment) (This)->lpVtbl->put_Containment(This,vContainment)
#define IADsClass_get_Container(This,retval) (This)->lpVtbl->get_Container(This,retval)
#define IADsClass_put_Container(This,fContainer) (This)->lpVtbl->put_Container(This,fContainer)
#define IADsClass_get_HelpFileName(This,retval) (This)->lpVtbl->get_HelpFileName(This,retval)
#define IADsClass_put_HelpFileName(This,bstrHelpFileName) (This)->lpVtbl->put_HelpFileName(This,bstrHelpFileName)
#define IADsClass_get_HelpFileContext(This,retval) (This)->lpVtbl->get_HelpFileContext(This,retval)
#define IADsClass_put_HelpFileContext(This,lnHelpFileContext) (This)->lpVtbl->put_HelpFileContext(This,lnHelpFileContext)
#define IADsClass_Qualifiers(This,ppQualifiers) (This)->lpVtbl->Qualifiers(This,ppQualifiers)
#endif
#endif
  HRESULT WINAPI IADsClass_get_PrimaryInterface_Proxy(IADsClass *This,BSTR *retval);
  void __RPC_STUB IADsClass_get_PrimaryInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_CLSID_Proxy(IADsClass *This,BSTR *retval);
  void __RPC_STUB IADsClass_get_CLSID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_CLSID_Proxy(IADsClass *This,BSTR bstrCLSID);
  void __RPC_STUB IADsClass_put_CLSID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_OID_Proxy(IADsClass *This,BSTR *retval);
  void __RPC_STUB IADsClass_get_OID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_OID_Proxy(IADsClass *This,BSTR bstrOID);
  void __RPC_STUB IADsClass_put_OID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_Abstract_Proxy(IADsClass *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsClass_get_Abstract_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_Abstract_Proxy(IADsClass *This,VARIANT_BOOL fAbstract);
  void __RPC_STUB IADsClass_put_Abstract_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_Auxiliary_Proxy(IADsClass *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsClass_get_Auxiliary_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_Auxiliary_Proxy(IADsClass *This,VARIANT_BOOL fAuxiliary);
  void __RPC_STUB IADsClass_put_Auxiliary_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_MandatoryProperties_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_MandatoryProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_MandatoryProperties_Proxy(IADsClass *This,VARIANT vMandatoryProperties);
  void __RPC_STUB IADsClass_put_MandatoryProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_OptionalProperties_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_OptionalProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_OptionalProperties_Proxy(IADsClass *This,VARIANT vOptionalProperties);
  void __RPC_STUB IADsClass_put_OptionalProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_NamingProperties_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_NamingProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_NamingProperties_Proxy(IADsClass *This,VARIANT vNamingProperties);
  void __RPC_STUB IADsClass_put_NamingProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_DerivedFrom_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_DerivedFrom_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_DerivedFrom_Proxy(IADsClass *This,VARIANT vDerivedFrom);
  void __RPC_STUB IADsClass_put_DerivedFrom_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_AuxDerivedFrom_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_AuxDerivedFrom_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_AuxDerivedFrom_Proxy(IADsClass *This,VARIANT vAuxDerivedFrom);
  void __RPC_STUB IADsClass_put_AuxDerivedFrom_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_PossibleSuperiors_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_PossibleSuperiors_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_PossibleSuperiors_Proxy(IADsClass *This,VARIANT vPossibleSuperiors);
  void __RPC_STUB IADsClass_put_PossibleSuperiors_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_Containment_Proxy(IADsClass *This,VARIANT *retval);
  void __RPC_STUB IADsClass_get_Containment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_Containment_Proxy(IADsClass *This,VARIANT vContainment);
  void __RPC_STUB IADsClass_put_Containment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_Container_Proxy(IADsClass *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsClass_get_Container_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_Container_Proxy(IADsClass *This,VARIANT_BOOL fContainer);
  void __RPC_STUB IADsClass_put_Container_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_HelpFileName_Proxy(IADsClass *This,BSTR *retval);
  void __RPC_STUB IADsClass_get_HelpFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_HelpFileName_Proxy(IADsClass *This,BSTR bstrHelpFileName);
  void __RPC_STUB IADsClass_put_HelpFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_get_HelpFileContext_Proxy(IADsClass *This,__LONG32 *retval);
  void __RPC_STUB IADsClass_get_HelpFileContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_put_HelpFileContext_Proxy(IADsClass *This,__LONG32 lnHelpFileContext);
  void __RPC_STUB IADsClass_put_HelpFileContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsClass_Qualifiers_Proxy(IADsClass *This,IADsCollection **ppQualifiers);
  void __RPC_STUB IADsClass_Qualifiers_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsProperty_INTERFACE_DEFINED__
#define __IADsProperty_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsProperty;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsProperty : public IADs {
  public:
    virtual HRESULT WINAPI get_OID(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_OID(BSTR bstrOID) = 0;
    virtual HRESULT WINAPI get_Syntax(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Syntax(BSTR bstrSyntax) = 0;
    virtual HRESULT WINAPI get_MaxRange(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxRange(__LONG32 lnMaxRange) = 0;
    virtual HRESULT WINAPI get_MinRange(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MinRange(__LONG32 lnMinRange) = 0;
    virtual HRESULT WINAPI get_MultiValued(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_MultiValued(VARIANT_BOOL fMultiValued) = 0;
    virtual HRESULT WINAPI Qualifiers(IADsCollection **ppQualifiers) = 0;
  };
#else
  typedef struct IADsPropertyVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsProperty *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsProperty *This);
      ULONG (WINAPI *Release)(IADsProperty *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsProperty *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsProperty *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsProperty *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsProperty *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsProperty *This);
      HRESULT (WINAPI *SetInfo)(IADsProperty *This);
      HRESULT (WINAPI *Get)(IADsProperty *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsProperty *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsProperty *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsProperty *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsProperty *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_OID)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *put_OID)(IADsProperty *This,BSTR bstrOID);
      HRESULT (WINAPI *get_Syntax)(IADsProperty *This,BSTR *retval);
      HRESULT (WINAPI *put_Syntax)(IADsProperty *This,BSTR bstrSyntax);
      HRESULT (WINAPI *get_MaxRange)(IADsProperty *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxRange)(IADsProperty *This,__LONG32 lnMaxRange);
      HRESULT (WINAPI *get_MinRange)(IADsProperty *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MinRange)(IADsProperty *This,__LONG32 lnMinRange);
      HRESULT (WINAPI *get_MultiValued)(IADsProperty *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_MultiValued)(IADsProperty *This,VARIANT_BOOL fMultiValued);
      HRESULT (WINAPI *Qualifiers)(IADsProperty *This,IADsCollection **ppQualifiers);
    END_INTERFACE
  } IADsPropertyVtbl;
  struct IADsProperty {
    CONST_VTBL struct IADsPropertyVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsProperty_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsProperty_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsProperty_Release(This) (This)->lpVtbl->Release(This)
#define IADsProperty_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsProperty_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsProperty_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsProperty_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsProperty_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsProperty_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsProperty_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsProperty_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsProperty_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsProperty_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsProperty_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsProperty_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsProperty_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsProperty_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsProperty_get_OID(This,retval) (This)->lpVtbl->get_OID(This,retval)
#define IADsProperty_put_OID(This,bstrOID) (This)->lpVtbl->put_OID(This,bstrOID)
#define IADsProperty_get_Syntax(This,retval) (This)->lpVtbl->get_Syntax(This,retval)
#define IADsProperty_put_Syntax(This,bstrSyntax) (This)->lpVtbl->put_Syntax(This,bstrSyntax)
#define IADsProperty_get_MaxRange(This,retval) (This)->lpVtbl->get_MaxRange(This,retval)
#define IADsProperty_put_MaxRange(This,lnMaxRange) (This)->lpVtbl->put_MaxRange(This,lnMaxRange)
#define IADsProperty_get_MinRange(This,retval) (This)->lpVtbl->get_MinRange(This,retval)
#define IADsProperty_put_MinRange(This,lnMinRange) (This)->lpVtbl->put_MinRange(This,lnMinRange)
#define IADsProperty_get_MultiValued(This,retval) (This)->lpVtbl->get_MultiValued(This,retval)
#define IADsProperty_put_MultiValued(This,fMultiValued) (This)->lpVtbl->put_MultiValued(This,fMultiValued)
#define IADsProperty_Qualifiers(This,ppQualifiers) (This)->lpVtbl->Qualifiers(This,ppQualifiers)
#endif
#endif
  HRESULT WINAPI IADsProperty_get_OID_Proxy(IADsProperty *This,BSTR *retval);
  void __RPC_STUB IADsProperty_get_OID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_put_OID_Proxy(IADsProperty *This,BSTR bstrOID);
  void __RPC_STUB IADsProperty_put_OID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_get_Syntax_Proxy(IADsProperty *This,BSTR *retval);
  void __RPC_STUB IADsProperty_get_Syntax_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_put_Syntax_Proxy(IADsProperty *This,BSTR bstrSyntax);
  void __RPC_STUB IADsProperty_put_Syntax_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_get_MaxRange_Proxy(IADsProperty *This,__LONG32 *retval);
  void __RPC_STUB IADsProperty_get_MaxRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_put_MaxRange_Proxy(IADsProperty *This,__LONG32 lnMaxRange);
  void __RPC_STUB IADsProperty_put_MaxRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_get_MinRange_Proxy(IADsProperty *This,__LONG32 *retval);
  void __RPC_STUB IADsProperty_get_MinRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_put_MinRange_Proxy(IADsProperty *This,__LONG32 lnMinRange);
  void __RPC_STUB IADsProperty_put_MinRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_get_MultiValued_Proxy(IADsProperty *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsProperty_get_MultiValued_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_put_MultiValued_Proxy(IADsProperty *This,VARIANT_BOOL fMultiValued);
  void __RPC_STUB IADsProperty_put_MultiValued_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsProperty_Qualifiers_Proxy(IADsProperty *This,IADsCollection **ppQualifiers);
  void __RPC_STUB IADsProperty_Qualifiers_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsSyntax_INTERFACE_DEFINED__
#define __IADsSyntax_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsSyntax;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsSyntax : public IADs {
  public:
    virtual HRESULT WINAPI get_OleAutoDataType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_OleAutoDataType(__LONG32 lnOleAutoDataType) = 0;
  };
#else
  typedef struct IADsSyntaxVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsSyntax *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsSyntax *This);
      ULONG (WINAPI *Release)(IADsSyntax *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsSyntax *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsSyntax *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsSyntax *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsSyntax *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsSyntax *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsSyntax *This);
      HRESULT (WINAPI *SetInfo)(IADsSyntax *This);
      HRESULT (WINAPI *Get)(IADsSyntax *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsSyntax *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsSyntax *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsSyntax *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsSyntax *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_OleAutoDataType)(IADsSyntax *This,__LONG32 *retval);
      HRESULT (WINAPI *put_OleAutoDataType)(IADsSyntax *This,__LONG32 lnOleAutoDataType);
    END_INTERFACE
  } IADsSyntaxVtbl;
  struct IADsSyntax {
    CONST_VTBL struct IADsSyntaxVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsSyntax_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsSyntax_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsSyntax_Release(This) (This)->lpVtbl->Release(This)
#define IADsSyntax_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsSyntax_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsSyntax_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsSyntax_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsSyntax_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsSyntax_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsSyntax_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsSyntax_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsSyntax_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsSyntax_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsSyntax_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsSyntax_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsSyntax_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsSyntax_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsSyntax_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsSyntax_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsSyntax_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsSyntax_get_OleAutoDataType(This,retval) (This)->lpVtbl->get_OleAutoDataType(This,retval)
#define IADsSyntax_put_OleAutoDataType(This,lnOleAutoDataType) (This)->lpVtbl->put_OleAutoDataType(This,lnOleAutoDataType)
#endif
#endif
  HRESULT WINAPI IADsSyntax_get_OleAutoDataType_Proxy(IADsSyntax *This,__LONG32 *retval);
  void __RPC_STUB IADsSyntax_get_OleAutoDataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSyntax_put_OleAutoDataType_Proxy(IADsSyntax *This,__LONG32 lnOleAutoDataType);
  void __RPC_STUB IADsSyntax_put_OleAutoDataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsLocality_INTERFACE_DEFINED__
#define __IADsLocality_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsLocality;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsLocality : public IADs {
  public:
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_LocalityName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LocalityName(BSTR bstrLocalityName) = 0;
    virtual HRESULT WINAPI get_PostalAddress(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PostalAddress(BSTR bstrPostalAddress) = 0;
    virtual HRESULT WINAPI get_SeeAlso(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_SeeAlso(VARIANT vSeeAlso) = 0;
  };
#else
  typedef struct IADsLocalityVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsLocality *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsLocality *This);
      ULONG (WINAPI *Release)(IADsLocality *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsLocality *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsLocality *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsLocality *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsLocality *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsLocality *This);
      HRESULT (WINAPI *SetInfo)(IADsLocality *This);
      HRESULT (WINAPI *Get)(IADsLocality *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsLocality *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsLocality *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsLocality *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsLocality *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Description)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsLocality *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_LocalityName)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *put_LocalityName)(IADsLocality *This,BSTR bstrLocalityName);
      HRESULT (WINAPI *get_PostalAddress)(IADsLocality *This,BSTR *retval);
      HRESULT (WINAPI *put_PostalAddress)(IADsLocality *This,BSTR bstrPostalAddress);
      HRESULT (WINAPI *get_SeeAlso)(IADsLocality *This,VARIANT *retval);
      HRESULT (WINAPI *put_SeeAlso)(IADsLocality *This,VARIANT vSeeAlso);
    END_INTERFACE
  } IADsLocalityVtbl;
  struct IADsLocality {
    CONST_VTBL struct IADsLocalityVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsLocality_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsLocality_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsLocality_Release(This) (This)->lpVtbl->Release(This)
#define IADsLocality_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsLocality_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsLocality_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsLocality_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsLocality_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsLocality_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsLocality_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsLocality_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsLocality_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsLocality_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsLocality_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsLocality_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsLocality_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsLocality_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsLocality_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsLocality_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsLocality_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsLocality_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsLocality_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsLocality_get_LocalityName(This,retval) (This)->lpVtbl->get_LocalityName(This,retval)
#define IADsLocality_put_LocalityName(This,bstrLocalityName) (This)->lpVtbl->put_LocalityName(This,bstrLocalityName)
#define IADsLocality_get_PostalAddress(This,retval) (This)->lpVtbl->get_PostalAddress(This,retval)
#define IADsLocality_put_PostalAddress(This,bstrPostalAddress) (This)->lpVtbl->put_PostalAddress(This,bstrPostalAddress)
#define IADsLocality_get_SeeAlso(This,retval) (This)->lpVtbl->get_SeeAlso(This,retval)
#define IADsLocality_put_SeeAlso(This,vSeeAlso) (This)->lpVtbl->put_SeeAlso(This,vSeeAlso)
#endif
#endif
  HRESULT WINAPI IADsLocality_get_Description_Proxy(IADsLocality *This,BSTR *retval);
  void __RPC_STUB IADsLocality_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_put_Description_Proxy(IADsLocality *This,BSTR bstrDescription);
  void __RPC_STUB IADsLocality_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_get_LocalityName_Proxy(IADsLocality *This,BSTR *retval);
  void __RPC_STUB IADsLocality_get_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_put_LocalityName_Proxy(IADsLocality *This,BSTR bstrLocalityName);
  void __RPC_STUB IADsLocality_put_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_get_PostalAddress_Proxy(IADsLocality *This,BSTR *retval);
  void __RPC_STUB IADsLocality_get_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_put_PostalAddress_Proxy(IADsLocality *This,BSTR bstrPostalAddress);
  void __RPC_STUB IADsLocality_put_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_get_SeeAlso_Proxy(IADsLocality *This,VARIANT *retval);
  void __RPC_STUB IADsLocality_get_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLocality_put_SeeAlso_Proxy(IADsLocality *This,VARIANT vSeeAlso);
  void __RPC_STUB IADsLocality_put_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsO_INTERFACE_DEFINED__
#define __IADsO_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsO;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsO : public IADs {
  public:
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_LocalityName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LocalityName(BSTR bstrLocalityName) = 0;
    virtual HRESULT WINAPI get_PostalAddress(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PostalAddress(BSTR bstrPostalAddress) = 0;
    virtual HRESULT WINAPI get_TelephoneNumber(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneNumber(BSTR bstrTelephoneNumber) = 0;
    virtual HRESULT WINAPI get_FaxNumber(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_FaxNumber(BSTR bstrFaxNumber) = 0;
    virtual HRESULT WINAPI get_SeeAlso(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_SeeAlso(VARIANT vSeeAlso) = 0;
  };
#else
  typedef struct IADsOVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsO *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsO *This);
      ULONG (WINAPI *Release)(IADsO *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsO *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsO *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsO *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsO *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsO *This);
      HRESULT (WINAPI *SetInfo)(IADsO *This);
      HRESULT (WINAPI *Get)(IADsO *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsO *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsO *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsO *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsO *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Description)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsO *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_LocalityName)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *put_LocalityName)(IADsO *This,BSTR bstrLocalityName);
      HRESULT (WINAPI *get_PostalAddress)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *put_PostalAddress)(IADsO *This,BSTR bstrPostalAddress);
      HRESULT (WINAPI *get_TelephoneNumber)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *put_TelephoneNumber)(IADsO *This,BSTR bstrTelephoneNumber);
      HRESULT (WINAPI *get_FaxNumber)(IADsO *This,BSTR *retval);
      HRESULT (WINAPI *put_FaxNumber)(IADsO *This,BSTR bstrFaxNumber);
      HRESULT (WINAPI *get_SeeAlso)(IADsO *This,VARIANT *retval);
      HRESULT (WINAPI *put_SeeAlso)(IADsO *This,VARIANT vSeeAlso);
    END_INTERFACE
  } IADsOVtbl;
  struct IADsO {
    CONST_VTBL struct IADsOVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsO_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsO_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsO_Release(This) (This)->lpVtbl->Release(This)
#define IADsO_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsO_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsO_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsO_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsO_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsO_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsO_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsO_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsO_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsO_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsO_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsO_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsO_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsO_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsO_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsO_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsO_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsO_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsO_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsO_get_LocalityName(This,retval) (This)->lpVtbl->get_LocalityName(This,retval)
#define IADsO_put_LocalityName(This,bstrLocalityName) (This)->lpVtbl->put_LocalityName(This,bstrLocalityName)
#define IADsO_get_PostalAddress(This,retval) (This)->lpVtbl->get_PostalAddress(This,retval)
#define IADsO_put_PostalAddress(This,bstrPostalAddress) (This)->lpVtbl->put_PostalAddress(This,bstrPostalAddress)
#define IADsO_get_TelephoneNumber(This,retval) (This)->lpVtbl->get_TelephoneNumber(This,retval)
#define IADsO_put_TelephoneNumber(This,bstrTelephoneNumber) (This)->lpVtbl->put_TelephoneNumber(This,bstrTelephoneNumber)
#define IADsO_get_FaxNumber(This,retval) (This)->lpVtbl->get_FaxNumber(This,retval)
#define IADsO_put_FaxNumber(This,bstrFaxNumber) (This)->lpVtbl->put_FaxNumber(This,bstrFaxNumber)
#define IADsO_get_SeeAlso(This,retval) (This)->lpVtbl->get_SeeAlso(This,retval)
#define IADsO_put_SeeAlso(This,vSeeAlso) (This)->lpVtbl->put_SeeAlso(This,vSeeAlso)
#endif
#endif
  HRESULT WINAPI IADsO_get_Description_Proxy(IADsO *This,BSTR *retval);
  void __RPC_STUB IADsO_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_Description_Proxy(IADsO *This,BSTR bstrDescription);
  void __RPC_STUB IADsO_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_get_LocalityName_Proxy(IADsO *This,BSTR *retval);
  void __RPC_STUB IADsO_get_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_LocalityName_Proxy(IADsO *This,BSTR bstrLocalityName);
  void __RPC_STUB IADsO_put_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_get_PostalAddress_Proxy(IADsO *This,BSTR *retval);
  void __RPC_STUB IADsO_get_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_PostalAddress_Proxy(IADsO *This,BSTR bstrPostalAddress);
  void __RPC_STUB IADsO_put_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_get_TelephoneNumber_Proxy(IADsO *This,BSTR *retval);
  void __RPC_STUB IADsO_get_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_TelephoneNumber_Proxy(IADsO *This,BSTR bstrTelephoneNumber);
  void __RPC_STUB IADsO_put_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_get_FaxNumber_Proxy(IADsO *This,BSTR *retval);
  void __RPC_STUB IADsO_get_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_FaxNumber_Proxy(IADsO *This,BSTR bstrFaxNumber);
  void __RPC_STUB IADsO_put_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_get_SeeAlso_Proxy(IADsO *This,VARIANT *retval);
  void __RPC_STUB IADsO_get_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsO_put_SeeAlso_Proxy(IADsO *This,VARIANT vSeeAlso);
  void __RPC_STUB IADsO_put_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsOU_INTERFACE_DEFINED__
#define __IADsOU_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsOU;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsOU : public IADs {
  public:
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_LocalityName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LocalityName(BSTR bstrLocalityName) = 0;
    virtual HRESULT WINAPI get_PostalAddress(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PostalAddress(BSTR bstrPostalAddress) = 0;
    virtual HRESULT WINAPI get_TelephoneNumber(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneNumber(BSTR bstrTelephoneNumber) = 0;
    virtual HRESULT WINAPI get_FaxNumber(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_FaxNumber(BSTR bstrFaxNumber) = 0;
    virtual HRESULT WINAPI get_SeeAlso(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_SeeAlso(VARIANT vSeeAlso) = 0;
    virtual HRESULT WINAPI get_BusinessCategory(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_BusinessCategory(BSTR bstrBusinessCategory) = 0;
  };
#else
  typedef struct IADsOUVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsOU *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsOU *This);
      ULONG (WINAPI *Release)(IADsOU *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsOU *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsOU *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsOU *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsOU *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsOU *This);
      HRESULT (WINAPI *SetInfo)(IADsOU *This);
      HRESULT (WINAPI *Get)(IADsOU *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsOU *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsOU *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsOU *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsOU *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Description)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsOU *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_LocalityName)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_LocalityName)(IADsOU *This,BSTR bstrLocalityName);
      HRESULT (WINAPI *get_PostalAddress)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_PostalAddress)(IADsOU *This,BSTR bstrPostalAddress);
      HRESULT (WINAPI *get_TelephoneNumber)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_TelephoneNumber)(IADsOU *This,BSTR bstrTelephoneNumber);
      HRESULT (WINAPI *get_FaxNumber)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_FaxNumber)(IADsOU *This,BSTR bstrFaxNumber);
      HRESULT (WINAPI *get_SeeAlso)(IADsOU *This,VARIANT *retval);
      HRESULT (WINAPI *put_SeeAlso)(IADsOU *This,VARIANT vSeeAlso);
      HRESULT (WINAPI *get_BusinessCategory)(IADsOU *This,BSTR *retval);
      HRESULT (WINAPI *put_BusinessCategory)(IADsOU *This,BSTR bstrBusinessCategory);
    END_INTERFACE
  } IADsOUVtbl;
  struct IADsOU {
    CONST_VTBL struct IADsOUVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsOU_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsOU_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsOU_Release(This) (This)->lpVtbl->Release(This)
#define IADsOU_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsOU_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsOU_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsOU_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsOU_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsOU_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsOU_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsOU_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsOU_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsOU_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsOU_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsOU_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsOU_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsOU_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsOU_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsOU_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsOU_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsOU_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsOU_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsOU_get_LocalityName(This,retval) (This)->lpVtbl->get_LocalityName(This,retval)
#define IADsOU_put_LocalityName(This,bstrLocalityName) (This)->lpVtbl->put_LocalityName(This,bstrLocalityName)
#define IADsOU_get_PostalAddress(This,retval) (This)->lpVtbl->get_PostalAddress(This,retval)
#define IADsOU_put_PostalAddress(This,bstrPostalAddress) (This)->lpVtbl->put_PostalAddress(This,bstrPostalAddress)
#define IADsOU_get_TelephoneNumber(This,retval) (This)->lpVtbl->get_TelephoneNumber(This,retval)
#define IADsOU_put_TelephoneNumber(This,bstrTelephoneNumber) (This)->lpVtbl->put_TelephoneNumber(This,bstrTelephoneNumber)
#define IADsOU_get_FaxNumber(This,retval) (This)->lpVtbl->get_FaxNumber(This,retval)
#define IADsOU_put_FaxNumber(This,bstrFaxNumber) (This)->lpVtbl->put_FaxNumber(This,bstrFaxNumber)
#define IADsOU_get_SeeAlso(This,retval) (This)->lpVtbl->get_SeeAlso(This,retval)
#define IADsOU_put_SeeAlso(This,vSeeAlso) (This)->lpVtbl->put_SeeAlso(This,vSeeAlso)
#define IADsOU_get_BusinessCategory(This,retval) (This)->lpVtbl->get_BusinessCategory(This,retval)
#define IADsOU_put_BusinessCategory(This,bstrBusinessCategory) (This)->lpVtbl->put_BusinessCategory(This,bstrBusinessCategory)
#endif
#endif
  HRESULT WINAPI IADsOU_get_Description_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_Description_Proxy(IADsOU *This,BSTR bstrDescription);
  void __RPC_STUB IADsOU_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_LocalityName_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_LocalityName_Proxy(IADsOU *This,BSTR bstrLocalityName);
  void __RPC_STUB IADsOU_put_LocalityName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_PostalAddress_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_PostalAddress_Proxy(IADsOU *This,BSTR bstrPostalAddress);
  void __RPC_STUB IADsOU_put_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_TelephoneNumber_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_TelephoneNumber_Proxy(IADsOU *This,BSTR bstrTelephoneNumber);
  void __RPC_STUB IADsOU_put_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_FaxNumber_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_FaxNumber_Proxy(IADsOU *This,BSTR bstrFaxNumber);
  void __RPC_STUB IADsOU_put_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_SeeAlso_Proxy(IADsOU *This,VARIANT *retval);
  void __RPC_STUB IADsOU_get_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_SeeAlso_Proxy(IADsOU *This,VARIANT vSeeAlso);
  void __RPC_STUB IADsOU_put_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_get_BusinessCategory_Proxy(IADsOU *This,BSTR *retval);
  void __RPC_STUB IADsOU_get_BusinessCategory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOU_put_BusinessCategory_Proxy(IADsOU *This,BSTR bstrBusinessCategory);
  void __RPC_STUB IADsOU_put_BusinessCategory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsDomain_INTERFACE_DEFINED__
#define __IADsDomain_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsDomain;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsDomain : public IADs {
  public:
    virtual HRESULT WINAPI get_IsWorkgroup(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI get_MinPasswordLength(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MinPasswordLength(__LONG32 lnMinPasswordLength) = 0;
    virtual HRESULT WINAPI get_MinPasswordAge(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MinPasswordAge(__LONG32 lnMinPasswordAge) = 0;
    virtual HRESULT WINAPI get_MaxPasswordAge(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxPasswordAge(__LONG32 lnMaxPasswordAge) = 0;
    virtual HRESULT WINAPI get_MaxBadPasswordsAllowed(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxBadPasswordsAllowed(__LONG32 lnMaxBadPasswordsAllowed) = 0;
    virtual HRESULT WINAPI get_PasswordHistoryLength(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_PasswordHistoryLength(__LONG32 lnPasswordHistoryLength) = 0;
    virtual HRESULT WINAPI get_PasswordAttributes(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_PasswordAttributes(__LONG32 lnPasswordAttributes) = 0;
    virtual HRESULT WINAPI get_AutoUnlockInterval(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AutoUnlockInterval(__LONG32 lnAutoUnlockInterval) = 0;
    virtual HRESULT WINAPI get_LockoutObservationInterval(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_LockoutObservationInterval(__LONG32 lnLockoutObservationInterval) = 0;
  };
#else
  typedef struct IADsDomainVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsDomain *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsDomain *This);
      ULONG (WINAPI *Release)(IADsDomain *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsDomain *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsDomain *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsDomain *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsDomain *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsDomain *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsDomain *This);
      HRESULT (WINAPI *SetInfo)(IADsDomain *This);
      HRESULT (WINAPI *Get)(IADsDomain *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsDomain *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsDomain *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsDomain *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsDomain *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_IsWorkgroup)(IADsDomain *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *get_MinPasswordLength)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MinPasswordLength)(IADsDomain *This,__LONG32 lnMinPasswordLength);
      HRESULT (WINAPI *get_MinPasswordAge)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MinPasswordAge)(IADsDomain *This,__LONG32 lnMinPasswordAge);
      HRESULT (WINAPI *get_MaxPasswordAge)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxPasswordAge)(IADsDomain *This,__LONG32 lnMaxPasswordAge);
      HRESULT (WINAPI *get_MaxBadPasswordsAllowed)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxBadPasswordsAllowed)(IADsDomain *This,__LONG32 lnMaxBadPasswordsAllowed);
      HRESULT (WINAPI *get_PasswordHistoryLength)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_PasswordHistoryLength)(IADsDomain *This,__LONG32 lnPasswordHistoryLength);
      HRESULT (WINAPI *get_PasswordAttributes)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_PasswordAttributes)(IADsDomain *This,__LONG32 lnPasswordAttributes);
      HRESULT (WINAPI *get_AutoUnlockInterval)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AutoUnlockInterval)(IADsDomain *This,__LONG32 lnAutoUnlockInterval);
      HRESULT (WINAPI *get_LockoutObservationInterval)(IADsDomain *This,__LONG32 *retval);
      HRESULT (WINAPI *put_LockoutObservationInterval)(IADsDomain *This,__LONG32 lnLockoutObservationInterval);
    END_INTERFACE
  } IADsDomainVtbl;
  struct IADsDomain {
    CONST_VTBL struct IADsDomainVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsDomain_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsDomain_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsDomain_Release(This) (This)->lpVtbl->Release(This)
#define IADsDomain_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsDomain_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsDomain_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsDomain_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsDomain_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsDomain_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsDomain_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsDomain_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsDomain_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsDomain_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsDomain_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsDomain_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsDomain_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsDomain_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsDomain_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsDomain_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsDomain_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsDomain_get_IsWorkgroup(This,retval) (This)->lpVtbl->get_IsWorkgroup(This,retval)
#define IADsDomain_get_MinPasswordLength(This,retval) (This)->lpVtbl->get_MinPasswordLength(This,retval)
#define IADsDomain_put_MinPasswordLength(This,lnMinPasswordLength) (This)->lpVtbl->put_MinPasswordLength(This,lnMinPasswordLength)
#define IADsDomain_get_MinPasswordAge(This,retval) (This)->lpVtbl->get_MinPasswordAge(This,retval)
#define IADsDomain_put_MinPasswordAge(This,lnMinPasswordAge) (This)->lpVtbl->put_MinPasswordAge(This,lnMinPasswordAge)
#define IADsDomain_get_MaxPasswordAge(This,retval) (This)->lpVtbl->get_MaxPasswordAge(This,retval)
#define IADsDomain_put_MaxPasswordAge(This,lnMaxPasswordAge) (This)->lpVtbl->put_MaxPasswordAge(This,lnMaxPasswordAge)
#define IADsDomain_get_MaxBadPasswordsAllowed(This,retval) (This)->lpVtbl->get_MaxBadPasswordsAllowed(This,retval)
#define IADsDomain_put_MaxBadPasswordsAllowed(This,lnMaxBadPasswordsAllowed) (This)->lpVtbl->put_MaxBadPasswordsAllowed(This,lnMaxBadPasswordsAllowed)
#define IADsDomain_get_PasswordHistoryLength(This,retval) (This)->lpVtbl->get_PasswordHistoryLength(This,retval)
#define IADsDomain_put_PasswordHistoryLength(This,lnPasswordHistoryLength) (This)->lpVtbl->put_PasswordHistoryLength(This,lnPasswordHistoryLength)
#define IADsDomain_get_PasswordAttributes(This,retval) (This)->lpVtbl->get_PasswordAttributes(This,retval)
#define IADsDomain_put_PasswordAttributes(This,lnPasswordAttributes) (This)->lpVtbl->put_PasswordAttributes(This,lnPasswordAttributes)
#define IADsDomain_get_AutoUnlockInterval(This,retval) (This)->lpVtbl->get_AutoUnlockInterval(This,retval)
#define IADsDomain_put_AutoUnlockInterval(This,lnAutoUnlockInterval) (This)->lpVtbl->put_AutoUnlockInterval(This,lnAutoUnlockInterval)
#define IADsDomain_get_LockoutObservationInterval(This,retval) (This)->lpVtbl->get_LockoutObservationInterval(This,retval)
#define IADsDomain_put_LockoutObservationInterval(This,lnLockoutObservationInterval) (This)->lpVtbl->put_LockoutObservationInterval(This,lnLockoutObservationInterval)
#endif
#endif
  HRESULT WINAPI IADsDomain_get_IsWorkgroup_Proxy(IADsDomain *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsDomain_get_IsWorkgroup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_MinPasswordLength_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_MinPasswordLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_MinPasswordLength_Proxy(IADsDomain *This,__LONG32 lnMinPasswordLength);
  void __RPC_STUB IADsDomain_put_MinPasswordLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_MinPasswordAge_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_MinPasswordAge_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_MinPasswordAge_Proxy(IADsDomain *This,__LONG32 lnMinPasswordAge);
  void __RPC_STUB IADsDomain_put_MinPasswordAge_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_MaxPasswordAge_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_MaxPasswordAge_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_MaxPasswordAge_Proxy(IADsDomain *This,__LONG32 lnMaxPasswordAge);
  void __RPC_STUB IADsDomain_put_MaxPasswordAge_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_MaxBadPasswordsAllowed_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_MaxBadPasswordsAllowed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_MaxBadPasswordsAllowed_Proxy(IADsDomain *This,__LONG32 lnMaxBadPasswordsAllowed);
  void __RPC_STUB IADsDomain_put_MaxBadPasswordsAllowed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_PasswordHistoryLength_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_PasswordHistoryLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_PasswordHistoryLength_Proxy(IADsDomain *This,__LONG32 lnPasswordHistoryLength);
  void __RPC_STUB IADsDomain_put_PasswordHistoryLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_PasswordAttributes_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_PasswordAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_PasswordAttributes_Proxy(IADsDomain *This,__LONG32 lnPasswordAttributes);
  void __RPC_STUB IADsDomain_put_PasswordAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_AutoUnlockInterval_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_AutoUnlockInterval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_AutoUnlockInterval_Proxy(IADsDomain *This,__LONG32 lnAutoUnlockInterval);
  void __RPC_STUB IADsDomain_put_AutoUnlockInterval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_get_LockoutObservationInterval_Proxy(IADsDomain *This,__LONG32 *retval);
  void __RPC_STUB IADsDomain_get_LockoutObservationInterval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDomain_put_LockoutObservationInterval_Proxy(IADsDomain *This,__LONG32 lnLockoutObservationInterval);
  void __RPC_STUB IADsDomain_put_LockoutObservationInterval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsComputer_INTERFACE_DEFINED__
#define __IADsComputer_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsComputer;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsComputer : public IADs {
  public:
    virtual HRESULT WINAPI get_ComputerID(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_Site(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_Location(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Location(BSTR bstrLocation) = 0;
    virtual HRESULT WINAPI get_PrimaryUser(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PrimaryUser(BSTR bstrPrimaryUser) = 0;
    virtual HRESULT WINAPI get_Owner(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Owner(BSTR bstrOwner) = 0;
    virtual HRESULT WINAPI get_Division(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Division(BSTR bstrDivision) = 0;
    virtual HRESULT WINAPI get_Department(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Department(BSTR bstrDepartment) = 0;
    virtual HRESULT WINAPI get_Role(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Role(BSTR bstrRole) = 0;
    virtual HRESULT WINAPI get_OperatingSystem(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_OperatingSystem(BSTR bstrOperatingSystem) = 0;
    virtual HRESULT WINAPI get_OperatingSystemVersion(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_OperatingSystemVersion(BSTR bstrOperatingSystemVersion) = 0;
    virtual HRESULT WINAPI get_Model(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Model(BSTR bstrModel) = 0;
    virtual HRESULT WINAPI get_Processor(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Processor(BSTR bstrProcessor) = 0;
    virtual HRESULT WINAPI get_ProcessorCount(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ProcessorCount(BSTR bstrProcessorCount) = 0;
    virtual HRESULT WINAPI get_MemorySize(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_MemorySize(BSTR bstrMemorySize) = 0;
    virtual HRESULT WINAPI get_StorageCapacity(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_StorageCapacity(BSTR bstrStorageCapacity) = 0;
    virtual HRESULT WINAPI get_NetAddresses(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_NetAddresses(VARIANT vNetAddresses) = 0;
  };
#else
  typedef struct IADsComputerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsComputer *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsComputer *This);
      ULONG (WINAPI *Release)(IADsComputer *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsComputer *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsComputer *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsComputer *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsComputer *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsComputer *This);
      HRESULT (WINAPI *SetInfo)(IADsComputer *This);
      HRESULT (WINAPI *Get)(IADsComputer *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsComputer *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsComputer *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsComputer *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsComputer *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_ComputerID)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Site)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Description)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsComputer *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_Location)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Location)(IADsComputer *This,BSTR bstrLocation);
      HRESULT (WINAPI *get_PrimaryUser)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_PrimaryUser)(IADsComputer *This,BSTR bstrPrimaryUser);
      HRESULT (WINAPI *get_Owner)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Owner)(IADsComputer *This,BSTR bstrOwner);
      HRESULT (WINAPI *get_Division)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Division)(IADsComputer *This,BSTR bstrDivision);
      HRESULT (WINAPI *get_Department)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Department)(IADsComputer *This,BSTR bstrDepartment);
      HRESULT (WINAPI *get_Role)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Role)(IADsComputer *This,BSTR bstrRole);
      HRESULT (WINAPI *get_OperatingSystem)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_OperatingSystem)(IADsComputer *This,BSTR bstrOperatingSystem);
      HRESULT (WINAPI *get_OperatingSystemVersion)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_OperatingSystemVersion)(IADsComputer *This,BSTR bstrOperatingSystemVersion);
      HRESULT (WINAPI *get_Model)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Model)(IADsComputer *This,BSTR bstrModel);
      HRESULT (WINAPI *get_Processor)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_Processor)(IADsComputer *This,BSTR bstrProcessor);
      HRESULT (WINAPI *get_ProcessorCount)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_ProcessorCount)(IADsComputer *This,BSTR bstrProcessorCount);
      HRESULT (WINAPI *get_MemorySize)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_MemorySize)(IADsComputer *This,BSTR bstrMemorySize);
      HRESULT (WINAPI *get_StorageCapacity)(IADsComputer *This,BSTR *retval);
      HRESULT (WINAPI *put_StorageCapacity)(IADsComputer *This,BSTR bstrStorageCapacity);
      HRESULT (WINAPI *get_NetAddresses)(IADsComputer *This,VARIANT *retval);
      HRESULT (WINAPI *put_NetAddresses)(IADsComputer *This,VARIANT vNetAddresses);
    END_INTERFACE
  } IADsComputerVtbl;
  struct IADsComputer {
    CONST_VTBL struct IADsComputerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsComputer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsComputer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsComputer_Release(This) (This)->lpVtbl->Release(This)
#define IADsComputer_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsComputer_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsComputer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsComputer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsComputer_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsComputer_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsComputer_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsComputer_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsComputer_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsComputer_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsComputer_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsComputer_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsComputer_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsComputer_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsComputer_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsComputer_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsComputer_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsComputer_get_ComputerID(This,retval) (This)->lpVtbl->get_ComputerID(This,retval)
#define IADsComputer_get_Site(This,retval) (This)->lpVtbl->get_Site(This,retval)
#define IADsComputer_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsComputer_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsComputer_get_Location(This,retval) (This)->lpVtbl->get_Location(This,retval)
#define IADsComputer_put_Location(This,bstrLocation) (This)->lpVtbl->put_Location(This,bstrLocation)
#define IADsComputer_get_PrimaryUser(This,retval) (This)->lpVtbl->get_PrimaryUser(This,retval)
#define IADsComputer_put_PrimaryUser(This,bstrPrimaryUser) (This)->lpVtbl->put_PrimaryUser(This,bstrPrimaryUser)
#define IADsComputer_get_Owner(This,retval) (This)->lpVtbl->get_Owner(This,retval)
#define IADsComputer_put_Owner(This,bstrOwner) (This)->lpVtbl->put_Owner(This,bstrOwner)
#define IADsComputer_get_Division(This,retval) (This)->lpVtbl->get_Division(This,retval)
#define IADsComputer_put_Division(This,bstrDivision) (This)->lpVtbl->put_Division(This,bstrDivision)
#define IADsComputer_get_Department(This,retval) (This)->lpVtbl->get_Department(This,retval)
#define IADsComputer_put_Department(This,bstrDepartment) (This)->lpVtbl->put_Department(This,bstrDepartment)
#define IADsComputer_get_Role(This,retval) (This)->lpVtbl->get_Role(This,retval)
#define IADsComputer_put_Role(This,bstrRole) (This)->lpVtbl->put_Role(This,bstrRole)
#define IADsComputer_get_OperatingSystem(This,retval) (This)->lpVtbl->get_OperatingSystem(This,retval)
#define IADsComputer_put_OperatingSystem(This,bstrOperatingSystem) (This)->lpVtbl->put_OperatingSystem(This,bstrOperatingSystem)
#define IADsComputer_get_OperatingSystemVersion(This,retval) (This)->lpVtbl->get_OperatingSystemVersion(This,retval)
#define IADsComputer_put_OperatingSystemVersion(This,bstrOperatingSystemVersion) (This)->lpVtbl->put_OperatingSystemVersion(This,bstrOperatingSystemVersion)
#define IADsComputer_get_Model(This,retval) (This)->lpVtbl->get_Model(This,retval)
#define IADsComputer_put_Model(This,bstrModel) (This)->lpVtbl->put_Model(This,bstrModel)
#define IADsComputer_get_Processor(This,retval) (This)->lpVtbl->get_Processor(This,retval)
#define IADsComputer_put_Processor(This,bstrProcessor) (This)->lpVtbl->put_Processor(This,bstrProcessor)
#define IADsComputer_get_ProcessorCount(This,retval) (This)->lpVtbl->get_ProcessorCount(This,retval)
#define IADsComputer_put_ProcessorCount(This,bstrProcessorCount) (This)->lpVtbl->put_ProcessorCount(This,bstrProcessorCount)
#define IADsComputer_get_MemorySize(This,retval) (This)->lpVtbl->get_MemorySize(This,retval)
#define IADsComputer_put_MemorySize(This,bstrMemorySize) (This)->lpVtbl->put_MemorySize(This,bstrMemorySize)
#define IADsComputer_get_StorageCapacity(This,retval) (This)->lpVtbl->get_StorageCapacity(This,retval)
#define IADsComputer_put_StorageCapacity(This,bstrStorageCapacity) (This)->lpVtbl->put_StorageCapacity(This,bstrStorageCapacity)
#define IADsComputer_get_NetAddresses(This,retval) (This)->lpVtbl->get_NetAddresses(This,retval)
#define IADsComputer_put_NetAddresses(This,vNetAddresses) (This)->lpVtbl->put_NetAddresses(This,vNetAddresses)
#endif
#endif
  HRESULT WINAPI IADsComputer_get_ComputerID_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_ComputerID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Site_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Site_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Description_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Description_Proxy(IADsComputer *This,BSTR bstrDescription);
  void __RPC_STUB IADsComputer_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Location_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Location_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Location_Proxy(IADsComputer *This,BSTR bstrLocation);
  void __RPC_STUB IADsComputer_put_Location_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_PrimaryUser_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_PrimaryUser_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_PrimaryUser_Proxy(IADsComputer *This,BSTR bstrPrimaryUser);
  void __RPC_STUB IADsComputer_put_PrimaryUser_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Owner_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Owner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Owner_Proxy(IADsComputer *This,BSTR bstrOwner);
  void __RPC_STUB IADsComputer_put_Owner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Division_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Division_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Division_Proxy(IADsComputer *This,BSTR bstrDivision);
  void __RPC_STUB IADsComputer_put_Division_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Department_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Department_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Department_Proxy(IADsComputer *This,BSTR bstrDepartment);
  void __RPC_STUB IADsComputer_put_Department_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Role_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Role_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Role_Proxy(IADsComputer *This,BSTR bstrRole);
  void __RPC_STUB IADsComputer_put_Role_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_OperatingSystem_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_OperatingSystem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_OperatingSystem_Proxy(IADsComputer *This,BSTR bstrOperatingSystem);
  void __RPC_STUB IADsComputer_put_OperatingSystem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_OperatingSystemVersion_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_OperatingSystemVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_OperatingSystemVersion_Proxy(IADsComputer *This,BSTR bstrOperatingSystemVersion);
  void __RPC_STUB IADsComputer_put_OperatingSystemVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Model_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Model_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Model_Proxy(IADsComputer *This,BSTR bstrModel);
  void __RPC_STUB IADsComputer_put_Model_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_Processor_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_Processor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_Processor_Proxy(IADsComputer *This,BSTR bstrProcessor);
  void __RPC_STUB IADsComputer_put_Processor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_ProcessorCount_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_ProcessorCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_ProcessorCount_Proxy(IADsComputer *This,BSTR bstrProcessorCount);
  void __RPC_STUB IADsComputer_put_ProcessorCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_MemorySize_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_MemorySize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_MemorySize_Proxy(IADsComputer *This,BSTR bstrMemorySize);
  void __RPC_STUB IADsComputer_put_MemorySize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_StorageCapacity_Proxy(IADsComputer *This,BSTR *retval);
  void __RPC_STUB IADsComputer_get_StorageCapacity_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_StorageCapacity_Proxy(IADsComputer *This,BSTR bstrStorageCapacity);
  void __RPC_STUB IADsComputer_put_StorageCapacity_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_get_NetAddresses_Proxy(IADsComputer *This,VARIANT *retval);
  void __RPC_STUB IADsComputer_get_NetAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputer_put_NetAddresses_Proxy(IADsComputer *This,VARIANT vNetAddresses);
  void __RPC_STUB IADsComputer_put_NetAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsComputerOperations_INTERFACE_DEFINED__
#define __IADsComputerOperations_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsComputerOperations;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsComputerOperations : public IADs {
  public:
    virtual HRESULT WINAPI Status(IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI Shutdown(VARIANT_BOOL bReboot) = 0;
  };
#else
  typedef struct IADsComputerOperationsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsComputerOperations *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsComputerOperations *This);
      ULONG (WINAPI *Release)(IADsComputerOperations *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsComputerOperations *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsComputerOperations *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsComputerOperations *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsComputerOperations *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsComputerOperations *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsComputerOperations *This);
      HRESULT (WINAPI *SetInfo)(IADsComputerOperations *This);
      HRESULT (WINAPI *Get)(IADsComputerOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsComputerOperations *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsComputerOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsComputerOperations *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsComputerOperations *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *Status)(IADsComputerOperations *This,IDispatch **ppObject);
      HRESULT (WINAPI *Shutdown)(IADsComputerOperations *This,VARIANT_BOOL bReboot);
    END_INTERFACE
  } IADsComputerOperationsVtbl;
  struct IADsComputerOperations {
    CONST_VTBL struct IADsComputerOperationsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsComputerOperations_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsComputerOperations_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsComputerOperations_Release(This) (This)->lpVtbl->Release(This)
#define IADsComputerOperations_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsComputerOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsComputerOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsComputerOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsComputerOperations_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsComputerOperations_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsComputerOperations_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsComputerOperations_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsComputerOperations_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsComputerOperations_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsComputerOperations_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsComputerOperations_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsComputerOperations_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsComputerOperations_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsComputerOperations_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsComputerOperations_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsComputerOperations_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsComputerOperations_Status(This,ppObject) (This)->lpVtbl->Status(This,ppObject)
#define IADsComputerOperations_Shutdown(This,bReboot) (This)->lpVtbl->Shutdown(This,bReboot)
#endif
#endif
  HRESULT WINAPI IADsComputerOperations_Status_Proxy(IADsComputerOperations *This,IDispatch **ppObject);
  void __RPC_STUB IADsComputerOperations_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsComputerOperations_Shutdown_Proxy(IADsComputerOperations *This,VARIANT_BOOL bReboot);
  void __RPC_STUB IADsComputerOperations_Shutdown_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsGroup_INTERFACE_DEFINED__
#define __IADsGroup_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsGroup;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsGroup : public IADs {
  public:
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI Members(IADsMembers **ppMembers) = 0;
    virtual HRESULT WINAPI IsMember(BSTR bstrMember,VARIANT_BOOL *bMember) = 0;
    virtual HRESULT WINAPI Add(BSTR bstrNewItem) = 0;
    virtual HRESULT WINAPI Remove(BSTR bstrItemToBeRemoved) = 0;
  };
#else
  typedef struct IADsGroupVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsGroup *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsGroup *This);
      ULONG (WINAPI *Release)(IADsGroup *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsGroup *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsGroup *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsGroup *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsGroup *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsGroup *This);
      HRESULT (WINAPI *SetInfo)(IADsGroup *This);
      HRESULT (WINAPI *Get)(IADsGroup *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsGroup *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsGroup *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsGroup *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsGroup *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Description)(IADsGroup *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsGroup *This,BSTR bstrDescription);
      HRESULT (WINAPI *Members)(IADsGroup *This,IADsMembers **ppMembers);
      HRESULT (WINAPI *IsMember)(IADsGroup *This,BSTR bstrMember,VARIANT_BOOL *bMember);
      HRESULT (WINAPI *Add)(IADsGroup *This,BSTR bstrNewItem);
      HRESULT (WINAPI *Remove)(IADsGroup *This,BSTR bstrItemToBeRemoved);
    END_INTERFACE
  } IADsGroupVtbl;
  struct IADsGroup {
    CONST_VTBL struct IADsGroupVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsGroup_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsGroup_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsGroup_Release(This) (This)->lpVtbl->Release(This)
#define IADsGroup_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsGroup_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsGroup_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsGroup_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsGroup_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsGroup_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsGroup_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsGroup_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsGroup_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsGroup_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsGroup_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsGroup_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsGroup_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsGroup_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsGroup_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsGroup_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsGroup_Members(This,ppMembers) (This)->lpVtbl->Members(This,ppMembers)
#define IADsGroup_IsMember(This,bstrMember,bMember) (This)->lpVtbl->IsMember(This,bstrMember,bMember)
#define IADsGroup_Add(This,bstrNewItem) (This)->lpVtbl->Add(This,bstrNewItem)
#define IADsGroup_Remove(This,bstrItemToBeRemoved) (This)->lpVtbl->Remove(This,bstrItemToBeRemoved)
#endif
#endif
  HRESULT WINAPI IADsGroup_get_Description_Proxy(IADsGroup *This,BSTR *retval);
  void __RPC_STUB IADsGroup_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsGroup_put_Description_Proxy(IADsGroup *This,BSTR bstrDescription);
  void __RPC_STUB IADsGroup_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsGroup_Members_Proxy(IADsGroup *This,IADsMembers **ppMembers);
  void __RPC_STUB IADsGroup_Members_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsGroup_IsMember_Proxy(IADsGroup *This,BSTR bstrMember,VARIANT_BOOL *bMember);
  void __RPC_STUB IADsGroup_IsMember_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsGroup_Add_Proxy(IADsGroup *This,BSTR bstrNewItem);
  void __RPC_STUB IADsGroup_Add_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsGroup_Remove_Proxy(IADsGroup *This,BSTR bstrItemToBeRemoved);
  void __RPC_STUB IADsGroup_Remove_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsUser_INTERFACE_DEFINED__
#define __IADsUser_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsUser;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsUser : public IADs {
  public:
    virtual HRESULT WINAPI get_BadLoginAddress(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_BadLoginCount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_LastLogin(DATE *retval) = 0;
    virtual HRESULT WINAPI get_LastLogoff(DATE *retval) = 0;
    virtual HRESULT WINAPI get_LastFailedLogin(DATE *retval) = 0;
    virtual HRESULT WINAPI get_PasswordLastChanged(DATE *retval) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_Division(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Division(BSTR bstrDivision) = 0;
    virtual HRESULT WINAPI get_Department(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Department(BSTR bstrDepartment) = 0;
    virtual HRESULT WINAPI get_EmployeeID(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_EmployeeID(BSTR bstrEmployeeID) = 0;
    virtual HRESULT WINAPI get_FullName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_FullName(BSTR bstrFullName) = 0;
    virtual HRESULT WINAPI get_FirstName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_FirstName(BSTR bstrFirstName) = 0;
    virtual HRESULT WINAPI get_LastName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LastName(BSTR bstrLastName) = 0;
    virtual HRESULT WINAPI get_OtherName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_OtherName(BSTR bstrOtherName) = 0;
    virtual HRESULT WINAPI get_NamePrefix(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_NamePrefix(BSTR bstrNamePrefix) = 0;
    virtual HRESULT WINAPI get_NameSuffix(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_NameSuffix(BSTR bstrNameSuffix) = 0;
    virtual HRESULT WINAPI get_Title(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Title(BSTR bstrTitle) = 0;
    virtual HRESULT WINAPI get_Manager(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Manager(BSTR bstrManager) = 0;
    virtual HRESULT WINAPI get_TelephoneHome(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneHome(VARIANT vTelephoneHome) = 0;
    virtual HRESULT WINAPI get_TelephoneMobile(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneMobile(VARIANT vTelephoneMobile) = 0;
    virtual HRESULT WINAPI get_TelephoneNumber(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneNumber(VARIANT vTelephoneNumber) = 0;
    virtual HRESULT WINAPI get_TelephonePager(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_TelephonePager(VARIANT vTelephonePager) = 0;
    virtual HRESULT WINAPI get_FaxNumber(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_FaxNumber(VARIANT vFaxNumber) = 0;
    virtual HRESULT WINAPI get_OfficeLocations(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_OfficeLocations(VARIANT vOfficeLocations) = 0;
    virtual HRESULT WINAPI get_PostalAddresses(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_PostalAddresses(VARIANT vPostalAddresses) = 0;
    virtual HRESULT WINAPI get_PostalCodes(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_PostalCodes(VARIANT vPostalCodes) = 0;
    virtual HRESULT WINAPI get_SeeAlso(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_SeeAlso(VARIANT vSeeAlso) = 0;
    virtual HRESULT WINAPI get_AccountDisabled(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_AccountDisabled(VARIANT_BOOL fAccountDisabled) = 0;
    virtual HRESULT WINAPI get_AccountExpirationDate(DATE *retval) = 0;
    virtual HRESULT WINAPI put_AccountExpirationDate(DATE daAccountExpirationDate) = 0;
    virtual HRESULT WINAPI get_GraceLoginsAllowed(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_GraceLoginsAllowed(__LONG32 lnGraceLoginsAllowed) = 0;
    virtual HRESULT WINAPI get_GraceLoginsRemaining(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_GraceLoginsRemaining(__LONG32 lnGraceLoginsRemaining) = 0;
    virtual HRESULT WINAPI get_IsAccountLocked(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_IsAccountLocked(VARIANT_BOOL fIsAccountLocked) = 0;
    virtual HRESULT WINAPI get_LoginHours(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_LoginHours(VARIANT vLoginHours) = 0;
    virtual HRESULT WINAPI get_LoginWorkstations(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_LoginWorkstations(VARIANT vLoginWorkstations) = 0;
    virtual HRESULT WINAPI get_MaxLogins(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxLogins(__LONG32 lnMaxLogins) = 0;
    virtual HRESULT WINAPI get_MaxStorage(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxStorage(__LONG32 lnMaxStorage) = 0;
    virtual HRESULT WINAPI get_PasswordExpirationDate(DATE *retval) = 0;
    virtual HRESULT WINAPI put_PasswordExpirationDate(DATE daPasswordExpirationDate) = 0;
    virtual HRESULT WINAPI get_PasswordMinimumLength(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_PasswordMinimumLength(__LONG32 lnPasswordMinimumLength) = 0;
    virtual HRESULT WINAPI get_PasswordRequired(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_PasswordRequired(VARIANT_BOOL fPasswordRequired) = 0;
    virtual HRESULT WINAPI get_RequireUniquePassword(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_RequireUniquePassword(VARIANT_BOOL fRequireUniquePassword) = 0;
    virtual HRESULT WINAPI get_EmailAddress(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_EmailAddress(BSTR bstrEmailAddress) = 0;
    virtual HRESULT WINAPI get_HomeDirectory(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_HomeDirectory(BSTR bstrHomeDirectory) = 0;
    virtual HRESULT WINAPI get_Languages(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Languages(VARIANT vLanguages) = 0;
    virtual HRESULT WINAPI get_Profile(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Profile(BSTR bstrProfile) = 0;
    virtual HRESULT WINAPI get_LoginScript(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LoginScript(BSTR bstrLoginScript) = 0;
    virtual HRESULT WINAPI get_Picture(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Picture(VARIANT vPicture) = 0;
    virtual HRESULT WINAPI get_HomePage(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_HomePage(BSTR bstrHomePage) = 0;
    virtual HRESULT WINAPI Groups(IADsMembers **ppGroups) = 0;
    virtual HRESULT WINAPI SetPassword(BSTR NewPassword) = 0;
    virtual HRESULT WINAPI ChangePassword(BSTR bstrOldPassword,BSTR bstrNewPassword) = 0;
  };
#else
  typedef struct IADsUserVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsUser *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsUser *This);
      ULONG (WINAPI *Release)(IADsUser *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsUser *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsUser *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsUser *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsUser *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsUser *This);
      HRESULT (WINAPI *SetInfo)(IADsUser *This);
      HRESULT (WINAPI *Get)(IADsUser *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsUser *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsUser *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsUser *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsUser *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_BadLoginAddress)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *get_BadLoginCount)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *get_LastLogin)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *get_LastLogoff)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *get_LastFailedLogin)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *get_PasswordLastChanged)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *get_Description)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsUser *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_Division)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Division)(IADsUser *This,BSTR bstrDivision);
      HRESULT (WINAPI *get_Department)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Department)(IADsUser *This,BSTR bstrDepartment);
      HRESULT (WINAPI *get_EmployeeID)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_EmployeeID)(IADsUser *This,BSTR bstrEmployeeID);
      HRESULT (WINAPI *get_FullName)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_FullName)(IADsUser *This,BSTR bstrFullName);
      HRESULT (WINAPI *get_FirstName)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_FirstName)(IADsUser *This,BSTR bstrFirstName);
      HRESULT (WINAPI *get_LastName)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_LastName)(IADsUser *This,BSTR bstrLastName);
      HRESULT (WINAPI *get_OtherName)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_OtherName)(IADsUser *This,BSTR bstrOtherName);
      HRESULT (WINAPI *get_NamePrefix)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_NamePrefix)(IADsUser *This,BSTR bstrNamePrefix);
      HRESULT (WINAPI *get_NameSuffix)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_NameSuffix)(IADsUser *This,BSTR bstrNameSuffix);
      HRESULT (WINAPI *get_Title)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Title)(IADsUser *This,BSTR bstrTitle);
      HRESULT (WINAPI *get_Manager)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Manager)(IADsUser *This,BSTR bstrManager);
      HRESULT (WINAPI *get_TelephoneHome)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_TelephoneHome)(IADsUser *This,VARIANT vTelephoneHome);
      HRESULT (WINAPI *get_TelephoneMobile)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_TelephoneMobile)(IADsUser *This,VARIANT vTelephoneMobile);
      HRESULT (WINAPI *get_TelephoneNumber)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_TelephoneNumber)(IADsUser *This,VARIANT vTelephoneNumber);
      HRESULT (WINAPI *get_TelephonePager)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_TelephonePager)(IADsUser *This,VARIANT vTelephonePager);
      HRESULT (WINAPI *get_FaxNumber)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_FaxNumber)(IADsUser *This,VARIANT vFaxNumber);
      HRESULT (WINAPI *get_OfficeLocations)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_OfficeLocations)(IADsUser *This,VARIANT vOfficeLocations);
      HRESULT (WINAPI *get_PostalAddresses)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_PostalAddresses)(IADsUser *This,VARIANT vPostalAddresses);
      HRESULT (WINAPI *get_PostalCodes)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_PostalCodes)(IADsUser *This,VARIANT vPostalCodes);
      HRESULT (WINAPI *get_SeeAlso)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_SeeAlso)(IADsUser *This,VARIANT vSeeAlso);
      HRESULT (WINAPI *get_AccountDisabled)(IADsUser *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_AccountDisabled)(IADsUser *This,VARIANT_BOOL fAccountDisabled);
      HRESULT (WINAPI *get_AccountExpirationDate)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *put_AccountExpirationDate)(IADsUser *This,DATE daAccountExpirationDate);
      HRESULT (WINAPI *get_GraceLoginsAllowed)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *put_GraceLoginsAllowed)(IADsUser *This,__LONG32 lnGraceLoginsAllowed);
      HRESULT (WINAPI *get_GraceLoginsRemaining)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *put_GraceLoginsRemaining)(IADsUser *This,__LONG32 lnGraceLoginsRemaining);
      HRESULT (WINAPI *get_IsAccountLocked)(IADsUser *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_IsAccountLocked)(IADsUser *This,VARIANT_BOOL fIsAccountLocked);
      HRESULT (WINAPI *get_LoginHours)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_LoginHours)(IADsUser *This,VARIANT vLoginHours);
      HRESULT (WINAPI *get_LoginWorkstations)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_LoginWorkstations)(IADsUser *This,VARIANT vLoginWorkstations);
      HRESULT (WINAPI *get_MaxLogins)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxLogins)(IADsUser *This,__LONG32 lnMaxLogins);
      HRESULT (WINAPI *get_MaxStorage)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxStorage)(IADsUser *This,__LONG32 lnMaxStorage);
      HRESULT (WINAPI *get_PasswordExpirationDate)(IADsUser *This,DATE *retval);
      HRESULT (WINAPI *put_PasswordExpirationDate)(IADsUser *This,DATE daPasswordExpirationDate);
      HRESULT (WINAPI *get_PasswordMinimumLength)(IADsUser *This,__LONG32 *retval);
      HRESULT (WINAPI *put_PasswordMinimumLength)(IADsUser *This,__LONG32 lnPasswordMinimumLength);
      HRESULT (WINAPI *get_PasswordRequired)(IADsUser *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_PasswordRequired)(IADsUser *This,VARIANT_BOOL fPasswordRequired);
      HRESULT (WINAPI *get_RequireUniquePassword)(IADsUser *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_RequireUniquePassword)(IADsUser *This,VARIANT_BOOL fRequireUniquePassword);
      HRESULT (WINAPI *get_EmailAddress)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_EmailAddress)(IADsUser *This,BSTR bstrEmailAddress);
      HRESULT (WINAPI *get_HomeDirectory)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_HomeDirectory)(IADsUser *This,BSTR bstrHomeDirectory);
      HRESULT (WINAPI *get_Languages)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_Languages)(IADsUser *This,VARIANT vLanguages);
      HRESULT (WINAPI *get_Profile)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_Profile)(IADsUser *This,BSTR bstrProfile);
      HRESULT (WINAPI *get_LoginScript)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_LoginScript)(IADsUser *This,BSTR bstrLoginScript);
      HRESULT (WINAPI *get_Picture)(IADsUser *This,VARIANT *retval);
      HRESULT (WINAPI *put_Picture)(IADsUser *This,VARIANT vPicture);
      HRESULT (WINAPI *get_HomePage)(IADsUser *This,BSTR *retval);
      HRESULT (WINAPI *put_HomePage)(IADsUser *This,BSTR bstrHomePage);
      HRESULT (WINAPI *Groups)(IADsUser *This,IADsMembers **ppGroups);
      HRESULT (WINAPI *SetPassword)(IADsUser *This,BSTR NewPassword);
      HRESULT (WINAPI *ChangePassword)(IADsUser *This,BSTR bstrOldPassword,BSTR bstrNewPassword);
    END_INTERFACE
  } IADsUserVtbl;
  struct IADsUser {
    CONST_VTBL struct IADsUserVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsUser_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsUser_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsUser_Release(This) (This)->lpVtbl->Release(This)
#define IADsUser_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsUser_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsUser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsUser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsUser_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsUser_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsUser_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsUser_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsUser_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsUser_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsUser_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsUser_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsUser_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsUser_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsUser_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsUser_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsUser_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsUser_get_BadLoginAddress(This,retval) (This)->lpVtbl->get_BadLoginAddress(This,retval)
#define IADsUser_get_BadLoginCount(This,retval) (This)->lpVtbl->get_BadLoginCount(This,retval)
#define IADsUser_get_LastLogin(This,retval) (This)->lpVtbl->get_LastLogin(This,retval)
#define IADsUser_get_LastLogoff(This,retval) (This)->lpVtbl->get_LastLogoff(This,retval)
#define IADsUser_get_LastFailedLogin(This,retval) (This)->lpVtbl->get_LastFailedLogin(This,retval)
#define IADsUser_get_PasswordLastChanged(This,retval) (This)->lpVtbl->get_PasswordLastChanged(This,retval)
#define IADsUser_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsUser_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsUser_get_Division(This,retval) (This)->lpVtbl->get_Division(This,retval)
#define IADsUser_put_Division(This,bstrDivision) (This)->lpVtbl->put_Division(This,bstrDivision)
#define IADsUser_get_Department(This,retval) (This)->lpVtbl->get_Department(This,retval)
#define IADsUser_put_Department(This,bstrDepartment) (This)->lpVtbl->put_Department(This,bstrDepartment)
#define IADsUser_get_EmployeeID(This,retval) (This)->lpVtbl->get_EmployeeID(This,retval)
#define IADsUser_put_EmployeeID(This,bstrEmployeeID) (This)->lpVtbl->put_EmployeeID(This,bstrEmployeeID)
#define IADsUser_get_FullName(This,retval) (This)->lpVtbl->get_FullName(This,retval)
#define IADsUser_put_FullName(This,bstrFullName) (This)->lpVtbl->put_FullName(This,bstrFullName)
#define IADsUser_get_FirstName(This,retval) (This)->lpVtbl->get_FirstName(This,retval)
#define IADsUser_put_FirstName(This,bstrFirstName) (This)->lpVtbl->put_FirstName(This,bstrFirstName)
#define IADsUser_get_LastName(This,retval) (This)->lpVtbl->get_LastName(This,retval)
#define IADsUser_put_LastName(This,bstrLastName) (This)->lpVtbl->put_LastName(This,bstrLastName)
#define IADsUser_get_OtherName(This,retval) (This)->lpVtbl->get_OtherName(This,retval)
#define IADsUser_put_OtherName(This,bstrOtherName) (This)->lpVtbl->put_OtherName(This,bstrOtherName)
#define IADsUser_get_NamePrefix(This,retval) (This)->lpVtbl->get_NamePrefix(This,retval)
#define IADsUser_put_NamePrefix(This,bstrNamePrefix) (This)->lpVtbl->put_NamePrefix(This,bstrNamePrefix)
#define IADsUser_get_NameSuffix(This,retval) (This)->lpVtbl->get_NameSuffix(This,retval)
#define IADsUser_put_NameSuffix(This,bstrNameSuffix) (This)->lpVtbl->put_NameSuffix(This,bstrNameSuffix)
#define IADsUser_get_Title(This,retval) (This)->lpVtbl->get_Title(This,retval)
#define IADsUser_put_Title(This,bstrTitle) (This)->lpVtbl->put_Title(This,bstrTitle)
#define IADsUser_get_Manager(This,retval) (This)->lpVtbl->get_Manager(This,retval)
#define IADsUser_put_Manager(This,bstrManager) (This)->lpVtbl->put_Manager(This,bstrManager)
#define IADsUser_get_TelephoneHome(This,retval) (This)->lpVtbl->get_TelephoneHome(This,retval)
#define IADsUser_put_TelephoneHome(This,vTelephoneHome) (This)->lpVtbl->put_TelephoneHome(This,vTelephoneHome)
#define IADsUser_get_TelephoneMobile(This,retval) (This)->lpVtbl->get_TelephoneMobile(This,retval)
#define IADsUser_put_TelephoneMobile(This,vTelephoneMobile) (This)->lpVtbl->put_TelephoneMobile(This,vTelephoneMobile)
#define IADsUser_get_TelephoneNumber(This,retval) (This)->lpVtbl->get_TelephoneNumber(This,retval)
#define IADsUser_put_TelephoneNumber(This,vTelephoneNumber) (This)->lpVtbl->put_TelephoneNumber(This,vTelephoneNumber)
#define IADsUser_get_TelephonePager(This,retval) (This)->lpVtbl->get_TelephonePager(This,retval)
#define IADsUser_put_TelephonePager(This,vTelephonePager) (This)->lpVtbl->put_TelephonePager(This,vTelephonePager)
#define IADsUser_get_FaxNumber(This,retval) (This)->lpVtbl->get_FaxNumber(This,retval)
#define IADsUser_put_FaxNumber(This,vFaxNumber) (This)->lpVtbl->put_FaxNumber(This,vFaxNumber)
#define IADsUser_get_OfficeLocations(This,retval) (This)->lpVtbl->get_OfficeLocations(This,retval)
#define IADsUser_put_OfficeLocations(This,vOfficeLocations) (This)->lpVtbl->put_OfficeLocations(This,vOfficeLocations)
#define IADsUser_get_PostalAddresses(This,retval) (This)->lpVtbl->get_PostalAddresses(This,retval)
#define IADsUser_put_PostalAddresses(This,vPostalAddresses) (This)->lpVtbl->put_PostalAddresses(This,vPostalAddresses)
#define IADsUser_get_PostalCodes(This,retval) (This)->lpVtbl->get_PostalCodes(This,retval)
#define IADsUser_put_PostalCodes(This,vPostalCodes) (This)->lpVtbl->put_PostalCodes(This,vPostalCodes)
#define IADsUser_get_SeeAlso(This,retval) (This)->lpVtbl->get_SeeAlso(This,retval)
#define IADsUser_put_SeeAlso(This,vSeeAlso) (This)->lpVtbl->put_SeeAlso(This,vSeeAlso)
#define IADsUser_get_AccountDisabled(This,retval) (This)->lpVtbl->get_AccountDisabled(This,retval)
#define IADsUser_put_AccountDisabled(This,fAccountDisabled) (This)->lpVtbl->put_AccountDisabled(This,fAccountDisabled)
#define IADsUser_get_AccountExpirationDate(This,retval) (This)->lpVtbl->get_AccountExpirationDate(This,retval)
#define IADsUser_put_AccountExpirationDate(This,daAccountExpirationDate) (This)->lpVtbl->put_AccountExpirationDate(This,daAccountExpirationDate)
#define IADsUser_get_GraceLoginsAllowed(This,retval) (This)->lpVtbl->get_GraceLoginsAllowed(This,retval)
#define IADsUser_put_GraceLoginsAllowed(This,lnGraceLoginsAllowed) (This)->lpVtbl->put_GraceLoginsAllowed(This,lnGraceLoginsAllowed)
#define IADsUser_get_GraceLoginsRemaining(This,retval) (This)->lpVtbl->get_GraceLoginsRemaining(This,retval)
#define IADsUser_put_GraceLoginsRemaining(This,lnGraceLoginsRemaining) (This)->lpVtbl->put_GraceLoginsRemaining(This,lnGraceLoginsRemaining)
#define IADsUser_get_IsAccountLocked(This,retval) (This)->lpVtbl->get_IsAccountLocked(This,retval)
#define IADsUser_put_IsAccountLocked(This,fIsAccountLocked) (This)->lpVtbl->put_IsAccountLocked(This,fIsAccountLocked)
#define IADsUser_get_LoginHours(This,retval) (This)->lpVtbl->get_LoginHours(This,retval)
#define IADsUser_put_LoginHours(This,vLoginHours) (This)->lpVtbl->put_LoginHours(This,vLoginHours)
#define IADsUser_get_LoginWorkstations(This,retval) (This)->lpVtbl->get_LoginWorkstations(This,retval)
#define IADsUser_put_LoginWorkstations(This,vLoginWorkstations) (This)->lpVtbl->put_LoginWorkstations(This,vLoginWorkstations)
#define IADsUser_get_MaxLogins(This,retval) (This)->lpVtbl->get_MaxLogins(This,retval)
#define IADsUser_put_MaxLogins(This,lnMaxLogins) (This)->lpVtbl->put_MaxLogins(This,lnMaxLogins)
#define IADsUser_get_MaxStorage(This,retval) (This)->lpVtbl->get_MaxStorage(This,retval)
#define IADsUser_put_MaxStorage(This,lnMaxStorage) (This)->lpVtbl->put_MaxStorage(This,lnMaxStorage)
#define IADsUser_get_PasswordExpirationDate(This,retval) (This)->lpVtbl->get_PasswordExpirationDate(This,retval)
#define IADsUser_put_PasswordExpirationDate(This,daPasswordExpirationDate) (This)->lpVtbl->put_PasswordExpirationDate(This,daPasswordExpirationDate)
#define IADsUser_get_PasswordMinimumLength(This,retval) (This)->lpVtbl->get_PasswordMinimumLength(This,retval)
#define IADsUser_put_PasswordMinimumLength(This,lnPasswordMinimumLength) (This)->lpVtbl->put_PasswordMinimumLength(This,lnPasswordMinimumLength)
#define IADsUser_get_PasswordRequired(This,retval) (This)->lpVtbl->get_PasswordRequired(This,retval)
#define IADsUser_put_PasswordRequired(This,fPasswordRequired) (This)->lpVtbl->put_PasswordRequired(This,fPasswordRequired)
#define IADsUser_get_RequireUniquePassword(This,retval) (This)->lpVtbl->get_RequireUniquePassword(This,retval)
#define IADsUser_put_RequireUniquePassword(This,fRequireUniquePassword) (This)->lpVtbl->put_RequireUniquePassword(This,fRequireUniquePassword)
#define IADsUser_get_EmailAddress(This,retval) (This)->lpVtbl->get_EmailAddress(This,retval)
#define IADsUser_put_EmailAddress(This,bstrEmailAddress) (This)->lpVtbl->put_EmailAddress(This,bstrEmailAddress)
#define IADsUser_get_HomeDirectory(This,retval) (This)->lpVtbl->get_HomeDirectory(This,retval)
#define IADsUser_put_HomeDirectory(This,bstrHomeDirectory) (This)->lpVtbl->put_HomeDirectory(This,bstrHomeDirectory)
#define IADsUser_get_Languages(This,retval) (This)->lpVtbl->get_Languages(This,retval)
#define IADsUser_put_Languages(This,vLanguages) (This)->lpVtbl->put_Languages(This,vLanguages)
#define IADsUser_get_Profile(This,retval) (This)->lpVtbl->get_Profile(This,retval)
#define IADsUser_put_Profile(This,bstrProfile) (This)->lpVtbl->put_Profile(This,bstrProfile)
#define IADsUser_get_LoginScript(This,retval) (This)->lpVtbl->get_LoginScript(This,retval)
#define IADsUser_put_LoginScript(This,bstrLoginScript) (This)->lpVtbl->put_LoginScript(This,bstrLoginScript)
#define IADsUser_get_Picture(This,retval) (This)->lpVtbl->get_Picture(This,retval)
#define IADsUser_put_Picture(This,vPicture) (This)->lpVtbl->put_Picture(This,vPicture)
#define IADsUser_get_HomePage(This,retval) (This)->lpVtbl->get_HomePage(This,retval)
#define IADsUser_put_HomePage(This,bstrHomePage) (This)->lpVtbl->put_HomePage(This,bstrHomePage)
#define IADsUser_Groups(This,ppGroups) (This)->lpVtbl->Groups(This,ppGroups)
#define IADsUser_SetPassword(This,NewPassword) (This)->lpVtbl->SetPassword(This,NewPassword)
#define IADsUser_ChangePassword(This,bstrOldPassword,bstrNewPassword) (This)->lpVtbl->ChangePassword(This,bstrOldPassword,bstrNewPassword)
#endif
#endif
  HRESULT WINAPI IADsUser_get_BadLoginAddress_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_BadLoginAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_BadLoginCount_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_BadLoginCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LastLogin_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_LastLogin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LastLogoff_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_LastLogoff_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LastFailedLogin_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_LastFailedLogin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PasswordLastChanged_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_PasswordLastChanged_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Description_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Description_Proxy(IADsUser *This,BSTR bstrDescription);
  void __RPC_STUB IADsUser_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Division_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Division_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Division_Proxy(IADsUser *This,BSTR bstrDivision);
  void __RPC_STUB IADsUser_put_Division_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Department_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Department_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Department_Proxy(IADsUser *This,BSTR bstrDepartment);
  void __RPC_STUB IADsUser_put_Department_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_EmployeeID_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_EmployeeID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_EmployeeID_Proxy(IADsUser *This,BSTR bstrEmployeeID);
  void __RPC_STUB IADsUser_put_EmployeeID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_FullName_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_FullName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_FullName_Proxy(IADsUser *This,BSTR bstrFullName);
  void __RPC_STUB IADsUser_put_FullName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_FirstName_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_FirstName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_FirstName_Proxy(IADsUser *This,BSTR bstrFirstName);
  void __RPC_STUB IADsUser_put_FirstName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LastName_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_LastName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_LastName_Proxy(IADsUser *This,BSTR bstrLastName);
  void __RPC_STUB IADsUser_put_LastName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_OtherName_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_OtherName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_OtherName_Proxy(IADsUser *This,BSTR bstrOtherName);
  void __RPC_STUB IADsUser_put_OtherName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_NamePrefix_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_NamePrefix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_NamePrefix_Proxy(IADsUser *This,BSTR bstrNamePrefix);
  void __RPC_STUB IADsUser_put_NamePrefix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_NameSuffix_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_NameSuffix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_NameSuffix_Proxy(IADsUser *This,BSTR bstrNameSuffix);
  void __RPC_STUB IADsUser_put_NameSuffix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Title_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Title_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Title_Proxy(IADsUser *This,BSTR bstrTitle);
  void __RPC_STUB IADsUser_put_Title_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Manager_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Manager_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Manager_Proxy(IADsUser *This,BSTR bstrManager);
  void __RPC_STUB IADsUser_put_Manager_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_TelephoneHome_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_TelephoneHome_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_TelephoneHome_Proxy(IADsUser *This,VARIANT vTelephoneHome);
  void __RPC_STUB IADsUser_put_TelephoneHome_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_TelephoneMobile_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_TelephoneMobile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_TelephoneMobile_Proxy(IADsUser *This,VARIANT vTelephoneMobile);
  void __RPC_STUB IADsUser_put_TelephoneMobile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_TelephoneNumber_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_TelephoneNumber_Proxy(IADsUser *This,VARIANT vTelephoneNumber);
  void __RPC_STUB IADsUser_put_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_TelephonePager_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_TelephonePager_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_TelephonePager_Proxy(IADsUser *This,VARIANT vTelephonePager);
  void __RPC_STUB IADsUser_put_TelephonePager_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_FaxNumber_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_FaxNumber_Proxy(IADsUser *This,VARIANT vFaxNumber);
  void __RPC_STUB IADsUser_put_FaxNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_OfficeLocations_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_OfficeLocations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_OfficeLocations_Proxy(IADsUser *This,VARIANT vOfficeLocations);
  void __RPC_STUB IADsUser_put_OfficeLocations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PostalAddresses_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_PostalAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_PostalAddresses_Proxy(IADsUser *This,VARIANT vPostalAddresses);
  void __RPC_STUB IADsUser_put_PostalAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PostalCodes_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_PostalCodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_PostalCodes_Proxy(IADsUser *This,VARIANT vPostalCodes);
  void __RPC_STUB IADsUser_put_PostalCodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_SeeAlso_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_SeeAlso_Proxy(IADsUser *This,VARIANT vSeeAlso);
  void __RPC_STUB IADsUser_put_SeeAlso_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_AccountDisabled_Proxy(IADsUser *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsUser_get_AccountDisabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_AccountDisabled_Proxy(IADsUser *This,VARIANT_BOOL fAccountDisabled);
  void __RPC_STUB IADsUser_put_AccountDisabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_AccountExpirationDate_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_AccountExpirationDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_AccountExpirationDate_Proxy(IADsUser *This,DATE daAccountExpirationDate);
  void __RPC_STUB IADsUser_put_AccountExpirationDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_GraceLoginsAllowed_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_GraceLoginsAllowed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_GraceLoginsAllowed_Proxy(IADsUser *This,__LONG32 lnGraceLoginsAllowed);
  void __RPC_STUB IADsUser_put_GraceLoginsAllowed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_GraceLoginsRemaining_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_GraceLoginsRemaining_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_GraceLoginsRemaining_Proxy(IADsUser *This,__LONG32 lnGraceLoginsRemaining);
  void __RPC_STUB IADsUser_put_GraceLoginsRemaining_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_IsAccountLocked_Proxy(IADsUser *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsUser_get_IsAccountLocked_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_IsAccountLocked_Proxy(IADsUser *This,VARIANT_BOOL fIsAccountLocked);
  void __RPC_STUB IADsUser_put_IsAccountLocked_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LoginHours_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_LoginHours_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_LoginHours_Proxy(IADsUser *This,VARIANT vLoginHours);
  void __RPC_STUB IADsUser_put_LoginHours_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LoginWorkstations_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_LoginWorkstations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_LoginWorkstations_Proxy(IADsUser *This,VARIANT vLoginWorkstations);
  void __RPC_STUB IADsUser_put_LoginWorkstations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_MaxLogins_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_MaxLogins_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_MaxLogins_Proxy(IADsUser *This,__LONG32 lnMaxLogins);
  void __RPC_STUB IADsUser_put_MaxLogins_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_MaxStorage_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_MaxStorage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_MaxStorage_Proxy(IADsUser *This,__LONG32 lnMaxStorage);
  void __RPC_STUB IADsUser_put_MaxStorage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PasswordExpirationDate_Proxy(IADsUser *This,DATE *retval);
  void __RPC_STUB IADsUser_get_PasswordExpirationDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_PasswordExpirationDate_Proxy(IADsUser *This,DATE daPasswordExpirationDate);
  void __RPC_STUB IADsUser_put_PasswordExpirationDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PasswordMinimumLength_Proxy(IADsUser *This,__LONG32 *retval);
  void __RPC_STUB IADsUser_get_PasswordMinimumLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_PasswordMinimumLength_Proxy(IADsUser *This,__LONG32 lnPasswordMinimumLength);
  void __RPC_STUB IADsUser_put_PasswordMinimumLength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_PasswordRequired_Proxy(IADsUser *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsUser_get_PasswordRequired_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_PasswordRequired_Proxy(IADsUser *This,VARIANT_BOOL fPasswordRequired);
  void __RPC_STUB IADsUser_put_PasswordRequired_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_RequireUniquePassword_Proxy(IADsUser *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsUser_get_RequireUniquePassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_RequireUniquePassword_Proxy(IADsUser *This,VARIANT_BOOL fRequireUniquePassword);
  void __RPC_STUB IADsUser_put_RequireUniquePassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_EmailAddress_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_EmailAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_EmailAddress_Proxy(IADsUser *This,BSTR bstrEmailAddress);
  void __RPC_STUB IADsUser_put_EmailAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_HomeDirectory_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_HomeDirectory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_HomeDirectory_Proxy(IADsUser *This,BSTR bstrHomeDirectory);
  void __RPC_STUB IADsUser_put_HomeDirectory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Languages_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_Languages_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Languages_Proxy(IADsUser *This,VARIANT vLanguages);
  void __RPC_STUB IADsUser_put_Languages_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Profile_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_Profile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Profile_Proxy(IADsUser *This,BSTR bstrProfile);
  void __RPC_STUB IADsUser_put_Profile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_LoginScript_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_LoginScript_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_LoginScript_Proxy(IADsUser *This,BSTR bstrLoginScript);
  void __RPC_STUB IADsUser_put_LoginScript_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_Picture_Proxy(IADsUser *This,VARIANT *retval);
  void __RPC_STUB IADsUser_get_Picture_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_Picture_Proxy(IADsUser *This,VARIANT vPicture);
  void __RPC_STUB IADsUser_put_Picture_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_get_HomePage_Proxy(IADsUser *This,BSTR *retval);
  void __RPC_STUB IADsUser_get_HomePage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_put_HomePage_Proxy(IADsUser *This,BSTR bstrHomePage);
  void __RPC_STUB IADsUser_put_HomePage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_Groups_Proxy(IADsUser *This,IADsMembers **ppGroups);
  void __RPC_STUB IADsUser_Groups_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_SetPassword_Proxy(IADsUser *This,BSTR NewPassword);
  void __RPC_STUB IADsUser_SetPassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsUser_ChangePassword_Proxy(IADsUser *This,BSTR bstrOldPassword,BSTR bstrNewPassword);
  void __RPC_STUB IADsUser_ChangePassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPrintQueue_INTERFACE_DEFINED__
#define __IADsPrintQueue_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPrintQueue;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPrintQueue : public IADs {
  public:
    virtual HRESULT WINAPI get_PrinterPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PrinterPath(BSTR bstrPrinterPath) = 0;
    virtual HRESULT WINAPI get_Model(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Model(BSTR bstrModel) = 0;
    virtual HRESULT WINAPI get_Datatype(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Datatype(BSTR bstrDatatype) = 0;
    virtual HRESULT WINAPI get_PrintProcessor(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_PrintProcessor(BSTR bstrPrintProcessor) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_Location(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Location(BSTR bstrLocation) = 0;
    virtual HRESULT WINAPI get_StartTime(DATE *retval) = 0;
    virtual HRESULT WINAPI put_StartTime(DATE daStartTime) = 0;
    virtual HRESULT WINAPI get_UntilTime(DATE *retval) = 0;
    virtual HRESULT WINAPI put_UntilTime(DATE daUntilTime) = 0;
    virtual HRESULT WINAPI get_DefaultJobPriority(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_DefaultJobPriority(__LONG32 lnDefaultJobPriority) = 0;
    virtual HRESULT WINAPI get_Priority(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Priority(__LONG32 lnPriority) = 0;
    virtual HRESULT WINAPI get_BannerPage(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_BannerPage(BSTR bstrBannerPage) = 0;
    virtual HRESULT WINAPI get_PrintDevices(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_PrintDevices(VARIANT vPrintDevices) = 0;
    virtual HRESULT WINAPI get_NetAddresses(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_NetAddresses(VARIANT vNetAddresses) = 0;
  };
#else
  typedef struct IADsPrintQueueVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPrintQueue *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPrintQueue *This);
      ULONG (WINAPI *Release)(IADsPrintQueue *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPrintQueue *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPrintQueue *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPrintQueue *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPrintQueue *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsPrintQueue *This);
      HRESULT (WINAPI *SetInfo)(IADsPrintQueue *This);
      HRESULT (WINAPI *Get)(IADsPrintQueue *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsPrintQueue *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsPrintQueue *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsPrintQueue *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsPrintQueue *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_PrinterPath)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_PrinterPath)(IADsPrintQueue *This,BSTR bstrPrinterPath);
      HRESULT (WINAPI *get_Model)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_Model)(IADsPrintQueue *This,BSTR bstrModel);
      HRESULT (WINAPI *get_Datatype)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_Datatype)(IADsPrintQueue *This,BSTR bstrDatatype);
      HRESULT (WINAPI *get_PrintProcessor)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_PrintProcessor)(IADsPrintQueue *This,BSTR bstrPrintProcessor);
      HRESULT (WINAPI *get_Description)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsPrintQueue *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_Location)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_Location)(IADsPrintQueue *This,BSTR bstrLocation);
      HRESULT (WINAPI *get_StartTime)(IADsPrintQueue *This,DATE *retval);
      HRESULT (WINAPI *put_StartTime)(IADsPrintQueue *This,DATE daStartTime);
      HRESULT (WINAPI *get_UntilTime)(IADsPrintQueue *This,DATE *retval);
      HRESULT (WINAPI *put_UntilTime)(IADsPrintQueue *This,DATE daUntilTime);
      HRESULT (WINAPI *get_DefaultJobPriority)(IADsPrintQueue *This,__LONG32 *retval);
      HRESULT (WINAPI *put_DefaultJobPriority)(IADsPrintQueue *This,__LONG32 lnDefaultJobPriority);
      HRESULT (WINAPI *get_Priority)(IADsPrintQueue *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Priority)(IADsPrintQueue *This,__LONG32 lnPriority);
      HRESULT (WINAPI *get_BannerPage)(IADsPrintQueue *This,BSTR *retval);
      HRESULT (WINAPI *put_BannerPage)(IADsPrintQueue *This,BSTR bstrBannerPage);
      HRESULT (WINAPI *get_PrintDevices)(IADsPrintQueue *This,VARIANT *retval);
      HRESULT (WINAPI *put_PrintDevices)(IADsPrintQueue *This,VARIANT vPrintDevices);
      HRESULT (WINAPI *get_NetAddresses)(IADsPrintQueue *This,VARIANT *retval);
      HRESULT (WINAPI *put_NetAddresses)(IADsPrintQueue *This,VARIANT vNetAddresses);
    END_INTERFACE
  } IADsPrintQueueVtbl;
  struct IADsPrintQueue {
    CONST_VTBL struct IADsPrintQueueVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPrintQueue_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPrintQueue_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPrintQueue_Release(This) (This)->lpVtbl->Release(This)
#define IADsPrintQueue_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPrintQueue_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPrintQueue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPrintQueue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPrintQueue_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsPrintQueue_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsPrintQueue_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsPrintQueue_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsPrintQueue_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsPrintQueue_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsPrintQueue_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsPrintQueue_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsPrintQueue_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsPrintQueue_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsPrintQueue_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsPrintQueue_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsPrintQueue_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsPrintQueue_get_PrinterPath(This,retval) (This)->lpVtbl->get_PrinterPath(This,retval)
#define IADsPrintQueue_put_PrinterPath(This,bstrPrinterPath) (This)->lpVtbl->put_PrinterPath(This,bstrPrinterPath)
#define IADsPrintQueue_get_Model(This,retval) (This)->lpVtbl->get_Model(This,retval)
#define IADsPrintQueue_put_Model(This,bstrModel) (This)->lpVtbl->put_Model(This,bstrModel)
#define IADsPrintQueue_get_Datatype(This,retval) (This)->lpVtbl->get_Datatype(This,retval)
#define IADsPrintQueue_put_Datatype(This,bstrDatatype) (This)->lpVtbl->put_Datatype(This,bstrDatatype)
#define IADsPrintQueue_get_PrintProcessor(This,retval) (This)->lpVtbl->get_PrintProcessor(This,retval)
#define IADsPrintQueue_put_PrintProcessor(This,bstrPrintProcessor) (This)->lpVtbl->put_PrintProcessor(This,bstrPrintProcessor)
#define IADsPrintQueue_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsPrintQueue_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsPrintQueue_get_Location(This,retval) (This)->lpVtbl->get_Location(This,retval)
#define IADsPrintQueue_put_Location(This,bstrLocation) (This)->lpVtbl->put_Location(This,bstrLocation)
#define IADsPrintQueue_get_StartTime(This,retval) (This)->lpVtbl->get_StartTime(This,retval)
#define IADsPrintQueue_put_StartTime(This,daStartTime) (This)->lpVtbl->put_StartTime(This,daStartTime)
#define IADsPrintQueue_get_UntilTime(This,retval) (This)->lpVtbl->get_UntilTime(This,retval)
#define IADsPrintQueue_put_UntilTime(This,daUntilTime) (This)->lpVtbl->put_UntilTime(This,daUntilTime)
#define IADsPrintQueue_get_DefaultJobPriority(This,retval) (This)->lpVtbl->get_DefaultJobPriority(This,retval)
#define IADsPrintQueue_put_DefaultJobPriority(This,lnDefaultJobPriority) (This)->lpVtbl->put_DefaultJobPriority(This,lnDefaultJobPriority)
#define IADsPrintQueue_get_Priority(This,retval) (This)->lpVtbl->get_Priority(This,retval)
#define IADsPrintQueue_put_Priority(This,lnPriority) (This)->lpVtbl->put_Priority(This,lnPriority)
#define IADsPrintQueue_get_BannerPage(This,retval) (This)->lpVtbl->get_BannerPage(This,retval)
#define IADsPrintQueue_put_BannerPage(This,bstrBannerPage) (This)->lpVtbl->put_BannerPage(This,bstrBannerPage)
#define IADsPrintQueue_get_PrintDevices(This,retval) (This)->lpVtbl->get_PrintDevices(This,retval)
#define IADsPrintQueue_put_PrintDevices(This,vPrintDevices) (This)->lpVtbl->put_PrintDevices(This,vPrintDevices)
#define IADsPrintQueue_get_NetAddresses(This,retval) (This)->lpVtbl->get_NetAddresses(This,retval)
#define IADsPrintQueue_put_NetAddresses(This,vNetAddresses) (This)->lpVtbl->put_NetAddresses(This,vNetAddresses)
#endif
#endif
  HRESULT WINAPI IADsPrintQueue_get_PrinterPath_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_PrinterPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_PrinterPath_Proxy(IADsPrintQueue *This,BSTR bstrPrinterPath);
  void __RPC_STUB IADsPrintQueue_put_PrinterPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_Model_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_Model_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_Model_Proxy(IADsPrintQueue *This,BSTR bstrModel);
  void __RPC_STUB IADsPrintQueue_put_Model_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_Datatype_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_Datatype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_Datatype_Proxy(IADsPrintQueue *This,BSTR bstrDatatype);
  void __RPC_STUB IADsPrintQueue_put_Datatype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_PrintProcessor_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_PrintProcessor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_PrintProcessor_Proxy(IADsPrintQueue *This,BSTR bstrPrintProcessor);
  void __RPC_STUB IADsPrintQueue_put_PrintProcessor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_Description_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_Description_Proxy(IADsPrintQueue *This,BSTR bstrDescription);
  void __RPC_STUB IADsPrintQueue_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_Location_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_Location_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_Location_Proxy(IADsPrintQueue *This,BSTR bstrLocation);
  void __RPC_STUB IADsPrintQueue_put_Location_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_StartTime_Proxy(IADsPrintQueue *This,DATE *retval);
  void __RPC_STUB IADsPrintQueue_get_StartTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_StartTime_Proxy(IADsPrintQueue *This,DATE daStartTime);
  void __RPC_STUB IADsPrintQueue_put_StartTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_UntilTime_Proxy(IADsPrintQueue *This,DATE *retval);
  void __RPC_STUB IADsPrintQueue_get_UntilTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_UntilTime_Proxy(IADsPrintQueue *This,DATE daUntilTime);
  void __RPC_STUB IADsPrintQueue_put_UntilTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_DefaultJobPriority_Proxy(IADsPrintQueue *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintQueue_get_DefaultJobPriority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_DefaultJobPriority_Proxy(IADsPrintQueue *This,__LONG32 lnDefaultJobPriority);
  void __RPC_STUB IADsPrintQueue_put_DefaultJobPriority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_Priority_Proxy(IADsPrintQueue *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintQueue_get_Priority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_Priority_Proxy(IADsPrintQueue *This,__LONG32 lnPriority);
  void __RPC_STUB IADsPrintQueue_put_Priority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_BannerPage_Proxy(IADsPrintQueue *This,BSTR *retval);
  void __RPC_STUB IADsPrintQueue_get_BannerPage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_BannerPage_Proxy(IADsPrintQueue *This,BSTR bstrBannerPage);
  void __RPC_STUB IADsPrintQueue_put_BannerPage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_PrintDevices_Proxy(IADsPrintQueue *This,VARIANT *retval);
  void __RPC_STUB IADsPrintQueue_get_PrintDevices_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_PrintDevices_Proxy(IADsPrintQueue *This,VARIANT vPrintDevices);
  void __RPC_STUB IADsPrintQueue_put_PrintDevices_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_get_NetAddresses_Proxy(IADsPrintQueue *This,VARIANT *retval);
  void __RPC_STUB IADsPrintQueue_get_NetAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueue_put_NetAddresses_Proxy(IADsPrintQueue *This,VARIANT vNetAddresses);
  void __RPC_STUB IADsPrintQueue_put_NetAddresses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPrintQueueOperations_INTERFACE_DEFINED__
#define __IADsPrintQueueOperations_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPrintQueueOperations;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPrintQueueOperations : public IADs {
  public:
    virtual HRESULT WINAPI get_Status(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI PrintJobs(IADsCollection **pObject) = 0;
    virtual HRESULT WINAPI Pause(void) = 0;
    virtual HRESULT WINAPI Resume(void) = 0;
    virtual HRESULT WINAPI Purge(void) = 0;
  };
#else
  typedef struct IADsPrintQueueOperationsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPrintQueueOperations *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPrintQueueOperations *This);
      ULONG (WINAPI *Release)(IADsPrintQueueOperations *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPrintQueueOperations *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPrintQueueOperations *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPrintQueueOperations *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPrintQueueOperations *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsPrintQueueOperations *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsPrintQueueOperations *This);
      HRESULT (WINAPI *SetInfo)(IADsPrintQueueOperations *This);
      HRESULT (WINAPI *Get)(IADsPrintQueueOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsPrintQueueOperations *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsPrintQueueOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsPrintQueueOperations *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsPrintQueueOperations *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Status)(IADsPrintQueueOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *PrintJobs)(IADsPrintQueueOperations *This,IADsCollection **pObject);
      HRESULT (WINAPI *Pause)(IADsPrintQueueOperations *This);
      HRESULT (WINAPI *Resume)(IADsPrintQueueOperations *This);
      HRESULT (WINAPI *Purge)(IADsPrintQueueOperations *This);
    END_INTERFACE
  } IADsPrintQueueOperationsVtbl;
  struct IADsPrintQueueOperations {
    CONST_VTBL struct IADsPrintQueueOperationsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPrintQueueOperations_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPrintQueueOperations_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPrintQueueOperations_Release(This) (This)->lpVtbl->Release(This)
#define IADsPrintQueueOperations_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPrintQueueOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPrintQueueOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPrintQueueOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPrintQueueOperations_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsPrintQueueOperations_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsPrintQueueOperations_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsPrintQueueOperations_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsPrintQueueOperations_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsPrintQueueOperations_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsPrintQueueOperations_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsPrintQueueOperations_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsPrintQueueOperations_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsPrintQueueOperations_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsPrintQueueOperations_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsPrintQueueOperations_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsPrintQueueOperations_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsPrintQueueOperations_get_Status(This,retval) (This)->lpVtbl->get_Status(This,retval)
#define IADsPrintQueueOperations_PrintJobs(This,pObject) (This)->lpVtbl->PrintJobs(This,pObject)
#define IADsPrintQueueOperations_Pause(This) (This)->lpVtbl->Pause(This)
#define IADsPrintQueueOperations_Resume(This) (This)->lpVtbl->Resume(This)
#define IADsPrintQueueOperations_Purge(This) (This)->lpVtbl->Purge(This)
#endif
#endif
  HRESULT WINAPI IADsPrintQueueOperations_get_Status_Proxy(IADsPrintQueueOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintQueueOperations_get_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueueOperations_PrintJobs_Proxy(IADsPrintQueueOperations *This,IADsCollection **pObject);
  void __RPC_STUB IADsPrintQueueOperations_PrintJobs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueueOperations_Pause_Proxy(IADsPrintQueueOperations *This);
  void __RPC_STUB IADsPrintQueueOperations_Pause_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueueOperations_Resume_Proxy(IADsPrintQueueOperations *This);
  void __RPC_STUB IADsPrintQueueOperations_Resume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintQueueOperations_Purge_Proxy(IADsPrintQueueOperations *This);
  void __RPC_STUB IADsPrintQueueOperations_Purge_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPrintJob_INTERFACE_DEFINED__
#define __IADsPrintJob_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPrintJob;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPrintJob : public IADs {
  public:
    virtual HRESULT WINAPI get_HostPrintQueue(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_User(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_UserPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_TimeSubmitted(DATE *retval) = 0;
    virtual HRESULT WINAPI get_TotalPages(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_Size(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_Priority(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Priority(__LONG32 lnPriority) = 0;
    virtual HRESULT WINAPI get_StartTime(DATE *retval) = 0;
    virtual HRESULT WINAPI put_StartTime(DATE daStartTime) = 0;
    virtual HRESULT WINAPI get_UntilTime(DATE *retval) = 0;
    virtual HRESULT WINAPI put_UntilTime(DATE daUntilTime) = 0;
    virtual HRESULT WINAPI get_Notify(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Notify(BSTR bstrNotify) = 0;
    virtual HRESULT WINAPI get_NotifyPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_NotifyPath(BSTR bstrNotifyPath) = 0;
  };
#else
  typedef struct IADsPrintJobVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPrintJob *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPrintJob *This);
      ULONG (WINAPI *Release)(IADsPrintJob *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPrintJob *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPrintJob *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPrintJob *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPrintJob *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsPrintJob *This);
      HRESULT (WINAPI *SetInfo)(IADsPrintJob *This);
      HRESULT (WINAPI *Get)(IADsPrintJob *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsPrintJob *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsPrintJob *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsPrintJob *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsPrintJob *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_HostPrintQueue)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_User)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_UserPath)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *get_TimeSubmitted)(IADsPrintJob *This,DATE *retval);
      HRESULT (WINAPI *get_TotalPages)(IADsPrintJob *This,__LONG32 *retval);
      HRESULT (WINAPI *get_Size)(IADsPrintJob *This,__LONG32 *retval);
      HRESULT (WINAPI *get_Description)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsPrintJob *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_Priority)(IADsPrintJob *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Priority)(IADsPrintJob *This,__LONG32 lnPriority);
      HRESULT (WINAPI *get_StartTime)(IADsPrintJob *This,DATE *retval);
      HRESULT (WINAPI *put_StartTime)(IADsPrintJob *This,DATE daStartTime);
      HRESULT (WINAPI *get_UntilTime)(IADsPrintJob *This,DATE *retval);
      HRESULT (WINAPI *put_UntilTime)(IADsPrintJob *This,DATE daUntilTime);
      HRESULT (WINAPI *get_Notify)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *put_Notify)(IADsPrintJob *This,BSTR bstrNotify);
      HRESULT (WINAPI *get_NotifyPath)(IADsPrintJob *This,BSTR *retval);
      HRESULT (WINAPI *put_NotifyPath)(IADsPrintJob *This,BSTR bstrNotifyPath);
    END_INTERFACE
  } IADsPrintJobVtbl;
  struct IADsPrintJob {
    CONST_VTBL struct IADsPrintJobVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPrintJob_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPrintJob_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPrintJob_Release(This) (This)->lpVtbl->Release(This)
#define IADsPrintJob_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPrintJob_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPrintJob_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPrintJob_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPrintJob_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsPrintJob_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsPrintJob_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsPrintJob_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsPrintJob_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsPrintJob_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsPrintJob_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsPrintJob_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsPrintJob_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsPrintJob_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsPrintJob_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsPrintJob_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsPrintJob_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsPrintJob_get_HostPrintQueue(This,retval) (This)->lpVtbl->get_HostPrintQueue(This,retval)
#define IADsPrintJob_get_User(This,retval) (This)->lpVtbl->get_User(This,retval)
#define IADsPrintJob_get_UserPath(This,retval) (This)->lpVtbl->get_UserPath(This,retval)
#define IADsPrintJob_get_TimeSubmitted(This,retval) (This)->lpVtbl->get_TimeSubmitted(This,retval)
#define IADsPrintJob_get_TotalPages(This,retval) (This)->lpVtbl->get_TotalPages(This,retval)
#define IADsPrintJob_get_Size(This,retval) (This)->lpVtbl->get_Size(This,retval)
#define IADsPrintJob_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsPrintJob_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsPrintJob_get_Priority(This,retval) (This)->lpVtbl->get_Priority(This,retval)
#define IADsPrintJob_put_Priority(This,lnPriority) (This)->lpVtbl->put_Priority(This,lnPriority)
#define IADsPrintJob_get_StartTime(This,retval) (This)->lpVtbl->get_StartTime(This,retval)
#define IADsPrintJob_put_StartTime(This,daStartTime) (This)->lpVtbl->put_StartTime(This,daStartTime)
#define IADsPrintJob_get_UntilTime(This,retval) (This)->lpVtbl->get_UntilTime(This,retval)
#define IADsPrintJob_put_UntilTime(This,daUntilTime) (This)->lpVtbl->put_UntilTime(This,daUntilTime)
#define IADsPrintJob_get_Notify(This,retval) (This)->lpVtbl->get_Notify(This,retval)
#define IADsPrintJob_put_Notify(This,bstrNotify) (This)->lpVtbl->put_Notify(This,bstrNotify)
#define IADsPrintJob_get_NotifyPath(This,retval) (This)->lpVtbl->get_NotifyPath(This,retval)
#define IADsPrintJob_put_NotifyPath(This,bstrNotifyPath) (This)->lpVtbl->put_NotifyPath(This,bstrNotifyPath)
#endif
#endif
  HRESULT WINAPI IADsPrintJob_get_HostPrintQueue_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_HostPrintQueue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_User_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_User_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_UserPath_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_UserPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_TimeSubmitted_Proxy(IADsPrintJob *This,DATE *retval);
  void __RPC_STUB IADsPrintJob_get_TimeSubmitted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_TotalPages_Proxy(IADsPrintJob *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJob_get_TotalPages_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_Size_Proxy(IADsPrintJob *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJob_get_Size_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_Description_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_Description_Proxy(IADsPrintJob *This,BSTR bstrDescription);
  void __RPC_STUB IADsPrintJob_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_Priority_Proxy(IADsPrintJob *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJob_get_Priority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_Priority_Proxy(IADsPrintJob *This,__LONG32 lnPriority);
  void __RPC_STUB IADsPrintJob_put_Priority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_StartTime_Proxy(IADsPrintJob *This,DATE *retval);
  void __RPC_STUB IADsPrintJob_get_StartTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_StartTime_Proxy(IADsPrintJob *This,DATE daStartTime);
  void __RPC_STUB IADsPrintJob_put_StartTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_UntilTime_Proxy(IADsPrintJob *This,DATE *retval);
  void __RPC_STUB IADsPrintJob_get_UntilTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_UntilTime_Proxy(IADsPrintJob *This,DATE daUntilTime);
  void __RPC_STUB IADsPrintJob_put_UntilTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_Notify_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_Notify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_Notify_Proxy(IADsPrintJob *This,BSTR bstrNotify);
  void __RPC_STUB IADsPrintJob_put_Notify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_get_NotifyPath_Proxy(IADsPrintJob *This,BSTR *retval);
  void __RPC_STUB IADsPrintJob_get_NotifyPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJob_put_NotifyPath_Proxy(IADsPrintJob *This,BSTR bstrNotifyPath);
  void __RPC_STUB IADsPrintJob_put_NotifyPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPrintJobOperations_INTERFACE_DEFINED__
#define __IADsPrintJobOperations_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPrintJobOperations;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPrintJobOperations : public IADs {
  public:
    virtual HRESULT WINAPI get_Status(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_TimeElapsed(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_PagesPrinted(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_Position(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Position(__LONG32 lnPosition) = 0;
    virtual HRESULT WINAPI Pause(void) = 0;
    virtual HRESULT WINAPI Resume(void) = 0;
  };
#else
  typedef struct IADsPrintJobOperationsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPrintJobOperations *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPrintJobOperations *This);
      ULONG (WINAPI *Release)(IADsPrintJobOperations *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPrintJobOperations *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPrintJobOperations *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPrintJobOperations *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPrintJobOperations *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsPrintJobOperations *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsPrintJobOperations *This);
      HRESULT (WINAPI *SetInfo)(IADsPrintJobOperations *This);
      HRESULT (WINAPI *Get)(IADsPrintJobOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsPrintJobOperations *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsPrintJobOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsPrintJobOperations *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsPrintJobOperations *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Status)(IADsPrintJobOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *get_TimeElapsed)(IADsPrintJobOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *get_PagesPrinted)(IADsPrintJobOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *get_Position)(IADsPrintJobOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Position)(IADsPrintJobOperations *This,__LONG32 lnPosition);
      HRESULT (WINAPI *Pause)(IADsPrintJobOperations *This);
      HRESULT (WINAPI *Resume)(IADsPrintJobOperations *This);
    END_INTERFACE
  } IADsPrintJobOperationsVtbl;
  struct IADsPrintJobOperations {
    CONST_VTBL struct IADsPrintJobOperationsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPrintJobOperations_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPrintJobOperations_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPrintJobOperations_Release(This) (This)->lpVtbl->Release(This)
#define IADsPrintJobOperations_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPrintJobOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPrintJobOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPrintJobOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPrintJobOperations_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsPrintJobOperations_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsPrintJobOperations_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsPrintJobOperations_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsPrintJobOperations_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsPrintJobOperations_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsPrintJobOperations_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsPrintJobOperations_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsPrintJobOperations_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsPrintJobOperations_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsPrintJobOperations_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsPrintJobOperations_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsPrintJobOperations_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsPrintJobOperations_get_Status(This,retval) (This)->lpVtbl->get_Status(This,retval)
#define IADsPrintJobOperations_get_TimeElapsed(This,retval) (This)->lpVtbl->get_TimeElapsed(This,retval)
#define IADsPrintJobOperations_get_PagesPrinted(This,retval) (This)->lpVtbl->get_PagesPrinted(This,retval)
#define IADsPrintJobOperations_get_Position(This,retval) (This)->lpVtbl->get_Position(This,retval)
#define IADsPrintJobOperations_put_Position(This,lnPosition) (This)->lpVtbl->put_Position(This,lnPosition)
#define IADsPrintJobOperations_Pause(This) (This)->lpVtbl->Pause(This)
#define IADsPrintJobOperations_Resume(This) (This)->lpVtbl->Resume(This)
#endif
#endif
  HRESULT WINAPI IADsPrintJobOperations_get_Status_Proxy(IADsPrintJobOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJobOperations_get_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_get_TimeElapsed_Proxy(IADsPrintJobOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJobOperations_get_TimeElapsed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_get_PagesPrinted_Proxy(IADsPrintJobOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJobOperations_get_PagesPrinted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_get_Position_Proxy(IADsPrintJobOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsPrintJobOperations_get_Position_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_put_Position_Proxy(IADsPrintJobOperations *This,__LONG32 lnPosition);
  void __RPC_STUB IADsPrintJobOperations_put_Position_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_Pause_Proxy(IADsPrintJobOperations *This);
  void __RPC_STUB IADsPrintJobOperations_Pause_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPrintJobOperations_Resume_Proxy(IADsPrintJobOperations *This);
  void __RPC_STUB IADsPrintJobOperations_Resume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsService_INTERFACE_DEFINED__
#define __IADsService_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsService;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsService : public IADs {
  public:
    virtual HRESULT WINAPI get_HostComputer(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_HostComputer(BSTR bstrHostComputer) = 0;
    virtual HRESULT WINAPI get_DisplayName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_DisplayName(BSTR bstrDisplayName) = 0;
    virtual HRESULT WINAPI get_Version(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Version(BSTR bstrVersion) = 0;
    virtual HRESULT WINAPI get_ServiceType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ServiceType(__LONG32 lnServiceType) = 0;
    virtual HRESULT WINAPI get_StartType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_StartType(__LONG32 lnStartType) = 0;
    virtual HRESULT WINAPI get_Path(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Path(BSTR bstrPath) = 0;
    virtual HRESULT WINAPI get_StartupParameters(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_StartupParameters(BSTR bstrStartupParameters) = 0;
    virtual HRESULT WINAPI get_ErrorControl(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ErrorControl(__LONG32 lnErrorControl) = 0;
    virtual HRESULT WINAPI get_LoadOrderGroup(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_LoadOrderGroup(BSTR bstrLoadOrderGroup) = 0;
    virtual HRESULT WINAPI get_ServiceAccountName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ServiceAccountName(BSTR bstrServiceAccountName) = 0;
    virtual HRESULT WINAPI get_ServiceAccountPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ServiceAccountPath(BSTR bstrServiceAccountPath) = 0;
    virtual HRESULT WINAPI get_Dependencies(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Dependencies(VARIANT vDependencies) = 0;
  };
#else
  typedef struct IADsServiceVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsService *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsService *This);
      ULONG (WINAPI *Release)(IADsService *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsService *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsService *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsService *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsService *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsService *This);
      HRESULT (WINAPI *SetInfo)(IADsService *This);
      HRESULT (WINAPI *Get)(IADsService *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsService *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsService *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsService *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsService *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_HostComputer)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_HostComputer)(IADsService *This,BSTR bstrHostComputer);
      HRESULT (WINAPI *get_DisplayName)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_DisplayName)(IADsService *This,BSTR bstrDisplayName);
      HRESULT (WINAPI *get_Version)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_Version)(IADsService *This,BSTR bstrVersion);
      HRESULT (WINAPI *get_ServiceType)(IADsService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ServiceType)(IADsService *This,__LONG32 lnServiceType);
      HRESULT (WINAPI *get_StartType)(IADsService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_StartType)(IADsService *This,__LONG32 lnStartType);
      HRESULT (WINAPI *get_Path)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_Path)(IADsService *This,BSTR bstrPath);
      HRESULT (WINAPI *get_StartupParameters)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_StartupParameters)(IADsService *This,BSTR bstrStartupParameters);
      HRESULT (WINAPI *get_ErrorControl)(IADsService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ErrorControl)(IADsService *This,__LONG32 lnErrorControl);
      HRESULT (WINAPI *get_LoadOrderGroup)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_LoadOrderGroup)(IADsService *This,BSTR bstrLoadOrderGroup);
      HRESULT (WINAPI *get_ServiceAccountName)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_ServiceAccountName)(IADsService *This,BSTR bstrServiceAccountName);
      HRESULT (WINAPI *get_ServiceAccountPath)(IADsService *This,BSTR *retval);
      HRESULT (WINAPI *put_ServiceAccountPath)(IADsService *This,BSTR bstrServiceAccountPath);
      HRESULT (WINAPI *get_Dependencies)(IADsService *This,VARIANT *retval);
      HRESULT (WINAPI *put_Dependencies)(IADsService *This,VARIANT vDependencies);
    END_INTERFACE
  } IADsServiceVtbl;
  struct IADsService {
    CONST_VTBL struct IADsServiceVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsService_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsService_Release(This) (This)->lpVtbl->Release(This)
#define IADsService_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsService_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsService_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsService_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsService_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsService_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsService_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsService_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsService_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsService_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsService_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsService_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsService_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsService_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsService_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsService_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsService_get_HostComputer(This,retval) (This)->lpVtbl->get_HostComputer(This,retval)
#define IADsService_put_HostComputer(This,bstrHostComputer) (This)->lpVtbl->put_HostComputer(This,bstrHostComputer)
#define IADsService_get_DisplayName(This,retval) (This)->lpVtbl->get_DisplayName(This,retval)
#define IADsService_put_DisplayName(This,bstrDisplayName) (This)->lpVtbl->put_DisplayName(This,bstrDisplayName)
#define IADsService_get_Version(This,retval) (This)->lpVtbl->get_Version(This,retval)
#define IADsService_put_Version(This,bstrVersion) (This)->lpVtbl->put_Version(This,bstrVersion)
#define IADsService_get_ServiceType(This,retval) (This)->lpVtbl->get_ServiceType(This,retval)
#define IADsService_put_ServiceType(This,lnServiceType) (This)->lpVtbl->put_ServiceType(This,lnServiceType)
#define IADsService_get_StartType(This,retval) (This)->lpVtbl->get_StartType(This,retval)
#define IADsService_put_StartType(This,lnStartType) (This)->lpVtbl->put_StartType(This,lnStartType)
#define IADsService_get_Path(This,retval) (This)->lpVtbl->get_Path(This,retval)
#define IADsService_put_Path(This,bstrPath) (This)->lpVtbl->put_Path(This,bstrPath)
#define IADsService_get_StartupParameters(This,retval) (This)->lpVtbl->get_StartupParameters(This,retval)
#define IADsService_put_StartupParameters(This,bstrStartupParameters) (This)->lpVtbl->put_StartupParameters(This,bstrStartupParameters)
#define IADsService_get_ErrorControl(This,retval) (This)->lpVtbl->get_ErrorControl(This,retval)
#define IADsService_put_ErrorControl(This,lnErrorControl) (This)->lpVtbl->put_ErrorControl(This,lnErrorControl)
#define IADsService_get_LoadOrderGroup(This,retval) (This)->lpVtbl->get_LoadOrderGroup(This,retval)
#define IADsService_put_LoadOrderGroup(This,bstrLoadOrderGroup) (This)->lpVtbl->put_LoadOrderGroup(This,bstrLoadOrderGroup)
#define IADsService_get_ServiceAccountName(This,retval) (This)->lpVtbl->get_ServiceAccountName(This,retval)
#define IADsService_put_ServiceAccountName(This,bstrServiceAccountName) (This)->lpVtbl->put_ServiceAccountName(This,bstrServiceAccountName)
#define IADsService_get_ServiceAccountPath(This,retval) (This)->lpVtbl->get_ServiceAccountPath(This,retval)
#define IADsService_put_ServiceAccountPath(This,bstrServiceAccountPath) (This)->lpVtbl->put_ServiceAccountPath(This,bstrServiceAccountPath)
#define IADsService_get_Dependencies(This,retval) (This)->lpVtbl->get_Dependencies(This,retval)
#define IADsService_put_Dependencies(This,vDependencies) (This)->lpVtbl->put_Dependencies(This,vDependencies)
#endif
#endif
  HRESULT WINAPI IADsService_get_HostComputer_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_HostComputer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_HostComputer_Proxy(IADsService *This,BSTR bstrHostComputer);
  void __RPC_STUB IADsService_put_HostComputer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_DisplayName_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_DisplayName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_DisplayName_Proxy(IADsService *This,BSTR bstrDisplayName);
  void __RPC_STUB IADsService_put_DisplayName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_Version_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_Version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_Version_Proxy(IADsService *This,BSTR bstrVersion);
  void __RPC_STUB IADsService_put_Version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_ServiceType_Proxy(IADsService *This,__LONG32 *retval);
  void __RPC_STUB IADsService_get_ServiceType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_ServiceType_Proxy(IADsService *This,__LONG32 lnServiceType);
  void __RPC_STUB IADsService_put_ServiceType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_StartType_Proxy(IADsService *This,__LONG32 *retval);
  void __RPC_STUB IADsService_get_StartType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_StartType_Proxy(IADsService *This,__LONG32 lnStartType);
  void __RPC_STUB IADsService_put_StartType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_Path_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_Path_Proxy(IADsService *This,BSTR bstrPath);
  void __RPC_STUB IADsService_put_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_StartupParameters_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_StartupParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_StartupParameters_Proxy(IADsService *This,BSTR bstrStartupParameters);
  void __RPC_STUB IADsService_put_StartupParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_ErrorControl_Proxy(IADsService *This,__LONG32 *retval);
  void __RPC_STUB IADsService_get_ErrorControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_ErrorControl_Proxy(IADsService *This,__LONG32 lnErrorControl);
  void __RPC_STUB IADsService_put_ErrorControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_LoadOrderGroup_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_LoadOrderGroup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_LoadOrderGroup_Proxy(IADsService *This,BSTR bstrLoadOrderGroup);
  void __RPC_STUB IADsService_put_LoadOrderGroup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_ServiceAccountName_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_ServiceAccountName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_ServiceAccountName_Proxy(IADsService *This,BSTR bstrServiceAccountName);
  void __RPC_STUB IADsService_put_ServiceAccountName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_ServiceAccountPath_Proxy(IADsService *This,BSTR *retval);
  void __RPC_STUB IADsService_get_ServiceAccountPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_ServiceAccountPath_Proxy(IADsService *This,BSTR bstrServiceAccountPath);
  void __RPC_STUB IADsService_put_ServiceAccountPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_get_Dependencies_Proxy(IADsService *This,VARIANT *retval);
  void __RPC_STUB IADsService_get_Dependencies_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsService_put_Dependencies_Proxy(IADsService *This,VARIANT vDependencies);
  void __RPC_STUB IADsService_put_Dependencies_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsServiceOperations_INTERFACE_DEFINED__
#define __IADsServiceOperations_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsServiceOperations;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsServiceOperations : public IADs {
  public:
    virtual HRESULT WINAPI get_Status(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI Start(void) = 0;
    virtual HRESULT WINAPI Stop(void) = 0;
    virtual HRESULT WINAPI Pause(void) = 0;
    virtual HRESULT WINAPI Continue(void) = 0;
    virtual HRESULT WINAPI SetPassword(BSTR bstrNewPassword) = 0;
  };
#else
  typedef struct IADsServiceOperationsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsServiceOperations *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsServiceOperations *This);
      ULONG (WINAPI *Release)(IADsServiceOperations *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsServiceOperations *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsServiceOperations *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsServiceOperations *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsServiceOperations *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsServiceOperations *This);
      HRESULT (WINAPI *SetInfo)(IADsServiceOperations *This);
      HRESULT (WINAPI *Get)(IADsServiceOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsServiceOperations *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsServiceOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsServiceOperations *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsServiceOperations *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Status)(IADsServiceOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *Start)(IADsServiceOperations *This);
      HRESULT (WINAPI *Stop)(IADsServiceOperations *This);
      HRESULT (WINAPI *Pause)(IADsServiceOperations *This);
      HRESULT (WINAPI *Continue)(IADsServiceOperations *This);
      HRESULT (WINAPI *SetPassword)(IADsServiceOperations *This,BSTR bstrNewPassword);
    END_INTERFACE
  } IADsServiceOperationsVtbl;
  struct IADsServiceOperations {
    CONST_VTBL struct IADsServiceOperationsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsServiceOperations_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsServiceOperations_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsServiceOperations_Release(This) (This)->lpVtbl->Release(This)
#define IADsServiceOperations_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsServiceOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsServiceOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsServiceOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsServiceOperations_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsServiceOperations_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsServiceOperations_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsServiceOperations_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsServiceOperations_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsServiceOperations_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsServiceOperations_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsServiceOperations_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsServiceOperations_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsServiceOperations_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsServiceOperations_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsServiceOperations_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsServiceOperations_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsServiceOperations_get_Status(This,retval) (This)->lpVtbl->get_Status(This,retval)
#define IADsServiceOperations_Start(This) (This)->lpVtbl->Start(This)
#define IADsServiceOperations_Stop(This) (This)->lpVtbl->Stop(This)
#define IADsServiceOperations_Pause(This) (This)->lpVtbl->Pause(This)
#define IADsServiceOperations_Continue(This) (This)->lpVtbl->Continue(This)
#define IADsServiceOperations_SetPassword(This,bstrNewPassword) (This)->lpVtbl->SetPassword(This,bstrNewPassword)
#endif
#endif
  HRESULT WINAPI IADsServiceOperations_get_Status_Proxy(IADsServiceOperations *This,__LONG32 *retval);
  void __RPC_STUB IADsServiceOperations_get_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsServiceOperations_Start_Proxy(IADsServiceOperations *This);
  void __RPC_STUB IADsServiceOperations_Start_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsServiceOperations_Stop_Proxy(IADsServiceOperations *This);
  void __RPC_STUB IADsServiceOperations_Stop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsServiceOperations_Pause_Proxy(IADsServiceOperations *This);
  void __RPC_STUB IADsServiceOperations_Pause_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsServiceOperations_Continue_Proxy(IADsServiceOperations *This);
  void __RPC_STUB IADsServiceOperations_Continue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsServiceOperations_SetPassword_Proxy(IADsServiceOperations *This,BSTR bstrNewPassword);
  void __RPC_STUB IADsServiceOperations_SetPassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsFileService_INTERFACE_DEFINED__
#define __IADsFileService_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsFileService;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsFileService : public IADsService {
  public:
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_MaxUserCount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxUserCount(__LONG32 lnMaxUserCount) = 0;
  };
#else
  typedef struct IADsFileServiceVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsFileService *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsFileService *This);
      ULONG (WINAPI *Release)(IADsFileService *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsFileService *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsFileService *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsFileService *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsFileService *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsFileService *This);
      HRESULT (WINAPI *SetInfo)(IADsFileService *This);
      HRESULT (WINAPI *Get)(IADsFileService *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsFileService *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsFileService *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsFileService *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsFileService *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_HostComputer)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_HostComputer)(IADsFileService *This,BSTR bstrHostComputer);
      HRESULT (WINAPI *get_DisplayName)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_DisplayName)(IADsFileService *This,BSTR bstrDisplayName);
      HRESULT (WINAPI *get_Version)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_Version)(IADsFileService *This,BSTR bstrVersion);
      HRESULT (WINAPI *get_ServiceType)(IADsFileService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ServiceType)(IADsFileService *This,__LONG32 lnServiceType);
      HRESULT (WINAPI *get_StartType)(IADsFileService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_StartType)(IADsFileService *This,__LONG32 lnStartType);
      HRESULT (WINAPI *get_Path)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_Path)(IADsFileService *This,BSTR bstrPath);
      HRESULT (WINAPI *get_StartupParameters)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_StartupParameters)(IADsFileService *This,BSTR bstrStartupParameters);
      HRESULT (WINAPI *get_ErrorControl)(IADsFileService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ErrorControl)(IADsFileService *This,__LONG32 lnErrorControl);
      HRESULT (WINAPI *get_LoadOrderGroup)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_LoadOrderGroup)(IADsFileService *This,BSTR bstrLoadOrderGroup);
      HRESULT (WINAPI *get_ServiceAccountName)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_ServiceAccountName)(IADsFileService *This,BSTR bstrServiceAccountName);
      HRESULT (WINAPI *get_ServiceAccountPath)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_ServiceAccountPath)(IADsFileService *This,BSTR bstrServiceAccountPath);
      HRESULT (WINAPI *get_Dependencies)(IADsFileService *This,VARIANT *retval);
      HRESULT (WINAPI *put_Dependencies)(IADsFileService *This,VARIANT vDependencies);
      HRESULT (WINAPI *get_Description)(IADsFileService *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsFileService *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_MaxUserCount)(IADsFileService *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxUserCount)(IADsFileService *This,__LONG32 lnMaxUserCount);
    END_INTERFACE
  } IADsFileServiceVtbl;
  struct IADsFileService {
    CONST_VTBL struct IADsFileServiceVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsFileService_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsFileService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsFileService_Release(This) (This)->lpVtbl->Release(This)
#define IADsFileService_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsFileService_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsFileService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsFileService_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsFileService_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsFileService_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsFileService_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsFileService_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsFileService_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsFileService_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsFileService_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsFileService_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsFileService_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsFileService_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsFileService_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsFileService_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsFileService_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsFileService_get_HostComputer(This,retval) (This)->lpVtbl->get_HostComputer(This,retval)
#define IADsFileService_put_HostComputer(This,bstrHostComputer) (This)->lpVtbl->put_HostComputer(This,bstrHostComputer)
#define IADsFileService_get_DisplayName(This,retval) (This)->lpVtbl->get_DisplayName(This,retval)
#define IADsFileService_put_DisplayName(This,bstrDisplayName) (This)->lpVtbl->put_DisplayName(This,bstrDisplayName)
#define IADsFileService_get_Version(This,retval) (This)->lpVtbl->get_Version(This,retval)
#define IADsFileService_put_Version(This,bstrVersion) (This)->lpVtbl->put_Version(This,bstrVersion)
#define IADsFileService_get_ServiceType(This,retval) (This)->lpVtbl->get_ServiceType(This,retval)
#define IADsFileService_put_ServiceType(This,lnServiceType) (This)->lpVtbl->put_ServiceType(This,lnServiceType)
#define IADsFileService_get_StartType(This,retval) (This)->lpVtbl->get_StartType(This,retval)
#define IADsFileService_put_StartType(This,lnStartType) (This)->lpVtbl->put_StartType(This,lnStartType)
#define IADsFileService_get_Path(This,retval) (This)->lpVtbl->get_Path(This,retval)
#define IADsFileService_put_Path(This,bstrPath) (This)->lpVtbl->put_Path(This,bstrPath)
#define IADsFileService_get_StartupParameters(This,retval) (This)->lpVtbl->get_StartupParameters(This,retval)
#define IADsFileService_put_StartupParameters(This,bstrStartupParameters) (This)->lpVtbl->put_StartupParameters(This,bstrStartupParameters)
#define IADsFileService_get_ErrorControl(This,retval) (This)->lpVtbl->get_ErrorControl(This,retval)
#define IADsFileService_put_ErrorControl(This,lnErrorControl) (This)->lpVtbl->put_ErrorControl(This,lnErrorControl)
#define IADsFileService_get_LoadOrderGroup(This,retval) (This)->lpVtbl->get_LoadOrderGroup(This,retval)
#define IADsFileService_put_LoadOrderGroup(This,bstrLoadOrderGroup) (This)->lpVtbl->put_LoadOrderGroup(This,bstrLoadOrderGroup)
#define IADsFileService_get_ServiceAccountName(This,retval) (This)->lpVtbl->get_ServiceAccountName(This,retval)
#define IADsFileService_put_ServiceAccountName(This,bstrServiceAccountName) (This)->lpVtbl->put_ServiceAccountName(This,bstrServiceAccountName)
#define IADsFileService_get_ServiceAccountPath(This,retval) (This)->lpVtbl->get_ServiceAccountPath(This,retval)
#define IADsFileService_put_ServiceAccountPath(This,bstrServiceAccountPath) (This)->lpVtbl->put_ServiceAccountPath(This,bstrServiceAccountPath)
#define IADsFileService_get_Dependencies(This,retval) (This)->lpVtbl->get_Dependencies(This,retval)
#define IADsFileService_put_Dependencies(This,vDependencies) (This)->lpVtbl->put_Dependencies(This,vDependencies)
#define IADsFileService_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsFileService_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsFileService_get_MaxUserCount(This,retval) (This)->lpVtbl->get_MaxUserCount(This,retval)
#define IADsFileService_put_MaxUserCount(This,lnMaxUserCount) (This)->lpVtbl->put_MaxUserCount(This,lnMaxUserCount)
#endif
#endif
  HRESULT WINAPI IADsFileService_get_Description_Proxy(IADsFileService *This,BSTR *retval);
  void __RPC_STUB IADsFileService_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileService_put_Description_Proxy(IADsFileService *This,BSTR bstrDescription);
  void __RPC_STUB IADsFileService_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileService_get_MaxUserCount_Proxy(IADsFileService *This,__LONG32 *retval);
  void __RPC_STUB IADsFileService_get_MaxUserCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileService_put_MaxUserCount_Proxy(IADsFileService *This,__LONG32 lnMaxUserCount);
  void __RPC_STUB IADsFileService_put_MaxUserCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsFileServiceOperations_INTERFACE_DEFINED__
#define __IADsFileServiceOperations_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsFileServiceOperations;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsFileServiceOperations : public IADsServiceOperations {
  public:
    virtual HRESULT WINAPI Sessions(IADsCollection **ppSessions) = 0;
    virtual HRESULT WINAPI Resources(IADsCollection **ppResources) = 0;
  };
#else
  typedef struct IADsFileServiceOperationsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsFileServiceOperations *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsFileServiceOperations *This);
      ULONG (WINAPI *Release)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsFileServiceOperations *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsFileServiceOperations *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsFileServiceOperations *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsFileServiceOperations *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsFileServiceOperations *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *SetInfo)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *Get)(IADsFileServiceOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsFileServiceOperations *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsFileServiceOperations *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsFileServiceOperations *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsFileServiceOperations *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_Status)(IADsFileServiceOperations *This,__LONG32 *retval);
      HRESULT (WINAPI *Start)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *Stop)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *Pause)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *Continue)(IADsFileServiceOperations *This);
      HRESULT (WINAPI *SetPassword)(IADsFileServiceOperations *This,BSTR bstrNewPassword);
      HRESULT (WINAPI *Sessions)(IADsFileServiceOperations *This,IADsCollection **ppSessions);
      HRESULT (WINAPI *Resources)(IADsFileServiceOperations *This,IADsCollection **ppResources);
    END_INTERFACE
  } IADsFileServiceOperationsVtbl;
  struct IADsFileServiceOperations {
    CONST_VTBL struct IADsFileServiceOperationsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsFileServiceOperations_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsFileServiceOperations_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsFileServiceOperations_Release(This) (This)->lpVtbl->Release(This)
#define IADsFileServiceOperations_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsFileServiceOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsFileServiceOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsFileServiceOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsFileServiceOperations_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsFileServiceOperations_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsFileServiceOperations_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsFileServiceOperations_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsFileServiceOperations_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsFileServiceOperations_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsFileServiceOperations_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsFileServiceOperations_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsFileServiceOperations_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsFileServiceOperations_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsFileServiceOperations_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsFileServiceOperations_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsFileServiceOperations_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsFileServiceOperations_get_Status(This,retval) (This)->lpVtbl->get_Status(This,retval)
#define IADsFileServiceOperations_Start(This) (This)->lpVtbl->Start(This)
#define IADsFileServiceOperations_Stop(This) (This)->lpVtbl->Stop(This)
#define IADsFileServiceOperations_Pause(This) (This)->lpVtbl->Pause(This)
#define IADsFileServiceOperations_Continue(This) (This)->lpVtbl->Continue(This)
#define IADsFileServiceOperations_SetPassword(This,bstrNewPassword) (This)->lpVtbl->SetPassword(This,bstrNewPassword)
#define IADsFileServiceOperations_Sessions(This,ppSessions) (This)->lpVtbl->Sessions(This,ppSessions)
#define IADsFileServiceOperations_Resources(This,ppResources) (This)->lpVtbl->Resources(This,ppResources)
#endif
#endif
  HRESULT WINAPI IADsFileServiceOperations_Sessions_Proxy(IADsFileServiceOperations *This,IADsCollection **ppSessions);
  void __RPC_STUB IADsFileServiceOperations_Sessions_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileServiceOperations_Resources_Proxy(IADsFileServiceOperations *This,IADsCollection **ppResources);
  void __RPC_STUB IADsFileServiceOperations_Resources_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsFileShare_INTERFACE_DEFINED__
#define __IADsFileShare_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsFileShare;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsFileShare : public IADs {
  public:
    virtual HRESULT WINAPI get_CurrentUserCount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Description(BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI get_HostComputer(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_HostComputer(BSTR bstrHostComputer) = 0;
    virtual HRESULT WINAPI get_Path(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Path(BSTR bstrPath) = 0;
    virtual HRESULT WINAPI get_MaxUserCount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MaxUserCount(__LONG32 lnMaxUserCount) = 0;
  };
#else
  typedef struct IADsFileShareVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsFileShare *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsFileShare *This);
      ULONG (WINAPI *Release)(IADsFileShare *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsFileShare *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsFileShare *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsFileShare *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsFileShare *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsFileShare *This);
      HRESULT (WINAPI *SetInfo)(IADsFileShare *This);
      HRESULT (WINAPI *Get)(IADsFileShare *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsFileShare *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsFileShare *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsFileShare *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsFileShare *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_CurrentUserCount)(IADsFileShare *This,__LONG32 *retval);
      HRESULT (WINAPI *get_Description)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *put_Description)(IADsFileShare *This,BSTR bstrDescription);
      HRESULT (WINAPI *get_HostComputer)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *put_HostComputer)(IADsFileShare *This,BSTR bstrHostComputer);
      HRESULT (WINAPI *get_Path)(IADsFileShare *This,BSTR *retval);
      HRESULT (WINAPI *put_Path)(IADsFileShare *This,BSTR bstrPath);
      HRESULT (WINAPI *get_MaxUserCount)(IADsFileShare *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MaxUserCount)(IADsFileShare *This,__LONG32 lnMaxUserCount);
    END_INTERFACE
  } IADsFileShareVtbl;
  struct IADsFileShare {
    CONST_VTBL struct IADsFileShareVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsFileShare_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsFileShare_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsFileShare_Release(This) (This)->lpVtbl->Release(This)
#define IADsFileShare_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsFileShare_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsFileShare_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsFileShare_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsFileShare_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsFileShare_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsFileShare_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsFileShare_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsFileShare_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsFileShare_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsFileShare_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsFileShare_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsFileShare_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsFileShare_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsFileShare_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsFileShare_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsFileShare_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsFileShare_get_CurrentUserCount(This,retval) (This)->lpVtbl->get_CurrentUserCount(This,retval)
#define IADsFileShare_get_Description(This,retval) (This)->lpVtbl->get_Description(This,retval)
#define IADsFileShare_put_Description(This,bstrDescription) (This)->lpVtbl->put_Description(This,bstrDescription)
#define IADsFileShare_get_HostComputer(This,retval) (This)->lpVtbl->get_HostComputer(This,retval)
#define IADsFileShare_put_HostComputer(This,bstrHostComputer) (This)->lpVtbl->put_HostComputer(This,bstrHostComputer)
#define IADsFileShare_get_Path(This,retval) (This)->lpVtbl->get_Path(This,retval)
#define IADsFileShare_put_Path(This,bstrPath) (This)->lpVtbl->put_Path(This,bstrPath)
#define IADsFileShare_get_MaxUserCount(This,retval) (This)->lpVtbl->get_MaxUserCount(This,retval)
#define IADsFileShare_put_MaxUserCount(This,lnMaxUserCount) (This)->lpVtbl->put_MaxUserCount(This,lnMaxUserCount)
#endif
#endif
  HRESULT WINAPI IADsFileShare_get_CurrentUserCount_Proxy(IADsFileShare *This,__LONG32 *retval);
  void __RPC_STUB IADsFileShare_get_CurrentUserCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_get_Description_Proxy(IADsFileShare *This,BSTR *retval);
  void __RPC_STUB IADsFileShare_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_put_Description_Proxy(IADsFileShare *This,BSTR bstrDescription);
  void __RPC_STUB IADsFileShare_put_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_get_HostComputer_Proxy(IADsFileShare *This,BSTR *retval);
  void __RPC_STUB IADsFileShare_get_HostComputer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_put_HostComputer_Proxy(IADsFileShare *This,BSTR bstrHostComputer);
  void __RPC_STUB IADsFileShare_put_HostComputer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_get_Path_Proxy(IADsFileShare *This,BSTR *retval);
  void __RPC_STUB IADsFileShare_get_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_put_Path_Proxy(IADsFileShare *This,BSTR bstrPath);
  void __RPC_STUB IADsFileShare_put_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_get_MaxUserCount_Proxy(IADsFileShare *This,__LONG32 *retval);
  void __RPC_STUB IADsFileShare_get_MaxUserCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFileShare_put_MaxUserCount_Proxy(IADsFileShare *This,__LONG32 lnMaxUserCount);
  void __RPC_STUB IADsFileShare_put_MaxUserCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsSession_INTERFACE_DEFINED__
#define __IADsSession_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsSession;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsSession : public IADs {
  public:
    virtual HRESULT WINAPI get_User(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_UserPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_Computer(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_ComputerPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_ConnectTime(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_IdleTime(__LONG32 *retval) = 0;
  };
#else
  typedef struct IADsSessionVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsSession *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsSession *This);
      ULONG (WINAPI *Release)(IADsSession *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsSession *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsSession *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsSession *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsSession *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsSession *This);
      HRESULT (WINAPI *SetInfo)(IADsSession *This);
      HRESULT (WINAPI *Get)(IADsSession *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsSession *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsSession *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsSession *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsSession *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_User)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_UserPath)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_Computer)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_ComputerPath)(IADsSession *This,BSTR *retval);
      HRESULT (WINAPI *get_ConnectTime)(IADsSession *This,__LONG32 *retval);
      HRESULT (WINAPI *get_IdleTime)(IADsSession *This,__LONG32 *retval);
    END_INTERFACE
  } IADsSessionVtbl;
  struct IADsSession {
    CONST_VTBL struct IADsSessionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsSession_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsSession_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsSession_Release(This) (This)->lpVtbl->Release(This)
#define IADsSession_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsSession_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsSession_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsSession_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsSession_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsSession_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsSession_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsSession_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsSession_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsSession_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsSession_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsSession_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsSession_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsSession_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsSession_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsSession_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsSession_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsSession_get_User(This,retval) (This)->lpVtbl->get_User(This,retval)
#define IADsSession_get_UserPath(This,retval) (This)->lpVtbl->get_UserPath(This,retval)
#define IADsSession_get_Computer(This,retval) (This)->lpVtbl->get_Computer(This,retval)
#define IADsSession_get_ComputerPath(This,retval) (This)->lpVtbl->get_ComputerPath(This,retval)
#define IADsSession_get_ConnectTime(This,retval) (This)->lpVtbl->get_ConnectTime(This,retval)
#define IADsSession_get_IdleTime(This,retval) (This)->lpVtbl->get_IdleTime(This,retval)
#endif
#endif
  HRESULT WINAPI IADsSession_get_User_Proxy(IADsSession *This,BSTR *retval);
  void __RPC_STUB IADsSession_get_User_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSession_get_UserPath_Proxy(IADsSession *This,BSTR *retval);
  void __RPC_STUB IADsSession_get_UserPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSession_get_Computer_Proxy(IADsSession *This,BSTR *retval);
  void __RPC_STUB IADsSession_get_Computer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSession_get_ComputerPath_Proxy(IADsSession *This,BSTR *retval);
  void __RPC_STUB IADsSession_get_ComputerPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSession_get_ConnectTime_Proxy(IADsSession *This,__LONG32 *retval);
  void __RPC_STUB IADsSession_get_ConnectTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSession_get_IdleTime_Proxy(IADsSession *This,__LONG32 *retval);
  void __RPC_STUB IADsSession_get_IdleTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsResource_INTERFACE_DEFINED__
#define __IADsResource_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsResource;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsResource : public IADs {
  public:
    virtual HRESULT WINAPI get_User(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_UserPath(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_Path(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_LockCount(__LONG32 *retval) = 0;
  };
#else
  typedef struct IADsResourceVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsResource *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsResource *This);
      ULONG (WINAPI *Release)(IADsResource *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsResource *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsResource *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsResource *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsResource *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Name)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IADsResource *This);
      HRESULT (WINAPI *SetInfo)(IADsResource *This);
      HRESULT (WINAPI *Get)(IADsResource *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *Put)(IADsResource *This,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetEx)(IADsResource *This,BSTR bstrName,VARIANT *pvProp);
      HRESULT (WINAPI *PutEx)(IADsResource *This,__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp);
      HRESULT (WINAPI *GetInfoEx)(IADsResource *This,VARIANT vProperties,__LONG32 lnReserved);
      HRESULT (WINAPI *get_User)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_UserPath)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_Path)(IADsResource *This,BSTR *retval);
      HRESULT (WINAPI *get_LockCount)(IADsResource *This,__LONG32 *retval);
    END_INTERFACE
  } IADsResourceVtbl;
  struct IADsResource {
    CONST_VTBL struct IADsResourceVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsResource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsResource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsResource_Release(This) (This)->lpVtbl->Release(This)
#define IADsResource_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsResource_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsResource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsResource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsResource_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IADsResource_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IADsResource_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IADsResource_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IADsResource_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IADsResource_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IADsResource_GetInfo(This) (This)->lpVtbl->GetInfo(This)
#define IADsResource_SetInfo(This) (This)->lpVtbl->SetInfo(This)
#define IADsResource_Get(This,bstrName,pvProp) (This)->lpVtbl->Get(This,bstrName,pvProp)
#define IADsResource_Put(This,bstrName,vProp) (This)->lpVtbl->Put(This,bstrName,vProp)
#define IADsResource_GetEx(This,bstrName,pvProp) (This)->lpVtbl->GetEx(This,bstrName,pvProp)
#define IADsResource_PutEx(This,lnControlCode,bstrName,vProp) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp)
#define IADsResource_GetInfoEx(This,vProperties,lnReserved) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved)
#define IADsResource_get_User(This,retval) (This)->lpVtbl->get_User(This,retval)
#define IADsResource_get_UserPath(This,retval) (This)->lpVtbl->get_UserPath(This,retval)
#define IADsResource_get_Path(This,retval) (This)->lpVtbl->get_Path(This,retval)
#define IADsResource_get_LockCount(This,retval) (This)->lpVtbl->get_LockCount(This,retval)
#endif
#endif
  HRESULT WINAPI IADsResource_get_User_Proxy(IADsResource *This,BSTR *retval);
  void __RPC_STUB IADsResource_get_User_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsResource_get_UserPath_Proxy(IADsResource *This,BSTR *retval);
  void __RPC_STUB IADsResource_get_UserPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsResource_get_Path_Proxy(IADsResource *This,BSTR *retval);
  void __RPC_STUB IADsResource_get_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsResource_get_LockCount_Proxy(IADsResource *This,__LONG32 *retval);
  void __RPC_STUB IADsResource_get_LockCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsOpenDSObject_INTERFACE_DEFINED__
#define __IADsOpenDSObject_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsOpenDSObject;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsOpenDSObject : public IDispatch {
  public:
    virtual HRESULT WINAPI OpenDSObject(BSTR lpszDNName,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved,IDispatch **ppOleDsObj) = 0;
  };
#else
  typedef struct IADsOpenDSObjectVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsOpenDSObject *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsOpenDSObject *This);
      ULONG (WINAPI *Release)(IADsOpenDSObject *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsOpenDSObject *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsOpenDSObject *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsOpenDSObject *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsOpenDSObject *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *OpenDSObject)(IADsOpenDSObject *This,BSTR lpszDNName,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved,IDispatch **ppOleDsObj);
    END_INTERFACE
  } IADsOpenDSObjectVtbl;
  struct IADsOpenDSObject {
    CONST_VTBL struct IADsOpenDSObjectVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsOpenDSObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsOpenDSObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsOpenDSObject_Release(This) (This)->lpVtbl->Release(This)
#define IADsOpenDSObject_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsOpenDSObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsOpenDSObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsOpenDSObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsOpenDSObject_OpenDSObject(This,lpszDNName,lpszUserName,lpszPassword,lnReserved,ppOleDsObj) (This)->lpVtbl->OpenDSObject(This,lpszDNName,lpszUserName,lpszPassword,lnReserved,ppOleDsObj)
#endif
#endif
  HRESULT WINAPI IADsOpenDSObject_OpenDSObject_Proxy(IADsOpenDSObject *This,BSTR lpszDNName,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved,IDispatch **ppOleDsObj);
  void __RPC_STUB IADsOpenDSObject_OpenDSObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IDirectoryObject_INTERFACE_DEFINED__
#define __IDirectoryObject_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDirectoryObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDirectoryObject : public IUnknown {
  public:
    virtual HRESULT WINAPI GetObjectInformation(PADS_OBJECT_INFO *ppObjInfo) = 0;
    virtual HRESULT WINAPI GetObjectAttributes(LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_ATTR_INFO *ppAttributeEntries,DWORD *pdwNumAttributesReturned) = 0;
    virtual HRESULT WINAPI SetObjectAttributes(PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,DWORD *pdwNumAttributesModified) = 0;
    virtual HRESULT WINAPI CreateDSObject(LPWSTR pszRDNName,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI DeleteDSObject(LPWSTR pszRDNName) = 0;
  };
#else
  typedef struct IDirectoryObjectVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDirectoryObject *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDirectoryObject *This);
      ULONG (WINAPI *Release)(IDirectoryObject *This);
      HRESULT (WINAPI *GetObjectInformation)(IDirectoryObject *This,PADS_OBJECT_INFO *ppObjInfo);
      HRESULT (WINAPI *GetObjectAttributes)(IDirectoryObject *This,LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_ATTR_INFO *ppAttributeEntries,DWORD *pdwNumAttributesReturned);
      HRESULT (WINAPI *SetObjectAttributes)(IDirectoryObject *This,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,DWORD *pdwNumAttributesModified);
      HRESULT (WINAPI *CreateDSObject)(IDirectoryObject *This,LPWSTR pszRDNName,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,IDispatch **ppObject);
      HRESULT (WINAPI *DeleteDSObject)(IDirectoryObject *This,LPWSTR pszRDNName);
    END_INTERFACE
  } IDirectoryObjectVtbl;
  struct IDirectoryObject {
    CONST_VTBL struct IDirectoryObjectVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDirectoryObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDirectoryObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDirectoryObject_Release(This) (This)->lpVtbl->Release(This)
#define IDirectoryObject_GetObjectInformation(This,ppObjInfo) (This)->lpVtbl->GetObjectInformation(This,ppObjInfo)
#define IDirectoryObject_GetObjectAttributes(This,pAttributeNames,dwNumberAttributes,ppAttributeEntries,pdwNumAttributesReturned) (This)->lpVtbl->GetObjectAttributes(This,pAttributeNames,dwNumberAttributes,ppAttributeEntries,pdwNumAttributesReturned)
#define IDirectoryObject_SetObjectAttributes(This,pAttributeEntries,dwNumAttributes,pdwNumAttributesModified) (This)->lpVtbl->SetObjectAttributes(This,pAttributeEntries,dwNumAttributes,pdwNumAttributesModified)
#define IDirectoryObject_CreateDSObject(This,pszRDNName,pAttributeEntries,dwNumAttributes,ppObject) (This)->lpVtbl->CreateDSObject(This,pszRDNName,pAttributeEntries,dwNumAttributes,ppObject)
#define IDirectoryObject_DeleteDSObject(This,pszRDNName) (This)->lpVtbl->DeleteDSObject(This,pszRDNName)
#endif
#endif
  HRESULT WINAPI IDirectoryObject_GetObjectInformation_Proxy(IDirectoryObject *This,PADS_OBJECT_INFO *ppObjInfo);
  void __RPC_STUB IDirectoryObject_GetObjectInformation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectoryObject_GetObjectAttributes_Proxy(IDirectoryObject *This,LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_ATTR_INFO *ppAttributeEntries,DWORD *pdwNumAttributesReturned);
  void __RPC_STUB IDirectoryObject_GetObjectAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectoryObject_SetObjectAttributes_Proxy(IDirectoryObject *This,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,DWORD *pdwNumAttributesModified);
  void __RPC_STUB IDirectoryObject_SetObjectAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectoryObject_CreateDSObject_Proxy(IDirectoryObject *This,LPWSTR pszRDNName,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,IDispatch **ppObject);
  void __RPC_STUB IDirectoryObject_CreateDSObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectoryObject_DeleteDSObject_Proxy(IDirectoryObject *This,LPWSTR pszRDNName);
  void __RPC_STUB IDirectoryObject_DeleteDSObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IDirectorySearch_INTERFACE_DEFINED__
#define __IDirectorySearch_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDirectorySearch;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDirectorySearch : public IUnknown {
  public:
    virtual HRESULT WINAPI SetSearchPreference(PADS_SEARCHPREF_INFO pSearchPrefs,DWORD dwNumPrefs) = 0;
    virtual HRESULT WINAPI ExecuteSearch(LPWSTR pszSearchFilter,LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_SEARCH_HANDLE phSearchResult) = 0;
    virtual HRESULT WINAPI AbandonSearch(ADS_SEARCH_HANDLE phSearchResult) = 0;
    virtual HRESULT WINAPI GetFirstRow(ADS_SEARCH_HANDLE hSearchResult) = 0;
    virtual HRESULT WINAPI GetNextRow(ADS_SEARCH_HANDLE hSearchResult) = 0;
    virtual HRESULT WINAPI GetPreviousRow(ADS_SEARCH_HANDLE hSearchResult) = 0;
    virtual HRESULT WINAPI GetNextColumnName(ADS_SEARCH_HANDLE hSearchHandle,LPWSTR *ppszColumnName) = 0;
    virtual HRESULT WINAPI GetColumn(ADS_SEARCH_HANDLE hSearchResult,LPWSTR szColumnName,PADS_SEARCH_COLUMN pSearchColumn) = 0;
    virtual HRESULT WINAPI FreeColumn(PADS_SEARCH_COLUMN pSearchColumn) = 0;
    virtual HRESULT WINAPI CloseSearchHandle(ADS_SEARCH_HANDLE hSearchResult) = 0;
  };
#else
  typedef struct IDirectorySearchVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDirectorySearch *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDirectorySearch *This);
      ULONG (WINAPI *Release)(IDirectorySearch *This);
      HRESULT (WINAPI *SetSearchPreference)(IDirectorySearch *This,PADS_SEARCHPREF_INFO pSearchPrefs,DWORD dwNumPrefs);
      HRESULT (WINAPI *ExecuteSearch)(IDirectorySearch *This,LPWSTR pszSearchFilter,LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_SEARCH_HANDLE phSearchResult);
      HRESULT (WINAPI *AbandonSearch)(IDirectorySearch *This,ADS_SEARCH_HANDLE phSearchResult);
      HRESULT (WINAPI *GetFirstRow)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
      HRESULT (WINAPI *GetNextRow)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
      HRESULT (WINAPI *GetPreviousRow)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
      HRESULT (WINAPI *GetNextColumnName)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchHandle,LPWSTR *ppszColumnName);
      HRESULT (WINAPI *GetColumn)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult,LPWSTR szColumnName,PADS_SEARCH_COLUMN pSearchColumn);
      HRESULT (WINAPI *FreeColumn)(IDirectorySearch *This,PADS_SEARCH_COLUMN pSearchColumn);
      HRESULT (WINAPI *CloseSearchHandle)(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
    END_INTERFACE
  } IDirectorySearchVtbl;
  struct IDirectorySearch {
    CONST_VTBL struct IDirectorySearchVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDirectorySearch_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDirectorySearch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDirectorySearch_Release(This) (This)->lpVtbl->Release(This)
#define IDirectorySearch_SetSearchPreference(This,pSearchPrefs,dwNumPrefs) (This)->lpVtbl->SetSearchPreference(This,pSearchPrefs,dwNumPrefs)
#define IDirectorySearch_ExecuteSearch(This,pszSearchFilter,pAttributeNames,dwNumberAttributes,phSearchResult) (This)->lpVtbl->ExecuteSearch(This,pszSearchFilter,pAttributeNames,dwNumberAttributes,phSearchResult)
#define IDirectorySearch_AbandonSearch(This,phSearchResult) (This)->lpVtbl->AbandonSearch(This,phSearchResult)
#define IDirectorySearch_GetFirstRow(This,hSearchResult) (This)->lpVtbl->GetFirstRow(This,hSearchResult)
#define IDirectorySearch_GetNextRow(This,hSearchResult) (This)->lpVtbl->GetNextRow(This,hSearchResult)
#define IDirectorySearch_GetPreviousRow(This,hSearchResult) (This)->lpVtbl->GetPreviousRow(This,hSearchResult)
#define IDirectorySearch_GetNextColumnName(This,hSearchHandle,ppszColumnName) (This)->lpVtbl->GetNextColumnName(This,hSearchHandle,ppszColumnName)
#define IDirectorySearch_GetColumn(This,hSearchResult,szColumnName,pSearchColumn) (This)->lpVtbl->GetColumn(This,hSearchResult,szColumnName,pSearchColumn)
#define IDirectorySearch_FreeColumn(This,pSearchColumn) (This)->lpVtbl->FreeColumn(This,pSearchColumn)
#define IDirectorySearch_CloseSearchHandle(This,hSearchResult) (This)->lpVtbl->CloseSearchHandle(This,hSearchResult)
#endif
#endif
  HRESULT WINAPI IDirectorySearch_SetSearchPreference_Proxy(IDirectorySearch *This,PADS_SEARCHPREF_INFO pSearchPrefs,DWORD dwNumPrefs);
  void __RPC_STUB IDirectorySearch_SetSearchPreference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_ExecuteSearch_Proxy(IDirectorySearch *This,LPWSTR pszSearchFilter,LPWSTR *pAttributeNames,DWORD dwNumberAttributes,PADS_SEARCH_HANDLE phSearchResult);
  void __RPC_STUB IDirectorySearch_ExecuteSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_AbandonSearch_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE phSearchResult);
  void __RPC_STUB IDirectorySearch_AbandonSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_GetFirstRow_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
  void __RPC_STUB IDirectorySearch_GetFirstRow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_GetNextRow_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
  void __RPC_STUB IDirectorySearch_GetNextRow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_GetPreviousRow_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
  void __RPC_STUB IDirectorySearch_GetPreviousRow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_GetNextColumnName_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchHandle,LPWSTR *ppszColumnName);
  void __RPC_STUB IDirectorySearch_GetNextColumnName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_GetColumn_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult,LPWSTR szColumnName,PADS_SEARCH_COLUMN pSearchColumn);
  void __RPC_STUB IDirectorySearch_GetColumn_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_FreeColumn_Proxy(IDirectorySearch *This,PADS_SEARCH_COLUMN pSearchColumn);
  void __RPC_STUB IDirectorySearch_FreeColumn_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySearch_CloseSearchHandle_Proxy(IDirectorySearch *This,ADS_SEARCH_HANDLE hSearchResult);
  void __RPC_STUB IDirectorySearch_CloseSearchHandle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IDirectorySchemaMgmt_INTERFACE_DEFINED__
#define __IDirectorySchemaMgmt_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDirectorySchemaMgmt;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDirectorySchemaMgmt : public IUnknown {
  public:
    virtual HRESULT WINAPI EnumAttributes(LPWSTR *ppszAttrNames,DWORD dwNumAttributes,PADS_ATTR_DEF *ppAttrDefinition,DWORD *pdwNumAttributes) = 0;
    virtual HRESULT WINAPI CreateAttributeDefinition(LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition) = 0;
    virtual HRESULT WINAPI WriteAttributeDefinition(LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition) = 0;
    virtual HRESULT WINAPI DeleteAttributeDefinition(LPWSTR pszAttributeName) = 0;
    virtual HRESULT WINAPI EnumClasses(LPWSTR *ppszClassNames,DWORD dwNumClasses,PADS_CLASS_DEF *ppClassDefinition,DWORD *pdwNumClasses) = 0;
    virtual HRESULT WINAPI WriteClassDefinition(LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition) = 0;
    virtual HRESULT WINAPI CreateClassDefinition(LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition) = 0;
    virtual HRESULT WINAPI DeleteClassDefinition(LPWSTR pszClassName) = 0;
  };
#else
  typedef struct IDirectorySchemaMgmtVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDirectorySchemaMgmt *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDirectorySchemaMgmt *This);
      ULONG (WINAPI *Release)(IDirectorySchemaMgmt *This);
      HRESULT (WINAPI *EnumAttributes)(IDirectorySchemaMgmt *This,LPWSTR *ppszAttrNames,DWORD dwNumAttributes,PADS_ATTR_DEF *ppAttrDefinition,DWORD *pdwNumAttributes);
      HRESULT (WINAPI *CreateAttributeDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition);
      HRESULT (WINAPI *WriteAttributeDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition);
      HRESULT (WINAPI *DeleteAttributeDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName);
      HRESULT (WINAPI *EnumClasses)(IDirectorySchemaMgmt *This,LPWSTR *ppszClassNames,DWORD dwNumClasses,PADS_CLASS_DEF *ppClassDefinition,DWORD *pdwNumClasses);
      HRESULT (WINAPI *WriteClassDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition);
      HRESULT (WINAPI *CreateClassDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition);
      HRESULT (WINAPI *DeleteClassDefinition)(IDirectorySchemaMgmt *This,LPWSTR pszClassName);
    END_INTERFACE
  } IDirectorySchemaMgmtVtbl;
  struct IDirectorySchemaMgmt {
    CONST_VTBL struct IDirectorySchemaMgmtVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDirectorySchemaMgmt_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDirectorySchemaMgmt_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDirectorySchemaMgmt_Release(This) (This)->lpVtbl->Release(This)
#define IDirectorySchemaMgmt_EnumAttributes(This,ppszAttrNames,dwNumAttributes,ppAttrDefinition,pdwNumAttributes) (This)->lpVtbl->EnumAttributes(This,ppszAttrNames,dwNumAttributes,ppAttrDefinition,pdwNumAttributes)
#define IDirectorySchemaMgmt_CreateAttributeDefinition(This,pszAttributeName,pAttributeDefinition) (This)->lpVtbl->CreateAttributeDefinition(This,pszAttributeName,pAttributeDefinition)
#define IDirectorySchemaMgmt_WriteAttributeDefinition(This,pszAttributeName,pAttributeDefinition) (This)->lpVtbl->WriteAttributeDefinition(This,pszAttributeName,pAttributeDefinition)
#define IDirectorySchemaMgmt_DeleteAttributeDefinition(This,pszAttributeName) (This)->lpVtbl->DeleteAttributeDefinition(This,pszAttributeName)
#define IDirectorySchemaMgmt_EnumClasses(This,ppszClassNames,dwNumClasses,ppClassDefinition,pdwNumClasses) (This)->lpVtbl->EnumClasses(This,ppszClassNames,dwNumClasses,ppClassDefinition,pdwNumClasses)
#define IDirectorySchemaMgmt_WriteClassDefinition(This,pszClassName,pClassDefinition) (This)->lpVtbl->WriteClassDefinition(This,pszClassName,pClassDefinition)
#define IDirectorySchemaMgmt_CreateClassDefinition(This,pszClassName,pClassDefinition) (This)->lpVtbl->CreateClassDefinition(This,pszClassName,pClassDefinition)
#define IDirectorySchemaMgmt_DeleteClassDefinition(This,pszClassName) (This)->lpVtbl->DeleteClassDefinition(This,pszClassName)
#endif
#endif
  HRESULT WINAPI IDirectorySchemaMgmt_EnumAttributes_Proxy(IDirectorySchemaMgmt *This,LPWSTR *ppszAttrNames,DWORD dwNumAttributes,PADS_ATTR_DEF *ppAttrDefinition,DWORD *pdwNumAttributes);
  void __RPC_STUB IDirectorySchemaMgmt_EnumAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_CreateAttributeDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition);
  void __RPC_STUB IDirectorySchemaMgmt_CreateAttributeDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_WriteAttributeDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition);
  void __RPC_STUB IDirectorySchemaMgmt_WriteAttributeDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_DeleteAttributeDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszAttributeName);
  void __RPC_STUB IDirectorySchemaMgmt_DeleteAttributeDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_EnumClasses_Proxy(IDirectorySchemaMgmt *This,LPWSTR *ppszClassNames,DWORD dwNumClasses,PADS_CLASS_DEF *ppClassDefinition,DWORD *pdwNumClasses);
  void __RPC_STUB IDirectorySchemaMgmt_EnumClasses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_WriteClassDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition);
  void __RPC_STUB IDirectorySchemaMgmt_WriteClassDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_CreateClassDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition);
  void __RPC_STUB IDirectorySchemaMgmt_CreateClassDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDirectorySchemaMgmt_DeleteClassDefinition_Proxy(IDirectorySchemaMgmt *This,LPWSTR pszClassName);
  void __RPC_STUB IDirectorySchemaMgmt_DeleteClassDefinition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsAggregatee_INTERFACE_DEFINED__
#define __IADsAggregatee_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsAggregatee;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsAggregatee : public IUnknown {
  public:
    virtual HRESULT WINAPI ConnectAsAggregatee(IUnknown *pOuterUnknown) = 0;
    virtual HRESULT WINAPI DisconnectAsAggregatee(void) = 0;
    virtual HRESULT WINAPI RelinquishInterface(REFIID riid) = 0;
    virtual HRESULT WINAPI RestoreInterface(REFIID riid) = 0;
  };
#else
  typedef struct IADsAggregateeVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsAggregatee *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsAggregatee *This);
      ULONG (WINAPI *Release)(IADsAggregatee *This);
      HRESULT (WINAPI *ConnectAsAggregatee)(IADsAggregatee *This,IUnknown *pOuterUnknown);
      HRESULT (WINAPI *DisconnectAsAggregatee)(IADsAggregatee *This);
      HRESULT (WINAPI *RelinquishInterface)(IADsAggregatee *This,REFIID riid);
      HRESULT (WINAPI *RestoreInterface)(IADsAggregatee *This,REFIID riid);
    END_INTERFACE
  } IADsAggregateeVtbl;
  struct IADsAggregatee {
    CONST_VTBL struct IADsAggregateeVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsAggregatee_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsAggregatee_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsAggregatee_Release(This) (This)->lpVtbl->Release(This)
#define IADsAggregatee_ConnectAsAggregatee(This,pOuterUnknown) (This)->lpVtbl->ConnectAsAggregatee(This,pOuterUnknown)
#define IADsAggregatee_DisconnectAsAggregatee(This) (This)->lpVtbl->DisconnectAsAggregatee(This)
#define IADsAggregatee_RelinquishInterface(This,riid) (This)->lpVtbl->RelinquishInterface(This,riid)
#define IADsAggregatee_RestoreInterface(This,riid) (This)->lpVtbl->RestoreInterface(This,riid)
#endif
#endif
  HRESULT WINAPI IADsAggregatee_ConnectAsAggregatee_Proxy(IADsAggregatee *This,IUnknown *pOuterUnknown);
  void __RPC_STUB IADsAggregatee_ConnectAsAggregatee_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAggregatee_DisconnectAsAggregatee_Proxy(IADsAggregatee *This);
  void __RPC_STUB IADsAggregatee_DisconnectAsAggregatee_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAggregatee_RelinquishInterface_Proxy(IADsAggregatee *This,REFIID riid);
  void __RPC_STUB IADsAggregatee_RelinquishInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAggregatee_RestoreInterface_Proxy(IADsAggregatee *This,REFIID riid);
  void __RPC_STUB IADsAggregatee_RestoreInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsAggregator_INTERFACE_DEFINED__
#define __IADsAggregator_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsAggregator;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsAggregator : public IUnknown {
  public:
    virtual HRESULT WINAPI ConnectAsAggregator(IUnknown *pAggregatee) = 0;
    virtual HRESULT WINAPI DisconnectAsAggregator(void) = 0;
  };
#else
  typedef struct IADsAggregatorVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsAggregator *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsAggregator *This);
      ULONG (WINAPI *Release)(IADsAggregator *This);
      HRESULT (WINAPI *ConnectAsAggregator)(IADsAggregator *This,IUnknown *pAggregatee);
      HRESULT (WINAPI *DisconnectAsAggregator)(IADsAggregator *This);
    END_INTERFACE
  } IADsAggregatorVtbl;
  struct IADsAggregator {
    CONST_VTBL struct IADsAggregatorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsAggregator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsAggregator_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsAggregator_Release(This) (This)->lpVtbl->Release(This)
#define IADsAggregator_ConnectAsAggregator(This,pAggregatee) (This)->lpVtbl->ConnectAsAggregator(This,pAggregatee)
#define IADsAggregator_DisconnectAsAggregator(This) (This)->lpVtbl->DisconnectAsAggregator(This)
#endif
#endif
  HRESULT WINAPI IADsAggregator_ConnectAsAggregator_Proxy(IADsAggregator *This,IUnknown *pAggregatee);
  void __RPC_STUB IADsAggregator_ConnectAsAggregator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAggregator_DisconnectAsAggregator_Proxy(IADsAggregator *This);
  void __RPC_STUB IADsAggregator_DisconnectAsAggregator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsAccessControlEntry_INTERFACE_DEFINED__
#define __IADsAccessControlEntry_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsAccessControlEntry;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsAccessControlEntry : public IDispatch {
  public:
    virtual HRESULT WINAPI get_AccessMask(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AccessMask(__LONG32 lnAccessMask) = 0;
    virtual HRESULT WINAPI get_AceType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AceType(__LONG32 lnAceType) = 0;
    virtual HRESULT WINAPI get_AceFlags(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AceFlags(__LONG32 lnAceFlags) = 0;
    virtual HRESULT WINAPI get_Flags(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Flags(__LONG32 lnFlags) = 0;
    virtual HRESULT WINAPI get_ObjectType(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ObjectType(BSTR bstrObjectType) = 0;
    virtual HRESULT WINAPI get_InheritedObjectType(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_InheritedObjectType(BSTR bstrInheritedObjectType) = 0;
    virtual HRESULT WINAPI get_Trustee(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Trustee(BSTR bstrTrustee) = 0;
  };
#else
  typedef struct IADsAccessControlEntryVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsAccessControlEntry *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsAccessControlEntry *This);
      ULONG (WINAPI *Release)(IADsAccessControlEntry *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsAccessControlEntry *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsAccessControlEntry *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsAccessControlEntry *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsAccessControlEntry *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_AccessMask)(IADsAccessControlEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AccessMask)(IADsAccessControlEntry *This,__LONG32 lnAccessMask);
      HRESULT (WINAPI *get_AceType)(IADsAccessControlEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AceType)(IADsAccessControlEntry *This,__LONG32 lnAceType);
      HRESULT (WINAPI *get_AceFlags)(IADsAccessControlEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AceFlags)(IADsAccessControlEntry *This,__LONG32 lnAceFlags);
      HRESULT (WINAPI *get_Flags)(IADsAccessControlEntry *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Flags)(IADsAccessControlEntry *This,__LONG32 lnFlags);
      HRESULT (WINAPI *get_ObjectType)(IADsAccessControlEntry *This,BSTR *retval);
      HRESULT (WINAPI *put_ObjectType)(IADsAccessControlEntry *This,BSTR bstrObjectType);
      HRESULT (WINAPI *get_InheritedObjectType)(IADsAccessControlEntry *This,BSTR *retval);
      HRESULT (WINAPI *put_InheritedObjectType)(IADsAccessControlEntry *This,BSTR bstrInheritedObjectType);
      HRESULT (WINAPI *get_Trustee)(IADsAccessControlEntry *This,BSTR *retval);
      HRESULT (WINAPI *put_Trustee)(IADsAccessControlEntry *This,BSTR bstrTrustee);
    END_INTERFACE
  } IADsAccessControlEntryVtbl;
  struct IADsAccessControlEntry {
    CONST_VTBL struct IADsAccessControlEntryVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsAccessControlEntry_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsAccessControlEntry_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsAccessControlEntry_Release(This) (This)->lpVtbl->Release(This)
#define IADsAccessControlEntry_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsAccessControlEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsAccessControlEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsAccessControlEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsAccessControlEntry_get_AccessMask(This,retval) (This)->lpVtbl->get_AccessMask(This,retval)
#define IADsAccessControlEntry_put_AccessMask(This,lnAccessMask) (This)->lpVtbl->put_AccessMask(This,lnAccessMask)
#define IADsAccessControlEntry_get_AceType(This,retval) (This)->lpVtbl->get_AceType(This,retval)
#define IADsAccessControlEntry_put_AceType(This,lnAceType) (This)->lpVtbl->put_AceType(This,lnAceType)
#define IADsAccessControlEntry_get_AceFlags(This,retval) (This)->lpVtbl->get_AceFlags(This,retval)
#define IADsAccessControlEntry_put_AceFlags(This,lnAceFlags) (This)->lpVtbl->put_AceFlags(This,lnAceFlags)
#define IADsAccessControlEntry_get_Flags(This,retval) (This)->lpVtbl->get_Flags(This,retval)
#define IADsAccessControlEntry_put_Flags(This,lnFlags) (This)->lpVtbl->put_Flags(This,lnFlags)
#define IADsAccessControlEntry_get_ObjectType(This,retval) (This)->lpVtbl->get_ObjectType(This,retval)
#define IADsAccessControlEntry_put_ObjectType(This,bstrObjectType) (This)->lpVtbl->put_ObjectType(This,bstrObjectType)
#define IADsAccessControlEntry_get_InheritedObjectType(This,retval) (This)->lpVtbl->get_InheritedObjectType(This,retval)
#define IADsAccessControlEntry_put_InheritedObjectType(This,bstrInheritedObjectType) (This)->lpVtbl->put_InheritedObjectType(This,bstrInheritedObjectType)
#define IADsAccessControlEntry_get_Trustee(This,retval) (This)->lpVtbl->get_Trustee(This,retval)
#define IADsAccessControlEntry_put_Trustee(This,bstrTrustee) (This)->lpVtbl->put_Trustee(This,bstrTrustee)
#endif
#endif
  HRESULT WINAPI IADsAccessControlEntry_get_AccessMask_Proxy(IADsAccessControlEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlEntry_get_AccessMask_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_AccessMask_Proxy(IADsAccessControlEntry *This,__LONG32 lnAccessMask);
  void __RPC_STUB IADsAccessControlEntry_put_AccessMask_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_AceType_Proxy(IADsAccessControlEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlEntry_get_AceType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_AceType_Proxy(IADsAccessControlEntry *This,__LONG32 lnAceType);
  void __RPC_STUB IADsAccessControlEntry_put_AceType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_AceFlags_Proxy(IADsAccessControlEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlEntry_get_AceFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_AceFlags_Proxy(IADsAccessControlEntry *This,__LONG32 lnAceFlags);
  void __RPC_STUB IADsAccessControlEntry_put_AceFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_Flags_Proxy(IADsAccessControlEntry *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlEntry_get_Flags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_Flags_Proxy(IADsAccessControlEntry *This,__LONG32 lnFlags);
  void __RPC_STUB IADsAccessControlEntry_put_Flags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_ObjectType_Proxy(IADsAccessControlEntry *This,BSTR *retval);
  void __RPC_STUB IADsAccessControlEntry_get_ObjectType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_ObjectType_Proxy(IADsAccessControlEntry *This,BSTR bstrObjectType);
  void __RPC_STUB IADsAccessControlEntry_put_ObjectType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_InheritedObjectType_Proxy(IADsAccessControlEntry *This,BSTR *retval);
  void __RPC_STUB IADsAccessControlEntry_get_InheritedObjectType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_InheritedObjectType_Proxy(IADsAccessControlEntry *This,BSTR bstrInheritedObjectType);
  void __RPC_STUB IADsAccessControlEntry_put_InheritedObjectType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_get_Trustee_Proxy(IADsAccessControlEntry *This,BSTR *retval);
  void __RPC_STUB IADsAccessControlEntry_get_Trustee_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlEntry_put_Trustee_Proxy(IADsAccessControlEntry *This,BSTR bstrTrustee);
  void __RPC_STUB IADsAccessControlEntry_put_Trustee_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_AccessControlEntry;
#ifdef __cplusplus
  class AccessControlEntry;
#endif

#ifndef __IADsAccessControlList_INTERFACE_DEFINED__
#define __IADsAccessControlList_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsAccessControlList;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsAccessControlList : public IDispatch {
  public:
    virtual HRESULT WINAPI get_AclRevision(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AclRevision(__LONG32 lnAclRevision) = 0;
    virtual HRESULT WINAPI get_AceCount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AceCount(__LONG32 lnAceCount) = 0;
    virtual HRESULT WINAPI AddAce(IDispatch *pAccessControlEntry) = 0;
    virtual HRESULT WINAPI RemoveAce(IDispatch *pAccessControlEntry) = 0;
    virtual HRESULT WINAPI CopyAccessList(IDispatch **ppAccessControlList) = 0;
    virtual HRESULT WINAPI get__NewEnum(IUnknown **retval) = 0;
  };
#else
  typedef struct IADsAccessControlListVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsAccessControlList *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsAccessControlList *This);
      ULONG (WINAPI *Release)(IADsAccessControlList *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsAccessControlList *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsAccessControlList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsAccessControlList *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsAccessControlList *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_AclRevision)(IADsAccessControlList *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AclRevision)(IADsAccessControlList *This,__LONG32 lnAclRevision);
      HRESULT (WINAPI *get_AceCount)(IADsAccessControlList *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AceCount)(IADsAccessControlList *This,__LONG32 lnAceCount);
      HRESULT (WINAPI *AddAce)(IADsAccessControlList *This,IDispatch *pAccessControlEntry);
      HRESULT (WINAPI *RemoveAce)(IADsAccessControlList *This,IDispatch *pAccessControlEntry);
      HRESULT (WINAPI *CopyAccessList)(IADsAccessControlList *This,IDispatch **ppAccessControlList);
      HRESULT (WINAPI *get__NewEnum)(IADsAccessControlList *This,IUnknown **retval);
    END_INTERFACE
  } IADsAccessControlListVtbl;
  struct IADsAccessControlList {
    CONST_VTBL struct IADsAccessControlListVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsAccessControlList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsAccessControlList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsAccessControlList_Release(This) (This)->lpVtbl->Release(This)
#define IADsAccessControlList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsAccessControlList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsAccessControlList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsAccessControlList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsAccessControlList_get_AclRevision(This,retval) (This)->lpVtbl->get_AclRevision(This,retval)
#define IADsAccessControlList_put_AclRevision(This,lnAclRevision) (This)->lpVtbl->put_AclRevision(This,lnAclRevision)
#define IADsAccessControlList_get_AceCount(This,retval) (This)->lpVtbl->get_AceCount(This,retval)
#define IADsAccessControlList_put_AceCount(This,lnAceCount) (This)->lpVtbl->put_AceCount(This,lnAceCount)
#define IADsAccessControlList_AddAce(This,pAccessControlEntry) (This)->lpVtbl->AddAce(This,pAccessControlEntry)
#define IADsAccessControlList_RemoveAce(This,pAccessControlEntry) (This)->lpVtbl->RemoveAce(This,pAccessControlEntry)
#define IADsAccessControlList_CopyAccessList(This,ppAccessControlList) (This)->lpVtbl->CopyAccessList(This,ppAccessControlList)
#define IADsAccessControlList_get__NewEnum(This,retval) (This)->lpVtbl->get__NewEnum(This,retval)
#endif
#endif
  HRESULT WINAPI IADsAccessControlList_get_AclRevision_Proxy(IADsAccessControlList *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlList_get_AclRevision_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_put_AclRevision_Proxy(IADsAccessControlList *This,__LONG32 lnAclRevision);
  void __RPC_STUB IADsAccessControlList_put_AclRevision_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_get_AceCount_Proxy(IADsAccessControlList *This,__LONG32 *retval);
  void __RPC_STUB IADsAccessControlList_get_AceCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_put_AceCount_Proxy(IADsAccessControlList *This,__LONG32 lnAceCount);
  void __RPC_STUB IADsAccessControlList_put_AceCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_AddAce_Proxy(IADsAccessControlList *This,IDispatch *pAccessControlEntry);
  void __RPC_STUB IADsAccessControlList_AddAce_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_RemoveAce_Proxy(IADsAccessControlList *This,IDispatch *pAccessControlEntry);
  void __RPC_STUB IADsAccessControlList_RemoveAce_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_CopyAccessList_Proxy(IADsAccessControlList *This,IDispatch **ppAccessControlList);
  void __RPC_STUB IADsAccessControlList_CopyAccessList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAccessControlList_get__NewEnum_Proxy(IADsAccessControlList *This,IUnknown **retval);
  void __RPC_STUB IADsAccessControlList_get__NewEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_AccessControlList;
#ifdef __cplusplus
  class AccessControlList;
#endif

#ifndef __IADsSecurityDescriptor_INTERFACE_DEFINED__
#define __IADsSecurityDescriptor_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsSecurityDescriptor;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsSecurityDescriptor : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Revision(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Revision(__LONG32 lnRevision) = 0;
    virtual HRESULT WINAPI get_Control(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Control(__LONG32 lnControl) = 0;
    virtual HRESULT WINAPI get_Owner(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Owner(BSTR bstrOwner) = 0;
    virtual HRESULT WINAPI get_OwnerDefaulted(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_OwnerDefaulted(VARIANT_BOOL fOwnerDefaulted) = 0;
    virtual HRESULT WINAPI get_Group(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Group(BSTR bstrGroup) = 0;
    virtual HRESULT WINAPI get_GroupDefaulted(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_GroupDefaulted(VARIANT_BOOL fGroupDefaulted) = 0;
    virtual HRESULT WINAPI get_DiscretionaryAcl(IDispatch **retval) = 0;
    virtual HRESULT WINAPI put_DiscretionaryAcl(IDispatch *pDiscretionaryAcl) = 0;
    virtual HRESULT WINAPI get_DaclDefaulted(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_DaclDefaulted(VARIANT_BOOL fDaclDefaulted) = 0;
    virtual HRESULT WINAPI get_SystemAcl(IDispatch **retval) = 0;
    virtual HRESULT WINAPI put_SystemAcl(IDispatch *pSystemAcl) = 0;
    virtual HRESULT WINAPI get_SaclDefaulted(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_SaclDefaulted(VARIANT_BOOL fSaclDefaulted) = 0;
    virtual HRESULT WINAPI CopySecurityDescriptor(IDispatch **ppSecurityDescriptor) = 0;
  };
#else
  typedef struct IADsSecurityDescriptorVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsSecurityDescriptor *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsSecurityDescriptor *This);
      ULONG (WINAPI *Release)(IADsSecurityDescriptor *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsSecurityDescriptor *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsSecurityDescriptor *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsSecurityDescriptor *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsSecurityDescriptor *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Revision)(IADsSecurityDescriptor *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Revision)(IADsSecurityDescriptor *This,__LONG32 lnRevision);
      HRESULT (WINAPI *get_Control)(IADsSecurityDescriptor *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Control)(IADsSecurityDescriptor *This,__LONG32 lnControl);
      HRESULT (WINAPI *get_Owner)(IADsSecurityDescriptor *This,BSTR *retval);
      HRESULT (WINAPI *put_Owner)(IADsSecurityDescriptor *This,BSTR bstrOwner);
      HRESULT (WINAPI *get_OwnerDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_OwnerDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL fOwnerDefaulted);
      HRESULT (WINAPI *get_Group)(IADsSecurityDescriptor *This,BSTR *retval);
      HRESULT (WINAPI *put_Group)(IADsSecurityDescriptor *This,BSTR bstrGroup);
      HRESULT (WINAPI *get_GroupDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_GroupDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL fGroupDefaulted);
      HRESULT (WINAPI *get_DiscretionaryAcl)(IADsSecurityDescriptor *This,IDispatch **retval);
      HRESULT (WINAPI *put_DiscretionaryAcl)(IADsSecurityDescriptor *This,IDispatch *pDiscretionaryAcl);
      HRESULT (WINAPI *get_DaclDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_DaclDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL fDaclDefaulted);
      HRESULT (WINAPI *get_SystemAcl)(IADsSecurityDescriptor *This,IDispatch **retval);
      HRESULT (WINAPI *put_SystemAcl)(IADsSecurityDescriptor *This,IDispatch *pSystemAcl);
      HRESULT (WINAPI *get_SaclDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_SaclDefaulted)(IADsSecurityDescriptor *This,VARIANT_BOOL fSaclDefaulted);
      HRESULT (WINAPI *CopySecurityDescriptor)(IADsSecurityDescriptor *This,IDispatch **ppSecurityDescriptor);
    END_INTERFACE
  } IADsSecurityDescriptorVtbl;
  struct IADsSecurityDescriptor {
    CONST_VTBL struct IADsSecurityDescriptorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsSecurityDescriptor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsSecurityDescriptor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsSecurityDescriptor_Release(This) (This)->lpVtbl->Release(This)
#define IADsSecurityDescriptor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsSecurityDescriptor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsSecurityDescriptor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsSecurityDescriptor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsSecurityDescriptor_get_Revision(This,retval) (This)->lpVtbl->get_Revision(This,retval)
#define IADsSecurityDescriptor_put_Revision(This,lnRevision) (This)->lpVtbl->put_Revision(This,lnRevision)
#define IADsSecurityDescriptor_get_Control(This,retval) (This)->lpVtbl->get_Control(This,retval)
#define IADsSecurityDescriptor_put_Control(This,lnControl) (This)->lpVtbl->put_Control(This,lnControl)
#define IADsSecurityDescriptor_get_Owner(This,retval) (This)->lpVtbl->get_Owner(This,retval)
#define IADsSecurityDescriptor_put_Owner(This,bstrOwner) (This)->lpVtbl->put_Owner(This,bstrOwner)
#define IADsSecurityDescriptor_get_OwnerDefaulted(This,retval) (This)->lpVtbl->get_OwnerDefaulted(This,retval)
#define IADsSecurityDescriptor_put_OwnerDefaulted(This,fOwnerDefaulted) (This)->lpVtbl->put_OwnerDefaulted(This,fOwnerDefaulted)
#define IADsSecurityDescriptor_get_Group(This,retval) (This)->lpVtbl->get_Group(This,retval)
#define IADsSecurityDescriptor_put_Group(This,bstrGroup) (This)->lpVtbl->put_Group(This,bstrGroup)
#define IADsSecurityDescriptor_get_GroupDefaulted(This,retval) (This)->lpVtbl->get_GroupDefaulted(This,retval)
#define IADsSecurityDescriptor_put_GroupDefaulted(This,fGroupDefaulted) (This)->lpVtbl->put_GroupDefaulted(This,fGroupDefaulted)
#define IADsSecurityDescriptor_get_DiscretionaryAcl(This,retval) (This)->lpVtbl->get_DiscretionaryAcl(This,retval)
#define IADsSecurityDescriptor_put_DiscretionaryAcl(This,pDiscretionaryAcl) (This)->lpVtbl->put_DiscretionaryAcl(This,pDiscretionaryAcl)
#define IADsSecurityDescriptor_get_DaclDefaulted(This,retval) (This)->lpVtbl->get_DaclDefaulted(This,retval)
#define IADsSecurityDescriptor_put_DaclDefaulted(This,fDaclDefaulted) (This)->lpVtbl->put_DaclDefaulted(This,fDaclDefaulted)
#define IADsSecurityDescriptor_get_SystemAcl(This,retval) (This)->lpVtbl->get_SystemAcl(This,retval)
#define IADsSecurityDescriptor_put_SystemAcl(This,pSystemAcl) (This)->lpVtbl->put_SystemAcl(This,pSystemAcl)
#define IADsSecurityDescriptor_get_SaclDefaulted(This,retval) (This)->lpVtbl->get_SaclDefaulted(This,retval)
#define IADsSecurityDescriptor_put_SaclDefaulted(This,fSaclDefaulted) (This)->lpVtbl->put_SaclDefaulted(This,fSaclDefaulted)
#define IADsSecurityDescriptor_CopySecurityDescriptor(This,ppSecurityDescriptor) (This)->lpVtbl->CopySecurityDescriptor(This,ppSecurityDescriptor)
#endif
#endif
  HRESULT WINAPI IADsSecurityDescriptor_get_Revision_Proxy(IADsSecurityDescriptor *This,__LONG32 *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_Revision_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_Revision_Proxy(IADsSecurityDescriptor *This,__LONG32 lnRevision);
  void __RPC_STUB IADsSecurityDescriptor_put_Revision_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_Control_Proxy(IADsSecurityDescriptor *This,__LONG32 *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_Control_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_Control_Proxy(IADsSecurityDescriptor *This,__LONG32 lnControl);
  void __RPC_STUB IADsSecurityDescriptor_put_Control_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_Owner_Proxy(IADsSecurityDescriptor *This,BSTR *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_Owner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_Owner_Proxy(IADsSecurityDescriptor *This,BSTR bstrOwner);
  void __RPC_STUB IADsSecurityDescriptor_put_Owner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_OwnerDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_OwnerDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_OwnerDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL fOwnerDefaulted);
  void __RPC_STUB IADsSecurityDescriptor_put_OwnerDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_Group_Proxy(IADsSecurityDescriptor *This,BSTR *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_Group_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_Group_Proxy(IADsSecurityDescriptor *This,BSTR bstrGroup);
  void __RPC_STUB IADsSecurityDescriptor_put_Group_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_GroupDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_GroupDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_GroupDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL fGroupDefaulted);
  void __RPC_STUB IADsSecurityDescriptor_put_GroupDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_DiscretionaryAcl_Proxy(IADsSecurityDescriptor *This,IDispatch **retval);
  void __RPC_STUB IADsSecurityDescriptor_get_DiscretionaryAcl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_DiscretionaryAcl_Proxy(IADsSecurityDescriptor *This,IDispatch *pDiscretionaryAcl);
  void __RPC_STUB IADsSecurityDescriptor_put_DiscretionaryAcl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_DaclDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_DaclDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_DaclDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL fDaclDefaulted);
  void __RPC_STUB IADsSecurityDescriptor_put_DaclDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_SystemAcl_Proxy(IADsSecurityDescriptor *This,IDispatch **retval);
  void __RPC_STUB IADsSecurityDescriptor_get_SystemAcl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_SystemAcl_Proxy(IADsSecurityDescriptor *This,IDispatch *pSystemAcl);
  void __RPC_STUB IADsSecurityDescriptor_put_SystemAcl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_get_SaclDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsSecurityDescriptor_get_SaclDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_put_SaclDefaulted_Proxy(IADsSecurityDescriptor *This,VARIANT_BOOL fSaclDefaulted);
  void __RPC_STUB IADsSecurityDescriptor_put_SaclDefaulted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityDescriptor_CopySecurityDescriptor_Proxy(IADsSecurityDescriptor *This,IDispatch **ppSecurityDescriptor);
  void __RPC_STUB IADsSecurityDescriptor_CopySecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_SecurityDescriptor;
#ifdef __cplusplus
  class SecurityDescriptor;
#endif

#ifndef __IADsLargeInteger_INTERFACE_DEFINED__
#define __IADsLargeInteger_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsLargeInteger;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsLargeInteger : public IDispatch {
  public:
    virtual HRESULT WINAPI get_HighPart(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_HighPart(__LONG32 lnHighPart) = 0;
    virtual HRESULT WINAPI get_LowPart(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_LowPart(__LONG32 lnLowPart) = 0;
  };
#else
  typedef struct IADsLargeIntegerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsLargeInteger *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsLargeInteger *This);
      ULONG (WINAPI *Release)(IADsLargeInteger *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsLargeInteger *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsLargeInteger *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsLargeInteger *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsLargeInteger *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_HighPart)(IADsLargeInteger *This,__LONG32 *retval);
      HRESULT (WINAPI *put_HighPart)(IADsLargeInteger *This,__LONG32 lnHighPart);
      HRESULT (WINAPI *get_LowPart)(IADsLargeInteger *This,__LONG32 *retval);
      HRESULT (WINAPI *put_LowPart)(IADsLargeInteger *This,__LONG32 lnLowPart);
    END_INTERFACE
  } IADsLargeIntegerVtbl;
  struct IADsLargeInteger {
    CONST_VTBL struct IADsLargeIntegerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsLargeInteger_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsLargeInteger_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsLargeInteger_Release(This) (This)->lpVtbl->Release(This)
#define IADsLargeInteger_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsLargeInteger_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsLargeInteger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsLargeInteger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsLargeInteger_get_HighPart(This,retval) (This)->lpVtbl->get_HighPart(This,retval)
#define IADsLargeInteger_put_HighPart(This,lnHighPart) (This)->lpVtbl->put_HighPart(This,lnHighPart)
#define IADsLargeInteger_get_LowPart(This,retval) (This)->lpVtbl->get_LowPart(This,retval)
#define IADsLargeInteger_put_LowPart(This,lnLowPart) (This)->lpVtbl->put_LowPart(This,lnLowPart)
#endif
#endif
  HRESULT WINAPI IADsLargeInteger_get_HighPart_Proxy(IADsLargeInteger *This,__LONG32 *retval);
  void __RPC_STUB IADsLargeInteger_get_HighPart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLargeInteger_put_HighPart_Proxy(IADsLargeInteger *This,__LONG32 lnHighPart);
  void __RPC_STUB IADsLargeInteger_put_HighPart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLargeInteger_get_LowPart_Proxy(IADsLargeInteger *This,__LONG32 *retval);
  void __RPC_STUB IADsLargeInteger_get_LowPart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsLargeInteger_put_LowPart_Proxy(IADsLargeInteger *This,__LONG32 lnLowPart);
  void __RPC_STUB IADsLargeInteger_put_LowPart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_LargeInteger;
#ifdef __cplusplus
  class LargeInteger;
#endif

#ifndef __IADsNameTranslate_INTERFACE_DEFINED__
#define __IADsNameTranslate_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsNameTranslate;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsNameTranslate : public IDispatch {
  public:
    virtual HRESULT WINAPI put_ChaseReferral(__LONG32 lnChaseReferral) = 0;
    virtual HRESULT WINAPI Init(__LONG32 lnSetType,BSTR bstrADsPath) = 0;
    virtual HRESULT WINAPI InitEx(__LONG32 lnSetType,BSTR bstrADsPath,BSTR bstrUserID,BSTR bstrDomain,BSTR bstrPassword) = 0;
    virtual HRESULT WINAPI Set(__LONG32 lnSetType,BSTR bstrADsPath) = 0;
    virtual HRESULT WINAPI Get(__LONG32 lnFormatType,BSTR *pbstrADsPath) = 0;
    virtual HRESULT WINAPI SetEx(__LONG32 lnFormatType,VARIANT pvar) = 0;
    virtual HRESULT WINAPI GetEx(__LONG32 lnFormatType,VARIANT *pvar) = 0;
  };
#else
  typedef struct IADsNameTranslateVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsNameTranslate *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsNameTranslate *This);
      ULONG (WINAPI *Release)(IADsNameTranslate *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsNameTranslate *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsNameTranslate *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsNameTranslate *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsNameTranslate *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *put_ChaseReferral)(IADsNameTranslate *This,__LONG32 lnChaseReferral);
      HRESULT (WINAPI *Init)(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath);
      HRESULT (WINAPI *InitEx)(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath,BSTR bstrUserID,BSTR bstrDomain,BSTR bstrPassword);
      HRESULT (WINAPI *Set)(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath);
      HRESULT (WINAPI *Get)(IADsNameTranslate *This,__LONG32 lnFormatType,BSTR *pbstrADsPath);
      HRESULT (WINAPI *SetEx)(IADsNameTranslate *This,__LONG32 lnFormatType,VARIANT pvar);
      HRESULT (WINAPI *GetEx)(IADsNameTranslate *This,__LONG32 lnFormatType,VARIANT *pvar);
    END_INTERFACE
  } IADsNameTranslateVtbl;
  struct IADsNameTranslate {
    CONST_VTBL struct IADsNameTranslateVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsNameTranslate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsNameTranslate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsNameTranslate_Release(This) (This)->lpVtbl->Release(This)
#define IADsNameTranslate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsNameTranslate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsNameTranslate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsNameTranslate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsNameTranslate_put_ChaseReferral(This,lnChaseReferral) (This)->lpVtbl->put_ChaseReferral(This,lnChaseReferral)
#define IADsNameTranslate_Init(This,lnSetType,bstrADsPath) (This)->lpVtbl->Init(This,lnSetType,bstrADsPath)
#define IADsNameTranslate_InitEx(This,lnSetType,bstrADsPath,bstrUserID,bstrDomain,bstrPassword) (This)->lpVtbl->InitEx(This,lnSetType,bstrADsPath,bstrUserID,bstrDomain,bstrPassword)
#define IADsNameTranslate_Set(This,lnSetType,bstrADsPath) (This)->lpVtbl->Set(This,lnSetType,bstrADsPath)
#define IADsNameTranslate_Get(This,lnFormatType,pbstrADsPath) (This)->lpVtbl->Get(This,lnFormatType,pbstrADsPath)
#define IADsNameTranslate_SetEx(This,lnFormatType,pvar) (This)->lpVtbl->SetEx(This,lnFormatType,pvar)
#define IADsNameTranslate_GetEx(This,lnFormatType,pvar) (This)->lpVtbl->GetEx(This,lnFormatType,pvar)
#endif
#endif
  HRESULT WINAPI IADsNameTranslate_put_ChaseReferral_Proxy(IADsNameTranslate *This,__LONG32 lnChaseReferral);
  void __RPC_STUB IADsNameTranslate_put_ChaseReferral_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_Init_Proxy(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath);
  void __RPC_STUB IADsNameTranslate_Init_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_InitEx_Proxy(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath,BSTR bstrUserID,BSTR bstrDomain,BSTR bstrPassword);
  void __RPC_STUB IADsNameTranslate_InitEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_Set_Proxy(IADsNameTranslate *This,__LONG32 lnSetType,BSTR bstrADsPath);
  void __RPC_STUB IADsNameTranslate_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_Get_Proxy(IADsNameTranslate *This,__LONG32 lnFormatType,BSTR *pbstrADsPath);
  void __RPC_STUB IADsNameTranslate_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_SetEx_Proxy(IADsNameTranslate *This,__LONG32 lnFormatType,VARIANT pvar);
  void __RPC_STUB IADsNameTranslate_SetEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNameTranslate_GetEx_Proxy(IADsNameTranslate *This,__LONG32 lnFormatType,VARIANT *pvar);
  void __RPC_STUB IADsNameTranslate_GetEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_NameTranslate;
#ifdef __cplusplus
  class NameTranslate;
#endif

#ifndef __IADsCaseIgnoreList_INTERFACE_DEFINED__
#define __IADsCaseIgnoreList_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsCaseIgnoreList;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsCaseIgnoreList : public IDispatch {
  public:
    virtual HRESULT WINAPI get_CaseIgnoreList(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_CaseIgnoreList(VARIANT vCaseIgnoreList) = 0;
  };
#else
  typedef struct IADsCaseIgnoreListVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsCaseIgnoreList *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsCaseIgnoreList *This);
      ULONG (WINAPI *Release)(IADsCaseIgnoreList *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsCaseIgnoreList *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsCaseIgnoreList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsCaseIgnoreList *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsCaseIgnoreList *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_CaseIgnoreList)(IADsCaseIgnoreList *This,VARIANT *retval);
      HRESULT (WINAPI *put_CaseIgnoreList)(IADsCaseIgnoreList *This,VARIANT vCaseIgnoreList);
    END_INTERFACE
  } IADsCaseIgnoreListVtbl;
  struct IADsCaseIgnoreList {
    CONST_VTBL struct IADsCaseIgnoreListVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsCaseIgnoreList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsCaseIgnoreList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsCaseIgnoreList_Release(This) (This)->lpVtbl->Release(This)
#define IADsCaseIgnoreList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsCaseIgnoreList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsCaseIgnoreList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsCaseIgnoreList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsCaseIgnoreList_get_CaseIgnoreList(This,retval) (This)->lpVtbl->get_CaseIgnoreList(This,retval)
#define IADsCaseIgnoreList_put_CaseIgnoreList(This,vCaseIgnoreList) (This)->lpVtbl->put_CaseIgnoreList(This,vCaseIgnoreList)
#endif
#endif
  HRESULT WINAPI IADsCaseIgnoreList_get_CaseIgnoreList_Proxy(IADsCaseIgnoreList *This,VARIANT *retval);
  void __RPC_STUB IADsCaseIgnoreList_get_CaseIgnoreList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsCaseIgnoreList_put_CaseIgnoreList_Proxy(IADsCaseIgnoreList *This,VARIANT vCaseIgnoreList);
  void __RPC_STUB IADsCaseIgnoreList_put_CaseIgnoreList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_CaseIgnoreList;
#ifdef __cplusplus
  class CaseIgnoreList;
#endif

#ifndef __IADsFaxNumber_INTERFACE_DEFINED__
#define __IADsFaxNumber_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsFaxNumber;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsFaxNumber : public IDispatch {
  public:
    virtual HRESULT WINAPI get_TelephoneNumber(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_TelephoneNumber(BSTR bstrTelephoneNumber) = 0;
    virtual HRESULT WINAPI get_Parameters(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Parameters(VARIANT vParameters) = 0;
  };
#else
  typedef struct IADsFaxNumberVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsFaxNumber *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsFaxNumber *This);
      ULONG (WINAPI *Release)(IADsFaxNumber *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsFaxNumber *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsFaxNumber *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsFaxNumber *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsFaxNumber *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_TelephoneNumber)(IADsFaxNumber *This,BSTR *retval);
      HRESULT (WINAPI *put_TelephoneNumber)(IADsFaxNumber *This,BSTR bstrTelephoneNumber);
      HRESULT (WINAPI *get_Parameters)(IADsFaxNumber *This,VARIANT *retval);
      HRESULT (WINAPI *put_Parameters)(IADsFaxNumber *This,VARIANT vParameters);
    END_INTERFACE
  } IADsFaxNumberVtbl;
  struct IADsFaxNumber {
    CONST_VTBL struct IADsFaxNumberVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsFaxNumber_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsFaxNumber_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsFaxNumber_Release(This) (This)->lpVtbl->Release(This)
#define IADsFaxNumber_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsFaxNumber_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsFaxNumber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsFaxNumber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsFaxNumber_get_TelephoneNumber(This,retval) (This)->lpVtbl->get_TelephoneNumber(This,retval)
#define IADsFaxNumber_put_TelephoneNumber(This,bstrTelephoneNumber) (This)->lpVtbl->put_TelephoneNumber(This,bstrTelephoneNumber)
#define IADsFaxNumber_get_Parameters(This,retval) (This)->lpVtbl->get_Parameters(This,retval)
#define IADsFaxNumber_put_Parameters(This,vParameters) (This)->lpVtbl->put_Parameters(This,vParameters)
#endif
#endif
  HRESULT WINAPI IADsFaxNumber_get_TelephoneNumber_Proxy(IADsFaxNumber *This,BSTR *retval);
  void __RPC_STUB IADsFaxNumber_get_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFaxNumber_put_TelephoneNumber_Proxy(IADsFaxNumber *This,BSTR bstrTelephoneNumber);
  void __RPC_STUB IADsFaxNumber_put_TelephoneNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFaxNumber_get_Parameters_Proxy(IADsFaxNumber *This,VARIANT *retval);
  void __RPC_STUB IADsFaxNumber_get_Parameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsFaxNumber_put_Parameters_Proxy(IADsFaxNumber *This,VARIANT vParameters);
  void __RPC_STUB IADsFaxNumber_put_Parameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_FaxNumber;
#ifdef __cplusplus
  class FaxNumber;
#endif

#ifndef __IADsNetAddress_INTERFACE_DEFINED__
#define __IADsNetAddress_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsNetAddress;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsNetAddress : public IDispatch {
  public:
    virtual HRESULT WINAPI get_AddressType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_AddressType(__LONG32 lnAddressType) = 0;
    virtual HRESULT WINAPI get_Address(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Address(VARIANT vAddress) = 0;
  };
#else
  typedef struct IADsNetAddressVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsNetAddress *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsNetAddress *This);
      ULONG (WINAPI *Release)(IADsNetAddress *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsNetAddress *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsNetAddress *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsNetAddress *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsNetAddress *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_AddressType)(IADsNetAddress *This,__LONG32 *retval);
      HRESULT (WINAPI *put_AddressType)(IADsNetAddress *This,__LONG32 lnAddressType);
      HRESULT (WINAPI *get_Address)(IADsNetAddress *This,VARIANT *retval);
      HRESULT (WINAPI *put_Address)(IADsNetAddress *This,VARIANT vAddress);
    END_INTERFACE
  } IADsNetAddressVtbl;
  struct IADsNetAddress {
    CONST_VTBL struct IADsNetAddressVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsNetAddress_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsNetAddress_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsNetAddress_Release(This) (This)->lpVtbl->Release(This)
#define IADsNetAddress_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsNetAddress_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsNetAddress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsNetAddress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsNetAddress_get_AddressType(This,retval) (This)->lpVtbl->get_AddressType(This,retval)
#define IADsNetAddress_put_AddressType(This,lnAddressType) (This)->lpVtbl->put_AddressType(This,lnAddressType)
#define IADsNetAddress_get_Address(This,retval) (This)->lpVtbl->get_Address(This,retval)
#define IADsNetAddress_put_Address(This,vAddress) (This)->lpVtbl->put_Address(This,vAddress)
#endif
#endif
  HRESULT WINAPI IADsNetAddress_get_AddressType_Proxy(IADsNetAddress *This,__LONG32 *retval);
  void __RPC_STUB IADsNetAddress_get_AddressType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNetAddress_put_AddressType_Proxy(IADsNetAddress *This,__LONG32 lnAddressType);
  void __RPC_STUB IADsNetAddress_put_AddressType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNetAddress_get_Address_Proxy(IADsNetAddress *This,VARIANT *retval);
  void __RPC_STUB IADsNetAddress_get_Address_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsNetAddress_put_Address_Proxy(IADsNetAddress *This,VARIANT vAddress);
  void __RPC_STUB IADsNetAddress_put_Address_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_NetAddress;
#ifdef __cplusplus
  class NetAddress;
#endif

#ifndef __IADsOctetList_INTERFACE_DEFINED__
#define __IADsOctetList_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsOctetList;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsOctetList : public IDispatch {
  public:
    virtual HRESULT WINAPI get_OctetList(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_OctetList(VARIANT vOctetList) = 0;
  };
#else
  typedef struct IADsOctetListVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsOctetList *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsOctetList *This);
      ULONG (WINAPI *Release)(IADsOctetList *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsOctetList *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsOctetList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsOctetList *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsOctetList *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_OctetList)(IADsOctetList *This,VARIANT *retval);
      HRESULT (WINAPI *put_OctetList)(IADsOctetList *This,VARIANT vOctetList);
    END_INTERFACE
  } IADsOctetListVtbl;
  struct IADsOctetList {
    CONST_VTBL struct IADsOctetListVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsOctetList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsOctetList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsOctetList_Release(This) (This)->lpVtbl->Release(This)
#define IADsOctetList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsOctetList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsOctetList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsOctetList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsOctetList_get_OctetList(This,retval) (This)->lpVtbl->get_OctetList(This,retval)
#define IADsOctetList_put_OctetList(This,vOctetList) (This)->lpVtbl->put_OctetList(This,vOctetList)
#endif
#endif
  HRESULT WINAPI IADsOctetList_get_OctetList_Proxy(IADsOctetList *This,VARIANT *retval);
  void __RPC_STUB IADsOctetList_get_OctetList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsOctetList_put_OctetList_Proxy(IADsOctetList *This,VARIANT vOctetList);
  void __RPC_STUB IADsOctetList_put_OctetList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_OctetList;
#ifdef __cplusplus
  class OctetList;
#endif

#ifndef __IADsEmail_INTERFACE_DEFINED__
#define __IADsEmail_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsEmail;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsEmail : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Type(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Type(__LONG32 lnType) = 0;
    virtual HRESULT WINAPI get_Address(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Address(BSTR bstrAddress) = 0;
  };
#else
  typedef struct IADsEmailVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsEmail *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsEmail *This);
      ULONG (WINAPI *Release)(IADsEmail *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsEmail *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsEmail *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsEmail *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsEmail *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Type)(IADsEmail *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Type)(IADsEmail *This,__LONG32 lnType);
      HRESULT (WINAPI *get_Address)(IADsEmail *This,BSTR *retval);
      HRESULT (WINAPI *put_Address)(IADsEmail *This,BSTR bstrAddress);
    END_INTERFACE
  } IADsEmailVtbl;
  struct IADsEmail {
    CONST_VTBL struct IADsEmailVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsEmail_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsEmail_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsEmail_Release(This) (This)->lpVtbl->Release(This)
#define IADsEmail_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsEmail_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsEmail_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsEmail_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsEmail_get_Type(This,retval) (This)->lpVtbl->get_Type(This,retval)
#define IADsEmail_put_Type(This,lnType) (This)->lpVtbl->put_Type(This,lnType)
#define IADsEmail_get_Address(This,retval) (This)->lpVtbl->get_Address(This,retval)
#define IADsEmail_put_Address(This,bstrAddress) (This)->lpVtbl->put_Address(This,bstrAddress)
#endif
#endif
  HRESULT WINAPI IADsEmail_get_Type_Proxy(IADsEmail *This,__LONG32 *retval);
  void __RPC_STUB IADsEmail_get_Type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsEmail_put_Type_Proxy(IADsEmail *This,__LONG32 lnType);
  void __RPC_STUB IADsEmail_put_Type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsEmail_get_Address_Proxy(IADsEmail *This,BSTR *retval);
  void __RPC_STUB IADsEmail_get_Address_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsEmail_put_Address_Proxy(IADsEmail *This,BSTR bstrAddress);
  void __RPC_STUB IADsEmail_put_Address_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_Email;
#ifdef __cplusplus
  class Email;
#endif

#ifndef __IADsPath_INTERFACE_DEFINED__
#define __IADsPath_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPath;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPath : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Type(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Type(__LONG32 lnType) = 0;
    virtual HRESULT WINAPI get_VolumeName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_VolumeName(BSTR bstrVolumeName) = 0;
    virtual HRESULT WINAPI get_Path(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Path(BSTR bstrPath) = 0;
  };
#else
  typedef struct IADsPathVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPath *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPath *This);
      ULONG (WINAPI *Release)(IADsPath *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPath *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPath *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPath *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPath *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Type)(IADsPath *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Type)(IADsPath *This,__LONG32 lnType);
      HRESULT (WINAPI *get_VolumeName)(IADsPath *This,BSTR *retval);
      HRESULT (WINAPI *put_VolumeName)(IADsPath *This,BSTR bstrVolumeName);
      HRESULT (WINAPI *get_Path)(IADsPath *This,BSTR *retval);
      HRESULT (WINAPI *put_Path)(IADsPath *This,BSTR bstrPath);
    END_INTERFACE
  } IADsPathVtbl;
  struct IADsPath {
    CONST_VTBL struct IADsPathVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPath_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPath_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPath_Release(This) (This)->lpVtbl->Release(This)
#define IADsPath_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPath_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPath_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPath_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPath_get_Type(This,retval) (This)->lpVtbl->get_Type(This,retval)
#define IADsPath_put_Type(This,lnType) (This)->lpVtbl->put_Type(This,lnType)
#define IADsPath_get_VolumeName(This,retval) (This)->lpVtbl->get_VolumeName(This,retval)
#define IADsPath_put_VolumeName(This,bstrVolumeName) (This)->lpVtbl->put_VolumeName(This,bstrVolumeName)
#define IADsPath_get_Path(This,retval) (This)->lpVtbl->get_Path(This,retval)
#define IADsPath_put_Path(This,bstrPath) (This)->lpVtbl->put_Path(This,bstrPath)
#endif
#endif
  HRESULT WINAPI IADsPath_get_Type_Proxy(IADsPath *This,__LONG32 *retval);
  void __RPC_STUB IADsPath_get_Type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPath_put_Type_Proxy(IADsPath *This,__LONG32 lnType);
  void __RPC_STUB IADsPath_put_Type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPath_get_VolumeName_Proxy(IADsPath *This,BSTR *retval);
  void __RPC_STUB IADsPath_get_VolumeName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPath_put_VolumeName_Proxy(IADsPath *This,BSTR bstrVolumeName);
  void __RPC_STUB IADsPath_put_VolumeName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPath_get_Path_Proxy(IADsPath *This,BSTR *retval);
  void __RPC_STUB IADsPath_get_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPath_put_Path_Proxy(IADsPath *This,BSTR bstrPath);
  void __RPC_STUB IADsPath_put_Path_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_Path;
#ifdef __cplusplus
  class Path;
#endif

#ifndef __IADsReplicaPointer_INTERFACE_DEFINED__
#define __IADsReplicaPointer_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsReplicaPointer;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsReplicaPointer : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ServerName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ServerName(BSTR bstrServerName) = 0;
    virtual HRESULT WINAPI get_ReplicaType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ReplicaType(__LONG32 lnReplicaType) = 0;
    virtual HRESULT WINAPI get_ReplicaNumber(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_ReplicaNumber(__LONG32 lnReplicaNumber) = 0;
    virtual HRESULT WINAPI get_Count(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Count(__LONG32 lnCount) = 0;
    virtual HRESULT WINAPI get_ReplicaAddressHints(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_ReplicaAddressHints(VARIANT vReplicaAddressHints) = 0;
  };
#else
  typedef struct IADsReplicaPointerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsReplicaPointer *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsReplicaPointer *This);
      ULONG (WINAPI *Release)(IADsReplicaPointer *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsReplicaPointer *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsReplicaPointer *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsReplicaPointer *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsReplicaPointer *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ServerName)(IADsReplicaPointer *This,BSTR *retval);
      HRESULT (WINAPI *put_ServerName)(IADsReplicaPointer *This,BSTR bstrServerName);
      HRESULT (WINAPI *get_ReplicaType)(IADsReplicaPointer *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ReplicaType)(IADsReplicaPointer *This,__LONG32 lnReplicaType);
      HRESULT (WINAPI *get_ReplicaNumber)(IADsReplicaPointer *This,__LONG32 *retval);
      HRESULT (WINAPI *put_ReplicaNumber)(IADsReplicaPointer *This,__LONG32 lnReplicaNumber);
      HRESULT (WINAPI *get_Count)(IADsReplicaPointer *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Count)(IADsReplicaPointer *This,__LONG32 lnCount);
      HRESULT (WINAPI *get_ReplicaAddressHints)(IADsReplicaPointer *This,VARIANT *retval);
      HRESULT (WINAPI *put_ReplicaAddressHints)(IADsReplicaPointer *This,VARIANT vReplicaAddressHints);
    END_INTERFACE
  } IADsReplicaPointerVtbl;
  struct IADsReplicaPointer {
    CONST_VTBL struct IADsReplicaPointerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsReplicaPointer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsReplicaPointer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsReplicaPointer_Release(This) (This)->lpVtbl->Release(This)
#define IADsReplicaPointer_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsReplicaPointer_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsReplicaPointer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsReplicaPointer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsReplicaPointer_get_ServerName(This,retval) (This)->lpVtbl->get_ServerName(This,retval)
#define IADsReplicaPointer_put_ServerName(This,bstrServerName) (This)->lpVtbl->put_ServerName(This,bstrServerName)
#define IADsReplicaPointer_get_ReplicaType(This,retval) (This)->lpVtbl->get_ReplicaType(This,retval)
#define IADsReplicaPointer_put_ReplicaType(This,lnReplicaType) (This)->lpVtbl->put_ReplicaType(This,lnReplicaType)
#define IADsReplicaPointer_get_ReplicaNumber(This,retval) (This)->lpVtbl->get_ReplicaNumber(This,retval)
#define IADsReplicaPointer_put_ReplicaNumber(This,lnReplicaNumber) (This)->lpVtbl->put_ReplicaNumber(This,lnReplicaNumber)
#define IADsReplicaPointer_get_Count(This,retval) (This)->lpVtbl->get_Count(This,retval)
#define IADsReplicaPointer_put_Count(This,lnCount) (This)->lpVtbl->put_Count(This,lnCount)
#define IADsReplicaPointer_get_ReplicaAddressHints(This,retval) (This)->lpVtbl->get_ReplicaAddressHints(This,retval)
#define IADsReplicaPointer_put_ReplicaAddressHints(This,vReplicaAddressHints) (This)->lpVtbl->put_ReplicaAddressHints(This,vReplicaAddressHints)
#endif
#endif
  HRESULT WINAPI IADsReplicaPointer_get_ServerName_Proxy(IADsReplicaPointer *This,BSTR *retval);
  void __RPC_STUB IADsReplicaPointer_get_ServerName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_put_ServerName_Proxy(IADsReplicaPointer *This,BSTR bstrServerName);
  void __RPC_STUB IADsReplicaPointer_put_ServerName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_get_ReplicaType_Proxy(IADsReplicaPointer *This,__LONG32 *retval);
  void __RPC_STUB IADsReplicaPointer_get_ReplicaType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_put_ReplicaType_Proxy(IADsReplicaPointer *This,__LONG32 lnReplicaType);
  void __RPC_STUB IADsReplicaPointer_put_ReplicaType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_get_ReplicaNumber_Proxy(IADsReplicaPointer *This,__LONG32 *retval);
  void __RPC_STUB IADsReplicaPointer_get_ReplicaNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_put_ReplicaNumber_Proxy(IADsReplicaPointer *This,__LONG32 lnReplicaNumber);
  void __RPC_STUB IADsReplicaPointer_put_ReplicaNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_get_Count_Proxy(IADsReplicaPointer *This,__LONG32 *retval);
  void __RPC_STUB IADsReplicaPointer_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_put_Count_Proxy(IADsReplicaPointer *This,__LONG32 lnCount);
  void __RPC_STUB IADsReplicaPointer_put_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_get_ReplicaAddressHints_Proxy(IADsReplicaPointer *This,VARIANT *retval);
  void __RPC_STUB IADsReplicaPointer_get_ReplicaAddressHints_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsReplicaPointer_put_ReplicaAddressHints_Proxy(IADsReplicaPointer *This,VARIANT vReplicaAddressHints);
  void __RPC_STUB IADsReplicaPointer_put_ReplicaAddressHints_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_ReplicaPointer;
#ifdef __cplusplus
  class ReplicaPointer;
#endif

#ifndef __IADsAcl_INTERFACE_DEFINED__
#define __IADsAcl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsAcl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsAcl : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ProtectedAttrName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ProtectedAttrName(BSTR bstrProtectedAttrName) = 0;
    virtual HRESULT WINAPI get_SubjectName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_SubjectName(BSTR bstrSubjectName) = 0;
    virtual HRESULT WINAPI get_Privileges(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Privileges(__LONG32 lnPrivileges) = 0;
    virtual HRESULT WINAPI CopyAcl(IDispatch **ppAcl) = 0;
  };
#else
  typedef struct IADsAclVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsAcl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsAcl *This);
      ULONG (WINAPI *Release)(IADsAcl *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsAcl *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsAcl *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsAcl *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsAcl *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ProtectedAttrName)(IADsAcl *This,BSTR *retval);
      HRESULT (WINAPI *put_ProtectedAttrName)(IADsAcl *This,BSTR bstrProtectedAttrName);
      HRESULT (WINAPI *get_SubjectName)(IADsAcl *This,BSTR *retval);
      HRESULT (WINAPI *put_SubjectName)(IADsAcl *This,BSTR bstrSubjectName);
      HRESULT (WINAPI *get_Privileges)(IADsAcl *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Privileges)(IADsAcl *This,__LONG32 lnPrivileges);
      HRESULT (WINAPI *CopyAcl)(IADsAcl *This,IDispatch **ppAcl);
    END_INTERFACE
  } IADsAclVtbl;
  struct IADsAcl {
    CONST_VTBL struct IADsAclVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsAcl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsAcl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsAcl_Release(This) (This)->lpVtbl->Release(This)
#define IADsAcl_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsAcl_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsAcl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsAcl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsAcl_get_ProtectedAttrName(This,retval) (This)->lpVtbl->get_ProtectedAttrName(This,retval)
#define IADsAcl_put_ProtectedAttrName(This,bstrProtectedAttrName) (This)->lpVtbl->put_ProtectedAttrName(This,bstrProtectedAttrName)
#define IADsAcl_get_SubjectName(This,retval) (This)->lpVtbl->get_SubjectName(This,retval)
#define IADsAcl_put_SubjectName(This,bstrSubjectName) (This)->lpVtbl->put_SubjectName(This,bstrSubjectName)
#define IADsAcl_get_Privileges(This,retval) (This)->lpVtbl->get_Privileges(This,retval)
#define IADsAcl_put_Privileges(This,lnPrivileges) (This)->lpVtbl->put_Privileges(This,lnPrivileges)
#define IADsAcl_CopyAcl(This,ppAcl) (This)->lpVtbl->CopyAcl(This,ppAcl)
#endif
#endif
  HRESULT WINAPI IADsAcl_get_ProtectedAttrName_Proxy(IADsAcl *This,BSTR *retval);
  void __RPC_STUB IADsAcl_get_ProtectedAttrName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_put_ProtectedAttrName_Proxy(IADsAcl *This,BSTR bstrProtectedAttrName);
  void __RPC_STUB IADsAcl_put_ProtectedAttrName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_get_SubjectName_Proxy(IADsAcl *This,BSTR *retval);
  void __RPC_STUB IADsAcl_get_SubjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_put_SubjectName_Proxy(IADsAcl *This,BSTR bstrSubjectName);
  void __RPC_STUB IADsAcl_put_SubjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_get_Privileges_Proxy(IADsAcl *This,__LONG32 *retval);
  void __RPC_STUB IADsAcl_get_Privileges_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_put_Privileges_Proxy(IADsAcl *This,__LONG32 lnPrivileges);
  void __RPC_STUB IADsAcl_put_Privileges_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsAcl_CopyAcl_Proxy(IADsAcl *This,IDispatch **ppAcl);
  void __RPC_STUB IADsAcl_CopyAcl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsTimestamp_INTERFACE_DEFINED__
#define __IADsTimestamp_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsTimestamp;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsTimestamp : public IDispatch {
  public:
    virtual HRESULT WINAPI get_WholeSeconds(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_WholeSeconds(__LONG32 lnWholeSeconds) = 0;
    virtual HRESULT WINAPI get_EventID(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_EventID(__LONG32 lnEventID) = 0;
  };
#else
  typedef struct IADsTimestampVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsTimestamp *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsTimestamp *This);
      ULONG (WINAPI *Release)(IADsTimestamp *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsTimestamp *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsTimestamp *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsTimestamp *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsTimestamp *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_WholeSeconds)(IADsTimestamp *This,__LONG32 *retval);
      HRESULT (WINAPI *put_WholeSeconds)(IADsTimestamp *This,__LONG32 lnWholeSeconds);
      HRESULT (WINAPI *get_EventID)(IADsTimestamp *This,__LONG32 *retval);
      HRESULT (WINAPI *put_EventID)(IADsTimestamp *This,__LONG32 lnEventID);
    END_INTERFACE
  } IADsTimestampVtbl;
  struct IADsTimestamp {
    CONST_VTBL struct IADsTimestampVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsTimestamp_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsTimestamp_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsTimestamp_Release(This) (This)->lpVtbl->Release(This)
#define IADsTimestamp_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsTimestamp_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsTimestamp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsTimestamp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsTimestamp_get_WholeSeconds(This,retval) (This)->lpVtbl->get_WholeSeconds(This,retval)
#define IADsTimestamp_put_WholeSeconds(This,lnWholeSeconds) (This)->lpVtbl->put_WholeSeconds(This,lnWholeSeconds)
#define IADsTimestamp_get_EventID(This,retval) (This)->lpVtbl->get_EventID(This,retval)
#define IADsTimestamp_put_EventID(This,lnEventID) (This)->lpVtbl->put_EventID(This,lnEventID)
#endif
#endif
  HRESULT WINAPI IADsTimestamp_get_WholeSeconds_Proxy(IADsTimestamp *This,__LONG32 *retval);
  void __RPC_STUB IADsTimestamp_get_WholeSeconds_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTimestamp_put_WholeSeconds_Proxy(IADsTimestamp *This,__LONG32 lnWholeSeconds);
  void __RPC_STUB IADsTimestamp_put_WholeSeconds_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTimestamp_get_EventID_Proxy(IADsTimestamp *This,__LONG32 *retval);
  void __RPC_STUB IADsTimestamp_get_EventID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTimestamp_put_EventID_Proxy(IADsTimestamp *This,__LONG32 lnEventID);
  void __RPC_STUB IADsTimestamp_put_EventID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_Timestamp;
#ifdef __cplusplus
  class Timestamp;
#endif

#ifndef __IADsPostalAddress_INTERFACE_DEFINED__
#define __IADsPostalAddress_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPostalAddress;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPostalAddress : public IDispatch {
  public:
    virtual HRESULT WINAPI get_PostalAddress(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_PostalAddress(VARIANT vPostalAddress) = 0;
  };
#else
  typedef struct IADsPostalAddressVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPostalAddress *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPostalAddress *This);
      ULONG (WINAPI *Release)(IADsPostalAddress *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPostalAddress *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPostalAddress *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPostalAddress *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPostalAddress *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_PostalAddress)(IADsPostalAddress *This,VARIANT *retval);
      HRESULT (WINAPI *put_PostalAddress)(IADsPostalAddress *This,VARIANT vPostalAddress);
    END_INTERFACE
  } IADsPostalAddressVtbl;
  struct IADsPostalAddress {
    CONST_VTBL struct IADsPostalAddressVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPostalAddress_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPostalAddress_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPostalAddress_Release(This) (This)->lpVtbl->Release(This)
#define IADsPostalAddress_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPostalAddress_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPostalAddress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPostalAddress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPostalAddress_get_PostalAddress(This,retval) (This)->lpVtbl->get_PostalAddress(This,retval)
#define IADsPostalAddress_put_PostalAddress(This,vPostalAddress) (This)->lpVtbl->put_PostalAddress(This,vPostalAddress)
#endif
#endif
  HRESULT WINAPI IADsPostalAddress_get_PostalAddress_Proxy(IADsPostalAddress *This,VARIANT *retval);
  void __RPC_STUB IADsPostalAddress_get_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPostalAddress_put_PostalAddress_Proxy(IADsPostalAddress *This,VARIANT vPostalAddress);
  void __RPC_STUB IADsPostalAddress_put_PostalAddress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_PostalAddress;
#ifdef __cplusplus
  class PostalAddress;
#endif

#ifndef __IADsBackLink_INTERFACE_DEFINED__
#define __IADsBackLink_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsBackLink;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsBackLink : public IDispatch {
  public:
    virtual HRESULT WINAPI get_RemoteID(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_RemoteID(__LONG32 lnRemoteID) = 0;
    virtual HRESULT WINAPI get_ObjectName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ObjectName(BSTR bstrObjectName) = 0;
  };
#else
  typedef struct IADsBackLinkVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsBackLink *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsBackLink *This);
      ULONG (WINAPI *Release)(IADsBackLink *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsBackLink *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsBackLink *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsBackLink *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsBackLink *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_RemoteID)(IADsBackLink *This,__LONG32 *retval);
      HRESULT (WINAPI *put_RemoteID)(IADsBackLink *This,__LONG32 lnRemoteID);
      HRESULT (WINAPI *get_ObjectName)(IADsBackLink *This,BSTR *retval);
      HRESULT (WINAPI *put_ObjectName)(IADsBackLink *This,BSTR bstrObjectName);
    END_INTERFACE
  } IADsBackLinkVtbl;
  struct IADsBackLink {
    CONST_VTBL struct IADsBackLinkVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsBackLink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsBackLink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsBackLink_Release(This) (This)->lpVtbl->Release(This)
#define IADsBackLink_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsBackLink_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsBackLink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsBackLink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsBackLink_get_RemoteID(This,retval) (This)->lpVtbl->get_RemoteID(This,retval)
#define IADsBackLink_put_RemoteID(This,lnRemoteID) (This)->lpVtbl->put_RemoteID(This,lnRemoteID)
#define IADsBackLink_get_ObjectName(This,retval) (This)->lpVtbl->get_ObjectName(This,retval)
#define IADsBackLink_put_ObjectName(This,bstrObjectName) (This)->lpVtbl->put_ObjectName(This,bstrObjectName)
#endif
#endif
  HRESULT WINAPI IADsBackLink_get_RemoteID_Proxy(IADsBackLink *This,__LONG32 *retval);
  void __RPC_STUB IADsBackLink_get_RemoteID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsBackLink_put_RemoteID_Proxy(IADsBackLink *This,__LONG32 lnRemoteID);
  void __RPC_STUB IADsBackLink_put_RemoteID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsBackLink_get_ObjectName_Proxy(IADsBackLink *This,BSTR *retval);
  void __RPC_STUB IADsBackLink_get_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsBackLink_put_ObjectName_Proxy(IADsBackLink *This,BSTR bstrObjectName);
  void __RPC_STUB IADsBackLink_put_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_BackLink;
#ifdef __cplusplus
  class BackLink;
#endif

#ifndef __IADsTypedName_INTERFACE_DEFINED__
#define __IADsTypedName_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsTypedName;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsTypedName : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ObjectName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ObjectName(BSTR bstrObjectName) = 0;
    virtual HRESULT WINAPI get_Level(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Level(__LONG32 lnLevel) = 0;
    virtual HRESULT WINAPI get_Interval(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Interval(__LONG32 lnInterval) = 0;
  };
#else
  typedef struct IADsTypedNameVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsTypedName *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsTypedName *This);
      ULONG (WINAPI *Release)(IADsTypedName *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsTypedName *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsTypedName *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsTypedName *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsTypedName *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ObjectName)(IADsTypedName *This,BSTR *retval);
      HRESULT (WINAPI *put_ObjectName)(IADsTypedName *This,BSTR bstrObjectName);
      HRESULT (WINAPI *get_Level)(IADsTypedName *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Level)(IADsTypedName *This,__LONG32 lnLevel);
      HRESULT (WINAPI *get_Interval)(IADsTypedName *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Interval)(IADsTypedName *This,__LONG32 lnInterval);
    END_INTERFACE
  } IADsTypedNameVtbl;
  struct IADsTypedName {
    CONST_VTBL struct IADsTypedNameVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsTypedName_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsTypedName_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsTypedName_Release(This) (This)->lpVtbl->Release(This)
#define IADsTypedName_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsTypedName_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsTypedName_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsTypedName_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsTypedName_get_ObjectName(This,retval) (This)->lpVtbl->get_ObjectName(This,retval)
#define IADsTypedName_put_ObjectName(This,bstrObjectName) (This)->lpVtbl->put_ObjectName(This,bstrObjectName)
#define IADsTypedName_get_Level(This,retval) (This)->lpVtbl->get_Level(This,retval)
#define IADsTypedName_put_Level(This,lnLevel) (This)->lpVtbl->put_Level(This,lnLevel)
#define IADsTypedName_get_Interval(This,retval) (This)->lpVtbl->get_Interval(This,retval)
#define IADsTypedName_put_Interval(This,lnInterval) (This)->lpVtbl->put_Interval(This,lnInterval)
#endif
#endif
  HRESULT WINAPI IADsTypedName_get_ObjectName_Proxy(IADsTypedName *This,BSTR *retval);
  void __RPC_STUB IADsTypedName_get_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTypedName_put_ObjectName_Proxy(IADsTypedName *This,BSTR bstrObjectName);
  void __RPC_STUB IADsTypedName_put_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTypedName_get_Level_Proxy(IADsTypedName *This,__LONG32 *retval);
  void __RPC_STUB IADsTypedName_get_Level_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTypedName_put_Level_Proxy(IADsTypedName *This,__LONG32 lnLevel);
  void __RPC_STUB IADsTypedName_put_Level_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTypedName_get_Interval_Proxy(IADsTypedName *This,__LONG32 *retval);
  void __RPC_STUB IADsTypedName_get_Interval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsTypedName_put_Interval_Proxy(IADsTypedName *This,__LONG32 lnInterval);
  void __RPC_STUB IADsTypedName_put_Interval_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_TypedName;
#ifdef __cplusplus
  class TypedName;
#endif

#ifndef __IADsHold_INTERFACE_DEFINED__
#define __IADsHold_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsHold;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsHold : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ObjectName(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_ObjectName(BSTR bstrObjectName) = 0;
    virtual HRESULT WINAPI get_Amount(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_Amount(__LONG32 lnAmount) = 0;
  };
#else
  typedef struct IADsHoldVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsHold *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsHold *This);
      ULONG (WINAPI *Release)(IADsHold *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsHold *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsHold *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsHold *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsHold *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ObjectName)(IADsHold *This,BSTR *retval);
      HRESULT (WINAPI *put_ObjectName)(IADsHold *This,BSTR bstrObjectName);
      HRESULT (WINAPI *get_Amount)(IADsHold *This,__LONG32 *retval);
      HRESULT (WINAPI *put_Amount)(IADsHold *This,__LONG32 lnAmount);
    END_INTERFACE
  } IADsHoldVtbl;
  struct IADsHold {
    CONST_VTBL struct IADsHoldVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsHold_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsHold_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsHold_Release(This) (This)->lpVtbl->Release(This)
#define IADsHold_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsHold_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsHold_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsHold_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsHold_get_ObjectName(This,retval) (This)->lpVtbl->get_ObjectName(This,retval)
#define IADsHold_put_ObjectName(This,bstrObjectName) (This)->lpVtbl->put_ObjectName(This,bstrObjectName)
#define IADsHold_get_Amount(This,retval) (This)->lpVtbl->get_Amount(This,retval)
#define IADsHold_put_Amount(This,lnAmount) (This)->lpVtbl->put_Amount(This,lnAmount)
#endif
#endif
  HRESULT WINAPI IADsHold_get_ObjectName_Proxy(IADsHold *This,BSTR *retval);
  void __RPC_STUB IADsHold_get_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsHold_put_ObjectName_Proxy(IADsHold *This,BSTR bstrObjectName);
  void __RPC_STUB IADsHold_put_ObjectName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsHold_get_Amount_Proxy(IADsHold *This,__LONG32 *retval);
  void __RPC_STUB IADsHold_get_Amount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsHold_put_Amount_Proxy(IADsHold *This,__LONG32 lnAmount);
  void __RPC_STUB IADsHold_put_Amount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_Hold;
#ifdef __cplusplus
  class Hold;
#endif

#ifndef __IADsObjectOptions_INTERFACE_DEFINED__
#define __IADsObjectOptions_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsObjectOptions;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsObjectOptions : public IDispatch {
  public:
    virtual HRESULT WINAPI GetOption(__LONG32 lnOption,VARIANT *pvValue) = 0;
    virtual HRESULT WINAPI SetOption(__LONG32 lnOption,VARIANT vValue) = 0;
  };
#else
  typedef struct IADsObjectOptionsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsObjectOptions *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsObjectOptions *This);
      ULONG (WINAPI *Release)(IADsObjectOptions *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsObjectOptions *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsObjectOptions *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsObjectOptions *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsObjectOptions *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *GetOption)(IADsObjectOptions *This,__LONG32 lnOption,VARIANT *pvValue);
      HRESULT (WINAPI *SetOption)(IADsObjectOptions *This,__LONG32 lnOption,VARIANT vValue);
    END_INTERFACE
  } IADsObjectOptionsVtbl;
  struct IADsObjectOptions {
    CONST_VTBL struct IADsObjectOptionsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsObjectOptions_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsObjectOptions_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsObjectOptions_Release(This) (This)->lpVtbl->Release(This)
#define IADsObjectOptions_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsObjectOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsObjectOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsObjectOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsObjectOptions_GetOption(This,lnOption,pvValue) (This)->lpVtbl->GetOption(This,lnOption,pvValue)
#define IADsObjectOptions_SetOption(This,lnOption,vValue) (This)->lpVtbl->SetOption(This,lnOption,vValue)
#endif
#endif
  HRESULT WINAPI IADsObjectOptions_GetOption_Proxy(IADsObjectOptions *This,__LONG32 lnOption,VARIANT *pvValue);
  void __RPC_STUB IADsObjectOptions_GetOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsObjectOptions_SetOption_Proxy(IADsObjectOptions *This,__LONG32 lnOption,VARIANT vValue);
  void __RPC_STUB IADsObjectOptions_SetOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IADsPathname_INTERFACE_DEFINED__
#define __IADsPathname_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsPathname;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsPathname : public IDispatch {
  public:
    virtual HRESULT WINAPI Set(BSTR bstrADsPath,__LONG32 lnSetType) = 0;
    virtual HRESULT WINAPI SetDisplayType(__LONG32 lnDisplayType) = 0;
    virtual HRESULT WINAPI Retrieve(__LONG32 lnFormatType,BSTR *pbstrADsPath) = 0;
    virtual HRESULT WINAPI GetNumElements(__LONG32 *plnNumPathElements) = 0;
    virtual HRESULT WINAPI GetElement(__LONG32 lnElementIndex,BSTR *pbstrElement) = 0;
    virtual HRESULT WINAPI AddLeafElement(BSTR bstrLeafElement) = 0;
    virtual HRESULT WINAPI RemoveLeafElement(void) = 0;
    virtual HRESULT WINAPI CopyPath(IDispatch **ppAdsPath) = 0;
    virtual HRESULT WINAPI GetEscapedElement(__LONG32 lnReserved,BSTR bstrInStr,BSTR *pbstrOutStr) = 0;
    virtual HRESULT WINAPI get_EscapedMode(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_EscapedMode(__LONG32 lnEscapedMode) = 0;
  };
#else
  typedef struct IADsPathnameVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsPathname *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsPathname *This);
      ULONG (WINAPI *Release)(IADsPathname *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsPathname *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsPathname *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsPathname *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsPathname *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *Set)(IADsPathname *This,BSTR bstrADsPath,__LONG32 lnSetType);
      HRESULT (WINAPI *SetDisplayType)(IADsPathname *This,__LONG32 lnDisplayType);
      HRESULT (WINAPI *Retrieve)(IADsPathname *This,__LONG32 lnFormatType,BSTR *pbstrADsPath);
      HRESULT (WINAPI *GetNumElements)(IADsPathname *This,__LONG32 *plnNumPathElements);
      HRESULT (WINAPI *GetElement)(IADsPathname *This,__LONG32 lnElementIndex,BSTR *pbstrElement);
      HRESULT (WINAPI *AddLeafElement)(IADsPathname *This,BSTR bstrLeafElement);
      HRESULT (WINAPI *RemoveLeafElement)(IADsPathname *This);
      HRESULT (WINAPI *CopyPath)(IADsPathname *This,IDispatch **ppAdsPath);
      HRESULT (WINAPI *GetEscapedElement)(IADsPathname *This,__LONG32 lnReserved,BSTR bstrInStr,BSTR *pbstrOutStr);
      HRESULT (WINAPI *get_EscapedMode)(IADsPathname *This,__LONG32 *retval);
      HRESULT (WINAPI *put_EscapedMode)(IADsPathname *This,__LONG32 lnEscapedMode);
    END_INTERFACE
  } IADsPathnameVtbl;
  struct IADsPathname {
    CONST_VTBL struct IADsPathnameVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsPathname_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsPathname_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsPathname_Release(This) (This)->lpVtbl->Release(This)
#define IADsPathname_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsPathname_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsPathname_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsPathname_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsPathname_Set(This,bstrADsPath,lnSetType) (This)->lpVtbl->Set(This,bstrADsPath,lnSetType)
#define IADsPathname_SetDisplayType(This,lnDisplayType) (This)->lpVtbl->SetDisplayType(This,lnDisplayType)
#define IADsPathname_Retrieve(This,lnFormatType,pbstrADsPath) (This)->lpVtbl->Retrieve(This,lnFormatType,pbstrADsPath)
#define IADsPathname_GetNumElements(This,plnNumPathElements) (This)->lpVtbl->GetNumElements(This,plnNumPathElements)
#define IADsPathname_GetElement(This,lnElementIndex,pbstrElement) (This)->lpVtbl->GetElement(This,lnElementIndex,pbstrElement)
#define IADsPathname_AddLeafElement(This,bstrLeafElement) (This)->lpVtbl->AddLeafElement(This,bstrLeafElement)
#define IADsPathname_RemoveLeafElement(This) (This)->lpVtbl->RemoveLeafElement(This)
#define IADsPathname_CopyPath(This,ppAdsPath) (This)->lpVtbl->CopyPath(This,ppAdsPath)
#define IADsPathname_GetEscapedElement(This,lnReserved,bstrInStr,pbstrOutStr) (This)->lpVtbl->GetEscapedElement(This,lnReserved,bstrInStr,pbstrOutStr)
#define IADsPathname_get_EscapedMode(This,retval) (This)->lpVtbl->get_EscapedMode(This,retval)
#define IADsPathname_put_EscapedMode(This,lnEscapedMode) (This)->lpVtbl->put_EscapedMode(This,lnEscapedMode)
#endif
#endif
  HRESULT WINAPI IADsPathname_Set_Proxy(IADsPathname *This,BSTR bstrADsPath,__LONG32 lnSetType);
  void __RPC_STUB IADsPathname_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_SetDisplayType_Proxy(IADsPathname *This,__LONG32 lnDisplayType);
  void __RPC_STUB IADsPathname_SetDisplayType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_Retrieve_Proxy(IADsPathname *This,__LONG32 lnFormatType,BSTR *pbstrADsPath);
  void __RPC_STUB IADsPathname_Retrieve_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_GetNumElements_Proxy(IADsPathname *This,__LONG32 *plnNumPathElements);
  void __RPC_STUB IADsPathname_GetNumElements_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_GetElement_Proxy(IADsPathname *This,__LONG32 lnElementIndex,BSTR *pbstrElement);
  void __RPC_STUB IADsPathname_GetElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_AddLeafElement_Proxy(IADsPathname *This,BSTR bstrLeafElement);
  void __RPC_STUB IADsPathname_AddLeafElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_RemoveLeafElement_Proxy(IADsPathname *This);
  void __RPC_STUB IADsPathname_RemoveLeafElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_CopyPath_Proxy(IADsPathname *This,IDispatch **ppAdsPath);
  void __RPC_STUB IADsPathname_CopyPath_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_GetEscapedElement_Proxy(IADsPathname *This,__LONG32 lnReserved,BSTR bstrInStr,BSTR *pbstrOutStr);
  void __RPC_STUB IADsPathname_GetEscapedElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_get_EscapedMode_Proxy(IADsPathname *This,__LONG32 *retval);
  void __RPC_STUB IADsPathname_get_EscapedMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsPathname_put_EscapedMode_Proxy(IADsPathname *This,__LONG32 lnEscapedMode);
  void __RPC_STUB IADsPathname_put_EscapedMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_Pathname;
#ifdef __cplusplus
  class Pathname;
#endif

#ifndef __IADsADSystemInfo_INTERFACE_DEFINED__
#define __IADsADSystemInfo_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsADSystemInfo;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsADSystemInfo : public IDispatch {
  public:
    virtual HRESULT WINAPI get_UserName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_ComputerName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_SiteName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_DomainShortName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_DomainDNSName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_ForestDNSName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_PDCRoleOwner(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_SchemaRoleOwner(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_IsNativeMode(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI GetAnyDCName(BSTR *pszDCName) = 0;
    virtual HRESULT WINAPI GetDCSiteName(BSTR szServer,BSTR *pszSiteName) = 0;
    virtual HRESULT WINAPI RefreshSchemaCache(void) = 0;
    virtual HRESULT WINAPI GetTrees(VARIANT *pvTrees) = 0;
  };
#else
  typedef struct IADsADSystemInfoVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsADSystemInfo *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsADSystemInfo *This);
      ULONG (WINAPI *Release)(IADsADSystemInfo *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsADSystemInfo *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsADSystemInfo *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsADSystemInfo *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsADSystemInfo *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_UserName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_ComputerName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_SiteName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_DomainShortName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_DomainDNSName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_ForestDNSName)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_PDCRoleOwner)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_SchemaRoleOwner)(IADsADSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_IsNativeMode)(IADsADSystemInfo *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *GetAnyDCName)(IADsADSystemInfo *This,BSTR *pszDCName);
      HRESULT (WINAPI *GetDCSiteName)(IADsADSystemInfo *This,BSTR szServer,BSTR *pszSiteName);
      HRESULT (WINAPI *RefreshSchemaCache)(IADsADSystemInfo *This);
      HRESULT (WINAPI *GetTrees)(IADsADSystemInfo *This,VARIANT *pvTrees);
    END_INTERFACE
  } IADsADSystemInfoVtbl;
  struct IADsADSystemInfo {
    CONST_VTBL struct IADsADSystemInfoVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsADSystemInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsADSystemInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsADSystemInfo_Release(This) (This)->lpVtbl->Release(This)
#define IADsADSystemInfo_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsADSystemInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsADSystemInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsADSystemInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsADSystemInfo_get_UserName(This,retval) (This)->lpVtbl->get_UserName(This,retval)
#define IADsADSystemInfo_get_ComputerName(This,retval) (This)->lpVtbl->get_ComputerName(This,retval)
#define IADsADSystemInfo_get_SiteName(This,retval) (This)->lpVtbl->get_SiteName(This,retval)
#define IADsADSystemInfo_get_DomainShortName(This,retval) (This)->lpVtbl->get_DomainShortName(This,retval)
#define IADsADSystemInfo_get_DomainDNSName(This,retval) (This)->lpVtbl->get_DomainDNSName(This,retval)
#define IADsADSystemInfo_get_ForestDNSName(This,retval) (This)->lpVtbl->get_ForestDNSName(This,retval)
#define IADsADSystemInfo_get_PDCRoleOwner(This,retval) (This)->lpVtbl->get_PDCRoleOwner(This,retval)
#define IADsADSystemInfo_get_SchemaRoleOwner(This,retval) (This)->lpVtbl->get_SchemaRoleOwner(This,retval)
#define IADsADSystemInfo_get_IsNativeMode(This,retval) (This)->lpVtbl->get_IsNativeMode(This,retval)
#define IADsADSystemInfo_GetAnyDCName(This,pszDCName) (This)->lpVtbl->GetAnyDCName(This,pszDCName)
#define IADsADSystemInfo_GetDCSiteName(This,szServer,pszSiteName) (This)->lpVtbl->GetDCSiteName(This,szServer,pszSiteName)
#define IADsADSystemInfo_RefreshSchemaCache(This) (This)->lpVtbl->RefreshSchemaCache(This)
#define IADsADSystemInfo_GetTrees(This,pvTrees) (This)->lpVtbl->GetTrees(This,pvTrees)
#endif
#endif
  HRESULT WINAPI IADsADSystemInfo_get_UserName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_UserName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_ComputerName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_ComputerName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_SiteName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_SiteName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_DomainShortName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_DomainShortName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_DomainDNSName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_DomainDNSName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_ForestDNSName_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_ForestDNSName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_PDCRoleOwner_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_PDCRoleOwner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_SchemaRoleOwner_Proxy(IADsADSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsADSystemInfo_get_SchemaRoleOwner_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_get_IsNativeMode_Proxy(IADsADSystemInfo *This,VARIANT_BOOL *retval);
  void __RPC_STUB IADsADSystemInfo_get_IsNativeMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_GetAnyDCName_Proxy(IADsADSystemInfo *This,BSTR *pszDCName);
  void __RPC_STUB IADsADSystemInfo_GetAnyDCName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_GetDCSiteName_Proxy(IADsADSystemInfo *This,BSTR szServer,BSTR *pszSiteName);
  void __RPC_STUB IADsADSystemInfo_GetDCSiteName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_RefreshSchemaCache_Proxy(IADsADSystemInfo *This);
  void __RPC_STUB IADsADSystemInfo_RefreshSchemaCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsADSystemInfo_GetTrees_Proxy(IADsADSystemInfo *This,VARIANT *pvTrees);
  void __RPC_STUB IADsADSystemInfo_GetTrees_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_ADSystemInfo;
#ifdef __cplusplus
  class ADSystemInfo;
#endif

#ifndef __IADsWinNTSystemInfo_INTERFACE_DEFINED__
#define __IADsWinNTSystemInfo_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsWinNTSystemInfo;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsWinNTSystemInfo : public IDispatch {
  public:
    virtual HRESULT WINAPI get_UserName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_ComputerName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_DomainName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_PDC(BSTR *retval) = 0;
  };
#else
  typedef struct IADsWinNTSystemInfoVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsWinNTSystemInfo *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsWinNTSystemInfo *This);
      ULONG (WINAPI *Release)(IADsWinNTSystemInfo *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsWinNTSystemInfo *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsWinNTSystemInfo *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsWinNTSystemInfo *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsWinNTSystemInfo *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_UserName)(IADsWinNTSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_ComputerName)(IADsWinNTSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_DomainName)(IADsWinNTSystemInfo *This,BSTR *retval);
      HRESULT (WINAPI *get_PDC)(IADsWinNTSystemInfo *This,BSTR *retval);
    END_INTERFACE
  } IADsWinNTSystemInfoVtbl;
  struct IADsWinNTSystemInfo {
    CONST_VTBL struct IADsWinNTSystemInfoVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsWinNTSystemInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsWinNTSystemInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsWinNTSystemInfo_Release(This) (This)->lpVtbl->Release(This)
#define IADsWinNTSystemInfo_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsWinNTSystemInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsWinNTSystemInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsWinNTSystemInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsWinNTSystemInfo_get_UserName(This,retval) (This)->lpVtbl->get_UserName(This,retval)
#define IADsWinNTSystemInfo_get_ComputerName(This,retval) (This)->lpVtbl->get_ComputerName(This,retval)
#define IADsWinNTSystemInfo_get_DomainName(This,retval) (This)->lpVtbl->get_DomainName(This,retval)
#define IADsWinNTSystemInfo_get_PDC(This,retval) (This)->lpVtbl->get_PDC(This,retval)
#endif
#endif
  HRESULT WINAPI IADsWinNTSystemInfo_get_UserName_Proxy(IADsWinNTSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsWinNTSystemInfo_get_UserName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsWinNTSystemInfo_get_ComputerName_Proxy(IADsWinNTSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsWinNTSystemInfo_get_ComputerName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsWinNTSystemInfo_get_DomainName_Proxy(IADsWinNTSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsWinNTSystemInfo_get_DomainName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsWinNTSystemInfo_get_PDC_Proxy(IADsWinNTSystemInfo *This,BSTR *retval);
  void __RPC_STUB IADsWinNTSystemInfo_get_PDC_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_WinNTSystemInfo;
#ifdef __cplusplus
  class WinNTSystemInfo;
#endif

#ifndef __IADsDNWithBinary_INTERFACE_DEFINED__
#define __IADsDNWithBinary_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsDNWithBinary;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsDNWithBinary : public IDispatch {
  public:
    virtual HRESULT WINAPI get_BinaryValue(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_BinaryValue(VARIANT vBinaryValue) = 0;
    virtual HRESULT WINAPI get_DNString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_DNString(BSTR bstrDNString) = 0;
  };
#else
  typedef struct IADsDNWithBinaryVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsDNWithBinary *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsDNWithBinary *This);
      ULONG (WINAPI *Release)(IADsDNWithBinary *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsDNWithBinary *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsDNWithBinary *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsDNWithBinary *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsDNWithBinary *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_BinaryValue)(IADsDNWithBinary *This,VARIANT *retval);
      HRESULT (WINAPI *put_BinaryValue)(IADsDNWithBinary *This,VARIANT vBinaryValue);
      HRESULT (WINAPI *get_DNString)(IADsDNWithBinary *This,BSTR *retval);
      HRESULT (WINAPI *put_DNString)(IADsDNWithBinary *This,BSTR bstrDNString);
    END_INTERFACE
  } IADsDNWithBinaryVtbl;
  struct IADsDNWithBinary {
    CONST_VTBL struct IADsDNWithBinaryVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsDNWithBinary_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsDNWithBinary_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsDNWithBinary_Release(This) (This)->lpVtbl->Release(This)
#define IADsDNWithBinary_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsDNWithBinary_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsDNWithBinary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsDNWithBinary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsDNWithBinary_get_BinaryValue(This,retval) (This)->lpVtbl->get_BinaryValue(This,retval)
#define IADsDNWithBinary_put_BinaryValue(This,vBinaryValue) (This)->lpVtbl->put_BinaryValue(This,vBinaryValue)
#define IADsDNWithBinary_get_DNString(This,retval) (This)->lpVtbl->get_DNString(This,retval)
#define IADsDNWithBinary_put_DNString(This,bstrDNString) (This)->lpVtbl->put_DNString(This,bstrDNString)
#endif
#endif
  HRESULT WINAPI IADsDNWithBinary_get_BinaryValue_Proxy(IADsDNWithBinary *This,VARIANT *retval);
  void __RPC_STUB IADsDNWithBinary_get_BinaryValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithBinary_put_BinaryValue_Proxy(IADsDNWithBinary *This,VARIANT vBinaryValue);
  void __RPC_STUB IADsDNWithBinary_put_BinaryValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithBinary_get_DNString_Proxy(IADsDNWithBinary *This,BSTR *retval);
  void __RPC_STUB IADsDNWithBinary_get_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithBinary_put_DNString_Proxy(IADsDNWithBinary *This,BSTR bstrDNString);
  void __RPC_STUB IADsDNWithBinary_put_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_DNWithBinary;
#ifdef __cplusplus
  class DNWithBinary;
#endif

#ifndef __IADsDNWithString_INTERFACE_DEFINED__
#define __IADsDNWithString_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsDNWithString;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsDNWithString : public IDispatch {
  public:
    virtual HRESULT WINAPI get_StringValue(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_StringValue(BSTR bstrStringValue) = 0;
    virtual HRESULT WINAPI get_DNString(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_DNString(BSTR bstrDNString) = 0;
  };
#else
  typedef struct IADsDNWithStringVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsDNWithString *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsDNWithString *This);
      ULONG (WINAPI *Release)(IADsDNWithString *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsDNWithString *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsDNWithString *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsDNWithString *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsDNWithString *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_StringValue)(IADsDNWithString *This,BSTR *retval);
      HRESULT (WINAPI *put_StringValue)(IADsDNWithString *This,BSTR bstrStringValue);
      HRESULT (WINAPI *get_DNString)(IADsDNWithString *This,BSTR *retval);
      HRESULT (WINAPI *put_DNString)(IADsDNWithString *This,BSTR bstrDNString);
    END_INTERFACE
  } IADsDNWithStringVtbl;
  struct IADsDNWithString {
    CONST_VTBL struct IADsDNWithStringVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsDNWithString_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsDNWithString_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsDNWithString_Release(This) (This)->lpVtbl->Release(This)
#define IADsDNWithString_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsDNWithString_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsDNWithString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsDNWithString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsDNWithString_get_StringValue(This,retval) (This)->lpVtbl->get_StringValue(This,retval)
#define IADsDNWithString_put_StringValue(This,bstrStringValue) (This)->lpVtbl->put_StringValue(This,bstrStringValue)
#define IADsDNWithString_get_DNString(This,retval) (This)->lpVtbl->get_DNString(This,retval)
#define IADsDNWithString_put_DNString(This,bstrDNString) (This)->lpVtbl->put_DNString(This,bstrDNString)
#endif
#endif
  HRESULT WINAPI IADsDNWithString_get_StringValue_Proxy(IADsDNWithString *This,BSTR *retval);
  void __RPC_STUB IADsDNWithString_get_StringValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithString_put_StringValue_Proxy(IADsDNWithString *This,BSTR bstrStringValue);
  void __RPC_STUB IADsDNWithString_put_StringValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithString_get_DNString_Proxy(IADsDNWithString *This,BSTR *retval);
  void __RPC_STUB IADsDNWithString_get_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsDNWithString_put_DNString_Proxy(IADsDNWithString *This,BSTR bstrDNString);
  void __RPC_STUB IADsDNWithString_put_DNString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_DNWithString;
#ifdef __cplusplus
  class DNWithString;
#endif

#ifndef __IADsSecurityUtility_INTERFACE_DEFINED__
#define __IADsSecurityUtility_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IADsSecurityUtility;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IADsSecurityUtility : public IDispatch {
  public:
    virtual HRESULT WINAPI GetSecurityDescriptor(VARIANT varPath,__LONG32 lPathFormat,__LONG32 lFormat,VARIANT *pVariant) = 0;
    virtual HRESULT WINAPI SetSecurityDescriptor(VARIANT varPath,__LONG32 lPathFormat,VARIANT varData,__LONG32 lDataFormat) = 0;
    virtual HRESULT WINAPI ConvertSecurityDescriptor(VARIANT varSD,__LONG32 lDataFormat,__LONG32 lOutFormat,VARIANT *pResult) = 0;
    virtual HRESULT WINAPI get_SecurityMask(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_SecurityMask(__LONG32 lnSecurityMask) = 0;
  };
#else
  typedef struct IADsSecurityUtilityVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IADsSecurityUtility *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IADsSecurityUtility *This);
      ULONG (WINAPI *Release)(IADsSecurityUtility *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IADsSecurityUtility *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IADsSecurityUtility *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IADsSecurityUtility *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IADsSecurityUtility *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *GetSecurityDescriptor)(IADsSecurityUtility *This,VARIANT varPath,__LONG32 lPathFormat,__LONG32 lFormat,VARIANT *pVariant);
      HRESULT (WINAPI *SetSecurityDescriptor)(IADsSecurityUtility *This,VARIANT varPath,__LONG32 lPathFormat,VARIANT varData,__LONG32 lDataFormat);
      HRESULT (WINAPI *ConvertSecurityDescriptor)(IADsSecurityUtility *This,VARIANT varSD,__LONG32 lDataFormat,__LONG32 lOutFormat,VARIANT *pResult);
      HRESULT (WINAPI *get_SecurityMask)(IADsSecurityUtility *This,__LONG32 *retval);
      HRESULT (WINAPI *put_SecurityMask)(IADsSecurityUtility *This,__LONG32 lnSecurityMask);
    END_INTERFACE
  } IADsSecurityUtilityVtbl;
  struct IADsSecurityUtility {
    CONST_VTBL struct IADsSecurityUtilityVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IADsSecurityUtility_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IADsSecurityUtility_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IADsSecurityUtility_Release(This) (This)->lpVtbl->Release(This)
#define IADsSecurityUtility_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IADsSecurityUtility_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IADsSecurityUtility_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IADsSecurityUtility_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IADsSecurityUtility_GetSecurityDescriptor(This,varPath,lPathFormat,lFormat,pVariant) (This)->lpVtbl->GetSecurityDescriptor(This,varPath,lPathFormat,lFormat,pVariant)
#define IADsSecurityUtility_SetSecurityDescriptor(This,varPath,lPathFormat,varData,lDataFormat) (This)->lpVtbl->SetSecurityDescriptor(This,varPath,lPathFormat,varData,lDataFormat)
#define IADsSecurityUtility_ConvertSecurityDescriptor(This,varSD,lDataFormat,lOutFormat,pResult) (This)->lpVtbl->ConvertSecurityDescriptor(This,varSD,lDataFormat,lOutFormat,pResult)
#define IADsSecurityUtility_get_SecurityMask(This,retval) (This)->lpVtbl->get_SecurityMask(This,retval)
#define IADsSecurityUtility_put_SecurityMask(This,lnSecurityMask) (This)->lpVtbl->put_SecurityMask(This,lnSecurityMask)
#endif
#endif
  HRESULT WINAPI IADsSecurityUtility_GetSecurityDescriptor_Proxy(IADsSecurityUtility *This,VARIANT varPath,__LONG32 lPathFormat,__LONG32 lFormat,VARIANT *pVariant);
  void __RPC_STUB IADsSecurityUtility_GetSecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityUtility_SetSecurityDescriptor_Proxy(IADsSecurityUtility *This,VARIANT varPath,__LONG32 lPathFormat,VARIANT varData,__LONG32 lDataFormat);
  void __RPC_STUB IADsSecurityUtility_SetSecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityUtility_ConvertSecurityDescriptor_Proxy(IADsSecurityUtility *This,VARIANT varSD,__LONG32 lDataFormat,__LONG32 lOutFormat,VARIANT *pResult);
  void __RPC_STUB IADsSecurityUtility_ConvertSecurityDescriptor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityUtility_get_SecurityMask_Proxy(IADsSecurityUtility *This,__LONG32 *retval);
  void __RPC_STUB IADsSecurityUtility_get_SecurityMask_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IADsSecurityUtility_put_SecurityMask_Proxy(IADsSecurityUtility *This,__LONG32 lnSecurityMask);
  void __RPC_STUB IADsSecurityUtility_put_SecurityMask_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_ADsSecurityUtility;
#ifdef __cplusplus
  class ADsSecurityUtility;
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif

#endif /* _IADS_H_ */
                                                                                                                                                                                                                                                                                                                                                    usr/share/mingw-w64/include/icftypes.h                                                              0100644 0000000 0000000 00000004620 12404413021 016332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _INC_ICFTYPES
#define _INC_ICFTYPES

#ifdef __cplusplus
extern "C" {
#endif

typedef enum _NET_FW_ACTION {
  NET_FW_ACTION_BLOCK = 0,
  NET_FW_ACTION_ALLOW,
  NET_FW_ACTION_MAX
} NET_FW_ACTION;

typedef enum _NET_FW_MODIFY_STATE {
  NET_FW_MODIFY_STATE_OK = 0,
  NET_FW_MODIFY_STATE_GP_OVERRIDE,
  NET_FW_MODIFY_STATE_INBOUND_BLOCKED
} NET_FW_MODIFY_STATE;

typedef enum NET_FW_PROFILE_TYPE_ {
  NET_FW_PROFILE_DOMAIN = 0,
  NET_FW_PROFILE_STANDARD,
  NET_FW_PROFILE_CURRENT,
  NET_FW_PROFILE_TYPE_MAX
} NET_FW_PROFILE_TYPE;

typedef enum NET_FW_PROFILE_TYPE2_ {
  NET_FW_PROFILE2_DOMAIN    = 0x0001,
  NET_FW_PROFILE2_PRIVATE   = 0x0002,
  NET_FW_PROFILE2_PUBLIC    = 0x0004,
  NET_FW_PROFILE2_ALL       = 0x7FFFFFFF
} NET_FW_PROFILE_TYPE2;

typedef enum NET_FW_RULE_DIRECTION_ {
  NET_FW_RULE_DIR_IN = 1,
  NET_FW_RULE_DIR_OUT,
  NET_FW_RULE_DIR_MAX 
} NET_FW_RULE_DIRECTION;

typedef enum NET_FW_SCOPE_ {
  NET_FW_SCOPE_ALL = 0,
  NET_FW_SCOPE_LOCAL_SUBNET,
  NET_FW_SCOPE_CUSTOM,
  NET_FW_SCOPE_MAX
} NET_FW_SCOPE;

typedef enum NET_FW_IP_VERSION_ {
  NET_FW_IP_VERSION_V4 = 0,
  NET_FW_IP_VERSION_V6,
  NET_FW_IP_VERSION_ANY,
  NET_FW_IP_VERSION_MAX
} NET_FW_IP_VERSION;

typedef enum NET_FW_IP_PROTOCOL_ {
  NET_FW_IP_PROTOCOL_TCP = 6,
  NET_FW_IP_PROTOCOL_UDP = 17,
  NET_FW_IP_PROTOCOL_ANY = 256
} NET_FW_IP_PROTOCOL;

typedef enum NET_FW_POLICY_TYPE_ {
  NET_FW_POLICY_GROUP = 0,
  NET_FW_POLICY_LOCAL,
  NET_FW_POLICY_EFFECTIVE,
  NET_FW_POLICY_TYPE_MAX
} NET_FW_POLICY_TYPE;

typedef enum NET_FW_SERVICE_TYPE_ {
  NET_FW_SERVICE_FILE_AND_PRINT = 0,
  NET_FW_SERVICE_UPNP,
  NET_FW_SERVICE_REMOTE_DESKTOP,
  NET_FW_SERVICE_NONE,
  NET_FW_SERVICE_TYPE_MAX
} NET_FW_SERVICE_TYPE;

typedef enum NET_FW_EDGE_TRAVERSAL_TYPE_ {
  NET_FW_EDGE_TRAVERSAL_TYPE_DENY = 0,
  NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW,
  NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP,
  NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_USER
} NET_FW_EDGE_TRAVERSAL_TYPE;

typedef enum NET_FW_RULE_CATEGORY_ {
  NET_FW_RULE_CATEGORY_BOOT     = 0,
  NET_FW_RULE_CATEGORY_STEALTH  = 1,
  NET_FW_RULE_CATEGORY_FIREWALL = 2,
  NET_FW_RULE_CATEGORY_CONSEC   = 3,
  NET_FW_RULE_CATEGORY_MAX      = 4
} NET_FW_RULE_CATEGORY;

#ifdef __cplusplus
}
#endif

#endif /*_INC_ICFTYPES*/
                                                                                                                usr/share/mingw-w64/include/icm.h                                                                   0100644 0000000 0000000 00000051711 12404413021 015257  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _ICM_H_
#define _ICM_H_

#include <_mingw_unicode.h>

#ifdef __cplusplus
extern "C" {
#endif

  typedef char COLOR_NAME[32];
  typedef COLOR_NAME *PCOLOR_NAME,*LPCOLOR_NAME;

  typedef struct tagNAMED_PROFILE_INFO {
    DWORD dwFlags;
    DWORD dwCount;
    DWORD dwCountDevCoordinates;
    COLOR_NAME szPrefix;
    COLOR_NAME szSuffix;
  } NAMED_PROFILE_INFO;
  typedef NAMED_PROFILE_INFO *PNAMED_PROFILE_INFO,*LPNAMED_PROFILE_INFO;

#define MAX_COLOR_CHANNELS 8

  struct GRAYCOLOR {
    WORD gray;
  };

  struct RGBCOLOR {
    WORD red;
    WORD green;
    WORD blue;
  };

  struct CMYKCOLOR {
    WORD cyan;
    WORD magenta;
    WORD yellow;
    WORD black;
  };

  struct XYZCOLOR {
    WORD X;
    WORD Y;
    WORD Z;
  };

  struct YxyCOLOR {
    WORD Y;
    WORD x;
    WORD y;
  };

  struct LabCOLOR {
    WORD L;
    WORD a;
    WORD b;
  };

  struct GENERIC3CHANNEL {
    WORD ch1;
    WORD ch2;
    WORD ch3;
  };

  struct NAMEDCOLOR {
    DWORD dwIndex;
  };

  struct HiFiCOLOR {
    BYTE channel[MAX_COLOR_CHANNELS];
  };

  typedef union tagCOLOR {
    struct GRAYCOLOR gray;
    struct RGBCOLOR rgb;
    struct CMYKCOLOR cmyk;
    struct XYZCOLOR XYZ;
    struct YxyCOLOR Yxy;
    struct LabCOLOR Lab;
    struct GENERIC3CHANNEL gen3ch;
    struct NAMEDCOLOR named;
    struct HiFiCOLOR hifi;
    struct {
      DWORD reserved1;
      VOID *reserved2;
    };
  } COLOR;
  typedef COLOR *PCOLOR,*LPCOLOR;

  typedef enum {
    COLOR_GRAY = 1,COLOR_RGB,COLOR_XYZ,COLOR_Yxy,COLOR_Lab,COLOR_3_CHANNEL,COLOR_CMYK,COLOR_5_CHANNEL,COLOR_6_CHANNEL,COLOR_7_CHANNEL,
    COLOR_8_CHANNEL,COLOR_NAMED
  } COLORTYPE;
  typedef COLORTYPE *PCOLORTYPE,*LPCOLORTYPE;

  typedef enum {
    BM_x555RGB = 0x0000,BM_x555XYZ = 0x0101,BM_x555Yxy,BM_x555Lab,BM_x555G3CH,BM_RGBTRIPLETS = 0x0002,BM_BGRTRIPLETS = 0x0004,BM_XYZTRIPLETS = 0x0201,
    BM_YxyTRIPLETS,BM_LabTRIPLETS,BM_G3CHTRIPLETS,BM_5CHANNEL,BM_6CHANNEL,BM_7CHANNEL,BM_8CHANNEL,BM_GRAY,BM_xRGBQUADS = 0x0008,BM_xBGRQUADS = 0x0010,
    BM_xG3CHQUADS = 0x0304,BM_KYMCQUADS,BM_CMYKQUADS = 0x0020,BM_10b_RGB = 0x0009,BM_10b_XYZ = 0x0401,BM_10b_Yxy,BM_10b_Lab,BM_10b_G3CH,BM_NAMED_INDEX,
    BM_16b_RGB = 0x000A,BM_16b_XYZ = 0x0501,BM_16b_Yxy,BM_16b_Lab,BM_16b_G3CH,BM_16b_GRAY,BM_565RGB = 0x0001
  } BMFORMAT;
  typedef BMFORMAT *PBMFORMAT,*LPBMFORMAT;

  typedef WINBOOL (WINAPI *PBMCALLBACKFN)(ULONG,ULONG,LPARAM);
  typedef PBMCALLBACKFN LPBMCALLBACKFN;

  typedef struct tagPROFILEHEADER {
    DWORD phSize;
    DWORD phCMMType;
    DWORD phVersion;
    DWORD phClass;
    DWORD phDataColorSpace;
    DWORD phConnectionSpace;
    DWORD phDateTime[3];
    DWORD phSignature;
    DWORD phPlatform;
    DWORD phProfileFlags;
    DWORD phManufacturer;
    DWORD phModel;
    DWORD phAttributes[2];
    DWORD phRenderingIntent;
    CIEXYZ phIlluminant;
    DWORD phCreator;
    BYTE phReserved[44];
  } PROFILEHEADER;
  typedef PROFILEHEADER *PPROFILEHEADER,*LPPROFILEHEADER;

#define CLASS_MONITOR 'mntr'
#define CLASS_PRINTER 'prtr'
#define CLASS_SCANNER 'scnr'
#define CLASS_LINK 'link'
#define CLASS_ABSTRACT 'abst'
#define CLASS_COLORSPACE 'spac'
#define CLASS_NAMED 'nmcl'

#define SPACE_XYZ 'XYZ '
#define SPACE_Lab 'Lab '
#define SPACE_Luv 'Luv '
#define SPACE_YCbCr 'YCbr'
#define SPACE_Yxy 'Yxy '
#define SPACE_RGB 'RGB '
#define SPACE_GRAY 'GRAY'
#define SPACE_HSV 'HSV '
#define SPACE_HLS 'HLS '
#define SPACE_CMYK 'CMYK'
#define SPACE_CMY 'CMY '
#define SPACE_2_CHANNEL '2CLR'
#define SPACE_3_CHANNEL '3CLR'
#define SPACE_4_CHANNEL '4CLR'
#define SPACE_5_CHANNEL '5CLR'
#define SPACE_6_CHANNEL '6CLR'
#define SPACE_7_CHANNEL '7CLR'
#define SPACE_8_CHANNEL '8CLR'

#define FLAG_EMBEDDEDPROFILE 0x00000001
#define FLAG_DEPENDENTONDATA 0x00000002

#define ATTRIB_TRANSPARENCY 0x00000001
#define ATTRIB_MATTE 0x00000002

#define INTENT_PERCEPTUAL 0
#define INTENT_RELATIVE_COLORIMETRIC 1
#define INTENT_SATURATION 2
#define INTENT_ABSOLUTE_COLORIMETRIC 3

  typedef struct tagPROFILE {
    DWORD dwType;
    PVOID pProfileData;
    DWORD cbDataSize;
  } PROFILE;
  typedef PROFILE *PPROFILE,*LPPROFILE;

#define PROFILE_FILENAME 1
#define PROFILE_MEMBUFFER 2

#define PROFILE_READ 1
#define PROFILE_READWRITE 2

  typedef HANDLE HPROFILE;
  typedef HPROFILE *PHPROFILE;
  typedef HANDLE HTRANSFORM;

#define INDEX_DONT_CARE 0

#define CMM_FROM_PROFILE INDEX_DONT_CARE
#define CMM_WINDOWS_DEFAULT 'Win '

  typedef DWORD TAGTYPE;
  typedef TAGTYPE *PTAGTYPE,*LPTAGTYPE;

#define ENUM_TYPE_VERSION 0x0300

  typedef struct tagENUMTYPEA {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFields;
    PCSTR pDeviceName;
    DWORD dwMediaType;
    DWORD dwDitheringMode;
    DWORD dwResolution[2];
    DWORD dwCMMType;
    DWORD dwClass;
    DWORD dwDataColorSpace;
    DWORD dwConnectionSpace;
    DWORD dwSignature;
    DWORD dwPlatform;
    DWORD dwProfileFlags;
    DWORD dwManufacturer;
    DWORD dwModel;
    DWORD dwAttributes[2];
    DWORD dwRenderingIntent;
    DWORD dwCreator;
    DWORD dwDeviceClass;
  } ENUMTYPEA,*PENUMTYPEA,*LPENUMTYPEA;

  typedef struct tagENUMTYPEW {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFields;
    PCWSTR pDeviceName;
    DWORD dwMediaType;
    DWORD dwDitheringMode;
    DWORD dwResolution[2];
    DWORD dwCMMType;
    DWORD dwClass;
    DWORD dwDataColorSpace;
    DWORD dwConnectionSpace;
    DWORD dwSignature;
    DWORD dwPlatform;
    DWORD dwProfileFlags;
    DWORD dwManufacturer;
    DWORD dwModel;
    DWORD dwAttributes[2];
    DWORD dwRenderingIntent;
    DWORD dwCreator;
    DWORD dwDeviceClass;
  } ENUMTYPEW,*PENUMTYPEW,*LPENUMTYPEW;

#define ET_DEVICENAME 0x00000001
#define ET_MEDIATYPE 0x00000002
#define ET_DITHERMODE 0x00000004
#define ET_RESOLUTION 0x00000008
#define ET_CMMTYPE 0x00000010
#define ET_CLASS 0x00000020
#define ET_DATACOLORSPACE 0x00000040
#define ET_CONNECTIONSPACE 0x00000080
#define ET_SIGNATURE 0x00000100
#define ET_PLATFORM 0x00000200
#define ET_PROFILEFLAGS 0x00000400
#define ET_MANUFACTURER 0x00000800
#define ET_MODEL 0x00001000
#define ET_ATTRIBUTES 0x00002000
#define ET_RENDERINGINTENT 0x00004000
#define ET_CREATOR 0x00008000
#define ET_DEVICECLASS 0x00010000

#define PROOF_MODE 0x00000001
#define NORMAL_MODE 0x00000002
#define BEST_MODE 0x00000003
#define ENABLE_GAMUT_CHECKING 0x00010000
#define USE_RELATIVE_COLORIMETRIC 0x00020000
#define FAST_TRANSLATE 0x00040000
#define RESERVED 0x80000000

#define CSA_A 1
#define CSA_ABC 2
#define CSA_DEF 3
#define CSA_DEFG 4
#define CSA_GRAY 5
#define CSA_RGB 6
#define CSA_CMYK 7
#define CSA_Lab 8

#define CMM_WIN_VERSION 0
#define CMM_IDENT 1
#define CMM_DRIVER_VERSION 2
#define CMM_DLL_VERSION 3
#define CMM_VERSION 4
#define CMM_DESCRIPTION 5
#define CMM_LOGOICON 6

#define CMS_FORWARD 0
#define CMS_BACKWARD 1

#define COLOR_MATCH_VERSION 0x0200

#define CMS_DISABLEICM 1
#define CMS_ENABLEPROOFING 2

#define CMS_SETRENDERINTENT 4
#define CMS_SETPROOFINTENT 8
#define CMS_SETMONITORPROFILE 0x10
#define CMS_SETPRINTERPROFILE 0x20
#define CMS_SETTARGETPROFILE 0x40

#define CMS_USEHOOK 0x80
#define CMS_USEAPPLYCALLBACK 0x100
#define CMS_USEDESCRIPTION 0x200

#define CMS_DISABLEINTENT 0x400
#define CMS_DISABLERENDERINTENT 0x800

#define CMS_MONITOROVERFLOW __MSABI_LONG(0x80000000)
#define CMS_PRINTEROVERFLOW __MSABI_LONG(0x40000000)
#define CMS_TARGETOVERFLOW __MSABI_LONG(0x20000000)

  struct _tagCOLORMATCHSETUPW;
  struct _tagCOLORMATCHSETUPA;

  typedef WINBOOL (WINAPI *PCMSCALLBACKW)(struct _tagCOLORMATCHSETUPW *,LPARAM);
  typedef WINBOOL (WINAPI *PCMSCALLBACKA)(struct _tagCOLORMATCHSETUPA *,LPARAM);

  typedef struct _tagCOLORMATCHSETUPW {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFlags;
    HWND hwndOwner;
    PCWSTR pSourceName;
    PCWSTR pDisplayName;
    PCWSTR pPrinterName;
    DWORD dwRenderIntent;
    DWORD dwProofingIntent;
    PWSTR pMonitorProfile;
    DWORD ccMonitorProfile;
    PWSTR pPrinterProfile;
    DWORD ccPrinterProfile;
    PWSTR pTargetProfile;
    DWORD ccTargetProfile;
    DLGPROC lpfnHook;
    LPARAM lParam;
    PCMSCALLBACKW lpfnApplyCallback;
    LPARAM lParamApplyCallback;
  } COLORMATCHSETUPW,*PCOLORMATCHSETUPW,*LPCOLORMATCHSETUPW;

  typedef struct _tagCOLORMATCHSETUPA {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFlags;
    HWND hwndOwner;
    PCSTR pSourceName;
    PCSTR pDisplayName;
    PCSTR pPrinterName;
    DWORD dwRenderIntent;
    DWORD dwProofingIntent;
    PSTR pMonitorProfile;
    DWORD ccMonitorProfile;
    PSTR pPrinterProfile;
    DWORD ccPrinterProfile;
    PSTR pTargetProfile;
    DWORD ccTargetProfile;
    DLGPROC lpfnHook;
    LPARAM lParam;
    PCMSCALLBACKA lpfnApplyCallback;
    LPARAM lParamApplyCallback;
  } COLORMATCHSETUPA,*PCOLORMATCHSETUPA,*LPCOLORMATCHSETUPA;

  HPROFILE WINAPI OpenColorProfileA(PPROFILE,DWORD,DWORD,DWORD);
  HPROFILE WINAPI OpenColorProfileW(PPROFILE,DWORD,DWORD,DWORD);
  WINBOOL WINAPI CloseColorProfile(HPROFILE);
  WINBOOL WINAPI GetColorProfileFromHandle(HPROFILE,PBYTE,PDWORD);
  WINBOOL WINAPI IsColorProfileValid(HPROFILE,PBOOL);
  WINBOOL WINAPI CreateProfileFromLogColorSpaceA(LPLOGCOLORSPACEA,PBYTE*);
  WINBOOL WINAPI CreateProfileFromLogColorSpaceW(LPLOGCOLORSPACEW,PBYTE*);
  WINBOOL WINAPI GetCountColorProfileElements(HPROFILE,PDWORD);
  WINBOOL WINAPI GetColorProfileHeader(HPROFILE,PPROFILEHEADER);
  WINBOOL WINAPI GetColorProfileElementTag(HPROFILE,DWORD,PTAGTYPE);
  WINBOOL WINAPI IsColorProfileTagPresent(HPROFILE,TAGTYPE,PBOOL);
  WINBOOL WINAPI GetColorProfileElement(HPROFILE,TAGTYPE,DWORD,PDWORD,PVOID,PBOOL);
  WINBOOL WINAPI SetColorProfileHeader(HPROFILE,PPROFILEHEADER);
  WINBOOL WINAPI SetColorProfileElementSize(HPROFILE,TAGTYPE,DWORD);
  WINBOOL WINAPI SetColorProfileElement(HPROFILE,TAGTYPE,DWORD,PDWORD,PVOID);
  WINBOOL WINAPI SetColorProfileElementReference(HPROFILE,TAGTYPE,TAGTYPE);
  WINBOOL WINAPI GetPS2ColorSpaceArray (HPROFILE,DWORD,DWORD,PBYTE,PDWORD,PBOOL);
  WINBOOL WINAPI GetPS2ColorRenderingIntent(HPROFILE,DWORD,PBYTE,PDWORD);
  WINBOOL WINAPI GetPS2ColorRenderingDictionary(HPROFILE,DWORD,PBYTE,PDWORD,PBOOL);
  WINBOOL WINAPI GetNamedProfileInfo(HPROFILE,PNAMED_PROFILE_INFO);
  WINBOOL WINAPI ConvertColorNameToIndex(HPROFILE,PCOLOR_NAME,PDWORD,DWORD);
  WINBOOL WINAPI ConvertIndexToColorName(HPROFILE,PDWORD,PCOLOR_NAME,DWORD);
  WINBOOL WINAPI CreateDeviceLinkProfile(PHPROFILE,DWORD,PDWORD,DWORD,DWORD,PBYTE*,DWORD);
  HTRANSFORM WINAPI CreateColorTransformA(LPLOGCOLORSPACEA,HPROFILE,HPROFILE,DWORD);
  HTRANSFORM WINAPI CreateColorTransformW(LPLOGCOLORSPACEW,HPROFILE,HPROFILE,DWORD);
  HTRANSFORM WINAPI CreateMultiProfileTransform(PHPROFILE,DWORD,PDWORD,DWORD,DWORD,DWORD);
  WINBOOL WINAPI DeleteColorTransform(HTRANSFORM);
  WINBOOL WINAPI TranslateBitmapBits(HTRANSFORM,PVOID,BMFORMAT,DWORD,DWORD,DWORD,PVOID,BMFORMAT,DWORD,PBMCALLBACKFN,LPARAM);
  WINBOOL WINAPI CheckBitmapBits(HTRANSFORM ,PVOID,BMFORMAT,DWORD,DWORD,DWORD,PBYTE,PBMCALLBACKFN,LPARAM);
  WINBOOL WINAPI TranslateColors(HTRANSFORM,PCOLOR,DWORD,COLORTYPE,PCOLOR,COLORTYPE);
  WINBOOL WINAPI CheckColors(HTRANSFORM,PCOLOR,DWORD,COLORTYPE,PBYTE);
  DWORD WINAPI GetCMMInfo(HTRANSFORM,DWORD);
  WINBOOL WINAPI RegisterCMMA(PCSTR,DWORD,PCSTR);
  WINBOOL WINAPI RegisterCMMW(PCWSTR,DWORD,PCWSTR);
  WINBOOL WINAPI UnregisterCMMA(PCSTR,DWORD);
  WINBOOL WINAPI UnregisterCMMW(PCWSTR,DWORD);
  WINBOOL WINAPI SelectCMM(DWORD);
  WINBOOL WINAPI GetColorDirectoryA(PCSTR pMachineName,PSTR pBuffer,PDWORD pdwSize);
  WINBOOL WINAPI GetColorDirectoryW(PCWSTR pMachineName,PWSTR pBuffer,PDWORD pdwSize);
  WINBOOL WINAPI InstallColorProfileA(PCSTR,PCSTR);
  WINBOOL WINAPI InstallColorProfileW(PCWSTR,PCWSTR);
  WINBOOL WINAPI UninstallColorProfileA(PCSTR,PCSTR,WINBOOL);
  WINBOOL WINAPI UninstallColorProfileW(PCWSTR,PCWSTR,WINBOOL);
  WINBOOL WINAPI EnumColorProfilesA(PCSTR,PENUMTYPEA,PBYTE,PDWORD,PDWORD);
  WINBOOL WINAPI EnumColorProfilesW(PCWSTR,PENUMTYPEW,PBYTE,PDWORD,PDWORD);
  WINBOOL WINAPI SetStandardColorSpaceProfileA(PCSTR,DWORD,PCSTR);
  WINBOOL WINAPI SetStandardColorSpaceProfileW(PCWSTR,DWORD,PCWSTR);
  WINBOOL WINAPI GetStandardColorSpaceProfileA(PCSTR pMachineName,DWORD dwSCS,PSTR pBuffer,PDWORD pcbSize);
  WINBOOL WINAPI GetStandardColorSpaceProfileW(PCWSTR pMachineName,DWORD dwSCS,PWSTR pBuffer,PDWORD pcbSize);
  WINBOOL WINAPI AssociateColorProfileWithDeviceA(PCSTR,PCSTR,PCSTR);
  WINBOOL WINAPI AssociateColorProfileWithDeviceW(PCWSTR,PCWSTR,PCWSTR);
  WINBOOL WINAPI DisassociateColorProfileFromDeviceA(PCSTR,PCSTR,PCSTR);
  WINBOOL WINAPI DisassociateColorProfileFromDeviceW(PCWSTR,PCWSTR,PCWSTR);
  WINBOOL WINAPI SetupColorMatchingW(PCOLORMATCHSETUPW pcms);
  WINBOOL WINAPI SetupColorMatchingA(PCOLORMATCHSETUPA pcms);

#define ENUMTYPE __MINGW_NAME_AW(ENUMTYPE)
#define PENUMTYPE __MINGW_NAME_AW(PENUMTYPE)
#define COLORMATCHSETUP __MINGW_NAME_AW(COLORMATCHSETUP)
#define PCOLORMATCHSETUP __MINGW_NAME_AW(PCOLORMATCHSETUP)
#define LPCOLORMATCHSETUP __MINGW_NAME_AW(LPCOLORMATCHSETUP)
#define PCMSCALLBACK __MINGW_NAME_AW(PCMSCALLBACK)

#define CreateColorTransform __MINGW_NAME_AW(CreateColorTransform)
#define OpenColorProfile __MINGW_NAME_AW(OpenColorProfile)
#define CreateProfileFromLogColorSpace __MINGW_NAME_AW(CreateProfileFromLogColorSpace)
#define RegisterCMM __MINGW_NAME_AW(RegisterCMM)
#define UnregisterCMM __MINGW_NAME_AW(UnregisterCMM)
#define GetColorDirectory __MINGW_NAME_AW(GetColorDirectory)
#define InstallColorProfile __MINGW_NAME_AW(InstallColorProfile)
#define UninstallColorProfile __MINGW_NAME_AW(UninstallColorProfile)
#define AssociateColorProfileWithDevice __MINGW_NAME_AW(AssociateColorProfileWithDevice)
#define DisassociateColorProfileFromDevice __MINGW_NAME_AW(DisassociateColorProfileFromDevice)
#define EnumColorProfiles __MINGW_NAME_AW(EnumColorProfiles)
#define SetStandardColorSpaceProfile __MINGW_NAME_AW(SetStandardColorSpaceProfile)
#define GetStandardColorSpaceProfile __MINGW_NAME_AW(GetStandardColorSpaceProfile)
#define SetupColorMatching __MINGW_NAME_AW(SetupColorMatching)

  typedef HANDLE HCMTRANSFORM;
  typedef PVOID LPDEVCHARACTER;

  WINBOOL WINAPI CMCheckColors(HCMTRANSFORM hcmTransform,LPCOLOR lpaInputColors,DWORD nColors,COLORTYPE ctInput,LPBYTE lpaResult);
  WINBOOL WINAPI CMCheckColorsInGamut(HCMTRANSFORM hcmTransform,RGBTRIPLE *lpaRGBTriple,LPBYTE lpaResult,UINT nCount);
  WINBOOL WINAPI CMCheckRGBs(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwStride,LPBYTE lpaResult,PBMCALLBACKFN pfnCallback,LPARAM ulCallbackData);
  WINBOOL WINAPI CMConvertColorNameToIndex(HPROFILE hProfile,PCOLOR_NAME paColorName,PDWORD paIndex,DWORD dwCount);
  WINBOOL WINAPI CMConvertIndexToColorName(HPROFILE hProfile,PDWORD paIndex,PCOLOR_NAME paColorName,DWORD dwCount);
  WINBOOL WINAPI CMCreateDeviceLinkProfile(PHPROFILE pahProfiles,DWORD nProfiles,PDWORD padwIntents,DWORD nIntents,DWORD dwFlags,LPBYTE *lpProfileData);
  HCMTRANSFORM WINAPI CMCreateMultiProfileTransform(PHPROFILE pahProfiles,DWORD nProfiles,PDWORD padwIntents,DWORD nIntents,DWORD dwFlags);
  WINBOOL WINAPI CMCreateProfile(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER *lpProfileData);
  WINBOOL WINAPI CMCreateProfileW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER *lpProfileData);
  HCMTRANSFORM WINAPI CMCreateTransform(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter);
  HCMTRANSFORM WINAPI CMCreateTransformW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter);
  HCMTRANSFORM WINAPI CMCreateTransformExt(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter,DWORD dwFlags);
  HCMTRANSFORM WINAPI CMCreateTransformExtW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter,DWORD dwFlags);
  WINBOOL WINAPI CMDeleteTransform(HCMTRANSFORM hcmTransform);
  DWORD WINAPI CMGetInfo(DWORD dwInfo);
  WINBOOL WINAPI CMGetNamedProfileInfo(HPROFILE hProfile,PNAMED_PROFILE_INFO pNamedProfileInfo);
  WINBOOL WINAPI CMGetPS2ColorRenderingDictionary(HPROFILE hProfile,DWORD dwIntent,LPBYTE lpBuffer,LPDWORD lpcbSize,LPBOOL lpbBinary);
  WINBOOL WINAPI CMGetPS2ColorRenderingIntent(HPROFILE hProfile,DWORD dwIntent,LPBYTE lpBuffer,LPDWORD lpcbSize);
  WINBOOL WINAPI CMGetPS2ColorSpaceArray(HPROFILE hProfile,DWORD dwIntent,DWORD dwCSAType,LPBYTE lpBuffer,LPDWORD lpcbSize,LPBOOL lpbBinary);
  WINBOOL WINAPI CMIsProfileValid(HPROFILE hProfile,LPBOOL lpbValid);
  WINBOOL WINAPI CMTranslateColors(HCMTRANSFORM hcmTransform,LPCOLOR lpaInputColors,DWORD nColors,COLORTYPE ctInput,LPCOLOR lpaOutputColors,COLORTYPE ctOutput);
  WINBOOL WINAPI CMTranslateRGB(HCMTRANSFORM hcmTransform,COLORREF ColorRef,LPCOLORREF lpColorRef,DWORD dwFlags);
  WINBOOL WINAPI CMTranslateRGBs(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwStride,LPVOID lpDestBits,BMFORMAT bmOutput,DWORD dwTranslateDirection);
  WINBOOL WINAPI CMTranslateRGBsExt(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwInputStride,LPVOID lpDestBits,BMFORMAT bmOutput,DWORD dwOutputStride,LPBMCALLBACKFN lpfnCallback,LPARAM ulCallbackData);

#if (_WIN32_WINNT >= 0x0600)
  typedef enum tagCOLORDATATYPE {
  COLOR_BYTE                 = 1,
  COLOR_WORD,
  COLOR_FLOAT,
  COLOR_S2DOT13FIXED,
  COLOR_10b_R10G10B10A2,
  COLOR_10b_R10G10B10A2_XR
} COLORDATATYPE, *PCOLORDATATYPE, *LPCOLORDATATYPE;

#define INTENT_PERCEPTUAL 0
#define INTENT_RELATIVE_COLORIMETRIC 1
#define INTENT_SATURATION 2
#define INTENT_ABSOLUTE_COLORIMETRIC 3

typedef enum tagCOLORPROFILESUBTYPE {
  CPST_PERCEPTUAL            = INTENT_PERCEPTUAL,
  CPST_RELATIVE_COLORIMETRIC = INTENT_RELATIVE_COLORIMETRIC,
  CPST_SATURATION            = INTENT_SATURATION,
  CPST_ABSOLUTE_COLORIMETRIC = INTENT_ABSOLUTE_COLORIMETRIC,
  CPST_NONE,
  CPST_RGB_WORKING_SPACE,
  CPST_CUSTOM_WORKING_SPACE
} COLORPROFILESUBTYPE, *PCOLORPROFILESUBTYPE, *LPCOLORPROFILESUBTYPE;

typedef enum tagCOLORPROFILETYPE {
  CPT_ICC  = 0,
  CPT_DMP  = 1,
  CPT_CAMP = 2,
  CPT_GMMP = 3
} COLORPROFILETYPE, *PCOLORPROFILETYPE, *LPCOLORPROFILETYPE;

typedef enum tagWCS_PROFILE_MANAGEMENT_SCOPE {
  WCS_PROFILE_MANAGEMENT_SCOPE_SYSTEM_WIDE = 0,
  WCS_PROFILE_MANAGEMENT_SCOPE_CURRENT_USER
} WCS_PROFILE_MANAGEMENT_SCOPE;

WINBOOL WINAPI WcsAssociateColorProfileWithDevice(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PCWSTR pProfileName,
  PCWSTR pDeviceName
);

WINBOOL WINAPI WcsCheckColors(
  HTRANSFORM hColorTransform,
  DWORD nColors,
  DWORD nInputChannels,
  COLORDATATYPE cdtInput,
  DWORD cbInput,
  PVOID pInputData,
  PBYTE paResult
);

HPROFILE WINAPI WcsCreateIccProfile(
  HPROFILE hWcsProfile,
  DWORD dwOptions
);

WINBOOL WINAPI WcsDisassociateColorProfileFromDevice(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PCWSTR pProfileName,
  PCWSTR pDeviceName
);

WINBOOL WINAPI WcsEnumColorProfiles(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PENUMTYPEW pEnumRecord,
  PBYTE pBuffer,
  DWORD dwSize,
  PDWORD pnProfiles
);

WINBOOL WINAPI WcsEnumColorProfilesSize(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PENUMTYPEW pEnumRecord,
  PDWORD pdwSize
);

WINBOOL WINAPI WcsGetDefaultColorProfile(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PCWSTR pDeviceName,
  COLORPROFILETYPE cptColorProfileType,
  COLORPROFILESUBTYPE cpstColorProfileSubType,
  DWORD dwProfileID,
  DWORD cbProfileName,
  LPWSTR pProfileName
);

WINBOOL WINAPI WcsGetDefaultColorProfileSize(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PCWSTR pDeviceName,
  COLORPROFILETYPE cptColorProfileType,
  COLORPROFILESUBTYPE cpstColorProfileSubType,
  DWORD dwProfileID,
  PDWORD pcbProfileName
);

WINBOOL WINAPI WcsGetDefaultRenderingIntent(
  WCS_PROFILE_MANAGEMENT_SCOPE scope,
  PDWORD pdwRenderingIntent
);

WINBOOL WINAPI WcsGetUsePerUserProfiles(
  LPCWSTR pDeviceName,
  DWORD dwDeviceClass,
  WINBOOL *pUsePerUserProfiles
);

#define WcsOpenColorProfile __MINGW_NAME_AW(WcsOpenColorProfile)

HPROFILE WINAPI WcsOpenColorProfileA(
  PPROFILE pCDMPProfile,
  PPROFILE pCAMPProfile,
  PPROFILE pGMMPProfile,
  DWORD dwDesiredAccess,
  DWORD dwShareMode,
  DWORD dwCreationMode,
  DWORD dwFlags
);

HPROFILE WINAPI WcsOpenColorProfileW(
  PPROFILE pCDMPProfile,
  PPROFILE pCAMPProfile,
  PPROFILE pGMMPProfile,
  DWORD dwDesiredAccess,
  DWORD dwShareMode,
  DWORD dwCreationMode,
  DWORD dwFlags
);

WINBOOL WINAPI WcsSetDefaultColorProfile(
  WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,
  PCWSTR pDeviceName,
  COLORPROFILETYPE cptColorProfileType,
  COLORPROFILESUBTYPE cpstColorProfileSubType,
  DWORD dwProfileID,
  LPCWSTR pProfileName
);

WINBOOL WINAPI WcsSetDefaultRenderingIntent(
  WCS_PROFILE_MANAGEMENT_SCOPE scope,
  DWORD dwRenderingIntent
);

WINBOOL WINAPI WcsSetUsePerUserProfiles(
  LPCWSTR pDeviceName,
  DWORD dwDeviceClass,
  WINBOOL usePerUserProfiles
);

WINBOOL WINAPI WcsTranslateColors(
  HTRANSFORM hColorTransform,
  DWORD nColors,
  DWORD nInputChannels,
  COLORDATATYPE cdtInput,
  DWORD cbInput,
  PVOID pInputData,
  DWORD nOutputChannels,
  COLORDATATYPE cdtOutput,
  DWORD cbOutput,
  PVOID pOutputData
);

#endif /*(_WIN32_WINNT >= 0x0600)*/

#ifdef __cplusplus
}
#endif
#endif
                                                       usr/share/mingw-w64/include/icmpapi.h                                                               0100644 0000000 0000000 00000003645 12404413021 016134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _ICMP_INCLUDED_
#define _ICMP_INCLUDED_

#ifdef __cplusplus
extern "C" {
#endif

  HANDLE WINAPI IcmpCreateFile(VOID);
  HANDLE WINAPI Icmp6CreateFile(VOID);
  WINBOOL WINAPI IcmpCloseHandle(HANDLE IcmpHandle);
  DWORD WINAPI IcmpSendEcho(HANDLE IcmpHandle,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);

#ifdef PIO_APC_ROUTINE_DEFINED
  DWORD WINAPI IcmpSendEcho2(HANDLE IcmpHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);
  DWORD WINAPI Icmp6SendEcho2(HANDLE IcmpHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,struct sockaddr_in6 *SourceAddress,struct sockaddr_in6 *DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);
#else
  DWORD WINAPI IcmpSendEcho2(HANDLE IcmpHandle,HANDLE Event,FARPROC ApcRoutine,PVOID ApcContext,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);
  DWORD WINAPI Icmp6SendEcho2(HANDLE IcmpHandle,HANDLE Event,FARPROC ApcRoutine,PVOID ApcContext,struct sockaddr_in6 *SourceAddress,struct sockaddr_in6 *DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout);
#endif

  DWORD WINAPI IcmpParseReplies(LPVOID ReplyBuffer,DWORD ReplySize);
  DWORD WINAPI Icmp6ParseReplies(LPVOID ReplyBuffer,DWORD ReplySize);

#ifdef __cplusplus
}
#endif
#endif
                                                                                           usr/share/mingw-w64/include/icodecapi.h                                                             0100644 0000000 0000000 00000035652 12404413021 016435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*** Autogenerated by WIDL 1.6 from include/icodecapi.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __icodecapi_h__
#define __icodecapi_h__

/* Forward declarations */

#ifndef __ICodecAPI_FWD_DEFINED__
#define __ICodecAPI_FWD_DEFINED__
typedef interface ICodecAPI ICodecAPI;
#endif

/* Headers for imported files */

#include <unknwn.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)

struct CodecAPIEventData {
    GUID guid;
    DWORD dataLength;
    DWORD reserved[3];
};


#ifndef __IStream_FWD_DEFINED__
#define __IStream_FWD_DEFINED__
typedef interface IStream IStream;
#endif


/*****************************************************************************
 * ICodecAPI interface
 */
#ifndef __ICodecAPI_INTERFACE_DEFINED__
#define __ICodecAPI_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICodecAPI, 0x901db4c7, 0x31ce, 0x41a2, 0x85,0xdc, 0x8f,0xa0,0xbf,0x41,0xb8,0xda);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("901db4c7-31ce-41a2-85dc-8fa0bf41b8da")
ICodecAPI : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE IsSupported(
        const GUID *Api) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsModifiable(
        const GUID *Api) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParameterRange(
        const GUID *Api,
        VARIANT *ValueMin,
        VARIANT *ValueMax,
        VARIANT *SteppingDelta) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParameterValues(
        const GUID *Api,
        VARIANT **Values,
        ULONG *ValuesCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDefaultValue(
        const GUID *Api,
        VARIANT *Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetValue(
        const GUID *Api,
        VARIANT *Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetValue(
        const GUID *Api,
        VARIANT *Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE RegisterForEvent(
        const GUID *Api,
        LONG_PTR userData) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnregisterForEvent(
        const GUID *Api) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAllDefaults(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetValueWithNotify(
        const GUID *Api,
        VARIANT *Value,
        GUID **ChangedParam,
        ULONG *ChangedParamCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAllDefaultsWithNotify(
        GUID **ChangedParam,
        ULONG *ChangedParamCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAllSettings(
        IStream *a) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAllSettings(
        IStream *a) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAllSettingsWithNotify(
        IStream *a,
        GUID **ChangedParam,
        ULONG *ChangedParamCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICodecAPI, 0x901db4c7, 0x31ce, 0x41a2, 0x85,0xdc, 0x8f,0xa0,0xbf,0x41,0xb8,0xda)
#endif
#else
typedef struct ICodecAPIVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICodecAPI* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICodecAPI* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICodecAPI* This);

    /*** ICodecAPI methods ***/
    HRESULT (STDMETHODCALLTYPE *IsSupported)(
        ICodecAPI* This,
        const GUID *Api);

    HRESULT (STDMETHODCALLTYPE *IsModifiable)(
        ICodecAPI* This,
        const GUID *Api);

    HRESULT (STDMETHODCALLTYPE *GetParameterRange)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT *ValueMin,
        VARIANT *ValueMax,
        VARIANT *SteppingDelta);

    HRESULT (STDMETHODCALLTYPE *GetParameterValues)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT **Values,
        ULONG *ValuesCount);

    HRESULT (STDMETHODCALLTYPE *GetDefaultValue)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT *Value);

    HRESULT (STDMETHODCALLTYPE *GetValue)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT *Value);

    HRESULT (STDMETHODCALLTYPE *SetValue)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT *Value);

    HRESULT (STDMETHODCALLTYPE *RegisterForEvent)(
        ICodecAPI* This,
        const GUID *Api,
        LONG_PTR userData);

    HRESULT (STDMETHODCALLTYPE *UnregisterForEvent)(
        ICodecAPI* This,
        const GUID *Api);

    HRESULT (STDMETHODCALLTYPE *SetAllDefaults)(
        ICodecAPI* This);

    HRESULT (STDMETHODCALLTYPE *SetValueWithNotify)(
        ICodecAPI* This,
        const GUID *Api,
        VARIANT *Value,
        GUID **ChangedParam,
        ULONG *ChangedParamCount);

    HRESULT (STDMETHODCALLTYPE *SetAllDefaultsWithNotify)(
        ICodecAPI* This,
        GUID **ChangedParam,
        ULONG *ChangedParamCount);

    HRESULT (STDMETHODCALLTYPE *GetAllSettings)(
        ICodecAPI* This,
        IStream *a);

    HRESULT (STDMETHODCALLTYPE *SetAllSettings)(
        ICodecAPI* This,
        IStream *a);

    HRESULT (STDMETHODCALLTYPE *SetAllSettingsWithNotify)(
        ICodecAPI* This,
        IStream *a,
        GUID **ChangedParam,
        ULONG *ChangedParamCount);

    END_INTERFACE
} ICodecAPIVtbl;
interface ICodecAPI {
    CONST_VTBL ICodecAPIVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICodecAPI_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICodecAPI_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICodecAPI_Release(This) (This)->lpVtbl->Release(This)
/*** ICodecAPI methods ***/
#define ICodecAPI_IsSupported(This,Api) (This)->lpVtbl->IsSupported(This,Api)
#define ICodecAPI_IsModifiable(This,Api) (This)->lpVtbl->IsModifiable(This,Api)
#define ICodecAPI_GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta) (This)->lpVtbl->GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta)
#define ICodecAPI_GetParameterValues(This,Api,Values,ValuesCount) (This)->lpVtbl->GetParameterValues(This,Api,Values,ValuesCount)
#define ICodecAPI_GetDefaultValue(This,Api,Value) (This)->lpVtbl->GetDefaultValue(This,Api,Value)
#define ICodecAPI_GetValue(This,Api,Value) (This)->lpVtbl->GetValue(This,Api,Value)
#define ICodecAPI_SetValue(This,Api,Value) (This)->lpVtbl->SetValue(This,Api,Value)
#define ICodecAPI_RegisterForEvent(This,Api,userData) (This)->lpVtbl->RegisterForEvent(This,Api,userData)
#define ICodecAPI_UnregisterForEvent(This,Api) (This)->lpVtbl->UnregisterForEvent(This,Api)
#define ICodecAPI_SetAllDefaults(This) (This)->lpVtbl->SetAllDefaults(This)
#define ICodecAPI_SetValueWithNotify(This,Api,Value,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetValueWithNotify(This,Api,Value,ChangedParam,ChangedParamCount)
#define ICodecAPI_SetAllDefaultsWithNotify(This,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetAllDefaultsWithNotify(This,ChangedParam,ChangedParamCount)
#define ICodecAPI_GetAllSettings(This,a) (This)->lpVtbl->GetAllSettings(This,a)
#define ICodecAPI_SetAllSettings(This,a) (This)->lpVtbl->SetAllSettings(This,a)
#define ICodecAPI_SetAllSettingsWithNotify(This,a,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetAllSettingsWithNotify(This,a,ChangedParam,ChangedParamCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICodecAPI_QueryInterface(ICodecAPI* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICodecAPI_AddRef(ICodecAPI* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICodecAPI_Release(ICodecAPI* This) {
    return This->lpVtbl->Release(This);
}
/*** ICodecAPI methods ***/
static FORCEINLINE HRESULT ICodecAPI_IsSupported(ICodecAPI* This,const GUID *Api) {
    return This->lpVtbl->IsSupported(This,Api);
}
static FORCEINLINE HRESULT ICodecAPI_IsModifiable(ICodecAPI* This,const GUID *Api) {
    return This->lpVtbl->IsModifiable(This,Api);
}
static FORCEINLINE HRESULT ICodecAPI_GetParameterRange(ICodecAPI* This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta) {
    return This->lpVtbl->GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta);
}
static FORCEINLINE HRESULT ICodecAPI_GetParameterValues(ICodecAPI* This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount) {
    return This->lpVtbl->GetParameterValues(This,Api,Values,ValuesCount);
}
static FORCEINLINE HRESULT ICodecAPI_GetDefaultValue(ICodecAPI* This,const GUID *Api,VARIANT *Value) {
    return This->lpVtbl->GetDefaultValue(This,Api,Value);
}
static FORCEINLINE HRESULT ICodecAPI_GetValue(ICodecAPI* This,const GUID *Api,VARIANT *Value) {
    return This->lpVtbl->GetValue(This,Api,Value);
}
static FORCEINLINE HRESULT ICodecAPI_SetValue(ICodecAPI* This,const GUID *Api,VARIANT *Value) {
    return This->lpVtbl->SetValue(This,Api,Value);
}
static FORCEINLINE HRESULT ICodecAPI_RegisterForEvent(ICodecAPI* This,const GUID *Api,LONG_PTR userData) {
    return This->lpVtbl->RegisterForEvent(This,Api,userData);
}
static FORCEINLINE HRESULT ICodecAPI_UnregisterForEvent(ICodecAPI* This,const GUID *Api) {
    return This->lpVtbl->UnregisterForEvent(This,Api);
}
static FORCEINLINE HRESULT ICodecAPI_SetAllDefaults(ICodecAPI* This) {
    return This->lpVtbl->SetAllDefaults(This);
}
static FORCEINLINE HRESULT ICodecAPI_SetValueWithNotify(ICodecAPI* This,const GUID *Api,VARIANT *Value,GUID **ChangedParam,ULONG *ChangedParamCount) {
    return This->lpVtbl->SetValueWithNotify(This,Api,Value,ChangedParam,ChangedParamCount);
}
static FORCEINLINE HRESULT ICodecAPI_SetAllDefaultsWithNotify(ICodecAPI* This,GUID **ChangedParam,ULONG *ChangedParamCount) {
    return This->lpVtbl->SetAllDefaultsWithNotify(This,ChangedParam,ChangedParamCount);
}
static FORCEINLINE HRESULT ICodecAPI_GetAllSettings(ICodecAPI* This,IStream *a) {
    return This->lpVtbl->GetAllSettings(This,a);
}
static FORCEINLINE HRESULT ICodecAPI_SetAllSettings(ICodecAPI* This,IStream *a) {
    return This->lpVtbl->SetAllSettings(This,a);
}
static FORCEINLINE HRESULT ICodecAPI_SetAllSettingsWithNotify(ICodecAPI* This,IStream *a,GUID **ChangedParam,ULONG *ChangedParamCount) {
    return This->lpVtbl->SetAllSettingsWithNotify(This,a,ChangedParam,ChangedParamCount);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ICodecAPI_IsSupported_Proxy(
    ICodecAPI* This,
    const GUID *Api);
void __RPC_STUB ICodecAPI_IsSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_IsModifiable_Proxy(
    ICodecAPI* This,
    const GUID *Api);
void __RPC_STUB ICodecAPI_IsModifiable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_GetParameterRange_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT *ValueMin,
    VARIANT *ValueMax,
    VARIANT *SteppingDelta);
void __RPC_STUB ICodecAPI_GetParameterRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_GetParameterValues_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT **Values,
    ULONG *ValuesCount);
void __RPC_STUB ICodecAPI_GetParameterValues_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_GetDefaultValue_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT *Value);
void __RPC_STUB ICodecAPI_GetDefaultValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_GetValue_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT *Value);
void __RPC_STUB ICodecAPI_GetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetValue_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT *Value);
void __RPC_STUB ICodecAPI_SetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_RegisterForEvent_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    LONG_PTR userData);
void __RPC_STUB ICodecAPI_RegisterForEvent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_UnregisterForEvent_Proxy(
    ICodecAPI* This,
    const GUID *Api);
void __RPC_STUB ICodecAPI_UnregisterForEvent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetAllDefaults_Proxy(
    ICodecAPI* This);
void __RPC_STUB ICodecAPI_SetAllDefaults_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetValueWithNotify_Proxy(
    ICodecAPI* This,
    const GUID *Api,
    VARIANT *Value,
    GUID **ChangedParam,
    ULONG *ChangedParamCount);
void __RPC_STUB ICodecAPI_SetValueWithNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetAllDefaultsWithNotify_Proxy(
    ICodecAPI* This,
    GUID **ChangedParam,
    ULONG *ChangedParamCount);
void __RPC_STUB ICodecAPI_SetAllDefaultsWithNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_GetAllSettings_Proxy(
    ICodecAPI* This,
    IStream *a);
void __RPC_STUB ICodecAPI_GetAllSettings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetAllSettings_Proxy(
    ICodecAPI* This,
    IStream *a);
void __RPC_STUB ICodecAPI_SetAllSettings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ICodecAPI_SetAllSettingsWithNotify_Proxy(
    ICodecAPI* This,
    IStream *a,
    GUID **ChangedParam,
    ULONG *ChangedParamCount);
void __RPC_STUB ICodecAPI_SetAllSettingsWithNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ICodecAPI_INTERFACE_DEFINED__ */

#endif
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __icodecapi_h__ */
                                                                                      usr/share/mingw-w64/include/icrsint.h                                                               0100644 0000000 0000000 00000006571 12404413021 016166  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _ICRSINT_H_
#define _ICRSINT_H_

#include <olectl.h>
#include <stddef.h>

class CADORecordBinding;

#define classoffset(base,derived) ((DWORD_PTR)(static_cast<base*>((derived*)8))-8)

enum ADOFieldStatusEnum {
  adFldOK = 0,adFldBadAccessor = 1,adFldCantConvertValue = 2,adFldNull = 3,adFldTruncated = 4,adFldSignMismatch = 5,adFldDataOverFlow = 6,
  adFldCantCreate = 7,adFldUnavailable = 8,adFldPermissionDenied = 9,adFldIntegrityViolation = 10,adFldSchemaViolation = 11,adFldBadStatus = 12,
  adFldDefault = 13
};

typedef struct stADO_BINDING_ENTRY {
  ULONG_PTR ulOrdinal;
  WORD wDataType;
  BYTE bPrecision;
  BYTE bScale;
  ULONG_PTR ulSize;
  ULONG_PTR ulBufferOffset;
  ULONG_PTR ulStatusOffset;
  ULONG_PTR ulLengthOffset;
  ULONG_PTR ulADORecordBindingOffSet;
  WINBOOL fModify;
} ADO_BINDING_ENTRY;

#define BEGIN_ADO_BINDING(cls) public: typedef cls ADORowClass; \
  const ADO_BINDING_ENTRY *WINAPI GetADOBindingEntries() { static const ADO_BINDING_ENTRY rgADOBindingEntries[] = {
#define ADO_FIXED_LENGTH_ENTRY(Ordinal,DataType,Buffer,Status,Modify) {Ordinal,DataType,0,0,0,offsetof(ADORowClass,Buffer),offsetof(ADORowClass,Status),0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_FIXED_LENGTH_ENTRY2(Ordinal,DataType,Buffer,Modify) {Ordinal,DataType,0,0,0,offsetof(ADORowClass,Buffer),0,0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_NUMERIC_ENTRY(Ordinal,DataType,Buffer,Precision,Scale,Status,Modify) {Ordinal,DataType,Precision,Scale,0,offsetof(ADORowClass,Buffer),offsetof(ADORowClass,Status),0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_NUMERIC_ENTRY2(Ordinal,DataType,Buffer,Precision,Scale,Modify) {Ordinal,DataType,Precision,Scale,0,offsetof(ADORowClass,Buffer),0,0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_VARIABLE_LENGTH_ENTRY(Ordinal,DataType,Buffer,Size,Status,Length,Modify) {Ordinal,DataType,0,0,Size,offsetof(ADORowClass,Buffer),offsetof(ADORowClass,Status),offsetof(ADORowClass,Length),classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_VARIABLE_LENGTH_ENTRY2(Ordinal,DataType,Buffer,Size,Status,Modify) {Ordinal,DataType,0,0,Size,offsetof(ADORowClass,Buffer),offsetof(ADORowClass,Status),0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_VARIABLE_LENGTH_ENTRY3(Ordinal,DataType,Buffer,Size,Length,Modify) {Ordinal,DataType,0,0,Size,offsetof(ADORowClass,Buffer),0,offsetof(ADORowClass,Length),classoffset(CADORecordBinding,ADORowClass),Modify},
#define ADO_VARIABLE_LENGTH_ENTRY4(Ordinal,DataType,Buffer,Size,Modify) {Ordinal,DataType,0,0,Size,offsetof(ADORowClass,Buffer),0,0,classoffset(CADORecordBinding,ADORowClass),Modify},
#define END_ADO_BINDING() {0,adEmpty,0,0,0,0,0,0,0,FALSE}}; return rgADOBindingEntries;}

class CADORecordBinding {
public:
  STDMETHOD_(const ADO_BINDING_ENTRY*,GetADOBindingEntries) (VOID) PURE;
};

struct __declspec(uuid("00000544-0000-0010-8000-00aa006d2ea4")) IADORecordBinding;
DECLARE_INTERFACE_(IADORecordBinding,IUnknown) {
public:
  STDMETHOD(BindToRecordset) (CADORecordBinding *pAdoRecordBinding) PURE;
  STDMETHOD(AddNew) (CADORecordBinding *pAdoRecordBinding) PURE;
  STDMETHOD(Update) (CADORecordBinding *pAdoRecordBinding) PURE;
};
#endif
                                                                                                                                       usr/share/mingw-w64/include/identitycommon.h                                                        0100644 0000000 0000000 00000000734 12404413021 017550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __IDENTIYCOMMON_H__
#define __IDENTIYCOMMON_H__
#if (_WIN32_WINNT >= 0x0601)

typedef enum _IDENTITY_TYPE {
  IDENTITIES_ALL       = 0,
  IDENTITIES_ME_ONLY   = 0x1 
} IDENTITY_TYPE;


#endif /*(_WIN32_WINNT >= 0x0601)*/
#endif /*__IDENTIYCOMMON_H__*/
                                    usr/share/mingw-w64/include/identitystore.h                                                         0100644 0000000 0000000 00000004456 12404413021 017421  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __IDENTITYSTORE_H__
#define __IDENTITYSTORE_H__

#include <objbase.h>

#if (_WIN32_WINNT >= 0x0601)

DEFINE_GUID(IID_IAssociatedIdentityProvider,0x2AF066B3,0x4CBB,0x4CBA,0xA7,0x98,0x20,0x4B,0x6A,0xF6,0x8C,0xC0);

#ifndef __IAssociatedIdentityProvider_FWD_DEFINED__
#define __IAssociatedIdentityProvider_FWD_DEFINED__
typedef struct IAssociatedIdentityProvider IAssociatedIdentityProvider;
#endif

#undef  INTERFACE
#define INTERFACE IAssociatedIdentityProvider
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IAssociatedIdentityProvider,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IAssociatedIdentityProvider methods */
    STDMETHOD_(HRESULT,AssociateIdentity)(THIS_ HWND hwndParent,IPropertyStore **ppPropertyStore) PURE;
    STDMETHOD_(HRESULT,ChangeCredential)(THIS_ HWND hwndParent,LPCWSTR lpszUniqueID) PURE;
    STDMETHOD_(HRESULT,DisassociateIdentity)(THIS_ HWND hwndParent,LPCWSTR lpszUniqueID) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IAssociatedIdentityProvider_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAssociatedIdentityProvider_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAssociatedIdentityProvider_Release(This) (This)->lpVtbl->Release(This)
#define IAssociatedIdentityProvider_AssociateIdentity(This,hwndParent,ppPropertyStore) (This)->lpVtbl->AssociateIdentity(This,hwndParent,ppPropertyStore)
#define IAssociatedIdentityProvider_ChangeCredential(This,hwndParent,lpszUniqueID) (This)->lpVtbl->ChangeCredential(This,hwndParent,lpszUniqueID)
#define IAssociatedIdentityProvider_DisassociateIdentity(This,hwndParent,lpszUniqueID) (This)->lpVtbl->DisassociateIdentity(This,hwndParent,lpszUniqueID)
#endif /*COBJMACROS*/

#endif /*(_WIN32_WINNT >= 0x0601)*/
#endif /* __IDENTITYSTORE_H__ */
                                                                                                                                                                                                                  usr/share/mingw-w64/include/idf.h                                                                   0100644 0000000 0000000 00000003365 12404413021 015253  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __IDF_H__
#define __IDF_H__

typedef struct tag_IDFHEADER {
  DWORD cbStruct;
  DWORD dwVersion;
  DWORD dwCreator;
  DWORD cbInstID;
  BYTE abInstID[1];
} IDFHEADER,*PIDFHEADER,*LPIDFHEADER;

typedef struct tag_IDFINSTINFO {
  DWORD cbStruct;
  DWORD dwManufactID;
  DWORD dwProductID;
  DWORD dwRevision;
  DWORD cbManufactASCII;
  DWORD cbManufactUNICODE;
  DWORD cbProductASCII;
  DWORD cbProductUNICODE;
  BYTE abData[1];
} IDFINSTINFO,*LPIDFINSTINFO;

typedef struct tag_IDFINSTCAPS {
  DWORD cbStruct;
  DWORD fdwFlags;
  DWORD dwBasicChannel;
  DWORD cNumChannels;
  DWORD cInstrumentPolyphony;
  DWORD cChannelPolyphony;
} IDFINSTCAPS,*PIDFINSTCAPS,*LPIDFINSTCAPS;

#define IDFINSTCAPS_F_GENERAL_MIDI 0x00000001
#define IDFINSTCAPS_F_SYSTEMEXCLUSIVE 0x00000002

typedef struct tag_IDFCHANNELHDR {
  DWORD cbStruct;
  DWORD dwGeneralMask;
  DWORD dwDrumMask;
  DWORD dwReserved;
  DWORD fdwFlags;
} IDFCHANNELHDR,*PIDFCHANNELHDR,*LPIDFCHANNELHDR;

#define IDFCHANNELHDR_F_GENERAL_MIDI 0x00000001

typedef struct tag_IDFCHANNELINFO {
  DWORD cbStruct;
  DWORD dwChannel;
  DWORD cbInitData;
  BYTE abData[];
} IDFCHANNELINFO,*PIDFCHANNELINFO,*LPIDFCHANNELINFO;

typedef struct tag_IDFPATCHMAPHDR {
  DWORD cbStruct;
  BYTE abPatchMap[128];
} IDFPATCHMAPHDR,*PIDFPATCHMAPHDR,*LPIDFPATCHMAPHDR;

typedef struct tag_IDFKEYMAPHDR {
  DWORD cbStruct;
  DWORD cNumKeyMaps;
  DWORD cbKeyMap;
} IDFKEYMAPHDR,*PIDFKEYMAPHDR,*LPIDFKEYMAPHDR;

typedef struct tag_IDFKEYMAP {
  DWORD cbStruct;
  BYTE abKeyMap[128];
} IDFKEYMAP,*PIDFKEYMAP,*LPIDFKEYMAP;

#endif
                                                                                                                                                                                                                                                                           usr/share/mingw-w64/include/idispids.h                                                              0100644 0000000 0000000 00000001037 12404413021 016313  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#define DISPID_READYSTATE (-525)
#define DISPID_READYSTATECHANGE (-609)
#define DISPID_AMBIENT_TRANSFERPRIORITY (-728)
#define DISPID_AMBIENT_OFFLINEIFNOTCONNECTED (-5501)
#define DISPID_AMBIENT_SILENT (-5502)

#ifndef DISPID_AMBIENT_CODEPAGE
#define DISPID_AMBIENT_CODEPAGE (-725)
#define DISPID_AMBIENT_CHARSET (-727)
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/iedial.h                                                                0100644 0000000 0000000 00000023250 12404413021 015733  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error This stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __iedial_h__
#define __iedial_h__

#ifndef __IDialEventSink_FWD_DEFINED__
#define __IDialEventSink_FWD_DEFINED__
typedef struct IDialEventSink IDialEventSink;
#endif

#ifndef __IDialEngine_FWD_DEFINED__
#define __IDialEngine_FWD_DEFINED__
typedef struct IDialEngine IDialEngine;
#endif

#ifndef __IDialBranding_FWD_DEFINED__
#define __IDialBranding_FWD_DEFINED__
typedef struct IDialBranding IDialBranding;
#endif

#include "unknwn.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

  extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_v0_0_s_ifspec;

#ifndef __IDialEventSink_INTERFACE_DEFINED__
#define __IDialEventSink_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDialEventSink;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDialEventSink : public IUnknown {
  public:
    virtual HRESULT WINAPI OnEvent(DWORD dwEvent,DWORD dwStatus) = 0;
  };
#else
  typedef struct IDialEventSinkVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDialEventSink *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDialEventSink *This);
      ULONG (WINAPI *Release)(IDialEventSink *This);
      HRESULT (WINAPI *OnEvent)(IDialEventSink *This,DWORD dwEvent,DWORD dwStatus);
    END_INTERFACE
  } IDialEventSinkVtbl;
  struct IDialEventSink {
    CONST_VTBL struct IDialEventSinkVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDialEventSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDialEventSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDialEventSink_Release(This) (This)->lpVtbl->Release(This)
#define IDialEventSink_OnEvent(This,dwEvent,dwStatus) (This)->lpVtbl->OnEvent(This,dwEvent,dwStatus)
#endif
#endif
  HRESULT WINAPI IDialEventSink_OnEvent_Proxy(IDialEventSink *This,DWORD dwEvent,DWORD dwStatus);
  void __RPC_STUB IDialEventSink_OnEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IDialEngine_INTERFACE_DEFINED__
#define __IDialEngine_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDialEngine;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDialEngine : public IUnknown {
  public:
    virtual HRESULT WINAPI Initialize(LPCWSTR pwzConnectoid,IDialEventSink *pIDES) = 0;
    virtual HRESULT WINAPI GetProperty(LPCWSTR pwzProperty,LPWSTR pwzValue,DWORD dwBufSize) = 0;
    virtual HRESULT WINAPI SetProperty(LPCWSTR pwzProperty,LPCWSTR pwzValue) = 0;
    virtual HRESULT WINAPI Dial(void) = 0;
    virtual HRESULT WINAPI HangUp(void) = 0;
    virtual HRESULT WINAPI GetConnectedState(DWORD *pdwState) = 0;
    virtual HRESULT WINAPI GetConnectHandle(DWORD_PTR *pdwHandle) = 0;
  };
#else
  typedef struct IDialEngineVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDialEngine *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDialEngine *This);
      ULONG (WINAPI *Release)(IDialEngine *This);
      HRESULT (WINAPI *Initialize)(IDialEngine *This,LPCWSTR pwzConnectoid,IDialEventSink *pIDES);
      HRESULT (WINAPI *GetProperty)(IDialEngine *This,LPCWSTR pwzProperty,LPWSTR pwzValue,DWORD dwBufSize);
      HRESULT (WINAPI *SetProperty)(IDialEngine *This,LPCWSTR pwzProperty,LPCWSTR pwzValue);
      HRESULT (WINAPI *Dial)(IDialEngine *This);
      HRESULT (WINAPI *HangUp)(IDialEngine *This);
      HRESULT (WINAPI *GetConnectedState)(IDialEngine *This,DWORD *pdwState);
      HRESULT (WINAPI *GetConnectHandle)(IDialEngine *This,DWORD_PTR *pdwHandle);
    END_INTERFACE
  } IDialEngineVtbl;
  struct IDialEngine {
    CONST_VTBL struct IDialEngineVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDialEngine_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDialEngine_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDialEngine_Release(This) (This)->lpVtbl->Release(This)
#define IDialEngine_Initialize(This,pwzConnectoid,pIDES) (This)->lpVtbl->Initialize(This,pwzConnectoid,pIDES)
#define IDialEngine_GetProperty(This,pwzProperty,pwzValue,dwBufSize) (This)->lpVtbl->GetProperty(This,pwzProperty,pwzValue,dwBufSize)
#define IDialEngine_SetProperty(This,pwzProperty,pwzValue) (This)->lpVtbl->SetProperty(This,pwzProperty,pwzValue)
#define IDialEngine_Dial(This) (This)->lpVtbl->Dial(This)
#define IDialEngine_HangUp(This) (This)->lpVtbl->HangUp(This)
#define IDialEngine_GetConnectedState(This,pdwState) (This)->lpVtbl->GetConnectedState(This,pdwState)
#define IDialEngine_GetConnectHandle(This,pdwHandle) (This)->lpVtbl->GetConnectHandle(This,pdwHandle)
#endif
#endif
  HRESULT WINAPI IDialEngine_Initialize_Proxy(IDialEngine *This,LPCWSTR pwzConnectoid,IDialEventSink *pIDES);
  void __RPC_STUB IDialEngine_Initialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_GetProperty_Proxy(IDialEngine *This,LPCWSTR pwzProperty,LPWSTR pwzValue,DWORD dwBufSize);
  void __RPC_STUB IDialEngine_GetProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_SetProperty_Proxy(IDialEngine *This,LPCWSTR pwzProperty,LPCWSTR pwzValue);
  void __RPC_STUB IDialEngine_SetProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_Dial_Proxy(IDialEngine *This);
  void __RPC_STUB IDialEngine_Dial_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_HangUp_Proxy(IDialEngine *This);
  void __RPC_STUB IDialEngine_HangUp_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_GetConnectedState_Proxy(IDialEngine *This,DWORD *pdwState);
  void __RPC_STUB IDialEngine_GetConnectedState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialEngine_GetConnectHandle_Proxy(IDialEngine *This,DWORD_PTR *pdwHandle);
  void __RPC_STUB IDialEngine_GetConnectHandle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IDialBranding_INTERFACE_DEFINED__
#define __IDialBranding_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IDialBranding;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IDialBranding : public IUnknown {
  public:
    virtual HRESULT WINAPI Initialize(LPCWSTR pwzConnectoid) = 0;
    virtual HRESULT WINAPI GetBitmap(DWORD dwIndex,HBITMAP *phBitmap) = 0;
  };
#else
  typedef struct IDialBrandingVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IDialBranding *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IDialBranding *This);
      ULONG (WINAPI *Release)(IDialBranding *This);
      HRESULT (WINAPI *Initialize)(IDialBranding *This,LPCWSTR pwzConnectoid);
      HRESULT (WINAPI *GetBitmap)(IDialBranding *This,DWORD dwIndex,HBITMAP *phBitmap);
    END_INTERFACE
  } IDialBrandingVtbl;
  struct IDialBranding {
    CONST_VTBL struct IDialBrandingVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IDialBranding_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDialBranding_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDialBranding_Release(This) (This)->lpVtbl->Release(This)
#define IDialBranding_Initialize(This,pwzConnectoid) (This)->lpVtbl->Initialize(This,pwzConnectoid)
#define IDialBranding_GetBitmap(This,dwIndex,phBitmap) (This)->lpVtbl->GetBitmap(This,dwIndex,phBitmap)
#endif
#endif
  HRESULT WINAPI IDialBranding_Initialize_Proxy(IDialBranding *This,LPCWSTR pwzConnectoid);
  void __RPC_STUB IDialBranding_Initialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IDialBranding_GetBitmap_Proxy(IDialBranding *This,DWORD dwIndex,HBITMAP *phBitmap);
  void __RPC_STUB IDialBranding_GetBitmap_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#define DIALPROP_USERNAME L"UserName"
#define DIALPROP_PASSWORD L"Password"
#define DIALPROP_DOMAIN L"Domain"
#define DIALPROP_SAVEPASSWORD L"SavePassword"
#define DIALPROP_REDIALCOUNT L"RedialCount"
#define DIALPROP_REDIALINTERVAL L"RedialInterval"
#define DIALPROP_PHONENUMBER L"PhoneNumber"
#define DIALPROP_LASTERROR L"LastError"
#define DIALPROP_RESOLVEDPHONE L"ResolvedPhone"

#define DIALENG_OperationComplete 0x10000
#define DIALENG_RedialAttempt 0x10001
#define DIALENG_RedialWait 0x10002

  extern RPC_IF_HANDLE __MIDL_itf_iedial_0266_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_iedial_0266_v0_0_s_ifspec;

  ULONG __RPC_API HBITMAP_UserSize(ULONG *,ULONG,HBITMAP *);
  unsigned char *__RPC_API HBITMAP_UserMarshal(ULONG *,unsigned char *,HBITMAP *);
  unsigned char *__RPC_API HBITMAP_UserUnmarshal(ULONG *,unsigned char *,HBITMAP *);
  void __RPC_API HBITMAP_UserFree(ULONG *,HBITMAP *);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                        usr/share/mingw-w64/include/ieeefp.h                                                                0100644 0000000 0000000 00000000177 12404413015 015747  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #ifndef _IEEEFP_H_
#define _IEEEFP_H_

#include <crtdefs.h>
#include <math.h>
#include <ansidecl.h>

#endif /* _IEEE_FP_H_ */

                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/ieverp.h                                                                0100644 0000000 0000000 00000001057 12404413021 015777  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#define VER_MAJOR_PRODUCTVER 6
#define VER_MINOR_PRODUCTVER 0

#define VER_PRODUCTVERSION VER_MAJOR_PRODUCTVER,VER_MINOR_PRODUCTVER,VER_PRODUCTBUILD,VER_PRODUCTBUILD_QFE
#define VER_PRODUCTVERSION_W (0x0600)
#define VER_PRODUCTVERSION_DW (0x06000000 | VER_PRODUCTBUILD)

#define VER_PRODUCTBETA_STR ""
#define VER_PRODUCTVERSION_STRING "6.00"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/ifdef.h                                                                 0100644 0000000 0000000 00000005123 12404413021 015560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _INC_IFDEF
#define _INC_IFDEF

#include <ipifcons.h>

#ifdef __cplusplus
extern "C" {
#endif

#define IF_MAX_STRING_SIZE 256
#define IF_MAX_PHYS_ADDRESS_LENGTH 32

typedef UINT32 NET_IF_COMPARTMENT_ID, *PNET_IF_COMPARTMENT_ID;

typedef ULONG NET_IFINDEX, *PNET_IFINDEX;
typedef UINT16 NET_IFTYPE, *PNET_IFTYPE;
typedef NET_IFINDEX IF_INDEX, *PIF_INDEX;

typedef GUID NET_IF_NETWORK_GUID;

typedef enum _IF_OPER_STATUS {
  IfOperStatusUp               = 1,
  IfOperStatusDown,
  IfOperStatusTesting,
  IfOperStatusUnknown,
  IfOperStatusDormant,
  IfOperStatusNotPresent,
  IfOperStatusLowerLayerDown 
} IF_OPER_STATUS;

typedef enum _NET_IF_ADMIN_STATUS {
  NET_IF_ADMIN_STATUS_UP        = 1,
  NET_IF_ADMIN_STATUS_DOWN,
  NET_IF_ADMIN_STATUS_TESTING 
} NET_IF_ADMIN_STATUS, *PNET_IF_ADMIN_STATUS;

typedef enum _NET_IF_MEDIA_CONNECT_STATE {
  MediaConnectStateUnknown,
  MediaConnectStateConnected,
  MediaConnectStateDisconnected 
} NET_IF_MEDIA_CONNECT_STATE, *PNET_IF_MEDIA_CONNECT_STATE;

typedef enum _NET_IF_ACCESS_TYPE {
  NET_IF_ACCESS_LOOPBACK               = 1,
  NET_IF_ACCESS_BROADCAST,
  NET_IF_ACCESS_POINT_TO_POINT,
  NET_IF_ACCESS_POINT_TO_MULTI_POINT,
  NET_IF_ACCESS_MAXIMUM 
} NET_IF_ACCESS_TYPE, *PNET_IF_ACCESS_TYPE;

typedef enum _NET_IF_CONNECTION_TYPE {
  NET_IF_CONNECTION_DEDICATED   = 1,
  NET_IF_CONNECTION_PASSIVE,
  NET_IF_CONNECTION_DEMAND,
  NET_IF_CONNECTION_MAXIMUM 
} NET_IF_CONNECTION_TYPE, *PNET_IF_CONNECTION_TYPE;

typedef enum _NET_IF_DIRECTION_TYPE {
  NET_IF_DIRECTION_SENDRECEIVE,
  NET_IF_DIRECTION_SENDONLY,
  NET_IF_DIRECTION_RECEIVEONLY,
  NET_IF_DIRECTION_MAXIMUM 
} NET_IF_DIRECTION_TYPE, *PNET_IF_DIRECTION_TYPE;

typedef enum _NET_IF_MEDIA_DUPLEX_STATE {
  MediaDuplexStateUnknown,
  MediaDuplexStateHalf,
  MediaDuplexStateFull 
} NET_IF_MEDIA_DUPLEX_STATE, *PNET_IF_MEDIA_DUPLEX_STATE;

typedef enum _TUNNEL_TYPE {
  TUNNEL_TYPE_NONE      = 0,
  TUNNEL_TYPE_OTHER     = 1,
  TUNNEL_TYPE_DIRECT    = 2,
  TUNNEL_TYPE_6TO4      = 11,
  TUNNEL_TYPE_ISATAP    = 13,
  TUNNEL_TYPE_TEREDO    = 14,
  TUNNEL_TYPE_IPHTTPS   = 15
} TUNNEL_TYPE, *PTUNNEL_TYPE;

typedef union _NET_LUID {
  ULONG64 Value;
  __C89_NAMELESS struct { /* bitfield with 64 bit types. */
    ULONG64 Reserved  :24;
    ULONG64 NetLuidIndex  :24;
    ULONG64 IfType  :16;
  } Info;
} NET_LUID, *PNET_LUID;

typedef NET_LUID IF_LUID, *PIF_LUID;

#ifdef __cplusplus
}
#endif

#endif /* _INC_IFDEF */

                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/share/mingw-w64/include/iiis.h                                                                  0100644 0000000 0000000 00000074770 12404413021 015456  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __iiis_h__
#define __iiis_h__

#ifndef __IISMimeType_FWD_DEFINED__
#define __IISMimeType_FWD_DEFINED__
typedef struct IISMimeType IISMimeType;
#endif

#ifndef __MimeMap_FWD_DEFINED__
#define __MimeMap_FWD_DEFINED__
#ifdef __cplusplus
typedef class MimeMap MimeMap;
#else
typedef struct MimeMap MimeMap;
#endif
#endif

#ifndef __IISIPSecurity_FWD_DEFINED__
#define __IISIPSecurity_FWD_DEFINED__
typedef struct IISIPSecurity IISIPSecurity;
#endif

#ifndef __IPSecurity_FWD_DEFINED__
#define __IPSecurity_FWD_DEFINED__
#ifdef __cplusplus
typedef class IPSecurity IPSecurity;
#else
typedef struct IPSecurity IPSecurity;
#endif
#endif

#ifndef __IISNamespace_FWD_DEFINED__
#define __IISNamespace_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISNamespace IISNamespace;
#else
typedef struct IISNamespace IISNamespace;
#endif
#endif

#ifndef __IISProvider_FWD_DEFINED__
#define __IISProvider_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISProvider IISProvider;
#else
typedef struct IISProvider IISProvider;
#endif
#endif

#ifndef __IISBaseObject_FWD_DEFINED__
#define __IISBaseObject_FWD_DEFINED__
typedef struct IISBaseObject IISBaseObject;
#endif

#ifndef __IISSchemaObject_FWD_DEFINED__
#define __IISSchemaObject_FWD_DEFINED__
typedef struct IISSchemaObject IISSchemaObject;
#endif

#ifndef __IISPropertyAttribute_FWD_DEFINED__
#define __IISPropertyAttribute_FWD_DEFINED__
typedef struct IISPropertyAttribute IISPropertyAttribute;
#endif

#ifndef __PropertyAttribute_FWD_DEFINED__
#define __PropertyAttribute_FWD_DEFINED__
#ifdef __cplusplus
typedef class PropertyAttribute PropertyAttribute;
#else
typedef struct PropertyAttribute PropertyAttribute;
#endif
#endif

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

  DEFINE_GUID(LIBID_IISOle,0x49D704A0,0x89F7,0x11D0,0x85,0x27,0x00,0xC0,0x4F,0xD8,0xD5,0x03);
  DEFINE_GUID(IID_IISBaseObject,0x4b42e390,0xe96,0x11d1,0x9c,0x3f,0x0,0xa0,0xc9,0x22,0xe7,0x3);

  extern RPC_IF_HANDLE __MIDL_itf_iis_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_iis_0000_v0_0_s_ifspec;

#ifndef __IISOle_LIBRARY_DEFINED__
#define __IISOle_LIBRARY_DEFINED__
  EXTERN_C const IID LIBID_IISOle;
#ifndef __IISMimeType_INTERFACE_DEFINED__
#define __IISMimeType_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISMimeType;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISMimeType : public IDispatch {
  public:
    virtual HRESULT WINAPI get_MimeType(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_MimeType(BSTR bstrMimeType) = 0;
    virtual HRESULT WINAPI get_Extension(BSTR *retval) = 0;
    virtual HRESULT WINAPI put_Extension(BSTR bstrExtension) = 0;
  };
#else
  typedef struct IISMimeTypeVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISMimeType *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IISMimeType *This);
      ULONG (WINAPI *Release)(IISMimeType *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IISMimeType *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IISMimeType *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IISMimeType *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IISMimeType *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_MimeType)(IISMimeType *This,BSTR *retval);
      HRESULT (WINAPI *put_MimeType)(IISMimeType *This,BSTR bstrMimeType);
      HRESULT (WINAPI *get_Extension)(IISMimeType *This,BSTR *retval);
      HRESULT (WINAPI *put_Extension)(IISMimeType *This,BSTR bstrExtension);
    END_INTERFACE
  } IISMimeTypeVtbl;
  struct IISMimeType {
    CONST_VTBL struct IISMimeTypeVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISMimeType_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IISMimeType_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IISMimeType_Release(This) (This)->lpVtbl->Release(This)
#define IISMimeType_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IISMimeType_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IISMimeType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IISMimeType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IISMimeType_get_MimeType(This,retval) (This)->lpVtbl->get_MimeType(This,retval)
#define IISMimeType_put_MimeType(This,bstrMimeType) (This)->lpVtbl->put_MimeType(This,bstrMimeType)
#define IISMimeType_get_Extension(This,retval) (This)->lpVtbl->get_Extension(This,retval)
#define IISMimeType_put_Extension(This,bstrExtension) (This)->lpVtbl->put_Extension(This,bstrExtension)
#endif
#endif
  HRESULT WINAPI IISMimeType_get_MimeType_Proxy(IISMimeType *This,BSTR *retval);
  void __RPC_STUB IISMimeType_get_MimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISMimeType_put_MimeType_Proxy(IISMimeType *This,BSTR bstrMimeType);
  void __RPC_STUB IISMimeType_put_MimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISMimeType_get_Extension_Proxy(IISMimeType *This,BSTR *retval);
  void __RPC_STUB IISMimeType_get_Extension_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISMimeType_put_Extension_Proxy(IISMimeType *This,BSTR bstrExtension);
  void __RPC_STUB IISMimeType_put_Extension_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_MimeMap;
#ifdef __cplusplus
  class MimeMap;
#endif

#ifndef __IISIPSecurity_INTERFACE_DEFINED__
#define __IISIPSecurity_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISIPSecurity;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISIPSecurity : public IDispatch {
  public:
    virtual HRESULT WINAPI get_IPDeny(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_IPDeny(VARIANT vIPDeny) = 0;
    virtual HRESULT WINAPI get_IPGrant(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_IPGrant(VARIANT vIPGrant) = 0;
    virtual HRESULT WINAPI get_DomainDeny(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_DomainDeny(VARIANT vDomainDeny) = 0;
    virtual HRESULT WINAPI get_DomainGrant(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_DomainGrant(VARIANT vDomainGrant) = 0;
    virtual HRESULT WINAPI get_GrantByDefault(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_GrantByDefault(VARIANT_BOOL fGrantByDefault) = 0;
  };
#else
  typedef struct IISIPSecurityVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISIPSecurity *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IISIPSecurity *This);
      ULONG (WINAPI *Release)(IISIPSecurity *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IISIPSecurity *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IISIPSecurity *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IISIPSecurity *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IISIPSecurity *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_IPDeny)(IISIPSecurity *This,VARIANT *retval);
      HRESULT (WINAPI *put_IPDeny)(IISIPSecurity *This,VARIANT vIPDeny);
      HRESULT (WINAPI *get_IPGrant)(IISIPSecurity *This,VARIANT *retval);
      HRESULT (WINAPI *put_IPGrant)(IISIPSecurity *This,VARIANT vIPGrant);
      HRESULT (WINAPI *get_DomainDeny)(IISIPSecurity *This,VARIANT *retval);
      HRESULT (WINAPI *put_DomainDeny)(IISIPSecurity *This,VARIANT vDomainDeny);
      HRESULT (WINAPI *get_DomainGrant)(IISIPSecurity *This,VARIANT *retval);
      HRESULT (WINAPI *put_DomainGrant)(IISIPSecurity *This,VARIANT vDomainGrant);
      HRESULT (WINAPI *get_GrantByDefault)(IISIPSecurity *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_GrantByDefault)(IISIPSecurity *This,VARIANT_BOOL fGrantByDefault);
    END_INTERFACE
  } IISIPSecurityVtbl;
  struct IISIPSecurity {
    CONST_VTBL struct IISIPSecurityVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISIPSecurity_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IISIPSecurity_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IISIPSecurity_Release(This) (This)->lpVtbl->Release(This)
#define IISIPSecurity_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IISIPSecurity_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IISIPSecurity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IISIPSecurity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IISIPSecurity_get_IPDeny(This,retval) (This)->lpVtbl->get_IPDeny(This,retval)
#define IISIPSecurity_put_IPDeny(This,vIPDeny) (This)->lpVtbl->put_IPDeny(This,vIPDeny)
#define IISIPSecurity_get_IPGrant(This,retval) (This)->lpVtbl->get_IPGrant(This,retval)
#define IISIPSecurity_put_IPGrant(This,vIPGrant) (This)->lpVtbl->put_IPGrant(This,vIPGrant)
#define IISIPSecurity_get_DomainDeny(This,retval) (This)->lpVtbl->get_DomainDeny(This,retval)
#define IISIPSecurity_put_DomainDeny(This,vDomainDeny) (This)->lpVtbl->put_DomainDeny(This,vDomainDeny)
#define IISIPSecurity_get_DomainGrant(This,retval) (This)->lpVtbl->get_DomainGrant(This,retval)
#define IISIPSecurity_put_DomainGrant(This,vDomainGrant) (This)->lpVtbl->put_DomainGrant(This,vDomainGrant)
#define IISIPSecurity_get_GrantByDefault(This,retval) (This)->lpVtbl->get_GrantByDefault(This,retval)
#define IISIPSecurity_put_GrantByDefault(This,fGrantByDefault) (This)->lpVtbl->put_GrantByDefault(This,fGrantByDefault)
#endif
#endif
  HRESULT WINAPI IISIPSecurity_get_IPDeny_Proxy(IISIPSecurity *This,VARIANT *retval);
  void __RPC_STUB IISIPSecurity_get_IPDeny_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_put_IPDeny_Proxy(IISIPSecurity *This,VARIANT vIPDeny);
  void __RPC_STUB IISIPSecurity_put_IPDeny_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_get_IPGrant_Proxy(IISIPSecurity *This,VARIANT *retval);
  void __RPC_STUB IISIPSecurity_get_IPGrant_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_put_IPGrant_Proxy(IISIPSecurity *This,VARIANT vIPGrant);
  void __RPC_STUB IISIPSecurity_put_IPGrant_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_get_DomainDeny_Proxy(IISIPSecurity *This,VARIANT *retval);
  void __RPC_STUB IISIPSecurity_get_DomainDeny_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_put_DomainDeny_Proxy(IISIPSecurity *This,VARIANT vDomainDeny);
  void __RPC_STUB IISIPSecurity_put_DomainDeny_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_get_DomainGrant_Proxy(IISIPSecurity *This,VARIANT *retval);
  void __RPC_STUB IISIPSecurity_get_DomainGrant_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_put_DomainGrant_Proxy(IISIPSecurity *This,VARIANT vDomainGrant);
  void __RPC_STUB IISIPSecurity_put_DomainGrant_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_get_GrantByDefault_Proxy(IISIPSecurity *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISIPSecurity_get_GrantByDefault_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISIPSecurity_put_GrantByDefault_Proxy(IISIPSecurity *This,VARIANT_BOOL fGrantByDefault);
  void __RPC_STUB IISIPSecurity_put_GrantByDefault_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_IPSecurity;
#ifdef __cplusplus
  class IPSecurity;
#endif
  EXTERN_C const CLSID CLSID_IISNamespace;
#ifdef __cplusplus
  class IISNamespace;
#endif
  EXTERN_C const CLSID CLSID_IISProvider;
#ifdef __cplusplus
  class IISProvider;
#endif

#ifndef __IISBaseObject_INTERFACE_DEFINED__
#define __IISBaseObject_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISBaseObject;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISBaseObject : public IDispatch {
  public:
    virtual HRESULT WINAPI GetDataPaths(BSTR bstrName,LONG lnAttribute,VARIANT *pvPaths) = 0;
    virtual HRESULT WINAPI GetPropertyAttribObj(BSTR bstrName,IDispatch **ppObject) = 0;

  };
#else
  typedef struct IISBaseObjectVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISBaseObject *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IISBaseObject *This);
      ULONG (WINAPI *Release)(IISBaseObject *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IISBaseObject *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IISBaseObject *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IISBaseObject *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IISBaseObject *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *GetDataPaths)(IISBaseObject *This,BSTR bstrName,LONG lnAttribute,VARIANT *pvPaths);
      HRESULT (WINAPI *GetPropertyAttribObj)(IISBaseObject *This,BSTR bstrName,IDispatch **ppObject);
    END_INTERFACE
  } IISBaseObjectVtbl;
  struct IISBaseObject {
    CONST_VTBL struct IISBaseObjectVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISBaseObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IISBaseObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IISBaseObject_Release(This) (This)->lpVtbl->Release(This)
#define IISBaseObject_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IISBaseObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IISBaseObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IISBaseObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IISBaseObject_GetDataPaths(This,bstrName,lnAttribute,pvPaths) (This)->lpVtbl->GetDataPaths(This,bstrName,lnAttribute,pvPaths)
#define IISBaseObject_GetPropertyAttribObj(This,bstrName,ppObject) (This)->lpVtbl->GetPropertyAttribObj(This,bstrName,ppObject)
#endif
#endif
  HRESULT WINAPI IISBaseObject_GetDataPaths_Proxy(IISBaseObject *This,BSTR bstrName,LONG lnAttribute,VARIANT *pvPaths);
  void __RPC_STUB IISBaseObject_GetDataPaths_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISBaseObject_GetPropertyAttribObj_Proxy(IISBaseObject *This,BSTR bstrName,IDispatch **ppObject);
  void __RPC_STUB IISBaseObject_GetPropertyAttribObj_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISSchemaObject_INTERFACE_DEFINED__
#define __IISSchemaObject_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISSchemaObject;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISSchemaObject : public IDispatch {
  public:
    virtual HRESULT WINAPI GetSchemaPropertyAttributes(BSTR bstrName,IDispatch **ppObject) = 0;
    virtual HRESULT WINAPI PutSchemaPropertyAttributes(IDispatch *pObject) = 0;
  };
#else
  typedef struct IISSchemaObjectVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISSchemaObject *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IISSchemaObject *This);
      ULONG (WINAPI *Release)(IISSchemaObject *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IISSchemaObject *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IISSchemaObject *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IISSchemaObject *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IISSchemaObject *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *GetSchemaPropertyAttributes)(IISSchemaObject *This,BSTR bstrName,IDispatch **ppObject);
      HRESULT (WINAPI *PutSchemaPropertyAttributes)(IISSchemaObject *This,IDispatch *pObject);
    END_INTERFACE
  } IISSchemaObjectVtbl;
  struct IISSchemaObject {
    CONST_VTBL struct IISSchemaObjectVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISSchemaObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IISSchemaObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IISSchemaObject_Release(This) (This)->lpVtbl->Release(This)
#define IISSchemaObject_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IISSchemaObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IISSchemaObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IISSchemaObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IISSchemaObject_GetSchemaPropertyAttributes(This,bstrName,ppObject) (This)->lpVtbl->GetSchemaPropertyAttributes(This,bstrName,ppObject)
#define IISSchemaObject_PutSchemaPropertyAttributes(This,pObject) (This)->lpVtbl->PutSchemaPropertyAttributes(This,pObject)
#endif
#endif
  HRESULT WINAPI IISSchemaObject_GetSchemaPropertyAttributes_Proxy(IISSchemaObject *This,BSTR bstrName,IDispatch **ppObject);
  void __RPC_STUB IISSchemaObject_GetSchemaPropertyAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISSchemaObject_PutSchemaPropertyAttributes_Proxy(IISSchemaObject *This,IDispatch *pObject);
  void __RPC_STUB IISSchemaObject_PutSchemaPropertyAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISPropertyAttribute_INTERFACE_DEFINED__
#define __IISPropertyAttribute_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISPropertyAttribute;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISPropertyAttribute : public IDispatch {
  public:
    virtual HRESULT WINAPI get_PropName(BSTR *retval) = 0;
    virtual HRESULT WINAPI get_MetaId(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_MetaId(__LONG32 lnMetaId) = 0;
    virtual HRESULT WINAPI get_UserType(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI put_UserType(__LONG32 lnUserType) = 0;
    virtual HRESULT WINAPI get_AllAttributes(__LONG32 *retval) = 0;
    virtual HRESULT WINAPI get_Inherit(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Inherit(VARIANT_BOOL fInherit) = 0;
    virtual HRESULT WINAPI get_Secure(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Secure(VARIANT_BOOL fSecure) = 0;
    virtual HRESULT WINAPI get_Reference(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Reference(VARIANT_BOOL fReference) = 0;
    virtual HRESULT WINAPI get_Volatile(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI put_Volatile(VARIANT_BOOL fVolatile) = 0;
    virtual HRESULT WINAPI get_Isinherit(VARIANT_BOOL *retval) = 0;
    virtual HRESULT WINAPI get_Default(VARIANT *retval) = 0;
    virtual HRESULT WINAPI put_Default(VARIANT vDefault) = 0;
  };
#else
  typedef struct IISPropertyAttributeVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISPropertyAttribute *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IISPropertyAttribute *This);
      ULONG (WINAPI *Release)(IISPropertyAttribute *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IISPropertyAttribute *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IISPropertyAttribute *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IISPropertyAttribute *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IISPropertyAttribute *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_PropName)(IISPropertyAttribute *This,BSTR *retval);
      HRESULT (WINAPI *get_MetaId)(IISPropertyAttribute *This,__LONG32 *retval);
      HRESULT (WINAPI *put_MetaId)(IISPropertyAttribute *This,__LONG32 lnMetaId);
      HRESULT (WINAPI *get_UserType)(IISPropertyAttribute *This,__LONG32 *retval);
      HRESULT (WINAPI *put_UserType)(IISPropertyAttribute *This,__LONG32 lnUserType);
      HRESULT (WINAPI *get_AllAttributes)(IISPropertyAttribute *This,__LONG32 *retval);
      HRESULT (WINAPI *get_Inherit)(IISPropertyAttribute *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Inherit)(IISPropertyAttribute *This,VARIANT_BOOL fInherit);
      HRESULT (WINAPI *get_Secure)(IISPropertyAttribute *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Secure)(IISPropertyAttribute *This,VARIANT_BOOL fSecure);
      HRESULT (WINAPI *get_Reference)(IISPropertyAttribute *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Reference)(IISPropertyAttribute *This,VARIANT_BOOL fReference);
      HRESULT (WINAPI *get_Volatile)(IISPropertyAttribute *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *put_Volatile)(IISPropertyAttribute *This,VARIANT_BOOL fVolatile);
      HRESULT (WINAPI *get_Isinherit)(IISPropertyAttribute *This,VARIANT_BOOL *retval);
      HRESULT (WINAPI *get_Default)(IISPropertyAttribute *This,VARIANT *retval);
      HRESULT (WINAPI *put_Default)(IISPropertyAttribute *This,VARIANT vDefault);
    END_INTERFACE
  } IISPropertyAttributeVtbl;
  struct IISPropertyAttribute {
    CONST_VTBL struct IISPropertyAttributeVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISPropertyAttribute_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IISPropertyAttribute_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IISPropertyAttribute_Release(This) (This)->lpVtbl->Release(This)
#define IISPropertyAttribute_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IISPropertyAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IISPropertyAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IISPropertyAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IISPropertyAttribute_get_PropName(This,retval) (This)->lpVtbl->get_PropName(This,retval)
#define IISPropertyAttribute_get_MetaId(This,retval) (This)->lpVtbl->get_MetaId(This,retval)
#define IISPropertyAttribute_put_MetaId(This,lnMetaId) (This)->lpVtbl->put_MetaId(This,lnMetaId)
#define IISPropertyAttribute_get_UserType(This,retval) (This)->lpVtbl->get_UserType(This,retval)
#define IISPropertyAttribute_put_UserType(This,lnUserType) (This)->lpVtbl->put_UserType(This,lnUserType)
#define IISPropertyAttribute_get_AllAttributes(This,retval) (This)->lpVtbl->get_AllAttributes(This,retval)
#define IISPropertyAttribute_get_Inherit(This,retval) (This)->lpVtbl->get_Inherit(This,retval)
#define IISPropertyAttribute_put_Inherit(This,fInherit) (This)->lpVtbl->put_Inherit(This,fInherit)
#define IISPropertyAttribute_get_Secure(This,retval) (This)->lpVtbl->get_Secure(This,retval)
#define IISPropertyAttribute_put_Secure(This,fSecure) (This)->lpVtbl->put_Secure(This,fSecure)
#define IISPropertyAttribute_get_Reference(This,retval) (This)->lpVtbl->get_Reference(This,retval)
#define IISPropertyAttribute_put_Reference(This,fReference) (This)->lpVtbl->put_Reference(This,fReference)
#define IISPropertyAttribute_get_Volatile(This,retval) (This)->lpVtbl->get_Volatile(This,retval)
#define IISPropertyAttribute_put_Volatile(This,fVolatile) (This)->lpVtbl->put_Volatile(This,fVolatile)
#define IISPropertyAttribute_get_Isinherit(This,retval) (This)->lpVtbl->get_Isinherit(This,retval)
#define IISPropertyAttribute_get_Default(This,retval) (This)->lpVtbl->get_Default(This,retval)
#define IISPropertyAttribute_put_Default(This,vDefault) (This)->lpVtbl->put_Default(This,vDefault)
#endif
#endif
  HRESULT WINAPI IISPropertyAttribute_get_PropName_Proxy(IISPropertyAttribute *This,BSTR *retval);
  void __RPC_STUB IISPropertyAttribute_get_PropName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_MetaId_Proxy(IISPropertyAttribute *This,__LONG32 *retval);
  void __RPC_STUB IISPropertyAttribute_get_MetaId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_MetaId_Proxy(IISPropertyAttribute *This,__LONG32 lnMetaId);
  void __RPC_STUB IISPropertyAttribute_put_MetaId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_UserType_Proxy(IISPropertyAttribute *This,__LONG32 *retval);
  void __RPC_STUB IISPropertyAttribute_get_UserType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_UserType_Proxy(IISPropertyAttribute *This,__LONG32 lnUserType);
  void __RPC_STUB IISPropertyAttribute_put_UserType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_AllAttributes_Proxy(IISPropertyAttribute *This,__LONG32 *retval);
  void __RPC_STUB IISPropertyAttribute_get_AllAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Inherit_Proxy(IISPropertyAttribute *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISPropertyAttribute_get_Inherit_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_Inherit_Proxy(IISPropertyAttribute *This,VARIANT_BOOL fInherit);
  void __RPC_STUB IISPropertyAttribute_put_Inherit_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Secure_Proxy(IISPropertyAttribute *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISPropertyAttribute_get_Secure_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_Secure_Proxy(IISPropertyAttribute *This,VARIANT_BOOL fSecure);
  void __RPC_STUB IISPropertyAttribute_put_Secure_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Reference_Proxy(IISPropertyAttribute *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISPropertyAttribute_get_Reference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_Reference_Proxy(IISPropertyAttribute *This,VARIANT_BOOL fReference);
  void __RPC_STUB IISPropertyAttribute_put_Reference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Volatile_Proxy(IISPropertyAttribute *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISPropertyAttribute_get_Volatile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_Volatile_Proxy(IISPropertyAttribute *This,VARIANT_BOOL fVolatile);
  void __RPC_STUB IISPropertyAttribute_put_Volatile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Isinherit_Proxy(IISPropertyAttribute *This,VARIANT_BOOL *retval);
  void __RPC_STUB IISPropertyAttribute_get_Isinherit_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_get_Default_Proxy(IISPropertyAttribute *This,VARIANT *retval);
  void __RPC_STUB IISPropertyAttribute_get_Default_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISPropertyAttribute_put_Default_Proxy(IISPropertyAttribute *This,VARIANT vDefault);
  void __RPC_STUB IISPropertyAttribute_put_Default_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_PropertyAttribute;
#ifdef __cplusplus
  class PropertyAttribute;
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif
        usr/share/mingw-w64/include/iiisext.h                                                               0100644 0000000 0000000 00000224100 12404413021 016157  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error This stub requires an updated version of <rpcndr.h>
#endif

#ifndef __iiisext_h__
#define __iiisext_h__

#ifndef __IISApplicationPool_FWD_DEFINED__
#define __IISApplicationPool_FWD_DEFINED__
typedef struct IISApplicationPool IISApplicationPool;
#endif

#ifndef __IISApplicationPools_FWD_DEFINED__
#define __IISApplicationPools_FWD_DEFINED__
typedef struct IISApplicationPools IISApplicationPools;
#endif

#ifndef __IISWebService_FWD_DEFINED__
#define __IISWebService_FWD_DEFINED__
typedef struct IISWebService IISWebService;
#endif

#ifndef __IISDsCrMap_FWD_DEFINED__
#define __IISDsCrMap_FWD_DEFINED__
typedef struct IISDsCrMap IISDsCrMap;
#endif

#ifndef __IISApp_FWD_DEFINED__
#define __IISApp_FWD_DEFINED__
typedef struct IISApp IISApp;
#endif

#ifndef __IISApp2_FWD_DEFINED__
#define __IISApp2_FWD_DEFINED__
typedef struct IISApp2 IISApp2;
#endif

#ifndef __IISApp3_FWD_DEFINED__
#define __IISApp3_FWD_DEFINED__
typedef struct IISApp3 IISApp3;
#endif

#ifndef __IISComputer_FWD_DEFINED__
#define __IISComputer_FWD_DEFINED__
typedef struct IISComputer IISComputer;
#endif

#ifndef __IISComputer2_FWD_DEFINED__
#define __IISComputer2_FWD_DEFINED__
typedef struct IISComputer2 IISComputer2;
#endif

#ifndef __IISExtComputer_FWD_DEFINED__
#define __IISExtComputer_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtComputer IISExtComputer;
#else
typedef struct IISExtComputer IISExtComputer;
#endif
#endif

#ifndef __IISExtApp_FWD_DEFINED__
#define __IISExtApp_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtApp IISExtApp;
#else
typedef struct IISExtApp IISExtApp;
#endif
#endif

#ifndef __IISExtServer_FWD_DEFINED__
#define __IISExtServer_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtServer IISExtServer;
#else
typedef struct IISExtServer IISExtServer;
#endif
#endif

#ifndef __IISExtDsCrMap_FWD_DEFINED__
#define __IISExtDsCrMap_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtDsCrMap IISExtDsCrMap;
#else
typedef struct IISExtDsCrMap IISExtDsCrMap;
#endif
#endif

#ifndef __IISExtApplicationPool_FWD_DEFINED__
#define __IISExtApplicationPool_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtApplicationPool IISExtApplicationPool;
#else
typedef struct IISExtApplicationPool IISExtApplicationPool;
#endif
#endif

#ifndef __IISExtApplicationPools_FWD_DEFINED__
#define __IISExtApplicationPools_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtApplicationPools IISExtApplicationPools;
#else
typedef struct IISExtApplicationPools IISExtApplicationPools;
#endif
#endif

#ifndef __IISExtWebService_FWD_DEFINED__
#define __IISExtWebService_FWD_DEFINED__
#ifdef __cplusplus
typedef class IISExtWebService IISExtWebService;
#else
typedef struct IISExtWebService IISExtWebService;
#endif
#endif

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

#ifndef __IISExt_LIBRARY_DEFINED__
#define __IISExt_LIBRARY_DEFINED__
  EXTERN_C const IID LIBID_IISExt;
#ifndef __IISApplicationPool_INTERFACE_DEFINED__
#define __IISApplicationPool_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISApplicationPool;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISApplicationPool : public IADs {
  public:
    virtual HRESULT WINAPI Recycle(void) = 0;
    virtual HRESULT WINAPI EnumAppsInPool(VARIANT *bstrBuffer) = 0;
    virtual HRESULT WINAPI Start(void) = 0;
    virtual HRESULT WINAPI Stop(void) = 0;
  };
#else
  typedef struct IISApplicationPoolVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISApplicationPool *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISApplicationPool *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISApplicationPool *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISApplicationPool *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISApplicationPool *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISApplicationPool *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISApplicationPool *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISApplicationPool *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISApplicationPool *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISApplicationPool *This,void *retval);
      HRESULT (WINAPI *Get)(IISApplicationPool *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISApplicationPool *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISApplicationPool *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISApplicationPool *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISApplicationPool *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *Recycle)(IISApplicationPool *This);
      HRESULT (WINAPI *EnumAppsInPool)(IISApplicationPool *This,VARIANT *bstrBuffer);
      HRESULT (WINAPI *Start)(IISApplicationPool *This);
      HRESULT (WINAPI *Stop)(IISApplicationPool *This);
    END_INTERFACE
  } IISApplicationPoolVtbl;
  struct IISApplicationPool {
    CONST_VTBL struct IISApplicationPoolVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISApplicationPool_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISApplicationPool_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISApplicationPool_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISApplicationPool_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISApplicationPool_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISApplicationPool_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISApplicationPool_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISApplicationPool_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISApplicationPool_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISApplicationPool_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISApplicationPool_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISApplicationPool_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISApplicationPool_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISApplicationPool_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISApplicationPool_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISApplicationPool_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISApplicationPool_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISApplicationPool_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISApplicationPool_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISApplicationPool_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISApplicationPool_Recycle(This) (This)->lpVtbl->Recycle(This)
#define IISApplicationPool_EnumAppsInPool(This,bstrBuffer) (This)->lpVtbl->EnumAppsInPool(This,bstrBuffer)
#define IISApplicationPool_Start(This) (This)->lpVtbl->Start(This)
#define IISApplicationPool_Stop(This) (This)->lpVtbl->Stop(This)
#endif
#endif
  HRESULT WINAPI IISApplicationPool_Recycle_Proxy(IISApplicationPool *This);
  void __RPC_STUB IISApplicationPool_Recycle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApplicationPool_EnumAppsInPool_Proxy(IISApplicationPool *This,VARIANT *bstrBuffer);
  void __RPC_STUB IISApplicationPool_EnumAppsInPool_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApplicationPool_Start_Proxy(IISApplicationPool *This);
  void __RPC_STUB IISApplicationPool_Start_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApplicationPool_Stop_Proxy(IISApplicationPool *This);
  void __RPC_STUB IISApplicationPool_Stop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISApplicationPools_INTERFACE_DEFINED__
#define __IISApplicationPools_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISApplicationPools;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISApplicationPools : public IADs {
  };
#else
  typedef struct IISApplicationPoolsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISApplicationPools *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISApplicationPools *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISApplicationPools *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISApplicationPools *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISApplicationPools *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISApplicationPools *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISApplicationPools *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISApplicationPools *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISApplicationPools *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISApplicationPools *This,void *retval);
      HRESULT (WINAPI *Get)(IISApplicationPools *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISApplicationPools *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISApplicationPools *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISApplicationPools *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISApplicationPools *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
    END_INTERFACE
  } IISApplicationPoolsVtbl;
  struct IISApplicationPools {
    CONST_VTBL struct IISApplicationPoolsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISApplicationPools_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISApplicationPools_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISApplicationPools_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISApplicationPools_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISApplicationPools_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISApplicationPools_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISApplicationPools_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISApplicationPools_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISApplicationPools_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISApplicationPools_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISApplicationPools_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISApplicationPools_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISApplicationPools_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISApplicationPools_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISApplicationPools_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISApplicationPools_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISApplicationPools_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISApplicationPools_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISApplicationPools_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISApplicationPools_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#endif
#endif
#endif

#ifndef __IISWebService_INTERFACE_DEFINED__
#define __IISWebService_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISWebService;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISWebService : public IADs {
  public:
    virtual HRESULT WINAPI GetCurrentMode(VARIANT *pvServerMode) = 0;
    virtual HRESULT WINAPI CreateNewSite(BSTR bstrServerComment,VARIANT *pvServerBindings,BSTR bstrRootVDirPath,VARIANT vServerID,VARIANT *pvActualID) = 0;
    virtual HRESULT WINAPI EnableApplication(BSTR bstrAppName) = 0;
    virtual HRESULT WINAPI RemoveApplication(BSTR bstrAppName) = 0;
    virtual HRESULT WINAPI ListApplications(VARIANT *bstrBuffer) = 0;
    virtual HRESULT WINAPI AddDependency(BSTR bstrApplication,BSTR bstrGroupID) = 0;
    virtual HRESULT WINAPI RemoveDependency(BSTR bstrApplication,BSTR bstrGroupID) = 0;
    virtual HRESULT WINAPI EnableWebServiceExtension(BSTR bstrExtension) = 0;
    virtual HRESULT WINAPI DisableWebServiceExtension(BSTR bstrExtension) = 0;
    virtual HRESULT WINAPI ListWebServiceExtensions(VARIANT *bstrBuffer) = 0;
    virtual HRESULT WINAPI EnableExtensionFile(BSTR bstrExtensionFile) = 0;
    virtual HRESULT WINAPI DisableExtensionFile(BSTR bstrExtensionFile) = 0;
    virtual HRESULT WINAPI AddExtensionFile(BSTR bstrExtensionFile,VARIANT bAccess,BSTR bstrGroupID,VARIANT bCanDelete,BSTR bstrDescription) = 0;
    virtual HRESULT WINAPI DeleteExtensionFileRecord(BSTR bstrExtensionFile) = 0;
    virtual HRESULT WINAPI ListExtensionFiles(VARIANT *bstrBuffer) = 0;
    virtual HRESULT WINAPI QueryGroupIDStatus(BSTR bstrGroupID,VARIANT *bstrBuffer) = 0;
  };
#else
  typedef struct IISWebServiceVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISWebService *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISWebService *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISWebService *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISWebService *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISWebService *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISWebService *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISWebService *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISWebService *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISWebService *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISWebService *This,void *retval);
      HRESULT (WINAPI *Get)(IISWebService *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISWebService *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISWebService *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISWebService *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISWebService *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *GetCurrentMode)(IISWebService *This,VARIANT *pvServerMode);
      HRESULT (WINAPI *CreateNewSite)(IISWebService *This,BSTR bstrServerComment,VARIANT *pvServerBindings,BSTR bstrRootVDirPath,VARIANT vServerID,VARIANT *pvActualID);
      HRESULT (WINAPI *EnableApplication)(IISWebService *This,BSTR bstrAppName);
      HRESULT (WINAPI *RemoveApplication)(IISWebService *This,BSTR bstrAppName);
      HRESULT (WINAPI *ListApplications)(IISWebService *This,VARIANT *bstrBuffer);
      HRESULT (WINAPI *AddDependency)(IISWebService *This,BSTR bstrApplication,BSTR bstrGroupID);
      HRESULT (WINAPI *RemoveDependency)(IISWebService *This,BSTR bstrApplication,BSTR bstrGroupID);
      HRESULT (WINAPI *EnableWebServiceExtension)(IISWebService *This,BSTR bstrExtension);
      HRESULT (WINAPI *DisableWebServiceExtension)(IISWebService *This,BSTR bstrExtension);
      HRESULT (WINAPI *ListWebServiceExtensions)(IISWebService *This,VARIANT *bstrBuffer);
      HRESULT (WINAPI *EnableExtensionFile)(IISWebService *This,BSTR bstrExtensionFile);
      HRESULT (WINAPI *DisableExtensionFile)(IISWebService *This,BSTR bstrExtensionFile);
      HRESULT (WINAPI *AddExtensionFile)(IISWebService *This,BSTR bstrExtensionFile,VARIANT bAccess,BSTR bstrGroupID,VARIANT bCanDelete,BSTR bstrDescription);
      HRESULT (WINAPI *DeleteExtensionFileRecord)(IISWebService *This,BSTR bstrExtensionFile);
      HRESULT (WINAPI *ListExtensionFiles)(IISWebService *This,VARIANT *bstrBuffer);
      HRESULT (WINAPI *QueryGroupIDStatus)(IISWebService *This,BSTR bstrGroupID,VARIANT *bstrBuffer);
    END_INTERFACE
  } IISWebServiceVtbl;
  struct IISWebService {
    CONST_VTBL struct IISWebServiceVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISWebService_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISWebService_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISWebService_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISWebService_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISWebService_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISWebService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISWebService_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISWebService_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISWebService_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISWebService_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISWebService_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISWebService_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISWebService_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISWebService_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISWebService_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISWebService_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISWebService_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISWebService_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISWebService_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISWebService_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISWebService_GetCurrentMode(This,pvServerMode) (This)->lpVtbl->GetCurrentMode(This,pvServerMode)
#define IISWebService_CreateNewSite(This,bstrServerComment,pvServerBindings,bstrRootVDirPath,vServerID,pvActualID) (This)->lpVtbl->CreateNewSite(This,bstrServerComment,pvServerBindings,bstrRootVDirPath,vServerID,pvActualID)
#define IISWebService_EnableApplication(This,bstrAppName) (This)->lpVtbl->EnableApplication(This,bstrAppName)
#define IISWebService_RemoveApplication(This,bstrAppName) (This)->lpVtbl->RemoveApplication(This,bstrAppName)
#define IISWebService_ListApplications(This,bstrBuffer) (This)->lpVtbl->ListApplications(This,bstrBuffer)
#define IISWebService_AddDependency(This,bstrApplication,bstrGroupID) (This)->lpVtbl->AddDependency(This,bstrApplication,bstrGroupID)
#define IISWebService_RemoveDependency(This,bstrApplication,bstrGroupID) (This)->lpVtbl->RemoveDependency(This,bstrApplication,bstrGroupID)
#define IISWebService_EnableWebServiceExtension(This,bstrExtension) (This)->lpVtbl->EnableWebServiceExtension(This,bstrExtension)
#define IISWebService_DisableWebServiceExtension(This,bstrExtension) (This)->lpVtbl->DisableWebServiceExtension(This,bstrExtension)
#define IISWebService_ListWebServiceExtensions(This,bstrBuffer) (This)->lpVtbl->ListWebServiceExtensions(This,bstrBuffer)
#define IISWebService_EnableExtensionFile(This,bstrExtensionFile) (This)->lpVtbl->EnableExtensionFile(This,bstrExtensionFile)
#define IISWebService_DisableExtensionFile(This,bstrExtensionFile) (This)->lpVtbl->DisableExtensionFile(This,bstrExtensionFile)
#define IISWebService_AddExtensionFile(This,bstrExtensionFile,bAccess,bstrGroupID,bCanDelete,bstrDescription) (This)->lpVtbl->AddExtensionFile(This,bstrExtensionFile,bAccess,bstrGroupID,bCanDelete,bstrDescription)
#define IISWebService_DeleteExtensionFileRecord(This,bstrExtensionFile) (This)->lpVtbl->DeleteExtensionFileRecord(This,bstrExtensionFile)
#define IISWebService_ListExtensionFiles(This,bstrBuffer) (This)->lpVtbl->ListExtensionFiles(This,bstrBuffer)
#define IISWebService_QueryGroupIDStatus(This,bstrGroupID,bstrBuffer) (This)->lpVtbl->QueryGroupIDStatus(This,bstrGroupID,bstrBuffer)
#endif
#endif
  HRESULT WINAPI IISWebService_GetCurrentMode_Proxy(IISWebService *This,VARIANT *pvServerMode);
  void __RPC_STUB IISWebService_GetCurrentMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_CreateNewSite_Proxy(IISWebService *This,BSTR bstrServerComment,VARIANT *pvServerBindings,BSTR bstrRootVDirPath,VARIANT vServerID,VARIANT *pvActualID);
  void __RPC_STUB IISWebService_CreateNewSite_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_EnableApplication_Proxy(IISWebService *This,BSTR bstrAppName);
  void __RPC_STUB IISWebService_EnableApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_RemoveApplication_Proxy(IISWebService *This,BSTR bstrAppName);
  void __RPC_STUB IISWebService_RemoveApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_ListApplications_Proxy(IISWebService *This,VARIANT *bstrBuffer);
  void __RPC_STUB IISWebService_ListApplications_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_AddDependency_Proxy(IISWebService *This,BSTR bstrApplication,BSTR bstrGroupID);
  void __RPC_STUB IISWebService_AddDependency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_RemoveDependency_Proxy(IISWebService *This,BSTR bstrApplication,BSTR bstrGroupID);
  void __RPC_STUB IISWebService_RemoveDependency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_EnableWebServiceExtension_Proxy(IISWebService *This,BSTR bstrExtension);
  void __RPC_STUB IISWebService_EnableWebServiceExtension_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_DisableWebServiceExtension_Proxy(IISWebService *This,BSTR bstrExtension);
  void __RPC_STUB IISWebService_DisableWebServiceExtension_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_ListWebServiceExtensions_Proxy(IISWebService *This,VARIANT *bstrBuffer);
  void __RPC_STUB IISWebService_ListWebServiceExtensions_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_EnableExtensionFile_Proxy(IISWebService *This,BSTR bstrExtensionFile);
  void __RPC_STUB IISWebService_EnableExtensionFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_DisableExtensionFile_Proxy(IISWebService *This,BSTR bstrExtensionFile);
  void __RPC_STUB IISWebService_DisableExtensionFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_AddExtensionFile_Proxy(IISWebService *This,BSTR bstrExtensionFile,VARIANT bAccess,BSTR bstrGroupID,VARIANT bCanDelete,BSTR bstrDescription);
  void __RPC_STUB IISWebService_AddExtensionFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_DeleteExtensionFileRecord_Proxy(IISWebService *This,BSTR bstrExtensionFile);
  void __RPC_STUB IISWebService_DeleteExtensionFileRecord_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_ListExtensionFiles_Proxy(IISWebService *This,VARIANT *bstrBuffer);
  void __RPC_STUB IISWebService_ListExtensionFiles_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISWebService_QueryGroupIDStatus_Proxy(IISWebService *This,BSTR bstrGroupID,VARIANT *bstrBuffer);
  void __RPC_STUB IISWebService_QueryGroupIDStatus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISDsCrMap_INTERFACE_DEFINED__
#define __IISDsCrMap_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISDsCrMap;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISDsCrMap : public IADs {
  public:
    virtual HRESULT WINAPI CreateMapping(VARIANT vCert,BSTR bstrNtAcct,BSTR bstrNtPwd,BSTR bstrName,LONG lEnabled) = 0;
    virtual HRESULT WINAPI GetMapping(LONG lMethod,VARIANT vKey,VARIANT *pvCert,VARIANT *pbstrNtAcct,VARIANT *pbstrNtPwd,VARIANT *pbstrName,VARIANT *plEnabled) = 0;
    virtual HRESULT WINAPI DeleteMapping(LONG lMethod,VARIANT vKey) = 0;
    virtual HRESULT WINAPI SetEnabled(LONG lMethod,VARIANT vKey,LONG lEnabled) = 0;
    virtual HRESULT WINAPI SetName(LONG lMethod,VARIANT vKey,BSTR bstrName) = 0;
    virtual HRESULT WINAPI SetPwd(LONG lMethod,VARIANT vKey,BSTR bstrPwd) = 0;
    virtual HRESULT WINAPI SetAcct(LONG lMethod,VARIANT vKey,BSTR bstrAcct) = 0;
  };
#else
  typedef struct IISDsCrMapVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISDsCrMap *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISDsCrMap *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISDsCrMap *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISDsCrMap *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISDsCrMap *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISDsCrMap *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISDsCrMap *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISDsCrMap *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISDsCrMap *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISDsCrMap *This,void *retval);
      HRESULT (WINAPI *Get)(IISDsCrMap *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISDsCrMap *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISDsCrMap *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISDsCrMap *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISDsCrMap *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *CreateMapping)(IISDsCrMap *This,VARIANT vCert,BSTR bstrNtAcct,BSTR bstrNtPwd,BSTR bstrName,LONG lEnabled);
      HRESULT (WINAPI *GetMapping)(IISDsCrMap *This,LONG lMethod,VARIANT vKey,VARIANT *pvCert,VARIANT *pbstrNtAcct,VARIANT *pbstrNtPwd,VARIANT *pbstrName,VARIANT *plEnabled);
      HRESULT (WINAPI *DeleteMapping)(IISDsCrMap *This,LONG lMethod,VARIANT vKey);
      HRESULT (WINAPI *SetEnabled)(IISDsCrMap *This,LONG lMethod,VARIANT vKey,LONG lEnabled);
      HRESULT (WINAPI *SetName)(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrName);
      HRESULT (WINAPI *SetPwd)(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrPwd);
      HRESULT (WINAPI *SetAcct)(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrAcct);
    END_INTERFACE
  } IISDsCrMapVtbl;
  struct IISDsCrMap {
    CONST_VTBL struct IISDsCrMapVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISDsCrMap_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISDsCrMap_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISDsCrMap_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISDsCrMap_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISDsCrMap_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISDsCrMap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISDsCrMap_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISDsCrMap_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISDsCrMap_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISDsCrMap_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISDsCrMap_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISDsCrMap_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISDsCrMap_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISDsCrMap_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISDsCrMap_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISDsCrMap_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISDsCrMap_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISDsCrMap_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISDsCrMap_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISDsCrMap_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISDsCrMap_CreateMapping(This,vCert,bstrNtAcct,bstrNtPwd,bstrName,lEnabled) (This)->lpVtbl->CreateMapping(This,vCert,bstrNtAcct,bstrNtPwd,bstrName,lEnabled)
#define IISDsCrMap_GetMapping(This,lMethod,vKey,pvCert,pbstrNtAcct,pbstrNtPwd,pbstrName,plEnabled) (This)->lpVtbl->GetMapping(This,lMethod,vKey,pvCert,pbstrNtAcct,pbstrNtPwd,pbstrName,plEnabled)
#define IISDsCrMap_DeleteMapping(This,lMethod,vKey) (This)->lpVtbl->DeleteMapping(This,lMethod,vKey)
#define IISDsCrMap_SetEnabled(This,lMethod,vKey,lEnabled) (This)->lpVtbl->SetEnabled(This,lMethod,vKey,lEnabled)
#define IISDsCrMap_SetName(This,lMethod,vKey,bstrName) (This)->lpVtbl->SetName(This,lMethod,vKey,bstrName)
#define IISDsCrMap_SetPwd(This,lMethod,vKey,bstrPwd) (This)->lpVtbl->SetPwd(This,lMethod,vKey,bstrPwd)
#define IISDsCrMap_SetAcct(This,lMethod,vKey,bstrAcct) (This)->lpVtbl->SetAcct(This,lMethod,vKey,bstrAcct)
#endif
#endif
  HRESULT WINAPI IISDsCrMap_CreateMapping_Proxy(IISDsCrMap *This,VARIANT vCert,BSTR bstrNtAcct,BSTR bstrNtPwd,BSTR bstrName,LONG lEnabled);
  void __RPC_STUB IISDsCrMap_CreateMapping_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_GetMapping_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey,VARIANT *pvCert,VARIANT *pbstrNtAcct,VARIANT *pbstrNtPwd,VARIANT *pbstrName,VARIANT *plEnabled);
  void __RPC_STUB IISDsCrMap_GetMapping_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_DeleteMapping_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey);
  void __RPC_STUB IISDsCrMap_DeleteMapping_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_SetEnabled_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey,LONG lEnabled);
  void __RPC_STUB IISDsCrMap_SetEnabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_SetName_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrName);
  void __RPC_STUB IISDsCrMap_SetName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_SetPwd_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrPwd);
  void __RPC_STUB IISDsCrMap_SetPwd_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISDsCrMap_SetAcct_Proxy(IISDsCrMap *This,LONG lMethod,VARIANT vKey,BSTR bstrAcct);
  void __RPC_STUB IISDsCrMap_SetAcct_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISApp_INTERFACE_DEFINED__
#define __IISApp_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISApp;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISApp : public IADs {
  public:
    virtual HRESULT WINAPI AppCreate(VARIANT_BOOL bSetInProcFlag) = 0;
    virtual HRESULT WINAPI AppDelete(void) = 0;
    virtual HRESULT WINAPI AppDeleteRecursive(void) = 0;
    virtual HRESULT WINAPI AppUnLoad(void) = 0;
    virtual HRESULT WINAPI AppUnLoadRecursive(void) = 0;
    virtual HRESULT WINAPI AppDisable(void) = 0;
    virtual HRESULT WINAPI AppDisableRecursive(void) = 0;
    virtual HRESULT WINAPI AppEnable(void) = 0;
    virtual HRESULT WINAPI AppEnableRecursive(void) = 0;
    virtual HRESULT WINAPI AppGetStatus(DWORD *pdwStatus) = 0;
    virtual HRESULT WINAPI AspAppRestart(void) = 0;
  };
#else
  typedef struct IISAppVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISApp *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISApp *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISApp *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISApp *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISApp *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISApp *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISApp *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISApp *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISApp *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISApp *This,void *retval);
      HRESULT (WINAPI *Get)(IISApp *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISApp *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISApp *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISApp *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISApp *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *AppCreate)(IISApp *This,VARIANT_BOOL bSetInProcFlag);
      HRESULT (WINAPI *AppDelete)(IISApp *This);
      HRESULT (WINAPI *AppDeleteRecursive)(IISApp *This);
      HRESULT (WINAPI *AppUnLoad)(IISApp *This);
      HRESULT (WINAPI *AppUnLoadRecursive)(IISApp *This);
      HRESULT (WINAPI *AppDisable)(IISApp *This);
      HRESULT (WINAPI *AppDisableRecursive)(IISApp *This);
      HRESULT (WINAPI *AppEnable)(IISApp *This);
      HRESULT (WINAPI *AppEnableRecursive)(IISApp *This);
      HRESULT (WINAPI *AppGetStatus)(IISApp *This,DWORD *pdwStatus);
      HRESULT (WINAPI *AspAppRestart)(IISApp *This);
    END_INTERFACE
  } IISAppVtbl;
  struct IISApp {
    CONST_VTBL struct IISAppVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISApp_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISApp_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISApp_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISApp_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISApp_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISApp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISApp_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISApp_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISApp_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISApp_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISApp_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISApp_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISApp_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISApp_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISApp_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISApp_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISApp_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISApp_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISApp_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISApp_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISApp_AppCreate(This,bSetInProcFlag) (This)->lpVtbl->AppCreate(This,bSetInProcFlag)
#define IISApp_AppDelete(This) (This)->lpVtbl->AppDelete(This)
#define IISApp_AppDeleteRecursive(This) (This)->lpVtbl->AppDeleteRecursive(This)
#define IISApp_AppUnLoad(This) (This)->lpVtbl->AppUnLoad(This)
#define IISApp_AppUnLoadRecursive(This) (This)->lpVtbl->AppUnLoadRecursive(This)
#define IISApp_AppDisable(This) (This)->lpVtbl->AppDisable(This)
#define IISApp_AppDisableRecursive(This) (This)->lpVtbl->AppDisableRecursive(This)
#define IISApp_AppEnable(This) (This)->lpVtbl->AppEnable(This)
#define IISApp_AppEnableRecursive(This) (This)->lpVtbl->AppEnableRecursive(This)
#define IISApp_AppGetStatus(This,pdwStatus) (This)->lpVtbl->AppGetStatus(This,pdwStatus)
#define IISApp_AspAppRestart(This) (This)->lpVtbl->AspAppRestart(This)
#endif
#endif
  HRESULT WINAPI IISApp_AppCreate_Proxy(IISApp *This,VARIANT_BOOL bSetInProcFlag);
  void __RPC_STUB IISApp_AppCreate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppDelete_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppDelete_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppDeleteRecursive_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppDeleteRecursive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppUnLoad_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppUnLoad_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppUnLoadRecursive_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppUnLoadRecursive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppDisable_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppDisable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppDisableRecursive_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppDisableRecursive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppEnable_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppEnableRecursive_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AppEnableRecursive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AppGetStatus_Proxy(IISApp *This,DWORD *pdwStatus);
  void __RPC_STUB IISApp_AppGetStatus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp_AspAppRestart_Proxy(IISApp *This);
  void __RPC_STUB IISApp_AspAppRestart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISApp2_INTERFACE_DEFINED__
#define __IISApp2_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISApp2;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISApp2 : public IISApp {
  public:
    virtual HRESULT WINAPI AppCreate2(LONG lAppMode) = 0;
    virtual HRESULT WINAPI AppGetStatus2(LONG *lpStatus) = 0;
  };
#else
  typedef struct IISApp2Vtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISApp2 *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISApp2 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISApp2 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISApp2 *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISApp2 *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISApp2 *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISApp2 *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISApp2 *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISApp2 *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISApp2 *This,void *retval);
      HRESULT (WINAPI *Get)(IISApp2 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISApp2 *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISApp2 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISApp2 *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISApp2 *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *AppCreate)(IISApp2 *This,VARIANT_BOOL bSetInProcFlag);
      HRESULT (WINAPI *AppDelete)(IISApp2 *This);
      HRESULT (WINAPI *AppDeleteRecursive)(IISApp2 *This);
      HRESULT (WINAPI *AppUnLoad)(IISApp2 *This);
      HRESULT (WINAPI *AppUnLoadRecursive)(IISApp2 *This);
      HRESULT (WINAPI *AppDisable)(IISApp2 *This);
      HRESULT (WINAPI *AppDisableRecursive)(IISApp2 *This);
      HRESULT (WINAPI *AppEnable)(IISApp2 *This);
      HRESULT (WINAPI *AppEnableRecursive)(IISApp2 *This);
      HRESULT (WINAPI *AppGetStatus)(IISApp2 *This,DWORD *pdwStatus);
      HRESULT (WINAPI *AspAppRestart)(IISApp2 *This);
      HRESULT (WINAPI *AppCreate2)(IISApp2 *This,LONG lAppMode);
      HRESULT (WINAPI *AppGetStatus2)(IISApp2 *This,LONG *lpStatus);
    END_INTERFACE
  } IISApp2Vtbl;
  struct IISApp2 {
    CONST_VTBL struct IISApp2Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISApp2_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISApp2_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISApp2_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISApp2_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISApp2_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISApp2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISApp2_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISApp2_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISApp2_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISApp2_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISApp2_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISApp2_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISApp2_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISApp2_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISApp2_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISApp2_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISApp2_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISApp2_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISApp2_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISApp2_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISApp2_AppCreate(This,bSetInProcFlag) (This)->lpVtbl->AppCreate(This,bSetInProcFlag)
#define IISApp2_AppDelete(This) (This)->lpVtbl->AppDelete(This)
#define IISApp2_AppDeleteRecursive(This) (This)->lpVtbl->AppDeleteRecursive(This)
#define IISApp2_AppUnLoad(This) (This)->lpVtbl->AppUnLoad(This)
#define IISApp2_AppUnLoadRecursive(This) (This)->lpVtbl->AppUnLoadRecursive(This)
#define IISApp2_AppDisable(This) (This)->lpVtbl->AppDisable(This)
#define IISApp2_AppDisableRecursive(This) (This)->lpVtbl->AppDisableRecursive(This)
#define IISApp2_AppEnable(This) (This)->lpVtbl->AppEnable(This)
#define IISApp2_AppEnableRecursive(This) (This)->lpVtbl->AppEnableRecursive(This)
#define IISApp2_AppGetStatus(This,pdwStatus) (This)->lpVtbl->AppGetStatus(This,pdwStatus)
#define IISApp2_AspAppRestart(This) (This)->lpVtbl->AspAppRestart(This)
#define IISApp2_AppCreate2(This,lAppMode) (This)->lpVtbl->AppCreate2(This,lAppMode)
#define IISApp2_AppGetStatus2(This,lpStatus) (This)->lpVtbl->AppGetStatus2(This,lpStatus)
#endif
#endif
  HRESULT WINAPI IISApp2_AppCreate2_Proxy(IISApp2 *This,LONG lAppMode);
  void __RPC_STUB IISApp2_AppCreate2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISApp2_AppGetStatus2_Proxy(IISApp2 *This,LONG *lpStatus);
  void __RPC_STUB IISApp2_AppGetStatus2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISApp3_INTERFACE_DEFINED__
#define __IISApp3_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISApp3;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISApp3 : public IISApp2 {
  public:
    virtual HRESULT WINAPI AppCreate3(LONG lAppMode,VARIANT bstrAppPooI,VARIANT bCreatePool) = 0;
  };
#else
  typedef struct IISApp3Vtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISApp3 *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISApp3 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISApp3 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISApp3 *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISApp3 *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISApp3 *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISApp3 *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISApp3 *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISApp3 *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISApp3 *This,void *retval);
      HRESULT (WINAPI *Get)(IISApp3 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISApp3 *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISApp3 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISApp3 *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISApp3 *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *AppCreate)(IISApp3 *This,VARIANT_BOOL bSetInProcFlag);
      HRESULT (WINAPI *AppDelete)(IISApp3 *This);
      HRESULT (WINAPI *AppDeleteRecursive)(IISApp3 *This);
      HRESULT (WINAPI *AppUnLoad)(IISApp3 *This);
      HRESULT (WINAPI *AppUnLoadRecursive)(IISApp3 *This);
      HRESULT (WINAPI *AppDisable)(IISApp3 *This);
      HRESULT (WINAPI *AppDisableRecursive)(IISApp3 *This);
      HRESULT (WINAPI *AppEnable)(IISApp3 *This);
      HRESULT (WINAPI *AppEnableRecursive)(IISApp3 *This);
      HRESULT (WINAPI *AppGetStatus)(IISApp3 *This,DWORD *pdwStatus);
      HRESULT (WINAPI *AspAppRestart)(IISApp3 *This);
      HRESULT (WINAPI *AppCreate2)(IISApp3 *This,LONG lAppMode);
      HRESULT (WINAPI *AppGetStatus2)(IISApp3 *This,LONG *lpStatus);
      HRESULT (WINAPI *AppCreate3)(IISApp3 *This,LONG lAppMode,VARIANT bstrAppPooI,VARIANT bCreatePool);
    END_INTERFACE
  } IISApp3Vtbl;
  struct IISApp3 {
    CONST_VTBL struct IISApp3Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISApp3_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISApp3_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISApp3_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISApp3_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISApp3_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISApp3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISApp3_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISApp3_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISApp3_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISApp3_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISApp3_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISApp3_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISApp3_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISApp3_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISApp3_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISApp3_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISApp3_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISApp3_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISApp3_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISApp3_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISApp3_AppCreate(This,bSetInProcFlag) (This)->lpVtbl->AppCreate(This,bSetInProcFlag)
#define IISApp3_AppDelete(This) (This)->lpVtbl->AppDelete(This)
#define IISApp3_AppDeleteRecursive(This) (This)->lpVtbl->AppDeleteRecursive(This)
#define IISApp3_AppUnLoad(This) (This)->lpVtbl->AppUnLoad(This)
#define IISApp3_AppUnLoadRecursive(This) (This)->lpVtbl->AppUnLoadRecursive(This)
#define IISApp3_AppDisable(This) (This)->lpVtbl->AppDisable(This)
#define IISApp3_AppDisableRecursive(This) (This)->lpVtbl->AppDisableRecursive(This)
#define IISApp3_AppEnable(This) (This)->lpVtbl->AppEnable(This)
#define IISApp3_AppEnableRecursive(This) (This)->lpVtbl->AppEnableRecursive(This)
#define IISApp3_AppGetStatus(This,pdwStatus) (This)->lpVtbl->AppGetStatus(This,pdwStatus)
#define IISApp3_AspAppRestart(This) (This)->lpVtbl->AspAppRestart(This)
#define IISApp3_AppCreate2(This,lAppMode) (This)->lpVtbl->AppCreate2(This,lAppMode)
#define IISApp3_AppGetStatus2(This,lpStatus) (This)->lpVtbl->AppGetStatus2(This,lpStatus)
#define IISApp3_AppCreate3(This,lAppMode,bstrAppPooI,bCreatePool) (This)->lpVtbl->AppCreate3(This,lAppMode,bstrAppPooI,bCreatePool)
#endif
#endif
  HRESULT WINAPI IISApp3_AppCreate3_Proxy(IISApp3 *This,LONG lAppMode,VARIANT bstrAppPooI,VARIANT bCreatePool);
  void __RPC_STUB IISApp3_AppCreate3_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISComputer_INTERFACE_DEFINED__
#define __IISComputer_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISComputer;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISComputer : public IADs {
  public:
    virtual HRESULT WINAPI Backup(BSTR bstrLocation,LONG lVersion,LONG lFlags) = 0;
    virtual HRESULT WINAPI Restore(BSTR bstrLocation,LONG lVersion,LONG lFlags) = 0;
    virtual HRESULT WINAPI EnumBackups(BSTR bstrLocation,LONG lIndex,VARIANT *pvVersion,VARIANT *pvLocations,VARIANT *pvDate) = 0;
    virtual HRESULT WINAPI DeleteBackup(BSTR bstrLocation,LONG lVersion) = 0;
  };
#else
  typedef struct IISComputerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISComputer *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISComputer *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISComputer *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISComputer *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISComputer *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISComputer *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISComputer *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISComputer *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISComputer *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISComputer *This,void *retval);
      HRESULT (WINAPI *Get)(IISComputer *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISComputer *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISComputer *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISComputer *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISComputer *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *Backup)(IISComputer *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
      HRESULT (WINAPI *Restore)(IISComputer *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
      HRESULT (WINAPI *EnumBackups)(IISComputer *This,BSTR bstrLocation,LONG lIndex,VARIANT *pvVersion,VARIANT *pvLocations,VARIANT *pvDate);
      HRESULT (WINAPI *DeleteBackup)(IISComputer *This,BSTR bstrLocation,LONG lVersion);
    END_INTERFACE
  } IISComputerVtbl;
  struct IISComputer {
    CONST_VTBL struct IISComputerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISComputer_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISComputer_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISComputer_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISComputer_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISComputer_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISComputer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISComputer_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISComputer_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISComputer_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISComputer_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISComputer_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISComputer_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISComputer_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISComputer_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISComputer_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISComputer_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISComputer_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISComputer_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISComputer_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISComputer_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISComputer_Backup(This,bstrLocation,lVersion,lFlags) (This)->lpVtbl->Backup(This,bstrLocation,lVersion,lFlags)
#define IISComputer_Restore(This,bstrLocation,lVersion,lFlags) (This)->lpVtbl->Restore(This,bstrLocation,lVersion,lFlags)
#define IISComputer_EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate) (This)->lpVtbl->EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)
#define IISComputer_DeleteBackup(This,bstrLocation,lVersion) (This)->lpVtbl->DeleteBackup(This,bstrLocation,lVersion)
#endif
#endif
  HRESULT WINAPI IISComputer_Backup_Proxy(IISComputer *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
  void __RPC_STUB IISComputer_Backup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer_Restore_Proxy(IISComputer *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
  void __RPC_STUB IISComputer_Restore_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer_EnumBackups_Proxy(IISComputer *This,BSTR bstrLocation,LONG lIndex,VARIANT *pvVersion,VARIANT *pvLocations,VARIANT *pvDate);
  void __RPC_STUB IISComputer_EnumBackups_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer_DeleteBackup_Proxy(IISComputer *This,BSTR bstrLocation,LONG lVersion);
  void __RPC_STUB IISComputer_DeleteBackup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISComputer2_INTERFACE_DEFINED__
#define __IISComputer2_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IISComputer2;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IISComputer2 : public IISComputer {
  public:
    virtual HRESULT WINAPI BackupWithPassword(BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword) = 0;
    virtual HRESULT WINAPI RestoreWithPassword(BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword) = 0;
    virtual HRESULT WINAPI Export(BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,LONG lFlags) = 0;
    virtual HRESULT WINAPI Import(BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,BSTR bstrDestPath,LONG lFlags) = 0;
    virtual HRESULT WINAPI SaveData(void) = 0;
  };
#else
  typedef struct IISComputer2Vtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IISComputer2 *This,struct GUID *riid,void **ppvObj,void *retval);
      HRESULT (WINAPI *AddRef)(IISComputer2 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *Release)(IISComputer2 *This,unsigned __LONG32 *retval);
      HRESULT (WINAPI *GetTypeInfoCount)(IISComputer2 *This,unsigned UINT *pctinfo,void *retval);
      HRESULT (WINAPI *GetTypeInfo)(IISComputer2 *This,unsigned UINT itinfo,unsigned __LONG32 lcid,void **pptinfo,void *retval);
      HRESULT (WINAPI *GetIDsOfNames)(IISComputer2 *This,struct GUID *riid,signed char **rgszNames,unsigned UINT cNames,unsigned __LONG32 lcid,signed __LONG32 *rgdispid,void *retval);
      HRESULT (WINAPI *Invoke)(IISComputer2 *This,signed __LONG32 dispidMember,struct GUID *riid,unsigned __LONG32 lcid,unsigned short wFlags,struct DISPPARAMS *pdispparams,VARIANT *pvarResult,struct EXCEPINFO *pexcepinfo,unsigned UINT *puArgErr,void *retval);
      HRESULT (WINAPI *get_Name)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Class)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *get_GUID)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *get_ADsPath)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Parent)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *get_Schema)(IISComputer2 *This,BSTR *retval);
      HRESULT (WINAPI *GetInfo)(IISComputer2 *This,void *retval);
      HRESULT (WINAPI *SetInfo)(IISComputer2 *This,void *retval);
      HRESULT (WINAPI *Get)(IISComputer2 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *Put)(IISComputer2 *This,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetEx)(IISComputer2 *This,BSTR bstrName,VARIANT *retval);
      HRESULT (WINAPI *PutEx)(IISComputer2 *This,signed __LONG32 lnControlCode,BSTR bstrName,VARIANT vProp,void *retval);
      HRESULT (WINAPI *GetInfoEx)(IISComputer2 *This,VARIANT vProperties,signed __LONG32 lnReserved,void *retval);
      HRESULT (WINAPI *Backup)(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
      HRESULT (WINAPI *Restore)(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags);
      HRESULT (WINAPI *EnumBackups)(IISComputer2 *This,BSTR bstrLocation,LONG lIndex,VARIANT *pvVersion,VARIANT *pvLocations,VARIANT *pvDate);
      HRESULT (WINAPI *DeleteBackup)(IISComputer2 *This,BSTR bstrLocation,LONG lVersion);
      HRESULT (WINAPI *BackupWithPassword)(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword);
      HRESULT (WINAPI *RestoreWithPassword)(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword);
      HRESULT (WINAPI *Export)(IISComputer2 *This,BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,LONG lFlags);
      HRESULT (WINAPI *Import)(IISComputer2 *This,BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,BSTR bstrDestPath,LONG lFlags);
      HRESULT (WINAPI *SaveData)(IISComputer2 *This);
    END_INTERFACE
  } IISComputer2Vtbl;
  struct IISComputer2 {
    CONST_VTBL struct IISComputer2Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IISComputer2_QueryInterface(This,riid,ppvObj,retval) (This)->lpVtbl->QueryInterface(This,riid,ppvObj,retval)
#define IISComputer2_AddRef(This,retval) (This)->lpVtbl->AddRef(This,retval)
#define IISComputer2_Release(This,retval) (This)->lpVtbl->Release(This,retval)
#define IISComputer2_GetTypeInfoCount(This,pctinfo,retval) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo,retval)
#define IISComputer2_GetTypeInfo(This,itinfo,lcid,pptinfo,retval) (This)->lpVtbl->GetTypeInfo(This,itinfo,lcid,pptinfo,retval)
#define IISComputer2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)
#define IISComputer2_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval) (This)->lpVtbl->Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)
#define IISComputer2_get_Name(This,retval) (This)->lpVtbl->get_Name(This,retval)
#define IISComputer2_get_Class(This,retval) (This)->lpVtbl->get_Class(This,retval)
#define IISComputer2_get_GUID(This,retval) (This)->lpVtbl->get_GUID(This,retval)
#define IISComputer2_get_ADsPath(This,retval) (This)->lpVtbl->get_ADsPath(This,retval)
#define IISComputer2_get_Parent(This,retval) (This)->lpVtbl->get_Parent(This,retval)
#define IISComputer2_get_Schema(This,retval) (This)->lpVtbl->get_Schema(This,retval)
#define IISComputer2_GetInfo(This,retval) (This)->lpVtbl->GetInfo(This,retval)
#define IISComputer2_SetInfo(This,retval) (This)->lpVtbl->SetInfo(This,retval)
#define IISComputer2_Get(This,bstrName,retval) (This)->lpVtbl->Get(This,bstrName,retval)
#define IISComputer2_Put(This,bstrName,vProp,retval) (This)->lpVtbl->Put(This,bstrName,vProp,retval)
#define IISComputer2_GetEx(This,bstrName,retval) (This)->lpVtbl->GetEx(This,bstrName,retval)
#define IISComputer2_PutEx(This,lnControlCode,bstrName,vProp,retval) (This)->lpVtbl->PutEx(This,lnControlCode,bstrName,vProp,retval)
#define IISComputer2_GetInfoEx(This,vProperties,lnReserved,retval) (This)->lpVtbl->GetInfoEx(This,vProperties,lnReserved,retval)
#define IISComputer2_Backup(This,bstrLocation,lVersion,lFlags) (This)->lpVtbl->Backup(This,bstrLocation,lVersion,lFlags)
#define IISComputer2_Restore(This,bstrLocation,lVersion,lFlags) (This)->lpVtbl->Restore(This,bstrLocation,lVersion,lFlags)
#define IISComputer2_EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate) (This)->lpVtbl->EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)
#define IISComputer2_DeleteBackup(This,bstrLocation,lVersion) (This)->lpVtbl->DeleteBackup(This,bstrLocation,lVersion)
#define IISComputer2_BackupWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword) (This)->lpVtbl->BackupWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)
#define IISComputer2_RestoreWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword) (This)->lpVtbl->RestoreWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)
#define IISComputer2_Export(This,bstrPassword,bstrFilename,bstrSourcePath,lFlags) (This)->lpVtbl->Export(This,bstrPassword,bstrFilename,bstrSourcePath,lFlags)
#define IISComputer2_Import(This,bstrPassword,bstrFilename,bstrSourcePath,bstrDestPath,lFlags) (This)->lpVtbl->Import(This,bstrPassword,bstrFilename,bstrSourcePath,bstrDestPath,lFlags)
#define IISComputer2_SaveData(This) (This)->lpVtbl->SaveData(This)
#endif
#endif
  HRESULT WINAPI IISComputer2_BackupWithPassword_Proxy(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword);
  void __RPC_STUB IISComputer2_BackupWithPassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer2_RestoreWithPassword_Proxy(IISComputer2 *This,BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword);
  void __RPC_STUB IISComputer2_RestoreWithPassword_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer2_Export_Proxy(IISComputer2 *This,BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,LONG lFlags);
  void __RPC_STUB IISComputer2_Export_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer2_Import_Proxy(IISComputer2 *This,BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,BSTR bstrDestPath,LONG lFlags);
  void __RPC_STUB IISComputer2_Import_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IISComputer2_SaveData_Proxy(IISComputer2 *This);
  void __RPC_STUB IISComputer2_SaveData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  EXTERN_C const CLSID CLSID_IISExtComputer;
#ifdef __cplusplus
  class IISExtComputer;
#endif
  EXTERN_C const CLSID CLSID_IISExtApp;
#ifdef __cplusplus
  class IISExtApp;
#endif
  EXTERN_C const CLSID CLSID_IISExtServer;
#ifdef __cplusplus
  class IISExtServer;
#endif
  EXTERN_C const CLSID CLSID_IISExtDsCrMap;
#ifdef __cplusplus
  class IISExtDsCrMap;
#endif
  EXTERN_C const CLSID CLSID_IISExtApplicationPool;
#ifdef __cplusplus
  class IISExtApplicationPool;
#endif
  EXTERN_C const CLSID CLSID_IISExtApplicationPools;
#ifdef __cplusplus
  class IISExtApplicationPools;
#endif
  EXTERN_C const CLSID CLSID_IISExtWebService;
#ifdef __cplusplus
  class IISExtWebService;
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/share/mingw-w64/include/iimgctx.h                                                               0100644 0000000 0000000 00000007332 12404413021 016153  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IImgCtxObjects_H_
#define _IImgCtxObjects_H_

#ifdef __cplusplus
extern "C" {
#endif
  typedef void (CALLBACK *PFNIMGCTXCALLBACK)(void *,void *);
#ifdef __cplusplus
}
#endif

#define IMGCHG_SIZE 0x0001
#define IMGCHG_VIEW 0x0002
#define IMGCHG_COMPLETE 0x0004
#define IMGCHG_ANIMATE 0x0008
#define IMGCHG_MASK 0x000F

#define IMGLOAD_NOTLOADED 0x00100000
#define IMGLOAD_LOADING 0x00200000
#define IMGLOAD_STOPPED 0x00400000
#define IMGLOAD_ERROR 0x00800000
#define IMGLOAD_COMPLETE 0x01000000
#define IMGLOAD_MASK 0x01F00000

#define IMGBITS_NONE 0x02000000
#define IMGBITS_PARTIAL 0x04000000
#define IMGBITS_TOTAL 0x08000000
#define IMGBITS_MASK 0x0E000000

#define IMGANIM_ANIMATED 0x10000000
#define IMGANIM_MASK 0x10000000

#define IMGTRANS_OPAQUE 0x20000000
#define IMGTRANS_MASK 0x20000000

#define DWN_COLORMODE 0x0000003F
#define DWN_DOWNLOADONLY 0x00000040
#define DWN_FORCEDITHER 0x00000080
#define DWN_RAWIMAGE 0x00000100
#define DWN_MIRRORIMAGE 0x00000200

#undef INTERFACE
#define INTERFACE IImgCtx

DEFINE_GUID(IID_IImgCtx,0x3050f3d7,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);

DECLARE_INTERFACE_(IImgCtx,IUnknown) {
#ifndef NO_BASEINTERFACE_FUNCS
  STDMETHOD(QueryInterface)(THIS_ REFIID riid,LPVOID *ppvObj) PURE;
  STDMETHOD_(ULONG,AddRef)(THIS) PURE;
  STDMETHOD_(ULONG,Release)(THIS) PURE;
#endif
  STDMETHOD(Load)(THIS_ LPCWSTR pszUrl,DWORD dwFlags) PURE;
  STDMETHOD(SelectChanges)(THIS_ ULONG ulChgOn,ULONG ulChgOff,WINBOOL fSignal) PURE;
  STDMETHOD(SetCallback)(THIS_ PFNIMGCTXCALLBACK pfn,void *pvPrivateData) PURE;
  STDMETHOD(Disconnect)(THIS) PURE;
  STDMETHOD(GetUpdateRects)(THIS_ struct tagRECT *prc,struct tagRECT *prcImg,__LONG32 *pcrc) PURE;
  STDMETHOD(GetStateInfo)(THIS_ ULONG *pulState,struct tagSIZE *psize,WINBOOL fClearChanges) PURE;
  STDMETHOD(GetPalette)(THIS_ HPALETTE *phpal) PURE;
  STDMETHOD(Draw)(THIS_ HDC hdc,struct tagRECT *prcBounds) PURE;
  STDMETHOD(Tile)(THIS_ HDC hdc,struct tagPOINT *pptBackOrg,struct tagRECT *prcClip,struct tagSIZE *psize) PURE;
  STDMETHOD(StretchBlt)(THIS_ HDC hdc,int dstX,int dstY,int dstXE,int dstYE,int srcX,int srcY,int srcXE,int srcYE,DWORD dwROP) PURE;
};

#ifdef COBJMACROS
#define IImgCtx_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IImgCtx_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IImgCtx_Release(This) (This)->lpVtbl->Release(This)
#define IImgCtx_Load(This,pszUrl,dwFlags) (This)->lpVtbl->Load(This,pszUrl,dwFlags)
#define IImgCtx_Draw(This,hdc,prcBounds) (This)->lpVtbl->Draw(This,hdc,prcBounds)
#define IImgCtx_Tile(This,hdc,pptBackOrg,prcClip,psize) (This)->lpVtbl->Tile(This,hdc,pptBackOrg,prcClip,psize)
#define IImgCtx_GetUpdateRects(This,prc,prcImg,pcrc) (This)->lpVtbl->GetUpdateRects(This,prc,prcImg,pcrc)
#define IImgCtx_GetStateInfo(This,pulState,psize,fClearChanges) (This)->lpVtbl->GetStateInfo(This,pulState,psize,fClearChanges)
#define IImgCtx_GetPalette(This,phpal) (This)->lpVtbl->GetPalette(This,phpal)
#define IImgCtx_SelectChanges(This,ulChgOn,ulChgOff,fSignal) (This)->lpVtbl->SelectChanges(This,ulChgOn,ulChgOff,fSignal)
#define IImgCtx_SetCallback(This,pfnCallback,pvPrivateData) (This)->lpVtbl->SetCallback(This,pfnCallback,pvPrivateData)
#define IImgCtx_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IImgCtx_StretchBlt(This,hdc,dstX,dstY,dstXE,dstYE,srcX,srcY,srcXE,srcYE,dwROP) (This)->lpVtbl->StretchBlt(This,hdc,dstX,dstY,dstXE,dstYE,srcX,srcY,srcXE,srcYE,dwROP)
#endif

DEFINE_GUID(CLSID_IImgCtx,0x3050f3d6,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);
#endif
                                                                                                                                                                                                                                                                                                      usr/share/mingw-w64/include/iiscnfg.h                                                               0100644 0000000 0000000 00000075613 12404413021 016140  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IISCNFG_H_
#define _IISCNFG_H_

#define IIS_MD_LOCAL_MACHINE_PATH "LM"
#define IIS_MD_INSTANCE_ROOT "Root"
#define IIS_MD_ISAPI_FILTERS "/Filters"
#define IIS_MD_SVC_INFO_PATH "Info"
#define IIS_MD_ADSI_SCHEMA_PATH_A "/Schema"
#define IIS_MD_ADSI_SCHEMA_PATH_W L"/Schema"
#define IIS_MD_ADSI_METAID_BEGIN 130000

#define IIS_MD_UT_SERVER 1
#define IIS_MD_UT_FILE 2
#define IIS_MD_UT_WAM 100
#define ASP_MD_UT_APP 101
#define IIS_MD_UT_END_RESERVED 2000

#define IIS_MD_ID_BEGIN_RESERVED 0x00000001
#define IIS_MD_ID_END_RESERVED 0x00007fff
#define ASP_MD_ID_BEGIN_RESERVED 0x00007000
#define ASP_MD_ID_END_RESERVED 0x000074ff
#define WAM_MD_ID_BEGIN_RESERVED 0x00007500
#define WAM_MD_ID_END_RESERVED 0x00007fff
#define FP_MD_ID_BEGIN_RESERVED 0x00008000
#define FP_MD_ID_END_RESERVED 0x00008fff
#define SMTP_MD_ID_BEGIN_RESERVED 0x00009000
#define SMTP_MD_ID_END_RESERVED 0x00009fff
#define POP3_MD_ID_BEGIN_RESERVED 0x0000a000
#define POP3_MD_ID_END_RESERVED 0x0000afff
#define NNTP_MD_ID_BEGIN_RESERVED 0x0000b000
#define NNTP_MD_ID_END_RESERVED 0x0000bfff
#define IMAP_MD_ID_BEGIN_RESERVED 0x0000c000
#define IMAP_MD_ID_END_RESERVED 0x0000cfff
#define MSCS_MD_ID_BEGIN_RESERVED 0x0000d000
#define MSCS_MD_ID_END_RESERVED 0x0000dfff
#define APPCTR_MD_ID_BEGIN_RESERVED 0x0000e000
#define APPCTR_MD_ID_END_RESERVED 0x0000efff

#define USER_MD_ID_BASE_RESERVED 0x0000ffff

#define IIS_MD_SERVER_BASE 1000

#define MD_MAX_BANDWIDTH (IIS_MD_SERVER_BASE+0)
#define MD_KEY_TYPE (IIS_MD_SERVER_BASE+2)
#define MD_MAX_BANDWIDTH_BLOCKED (IIS_MD_SERVER_BASE+3)
#define MD_SCHEMA_METAID (IIS_MD_SERVER_BASE+4)

#define MD_SERVER_COMMAND (IIS_MD_SERVER_BASE+12)
#define MD_CONNECTION_TIMEOUT (IIS_MD_SERVER_BASE+13)
#define MD_MAX_CONNECTIONS (IIS_MD_SERVER_BASE+14)
#define MD_SERVER_COMMENT (IIS_MD_SERVER_BASE+15)
#define MD_SERVER_STATE (IIS_MD_SERVER_BASE+16)
#define MD_SERVER_AUTOSTART (IIS_MD_SERVER_BASE+17)
#define MD_SERVER_SIZE (IIS_MD_SERVER_BASE+18)
#define MD_SERVER_LISTEN_BACKLOG (IIS_MD_SERVER_BASE+19)
#define MD_SERVER_LISTEN_TIMEOUT (IIS_MD_SERVER_BASE+20)
#define MD_DOWNLEVEL_ADMIN_INSTANCE (IIS_MD_SERVER_BASE+21)
#define MD_LEVELS_TO_SCAN (IIS_MD_SERVER_BASE+22)
#define MD_SERVER_BINDINGS (IIS_MD_SERVER_BASE+23)
#define MD_MAX_ENDPOINT_CONNECTIONS (IIS_MD_SERVER_BASE+24)
#define MD_SERVER_CONFIGURATION_INFO (IIS_MD_SERVER_BASE+27)
#define MD_IISADMIN_EXTENSIONS (IIS_MD_SERVER_BASE+28)
#define MD_DISABLE_SOCKET_POOLING (IIS_MD_SERVER_BASE+29)
#define MD_METADATA_ID_REGISTRATION (IIS_MD_SERVER_BASE+30)

#define IIS_MD_HTTP_BASE 2000

#define MD_SECURE_BINDINGS (IIS_MD_HTTP_BASE+21)

#define MD_FILTER_LOAD_ORDER (IIS_MD_HTTP_BASE+40)
#define MD_FILTER_IMAGE_PATH (IIS_MD_HTTP_BASE+41)
#define MD_FILTER_STATE (IIS_MD_HTTP_BASE+42)
#define MD_FILTER_ENABLED (IIS_MD_HTTP_BASE+43)
#define MD_FILTER_FLAGS (IIS_MD_HTTP_BASE+44)
#define MD_FILTER_DESCRIPTION (IIS_MD_HTTP_BASE+45)
#define MD_FILTER_ENABLE_CACHE (IIS_MD_HTTP_BASE+46)

#define MD_ADV_NOTIFY_PWD_EXP_IN_DAYS (IIS_MD_HTTP_BASE+63)
#define MD_ADV_CACHE_TTL (IIS_MD_HTTP_BASE+64)
#define MD_NET_LOGON_WKS (IIS_MD_HTTP_BASE+65)
#define MD_USE_HOST_NAME (IIS_MD_HTTP_BASE+66)

#define MD_AUTH_CHANGE_FLAGS (IIS_MD_HTTP_BASE+68)

#define MD_PROCESS_NTCR_IF_LOGGED_ON (IIS_MD_HTTP_BASE+70)

#define MD_FRONTPAGE_WEB (IIS_MD_HTTP_BASE+72)
#define MD_IN_PROCESS_ISAPI_APPS (IIS_MD_HTTP_BASE+73)

#define MD_ALLOW_PATH_INFO_FOR_SCRIPT_MAPPINGS (IIS_MD_HTTP_BASE+95)

#define MD_APP_FRIENDLY_NAME (IIS_MD_HTTP_BASE+102)
#define MD_APP_ROOT (IIS_MD_HTTP_BASE+103)
#define MD_APP_ISOLATED (IIS_MD_HTTP_BASE+104)
#define MD_APP_WAM_CLSID (IIS_MD_HTTP_BASE+105)
#define MD_APP_PACKAGE_ID (IIS_MD_HTTP_BASE+106)
#define MD_APP_PACKAGE_NAME (IIS_MD_HTTP_BASE+107)
#define MD_APP_OOP_RECOVER_LIMIT (IIS_MD_HTTP_BASE+110)
#define MD_APP_PERIODIC_RESTART_TIME (IIS_MD_HTTP_BASE+111)
#define MD_APP_PERIODIC_RESTART_REQUESTS (IIS_MD_HTTP_BASE+112)
#define MD_APP_PERIODIC_RESTART_SCHEDULE (IIS_MD_HTTP_BASE+113)
#define MD_APP_SHUTDOWN_TIME_LIMIT (IIS_MD_HTTP_BASE+114)

#define MD_ADMIN_INSTANCE (IIS_MD_HTTP_BASE+115)

#define MD_NOT_DELETABLE (IIS_MD_HTTP_BASE+116)

#define MD_APP_TRACE_URL_LIST (IIS_MD_HTTP_BASE+118)
#define MD_CENTRAL_W3C_LOGGING_ENABLED (IIS_MD_HTTP_BASE+119)

#define MD_CUSTOM_ERROR_DESC (IIS_MD_HTTP_BASE+120)

#define MD_CAL_VC_PER_CONNECT (IIS_MD_HTTP_BASE+130)
#define MD_CAL_AUTH_RESERVE_TIMEOUT (IIS_MD_HTTP_BASE+131)
#define MD_CAL_SSL_RESERVE_TIMEOUT (IIS_MD_HTTP_BASE+132)
#define MD_CAL_W3_ERROR (IIS_MD_HTTP_BASE+133)

#define MD_CPU_CGI_ENABLED (IIS_MD_HTTP_BASE+140)
#define MD_CPU_APP_ENABLED (IIS_MD_HTTP_BASE+141)
#define MD_CPU_LIMITS_ENABLED (IIS_MD_HTTP_BASE+143)

#define MD_CPU_RESET_INTERVAL (IIS_MD_HTTP_BASE+144)

#define MD_CPU_LOGGING_INTERVAL (IIS_MD_HTTP_BASE+145)
#define MD_CPU_LOGGING_OPTIONS (IIS_MD_HTTP_BASE+146)
#define MD_CPU_CGI_LIMIT (IIS_MD_HTTP_BASE+148)
#define MD_CPU_LIMIT_LOGEVENT (IIS_MD_HTTP_BASE+149)
#define MD_CPU_LIMIT_PRIORITY (IIS_MD_HTTP_BASE+150)
#define MD_CPU_LIMIT_PROCSTOP (IIS_MD_HTTP_BASE+151)
#define MD_CPU_LIMIT_PAUSE (IIS_MD_HTTP_BASE+152)

#define MD_SET_HOST_NAME (IIS_MD_HTTP_BASE+154)

#define MD_CPU_DISABLE_ALL_LOGGING 0x0
#define MD_CPU_ENABLE_ALL_PROC_LOGGING 0x1
#define MD_CPU_ENABLE_CGI_LOGGING 0x2
#define MD_CPU_ENABLE_APP_LOGGING 0x4

#define MD_CPU_ENABLE_EVENT 0x01
#define MD_CPU_ENABLE_PROC_TYPE 0x02
#define MD_CPU_ENABLE_USER_TIME 0x04
#define MD_CPU_ENABLE_KERNEL_TIME 0x08
#define MD_CPU_ENABLE_PAGE_FAULTS 0x10
#define MD_CPU_ENABLE_TOTAL_PROCS 0x20
#define MD_CPU_ENABLE_ACTIVE_PROCS 0x40
#define MD_CPU_ENABLE_TERMINATED_PROCS 0x80

#define MD_CPU_ENABLE_LOGGING 0x80000000

#define MD_ISAPI_RESTRICTION_LIST (IIS_MD_HTTP_BASE+163)
#define MD_CGI_RESTRICTION_LIST (IIS_MD_HTTP_BASE+164)
#define MD_RESTRICTION_LIST_CUSTOM_DESC (IIS_MD_HTTP_BASE+165)
#define MD_SECURITY_SETUP_REQUIRED (IIS_MD_HTTP_BASE+166)
#define MD_APP_DEPENDENCIES (IIS_MD_HTTP_BASE+167)
#define MD_WEB_SVC_EXT_RESTRICTION_LIST (IIS_MD_HTTP_BASE+168)

#define MD_MD_SERVER_SS_AUTH_MAPPING (IIS_MD_HTTP_BASE+200)

#define MD_CERT_NO_REVOC_CHECK 0x00000001
#define MD_CERT_CACHE_RETRIEVAL_ONLY 0x00000002
#define MD_CERT_CHECK_REVOCATION_FRESHNESS_TIME 0x00000004
#define MD_CERT_NO_USAGE_CHECK 0x00010000

#define MD_HC_COMPRESSION_DIRECTORY (IIS_MD_HTTP_BASE+210)
#define MD_HC_CACHE_CONTROL_HEADER (IIS_MD_HTTP_BASE+211)
#define MD_HC_EXPIRES_HEADER (IIS_MD_HTTP_BASE+212)
#define MD_HC_DO_DYNAMIC_COMPRESSION (IIS_MD_HTTP_BASE+213)
#define MD_HC_DO_STATIC_COMPRESSION (IIS_MD_HTTP_BASE+214)
#define MD_HC_DO_ON_DEMAND_COMPRESSION (IIS_MD_HTTP_BASE+215)
#define MD_HC_DO_DISK_SPACE_LIMITING (IIS_MD_HTTP_BASE+216)
#define MD_HC_NO_COMPRESSION_FOR_HTTP_10 (IIS_MD_HTTP_BASE+217)
#define MD_HC_NO_COMPRESSION_FOR_PROXIES (IIS_MD_HTTP_BASE+218)
#define MD_HC_NO_COMPRESSION_FOR_RANGE (IIS_MD_HTTP_BASE+219)
#define MD_HC_SEND_CACHE_HEADERS (IIS_MD_HTTP_BASE+220)
#define MD_HC_MAX_DISK_SPACE_USAGE (IIS_MD_HTTP_BASE+221)
#define MD_HC_IO_BUFFER_SIZE (IIS_MD_HTTP_BASE+222)
#define MD_HC_COMPRESSION_BUFFER_SIZE (IIS_MD_HTTP_BASE+223)
#define MD_HC_MAX_QUEUE_LENGTH (IIS_MD_HTTP_BASE+224)
#define MD_HC_FILES_DELETED_PER_DISK_FREE (IIS_MD_HTTP_BASE+225)
#define MD_HC_MIN_FILE_SIZE_FOR_COMP (IIS_MD_HTTP_BASE+226)
#define MD_HC_COMPRESSION_DLL (IIS_MD_HTTP_BASE+237)
#define MD_HC_FILE_EXTENSIONS (IIS_MD_HTTP_BASE+238)
#define MD_HC_MIME_TYPE (IIS_MD_HTTP_BASE+239)
#define MD_HC_PRIORITY (IIS_MD_HTTP_BASE+240)
#define MD_HC_DYNAMIC_COMPRESSION_LEVEL (IIS_MD_HTTP_BASE+241)
#define MD_HC_ON_DEMAND_COMP_LEVEL (IIS_MD_HTTP_BASE+242)
#define MD_HC_CREATE_FLAGS (IIS_MD_HTTP_BASE+243)
#define MD_HC_SCRIPT_FILE_EXTENSIONS (IIS_MD_HTTP_BASE+244)

#define MD_HC_DO_NAMESPACE_DYNAMIC_COMPRESSION (IIS_MD_HTTP_BASE+255)
#define MD_HC_DO_NAMESPACE_STATIC_COMPRESSION (IIS_MD_HTTP_BASE+256)

#define MD_WIN32_ERROR (IIS_MD_SERVER_BASE+99)

#define IIS_MD_VR_BASE 3000

#define MD_VR_PATH (IIS_MD_VR_BASE+1)
#define MD_VR_USERNAME (IIS_MD_VR_BASE+2)
#define MD_VR_PASSWORD (IIS_MD_VR_BASE+3)
#define MD_VR_PASSTHROUGH (IIS_MD_VR_BASE+6)
#define MD_VR_NO_CACHE (IIS_MD_VR_BASE+7)
#define MD_VR_IGNORE_TRANSLATE (IIS_MD_VR_BASE+8)

#define IIS_MD_LOG_BASE 4000

#define MD_LOG_TYPE (IIS_MD_LOG_BASE+0)
#define MD_LOGFILE_DIRECTORY (IIS_MD_LOG_BASE+1)
#define MD_LOG_UNUSED1 (IIS_MD_LOG_BASE+2)
#define MD_LOGFILE_PERIOD (IIS_MD_LOG_BASE+3)
#define MD_LOGFILE_TRUNCATE_SIZE (IIS_MD_LOG_BASE+4)
#define MD_LOG_PLUGIN_MOD_ID (IIS_MD_LOG_BASE+5)
#define MD_LOG_PLUGIN_UI_ID (IIS_MD_LOG_BASE+6)
#define MD_LOGSQL_DATA_SOURCES (IIS_MD_LOG_BASE+7)
#define MD_LOGSQL_TABLE_NAME (IIS_MD_LOG_BASE+8)
#define MD_LOGSQL_USER_NAME (IIS_MD_LOG_BASE+9)
#define MD_LOGSQL_PASSWORD (IIS_MD_LOG_BASE+10)
#define MD_LOG_PLUGIN_ORDER (IIS_MD_LOG_BASE+11)
#define MD_LOG_PLUGINS_AVAILABLE (IIS_MD_LOG_BASE+12)
#define MD_LOGEXT_FIELD_MASK (IIS_MD_LOG_BASE+13)
#define MD_LOGEXT_FIELD_MASK2 (IIS_MD_LOG_BASE+14)

#define MD_LOGFILE_LOCALTIME_ROLLOVER (IIS_MD_LOG_BASE+15)

#define IIS_MD_LOG_LAST MD_LOGFILE_LOCALTIME_ROLLOVER

#define MD_GLOBAL_BINARY_LOGGING_ENABLED (IIS_MD_LOG_BASE+16)

#define MD_LOG_TYPE_DISABLED 0
#define MD_LOG_TYPE_ENABLED 1

#define MD_LOGFILE_PERIOD_NONE 0
#define MD_LOGFILE_PERIOD_MAXSIZE 0
#define MD_LOGFILE_PERIOD_DAILY 1
#define MD_LOGFILE_PERIOD_WEEKLY 2
#define MD_LOGFILE_PERIOD_MONTHLY 3
#define MD_LOGFILE_PERIOD_HOURLY 4

#define MD_EXTLOG_DATE 0x00000001
#define MD_EXTLOG_TIME 0x00000002
#define MD_EXTLOG_CLIENT_IP 0x00000004
#define MD_EXTLOG_USERNAME 0x00000008
#define MD_EXTLOG_SITE_NAME 0x00000010
#define MD_EXTLOG_COMPUTER_NAME 0x00000020
#define MD_EXTLOG_SERVER_IP 0x00000040
#define MD_EXTLOG_METHOD 0x00000080
#define MD_EXTLOG_URI_STEM 0x00000100
#define MD_EXTLOG_URI_QUERY 0x00000200
#define MD_EXTLOG_HTTP_STATUS 0x00000400
#define MD_EXTLOG_WIN32_STATUS 0x00000800
#define MD_EXTLOG_BYTES_SENT 0x00001000
#define MD_EXTLOG_BYTES_RECV 0x00002000
#define MD_EXTLOG_TIME_TAKEN 0x00004000
#define MD_EXTLOG_SERVER_PORT 0x00008000
#define MD_EXTLOG_USER_AGENT 0x00010000
#define MD_EXTLOG_COOKIE 0x00020000
#define MD_EXTLOG_REFERER 0x00040000
#define MD_EXTLOG_PROTOCOL_VERSION 0x00080000
#define MD_EXTLOG_HOST 0x00100000
#define MD_EXTLOG_HTTP_SUB_STATUS 0x00200000

#define MD_DEFAULT_EXTLOG_FIELDS (MD_EXTLOG_CLIENT_IP | MD_EXTLOG_TIME | MD_EXTLOG_METHOD | MD_EXTLOG_URI_STEM | MD_EXTLOG_HTTP_STATUS | MD_EXTLOG_HTTP_SUB_STATUS | MD_EXTLOG_SITE_NAME)

#define IIS_MD_LOGCUSTOM_BASE 4500

#define MD_LOGCUSTOM_PROPERTY_NAME (IIS_MD_LOGCUSTOM_BASE+1)
#define MD_LOGCUSTOM_PROPERTY_HEADER (IIS_MD_LOGCUSTOM_BASE+2)
#define MD_LOGCUSTOM_PROPERTY_ID (IIS_MD_LOGCUSTOM_BASE+3)
#define MD_LOGCUSTOM_PROPERTY_MASK (IIS_MD_LOGCUSTOM_BASE+4)
#define MD_LOGCUSTOM_PROPERTY_DATATYPE (IIS_MD_LOGCUSTOM_BASE+5)
#define MD_LOGCUSTOM_SERVICES_STRING (IIS_MD_LOGCUSTOM_BASE+6)

#define MD_CPU_LOGGING_MASK (IIS_MD_LOGCUSTOM_BASE+7)

#define MD_LOGCUSTOM_PROPERTY_NODE_ID (IIS_MD_LOGCUSTOM_BASE+8)

#define IIS_MD_LOGCUSTOM_LAST MD_LOGCUSTOM_PROPERTY_NODE_ID

#define MD_LOGCUSTOM_DATATYPE_INT 0
#define MD_LOGCUSTOM_DATATYPE_UINT 1
#define MD_LOGCUSTOM_DATATYPE_LONG 2
#define MD_LOGCUSTOM_DATATYPE_ULONG 3
#define MD_LOGCUSTOM_DATATYPE_FLOAT 4
#define MD_LOGCUSTOM_DATATYPE_DOUBLE 5
#define MD_LOGCUSTOM_DATATYPE_LPSTR 6
#define MD_LOGCUSTOM_DATATYPE_LPWSTR 7

#define MD_NOTIFY_SECURE_PORT 0x00000001
#define MD_NOTIFY_NONSECURE_PORT 0x00000002

#define MD_NOTIFY_READ_RAW_DATA 0x00008000
#define MD_NOTIFY_PREPROC_HEADERS 0x00004000
#define MD_NOTIFY_AUTHENTICATION 0x00002000
#define MD_NOTIFY_URL_MAP 0x00001000
#define MD_NOTIFY_ACCESS_DENIED 0x00000800
#define MD_NOTIFY_SEND_RESPONSE 0x00000040
#define MD_NOTIFY_SEND_RAW_DATA 0x00000400
#define MD_NOTIFY_LOG 0x00000200
#define MD_NOTIFY_END_OF_REQUEST 0x00000080
#define MD_NOTIFY_END_OF_NET_SESSION 0x00000100
#define MD_NOTIFY_AUTH_COMPLETE 0x04000000

#define MD_NOTIFY_ORDER_HIGH 0x00080000
#define MD_NOTIFY_ORDER_MEDIUM 0x00040000
#define MD_NOTIFY_ORDER_LOW 0x00020000
#define MD_NOTIFY_ORDER_DEFAULT MD_NOTIFY_ORDER_LOW

#define MD_NOTIFY_ORDER_MASK (MD_NOTIFY_ORDER_HIGH | MD_NOTIFY_ORDER_MEDIUM | MD_NOTIFY_ORDER_LOW)

#define IIS_MD_FTP_BASE 5000

#define MD_EXIT_MESSAGE (IIS_MD_FTP_BASE+1)
#define MD_GREETING_MESSAGE (IIS_MD_FTP_BASE+2)
#define MD_MAX_CLIENTS_MESSAGE (IIS_MD_FTP_BASE+3)
#define MD_MSDOS_DIR_OUTPUT (IIS_MD_FTP_BASE+4)
#define MD_ALLOW_ANONYMOUS (IIS_MD_FTP_BASE+5)
#define MD_ANONYMOUS_ONLY (IIS_MD_FTP_BASE+6)
#define MD_LOG_ANONYMOUS (IIS_MD_FTP_BASE+7)
#define MD_LOG_NONANONYMOUS (IIS_MD_FTP_BASE+8)
#define MD_ALLOW_REPLACE_ON_RENAME (IIS_MD_FTP_BASE+9)
#define MD_SHOW_4_DIGIT_YEAR (IIS_MD_FTP_BASE+10)
#define MD_BANNER_MESSAGE (IIS_MD_FTP_BASE+11)
#define MD_USER_ISOLATION (IIS_MD_FTP_BASE+12)
#define MD_FTP_LOG_IN_UTF_8 (IIS_MD_FTP_BASE+13)
#define MD_AD_CONNECTIONS_USERNAME (IIS_MD_FTP_BASE+14)
#define MD_AD_CONNECTIONS_PASSWORD (IIS_MD_FTP_BASE+15)
#define MD_PASSIVE_PORT_RANGE (IIS_MD_FTP_BASE+16)
#define MD_SUPPRESS_DEFAULT_BANNER (IIS_MD_FTP_BASE+17)

#define IIS_MD_SSL_BASE 5500

#define MD_SSL_PUBLIC_KEY (IIS_MD_SSL_BASE+0)
#define MD_SSL_PRIVATE_KEY (IIS_MD_SSL_BASE+1)
#define MD_SSL_KEY_PASSWORD (IIS_MD_SSL_BASE+2)
#define MD_SSL_KEY_REQUEST (IIS_MD_SSL_BASE+3)

#define MD_SSL_USE_DS_MAPPER (IIS_MD_SSL_BASE+19)

#define MD_SSL_ALWAYS_NEGO_CLIENT_CERT (IIS_MD_SSL_BASE+21)

#define IIS_MD_FILE_PROP_BASE 6000

#define MD_AUTHORIZATION (IIS_MD_FILE_PROP_BASE)
#define MD_REALM (IIS_MD_FILE_PROP_BASE+1)
#define MD_HTTP_EXPIRES (IIS_MD_FILE_PROP_BASE+2)
#define MD_HTTP_PICS (IIS_MD_FILE_PROP_BASE+3)
#define MD_HTTP_CUSTOM (IIS_MD_FILE_PROP_BASE+4)
#define MD_DIRECTORY_BROWSING (IIS_MD_FILE_PROP_BASE+5)
#define MD_DEFAULT_LOAD_FILE (IIS_MD_FILE_PROP_BASE+6)
#define MD_CUSTOM_ERROR (IIS_MD_FILE_PROP_BASE+8)
#define MD_FOOTER_DOCUMENT (IIS_MD_FILE_PROP_BASE+9)
#define MD_FOOTER_ENABLED (IIS_MD_FILE_PROP_BASE+10)
#define MD_HTTP_REDIRECT (IIS_MD_FILE_PROP_BASE+11)
#define MD_DEFAULT_LOGON_DOMAIN (IIS_MD_FILE_PROP_BASE+12)
#define MD_LOGON_METHOD (IIS_MD_FILE_PROP_BASE+13)
#define MD_SCRIPT_MAPS (IIS_MD_FILE_PROP_BASE+14)
#define MD_MIME_MAP (IIS_MD_FILE_PROP_BASE+15)
#define MD_ACCESS_PERM (IIS_MD_FILE_PROP_BASE+16)
#define MD_IP_SEC (IIS_MD_FILE_PROP_BASE+19)
#define MD_ANONYMOUS_USER_NAME (IIS_MD_FILE_PROP_BASE+20)
#define MD_ANONYMOUS_PWD (IIS_MD_FILE_PROP_BASE+21)
#define MD_ANONYMOUS_USE_SUBAUTH (IIS_MD_FILE_PROP_BASE+22)
#define MD_DONT_LOG (IIS_MD_FILE_PROP_BASE+23)
#define MD_ADMIN_ACL (IIS_MD_FILE_PROP_BASE+27)
#define MD_SSI_EXEC_DISABLED (IIS_MD_FILE_PROP_BASE+28)
#define MD_DO_REVERSE_DNS (IIS_MD_FILE_PROP_BASE+29)
#define MD_SSL_ACCESS_PERM (IIS_MD_FILE_PROP_BASE+30)
#define MD_AUTHORIZATION_PERSISTENCE (IIS_MD_FILE_PROP_BASE+31)
#define MD_NTAUTHENTICATION_PROVIDERS (IIS_MD_FILE_PROP_BASE+32)
#define MD_SCRIPT_TIMEOUT (IIS_MD_FILE_PROP_BASE+33)
#define MD_CACHE_EXTENSIONS (IIS_MD_FILE_PROP_BASE+34)
#define MD_CREATE_PROCESS_AS_USER (IIS_MD_FILE_PROP_BASE+35)
#define MD_CREATE_PROC_NEW_CONSOLE (IIS_MD_FILE_PROP_BASE+36)
#define MD_POOL_IDC_TIMEOUT (IIS_MD_FILE_PROP_BASE+37)
#define MD_ALLOW_KEEPALIVES (IIS_MD_FILE_PROP_BASE+38)
#define MD_IS_CONTENT_INDEXED (IIS_MD_FILE_PROP_BASE+39)
#define MD_CC_NO_CACHE (IIS_MD_FILE_PROP_BASE+41)
#define MD_CC_MAX_AGE (IIS_MD_FILE_PROP_BASE+42)
#define MD_CC_OTHER (IIS_MD_FILE_PROP_BASE+43)
#define MD_REDIRECT_HEADERS (IIS_MD_FILE_PROP_BASE+44)
#define MD_UPLOAD_READAHEAD_SIZE (IIS_MD_FILE_PROP_BASE+45)
#define MD_PUT_READ_SIZE (IIS_MD_FILE_PROP_BASE+46)
#define MD_USE_DIGEST_SSP (IIS_MD_FILE_PROP_BASE+47)

#define MD_ENABLE_URL_AUTHORIZATION (IIS_MD_FILE_PROP_BASE+48)
#define MD_URL_AUTHORIZATION_STORE_NAME (IIS_MD_FILE_PROP_BASE+49)
#define MD_URL_AUTHORIZATION_SCOPE_NAME (IIS_MD_FILE_PROP_BASE+50)

#define MD_MAX_REQUEST_ENTITY_ALLOWED (IIS_MD_FILE_PROP_BASE+51)

#define MD_PASSPORT_REQUIRE_AD_MAPPING (IIS_MD_FILE_PROP_BASE+52)

#define MD_URL_AUTHORIZATION_IMPERSONATION_LEVEL (IIS_MD_FILE_PROP_BASE+53)

#define ASP_MD_SERVER_BASE 7000

#define MD_ASP_BUFFERINGON (ASP_MD_SERVER_BASE + 0)
#define MD_ASP_LOGERRORREQUESTS (ASP_MD_SERVER_BASE + 1)
#define MD_ASP_SCRIPTERRORSSENTTOBROWSER (ASP_MD_SERVER_BASE + 2)
#define MD_ASP_SCRIPTERRORMESSAGE (ASP_MD_SERVER_BASE + 3)
#define MD_ASP_SCRIPTFILECACHESIZE (ASP_MD_SERVER_BASE + 4)
#define MD_ASP_SCRIPTENGINECACHEMAX (ASP_MD_SERVER_BASE + 5)
#define MD_ASP_SCRIPTTIMEOUT (ASP_MD_SERVER_BASE + 6)
#define MD_ASP_SESSIONTIMEOUT (ASP_MD_SERVER_BASE + 7)
#define MD_ASP_ENABLEPARENTPATHS (ASP_MD_SERVER_BASE + 8)
#define MD_ASP_MEMFREEFACTOR (ASP_MD_SERVER_BASE + 9)
#define MD_ASP_MINUSEDBLOCKS (ASP_MD_SERVER_BASE + 10)
#define MD_ASP_ALLOWSESSIONSTATE (ASP_MD_SERVER_BASE + 11)
#define MD_ASP_SCRIPTLANGUAGE (ASP_MD_SERVER_BASE + 12)
#define MD_ASP_QUEUETIMEOUT (ASP_MD_SERVER_BASE + 13)
#define MD_ASP_ALLOWOUTOFPROCCOMPONENTS (ASP_MD_SERVER_BASE + 14)
#define MD_ASP_ALLOWOUTOFPROCCMPNTS (MD_ASP_ALLOWOUTOFPROCCOMPONENTS)
#define MD_ASP_EXCEPTIONCATCHENABLE (ASP_MD_SERVER_BASE + 15)
#define MD_ASP_CODEPAGE (ASP_MD_SERVER_BASE + 16)
#define MD_ASP_SCRIPTLANGUAGELIST (ASP_MD_SERVER_BASE + 17)
#define MD_ASP_ENABLESERVERDEBUG (ASP_MD_SERVER_BASE + 18)
#define MD_ASP_ENABLECLIENTDEBUG (ASP_MD_SERVER_BASE + 19)
#define MD_ASP_TRACKTHREADINGMODEL (ASP_MD_SERVER_BASE + 20)

#define MD_ASP_ENABLEASPHTMLFALLBACK (ASP_MD_SERVER_BASE + 21)
#define MD_ASP_ENABLECHUNKEDENCODING (ASP_MD_SERVER_BASE + 22)
#define MD_ASP_ENABLETYPELIBCACHE (ASP_MD_SERVER_BASE + 23)
#define MD_ASP_ERRORSTONTLOG (ASP_MD_SERVER_BASE + 24)
#define MD_ASP_PROCESSORTHREADMAX (ASP_MD_SERVER_BASE + 25)
#define MD_ASP_REQEUSTQUEUEMAX (ASP_MD_SERVER_BASE + 26)
#define MD_ASP_ENABLEAPPLICATIONRESTART (ASP_MD_SERVER_BASE + 27)
#define MD_ASP_QUEUECONNECTIONTESTTIME (ASP_MD_SERVER_BASE + 28)
#define MD_ASP_SESSIONMAX (ASP_MD_SERVER_BASE + 29)

#define MD_ASP_THREADGATEENABLED (ASP_MD_SERVER_BASE + 30)
#define MD_ASP_THREADGATETIMESLICE (ASP_MD_SERVER_BASE + 31)
#define MD_ASP_THREADGATESLEEPDELAY (ASP_MD_SERVER_BASE + 32)
#define MD_ASP_THREADGATESLEEPMAX (ASP_MD_SERVER_BASE + 33)
#define MD_ASP_THREADGATELOADLOW (ASP_MD_SERVER_BASE + 34)
#define MD_ASP_THREADGATELOADHIGH (ASP_MD_SERVER_BASE + 35)

#define MD_ASP_DISKTEMPLATECACHEDIRECTORY (ASP_MD_SERVER_BASE + 36)
#define MD_ASP_MAXDISKTEMPLATECACHEFILES (ASP_MD_SERVER_BASE + 40)
#define MD_ASP_EXECUTEINMTA (ASP_MD_SERVER_BASE + 41)
#define MD_ASP_LCID (ASP_MD_SERVER_BASE + 42)
#define MD_ASP_KEEPSESSIONIDSECURE (ASP_MD_SERVER_BASE + 43)

#define MD_ASP_SERVICE_FLAGS (ASP_MD_SERVER_BASE + 44)
#define MD_ASP_SERVICE_FLAG_TRACKER (ASP_MD_SERVER_BASE + 45)
#define MD_ASP_SERVICE_FLAG_FUSION (ASP_MD_SERVER_BASE + 46)
#define MD_ASP_SERVICE_FLAG_PARTITIONS (ASP_MD_SERVER_BASE + 47)
#define MD_ASP_SERVICE_PARTITION_ID (ASP_MD_SERVER_BASE + 48)
#define MD_ASP_SERVICE_SXS_NAME (ASP_MD_SERVER_BASE + 49)

#define MD_ASP_SERVICE_ENABLE_TRACKER 1
#define MD_ASP_SERVICE_ENABLE_SXS 2
#define MD_ASP_SERVICE_USE_PARTITION 4

#define MD_ASP_CALCLINENUMBER (ASP_MD_SERVER_BASE + 50)

#define MD_ASP_RUN_ONEND_ANON (ASP_MD_SERVER_BASE + 51)

#define MD_ASP_BUFFER_LIMIT (ASP_MD_SERVER_BASE + 52)

#define MD_ASP_MAX_REQUEST_ENTITY_ALLOWED (ASP_MD_SERVER_BASE + 53)
#define MD_ASP_MAXREQUESTENTITY MD_ASP_MAX_REQUEST_ENTITY_ALLOWED

#define MD_ASP_ID_LAST (ASP_MD_SERVER_BASE + 53)

#define WAM_MD_SERVER_BASE 7500

#define MD_WAM_USER_NAME (WAM_MD_SERVER_BASE+1)
#define MD_WAM_PWD (WAM_MD_SERVER_BASE+2)

#define WEBDAV_MD_SERVER_BASE 8500

#define MD_WEBDAV_MAX_ATTRIBUTES_PER_ELEMENT (WEBDAV_MD_SERVER_BASE+1)

#define IIS_MD_APPPOOL_BASE 9000

#define MD_APPPOOL_PERIODIC_RESTART_TIME (IIS_MD_APPPOOL_BASE + 1)
#define MD_APPPOOL_PERIODIC_RESTART_REQUEST_COUNT (IIS_MD_APPPOOL_BASE + 2)
#define MD_APPPOOL_MAX_PROCESS_COUNT (IIS_MD_APPPOOL_BASE + 3)
#define MD_APPPOOL_PINGING_ENABLED (IIS_MD_APPPOOL_BASE + 4)
#define MD_APPPOOL_IDLE_TIMEOUT (IIS_MD_APPPOOL_BASE + 5)
#define MD_APPPOOL_RAPID_FAIL_PROTECTION_ENABLED (IIS_MD_APPPOOL_BASE + 6)
#define MD_APPPOOL_SMP_AFFINITIZED (IIS_MD_APPPOOL_BASE + 7)
#define MD_APPPOOL_SMP_AFFINITIZED_PROCESSOR_MASK (IIS_MD_APPPOOL_BASE + 8)
#define MD_APPPOOL_ORPHAN_PROCESSES_FOR_DEBUGGING (IIS_MD_APPPOOL_BASE + 9)
#define MD_APPPOOL_STARTUP_TIMELIMIT (IIS_MD_APPPOOL_BASE + 11)
#define MD_APPPOOL_SHUTDOWN_TIMELIMIT (IIS_MD_APPPOOL_BASE + 12)
#define MD_APPPOOL_PING_INTERVAL (IIS_MD_APPPOOL_BASE + 13)
#define MD_APPPOOL_PING_RESPONSE_TIMELIMIT (IIS_MD_APPPOOL_BASE + 14)
#define MD_APPPOOL_DISALLOW_OVERLAPPING_ROTATION (IIS_MD_APPPOOL_BASE + 15)
#define MD_APPPOOL_UL_APPPOOL_QUEUE_LENGTH (IIS_MD_APPPOOL_BASE + 17)
#define MD_APPPOOL_DISALLOW_ROTATION_ON_CONFIG_CHANGE (IIS_MD_APPPOOL_BASE + 18)
#define MD_APPPOOL_PERIODIC_RESTART_SCHEDULE (IIS_MD_APPPOOL_BASE + 20)
#define MD_APPPOOL_IDENTITY_TYPE (IIS_MD_APPPOOL_BASE + 21)
#define MD_CPU_ACTION (IIS_MD_APPPOOL_BASE + 22)
#define MD_CPU_LIMIT (IIS_MD_APPPOOL_BASE + 23)
#define MD_APPPOOL_PERIODIC_RESTART_MEMORY (IIS_MD_APPPOOL_BASE + 24)
#define MD_APPPOOL_COMMAND (IIS_MD_APPPOOL_BASE + 26)
#define MD_APPPOOL_STATE (IIS_MD_APPPOOL_BASE + 27)
#define MD_APPPOOL_AUTO_START (IIS_MD_APPPOOL_BASE + 28)
#define MD_RAPID_FAIL_PROTECTION_INTERVAL (IIS_MD_APPPOOL_BASE + 29)
#define MD_RAPID_FAIL_PROTECTION_MAX_CRASHES (IIS_MD_APPPOOL_BASE + 30)
#define MD_APPPOOL_ORPHAN_ACTION_EXE (IIS_MD_APPPOOL_BASE + 31)
#define MD_APPPOOL_ORPHAN_ACTION_PARAMS (IIS_MD_APPPOOL_BASE + 32)
#define MB_DONT_IMPERSONATE (IIS_MD_APPPOOL_BASE + 33)

#define MD_LOAD_BALANCER_CAPABILITIES (IIS_MD_APPPOOL_BASE + 34)

#define MD_APPPOOL_AUTO_SHUTDOWN_EXE (IIS_MD_APPPOOL_BASE + 35)
#define MD_APPPOOL_AUTO_SHUTDOWN_PARAMS (IIS_MD_APPPOOL_BASE + 36)
#define MD_APP_POOL_LOG_EVENT_ON_RECYCLE (IIS_MD_APPPOOL_BASE + 37)
#define MD_APPPOOL_PERIODIC_RESTART_PRIVATE_MEMORY (IIS_MD_APPPOOL_BASE + 38)
#define MD_APPPOOL_32_BIT_APP_ON_WIN64 (IIS_MD_APPPOOL_BASE + 40)

#define MD_APP_POOL_RECYCLE_TIME 1
#define MD_APP_POOL_RECYCLE_REQUESTS 2
#define MD_APP_POOL_RECYCLE_SCHEDULE 4
#define MD_APP_POOL_RECYCLE_MEMORY 8
#define MD_APP_POOL_RECYCLE_ISAPI_UNHEALTHY 16
#define MD_APP_POOL_RECYCLE_ON_DEMAND 32
#define MD_APP_POOL_RECYCLE_CONFIG_CHANGE 64
#define MD_APP_POOL_RECYCLE_PRIVATE_MEMORY 128

#define MD_CPU_NO_ACTION 0
#define MD_CPU_KILL_W3WP 1
#define MD_CPU_TRACE 2
#define MD_CPU_THROTTLE 3

#define MD_APPPOOL_COMMAND_START 1
#define MD_APPPOOL_COMMAND_STOP 2

#define MD_APPPOOL_STATE_STARTING 1
#define MD_APPPOOL_STATE_STARTED 2
#define MD_APPPOOL_STATE_STOPPING 3
#define MD_APPPOOL_STATE_STOPPED 4

#define MD_APPPOOL_IDENTITY_TYPE_LOCALSYSTEM 0
#define MD_APPPOOL_IDENTITY_TYPE_LOCALSERVICE 1
#define MD_APPPOOL_IDENTITY_TYPE_NETWORKSERVICE 2
#define MD_APPPOOL_IDENTITY_TYPE_SPECIFICUSER 3

#define MD_LOAD_BALANCER_CAPABILITIES_BASIC 1
#define MD_LOAD_BALANCER_CAPABILITIES_SOPHISTICATED 2

#define IIS_MD_APP_BASE 9100
#define MD_APP_APPPOOL_ID (IIS_MD_APP_BASE+1)
#define MD_APP_ALLOW_TRANSIENT_REGISTRATION (IIS_MD_APP_BASE+2)
#define MD_APP_AUTO_START (IIS_MD_APP_BASE+3)
#define MD_APPPOOL_PERIODIC_RESTART_CONNECTIONS (IIS_MD_APP_BASE+4)

#define MD_APPPOOL_APPPOOL_ID (IIS_MD_APP_BASE + 101)
#define MD_APPPOOL_ALLOW_TRANSIENT_REGISTRATION (IIS_MD_APP_BASE + 102)

#define IIS_MD_GLOBAL_BASE 9200
#define MD_MAX_GLOBAL_BANDWIDTH (IIS_MD_GLOBAL_BASE+1)
#define MD_MAX_GLOBAL_CONNECTIONS (IIS_MD_GLOBAL_BASE+2)
#define MD_GLOBAL_STANDARD_APP_MODE_ENABLED (IIS_MD_GLOBAL_BASE+3)
#define MD_HEADER_WAIT_TIMEOUT (IIS_MD_GLOBAL_BASE+4)
#define MD_MIN_FILE_BYTES_PER_SEC (IIS_MD_GLOBAL_BASE+5)
#define MD_GLOBAL_LOG_IN_UTF_8 (IIS_MD_GLOBAL_BASE+6)
#define MD_DEMAND_START_THRESHOLD (IIS_MD_GLOBAL_BASE+7)

#define MD_GLOBAL_SESSIONKEY 9999
#define MD_ROOT_ENABLE_EDIT_WHILE_RUNNING 9998
#define MD_GLOBAL_CHANGE_NUMBER 9997
#define MD_ROOT_ENABLE_HISTORY 9996
#define MD_ROOT_MAX_HISTORY_FILES 9995
#define MD_GLOBAL_EDIT_WHILE_RUNNING_MAJOR_VERSION_NUMBER 9994
#define MD_GLOBAL_EDIT_WHILE_RUNNING_MINOR_VERSION_NUMBER 9993
#define MD_GLOBAL_XMLSCHEMATIMESTAMP 9992
#define MD_GLOBAL_BINSCHEMATIMESTAMP 9991
#define MD_COMMENTS 9990
#define MD_LOCATION 9989
#define MD_MAX_ERROR_FILES 9988
#define MD_STOP_LISTENING 9987

#define MD_AUTH_ANONYMOUS 0x00000001
#define MD_AUTH_BASIC 0x00000002
#define MD_AUTH_NT 0x00000004
#define MD_AUTH_PASSPORT 0x00000040

#define MD_AUTH_SINGLEREQUEST 0x00000040
#define MD_AUTH_SINGLEREQUESTIFPROXY 0x00000080
#define MD_AUTH_SINGLEREQUESTALWAYSIFPROXY 0x00000100

#define MD_ACCESS_READ 0x00000001
#define MD_ACCESS_WRITE 0x00000002
#define MD_ACCESS_EXECUTE 0x00000004
#define MD_ACCESS_SOURCE 0x00000010
#define MD_ACCESS_SCRIPT 0x00000200
#define MD_ACCESS_NO_REMOTE_WRITE 0x00000400
#define MD_ACCESS_NO_REMOTE_READ 0x00001000
#define MD_ACCESS_NO_REMOTE_EXECUTE 0x00002000
#define MD_ACCESS_NO_REMOTE_SCRIPT 0x00004000
#define MD_ACCESS_NO_PHYSICAL_DIR 0x00008000

#define MD_NONSSL_ACCESS_MASK (MD_ACCESS_READ| MD_ACCESS_WRITE| MD_ACCESS_EXECUTE| MD_ACCESS_SOURCE| MD_ACCESS_SCRIPT| MD_ACCESS_NO_REMOTE_READ| MD_ACCESS_NO_REMOTE_WRITE| MD_ACCESS_NO_REMOTE_EXECUTE| MD_ACCESS_NO_REMOTE_SCRIPT| MD_ACCESS_NO_PHYSICAL_DIR)

#define MD_ACCESS_SSL 0x00000008
#define MD_ACCESS_NEGO_CERT 0x00000020
#define MD_ACCESS_REQUIRE_CERT 0x00000040
#define MD_ACCESS_MAP_CERT 0x00000080
#define MD_ACCESS_SSL128 0x00000100

#define MD_SSL_ACCESS_MASK (MD_ACCESS_SSL| MD_ACCESS_NEGO_CERT| MD_ACCESS_REQUIRE_CERT| MD_ACCESS_MAP_CERT| MD_ACCESS_SSL128)

#define MD_ACCESS_MASK 0x0000ffff

#define MD_DIRBROW_SHOW_DATE 0x00000002
#define MD_DIRBROW_SHOW_TIME 0x00000004
#define MD_DIRBROW_SHOW_SIZE 0x00000008
#define MD_DIRBROW_SHOW_EXTENSION 0x00000010
#define MD_DIRBROW_LONG_DATE 0x00000020

#define MD_DIRBROW_ENABLED 0x80000000
#define MD_DIRBROW_LOADDEFAULT 0x40000000

#define MD_DIRBROW_MASK (MD_DIRBROW_SHOW_DATE | MD_DIRBROW_SHOW_TIME | MD_DIRBROW_SHOW_SIZE | MD_DIRBROW_SHOW_EXTENSION | MD_DIRBROW_LONG_DATE | MD_DIRBROW_LOADDEFAULT | MD_DIRBROW_ENABLED)

#define MD_LOGON_INTERACTIVE 0
#define MD_LOGON_BATCH 1
#define MD_LOGON_NETWORK 2
#define MD_LOGON_NETWORK_CLEARTEXT 3

#define MD_PASSPORT_NO_MAPPING 0
#define MD_PASSPORT_TRY_MAPPING 1
#define MD_PASSPORT_NEED_MAPPING 2

#define MD_NOTIFEXAUTH_NTLMSSL 1

#define MD_FILTER_STATE_LOADED 1
#define MD_FILTER_STATE_UNLOADED 4

#define MD_SERVER_STATE_STARTING 1
#define MD_SERVER_STATE_STARTED 2
#define MD_SERVER_STATE_STOPPING 3
#define MD_SERVER_STATE_STOPPED 4
#define MD_SERVER_STATE_PAUSING 5
#define MD_SERVER_STATE_PAUSED 6
#define MD_SERVER_STATE_CONTINUING 7

#define MD_SERVER_COMMAND_START 1
#define MD_SERVER_COMMAND_STOP 2
#define MD_SERVER_COMMAND_PAUSE 3
#define MD_SERVER_COMMAND_CONTINUE 4

#define MD_SERVER_SIZE_SMALL 0
#define MD_SERVER_SIZE_MEDIUM 1
#define MD_SERVER_SIZE_LARGE 2

#define MD_SERVER_CONFIG_SSL_40 0x00000001
#define MD_SERVER_CONFIG_SSL_128 0x00000002
#define MD_SERVER_CONFIG_ALLOW_ENCRYPT 0x00000004
#define MD_SERVER_CONFIG_AUTO_PW_SYNC 0x00000008

#define MD_SERVER_CONFIGURATION_MASK (MD_SERVER_CONFIG_SSL_40 | MD_SERVER_CONFIG_SSL_128 | MD_SERVER_CONFIG_ENCRYPT | MD_SERVER_CONFIG_AUTO_PW_SYNC)

#define MD_SCRIPTMAPFLAG_SCRIPT 0x00000001
#define MD_SCRIPTMAPFLAG_CHECK_PATH_INFO 0x00000004

#ifdef REMOVE

#define MD_SCRIPTMAPFLAG_ALLOWED_ON_READ_DIR 0x00000001
#endif

#define MD_AUTH_CHANGE_UNSECURE 0x00000001
#define MD_AUTH_CHANGE_DISABLE 0x00000002
#define MD_AUTH_ADVNOTIFY_DISABLE 0x00000004

#define MD_NETLOGON_WKS_NONE 0
#define MD_NETLOGON_WKS_IP 1
#define MD_NETLOGON_WKS_DNS 2

#define MD_ERROR_SUB401_LOGON 1
#define MD_ERROR_SUB401_LOGON_CONFIG 2
#define MD_ERROR_SUB401_LOGON_ACL 3
#define MD_ERROR_SUB401_FILTER 4
#define MD_ERROR_SUB401_APPLICATION 5
#define MD_ERROR_SUB401_URLAUTH_POLICY 7

#define MD_ERROR_SUB403_EXECUTE_ACCESS_DENIED 1
#define MD_ERROR_SUB403_READ_ACCESS_DENIED 2
#define MD_ERROR_SUB403_WRITE_ACCESS_DENIED 3
#define MD_ERROR_SUB403_SSL_REQUIRED 4
#define MD_ERROR_SUB403_SSL128_REQUIRED 5
#define MD_ERROR_SUB403_ADDR_REJECT 6
#define MD_ERROR_SUB403_CERT_REQUIRED 7
#define MD_ERROR_SUB403_SITE_ACCESS_DENIED 8
#define MD_ERROR_SUB403_TOO_MANY_USERS 9
#define MD_ERROR_SUB403_INVALID_CNFG 10
#define MD_ERROR_SUB403_PWD_CHANGE 11
#define MD_ERROR_SUB403_MAPPER_DENY_ACCESS 12
#define MD_ERROR_SUB403_CERT_REVOKED 13
#define MD_ERROR_SUB403_DIR_LIST_DENIED 14
#define MD_ERROR_SUB403_CAL_EXCEEDED 15
#define MD_ERROR_SUB403_CERT_BAD 16
#define MD_ERROR_SUB403_CERT_TIME_INVALID 17
#define MD_ERROR_SUB403_APPPOOL_DENIED 18
#define MD_ERROR_SUB403_INSUFFICIENT_PRIVILEGE_FOR_CGI 19
#define MD_ERROR_SUB403_PASSPORT_LOGIN_FAILURE 20

#define MD_ERROR_SUB404_SITE_NOT_FOUND 1
#define MD_ERROR_SUB404_DENIED_BY_POLICY 2
#define MD_ERROR_SUB404_DENIED_BY_MIMEMAP 3

#define MD_ERROR_SUB500_UNC_ACCESS 16
#define MD_ERROR_SUB500_URLAUTH_NO_STORE 17
#define MD_ERROR_SUB500_URLAUTH_STORE_ERROR 18
#define MD_ERROR_SUB500_BAD_METADATA 19
#define MD_ERROR_SUB500_URLAUTH_NO_SCOPE 20

#define MD_ERROR_SUB502_TIMEOUT 1
#define MD_ERROR_SUB502_PREMATURE_EXIT 2

#define MD_ERROR_SUB503_CPU_LIMIT 1

#define MD_ACR_READ 0x00000001
#define MD_ACR_WRITE 0x00000002
#define MD_ACR_RESTRICTED_WRITE 0x00000020
#define MD_ACR_UNSECURE_PROPS_READ 0x00000080
#define MD_ACR_ENUM_KEYS 0x00000008
#define MD_ACR_WRITE_DAC 0x00040000

#define MD_USER_ISOLATION_NONE 0
#define MD_USER_ISOLATION_BASIC 1
#define MD_USER_ISOLATION_AD 2
#define MD_USER_ISOLATION_LAST 2

#define MD_SET_DATA_RECORD(_pMDR,_id,_attr,_utype,_dtype,_dlen,_pData) { (_pMDR)->dwMDIdentifier=(_id); (_pMDR)->dwMDAttributes=(_attr); (_pMDR)->dwMDUserType=(_utype); (_pMDR)->dwMDDataType=(_dtype); (_pMDR)->dwMDDataLen=(_dlen); (_pMDR)->pbMDData=(LPBYTE)(_pData); }

#define IIS_CLASS_COMPUTER "IIsComputer"
#define IIS_CLASS_WEB_SERVICE "IIsWebService"
#define IIS_CLASS_WEB_SERVER "IIsWebServer"
#define IIS_CLASS_WEB_INFO "IIsWebInfo"
#define IIS_CLASS_WEB_DIR "IIsWebDirectory"
#define IIS_CLASS_WEB_VDIR "IIsWebVirtualDir"
#define IIS_CLASS_WEB_FILE "IIsWebFile"
#define IIS_CLASS_FTP_SERVICE "IIsFtpService"
#define IIS_CLASS_FTP_SERVER "IIsFtpServer"
#define IIS_CLASS_FTP_INFO "IIsFtpInfo"
#define IIS_CLASS_FTP_VDIR "IIsFtpVirtualDir"
#define IIS_CLASS_FILTERS "IIsFilters"
#define IIS_CLASS_FILTER "IIsFilter"
#define IIS_CLASS_LOG_MODULES "IIsLogModules"
#define IIS_CLASS_LOG_MODULE "IIsLogModule"
#define IIS_CLASS_MIMEMAP "IIsMimeMap"
#define IIS_CLASS_CERTMAPPER "IIsCertMapper"
#define IIS_CLASS_COMPRESS_SCHEMES "IIsCompressionSchemes"
#define IIS_CLASS_COMPRESS_SCHEME "IIsCompressionScheme"

#define IIS_CLASS_COMPUTER_W L"IIsComputer"
#define IIS_CLASS_WEB_SERVICE_W L"IIsWebService"
#define IIS_CLASS_WEB_SERVER_W L"IIsWebServer"
#define IIS_CLASS_WEB_INFO_W L"IIsWebInfo"
#define IIS_CLASS_WEB_DIR_W L"IIsWebDirectory"
#define IIS_CLASS_WEB_VDIR_W L"IIsWebVirtualDir"
#define IIS_CLASS_WEB_FILE_W L"IIsWebFile"
#define IIS_CLASS_FTP_SERVICE_W L"IIsFtpService"
#define IIS_CLASS_FTP_SERVER_W L"IIsFtpServer"
#define IIS_CLASS_FTP_INFO_W L"IIsFtpInfo"
#define IIS_CLASS_FTP_VDIR_W L"IIsFtpVirtualDir"
#define IIS_CLASS_FILTERS_W L"IIsFilters"
#define IIS_CLASS_FILTER_W L"IIsFilter"
#define IIS_CLASS_LOG_MODULES_W L"IIsLogModules"
#define IIS_CLASS_LOG_MODULE_W L"IIsLogModule"
#define IIS_CLASS_MIMEMAP_W L"IIsMimeMap"
#define IIS_CLASS_CERTMAPPER_W L"IIsCertMapper"
#define IIS_CLASS_COMPRESS_SCHEMES_W L"IIsCompressionSchemes"
#define IIS_CLASS_COMPRESS_SCHEME_W L"IIsCompressionScheme"
#endif
                                                                                                                     usr/share/mingw-w64/include/iisrsta.h                                                               0100644 0000000 0000000 00000015602 12404413021 016164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error This stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __iisrsta_h__
#define __iisrsta_h__

#ifndef __IIisServiceControl_FWD_DEFINED__
#define __IIisServiceControl_FWD_DEFINED__
typedef struct IIisServiceControl IIisServiceControl;
#endif

#ifndef __IisServiceControl_FWD_DEFINED__
#define __IisServiceControl_FWD_DEFINED__
#ifdef __cplusplus
typedef class IisServiceControl IisServiceControl;
#else
typedef struct IisServiceControl IisServiceControl;
#endif
#endif

#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

  DEFINE_GUID(IID_IIisServiceControl,0xE8FB8620,0x588F,0x11d2,0x9d,0x61,0x0,0xc0,0x4f,0x79,0xc5,0xfe);
  DEFINE_GUID(CLSID_IisServiceControl,0xE8FB8621,0x588F,0x11d2,0x9d,0x61,0x0,0xc0,0x4f,0x79,0xc5,0xfe);
  DEFINE_GUID(LIBID_IISRSTALib,0xE8FB8614,0x588F,0x11d2,0x9d,0x61,0x0,0xc0,0x4f,0x79,0xc5,0xfe);

  extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_v0_0_s_ifspec;

#ifndef __IIisServiceControl_INTERFACE_DEFINED__
#define __IIisServiceControl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IIisServiceControl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IIisServiceControl : public IDispatch {
  public:
    virtual HRESULT WINAPI Stop(DWORD dwTimeoutMsecs,DWORD dwForce) = 0;
    virtual HRESULT WINAPI Start(DWORD dwTimeoutMsecs) = 0;
    virtual HRESULT WINAPI Reboot(DWORD dwTimeouMsecs,DWORD dwForceAppsClosed) = 0;
    virtual HRESULT WINAPI Status(DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize,DWORD *pdwNumServices) = 0;
    virtual HRESULT WINAPI Kill(void) = 0;
  };
#else
  typedef struct IIisServiceControlVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IIisServiceControl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IIisServiceControl *This);
      ULONG (WINAPI *Release)(IIisServiceControl *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IIisServiceControl *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IIisServiceControl *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IIisServiceControl *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IIisServiceControl *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *Stop)(IIisServiceControl *This,DWORD dwTimeoutMsecs,DWORD dwForce);
      HRESULT (WINAPI *Start)(IIisServiceControl *This,DWORD dwTimeoutMsecs);
      HRESULT (WINAPI *Reboot)(IIisServiceControl *This,DWORD dwTimeouMsecs,DWORD dwForceAppsClosed);
      HRESULT (WINAPI *Status)(IIisServiceControl *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize,DWORD *pdwNumServices);
      HRESULT (WINAPI *Kill)(IIisServiceControl *This);
    END_INTERFACE
  } IIisServiceControlVtbl;
  struct IIisServiceControl {
    CONST_VTBL struct IIisServiceControlVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IIisServiceControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IIisServiceControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IIisServiceControl_Release(This) (This)->lpVtbl->Release(This)
#define IIisServiceControl_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IIisServiceControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IIisServiceControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IIisServiceControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IIisServiceControl_Stop(This,dwTimeoutMsecs,dwForce) (This)->lpVtbl->Stop(This,dwTimeoutMsecs,dwForce)
#define IIisServiceControl_Start(This,dwTimeoutMsecs) (This)->lpVtbl->Start(This,dwTimeoutMsecs)
#define IIisServiceControl_Reboot(This,dwTimeouMsecs,dwForceAppsClosed) (This)->lpVtbl->Reboot(This,dwTimeouMsecs,dwForceAppsClosed)
#define IIisServiceControl_Status(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize,pdwNumServices) (This)->lpVtbl->Status(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize,pdwNumServices)
#define IIisServiceControl_Kill(This) (This)->lpVtbl->Kill(This)
#endif
#endif
  HRESULT WINAPI IIisServiceControl_Stop_Proxy(IIisServiceControl *This,DWORD dwTimeoutMsecs,DWORD dwForce);
  void __RPC_STUB IIisServiceControl_Stop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IIisServiceControl_Start_Proxy(IIisServiceControl *This,DWORD dwTimeoutMsecs);
  void __RPC_STUB IIisServiceControl_Start_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IIisServiceControl_Reboot_Proxy(IIisServiceControl *This,DWORD dwTimeouMsecs,DWORD dwForceAppsClosed);
  void __RPC_STUB IIisServiceControl_Reboot_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IIisServiceControl_Status_Proxy(IIisServiceControl *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize,DWORD *pdwNumServices);
  void __RPC_STUB IIisServiceControl_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IIisServiceControl_Kill_Proxy(IIisServiceControl *This);
  void __RPC_STUB IIisServiceControl_Kill_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IISRSTALib_LIBRARY_DEFINED__
#define __IISRSTALib_LIBRARY_DEFINED__
  EXTERN_C const IID LIBID_IISRSTALib;
  EXTERN_C const CLSID CLSID_IisServiceControl;
#ifdef __cplusplus
  class IisServiceControl;
#endif
#endif

  typedef struct {
    DWORD iServiceName;
    DWORD iDisplayName;
    SERVICE_STATUS ServiceStatus;
  } SERIALIZED_ENUM_SERVICE_STATUS;

  extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0262_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0262_v0_0_s_ifspec;

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                              usr/share/mingw-w64/include/iketypes.h                                                              0100644 0000000 0000000 00000060270 12404413021 016344  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*** Autogenerated by WIDL 1.5.25 from include/iketypes.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __iketypes_h__
#define __iketypes_h__

/* Forward declarations */

/* Headers for imported files */

#include <fwptypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

#define IKEEXT_ERROR_CODE_COUNT (ERROR_IPSEC_IKE_NEG_STATUS_END - ERROR_IPSEC_IKE_NEG_STATUS_BEGIN)

/* Please keep in sync with winerror.h defines.  */

#define IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING          (0x1)
#define IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD         (0x2)
#define IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE             (0x4)
#define IKEEXT_CERT_FLAG_INTERMEDIATE_CA                 (0x8)
#define IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE    (0x10)
#define IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND (0x20)
#if (NTDDI_VERSION >= NTDDI_WIN8)
#define IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE          (0x40)
#define IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE          (0x80)
#define IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE      (0x100)
#endif

#define IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY            (0x1)
#define IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK      (0x2)
#define IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG     (0x4)
#define IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION (0x8)
#if (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP      (0x10)
#define IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE         (0x20)
#endif

#define IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION (0x1)
#define IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS   (0x2)
#if (NTDDI_VERSION >= NTDDI_WIN8)
#define IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR           (0x4)
#endif

#define IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION (0x1)

#define IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS (0x1)

#define IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS (0x00000001)
#define IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY (0x00000002)
#define IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY (0x00000004)
#define IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH (0x00000008)

#define IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT (0x1)

#if (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY  (0x1)
#define IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY (0x2)

#define IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY   (0x1)
#define IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY  (0x2)
#endif

#ifndef __IPSEC_V4_UDP_ENCAPSULATION0_FWD_DECLARED
#define __IPSEC_V4_UDP_ENCAPSULATION0_FWD_DECLARED
typedef struct IPSEC_V4_UDP_ENCAPSULATION0_ IPSEC_V4_UDP_ENCAPSULATION0;
#endif

typedef UINT64 IKEEXT_COOKIE;

typedef enum IKEEXT_EM_SA_STATE_ {
    IKEEXT_EM_SA_STATE_NONE = 0,
    IKEEXT_EM_SA_STATE_SENT_ATTS = 1,
    IKEEXT_EM_SA_STATE_SSPI_SENT = 2,
    IKEEXT_EM_SA_STATE_AUTH_COMPLETE = 3,
    IKEEXT_EM_SA_STATE_FINAL = 4,
    IKEEXT_EM_SA_STATE_COMPLETE = 5,
    IKEEXT_EM_SA_STATE_MAX = 6
} IKEEXT_EM_SA_STATE;

typedef enum IKEEXT_SA_ROLE_ {
    IKEEXT_SA_ROLE_INITIATOR = 0,
    IKEEXT_SA_ROLE_RESPONDER = 1,
    IKEEXT_SA_ROLE_MAX = 2
} IKEEXT_SA_ROLE;

typedef enum IKEEXT_AUTHENTICATION_METHOD_TYPE_ {
    IKEEXT_PRESHARED_KEY = 0,
    IKEEXT_CERTIFICATE = 1,
    IKEEXT_KERBEROS = 2,
    IKEEXT_ANONYMOUS = 3,
    IKEEXT_SSL = 4,
    IKEEXT_NTLM_V2 = 5,
    IKEEXT_IPV6_CGA = 6,
    IKEEXT_CERTIFICATE_ECDSA_P256 = 7,
    IKEEXT_CERTIFICATE_ECDSA_P384 = 8,
    IKEEXT_SSL_ECDSA_P256 = 9,
    IKEEXT_SSL_ECDSA_P384 = 10,
    IKEEXT_EAP = 11,
    IKEEXT_RESERVED = 12,
    IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = 13
} IKEEXT_AUTHENTICATION_METHOD_TYPE;

typedef enum IKEEXT_KEY_MODULE_TYPE_ {
    IKEEXT_KEY_MODULE_IKE = 0,
    IKEEXT_KEY_MODULE_AUTHIP = 1,
    IKEEXT_KEY_MODULE_IKEV2 = 2,
    IKEEXT_KEY_MODULE_MAX = 3
} IKEEXT_KEY_MODULE_TYPE;

typedef enum IKEEXT_MM_SA_STATE_ {
    IKEEXT_MM_SA_STATE_NONE = 0,
    IKEEXT_MM_SA_STATE_SA_SENT = 1,
    IKEEXT_MM_SA_STATE_SSPI_SENT = 2,
    IKEEXT_MM_SA_STATE_FINAL = 3,
    IKEEXT_MM_SA_STATE_FINAL_SENT = 4,
    IKEEXT_MM_SA_STATE_COMPLETE = 5,
    IKEEXT_MM_SA_STATE_MAX = 6
} IKEEXT_MM_SA_STATE;

typedef enum IKEEXT_QM_SA_STATE_ {
    IKEEXT_QM_SA_STATE_NONE = 0,
    IKEEXT_QM_SA_STATE_INITIAL = 1,
    IKEEXT_QM_SA_STATE_FINAL = 2,
    IKEEXT_QM_SA_STATE_COMPLETE = 3,
    IKEEXT_QM_SA_STATE_MAX = 4
} IKEEXT_QM_SA_STATE;

typedef enum IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE_ {
    IKEEXT_IMPERSONATION_NONE = 0,
    IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 1,
    IKEEXT_IMPERSONATION_MAX = 2
} IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;

typedef enum IKEEXT_CERT_CONFIG_TYPE_ {
    IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0,
    IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = 1,
    IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = 2,
    IKEEXT_CERT_CONFIG_UNSPECIFIED = 3,
    IKEEXT_CERT_CONFIG_TYPE_MAX = 4
} IKEEXT_CERT_CONFIG_TYPE;

typedef enum IKEEXT_CIPHER_TYPE_ {
    IKEEXT_CIPHER_DES = 0,
    IKEEXT_CIPHER_3DES = 1,
    IKEEXT_CIPHER_AES_128 = 2,
    IKEEXT_CIPHER_AES_192 = 3,
    IKEEXT_CIPHER_AES_256 = 4,
    IKEEXT_CIPHER_TYPE_MAX = 5
} IKEEXT_CIPHER_TYPE;

typedef enum IKEEXT_INTEGRITY_TYPE_ {
    IKEEXT_INTEGRITY_MD5 = 0,
    IKEEXT_INTEGRITY_SHA1 = 1,
    IKEEXT_INTEGRITY_SHA_256 = 2,
    IKEEXT_INTEGRITY_SHA_384 = 3,
    IKEEXT_INTEGRITY_TYPE_MAX = 4
} IKEEXT_INTEGRITY_TYPE;

typedef enum IKEEXT_DH_GROUP_ {
    IKEEXT_DH_GROUP_NONE = 0,
    IKEEXT_DH_GROUP_1 = 1,
    IKEEXT_DH_GROUP_2 = 2,
    IKEEXT_DH_GROUP_14 = 3,
    IKEEXT_DH_GROUP_2048 = IKEEXT_DH_GROUP_14,
    IKEEXT_DH_ECP_256 = 4,
    IKEEXT_DH_ECP_384 = 5,
    IKEEXT_DH_GROUP_24 = 6,
    IKEEXT_DH_GROUP_MAX = 7
} IKEEXT_DH_GROUP;

typedef struct IKEEXT_CERT_ROOT_CONFIG0_ {
    FWP_BYTE_BLOB certData;
    UINT32 flags;
} IKEEXT_CERT_ROOT_CONFIG0;

typedef struct IKEEXT_KERBEROS_AUTHENTICATION0__ {
    UINT32 flags;
} IKEEXT_KERBEROS_AUTHENTICATION0;

typedef struct IKEEXT_NTLM_V2_AUTHENTICATION0__ {
    UINT32 flags;
} IKEEXT_NTLM_V2_AUTHENTICATION0;

typedef struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0__ {
    FWP_BYTE_BLOB presharedKey;
} IKEEXT_PRESHARED_KEY_AUTHENTICATION0;

typedef struct IKEEXT_PRESHARED_KEY_AUTHENTICATION1__ {
    FWP_BYTE_BLOB presharedKey;
    UINT32 flags;
} IKEEXT_PRESHARED_KEY_AUTHENTICATION1;

typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION0_ {
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *inboundRootArray;
        } __C89_NAMELESSSTRUCTNAME;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundTrustedRootStoreConfig;
    } __C89_NAMELESSUNIONNAME1;
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *outboundRootArray;
        } __C89_NAMELESSSTRUCTNAME;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundTrustedRootStoreConfig;
    } __C89_NAMELESSUNIONNAME2;
    UINT32 flags;
} IKEEXT_CERTIFICATE_AUTHENTICATION0;

#if NTDDI_VERSION >= NTDDI_WIN7
typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION1_ {
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *inboundRootArray;
        } __C89_NAMELESSSTRUCTNAME;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundTrustedRootStoreConfig;
    } __C89_NAMELESSUNIONNAME1;
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *outboundRootArray;
        } __C89_NAMELESSSTRUCTNAME;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundTrustedRootStoreConfig;
    } __C89_NAMELESSUNIONNAME2;
    UINT32 flags;
    FWP_BYTE_BLOB localCertLocationUrl;
} IKEEXT_CERTIFICATE_AUTHENTICATION1;
#endif

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef enum IKEEXT_CERT_CRITERIA_NAME_TYPE_ {
    IKEEXT_CERT_CRITERIA_DNS = 0,
    IKEEXT_CERT_CRITERIA_UPN = 1,
    IKEEXT_CERT_CRITERIA_RFC822 = 2,
    IKEEXT_CERT_CRITERIA_CN = 3,
    IKEEXT_CERT_CRITERIA_OU = 4,
    IKEEXT_CERT_CRITERIA_O = 5,
    IKEEXT_CERT_CRITERIA_DC = 6,
    IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = 7
} IKEEXT_CERT_CRITERIA_NAME_TYPE;

typedef struct IKEEXT_CERT_EKUS0_ {
    ULONG numEku;
    LPSTR *eku;
} IKEEXT_CERT_EKUS0;

typedef struct IKEEXT_CERT_NAME0_ {
    IKEEXT_CERT_CRITERIA_NAME_TYPE nameType;
    LPWSTR certName;
} IKEEXT_CERT_NAME0;

typedef struct IKEEXT_CERTIFICATE_CRITERIA0_ {
    FWP_BYTE_BLOB certData;
    FWP_BYTE_BLOB certHash;
    IKEEXT_CERT_EKUS0 *eku;
    IKEEXT_CERT_NAME0 *name;
    UINT32 flags;
} IKEEXT_CERTIFICATE_CRITERIA0;

typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION2_ {
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 inboundRootArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *inboundRootCriteria;
        } __C89_NAMELESSSTRUCTNAME1;
        __C89_NAMELESS struct {
            UINT32 inboundEnterpriseStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *inboundEnterpriseStoreCriteria;
        } __C89_NAMELESSSTRUCTNAME2;
        __C89_NAMELESS struct {
            UINT32 inboundRootStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *inboundTrustedRootStoreCriteria;
        } __C89_NAMELESSSTRUCTNAME3;
    } __C89_NAMELESSUNIONNAME1;
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    __C89_NAMELESS union {
        __C89_NAMELESS struct {
            UINT32 outboundRootArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *outboundRootCriteria;
        } __C89_NAMELESSSTRUCTNAME1;
        __C89_NAMELESS struct {
            UINT32 outboundEnterpriseStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *outboundEnterpriseStoreCriteria;
        } __C89_NAMELESSSTRUCTNAME2;
        __C89_NAMELESS struct {
            UINT32 outboundRootStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0 *outboundTrustedRootStoreCriteria;
        } __C89_NAMELESSSTRUCTNAME3;
    } __C89_NAMELESSUNIONNAME2;
    UINT32 flags;
    FWP_BYTE_BLOB localCertLocationUrl;
} IKEEXT_CERTIFICATE_AUTHENTICATION2;
#endif

typedef struct IKEEXT_IPV6_CGA_AUTHENTICATION0_ {
    wchar_t *keyContainerName;
    wchar_t *cspName;
    UINT32 cspType;
    FWP_BYTE_ARRAY16 cgaModifier;
    BYTE cgaCollisionCount;
} IKEEXT_IPV6_CGA_AUTHENTICATION0;

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct IKEEXT_KERBEROS_AUTHENTICATION1__ {
    UINT32 flags;
    wchar_t *proxyServer;
} IKEEXT_KERBEROS_AUTHENTICATION1;
#endif

typedef struct IKEEXT_RESERVED_AUTHENTICATION0__ {
    UINT32 flags;
} IKEEXT_RESERVED_AUTHENTICATION0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_EAP_AUTHENTICATION0__ {
    UINT32 flags;
} IKEEXT_EAP_AUTHENTICATION0;
#endif

typedef struct IKEEXT_AUTHENTICATION_METHOD0_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION0 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION0 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_AUTHENTICATION_METHOD0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_AUTHENTICATION_METHOD1_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION1 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION1 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_AUTHENTICATION_METHOD1;
#endif

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct IKEEXT_AUTHENTICATION_METHOD2_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION2 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION1 kerberosAuthentication;
        IKEEXT_RESERVED_AUTHENTICATION0 reservedAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION2 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_AUTHENTICATION_METHOD2;
#endif

typedef struct IKEEXT_CIPHER_ALGORITHM0_ {
    IKEEXT_CIPHER_TYPE algoIdentifier;
    UINT32 keyLen;
    UINT32 rounds;
} IKEEXT_CIPHER_ALGORITHM0;

typedef struct IKEEXT_INTEGRITY_ALGORITHM0_ {
    IKEEXT_INTEGRITY_TYPE algoIdentifier;
} IKEEXT_INTEGRITY_ALGORITHM0;

typedef struct IKEEXT_PROPOSAL0_ {
    IKEEXT_CIPHER_ALGORITHM0 cipherAlgorithm;
    IKEEXT_INTEGRITY_ALGORITHM0 integrityAlgorithm;
    UINT32 maxLifetimeSeconds;
    IKEEXT_DH_GROUP dhGroup;
    UINT32 quickModeLimit;
} IKEEXT_PROPOSAL0;

typedef struct IKEEXT_POLICY0_ {
    UINT32 softExpirationTime;
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    UINT32 numIkeProposals;
    IKEEXT_PROPOSAL0 *ikeProposals;
    UINT32 flags;
    UINT32 maxDynamicFilters;
} IKEEXT_POLICY0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_POLICY1_ {
    UINT32 softExpirationTime;
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    UINT32 numIkeProposals;
    IKEEXT_PROPOSAL0 *ikeProposals;
    UINT32 flags;
    UINT32 maxDynamicFilters;
    UINT32 retransmitDurationSecs;
} IKEEXT_POLICY1;
#endif

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct IKEEXT_POLICY2_ {
    UINT32 softExpirationTime;
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD2 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    UINT32 numIkeProposals;
    IKEEXT_PROPOSAL0 *ikeProposals;
    UINT32 flags;
    UINT32 maxDynamicFilters;
    UINT32 retransmitDurationSecs;
} IKEEXT_POLICY2;
#endif

typedef struct IKEEXT_EM_POLICY0_ {
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
} IKEEXT_EM_POLICY0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_EM_POLICY1_ {
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
} IKEEXT_EM_POLICY1;
#endif

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct IKEEXT_EM_POLICY2_ {
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD2 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
} IKEEXT_EM_POLICY2;
#endif

typedef struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0_ {
    UINT32 currentActiveMainModes;
    UINT32 totalMainModesStarted;
    UINT32 totalSuccessfulMainModes;
    UINT32 totalFailedMainModes;
    UINT32 totalResponderMainModes;
    UINT32 currentNewResponderMainModes;
    UINT32 currentActiveQuickModes;
    UINT32 totalQuickModesStarted;
    UINT32 totalSuccessfulQuickModes;
    UINT32 totalFailedQuickModes;
    UINT32 totalAcquires;
    UINT32 totalReinitAcquires;
    UINT32 currentActiveExtendedModes;
    UINT32 totalExtendedModesStarted;
    UINT32 totalSuccessfulExtendedModes;
    UINT32 totalFailedExtendedModes;
    UINT32 totalImpersonationExtendedModes;
    UINT32 totalImpersonationMainModes;
} IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1_ {
    UINT32 currentActiveMainModes;
    UINT32 totalMainModesStarted;
    UINT32 totalSuccessfulMainModes;
    UINT32 totalFailedMainModes;
    UINT32 totalResponderMainModes;
    UINT32 currentNewResponderMainModes;
    UINT32 currentActiveQuickModes;
    UINT32 totalQuickModesStarted;
    UINT32 totalSuccessfulQuickModes;
    UINT32 totalFailedQuickModes;
    UINT32 totalAcquires;
    UINT32 totalReinitAcquires;
    UINT32 currentActiveExtendedModes;
    UINT32 totalExtendedModesStarted;
    UINT32 totalSuccessfulExtendedModes;
    UINT32 totalFailedExtendedModes;
    UINT32 totalImpersonationExtendedModes;
    UINT32 totalImpersonationMainModes;
} IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1;
#endif

typedef struct IKEEXT_KEYMODULE_STATISTICS0_ {
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v6Statistics;
    UINT32 errorFrequencyTable[97];
    UINT32 mainModeNegotiationTime;
    UINT32 quickModeNegotiationTime;
    UINT32 extendedModeNegotiationTime;
} IKEEXT_KEYMODULE_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_KEYMODULE_STATISTICS1_ {
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v6Statistics;
    UINT32 errorFrequencyTable[97];
    UINT32 mainModeNegotiationTime;
    UINT32 quickModeNegotiationTime;
    UINT32 extendedModeNegotiationTime;
} IKEEXT_KEYMODULE_STATISTICS1;
#endif

typedef struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0_ {
    UINT32 totalSocketReceiveFailures;
    UINT32 totalSocketSendFailures;
} IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1_ {
    UINT32 totalSocketReceiveFailures;
    UINT32 totalSocketSendFailures;
} IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1;
#endif

typedef struct IKEEXT_COMMON_STATISTICS0_ {
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v6Statistics;
    UINT32 totalPacketsReceived;
    UINT32 totalInvalidPacketsReceived;
    UINT32 currentQueuedWorkitems;
} IKEEXT_COMMON_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_COMMON_STATISTICS1_ {
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v6Statistics;
    UINT32 totalPacketsReceived;
    UINT32 totalInvalidPacketsReceived;
    UINT32 currentQueuedWorkitems;
} IKEEXT_COMMON_STATISTICS1;
#endif

typedef struct IKEEXT_STATISTICS0_ {
    IKEEXT_KEYMODULE_STATISTICS0 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS0 authipStatistics;
    IKEEXT_COMMON_STATISTICS0 commonStatistics;
} IKEEXT_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_STATISTICS1_ {
    IKEEXT_KEYMODULE_STATISTICS1 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 authipStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 ikeV2Statistics;
    IKEEXT_COMMON_STATISTICS1 commonStatistics;
} IKEEXT_STATISTICS1;
#endif

typedef struct IKEEXT_TRAFFIC0_ {
    FWP_IP_VERSION ipVersion;
    __C89_NAMELESS union {
        UINT32 localV4Address;
        UINT8 localV6Address[16];
    } __C89_NAMELESSUNIONNAME1;
    __C89_NAMELESS union {
        UINT32 remoteV4Address;
        UINT8 remoteV6Address[16];
    } __C89_NAMELESSUNIONNAME2;
    UINT64 authIpFilterId;
} IKEEXT_TRAFFIC0;

typedef struct IKEEXT_COOKIE_PAIR0_ {
    IKEEXT_COOKIE initiator;
    IKEEXT_COOKIE responder;
} IKEEXT_COOKIE_PAIR0;

typedef struct IKEEXT_CERTIFICATE_CREDENTIAL0_ {
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    UINT32 flags;
} IKEEXT_CERTIFICATE_CREDENTIAL0;

typedef struct IKEEXT_NAME_CREDENTIAL0_ {
    wchar_t *principalName;
} IKEEXT_NAME_CREDENTIAL0;
typedef struct IKEEXT_CREDENTIAL0_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0 *presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL0 *certificate;
        IKEEXT_NAME_CREDENTIAL0 *name;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_CREDENTIAL0;

typedef struct IKEEXT_CREDENTIAL_PAIR0_ {
    IKEEXT_CREDENTIAL0 localCredentials;
    IKEEXT_CREDENTIAL0 peerCredentials;
} IKEEXT_CREDENTIAL_PAIR0;

typedef struct IKEEXT_CREDENTIALS0_ {
    UINT32 numCredentials;
    IKEEXT_CREDENTIAL_PAIR0 *credentials;
} IKEEXT_CREDENTIALS0;

typedef struct IKEEXT_SA_DETAILS0_ {
    UINT64 saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    __C89_NAMELESS union {
        IPSEC_V4_UDP_ENCAPSULATION0 *v4UdpEncapsulation;
    } __C89_NAMELESSUNIONNAME;
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS0 ikeCredentials;
    GUID ikePolicyKey;
    UINT64 virtualIfTunnelId;
} IKEEXT_SA_DETAILS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_CERTIFICATE_CREDENTIAL1_ {
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    UINT32 flags;
    FWP_BYTE_BLOB certificate;
} IKEEXT_CERTIFICATE_CREDENTIAL1;

typedef struct IKEEXT_CREDENTIAL1_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 *presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL1 *certificate;
        IKEEXT_NAME_CREDENTIAL0 *name;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_CREDENTIAL1;

typedef struct IKEEXT_CREDENTIAL_PAIR1_ {
    IKEEXT_CREDENTIAL1 localCredentials;
    IKEEXT_CREDENTIAL1 peerCredentials;
} IKEEXT_CREDENTIAL_PAIR1;

typedef struct IKEEXT_CREDENTIALS1_ {
    UINT32 numCredentials;
    IKEEXT_CREDENTIAL_PAIR1 *credentials;
} IKEEXT_CREDENTIALS1;

typedef struct IKEEXT_SA_DETAILS1_ {
    UINT64 saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    __C89_NAMELESS union {
        IPSEC_V4_UDP_ENCAPSULATION0 *v4UdpEncapsulation;
    } __C89_NAMELESSUNIONNAME;
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS1 ikeCredentials;
    GUID ikePolicyKey;
    UINT64 virtualIfTunnelId;
    FWP_BYTE_BLOB correlationKey;
} IKEEXT_SA_DETAILS1;
#endif

#if (NTDDI_VERSION >= NTDDI_WIN8)
typedef struct IKEEXT_CREDENTIAL2_ {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    __C89_NAMELESS union {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 *presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL1 *certificate;
        IKEEXT_NAME_CREDENTIAL0 *name;
    } __C89_NAMELESSUNIONNAME;
} IKEEXT_CREDENTIAL2;

typedef struct IKEEXT_CREDENTIAL_PAIR2_ {
    IKEEXT_CREDENTIAL2 localCredentials;
    IKEEXT_CREDENTIAL2 peerCredentials;
} IKEEXT_CREDENTIAL_PAIR2;

typedef struct IKEEXT_CREDENTIALS2_ {
    UINT32 numCredentials;
    IKEEXT_CREDENTIAL_PAIR2 *credentials;
} IKEEXT_CREDENTIALS2;

typedef struct IKEEXT_SA_DETAILS2_ {
    UINT64 saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    __C89_NAMELESS union {
        IPSEC_V4_UDP_ENCAPSULATION0 *v4UdpEncapsulation;
    } __C89_NAMELESSUNIONNAME;
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS2 ikeCredentials;
    GUID ikePolicyKey;
    UINT64 virtualIfTunnelId;
    FWP_BYTE_BLOB correlationKey;
} IKEEXT_SA_DETAILS2;
#endif

typedef struct IKEEXT_SA_ENUM_TEMPLATE0_ {
    FWP_CONDITION_VALUE0 localSubNet;
    FWP_CONDITION_VALUE0 remoteSubNet;
    FWP_BYTE_BLOB localMainModeCertHash;
} IKEEXT_SA_ENUM_TEMPLATE0;

#endif /* WINAPI_PARTITION_DESKTOP.  */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __iketypes_h__ */
                                                                                                                                                                                                                                                                                                                                        usr/share/mingw-w64/include/imagehlp.h                                                              0100644 0000000 0000000 00000012210 12404413021 016264  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IMAGEHLP_
#define _IMAGEHLP_

#include <_mingw_unicode.h>

#ifdef _WIN64
#ifndef _IMAGEHLP64
#define _IMAGEHLP64
#endif
#endif

#include <wintrust.h>

#include <psdk_inc/_dbg_LOAD_IMAGE.h>

  typedef enum _IMAGEHLP_STATUS_REASON {
    BindOutOfMemory,
    BindRvaToVaFailed,
    BindNoRoomInImage,
    BindImportModuleFailed,
    BindImportProcedureFailed,
    BindImportModule,
    BindImportProcedure,
    BindForwarder,
    BindForwarderNOT,
    BindImageModified,
    BindExpandFileHeaders,
    BindImageComplete,
    BindMismatchedSymbols,
    BindSymbolsNotUpdated,
    BindImportProcedure32,
    BindImportProcedure64,
    BindForwarder32,
    BindForwarder64,
    BindForwarderNOT32,
    BindForwarderNOT64
  } IMAGEHLP_STATUS_REASON;

#ifdef __cplusplus
extern "C" {
#endif

  typedef WINBOOL (WINAPI *PIMAGEHLP_STATUS_ROUTINE)(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG_PTR Va,ULONG_PTR Parameter);
  typedef WINBOOL (WINAPI *PIMAGEHLP_STATUS_ROUTINE32)(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG Va,ULONG_PTR Parameter);
  typedef WINBOOL (WINAPI *PIMAGEHLP_STATUS_ROUTINE64)(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG64 Va,ULONG_PTR Parameter);

#define BIND_NO_BOUND_IMPORTS 0x00000001
#define BIND_NO_UPDATE 0x00000002
#define BIND_ALL_IMAGES 0x00000004
#define BIND_CACHE_IMPORT_DLLS 0x00000008
#define BIND_REPORT_64BIT_VA 0x00000010

#define CHECKSUM_SUCCESS 0
#define CHECKSUM_OPEN_FAILURE 1
#define CHECKSUM_MAP_FAILURE 2
#define CHECKSUM_MAPVIEW_FAILURE 3
#define CHECKSUM_UNICODE_FAILURE 4

#define SPLITSYM_REMOVE_PRIVATE 0x00000001
#define SPLITSYM_EXTRACT_ALL 0x00000002
#define SPLITSYM_SYMBOLPATH_IS_SRC 0x00000004

#define MapFileAndCheckSum __MINGW_NAME_AW(MapFileAndCheckSum)

  WINBOOL IMAGEAPI BindImage(PCSTR ImageName,PCSTR DllPath,PCSTR SymbolPath);
  WINBOOL IMAGEAPI BindImageEx(DWORD Flags,PCSTR ImageName,PCSTR DllPath,PCSTR SymbolPath,PIMAGEHLP_STATUS_ROUTINE StatusRoutine);
  WINBOOL IMAGEAPI ReBaseImage(PCSTR CurrentImageName,PCSTR SymbolPath,WINBOOL fReBase,WINBOOL fRebaseSysfileOk,WINBOOL fGoingDown,ULONG CheckImageSize,ULONG *OldImageSize,ULONG_PTR *OldImageBase,ULONG *NewImageSize,ULONG_PTR *NewImageBase,ULONG TimeStamp);
  WINBOOL IMAGEAPI ReBaseImage64(PCSTR CurrentImageName,PCSTR SymbolPath,WINBOOL fReBase,WINBOOL fRebaseSysfileOk,WINBOOL fGoingDown,ULONG CheckImageSize,ULONG *OldImageSize,ULONG64 *OldImageBase,ULONG *NewImageSize,ULONG64 *NewImageBase,ULONG TimeStamp);
  WINBOOL IMAGEAPI GetImageConfigInformation(PLOADED_IMAGE LoadedImage,PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation);
  DWORD IMAGEAPI GetImageUnusedHeaderBytes(PLOADED_IMAGE LoadedImage,PDWORD SizeUnusedHeaderBytes);
  WINBOOL IMAGEAPI SetImageConfigInformation(PLOADED_IMAGE LoadedImage,PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation);
  PIMAGE_NT_HEADERS IMAGEAPI CheckSumMappedFile (PVOID BaseAddress,DWORD FileLength,PDWORD HeaderSum,PDWORD CheckSum);
  DWORD IMAGEAPI MapFileAndCheckSumA(PCSTR Filename,PDWORD HeaderSum,PDWORD CheckSum);
  DWORD IMAGEAPI MapFileAndCheckSumW(PCWSTR Filename,PDWORD HeaderSum,PDWORD CheckSum);

#define CERT_PE_IMAGE_DIGEST_DEBUG_INFO 0x01
#define CERT_PE_IMAGE_DIGEST_RESOURCES 0x02
#define CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO 0x04
#define CERT_PE_IMAGE_DIGEST_NON_PE_INFO 0x08

#define CERT_SECTION_TYPE_ANY 0xFF

  typedef PVOID DIGEST_HANDLE;
  typedef WINBOOL (WINAPI *DIGEST_FUNCTION)(DIGEST_HANDLE refdata,PBYTE pData,DWORD dwLength);

  WINBOOL IMAGEAPI ImageGetDigestStream(HANDLE FileHandle,DWORD DigestLevel,DIGEST_FUNCTION DigestFunction,DIGEST_HANDLE DigestHandle);
  WINBOOL IMAGEAPI ImageAddCertificate(HANDLE FileHandle,LPWIN_CERTIFICATE Certificate,PDWORD Index);
  WINBOOL IMAGEAPI ImageRemoveCertificate(HANDLE FileHandle,DWORD Index);
  WINBOOL IMAGEAPI ImageEnumerateCertificates(HANDLE FileHandle,WORD TypeFilter,PDWORD CertificateCount,PDWORD Indices,DWORD IndexCount);
  WINBOOL IMAGEAPI ImageGetCertificateData(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificate,PDWORD RequiredLength);
  WINBOOL IMAGEAPI ImageGetCertificateHeader(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificateheader);
  PLOADED_IMAGE IMAGEAPI ImageLoad(PCSTR DllName,PCSTR DllPath);
  WINBOOL IMAGEAPI ImageUnload(PLOADED_IMAGE LoadedImage);
  WINBOOL IMAGEAPI MapAndLoad(PCSTR ImageName,PCSTR DllPath,PLOADED_IMAGE LoadedImage,WINBOOL DotDll,WINBOOL ReadOnly);
  WINBOOL IMAGEAPI UnMapAndLoad(PLOADED_IMAGE LoadedImage);
  WINBOOL IMAGEAPI TouchFileTimes(HANDLE FileHandle,PSYSTEMTIME pSystemTime);
  WINBOOL IMAGEAPI SplitSymbols(PSTR ImageName,PCSTR SymbolsPath,PSTR SymbolFilePath,DWORD Flags);
  WINBOOL IMAGEAPI UpdateDebugInfoFile(PCSTR ImageFileName,PCSTR SymbolPath,PSTR DebugFilePath,PIMAGE_NT_HEADERS32 NtHeaders);
  WINBOOL IMAGEAPI UpdateDebugInfoFileEx(PCSTR ImageFileName,PCSTR SymbolPath,PSTR DebugFilePath,PIMAGE_NT_HEADERS32 NtHeaders,DWORD OldChecksum);

#ifdef __cplusplus
}
#endif

#include <psdk_inc/_dbg_common.h>

#endif
                                                                                                                                                                                                                                                                                                                                                                                        usr/share/mingw-w64/include/ime.h                                                                   0100644 0000000 0000000 00000010121 12404413021 015247  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IME_
#define _IME_

#include <_mingw_unicode.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _WINDEF_
  typedef unsigned int UINT;
#endif

#define IME_MAXPROCESS 32

#define SendIMEMessageEx __MINGW_NAME_AW(SendIMEMessageEx)

  LRESULT WINAPI SendIMEMessageExA(HWND,LPARAM);
  LRESULT WINAPI SendIMEMessageExW(HWND,LPARAM);

  typedef struct tagIMESTRUCT {
    UINT fnc;
    WPARAM wParam;
    UINT wCount;
    UINT dchSource;
    UINT dchDest;
    LPARAM lParam1;
    LPARAM lParam2;
    LPARAM lParam3;
  } IMESTRUCT,*PIMESTRUCT,*NPIMESTRUCT,*LPIMESTRUCT;

#define CP_HWND 0
#define CP_OPEN 1
#define CP_DIRECT 2
#define CP_LEVEL 3

#if !defined(VK_DBE_ALPHANUMERIC)
#define VK_DBE_ALPHANUMERIC 0x0f0
#define VK_DBE_KATAKANA 0x0f1
#define VK_DBE_HIRAGANA 0x0f2
#define VK_DBE_SBCSCHAR 0x0f3
#define VK_DBE_DBCSCHAR 0x0f4
#define VK_DBE_ROMAN 0x0f5
#define VK_DBE_NOROMAN 0x0f6
#define VK_DBE_ENTERWORDREGISTERMODE 0x0f7
#define VK_DBE_ENTERIMECONFIGMODE 0x0f8
#define VK_DBE_FLUSHSTRING 0x0f9
#define VK_DBE_CODEINPUT 0x0fa
#define VK_DBE_NOCODEINPUT 0x0fb
#define VK_DBE_DETERMINESTRING 0x0fc
#define VK_DBE_ENTERDLGCONVERSIONMODE 0x0fd
#endif

#define MCW_DEFAULT 0x00
#define MCW_RECT 0x01
#define MCW_WINDOW 0x02
#define MCW_SCREEN 0x04
#define MCW_VERTICAL 0x08
#define MCW_HIDDEN 0x10

#define IME_MODE_ALPHANUMERIC 0x0001

#ifdef KOREA
#define IME_MODE_SBCSCHAR 0x0002
#else
#define IME_MODE_SBCSCHAR 0x0008
#endif

#define IME_MODE_KATAKANA 0x0002
#define IME_MODE_HIRAGANA 0x0004
#define IME_MODE_HANJACONVERT 0x0004
#define IME_MODE_DBCSCHAR 0x0010
#define IME_MODE_ROMAN 0x0020
#define IME_MODE_NOROMAN 0x0040
#define IME_MODE_CODEINPUT 0x0080
#define IME_MODE_NOCODEINPUT 0x0100

#define IME_GETIMECAPS 0x03
#define IME_SETOPEN 0x04
#define IME_GETOPEN 0x05
#define IME_GETVERSION 0x07
#define IME_SETCONVERSIONWINDOW 0x08
#define IME_MOVEIMEWINDOW IME_SETCONVERSIONWINDOW
#define IME_SETCONVERSIONMODE 0x10

#define IME_GETCONVERSIONMODE 0x11
#define IME_SET_MODE 0x12
#define IME_SENDVKEY 0x13
#define IME_ENTERWORDREGISTERMODE 0x18
#define IME_SETCONVERSIONFONTEX 0x19

#define IME_BANJAtoJUNJA 0x13
#define IME_JUNJAtoBANJA 0x14
#define IME_JOHABtoKS 0x15
#define IME_KStoJOHAB 0x16

#define IMEA_INIT 0x01
#define IMEA_NEXT 0x02
#define IMEA_PREV 0x03

#define IME_REQUEST_CONVERT 0x01
#define IME_ENABLE_CONVERT 0x02

#define INTERIM_WINDOW 0x00
#define MODE_WINDOW 0x01
#define HANJA_WINDOW 0x02

#define IME_RS_ERROR 0x01
#define IME_RS_NOIME 0x02
#define IME_RS_TOOLONG 0x05
#define IME_RS_ILLEGAL 0x06
#define IME_RS_NOTFOUND 0x07
#define IME_RS_NOROOM 0x0a
#define IME_RS_DISKERROR 0x0e
#define IME_RS_INVALID 0x11
#define IME_RS_NEST 0x12
#define IME_RS_SYSTEMMODAL 0x13

#define WM_IME_REPORT 0x0280

#define IR_STRINGSTART 0x100
#define IR_STRINGEND 0x101
#define IR_OPENCONVERT 0x120
#define IR_CHANGECONVERT 0x121
#define IR_CLOSECONVERT 0x122
#define IR_FULLCONVERT 0x123
#define IR_IMESELECT 0x130
#define IR_STRING 0x140
#define IR_DBCSCHAR 0x160
#define IR_UNDETERMINE 0x170
#define IR_STRINGEX 0x180
#define IR_MODEINFO 0x190

#define WM_WNT_CONVERTREQUESTEX 0x0109
#define WM_CONVERTREQUEST 0x010A
#define WM_CONVERTRESULT 0x010B
#define WM_INTERIM 0x010C

#define WM_IMEKEYDOWN 0x290
#define WM_IMEKEYUP 0x291

  typedef struct tagUNDETERMINESTRUCT {
    DWORD dwSize;
    UINT uDefIMESize;
    UINT uDefIMEPos;
    UINT uUndetTextLen;
    UINT uUndetTextPos;
    UINT uUndetAttrPos;
    UINT uCursorPos;
    UINT uDeltaStart;
    UINT uDetermineTextLen;
    UINT uDetermineTextPos;
    UINT uDetermineDelimPos;
    UINT uYomiTextLen;
    UINT uYomiTextPos;
    UINT uYomiDelimPos;
  } UNDETERMINESTRUCT,*PUNDETERMINESTRUCT,*NPUNDETERMINESTRUCT,*LPUNDETERMINESTRUCT;

  typedef struct tagSTRINGEXSTRUCT {
    DWORD dwSize;
    UINT uDeterminePos;
    UINT uDetermineDelimPos;
    UINT uYomiPos;
    UINT uYomiDelimPos;
  } STRINGEXSTRUCT,*NPSTRINGEXSTRUCT,*LPSTRINGEXSTRUCT;

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/share/mingw-w64/include/imessage.h                                                              0100644 0000000 0000000 00000003572 12404413021 016306  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IMESSAGE_H_
#define _IMESSAGE_H_

#include "mapidefs.h"

#ifdef __cplusplus
extern "C" {
#endif

  typedef struct _MSGSESS *LPMSGSESS;
  typedef void (WINAPI MSGCALLRELEASE)(ULONG ulCallerData,LPMESSAGE lpMessage);

  STDAPI_(SCODE) OpenIMsgSession(LPMALLOC lpMalloc,ULONG ulFlags,LPMSGSESS *lppMsgSess);
  STDAPI_(void) CloseIMsgSession(LPMSGSESS lpMsgSess);
  STDAPI_(SCODE) OpenIMsgOnIStg(LPMSGSESS lpMsgSess,LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,LPMALLOC lpMalloc,LPVOID lpMapiSup,LPSTORAGE lpStg,MSGCALLRELEASE *lpfMsgCallRelease,ULONG ulCallerData,ULONG ulFlags,LPMESSAGE *lppMsg);

#define IMSG_NO_ISTG_COMMIT ((ULONG) 0x00000001)

#define PROPATTR_MANDATORY ((ULONG) 0x00000001)
#define PROPATTR_READABLE ((ULONG) 0x00000002)
#define PROPATTR_WRITEABLE ((ULONG) 0x00000004)

#define PROPATTR_NOT_PRESENT ((ULONG) 0x00000008)

  typedef struct _SPropAttrArray {
    ULONG cValues;
    ULONG aPropAttr[MAPI_DIM];
  } SPropAttrArray,*LPSPropAttrArray;

#define CbNewSPropAttrArray(_cattr) (offsetof(SPropAttrArray,aPropAttr) + (_cattr)*sizeof(ULONG))
#define CbSPropAttrArray(_lparray) (offsetof(SPropAttrArray,aPropAttr) + (UINT)((_lparray)->cValues)*sizeof(ULONG))
#define SizedSPropAttrArray(_cattr,_name) struct _SPropAttrArray_ ## _name { ULONG cValues; ULONG aPropAttr[_cattr]; } _name

  STDAPI GetAttribIMsgOnIStg(LPVOID lpObject,LPSPropTagArray lpPropTagArray,LPSPropAttrArray *lppPropAttrArray);
  STDAPI SetAttribIMsgOnIStg(LPVOID lpObject,LPSPropTagArray lpPropTags,LPSPropAttrArray lpPropAttrs,LPSPropProblemArray *lppPropProblems);
  STDAPI_(SCODE) MapStorageSCode(SCODE StgSCode);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                      usr/share/mingw-w64/include/imm.h                                                                   0100644 0000000 0000000 00000042014 12404413021 015265  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IMM_
#define _IMM_

#include <_mingw_unicode.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _IMM_SDK_DEFINED_
#define _IMM_SDK_DEFINED_

  DECLARE_HANDLE(HIMC);
  DECLARE_HANDLE(HIMCC);

  typedef HKL *LPHKL;
#ifndef DEFINED_LPUINT
#define DEFINED_LPUINT
  typedef UINT *LPUINT;
#endif

  typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } COMPOSITIONFORM,*PCOMPOSITIONFORM,*NPCOMPOSITIONFORM,*LPCOMPOSITIONFORM;

  typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } CANDIDATEFORM,*PCANDIDATEFORM,*NPCANDIDATEFORM,*LPCANDIDATEFORM;

  typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
  } CANDIDATELIST,*PCANDIDATELIST,*NPCANDIDATELIST,*LPCANDIDATELIST;

  typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
  } REGISTERWORDA,*PREGISTERWORDA,*NPREGISTERWORDA,*LPREGISTERWORDA;

  typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
  } REGISTERWORDW,*PREGISTERWORDW,*NPREGISTERWORDW,*LPREGISTERWORDW;

  __MINGW_TYPEDEF_AW(REGISTERWORD)
  __MINGW_TYPEDEF_AW(PREGISTERWORD)
  __MINGW_TYPEDEF_AW(NPREGISTERWORD)
  __MINGW_TYPEDEF_AW(LPREGISTERWORD)

  typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
  } RECONVERTSTRING,*PRECONVERTSTRING,*NPRECONVERTSTRING,*LPRECONVERTSTRING;

#define STYLE_DESCRIPTION_SIZE 32

  typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[STYLE_DESCRIPTION_SIZE];
  } STYLEBUFA,*PSTYLEBUFA,*NPSTYLEBUFA,*LPSTYLEBUFA;

  typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[STYLE_DESCRIPTION_SIZE];
  } STYLEBUFW,*PSTYLEBUFW,*NPSTYLEBUFW,*LPSTYLEBUFW;

  __MINGW_TYPEDEF_AW(STYLEBUF)
  __MINGW_TYPEDEF_AW(PSTYLEBUF)
  __MINGW_TYPEDEF_AW(NPSTYLEBUF)
  __MINGW_TYPEDEF_AW(LPSTYLEBUF)

#define IMEMENUITEM_STRING_SIZE 80

  typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[IMEMENUITEM_STRING_SIZE];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*NPIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;

  typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[IMEMENUITEM_STRING_SIZE];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*NPIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;

  __MINGW_TYPEDEF_AW(IMEMENUITEMINFO)
  __MINGW_TYPEDEF_AW(PIMEMENUITEMINFO)
  __MINGW_TYPEDEF_AW(NPIMEMENUITEMINFO)
  __MINGW_TYPEDEF_AW(LPIMEMENUITEMINFO)

  typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
  } IMECHARPOSITION,*PIMECHARPOSITION,*NPIMECHARPOSITION,*LPIMECHARPOSITION;

  typedef WINBOOL (CALLBACK *IMCENUMPROC)(HIMC,LPARAM);

#define ImmInstallIME __MINGW_NAME_AW(ImmInstallIME)
#define ImmGetDescription __MINGW_NAME_AW(ImmGetDescription)
#define ImmGetIMEFileName __MINGW_NAME_AW(ImmGetIMEFileName)
#define ImmGetCompositionString __MINGW_NAME_AW(ImmGetCompositionString)
#define ImmSetCompositionString __MINGW_NAME_AW(ImmSetCompositionString)
#define ImmGetCandidateListCount __MINGW_NAME_AW(ImmGetCandidateListCount)
#define ImmGetCandidateList __MINGW_NAME_AW(ImmGetCandidateList)
#define ImmGetGuideLine __MINGW_NAME_AW(ImmGetGuideLine)

  HKL WINAPI ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText);
  HKL WINAPI ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText);
  HWND WINAPI ImmGetDefaultIMEWnd(HWND);
  UINT WINAPI ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen);
  UINT WINAPI ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen);
  UINT WINAPI ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen);
  UINT WINAPI ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen);
  DWORD WINAPI ImmGetProperty(HKL,DWORD);
  WINBOOL WINAPI ImmIsIME(HKL);
  WINBOOL WINAPI ImmSimulateHotKey(HWND,DWORD);
  HIMC WINAPI ImmCreateContext(void);
  WINBOOL WINAPI ImmDestroyContext(HIMC);
  HIMC WINAPI ImmGetContext(HWND);
  WINBOOL WINAPI ImmReleaseContext(HWND,HIMC);
  HIMC WINAPI ImmAssociateContext(HWND,HIMC);
  WINBOOL WINAPI ImmAssociateContextEx(HWND,HIMC,DWORD);
  LONG WINAPI ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD);
  LONG WINAPI ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD);
  WINBOOL WINAPI ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  WINBOOL WINAPI ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  DWORD WINAPI ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount);
  DWORD WINAPI ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount);
  DWORD WINAPI ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD WINAPI ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD WINAPI ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen);
  DWORD WINAPI ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen);
  WINBOOL WINAPI ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD);
  WINBOOL WINAPI ImmSetConversionStatus(HIMC,DWORD,DWORD);
  WINBOOL WINAPI ImmGetOpenStatus(HIMC);
  WINBOOL WINAPI ImmSetOpenStatus(HIMC,WINBOOL);

#if defined(_WINGDI_) && !defined(NOGDI)

#define ImmGetCompositionFont __MINGW_NAME_AW(ImmGetCompositionFont)
#define ImmSetCompositionFont __MINGW_NAME_AW(ImmSetCompositionFont)

  WINBOOL WINAPI ImmGetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL WINAPI ImmGetCompositionFontW(HIMC,LPLOGFONTW);
  WINBOOL WINAPI ImmSetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL WINAPI ImmSetCompositionFontW(HIMC,LPLOGFONTW);
#endif

  typedef int (CALLBACK *REGISTERWORDENUMPROCA)(LPCSTR,DWORD,LPCSTR,LPVOID);
  typedef int (CALLBACK *REGISTERWORDENUMPROCW)(LPCWSTR,DWORD,LPCWSTR,LPVOID);

#define REGISTERWORDENUMPROC __MINGW_NAME_AW(REGISTERWORDENUMPROC)
#define ImmConfigureIME __MINGW_NAME_AW(ImmConfigureIME)
#define ImmEscape __MINGW_NAME_AW(ImmEscape)
#define ImmGetConversionList __MINGW_NAME_AW(ImmGetConversionList)
#define ImmIsUIMessage __MINGW_NAME_AW(ImmIsUIMessage)
#define ImmRegisterWord __MINGW_NAME_AW(ImmRegisterWord)
#define ImmUnregisterWord __MINGW_NAME_AW(ImmUnregisterWord)
#define ImmGetRegisterWordStyle __MINGW_NAME_AW(ImmGetRegisterWordStyle)
#define ImmEnumRegisterWord __MINGW_NAME_AW(ImmEnumRegisterWord)
#define ImmGetImeMenuItems __MINGW_NAME_AW(ImmGetImeMenuItems)

  WINBOOL WINAPI ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID);
  WINBOOL WINAPI ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID);
  LRESULT WINAPI ImmEscapeA(HKL,HIMC,UINT,LPVOID);
  LRESULT WINAPI ImmEscapeW(HKL,HIMC,UINT,LPVOID);
  DWORD WINAPI ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  DWORD WINAPI ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  WINBOOL WINAPI ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue);
  WINBOOL WINAPI ImmGetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL WINAPI ImmSetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL WINAPI ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL WINAPI ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL WINAPI ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM);
  WINBOOL WINAPI ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM);
  WINBOOL WINAPI ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
  WINBOOL WINAPI ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
  UINT WINAPI ImmGetVirtualKey(HWND);
  WINBOOL WINAPI ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister);
  WINBOOL WINAPI ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister);
  WINBOOL WINAPI ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister);
  WINBOOL WINAPI ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister);
  UINT WINAPI ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA);
  UINT WINAPI ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW);
  UINT WINAPI ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID);
  UINT WINAPI ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID);
  WINBOOL WINAPI ImmDisableIME(DWORD);
  WINBOOL WINAPI ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
  DWORD WINAPI ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
  DWORD WINAPI ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
  WINBOOL WINAPI ImmDisableTextFrameService(DWORD idThread);

#define IMC_GETCANDIDATEPOS 0x0007
#define IMC_SETCANDIDATEPOS 0x0008
#define IMC_GETCOMPOSITIONFONT 0x0009
#define IMC_SETCOMPOSITIONFONT 0x000A
#define IMC_GETCOMPOSITIONWINDOW 0x000B
#define IMC_SETCOMPOSITIONWINDOW 0x000C
#define IMC_GETSTATUSWINDOWPOS 0x000F
#define IMC_SETSTATUSWINDOWPOS 0x0010
#define IMC_CLOSESTATUSWINDOW 0x0021
#define IMC_OPENSTATUSWINDOW 0x0022

#define NI_OPENCANDIDATE 0x0010
#define NI_CLOSECANDIDATE 0x0011
#define NI_SELECTCANDIDATESTR 0x0012
#define NI_CHANGECANDIDATELIST 0x0013
#define NI_FINALIZECONVERSIONRESULT 0x0014
#define NI_COMPOSITIONSTR 0x0015
#define NI_SETCANDIDATE_PAGESTART 0x0016
#define NI_SETCANDIDATE_PAGESIZE 0x0017
#define NI_IMEMENUSELECTED 0x0018

#define ISC_SHOWUICANDIDATEWINDOW 0x00000001
#define ISC_SHOWUICOMPOSITIONWINDOW 0x80000000
#define ISC_SHOWUIGUIDELINE 0x40000000
#define ISC_SHOWUIALLCANDIDATEWINDOW 0x0000000F
#define ISC_SHOWUIALL 0xC000000F

#define CPS_COMPLETE 0x0001
#define CPS_CONVERT 0x0002
#define CPS_REVERT 0x0003
#define CPS_CANCEL 0x0004

#define MOD_ALT 0x0001
#define MOD_CONTROL 0x0002
#define MOD_SHIFT 0x0004

#define MOD_LEFT 0x8000
#define MOD_RIGHT 0x4000

#define MOD_ON_KEYUP 0x0800
#define MOD_IGNORE_ALL_MODIFIER 0x0400

#define IME_CHOTKEY_IME_NONIME_TOGGLE 0x10
#define IME_CHOTKEY_SHAPE_TOGGLE 0x11
#define IME_CHOTKEY_SYMBOL_TOGGLE 0x12

#define IME_JHOTKEY_CLOSE_OPEN 0x30

#define IME_KHOTKEY_SHAPE_TOGGLE 0x50
#define IME_KHOTKEY_HANJACONVERT 0x51
#define IME_KHOTKEY_ENGLISH 0x52

#define IME_THOTKEY_IME_NONIME_TOGGLE 0x70
#define IME_THOTKEY_SHAPE_TOGGLE 0x71
#define IME_THOTKEY_SYMBOL_TOGGLE 0x72

#define IME_HOTKEY_DSWITCH_FIRST 0x100
#define IME_HOTKEY_DSWITCH_LAST 0x11F

#define IME_HOTKEY_PRIVATE_FIRST 0x200
#define IME_ITHOTKEY_RESEND_RESULTSTR 0x200
#define IME_ITHOTKEY_PREVIOUS_COMPOSITION 0x201
#define IME_ITHOTKEY_UISTYLE_TOGGLE 0x202
#define IME_ITHOTKEY_RECONVERTSTRING 0x203
#define IME_HOTKEY_PRIVATE_LAST 0x21F

#define GCS_COMPREADSTR 0x0001
#define GCS_COMPREADATTR 0x0002
#define GCS_COMPREADCLAUSE 0x0004
#define GCS_COMPSTR 0x0008
#define GCS_COMPATTR 0x0010
#define GCS_COMPCLAUSE 0x0020
#define GCS_CURSORPOS 0x0080
#define GCS_DELTASTART 0x0100
#define GCS_RESULTREADSTR 0x0200
#define GCS_RESULTREADCLAUSE 0x0400
#define GCS_RESULTSTR 0x0800
#define GCS_RESULTCLAUSE 0x1000

#define CS_INSERTCHAR 0x2000
#define CS_NOMOVECARET 0x4000

#define IMEVER_0310 0x0003000A
#define IMEVER_0400 0x00040000

#define IME_PROP_AT_CARET 0x00010000
#define IME_PROP_SPECIAL_UI 0x00020000
#define IME_PROP_CANDLIST_START_FROM_1 0x00040000
#define IME_PROP_UNICODE 0x00080000
#define IME_PROP_COMPLETE_ON_UNSELECT 0x00100000

#define UI_CAP_2700 0x00000001
#define UI_CAP_ROT90 0x00000002
#define UI_CAP_ROTANY 0x00000004

#define SCS_CAP_COMPSTR 0x00000001
#define SCS_CAP_MAKEREAD 0x00000002
#define SCS_CAP_SETRECONVERTSTRING 0x00000004

#define SELECT_CAP_CONVERSION 0x00000001
#define SELECT_CAP_SENTENCE 0x00000002

#define GGL_LEVEL 0x00000001
#define GGL_INDEX 0x00000002
#define GGL_STRING 0x00000003
#define GGL_PRIVATE 0x00000004

#define GL_LEVEL_NOGUIDELINE 0x00000000
#define GL_LEVEL_FATAL 0x00000001
#define GL_LEVEL_ERROR 0x00000002
#define GL_LEVEL_WARNING 0x00000003
#define GL_LEVEL_INFORMATION 0x00000004

#define GL_ID_UNKNOWN 0x00000000
#define GL_ID_NOMODULE 0x00000001
#define GL_ID_NODICTIONARY 0x00000010
#define GL_ID_CANNOTSAVE 0x00000011
#define GL_ID_NOCONVERT 0x00000020
#define GL_ID_TYPINGERROR 0x00000021
#define GL_ID_TOOMANYSTROKE 0x00000022
#define GL_ID_READINGCONFLICT 0x00000023
#define GL_ID_INPUTREADING 0x00000024
#define GL_ID_INPUTRADICAL 0x00000025
#define GL_ID_INPUTCODE 0x00000026
#define GL_ID_INPUTSYMBOL 0x00000027
#define GL_ID_CHOOSECANDIDATE 0x00000028
#define GL_ID_REVERSECONVERSION 0x00000029
#define GL_ID_PRIVATE_FIRST 0x00008000
#define GL_ID_PRIVATE_LAST 0x0000FFFF

#define IGP_GETIMEVERSION (DWORD)(-4)
#define IGP_PROPERTY 0x00000004
#define IGP_CONVERSION 0x00000008
#define IGP_SENTENCE 0x0000000c
#define IGP_UI 0x00000010
#define IGP_SETCOMPSTR 0x00000014
#define IGP_SELECT 0x00000018

#define SCS_SETSTR (GCS_COMPREADSTR|GCS_COMPSTR)
#define SCS_CHANGEATTR (GCS_COMPREADATTR|GCS_COMPATTR)
#define SCS_CHANGECLAUSE (GCS_COMPREADCLAUSE|GCS_COMPCLAUSE)
#define SCS_SETRECONVERTSTRING 0x00010000
#define SCS_QUERYRECONVERTSTRING 0x00020000

#define ATTR_INPUT 0x00
#define ATTR_TARGET_CONVERTED 0x01
#define ATTR_CONVERTED 0x02
#define ATTR_TARGET_NOTCONVERTED 0x03
#define ATTR_INPUT_ERROR 0x04
#define ATTR_FIXEDCONVERTED 0x05

#define CFS_DEFAULT 0x0000
#define CFS_RECT 0x0001
#define CFS_POINT 0x0002
#define CFS_FORCE_POSITION 0x0020
#define CFS_CANDIDATEPOS 0x0040
#define CFS_EXCLUDE 0x0080

#define GCL_CONVERSION 0x0001
#define GCL_REVERSECONVERSION 0x0002
#define GCL_REVERSE_LENGTH 0x0003

#define IME_CMODE_ALPHANUMERIC 0x0000
#define IME_CMODE_NATIVE 0x0001
#define IME_CMODE_CHINESE IME_CMODE_NATIVE

#define IME_CMODE_HANGEUL IME_CMODE_NATIVE
#define IME_CMODE_HANGUL IME_CMODE_NATIVE
#define IME_CMODE_JAPANESE IME_CMODE_NATIVE
#define IME_CMODE_KATAKANA 0x0002
#define IME_CMODE_LANGUAGE 0x0003
#define IME_CMODE_FULLSHAPE 0x0008
#define IME_CMODE_ROMAN 0x0010
#define IME_CMODE_CHARCODE 0x0020
#define IME_CMODE_HANJACONVERT 0x0040
#define IME_CMODE_SOFTKBD 0x0080
#define IME_CMODE_NOCONVERSION 0x0100
#define IME_CMODE_EUDC 0x0200
#define IME_CMODE_SYMBOL 0x0400
#define IME_CMODE_FIXED 0x0800
#define IME_CMODE_RESERVED 0xF0000000

#define IME_SMODE_NONE 0x0000
#define IME_SMODE_PLAURALCLAUSE 0x0001
#define IME_SMODE_SINGLECONVERT 0x0002
#define IME_SMODE_AUTOMATIC 0x0004
#define IME_SMODE_PHRASEPREDICT 0x0008
#define IME_SMODE_CONVERSATION 0x0010
#define IME_SMODE_RESERVED 0x0000F000

#define IME_CAND_UNKNOWN 0x0000
#define IME_CAND_READ 0x0001
#define IME_CAND_CODE 0x0002
#define IME_CAND_MEANING 0x0003
#define IME_CAND_RADICAL 0x0004
#define IME_CAND_STROKE 0x0005

#define IMN_CLOSESTATUSWINDOW 0x0001
#define IMN_OPENSTATUSWINDOW 0x0002
#define IMN_CHANGECANDIDATE 0x0003
#define IMN_CLOSECANDIDATE 0x0004
#define IMN_OPENCANDIDATE 0x0005
#define IMN_SETCONVERSIONMODE 0x0006
#define IMN_SETSENTENCEMODE 0x0007
#define IMN_SETOPENSTATUS 0x0008
#define IMN_SETCANDIDATEPOS 0x0009
#define IMN_SETCOMPOSITIONFONT 0x000A
#define IMN_SETCOMPOSITIONWINDOW 0x000B
#define IMN_SETSTATUSWINDOWPOS 0x000C
#define IMN_GUIDELINE 0x000D
#define IMN_PRIVATE 0x000E

#define IMR_COMPOSITIONWINDOW 0x0001
#define IMR_CANDIDATEWINDOW 0x0002
#define IMR_COMPOSITIONFONT 0x0003
#define IMR_RECONVERTSTRING 0x0004
#define IMR_CONFIRMRECONVERTSTRING 0x0005
#define IMR_QUERYCHARPOSITION 0x0006
#define IMR_DOCUMENTFEED 0x0007

#define IMM_ERROR_NODATA (-1)
#define IMM_ERROR_GENERAL (-2)

#define IME_CONFIG_GENERAL 1
#define IME_CONFIG_REGISTERWORD 2
#define IME_CONFIG_SELECTDICTIONARY 3

#define IME_ESC_QUERY_SUPPORT 0x0003
#define IME_ESC_RESERVED_FIRST 0x0004
#define IME_ESC_RESERVED_LAST 0x07FF
#define IME_ESC_PRIVATE_FIRST 0x0800
#define IME_ESC_PRIVATE_LAST 0x0FFF

#define IME_ESC_SEQUENCE_TO_INTERNAL 0x1001
#define IME_ESC_GET_EUDC_DICTIONARY 0x1003
#define IME_ESC_SET_EUDC_DICTIONARY 0x1004
#define IME_ESC_MAX_KEY 0x1005
#define IME_ESC_IME_NAME 0x1006
#define IME_ESC_SYNC_HOTKEY 0x1007
#define IME_ESC_HANJA_MODE 0x1008
#define IME_ESC_AUTOMATA 0x1009
#define IME_ESC_PRIVATE_HOTKEY 0x100a
#define IME_ESC_GETHELPFILENAME 0x100b

#define IME_REGWORD_STYLE_EUDC 0x00000001
#define IME_REGWORD_STYLE_USER_FIRST 0x80000000
#define IME_REGWORD_STYLE_USER_LAST 0xFFFFFFFF

#define IACE_CHILDREN 0x0001
#define IACE_DEFAULT 0x0010
#define IACE_IGNORENOCONTEXT 0x0020

#define IGIMIF_RIGHTMENU 0x0001

#define IGIMII_CMODE 0x0001
#define IGIMII_SMODE 0x0002
#define IGIMII_CONFIGURE 0x0004
#define IGIMII_TOOLS 0x0008
#define IGIMII_HELP 0x0010
#define IGIMII_OTHER 0x0020
#define IGIMII_INPUTTOOLS 0x0040

#define IMFT_RADIOCHECK 0x00001
#define IMFT_SEPARATOR 0x00002
#define IMFT_SUBMENU 0x00004

#define IMFS_GRAYED MFS_GRAYED
#define IMFS_DISABLED MFS_DISABLED
#define IMFS_CHECKED MFS_CHECKED
#define IMFS_HILITE MFS_HILITE
#define IMFS_ENABLED MFS_ENABLED
#define IMFS_UNCHECKED MFS_UNCHECKED
#define IMFS_UNHILITE MFS_UNHILITE
#define IMFS_DEFAULT MFS_DEFAULT

#define SOFTKEYBOARD_TYPE_T1 0x0001
#define SOFTKEYBOARD_TYPE_C1 0x0002
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/share/mingw-w64/include/in6addr.h                                                               0100644 0000000 0000000 00000001526 12404413021 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifndef s6_addr

#ifdef __LP64__
#pragma push_macro("u_long")
#undef u_long
#define u_long __ms_u_long
#endif

#include <_bsd_types.h>

typedef struct in6_addr {
  union {
    u_char Byte[16];
    u_short Word[8];
#ifdef __INSIDE_CYGWIN__
    uint32_t __s6_addr32[4];
#endif
  } u;
} IN6_ADDR, *PIN6_ADDR, *LPIN6_ADDR;

#define in_addr6	in6_addr

#define _S6_un		u
#define _S6_u8		Byte
#define s6_addr		_S6_un._S6_u8

#define s6_bytes	u.Byte
#define s6_words	u.Word

#ifdef __INSIDE_CYGWIN__
#define s6_addr16	u.Word
#define s6_addr32       u.__s6_addr32
#endif

#ifdef __LP64__
#pragma pop_macro("u_long")
#endif

#endif /* s6_addr */

                                                                                                                                                                          usr/share/mingw-w64/include/inaddr.h                                                                0100644 0000000 0000000 00000001447 12404413021 015751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifndef s_addr

#ifdef __LP64__
#pragma push_macro("u_long")
#undef u_long
#define u_long __ms_u_long
#endif

#include <_bsd_types.h>

typedef struct in_addr {
  union {
    struct { u_char  s_b1, s_b2, s_b3, s_b4; } S_un_b;
    struct { u_short s_w1, s_w2; } S_un_w;
    u_long S_addr;
  } S_un;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;

#define s_addr	S_un.S_addr
#define s_host	S_un.S_un_b.s_b2
#define s_net	S_un.S_un_b.s_b1
#define s_imp	S_un.S_un_w.s_w2
#define s_impno	S_un.S_un_b.s_b4
#define s_lh	S_un.S_un_b.s_b3

#ifdef __LP64__
#pragma pop_macro("u_long")
#endif

#endif /* s_addr */

                                                                                                                                                                                                                         usr/share/mingw-w64/include/indexsrv.h                                                              0100644 0000000 0000000 00000061427 12404413021 016356  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error This stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __indexsrv_h__
#define __indexsrv_h__

#ifndef __IPhraseSink_FWD_DEFINED__
#define __IPhraseSink_FWD_DEFINED__
typedef struct IPhraseSink IPhraseSink;
#endif

#ifndef __IWordSink_FWD_DEFINED__
#define __IWordSink_FWD_DEFINED__
typedef struct IWordSink IWordSink;
#endif

#ifndef __IWordBreaker_FWD_DEFINED__
#define __IWordBreaker_FWD_DEFINED__
typedef struct IWordBreaker IWordBreaker;
#endif

#ifndef __IWordFormSink_FWD_DEFINED__
#define __IWordFormSink_FWD_DEFINED__
typedef struct IWordFormSink IWordFormSink;
#endif

#ifndef __IStemmer_FWD_DEFINED__
#define __IStemmer_FWD_DEFINED__
typedef struct IStemmer IStemmer;
#endif

#ifndef __ISimpleCommandCreator_FWD_DEFINED__
#define __ISimpleCommandCreator_FWD_DEFINED__
typedef struct ISimpleCommandCreator ISimpleCommandCreator;
#endif

#ifndef __IColumnMapper_FWD_DEFINED__
#define __IColumnMapper_FWD_DEFINED__
typedef struct IColumnMapper IColumnMapper;
#endif

#ifndef __IColumnMapperCreator_FWD_DEFINED__
#define __IColumnMapperCreator_FWD_DEFINED__
typedef struct IColumnMapperCreator IColumnMapperCreator;
#endif

#include "oaidl.h"
#include "filter.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

#ifndef __IPhraseSink_INTERFACE_DEFINED__
#define __IPhraseSink_INTERFACE_DEFINED__

  EXTERN_C const IID IID_IPhraseSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IPhraseSink : public IUnknown {
  public:
    virtual HRESULT WINAPI PutSmallPhrase(const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType) = 0;
    virtual HRESULT WINAPI PutPhrase(const WCHAR *pwcPhrase,ULONG cwcPhrase) = 0;
  };
#else
  typedef struct IPhraseSinkVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IPhraseSink *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IPhraseSink *This);
      ULONG (WINAPI *Release)(IPhraseSink *This);
      HRESULT (WINAPI *PutSmallPhrase)(IPhraseSink *This,const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType);
      HRESULT (WINAPI *PutPhrase)(IPhraseSink *This,const WCHAR *pwcPhrase,ULONG cwcPhrase);
    END_INTERFACE
  } IPhraseSinkVtbl;
  struct IPhraseSink {
    CONST_VTBL struct IPhraseSinkVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IPhraseSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPhraseSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPhraseSink_Release(This) (This)->lpVtbl->Release(This)
#define IPhraseSink_PutSmallPhrase(This,pwcNoun,cwcNoun,pwcModifier,cwcModifier,ulAttachmentType) (This)->lpVtbl->PutSmallPhrase(This,pwcNoun,cwcNoun,pwcModifier,cwcModifier,ulAttachmentType)
#define IPhraseSink_PutPhrase(This,pwcPhrase,cwcPhrase) (This)->lpVtbl->PutPhrase(This,pwcPhrase,cwcPhrase)
#endif
#endif
  HRESULT WINAPI IPhraseSink_PutSmallPhrase_Proxy(IPhraseSink *This,const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType);
  void __RPC_STUB IPhraseSink_PutSmallPhrase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IPhraseSink_PutPhrase_Proxy(IPhraseSink *This,const WCHAR *pwcPhrase,ULONG cwcPhrase);
  void __RPC_STUB IPhraseSink_PutPhrase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IWordSink_INTERFACE_DEFINED__
#define __IWordSink_INTERFACE_DEFINED__
#ifndef _tagWORDREP_BREAK_TYPE_DEFINED
#define _tagWORDREP_BREAK_TYPE_DEFINED
  typedef enum tagWORDREP_BREAK_TYPE {
    WORDREP_BREAK_EOW = 0,WORDREP_BREAK_EOS = 1,WORDREP_BREAK_EOP = 2,WORDREP_BREAK_EOC = 3
  } WORDREP_BREAK_TYPE;
#define _WORDREP_BREAK_TYPE_DEFINED
#endif

  EXTERN_C const IID IID_IWordSink;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IWordSink : public IUnknown {
  public:
    virtual HRESULT WINAPI PutWord(ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos) = 0;
    virtual HRESULT WINAPI PutAltWord(ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos) = 0;
    virtual HRESULT WINAPI StartAltPhrase(void) = 0;
    virtual HRESULT WINAPI EndAltPhrase(void) = 0;
    virtual HRESULT WINAPI PutBreak(WORDREP_BREAK_TYPE breakType) = 0;
  };
#else
  typedef struct IWordSinkVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IWordSink *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IWordSink *This);
      ULONG (WINAPI *Release)(IWordSink *This);
      HRESULT (WINAPI *PutWord)(IWordSink *This,ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos);
      HRESULT (WINAPI *PutAltWord)(IWordSink *This,ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos);
      HRESULT (WINAPI *StartAltPhrase)(IWordSink *This);
      HRESULT (WINAPI *EndAltPhrase)(IWordSink *This);
      HRESULT (WINAPI *PutBreak)(IWordSink *This,WORDREP_BREAK_TYPE breakType);
    END_INTERFACE
  } IWordSinkVtbl;
  struct IWordSink {
    CONST_VTBL struct IWordSinkVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IWordSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWordSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWordSink_Release(This) (This)->lpVtbl->Release(This)
#define IWordSink_PutWord(This,cwc,pwcInBuf,cwcSrcLen,cwcSrcPos) (This)->lpVtbl->PutWord(This,cwc,pwcInBuf,cwcSrcLen,cwcSrcPos)
#define IWordSink_PutAltWord(This,cwc,pwcInBuf,cwcSrcLen,cwcSrcPos) (This)->lpVtbl->PutAltWord(This,cwc,pwcInBuf,cwcSrcLen,cwcSrcPos)
#define IWordSink_StartAltPhrase(This) (This)->lpVtbl->StartAltPhrase(This)
#define IWordSink_EndAltPhrase(This) (This)->lpVtbl->EndAltPhrase(This)
#define IWordSink_PutBreak(This,breakType) (This)->lpVtbl->PutBreak(This,breakType)
#endif
#endif
  HRESULT WINAPI IWordSink_PutWord_Proxy(IWordSink *This,ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos);
  void __RPC_STUB IWordSink_PutWord_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordSink_PutAltWord_Proxy(IWordSink *This,ULONG cwc,const WCHAR *pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos);
  void __RPC_STUB IWordSink_PutAltWord_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordSink_StartAltPhrase_Proxy(IWordSink *This);
  void __RPC_STUB IWordSink_StartAltPhrase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordSink_EndAltPhrase_Proxy(IWordSink *This);
  void __RPC_STUB IWordSink_EndAltPhrase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordSink_PutBreak_Proxy(IWordSink *This,WORDREP_BREAK_TYPE breakType);
  void __RPC_STUB IWordSink_PutBreak_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef _tagTEXT_SOURCE_DEFINED
#define _tagTEXT_SOURCE_DEFINED
  typedef HRESULT (WINAPI *PFNFILLTEXTBUFFER)(struct tagTEXT_SOURCE *pTextSource);
  typedef struct tagTEXT_SOURCE {
    PFNFILLTEXTBUFFER pfnFillTextBuffer;
    const WCHAR *awcBuffer;
    ULONG iEnd;
    ULONG iCur;
  } TEXT_SOURCE;
#define _TEXT_SOURCE_DEFINED
#endif

  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0127_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0127_v0_0_s_ifspec;

#ifndef __IWordBreaker_INTERFACE_DEFINED__
#define __IWordBreaker_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IWordBreaker;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IWordBreaker : public IUnknown {
  public:
    virtual HRESULT WINAPI Init(WINBOOL fQuery,ULONG ulMaxTokenSize,WINBOOL *pfLicense) = 0;
    virtual HRESULT WINAPI BreakText(TEXT_SOURCE *pTextSource,IWordSink *pWordSink,IPhraseSink *pPhraseSink) = 0;
    virtual HRESULT WINAPI ComposePhrase(const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType,WCHAR *pwcPhrase,ULONG *pcwcPhrase) = 0;
    virtual HRESULT WINAPI GetLicenseToUse(const WCHAR **ppwcsLicense) = 0;
  };
#else
  typedef struct IWordBreakerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IWordBreaker *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IWordBreaker *This);
      ULONG (WINAPI *Release)(IWordBreaker *This);
      HRESULT (WINAPI *Init)(IWordBreaker *This,WINBOOL fQuery,ULONG ulMaxTokenSize,WINBOOL *pfLicense);
      HRESULT (WINAPI *BreakText)(IWordBreaker *This,TEXT_SOURCE *pTextSource,IWordSink *pWordSink,IPhraseSink *pPhraseSink);
      HRESULT (WINAPI *ComposePhrase)(IWordBreaker *This,const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType,WCHAR *pwcPhrase,ULONG *pcwcPhrase);
      HRESULT (WINAPI *GetLicenseToUse)(IWordBreaker *This,const WCHAR **ppwcsLicense);
    END_INTERFACE
  } IWordBreakerVtbl;
  struct IWordBreaker {
    CONST_VTBL struct IWordBreakerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IWordBreaker_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWordBreaker_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWordBreaker_Release(This) (This)->lpVtbl->Release(This)
#define IWordBreaker_Init(This,fQuery,ulMaxTokenSize,pfLicense) (This)->lpVtbl->Init(This,fQuery,ulMaxTokenSize,pfLicense)
#define IWordBreaker_BreakText(This,pTextSource,pWordSink,pPhraseSink) (This)->lpVtbl->BreakText(This,pTextSource,pWordSink,pPhraseSink)
#define IWordBreaker_ComposePhrase(This,pwcNoun,cwcNoun,pwcModifier,cwcModifier,ulAttachmentType,pwcPhrase,pcwcPhrase) (This)->lpVtbl->ComposePhrase(This,pwcNoun,cwcNoun,pwcModifier,cwcModifier,ulAttachmentType,pwcPhrase,pcwcPhrase)
#define IWordBreaker_GetLicenseToUse(This,ppwcsLicense) (This)->lpVtbl->GetLicenseToUse(This,ppwcsLicense)
#endif
#endif
  HRESULT WINAPI IWordBreaker_Init_Proxy(IWordBreaker *This,WINBOOL fQuery,ULONG ulMaxTokenSize,WINBOOL *pfLicense);
  void __RPC_STUB IWordBreaker_Init_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordBreaker_BreakText_Proxy(IWordBreaker *This,TEXT_SOURCE *pTextSource,IWordSink *pWordSink,IPhraseSink *pPhraseSink);
  void __RPC_STUB IWordBreaker_BreakText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordBreaker_ComposePhrase_Proxy(IWordBreaker *This,const WCHAR *pwcNoun,ULONG cwcNoun,const WCHAR *pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType,WCHAR *pwcPhrase,ULONG *pcwcPhrase);
  void __RPC_STUB IWordBreaker_ComposePhrase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordBreaker_GetLicenseToUse_Proxy(IWordBreaker *This,const WCHAR **ppwcsLicense);
  void __RPC_STUB IWordBreaker_GetLicenseToUse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IWordFormSink_INTERFACE_DEFINED__
#define __IWordFormSink_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IWordFormSink;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IWordFormSink : public IUnknown {
  public:
    virtual HRESULT WINAPI PutAltWord(const WCHAR *pwcInBuf,ULONG cwc) = 0;
    virtual HRESULT WINAPI PutWord(const WCHAR *pwcInBuf,ULONG cwc) = 0;
  };
#else
  typedef struct IWordFormSinkVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IWordFormSink *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IWordFormSink *This);
      ULONG (WINAPI *Release)(IWordFormSink *This);
      HRESULT (WINAPI *PutAltWord)(IWordFormSink *This,const WCHAR *pwcInBuf,ULONG cwc);
      HRESULT (WINAPI *PutWord)(IWordFormSink *This,const WCHAR *pwcInBuf,ULONG cwc);
    END_INTERFACE
  } IWordFormSinkVtbl;
  struct IWordFormSink {
    CONST_VTBL struct IWordFormSinkVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IWordFormSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWordFormSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWordFormSink_Release(This) (This)->lpVtbl->Release(This)
#define IWordFormSink_PutAltWord(This,pwcInBuf,cwc) (This)->lpVtbl->PutAltWord(This,pwcInBuf,cwc)
#define IWordFormSink_PutWord(This,pwcInBuf,cwc) (This)->lpVtbl->PutWord(This,pwcInBuf,cwc)
#endif
#endif
  HRESULT WINAPI IWordFormSink_PutAltWord_Proxy(IWordFormSink *This,const WCHAR *pwcInBuf,ULONG cwc);
  void __RPC_STUB IWordFormSink_PutAltWord_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IWordFormSink_PutWord_Proxy(IWordFormSink *This,const WCHAR *pwcInBuf,ULONG cwc);
  void __RPC_STUB IWordFormSink_PutWord_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IStemmer_INTERFACE_DEFINED__
#define __IStemmer_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IStemmer;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IStemmer : public IUnknown {
  public:
    virtual HRESULT WINAPI Init(ULONG ulMaxTokenSize,WINBOOL *pfLicense) = 0;
    virtual HRESULT WINAPI GenerateWordForms(const WCHAR *pwcInBuf,ULONG cwc,IWordFormSink *pStemSink) = 0;
    virtual HRESULT WINAPI GetLicenseToUse(const WCHAR **ppwcsLicense) = 0;
  };
#else
  typedef struct IStemmerVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IStemmer *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IStemmer *This);
      ULONG (WINAPI *Release)(IStemmer *This);
      HRESULT (WINAPI *Init)(IStemmer *This,ULONG ulMaxTokenSize,WINBOOL *pfLicense);
      HRESULT (WINAPI *GenerateWordForms)(IStemmer *This,const WCHAR *pwcInBuf,ULONG cwc,IWordFormSink *pStemSink);
      HRESULT (WINAPI *GetLicenseToUse)(IStemmer *This,const WCHAR **ppwcsLicense);
    END_INTERFACE
  } IStemmerVtbl;
  struct IStemmer {
    CONST_VTBL struct IStemmerVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IStemmer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IStemmer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IStemmer_Release(This) (This)->lpVtbl->Release(This)
#define IStemmer_Init(This,ulMaxTokenSize,pfLicense) (This)->lpVtbl->Init(This,ulMaxTokenSize,pfLicense)
#define IStemmer_GenerateWordForms(This,pwcInBuf,cwc,pStemSink) (This)->lpVtbl->GenerateWordForms(This,pwcInBuf,cwc,pStemSink)
#define IStemmer_GetLicenseToUse(This,ppwcsLicense) (This)->lpVtbl->GetLicenseToUse(This,ppwcsLicense)
#endif
#endif
  HRESULT WINAPI IStemmer_Init_Proxy(IStemmer *This,ULONG ulMaxTokenSize,WINBOOL *pfLicense);
  void __RPC_STUB IStemmer_Init_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IStemmer_GenerateWordForms_Proxy(IStemmer *This,const WCHAR *pwcInBuf,ULONG cwc,IWordFormSink *pStemSink);
  void __RPC_STUB IStemmer_GenerateWordForms_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IStemmer_GetLicenseToUse_Proxy(IStemmer *This,const WCHAR **ppwcsLicense);
  void __RPC_STUB IStemmer_GetLicenseToUse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0130_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0130_v0_0_s_ifspec;

#ifndef __ISimpleCommandCreator_INTERFACE_DEFINED__
#define __ISimpleCommandCreator_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ISimpleCommandCreator;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ISimpleCommandCreator : public IUnknown {
  public:
    virtual HRESULT WINAPI CreateICommand(IUnknown **ppIUnknown,IUnknown *pOuterUnk) = 0;
    virtual HRESULT WINAPI VerifyCatalog(const WCHAR *pwszMachine,const WCHAR *pwszCatalogName) = 0;
    virtual HRESULT WINAPI GetDefaultCatalog(WCHAR *pwszCatalogName,ULONG cwcIn,ULONG *pcwcOut) = 0;
  };
#else
  typedef struct ISimpleCommandCreatorVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ISimpleCommandCreator *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ISimpleCommandCreator *This);
      ULONG (WINAPI *Release)(ISimpleCommandCreator *This);
      HRESULT (WINAPI *CreateICommand)(ISimpleCommandCreator *This,IUnknown **ppIUnknown,IUnknown *pOuterUnk);
      HRESULT (WINAPI *VerifyCatalog)(ISimpleCommandCreator *This,const WCHAR *pwszMachine,const WCHAR *pwszCatalogName);
      HRESULT (WINAPI *GetDefaultCatalog)(ISimpleCommandCreator *This,WCHAR *pwszCatalogName,ULONG cwcIn,ULONG *pcwcOut);
    END_INTERFACE
  } ISimpleCommandCreatorVtbl;
  struct ISimpleCommandCreator {
    CONST_VTBL struct ISimpleCommandCreatorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ISimpleCommandCreator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISimpleCommandCreator_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISimpleCommandCreator_Release(This) (This)->lpVtbl->Release(This)
#define ISimpleCommandCreator_CreateICommand(This,ppIUnknown,pOuterUnk) (This)->lpVtbl->CreateICommand(This,ppIUnknown,pOuterUnk)
#define ISimpleCommandCreator_VerifyCatalog(This,pwszMachine,pwszCatalogName) (This)->lpVtbl->VerifyCatalog(This,pwszMachine,pwszCatalogName)
#define ISimpleCommandCreator_GetDefaultCatalog(This,pwszCatalogName,cwcIn,pcwcOut) (This)->lpVtbl->GetDefaultCatalog(This,pwszCatalogName,cwcIn,pcwcOut)
#endif
#endif
  HRESULT WINAPI ISimpleCommandCreator_CreateICommand_Proxy(ISimpleCommandCreator *This,IUnknown **ppIUnknown,IUnknown *pOuterUnk);
  void __RPC_STUB ISimpleCommandCreator_CreateICommand_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ISimpleCommandCreator_VerifyCatalog_Proxy(ISimpleCommandCreator *This,const WCHAR *pwszMachine,const WCHAR *pwszCatalogName);
  void __RPC_STUB ISimpleCommandCreator_VerifyCatalog_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ISimpleCommandCreator_GetDefaultCatalog_Proxy(ISimpleCommandCreator *This,WCHAR *pwszCatalogName,ULONG cwcIn,ULONG *pcwcOut);
  void __RPC_STUB ISimpleCommandCreator_GetDefaultCatalog_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#define CLSID_CISimpleCommandCreator {0xc7b6c04a,0xcbb5,0x11d0,{0xbb,0x4c,0x0,0xc0,0x4f,0xc2,0xf4,0x10 } }
  typedef struct tagDBID DBID;
  typedef WORD DBTYPE;

  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0131_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0131_v0_0_s_ifspec;

#ifndef __IColumnMapper_INTERFACE_DEFINED__
#define __IColumnMapper_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IColumnMapper;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IColumnMapper : public IUnknown {
  public:
    virtual HRESULT WINAPI GetPropInfoFromName(const WCHAR *wcsPropName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth) = 0;
    virtual HRESULT WINAPI GetPropInfoFromId(const DBID *pPropId,WCHAR **pwcsName,DBTYPE *pPropType,unsigned int *puiWidth) = 0;
    virtual HRESULT WINAPI EnumPropInfo(ULONG iEntry,const WCHAR **pwcsName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth) = 0;
    virtual HRESULT WINAPI IsMapUpToDate(void) = 0;
  };
#else
  typedef struct IColumnMapperVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IColumnMapper *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IColumnMapper *This);
      ULONG (WINAPI *Release)(IColumnMapper *This);
      HRESULT (WINAPI *GetPropInfoFromName)(IColumnMapper *This,const WCHAR *wcsPropName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth);
      HRESULT (WINAPI *GetPropInfoFromId)(IColumnMapper *This,const DBID *pPropId,WCHAR **pwcsName,DBTYPE *pPropType,unsigned int *puiWidth);
      HRESULT (WINAPI *EnumPropInfo)(IColumnMapper *This,ULONG iEntry,const WCHAR **pwcsName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth);
      HRESULT (WINAPI *IsMapUpToDate)(IColumnMapper *This);
    END_INTERFACE
  } IColumnMapperVtbl;
  struct IColumnMapper {
    CONST_VTBL struct IColumnMapperVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IColumnMapper_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IColumnMapper_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IColumnMapper_Release(This) (This)->lpVtbl->Release(This)
#define IColumnMapper_GetPropInfoFromName(This,wcsPropName,ppPropId,pPropType,puiWidth) (This)->lpVtbl->GetPropInfoFromName(This,wcsPropName,ppPropId,pPropType,puiWidth)
#define IColumnMapper_GetPropInfoFromId(This,pPropId,pwcsName,pPropType,puiWidth) (This)->lpVtbl->GetPropInfoFromId(This,pPropId,pwcsName,pPropType,puiWidth)
#define IColumnMapper_EnumPropInfo(This,iEntry,pwcsName,ppPropId,pPropType,puiWidth) (This)->lpVtbl->EnumPropInfo(This,iEntry,pwcsName,ppPropId,pPropType,puiWidth)
#define IColumnMapper_IsMapUpToDate(This) (This)->lpVtbl->IsMapUpToDate(This)
#endif
#endif
  HRESULT WINAPI IColumnMapper_GetPropInfoFromName_Proxy(IColumnMapper *This,const WCHAR *wcsPropName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth);
  void __RPC_STUB IColumnMapper_GetPropInfoFromName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IColumnMapper_GetPropInfoFromId_Proxy(IColumnMapper *This,const DBID *pPropId,WCHAR **pwcsName,DBTYPE *pPropType,unsigned int *puiWidth);
  void __RPC_STUB IColumnMapper_GetPropInfoFromId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IColumnMapper_EnumPropInfo_Proxy(IColumnMapper *This,ULONG iEntry,const WCHAR **pwcsName,DBID **ppPropId,DBTYPE *pPropType,unsigned int *puiWidth);
  void __RPC_STUB IColumnMapper_EnumPropInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IColumnMapper_IsMapUpToDate_Proxy(IColumnMapper *This);
  void __RPC_STUB IColumnMapper_IsMapUpToDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#define LOCAL_MACHINE (L".")
#define SYSTEM_DEFAULT_CAT (L"__SystemDefault__")
#define INDEX_SERVER_DEFAULT_CAT (L"__IndexServerDefault__")

  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0132_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_indexsrv_0132_v0_0_s_ifspec;

#ifndef __IColumnMapperCreator_INTERFACE_DEFINED__
#define __IColumnMapperCreator_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IColumnMapperCreator;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IColumnMapperCreator : public IUnknown {
  public:
    virtual HRESULT WINAPI GetColumnMapper(const WCHAR *wcsMachineName,const WCHAR *wcsCatalogName,IColumnMapper **ppColumnMapper) = 0;
  };
#else
  typedef struct IColumnMapperCreatorVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IColumnMapperCreator *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IColumnMapperCreator *This);
      ULONG (WINAPI *Release)(IColumnMapperCreator *This);
      HRESULT (WINAPI *GetColumnMapper)(IColumnMapperCreator *This,const WCHAR *wcsMachineName,const WCHAR *wcsCatalogName,IColumnMapper **ppColumnMapper);
    END_INTERFACE
  } IColumnMapperCreatorVtbl;
  struct IColumnMapperCreator {
    CONST_VTBL struct IColumnMapperCreatorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IColumnMapperCreator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IColumnMapperCreator_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IColumnMapperCreator_Release(This) (This)->lpVtbl->Release(This)
#define IColumnMapperCreator_GetColumnMapper(This,wcsMachineName,wcsCatalogName,ppColumnMapper) (This)->lpVtbl->GetColumnMapper(This,wcsMachineName,wcsCatalogName,ppColumnMapper)
#endif
#endif
  HRESULT WINAPI IColumnMapperCreator_GetColumnMapper_Proxy(IColumnMapperCreator *This,const WCHAR *wcsMachineName,const WCHAR *wcsCatalogName,IColumnMapper **ppColumnMapper);
  void __RPC_STUB IColumnMapperCreator_GetColumnMapper_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                         usr/share/mingw-w64/include/inetreg.h                                                               0100644 0000000 0000000 00000037512 12404413021 016147  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _INETREGSTRS_H_
#define _INETREGSTRS_H_

#define TSZMICROSOFTPATH TEXT("Software\\Microsoft")
#define TSZIEPATH TSZMICROSOFTPATH TEXT("\\Internet Explorer")
#define TSZWINCURVERPATH TSZMICROSOFTPATH TEXT("\\windows\\CurrentVersion")
#define TSZWININETPATH TSZWINCURVERPATH TEXT("\\Internet Settings")
#define REGSTR_PATH_RUNONCE_KEY TSZWINCURVERPATH TEXT("\\RunOnce")
#define REGSTR_PATH_INETCPL_PS_EXTENTIONS TSZWINCURVERPATH TEXT("\\Controls Folder\\Internet")

#define REGSTR_PATH_IEXPLORER TSZIEPATH

#define SZ_IE_MAIN "Main"
#define REGSTR_PATH_MAIN TSZIEPATH TEXT("\\") TEXT(SZ_IE_MAIN)
#define REGSTR_KEY_MAIN TEXT(SZ_IE_MAIN)
#define REGSTR_VAL_SMOOTHSCROLL TEXT("SmoothScroll")
#define REGSTR_VAL_SMOOTHSCROLL_DEF TRUE
#define REGSTR_VAL_SHOWTOOLBAR TEXT("Show_ToolBar")
#define REGSTR_VAL_SHOWADDRESSBAR TEXT("Show_URLToolBar")
#define REGSTR_VAL_STARTPAGE TEXT("Start Page")
#define REGSTRA_VAL_STARTPAGE "Start Page"
#define REGSTR_VAL_SEARCHPAGE TEXT("Search Page")
#define REGSTR_VAL_LOCALPAGE TEXT("Local Page")

#define REGSTR_VAL_USESTYLESHEETS TEXT("Use Stylesheets")
#define REGSTR_VAL_USESTYLESHEETS_TYPE REG_SZ
#define REGSTR_VAL_USESTYLESHEETS_DEF TEXT("yes")

#define REGSTR_VAL_USEICM TEXT("UseICM")
#define REGSTR_VAL_USEICM_DEF FALSE

#define REGSTR_VAL_SHOWFOCUS TEXT("Tabstop - MouseDown")
#define REGSTR_VAL_SHOWFOCUS_TYPE REG_SZ
#define REGSTR_VAL_SHOWFOCUS_DEF TEXT("no")

#define REGSTR_VAL_LOADIMAGES TEXT("Display Inline Images")
#define REGSTR_VAL_PLAYSOUNDS TEXT("Play_Background_Sounds")
#define REGSTR_VAL_PLAYVIDEOS TEXT("Display Inline Videos")
#define REGSTR_VAL_ANCHORUNDERLINE TEXT("Anchor Underline")
#define REGSTR_VAL_USEDLGCOLORS TEXT("Use_DlgBox_Colors")
#define REGSTR_VAL_CHECKASSOC TEXT("Check_Associations")
#define REGSTR_VAL_SHOWFULLURLS TEXT("Show_FullURL")
#define REGSTR_VAL_AUTOSEARCH TEXT("Do404Search")
#define REGSTR_VAL_AUTONAVIGATE TEXT("SearchForExtensions")
#define REGSTR_VAL_HTTP_ERRORS TEXT("Friendly http errors")

#define REGSTR_VAL_PAGETRANSITIONS TEXT("Page_Transitions")
#define REGSTR_VAL_PAGETRANSITIONS_DEF TRUE

#define REGSTR_VAL_USEIBAR TEXT("UseBar")

#define SZ_IE_SETTINGS "Settings"
#define REGSTR_PATH_IE_SETTINGS TSZIEPATH TEXT("\\") TEXT(SZ_IE_SETTINGS)
#define REGSTR_KEY_IE_SETTINGS TEXT(SZ_IE_SETTINGS)

#define REGSTR_VAL_IE_CUSTOMCOLORS TEXT("Custom Colors")
#define REGSTR_VAL_IE_CUSTOMCOLORS_TYPE REG_BINARY

#define REGSTR_VAL_ANCHORCOLOR TEXT("Anchor Color")
#define REGSTR_VAL_ANCHORCOLORVISITED TEXT("Anchor Color Visited")
#define REGSTR_VAL_BACKGROUNDCOLOR TEXT("Background Color")
#define REGSTR_VAL_TEXTCOLOR TEXT("Text Color")
#define REGSTR_VAL_ANCHORCOLORHOVER TEXT("Anchor Color Hover")
#define REGSTR_VAL_USEHOVERCOLOR TEXT("Use Anchor Hover Color")

#define SZ_IE_SECURITY "Security"
#define REGSTR_PATH_IE_SECURITY TSZIEPATH TEXT("\\") TEXT(SZ_IE_SECURITY)
#define REGSTR_KEY_IE_SECURITY TEXT(SZ_IE_SECURITY)

#define REGSTR_VAL_SAFETYWARNINGLEVEL TEXT("Safety Warning Level")

#define SZ_IE_DEFAULT_HTML_EDITOR "Default HTML Editor"
#define REGSTR_PATH_DEFAULT_HTML_EDITOR TSZIEPATH TEXT("\\") TEXT(SZ_IE_DEFAULT_HTML_EDITOR)
#define REGSTR_KEY_DEFAULT_HTML_EDITOR TEXT(SZ_IE_DEFAULT_HTML_EDITOR)

#define REGSTR_PATH_AUTOCOMPLETE TSZWINCURVERPATH TEXT("\\Explorer\\AutoComplete")
#define REGSTR_VAL_USEAUTOAPPEND TEXT("Append Completion")
#define REGSTR_VAL_USEAUTOSUGGEST TEXT("AutoSuggest")

#define REGSTR_VAL_USEAUTOCOMPLETE TEXT("Use AutoComplete")

#define SZ_IE_IBAR "Bar"
#define TSZIBARPATH TSZIEPATH TEXT("\\") TEXT(SZ_IE_IBAR)
#define REGSTR_PATH_IBAR TSZIBARPATH
#define REGSTR_KEY_IBAR TEXT(SZ_IE_IBAR)

#define SZ_IE_IBAR_BANDS "Bands"
#define REGSTR_PATH_IBAR_BANDS TSZIBARPATH TEXT("\\") TEXT(SZ_IE_IBAR_BANDS)
#define REGSTR_KEY_IBAR_BANDS TEXT(SZ_IE_IBAR_BANDS)

#define REGSTR_PATH_INTERNETSETTINGS TSZWININETPATH
#define REGSTR_PATH_INTERNET_SETTINGS REGSTR_PATH_INTERNETSETTINGS

#define REGSTR_VAL_USERAGENT TEXT("User Agent")

#define REGSTR_PATH_INTERNET_LAN_SETTINGS REGSTR_PATH_INTERNETSETTINGS TEXT("\\LAN")

#define REGSTR_VAL_INTERNETENTRY TEXT("InternetProfile")
#define REGSTR_VAL_INTERNETPROFILE REGSTR_VAL_INTERNETENTRY

#define REGSTR_VAL_INTERNETENTRYBKUP TEXT("BackupInternetProfile")

#define REGSTR_VAL_CODEDOWNLOAD TEXT("Code Download")
#define REGSTR_VAL_CODEDOWNLOAD_DEF TEXT("yes")
#define REGSTR_VAL_CODEDOWNLOAD_TYPE REG_SZ

#define REGSTR_PATH_INETCPL_RESTRICTIONS TEXT("Software\\Policies\\Microsoft\\Internet Explorer\\Control Panel")

#define REGSTR_VAL_INETCPL_GENERALTAB TEXT("GeneralTab")
#define REGSTR_VAL_INETCPL_SECURITYTAB TEXT("SecurityTab")
#define REGSTR_VAL_INETCPL_CONTENTTAB TEXT("ContentTab")
#define REGSTR_VAL_INETCPL_CONNECTIONSTAB TEXT("ConnectionsTab")
#define REGSTR_VAL_INETCPL_PROGRAMSTAB TEXT("ProgramsTab")
#define REGSTR_VAL_INETCPL_ADVANCEDTAB TEXT("AdvancedTab")
#define REGSTR_VAL_INETCPL_PRIVACYTAB TEXT("PrivacyTab")

#define REGSTR_VAL_INETCPL_IEAK TEXT("IEAKContext")

#define REGSTR_PATH_CACHE REGSTR_PATH_INTERNETSETTINGS TEXT("\\Cache")

#define REGSTR_PATH_CACHE_PATHS REGSTR_PATH_CACHE TEXT("\\Paths")

#define REGSTR_PATH_EXTENSIBLE_CACHE REGSTR_PATH_CACHE TEXT("\\Extensible Cache")

#define REGSTR_PATH_TRACKING REGSTR_PATH_EXTENSIBLE_CACHE TEXT("\\Log")

#define REGSTR_PATH_CACHE_SPECIAL_PATHS REGSTR_PATH_CACHE TEXT("Special Paths")

#define REGSTR_VAL_DIRECTORY TEXT("Directory")
#define REGSTR_VAL_DIRECTORY_TYPE REG_EXPAND_SZ

#define REGSTR_VAL_NEWDIRECTORY TEXT("NewDirectory")
#define REGSTR_VAL_NEWDIRECTORY_TYPE REG_EXPAND_SZ

#define REGSTR_VAL_CACHEPREFIX TEXT("CachePrefix")
#define REGSTR_VAL_CACHEPREFIX_TYPE REG_SZ

#define REGSTR_PATH_URLHISTORY REGSTR_PATH_INTERNETSETTINGS TEXT("\\Url History")

#define REGSTR_PATH_SUBSCRIPTION REGSTR_PATH_INTERNETSETTINGS TEXT("\\Subscription Folder")

#define SZ_IE_SEARCHSTRINGS "UrlTemplate"
#define REGSTR_PATH_SEARCHSTRINGS REGSTR_PATH_MAIN TEXT("\\") TEXT(SZ_IE_SEARCHSTRINGS)
#define REGSTR_KEY_SEARCHSTRINGS TEXT(SZ_IE_SEARCHSTRINGS)

#define MAX_SEARCH_FORMAT_STRING 255

#define SZ_IE_THRESHOLDS "ErrorThresholds"
#define REGSTR_PATH_THRESHOLDS REGSTR_PATH_MAIN TEXT("\\") TEXT(SZ_IE_THRESHOLDS)

#define REGSTR_VAL_ACCESSMEDIUM TEXT("AccessMedium")

#define REGSTR_VAL_ACCESSTYPE TEXT("AccessType")

#define REGSTR_VAL_AUTODIALDLLNAME TEXT("AutodialDllName")
#define REGSTR_VAL_AUTODIALFCNNAME TEXT("AutodialFcnName")

#define REGSTR_VAL_AUTODIAL_MONITORCLASSNAME TEXT("MS_AutodialMonitor")
#define REGSTR_VAL_AUTODIAL_TRYONLYONCE TEXT("TryAutodialOnce")

#define REGSTR_PATH_REMOTEACCESS TEXT("RemoteAccess")
#define REGSTR_PATH_REMOTEACESS REGSTR_PATH_REMOTEACCESS

#define REGSTR_PATH_RNACOMPONENT TSZWINCURVERPATH TEXT("\\Setup\\OptionalComponents\\RNA")
#define REGSTR_VAL_RNAINSTALLED TEXT("Installed")

#define REGSTR_VAL_ENABLEAUTODIAL TEXT("EnableAutodial")
#define REGSTR_VAL_ENABLEUNATTENDED TEXT("EnableUnattended")
#define REGSTR_VAL_NONETAUTODIAL TEXT("NoNetAutodial")

#define REGSTR_VAL_REDIALATTEMPTS TEXT("RedialAttempts")
#define REGSTR_VAL_REDIALINTERVAL TEXT("RedialWait")

#define REGSTR_VAL_ENABLEAUTODIALDISCONNECT TEXT("EnableAutodisconnect")
#define REGSTR_VAL_ENABLEAUTODISCONNECT REGSTR_VAL_ENABLEAUTODIALDISCONNECT
#define REGSTR_VAL_ENABLEEXITDISCONNECT TEXT("EnableExitDisconnect")

#define REGSTR_VAL_ENABLESECURITYCHECK TEXT("EnableSecurityCheck")

#define REGSTR_VAL_COVEREXCLUDE TEXT("CoverExclude")

#define REGSTR_VAL_DISCONNECTIDLETIME TEXT("DisconnectIdleTime")

#define REGSTR_PATH_MOSDISCONNECT TSZMICROSOFTPATH TEXT("\\MOS\\Preferences")
#define REGSTR_VAL_MOSDISCONNECT TEXT("DisconnectTimeout")

#define REGSTR_VAL_PROXYENABLE TEXT("ProxyEnable")
#define REGSTR_VAL_PROXYSERVER TEXT("ProxyServer")
#define REGSTR_VAL_PROXYOVERRIDE TEXT("ProxyOverride")
#define REGSTR_VAL_BYPASSAUTOCONFIG TEXT("BypassAutoconfig")

#define SZTRUSTWARNLEVEL "Trust Warning Level"
#define REGSTR_KEY_TRUSTWARNINGLEVEL TSZWININETPATH TEXT(SZTRUSTWARNLEVEL)
#define REGSTR_VAL_TRUSTWARNINGLEVEL TEXT(SZTRUSTWARNLEVEL)
#define REGSTR_VAL_TRUSTWARNINGLEVEL_TYPE REG_SZ
#define REGSTR_VAL_TRUSTWARNINGLEVEL_HIGH TEXT("High")
#define REGSTR_VAL_TRUSTWARNINGLEVEL_MED TEXT("Medium")
#define REGSTR_VAL_TRUSTWARNINGLEVEL_LOW TEXT("No Security")

#define REGSTR_VAL_SECURITYWARNONSEND TEXT("WarnOnPost")
#define REGSTR_VAL_SECURITYWARNONSEND_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONSEND_DEF TRUE

#define REGSTR_VAL_SECURITYWARNONSENDALWAYS TEXT("WarnAlwaysOnPost")
#define REGSTR_VAL_SECURITYWARNONSENDALWAYS_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF TRUE

#define REGSTR_VAL_SECURITYWARNONVIEW TEXT("WarnOnView")
#define REGSTR_VAL_SECURITYWARNONVIEW_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONVIEW_DEF TRUE

#define REGSTR_VAL_SECURITYALLOWCOOKIES TEXT("AllowCookies")
#define REGSTR_VAL_SECURITYALLOWCOOKIES_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYALLOWCOOKIES_DEF TRUE

#define REGSTR_VAL_SECURITYWARNONZONECROSSING TEXT("WarnOnZoneCrossing")
#define REGSTR_VAL_SECURITYWARNONZONECROSSING_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF TRUE

#define REGSTR_VAL_SECURITYWARNONBADCERTVIEWING TEXT("WarnOnBadCertRecving")
#define REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF TRUE

#define REGSTR_VAL_SECURITYWARNONBADCERTSENDING TEXT("WarnOnBadCertSending")
#define REGSTR_VAL_SECURITYWARNONBADCERTSENDING_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF TRUE

#define REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES TEXT("DisableCachingOfSSLPages")
#define REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_TYPE REG_DWORD
#define REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF FALSE

#define REGSTR_VAL_SECURITYACTIVEX TEXT("Security_RunActiveXControls")
#define REGSTR_VAL_SECURITYACTIVEX_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYACTIVEX_DEF TRUE

#define REGSTR_VAL_SECURITYACTICEXSCRIPTS TEXT("Security_RunScripts")
#define REGSTR_VAL_SECURITYACTICEXSCRIPTS_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF TRUE

#define REGSTR_VAL_SECURITYJAVA TEXT("Security_RunJavaApplets")
#define REGSTR_VAL_SECURITYJAVA_TYPE REG_BINARY
#define REGSTR_VAL_SECURITYJAVA_DEF TRUE

#define SZJAVAVMPATH "\\Java VM"
#define REGSTR_PATH_JAVAVM TSZMICROSOFTPATH TEXT(SZJAVAVMPATH)

#define REGSTR_VAL_JAVAJIT TEXT("EnableJIT")
#define REGSTR_VAL_JAVAJIT_TYPE REG_DWORD
#define REGSTR_VAL_JAVAJIT_DEF FALSE

#define REGSTR_VAL_JAVALOGGING TEXT("EnableLogging")
#define REGSTR_VAL_JAVALOGGING_TYPE REG_DWORD
#define REGSTR_VAL_JAVALOGGING_DEF FALSE

#define SZTOOLBAR "\\Toolbar"
#define TSZTOOLBAR TEXT(SZTOOLBAR)
#define REGSTR_PATH_TOOLBAR TSZIEPATH TEXT(SZTOOLBAR)
#define REGSTR_KEY_QUICKLINKS TSZIEPATH TSZTOOLBAR TEXT("\\Links")
#define REGSTR_VAL_DAYSTOKEEP TEXT("DaysToKeep")

#define SZNOTEXT "NoText"
#define REGSTR_VAL_NOTEXT TEXT(SZNOTEXT)
#define REGSTR_KEY_NOTEXT TSZIEPATH TSZTOOLBAR TEXT("\\") TEXT(SZNOTEXT)
#define SZVISIBLE "VisibleBands"
#define REGSTR_VAL_VISIBLE TEXT(SZVISIBLE)
#define REGSTR_KEY_VISIBLE TSZIEPATH TSZTOOLBAR TEXT("\\") TEXT(SZVISIBLE)

#define REGSTR_VAL_VISIBLEBANDS TEXT("VisibleBands")
#define REGSTR_VAL_VISIBLEBANDS_TYPE REG_DWORD
#define REGSTR_VAL_VISIBLEBANDS_DEF 0x7
#define TOOLSBAND 0x1
#define ADDRESSBAND 0x2
#define LINKSBAND 0x4

#define SZBACKBITMAP "BackBitmap"
#define REGSTR_VAL_BACKBITMAP TEXT("BackBitmap")
#define REGSTR_VAL_BACKBITMAP_TYPE REG_SZ

#define REGSTR_KEY_BACKBITMAP TSZIEPATH TSZTOOLBAR TEXT("\\") TEXT(SZBACKBITMAP)

#define TSZSCHANNELPATH TEXT("SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL")
#define TSZSCHANNELPROTOCOLSPATH TSZSCHANNELPATH TEXT("\\Protocols")

#define REGSTR_PATH_PCT1 TSZSCHANNELPROTOCOLSPATH TEXT("\\PCT 1.0\\Client")
#define REGSTR_PATH_SSL2 TSZSCHANNELPROTOCOLSPATH TEXT("\\SSL 2.0\\Client")
#define REGSTR_PATH_SSL3 TSZSCHANNELPROTOCOLSPATH TEXT("\\SSL 3.0\\Client")
#define REGSTR_PATH_UNIHELLO TSZSCHANNELPROTOCOLSPATH TEXT("\\Multi-Protocol Unified Hello\\Client")

#define REGSTR_VAL_SCHANNELENABLEPROTOCOL TEXT("Enabled")
#define REGSTR_VAL_SCHANNELENABLEPROTOCOL_TYPE REG_DWORD
#define REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF TRUE

#define TSZINTERNETCLIENTSPATH TEXT("Software\\Clients")
#define REGSTR_PATH_MAILCLIENTS TSZINTERNETCLIENTSPATH TEXT("\\Mail")
#define REGSTR_PATH_NEWSCLIENTS TSZINTERNETCLIENTSPATH TEXT("\\News")
#define REGSTR_PATH_CALENDARCLIENTS TSZINTERNETCLIENTSPATH TEXT("\\Calendar")
#define REGSTR_PATH_CONTACTCLIENTS TSZINTERNETCLIENTSPATH TEXT("\\Contacts")
#define REGSTR_PATH_CALLCLIENTS TSZINTERNETCLIENTSPATH TEXT("\\Internet Call")

#define TSZPROTOCOLSPATH TEXT("Protocols\\")

#define TSZMAILTOPROTOCOL TEXT("mailto")
#define TSZNEWSPROTOCOL TEXT("news")
#define TSZCALLTOPROTOCOL TEXT("callto")
#define TSZLDAPPROTOCOL TEXT("ldap")
#define TSZCALENDARPROTOCOL TEXT("unk")

#define REGSTR_PATH_INTERNATIONAL TSZIEPATH TEXT("\\International")

#define REGSTR_PATH_INTERNATIONAL_SCRIPTS TSZIEPATH TEXT("\\International\\Scripts")

#define REGSTR_VAL_DEFAULT_CODEPAGE TEXT("Default_CodePage")
#define REGSTR_VAL_DEFAULT_CODEPAGE_TYPE REG_SZ

#define REGSTR_VAL_DEFAULT_SCRIPT TEXT("Default_Script")
#define REGSTR_VAL_DEFAULT_SCRIPT_TYPE REG_SZ

#define REGSTR_VAL_ACCEPT_LANGUAGE TEXT("AcceptLanguage")
#define REGSTR_VAL_ACCETP_LANGUAGE_TYPE REG_SZ

#define REGSTR_VAL_FONT_SCRIPTS TEXT("Scripts")
#define REGSTR_VAL_FONT_SCRIPT TEXT("Script")
#define REGSTR_VAL_FONT_SCRIPT_TYPE REG_SZ

#define REGSTR_VAL_FONT_SCRIPT_NAME TEXT("Script")
#define REGSTR_VAL_FONT_SCRIPT_NAME_TYPE REG_SZ

#define REGSTR_VAL_DEF_ENCODING TEXT("Default_Encoding")
#define REGSTR_VAL_DEF_ENCODING_TYPE REG_SZ

#define REGSTR_VAL_DEF_INETENCODING TEXT("Default_InternetEncoding")
#define REGSTR_VAL_DEF_INETENCODING_TYPE REG_DWORD

#define REGSTR_VAL_FIXED_FONT TEXT("IEFixedFontName")
#define REGSTR_VAL_FIXED_FONT_TYPE REG_SZ

#define REGSTR_VAL_SCRIPT_FIXED_FONT TEXT("IEFixedFontName")
#define REGSTR_VAL_SCRIPT_FIXED_FONT_TYPE REG_SZ

#define REGSTR_VAL_PROP_FONT TEXT("IEPropFontName")
#define REGSTR_VAL_PROP_FONT_TYPE REG_SZ

#define REGSTR_VAL_SCRIPT_PROP_FONT TEXT("IEPropFontName")
#define REGSTR_VAL_SCRIPT_PROP_FONT_TYPE REG_SZ

#define REGSTR_VAL_FONT_SIZE TEXT("IEFontSize")
#define REGSTR_VAL_FONT_SIZE_TYPE REG_BINARY
#define REGSTR_VAL_FONT_SIZE_DEF 2

#define REGSTR_VAL_AUTODETECT TEXT("AutoDetect")
#define REGSTR_VAL_AUTODETECT_TYPE REG_SZ

#define REGSTR_PATH_MIME_DATABASE TEXT("MIME\\Database")
#define REGSTR_KEY_MIME_DATABASE_CHARSET REGSTR_PATH_MIME_DATABASE TEXT("\\Charset")
#define REGSTR_KEY_MIME_DATABASE_CODEPAGE REGSTR_PATH_MIME_DATABASE TEXT("\\CodePage")
#define REGSTR_KEY_MIME_DATABASE_RFC1766 REGSTR_PATH_MIME_DATABASE TEXT("\\Rfc1766")

#define REGSTR_VAL_CODEPAGE TEXT("CodePage")
#define REGSTR_VAL_CODEPAGE_TYPE REG_DWORD

#define REGSTR_VAL_INETENCODING TEXT("InternetEncoding")
#define REGSTR_VAL_INETENCODING_TYPE REG_DWORD

#define REGSTR_VAL_FAMILY TEXT("Family")
#define REGSTR_VAL_FAMILY_TYPE REG_DWORD

#define REGSTR_VAL_LEVEL TEXT("Level")
#define REGSTR_VAL_LEVEL_TYPE REG_DWORD

#define REGSTR_VAL_ALIASTO TEXT("AliasForCharset")
#define REGSTR_VAL_ALIASTO_TYPE REG_SZ

#define REGSTR_VAL_ENCODENAME TEXT("EncodingName")
#define REGSTR_VAL_ENCODENAME_TYPE REG_SZ

#define REGSTR_VAL_DESCRIPTION TEXT("Description")
#define REGSTR_VAL_DESCRIPTION_TYPE REG_SZ

#define REGSTR_VAL_WEBCHARSET TEXT("WebCharset")
#define REGSTR_VAL_WEBCHARSET_TYPE REG_SZ

#define REGSTR_VAL_BODYCHARSET TEXT("BodyCharset")
#define REGSTR_VAL_BODYCHARSET_TYPE REG_SZ

#define REGSTR_VAL_HEADERCHARSET TEXT("HeaderCharset")
#define REGSTR_VAL_HEADERCHARSET_TYPE REG_SZ

#define REGSTR_VAL_FIXEDWIDTHFONT TEXT("FixedWidthFont")
#define REGSTR_VAL_FIXEDWIDTHFONT_TYPE REG_SZ

#define REGSTR_VAL_PROPORTIONALFONT TEXT("ProportionalFont")
#define REGSTR_VAL_PROPOPRTIONALFONT_TYPE REG_SZ

#define REGSTR_VAL_PRIVCONVERTER TEXT("PrivConverter")
#define REGSTR_VAL_PRIVCONVERTER_TYPE REG_SZ
#endif
                                                                                                                                                                                      usr/share/mingw-w64/include/inetsdk.h                                                               0100644 0000000 0000000 00000001520 12404413021 016141  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __inetsdk_h__
#define __inetsdk_h__

#include "comcat.h"
#include "ocidl.h"
#include "docobj.h"
#include "hlink.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

  extern RPC_IF_HANDLE __MIDL_itf_inetsdk_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_inetsdk_0000_v0_0_s_ifspec;

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                usr/share/mingw-w64/include/initguid.h                                                              0100644 0000000 0000000 00000000377 12404413021 016325  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#define INITGUID

#include <guiddef.h>
                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/initoid.h                                                               0100644 0000000 0000000 00000002445 12404413021 016146  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#define MAPI_PREFIX 0x2A,0x86,0x48,0x86,0xf7,0x14,0x03

#undef DEFINE_OID_1
#undef DEFINE_OID_2
#undef DEFINE_OID_3
#undef DEFINE_OID_4

#ifdef __cplusplus
#define DEFINE_OID_1(name,b0,b1) EXTERN_C const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1 }
#define DEFINE_OID_2(name,b0,b1,b2) EXTERN_C const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2 }
#define DEFINE_OID_3(name,b0,b1,b2,b3) EXTERN_C const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2,b3 }
#define DEFINE_OID_4(name,b0,b1,b2,b3,b4) EXTERN_C const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2,b3,b4 }
#else
#define DEFINE_OID_1(name,b0,b1) const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1 }
#define DEFINE_OID_2(name,b0,b1,b2) const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2 }
#define DEFINE_OID_3(name,b0,b1,b2,b3) const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2,b3 }
#define DEFINE_OID_4(name,b0,b1,b2,b3,b4) const BYTE __based(__segname("_CODE")) name[] = { MAPI_PREFIX,b0,b1,b2,b3,b4 }
#endif
                                                                                                                                                                                                                           usr/share/mingw-w64/include/inputscope.h                                                            0100644 0000000 0000000 00000021513 12404413021 016675  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*** Autogenerated by WIDL 1.5.25 from include/inputscope.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __inputscope_h__
#define __inputscope_h__

/* Forward declarations */

#ifndef __ITfInputScope_FWD_DEFINED__
#define __ITfInputScope_FWD_DEFINED__
typedef interface ITfInputScope ITfInputScope;
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum __WIDL_inputscope_generated_name_00000000 {
    IS_DEFAULT = 0,
    IS_URL = 1,
    IS_FILE_FULLFILEPATH = 2,
    IS_FILE_FILENAME = 3,
    IS_EMAIL_USERNAME = 4,
    IS_EMAIL_SMTPEMAILADDRESS = 5,
    IS_LOGINNAME = 6,
    IS_PERSONALNAME_FULLNAME = 7,
    IS_PERSONALNAME_PREFIX = 8,
    IS_PERSONALNAME_GIVENNAME = 9,
    IS_PERSONALNAME_MIDDLENAME = 10,
    IS_PERSONALNAME_SURNAME = 11,
    IS_PERSONALNAME_SUFFIX = 12,
    IS_ADDRESS_FULLPOSTALADDRESS = 13,
    IS_ADDRESS_POSTALCODE = 14,
    IS_ADDRESS_STREET = 15,
    IS_ADDRESS_STATEORPROVINCE = 16,
    IS_ADDRESS_CITY = 17,
    IS_ADDRESS_COUNTRYNAME = 18,
    IS_ADDRESS_COUNTRYSHORTNAME = 19,
    IS_CURRENCY_AMOUNTANDSYMBOL = 20,
    IS_CURRENCY_AMOUNT = 21,
    IS_DATE_FULLDATE = 22,
    IS_DATE_MONTH = 23,
    IS_DATE_DAY = 24,
    IS_DATE_YEAR = 25,
    IS_DATE_MONTHNAME = 26,
    IS_DATE_DAYNAME = 27,
    IS_DIGITS = 28,
    IS_NUMBER = 29,
    IS_ONECHAR = 30,
    IS_PASSWORD = 31,
    IS_TELEPHONE_FULLTELEPHONENUMBER = 32,
    IS_TELEPHONE_COUNTRYCODE = 33,
    IS_TELEPHONE_AREACODE = 34,
    IS_TELEPHONE_LOCALNUMBER = 35,
    IS_TIME_FULLTIME = 36,
    IS_TIME_HOUR = 37,
    IS_TIME_MINORSEC = 38,
    IS_NUMBER_FULLWIDTH = 39,
    IS_ALPHANUMERIC_HALFWIDTH = 40,
    IS_ALPHANUMERIC_FULLWIDTH = 41,
    IS_CURRENCY_CHINESE = 42,
    IS_BOPOMOFO = 43,
    IS_HIRAGANA = 44,
    IS_KATAKANA_HALFWIDTH = 45,
    IS_KATAKANA_FULLWIDTH = 46,
    IS_HANJA = 47,
    IS_HANGUL_HALFWIDTH = 48,
    IS_HANGUL_FULLWIDTH = 49,
    IS_SEARCH = 50,
    IS_FORMULA = 51,
    IS_SEARCH_INCREMENTAL = 52,
    IS_CHINESE_HALFWIDTH = 53,
    IS_CHINESE_FULLWIDTH = 54,
    IS_NATIVE_SCRIPT = 55,
    IS_PHRASELIST = -1,
    IS_REGULAREXPRESSION = -2,
    IS_SRGS = -3,
    IS_XML = -4,
    IS_ENUMSTRING = -5
} InputScope;
HRESULT WINAPI SetInputScope(HWND hwnd,InputScope inputscope);
HRESULT WINAPI SetInputScopes(HWND hwnd,const InputScope *pInputScopes,UINT cInputScopes,WCHAR **ppszPhraseList,UINT cPhrases,WCHAR *pszRegExp,WCHAR *pszSRGS);
HRESULT WINAPI SetInputScopeXML(HWND hwnd,WCHAR *pszXML);
DEFINE_GUID(GUID_PROP_INPUTSCOPE,0x1713dd5a,0x68e7,0x4a5b,0x9a,0xf6,0x59,0x2a,0x59,0x5c,0x77,0x8d);
/*****************************************************************************
 * ITfInputScope interface
 */
#ifndef __ITfInputScope_INTERFACE_DEFINED__
#define __ITfInputScope_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITfInputScope, 0xfde1eaee, 0x6924, 0x4cdf, 0x91,0xe7, 0xda,0x38,0xcf,0xf5,0x55,0x9d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fde1eaee-6924-4cdf-91e7-da38cff5559d")
ITfInputScope : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetInputScopes(
        InputScope **pprgInputScopes,
        UINT *pcCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPhrase(
        BSTR **ppbstrPhrases,
        UINT *pcCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRegularExpression(
        BSTR *pbstrRegExp) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSRGS(
        BSTR *pbstrSRGS) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetXML(
        BSTR *pbstrXML) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITfInputScope, 0xfde1eaee, 0x6924, 0x4cdf, 0x91,0xe7, 0xda,0x38,0xcf,0xf5,0x55,0x9d)
#endif
#else
typedef struct ITfInputScopeVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITfInputScope* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITfInputScope* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITfInputScope* This);

    /*** ITfInputScope methods ***/
    HRESULT (STDMETHODCALLTYPE *GetInputScopes)(
        ITfInputScope* This,
        InputScope **pprgInputScopes,
        UINT *pcCount);

    HRESULT (STDMETHODCALLTYPE *GetPhrase)(
        ITfInputScope* This,
        BSTR **ppbstrPhrases,
        UINT *pcCount);

    HRESULT (STDMETHODCALLTYPE *GetRegularExpression)(
        ITfInputScope* This,
        BSTR *pbstrRegExp);

    HRESULT (STDMETHODCALLTYPE *GetSRGS)(
        ITfInputScope* This,
        BSTR *pbstrSRGS);

    HRESULT (STDMETHODCALLTYPE *GetXML)(
        ITfInputScope* This,
        BSTR *pbstrXML);

    END_INTERFACE
} ITfInputScopeVtbl;
interface ITfInputScope {
    CONST_VTBL ITfInputScopeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITfInputScope_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITfInputScope_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITfInputScope_Release(This) (This)->lpVtbl->Release(This)
/*** ITfInputScope methods ***/
#define ITfInputScope_GetInputScopes(This,pprgInputScopes,pcCount) (This)->lpVtbl->GetInputScopes(This,pprgInputScopes,pcCount)
#define ITfInputScope_GetPhrase(This,ppbstrPhrases,pcCount) (This)->lpVtbl->GetPhrase(This,ppbstrPhrases,pcCount)
#define ITfInputScope_GetRegularExpression(This,pbstrRegExp) (This)->lpVtbl->GetRegularExpression(This,pbstrRegExp)
#define ITfInputScope_GetSRGS(This,pbstrSRGS) (This)->lpVtbl->GetSRGS(This,pbstrSRGS)
#define ITfInputScope_GetXML(This,pbstrXML) (This)->lpVtbl->GetXML(This,pbstrXML)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITfInputScope_QueryInterface(ITfInputScope* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITfInputScope_AddRef(ITfInputScope* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITfInputScope_Release(ITfInputScope* This) {
    return This->lpVtbl->Release(This);
}
/*** ITfInputScope methods ***/
static FORCEINLINE HRESULT ITfInputScope_GetInputScopes(ITfInputScope* This,InputScope **pprgInputScopes,UINT *pcCount) {
    return This->lpVtbl->GetInputScopes(This,pprgInputScopes,pcCount);
}
static FORCEINLINE HRESULT ITfInputScope_GetPhrase(ITfInputScope* This,BSTR **ppbstrPhrases,UINT *pcCount) {
    return This->lpVtbl->GetPhrase(This,ppbstrPhrases,pcCount);
}
static FORCEINLINE HRESULT ITfInputScope_GetRegularExpression(ITfInputScope* This,BSTR *pbstrRegExp) {
    return This->lpVtbl->GetRegularExpression(This,pbstrRegExp);
}
static FORCEINLINE HRESULT ITfInputScope_GetSRGS(ITfInputScope* This,BSTR *pbstrSRGS) {
    return This->lpVtbl->GetSRGS(This,pbstrSRGS);
}
static FORCEINLINE HRESULT ITfInputScope_GetXML(ITfInputScope* This,BSTR *pbstrXML) {
    return This->lpVtbl->GetXML(This,pbstrXML);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ITfInputScope_GetInputScopes_Proxy(
    ITfInputScope* This,
    InputScope **pprgInputScopes,
    UINT *pcCount);
void __RPC_STUB ITfInputScope_GetInputScopes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITfInputScope_GetPhrase_Proxy(
    ITfInputScope* This,
    BSTR **ppbstrPhrases,
    UINT *pcCount);
void __RPC_STUB ITfInputScope_GetPhrase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITfInputScope_GetRegularExpression_Proxy(
    ITfInputScope* This,
    BSTR *pbstrRegExp);
void __RPC_STUB ITfInputScope_GetRegularExpression_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITfInputScope_GetSRGS_Proxy(
    ITfInputScope* This,
    BSTR *pbstrSRGS);
void __RPC_STUB ITfInputScope_GetSRGS_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE ITfInputScope_GetXML_Proxy(
    ITfInputScope* This,
    BSTR *pbstrXML);
void __RPC_STUB ITfInputScope_GetXML_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ITfInputScope_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __inputscope_h__ */
                                                                                                                                                                                     usr/share/mingw-w64/include/inspectable.h                                                           0100644 0000000 0000000 00000013045 12404413021 016776  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*** Autogenerated by WIDL 1.6 from inspectable.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __inspectable_h__
#define __inspectable_h__

/* Forward declarations */

#ifndef __IInspectable_FWD_DEFINED__
#define __IInspectable_FWD_DEFINED__
typedef interface IInspectable IInspectable;
#endif

/* Headers for imported files */

#include <wtypes.h>
#include <hstring.h>
#include <unknwn.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum TrustLevel {
    BaseTrust = 0,
    PartialTrust = 1,
    FullTrust = 2
} TrustLevel;
/*****************************************************************************
 * IInspectable interface
 */
#ifndef __IInspectable_INTERFACE_DEFINED__
#define __IInspectable_INTERFACE_DEFINED__

DEFINE_GUID(IID_IInspectable, 0xaf86e2e0, 0xb12d, 0x4c6a, 0x9c,0x5a, 0xd7,0xaa,0x65,0x10,0x1e,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("af86e2e0-b12d-4c6a-9c5a-d7aa65101e90")
IInspectable : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetIids(
        ULONG *iidCount,
        IID **iids) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRuntimeClassName(
        HSTRING *className) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTrustLevel(
        TrustLevel *trustLevel) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IInspectable, 0xaf86e2e0, 0xb12d, 0x4c6a, 0x9c,0x5a, 0xd7,0xaa,0x65,0x10,0x1e,0x90)
#endif
#else
typedef struct IInspectableVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IInspectable* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IInspectable* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IInspectable* This);

    /*** IInspectable methods ***/
    HRESULT (STDMETHODCALLTYPE *GetIids)(
        IInspectable* This,
        ULONG *iidCount,
        IID **iids);

    HRESULT (STDMETHODCALLTYPE *GetRuntimeClassName)(
        IInspectable* This,
        HSTRING *className);

    HRESULT (STDMETHODCALLTYPE *GetTrustLevel)(
        IInspectable* This,
        TrustLevel *trustLevel);

    END_INTERFACE
} IInspectableVtbl;
interface IInspectable {
    CONST_VTBL IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IInspectable_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IInspectable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IInspectable_Release(This) (This)->lpVtbl->Release(This)
/*** IInspectable methods ***/
#define IInspectable_GetIids(This,iidCount,iids) (This)->lpVtbl->GetIids(This,iidCount,iids)
#define IInspectable_GetRuntimeClassName(This,className) (This)->lpVtbl->GetRuntimeClassName(This,className)
#define IInspectable_GetTrustLevel(This,trustLevel) (This)->lpVtbl->GetTrustLevel(This,trustLevel)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IInspectable_QueryInterface(IInspectable* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IInspectable_AddRef(IInspectable* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IInspectable_Release(IInspectable* This) {
    return This->lpVtbl->Release(This);
}
/*** IInspectable methods ***/
static FORCEINLINE HRESULT IInspectable_GetIids(IInspectable* This,ULONG *iidCount,IID **iids) {
    return This->lpVtbl->GetIids(This,iidCount,iids);
}
static FORCEINLINE HRESULT IInspectable_GetRuntimeClassName(IInspectable* This,HSTRING *className) {
    return This->lpVtbl->GetRuntimeClassName(This,className);
}
static FORCEINLINE HRESULT IInspectable_GetTrustLevel(IInspectable* This,TrustLevel *trustLevel) {
    return This->lpVtbl->GetTrustLevel(This,trustLevel);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IInspectable_GetIids_Proxy(
    IInspectable* This,
    ULONG *iidCount,
    IID **iids);
void __RPC_STUB IInspectable_GetIids_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IInspectable_GetRuntimeClassName_Proxy(
    IInspectable* This,
    HSTRING *className);
void __RPC_STUB IInspectable_GetRuntimeClassName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IInspectable_GetTrustLevel_Proxy(
    IInspectable* This,
    TrustLevel *trustLevel);
void __RPC_STUB IInspectable_GetTrustLevel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IInspectable_INTERFACE_DEFINED__ */


#if !defined (CINTERFACE) && defined (__cplusplus)
extern "C++" {
  template<typename T> void **IID_INS_ARGS_internal (T **p) {
    static_cast<IInspectable *> (*p);
    return reinterpret_cast<void **> (p);
  }
}

#define IID_INS_ARGS(P) __uuidof(**(P)), IID_INS_ARGS_internal(P)
#endif
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER HSTRING_UserSize     (ULONG *, ULONG, HSTRING *);
unsigned char * __RPC_USER HSTRING_UserMarshal  (ULONG *, unsigned char *, HSTRING *);
unsigned char * __RPC_USER HSTRING_UserUnmarshal(ULONG *, unsigned char *, HSTRING *);
void            __RPC_USER HSTRING_UserFree     (ULONG *, HSTRING *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __inspectable_h__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/share/mingw-w64/include/interlockedapi.h                                                        0100644 0000000 0000000 00000006007 12404413021 017502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#ifndef _INTERLOCKAPI_H_
#define _INTERLOCKAPI_H_

#include <apiset.h>
#include <apisetcconv.h>
#include <minwindef.h>

#ifdef __cplusplus
extern "C" {
#endif

#if !defined (NOWINBASEINTERLOCK) && !defined (_NTOS_)
#if !defined (__x86_64__) && !defined (__ia64__) && !defined (__arm__)
  WINBASEAPI LONG WINAPI InterlockedIncrement (LONG volatile *lpAddend);
  WINBASEAPI LONG WINAPI InterlockedDecrement (LONG volatile *lpAddend);
  WINBASEAPI LONG WINAPI InterlockedExchange (LONG volatile *Target, LONG Value);
  WINBASEAPI LONG WINAPI InterlockedExchangeAdd (LONG volatile *Addend, LONG Value);
  WINBASEAPI LONG WINAPI InterlockedCompareExchange (LONG volatile *Destination, LONG Exchange, LONG Comperand);
  WINBASEAPI LONGLONG WINAPI InterlockedCompareExchange64 (LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand);

#define InterlockedExchangePointer(Target, Value) (PVOID)InterlockedExchange ((PLONG) (Target),((LONG) (LONG_PTR) (Value)))
#define InterlockedExchangePointerNoFence InterlockedExchangePointer

#if defined(__MINGW_INTRIN_INLINE) && (defined(__GNUC__) && (__MINGW_GNUC_PREREQ(4, 9) || (__MINGW_GNUC_PREREQ(4, 8) && __GNUC_PATCHLEVEL__ >= 2)))
  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedIncrement(LONG volatile *lpAddend) {
    return _InterlockedIncrement(lpAddend);
  }
  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedDecrement(LONG volatile *lpAddend) {
    return _InterlockedDecrement(lpAddend);
  }
  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedExchange(LONG volatile *Target, LONG Value) {
    return _InterlockedExchange(Target, Value);
  }
  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedExchangeAdd(LONG volatile *Addend, LONG Value) {
    return _InterlockedExchangeAdd(Addend, Value);
  }
  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedCompareExchange(LONG volatile *Destination, LONG Exchange, LONG Comperand) {
    return _InterlockedCompareExchange(Destination, Exchange, Comperand);
  }
  __MINGW_INTRIN_INLINE LONGLONG WINAPI InterlockedCompareExchange64(LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand) {
    return _InterlockedCompareExchange64(Destination, Exchange, Comperand);
  }
#endif
#endif

#if defined (_SLIST_HEADER_) && !defined (_NTOSP_)
  WINBASEAPI VOID WINAPI InitializeSListHead (PSLIST_HEADER ListHead);
  WINBASEAPI PSLIST_ENTRY WINAPI InterlockedPopEntrySList (PSLIST_HEADER ListHead);
  WINBASEAPI PSLIST_ENTRY WINAPI InterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
  WINBASEAPI PSLIST_ENTRY WINAPI InterlockedFlushSList (PSLIST_HEADER ListHead);
  WINBASEAPI USHORT WINAPI QueryDepthSList (PSLIST_HEADER ListHead);

#if NTDDI_VERSION >= 0x06020000
#define InterlockedPushListSList InterlockedPushListSListEx

  WINBASEAPI PSLIST_ENTRY WINAPI InterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count);
#endif
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/mingw-w64/include/intrin.h                                                                0100644 0000000 0000000 00000270317 12404413015 016022  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

/* The purpose of this file is to provide support for MSVC's intrinsics (what gcc calls
   Builtins) in gcc.  In MSVC, there are several features for intrinsics:

   - Intrinsics can either be implemented inline (via the compiler), or implemented as functions.
   - You can specify which approach you prefer either globally (via compile switch /Oi) or
     on a function by function basis via pragmas.
   - Before you can use any of the intrinsics, they must be declared via a prototype.  For
     whatever reason, MS has decided to put all the intrinsics in one file (intrin.h) AND
     to put duplicate copies of some of these prototypes in various platform sdk headers.

   In gcc, this is implemented as follows:

   - The inline implementations for the intrinsics are located in intrin-impl.h.  This file
     is included by intrin.h, as well as various platform sdk headers.
   - Including intrin.h will create definitions/implementations for all available MSVC intrinsics.
   - Including various platforms sdk headers will only include the intrinsics defined in that
     header.  As of this writing, only winnt.h and winbase.h use this approach.
   - If an application defines its own prototypes for intrinsics (ie without including any
     platform header or intrin.h), the symbols will be resolved from the library.  Since this
     will likely result in the code being invoked via 'call', performance may be degraded.

   If you wish to implement intrinsic functions that are defined in intrin.h but are not
   yet implemented in mingw-w64, see the comments at the top of intrin-impl.h.
*/

#ifndef __INTRIN_H_
#define __INTRIN_H_
#ifndef RC_INVOKED

#include <crtdefs.h>
#ifndef __CYGWIN__
#include <setjmp.h>
#endif
#include <stddef.h>
#include <psdk_inc/intrin-impl.h>

/*
 * Intrins shiped with GCC conflict with our versions in C++, because they don't use extern "C"
 * linkage while our variants use them. We try to work around this by including those headers
 * here wrapped in extern "C" block. It's still possible that those intrins will get default
 * C++ linkage (when GCC headers are explicitly included before intrin.h), but at least their
 * guards will prevent duplicated declarations and avoid conflicts.
 *
 * On GCC 4.9 we may always include those headers. On older GCCs, we may do it only if CPU
 * features used by them are enabled, so we need to check macros like __SSE__ or __MMX__ first.
 */
#if __MINGW_GNUC_PREREQ(4, 9)
#define __MINGW_FORCE_SYS_INTRINS
#endif

#if defined(__GNUC__) && \
   (defined(__i386__) || defined(__x86_64__))
  extern unsigned int __builtin_ia32_crc32qi (unsigned int, unsigned char);
  extern unsigned int __builtin_ia32_crc32hi (unsigned int, unsigned short);
  extern unsigned int __builtin_ia32_crc32si (unsigned int, unsigned int);
#ifndef _MM_MALLOC_H_INCLUDED
#define _MM_MALLOC_H_INCLUDED
#include <stdlib.h>
#include <errno.h>
/* Make sure _mm_malloc and _mm_free are defined.  */
#include <malloc.h>
#endif
#if defined(__cplusplus)
extern "C" {
#endif

#include <x86intrin.h>

#if defined(__cplusplus)
}
#endif

#endif

#ifndef __MINGW_FORCE_SYS_INTRINS
#ifndef __MMX__
typedef union __m64 { char v[7]; } __m64;
#endif
#ifndef __SSE__
typedef union __m128 { char v[16]; } __m128;
#endif
#ifndef __SSE2__
typedef union __m128d { char v[16]; } __m128d;
typedef union __m128i { char v[16]; } __m128i;
#endif
#endif

#ifndef WINAPI
#define WINAPI __stdcall
#endif

#if defined(__MMX__) || defined(__MINGW_FORCE_SYS_INTRINS)
#if defined(__cplusplus)
extern "C" {
#endif
#include <mmintrin.h>
#if defined(__cplusplus)
}
#endif
#endif

#if defined(__3dNOW__) || defined(__MINGW_FORCE_SYS_INTRINS)
#if defined(__cplusplus)
extern "C" {
#endif
#include <mm3dnow.h>
#if defined(__cplusplus)
}
#endif
#endif

/* NOTE: it's not included by MS version, but we do it to try work around C++/C linkage differences */
#if defined(__SSE__) || defined(__MINGW_FORCE_SYS_INTRINS)
#if defined(__cplusplus)
extern "C" {
#endif
#include <xmmintrin.h>
#if defined(__cplusplus)
}
#endif
#endif

#if defined(__SSE2__) || defined(__MINGW_FORCE_SYS_INTRINS)
#if defined(__cplusplus)
extern "C" {
#endif
#include <emmintrin.h>
#if defined(__cplusplus)
}
#endif
#endif

#if defined(__SSE3__) || defined(__MINGW_FORCE_SYS_INTRINS)
#if defined(__cplusplus)
extern "C" {
#endif
#include <pmmintrin.h>
#if defined(__cplusplus)
}
#endif
#endif

#if (defined(_X86_) && !defined(__x86_64))
#if defined(__cplusplus)
extern "C" {
#endif

#include <mm3dnow.h>

#if defined(__cplusplus)
}
#endif

#if defined(__cplusplus)
#include <dvec.h>
#include <fvec.h>
#include <ivec.h>
#endif
#endif

#define __MACHINEX64 __MACHINE
#define __MACHINEARMX __MACHINE
#define __MACHINECC __MACHINE
#define __MACHINECE __MACHINE
#define __MACHINEI __MACHINE
#define __MACHINEIA32 __MACHINE
#define __MACHINEX86X __MACHINE
#define __MACHINEX86X_NOX64 __MACHINE
#define __MACHINEX86X_NOIA64 __MACHINE
#define __MACHINEX86X_NOWIN64 __MACHINE
#define __MACHINEIA64 __MACHINE
#define __MACHINESA __MACHINE
#define __MACHINEIW64 __MACHINE
#define __MACHINEW64 __MACHINE

#define __MACHINE(X) X;
#define __MACHINEZ(X)

#if !(defined(_X86_) && !defined(__x86_64))
#undef __MACHINEIA32
#define __MACHINEIA32 __MACHINEZ
#endif

#if !(defined(_X86_) || defined(__x86_64) || defined(__ia64__))
#undef __MACHINEIW64
#define __MACHINEIW64 __MACHINEZ
#endif

#if !(__ia64__)
#undef __MACHINEIA64
#define __MACHINEIA64 __MACHINEZ
#endif

#if !(defined(__ia64__) || defined(__x86_64))
#undef __MACHINEW64
#define __MACHINEW64 __MACHINEZ
#endif

#if !(defined(_X86_) || defined(__x86_64))
#undef __MACHINEX86X
#define __MACHINEX86X __MACHINEZ
#endif

#if !(defined(_X86_)) || defined(__x86_64)
#undef __MACHINEX86X_NOX64
#define __MACHINEX86X_NOX64 __MACHINEZ
#endif

#if !(defined(_X86_) && !defined(__x86_64)) || __ia64__
#undef __MACHINEX86X_NOIA64
#define __MACHINEX86X_NOIA64 __MACHINEZ
#endif

#if !(defined(_X86_)) || defined(__x86_64) || defined(__ia64__)
#undef __MACHINEX86X_NOWIN64
#define __MACHINEX86X_NOWIN64 __MACHINEZ
#endif

#if !(_M_ARM)
#undef __MACHINESA
#undef __MACHINEARMX
#undef __MACHINECC
#define __MACHINESA __MACHINEZ
#define __MACHINEARMX __MACHINEZ
#define __MACHINECC __MACHINEZ
#endif

#if !(defined(__x86_64))
#undef __MACHINEX64
#define __MACHINEX64 __MACHINEZ
#endif

#if !defined(_WIN32_WCE)
#undef __MACHINECE
#define __MACHINECE __MACHINEZ
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef __CYGWIN__
	/* Put all declarations potentially colliding with POSIX headers here.
	   So far, Cygwin is the only POSIX system using this header file.
	   If that ever changes, make sure to tweak the guarding ifndef. */
    __MACHINE(int __cdecl abs(int))
    __MACHINEX64(double ceil(double))
    __MACHINE(long __cdecl labs(long))
    __MACHINECE(_CONST_RETURN void *__cdecl memchr(const void *,int,size_t))
    __MACHINE(int __cdecl memcmp(const void *,const void *,size_t))
    __MACHINE(void *__cdecl memcpy(void * __restrict__ ,const void * __restrict__ ,size_t))
    __MACHINE(void *__cdecl memset(void *,int,size_t))
    __MACHINE(char *__cdecl strcat(char *,const char *))
    __MACHINE(int __cdecl strcmp(const char *,const char *))
    __MACHINE(char *__cdecl strcpy(char * __restrict__ ,const char * __restrict__ ))
    __MACHINE(size_t __cdecl strlen(const char *))
    __MACHINECE(int __cdecl strncmp(const char *,const char *,size_t))
    __MACHINECE(char *__cdecl strncpy(char * __restrict__ ,const char * __restrict__ ,size_t))
    __MACHINEIW64(wchar_t *__cdecl wcscat(wchar_t * __restrict__ ,const wchar_t * __restrict__ ))
    __MACHINEIW64(int __cdecl wcscmp(const wchar_t *,const wchar_t *))
    __MACHINEIW64(wchar_t *__cdecl wcscpy(wchar_t * __restrict__ ,const wchar_t * __restrict__ ))
    __MACHINEIW64(size_t __cdecl wcslen(const wchar_t *))
#endif

  __MACHINEIA64(__MINGW_EXTENSION void _AcquireSpinLock(unsigned __int64 *))
#ifdef __GNUC__
#undef _alloca
#define _alloca(x) __builtin_alloca((x))
#else
    __MACHINE(void *__cdecl _alloca(size_t))
#endif
    __MACHINEIA64(void __break(int))
    __MACHINECE(__MINGW_EXTENSION __int64 __cdecl _abs64(__int64))
    __MACHINE(unsigned short __cdecl _byteswap_ushort(unsigned short value))
    __MACHINE(unsigned __LONG32 __cdecl _byteswap_ulong(unsigned __LONG32 value))
    __MACHINE(__MINGW_EXTENSION unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 value))
    __MACHINECE(void __CacheRelease(void *))
    __MACHINECE(void __CacheWriteback(void *))
    __MACHINECE(double ceil(double))
    __MACHINECE(__MINGW_EXTENSION double _CopyDoubleFromInt64(__int64))
    __MACHINECE(float _CopyFloatFromInt32(__int32))
    __MACHINECE(__MINGW_EXTENSION __int64 _CopyInt64FromDouble(double))
    __MACHINECE(__int32 _CopyInt32FromFloat(float))
    __MACHINECE(unsigned _CountLeadingOnes(long))
    __MACHINECE(__MINGW_EXTENSION unsigned _CountLeadingOnes64(__int64))
    __MACHINECE(unsigned _CountLeadingSigns(long))
    __MACHINECE(__MINGW_EXTENSION unsigned _CountLeadingSigns64(__int64))
    __MACHINECE(unsigned _CountLeadingZeros(long))
    __MACHINECE(__MINGW_EXTENSION unsigned _CountLeadingZeros64(__int64))
    __MACHINECE(unsigned _CountOneBits(long))
    __MACHINECE(__MINGW_EXTENSION unsigned _CountOneBits64(__int64))
    __MACHINE(void __cdecl __debugbreak(void))
    __MACHINEI(void __cdecl _disable(void))
    __MACHINEIA64(void __cdecl _disable(void))
    __MACHINEIA64(void __dsrlz(void))
    __MACHINEI(__MINGW_EXTENSION __int64 __emul(int,int))
    __MACHINEI(__MINGW_EXTENSION unsigned __int64 __emulu(unsigned int,unsigned int))
    __MACHINEI(void __cdecl _enable(void))
    __MACHINEIA64(void __cdecl _enable(void))
    __MACHINEIA64(__MINGW_EXTENSION void __fc(__int64))
    __MACHINEIA64(void __fclrf(void))
    __MACHINEIA64(void __fsetc(int,int))
    __MACHINEIA64(void __fwb(void))
    __MACHINEIA64(__MINGW_EXTENSION unsigned __int64 __getReg(int))
    __MACHINEIA64(__MINGW_EXTENSION unsigned __int64 __getPSP(void))
    __MACHINEIA64(__MINGW_EXTENSION unsigned __int64 __getCFS(void))
    __MACHINECE(void __ICacheRefresh(void *))
    __MACHINEIA64(long _InterlockedAdd(long volatile *,long))
    __MACHINEIA64(long _InterlockedAdd_acq(long volatile *,long))
    __MACHINEIA64(long _InterlockedAdd_rel(long volatile *,long))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedAdd64(__int64 volatile *,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedAdd64_acq(__int64 volatile *,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedAdd64_rel(__int64 volatile *,__int64))
    /* __MACHINEI(__LONG32 __cdecl _InterlockedDecrement(__LONG32 volatile *)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedDecrement(long volatile *))
    __MACHINEIA64(long _InterlockedDecrement_acq(long volatile *))
    __MACHINEIA64(long _InterlockedDecrement_rel(long volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedDecrement64(__int64 volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedDecrement64_acq(__int64 volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedDecrement64_rel(__int64 volatile *))
    /* __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedDecrement64(__int64 volatile *)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(__LONG32 _InterlockedExchange(__LONG32 volatile *,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedExchange(long volatile *,long))
    __MACHINEIA64(long _InterlockedExchange_acq(long volatile *,long))
    __MACHINESA(long WINAPI _InterlockedExchange(long volatile *,long))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedExchange64(__int64 volatile *,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedExchange64_acq(__int64 volatile *,__int64))
    /* __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedExchange64(__int64 volatile *,__int64)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(void *_InterlockedExchangePointer(void *volatile *,void *))
    __MACHINEIA64(void *_InterlockedExchangePointer_acq(void *volatile *,void volatile *))
    /* __MACHINEX64(void *_InterlockedExchangePointer(void *volatile *,void *)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(__LONG32 _InterlockedExchangeAdd(__LONG32 volatile *,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedExchangeAdd(long volatile *,long))
    __MACHINEIA64(long _InterlockedExchangeAdd_acq(long volatile *,long))
    __MACHINEIA64(long _InterlockedExchangeAdd_rel(long volatile *,long))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedExchangeAdd64(__int64 volatile *,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedExchangeAdd64_acq(__int64 volatile *,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedExchangeAdd64_rel(__int64 volatile *,__int64))
    /* __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedExchangeAdd64(__int64 volatile *,__int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(__LONG32 _InterlockedCompareExchange (__LONG32 volatile *,__LONG32,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedCompareExchange (long volatile *,long,long))
    __MACHINEIA64(long _InterlockedCompareExchange_acq (long volatile *,long,long))
    __MACHINEIA64(long _InterlockedCompareExchange_rel (long volatile *,long,long))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompareExchange64(__int64 volatile *,__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompareExchange64_acq(__int64 volatile *,__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompareExchange64_rel(__int64 volatile *,__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_acq(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_rel(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_acq(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_rel(__int64 volatile *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEIA64(void *_InterlockedCompareExchangePointer (void *volatile *,void *,void *))
    __MACHINEIA64(void *_InterlockedCompareExchangePointer_acq (void *volatile *,void *,void *))
    __MACHINEIA64(void *_InterlockedCompareExchangePointer_rel (void *volatile *,void *,void *))
    /* __MACHINEI(__MINGW_EXTENSION __int64 _InterlockedCompareExchange64(__int64 volatile *,__int64,__int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(void *_InterlockedCompareExchangePointer (void *volatile *,void *,void *)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(__LONG32 __cdecl _InterlockedIncrement(__LONG32 volatile *)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedIncrement(long volatile *))
    __MACHINEIA64(long _InterlockedIncrement_acq(long volatile *))
    __MACHINEIA64(long _InterlockedIncrement_rel(long volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedIncrement64(__int64 volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedIncrement64_acq(__int64 volatile *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedIncrement64_rel(__int64 volatile *))
    /* __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedIncrement64(__int64 volatile *)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(__LONG32 _InterlockedOr(__LONG32 volatile *,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIW64(char _InterlockedOr8(char volatile *,char))
    __MACHINEIW64(short _InterlockedOr16(short volatile *,short))
    /* __MACHINEW64(__MINGW_EXTENSION __int64 _InterlockedOr64(__int64 volatile *,__int64)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedOr_acq(long volatile *,long))
    __MACHINEIA64(char _InterlockedOr8_acq(char volatile *,char))
    __MACHINEIA64(short _InterlockedOr16_acq(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedOr64_acq(__int64 volatile *,__int64))
    __MACHINEIA64(long _InterlockedOr_rel(long volatile *,long))
    __MACHINEIA64(char _InterlockedOr8_rel(char volatile *,char))
    __MACHINEIA64(short _InterlockedOr16_rel(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedOr64_rel(__int64 volatile *,__int64))
    /* __MACHINEIW64(__LONG32 _InterlockedXor(__LONG32 volatile *,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIW64(char _InterlockedXor8(char volatile *,char))
    __MACHINEIW64(short _InterlockedXor16(short volatile *,short))
    /* __MACHINEW64(__MINGW_EXTENSION __int64 _InterlockedXor64(__int64 volatile *,__int64)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedXor_acq(long volatile *,long))
    __MACHINEIA64(char _InterlockedXor8_acq(char volatile *,char))
    __MACHINEIA64(short _InterlockedXor16_acq(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedXor64_acq(__int64 volatile *,__int64))
    __MACHINEIA64(long _InterlockedXor_rel(long volatile *,long))
    __MACHINEIA64(char _InterlockedXor8_rel(char volatile *,char))
    __MACHINEIA64(short _InterlockedXor16_rel(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedXor64_rel(__int64 volatile *,__int64))
    /* __MACHINEIW64(__LONG32 _InterlockedAnd(__LONG32 volatile *,__LONG32)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIW64(char _InterlockedAnd8(char volatile *,char))
    __MACHINEIW64(short _InterlockedAnd16(short volatile *,short))
    /* __MACHINEW64(__MINGW_EXTENSION __int64 _InterlockedAnd64(__int64 volatile *,__int64)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(long _InterlockedAnd_acq(long volatile *,long))
    __MACHINEIA64(char _InterlockedAnd8_acq(char volatile *,char))
    __MACHINEIA64(short _InterlockedAnd16_acq(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedAnd64_acq(__int64 volatile *,__int64))
    __MACHINEIA64(long _InterlockedAnd_rel(long volatile *,long))
    __MACHINEIA64(char _InterlockedAnd8_rel(char volatile *,char))
    __MACHINEIA64(short _InterlockedAnd16_rel(short volatile *,short))
    __MACHINEIA64(__MINGW_EXTENSION __int64 _InterlockedAnd64_rel(__int64 volatile *,__int64))
    __MACHINEIA32(__MINGW_EXTENSION __LONG32 _InterlockedAddLargeStatistic(__int64 volatile *,__LONG32))
    __MACHINEI(int __cdecl _inp(unsigned short))
    __MACHINEI(int __cdecl inp(unsigned short))
    __MACHINEI(unsigned __LONG32 __cdecl _inpd(unsigned short))
    __MACHINEI(unsigned __LONG32 __cdecl inpd(unsigned short))
    __MACHINEI(unsigned short __cdecl _inpw(unsigned short))
    __MACHINEI(unsigned short __cdecl inpw(unsigned short))
    __MACHINEIA64(int __isNat(int))
    __MACHINEIA64(void __isrlz(void))
    __MACHINEIA64(void __invalat(void))
    __MACHINECE(int _isnan(double))
    __MACHINECE(int _isnanf(float))
    __MACHINECE(int _isunordered(double,double))
    __MACHINECE(int _isunorderedf(float,float))
    __MACHINEIA64(void __lfetch(int,void const *))
    __MACHINEIA64(void __lfetchfault(int,void const *))
    __MACHINEIA64(void __lfetch_excl(int,void const *))
    __MACHINEIA64(void __lfetchfault_excl(int,void const *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 __load128(void *,__int64 *))
    __MACHINEIA64(__MINGW_EXTENSION __int64 __load128_acq(void *,__int64 *))
    __MACHINEZ(void __cdecl longjmp(jmp_buf,int))

#pragma push_macro ("_lrotl")
#undef _lrotl
#pragma push_macro ("_lrotr")
#undef _lrotr
#ifdef __x86_64__
    __MACHINE(__MINGW_EXTENSION unsigned long long __cdecl _lrotl(unsigned long long,int))
    __MACHINE(__MINGW_EXTENSION unsigned long long __cdecl _lrotr(unsigned long long,int))
#else
    __MACHINE(unsigned __LONG32 __cdecl _lrotl(unsigned __LONG32,int))
    __MACHINE(unsigned __LONG32 __cdecl _lrotr(unsigned __LONG32,int))
#endif
#pragma pop_macro ("_lrotl")
#pragma pop_macro ("_lrotr")

    __MACHINEI(__MINGW_EXTENSION unsigned __int64 __ll_lshift(unsigned __int64,int))
    __MACHINEI(__MINGW_EXTENSION __int64 __ll_rshift(__int64,int))
    __MACHINEIA64(__m64 __m64_czx1l(__m64))
    __MACHINEIA64(__m64 __m64_czx1r(__m64))
    __MACHINEIA64(__m64 __m64_czx2l(__m64))
    __MACHINEIA64(__m64 __m64_czx2r(__m64))
    __MACHINEIA64(__m64 __m64_dep_mi(const int,__m64,const int,const int))
    __MACHINEIA64(__m64 __m64_dep_mr(__m64,__m64,const int,const int))
    __MACHINEIA64(__m64 __m64_dep_zi(const int,const int,const int))
    __MACHINEIA64(__m64 __m64_dep_zr(__m64,const int,const int))
    __MACHINEIA64(__m64 __m64_extr(__m64,const int,const int))
    __MACHINEIA64(__m64 __m64_extru(__m64,const int,const int))
    __MACHINEIA64(__m64 __m64_mix1l(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mix1r(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mix2l(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mix2r(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mix4l(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mix4r(__m64,__m64))
    __MACHINEIA64(__m64 __m64_mux1(__m64,const int))
    __MACHINEIA64(__m64 __m64_mux2(__m64,const int))
    __MACHINEIA64(__m64 __m64_muladd64hi(__m64,__m64,__m64))
    __MACHINEIA64(__m64 __m64_muladd64hi_u(__m64,__m64,__m64))
    __MACHINEIA64(__m64 __m64_muladd64lo(__m64,__m64,__m64))
    __MACHINEIA64(__m64 __m64_padd1uus(__m64,__m64))
    __MACHINEIA64(__m64 __m64_padd2uus(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pavg1_nraz(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pavg2_nraz(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pavgsub1(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pavgsub2(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pmpy2l(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pmpy2r(__m64,__m64))
    __MACHINEIA64(__m64 __m64_pmpyshr2(__m64,__m64,const int))
    __MACHINEIA64(__m64 __m64_pmpyshr2u(__m64,__m64,const int))
    __MACHINEIA64(__m64 __m64_popcnt(__m64))
    __MACHINEIA64(__m64 __m64_pshladd2(__m64,const int,__m64))
    __MACHINEIA64(__m64 __m64_pshradd2(__m64,const int,__m64))
    __MACHINEIA64(__m64 __m64_psub1uus(__m64,__m64))
    __MACHINEIA64(__m64 __m64_psub2uus(__m64,__m64))
    __MACHINEIA64(__m64 __m64_shladd(__m64,const int,__m64))
    __MACHINEIA64(__m64 __m64_shrp(__m64,__m64,const int))
    __MACHINEIA64(void __mf(void))
    __MACHINEIA64(void __mfa(void))
    __MACHINECE(long _MulHigh(long,long))
    __MACHINECE(unsigned long _MulUnsignedHigh (unsigned long,unsigned long))
    __MACHINEI(int __cdecl _outp(unsigned short,int))
    __MACHINEI(int __cdecl outp(unsigned short,int))
    __MACHINEI(unsigned __LONG32 __cdecl _outpd(unsigned short,unsigned __LONG32))
    __MACHINEI(unsigned __LONG32 __cdecl outpd(unsigned short,unsigned __LONG32))
    __MACHINEI(unsigned short __cdecl _outpw(unsigned short,unsigned short))
    __MACHINEI(unsigned short __cdecl outpw(unsigned short,unsigned short))
    __MACHINECE(void __cdecl __prefetch(unsigned long *addr))
    __MACHINEIA64(__MINGW_EXTENSION void __ptcl(__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION void __ptcg(__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION void __ptcga(__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION void __ptrd(__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION void __ptri(__int64,__int64))
    __MACHINEIA64(void *_rdteb(void))
    __MACHINESA(int _ReadStatusReg(int))
    /* __MACHINECE(void _ReadWriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(__MINGW_EXTENSION void _ReleaseSpinLock(unsigned __int64 *))
    __MACHINEI(void *_ReturnAddress(void))
    __MACHINEIA64(void *_ReturnAddress(void))
    __MACHINESA(void *_ReturnAddress(void))
    __MACHINECE(void *_ReturnAddress(void))
#pragma push_macro ("_rotl")
#undef _rotl
    __MACHINE(unsigned int __cdecl _rotl(unsigned int,int))
#pragma pop_macro ("_rotl")
#pragma push_macro ("_rotr")
#undef _rotr
    __MACHINE(unsigned int __cdecl _rotr(unsigned int,int))
#pragma pop_macro ("_rotr")
#undef _rotl64
#undef _rotr64
    __MACHINE(__MINGW_EXTENSION unsigned __int64 __cdecl _rotl64(unsigned __int64,int))
    __MACHINE(__MINGW_EXTENSION unsigned __int64 __cdecl _rotr64(unsigned __int64,int))
#define _rotl64 __rolq
#define _rotr64 __rorq
    __MACHINEIA64(void __rsm(int))
    __MACHINEIA64(void __rum(int))
#ifndef __CYGWIN__
#ifndef USE_NO_MINGW_SETJMP_TWO_ARGS
    __MACHINE(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmp(jmp_buf,void *))
    __MACHINEIA64(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmpex(jmp_buf,void *))
    __MACHINEX64(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmpex(jmp_buf,void *))
#else
    __MACHINE(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmp(jmp_buf))
    __MACHINEIA64(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmpex(jmp_buf))
    __MACHINEX64(int __cdecl __attribute__ ((__nothrow__,__returns_twice__)) _setjmpex(jmp_buf))
#endif
#endif
    __MACHINEIA64(__MINGW_EXTENSION void __setReg(int,unsigned __int64))
    __MACHINEARMX(void _SmulAdd_SL_ACC(int,int))
    __MACHINEARMX(void _SmulAddPack_2SW_ACC(int,int))
    __MACHINEARMX(void _SmulAddLo_SW_ACC(int,int))
    __MACHINEARMX(void _SmulAddHi_SW_ACC(int,int))
    __MACHINEARMX(void _SmulAddHiLo_SW_ACC(int,int))
    __MACHINEARMX(void _SmulAddLoHi_SW_ACC(int,int))
    __MACHINEIA64(__MINGW_EXTENSION void __store128(void *,__int64,__int64))
    __MACHINEIA64(__MINGW_EXTENSION void __store128_rel(void *,__int64,__int64))
    __MACHINE(char *__cdecl _strset(char *,int))
    __MACHINE(char *__cdecl strset(char *,int))
    __MACHINEIA64(void __ssm(int))
    __MACHINEIA64(void __sum(int))
    __MACHINESA(int __swi(unsigned,...))
    __MACHINEIA64(void __synci(void))
    __MACHINEIA64(__MINGW_EXTENSION __int64 __thash(__int64))
    __MACHINEIA64(__MINGW_EXTENSION __int64 __ttag(__int64))
    __MACHINECE(int __trap(int,...))
    __MACHINEI(__MINGW_EXTENSION unsigned __int64 __ull_rshift(unsigned __int64,int))
    __MACHINEIA64(__MINGW_EXTENSION unsigned __int64 __UMULH(unsigned __int64 a,unsigned __int64 b))
    __MACHINECE(wchar_t *__cdecl wcscat(wchar_t * __restrict__ ,const wchar_t * __restrict__ ))
    __MACHINECE(int __cdecl wcscmp(const wchar_t *,const wchar_t *))
    __MACHINECE(wchar_t *__cdecl wcscpy(wchar_t * __restrict__ ,const wchar_t * __restrict__ ))
    __MACHINECE(size_t __cdecl wcslen(const wchar_t *))
    __MACHINECE(int __cdecl wcsncmp(const wchar_t *,const wchar_t *,size_t))
    __MACHINECE(wchar_t *__cdecl wcsncpy(wchar_t * __restrict__ ,const wchar_t * __restrict__ ,size_t))
    __MACHINECE(wchar_t *__cdecl _wcsset(wchar_t *,wchar_t))
    /* __MACHINECE(void _WriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    __MACHINESA(void _WriteStatusReg(int,int,int))
    __MACHINEI(void *_AddressOfReturnAddress(void))
    __MACHINEIA64(void __yield(void))
    __MACHINEIA64(void __fci(void*))

#if !defined(__GNUC__) || (!defined(__MMX__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X_NOX64(void _m_empty(void))
    __MACHINEX86X_NOX64(__m64 _m_from_int(int))
    __MACHINEX86X_NOX64(int _m_to_int(__m64))
    __MACHINEX86X_NOX64(__m64 _m_packsswb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_packssdw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_packuswb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpckhbw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpckhwd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpckhdq(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpcklbw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpcklwd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_punpckldq(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddsb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddsw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddusb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_paddusw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubsb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubsw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubusb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psubusw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pmaddwd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pmulhw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pmullw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psllw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psllwi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_pslld(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pslldi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psllq(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psllqi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psraw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psrawi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psrad(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psradi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psrlw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psrlwi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psrld(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psrldi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_psrlq(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psrlqi(__m64,int))
    __MACHINEX86X_NOX64(__m64 _m_pand(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pandn(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_por(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pxor(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpeqb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpeqw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpeqd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpgtb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpgtw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pcmpgtd(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _mm_setzero_si64(void))
    __MACHINEX86X_NOX64(__m64 _mm_set_pi32(int,int))
    __MACHINEX86X_NOX64(__m64 _mm_set_pi16(short,short,short,short))
    __MACHINEX86X_NOX64(__m64 _mm_set_pi8(char,char,char,char,char,char,char,char))
    __MACHINEX86X_NOX64(__m64 _mm_set1_pi32(int))
    __MACHINEX86X_NOX64(__m64 _mm_set1_pi16(short))
    __MACHINEX86X_NOX64(__m64 _mm_set1_pi8(char))
    __MACHINEX86X_NOX64(__m64 _mm_setr_pi32(int,int))
    __MACHINEX86X_NOX64(__m64 _mm_setr_pi16(short,short,short,short))
    __MACHINEX86X_NOX64(__m64 _mm_setr_pi8(char,char,char,char,char,char,char,char))
#endif
#if !defined(__GNUC__) || (!defined(__SSE__) && !defined(__MINGW_FORCE_SYS_INTRINS))
#pragma push_macro ("_m_pextrw")
#undef _m_pextrw
    __MACHINEX86X_NOX64(int _m_pextrw(__m64,int))
    __MACHINECC(__MINGW_EXTENSION int _m_pextrw(unsigned __int64 m1,const int c))
#pragma pop_macro ("_m_pextrw")
#pragma push_macro ("_m_pinsrw")
#undef _m_pinsrw
    __MACHINEX86X_NOX64(__m64 _m_pinsrw(__m64,int,int))
#pragma pop_macro ("_m_pinsrw")
    __MACHINEX86X_NOX64(__m64 _m_pmaxsw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pmaxub(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pminsw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pminub(__m64,__m64))
    __MACHINEX86X_NOX64(int _m_pmovmskb(__m64))
    __MACHINEX86X_NOX64(__m64 _m_pmulhuw(__m64,__m64))
#pragma push_macro ("_m_pshufw")
#undef _m_pshufw
    __MACHINEX86X_NOX64(__m64 _m_pshufw(__m64,int))
#pragma pop_macro ("_m_pshufw")
    __MACHINEX86X_NOX64(void _m_maskmovq(__m64,__m64,char*))
    __MACHINEX86X_NOX64(__m64 _m_pavgb(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_pavgw(__m64,__m64))
    __MACHINEX86X_NOX64(__m64 _m_psadbw(__m64,__m64))
#endif
#if !defined(__GNUC__) || (!defined(__SSE__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X_NOIA64(__m128 _mm_add_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_add_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_sub_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_sub_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_mul_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_mul_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_div_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_div_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_sqrt_ss(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_sqrt_ps(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_rcp_ss(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_rcp_ps(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_rsqrt_ss(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_rsqrt_ps(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_min_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_min_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_max_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_max_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_and_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_andnot_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_or_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_xor_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpeq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpeq_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmplt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmplt_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmple_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmple_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpgt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpgt_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpge_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpge_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpneq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpneq_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnlt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnlt_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnle_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnle_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpngt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpngt_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnge_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpnge_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpord_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpord_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpunord_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cmpunord_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comieq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comilt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comile_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comigt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comige_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_comineq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomieq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomilt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomile_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomigt_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomige_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_ucomineq_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(int _mm_cvt_ss2si(__m128))
    __MACHINEX86X_NOWIN64(__m64 _mm_cvt_ps2pi(__m128))
    __MACHINEX86X_NOIA64(int _mm_cvtt_ss2si(__m128))
    __MACHINEX86X_NOWIN64(__m64 _mm_cvtt_ps2pi(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_cvt_si2ss(__m128,int))
    __MACHINEX86X_NOWIN64(__m128 _mm_cvt_pi2ps(__m128,__m64))
#pragma push_macro ("_mm_shuffle_ps")
#undef _mm_shuffle_ps
    __MACHINEX86X_NOIA64(__m128 _mm_shuffle_ps(__m128,__m128,int const))
#pragma pop_macro ("_mm_shuffle_ps")
    __MACHINEX86X_NOIA64(__m128 _mm_unpackhi_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_unpacklo_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_loadh_pi(__m128,__m64 const*))
    __MACHINEX86X_NOIA64(void _mm_storeh_pi(__m64*,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_loadl_pi(__m128,__m64 const*))
    __MACHINEX86X_NOIA64(void _mm_storel_pi(__m64*,__m128))
    __MACHINEX86X_NOIA64(int _mm_movemask_ps(__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_set_ss(float))
    __MACHINEX86X_NOIA64(__m128 _mm_set_ps1(float))
    __MACHINEX86X_NOIA64(__m128 _mm_set_ps(float,float,float,float))
    __MACHINEX86X_NOIA64(__m128 _mm_setr_ps(float,float,float,float))
    __MACHINEX86X_NOIA64(__m128 _mm_setzero_ps(void))
    __MACHINEX86X_NOIA64(__m128 _mm_load_ss(float const*))
    __MACHINEX86X_NOIA64(__m128 _mm_load_ps1(float const*))
    __MACHINEX86X_NOIA64(__m128 _mm_load_ps(float const*))
    __MACHINEX86X_NOIA64(__m128 _mm_loadr_ps(float const*))
    __MACHINEX86X_NOIA64(__m128 _mm_loadu_ps(float const*))
    __MACHINEX86X_NOIA64(__m128 _mm_move_ss(__m128,__m128))
    __MACHINEX86X_NOIA64(void _mm_store_ss(float*,__m128))
    __MACHINEX86X_NOIA64(void _mm_store_ps1(float*,__m128))
    __MACHINEX86X_NOIA64(void _mm_store_ps(float*,__m128))
    __MACHINEX86X_NOIA64(void _mm_storer_ps(float*,__m128))
    __MACHINEX86X_NOIA64(void _mm_storeu_ps(float*,__m128))
/*    __MACHINEX86X_NOIA64(void _mm_prefetch(char const*,int)) */
    __MACHINEX86X_NOWIN64(void _mm_stream_pi(__m64*,__m64))
    __MACHINEX86X_NOIA64(void _mm_stream_ps(float*,__m128))
    __MACHINEX86X_NOIA64(void _mm_sfence(void))
    __MACHINEX86X_NOIA64(unsigned int _mm_getcsr(void))
    __MACHINEX86X_NOIA64(void _mm_setcsr(unsigned int))
    __MACHINEX86X_NOIA64(__m128 _mm_movelh_ps(__m128,__m128))
    __MACHINEX86X_NOIA64(__m128 _mm_movehl_ps(__m128,__m128))
#endif
#if !defined(__GNUC__) || (!defined(__3dNOW__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X_NOWIN64(__m64 _m_from_float(float))
    __MACHINEX86X_NOWIN64(float _m_to_float(__m64))
    __MACHINEX86X_NOIA64(void _m_prefetch(void*))
    __MACHINEX86X_NOIA64(void _m_prefetchw(void*_Source))
    __MACHINEX86X_NOWIN64(void _m_femms(void))
    __MACHINEX86X_NOWIN64(__m64 _m_pavgusb(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pf2id(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfacc(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfadd(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfcmpeq(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfcmpge(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfcmpgt(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfmax(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfmin(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfmul(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfrcp(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfrcpit1(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfrcpit2(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfrsqrt(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfrsqit1(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfsub(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfsubr(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pi2fd(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pmulhrw(__m64,__m64))
#endif
    __MACHINEX86X_NOWIN64(__m64 _m_pf2iw(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfnacc(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pfpnacc(__m64,__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pi2fw(__m64))
    __MACHINEX86X_NOWIN64(__m64 _m_pswapd(__m64))
#if !defined(__GNUC__) || (!defined(__SSE2__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X(__m128d _mm_add_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_add_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_div_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_div_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_max_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_max_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_min_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_min_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_mul_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_mul_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_sqrt_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_sqrt_pd(__m128d))
    __MACHINEX86X(__m128d _mm_sub_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_sub_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_and_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_andnot_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_or_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_xor_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpeq_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpeq_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmplt_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmplt_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmple_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmple_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpgt_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpgt_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpge_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpge_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpneq_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpneq_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnlt_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnlt_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnle_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnle_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpngt_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpngt_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnge_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpnge_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpord_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpord_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpunord_sd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_cmpunord_pd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comieq_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comilt_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comile_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comigt_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comige_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_comineq_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomieq_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomilt_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomile_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomigt_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomige_sd(__m128d,__m128d))
    __MACHINEX86X(int _mm_ucomineq_sd(__m128d,__m128d))
    __MACHINEX86X(__m128 _mm_cvtpd_ps(__m128d))
    __MACHINEX86X(__m128d _mm_cvtps_pd(__m128))
    __MACHINEX86X(__m128d _mm_cvtepi32_pd(__m128i))
    __MACHINEX86X(__m128i _mm_cvtpd_epi32(__m128d))
    __MACHINEX86X(int _mm_cvtsd_si32(__m128d))
    __MACHINEX86X(__m128 _mm_cvtsd_ss(__m128,__m128d))
    __MACHINEX86X(__m128d _mm_cvtsi32_sd(__m128d,int))
    __MACHINEX86X(__m128d _mm_cvtss_sd(__m128d,__m128))
    __MACHINEX86X(__m128i _mm_cvttpd_epi32(__m128d))
    __MACHINEX86X(int _mm_cvttsd_si32(__m128d))
    __MACHINEX86X(__m128 _mm_cvtepi32_ps(__m128i))
    __MACHINEX86X(__m128i _mm_cvtps_epi32(__m128))
    __MACHINEX86X(__m128i _mm_cvttps_epi32(__m128))
    __MACHINEX86X_NOX64(__m64 _mm_cvtpd_pi32(__m128d))
    __MACHINEX86X_NOX64(__m64 _mm_cvttpd_pi32(__m128d))
    __MACHINEX86X_NOX64(__m128d _mm_cvtpi32_pd(__m64))
    __MACHINEX86X(__m128d _mm_unpackhi_pd(__m128d,__m128d))
    __MACHINEX86X(__m128d _mm_unpacklo_pd(__m128d,__m128d))
    __MACHINEX86X(int _mm_movemask_pd(__m128d))
    /*		__MACHINEX86X(__m128d _mm_shuffle_pd(__m128d,__m128d,int)) */
    __MACHINEX86X(__m128d _mm_load_pd(double const*))
    __MACHINEX86X(__m128d _mm_load1_pd(double const*))
    __MACHINEX86X(__m128d _mm_loadr_pd(double const*))
    __MACHINEX86X(__m128d _mm_loadu_pd(double const*))
    __MACHINEX86X(__m128d _mm_load_sd(double const*))
    __MACHINEX86X(__m128d _mm_loadh_pd(__m128d,double const*))
    __MACHINEX86X(__m128d _mm_loadl_pd(__m128d,double const*))
    __MACHINEX86X(__m128d _mm_set_sd(double))
    __MACHINEX86X(__m128d _mm_set1_pd(double))
    __MACHINEX86X(__m128d _mm_set_pd(double,double))
    __MACHINEX86X(__m128d _mm_setr_pd(double,double))
    __MACHINEX86X(__m128d _mm_setzero_pd(void))
    __MACHINEX86X(__m128d _mm_move_sd(__m128d,__m128d))
    __MACHINEX86X(void _mm_store_sd(double*,__m128d))
    __MACHINEX86X(void _mm_store1_pd(double*,__m128d))
    __MACHINEX86X(void _mm_store_pd(double*,__m128d))
    __MACHINEX86X(void _mm_storeu_pd(double*,__m128d))
    __MACHINEX86X(void _mm_storer_pd(double*,__m128d))
    __MACHINEX86X(void _mm_storeh_pd(double*,__m128d))
    __MACHINEX86X(void _mm_storel_pd(double*,__m128d))
    __MACHINEX86X(__m128i _mm_add_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_add_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_add_epi32(__m128i,__m128i))
#endif

#if !defined(__GNUC__) || (!defined(__MMX__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X_NOX64(__m64 _mm_add_si64(__m64,__m64))
#endif

#if !defined(__GNUC__) || (!defined(__SSE2__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X(__m128i _mm_add_epi64(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_adds_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_adds_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_adds_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_adds_epu16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_avg_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_avg_epu16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_madd_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_max_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_max_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_min_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_min_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_mulhi_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_mulhi_epu16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_mullo_epi16(__m128i,__m128i))
    __MACHINEX86X_NOX64(__m64 _mm_mul_su32(__m64,__m64))
    __MACHINEX86X(__m128i _mm_mul_epu32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_sad_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_sub_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_sub_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_sub_epi32(__m128i,__m128i))
#endif
#if !defined(__GNUC__) || (!defined(__MMX__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X_NOX64(__m64 _mm_sub_si64(__m64,__m64))
#endif
#if !defined(__GNUC__) || (!defined(__SSE2__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X(__m128i _mm_sub_epi64(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_subs_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_subs_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_subs_epu8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_subs_epu16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_andnot_si128(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_and_si128(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_or_si128(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_xor_si128(__m128i,__m128i))
    /*		__MACHINEX86X(__m128i _mm_slli_si128(__m128i,int)) */
/*    __MACHINEX86X(__m128i _mm_slli_epi16(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_sll_epi16(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_slli_epi32(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_sll_epi32(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_slli_epi64(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_sll_epi64(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_srai_epi16(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_sra_epi16(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_srai_epi32(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_sra_epi32(__m128i,__m128i))
    /*		__MACHINEX86X(__m128i _mm_srli_si128(__m128i,int)) */
/*    __MACHINEX86X(__m128i _mm_srli_epi16(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_srl_epi16(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_srli_epi32(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_srl_epi32(__m128i,__m128i))
/*    __MACHINEX86X(__m128i _mm_srli_epi64(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_srl_epi64(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpeq_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpeq_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpeq_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpgt_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpgt_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmpgt_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmplt_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmplt_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cmplt_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_cvtsi32_si128(int))
    __MACHINEX86X(int _mm_cvtsi128_si32(__m128i))
    __MACHINEX86X(__m128i _mm_packs_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_packs_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_packus_epi16(__m128i,__m128i))
    /*		__MACHINEX86X(int _mm_extract_epi16(__m128i,int)) */
    /*		__MACHINEX86X(__m128i _mm_insert_epi16(__m128i,int,int)) */
    __MACHINEX86X(int _mm_movemask_epi8(__m128i))
    /*		__MACHINEX86X(__m128i _mm_shuffle_epi32(__m128i,int)) */
    /*		__MACHINEX86X(__m128i _mm_shufflehi_epi16(__m128i,int)) */
    /*		__MACHINEX86X(__m128i _mm_shufflelo_epi16(__m128i,int)) */
    __MACHINEX86X(__m128i _mm_unpackhi_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpackhi_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpackhi_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpackhi_epi64(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpacklo_epi8(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpacklo_epi16(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpacklo_epi32(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_unpacklo_epi64(__m128i,__m128i))
    __MACHINEX86X(__m128i _mm_load_si128(__m128i const*))
    __MACHINEX86X(__m128i _mm_loadu_si128(__m128i const*))
    __MACHINEX86X(__m128i _mm_loadl_epi64(__m128i const*))
    __MACHINEX86X_NOX64(__m128i _mm_set_epi64(__m64,__m64))
    __MACHINEX86X(__m128i _mm_set_epi32(int,int,int,int))
    __MACHINEX86X(__m128i _mm_set_epi16(short,short,short,short,short,short,short,short))
    __MACHINEX86X(__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char))
    __MACHINEX86X_NOX64(__m128i _mm_set1_epi64(__m64))
    __MACHINEX86X(__m128i _mm_set1_epi32(int))
    __MACHINEX86X(__m128i _mm_set1_epi16(short))
    __MACHINEX86X(__m128i _mm_set1_epi8(char))
    __MACHINEX86X(__m128i _mm_setl_epi64(__m128i))
    __MACHINEX86X_NOX64(__m128i _mm_setr_epi64(__m64,__m64))
    __MACHINEX86X(__m128i _mm_setr_epi32(int,int,int,int))
    __MACHINEX86X(__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short))
    __MACHINEX86X(__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char))
    __MACHINEX86X(__m128i _mm_setzero_si128(void))
    __MACHINEX86X(void _mm_store_si128(__m128i*,__m128i))
    __MACHINEX86X(void _mm_storeu_si128(__m128i*,__m128i))
    __MACHINEX86X(void _mm_storel_epi64(__m128i*,__m128i))
    __MACHINEX86X(void _mm_maskmoveu_si128(__m128i,__m128i,char*))
    __MACHINEX86X(__m128i _mm_move_epi64(__m128i))
    __MACHINEX86X_NOX64(__m128i _mm_movpi64_epi64(__m64))
    __MACHINEX86X_NOX64(__m64 _mm_movepi64_pi64(__m128i))
    __MACHINEX86X(void _mm_stream_pd(double*,__m128d))
    __MACHINEX86X(void _mm_stream_si128(__m128i*,__m128i))
    __MACHINEX86X(void _mm_clflush(void const *))
    __MACHINEX86X(void _mm_lfence(void))
    __MACHINEX86X(void _mm_mfence(void))
    __MACHINEX86X(void _mm_stream_si32(int*,int))
#endif
#if !defined(__GNUC__) || (!defined(__SSE__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X(void _mm_pause(void))
#endif
#if !defined(__GNUC__) || (!defined(__SSE3__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX86X(__m128 _mm_addsub_ps(__m128,__m128))
    __MACHINEX86X(__m128d _mm_addsub_pd(__m128d,__m128d))
    __MACHINEX86X(__m128 _mm_hadd_ps(__m128,__m128))
    __MACHINEX86X(__m128d _mm_hadd_pd(__m128d,__m128d))
    __MACHINEX86X(__m128 _mm_hsub_ps(__m128,__m128))
    __MACHINEX86X(__m128d _mm_hsub_pd(__m128d,__m128d))
    __MACHINEX86X(__m128i _mm_lddqu_si128(__m128i const*))
    __MACHINEX86X(void _mm_monitor(void const*,unsigned int,unsigned int))
    __MACHINEX86X(__m128d _mm_movedup_pd(__m128d))
    __MACHINEX86X(__m128d _mm_loaddup_pd(double const*))
    __MACHINEX86X(__m128 _mm_movehdup_ps(__m128))
    __MACHINEX86X(__m128 _mm_moveldup_ps(__m128))
    __MACHINEX86X(void _mm_mwait(unsigned int,unsigned int))
#endif
    /* __MACHINEI(void _WriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void _ReadWriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA64(void _WriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA64(void _ReadWriteBarrier(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(void __faststorefence(void)) moved to psdk_inc/intrin-impl.h */
    __MACHINEX64(__MINGW_EXTENSION __int64 __mulh(__int64,__int64))
    __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __umulh(unsigned __int64,unsigned __int64))
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readcr0(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readcr2(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readcr3(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readcr4(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readcr8(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readcr0(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readcr2(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readcr3(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readcr4(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readcr8(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __writecr0(unsigned __int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __writecr3(unsigned __int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __writecr4(unsigned __int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __writecr8(unsigned __int64)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writecr0(unsigned)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writecr3(unsigned)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writecr4(unsigned)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writecr8(unsigned)) moved to psdk_inc/intrin-impl.h */
    __MACHINEI(void __wbinvd(void))
    __MACHINEI(void __invlpg(void*))
    /* __MACHINEI(__MINGW_EXTENSION unsigned __int64 __readmsr(unsigned __LONG32)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(__MINGW_EXTENSION void __writemsr(unsigned __LONG32,unsigned __int64)) moved to psdk_inc/intrin-impl.h */
#ifndef __GNUC__
    __MACHINEI(__MINGW_EXTENSION unsigned __int64 __rdtsc(void))
#endif
    /* __MACHINEI(void __movsb(unsigned char *,unsigned char const *,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __movsw(unsigned short *,unsigned short const *,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __movsd(unsigned __LONG32 *,unsigned __LONG32 const *,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __movsq(unsigned long long *,unsigned long long const *,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(unsigned char __readgsbyte(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(unsigned short __readgsword(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(unsigned __LONG32 __readgsdword(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned __int64 __readgsqword(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(void __writegsbyte(unsigned __LONG32 Offset,unsigned char Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(void __writegsword(unsigned __LONG32 Offset,unsigned short Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(void __writegsdword(unsigned __LONG32 Offset,unsigned __LONG32 Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __writegsqword(unsigned __LONG32 Offset,unsigned __int64 Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char __inbyte(unsigned short Port)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned short __inword(unsigned short Port)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned __LONG32 __indword(unsigned short Port)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outbyte(unsigned short Port,unsigned char Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outword(unsigned short Port,unsigned short Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outdword(unsigned short Port,unsigned __LONG32 Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __inbytestring(unsigned short Port,unsigned char *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __inwordstring(unsigned short Port,unsigned short *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __indwordstring(unsigned short Port,unsigned __LONG32 *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outbytestring(unsigned short Port,unsigned char *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outwordstring(unsigned short Port,unsigned short *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __outdwordstring(unsigned short Port,unsigned __LONG32 *Buffer,unsigned __LONG32 Count)) moved to psdk_inc/intrin-impl.h */
    __MACHINEI(unsigned int __getcallerseflags())
#if !defined(__GNUC__) || (!defined(__SSE2__) && !defined(__MINGW_FORCE_SYS_INTRINS))
    __MACHINEX64(__MINGW_EXTENSION __m128i _mm_set_epi64x(__int64 i1,__int64 i0))
    __MACHINEX64(__MINGW_EXTENSION __m128i _mm_set1_epi64x(__int64 i))
    __MACHINEX64(__MINGW_EXTENSION __int64 _mm_cvtsd_si64x(__m128d a))
    __MACHINEX64(__MINGW_EXTENSION __m128d _mm_cvtsi64x_sd(__m128d a,__int64 b))
    __MACHINEX64(__MINGW_EXTENSION __m128 _mm_cvtsi64x_ss(__m128 a,__int64 b))
    __MACHINEX64(__MINGW_EXTENSION __int64 _mm_cvtss_si64x(__m128 a))
    __MACHINEX64(__MINGW_EXTENSION __int64 _mm_cvttsd_si64x(__m128d a))
    __MACHINEX64(__MINGW_EXTENSION __int64 _mm_cvttss_si64x(__m128 a))
    __MACHINEX64(__MINGW_EXTENSION __m128i _mm_cvtsi64x_si128(__int64 a))
    __MACHINEX64(__MINGW_EXTENSION __int64 _mm_cvtsi128_si64x(__m128i a))
#endif
    __MACHINEX64(__MINGW_EXTENSION void _mm_stream_si64x(__int64 *,__int64))
    /* __MACHINEI(void __stosb(unsigned char *,unsigned char,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __stosw(unsigned short *,unsigned short,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __stosd(unsigned __LONG32 *,unsigned __LONG32,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION void __stosq(unsigned __int64 *,unsigned __int64,size_t)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(unsigned char _bittest(__LONG32 const *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(unsigned char _bittestandset(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(unsigned char _bittestandreset(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(unsigned char _bittestandcomplement(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char InterlockedBitTestAndSet(volatile __LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char InterlockedBitTestAndReset(volatile __LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char InterlockedBitTestAndComplement(volatile __LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char _interlockedbittestandset(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char _interlockedbittestandreset(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(unsigned char _interlockedbittestandcomplement(__LONG32 *a,__LONG32 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _bittest64(__int64 const *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _bittestandset64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _bittestandreset64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _bittestandcomplement64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char InterlockedBitTestAndSet64(volatile __int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char InterlockedBitTestAndReset64(volatile __int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char InterlockedBitTestAndComplement64(volatile __int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char _interlockedbittestandset64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char _interlockedbittestandreset64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEX64(__MINGW_EXTENSION unsigned char _interlockedbittestandcomplement64(__int64 *a,__int64 b)) moved to psdk_inc/intrin-impl.h */
    __MACHINEI(void __cpuid(int a[4],int b))
    __MACHINEI(__MINGW_EXTENSION unsigned __int64 __readpmc(unsigned __LONG32 a))
    __MACHINEI(unsigned __LONG32 __segmentlimit(unsigned __LONG32 a))

    /* __MACHINEIA32(unsigned char __readfsbyte(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned short __readfsword(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(unsigned __LONG32 __readfsdword(unsigned __LONG32 Offset)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(__MINGW_EXTENSION unsigned __int64 __readfsqword(unsigned __LONG32 Offset)) intrinsic doesn't actually exist */
    /* __MACHINEIA32(void __writefsbyte(unsigned __LONG32 Offset,unsigned char Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writefsword(unsigned __LONG32 Offset,unsigned short Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(void __writefsdword(unsigned __LONG32 Offset,unsigned __LONG32 Data)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIA32(__MINGW_EXTENSION void __writefsqword(unsigned __LONG32 Offset,unsigned __int64 Data)) intrinsic doesn't actually exist */

    __MACHINE(__MINGW_EXTENSION __int64 __cdecl _abs64(__int64))

    /* __MACHINEIW64(unsigned char _BitScanForward(unsigned __LONG32 *Index,unsigned __LONG32 Mask)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(unsigned char _BitScanReverse(unsigned __LONG32 *Index,unsigned __LONG32 Mask)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _BitScanForward64(unsigned __LONG32 *Index,unsigned __int64 Mask)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned char _BitScanReverse64(unsigned __LONG32 *Index,unsigned __int64 Mask)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIW64(_CRTIMP wchar_t *__cdecl _wcsset(wchar_t *,wchar_t))
    /* __MACHINEW64(__MINGW_EXTENSION unsigned __int64 __shiftleft128(unsigned __int64 LowPart,unsigned __int64 HighPart,unsigned char Shift)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned __int64 __shiftright128(unsigned __int64 LowPart,unsigned __int64 HighPart,unsigned char Shift)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION unsigned __int64 _umul128(unsigned __int64 multiplier,unsigned __int64 multiplicand,unsigned __int64 *highproduct)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEW64(__MINGW_EXTENSION __int64 _mul128(__int64 multiplier,__int64 multiplicand,__int64 *highproduct)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEI(void __int2c(void)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(void _ReadBarrier(void)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIW64(unsigned char _rotr8(unsigned char value,unsigned char shift))
    __MACHINEIW64(unsigned short _rotr16(unsigned short value,unsigned char shift))
    __MACHINEIW64(unsigned char _rotl8(unsigned char value,unsigned char shift))
    __MACHINEIW64(unsigned short _rotl16(unsigned short value,unsigned char shift))
    /* __MACHINEIW64(short _InterlockedIncrement16(short volatile *Addend)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(short _InterlockedDecrement16(short volatile *Addend)) moved to psdk_inc/intrin-impl.h */
    /* __MACHINEIW64(short _InterlockedCompareExchange16(short volatile *Destination,short Exchange,short Comparand)) moved to psdk_inc/intrin-impl.h */
    __MACHINEIA64(short _InterlockedIncrement16_acq(short volatile *Addend))
    __MACHINEIA64(short _InterlockedIncrement16_rel(short volatile *Addend))
    __MACHINEIA64(short _InterlockedDecrement16_acq(short volatile *Addend))
    __MACHINEIA64(short _InterlockedDecrement16_rel(short volatile *Addend))
    __MACHINEIA64(short _InterlockedCompareExchange16_acq(short volatile *Destination,short Exchange,short Comparand))
    __MACHINEIA64(short _InterlockedCompareExchange16_rel(short volatile *Destination,short Exchange,short Comparand))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddsb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddsw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddsd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddusb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddusw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paddusd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubsb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubsw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubsd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubusb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubusw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psubusd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaddwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmadduwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmulhw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmulhuw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmullw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmullw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmacsw(unsigned __int64 m1,unsigned __int64 m2,unsigned __int64 m3))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmacuw(unsigned __int64 m1,unsigned __int64 m2,unsigned __int64 m3))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmacszw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_padduzw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paccb(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paccw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paccd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmia(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmiaph(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmiabb(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmiabt(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmiatb(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmiatt(unsigned __int64 m1,int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psllw(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psllwi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pslld(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pslldi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psllq(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psllqi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psraw(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrawi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrad(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psradi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psraq(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psraqi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrlw(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrlwi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrld(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrldi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrlq(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psrlqi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prorw(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prorwi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prord(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prordi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prorq(unsigned __int64 m1,unsigned __int64 count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_prorqi(unsigned __int64 m1,int count))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pand(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pandn(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_por(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pxor(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpeqb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpeqw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpeqd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtub(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtuw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pcmpgtud(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packsswb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packssdw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packssqd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packuswb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packusdw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_packusqd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckhbw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckhwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckhdq(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpcklbw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpcklwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckldq(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehsbw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehswd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehsdq(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehubw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehuwd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckehudq(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckelsbw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckelswd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckelsdq(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckelubw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckeluwd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_punpckeludq(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_setzero_si64())
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set_pi32(int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set_pi16(short s3,short s2,short s1,short s0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set_pi8(char b7,char b6,char b5,char b4,char b3,char b2,char b1,char b0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set1_pi32(int i))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set1_pi16(short s))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_set1_pi8(char b))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_setr_pi32(int i1,int i0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_setr_pi16(short s3,short s2,short s1,short s0))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _mm_setr_pi8(char b7,char b6,char b5,char b4,char b3,char b2,char b1,char b0))
    __MACHINECC(void _mm_setwcx(int i1,int i0))
    __MACHINECC(int _mm_getwcx(int i))
    __MACHINECC(__MINGW_EXTENSION int _m_pextrb(unsigned __int64 m1,const int c))
    __MACHINECC(__MINGW_EXTENSION int _m_pextrd(unsigned __int64 m1,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned int _m_pextrub(unsigned __int64 m1,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned int _m_pextruw(unsigned __int64 m1,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned int _m_pextrud(unsigned __int64 m1,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pinsrb(unsigned __int64 m1,int i,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pinsrw(unsigned __int64 m1,int i,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pinsrd(unsigned __int64 m1,int i,const int c))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxsb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxsw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxsd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxub(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxuw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pmaxud(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminsb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminsw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminsd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminub(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminuw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pminud(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION int _m_pmovmskb(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION int _m_pmovmskw(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION int _m_pmovmskd(unsigned __int64 m1))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pshufw(unsigned __int64 m1,int i))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pavgb(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pavgw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pavg2b(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_pavg2w(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psadbw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psadwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psadzbw(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_psadzwd(unsigned __int64 m1,unsigned __int64 m2))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_paligniq(unsigned __int64 m1,unsigned __int64 m2,int i))
    __MACHINECC(__MINGW_EXTENSION unsigned __int64 _m_cvt_si2pi(__int64 i))
    __MACHINECC(__MINGW_EXTENSION __int64 _m_cvt_pi2si(unsigned __int64 m1))
    __MACHINEIW64(void __nvreg_save_fence(void))
    __MACHINEIW64(void __nvreg_restore_fence(void))

    __MACHINEX64(short _InterlockedCompareExchange16_np(short volatile *Destination,short Exchange,short Comparand))
    __MACHINEX64(__LONG32 _InterlockedCompareExchange_np (__LONG32 *,__LONG32,__LONG32))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompareExchange64_np(__int64 *,__int64,__int64))
    __MACHINEX64(void *_InterlockedCompareExchangePointer_np (void **,void *,void *))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_np(__int64 *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_acq_np(__int64 *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedCompare64Exchange128_rel_np(__int64 *Destination,__int64 ExchangeHigh,__int64 ExchangeLow,__int64 Comparand))
    __MACHINEX64(__LONG32 _InterlockedAnd_np(__LONG32 *,__LONG32))
    __MACHINEX64(char _InterlockedAnd8_np(char *,char))
    __MACHINEX64(short _InterlockedAnd16_np(short *,short))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedAnd64_np(__int64 *,__int64))
    __MACHINEX64(__LONG32 _InterlockedOr_np(__LONG32 *,__LONG32))
    __MACHINEX64(char _InterlockedOr8_np(char *,char))
    __MACHINEX64(short _InterlockedOr16_np(short *,short))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedOr64_np(__int64 *,__int64))
    __MACHINEX64(__LONG32 _InterlockedXor_np(__LONG32 *,__LONG32))
    __MACHINEX64(char _InterlockedXor8_np(char *,char))
    __MACHINEX64(short _InterlockedXor16_np(short *,short))
    __MACHINEX64(__MINGW_EXTENSION __int64 _InterlockedXor64_np(__int64 *,__int64))

#if defined(__ia64__)

#define __REG_IA64_Ip 1016

#define __REG_IA64_IntR0 1024
#define __REG_IA64_IntR1 1025
#define __REG_IA64_IntR2 1026
#define __REG_IA64_IntR3 1027
#define __REG_IA64_IntR4 1028
#define __REG_IA64_IntR5 1029
#define __REG_IA64_IntR6 1030
#define __REG_IA64_IntR7 1031
#define __REG_IA64_IntR8 1032
#define __REG_IA64_IntR9 1033
#define __REG_IA64_IntR10 1034
#define __REG_IA64_IntR11 1035
#define __REG_IA64_IntR12 1036
#define __REG_IA64_IntR13 1037
#define __REG_IA64_IntR14 1038
#define __REG_IA64_IntR15 1039
#define __REG_IA64_IntR16 1040
#define __REG_IA64_IntR17 1041
#define __REG_IA64_IntR18 1042
#define __REG_IA64_IntR19 1043
#define __REG_IA64_IntR20 1044
#define __REG_IA64_IntR21 1045
#define __REG_IA64_IntR22 1046
#define __REG_IA64_IntR23 1047
#define __REG_IA64_IntR24 1048
#define __REG_IA64_IntR25 1049
#define __REG_IA64_IntR26 1050
#define __REG_IA64_IntR27 1051
#define __REG_IA64_IntR28 1052
#define __REG_IA64_IntR29 1053
#define __REG_IA64_IntR30 1054
#define __REG_IA64_IntR31 1055

#define __REG_IA64_IntR32 1056
#define __REG_IA64_IntR33 1057
#define __REG_IA64_IntR34 1058
#define __REG_IA64_IntR35 1059
#define __REG_IA64_IntR36 1060
#define __REG_IA64_IntR37 1061
#define __REG_IA64_IntR38 1062
#define __REG_IA64_IntR39 1063
#define __REG_IA64_IntR40 1064
#define __REG_IA64_IntR41 1065
#define __REG_IA64_IntR42 1066
#define __REG_IA64_IntR43 1067
#define __REG_IA64_IntR44 1068
#define __REG_IA64_IntR45 1069
#define __REG_IA64_IntR46 1070
#define __REG_IA64_IntR47 1071
#define __REG_IA64_IntR48 1072
#define __REG_IA64_IntR49 1073
#define __REG_IA64_IntR50 1074
#define __REG_IA64_IntR51 1075
#define __REG_IA64_IntR52 1076
#define __REG_IA64_IntR53 1077
#define __REG_IA64_IntR54 1078
#define __REG_IA64_IntR55 1079
#define __REG_IA64_IntR56 1080
#define __REG_IA64_IntR57 1081
#define __REG_IA64_IntR58 1082
#define __REG_IA64_IntR59 1083
#define __REG_IA64_IntR60 1084
#define __REG_IA64_IntR61 1085
#define __REG_IA64_IntR62 1086
#define __REG_IA64_IntR63 1087
#define __REG_IA64_IntR64 1088
#define __REG_IA64_IntR65 1089
#define __REG_IA64_IntR66 1090
#define __REG_IA64_IntR67 1091
#define __REG_IA64_IntR68 1092
#define __REG_IA64_IntR69 1093
#define __REG_IA64_IntR70 1094
#define __REG_IA64_IntR71 1095
#define __REG_IA64_IntR72 1096
#define __REG_IA64_IntR73 1097
#define __REG_IA64_IntR74 1098
#define __REG_IA64_IntR75 1099
#define __REG_IA64_IntR76 1100
#define __REG_IA64_IntR77 1101
#define __REG_IA64_IntR78 1102
#define __REG_IA64_IntR79 1103
#define __REG_IA64_IntR80 1104
#define __REG_IA64_IntR81 1105
#define __REG_IA64_IntR82 1106
#define __REG_IA64_IntR83 1107
#define __REG_IA64_IntR84 1108
#define __REG_IA64_IntR85 1109
#define __REG_IA64_IntR86 1110
#define __REG_IA64_IntR87 1111
#define __REG_IA64_IntR88 1112
#define __REG_IA64_IntR89 1113
#define __REG_IA64_IntR90 1114
#define __REG_IA64_IntR91 1115
#define __REG_IA64_IntR92 1116
#define __REG_IA64_IntR93 1117
#define __REG_IA64_IntR94 1118
#define __REG_IA64_IntR95 1119
#define __REG_IA64_IntR96 1120
#define __REG_IA64_IntR97 1121
#define __REG_IA64_IntR98 1122
#define __REG_IA64_IntR99 1123
#define __REG_IA64_IntR100 1124
#define __REG_IA64_IntR101 1125
#define __REG_IA64_IntR102 1126
#define __REG_IA64_IntR103 1127
#define __REG_IA64_IntR104 1128
#define __REG_IA64_IntR105 1129
#define __REG_IA64_IntR106 1130
#define __REG_IA64_IntR107 1131
#define __REG_IA64_IntR108 1132
#define __REG_IA64_IntR109 1133
#define __REG_IA64_IntR110 1134
#define __REG_IA64_IntR111 1135
#define __REG_IA64_IntR112 1136
#define __REG_IA64_IntR113 1137
#define __REG_IA64_IntR114 1138
#define __REG_IA64_IntR115 1139
#define __REG_IA64_IntR116 1140
#define __REG_IA64_IntR117 1141
#define __REG_IA64_IntR118 1142
#define __REG_IA64_IntR119 1143
#define __REG_IA64_IntR120 1144
#define __REG_IA64_IntR121 1145
#define __REG_IA64_IntR122 1146
#define __REG_IA64_IntR123 1147
#define __REG_IA64_IntR124 1148
#define __REG_IA64_IntR125 1149
#define __REG_IA64_IntR126 1150
#define __REG_IA64_IntR127 1151

#define __REG_IA64_ApKR0 3072
#define __REG_IA64_ApKR1 3073
#define __REG_IA64_ApKR2 3074
#define __REG_IA64_ApKR3 3075
#define __REG_IA64_ApKR4 3076
#define __REG_IA64_ApKR5 3077
#define __REG_IA64_ApKR6 3078
#define __REG_IA64_ApKR7 3079
#define __REG_IA64_AR8 3080
#define __REG_IA64_AR9 3081
#define __REG_IA64_AR10 3082
#define __REG_IA64_AR11 3083
#define __REG_IA64_AR12 3084
#define __REG_IA64_AR13 3085
#define __REG_IA64_AR14 3086
#define __REG_IA64_AR15 3087
#define __REG_IA64_RsRSC 3088
#define __REG_IA64_RsBSP 3089
#define __REG_IA64_RsBSPSTORE 3090
#define __REG_IA64_RsRNAT 3091
#define __REG_IA64_AR20 3092
#define __REG_IA64_StFCR 3093
#define __REG_IA64_AR22 3094
#define __REG_IA64_AR23 3095
#define __REG_IA64_EFLAG 3096
#define __REG_IA64_CSD 3097
#define __REG_IA64_SSD 3098
#define __REG_IA64_CFLG 3099
#define __REG_IA64_StFSR 3100
#define __REG_IA64_StFIR 3101
#define __REG_IA64_StFDR 3102
#define __REG_IA64_AR31 3103
#define __REG_IA64_ApCCV 3104
#define __REG_IA64_AR33 3105
#define __REG_IA64_AR34 3106
#define __REG_IA64_AR35 3107
#define __REG_IA64_ApUNAT 3108
#define __REG_IA64_AR37 3109
#define __REG_IA64_AR38 3110
#define __REG_IA64_AR39 3111
#define __REG_IA64_StFPSR 3112
#define __REG_IA64_AR41 3113
#define __REG_IA64_AR42 3114
#define __REG_IA64_AR43 3115
#define __REG_IA64_ApITC 3116
#define __REG_IA64_AR45 3117
#define __REG_IA64_AR46 3118
#define __REG_IA64_AR47 3119
#define __REG_IA64_AR48 3120
#define __REG_IA64_AR49 3121
#define __REG_IA64_AR50 3122
#define __REG_IA64_AR51 3123
#define __REG_IA64_AR52 3124
#define __REG_IA64_AR53 3125
#define __REG_IA64_AR54 3126
#define __REG_IA64_AR55 3127
#define __REG_IA64_AR56 3128
#define __REG_IA64_AR57 3129
#define __REG_IA64_AR58 3130
#define __REG_IA64_AR59 3131
#define __REG_IA64_AR60 3132
#define __REG_IA64_AR61 3133
#define __REG_IA64_AR62 3134
#define __REG_IA64_AR63 3135
#define __REG_IA64_RsPFS 3136
#define __REG_IA64_ApLC 3137
#define __REG_IA64_ApEC 3138
#define __REG_IA64_AR67 3139
#define __REG_IA64_AR68 3140
#define __REG_IA64_AR69 3141
#define __REG_IA64_AR70 3142
#define __REG_IA64_AR71 3143
#define __REG_IA64_AR72 3144
#define __REG_IA64_AR73 3145
#define __REG_IA64_AR74 3146
#define __REG_IA64_AR75 3147
#define __REG_IA64_AR76 3148
#define __REG_IA64_AR77 3149
#define __REG_IA64_AR78 3150
#define __REG_IA64_AR79 3151
#define __REG_IA64_AR80 3152
#define __REG_IA64_AR81 3153
#define __REG_IA64_AR82 3154
#define __REG_IA64_AR83 3155
#define __REG_IA64_AR84 3156
#define __REG_IA64_AR85 3157
#define __REG_IA64_AR86 3158
#define __REG_IA64_AR87 3159
#define __REG_IA64_AR88 3160
#define __REG_IA64_AR89 3161
#define __REG_IA64_AR90 3162
#define __REG_IA64_AR91 3163
#define __REG_IA64_AR92 3164
#define __REG_IA64_AR93 3165
#define __REG_IA64_AR94 3166
#define __REG_IA64_AR95 3167
#define __REG_IA64_AR96 3168
#define __REG_IA64_AR97 3169
#define __REG_IA64_AR98 3170
#define __REG_IA64_AR99 3171
#define __REG_IA64_AR100 3172
#define __REG_IA64_AR101 3173
#define __REG_IA64_AR102 3174
#define __REG_IA64_AR103 3175
#define __REG_IA64_AR104 3176
#define __REG_IA64_AR105 3177
#define __REG_IA64_AR106 3178
#define __REG_IA64_AR107 3179
#define __REG_IA64_AR108 3180
#define __REG_IA64_AR109 3181
#define __REG_IA64_AR110 3182
#define __REG_IA64_AR111 3183
#define __REG_IA64_AR112 3184
#define __REG_IA64_AR113 3185
#define __REG_IA64_AR114 3186
#define __REG_IA64_AR115 3187
#define __REG_IA64_AR116 3188
#define __REG_IA64_AR117 3189
#define __REG_IA64_AR118 3190
#define __REG_IA64_AR119 3191
#define __REG_IA64_AR120 3192
#define __REG_IA64_AR121 3193
#define __REG_IA64_AR122 3194
#define __REG_IA64_AR123 3195
#define __REG_IA64_AR124 3196
#define __REG_IA64_AR125 3197
#define __REG_IA64_AR126 3198
#define __REG_IA64_AR127 3199

#define __REG_IA64_CPUID0 3328
#define __REG_IA64_CPUID1 3329
#define __REG_IA64_CPUID2 3330
#define __REG_IA64_CPUID3 3331
#define __REG_IA64_CPUID4 3332

#define __REG_IA64_ApDCR 4096
#define __REG_IA64_ApITM 4097
#define __REG_IA64_ApIVA 4098
#define __REG_IA64_ApPTA 4104
#define __REG_IA64_ApGPTA 4105
#define __REG_IA64_StIPSR 4112
#define __REG_IA64_StISR 4113
#define __REG_IA64_StIIP 4115
#define __REG_IA64_StIFA 4116
#define __REG_IA64_StITIR 4117
#define __REG_IA64_StIIPA 4118
#define __REG_IA64_StIFS 4119
#define __REG_IA64_StIIM 4120
#define __REG_IA64_StIHA 4121
#define __REG_IA64_SaLID 4160
#define __REG_IA64_SaIVR 4161
#define __REG_IA64_SaTPR 4162
#define __REG_IA64_SaEOI 4163
#define __REG_IA64_SaIRR0 4164
#define __REG_IA64_SaIRR1 4165
#define __REG_IA64_SaIRR2 4166
#define __REG_IA64_SaIRR3 4167
#define __REG_IA64_SaITV 4168
#define __REG_IA64_SaPMV 4169
#define __REG_IA64_SaCMCV 4170
#define __REG_IA64_SaLRR0 4176
#define __REG_IA64_SaLRR1 4177

#define __REG_IA64_PFD0 7168
#define __REG_IA64_PFD1 7169
#define __REG_IA64_PFD2 7170
#define __REG_IA64_PFD3 7171
#define __REG_IA64_PFD4 7172
#define __REG_IA64_PFD5 7173
#define __REG_IA64_PFD6 7174
#define __REG_IA64_PFD7 7175
#define __REG_IA64_PFD8 7176
#define __REG_IA64_PFD9 7177
#define __REG_IA64_PFD10 7178
#define __REG_IA64_PFD11 7179
#define __REG_IA64_PFD12 7180
#define __REG_IA64_PFD13 7181
#define __REG_IA64_PFD14 7182
#define __REG_IA64_PFD15 7183
#define __REG_IA64_PFD16 7184
#define __REG_IA64_PFD17 7185

#define __REG_IA64_PFC0 7424
#define __REG_IA64_PFC1 7425
#define __REG_IA64_PFC2 7426
#define __REG_IA64_PFC3 7427
#define __REG_IA64_PFC4 7428
#define __REG_IA64_PFC5 7429
#define __REG_IA64_PFC6 7430
#define __REG_IA64_PFC7 7431
#define __REG_IA64_PFC8 7432
#define __REG_IA64_PFC9 7433
#define __REG_IA64_PFC10 7434
#define __REG_IA64_PFC11 7435
#define __REG_IA64_PFC12 7436
#define __REG_IA64_PFC13 7437
#define __REG_IA64_PFC14 7438
#define __REG_IA64_PFC15 7439

#define __REG_IA64_DbI0 8448
#define __REG_IA64_DbI1 8449
#define __REG_IA64_DbI2 8450
#define __REG_IA64_DbI3 8451
#define __REG_IA64_DbI4 8452
#define __REG_IA64_DbI5 8453
#define __REG_IA64_DbI6 8454
#define __REG_IA64_DbI7 8455

#define __REG_IA64_DbD0 8576
#define __REG_IA64_DbD1 8577
#define __REG_IA64_DbD2 8578
#define __REG_IA64_DbD3 8579
#define __REG_IA64_DbD4 8580
#define __REG_IA64_DbD5 8581
#define __REG_IA64_DbD6 8582
#define __REG_IA64_DbD7 8583
#endif

#if defined(_NO_PREFETCHW)
#if defined(__x86_64)

#define _InterlockedCompareExchange16 _InterlockedCompareExchange16_np
#define _InterlockedCompareExchange _InterlockedCompareExchange_np
#define _InterlockedCompareExchange64 _InterlockedCompareExchange64_np
#define _InterlockedCompareExchangePointer _InterlockedCompareExchangePointer_np
#define _InterlockedCompare64Exchange128 _InterlockedCompare64Exchange128_np
#define _InterlockedCompare64Exchange128_acq _InterlockedCompare64Exchange128_acq_np
#define _InterlockedCompare64Exchange128_rel _InterlockedCompare64Exchange128_rel_np
#define _InterlockedAnd _InterlockedAnd_np
#define _InterlockedAnd8 _InterlockedAnd8_np
#define _InterlockedAnd16 _InterlockedAnd16_np
#define _InterlockedAnd64 _InterlockedAnd64_np
#define _InterlockedOr _InterlockedOr_np
#define _InterlockedOr8 _InterlockedOr8_np
#define _InterlockedOr16 _InterlockedOr16_np
#define _InterlockedOr64 _InterlockedOr64_np
#define _InterlockedXor _InterlockedXor_np
#define _InterlockedXor8 _InterlockedXor8_np
#define _InterlockedXor16 _InterlockedXor16_np
#define _InterlockedXor64 _InterlockedXor64_np
#endif
#endif

#if defined(__cplusplus)
}
#endif
#endif

#endif /* end __INTRIN_H_ */
                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/intshcut.h                                                              0100644 0000000 0000000 00000011440 12404413021 016343  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __INTSHCUT_H__
#define __INTSHCUT_H__

#include <_mingw_unicode.h>
#include <isguids.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _INTSHCUT_
#define INTSHCUTAPI
#else
#define INTSHCUTAPI DECLSPEC_IMPORT
#endif

#define E_FLAGS MAKE_SCODE(SEVERITY_ERROR,FACILITY_ITF,0x1000)
#define IS_E_EXEC_FAILED MAKE_SCODE(SEVERITY_ERROR,FACILITY_ITF,0x2002)
#define URL_E_INVALID_SYNTAX MAKE_SCODE(SEVERITY_ERROR,FACILITY_ITF,0x1001)
#define URL_E_UNREGISTERED_PROTOCOL MAKE_SCODE(SEVERITY_ERROR,FACILITY_ITF,0x1002)

  typedef enum iurl_seturl_flags {
    IURL_SETURL_FL_GUESS_PROTOCOL = 0x0001,IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 0x0002
  } IURL_SETURL_FLAGS;

  typedef enum iurl_invokecommand_flags {
    IURL_INVOKECOMMAND_FL_ALLOW_UI = 0x0001,IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 0x0002,IURL_INVOKECOMMAND_FL_DDEWAIT = 0x0004
  } IURL_INVOKECOMMAND_FLAGS;

  typedef struct urlinvokecommandinfoA {
    DWORD dwcbSize;
    DWORD dwFlags;
    HWND hwndParent;
    LPCSTR pcszVerb;
  } URLINVOKECOMMANDINFOA;

  typedef URLINVOKECOMMANDINFOA *PURLINVOKECOMMANDINFOA;
  typedef const URLINVOKECOMMANDINFOA CURLINVOKECOMMANDINFOA;
  typedef const URLINVOKECOMMANDINFOA *PCURLINVOKECOMMANDINFOA;

  typedef struct urlinvokecommandinfoW {
    DWORD dwcbSize;
    DWORD dwFlags;
    HWND hwndParent;
    LPCWSTR pcszVerb;
  } URLINVOKECOMMANDINFOW;

  typedef URLINVOKECOMMANDINFOW *PURLINVOKECOMMANDINFOW;
  typedef const URLINVOKECOMMANDINFOW CURLINVOKECOMMANDINFOW;
  typedef const URLINVOKECOMMANDINFOW *PCURLINVOKECOMMANDINFOW;

#define URLINVOKECOMMANDINFO __MINGW_NAME_AW(URLINVOKECOMMANDINFO)
#define PURLINVOKECOMMANDINFO __MINGW_NAME_AW(PURLINVOKECOMMANDINFO)
#define CURLINVOKECOMMANDINFO __MINGW_NAME_AW(CURLINVOKECOMMANDINFO)
#define PCURLINVOKECOMMANDINFO __MINGW_NAME_AW(PCURLINVOKECOMMANDINFO)

#undef INTERFACE
#define INTERFACE IUniformResourceLocatorA

  DECLARE_INTERFACE_(IUniformResourceLocatorA,IUnknown) {
    STDMETHOD(QueryInterface)(THIS_ REFIID riid,PVOID *ppvObject) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(SetURL)(THIS_ LPCSTR pcszURL,DWORD dwInFlags) PURE;
    STDMETHOD(GetURL)(THIS_ LPSTR *ppszURL) PURE;
    STDMETHOD(InvokeCommand)(THIS_ PURLINVOKECOMMANDINFOA purlici) PURE;
  };

#undef INTERFACE
#define INTERFACE IUniformResourceLocatorW
  DECLARE_INTERFACE_(IUniformResourceLocatorW,IUnknown) {
    STDMETHOD(QueryInterface)(THIS_ REFIID riid,PVOID *ppvObject) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(SetURL)(THIS_ LPCWSTR pcszURL,DWORD dwInFlags) PURE;
    STDMETHOD(GetURL)(THIS_ LPWSTR *ppszURL) PURE;
    STDMETHOD(InvokeCommand)(THIS_ PURLINVOKECOMMANDINFOW purlici) PURE;
  };

#define IUniformResourceLocator __MINGW_NAME_AW(IUniformResourceLocator)

#define IUniformResourceLocatorVtbl __MINGW_NAME_AW_EXT(IUniformResourceLocator,Vtbl)

  typedef IUniformResourceLocator *PIUniformResourceLocator;
  typedef const IUniformResourceLocator CIUniformResourceLocator;
  typedef const IUniformResourceLocator *PCIUniformResourceLocator;

  typedef enum translateurl_in_flags {
    TRANSLATEURL_FL_GUESS_PROTOCOL = 0x0001,TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 0x0002
  } TRANSLATEURL_IN_FLAGS;

  INTSHCUTAPI HRESULT WINAPI TranslateURLA(PCSTR pcszURL,DWORD dwInFlags,PSTR *ppszTranslatedURL);
  INTSHCUTAPI HRESULT WINAPI TranslateURLW(PCWSTR pcszURL,DWORD dwInFlags,PWSTR UNALIGNED *ppszTranslatedURL);

#define TranslateURL __MINGW_NAME_AW(TranslateURL)

  typedef enum urlassociationdialog_in_flags {
    URLASSOCDLG_FL_USE_DEFAULT_NAME = 0x0001,URLASSOCDLG_FL_REGISTER_ASSOC = 0x0002
  } URLASSOCIATIONDIALOG_IN_FLAGS;

  INTSHCUTAPI HRESULT WINAPI URLAssociationDialogA(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszURL,PSTR pszAppBuf,UINT ucAppBufLen);
  INTSHCUTAPI HRESULT WINAPI URLAssociationDialogW(HWND hwndParent,DWORD dwInFlags,PCWSTR pcszFile,PCWSTR pcszURL,PWSTR pszAppBuf,UINT ucAppBufLen);

#define URLAssociationDialog __MINGW_NAME_AW(URLAssociationDialog)

  typedef enum mimeassociationdialog_in_flags {
    MIMEASSOCDLG_FL_REGISTER_ASSOC = 0x0001
  } MIMEASSOCIATIONDIALOG_IN_FLAGS;

  INTSHCUTAPI HRESULT WINAPI MIMEAssociationDialogA(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszMIMEContentType,PSTR pszAppBuf,UINT ucAppBufLen);
  INTSHCUTAPI HRESULT WINAPI MIMEAssociationDialogW(HWND hwndParent,DWORD dwInFlags,PCWSTR pcszFile,PCWSTR pcszMIMEContentType,PWSTR pszAppBuf,UINT ucAppBufLen);

#define MIMEAssociationDialog __MINGW_NAME_AW(MIMEAssociationDialog)

  INTSHCUTAPI WINBOOL WINAPI InetIsOffline(DWORD dwFlags);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                usr/share/mingw-w64/include/inttypes.h                                                              0100644 0000000 0000000 00000014217 12404413015 016371  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
/* 7.8 Format conversion of integer types <inttypes.h> */

#ifndef _INTTYPES_H_
#define _INTTYPES_H_

#include <crtdefs.h>
#include <stdint.h>
#define __need_wchar_t
#include <stddef.h>

#ifdef	__cplusplus
extern	"C"	{
#endif

typedef struct {
	intmax_t quot;
	intmax_t rem;
	} imaxdiv_t;

/* Restore to !define(__USE_MINGW_ANSI_STDIO) */
#include <_mingw_print_push.h>

#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS)

/* 7.8.1 Macros for format specifiers
 * 
 * MS runtime does not yet understand C9x standard "ll"
 * length specifier. It appears to treat "ll" as "l".
 * The non-standard I64 length specifier causes warning in GCC,
 * but understood by MS runtime functions.
 */

/* fprintf macros for signed types */
#define PRId8 "d"
#define PRId16 "d"
#define PRId32 "d"
#define PRId64 "I64d"

#define PRIdLEAST8 "d"
#define PRIdLEAST16 "d"
#define PRIdLEAST32 "d"
#define PRIdLEAST64 "I64d"

#define PRIdFAST8 "d"
#define PRIdFAST16 "d"
#define PRIdFAST32 "d"
#define PRIdFAST64 "I64d"

#define PRIdMAX "I64d"

#define PRIi8 "i"
#define PRIi16 "i"
#define PRIi32 "i"
#define PRIi64 "I64i"

#define PRIiLEAST8 "i"
#define PRIiLEAST16 "i"
#define PRIiLEAST32 "i"
#define PRIiLEAST64 "I64i"

#define PRIiFAST8 "i"
#define PRIiFAST16 "i"
#define PRIiFAST32 "i"
#define PRIiFAST64 "I64i"

#define PRIiMAX "I64i"

#define PRIo8 "o"
#define PRIo16 "o"
#define PRIo32 "o"
#define PRIo64 "I64o"

#define PRIoLEAST8 "o"
#define PRIoLEAST16 "o"
#define PRIoLEAST32 "o"
#define PRIoLEAST64 "I64o"

#define PRIoFAST8 "o"
#define PRIoFAST16 "o"
#define PRIoFAST32 "o"
#define PRIoFAST64 "I64o"

#define PRIoMAX "I64o"

/* fprintf macros for unsigned types */
#define PRIu8 "u"
#define PRIu16 "u"
#define PRIu32 "u"
#define PRIu64 "I64u"


#define PRIuLEAST8 "u"
#define PRIuLEAST16 "u"
#define PRIuLEAST32 "u"
#define PRIuLEAST64 "I64u"

#define PRIuFAST8 "u"
#define PRIuFAST16 "u"
#define PRIuFAST32 "u"
#define PRIuFAST64 "I64u"

#define PRIuMAX "I64u"

#define PRIx8 "x"
#define PRIx16 "x"
#define PRIx32 "x"
#define PRIx64 "I64x"

#define PRIxLEAST8 "x"
#define PRIxLEAST16 "x"
#define PRIxLEAST32 "x"
#define PRIxLEAST64 "I64x"

#define PRIxFAST8 "x"
#define PRIxFAST16 "x"
#define PRIxFAST32 "x"
#define PRIxFAST64 "I64x"

#define PRIxMAX "I64x"

#define PRIX8 "X"
#define PRIX16 "X"
#define PRIX32 "X"
#define PRIX64 "I64X"

#define PRIXLEAST8 "X"
#define PRIXLEAST16 "X"
#define PRIXLEAST32 "X"
#define PRIXLEAST64 "I64X"

#define PRIXFAST8 "X"
#define PRIXFAST16 "X"
#define PRIXFAST32 "X"
#define PRIXFAST64 "I64X"

#define PRIXMAX "I64X"

/*
 *   fscanf macros for signed int types
 *   NOTE: if 32-bit int is used for int_fast8_t and int_fast16_t
 *   (see stdint.h, 7.18.1.3), FAST8 and FAST16 should have
 *   no length identifiers
 */

#define SCNd16 "hd"
#define SCNd32 "d"
#define SCNd64 "I64d"

#define SCNdLEAST16 "hd"
#define SCNdLEAST32 "d"
#define SCNdLEAST64 "I64d"

#define SCNdFAST16 "hd"
#define SCNdFAST32 "d"
#define SCNdFAST64 "I64d"

#define SCNdMAX "I64d"

#define SCNi16 "hi"
#define SCNi32 "i"
#define SCNi64 "I64i"

#define SCNiLEAST16 "hi"
#define SCNiLEAST32 "i"
#define SCNiLEAST64 "I64i"

#define SCNiFAST16 "hi"
#define SCNiFAST32 "i"
#define SCNiFAST64 "I64i"

#define SCNiMAX "I64i"

#define SCNo16 "ho"
#define SCNo32 "o"
#define SCNo64 "I64o"

#define SCNoLEAST16 "ho"
#define SCNoLEAST32 "o"
#define SCNoLEAST64 "I64o"

#define SCNoFAST16 "ho"
#define SCNoFAST32 "o"
#define SCNoFAST64 "I64o"

#define SCNoMAX "I64o"

#define SCNx16 "hx"
#define SCNx32 "x"
#define SCNx64 "I64x"

#define SCNxLEAST16 "hx"
#define SCNxLEAST32 "x"
#define SCNxLEAST64 "I64x"

#define SCNxFAST16 "hx"
#define SCNxFAST32 "x"
#define SCNxFAST64 "I64x"

#define SCNxMAX "I64x"

/* fscanf macros for unsigned int types */

#define SCNu16 "hu"
#define SCNu32 "u"
#define SCNu64 "I64u"

#define SCNuLEAST16 "hu"
#define SCNuLEAST32 "u"
#define SCNuLEAST64 "I64u"

#define SCNuFAST16 "hu"
#define SCNuFAST32 "u"
#define SCNuFAST64 "I64u"

#define SCNuMAX "I64u"

#ifdef _WIN64
#define PRIdPTR "I64d"
#define PRIiPTR "I64i"
#define PRIoPTR "I64o"
#define PRIuPTR "I64u"
#define PRIxPTR "I64x"
#define PRIXPTR "I64X"
#define SCNdPTR "I64d"
#define SCNiPTR "I64i"
#define SCNoPTR "I64o"
#define SCNxPTR "I64x"
#define SCNuPTR "I64u"
#else
#define PRIdPTR "d"
#define PRIiPTR "i"
#define PRIoPTR "o"
#define PRIuPTR "u"
#define PRIxPTR "x"
#define PRIXPTR "X"
#define SCNdPTR "d"
#define SCNiPTR "i"
#define SCNoPTR "o"
#define SCNxPTR "x"
 #define SCNuPTR "u"
#endif

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/*
 * no length modifier for char types prior to C9x
 * MS runtime  scanf appears to treat "hh" as "h" 
 */

/* signed char */
#define SCNd8 "hhd"
#define SCNdLEAST8 "hhd"
#define SCNdFAST8 "hhd"

#define SCNi8 "hhi"
#define SCNiLEAST8 "hhi"
#define SCNiFAST8 "hhi"

#define SCNo8 "hho"
#define SCNoLEAST8 "hho"
#define SCNoFAST8 "hho"

#define SCNx8 "hhx"
#define SCNxLEAST8 "hhx"
#define SCNxFAST8 "hhx"

/* unsigned char */
#define SCNu8 "hhu"
#define SCNuLEAST8 "hhu"
#define SCNuFAST8 "hhu"
#endif /* __STDC_VERSION__ >= 199901 */

#endif	/* !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) */

intmax_t __cdecl imaxabs (intmax_t j);
#ifndef __CRT__NO_INLINE
__CRT_INLINE intmax_t __cdecl imaxabs (intmax_t j)
	{return	(j >= 0 ? j : -j);}
#endif
imaxdiv_t __cdecl imaxdiv (intmax_t numer, intmax_t denom);

/* 7.8.2 Conversion functions for greatest-width integer types */

intmax_t __cdecl strtoimax (const char* __restrict__ nptr,
                            char** __restrict__ endptr, int base);
uintmax_t __cdecl strtoumax (const char* __restrict__ nptr,
			     char** __restrict__ endptr, int base);

intmax_t __cdecl wcstoimax (const wchar_t* __restrict__ nptr,
                            wchar_t** __restrict__ endptr, int base);
uintmax_t __cdecl wcstoumax (const wchar_t* __restrict__ nptr,
			     wchar_t** __restrict__ endptr, int base);

/* Set PRI... and SCN... according to __USE_MINGW_ANSI_STDIO.  */
#include <_mingw_print_pop.h>

#ifdef	__cplusplus
}
#endif

#endif /* ndef _INTTYPES_H */
                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/invkprxy.h                                                              0100644 0000000 0000000 00000001701 12404413021 016373  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _INC_INVKPRXY
#define _INC_INVKPRXY 1

#ifndef WINAPI
#define WINAPI __stdcall
#endif

HRESULT WINAPI _com_handle_excepinfo(EXCEPINFO& excepInfo,IErrorInfo **pperrinfo);
HRESULT __cdecl _com_invoke_helper(IDispatch *pDispatch,DISPID dwDispID,WORD wFlags,VARTYPE vtRet,void *pvRet,const wchar_t *pwParamInfo,va_list argList,IErrorInfo **pperrinfo);
HRESULT __cdecl _com_dispatch_raw_method(IDispatch *pDispatch,DISPID dwDispID,WORD wFlags,VARTYPE vtRet,void *pvRet,const wchar_t *pwParamInfo,...) throw();
HRESULT WINAPI _com_dispatch_raw_propget(IDispatch *pDispatch,DISPID dwDispID,VARTYPE vtProp,void *pvProp) throw();
HRESULT __cdecl _com_dispatch_raw_propput(IDispatch *pDispatch,DISPID dwDispID,VARTYPE vtProp,...) throw();

#endif
                                                               usr/share/mingw-w64/include/io.h                                                                    0100644 0000000 0000000 00000032446 12404413015 015125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IO_H_
#define _IO_H_

#include <crtdefs.h>
#include <string.h>

#pragma pack(push,_CRT_PACKING)

#ifdef __cplusplus
extern "C" {
#endif

_CRTIMP char* __cdecl _getcwd (char*, int);
#ifndef _FSIZE_T_DEFINED
  typedef unsigned long _fsize_t;
#define _FSIZE_T_DEFINED
#endif

#ifndef _FINDDATA_T_DEFINED

  struct _finddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    char name[260];
  };

  struct _finddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __MINGW_EXTENSION __int64 size;
    char name[260];
  };

  struct _finddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    char name[260];
  };

  struct __finddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __MINGW_EXTENSION __int64 size;
    char name[260];
  };

#ifdef _USE_32BIT_TIME_T
#define _finddata_t _finddata32_t
#define _finddatai64_t _finddata32i64_t

#define _findfirst32 _findfirst
#define _findnext32 _findnext
#define _findfirsti64 _findfirst32i64
#define _findnexti64 _findnext32i64
#else
#define _finddata_t _finddata64i32_t
#define _finddatai64_t __finddata64_t

#define _findfirst _findfirst64i32
#define _findnext _findnext64i32
#define _findfirsti64 _findfirst64
#define _findnexti64 _findnext64
#endif /* _USE_32BIT_TIME_T */

#define _FINDDATA_T_DEFINED
#endif /* _FINDDATA_T_DEFINED */

#ifndef _WFINDDATA_T_DEFINED

  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __MINGW_EXTENSION __int64 size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __MINGW_EXTENSION __int64 size;
    wchar_t name[260];
  };

#ifdef _USE_32BIT_TIME_T
#define _wfinddata_t _wfinddata32_t
#define _wfinddatai64_t _wfinddata32i64_t

#define _wfindfirst32 _wfindfirst
#define _wfindnext32 _wfindnext
#define _wfindfirst32i64 _wfindfirsti64
#define _wfindnext32i64 _wfindnexti64
#else
#define _wfinddata_t _wfinddata64i32_t
#define _wfinddatai64_t _wfinddata64_t

#define _wfindfirst _wfindfirst64i32
#define _wfindnext _wfindnext64i32
#define _wfindfirsti64 _wfindfirst64
#define _wfindnexti64 _wfindnext64
#endif /* _USE_32BIT_TIME_T */

#define _WFINDDATA_T_DEFINED
#endif /* _WFINDDATA_T_DEFINED */

#define _A_NORMAL 0x00
#define _A_RDONLY 0x01
#define _A_HIDDEN 0x02
#define _A_SYSTEM 0x04
#define _A_SUBDIR 0x10
#define _A_ARCH 0x20

#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
#undef size_t
#ifdef _WIN64
  __MINGW_EXTENSION typedef unsigned __int64 size_t;
#else
  typedef unsigned int size_t;
#endif /* _WIN64 */
#endif /* _SIZE_T_DEFINED */

#ifndef _SSIZE_T_DEFINED
#define _SSIZE_T_DEFINED
#undef ssize_t
#ifdef _WIN64
  __MINGW_EXTENSION typedef __int64 ssize_t;
#else
  typedef int ssize_t;
#endif /* _WIN64 */
#endif /* _SSIZE_T_DEFINED */

#include <_mingw_off_t.h>

  /* Some defines for _access nAccessMode (MS doesn't define them, but
  * it doesn't seem to hurt to add them). */
#define	F_OK	0	/* Check for file existence */
#define	X_OK	1	/* Check for execute permission. */
#define	W_OK	2	/* Check for write permission */
#define	R_OK	4	/* Check for read permission */

  _CRTIMP int __cdecl _access(const char *_Filename,int _AccessMode);
  _CRTIMP int __cdecl _chmod(const char *_Filename,int _Mode);
  _CRTIMP int __cdecl _chsize(int _FileHandle,long _Size) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _close(int _FileHandle);
  _CRTIMP int __cdecl _commit(int _FileHandle);
  _CRTIMP int __cdecl _creat(const char *_Filename,int _PermissionMode) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _dup(int _FileHandle);
  _CRTIMP int __cdecl _dup2(int _FileHandleSrc,int _FileHandleDst);
  _CRTIMP int __cdecl _eof(int _FileHandle);
  _CRTIMP long __cdecl _filelength(int _FileHandle);
  _CRTIMP intptr_t __cdecl _findfirst32(const char *_Filename,struct _finddata32_t *_FindData);
  _CRTIMP int __cdecl _findnext32(intptr_t _FindHandle,struct _finddata32_t *_FindData);
  _CRTIMP int __cdecl _findclose(intptr_t _FindHandle);
  _CRTIMP int __cdecl _isatty(int _FileHandle);
  _CRTIMP int __cdecl _locking(int _FileHandle,int _LockMode,long _NumOfBytes);
  _CRTIMP long __cdecl _lseek(int _FileHandle,long _Offset,int _Origin);
  _off64_t lseek64(int fd,_off64_t offset, int whence);
  _CRTIMP char *__cdecl _mktemp(char *_TemplateName) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _pipe(int *_PtHandles,unsigned int _PipeSize,int _TextMode);
  _CRTIMP int __cdecl _read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount);

#ifndef _CRT_DIRECTORY_DEFINED
#define _CRT_DIRECTORY_DEFINED
  int __cdecl remove(const char *_Filename);
  int __cdecl rename(const char *_OldFilename,const char *_NewFilename);
  _CRTIMP int __cdecl _unlink(const char *_Filename);
#ifndef	NO_OLDNAMES
  int __cdecl unlink(const char *_Filename) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
#endif
#endif

  _CRTIMP int __cdecl _setmode(int _FileHandle,int _Mode);
  _CRTIMP long __cdecl _tell(int _FileHandle);
  _CRTIMP int __cdecl _umask(int _Mode) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _write(int _FileHandle,const void *_Buf,unsigned int _MaxCharCount);

  __MINGW_EXTENSION _CRTIMP __int64 __cdecl _filelengthi64(int _FileHandle);
  _CRTIMP intptr_t __cdecl _findfirst32i64(const char *_Filename,struct _finddata32i64_t *_FindData);
  _CRTIMP intptr_t __cdecl _findfirst64(const char *_Filename,struct __finddata64_t *_FindData);
#ifdef __cplusplus
#include <string.h>
#endif
  intptr_t __cdecl _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData);
#ifndef __CRT__NO_INLINE
  __CRT_INLINE intptr_t __cdecl _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData)
  {
    struct __finddata64_t fd;
    intptr_t ret = _findfirst64(_Filename,&fd);
    if (ret == -1) {
      memset(_FindData,0,sizeof(struct _finddata64i32_t));
      return -1;
    }
    _FindData->attrib=fd.attrib;
    _FindData->time_create=fd.time_create;
    _FindData->time_access=fd.time_access;
    _FindData->time_write=fd.time_write;
    _FindData->size=(_fsize_t) fd.size;
    strncpy(_FindData->name,fd.name,260);
    return ret;
  }
#endif /* __CRT__NO_INLINE */
  _CRTIMP int __cdecl _findnext32i64(intptr_t _FindHandle,struct _finddata32i64_t *_FindData);
  _CRTIMP int __cdecl _findnext64(intptr_t _FindHandle,struct __finddata64_t *_FindData);
  int __cdecl _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData);
#ifndef __CRT__NO_INLINE
  __CRT_INLINE int __cdecl _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData)
  {
    struct __finddata64_t fd;
    int ret = _findnext64(_FindHandle,&fd);
    if (ret == -1) {
      memset(_FindData,0,sizeof(struct _finddata64i32_t));
      return -1;
    }
    _FindData->attrib=fd.attrib;
    _FindData->time_create=fd.time_create;
    _FindData->time_access=fd.time_access;
    _FindData->time_write=fd.time_write;
    _FindData->size=(_fsize_t) fd.size;
    strncpy(_FindData->name,fd.name,260);
    return ret;
  }
#endif /* __CRT__NO_INLINE */
  __MINGW_EXTENSION __int64 __cdecl _lseeki64(int _FileHandle,__int64 _Offset,int _Origin);
  __MINGW_EXTENSION __int64 __cdecl _telli64(int _FileHandle);

#ifndef NO_OLDNAMES
#ifndef _UWIN
  int __cdecl chdir (const char *) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  char *__cdecl getcwd (char *, int) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl mkdir (const char *) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  char *__cdecl mktemp(char *) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl rmdir (const char*) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl chmod (const char *, int) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
#endif /* _UWIN */
#endif /* Not NO_OLDNAMES */

  _CRTIMP errno_t __cdecl _sopen_s(int *_FileHandle,const char *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionMode);

  _CRTIMP int __cdecl _open(const char *_Filename,int _OpenFlag,...) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;

#ifndef _WIO_DEFINED
#define _WIO_DEFINED
  _CRTIMP int __cdecl _waccess(const wchar_t *_Filename,int _AccessMode);
  _CRTIMP int __cdecl _wchmod(const wchar_t *_Filename,int _Mode);
  _CRTIMP int __cdecl _wcreat(const wchar_t *_Filename,int _PermissionMode) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP intptr_t __cdecl _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  _CRTIMP int __cdecl _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  _CRTIMP int __cdecl _wunlink(const wchar_t *_Filename);
  _CRTIMP int __cdecl _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  _CRTIMP wchar_t *__cdecl _wmktemp(wchar_t *_TemplateName) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;

  _CRTIMP intptr_t __cdecl _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __cdecl _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  _CRTIMP intptr_t __cdecl _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  _CRTIMP int __cdecl _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __cdecl _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  _CRTIMP int __cdecl _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);

  _CRTIMP errno_t __cdecl _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);

  _CRTIMP int __cdecl _wopen(const wchar_t *_Filename,int _OpenFlag,...) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;
  _CRTIMP int __cdecl _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;

#endif

  int __cdecl __lock_fhandle(int _Filehandle);
  void __cdecl _unlock_fhandle(int _Filehandle);
  _CRTIMP intptr_t __cdecl _get_osfhandle(int _FileHandle);
  _CRTIMP int __cdecl _open_osfhandle(intptr_t _OSFileHandle,int _Flags);

#ifndef NO_OLDNAMES
  int __cdecl access(const char *_Filename,int _AccessMode) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl chmod(const char *_Filename,int _AccessMode) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl chsize(int _FileHandle,long _Size) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl close(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl creat(const char *_Filename,int _PermissionMode) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl dup(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl dup2(int _FileHandleSrc,int _FileHandleDst) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl eof(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  long __cdecl filelength(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl isatty(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl locking(int _FileHandle,int _LockMode,long _NumOfBytes) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  long __cdecl lseek(int _FileHandle,long _Offset,int _Origin) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  char *__cdecl mktemp(char *_TemplateName)  __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl open(const char *_Filename,int _OpenFlag,...)  __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount)  __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl setmode(int _FileHandle,int _Mode) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  long __cdecl tell(int _FileHandle) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl umask(int _Mode) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
  int __cdecl write(int _Filehandle,const void *_Buf,unsigned int _MaxCharCount) __MINGW_ATTRIB_DEPRECATED_MSVC2005;
#endif

#ifndef _FILE_OFFSET_BITS_SET_LSEEK
#define _FILE_OFFSET_BITS_SET_LSEEK
#if (defined(_FILE_OFFSET_BITS) && (_FILE_OFFSET_BITS == 64))
#define lseek lseek64
#endif /* (defined(_FILE_OFFSET_BITS) && (_FILE_OFFSET_BITS == 64)) */
#endif /* _FILE_OFFSET_BITS_SET_LSEEK */

#ifdef _POSIX

/* Misc stuff */
char *getlogin(void);
#ifdef __USE_MINGW_ALARM
unsigned int alarm(unsigned int seconds);
#endif

#endif

#ifdef __USE_MINGW_ACCESS
/*  Old versions of MSVCRT access() just ignored X_OK, while the version
    shipped with Vista, returns an error code.  This will restore the
    old behaviour  */
static inline int __mingw_access (const char *__fname, int __mode) {
  return  _access (__fname, __mode & ~X_OK);
}

#define access(__f,__m)  __mingw_access (__f, __m)
#endif


#ifdef __cplusplus
}
#endif


#pragma pack(pop)

#include <sec_api/io_s.h>

#endif /* End _IO_H_ */

                                                                                                                                                                                                                          usr/share/mingw-w64/include/ioapiset.h                                                              0100644 0000000 0000000 00000003663 12404413021 016327  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#ifndef _IO_APISET_H_
#define _IO_APISET_H_

#include <apiset.h>
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

#ifdef __cplusplus
extern "C" {
#endif

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)
  WINBASEAPI WINBOOL WINAPI GetOverlappedResult (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
  WINBASEAPI HANDLE WINAPI CreateIoCompletionPort (HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
  WINBASEAPI WINBOOL WINAPI GetQueuedCompletionStatus (HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
  WINBASEAPI WINBOOL WINAPI PostQueuedCompletionStatus (HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
  WINBASEAPI WINBOOL WINAPI DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
  WINBASEAPI WINBOOL WINAPI CancelIo (HANDLE hFile);
#if _WIN32_WINNT >= 0x0600
  WINBASEAPI WINBOOL WINAPI GetQueuedCompletionStatusEx (HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, WINBOOL fAlertable);
  WINBASEAPI WINBOOL WINAPI CancelIoEx (HANDLE hFile, LPOVERLAPPED lpOverlapped);
  WINBASEAPI WINBOOL WINAPI CancelSynchronousIo (HANDLE hThread);
#endif
#endif

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_APP)
  WINBASEAPI WINBOOL WINAPI GetOverlappedResultEx (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, WINBOOL bAlertable);
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                             usr/share/mingw-w64/include/ioevent.h                                                               0100644 0000000 0000000 00000006220 12404413021 016153  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
DEFINE_GUID(GUID_IO_VOLUME_CHANGE,0x7373654a,0x812a,0x11d0,0xbe,0xc7,0x08,0x00,0x2b,0xe2,0x09,0x2f);
DEFINE_GUID(GUID_IO_VOLUME_DISMOUNT,0xd16a55e8,0x1059,0x11d2,0x8f,0xfd,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_DISMOUNT_FAILED,0xe3c5b178,0x105d,0x11d2,0x8f,0xfd,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_MOUNT,0xb5804878,0x1a96,0x11d2,0x8f,0xfd,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_LOCK,0x50708874,0xc9af,0x11d1,0x8f,0xef,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_LOCK_FAILED,0xae2eed10,0x0ba8,0x11d2,0x8f,0xfb,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_UNLOCK,0x9a8c3d68,0xd0cb,0x11d1,0x8f,0xef,0x00,0xa0,0xc9,0xa0,0x6d,0x32);
DEFINE_GUID(GUID_IO_VOLUME_NAME_CHANGE,0x2de97f83,0x4c06,0x11d2,0xa5,0x32,0x0,0x60,0x97,0x13,0x5,0x5a);
DEFINE_GUID(GUID_IO_VOLUME_PHYSICAL_CONFIGURATION_CHANGE,0x2de97f84,0x4c06,0x11d2,0xa5,0x32,0x0,0x60,0x97,0x13,0x5,0x5a);
DEFINE_GUID(GUID_IO_VOLUME_DEVICE_INTERFACE,0x53f5630d,0xb6bf,0x11d0,0x94,0xf2,0x00,0xa0,0xc9,0x1e,0xfb,0x8b);
DEFINE_GUID(GUID_IO_MEDIA_ARRIVAL,0xd07433c0,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);
DEFINE_GUID(GUID_IO_MEDIA_REMOVAL,0xd07433c1,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);
DEFINE_GUID(GUID_IO_DEVICE_BECOMING_READY,0xd07433f0,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);

typedef struct _DEVICE_EVENT_BECOMING_READY {
  ULONG Version;
  ULONG Reason;
  ULONG Estimated100msToReady;
} DEVICE_EVENT_BECOMING_READY,*PDEVICE_EVENT_BECOMING_READY;

DEFINE_GUID(GUID_IO_DEVICE_EXTERNAL_REQUEST,0xd07433d0,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);
DEFINE_GUID(GUID_IO_MEDIA_EJECT_REQUEST,0xd07433d1,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);

typedef struct _DEVICE_EVENT_EXTERNAL_REQUEST {
  ULONG Version;
  ULONG DeviceClass;
  USHORT ButtonStatus;
  USHORT Request;
  LARGE_INTEGER SystemTime;
} DEVICE_EVENT_EXTERNAL_REQUEST,*PDEVICE_EVENT_EXTERNAL_REQUEST;

DEFINE_GUID(GUID_IO_DRIVE_REQUIRES_CLEANING,0x7207877c,0x90ed,0x44e5,0xa0,0x0,0x81,0x42,0x8d,0x4c,0x79,0xbb);
DEFINE_GUID(GUID_IO_TAPE_ERASE,0x852d11eb,0x4bb8,0x4507,0x9d,0x9b,0x41,0x7c,0xc2,0xb1,0xb4,0x38);

typedef struct _DEVICE_EVENT_GENERIC_DATA {
  ULONG EventNumber;
} DEVICE_EVENT_GENERIC_DATA,*PDEVICE_EVENT_GENERIC_DATA;

DEFINE_GUID(GUID_DEVICE_EVENT_RBC,0xd0744792,0xa98e,0x11d2,0x91,0x7a,0x00,0xa0,0xc9,0x06,0x8f,0xf3);

typedef struct _DEVICE_EVENT_RBC_DATA {
  ULONG EventNumber;
  UCHAR SenseQualifier;
  UCHAR SenseCode;
  UCHAR SenseKey;
  UCHAR Reserved;
  ULONG Information;
} DEVICE_EVENT_RBC_DATA,*PDEVICE_EVENT_RBC_DATA;

DEFINE_GUID(GUID_IO_DISK_CLONE_ARRIVAL,0x6a61885b,0x7c39,0x43dd,0x9b,0x56,0xb8,0xac,0x22,0xa5,0x49,0xaa);

typedef struct _GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION {
  ULONG DiskNumber;
} GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION,*PGUID_IO_DISK_CLONE_ARRIVAL_INFORMATION;

DEFINE_GUID(GUID_IO_DISK_LAYOUT_CHANGE,0x11dff54c,0x8469,0x41f9,0xb3,0xde,0xef,0x83,0x64,0x87,0xc5,0x4a);
                                                                                                                                                                                                                                                                                                                                                                                usr/share/mingw-w64/include/ipexport.h                                                              0100644 0000000 0000000 00000012701 12404413021 016355  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef IP_EXPORT_INCLUDED
#define IP_EXPORT_INCLUDED 1

typedef ULONG IPAddr;
typedef ULONG IPMask;
typedef ULONG IP_STATUS;

#include <in6addr.h>

typedef struct in6_addr IPv6Addr;

#include <inaddr.h>

typedef struct ip_option_information {
  UCHAR Ttl;
  UCHAR Tos;
  UCHAR Flags;
  UCHAR OptionsSize;
  PUCHAR OptionsData;
} IP_OPTION_INFORMATION,*PIP_OPTION_INFORMATION;

#ifdef _WIN64
typedef struct ip_option_information32 {
  UCHAR Ttl;
  UCHAR Tos;
  UCHAR Flags;
  UCHAR OptionsSize;
  UCHAR *OptionsData;
} IP_OPTION_INFORMATION32,*PIP_OPTION_INFORMATION32;
#endif

typedef struct icmp_echo_reply {
  IPAddr Address;
  ULONG Status;
  ULONG RoundTripTime;
  USHORT DataSize;
  USHORT Reserved;
  PVOID Data;
  struct ip_option_information Options;
} ICMP_ECHO_REPLY,*PICMP_ECHO_REPLY;

#ifdef _WIN64
typedef struct icmp_echo_reply32 {
  IPAddr Address;
  ULONG Status;
  ULONG RoundTripTime;
  USHORT DataSize;
  USHORT Reserved;
  VOID *Data;
  struct ip_option_information32 Options;
} ICMP_ECHO_REPLY32,*PICMP_ECHO_REPLY32;
#endif

typedef struct arp_send_reply {
  IPAddr DestAddress;
  IPAddr SrcAddress;
} ARP_SEND_REPLY,*PARP_SEND_REPLY;

typedef struct tcp_reserve_port_range {
  USHORT UpperRange;
  USHORT LowerRange;
} TCP_RESERVE_PORT_RANGE,*PTCP_RESERVE_PORT_RANGE;

#define MAX_ADAPTER_NAME 128

typedef struct _IP_ADAPTER_INDEX_MAP {
  ULONG Index;
  WCHAR Name[MAX_ADAPTER_NAME];
} IP_ADAPTER_INDEX_MAP,*PIP_ADAPTER_INDEX_MAP;

typedef struct _IP_INTERFACE_INFO {
  LONG NumAdapters;
  IP_ADAPTER_INDEX_MAP Adapter[1];
} IP_INTERFACE_INFO,*PIP_INTERFACE_INFO;

typedef struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS {
  ULONG NumAdapters;
  IPAddr Address[1];
} IP_UNIDIRECTIONAL_ADAPTER_ADDRESS,*PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS;

typedef struct _IP_ADAPTER_ORDER_MAP {
  ULONG NumAdapters;
  ULONG AdapterOrder[1];
} IP_ADAPTER_ORDER_MAP,*PIP_ADAPTER_ORDER_MAP;

typedef struct _IP_MCAST_COUNTER_INFO {
  ULONG64 InMcastOctets;
  ULONG64 OutMcastOctets;
  ULONG64 InMcastPkts;
  ULONG64 OutMcastPkts;
} IP_MCAST_COUNTER_INFO,*PIP_MCAST_COUNTER_INFO;

typedef struct _IPV6_ADDRESS_EX {
  USHORT sin6_port;
  ULONG  sin6_flowinfo;
  USHORT sin6_addr[8];
  ULONG  sin6_scope_id;
} IPV6_ADDRESS_EX, *PIPV6_ADDRESS_EX;

#define IP_STATUS_BASE 11000

#define IP_SUCCESS 0
#define IP_BUF_TOO_SMALL (IP_STATUS_BASE + 1)
#define IP_DEST_NET_UNREACHABLE (IP_STATUS_BASE + 2)
#define IP_DEST_HOST_UNREACHABLE (IP_STATUS_BASE + 3)
#define IP_DEST_PROT_UNREACHABLE (IP_STATUS_BASE + 4)
#define IP_DEST_PORT_UNREACHABLE (IP_STATUS_BASE + 5)
#define IP_NO_RESOURCES (IP_STATUS_BASE + 6)
#define IP_BAD_OPTION (IP_STATUS_BASE + 7)
#define IP_HW_ERROR (IP_STATUS_BASE + 8)
#define IP_PACKET_TOO_BIG (IP_STATUS_BASE + 9)
#define IP_REQ_TIMED_OUT (IP_STATUS_BASE + 10)
#define IP_BAD_REQ (IP_STATUS_BASE + 11)
#define IP_BAD_ROUTE (IP_STATUS_BASE + 12)
#define IP_TTL_EXPIRED_TRANSIT (IP_STATUS_BASE + 13)
#define IP_TTL_EXPIRED_REASSEM (IP_STATUS_BASE + 14)
#define IP_PARAM_PROBLEM (IP_STATUS_BASE + 15)
#define IP_SOURCE_QUENCH (IP_STATUS_BASE + 16)
#define IP_OPTION_TOO_BIG (IP_STATUS_BASE + 17)
#define IP_BAD_DESTINATION (IP_STATUS_BASE + 18)

#define IP_DEST_NO_ROUTE (IP_STATUS_BASE + 2)
#define IP_DEST_ADDR_UNREACHABLE (IP_STATUS_BASE + 3)
#define IP_DEST_PROHIBITED (IP_STATUS_BASE + 4)
#define IP_DEST_PORT_UNREACHABLE (IP_STATUS_BASE + 5)
#define IP_HOP_LIMIT_EXCEEDED (IP_STATUS_BASE + 13)
#define IP_REASSEMBLY_TIME_EXCEEDED (IP_STATUS_BASE + 14)
#define IP_PARAMETER_PROBLEM (IP_STATUS_BASE + 15)

#define IP_DEST_UNREACHABLE (IP_STATUS_BASE + 40)
#define IP_TIME_EXCEEDED (IP_STATUS_BASE + 41)
#define IP_BAD_HEADER (IP_STATUS_BASE + 42)
#define IP_UNRECOGNIZED_NEXT_HEADER (IP_STATUS_BASE + 43)
#define IP_ICMP_ERROR (IP_STATUS_BASE + 44)
#define IP_DEST_SCOPE_MISMATCH (IP_STATUS_BASE + 45)

#define IP_ADDR_DELETED (IP_STATUS_BASE + 19)
#define IP_SPEC_MTU_CHANGE (IP_STATUS_BASE + 20)
#define IP_MTU_CHANGE (IP_STATUS_BASE + 21)
#define IP_UNLOAD (IP_STATUS_BASE + 22)
#define IP_ADDR_ADDED (IP_STATUS_BASE + 23)
#define IP_MEDIA_CONNECT (IP_STATUS_BASE + 24)
#define IP_MEDIA_DISCONNECT (IP_STATUS_BASE + 25)
#define IP_BIND_ADAPTER (IP_STATUS_BASE + 26)
#define IP_UNBIND_ADAPTER (IP_STATUS_BASE + 27)
#define IP_DEVICE_DOES_NOT_EXIST (IP_STATUS_BASE + 28)
#define IP_DUPLICATE_ADDRESS (IP_STATUS_BASE + 29)
#define IP_INTERFACE_METRIC_CHANGE (IP_STATUS_BASE + 30)
#define IP_RECONFIG_SECFLTR (IP_STATUS_BASE + 31)
#define IP_NEGOTIATING_IPSEC (IP_STATUS_BASE + 32)
#define IP_INTERFACE_WOL_CAPABILITY_CHANGE (IP_STATUS_BASE + 33)
#define IP_DUPLICATE_IPADD (IP_STATUS_BASE + 34)
#define IP_NO_FURTHER_SENDS (IP_STATUS_BASE + 35)

#define IP_GENERAL_FAILURE (IP_STATUS_BASE + 50)
#define MAX_IP_STATUS IP_GENERAL_FAILURE
#define IP_PENDING (IP_STATUS_BASE + 255)

#define IP_FLAG_DF 0x2

#define IP_OPT_EOL 0
#define IP_OPT_NOP 1
#define IP_OPT_SECURITY 0x82
#define IP_OPT_LSRR 0x83
#define IP_OPT_SSRR 0x89
#define IP_OPT_RR 0x7
#define IP_OPT_TS 0x44
#define IP_OPT_SID 0x88
#define IP_OPT_ROUTER_ALERT 0x94

#define MAX_OPT_SIZE 40

#ifdef CHICAGO

#define IOCTL_IP_RTCHANGE_NOTIFY_REQUEST 101
#define IOCTL_IP_ADDCHANGE_NOTIFY_REQUEST 102
#define IOCTL_ARP_SEND_REQUEST 103
#define IOCTL_IP_INTERFACE_INFO 104
#define IOCTL_IP_GET_BEST_INTERFACE 105
#define IOCTL_IP_UNIDIRECTIONAL_ADAPTER_ADDRESS 106
#endif
#endif
                                                               usr/share/mingw-w64/include/iphlpapi.h                                                              0100644 0000000 0000000 00000017426 12404413021 016322  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __IPHLPAPI_H__
#define __IPHLPAPI_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <iprtrmib.h>
#include <ipexport.h>
#include <iptypes.h>
#include <netioapi.h>
#include <tcpmib.h>
#include <udpmib.h>
#include <tcpestats.h>

  DWORD WINAPI GetNumberOfInterfaces(PDWORD pdwNumIf);
  DWORD WINAPI GetIfEntry(PMIB_IFROW pIfRow);
  DWORD WINAPI GetIfTable(PMIB_IFTABLE pIfTable,PULONG pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetIpAddrTable(PMIB_IPADDRTABLE pIpAddrTable,PULONG pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetIpNetTable(PMIB_IPNETTABLE pIpNetTable,PULONG pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetIpForwardTable(PMIB_IPFORWARDTABLE pIpForwardTable,PULONG pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetTcpTable(PMIB_TCPTABLE pTcpTable,PDWORD pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetUdpTable(PMIB_UDPTABLE pUdpTable,PDWORD pdwSize,WINBOOL bOrder);
  DWORD WINAPI GetIpStatistics(PMIB_IPSTATS pStats);
  DWORD WINAPI GetIpStatisticsEx(PMIB_IPSTATS pStats,DWORD dwFamily);
  DWORD WINAPI GetIcmpStatistics(PMIB_ICMP pStats);
  DWORD WINAPI GetIcmpStatisticsEx(PMIB_ICMP_EX pStats,DWORD dwFamily);
  DWORD WINAPI GetTcpStatistics(PMIB_TCPSTATS pStats);
  DWORD WINAPI GetTcpStatisticsEx(PMIB_TCPSTATS pStats,DWORD dwFamily);
  DWORD WINAPI GetUdpStatistics(PMIB_UDPSTATS pStats);
  DWORD WINAPI GetUdpStatisticsEx(PMIB_UDPSTATS pStats,DWORD dwFamily);
  DWORD WINAPI SetIfEntry(PMIB_IFROW pIfRow);
  DWORD WINAPI CreateIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  DWORD WINAPI SetIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  DWORD WINAPI DeleteIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  DWORD WINAPI SetIpStatistics(PMIB_IPSTATS pIpStats);
  DWORD WINAPI SetIpTTL(UINT nTTL);
  DWORD WINAPI CreateIpNetEntry(PMIB_IPNETROW pArpEntry);
  DWORD WINAPI SetIpNetEntry(PMIB_IPNETROW pArpEntry);
  DWORD WINAPI DeleteIpNetEntry(PMIB_IPNETROW pArpEntry);
  DWORD WINAPI FlushIpNetTable(DWORD dwIfIndex);
  DWORD WINAPI CreateProxyArpEntry(DWORD dwAddress,DWORD dwMask,DWORD dwIfIndex);
  DWORD WINAPI DeleteProxyArpEntry(DWORD dwAddress,DWORD dwMask,DWORD dwIfIndex);
  DWORD WINAPI SetTcpEntry(PMIB_TCPROW pTcpRow);
  DWORD WINAPI GetInterfaceInfo(PIP_INTERFACE_INFO pIfTable,PULONG dwOutBufLen);
  DWORD WINAPI GetUniDirectionalAdapterInfo(PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo,PULONG dwOutBufLen);

#ifndef NhpAllocateAndGetInterfaceInfoFromStack_DEFINED
#define NhpAllocateAndGetInterfaceInfoFromStack_DEFINED
  DWORD WINAPI NhpAllocateAndGetInterfaceInfoFromStack(IP_INTERFACE_NAME_INFO **ppTable,PDWORD pdwCount,WINBOOL bOrder,HANDLE hHeap,DWORD dwFlags);
#endif

  DWORD WINAPI GetBestInterface(IPAddr dwDestAddr,PDWORD pdwBestIfIndex);
  DWORD WINAPI GetBestInterfaceEx(struct sockaddr *pDestAddr,PDWORD pdwBestIfIndex);
  DWORD WINAPI GetBestRoute(DWORD dwDestAddr,DWORD dwSourceAddr,PMIB_IPFORWARDROW pBestRoute);
  DWORD WINAPI GetExtendedTcpTable (PVOID pTcpTable,PDWORD pdwSize,BOOL bOrder,ULONG ulAf,TCP_TABLE_CLASS TableClass,ULONG Reserved);
  DWORD WINAPI NotifyAddrChange(PHANDLE Handle,LPOVERLAPPED overlapped);
  DWORD WINAPI NotifyRouteChange(PHANDLE Handle,LPOVERLAPPED overlapped);
  WINBOOL WINAPI CancelIPChangeNotify(LPOVERLAPPED notifyOverlapped);
  DWORD WINAPI GetAdapterIndex(LPWSTR AdapterName,PULONG IfIndex);
  DWORD WINAPI AddIPAddress(IPAddr Address,IPMask IpMask,DWORD IfIndex,PULONG NTEContext,PULONG NTEInstance);
  DWORD WINAPI DeleteIPAddress(ULONG NTEContext);
  DWORD WINAPI GetNetworkParams(PFIXED_INFO pFixedInfo,PULONG pOutBufLen);
  DWORD WINAPI GetAdaptersInfo(PIP_ADAPTER_INFO pAdapterInfo,PULONG pOutBufLen);
  PIP_ADAPTER_ORDER_MAP WINAPI GetAdapterOrderMap(VOID);

#ifdef _WINSOCK2API_
  DWORD WINAPI GetAdaptersAddresses(ULONG Family,DWORD Flags,PVOID Reserved,PIP_ADAPTER_ADDRESSES pAdapterAddresses,PULONG pOutBufLen);
#endif

  DWORD WINAPI GetPerAdapterInfo(ULONG IfIndex,PIP_PER_ADAPTER_INFO pPerAdapterInfo,PULONG pOutBufLen);
  DWORD WINAPI IpReleaseAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo);
  DWORD WINAPI IpRenewAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo);
  DWORD WINAPI SendARP(IPAddr DestIP,IPAddr SrcIP,PULONG pMacAddr,PULONG PhyAddrLen);
  WINBOOL WINAPI GetRTTAndHopCount(IPAddr DestIpAddress,PULONG HopCount,ULONG MaxHops,PULONG RTT);
  DWORD WINAPI GetFriendlyIfIndex(DWORD IfIndex);
  DWORD WINAPI EnableRouter(HANDLE *pHandle,OVERLAPPED *pOverlapped);
  DWORD WINAPI UnenableRouter(OVERLAPPED *pOverlapped,LPDWORD lpdwEnableCount);
  DWORD WINAPI DisableMediaSense(HANDLE *pHandle,OVERLAPPED *pOverLapped);
  DWORD WINAPI RestoreMediaSense(OVERLAPPED *pOverlapped,LPDWORD lpdwEnableCount);
  DWORD WINAPI GetIpErrorString(IP_STATUS ErrorCode,PWCHAR Buffer,PDWORD Size);

DWORD WINAPI GetExtendedUdpTable(
  PVOID pUdpTable,
  PDWORD pdwSize,
  WINBOOL bOrder,
  ULONG ulAf,
  UDP_TABLE_CLASS TableClass,
  ULONG Reserved
);

DWORD WINAPI GetOwnerModuleFromTcp6Entry(
  PMIB_TCP6ROW_OWNER_MODULE pTcpEntry,
  TCPIP_OWNER_MODULE_INFO_CLASS Class,
  PVOID Buffer,
  PDWORD pdwSize
);

DWORD WINAPI GetOwnerModuleFromTcpEntry(
  PMIB_TCPROW_OWNER_MODULE pTcpEntry,
  TCPIP_OWNER_MODULE_INFO_CLASS Class,
  PVOID Buffer,
  PDWORD pdwSize
);

DWORD WINAPI GetOwnerModuleFromUdp6Entry(
  PMIB_UDP6ROW_OWNER_MODULE pUdpEntry,
  TCPIP_OWNER_MODULE_INFO_CLASS Class,
  PVOID Buffer,
  PDWORD pdwSize
);

DWORD WINAPI GetOwnerModuleFromUdpEntry(
  PMIB_UDPROW_OWNER_MODULE pUdpEntry,
  TCPIP_OWNER_MODULE_INFO_CLASS Class,
  PVOID Buffer,
  PDWORD pdwSize
);

#if (_WIN32_WINNT == 0x0502) /* Only with Win2003 SP1 and SP2 */
  WINBOOL WINAPI CancelSecurityHealthChangeNotify(LPOVERLAPPED notifyOverlapped);
#endif /*(_WIN32_WINNT == 0x0502)*/

#if (_WIN32_WINNT >= 0x0600)
#include <windns.h>

typedef enum _NET_ADDRESS_FORMAT {
  NET_ADDRESS_FORMAT_UNSPECIFIED   = 0,
  NET_ADDRESS_DNS_NAME,
  NET_ADDRESS_IPV4,
  NET_ADDRESS_IPV6
} NET_ADDRESS_FORMAT;

typedef struct _NET_ADDRESS_INFO {
  NET_ADDRESS_FORMAT Format;
  __C89_NAMELESS union {
    struct {
      WCHAR Address[DNS_MAX_NAME_BUFFER_LENGTH];
      WCHAR Port[6];
    } NamedAddress;
    SOCKADDR_IN  Ipv4Address;
    SOCKADDR_IN6 Ipv6Address;
    SOCKADDR     IpAddress;
  };
} NET_ADDRESS_INFO, *PNET_ADDRESS_INFO;

ULONG WINAPI GetPerTcp6ConnectionEStats(
  PMIB_TCP6ROW Row,
  TCP_ESTATS_TYPE EstatsType,
  PUCHAR Rw,
  ULONG RwVersion,
  ULONG RwSize,
  PUCHAR Ros,
  ULONG RosVersion,
  ULONG RosSize,
  PUCHAR Rod,
  ULONG RodVersion,
  ULONG RodSize
);

ULONG WINAPI SetPerTcp6ConnectionEStats(
  PMIB_TCP6ROW Row,
  TCP_ESTATS_TYPE EstatsType,
  PUCHAR Rw,
  ULONG RwVersion,
  ULONG RwSize,
  ULONG Offset
);

ULONG WINAPI SetPerTcpConnectionEStats(
    PMIB_TCPROW Row,
    TCP_ESTATS_TYPE EstatsType,
    PUCHAR Rw,
    ULONG RwVersion,
    ULONG RwSize,
    ULONG Offset
);

ULONG WINAPI GetTcp6Table(
  PMIB_TCP6TABLE TcpTable,
  PULONG SizePointer,
  WINBOOL Order
);

ULONG WINAPI GetPerTcpConnectionEStats(
  PMIB_TCPROW Row,
  TCP_ESTATS_TYPE EstatsType,
  PUCHAR Rw,
  ULONG RwVersion,
  ULONG RwSize,
  PUCHAR Ros,
  ULONG RosVersion,
  ULONG RosSize,
  PUCHAR Rod,
  ULONG RodVersion,
  ULONG RodSize
);

ULONG WINAPI GetTcp6Table2(
  PMIB_TCP6TABLE2 TcpTable,
  PULONG SizePointer,
  WINBOOL Order
);

ULONG WINAPI GetTcpTable2(
  PMIB_TCPTABLE2 TcpTable,
  PULONG SizePointer,
  WINBOOL Order
);

ULONG WINAPI GetUdp6Table(
  PMIB_UDP6TABLE Udp6Table,
  PULONG SizePointer,
  WINBOOL Order
);

DWORD WINAPI NotifySecurityHealthChange(
  PHANDLE pHandle,
  LPOVERLAPPED pOverLapped,
  PULONG SecurityHealthFlags
);

ULONG WINAPI ResolveNeighbor(
  SOCKADDR *NetworkAddress,
  PVOID PhysicalAddress,
  PULONG PhysicalAddressLength
);

DWORD WINAPI SetIpStatisticsEx(
  PMIB_IPSTATS pIpStats,
  ULONG Family
);

#endif /*(_WIN32_WINNT >= 0x0600)*/

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                          usr/share/mingw-w64/include/ipifcons.h                                                              0100644 0000000 0000000 00000013237 12404413021 016322  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __IPIFCONS_H__
#define __IPIFCONS_H__

#ifdef __cplusplus
extern "C" {
#endif

typedef ULONG IFTYPE;

#define MIN_IF_TYPE 1

#define IF_TYPE_OTHER 1
#define IF_TYPE_REGULAR_1822 2
#define IF_TYPE_HDH_1822 3
#define IF_TYPE_DDN_X25 4
#define IF_TYPE_RFC877_X25 5
#define IF_TYPE_ETHERNET_CSMACD 6
#define IF_TYPE_IS088023_CSMACD 7
#define IF_TYPE_ISO88024_TOKENBUS 8
#define IF_TYPE_ISO88025_TOKENRING 9
#define IF_TYPE_ISO88026_MAN 10
#define IF_TYPE_STARLAN 11
#define IF_TYPE_PROTEON_10MBIT 12
#define IF_TYPE_PROTEON_80MBIT 13
#define IF_TYPE_HYPERCHANNEL 14
#define IF_TYPE_FDDI 15
#define IF_TYPE_LAP_B 16
#define IF_TYPE_SDLC 17
#define IF_TYPE_DS1 18
#define IF_TYPE_E1 19
#define IF_TYPE_BASIC_ISDN 20
#define IF_TYPE_PRIMARY_ISDN 21
#define IF_TYPE_PROP_POINT2POINT_SERIAL 22
#define IF_TYPE_PPP 23
#define IF_TYPE_SOFTWARE_LOOPBACK 24
#define IF_TYPE_EON 25
#define IF_TYPE_ETHERNET_3MBIT 26
#define IF_TYPE_NSIP 27
#define IF_TYPE_SLIP 28
#define IF_TYPE_ULTRA 29
#define IF_TYPE_DS3 30
#define IF_TYPE_SIP 31
#define IF_TYPE_FRAMERELAY 32
#define IF_TYPE_RS232 33
#define IF_TYPE_PARA 34
#define IF_TYPE_ARCNET 35
#define IF_TYPE_ARCNET_PLUS 36
#define IF_TYPE_ATM 37
#define IF_TYPE_MIO_X25 38
#define IF_TYPE_SONET 39
#define IF_TYPE_X25_PLE 40
#define IF_TYPE_ISO88022_LLC 41
#define IF_TYPE_LOCALTALK 42
#define IF_TYPE_SMDS_DXI 43
#define IF_TYPE_FRAMERELAY_SERVICE 44
#define IF_TYPE_V35 45
#define IF_TYPE_HSSI 46
#define IF_TYPE_HIPPI 47
#define IF_TYPE_MODEM 48
#define IF_TYPE_AAL5 49
#define IF_TYPE_SONET_PATH 50
#define IF_TYPE_SONET_VT 51
#define IF_TYPE_SMDS_ICIP 52
#define IF_TYPE_PROP_VIRTUAL 53
#define IF_TYPE_PROP_MULTIPLEXOR 54
#define IF_TYPE_IEEE80212 55
#define IF_TYPE_FIBRECHANNEL 56
#define IF_TYPE_HIPPIINTERFACE 57
#define IF_TYPE_FRAMERELAY_INTERCONNECT 58
#define IF_TYPE_AFLANE_8023 59
#define IF_TYPE_AFLANE_8025 60
#define IF_TYPE_CCTEMUL 61
#define IF_TYPE_FASTETHER 62
#define IF_TYPE_ISDN 63
#define IF_TYPE_V11 64
#define IF_TYPE_V36 65
#define IF_TYPE_G703_64K 66
#define IF_TYPE_G703_2MB 67
#define IF_TYPE_QLLC 68
#define IF_TYPE_FASTETHER_FX 69
#define IF_TYPE_CHANNEL 70
#define IF_TYPE_IEEE80211 71
#define IF_TYPE_IBM370PARCHAN 72
#define IF_TYPE_ESCON 73
#define IF_TYPE_DLSW 74
#define IF_TYPE_ISDN_S 75
#define IF_TYPE_ISDN_U 76
#define IF_TYPE_LAP_D 77
#define IF_TYPE_IPSWITCH 78
#define IF_TYPE_RSRB 79
#define IF_TYPE_ATM_LOGICAL 80
#define IF_TYPE_DS0 81
#define IF_TYPE_DS0_BUNDLE 82
#define IF_TYPE_BSC 83
#define IF_TYPE_ASYNC 84
#define IF_TYPE_CNR 85
#define IF_TYPE_ISO88025R_DTR 86
#define IF_TYPE_EPLRS 87
#define IF_TYPE_ARAP 88
#define IF_TYPE_PROP_CNLS 89
#define IF_TYPE_HOSTPAD 90
#define IF_TYPE_TERMPAD 91
#define IF_TYPE_FRAMERELAY_MPI 92
#define IF_TYPE_X213 93
#define IF_TYPE_ADSL 94
#define IF_TYPE_RADSL 95
#define IF_TYPE_SDSL 96
#define IF_TYPE_VDSL 97
#define IF_TYPE_ISO88025_CRFPRINT 98
#define IF_TYPE_MYRINET 99
#define IF_TYPE_VOICE_EM 100
#define IF_TYPE_VOICE_FXO 101
#define IF_TYPE_VOICE_FXS 102
#define IF_TYPE_VOICE_ENCAP 103
#define IF_TYPE_VOICE_OVERIP 104
#define IF_TYPE_ATM_DXI 105
#define IF_TYPE_ATM_FUNI 106
#define IF_TYPE_ATM_IMA 107
#define IF_TYPE_PPPMULTILINKBUNDLE 108
#define IF_TYPE_IPOVER_CDLC 109
#define IF_TYPE_IPOVER_CLAW 110
#define IF_TYPE_STACKTOSTACK 111
#define IF_TYPE_VIRTUALIPADDRESS 112
#define IF_TYPE_MPC 113
#define IF_TYPE_IPOVER_ATM 114
#define IF_TYPE_ISO88025_FIBER 115
#define IF_TYPE_TDLC 116
#define IF_TYPE_GIGABITETHERNET 117
#define IF_TYPE_HDLC 118
#define IF_TYPE_LAP_F 119
#define IF_TYPE_V37 120
#define IF_TYPE_X25_MLP 121
#define IF_TYPE_X25_HUNTGROUP 122
#define IF_TYPE_TRANSPHDLC 123
#define IF_TYPE_INTERLEAVE 124
#define IF_TYPE_FAST 125
#define IF_TYPE_IP 126
#define IF_TYPE_DOCSCABLE_MACLAYER 127
#define IF_TYPE_DOCSCABLE_DOWNSTREAM 128
#define IF_TYPE_DOCSCABLE_UPSTREAM 129
#define IF_TYPE_A12MPPSWITCH 130
#define IF_TYPE_TUNNEL 131
#define IF_TYPE_COFFEE 132
#define IF_TYPE_CES 133
#define IF_TYPE_ATM_SUBINTERFACE 134
#define IF_TYPE_L2_VLAN 135
#define IF_TYPE_L3_IPVLAN 136
#define IF_TYPE_L3_IPXVLAN 137
#define IF_TYPE_DIGITALPOWERLINE 138
#define IF_TYPE_MEDIAMAILOVERIP 139
#define IF_TYPE_DTM 140
#define IF_TYPE_DCN 141
#define IF_TYPE_IPFORWARD 142
#define IF_TYPE_MSDSL 143
#define IF_TYPE_IEEE1394 144
#define IF_TYPE_RECEIVE_ONLY 145

#define MAX_IF_TYPE 145

#define IF_ACCESS_LOOPBACK 1
#define IF_ACCESS_BROADCAST 2
#define IF_ACCESS_POINTTOPOINT 3
#define IF_ACCESS_POINTTOMULTIPOINT 4

#define IF_CHECK_NONE 0x00
#define IF_CHECK_MCAST 0x01
#define IF_CHECK_SEND 0x02

#define IF_CONNECTION_DEDICATED 1
#define IF_CONNECTION_PASSIVE 2
#define IF_CONNECTION_DEMAND 3

#define IF_ADMIN_STATUS_UP 1
#define IF_ADMIN_STATUS_DOWN 2
#define IF_ADMIN_STATUS_TESTING 3

#define IF_OPER_STATUS_NON_OPERATIONAL 0
#define IF_OPER_STATUS_UNREACHABLE 1
#define IF_OPER_STATUS_DISCONNECTED 2
#define IF_OPER_STATUS_CONNECTING 3
#define IF_OPER_STATUS_CONNECTED 4
#define IF_OPER_STATUS_OPERATIONAL 5

#define MIB_IF_TYPE_OTHER 1
#define MIB_IF_TYPE_ETHERNET 6
#define MIB_IF_TYPE_TOKENRING 9
#define MIB_IF_TYPE_FDDI 15
#define MIB_IF_TYPE_PPP 23
#define MIB_IF_TYPE_LOOPBACK 24
#define MIB_IF_TYPE_SLIP 28

#define MIB_IF_ADMIN_STATUS_UP 1
#define MIB_IF_ADMIN_STATUS_DOWN 2
#define MIB_IF_ADMIN_STATUS_TESTING 3

#define MIB_IF_OPER_STATUS_NON_OPERATIONAL 0
#define MIB_IF_OPER_STATUS_UNREACHABLE 1
#define MIB_IF_OPER_STATUS_DISCONNECTED 2
#define MIB_IF_OPER_STATUS_CONNECTING 3
#define MIB_IF_OPER_STATUS_CONNECTED 4
#define MIB_IF_OPER_STATUS_OPERATIONAL 5

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/ipinfoid.h                                                              0100644 0000000 0000000 00000002152 12404413021 016303  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __ROUTING_IPINFOID_H__
#define __ROUTING_IPINFOID_H__

#ifdef __cplusplus
extern "C" {
#endif

#define IP_ROUTER_MANAGER_VERSION 1

#define IP_GENERAL_INFO_BASE 0xffff0000

#define IP_IN_FILTER_INFO IP_GENERAL_INFO_BASE + 1
#define IP_OUT_FILTER_INFO IP_GENERAL_INFO_BASE + 2
#define IP_GLOBAL_INFO IP_GENERAL_INFO_BASE + 3
#define IP_INTERFACE_STATUS_INFO IP_GENERAL_INFO_BASE + 4
#define IP_ROUTE_INFO IP_GENERAL_INFO_BASE + 5
#define IP_PROT_PRIORITY_INFO IP_GENERAL_INFO_BASE + 6
#define IP_ROUTER_DISC_INFO IP_GENERAL_INFO_BASE + 7

#define IP_DEMAND_DIAL_FILTER_INFO IP_GENERAL_INFO_BASE + 9
#define IP_MCAST_HEARBEAT_INFO IP_GENERAL_INFO_BASE + 10
#define IP_MCAST_BOUNDARY_INFO IP_GENERAL_INFO_BASE + 11
#define IP_IPINIP_CFG_INFO IP_GENERAL_INFO_BASE + 12
#define IP_IFFILTER_INFO IP_GENERAL_INFO_BASE + 13
#define IP_MCAST_LIMIT_INFO IP_GENERAL_INFO_BASE + 14

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                      usr/share/mingw-w64/include/ipmib.h                                                                 0100644 0000000 0000000 00000000353 12404413021 015603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#include <nldef.h>
                                                                                                                                                                                                                                                                                     usr/share/mingw-w64/include/ipmsp.h                                                                 0100644 0000000 0000000 00000076360 12404413021 015646  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error This stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __ipmsp_h__
#define __ipmsp_h__

#ifndef __ITParticipant_FWD_DEFINED__
#define __ITParticipant_FWD_DEFINED__
typedef struct ITParticipant ITParticipant;
#endif

#ifndef __ITFormatControl_FWD_DEFINED__
#define __ITFormatControl_FWD_DEFINED__
typedef struct ITFormatControl ITFormatControl;
#endif

#ifndef __ITStreamQualityControl_FWD_DEFINED__
#define __ITStreamQualityControl_FWD_DEFINED__
typedef struct ITStreamQualityControl ITStreamQualityControl;
#endif

#ifndef __ITCallQualityControl_FWD_DEFINED__
#define __ITCallQualityControl_FWD_DEFINED__
typedef struct ITCallQualityControl ITCallQualityControl;
#endif

#ifndef __ITAudioDeviceControl_FWD_DEFINED__
#define __ITAudioDeviceControl_FWD_DEFINED__
typedef struct ITAudioDeviceControl ITAudioDeviceControl;
#endif

#ifndef __ITAudioSettings_FWD_DEFINED__
#define __ITAudioSettings_FWD_DEFINED__
typedef struct ITAudioSettings ITAudioSettings;
#endif

#ifndef __ITQOSApplicationID_FWD_DEFINED__
#define __ITQOSApplicationID_FWD_DEFINED__
typedef struct ITQOSApplicationID ITQOSApplicationID;
#endif

#include "tapi3if.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

#define MAX_PARTICIPANT_TYPED_INFO_LENGTH (256)

#define MAX_QOS_ID_LEN (128)

  typedef enum PARTICIPANT_TYPED_INFO {
    PTI_CANONICALNAME = 0,PTI_NAME,PTI_EMAILADDRESS,PTI_PHONENUMBER,
    PTI_LOCATION,PTI_TOOL,PTI_NOTES,PTI_PRIVATE
  } PARTICIPANT_TYPED_INFO;

  typedef enum PARTICIPANT_EVENT {
    PE_NEW_PARTICIPANT = 0,PE_INFO_CHANGE,PE_PARTICIPANT_LEAVE,
    PE_NEW_SUBSTREAM,PE_SUBSTREAM_REMOVED,PE_SUBSTREAM_MAPPED,
    PE_SUBSTREAM_UNMAPPED,PE_PARTICIPANT_TIMEOUT,PE_PARTICIPANT_RECOVERED,
    PE_PARTICIPANT_ACTIVE,PE_PARTICIPANT_INACTIVE,PE_LOCAL_TALKING,
    PE_LOCAL_SILENT
  } PARTICIPANT_EVENT;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0000_v0_0_s_ifspec;

#ifndef __ITParticipant_INTERFACE_DEFINED__
#define __ITParticipant_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITParticipant;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITParticipant : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ParticipantTypedInfo(PARTICIPANT_TYPED_INFO InfoType,BSTR *ppInfo) = 0;
    virtual HRESULT WINAPI get_MediaTypes(__LONG32 *plMediaType) = 0;
    virtual HRESULT WINAPI put_Status(ITStream *pITStream,VARIANT_BOOL fEnable) = 0;
    virtual HRESULT WINAPI get_Status(ITStream *pITStream,VARIANT_BOOL *pStatus) = 0;
    virtual HRESULT WINAPI get_Streams(VARIANT *pVariant) = 0;
    virtual HRESULT WINAPI EnumerateStreams(IEnumStream **ppEnumStream) = 0;
  };
#else
  typedef struct ITParticipantVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITParticipant *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITParticipant *This);
      ULONG (WINAPI *Release)(ITParticipant *This);
      HRESULT (WINAPI *GetTypeInfoCount)(ITParticipant *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(ITParticipant *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(ITParticipant *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(ITParticipant *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ParticipantTypedInfo)(ITParticipant *This,PARTICIPANT_TYPED_INFO InfoType,BSTR *ppInfo);
      HRESULT (WINAPI *get_MediaTypes)(ITParticipant *This,__LONG32 *plMediaType);
      HRESULT (WINAPI *put_Status)(ITParticipant *This,ITStream *pITStream,VARIANT_BOOL fEnable);
      HRESULT (WINAPI *get_Status)(ITParticipant *This,ITStream *pITStream,VARIANT_BOOL *pStatus);
      HRESULT (WINAPI *get_Streams)(ITParticipant *This,VARIANT *pVariant);
      HRESULT (WINAPI *EnumerateStreams)(ITParticipant *This,IEnumStream **ppEnumStream);
    END_INTERFACE
  } ITParticipantVtbl;
  struct ITParticipant {
    CONST_VTBL struct ITParticipantVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITParticipant_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITParticipant_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITParticipant_Release(This) (This)->lpVtbl->Release(This)
#define ITParticipant_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITParticipant_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITParticipant_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITParticipant_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define ITParticipant_get_ParticipantTypedInfo(This,InfoType,ppInfo) (This)->lpVtbl->get_ParticipantTypedInfo(This,InfoType,ppInfo)
#define ITParticipant_get_MediaTypes(This,plMediaType) (This)->lpVtbl->get_MediaTypes(This,plMediaType)
#define ITParticipant_put_Status(This,pITStream,fEnable) (This)->lpVtbl->put_Status(This,pITStream,fEnable)
#define ITParticipant_get_Status(This,pITStream,pStatus) (This)->lpVtbl->get_Status(This,pITStream,pStatus)
#define ITParticipant_get_Streams(This,pVariant) (This)->lpVtbl->get_Streams(This,pVariant)
#define ITParticipant_EnumerateStreams(This,ppEnumStream) (This)->lpVtbl->EnumerateStreams(This,ppEnumStream)
#endif
#endif
  HRESULT WINAPI ITParticipant_get_ParticipantTypedInfo_Proxy(ITParticipant *This,PARTICIPANT_TYPED_INFO InfoType,BSTR *ppInfo);
  void __RPC_STUB ITParticipant_get_ParticipantTypedInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITParticipant_get_MediaTypes_Proxy(ITParticipant *This,__LONG32 *plMediaType);
  void __RPC_STUB ITParticipant_get_MediaTypes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITParticipant_put_Status_Proxy(ITParticipant *This,ITStream *pITStream,VARIANT_BOOL fEnable);
  void __RPC_STUB ITParticipant_put_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITParticipant_get_Status_Proxy(ITParticipant *This,ITStream *pITStream,VARIANT_BOOL *pStatus);
  void __RPC_STUB ITParticipant_get_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITParticipant_get_Streams_Proxy(ITParticipant *This,VARIANT *pVariant);
  void __RPC_STUB ITParticipant_get_Streams_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITParticipant_EnumerateStreams_Proxy(ITParticipant *This,IEnumStream **ppEnumStream);
  void __RPC_STUB ITParticipant_EnumerateStreams_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef STREAM_INTERFACES_DEFINED
#define STREAM_INTERFACES_DEFINED
#define MAX_DESCRIPTION_LEN (256)
  typedef struct _TAPI_AUDIO_STREAM_CONFIG_CAPS {
    WCHAR Description[256 ];
    ULONG MinimumChannels;
    ULONG MaximumChannels;
    ULONG ChannelsGranularity;
    ULONG MinimumBitsPerSample;
    ULONG MaximumBitsPerSample;
    ULONG BitsPerSampleGranularity;
    ULONG MinimumSampleFrequency;
    ULONG MaximumSampleFrequency;
    ULONG SampleFrequencyGranularity;
    ULONG MinimumAvgBytesPerSec;
    ULONG MaximumAvgBytesPerSec;
    ULONG AvgBytesPerSecGranularity;
  } TAPI_AUDIO_STREAM_CONFIG_CAPS;

  typedef struct _TAPI_AUDIO_STREAM_CONFIG_CAPS *PTAPI_AUDIO_STREAM_CONFIG_CAPS;

  typedef struct _TAPI_VIDEO_STREAM_CONFIG_CAPS {
    WCHAR Description[256 ];
    ULONG VideoStandard;
    SIZE InputSize;
    SIZE MinCroppingSize;
    SIZE MaxCroppingSize;
    int CropGranularityX;
    int CropGranularityY;
    int CropAlignX;
    int CropAlignY;
    SIZE MinOutputSize;
    SIZE MaxOutputSize;
    int OutputGranularityX;
    int OutputGranularityY;
    int StretchTapsX;
    int StretchTapsY;
    int ShrinkTapsX;
    int ShrinkTapsY;
    LONGLONG MinFrameInterval;
    LONGLONG MaxFrameInterval;
    LONG MinBitsPerSecond;
    LONG MaxBitsPerSecond;
  } TAPI_VIDEO_STREAM_CONFIG_CAPS;

  typedef struct _TAPI_VIDEO_STREAM_CONFIG_CAPS *PTAPI_VIDEO_STREAM_CONFIG_CAPS;

  typedef enum tagStreamConfigCapsType {
    AudioStreamConfigCaps = 0,VideoStreamConfigCaps = AudioStreamConfigCaps + 1
  } StreamConfigCapsType;

  typedef struct tagTAPI_STREAM_CONFIG_CAPS {
    StreamConfigCapsType CapsType;
    __C89_NAMELESS union {
      TAPI_VIDEO_STREAM_CONFIG_CAPS VideoCap;
      TAPI_AUDIO_STREAM_CONFIG_CAPS AudioCap;
    };
  } TAPI_STREAM_CONFIG_CAPS;

  typedef struct tagTAPI_STREAM_CONFIG_CAPS *PTAPI_STREAM_CONFIG_CAPS;

  typedef enum tagTAPIControlFlags {
    TAPIControl_Flags_None = 0,TAPIControl_Flags_Auto = 0x1,TAPIControl_Flags_Manual = 0x2
  } TAPIControlFlags;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0502_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0502_v0_0_s_ifspec;

#ifndef __ITFormatControl_INTERFACE_DEFINED__
#define __ITFormatControl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITFormatControl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITFormatControl : public IUnknown {
  public:
    virtual HRESULT WINAPI GetCurrentFormat(AM_MEDIA_TYPE **ppMediaType) = 0;
    virtual HRESULT WINAPI ReleaseFormat(AM_MEDIA_TYPE *pMediaType) = 0;
    virtual HRESULT WINAPI GetNumberOfCapabilities(DWORD *pdwCount) = 0;
    virtual HRESULT WINAPI GetStreamCaps(DWORD dwIndex,AM_MEDIA_TYPE **ppMediaType,TAPI_STREAM_CONFIG_CAPS *pStreamConfigCaps,WINBOOL *pfEnabled) = 0;
    virtual HRESULT WINAPI ReOrderCapabilities(DWORD *pdwIndices,WINBOOL *pfEnabled,WINBOOL *pfPublicize,DWORD dwNumIndices) = 0;
  };
#else
  typedef struct ITFormatControlVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITFormatControl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITFormatControl *This);
      ULONG (WINAPI *Release)(ITFormatControl *This);
      HRESULT (WINAPI *GetCurrentFormat)(ITFormatControl *This,AM_MEDIA_TYPE **ppMediaType);
      HRESULT (WINAPI *ReleaseFormat)(ITFormatControl *This,AM_MEDIA_TYPE *pMediaType);
      HRESULT (WINAPI *GetNumberOfCapabilities)(ITFormatControl *This,DWORD *pdwCount);
      HRESULT (WINAPI *GetStreamCaps)(ITFormatControl *This,DWORD dwIndex,AM_MEDIA_TYPE **ppMediaType,TAPI_STREAM_CONFIG_CAPS *pStreamConfigCaps,WINBOOL *pfEnabled);
      HRESULT (WINAPI *ReOrderCapabilities)(ITFormatControl *This,DWORD *pdwIndices,WINBOOL *pfEnabled,WINBOOL *pfPublicize,DWORD dwNumIndices);
    END_INTERFACE
  } ITFormatControlVtbl;
  struct ITFormatControl {
    CONST_VTBL struct ITFormatControlVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITFormatControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITFormatControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITFormatControl_Release(This) (This)->lpVtbl->Release(This)
#define ITFormatControl_GetCurrentFormat(This,ppMediaType) (This)->lpVtbl->GetCurrentFormat(This,ppMediaType)
#define ITFormatControl_ReleaseFormat(This,pMediaType) (This)->lpVtbl->ReleaseFormat(This,pMediaType)
#define ITFormatControl_GetNumberOfCapabilities(This,pdwCount) (This)->lpVtbl->GetNumberOfCapabilities(This,pdwCount)
#define ITFormatControl_GetStreamCaps(This,dwIndex,ppMediaType,pStreamConfigCaps,pfEnabled) (This)->lpVtbl->GetStreamCaps(This,dwIndex,ppMediaType,pStreamConfigCaps,pfEnabled)
#define ITFormatControl_ReOrderCapabilities(This,pdwIndices,pfEnabled,pfPublicize,dwNumIndices) (This)->lpVtbl->ReOrderCapabilities(This,pdwIndices,pfEnabled,pfPublicize,dwNumIndices)
#endif
#endif
  HRESULT WINAPI ITFormatControl_GetCurrentFormat_Proxy(ITFormatControl *This,AM_MEDIA_TYPE **ppMediaType);
  void __RPC_STUB ITFormatControl_GetCurrentFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITFormatControl_ReleaseFormat_Proxy(ITFormatControl *This,AM_MEDIA_TYPE *pMediaType);
  void __RPC_STUB ITFormatControl_ReleaseFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITFormatControl_GetNumberOfCapabilities_Proxy(ITFormatControl *This,DWORD *pdwCount);
  void __RPC_STUB ITFormatControl_GetNumberOfCapabilities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITFormatControl_GetStreamCaps_Proxy(ITFormatControl *This,DWORD dwIndex,AM_MEDIA_TYPE **ppMediaType,TAPI_STREAM_CONFIG_CAPS *pStreamConfigCaps,WINBOOL *pfEnabled);
  void __RPC_STUB ITFormatControl_GetStreamCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITFormatControl_ReOrderCapabilities_Proxy(ITFormatControl *This,DWORD *pdwIndices,WINBOOL *pfEnabled,WINBOOL *pfPublicize,DWORD dwNumIndices);
  void __RPC_STUB ITFormatControl_ReOrderCapabilities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  typedef enum tagStreamQualityProperty {
    StreamQuality_MaxBitrate = 0,StreamQuality_CurrBitrate,StreamQuality_MinFrameInterval,
    StreamQuality_AvgFrameInterval
  } StreamQualityProperty;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0503_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0503_v0_0_s_ifspec;

#ifndef __ITStreamQualityControl_INTERFACE_DEFINED__
#define __ITStreamQualityControl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITStreamQualityControl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITStreamQualityControl : public IUnknown {
  public:
    virtual HRESULT WINAPI GetRange(StreamQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Get(StreamQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Set(StreamQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags) = 0;
  };
#else
  typedef struct ITStreamQualityControlVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITStreamQualityControl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITStreamQualityControl *This);
      ULONG (WINAPI *Release)(ITStreamQualityControl *This);
      HRESULT (WINAPI *GetRange)(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Get)(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Set)(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
    END_INTERFACE
  } ITStreamQualityControlVtbl;
  struct ITStreamQualityControl {
    CONST_VTBL struct ITStreamQualityControlVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITStreamQualityControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITStreamQualityControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITStreamQualityControl_Release(This) (This)->lpVtbl->Release(This)
#define ITStreamQualityControl_GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags) (This)->lpVtbl->GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags)
#define ITStreamQualityControl_Get(This,Property,plValue,plFlags) (This)->lpVtbl->Get(This,Property,plValue,plFlags)
#define ITStreamQualityControl_Set(This,Property,lValue,lFlags) (This)->lpVtbl->Set(This,Property,lValue,lFlags)
#endif
#endif
  HRESULT WINAPI ITStreamQualityControl_GetRange_Proxy(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
  void __RPC_STUB ITStreamQualityControl_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITStreamQualityControl_Get_Proxy(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
  void __RPC_STUB ITStreamQualityControl_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITStreamQualityControl_Set_Proxy(ITStreamQualityControl *This,StreamQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
  void __RPC_STUB ITStreamQualityControl_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  typedef enum tagCallQualityProperty {
    CallQuality_ControlInterval = 0,CallQuality_ConfBitrate,CallQuality_MaxInputBitrate,
    CallQuality_CurrInputBitrate,CallQuality_MaxOutputBitrate,
    CallQuality_CurrOutputBitrate,CallQuality_MaxCPULoad,CallQuality_CurrCPULoad
  } CallQualityProperty;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0504_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0504_v0_0_s_ifspec;

#ifndef __ITCallQualityControl_INTERFACE_DEFINED__
#define __ITCallQualityControl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITCallQualityControl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITCallQualityControl : public IUnknown {
  public:
    virtual HRESULT WINAPI GetRange(CallQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Get(CallQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Set(CallQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags) = 0;
  };
#else
  typedef struct ITCallQualityControlVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITCallQualityControl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITCallQualityControl *This);
      ULONG (WINAPI *Release)(ITCallQualityControl *This);
      HRESULT (WINAPI *GetRange)(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Get)(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Set)(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
    END_INTERFACE
  } ITCallQualityControlVtbl;
  struct ITCallQualityControl {
    CONST_VTBL struct ITCallQualityControlVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITCallQualityControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITCallQualityControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITCallQualityControl_Release(This) (This)->lpVtbl->Release(This)
#define ITCallQualityControl_GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags) (This)->lpVtbl->GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags)
#define ITCallQualityControl_Get(This,Property,plValue,plFlags) (This)->lpVtbl->Get(This,Property,plValue,plFlags)
#define ITCallQualityControl_Set(This,Property,lValue,lFlags) (This)->lpVtbl->Set(This,Property,lValue,lFlags)
#endif
#endif
  HRESULT WINAPI ITCallQualityControl_GetRange_Proxy(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
  void __RPC_STUB ITCallQualityControl_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITCallQualityControl_Get_Proxy(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
  void __RPC_STUB ITCallQualityControl_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITCallQualityControl_Set_Proxy(ITCallQualityControl *This,CallQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
  void __RPC_STUB ITCallQualityControl_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  typedef enum tagAudioDeviceProperty {
    AudioDevice_DuplexMode = 0,AudioDevice_AutomaticGainControl,
    AudioDevice_AcousticEchoCancellation
  } AudioDeviceProperty;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0505_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0505_v0_0_s_ifspec;

#ifndef __ITAudioDeviceControl_INTERFACE_DEFINED__
#define __ITAudioDeviceControl_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITAudioDeviceControl;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITAudioDeviceControl : public IUnknown {
  public:
    virtual HRESULT WINAPI GetRange(AudioDeviceProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Get(AudioDeviceProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Set(AudioDeviceProperty Property,__LONG32 lValue,TAPIControlFlags lFlags) = 0;
  };
#else
  typedef struct ITAudioDeviceControlVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITAudioDeviceControl *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITAudioDeviceControl *This);
      ULONG (WINAPI *Release)(ITAudioDeviceControl *This);
      HRESULT (WINAPI *GetRange)(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Get)(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Set)(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
    END_INTERFACE
  } ITAudioDeviceControlVtbl;
  struct ITAudioDeviceControl {
    CONST_VTBL struct ITAudioDeviceControlVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITAudioDeviceControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITAudioDeviceControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITAudioDeviceControl_Release(This) (This)->lpVtbl->Release(This)
#define ITAudioDeviceControl_GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags) (This)->lpVtbl->GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags)
#define ITAudioDeviceControl_Get(This,Property,plValue,plFlags) (This)->lpVtbl->Get(This,Property,plValue,plFlags)
#define ITAudioDeviceControl_Set(This,Property,lValue,lFlags) (This)->lpVtbl->Set(This,Property,lValue,lFlags)
#endif
#endif
  HRESULT WINAPI ITAudioDeviceControl_GetRange_Proxy(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
  void __RPC_STUB ITAudioDeviceControl_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITAudioDeviceControl_Get_Proxy(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
  void __RPC_STUB ITAudioDeviceControl_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITAudioDeviceControl_Set_Proxy(ITAudioDeviceControl *This,AudioDeviceProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
  void __RPC_STUB ITAudioDeviceControl_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  typedef enum tagAudioSettingsProperty {
    AudioSettings_SignalLevel = 0,AudioSettings_SilenceThreshold,
    AudioSettings_Volume,AudioSettings_Balance,AudioSettings_Loudness,
    AudioSettings_Treble,AudioSettings_Bass,AudioSettings_Mono
  } AudioSettingsProperty;

  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0506_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0506_v0_0_s_ifspec;

#ifndef __ITAudioSettings_INTERFACE_DEFINED__
#define __ITAudioSettings_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITAudioSettings;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITAudioSettings : public IUnknown {
  public:
    virtual HRESULT WINAPI GetRange(AudioSettingsProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Get(AudioSettingsProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags) = 0;
    virtual HRESULT WINAPI Set(AudioSettingsProperty Property,__LONG32 lValue,TAPIControlFlags lFlags) = 0;
  };
#else
  typedef struct ITAudioSettingsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITAudioSettings *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITAudioSettings *This);
      ULONG (WINAPI *Release)(ITAudioSettings *This);
      HRESULT (WINAPI *GetRange)(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Get)(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
      HRESULT (WINAPI *Set)(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
    END_INTERFACE
  } ITAudioSettingsVtbl;
  struct ITAudioSettings {
    CONST_VTBL struct ITAudioSettingsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITAudioSettings_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITAudioSettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITAudioSettings_Release(This) (This)->lpVtbl->Release(This)
#define ITAudioSettings_GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags) (This)->lpVtbl->GetRange(This,Property,plMin,plMax,plSteppingDelta,plDefault,plFlags)
#define ITAudioSettings_Get(This,Property,plValue,plFlags) (This)->lpVtbl->Get(This,Property,plValue,plFlags)
#define ITAudioSettings_Set(This,Property,lValue,lFlags) (This)->lpVtbl->Set(This,Property,lValue,lFlags)
#endif
#endif
  HRESULT WINAPI ITAudioSettings_GetRange_Proxy(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 *plMin,__LONG32 *plMax,__LONG32 *plSteppingDelta,__LONG32 *plDefault,TAPIControlFlags *plFlags);
  void __RPC_STUB ITAudioSettings_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITAudioSettings_Get_Proxy(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 *plValue,TAPIControlFlags *plFlags);
  void __RPC_STUB ITAudioSettings_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI ITAudioSettings_Set_Proxy(ITAudioSettings *This,AudioSettingsProperty Property,__LONG32 lValue,TAPIControlFlags lFlags);
  void __RPC_STUB ITAudioSettings_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __ITQOSApplicationID_INTERFACE_DEFINED__
#define __ITQOSApplicationID_INTERFACE_DEFINED__
  EXTERN_C const IID IID_ITQOSApplicationID;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct ITQOSApplicationID : public IDispatch {
  public:
    virtual HRESULT WINAPI SetQOSApplicationID(BSTR pApplicationID,BSTR pApplicationGUID,BSTR pSubIDs) = 0;
  };
#else
  typedef struct ITQOSApplicationIDVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(ITQOSApplicationID *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(ITQOSApplicationID *This);
      ULONG (WINAPI *Release)(ITQOSApplicationID *This);
      HRESULT (WINAPI *GetTypeInfoCount)(ITQOSApplicationID *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(ITQOSApplicationID *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(ITQOSApplicationID *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(ITQOSApplicationID *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *SetQOSApplicationID)(ITQOSApplicationID *This,BSTR pApplicationID,BSTR pApplicationGUID,BSTR pSubIDs);
    END_INTERFACE
  } ITQOSApplicationIDVtbl;
  struct ITQOSApplicationID {
    CONST_VTBL struct ITQOSApplicationIDVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ITQOSApplicationID_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITQOSApplicationID_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITQOSApplicationID_Release(This) (This)->lpVtbl->Release(This)
#define ITQOSApplicationID_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITQOSApplicationID_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITQOSApplicationID_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITQOSApplicationID_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define ITQOSApplicationID_SetQOSApplicationID(This,pApplicationID,pApplicationGUID,pSubIDs) (This)->lpVtbl->SetQOSApplicationID(This,pApplicationID,pApplicationGUID,pSubIDs)
#endif
#endif
  HRESULT WINAPI ITQOSApplicationID_SetQOSApplicationID_Proxy(ITQOSApplicationID *This,BSTR pApplicationID,BSTR pApplicationGUID,BSTR pSubIDs);
  void __RPC_STUB ITQOSApplicationID_SetQOSApplicationID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif
#endif

#ifndef RTP_MEDIATYPE_DEFINED
#define RTP_MEDIATYPE_DEFINED
  struct MEDIATYPE_RTP_Single_Stream;
#endif
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0508_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ipmsp_0508_v0_0_s_ifspec;

  ULONG __RPC_API BSTR_UserSize(ULONG *,ULONG,BSTR *);
  unsigned char *__RPC_API BSTR_UserMarshal(ULONG *,unsigned char *,BSTR *);
  unsigned char *__RPC_API BSTR_UserUnmarshal(ULONG *,unsigned char *,BSTR *);
  void __RPC_API BSTR_UserFree(ULONG *,BSTR *);
  ULONG __RPC_API VARIANT_UserSize(ULONG *,ULONG,VARIANT *);
  unsigned char *__RPC_API VARIANT_UserMarshal(ULONG *,unsigned char *,VARIANT *);
  unsigned char *__RPC_API VARIANT_UserUnmarshal(ULONG *,unsigned char *,VARIANT *);
  void __RPC_API VARIANT_UserFree(ULONG *,VARIANT *);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                usr/share/mingw-w64/include/iprtrmib.h                                                              0100644 0000000 0000000 00000053141 12404413021 016336  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __ROUTING_IPRTRMIB_H__
#define __ROUTING_IPRTRMIB_H__

#include <mprapi.h>
#include <ipmib.h>
#include <ipifcons.h>
#include <udpmib.h>

#define IPRTRMGR_PID 10000

#ifndef ANY_SIZE
#define ANY_SIZE 1
#endif

#define TCPIP_OWNING_MODULE_SIZE 16

#define IF_NUMBER 0
#define IF_TABLE (IF_NUMBER + 1)
#define IF_ROW (IF_TABLE + 1)
#define IP_STATS (IF_ROW + 1)
#define IP_ADDRTABLE (IP_STATS + 1)
#define IP_ADDRROW (IP_ADDRTABLE + 1)
#define IP_FORWARDNUMBER (IP_ADDRROW + 1)
#define IP_FORWARDTABLE (IP_FORWARDNUMBER + 1)
#define IP_FORWARDROW (IP_FORWARDTABLE + 1)
#define IP_NETTABLE (IP_FORWARDROW + 1)
#define IP_NETROW (IP_NETTABLE + 1)
#define ICMP_STATS (IP_NETROW + 1)
#define TCP_STATS (ICMP_STATS + 1)
#define TCP_TABLE (TCP_STATS + 1)
#define TCP_ROW (TCP_TABLE + 1)
#define UDP_STATS (TCP_ROW + 1)
#define UDP_TABLE (UDP_STATS + 1)
#define UDP_ROW (UDP_TABLE + 1)
#define MCAST_MFE (UDP_ROW + 1)
#define MCAST_MFE_STATS (MCAST_MFE + 1)
#define BEST_IF (MCAST_MFE_STATS + 1)
#define BEST_ROUTE (BEST_IF + 1)
#define PROXY_ARP (BEST_ROUTE + 1)
#define MCAST_IF_ENTRY (PROXY_ARP + 1)
#define MCAST_GLOBAL (MCAST_IF_ENTRY + 1)
#define IF_STATUS (MCAST_GLOBAL + 1)
#define MCAST_BOUNDARY (IF_STATUS + 1)
#define MCAST_SCOPE (MCAST_BOUNDARY + 1)
#define DEST_MATCHING (MCAST_SCOPE + 1)
#define DEST_LONGER (DEST_MATCHING + 1)
#define DEST_SHORTER (DEST_LONGER + 1)
#define ROUTE_MATCHING (DEST_SHORTER + 1)
#define ROUTE_LONGER (ROUTE_MATCHING + 1)
#define ROUTE_SHORTER (ROUTE_LONGER + 1)
#define ROUTE_STATE (ROUTE_SHORTER + 1)
#define MCAST_MFE_STATS_EX (ROUTE_STATE + 1)
#define IP6_STATS (MCAST_MFE_STATS_EX + 1)
#define UDP6_STATS (IP6_STATS + 1)
#define TCP6_STATS (UDP6_STATS + 1)

#define NUMBER_OF_EXPORTED_VARIABLES (TCP6_STATS + 1)

typedef struct _MIB_OPAQUE_QUERY {
  DWORD dwVarId;
  DWORD rgdwVarIndex[ANY_SIZE];
} MIB_OPAQUE_QUERY,*PMIB_OPAQUE_QUERY;

typedef struct _MIB_IFNUMBER {
  DWORD dwValue;
} MIB_IFNUMBER,*PMIB_IFNUMBER;

#define MAXLEN_IFDESCR 256
#define MAXLEN_PHYSADDR 8

typedef struct _MIB_IFROW {
  WCHAR wszName[MAX_INTERFACE_NAME_LEN];
  DWORD dwIndex;
  DWORD dwType;
  DWORD dwMtu;
  DWORD dwSpeed;
  DWORD dwPhysAddrLen;
  BYTE bPhysAddr[MAXLEN_PHYSADDR];
  DWORD dwAdminStatus;
  DWORD dwOperStatus;
  DWORD dwLastChange;
  DWORD dwInOctets;
  DWORD dwInUcastPkts;
  DWORD dwInNUcastPkts;
  DWORD dwInDiscards;
  DWORD dwInErrors;
  DWORD dwInUnknownProtos;
  DWORD dwOutOctets;
  DWORD dwOutUcastPkts;
  DWORD dwOutNUcastPkts;
  DWORD dwOutDiscards;
  DWORD dwOutErrors;
  DWORD dwOutQLen;
  DWORD dwDescrLen;
  BYTE bDescr[MAXLEN_IFDESCR];
} MIB_IFROW,*PMIB_IFROW;

typedef struct _MIB_IFTABLE {
  DWORD dwNumEntries;
  MIB_IFROW table[ANY_SIZE];
} MIB_IFTABLE,*PMIB_IFTABLE;

#define SIZEOF_IFTABLE(X) (FIELD_OFFSET(MIB_IFTABLE,table[0]) + ((X) *sizeof(MIB_IFROW)) + ALIGN_SIZE)

typedef struct _MIBICMPSTATS {
  DWORD dwMsgs;
  DWORD dwErrors;
  DWORD dwDestUnreachs;
  DWORD dwTimeExcds;
  DWORD dwParmProbs;
  DWORD dwSrcQuenchs;
  DWORD dwRedirects;
  DWORD dwEchos;
  DWORD dwEchoReps;
  DWORD dwTimestamps;
  DWORD dwTimestampReps;
  DWORD dwAddrMasks;
  DWORD dwAddrMaskReps;
} MIBICMPSTATS,*PMIBICMPSTATS;

typedef struct _MIBICMPINFO {
  MIBICMPSTATS icmpInStats;
  MIBICMPSTATS icmpOutStats;
} MIBICMPINFO;

typedef struct _MIB_ICMP {
  MIBICMPINFO stats;
} MIB_ICMP,*PMIB_ICMP;

typedef enum {
  ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_ECHO_REQUEST = 128,
  ICMP6_ECHO_REPLY = 129,ICMP6_MEMBERSHIP_QUERY = 130,ICMP6_MEMBERSHIP_REPORT = 131,ICMP6_MEMBERSHIP_REDUCTION = 132,
  ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137
} ICMP6_TYPE,*PICMP6_TYPE;

typedef enum {
  ICMP4_ECHO_REPLY = 0,ICMP4_DST_UNREACH = 3,ICMP4_SOURCE_QUENCH = 4,ICMP4_REDIRECT = 5,ICMP4_ECHO_REQUEST = 8,ICMP4_ROUTER_ADVERT = 9,
  ICMP4_ROUTER_SOLICIT = 10,ICMP4_TIME_EXCEEDED = 11,ICMP4_PARAM_PROB = 12,ICMP4_TIMESTAMP_REQUEST = 13,ICMP4_TIMESTAMP_REPLY = 14,
  ICMP4_MASK_REQUEST = 17,ICMP4_MASK_REPLY = 18
} ICMP4_TYPE,*PICMP4_TYPE;

typedef struct _MIBICMPSTATS_EX {
  DWORD dwMsgs;
  DWORD dwErrors;
  DWORD rgdwTypeCount[256];
} MIBICMPSTATS_EX,*PMIBICMPSTATS_EX;

typedef struct _MIB_ICMP_EX {
  MIBICMPSTATS_EX icmpInStats;
  MIBICMPSTATS_EX icmpOutStats;
} MIB_ICMP_EX,*PMIB_ICMP_EX;

typedef struct _MIB_UDPSTATS {
  DWORD dwInDatagrams;
  DWORD dwNoPorts;
  DWORD dwInErrors;
  DWORD dwOutDatagrams;
  DWORD dwNumAddrs;
} MIB_UDPSTATS,*PMIB_UDPSTATS;

typedef struct _MIB_UDPROW {
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
} MIB_UDPROW,*PMIB_UDPROW;

typedef MIB_UDPROW MIB_UDPROW_BASIC,*PMIB_UDPROW_BASIC;

typedef struct _MIB_UDPROW_OWNER_PID {
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
  DWORD dwOwningPid;
} MIB_UDPROW_OWNER_PID,*PMIB_UDPROW_OWNER_PID;

typedef struct _MIB_UDPROW_OWNER_MODULE {
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
  DWORD dwOwningPid;
  LARGE_INTEGER liCreateTimestamp;
  __C89_NAMELESS union {
    __C89_NAMELESS struct {
      DWORD SpecificPortBind : 1;
    };
    DWORD dwFlags;
  };
  ULONGLONG OwningModuleInfo[TCPIP_OWNING_MODULE_SIZE];
} MIB_UDPROW_OWNER_MODULE,*PMIB_UDPROW_OWNER_MODULE;

typedef struct _MIB_UDP6ROW_OWNER_PID {
  UCHAR ucLocalAddr[16];
  DWORD dwLocalScopeId;
  DWORD dwLocalPort;
  DWORD dwOwningPid;
} MIB_UDP6ROW_OWNER_PID,*PMIB_UDP6ROW_OWNER_PID;

typedef struct _MIB_UDP6ROW_OWNER_MODULE {
  UCHAR ucLocalAddr[16];
  DWORD dwLocalScopeId;
  DWORD dwLocalPort;
  DWORD dwOwningPid;
  LARGE_INTEGER liCreateTimestamp;
  __C89_NAMELESS union {
    __C89_NAMELESS struct {
      DWORD SpecificPortBind : 1;
    };
    DWORD dwFlags;
  };
  ULONGLONG OwningModuleInfo[TCPIP_OWNING_MODULE_SIZE];
} MIB_UDP6ROW_OWNER_MODULE,*PMIB_UDP6ROW_OWNER_MODULE;

typedef struct _MIB_UDPTABLE {
  DWORD dwNumEntries;
  MIB_UDPROW table[ANY_SIZE];
} MIB_UDPTABLE,*PMIB_UDPTABLE;

typedef MIB_UDPTABLE MIB_UDPTABLE_BASIC,*PMIB_UDPTABLE_BASIC;

#define SIZEOF_UDPTABLE(X) (FIELD_OFFSET(MIB_UDPTABLE,table[0]) + ((X) *sizeof(MIB_UDPROW)) + ALIGN_SIZE)
#define SIZEOF_UDPTABLE_BASIC(X) SIZEOF_UDPTABLE(X)

typedef struct _MIB_UDPTABLE_OWNER_PID {
  DWORD dwNumEntries;
  MIB_UDPROW_OWNER_PID table[ANY_SIZE];
} MIB_UDPTABLE_OWNER_PID,*PMIB_UDPTABLE_OWNER_PID;

#define SIZEOF_UDPTABLE_OWNER_PID(X) (FIELD_OFFSET(MIB_UDPTABLE_OWNER_PID,table[0]) + ((X) *sizeof(MIB_UDPROW_OWNER_PID)) + ALIGN_SIZE)

typedef struct _MIB_UDPTABLE_OWNER_MODULE {
  DWORD dwNumEntries;
  MIB_UDPROW_OWNER_MODULE table[ANY_SIZE];
} MIB_UDPTABLE_OWNER_MODULE,*PMIB_UDPTABLE_OWNER_MODULE;

#define SIZEOF_UDPTABLE_OWNER_MODULE(X) (FIELD_OFFSET(MIB_UDPTABLE_OWNER_MODULE,table[0]) + ((X) *sizeof(MIB_UDPROW_OWNER_MODULE)) + ALIGN_SIZE)

typedef struct _MIB_UDP6TABLE_OWNER_PID {
  DWORD dwNumEntries;
  MIB_UDP6ROW_OWNER_PID table[ANY_SIZE];
} MIB_UDP6TABLE_OWNER_PID,*PMIB_UDP6TABLE_OWNER_PID;

#define SIZEOF_UDP6TABLE_OWNER_PID(X) (FIELD_OFFSET(MIB_UDP6TABLE_OWNER_PID,table[0]) + ((X) *sizeof(MIB_UDP6ROW_OWNER_PID)) + ALIGN_SIZE)

typedef struct _MIB_UDP6TABLE_OWNER_MODULE {
  DWORD dwNumEntries;
  MIB_UDP6ROW_OWNER_MODULE table[ANY_SIZE];
} MIB_UDP6TABLE_OWNER_MODULE,*PMIB_UDP6TABLE_OWNER_MODULE;

#define SIZEOF_UDP6TABLE_OWNER_MODULE(X) (FIELD_OFFSET(MIB_UDP6TABLE_OWNER_MODULE,table[0]) + ((X) *sizeof(MIB_UDP6ROW_OWNER_MODULE)) + ALIGN_SIZE)

typedef struct _MIB_TCPSTATS {
  DWORD dwRtoAlgorithm;
  DWORD dwRtoMin;
  DWORD dwRtoMax;
  DWORD dwMaxConn;
  DWORD dwActiveOpens;
  DWORD dwPassiveOpens;
  DWORD dwAttemptFails;
  DWORD dwEstabResets;
  DWORD dwCurrEstab;
  DWORD dwInSegs;
  DWORD dwOutSegs;
  DWORD dwRetransSegs;
  DWORD dwInErrs;
  DWORD dwOutRsts;
  DWORD dwNumConns;
} MIB_TCPSTATS,*PMIB_TCPSTATS;

#define MIB_TCP_RTO_OTHER 1
#define MIB_TCP_RTO_CONSTANT 2
#define MIB_TCP_RTO_RSRE 3
#define MIB_TCP_RTO_VANJ 4

#define MIB_TCP_MAXCONN_DYNAMIC (DWORD)-1

typedef enum _TCP_TABLE_CLASS {
  TCP_TABLE_BASIC_LISTENER,
  TCP_TABLE_BASIC_CONNECTIONS,
  TCP_TABLE_BASIC_ALL,
  TCP_TABLE_OWNER_PID_LISTENER,
  TCP_TABLE_OWNER_PID_CONNECTIONS,
  TCP_TABLE_OWNER_PID_ALL,
  TCP_TABLE_OWNER_MODULE_LISTENER,
  TCP_TABLE_OWNER_MODULE_CONNECTIONS,
  TCP_TABLE_OWNER_MODULE_ALL
} TCP_TABLE_CLASS, *PTCP_TABLE_CLASS;

typedef struct _MIB_TCPROW {
  DWORD dwState;
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
  DWORD dwRemoteAddr;
  DWORD dwRemotePort;
} MIB_TCPROW,*PMIB_TCPROW;

typedef MIB_TCPROW MIB_TCPROW_BASIC,*PMIB_TCPROW_BASIC;

typedef struct _MIB_TCPROW_OWNER_PID {
  DWORD dwState;
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
  DWORD dwRemoteAddr;
  DWORD dwRemotePort;
  DWORD dwOwningPid;
} MIB_TCPROW_OWNER_PID,*PMIB_TCPROW_OWNER_PID;

typedef struct _MIB_TCPROW_OWNER_MODULE {
  DWORD dwState;
  DWORD dwLocalAddr;
  DWORD dwLocalPort;
  DWORD dwRemoteAddr;
  DWORD dwRemotePort;
  DWORD dwOwningPid;
  LARGE_INTEGER liCreateTimestamp;
  ULONGLONG OwningModuleInfo[TCPIP_OWNING_MODULE_SIZE];
} MIB_TCPROW_OWNER_MODULE,*PMIB_TCPROW_OWNER_MODULE;

typedef struct _MIB_TCP6ROW_OWNER_PID {
  UCHAR ucLocalAddr[16];
  DWORD dwLocalScopeId;
  DWORD dwLocalPort;
  UCHAR ucRemoteAddr[16];
  DWORD dwRemoteScopeId;
  DWORD dwRemotePort;
  DWORD dwState;
  DWORD dwOwningPid;
} MIB_TCP6ROW_OWNER_PID,*PMIB_TCP6ROW_OWNER_PID;

typedef struct _MIB_TCP6ROW_OWNER_MODULE {
  UCHAR ucLocalAddr[16];
  DWORD dwLocalScopeId;
  DWORD dwLocalPort;
  UCHAR ucRemoteAddr[16];
  DWORD dwRemoteScopeId;
  DWORD dwRemotePort;
  DWORD dwState;
  DWORD dwOwningPid;
  LARGE_INTEGER liCreateTimestamp;
  ULONGLONG OwningModuleInfo[TCPIP_OWNING_MODULE_SIZE];
} MIB_TCP6ROW_OWNER_MODULE,*PMIB_TCP6ROW_OWNER_MODULE;

#define MIB_TCP_STATE_CLOSED 1
#define MIB_TCP_STATE_LISTEN 2
#define MIB_TCP_STATE_SYN_SENT 3
#define MIB_TCP_STATE_SYN_RCVD 4
#define MIB_TCP_STATE_ESTAB 5
#define MIB_TCP_STATE_FIN_WAIT1 6
#define MIB_TCP_STATE_FIN_WAIT2 7
#define MIB_TCP_STATE_CLOSE_WAIT 8
#define MIB_TCP_STATE_CLOSING 9
#define MIB_TCP_STATE_LAST_ACK 10
#define MIB_TCP_STATE_TIME_WAIT 11
#define MIB_TCP_STATE_DELETE_TCB 12

/* As I read msdn on Vista the defines above were moved into
   typedef enum { MIB_..., } MIB_TCP_STATE;
   We simply typedef it to int.  */
typedef int MIB_TCP_STATE;

typedef struct _MIB_TCPTABLE {
  DWORD dwNumEntries;
  MIB_TCPROW table[ANY_SIZE];
} MIB_TCPTABLE,*PMIB_TCPTABLE;

typedef MIB_TCPTABLE MIB_TCPTABLE_BASIC,*PMIB_TCPTABLE_BASIC;

#define SIZEOF_TCPTABLE(X) (FIELD_OFFSET(MIB_TCPTABLE,table[0]) + ((X) *sizeof(MIB_TCPROW)) + ALIGN_SIZE)
#define SIZEOF_TCPTABLE_BASIC(X) SIZEOF_TCPTABLE(X)

typedef struct _MIB_TCPTABLE_OWNER_PID {
  DWORD dwNumEntries;
  MIB_TCPROW_OWNER_PID table[ANY_SIZE];
} MIB_TCPTABLE_OWNER_PID,*PMIB_TCPTABLE_OWNER_PID;

#define SIZEOF_TCPTABLE_OWNER_PID(X) (FIELD_OFFSET(MIB_TCPTABLE_OWNER_PID,table[0]) + ((X) *sizeof(MIB_TCPROW_OWNER_PID)) + ALIGN_SIZE)

typedef struct _MIB_TCPTABLE_OWNER_MODULE {
  DWORD dwNumEntries;
  MIB_TCPROW_OWNER_MODULE table[ANY_SIZE];
} MIB_TCPTABLE_OWNER_MODULE,*PMIB_TCPTABLE_OWNER_MODULE;

#define SIZEOF_TCPTABLE_OWNER_MODULE(X) (FIELD_OFFSET(MIB_TCPTABLE_OWNER_MODULE,table[0]) + ((X) *sizeof(MIB_TCPROW_OWNER_MODULE)) + ALIGN_SIZE)

typedef struct _MIB_TCP6TABLE_OWNER_PID {
  DWORD dwNumEntries;
  MIB_TCP6ROW_OWNER_PID table[ANY_SIZE];
} MIB_TCP6TABLE_OWNER_PID,*PMIB_TCP6TABLE_OWNER_PID;

#define SIZEOF_TCP6TABLE_OWNER_PID(X) (FIELD_OFFSET(MIB_TCP6TABLE_OWNER_PID,table[0]) + ((X) *sizeof(MIB_TCP6ROW_OWNER_PID)) + ALIGN_SIZE)

typedef struct _MIB_TCP6TABLE_OWNER_MODULE {
  DWORD dwNumEntries;
  MIB_TCP6ROW_OWNER_MODULE table[ANY_SIZE];
} MIB_TCP6TABLE_OWNER_MODULE,*PMIB_TCP6TABLE_OWNER_MODULE;

#define SIZEOF_TCP6TABLE_OWNER_MODULE(X) (FIELD_OFFSET(MIB_TCP6TABLE_OWNER_MODULE,table[0]) + ((X) *sizeof(MIB_TCP6ROW_OWNER_PID)) + ALIGN_SIZE)

#define MIB_SECURITY_TCP_SYN_ATTACK 0x00000001

#define MIB_USE_CURRENT_TTL ((DWORD)-1)
#define MIB_USE_CURRENT_FORWARDING ((DWORD)-1)

typedef struct _MIB_IPSTATS {
  DWORD dwForwarding;
  DWORD dwDefaultTTL;
  DWORD dwInReceives;
  DWORD dwInHdrErrors;
  DWORD dwInAddrErrors;
  DWORD dwForwDatagrams;
  DWORD dwInUnknownProtos;
  DWORD dwInDiscards;
  DWORD dwInDelivers;
  DWORD dwOutRequests;
  DWORD dwRoutingDiscards;
  DWORD dwOutDiscards;
  DWORD dwOutNoRoutes;
  DWORD dwReasmTimeout;
  DWORD dwReasmReqds;
  DWORD dwReasmOks;
  DWORD dwReasmFails;
  DWORD dwFragOks;
  DWORD dwFragFails;
  DWORD dwFragCreates;
  DWORD dwNumIf;
  DWORD dwNumAddr;
  DWORD dwNumRoutes;
} MIB_IPSTATS,*PMIB_IPSTATS;

#define MIB_IP_FORWARDING 1
#define MIB_IP_NOT_FORWARDING 2

#define MIB_IPADDR_PRIMARY 0x0001
#define MIB_IPADDR_DYNAMIC 0x0004
#define MIB_IPADDR_DISCONNECTED 0x0008
#define MIB_IPADDR_DELETED 0x0040
#define MIB_IPADDR_TRANSIENT 0x0080

typedef struct _MIB_IPADDRROW {
  DWORD dwAddr;
  DWORD dwIndex;
  DWORD dwMask;
  DWORD dwBCastAddr;
  DWORD dwReasmSize;
  unsigned short unused1;
  unsigned short wType;
} MIB_IPADDRROW,*PMIB_IPADDRROW;

typedef struct _MIB_IPADDRTABLE {
  DWORD dwNumEntries;
  MIB_IPADDRROW table[ANY_SIZE];
} MIB_IPADDRTABLE,*PMIB_IPADDRTABLE;

#define SIZEOF_IPADDRTABLE(X) (FIELD_OFFSET(MIB_IPADDRTABLE,table[0]) + ((X) *sizeof(MIB_IPADDRROW)) + ALIGN_SIZE)

typedef struct _MIB_IPFORWARDNUMBER {
  DWORD dwValue;
} MIB_IPFORWARDNUMBER,*PMIB_IPFORWARDNUMBER;

typedef struct _MIB_IPFORWARDROW {
  DWORD dwForwardDest;
  DWORD dwForwardMask;
  DWORD dwForwardPolicy;
  DWORD dwForwardNextHop;
  DWORD dwForwardIfIndex;
  DWORD dwForwardType;
  DWORD dwForwardProto;
  DWORD dwForwardAge;
  DWORD dwForwardNextHopAS;
  DWORD dwForwardMetric1;
  DWORD dwForwardMetric2;
  DWORD dwForwardMetric3;
  DWORD dwForwardMetric4;
  DWORD dwForwardMetric5;
} MIB_IPFORWARDROW,*PMIB_IPFORWARDROW;

#define MIB_IPROUTE_TYPE_OTHER 1
#define MIB_IPROUTE_TYPE_INVALID 2
#define MIB_IPROUTE_TYPE_DIRECT 3
#define MIB_IPROUTE_TYPE_INDIRECT 4

#define MIB_IPROUTE_METRIC_UNUSED (DWORD)-1

#define MIB_IPPROTO_OTHER 1
#define MIB_IPPROTO_LOCAL 2
#define MIB_IPPROTO_NETMGMT 3
#define MIB_IPPROTO_ICMP 4
#define MIB_IPPROTO_EGP 5
#define MIB_IPPROTO_GGP 6
#define MIB_IPPROTO_HELLO 7
#define MIB_IPPROTO_RIP 8
#define MIB_IPPROTO_IS_IS 9
#define MIB_IPPROTO_ES_IS 10
#define MIB_IPPROTO_CISCO 11
#define MIB_IPPROTO_BBN 12
#define MIB_IPPROTO_OSPF 13
#define MIB_IPPROTO_BGP 14

#define MIB_IPPROTO_NT_AUTOSTATIC 10002
#define MIB_IPPROTO_NT_STATIC 10006
#define MIB_IPPROTO_NT_STATIC_NON_DOD 10007

typedef struct _MIB_IPFORWARDTABLE {
  DWORD dwNumEntries;
  MIB_IPFORWARDROW table[ANY_SIZE];
} MIB_IPFORWARDTABLE,*PMIB_IPFORWARDTABLE;

#define SIZEOF_IPFORWARDTABLE(X) (FIELD_OFFSET(MIB_IPFORWARDTABLE,table[0]) + ((X) *sizeof(MIB_IPFORWARDROW)) + ALIGN_SIZE)

typedef struct _MIB_IPNETROW {
  DWORD dwIndex;
  DWORD dwPhysAddrLen;
  BYTE bPhysAddr[MAXLEN_PHYSADDR];
  DWORD dwAddr;
  DWORD dwType;
} MIB_IPNETROW,*PMIB_IPNETROW;

#define MIB_IPNET_TYPE_OTHER 1
#define MIB_IPNET_TYPE_INVALID 2
#define MIB_IPNET_TYPE_DYNAMIC 3
#define MIB_IPNET_TYPE_STATIC 4

typedef struct _MIB_IPNETTABLE {
  DWORD dwNumEntries;
  MIB_IPNETROW table[ANY_SIZE];
} MIB_IPNETTABLE,*PMIB_IPNETTABLE;

#define SIZEOF_IPNETTABLE(X) (FIELD_OFFSET(MIB_IPNETTABLE,table[0]) + ((X) *sizeof(MIB_IPNETROW)) + ALIGN_SIZE)

typedef struct _MIB_IPMCAST_OIF {
  DWORD dwOutIfIndex;
  DWORD dwNextHopAddr;
  DWORD dwReserved;
  DWORD dwReserved1;
} MIB_IPMCAST_OIF,*PMIB_IPMCAST_OIF;

typedef struct _MIB_IPMCAST_MFE {
  DWORD dwGroup;
  DWORD dwSource;
  DWORD dwSrcMask;
  DWORD dwUpStrmNgbr;
  DWORD dwInIfIndex;
  DWORD dwInIfProtocol;
  DWORD dwRouteProtocol;
  DWORD dwRouteNetwork;
  DWORD dwRouteMask;
  ULONG ulUpTime;
  ULONG ulExpiryTime;
  ULONG ulTimeOut;
  ULONG ulNumOutIf;
  DWORD fFlags;
  DWORD dwReserved;
  MIB_IPMCAST_OIF rgmioOutInfo[ANY_SIZE];
} MIB_IPMCAST_MFE,*PMIB_IPMCAST_MFE;

typedef struct _MIB_MFE_TABLE {
  DWORD dwNumEntries;
  MIB_IPMCAST_MFE table[ANY_SIZE];
} MIB_MFE_TABLE,*PMIB_MFE_TABLE;

#define SIZEOF_BASIC_MIB_MFE (ULONG)(FIELD_OFFSET(MIB_IPMCAST_MFE,rgmioOutInfo[0]))

#define SIZEOF_MIB_MFE(X) (SIZEOF_BASIC_MIB_MFE + ((X) *sizeof(MIB_IPMCAST_OIF)))

typedef struct _MIB_IPMCAST_OIF_STATS {
  DWORD dwOutIfIndex;
  DWORD dwNextHopAddr;
  DWORD dwDialContext;
  ULONG ulTtlTooLow;
  ULONG ulFragNeeded;
  ULONG ulOutPackets;
  ULONG ulOutDiscards;
} MIB_IPMCAST_OIF_STATS,*PMIB_IPMCAST_OIF_STATS;

typedef struct _MIB_IPMCAST_MFE_STATS {
  DWORD dwGroup;
  DWORD dwSource;
  DWORD dwSrcMask;
  DWORD dwUpStrmNgbr;
  DWORD dwInIfIndex;
  DWORD dwInIfProtocol;
  DWORD dwRouteProtocol;
  DWORD dwRouteNetwork;
  DWORD dwRouteMask;
  ULONG ulUpTime;
  ULONG ulExpiryTime;
  ULONG ulNumOutIf;
  ULONG ulInPkts;
  ULONG ulInOctets;
  ULONG ulPktsDifferentIf;
  ULONG ulQueueOverflow;
  MIB_IPMCAST_OIF_STATS rgmiosOutStats[ANY_SIZE];
} MIB_IPMCAST_MFE_STATS,*PMIB_IPMCAST_MFE_STATS;

typedef struct _MIB_MFE_STATS_TABLE {
  DWORD dwNumEntries;
  MIB_IPMCAST_MFE_STATS table[ANY_SIZE];
} MIB_MFE_STATS_TABLE,*PMIB_MFE_STATS_TABLE;

#define SIZEOF_BASIC_MIB_MFE_STATS (ULONG)(FIELD_OFFSET(MIB_IPMCAST_MFE_STATS,rgmiosOutStats[0]))
#define SIZEOF_MIB_MFE_STATS(X) (SIZEOF_BASIC_MIB_MFE_STATS + ((X) *sizeof(MIB_IPMCAST_OIF_STATS)))

typedef struct _MIB_IPMCAST_MFE_STATS_EX {
  DWORD dwGroup;
  DWORD dwSource;
  DWORD dwSrcMask;
  D