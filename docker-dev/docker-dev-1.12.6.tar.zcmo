ifiers\*(R" in perlre) to instruct it to do so.
.PP
Versions of Perl from 5.002 to 5.003 did use the \f(CW\*(C`LC_CTYPE\*(C'\fR
information if available; that is, \f(CW\*(C`\ew\*(C'\fR did understand what
were the letters according to the locale environment variables.
The problem was that the user had no control over the feature:
if the C library supported locales, Perl used them.
.SS "I18N:Collate obsolete"
.IX Subsection "I18N:Collate obsolete"
In versions of Perl prior to 5.004, per-locale collation was possible
using the \f(CW\*(C`I18N::Collate\*(C'\fR library module.  This module is now mildly
obsolete and should be avoided in new applications.  The \f(CW\*(C`LC_COLLATE\*(C'\fR
functionality is now integrated into the Perl core language: One can
use locale-specific scalar data completely normally with \f(CW\*(C`use locale\*(C'\fR,
so there is no longer any need to juggle with the scalar references of
\&\f(CW\*(C`I18N::Collate\*(C'\fR.
.SS "Sort speed and memory use impacts"
.IX Subsection "Sort speed and memory use impacts"
Comparing and sorting by locale is usually slower than the default
sorting; slow-downs of two to four times have been observed.  It will
also consume more memory: once a Perl scalar variable has participated
in any string comparison or sorting operation obeying the locale
collation rules, it will take 3\-15 times more memory than before.  (The
exact multiplier depends on the string's contents, the operating system
and the locale.) These downsides are dictated more by the operating
system's implementation of the locale system than by Perl.
.SS "\fIwrite()\fP and \s-1LC_NUMERIC\s0"
.IX Subsection "write() and LC_NUMERIC"
If a program's environment specifies an \s-1LC_NUMERIC\s0 locale and \f(CW\*(C`use
locale\*(C'\fR is in effect when the format is declared, the locale is used
to specify the decimal point character in formatted output.  Formatted
output cannot be controlled by \f(CW\*(C`use locale\*(C'\fR at the time when \fIwrite()\fR
is called.
.SS "Freely available locale definitions"
.IX Subsection "Freely available locale definitions"
The Unicode \s-1CLDR\s0 project extracts the \s-1POSIX\s0 portion of many of its
locales, available at
.PP
.Vb 1
\&  http://unicode.org/Public/cldr/latest/
.Ve
.PP
There is a large collection of locale definitions at:
.PP
.Vb 1
\&  http://std.dkuug.dk/i18n/WG15\-collection/locales/
.Ve
.PP
You should be aware that it is
unsupported, and is not claimed to be fit for any purpose.  If your
system allows installation of arbitrary locales, you may find the
definitions useful as they are, or as a basis for the development of
your own locales.
.SS "I18n and l10n"
.IX Subsection "I18n and l10n"
\&\*(L"Internationalization\*(R" is often abbreviated as \fBi18n\fR because its first
and last letters are separated by eighteen others.  (You may guess why
the internalin ... internaliti ... i18n tends to get abbreviated.)  In
the same way, \*(L"localization\*(R" is often abbreviated to \fBl10n\fR.
.SS "An imperfect standard"
.IX Subsection "An imperfect standard"
Internationalization, as defined in the C and \s-1POSIX\s0 standards, can be
criticized as incomplete, ungainly, and having too large a granularity.
(Locales apply to a whole process, when it would arguably be more useful
to have them apply to a single thread, window group, or whatever.)  They
also have a tendency, like standards groups, to divide the world into
nations, when we all know that the world can equally well be divided
into bankers, bikers, gamers, and so on.
.SH "Unicode and UTF\-8"
.IX Header "Unicode and UTF-8"
The support of Unicode is new starting from Perl version v5.6, and more fully
implemented in version v5.8 and later.  See perluniintro.  It is
strongly recommended that when combining Unicode and locale (starting in
v5.16), you use
.PP
.Vb 1
\&    use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
When this form of the pragma is used, only the non-character portions of
locales are used by Perl, for example \f(CW\*(C`LC_NUMERIC\*(C'\fR.  Perl assumes that
you have translated all the characters it is to operate on into Unicode
(actually the platform's native character set (\s-1ASCII\s0 or \s-1EBCDIC\s0) plus
Unicode).  For data in files, this can conveniently be done by also
specifying
.PP
.Vb 1
\&    use open \*(Aq:locale\*(Aq;
.Ve
.PP
This pragma arranges for all inputs from files to be translated into
Unicode from the current locale as specified in the environment (see
\&\*(L"\s-1ENVIRONMENT\s0\*(R"), and all outputs to files to be translated back
into the locale.  (See open).  On a per-filehandle basis, you can
instead use the PerlIO::locale module, or the Encode::Locale
module, both available from \s-1CPAN\s0.  The latter module also has methods to
ease the handling of \f(CW\*(C`ARGV\*(C'\fR and environment variables, and can be used
on individual strings.  Also, if you know that all your locales will be
\&\s-1UTF\-8\s0, as many are these days, you can use the \fB\-C\fR
command line switch.
.PP
This form of the pragma allows essentially seamless handling of locales
with Unicode.  The collation order will be Unicode's.  It is strongly
recommended that when you need to order and sort strings that you use
the standard module Unicode::Collate which gives much better results
in many instances than you can get with the old-style locale handling.
.PP
For pre\-v5.16 Perls, or if you use the locale pragma without the
\&\f(CW\*(C`:not_characters\*(C'\fR parameter, Perl tries to work with both Unicode and
locales\*(--but there are problems.
.PP
Perl does not handle multi-byte locales in this case, such as have been
used for various
Asian languages, such as Big5 or Shift \s-1JIS\s0.  However, the increasingly
common multi-byte \s-1UTF\-8\s0 locales, if properly implemented, may work
reasonably well (depending on your C library implementation) in this
form of the locale pragma, simply because both
they and Perl store characters that take up multiple bytes the same way.
However, some, if not most, C library implementations may not process
the characters in the upper half of the Latin\-1 range (128 \- 255)
properly under \s-1LC_CTYPE\s0.  To see if a character is a particular type
under a locale, Perl uses the functions like \f(CW\*(C`isalnum()\*(C'\fR.  Your C
library may not work for \s-1UTF\-8\s0 locales with those functions, instead
only working under the newer wide library functions like \f(CW\*(C`iswalnum()\*(C'\fR.
.PP
Perl generally takes the tack to use locale rules on code points that can fit
in a single byte, and Unicode rules for those that can't (though this
isn't uniformly applied, see the note at the end of this section).  This
prevents many problems in locales that aren't \s-1UTF\-8\s0.  Suppose the locale
is \s-1ISO8859\-7\s0, Greek.  The character at 0xD7 there is a capital Chi. But
in the \s-1ISO8859\-1\s0 locale, Latin1, it is a multiplication sign.  The \s-1POSIX\s0
regular expression character class \f(CW\*(C`[[:alpha:]]\*(C'\fR will magically match
0xD7 in the Greek locale but not in the Latin one.
.PP
However, there are places where this breaks down.  Certain constructs are
for Unicode only, such as \f(CW\*(C`\ep{Alpha}\*(C'\fR.  They assume that 0xD7 always has its
Unicode meaning (or the equivalent on \s-1EBCDIC\s0 platforms).  Since Latin1 is a
subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and
Unicode, \f(CW\*(C`\ep{Alpha}\*(C'\fR will never match it, regardless of locale.  A similar
issue occurs with \f(CW\*(C`\eN{...}\*(C'\fR.  It is therefore a bad idea to use \f(CW\*(C`\ep{}\*(C'\fR or
\&\f(CW\*(C`\eN{}\*(C'\fR under plain \f(CW\*(C`use locale\*(C'\fR\-\-\fIunless\fR you can guarantee that the
locale will be a \s-1ISO8859\-1\s0.  Use \s-1POSIX\s0 character classes instead.
.PP
Another problem with this approach is that operations that cross the
single byte/multiple byte boundary are not well-defined, and so are
disallowed.  (This boundary is between the codepoints at 255/256.).
For example, lower casing \s-1LATIN\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 Y \s-1WITH\s0 \s-1DIAERESIS\s0 (U+0178)
should return \s-1LATIN\s0 \s-1SMALL\s0 \s-1LETTER\s0 Y \s-1WITH\s0 \s-1DIAERESIS\s0 (U+00FF).  But in the
Greek locale, for example, there is no character at 0xFF, and Perl
has no way of knowing what the character at 0xFF is really supposed to
represent.  Thus it disallows the operation.  In this mode, the
lowercase of U+0178 is itself.
.PP
The same problems ensue if you enable automatic UTF\-8\-ification of your
standard file handles, default \f(CW\*(C`open()\*(C'\fR layer, and \f(CW@ARGV\fR on non\-ISO8859\-1,
non\-UTF\-8 locales (by using either the \fB\-C\fR command line switch or the
\&\f(CW\*(C`PERL_UNICODE\*(C'\fR environment variable; see perlrun).
Things are read in as \s-1UTF\-8\s0, which would normally imply a Unicode
interpretation, but the presence of a locale causes them to be interpreted
in that locale instead.  For example, a 0xD7 code point in the Unicode
input, which should mean the multiplication sign, won't be interpreted by
Perl that way under the Greek locale.  This is not a problem
\&\fIprovided\fR you make certain that all locales will always and only be either
an \s-1ISO8859\-1\s0, or, if you don't have a deficient C library, a \s-1UTF\-8\s0 locale.
.PP
Vendor locales are notoriously buggy, and it is difficult for Perl to test
its locale-handling code because this interacts with code that Perl has no
control over; therefore the locale-handling code in Perl may be buggy as
well.  (However, the Unicode-supplied locales should be better, and
there is a feed back mechanism to correct any problems.  See
\&\*(L"Freely available locale definitions\*(R".)
.PP
If you have Perl v5.16, the problems mentioned above go away if you use
the \f(CW\*(C`:not_characters\*(C'\fR parameter to the locale pragma (except for vendor
bugs in the non-character portions).  If you don't have v5.16, and you
\&\fIdo\fR have locales that work, using them may be worthwhile for certain
specific purposes, as long as you keep in mind the gotchas already
mentioned.  For example, if the collation for your locales works, it
runs faster under locales than under Unicode::Collate; and you gain
access to such things as the local currency symbol and the names of the
months and days of the week.  (But to hammer home the point, in v5.16,
you get this access without the downsides of locales by using the
\&\f(CW\*(C`:not_characters\*(C'\fR form of the pragma.)
.PP
Note: The policy of using locale rules for code points that can fit in a
byte, and Unicode rules for those that can't is not uniformly applied.
Pre\-v5.12, it was somewhat haphazard; in v5.12 it was applied fairly
consistently to regular expression matching except for bracketed
character classes; in v5.14 it was extended to all regex matches; and in
v5.16 to the casing operations such as \f(CW"\eL"\fR and \f(CW\*(C`uc()\*(C'\fR.  For
collation, in all releases, the system's \f(CW\*(C`strxfrm()\*(C'\fR function is called,
and whatever it does is what you get.
.SH "BUGS"
.IX Header "BUGS"
.SS "Broken systems"
.IX Subsection "Broken systems"
In certain systems, the operating system's locale support
is broken and cannot be fixed or used by Perl.  Such deficiencies can
and will result in mysterious hangs and/or Perl core dumps when
\&\f(CW\*(C`use locale\*(C'\fR is in effect.  When confronted with such a system,
please report in excruciating detail to <\fIperlbug@perl.org\fR>, and
also contact your vendor: bug fixes may exist for these problems
in your operating system.  Sometimes such bug fixes are called an
operating system upgrade.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
I18N::Langinfo, perluniintro, perlunicode, open,
\&\*(L"isalnum\*(R" in \s-1POSIX\s0, \*(L"isalpha\*(R" in \s-1POSIX\s0,
\&\*(L"isdigit\*(R" in \s-1POSIX\s0, \*(L"isgraph\*(R" in \s-1POSIX\s0, \*(L"islower\*(R" in \s-1POSIX\s0,
\&\*(L"isprint\*(R" in \s-1POSIX\s0, \*(L"ispunct\*(R" in \s-1POSIX\s0, \*(L"isspace\*(R" in \s-1POSIX\s0,
\&\*(L"isupper\*(R" in \s-1POSIX\s0, \*(L"isxdigit\*(R" in \s-1POSIX\s0, \*(L"localeconv\*(R" in \s-1POSIX\s0,
\&\*(L"setlocale\*(R" in \s-1POSIX\s0, \*(L"strcoll\*(R" in \s-1POSIX\s0, \*(L"strftime\*(R" in \s-1POSIX\s0,
\&\*(L"strtod\*(R" in \s-1POSIX\s0, \*(L"strxfrm\*(R" in \s-1POSIX\s0.
.SH "HISTORY"
.IX Header "HISTORY"
Jarkko Hietaniemi's original \fIperli18n.pod\fR heavily hacked by Dominic
Dunlop, assisted by the perl5\-porters.  Prose worked over a bit by
Tom Christiansen, and updated by Perl 5 porters.
                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perllocale5.18.1                             0100644 0001750 0001750 00000177775 12566207441 023425  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLLOCALE 1"
.TH PERLLOCALE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perllocale \- Perl locale handling (internationalization and localization)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In the beginning there was \s-1ASCII,\s0 the \*(L"American Standard Code for
Information Interchange\*(R", which works quite well for Americans with
their English alphabet and dollar-denominated currency.  But it doesn't
work so well even for other English speakers, who may use different
currencies, such as the pound sterling (as the symbol for that currency
is not in \s-1ASCII\s0); and it's hopelessly inadequate for many of the
thousands of the world's other languages.
.PP
To address these deficiencies, the concept of locales was invented
(formally the \s-1ISO C, XPG4, POSIX 1\s0.c \*(L"locale system\*(R").  And applications
were and are being written that use the locale mechanism.  The process of
making such an application take account of its users' preferences in
these kinds of matters is called \fBinternationalization\fR (often
abbreviated as \fBi18n\fR); telling such an application about a particular
set of preferences is known as \fBlocalization\fR (\fBl10n\fR).
.PP
Perl was extended to support the locale system.  This
is controlled per application by using one pragma, one function call,
and several environment variables.
.PP
Unfortunately, there are quite a few deficiencies with the design (and
often, the implementations) of locales, and their use for character sets
has mostly been supplanted by Unicode (see perlunitut for an
introduction to that, and keep on reading here for how Unicode interacts
with locales in Perl).
.PP
Perl continues to support the old locale system, and starting in v5.16,
provides a hybrid way to use the Unicode character set, along with the
other portions of locales that may not be so problematic.
(Unicode is also creating \f(CW\*(C`CLDR\*(C'\fR, the \*(L"Common Locale Data Repository\*(R",
<http://cldr.unicode.org/> which includes more types of information than
are available in the \s-1POSIX\s0 locale system.  At the time of this writing,
there was no \s-1CPAN\s0 module that provides access to this XML-encoded data.
However, many of its locales have the POSIX-only data extracted, and are
available at <http://unicode.org/Public/cldr/latest/>.)
.SH "WHAT IS A LOCALE"
.IX Header "WHAT IS A LOCALE"
A locale is a set of data that describes various aspects of how various
communities in the world categorize their world.  These categories are
broken down into the following types (some of which include a brief
note here):
.IP "Category \s-1LC_NUMERIC:\s0 Numeric formatting" 4
.IX Item "Category LC_NUMERIC: Numeric formatting"
This indicates how numbers should be formatted for human readability,
for example the character used as the decimal point.
.IP "Category \s-1LC_MONETARY:\s0 Formatting of monetary amounts" 4
.IX Item "Category LC_MONETARY: Formatting of monetary amounts"
\&\ 
.IP "Category \s-1LC_TIME:\s0 Date/Time formatting" 4
.IX Item "Category LC_TIME: Date/Time formatting"
\&\ 
.IP "Category \s-1LC_MESSAGES:\s0 Error and other messages" 4
.IX Item "Category LC_MESSAGES: Error and other messages"
This for the most part is beyond the scope of Perl
.IP "Category \s-1LC_COLLATE:\s0 Collation" 4
.IX Item "Category LC_COLLATE: Collation"
This indicates the ordering of letters for comparison and sorting.
In Latin alphabets, for example, \*(L"b\*(R", generally follows \*(L"a\*(R".
.IP "Category \s-1LC_CTYPE:\s0 Character Types" 4
.IX Item "Category LC_CTYPE: Character Types"
This indicates, for example if a character is an uppercase letter.
.PP
More details on the categories are given below in \*(L"\s-1LOCALE CATEGORIES\*(R"\s0.
.PP
Together, these categories go a long way towards being able to customize
a single program to run in many different locations.  But there are
deficiencies, so keep reading.
.SH "PREPARING TO USE LOCALES"
.IX Header "PREPARING TO USE LOCALES"
Perl will not use locales unless specifically requested to (see \*(L"\s-1NOTES\*(R"\s0 below
for the partial exception of \f(CW\*(C`write()\*(C'\fR).  But even if there is such a
request, \fBall\fR of the following must be true for it to work properly:
.IP "\(bu" 4
\&\fBYour operating system must support the locale system\fR.  If it does,
you should find that the \fIsetlocale()\fR function is a documented part of
its C library.
.IP "\(bu" 4
\&\fBDefinitions for locales that you use must be installed\fR.  You, or
your system administrator, must make sure that this is the case. The
available locales, the location in which they are kept, and the manner
in which they are installed all vary from system to system.  Some systems
provide only a few, hard-wired locales and do not allow more to be
added.  Others allow you to add \*(L"canned\*(R" locales provided by the system
supplier.  Still others allow you or the system administrator to define
and add arbitrary locales.  (You may have to ask your supplier to
provide canned locales that are not delivered with your operating
system.)  Read your system documentation for further illumination.
.IP "\(bu" 4
\&\fBPerl must believe that the locale system is supported\fR.  If it does,
\&\f(CW\*(C`perl \-V:d_setlocale\*(C'\fR will say that the value for \f(CW\*(C`d_setlocale\*(C'\fR is
\&\f(CW\*(C`define\*(C'\fR.
.PP
If you want a Perl application to process and present your data
according to a particular locale, the application code should include
the \f(CW\*(C`use\ locale\*(C'\fR pragma (see \*(L"The use locale pragma\*(R") where
appropriate, and \fBat least one\fR of the following must be true:
.IP "1." 4
\&\fBThe locale-determining environment variables (see \*(L"\s-1ENVIRONMENT\*(R"\s0)
must be correctly set up\fR at the time the application is started, either
by yourself or by whomever set up your system account; or
.IP "2." 4
\&\fBThe application must set its own locale\fR using the method described in
\&\*(L"The setlocale function\*(R".
.SH "USING LOCALES"
.IX Header "USING LOCALES"
.SS "The use locale pragma"
.IX Subsection "The use locale pragma"
By default, Perl ignores the current locale.  The \f(CW\*(C`use\ locale\*(C'\fR
pragma tells Perl to use the current locale for some operations.
Starting in v5.16, there is an optional parameter to this pragma:
.PP
.Vb 1
\&    use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
This parameter allows better mixing of locales and Unicode, and is
described fully in \*(L"Unicode and \s-1UTF\-8\*(R"\s0, but briefly, it tells Perl to
not use the character portions of the locale definition, that is
the \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR categories.  Instead it will use the
native (extended by Unicode) character set.  When using this parameter,
you are responsible for getting the external character set translated
into the native/Unicode one (which it already will be if it is one of
the increasingly popular \s-1UTF\-8\s0 locales).  There are convenient ways of
doing this, as described in \*(L"Unicode and \s-1UTF\-8\*(R"\s0.
.PP
The current locale is set at execution time by
\&\fIsetlocale()\fR described below.  If that function
hasn't yet been called in the course of the program's execution, the
current locale is that which was determined by the \*(L"\s-1ENVIRONMENT\*(R"\s0 in
effect at the start of the program, except that
\&\f(CW\*(C`LC_NUMERIC\*(C'\fR is always
initialized to the C locale (mentioned under \*(L"Finding locales\*(R").
If there is no valid environment, the current locale is undefined.  It
is likely, but not necessarily, the \*(L"C\*(R" locale.
.PP
The operations that are affected by locale are:
.ie n .IP "\fBUnder \fB""use locale \*(Aq:not_characters\*(Aq;""\fB\fR" 4
.el .IP "\fBUnder \f(CBuse locale \*(Aq:not_characters\*(Aq;\fB\fR" 4
.IX Item "Under use locale :not_characters;"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\fBFormat declarations\fR (\fIformat()\fR) use \f(CW\*(C`LC_NUMERIC\*(C'\fR
.IP "\(bu" 4
\&\fBThe \s-1POSIX\s0 date formatting function\fR (\fIstrftime()\fR) uses \f(CW\*(C`LC_TIME\*(C'\fR.
.RE
.RS 4
.Sp
\&\ 
.RE
.ie n .IP "\fBUnder just plain \fB""use locale;""\fB\fR" 4
.el .IP "\fBUnder just plain \f(CBuse locale;\fB\fR" 4
.IX Item "Under just plain use locale;"
The above operations are affected, as well as the following:
.RS 4
.IP "\(bu" 4
\&\fBThe comparison operators\fR (\f(CW\*(C`lt\*(C'\fR, \f(CW\*(C`le\*(C'\fR, \f(CW\*(C`cmp\*(C'\fR, \f(CW\*(C`ge\*(C'\fR, and \f(CW\*(C`gt\*(C'\fR) and
the \s-1POSIX\s0 string collation functions \fIstrcoll()\fR and \fIstrxfrm()\fR use
\&\f(CW\*(C`LC_COLLATE\*(C'\fR.  \fIsort()\fR is also affected if used without an
explicit comparison function, because it uses \f(CW\*(C`cmp\*(C'\fR by default.
.Sp
\&\fBNote:\fR \f(CW\*(C`eq\*(C'\fR and \f(CW\*(C`ne\*(C'\fR are unaffected by locale: they always
perform a char-by-char comparison of their scalar operands.  What's
more, if \f(CW\*(C`cmp\*(C'\fR finds that its operands are equal according to the
collation sequence specified by the current locale, it goes on to
perform a char-by-char comparison, and only returns \fI0\fR (equal) if the
operands are char-for-char identical.  If you really want to know whether
two strings\*(--which \f(CW\*(C`eq\*(C'\fR and \f(CW\*(C`cmp\*(C'\fR may consider different\*(--are equal
as far as collation in the locale is concerned, see the discussion in
\&\*(L"Category \s-1LC_COLLATE:\s0 Collation\*(R".
.IP "\(bu" 4
\&\fBRegular expressions and case-modification functions\fR (\fIuc()\fR, \fIlc()\fR,
\&\fIucfirst()\fR, and \fIlcfirst()\fR) use \f(CW\*(C`LC_CTYPE\*(C'\fR
.RE
.RS 4
.RE
.PP
The default behavior is restored with the \f(CW\*(C`no\ locale\*(C'\fR pragma, or
upon reaching the end of the block enclosing \f(CW\*(C`use locale\*(C'\fR.
Note that \f(CW\*(C`use locale\*(C'\fR and \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR may be
nested, and that what is in effect within an inner scope will revert to
the outer scope's rules at the end of the inner scope.
.PP
The string result of any operation that uses locale
information is tainted, as it is possible for a locale to be
untrustworthy.  See \*(L"\s-1SECURITY\*(R"\s0.
.SS "The setlocale function"
.IX Subsection "The setlocale function"
You can switch locales as often as you wish at run time with the
\&\fIPOSIX::setlocale()\fR function:
.PP
.Vb 4
\&        # Import locale\-handling tool set from POSIX module.
\&        # This example uses: setlocale \-\- the function call
\&        #                    LC_CTYPE \-\- explained below
\&        use POSIX qw(locale_h);
\&
\&        # query and save the old locale
\&        $old_locale = setlocale(LC_CTYPE);
\&
\&        setlocale(LC_CTYPE, "fr_CA.ISO8859\-1");
\&        # LC_CTYPE now in locale "French, Canada, codeset ISO 8859\-1"
\&
\&        setlocale(LC_CTYPE, "");
\&        # LC_CTYPE now reset to default defined by LC_ALL/LC_CTYPE/LANG
\&        # environment variables.  See below for documentation.
\&
\&        # restore the old locale
\&        setlocale(LC_CTYPE, $old_locale);
.Ve
.PP
The first argument of \fIsetlocale()\fR gives the \fBcategory\fR, the second the
\&\fBlocale\fR.  The category tells in what aspect of data processing you
want to apply locale-specific rules.  Category names are discussed in
\&\*(L"\s-1LOCALE CATEGORIES\*(R"\s0 and \*(L"\s-1ENVIRONMENT\*(R"\s0.  The locale is the name of a
collection of customization information corresponding to a particular
combination of language, country or territory, and codeset.  Read on for
hints on the naming of locales: not all systems name locales as in the
example.
.PP
If no second argument is provided and the category is something else
than \s-1LC_ALL,\s0 the function returns a string naming the current locale
for the category.  You can use this value as the second argument in a
subsequent call to \fIsetlocale()\fR.
.PP
If no second argument is provided and the category is \s-1LC_ALL,\s0 the
result is implementation-dependent.  It may be a string of
concatenated locale names (separator also implementation-dependent)
or a single locale name.  Please consult your \fIsetlocale\fR\|(3) man page for
details.
.PP
If a second argument is given and it corresponds to a valid locale,
the locale for the category is set to that value, and the function
returns the now-current locale value.  You can then use this in yet
another call to \fIsetlocale()\fR.  (In some implementations, the return
value may sometimes differ from the value you gave as the second
argument\*(--think of it as an alias for the value you gave.)
.PP
As the example shows, if the second argument is an empty string, the
category's locale is returned to the default specified by the
corresponding environment variables.  Generally, this results in a
return to the default that was in force when Perl started up: changes
to the environment made by the application after startup may or may not
be noticed, depending on your system's C library.
.PP
If the second argument does not correspond to a valid locale, the locale
for the category is not changed, and the function returns \fIundef\fR.
.PP
Note that Perl ignores the current \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR locales
within the scope of a \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR.
.PP
For further information about the categories, consult \fIsetlocale\fR\|(3).
.SS "Finding locales"
.IX Subsection "Finding locales"
For locales available in your system, consult also \fIsetlocale\fR\|(3) to
see whether it leads to the list of available locales (search for the
\&\fI\s-1SEE ALSO\s0\fR section).  If that fails, try the following command lines:
.PP
.Vb 1
\&        locale \-a
\&
\&        nlsinfo
\&
\&        ls /usr/lib/nls/loc
\&
\&        ls /usr/lib/locale
\&
\&        ls /usr/lib/nls
\&
\&        ls /usr/share/locale
.Ve
.PP
and see whether they list something resembling these
.PP
.Vb 7
\&        en_US.ISO8859\-1     de_DE.ISO8859\-1     ru_RU.ISO8859\-5
\&        en_US.iso88591      de_DE.iso88591      ru_RU.iso88595
\&        en_US               de_DE               ru_RU
\&        en                  de                  ru
\&        english             german              russian
\&        english.iso88591    german.iso88591     russian.iso88595
\&        english.roman8                          russian.koi8r
.Ve
.PP
Sadly, even though the calling interface for \fIsetlocale()\fR has been
standardized, names of locales and the directories where the
configuration resides have not been.  The basic form of the name is
\&\fIlanguage_territory\fR\fB.\fR\fIcodeset\fR, but the latter parts after
\&\fIlanguage\fR are not always present.  The \fIlanguage\fR and \fIcountry\fR
are usually from the standards \fB\s-1ISO 3166\s0\fR and \fB\s-1ISO 639\s0\fR, the
two-letter abbreviations for the countries and the languages of the
world, respectively.  The \fIcodeset\fR part often mentions some \fB\s-1ISO
8859\s0\fR character set, the Latin codesets.  For example, \f(CW\*(C`ISO 8859\-1\*(C'\fR
is the so-called \*(L"Western European codeset\*(R" that can be used to encode
most Western European languages adequately.  Again, there are several
ways to write even the name of that one standard.  Lamentably.
.PP
Two special locales are worth particular mention: \*(L"C\*(R" and \*(L"\s-1POSIX\*(R".\s0
Currently these are effectively the same locale: the difference is
mainly that the first one is defined by the C standard, the second by
the \s-1POSIX\s0 standard.  They define the \fBdefault locale\fR in which
every program starts in the absence of locale information in its
environment.  (The \fIdefault\fR default locale, if you will.)  Its language
is (American) English and its character codeset \s-1ASCII.
\&\s0\fBWarning\fR. The C locale delivered by some vendors may not
actually exactly match what the C standard calls for.  So beware.
.PP
\&\fB\s-1NOTE\s0\fR: Not all systems have the \*(L"\s-1POSIX\*(R"\s0 locale (not all systems are
POSIX-conformant), so use \*(L"C\*(R" when you need explicitly to specify this
default locale.
.SS "\s-1LOCALE PROBLEMS\s0"
.IX Subsection "LOCALE PROBLEMS"
You may encounter the following warning message at Perl startup:
.PP
.Vb 6
\&        perl: warning: Setting locale failed.
\&        perl: warning: Please check that your locale settings:
\&                LC_ALL = "En_US",
\&                LANG = (unset)
\&            are supported and installed on your system.
\&        perl: warning: Falling back to the standard locale ("C").
.Ve
.PP
This means that your locale settings had \s-1LC_ALL\s0 set to \*(L"En_US\*(R" and
\&\s-1LANG\s0 exists but has no value.  Perl tried to believe you but could not.
Instead, Perl gave up and fell back to the \*(L"C\*(R" locale, the default locale
that is supposed to work no matter what.  This usually means your locale
settings were wrong, they mention locales your system has never heard
of, or the locale installation in your system has problems (for example,
some system files are broken or missing).  There are quick and temporary
fixes to these problems, as well as more thorough and lasting fixes.
.SS "Temporarily fixing locale problems"
.IX Subsection "Temporarily fixing locale problems"
The two quickest fixes are either to render Perl silent about any
locale inconsistencies or to run Perl under the default locale \*(L"C\*(R".
.PP
Perl's moaning about locale problems can be silenced by setting the
environment variable \s-1PERL_BADLANG\s0 to a zero value, for example \*(L"0\*(R".
This method really just sweeps the problem under the carpet: you tell
Perl to shut up even when Perl sees that something is wrong.  Do not
be surprised if later something locale-dependent misbehaves.
.PP
Perl can be run under the \*(L"C\*(R" locale by setting the environment
variable \s-1LC_ALL\s0 to \*(L"C\*(R".  This method is perhaps a bit more civilized
than the \s-1PERL_BADLANG\s0 approach, but setting \s-1LC_ALL \s0(or
other locale variables) may affect other programs as well, not just
Perl.  In particular, external programs run from within Perl will see
these changes.  If you make the new settings permanent (read on), all
programs you run see the changes.  See \*(L"\s-1ENVIRONMENT\*(R"\s0 for
the full list of relevant environment variables and \*(L"\s-1USING LOCALES\*(R"\s0
for their effects in Perl.  Effects in other programs are
easily deducible.  For example, the variable \s-1LC_COLLATE\s0 may well affect
your \fBsort\fR program (or whatever the program that arranges \*(L"records\*(R"
alphabetically in your system is called).
.PP
You can test out changing these variables temporarily, and if the
new settings seem to help, put those settings into your shell startup
files.  Consult your local documentation for the exact details.  For in
Bourne-like shells (\fBsh\fR, \fBksh\fR, \fBbash\fR, \fBzsh\fR):
.PP
.Vb 2
\&        LC_ALL=en_US.ISO8859\-1
\&        export LC_ALL
.Ve
.PP
This assumes that we saw the locale \*(L"en_US.ISO8859\-1\*(R" using the commands
discussed above.  We decided to try that instead of the above faulty
locale \*(L"En_US\*(R"\-\-and in Cshish shells (\fBcsh\fR, \fBtcsh\fR)
.PP
.Vb 1
\&        setenv LC_ALL en_US.ISO8859\-1
.Ve
.PP
or if you have the \*(L"env\*(R" application you can do in any shell
.PP
.Vb 1
\&        env LC_ALL=en_US.ISO8859\-1 perl ...
.Ve
.PP
If you do not know what shell you have, consult your local
helpdesk or the equivalent.
.SS "Permanently fixing locale problems"
.IX Subsection "Permanently fixing locale problems"
The slower but superior fixes are when you may be able to yourself
fix the misconfiguration of your own environment variables.  The
mis(sing)configuration of the whole system's locales usually requires
the help of your friendly system administrator.
.PP
First, see earlier in this document about \*(L"Finding locales\*(R".  That tells
how to find which locales are really supported\*(--and more importantly,
installed\*(--on your system.  In our example error message, environment
variables affecting the locale are listed in the order of decreasing
importance (and unset variables do not matter).  Therefore, having
\&\s-1LC_ALL\s0 set to \*(L"En_US\*(R" must have been the bad choice, as shown by the
error message.  First try fixing locale settings listed first.
.PP
Second, if using the listed commands you see something \fBexactly\fR
(prefix matches do not count and case usually counts) like \*(L"En_US\*(R"
without the quotes, then you should be okay because you are using a
locale name that should be installed and available in your system.
In this case, see \*(L"Permanently fixing your system's locale configuration\*(R".
.SS "Permanently fixing your system's locale configuration"
.IX Subsection "Permanently fixing your system's locale configuration"
This is when you see something like:
.PP
.Vb 4
\&        perl: warning: Please check that your locale settings:
\&                LC_ALL = "En_US",
\&                LANG = (unset)
\&            are supported and installed on your system.
.Ve
.PP
but then cannot see that \*(L"En_US\*(R" listed by the above-mentioned
commands.  You may see things like \*(L"en_US.ISO8859\-1\*(R", but that isn't
the same.  In this case, try running under a locale
that you can list and which somehow matches what you tried.  The
rules for matching locale names are a bit vague because
standardization is weak in this area.  See again the
\&\*(L"Finding locales\*(R" about general rules.
.SS "Fixing system locale configuration"
.IX Subsection "Fixing system locale configuration"
Contact a system administrator (preferably your own) and report the exact
error message you get, and ask them to read this same documentation you
are now reading.  They should be able to check whether there is something
wrong with the locale configuration of the system.  The \*(L"Finding locales\*(R"
section is unfortunately a bit vague about the exact commands and places
because these things are not that standardized.
.SS "The localeconv function"
.IX Subsection "The localeconv function"
The \fIPOSIX::localeconv()\fR function allows you to get particulars of the
locale-dependent numeric formatting information specified by the current
\&\f(CW\*(C`LC_NUMERIC\*(C'\fR and \f(CW\*(C`LC_MONETARY\*(C'\fR locales.  (If you just want the name of
the current locale for a particular category, use \fIPOSIX::setlocale()\fR
with a single parameter\*(--see \*(L"The setlocale function\*(R".)
.PP
.Vb 1
\&        use POSIX qw(locale_h);
\&
\&        # Get a reference to a hash of locale\-dependent info
\&        $locale_values = localeconv();
\&
\&        # Output sorted list of the values
\&        for (sort keys %$locale_values) {
\&            printf "%\-20s = %s\en", $_, $locale_values\->{$_}
\&        }
.Ve
.PP
\&\fIlocaleconv()\fR takes no arguments, and returns \fBa reference to\fR a hash.
The keys of this hash are variable names for formatting, such as
\&\f(CW\*(C`decimal_point\*(C'\fR and \f(CW\*(C`thousands_sep\*(C'\fR.  The values are the
corresponding, er, values.  See \*(L"localeconv\*(R" in \s-1POSIX\s0 for a longer
example listing the categories an implementation might be expected to
provide; some provide more and others fewer.  You don't need an
explicit \f(CW\*(C`use locale\*(C'\fR, because \fIlocaleconv()\fR always observes the
current locale.
.PP
Here's a simple-minded example program that rewrites its command-line
parameters as integers correctly formatted in the current locale:
.PP
.Vb 1
\&    use POSIX qw(locale_h);
\&
\&    # Get some of locale\*(Aqs numeric formatting parameters
\&    my ($thousands_sep, $grouping) =
\&            @{localeconv()}{\*(Aqthousands_sep\*(Aq, \*(Aqgrouping\*(Aq};
\&
\&    # Apply defaults if values are missing
\&    $thousands_sep = \*(Aq,\*(Aq unless $thousands_sep;
\&
\&    # grouping and mon_grouping are packed lists
\&    # of small integers (characters) telling the
\&    # grouping (thousand_seps and mon_thousand_seps
\&    # being the group dividers) of numbers and
\&    # monetary quantities.  The integers\*(Aq meanings:
\&    # 255 means no more grouping, 0 means repeat
\&    # the previous grouping, 1\-254 means use that
\&    # as the current grouping.  Grouping goes from
\&    # right to left (low to high digits).  In the
\&    # below we cheat slightly by never using anything
\&    # else than the first grouping (whatever that is).
\&    if ($grouping) {
\&        @grouping = unpack("C*", $grouping);
\&    } else {
\&        @grouping = (3);
\&    }
\&
\&    # Format command line params for current locale
\&    for (@ARGV) {
\&        $_ = int;    # Chop non\-integer part
\&        1 while
\&        s/(\ed)(\ed{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;
\&        print "$_";
\&    }
\&    print "\en";
.Ve
.SS "I18N::Langinfo"
.IX Subsection "I18N::Langinfo"
Another interface for querying locale-dependent information is the
\&\fII18N::Langinfo::langinfo()\fR function, available at least in Unix-like
systems and \s-1VMS.\s0
.PP
The following example will import the \fIlanginfo()\fR function itself and
three constants to be used as arguments to \fIlanginfo()\fR: a constant for
the abbreviated first day of the week (the numbering starts from
Sunday = 1) and two more constants for the affirmative and negative
answers for a yes/no question in the current locale.
.PP
.Vb 1
\&    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);
\&
\&    my ($abday_1, $yesstr, $nostr)
\&                = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);
\&
\&    print "$abday_1? [$yesstr/$nostr] ";
.Ve
.PP
In other words, in the \*(L"C\*(R" (or English) locale the above will probably
print something like:
.PP
.Vb 1
\&    Sun? [yes/no]
.Ve
.PP
See I18N::Langinfo for more information.
.SH "LOCALE CATEGORIES"
.IX Header "LOCALE CATEGORIES"
The following subsections describe basic locale categories.  Beyond these,
some combination categories allow manipulation of more than one
basic category at a time.  See \*(L"\s-1ENVIRONMENT\*(R"\s0 for a discussion of these.
.SS "Category \s-1LC_COLLATE:\s0 Collation"
.IX Subsection "Category LC_COLLATE: Collation"
In the scope of \f(CW\*(C`use\ locale\*(C'\fR (but not a
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR), Perl looks to the \f(CW\*(C`LC_COLLATE\*(C'\fR
environment variable to determine the application's notions on collation
(ordering) of characters.  For example, \*(L"b\*(R" follows \*(L"a\*(R" in Latin
alphabets, but where do \*(L"a\*'\*(R" and \*(L"a\*o\*(R" belong?  And while
\&\*(L"color\*(R" follows \*(L"chocolate\*(R" in English, what about in traditional Spanish?
.PP
The following collations all make sense and you may meet any of them
if you \*(L"use locale\*(R".
.PP
.Vb 4
\&        A B C D E a b c d e
\&        A a B b C c D d E e
\&        a A b B c C d D e E
\&        a b c d e A B C D E
.Ve
.PP
Here is a code snippet to tell what \*(L"word\*(R"
characters are in the current locale, in that locale's order:
.PP
.Vb 2
\&        use locale;
\&        print +(sort grep /\ew/, map { chr } 0..255), "\en";
.Ve
.PP
Compare this with the characters that you see and their order if you
state explicitly that the locale should be ignored:
.PP
.Vb 2
\&        no locale;
\&        print +(sort grep /\ew/, map { chr } 0..255), "\en";
.Ve
.PP
This machine-native collation (which is what you get unless \f(CW\*(C`use\ locale\*(C'\fR has appeared earlier in the same block) must be used for
sorting raw binary data, whereas the locale-dependent collation of the
first example is useful for natural text.
.PP
As noted in \*(L"\s-1USING LOCALES\*(R"\s0, \f(CW\*(C`cmp\*(C'\fR compares according to the current
collation locale when \f(CW\*(C`use locale\*(C'\fR is in effect, but falls back to a
char-by-char comparison for strings that the locale says are equal. You
can use \fIPOSIX::strcoll()\fR if you don't want this fall-back:
.PP
.Vb 3
\&        use POSIX qw(strcoll);
\&        $equal_in_locale =
\&            !strcoll("space and case ignored", "SpaceAndCaseIgnored");
.Ve
.PP
\&\f(CW$equal_in_locale\fR will be true if the collation locale specifies a
dictionary-like ordering that ignores space characters completely and
which folds case.
.PP
If you have a single string that you want to check for \*(L"equality in
locale\*(R" against several others, you might think you could gain a little
efficiency by using \fIPOSIX::strxfrm()\fR in conjunction with \f(CW\*(C`eq\*(C'\fR:
.PP
.Vb 8
\&        use POSIX qw(strxfrm);
\&        $xfrm_string = strxfrm("Mixed\-case string");
\&        print "locale collation ignores spaces\en"
\&            if $xfrm_string eq strxfrm("Mixed\-casestring");
\&        print "locale collation ignores hyphens\en"
\&            if $xfrm_string eq strxfrm("Mixedcase string");
\&        print "locale collation ignores case\en"
\&            if $xfrm_string eq strxfrm("mixed\-case string");
.Ve
.PP
\&\fIstrxfrm()\fR takes a string and maps it into a transformed string for use
in char-by-char comparisons against other transformed strings during
collation.  \*(L"Under the hood\*(R", locale-affected Perl comparison operators
call \fIstrxfrm()\fR for both operands, then do a char-by-char
comparison of the transformed strings.  By calling \fIstrxfrm()\fR explicitly
and using a non locale-affected comparison, the example attempts to save
a couple of transformations.  But in fact, it doesn't save anything: Perl
magic (see \*(L"Magic Variables\*(R" in perlguts) creates the transformed version of a
string the first time it's needed in a comparison, then keeps this version around
in case it's needed again.  An example rewritten the easy way with
\&\f(CW\*(C`cmp\*(C'\fR runs just about as fast.  It also copes with null characters
embedded in strings; if you call \fIstrxfrm()\fR directly, it treats the first
null it finds as a terminator.  don't expect the transformed strings
it produces to be portable across systems\*(--or even from one revision
of your operating system to the next.  In short, don't call \fIstrxfrm()\fR
directly: let Perl do it for you.
.PP
Note: \f(CW\*(C`use locale\*(C'\fR isn't shown in some of these examples because it isn't
needed: \fIstrcoll()\fR and \fIstrxfrm()\fR exist only to generate locale-dependent
results, and so always obey the current \f(CW\*(C`LC_COLLATE\*(C'\fR locale.
.SS "Category \s-1LC_CTYPE:\s0 Character Types"
.IX Subsection "Category LC_CTYPE: Character Types"
In the scope of \f(CW\*(C`use\ locale\*(C'\fR (but not a
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR), Perl obeys the \f(CW\*(C`LC_CTYPE\*(C'\fR locale
setting.  This controls the application's notion of which characters are
alphabetic.  This affects Perl's \f(CW\*(C`\ew\*(C'\fR regular expression metanotation,
which stands for alphanumeric characters\*(--that is, alphabetic,
numeric, and including other special characters such as the underscore or
hyphen.  (Consult perlre for more information about
regular expressions.)  Thanks to \f(CW\*(C`LC_CTYPE\*(C'\fR, depending on your locale
setting, characters like \*(L"\*(ae\*(R", \*(L"\*(d-\*(R", \*(L"\*8\*(R", and
\&\*(L"o\*/\*(R" may be understood as \f(CW\*(C`\ew\*(C'\fR characters.
.PP
The \f(CW\*(C`LC_CTYPE\*(C'\fR locale also provides the map used in transliterating
characters between lower and uppercase.  This affects the case-mapping
functions\*(--\fIlc()\fR, lcfirst, \fIuc()\fR, and \fIucfirst()\fR; case-mapping
interpolation with \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, or \f(CW\*(C`\eU\*(C'\fR in double-quoted strings
and \f(CW\*(C`s///\*(C'\fR substitutions; and case-independent regular expression
pattern matching using the \f(CW\*(C`i\*(C'\fR modifier.
.PP
Finally, \f(CW\*(C`LC_CTYPE\*(C'\fR affects the \s-1POSIX\s0 character-class test
functions\*(--\fIisalpha()\fR, \fIislower()\fR, and so on.  For example, if you move
from the \*(L"C\*(R" locale to a 7\-bit Scandinavian one, you may find\*(--possibly
to your surprise\*(--that \*(L"|\*(R" moves from the \fIispunct()\fR class to \fIisalpha()\fR.
Unfortunately, this creates big problems for regular expressions. \*(L"|\*(R" still
means alternation even though it matches \f(CW\*(C`\ew\*(C'\fR.
.PP
Note that there are quite a few things that are unaffected by the
current locale.  All the escape sequences for particular characters,
\&\f(CW\*(C`\en\*(C'\fR for example, always mean the platform's native one.  This means,
for example, that \f(CW\*(C`\eN\*(C'\fR in regular expressions (every character
but new-line) work on the platform character set.
.PP
\&\fBNote:\fR A broken or malicious \f(CW\*(C`LC_CTYPE\*(C'\fR locale definition may result
in clearly ineligible characters being considered to be alphanumeric by
your application.  For strict matching of (mundane) \s-1ASCII\s0 letters and
digits\*(--for example, in command strings\*(--locale\-aware applications
should use \f(CW\*(C`\ew\*(C'\fR with the \f(CW\*(C`/a\*(C'\fR regular expression modifier.  See \*(L"\s-1SECURITY\*(R"\s0.
.SS "Category \s-1LC_NUMERIC:\s0 Numeric Formatting"
.IX Subsection "Category LC_NUMERIC: Numeric Formatting"
After a proper \fIPOSIX::setlocale()\fR call, Perl obeys the \f(CW\*(C`LC_NUMERIC\*(C'\fR
locale information, which controls an application's idea of how numbers
should be formatted for human readability by the \fIprintf()\fR, \fIsprintf()\fR, and
\&\fIwrite()\fR functions. String-to-numeric conversion by the \fIPOSIX::strtod()\fR
function is also affected.  In most implementations the only effect is to
change the character used for the decimal point\*(--perhaps from \*(L".\*(R"  to \*(L",\*(R".
These functions aren't aware of such niceties as thousands separation and
so on. (See \*(L"The localeconv function\*(R" if you care about these things.)
.PP
Output produced by \fIprint()\fR is also affected by the current locale: it
corresponds to what you'd get from \fIprintf()\fR in the \*(L"C\*(R" locale.  The
same is true for Perl's internal conversions between numeric and
string formats:
.PP
.Vb 1
\&        use POSIX qw(strtod setlocale LC_NUMERIC);
\&
\&        setlocale LC_NUMERIC, "";
\&
\&        $n = 5/2;   # Assign numeric 2.5 to $n
\&
\&        $a = " $n"; # Locale\-dependent conversion to string
\&
\&        print "half five is $n\en";       # Locale\-dependent output
\&
\&        printf "half five is %g\en", $n;  # Locale\-dependent output
\&
\&        print "DECIMAL POINT IS COMMA\en"
\&            if $n == (strtod("2,5"))[0]; # Locale\-dependent conversion
.Ve
.PP
See also I18N::Langinfo and \f(CW\*(C`RADIXCHAR\*(C'\fR.
.SS "Category \s-1LC_MONETARY:\s0 Formatting of monetary amounts"
.IX Subsection "Category LC_MONETARY: Formatting of monetary amounts"
The C standard defines the \f(CW\*(C`LC_MONETARY\*(C'\fR category, but not a function
that is affected by its contents.  (Those with experience of standards
committees will recognize that the working group decided to punt on the
issue.)  Consequently, Perl takes no notice of it.  If you really want
to use \f(CW\*(C`LC_MONETARY\*(C'\fR, you can query its contents\*(--see
\&\*(L"The localeconv function\*(R"\-\-and use the information that it returns in your
application's own formatting of currency amounts.  However, you may well
find that the information, voluminous and complex though it may be, still
does not quite meet your requirements: currency formatting is a hard nut
to crack.
.PP
See also I18N::Langinfo and \f(CW\*(C`CRNCYSTR\*(C'\fR.
.SS "\s-1LC_TIME\s0"
.IX Subsection "LC_TIME"
Output produced by \fIPOSIX::strftime()\fR, which builds a formatted
human-readable date/time string, is affected by the current \f(CW\*(C`LC_TIME\*(C'\fR
locale.  Thus, in a French locale, the output produced by the \f(CW%B\fR
format element (full month name) for the first month of the year would
be \*(L"janvier\*(R".  Here's how to get a list of long month names in the
current locale:
.PP
.Vb 5
\&        use POSIX qw(strftime);
\&        for (0..11) {
\&            $long_month_name[$_] =
\&                strftime("%B", 0, 0, 0, 1, $_, 96);
\&        }
.Ve
.PP
Note: \f(CW\*(C`use locale\*(C'\fR isn't needed in this example: as a function that
exists only to generate locale-dependent results, \fIstrftime()\fR always
obeys the current \f(CW\*(C`LC_TIME\*(C'\fR locale.
.PP
See also I18N::Langinfo and \f(CW\*(C`ABDAY_1\*(C'\fR..\f(CW\*(C`ABDAY_7\*(C'\fR, \f(CW\*(C`DAY_1\*(C'\fR..\f(CW\*(C`DAY_7\*(C'\fR,
\&\f(CW\*(C`ABMON_1\*(C'\fR..\f(CW\*(C`ABMON_12\*(C'\fR, and \f(CW\*(C`ABMON_1\*(C'\fR..\f(CW\*(C`ABMON_12\*(C'\fR.
.SS "Other categories"
.IX Subsection "Other categories"
The remaining locale category, \f(CW\*(C`LC_MESSAGES\*(C'\fR (possibly supplemented
by others in particular implementations) is not currently used by
Perl\*(--except possibly to affect the behavior of library functions
called by extensions outside the standard Perl distribution and by the
operating system and its utilities.  Note especially that the string
value of \f(CW$!\fR and the error messages given by external utilities may
be changed by \f(CW\*(C`LC_MESSAGES\*(C'\fR.  If you want to have portable error
codes, use \f(CW\*(C`%!\*(C'\fR.  See Errno.
.SH "SECURITY"
.IX Header "SECURITY"
Although the main discussion of Perl security issues can be found in
perlsec, a discussion of Perl's locale handling would be incomplete
if it did not draw your attention to locale-dependent security issues.
Locales\*(--particularly on systems that allow unprivileged users to
build their own locales\*(--are untrustworthy.  A malicious (or just plain
broken) locale can make a locale-aware application give unexpected
results.  Here are a few possibilities:
.IP "\(bu" 4
Regular expression checks for safe file names or mail addresses using
\&\f(CW\*(C`\ew\*(C'\fR may be spoofed by an \f(CW\*(C`LC_CTYPE\*(C'\fR locale that claims that
characters such as \*(L">\*(R" and \*(L"|\*(R" are alphanumeric.
.IP "\(bu" 4
String interpolation with case-mapping, as in, say, \f(CW\*(C`$dest =
"C:\eU$name.$ext"\*(C'\fR, may produce dangerous results if a bogus \s-1LC_CTYPE\s0
case-mapping table is in effect.
.IP "\(bu" 4
A sneaky \f(CW\*(C`LC_COLLATE\*(C'\fR locale could result in the names of students with
\&\*(L"D\*(R" grades appearing ahead of those with \*(L"A\*(R"s.
.IP "\(bu" 4
An application that takes the trouble to use information in
\&\f(CW\*(C`LC_MONETARY\*(C'\fR may format debits as if they were credits and vice versa
if that locale has been subverted.  Or it might make payments in \s-1US\s0
dollars instead of Hong Kong dollars.
.IP "\(bu" 4
The date and day names in dates formatted by \fIstrftime()\fR could be
manipulated to advantage by a malicious user able to subvert the
\&\f(CW\*(C`LC_DATE\*(C'\fR locale.  (\*(L"Look\*(--it says I wasn't in the building on
Sunday.\*(R")
.PP
Such dangers are not peculiar to the locale system: any aspect of an
application's environment which may be modified maliciously presents
similar challenges.  Similarly, they are not specific to Perl: any
programming language that allows you to write programs that take
account of their environment exposes you to these issues.
.PP
Perl cannot protect you from all possibilities shown in the
examples\*(--there is no substitute for your own vigilance\*(--but, when
\&\f(CW\*(C`use locale\*(C'\fR is in effect, Perl uses the tainting mechanism (see
perlsec) to mark string results that become locale-dependent, and
which may be untrustworthy in consequence.  Here is a summary of the
tainting behavior of operators and functions that may be affected by
the locale:
.IP "\(bu" 4
\&\fBComparison operators\fR (\f(CW\*(C`lt\*(C'\fR, \f(CW\*(C`le\*(C'\fR, \f(CW\*(C`ge\*(C'\fR, \f(CW\*(C`gt\*(C'\fR and \f(CW\*(C`cmp\*(C'\fR):
.Sp
Scalar true/false (or less/equal/greater) result is never tainted.
.IP "\(bu" 4
\&\fBCase-mapping interpolation\fR (with \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR)
.Sp
Result string containing interpolated material is tainted if
\&\f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use\ locale\ \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect.
.IP "\(bu" 4
\&\fBMatching operator\fR (\f(CW\*(C`m//\*(C'\fR):
.Sp
Scalar true/false result never tainted.
.Sp
Subpatterns, either delivered as a list-context result or as \f(CW$1\fR etc.
are tainted if \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use\ locale\ \*(Aq:not_characters\*(Aq\*(C'\fR)
is in effect, and the subpattern regular
expression contains \f(CW\*(C`\ew\*(C'\fR (to match an alphanumeric character), \f(CW\*(C`\eW\*(C'\fR
(non-alphanumeric character), \f(CW\*(C`\es\*(C'\fR (whitespace character), or \f(CW\*(C`\eS\*(C'\fR
(non whitespace character).  The matched-pattern variable, $&, $`
(pre-match), $' (post-match), and $+ (last match) are also tainted if
\&\f(CW\*(C`use locale\*(C'\fR is in effect and the regular expression contains \f(CW\*(C`\ew\*(C'\fR,
\&\f(CW\*(C`\eW\*(C'\fR, \f(CW\*(C`\es\*(C'\fR, or \f(CW\*(C`\eS\*(C'\fR.
.IP "\(bu" 4
\&\fBSubstitution operator\fR (\f(CW\*(C`s///\*(C'\fR):
.Sp
Has the same behavior as the match operator.  Also, the left
operand of \f(CW\*(C`=~\*(C'\fR becomes tainted when \f(CW\*(C`use locale\*(C'\fR
(but not \f(CW\*(C`use\ locale\ \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect if modified as
a result of a substitution based on a regular
expression match involving \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\eW\*(C'\fR, \f(CW\*(C`\es\*(C'\fR, or \f(CW\*(C`\eS\*(C'\fR; or of
case-mapping with \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR,\f(CW\*(C`\eu\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR.
.IP "\(bu" 4
\&\fBOutput formatting functions\fR (\fIprintf()\fR and \fIwrite()\fR):
.Sp
Results are never tainted because otherwise even output from print,
for example \f(CW\*(C`print(1/7)\*(C'\fR, should be tainted if \f(CW\*(C`use locale\*(C'\fR is in
effect.
.IP "\(bu" 4
\&\fBCase-mapping functions\fR (\fIlc()\fR, \fIlcfirst()\fR, \fIuc()\fR, \fIucfirst()\fR):
.Sp
Results are tainted if \f(CW\*(C`use locale\*(C'\fR (but not
\&\f(CW\*(C`use\ locale\ \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect.
.IP "\(bu" 4
\&\fB\s-1POSIX\s0 locale-dependent functions\fR (\fIlocaleconv()\fR, \fIstrcoll()\fR,
\&\fIstrftime()\fR, \fIstrxfrm()\fR):
.Sp
Results are never tainted.
.IP "\(bu" 4
\&\fB\s-1POSIX\s0 character class tests\fR (\fIisalnum()\fR, \fIisalpha()\fR, \fIisdigit()\fR,
\&\fIisgraph()\fR, \fIislower()\fR, \fIisprint()\fR, \fIispunct()\fR, \fIisspace()\fR, \fIisupper()\fR,
\&\fIisxdigit()\fR):
.Sp
True/false results are never tainted.
.PP
Three examples illustrate locale-dependent tainting.
The first program, which ignores its locale, won't run: a value taken
directly from the command line may not be used to name an output file
when taint checks are enabled.
.PP
.Vb 2
\&        #/usr/local/bin/perl \-T
\&        # Run with taint checking
\&
\&        # Command line sanity check omitted...
\&        $tainted_output_file = shift;
\&
\&        open(F, ">$tainted_output_file")
\&            or warn "Open of $tainted_output_file failed: $!\en";
.Ve
.PP
The program can be made to run by \*(L"laundering\*(R" the tainted value through
a regular expression: the second example\*(--which still ignores locale
information\*(--runs, creating the file named on its command line
if it can.
.PP
.Vb 1
\&        #/usr/local/bin/perl \-T
\&
\&        $tainted_output_file = shift;
\&        $tainted_output_file =~ m%[\ew/]+%;
\&        $untainted_output_file = $&;
\&
\&        open(F, ">$untainted_output_file")
\&            or warn "Open of $untainted_output_file failed: $!\en";
.Ve
.PP
Compare this with a similar but locale-aware program:
.PP
.Vb 1
\&        #/usr/local/bin/perl \-T
\&
\&        $tainted_output_file = shift;
\&        use locale;
\&        $tainted_output_file =~ m%[\ew/]+%;
\&        $localized_output_file = $&;
\&
\&        open(F, ">$localized_output_file")
\&            or warn "Open of $localized_output_file failed: $!\en";
.Ve
.PP
This third program fails to run because $& is tainted: it is the result
of a match involving \f(CW\*(C`\ew\*(C'\fR while \f(CW\*(C`use locale\*(C'\fR is in effect.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PERL_BADLANG\s0" 12
.IX Item "PERL_BADLANG"
A string that can suppress Perl's warning about failed locale settings
at startup.  Failure can occur if the locale support in the operating
system is lacking (broken) in some way\*(--or if you mistyped the name of
a locale when you set up your environment.  If this environment
variable is absent, or has a value that does not evaluate to integer
zero\*(--that is, \*(L"0\*(R" or ""\-\- Perl will complain about locale setting
failures.
.Sp
\&\fB\s-1NOTE\s0\fR: \s-1PERL_BADLANG\s0 only gives you a way to hide the warning message.
The message tells about some problem in your system's locale support,
and you should investigate what the problem is.
.PP
The following environment variables are not specific to Perl: They are
part of the standardized (\s-1ISO C, XPG4, POSIX 1\s0.c) \fIsetlocale()\fR method
for controlling an application's opinion on data.
.IP "\s-1LC_ALL\s0" 12
.IX Item "LC_ALL"
\&\f(CW\*(C`LC_ALL\*(C'\fR is the \*(L"override-all\*(R" locale environment variable. If
set, it overrides all the rest of the locale environment variables.
.IP "\s-1LANGUAGE\s0" 12
.IX Item "LANGUAGE"
\&\fB\s-1NOTE\s0\fR: \f(CW\*(C`LANGUAGE\*(C'\fR is a \s-1GNU\s0 extension, it affects you only if you
are using the \s-1GNU\s0 libc.  This is the case if you are using e.g. Linux.
If you are using \*(L"commercial\*(R" Unixes you are most probably \fInot\fR
using \s-1GNU\s0 libc and you can ignore \f(CW\*(C`LANGUAGE\*(C'\fR.
.Sp
However, in the case you are using \f(CW\*(C`LANGUAGE\*(C'\fR: it affects the
language of informational, warning, and error messages output by
commands (in other words, it's like \f(CW\*(C`LC_MESSAGES\*(C'\fR) but it has higher
priority than \f(CW\*(C`LC_ALL\*(C'\fR.  Moreover, it's not a single value but
instead a \*(L"path\*(R" (\*(L":\*(R"\-separated list) of \fIlanguages\fR (not locales).
See the \s-1GNU \s0\f(CW\*(C`gettext\*(C'\fR library documentation for more information.
.IP "\s-1LC_CTYPE\s0" 12
.IX Item "LC_CTYPE"
In the absence of \f(CW\*(C`LC_ALL\*(C'\fR, \f(CW\*(C`LC_CTYPE\*(C'\fR chooses the character type
locale.  In the absence of both \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LC_CTYPE\*(C'\fR, \f(CW\*(C`LANG\*(C'\fR
chooses the character type locale.
.IP "\s-1LC_COLLATE\s0" 12
.IX Item "LC_COLLATE"
In the absence of \f(CW\*(C`LC_ALL\*(C'\fR, \f(CW\*(C`LC_COLLATE\*(C'\fR chooses the collation
(sorting) locale.  In the absence of both \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR,
\&\f(CW\*(C`LANG\*(C'\fR chooses the collation locale.
.IP "\s-1LC_MONETARY\s0" 12
.IX Item "LC_MONETARY"
In the absence of \f(CW\*(C`LC_ALL\*(C'\fR, \f(CW\*(C`LC_MONETARY\*(C'\fR chooses the monetary
formatting locale.  In the absence of both \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LC_MONETARY\*(C'\fR,
\&\f(CW\*(C`LANG\*(C'\fR chooses the monetary formatting locale.
.IP "\s-1LC_NUMERIC\s0" 12
.IX Item "LC_NUMERIC"
In the absence of \f(CW\*(C`LC_ALL\*(C'\fR, \f(CW\*(C`LC_NUMERIC\*(C'\fR chooses the numeric format
locale.  In the absence of both \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LC_NUMERIC\*(C'\fR, \f(CW\*(C`LANG\*(C'\fR
chooses the numeric format.
.IP "\s-1LC_TIME\s0" 12
.IX Item "LC_TIME"
In the absence of \f(CW\*(C`LC_ALL\*(C'\fR, \f(CW\*(C`LC_TIME\*(C'\fR chooses the date and time
formatting locale.  In the absence of both \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LC_TIME\*(C'\fR,
\&\f(CW\*(C`LANG\*(C'\fR chooses the date and time formatting locale.
.IP "\s-1LANG\s0" 12
.IX Item "LANG"
\&\f(CW\*(C`LANG\*(C'\fR is the \*(L"catch-all\*(R" locale environment variable. If it is set, it
is used as the last resort after the overall \f(CW\*(C`LC_ALL\*(C'\fR and the
category-specific \f(CW\*(C`LC_...\*(C'\fR.
.SS "Examples"
.IX Subsection "Examples"
The \s-1LC_NUMERIC\s0 controls the numeric output:
.PP
.Vb 4
\&   use locale;
\&   use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.
\&   setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
\&   printf "%g\en", 1.23; # If the "fr_FR" succeeded, probably shows 1,23.
.Ve
.PP
and also how strings are parsed by \fIPOSIX::strtod()\fR as numbers:
.PP
.Vb 5
\&   use locale;
\&   use POSIX qw(locale_h strtod);
\&   setlocale(LC_NUMERIC, "de_DE") or die "Entschuldigung";
\&   my $x = strtod("2,34") + 5;
\&   print $x, "\en"; # Probably shows 7,34.
.Ve
.SH "NOTES"
.IX Header "NOTES"
.SS "Backward compatibility"
.IX Subsection "Backward compatibility"
Versions of Perl prior to 5.004 \fBmostly\fR ignored locale information,
generally behaving as if something similar to the \f(CW"C"\fR locale were
always in force, even if the program environment suggested otherwise
(see \*(L"The setlocale function\*(R").  By default, Perl still behaves this
way for backward compatibility.  If you want a Perl application to pay
attention to locale information, you \fBmust\fR use the \f(CW\*(C`use\ locale\*(C'\fR
pragma (see \*(L"The use locale pragma\*(R") or, in the unlikely event
that you want to do so for just pattern matching, the
\&\f(CW\*(C`/l\*(C'\fR regular expression modifier (see \*(L"Character set
modifiers\*(R" in perlre) to instruct it to do so.
.PP
Versions of Perl from 5.002 to 5.003 did use the \f(CW\*(C`LC_CTYPE\*(C'\fR
information if available; that is, \f(CW\*(C`\ew\*(C'\fR did understand what
were the letters according to the locale environment variables.
The problem was that the user had no control over the feature:
if the C library supported locales, Perl used them.
.SS "I18N:Collate obsolete"
.IX Subsection "I18N:Collate obsolete"
In versions of Perl prior to 5.004, per-locale collation was possible
using the \f(CW\*(C`I18N::Collate\*(C'\fR library module.  This module is now mildly
obsolete and should be avoided in new applications.  The \f(CW\*(C`LC_COLLATE\*(C'\fR
functionality is now integrated into the Perl core language: One can
use locale-specific scalar data completely normally with \f(CW\*(C`use locale\*(C'\fR,
so there is no longer any need to juggle with the scalar references of
\&\f(CW\*(C`I18N::Collate\*(C'\fR.
.SS "Sort speed and memory use impacts"
.IX Subsection "Sort speed and memory use impacts"
Comparing and sorting by locale is usually slower than the default
sorting; slow-downs of two to four times have been observed.  It will
also consume more memory: once a Perl scalar variable has participated
in any string comparison or sorting operation obeying the locale
collation rules, it will take 3\-15 times more memory than before.  (The
exact multiplier depends on the string's contents, the operating system
and the locale.) These downsides are dictated more by the operating
system's implementation of the locale system than by Perl.
.SS "\fIwrite()\fP and \s-1LC_NUMERIC\s0"
.IX Subsection "write() and LC_NUMERIC"
If a program's environment specifies an \s-1LC_NUMERIC\s0 locale and \f(CW\*(C`use
locale\*(C'\fR is in effect when the format is declared, the locale is used
to specify the decimal point character in formatted output.  Formatted
output cannot be controlled by \f(CW\*(C`use locale\*(C'\fR at the time when \fIwrite()\fR
is called.
.SS "Freely available locale definitions"
.IX Subsection "Freely available locale definitions"
The Unicode \s-1CLDR\s0 project extracts the \s-1POSIX\s0 portion of many of its
locales, available at
.PP
.Vb 1
\&  http://unicode.org/Public/cldr/latest/
.Ve
.PP
There is a large collection of locale definitions at:
.PP
.Vb 1
\&  http://std.dkuug.dk/i18n/WG15\-collection/locales/
.Ve
.PP
You should be aware that it is
unsupported, and is not claimed to be fit for any purpose.  If your
system allows installation of arbitrary locales, you may find the
definitions useful as they are, or as a basis for the development of
your own locales.
.SS "I18n and l10n"
.IX Subsection "I18n and l10n"
\&\*(L"Internationalization\*(R" is often abbreviated as \fBi18n\fR because its first
and last letters are separated by eighteen others.  (You may guess why
the internalin ... internaliti ... i18n tends to get abbreviated.)  In
the same way, \*(L"localization\*(R" is often abbreviated to \fBl10n\fR.
.SS "An imperfect standard"
.IX Subsection "An imperfect standard"
Internationalization, as defined in the C and \s-1POSIX\s0 standards, can be
criticized as incomplete, ungainly, and having too large a granularity.
(Locales apply to a whole process, when it would arguably be more useful
to have them apply to a single thread, window group, or whatever.)  They
also have a tendency, like standards groups, to divide the world into
nations, when we all know that the world can equally well be divided
into bankers, bikers, gamers, and so on.
.SH "Unicode and UTF\-8"
.IX Header "Unicode and UTF-8"
The support of Unicode is new starting from Perl version v5.6, and more fully
implemented in version v5.8 and later.  See perluniintro.  It is
strongly recommended that when combining Unicode and locale (starting in
v5.16), you use
.PP
.Vb 1
\&    use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
When this form of the pragma is used, only the non-character portions of
locales are used by Perl, for example \f(CW\*(C`LC_NUMERIC\*(C'\fR.  Perl assumes that
you have translated all the characters it is to operate on into Unicode
(actually the platform's native character set (\s-1ASCII\s0 or \s-1EBCDIC\s0) plus
Unicode).  For data in files, this can conveniently be done by also
specifying
.PP
.Vb 1
\&    use open \*(Aq:locale\*(Aq;
.Ve
.PP
This pragma arranges for all inputs from files to be translated into
Unicode from the current locale as specified in the environment (see
\&\*(L"\s-1ENVIRONMENT\*(R"\s0), and all outputs to files to be translated back
into the locale.  (See open).  On a per-filehandle basis, you can
instead use the PerlIO::locale module, or the Encode::Locale
module, both available from \s-1CPAN. \s0 The latter module also has methods to
ease the handling of \f(CW\*(C`ARGV\*(C'\fR and environment variables, and can be used
on individual strings.  Also, if you know that all your locales will be
\&\s-1UTF\-8,\s0 as many are these days, you can use the \fB\-C\fR
command line switch.
.PP
This form of the pragma allows essentially seamless handling of locales
with Unicode.  The collation order will be Unicode's.  It is strongly
recommended that when you need to order and sort strings that you use
the standard module Unicode::Collate which gives much better results
in many instances than you can get with the old-style locale handling.
.PP
For pre\-v5.16 Perls, or if you use the locale pragma without the
\&\f(CW\*(C`:not_characters\*(C'\fR parameter, Perl tries to work with both Unicode and
locales\*(--but there are problems.
.PP
Perl does not handle multi-byte locales in this case, such as have been
used for various
Asian languages, such as Big5 or Shift \s-1JIS. \s0 However, the increasingly
common multi-byte \s-1UTF\-8\s0 locales, if properly implemented, may work
reasonably well (depending on your C library implementation) in this
form of the locale pragma, simply because both
they and Perl store characters that take up multiple bytes the same way.
However, some, if not most, C library implementations may not process
the characters in the upper half of the Latin\-1 range (128 \- 255)
properly under \s-1LC_CTYPE. \s0 To see if a character is a particular type
under a locale, Perl uses the functions like \f(CW\*(C`isalnum()\*(C'\fR.  Your C
library may not work for \s-1UTF\-8\s0 locales with those functions, instead
only working under the newer wide library functions like \f(CW\*(C`iswalnum()\*(C'\fR.
.PP
Perl generally takes the tack to use locale rules on code points that can fit
in a single byte, and Unicode rules for those that can't (though this
isn't uniformly applied, see the note at the end of this section).  This
prevents many problems in locales that aren't \s-1UTF\-8. \s0 Suppose the locale
is \s-1ISO8859\-7,\s0 Greek.  The character at 0xD7 there is a capital Chi. But
in the \s-1ISO8859\-1\s0 locale, Latin1, it is a multiplication sign.  The \s-1POSIX\s0
regular expression character class \f(CW\*(C`[[:alpha:]]\*(C'\fR will magically match
0xD7 in the Greek locale but not in the Latin one.
.PP
However, there are places where this breaks down.  Certain constructs are
for Unicode only, such as \f(CW\*(C`\ep{Alpha}\*(C'\fR.  They assume that 0xD7 always has its
Unicode meaning (or the equivalent on \s-1EBCDIC\s0 platforms).  Since Latin1 is a
subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and
Unicode, \f(CW\*(C`\ep{Alpha}\*(C'\fR will never match it, regardless of locale.  A similar
issue occurs with \f(CW\*(C`\eN{...}\*(C'\fR.  It is therefore a bad idea to use \f(CW\*(C`\ep{}\*(C'\fR or
\&\f(CW\*(C`\eN{}\*(C'\fR under plain \f(CW\*(C`use locale\*(C'\fR\-\-\fIunless\fR you can guarantee that the
locale will be a \s-1ISO8859\-1. \s0 Use \s-1POSIX\s0 character classes instead.
.PP
Another problem with this approach is that operations that cross the
single byte/multiple byte boundary are not well-defined, and so are
disallowed.  (This boundary is between the codepoints at 255/256.).
For example, lower casing \s-1LATIN CAPITAL LETTER Y WITH DIAERESIS \s0(U+0178)
should return \s-1LATIN SMALL LETTER Y WITH DIAERESIS \s0(U+00FF).  But in the
Greek locale, for example, there is no character at 0xFF, and Perl
has no way of knowing what the character at 0xFF is really supposed to
represent.  Thus it disallows the operation.  In this mode, the
lowercase of U+0178 is itself.
.PP
The same problems ensue if you enable automatic UTF\-8\-ification of your
standard file handles, default \f(CW\*(C`open()\*(C'\fR layer, and \f(CW@ARGV\fR on non\-ISO8859\-1,
non\-UTF\-8 locales (by using either the \fB\-C\fR command line switch or the
\&\f(CW\*(C`PERL_UNICODE\*(C'\fR environment variable; see perlrun).
Things are read in as \s-1UTF\-8,\s0 which would normally imply a Unicode
interpretation, but the presence of a locale causes them to be interpreted
in that locale instead.  For example, a 0xD7 code point in the Unicode
input, which should mean the multiplication sign, won't be interpreted by
Perl that way under the Greek locale.  This is not a problem
\&\fIprovided\fR you make certain that all locales will always and only be either
an \s-1ISO8859\-1,\s0 or, if you don't have a deficient C library, a \s-1UTF\-8\s0 locale.
.PP
Vendor locales are notoriously buggy, and it is difficult for Perl to test
its locale-handling code because this interacts with code that Perl has no
control over; therefore the locale-handling code in Perl may be buggy as
well.  (However, the Unicode-supplied locales should be better, and
there is a feed back mechanism to correct any problems.  See
\&\*(L"Freely available locale definitions\*(R".)
.PP
If you have Perl v5.16, the problems mentioned above go away if you use
the \f(CW\*(C`:not_characters\*(C'\fR parameter to the locale pragma (except for vendor
bugs in the non-character portions).  If you don't have v5.16, and you
\&\fIdo\fR have locales that work, using them may be worthwhile for certain
specific purposes, as long as you keep in mind the gotchas already
mentioned.  For example, if the collation for your locales works, it
runs faster under locales than under Unicode::Collate; and you gain
access to such things as the local currency symbol and the names of the
months and days of the week.  (But to hammer home the point, in v5.16,
you get this access without the downsides of locales by using the
\&\f(CW\*(C`:not_characters\*(C'\fR form of the pragma.)
.PP
Note: The policy of using locale rules for code points that can fit in a
byte, and Unicode rules for those that can't is not uniformly applied.
Pre\-v5.12, it was somewhat haphazard; in v5.12 it was applied fairly
consistently to regular expression matching except for bracketed
character classes; in v5.14 it was extended to all regex matches; and in
v5.16 to the casing operations such as \f(CW"\eL"\fR and \f(CW\*(C`uc()\*(C'\fR.  For
collation, in all releases, the system's \f(CW\*(C`strxfrm()\*(C'\fR function is called,
and whatever it does is what you get.
.SH "BUGS"
.IX Header "BUGS"
.SS "Broken systems"
.IX Subsection "Broken systems"
In certain systems, the operating system's locale support
is broken and cannot be fixed or used by Perl.  Such deficiencies can
and will result in mysterious hangs and/or Perl core dumps when
\&\f(CW\*(C`use locale\*(C'\fR is in effect.  When confronted with such a system,
please report in excruciating detail to <\fIperlbug@perl.org\fR>, and
also contact your vendor: bug fixes may exist for these problems
in your operating system.  Sometimes such bug fixes are called an
operating system upgrade.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
I18N::Langinfo, perluniintro, perlunicode, open,
\&\*(L"isalnum\*(R" in \s-1POSIX\s0, \*(L"isalpha\*(R" in \s-1POSIX\s0,
\&\*(L"isdigit\*(R" in \s-1POSIX\s0, \*(L"isgraph\*(R" in \s-1POSIX\s0, \*(L"islower\*(R" in \s-1POSIX\s0,
\&\*(L"isprint\*(R" in \s-1POSIX\s0, \*(L"ispunct\*(R" in \s-1POSIX\s0, \*(L"isspace\*(R" in \s-1POSIX\s0,
\&\*(L"isupper\*(R" in \s-1POSIX\s0, \*(L"isxdigit\*(R" in \s-1POSIX\s0, \*(L"localeconv\*(R" in \s-1POSIX\s0,
\&\*(L"setlocale\*(R" in \s-1POSIX\s0, \*(L"strcoll\*(R" in \s-1POSIX\s0, \*(L"strftime\*(R" in \s-1POSIX\s0,
\&\*(L"strtod\*(R" in \s-1POSIX\s0, \*(L"strxfrm\*(R" in \s-1POSIX\s0.
.SH "HISTORY"
.IX Header "HISTORY"
Jarkko Hietaniemi's original \fIperli18n.pod\fR heavily hacked by Dominic
Dunlop, assisted by the perl5\-porters.  Prose worked over a bit by
Tom Christiansen, and updated by Perl 5 porters.
   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perllol.1                                    0100644 0001750 0001750 00000041252 12566207441 022414  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLLOL 1"
.TH PERLLOL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perllol \- Manipulating Arrays of Arrays in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Declaration and Access of Arrays of Arrays"
.IX Subsection "Declaration and Access of Arrays of Arrays"
The simplest two-level data structure to build in Perl is an array of
arrays, sometimes casually called a list of lists.  It's reasonably easy to
understand, and almost everything that applies here will also be applicable
later on with the fancier data structures.
.PP
An array of an array is just a regular old array \f(CW@AoA\fR that you can
get at with two subscripts, like \f(CW$AoA[3][2]\fR.  Here's a declaration
of the array:
.PP
.Vb 1
\&    use 5.010;  # so we can use say()
\&
\&    # assign to our array, an array of array references
\&    @AoA = (
\&           [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&           [ "george", "jane", "elroy", "judy", ],
\&           [ "homer", "bart", "marge", "maggie", ],
\&    );
\&    say $AoA[2][1];
\&  bart
.Ve
.PP
Now you should be very careful that the outer bracket type
is a round one, that is, a parenthesis.  That's because you're assigning to
an \f(CW@array\fR, so you need parentheses.  If you wanted there \fInot\fR to be an \f(CW@AoA\fR,
but rather just a reference to it, you could do something more like this:
.PP
.Vb 8
\&    # assign a reference to array of array references
\&    $ref_to_AoA = [
\&        [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&        [ "george", "jane", "elroy", "judy", ],
\&        [ "homer", "bart", "marge", "maggie", ],
\&    ];
\&    say $ref_to_AoA\->[2][1];
\&  bart
.Ve
.PP
Notice that the outer bracket type has changed, and so our access syntax
has also changed.  That's because unlike C, in perl you can't freely
interchange arrays and references thereto.  \f(CW$ref_to_AoA\fR is a reference to an
array, whereas \f(CW@AoA\fR is an array proper.  Likewise, \f(CW$AoA[2]\fR is not an
array, but an array ref.  So how come you can write these:
.PP
.Vb 2
\&    $AoA[2][2]
\&    $ref_to_AoA\->[2][2]
.Ve
.PP
instead of having to write these:
.PP
.Vb 2
\&    $AoA[2]\->[2]
\&    $ref_to_AoA\->[2]\->[2]
.Ve
.PP
Well, that's because the rule is that on adjacent brackets only (whether
square or curly), you are free to omit the pointer dereferencing arrow.
But you cannot do so for the very first one if it's a scalar containing
a reference, which means that \f(CW$ref_to_AoA\fR always needs it.
.SS "Growing Your Own"
.IX Subsection "Growing Your Own"
That's all well and good for declaration of a fixed data structure,
but what if you wanted to add new elements on the fly, or build
it up entirely from scratch?
.PP
First, let's look at reading it in from a file.  This is something like
adding a row at a time.  We'll assume that there's a flat file in which
each line is a row and each word an element.  If you're trying to develop an
\&\f(CW@AoA\fR array containing all these, here's the right way to do that:
.PP
.Vb 4
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
You might also have loaded that from a function:
.PP
.Vb 3
\&    for $i ( 1 .. 10 ) {
\&        $AoA[$i] = [ somefunc($i) ];
\&    }
.Ve
.PP
Or you might have had a temporary variable sitting around with the
array in it.
.PP
.Vb 4
\&    for $i ( 1 .. 10 ) {
\&        @tmp = somefunc($i);
\&        $AoA[$i] = [ @tmp ];
\&    }
.Ve
.PP
It's important you make sure to use the \f(CW\*(C`[ ]\*(C'\fR array reference
constructor.  That's because this wouldn't work:
.PP
.Vb 1
\&    $AoA[$i] = @tmp;   # WRONG!
.Ve
.PP
The reason that doesn't do what you want is because assigning a
named array like that to a scalar is taking an array in scalar
context, which means just counts the number of elements in \f(CW@tmp\fR.
.PP
If you are running under \f(CW\*(C`use strict\*(C'\fR (and if you aren't, why in
the world aren't you?), you'll have to add some declarations to
make it happy:
.PP
.Vb 6
\&    use strict;
\&    my(@AoA, @tmp);
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
Of course, you don't need the temporary array to have a name at all:
.PP
.Vb 3
\&    while (<>) {
\&        push @AoA, [ split ];
\&    }
.Ve
.PP
You also don't have to use \fIpush()\fR.  You could just make a direct assignment
if you knew where you wanted to put it:
.PP
.Vb 5
\&    my (@AoA, $i, $line);
\&    for $i ( 0 .. 10 ) {
\&        $line = <>;
\&        $AoA[$i] = [ split " ", $line ];
\&    }
.Ve
.PP
or even just
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", <> ];
\&    }
.Ve
.PP
You should in general be leery of using functions that could
potentially return lists in scalar context without explicitly stating
such.  This would be clearer to the casual reader:
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", scalar(<>) ];
\&    }
.Ve
.PP
If you wanted to have a \f(CW$ref_to_AoA\fR variable as a reference to an array,
you'd have to do something like this:
.PP
.Vb 3
\&    while (<>) {
\&        push @$ref_to_AoA, [ split ];
\&    }
.Ve
.PP
Now you can add new rows.  What about adding new columns?  If you're
dealing with just matrices, it's often easiest to use simple assignment:
.PP
.Vb 5
\&    for $x (1 .. 10) {
\&        for $y (1 .. 10) {
\&            $AoA[$x][$y] = func($x, $y);
\&        }
\&    }
\&
\&    for $x ( 3, 7, 9 ) {
\&        $AoA[$x][20] += func2($x);
\&    }
.Ve
.PP
It doesn't matter whether those elements are already
there or not: it'll gladly create them for you, setting
intervening elements to \f(CW\*(C`undef\*(C'\fR as need be.
.PP
If you wanted just to append to a row, you'd have
to do something a bit funnier looking:
.PP
.Vb 2
\&    # add new columns to an existing row
\&    push @{ $AoA[0] }, "wilma", "betty";   # explicit deref
.Ve
.PP
Prior to Perl 5.14, this wouldn't even compile:
.PP
.Vb 1
\&    push $AoA[0], "wilma", "betty";        # implicit deref
.Ve
.PP
How come?  Because once upon a time, the argument to \fIpush()\fR had to be a
real array, not just a reference to one. That's no longer true.  In fact,
the line marked \*(L"implicit deref\*(R" above works just fine\*(--in this
instance\*(--to do what the one that says explicit deref did.
.PP
The reason I said \*(L"in this instance\*(R" is because that \fIonly\fR works
because \f(CW$AoA[0]\fR already held an array reference.  If you try that on an
undefined variable, you'll take an exception.  That's because the implicit
derefererence will never autovivify an undefined variable the way \f(CW\*(C`@{ }\*(C'\fR
always will:
.PP
.Vb 3
\&    my $aref = undef;
\&    push $aref,  qw(some more values);  # WRONG!
\&    push @$aref, qw(a few more);        # ok
.Ve
.PP
If you want to take advantage of this new implicit dereferencing behavior,
go right ahead: it makes code easier on the eye and wrist.  Just understand
that older releases will choke on it during compilation.  Whenever you make
use of something that works only in some given release of Perl and later,
but not earlier, you should place a prominent
.PP
.Vb 1
\&    use v5.14;   # needed for implicit deref of array refs by array ops
.Ve
.PP
directive at the top of the file that needs it.  That way when somebody
tries to run the new code under an old perl, rather than getting an error like
.PP
.Vb 2
\&    Type of arg 1 to push must be array (not array element) at /tmp/a line 8, near ""betty";"
\&    Execution of /tmp/a aborted due to compilation errors.
.Ve
.PP
they'll be politely informed that
.PP
.Vb 2
\&    Perl v5.14.0 required\-\-this is only v5.12.3, stopped at /tmp/a line 1.
\&    BEGIN failed\-\-compilation aborted at /tmp/a line 1.
.Ve
.SS "Access and Printing"
.IX Subsection "Access and Printing"
Now it's time to print your data structure out.  How
are you going to do that?  Well, if you want only one
of the elements, it's trivial:
.PP
.Vb 1
\&    print $AoA[0][0];
.Ve
.PP
If you want to print the whole thing, though, you can't
say
.PP
.Vb 1
\&    print @AoA;         # WRONG
.Ve
.PP
because you'll get just references listed, and perl will never
automatically dereference things for you.  Instead, you have to
roll yourself a loop or two.  This prints the whole structure,
using the shell-style \fIfor()\fR construct to loop across the outer
set of subscripts.
.PP
.Vb 3
\&    for $aref ( @AoA ) {
\&        say "\et [ @$aref ],";
\&    }
.Ve
.PP
If you wanted to keep track of subscripts, you might do this:
.PP
.Vb 3
\&    for $i ( 0 .. $#AoA ) {
\&        say "\et elt $i is [ @{$AoA[$i]} ],";
\&    }
.Ve
.PP
or maybe even this.  Notice the inner loop.
.PP
.Vb 5
\&    for $i ( 0 .. $#AoA ) {
\&        for $j ( 0 .. $#{$AoA[$i]} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
As you can see, it's getting a bit complicated.  That's why
sometimes is easier to take a temporary on your way through:
.PP
.Vb 6
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        for $j ( 0 .. $#{$aref} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
Hmm... that's still a bit ugly.  How about this:
.PP
.Vb 7
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        $n = @$aref \- 1;
\&        for $j ( 0 .. $n ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
When you get tired of writing a custom print for your data structures,
you might look at the standard Dumpvalue or Data::Dumper modules.
The former is what the Perl debugger uses, while the latter generates
parsable Perl code.  For example:
.PP
.Vb 1
\&    use v5.14;     # using the + prototype, new to v5.14
\&
\&    sub show(+) {
\&        require Dumpvalue;
\&        state $prettily = new Dumpvalue::
\&                            tick        => q("),
\&                            compactDump => 1,  # comment these two lines out
\&                            veryCompact => 1,  # if you want a bigger dump
\&                        ;
\&        dumpValue $prettily @_;
\&    }
\&
\&    # Assign a list of array references to an array.
\&    my @AoA = (
\&           [ "fred", "barney" ],
\&           [ "george", "jane", "elroy" ],
\&           [ "homer", "marge", "bart" ],
\&    );
\&    push $AoA[0], "wilma", "betty";
\&    show @AoA;
.Ve
.PP
will print out:
.PP
.Vb 3
\&    0  0..3  "fred" "barney" "wilma" "betty"
\&    1  0..2  "george" "jane" "elroy"
\&    2  0..2  "homer" "marge" "bart"
.Ve
.PP
Whereas if you comment out the two lines I said you might wish to,
then it shows it to you this way instead:
.PP
.Vb 10
\&    0  ARRAY(0x8031d0)
\&       0  "fred"
\&       1  "barney"
\&       2  "wilma"
\&       3  "betty"
\&    1  ARRAY(0x803d40)
\&       0  "george"
\&       1  "jane"
\&       2  "elroy"
\&    2  ARRAY(0x803e10)
\&       0  "homer"
\&       1  "marge"
\&       2  "bart"
.Ve
.SS "Slices"
.IX Subsection "Slices"
If you want to get at a slice (part of a row) in a multidimensional
array, you're going to have to do some fancy subscripting.  That's
because while we have a nice synonym for single elements via the
pointer arrow for dereferencing, no such convenience exists for slices.
.PP
Here's how to do one operation using a loop.  We'll assume an \f(CW@AoA\fR
variable as before.
.PP
.Vb 5
\&    @part = ();
\&    $x = 4;
\&    for ($y = 7; $y < 13; $y++) {
\&        push @part, $AoA[$x][$y];
\&    }
.Ve
.PP
That same loop could be replaced with a slice operation:
.PP
.Vb 1
\&    @part = @{$AoA[4]}[7..12];
.Ve
.PP
or spaced out a bit:
.PP
.Vb 1
\&    @part = @{ $AoA[4] } [ 7..12 ];
.Ve
.PP
But as you might well imagine, this can get pretty rough on the reader.
.PP
Ah, but what if you wanted a \fItwo-dimensional slice\fR, such as having
\&\f(CW$x\fR run from 4..8 and \f(CW$y\fR run from 7 to 12?  Hmm... here's the simple way:
.PP
.Vb 6
\&    @newAoA = ();
\&    for ($startx = $x = 4; $x <= 8; $x++) {
\&        for ($starty = $y = 7; $y <= 12; $y++) {
\&            $newAoA[$x \- $startx][$y \- $starty] = $AoA[$x][$y];
\&        }
\&    }
.Ve
.PP
We can reduce some of the looping through slices
.PP
.Vb 3
\&    for ($x = 4; $x <= 8; $x++) {
\&        push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
\&    }
.Ve
.PP
If you were into Schwartzian Transforms, you would probably
have selected map for that
.PP
.Vb 1
\&    @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;
.Ve
.PP
Although if your manager accused you of seeking job security (or rapid
insecurity) through inscrutable code, it would be hard to argue. :\-)
If I were you, I'd put that in a function:
.PP
.Vb 5
\&    @newAoA = splice_2D( \e@AoA, 4 => 8, 7 => 12 );
\&    sub splice_2D {
\&        my $lrr = shift;        # ref to array of array refs!
\&        my ($x_lo, $x_hi,
\&            $y_lo, $y_hi) = @_;
\&
\&        return map {
\&            [ @{ $lrr\->[$_] } [ $y_lo .. $y_hi ] ]
\&        } $x_lo .. $x_hi;
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldata, perlref, perldsc
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen <\fItchrist@perl.com\fR>
.PP
Last update: Tue Apr 26 18:30:55 \s-1MDT 2011\s0
                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perllol5.16.1                                0100644 0001750 0001750 00000040731 12566207421 022725  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLLOL 1"
.TH PERLLOL 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perllol \- Manipulating Arrays of Arrays in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Declaration and Access of Arrays of Arrays"
.IX Subsection "Declaration and Access of Arrays of Arrays"
The simplest two-level data structure to build in Perl is an array of
arrays, sometimes casually called a list of lists.  It's reasonably easy to
understand, and almost everything that applies here will also be applicable
later on with the fancier data structures.
.PP
An array of an array is just a regular old array \f(CW@AoA\fR that you can
get at with two subscripts, like \f(CW$AoA[3][2]\fR.  Here's a declaration
of the array:
.PP
.Vb 1
\&    use 5.010;  # so we can use say()
\&
\&    # assign to our array, an array of array references
\&    @AoA = (
\&           [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&           [ "george", "jane", "elroy", "judy", ],
\&           [ "homer", "bart", "marge", "maggie", ],
\&    );
\&    say $AoA[2][1];
\&  bart
.Ve
.PP
Now you should be very careful that the outer bracket type
is a round one, that is, a parenthesis.  That's because you're assigning to
an \f(CW@array\fR, so you need parentheses.  If you wanted there \fInot\fR to be an \f(CW@AoA\fR,
but rather just a reference to it, you could do something more like this:
.PP
.Vb 8
\&    # assign a reference to array of array references
\&    $ref_to_AoA = [
\&        [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&        [ "george", "jane", "elroy", "judy", ],
\&        [ "homer", "bart", "marge", "maggie", ],
\&    ];
\&    say $ref_to_AoA\->[2][1];
\&  bart
.Ve
.PP
Notice that the outer bracket type has changed, and so our access syntax
has also changed.  That's because unlike C, in perl you can't freely
interchange arrays and references thereto.  \f(CW$ref_to_AoA\fR is a reference to an
array, whereas \f(CW@AoA\fR is an array proper.  Likewise, \f(CW$AoA[2]\fR is not an
array, but an array ref.  So how come you can write these:
.PP
.Vb 2
\&    $AoA[2][2]
\&    $ref_to_AoA\->[2][2]
.Ve
.PP
instead of having to write these:
.PP
.Vb 2
\&    $AoA[2]\->[2]
\&    $ref_to_AoA\->[2]\->[2]
.Ve
.PP
Well, that's because the rule is that on adjacent brackets only (whether
square or curly), you are free to omit the pointer dereferencing arrow.
But you cannot do so for the very first one if it's a scalar containing
a reference, which means that \f(CW$ref_to_AoA\fR always needs it.
.SS "Growing Your Own"
.IX Subsection "Growing Your Own"
That's all well and good for declaration of a fixed data structure,
but what if you wanted to add new elements on the fly, or build
it up entirely from scratch?
.PP
First, let's look at reading it in from a file.  This is something like
adding a row at a time.  We'll assume that there's a flat file in which
each line is a row and each word an element.  If you're trying to develop an
\&\f(CW@AoA\fR array containing all these, here's the right way to do that:
.PP
.Vb 4
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
You might also have loaded that from a function:
.PP
.Vb 3
\&    for $i ( 1 .. 10 ) {
\&        $AoA[$i] = [ somefunc($i) ];
\&    }
.Ve
.PP
Or you might have had a temporary variable sitting around with the
array in it.
.PP
.Vb 4
\&    for $i ( 1 .. 10 ) {
\&        @tmp = somefunc($i);
\&        $AoA[$i] = [ @tmp ];
\&    }
.Ve
.PP
It's important you make sure to use the \f(CW\*(C`[ ]\*(C'\fR array reference
constructor.  That's because this wouldn't work:
.PP
.Vb 1
\&    $AoA[$i] = @tmp;   # WRONG!
.Ve
.PP
The reason that doesn't do what you want is because assigning a
named array like that to a scalar is taking an array in scalar
context, which means just counts the number of elements in \f(CW@tmp\fR.
.PP
If you are running under \f(CW\*(C`use strict\*(C'\fR (and if you aren't, why in
the world aren't you?), you'll have to add some declarations to
make it happy:
.PP
.Vb 6
\&    use strict;
\&    my(@AoA, @tmp);
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
Of course, you don't need the temporary array to have a name at all:
.PP
.Vb 3
\&    while (<>) {
\&        push @AoA, [ split ];
\&    }
.Ve
.PP
You also don't have to use \fIpush()\fR.  You could just make a direct assignment
if you knew where you wanted to put it:
.PP
.Vb 5
\&    my (@AoA, $i, $line);
\&    for $i ( 0 .. 10 ) {
\&        $line = <>;
\&        $AoA[$i] = [ split " ", $line ];
\&    }
.Ve
.PP
or even just
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", <> ];
\&    }
.Ve
.PP
You should in general be leery of using functions that could
potentially return lists in scalar context without explicitly stating
such.  This would be clearer to the casual reader:
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", scalar(<>) ];
\&    }
.Ve
.PP
If you wanted to have a \f(CW$ref_to_AoA\fR variable as a reference to an array,
you'd have to do something like this:
.PP
.Vb 3
\&    while (<>) {
\&        push @$ref_to_AoA, [ split ];
\&    }
.Ve
.PP
Now you can add new rows.  What about adding new columns?  If you're
dealing with just matrices, it's often easiest to use simple assignment:
.PP
.Vb 5
\&    for $x (1 .. 10) {
\&        for $y (1 .. 10) {
\&            $AoA[$x][$y] = func($x, $y);
\&        }
\&    }
\&
\&    for $x ( 3, 7, 9 ) {
\&        $AoA[$x][20] += func2($x);
\&    }
.Ve
.PP
It doesn't matter whether those elements are already
there or not: it'll gladly create them for you, setting
intervening elements to \f(CW\*(C`undef\*(C'\fR as need be.
.PP
If you wanted just to append to a row, you'd have
to do something a bit funnier looking:
.PP
.Vb 2
\&    # add new columns to an existing row
\&    push @{ $AoA[0] }, "wilma", "betty";   # explicit deref
.Ve
.PP
Prior to Perl 5.14, this wouldn't even compile:
.PP
.Vb 1
\&    push $AoA[0], "wilma", "betty";        # implicit deref
.Ve
.PP
How come?  Because once upon a time, the argument to \fIpush()\fR had to be a
real array, not just a reference to one. That's no longer true.  In fact,
the line marked \*(L"implicit deref\*(R" above works just fine\*(--in this
instance\*(--to do what the one that says explicit deref did.
.PP
The reason I said \*(L"in this instance\*(R" is because that \fIonly\fR works
because \f(CW$AoA[0]\fR already held an array reference.  If you try that on an
undefined variable, you'll take an exception.  That's because the implicit
derefererence will never autovivify an undefined variable the way \f(CW\*(C`@{ }\*(C'\fR
always will:
.PP
.Vb 3
\&    my $aref = undef;
\&    push $aref,  qw(some more values);  # WRONG!
\&    push @$aref, qw(a few more);        # ok
.Ve
.PP
If you want to take advantage of this new implicit dereferencing behavior,
go right ahead: it makes code easier on the eye and wrist.  Just understand
that older releases will choke on it during compilation.  Whenever you make
use of something that works only in some given release of Perl and later,
but not earlier, you should place a prominent
.PP
.Vb 1
\&    use v5.14;   # needed for implicit deref of array refs by array ops
.Ve
.PP
directive at the top of the file that needs it.  That way when somebody
tries to run the new code under an old perl, rather than getting an error like
.PP
.Vb 2
\&    Type of arg 1 to push must be array (not array element) at /tmp/a line 8, near ""betty";"
\&    Execution of /tmp/a aborted due to compilation errors.
.Ve
.PP
they'll be politely informed that
.PP
.Vb 2
\&    Perl v5.14.0 required\-\-this is only v5.12.3, stopped at /tmp/a line 1.
\&    BEGIN failed\-\-compilation aborted at /tmp/a line 1.
.Ve
.SS "Access and Printing"
.IX Subsection "Access and Printing"
Now it's time to print your data structure out.  How
are you going to do that?  Well, if you want only one
of the elements, it's trivial:
.PP
.Vb 1
\&    print $AoA[0][0];
.Ve
.PP
If you want to print the whole thing, though, you can't
say
.PP
.Vb 1
\&    print @AoA;         # WRONG
.Ve
.PP
because you'll get just references listed, and perl will never
automatically dereference things for you.  Instead, you have to
roll yourself a loop or two.  This prints the whole structure,
using the shell-style \fIfor()\fR construct to loop across the outer
set of subscripts.
.PP
.Vb 3
\&    for $aref ( @AoA ) {
\&        say "\et [ @$aref ],";
\&    }
.Ve
.PP
If you wanted to keep track of subscripts, you might do this:
.PP
.Vb 3
\&    for $i ( 0 .. $#AoA ) {
\&        say "\et elt $i is [ @{$AoA[$i]} ],";
\&    }
.Ve
.PP
or maybe even this.  Notice the inner loop.
.PP
.Vb 5
\&    for $i ( 0 .. $#AoA ) {
\&        for $j ( 0 .. $#{$AoA[$i]} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
As you can see, it's getting a bit complicated.  That's why
sometimes is easier to take a temporary on your way through:
.PP
.Vb 6
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        for $j ( 0 .. $#{$aref} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
Hmm... that's still a bit ugly.  How about this:
.PP
.Vb 7
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        $n = @$aref \- 1;
\&        for $j ( 0 .. $n ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
When you get tired of writing a custom print for your data structures,
you might look at the standard Dumpvalue or Data::Dumper modules.
The former is what the Perl debugger uses, while the latter generates
parsable Perl code.  For example:
.PP
.Vb 1
\&    use v5.14;     # using the + prototype, new to v5.14
\&
\&    sub show(+) {
\&        require Dumpvalue;
\&        state $prettily = new Dumpvalue::
\&                            tick        => q("),
\&                            compactDump => 1,  # comment these two lines out
\&                            veryCompact => 1,  # if you want a bigger dump
\&                        ;
\&        dumpValue $prettily @_;
\&    }
\&
\&    # Assign a list of array references to an array.
\&    my @AoA = (
\&           [ "fred", "barney" ],
\&           [ "george", "jane", "elroy" ],
\&           [ "homer", "marge", "bart" ],
\&    );
\&    push $AoA[0], "wilma", "betty";
\&    show @AoA;
.Ve
.PP
will print out:
.PP
.Vb 3
\&    0  0..3  "fred" "barney" "wilma" "betty"
\&    1  0..2  "george" "jane" "elroy"
\&    2  0..2  "homer" "marge" "bart"
.Ve
.PP
Whereas if you comment out the two lines I said you might wish to,
then it shows it to you this way instead:
.PP
.Vb 10
\&    0  ARRAY(0x8031d0)
\&       0  "fred"
\&       1  "barney"
\&       2  "wilma"
\&       3  "betty"
\&    1  ARRAY(0x803d40)
\&       0  "george"
\&       1  "jane"
\&       2  "elroy"
\&    2  ARRAY(0x803e10)
\&       0  "homer"
\&       1  "marge"
\&       2  "bart"
.Ve
.SS "Slices"
.IX Subsection "Slices"
If you want to get at a slice (part of a row) in a multidimensional
array, you're going to have to do some fancy subscripting.  That's
because while we have a nice synonym for single elements via the
pointer arrow for dereferencing, no such convenience exists for slices.
.PP
Here's how to do one operation using a loop.  We'll assume an \f(CW@AoA\fR
variable as before.
.PP
.Vb 5
\&    @part = ();
\&    $x = 4;
\&    for ($y = 7; $y < 13; $y++) {
\&        push @part, $AoA[$x][$y];
\&    }
.Ve
.PP
That same loop could be replaced with a slice operation:
.PP
.Vb 1
\&    @part = @{$AoA[4]}[7..12];
.Ve
.PP
or spaced out a bit:
.PP
.Vb 1
\&    @part = @{ $AoA[4] } [ 7..12 ];
.Ve
.PP
But as you might well imagine, this can get pretty rough on the reader.
.PP
Ah, but what if you wanted a \fItwo-dimensional slice\fR, such as having
\&\f(CW$x\fR run from 4..8 and \f(CW$y\fR run from 7 to 12?  Hmm... here's the simple way:
.PP
.Vb 6
\&    @newAoA = ();
\&    for ($startx = $x = 4; $x <= 8; $x++) {
\&        for ($starty = $y = 7; $y <= 12; $y++) {
\&            $newAoA[$x \- $startx][$y \- $starty] = $AoA[$x][$y];
\&        }
\&    }
.Ve
.PP
We can reduce some of the looping through slices
.PP
.Vb 3
\&    for ($x = 4; $x <= 8; $x++) {
\&        push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
\&    }
.Ve
.PP
If you were into Schwartzian Transforms, you would probably
have selected map for that
.PP
.Vb 1
\&    @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;
.Ve
.PP
Although if your manager accused you of seeking job security (or rapid
insecurity) through inscrutable code, it would be hard to argue. :\-)
If I were you, I'd put that in a function:
.PP
.Vb 5
\&    @newAoA = splice_2D( \e@AoA, 4 => 8, 7 => 12 );
\&    sub splice_2D {
\&        my $lrr = shift;        # ref to array of array refs!
\&        my ($x_lo, $x_hi,
\&            $y_lo, $y_hi) = @_;
\&
\&        return map {
\&            [ @{ $lrr\->[$_] } [ $y_lo .. $y_hi ] ]
\&        } $x_lo .. $x_hi;
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldata, perlref, perldsc
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen <\fItchrist@perl.com\fR>
.PP
Last update: Tue Apr 26 18:30:55 \s-1MDT\s0 2011
                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perllol5.18.1                                0100644 0001750 0001750 00000041252 12566207441 022730  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLLOL 1"
.TH PERLLOL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perllol \- Manipulating Arrays of Arrays in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Declaration and Access of Arrays of Arrays"
.IX Subsection "Declaration and Access of Arrays of Arrays"
The simplest two-level data structure to build in Perl is an array of
arrays, sometimes casually called a list of lists.  It's reasonably easy to
understand, and almost everything that applies here will also be applicable
later on with the fancier data structures.
.PP
An array of an array is just a regular old array \f(CW@AoA\fR that you can
get at with two subscripts, like \f(CW$AoA[3][2]\fR.  Here's a declaration
of the array:
.PP
.Vb 1
\&    use 5.010;  # so we can use say()
\&
\&    # assign to our array, an array of array references
\&    @AoA = (
\&           [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&           [ "george", "jane", "elroy", "judy", ],
\&           [ "homer", "bart", "marge", "maggie", ],
\&    );
\&    say $AoA[2][1];
\&  bart
.Ve
.PP
Now you should be very careful that the outer bracket type
is a round one, that is, a parenthesis.  That's because you're assigning to
an \f(CW@array\fR, so you need parentheses.  If you wanted there \fInot\fR to be an \f(CW@AoA\fR,
but rather just a reference to it, you could do something more like this:
.PP
.Vb 8
\&    # assign a reference to array of array references
\&    $ref_to_AoA = [
\&        [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&        [ "george", "jane", "elroy", "judy", ],
\&        [ "homer", "bart", "marge", "maggie", ],
\&    ];
\&    say $ref_to_AoA\->[2][1];
\&  bart
.Ve
.PP
Notice that the outer bracket type has changed, and so our access syntax
has also changed.  That's because unlike C, in perl you can't freely
interchange arrays and references thereto.  \f(CW$ref_to_AoA\fR is a reference to an
array, whereas \f(CW@AoA\fR is an array proper.  Likewise, \f(CW$AoA[2]\fR is not an
array, but an array ref.  So how come you can write these:
.PP
.Vb 2
\&    $AoA[2][2]
\&    $ref_to_AoA\->[2][2]
.Ve
.PP
instead of having to write these:
.PP
.Vb 2
\&    $AoA[2]\->[2]
\&    $ref_to_AoA\->[2]\->[2]
.Ve
.PP
Well, that's because the rule is that on adjacent brackets only (whether
square or curly), you are free to omit the pointer dereferencing arrow.
But you cannot do so for the very first one if it's a scalar containing
a reference, which means that \f(CW$ref_to_AoA\fR always needs it.
.SS "Growing Your Own"
.IX Subsection "Growing Your Own"
That's all well and good for declaration of a fixed data structure,
but what if you wanted to add new elements on the fly, or build
it up entirely from scratch?
.PP
First, let's look at reading it in from a file.  This is something like
adding a row at a time.  We'll assume that there's a flat file in which
each line is a row and each word an element.  If you're trying to develop an
\&\f(CW@AoA\fR array containing all these, here's the right way to do that:
.PP
.Vb 4
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
You might also have loaded that from a function:
.PP
.Vb 3
\&    for $i ( 1 .. 10 ) {
\&        $AoA[$i] = [ somefunc($i) ];
\&    }
.Ve
.PP
Or you might have had a temporary variable sitting around with the
array in it.
.PP
.Vb 4
\&    for $i ( 1 .. 10 ) {
\&        @tmp = somefunc($i);
\&        $AoA[$i] = [ @tmp ];
\&    }
.Ve
.PP
It's important you make sure to use the \f(CW\*(C`[ ]\*(C'\fR array reference
constructor.  That's because this wouldn't work:
.PP
.Vb 1
\&    $AoA[$i] = @tmp;   # WRONG!
.Ve
.PP
The reason that doesn't do what you want is because assigning a
named array like that to a scalar is taking an array in scalar
context, which means just counts the number of elements in \f(CW@tmp\fR.
.PP
If you are running under \f(CW\*(C`use strict\*(C'\fR (and if you aren't, why in
the world aren't you?), you'll have to add some declarations to
make it happy:
.PP
.Vb 6
\&    use strict;
\&    my(@AoA, @tmp);
\&    while (<>) {
\&        @tmp = split;
\&        push @AoA, [ @tmp ];
\&    }
.Ve
.PP
Of course, you don't need the temporary array to have a name at all:
.PP
.Vb 3
\&    while (<>) {
\&        push @AoA, [ split ];
\&    }
.Ve
.PP
You also don't have to use \fIpush()\fR.  You could just make a direct assignment
if you knew where you wanted to put it:
.PP
.Vb 5
\&    my (@AoA, $i, $line);
\&    for $i ( 0 .. 10 ) {
\&        $line = <>;
\&        $AoA[$i] = [ split " ", $line ];
\&    }
.Ve
.PP
or even just
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", <> ];
\&    }
.Ve
.PP
You should in general be leery of using functions that could
potentially return lists in scalar context without explicitly stating
such.  This would be clearer to the casual reader:
.PP
.Vb 4
\&    my (@AoA, $i);
\&    for $i ( 0 .. 10 ) {
\&        $AoA[$i] = [ split " ", scalar(<>) ];
\&    }
.Ve
.PP
If you wanted to have a \f(CW$ref_to_AoA\fR variable as a reference to an array,
you'd have to do something like this:
.PP
.Vb 3
\&    while (<>) {
\&        push @$ref_to_AoA, [ split ];
\&    }
.Ve
.PP
Now you can add new rows.  What about adding new columns?  If you're
dealing with just matrices, it's often easiest to use simple assignment:
.PP
.Vb 5
\&    for $x (1 .. 10) {
\&        for $y (1 .. 10) {
\&            $AoA[$x][$y] = func($x, $y);
\&        }
\&    }
\&
\&    for $x ( 3, 7, 9 ) {
\&        $AoA[$x][20] += func2($x);
\&    }
.Ve
.PP
It doesn't matter whether those elements are already
there or not: it'll gladly create them for you, setting
intervening elements to \f(CW\*(C`undef\*(C'\fR as need be.
.PP
If you wanted just to append to a row, you'd have
to do something a bit funnier looking:
.PP
.Vb 2
\&    # add new columns to an existing row
\&    push @{ $AoA[0] }, "wilma", "betty";   # explicit deref
.Ve
.PP
Prior to Perl 5.14, this wouldn't even compile:
.PP
.Vb 1
\&    push $AoA[0], "wilma", "betty";        # implicit deref
.Ve
.PP
How come?  Because once upon a time, the argument to \fIpush()\fR had to be a
real array, not just a reference to one. That's no longer true.  In fact,
the line marked \*(L"implicit deref\*(R" above works just fine\*(--in this
instance\*(--to do what the one that says explicit deref did.
.PP
The reason I said \*(L"in this instance\*(R" is because that \fIonly\fR works
because \f(CW$AoA[0]\fR already held an array reference.  If you try that on an
undefined variable, you'll take an exception.  That's because the implicit
derefererence will never autovivify an undefined variable the way \f(CW\*(C`@{ }\*(C'\fR
always will:
.PP
.Vb 3
\&    my $aref = undef;
\&    push $aref,  qw(some more values);  # WRONG!
\&    push @$aref, qw(a few more);        # ok
.Ve
.PP
If you want to take advantage of this new implicit dereferencing behavior,
go right ahead: it makes code easier on the eye and wrist.  Just understand
that older releases will choke on it during compilation.  Whenever you make
use of something that works only in some given release of Perl and later,
but not earlier, you should place a prominent
.PP
.Vb 1
\&    use v5.14;   # needed for implicit deref of array refs by array ops
.Ve
.PP
directive at the top of the file that needs it.  That way when somebody
tries to run the new code under an old perl, rather than getting an error like
.PP
.Vb 2
\&    Type of arg 1 to push must be array (not array element) at /tmp/a line 8, near ""betty";"
\&    Execution of /tmp/a aborted due to compilation errors.
.Ve
.PP
they'll be politely informed that
.PP
.Vb 2
\&    Perl v5.14.0 required\-\-this is only v5.12.3, stopped at /tmp/a line 1.
\&    BEGIN failed\-\-compilation aborted at /tmp/a line 1.
.Ve
.SS "Access and Printing"
.IX Subsection "Access and Printing"
Now it's time to print your data structure out.  How
are you going to do that?  Well, if you want only one
of the elements, it's trivial:
.PP
.Vb 1
\&    print $AoA[0][0];
.Ve
.PP
If you want to print the whole thing, though, you can't
say
.PP
.Vb 1
\&    print @AoA;         # WRONG
.Ve
.PP
because you'll get just references listed, and perl will never
automatically dereference things for you.  Instead, you have to
roll yourself a loop or two.  This prints the whole structure,
using the shell-style \fIfor()\fR construct to loop across the outer
set of subscripts.
.PP
.Vb 3
\&    for $aref ( @AoA ) {
\&        say "\et [ @$aref ],";
\&    }
.Ve
.PP
If you wanted to keep track of subscripts, you might do this:
.PP
.Vb 3
\&    for $i ( 0 .. $#AoA ) {
\&        say "\et elt $i is [ @{$AoA[$i]} ],";
\&    }
.Ve
.PP
or maybe even this.  Notice the inner loop.
.PP
.Vb 5
\&    for $i ( 0 .. $#AoA ) {
\&        for $j ( 0 .. $#{$AoA[$i]} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
As you can see, it's getting a bit complicated.  That's why
sometimes is easier to take a temporary on your way through:
.PP
.Vb 6
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        for $j ( 0 .. $#{$aref} ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
Hmm... that's still a bit ugly.  How about this:
.PP
.Vb 7
\&    for $i ( 0 .. $#AoA ) {
\&        $aref = $AoA[$i];
\&        $n = @$aref \- 1;
\&        for $j ( 0 .. $n ) {
\&            say "elt $i $j is $AoA[$i][$j]";
\&        }
\&    }
.Ve
.PP
When you get tired of writing a custom print for your data structures,
you might look at the standard Dumpvalue or Data::Dumper modules.
The former is what the Perl debugger uses, while the latter generates
parsable Perl code.  For example:
.PP
.Vb 1
\&    use v5.14;     # using the + prototype, new to v5.14
\&
\&    sub show(+) {
\&        require Dumpvalue;
\&        state $prettily = new Dumpvalue::
\&                            tick        => q("),
\&                            compactDump => 1,  # comment these two lines out
\&                            veryCompact => 1,  # if you want a bigger dump
\&                        ;
\&        dumpValue $prettily @_;
\&    }
\&
\&    # Assign a list of array references to an array.
\&    my @AoA = (
\&           [ "fred", "barney" ],
\&           [ "george", "jane", "elroy" ],
\&           [ "homer", "marge", "bart" ],
\&    );
\&    push $AoA[0], "wilma", "betty";
\&    show @AoA;
.Ve
.PP
will print out:
.PP
.Vb 3
\&    0  0..3  "fred" "barney" "wilma" "betty"
\&    1  0..2  "george" "jane" "elroy"
\&    2  0..2  "homer" "marge" "bart"
.Ve
.PP
Whereas if you comment out the two lines I said you might wish to,
then it shows it to you this way instead:
.PP
.Vb 10
\&    0  ARRAY(0x8031d0)
\&       0  "fred"
\&       1  "barney"
\&       2  "wilma"
\&       3  "betty"
\&    1  ARRAY(0x803d40)
\&       0  "george"
\&       1  "jane"
\&       2  "elroy"
\&    2  ARRAY(0x803e10)
\&       0  "homer"
\&       1  "marge"
\&       2  "bart"
.Ve
.SS "Slices"
.IX Subsection "Slices"
If you want to get at a slice (part of a row) in a multidimensional
array, you're going to have to do some fancy subscripting.  That's
because while we have a nice synonym for single elements via the
pointer arrow for dereferencing, no such convenience exists for slices.
.PP
Here's how to do one operation using a loop.  We'll assume an \f(CW@AoA\fR
variable as before.
.PP
.Vb 5
\&    @part = ();
\&    $x = 4;
\&    for ($y = 7; $y < 13; $y++) {
\&        push @part, $AoA[$x][$y];
\&    }
.Ve
.PP
That same loop could be replaced with a slice operation:
.PP
.Vb 1
\&    @part = @{$AoA[4]}[7..12];
.Ve
.PP
or spaced out a bit:
.PP
.Vb 1
\&    @part = @{ $AoA[4] } [ 7..12 ];
.Ve
.PP
But as you might well imagine, this can get pretty rough on the reader.
.PP
Ah, but what if you wanted a \fItwo-dimensional slice\fR, such as having
\&\f(CW$x\fR run from 4..8 and \f(CW$y\fR run from 7 to 12?  Hmm... here's the simple way:
.PP
.Vb 6
\&    @newAoA = ();
\&    for ($startx = $x = 4; $x <= 8; $x++) {
\&        for ($starty = $y = 7; $y <= 12; $y++) {
\&            $newAoA[$x \- $startx][$y \- $starty] = $AoA[$x][$y];
\&        }
\&    }
.Ve
.PP
We can reduce some of the looping through slices
.PP
.Vb 3
\&    for ($x = 4; $x <= 8; $x++) {
\&        push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
\&    }
.Ve
.PP
If you were into Schwartzian Transforms, you would probably
have selected map for that
.PP
.Vb 1
\&    @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;
.Ve
.PP
Although if your manager accused you of seeking job security (or rapid
insecurity) through inscrutable code, it would be hard to argue. :\-)
If I were you, I'd put that in a function:
.PP
.Vb 5
\&    @newAoA = splice_2D( \e@AoA, 4 => 8, 7 => 12 );
\&    sub splice_2D {
\&        my $lrr = shift;        # ref to array of array refs!
\&        my ($x_lo, $x_hi,
\&            $y_lo, $y_hi) = @_;
\&
\&        return map {
\&            [ @{ $lrr\->[$_] } [ $y_lo .. $y_hi ] ]
\&        } $x_lo .. $x_hi;
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldata, perlref, perldsc
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen <\fItchrist@perl.com\fR>
.PP
Last update: Tue Apr 26 18:30:55 \s-1MDT 2011\s0
                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacos.1                                  0100644 0001750 0001750 00000011531 12566207441 022725  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOS 1"
.TH PERLMACOS 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacos \- Perl under Mac OS (Classic)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For Mac \s-1OS X\s0 see \s-1README\s0.macosx
.PP
Perl under Mac \s-1OS\s0 Classic has not been supported since before Perl 5.10
(April 2004).
.PP
When we say \*(L"Mac \s-1OS\*(R"\s0 below, we mean Mac \s-1OS 7, 8,\s0 and 9, and \fInot\fR
Mac \s-1OS X.\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The port of Perl to to Mac \s-1OS\s0 was officially removed as of Perl 5.12,
though the last official production release of MacPerl corresponded to 
Perl 5.6. While Perl 5.10 included the port to Mac \s-1OS,\s0 ExtUtils::MakeMaker,
a core part of Perl's module installation infrastructure officially dropped support for Mac \s-1OS\s0 in April 2004.
.SH "AUTHOR"
.IX Header "AUTHOR"
Perl was ported to Mac \s-1OS\s0 by Matthias Neeracher
<neeracher@mac.com>. Chris Nandor <pudge@pobox.com>
continued development and maintenance for the duration of the port's life.
                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacos5.16.1                              0100644 0001750 0001750 00000011210 12566207421 023227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOS 1"
.TH PERLMACOS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacos \- Perl under Mac OS (Classic)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For Mac \s-1OS\s0 X see \s-1README\s0.macosx
.PP
Perl under Mac \s-1OS\s0 Classic has not been supported since before Perl 5.10
(April 2004).
.PP
When we say \*(L"Mac \s-1OS\s0\*(R" below, we mean Mac \s-1OS\s0 7, 8, and 9, and \fInot\fR
Mac \s-1OS\s0 X.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The port of Perl to to Mac \s-1OS\s0 was officially removed as of Perl 5.12,
though the last official production release of MacPerl corresponded to 
Perl 5.6. While Perl 5.10 included the port to Mac \s-1OS\s0, ExtUtils::MakeMaker,
a core part of Perl's module installation infrastructure officially dropped support for Mac \s-1OS\s0 in April 2004.
.SH "AUTHOR"
.IX Header "AUTHOR"
Perl was ported to Mac \s-1OS\s0 by Matthias Neeracher
<neeracher@mac.com>. Chris Nandor <pudge@pobox.com>
continued development and maintenance for the duration of the port's life.
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacos5.18.1                              0100644 0001750 0001750 00000011531 12566207441 023241  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOS 1"
.TH PERLMACOS 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacos \- Perl under Mac OS (Classic)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For Mac \s-1OS X\s0 see \s-1README\s0.macosx
.PP
Perl under Mac \s-1OS\s0 Classic has not been supported since before Perl 5.10
(April 2004).
.PP
When we say \*(L"Mac \s-1OS\*(R"\s0 below, we mean Mac \s-1OS 7, 8,\s0 and 9, and \fInot\fR
Mac \s-1OS X.\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The port of Perl to to Mac \s-1OS\s0 was officially removed as of Perl 5.12,
though the last official production release of MacPerl corresponded to 
Perl 5.6. While Perl 5.10 included the port to Mac \s-1OS,\s0 ExtUtils::MakeMaker,
a core part of Perl's module installation infrastructure officially dropped support for Mac \s-1OS\s0 in April 2004.
.SH "AUTHOR"
.IX Header "AUTHOR"
Perl was ported to Mac \s-1OS\s0 by Matthias Neeracher
<neeracher@mac.com>. Chris Nandor <pudge@pobox.com>
continued development and maintenance for the duration of the port's life.
                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacosx.1                                 0100644 0001750 0001750 00000057426 12566207441 023132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOSX 1"
.TH PERLMACOSX 1 "2015-08-22" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacosx \- Perl under Mac OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document briefly describes Perl under Mac \s-1OS X.\s0
.PP
.Vb 7
\&  curl http://www.cpan.org/src/perl\-5.18.2.tar.gz > perl\-5.18.0.tar.gz
\&  tar \-xzf perl\-5.18.2.tar.gz
\&  cd perl\-5.18.2
\&  ./Configure \-des \-Dprefix=/usr/local/
\&  make
\&  make test
\&  sudo make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The latest Perl release (5.18.2 as of this writing) builds without changes
under all versions of Mac \s-1OS X\s0 from 10.3 \*(L"Panther\*(R" onwards.
.PP
In order to build your own version of Perl you will need 'make',
which is part of Apple's developer tools \- also known as Xcode. From
Mac \s-1OS X 10.7 \s0\*(L"Lion\*(R" onwards, it can be downloaded separately as the
\&'Command Line Tools' bundle directly from <https://developer.apple.com/downloads/>
(you will need a free account to log in), or as a part of the Xcode suite,
freely available at the App Store. Xcode is a pretty big app, so
unless you already have it or really want it, you are advised to get the
\&'Command Line Tools' bundle separately from the link above. If you want
to do it from within Xcode, go to Xcode \-> Preferences \-> Downloads and
select the 'Command Line Tools' option.
.PP
Between Mac \s-1OS X 10.3 \s0\*(L"Panther\*(R" and 10.6 \*(L"Snow Leopard\*(R", the 'Command
Line Tools' bundle was called 'unix tools', and was usually supplied
with Mac \s-1OS\s0 install DVDs.
.PP
Earlier Mac \s-1OS X\s0 releases (10.2 \*(L"Jaguar\*(R" and older) did not include a
completely thread-safe libc, so threading is not fully supported. Also,
earlier releases included a buggy libdb, so some of the DB_File tests
are known to fail on those releases.
.SH "Customizations in Apple's Perl"
.IX Header "Customizations in Apple's Perl"
Several custom features have been added to the version of perl in Mac \s-1OS X.\s0
.SS "Module Search Path (@INC)"
.IX Subsection "Module Search Path (@INC)"
Since 10.4 \*(L"Tiger\*(R", system administrators can easily add paths to perl's
module search path.
The file '/Library/Perl/${version}/PrependToPath' contains paths (one per
line) that will be added to the beginning of the search path, while the file
\&'/Library/Perl/${version}/AppendToPath' contains paths that will be added
to the end of the search path.
.PP
By default, Mac \s-1OS X\s0 does not come with a PrependToPath file, but does come
with an AppendToPath file.
This file contains the path '/System/Library/Perl/Extras/${version}', where
third-party perl modules that Apple ships on Mac \s-1OS X,\s0 are installed.
In addition, it contains the paths to previous versions of
\&'/Library/Perl/${version}' (where ${version} are the previous versions of perl
that shipped in Mac \s-1OS X\s0), to maintain backwards compatibility.
.PP
In 10.5 \*(L"Leopard\*(R" and beyond, the environment variable \s-1NO_PERL_PREPENDTOPATH
\&\s0(set to anything) will cause perl to not load any PrependToPath file.
Likewise, the \s-1NO_PERL_APPENDTOPATH\s0 environment variable will case perl to not
load any AppendToPath file.
.PP
In 10.5.7 for versions of perl before 5.18.2, there is a new path,
\&'/Library/Perl/Updates/${version}' that comes before the system perl directory.
When 'INSTALLDIRS=perl' is specified to Makefile.PL, modules that
previous overwrite those in '/System/Library/Perl/${version}', will now be
install in '/Library/Perl/Updates/${version}'.
This allows Apple to update modules in the system perl, but users will
get the versions they installed in '/Library/Perl/Updates/${version}'.
.PP
In addition, the Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" now
corresponds to this new directory.
There are also the new parameters \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R", which also correspond to this new directory,
and are provided for completeness.
.PP
However, for perl 5.18.2 in Mac \s-1OS X 10.7,\s0 the order of the include
paths was changed so that '/Library/Perl/5.18.2' came before
\&'/System/Library/Perl/5.18.2', so '/Library/Perl/Updates' is no longer needed.
The Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" have returned
to their original values, and \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R" have been removed.
.SS "Dtrace Support"
.IX Subsection "Dtrace Support"
Dtrace support has been added to perl to allow tracing of perl subroutine
calls, both entry and return.
Here is a quick example:
.PP
.Vb 2
\&    % cat test.pl
\&    #!/usr/bin/perl
\&
\&    sub a {
\&        print "Ah! death. Welcome to thee brother\en";
\&    }
\&
\&    sub b {
\&        print "Where art thou a()?\en";
\&        a();
\&    }
\&
\&    sub c {
\&        print "The band of alphabets\en";
\&        b();
\&    }
\&
\&    sub main {
\&        c();
\&    }
\&
\&    main();
\&    % cat pltest.d
\&    perl$target:::
\&    {
\&        printf("%s\en", copyinstr(arg0));
\&    }
\&    % sudo dtrace \-s pltest.d \-c \*(Aqperl test.pl\*(Aq
\&    dtrace: description \*(Aqperl$target::: \*(Aq matched 8 probes
\&    The band of alphabets
\&    Where art thou a()?
\&    Ah! death. Welcome to thee brother
\&    dtrace: pid 50272 has exited
\&    CPU     ID                    FUNCTION:NAME
\&      0  14231       Perl_pp_entersub:sub\-entry main
\&
\&      0  14231       Perl_pp_entersub:sub\-entry c
\&
\&      0  14231       Perl_pp_entersub:sub\-entry b
\&
\&      0  14231       Perl_pp_entersub:sub\-entry a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return b
\&
\&      0  15806      Perl_pp_leavesub:sub\-return c
\&
\&      0  15806      Perl_pp_leavesub:sub\-return main
.Ve
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Since 10.5 \*(L"Leopard\*(R", Mac \s-1OS X\s0 provided both 32 and 64\-bit support for libraries
and frameworks, allowing both 32 and 64\-bit applications to be written.
While running perl (and all other command-line programs) remained 32\-bit, the
\&'libperl.dylib' library is 32/64 bits.
This allows programs with embedded
perl support to run in both 32 and 64\-bit mode as needed.
.PP
To support this, changes to the Config module were made to return the correct
values for the internal sizes of perl types.
For example, \*(L"longsize\*(R" return 4 in 32\-bits, while it returns 8 in 64\-bits.
.PP
Related to this support is the new environment variable \s-1ARCHFLAGS,\s0 which
provides a way to build extensions for different machine and 32/64\-bit
architectures.
The default architecture to build extensions before 10.5 was the (single)
architecture of the building machine.
In 10.5, this became building both 32\-bit PowerPC and Intel.
In 10.6 and beyond, the default architectures were changed to building 32\-bit
for both PowerPC and Intel, and 64\-bit only for Intel.
With \s-1ARCHFLAGS,\s0 this can be changed to whatever architectures the user
wants to build.
For example:
.PP
.Vb 3
\&    % env ARCHFLAGS=\*(Aq\-arch i386 \-arch x86_64\*(Aq perl Makefile.PL
\&    % make
\&    % make install
.Ve
.PP
will build only 2\-way universal.
.SS "Multiple Version Support"
.IX Subsection "Multiple Version Support"
Since 10.6 \*(L"SnowLeopard\*(R", more than one version of perl are supported.
So out of the box, the default version of perl is 5.18.
However, to provide backwards compatibility with previous versions of perl,
especially for systems that have installed (version-specific) perl modules, or
to provide newer versions of perl that we aren't ready to make the default,
\&'/usr/bin/perl' can be switched to use an alternate version, on a per-user or
system-wide basis.
The alternate version of perl that is provided is .
.PP
Users can select the alternate version
by simply running the following command:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Version
.Ve
.PP
Subsequent invocations of '/usr/bin/perl' will then use the  version.
.PP
In addition, both perl versions will ship as a universal binary containing
64\-bit support, which will be on by default.
For those cases where 32\-bit perl is desired, the following command can
be used:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Prefer\-32\-Bit \-bool yes
.Ve
.PP
To set defaults systemwide, use the above commands, but replace the third
argument with '/Library/Preferences/com.apple.versioner.perl' (admin privileges
will be required).
.PP
The environment variables \s-1VERSIONER_PERL_VERSION \s0(set to one of the supported versions) and
\&\s-1VERSIONER_PERL_PREFER_32_BIT \s0(set to 'true', 'false', 'yes', 'no', '1' or '0')
can also be set, and they override the settings in any preference files.
.PP
Note: this may changes in future versions of Mac \s-1OS X,\s0 which may use
an improved scheme for making such settings.
.SH "Building Perl"
.IX Header "Building Perl"
.SS "Installation Prefix"
.IX Subsection "Installation Prefix"
The default installation location for this release uses the traditional
\&\s-1UNIX\s0 directory layout under /usr/local. This is the recommended location
for most users, and will leave the Apple-supplied Perl and its modules
undisturbed.
.PP
Using an installation prefix of '/usr' will result in a directory layout
that mirrors that of Apple's default Perl, with core modules stored in
\&'/System/Library/Perl/${version}', \s-1CPAN\s0 modules stored in
\&'/Library/Perl/${version}', and the addition of
\&'/Network/Library/Perl/${version}' to \f(CW@INC\fR for modules that are stored
on a file server and used by many Macs.
.SS "\s-1SDK\s0 support"
.IX Subsection "SDK support"
First, export the path to the \s-1SDK\s0 into the build environment:
.PP
.Vb 1
\&    export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk
.Ve
.PP
Please make sure the \s-1SDK\s0 version (i.e. the numbers right before '.sdk')
matches your system's (in this case, Mac \s-1OS X 10.8 \s0\*(L"Mountain Lion\*(R"), as it is
possible to have more than one \s-1SDK\s0 installed. Also make sure the path exists
in your system, and if it doesn't please make sure the \s-1SDK\s0 is properly
installed, as it should come with the 'Command Line Tools' bundle mentioned
above. Finally, if you have an older Mac \s-1OS X \s0(10.6 \*(L"Snow Leopard\*(R" and below)
running Xcode 4.2 or lower, the \s-1SDK\s0 path might be something like
\&\f(CW\*(Aq/Developer/SDKs/MacOSX10.3.9.sdk\*(Aq\fR.
.PP
You can use the \s-1SDK\s0 by exporting some additions to Perl's 'ccflags' and '..flags'
config variables:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.SS "Universal Binary support"
.IX Subsection "Universal Binary support"
Note: From Mac \s-1OS X 10.6 \s0\*(L"Snow Leopard\*(R" onwards, Apple only supports
Intel-based hardware. This means you can safely skip this section unless
you have an older Apple computer running on ppc or wish to create a perl
binary with backwards compatibility.
.PP
You can compile perl as a universal binary (built for both ppc and intel).
In Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R", you must export the 'u' variant of the \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.4u.sdk
.Ve
.PP
Mac \s-1OS X 10.5 \s0\*(L"Leopard\*(R" and above do not require the 'u' variant.
.PP
In addition to the compiler flags used to select the \s-1SDK,\s0 also add the flags
for creating a universal binary:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-arch i686 \-arch ppc \-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-arch i686 \-arch ppc \-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.PP
Keep in mind that these compiler and linker settings will also be used when
building \s-1CPAN\s0 modules. For \s-1XS\s0 modules to be compiled as a universal binary, any
libraries it links to must also be universal binaries. The system libraries that
Apple includes with the 10.4u \s-1SDK\s0 are all universal, but user-installed libraries
may need to be re-installed as universal binaries.
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Follow the instructions in \fI\s-1INSTALL\s0\fR to build perl with support for 64\-bit 
integers (\f(CW\*(C`use64bitint\*(C'\fR) or both 64\-bit integers and 64\-bit addressing
(\f(CW\*(C`use64bitall\*(C'\fR). In the latter case, the resulting binary will run only
on G5\-based hosts.
.PP
Support for 64\-bit addressing is experimental: some aspects of Perl may be
omitted or buggy. Note the messages output by \fIConfigure\fR for further 
information. Please use \f(CW\*(C`perlbug\*(C'\fR to submit a problem report in the
event that you encounter difficulties.
.PP
When building 64\-bit modules, it is your responsibility to ensure that linked
external libraries and frameworks provide 64\-bit support: if they do not,
module building may appear to succeed, but attempts to use the module will
result in run-time dynamic linking errors, and subsequent test failures.
You can use \f(CW\*(C`file\*(C'\fR to discover the architectures supported by a library:
.PP
.Vb 4
\&    $ file libgdbm.3.0.0.dylib 
\&    libgdbm.3.0.0.dylib: Mach\-O fat file with 2 architectures
\&    libgdbm.3.0.0.dylib (for architecture ppc):      Mach\-O dynamically linked shared library ppc
\&    libgdbm.3.0.0.dylib (for architecture ppc64):    Mach\-O 64\-bit dynamically linked shared library ppc64
.Ve
.PP
Note that this issue precludes the building of many Macintosh-specific \s-1CPAN\s0
modules (\f(CW\*(C`Mac::*\*(C'\fR), as the required Apple frameworks do not provide 64\-bit
support. Similarly, downloads from Fink or Darwinports are unlikely to provide
64\-bit support; the libraries must be rebuilt from source with the appropriate
compiler and linker flags. For further information, see Apple's
\&\fI64\-Bit Transition Guide\fR at 
<http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.
.SS "libperl and Prebinding"
.IX Subsection "libperl and Prebinding"
Mac \s-1OS X\s0 ships with a dynamically-loaded libperl, but the default for
this release is to compile a static libperl. The reason for this is
pre-binding. Dynamic libraries can be pre-bound to a specific address in
memory in order to decrease load time. To do this, one needs to be aware
of the location and size of all previously-loaded libraries. Apple
collects this information as part of their overall \s-1OS\s0 build process, and
thus has easy access to it when building Perl, but ordinary users would
need to go to a great deal of effort to obtain the information needed
for pre-binding.
.PP
You can override the default and build a shared libperl if you wish
(Configure\ ...\ \-Duseshrplib).
.PP
With Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R" and newer, there is almost no performance
penalty for non-prebound libraries. Earlier releases will suffer a greater
load time than either the static library, or Apple's pre-bound dynamic library.
.SS "Updating Apple's Perl"
.IX Subsection "Updating Apple's Perl"
In a word \- don't, at least not without a *very* good reason. Your scripts
can just as easily begin with \*(L"#!/usr/local/bin/perl\*(R" as with
\&\*(L"#!/usr/bin/perl\*(R". Scripts supplied by Apple and other third parties as
part of installation packages and such have generally only been tested
with the /usr/bin/perl that's installed by Apple.
.PP
If you find that you do need to update the system Perl, one issue worth
keeping in mind is the question of static vs. dynamic libraries. If you
upgrade using the default static libperl, you will find that the dynamic
libperl supplied by Apple will not be deleted. If both libraries are
present when an application that links against libperl is built, ld will
link against the dynamic library by default. So, if you need to replace
Apple's dynamic libperl with a static libperl, you need to be sure to
delete the older dynamic library after you've installed the update.
.SS "Known problems"
.IX Subsection "Known problems"
If you have installed extra libraries such as \s-1GDBM\s0 through Fink
(in other words, you have libraries under \fI/sw/lib\fR), or libdlcompat
to \fI/usr/local/lib\fR, you may need to be extra careful when running
Configure to not to confuse Configure and Perl about which libraries
to use.  Being confused will show up for example as \*(L"dyld\*(R" errors about
symbol problems, for example during \*(L"make test\*(R". The safest bet is to run
Configure as
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=/usr/lib
.Ve
.PP
to make Configure look only into the system libraries.  If you have some
extra library directories that you really want to use (such as newer
Berkeley \s-1DB\s0 libraries in pre-Panther systems), add those to the libpth:
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=\*(Aq/usr/lib /opt/lib\*(Aq
.Ve
.PP
The default of building Perl statically may cause problems with complex
applications like Tk: in that case consider building shared Perl
.PP
.Vb 1
\&    Configure ... \-Duseshrplib
.Ve
.PP
but remember that there's a startup cost to pay in that case (see above
\&\*(L"libperl and Prebinding\*(R").
.PP
Starting with Tiger (Mac \s-1OS X 10.4\s0), Apple shipped broken locale files for
the eu_ES locale (Basque-Spain).  In previous releases of Perl, this resulted in
failures in the \fIlib/locale\fR test. These failures have been suppressed
in the current release of Perl by making the test ignore the broken locale.
If you need to use the eu_ES locale, you should contact Apple support.
.SS "Cocoa"
.IX Subsection "Cocoa"
There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge
module, included with Mac \s-1OS X,\s0 can be used by standalone scripts to
access Foundation (i.e. non-GUI) classes and objects.
.PP
An alternative is CamelBones, a framework that allows access to both
Foundation and AppKit classes and objects, so that full \s-1GUI\s0 applications
can be built in Perl. CamelBones can be found on SourceForge, at
<http://www.sourceforge.net/projects/camelbones/>.
.SH "Starting From Scratch"
.IX Header "Starting From Scratch"
Unfortunately it is not that difficult somehow manage to break one's
Mac \s-1OS X\s0 Perl rather severely.  If all else fails and you want to
really, \fB\s-1REALLY\s0\fR, start from scratch and remove even your Apple Perl
installation (which has become corrupted somehow), the following
instructions should do it.  \fBPlease think twice before following
these instructions: they are much like conducting brain surgery to
yourself.  Without anesthesia.\fR  We will \fBnot\fR come to fix your system
if you do this.
.PP
First, get rid of the libperl.dylib:
.PP
.Vb 2
\&    # cd /System/Library/Perl/darwin/CORE
\&    # rm libperl.dylib
.Ve
.PP
Then delete every .bundle file found anywhere in the folders:
.PP
.Vb 2
\&    /System/Library/Perl
\&    /Library/Perl
.Ve
.PP
You can find them for example by
.PP
.Vb 1
\&    # find /System/Library/Perl /Library/Perl \-name \*(Aq*.bundle\*(Aq \-print
.Ve
.PP
After this you can either copy Perl from your operating system media
(you will need at least the /System/Library/Perl and /usr/bin/perl),
or rebuild Perl from the source code with \f(CW\*(C`Configure \-Dprefix=/usr
\&\-Duseshrplib\*(C'\fR \s-1NOTE:\s0 the \f(CW\*(C`\-Dprefix=/usr\*(C'\fR to replace the system Perl
works much better with Perl 5.8.1 and later, in Perl 5.8.0 the
settings were not quite right.
.PP
\&\*(L"Pacifist\*(R" from CharlesSoft (<http://www.charlessoft.com/>) is a nice
way to extract the Perl binaries from the \s-1OS\s0 media, without having to
reinstall the entire \s-1OS.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
This \s-1README\s0 was written by Sherm Pendley <sherm@dot\-app.org>,
and subsequently updated by Dominic Dunlop <domo@computer.org>
and Breno G. de Oliveira <garu@cpan.org>. The \*(L"Starting From Scratch\*(R"
recipe was contributed by John Montbriand <montbriand@apple.com>.
.SH "DATE"
.IX Header "DATE"
Last modified 2011\-10\-31.
                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacosx5.16.1                             0100644 0001750 0001750 00000054154 12566207421 023435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOSX 1"
.TH PERLMACOSX 1 "2015-08-22" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacosx \- Perl under Mac OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document briefly describes Perl under Mac \s-1OS\s0 X.
.PP
.Vb 7
\&  curl http://www.cpan.org/src/perl\-5.16.3.tar.gz > perl\-5.16.3.tar.gz 
\&  tar \-xzf perl\-5.16.3.tar.gz 
\&  cd perl\-5.16.3
\&  ./Configure \-des \-Dprefix=/usr/local/
\&  make
\&  make test
\&  sudo make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The latest Perl release (5.16.3 as of this writing) builds without changes
under all versions of Mac \s-1OS\s0 X from 10.3 \*(L"Panther\*(R" onwards.
.PP
In order to build your own version of Perl you will need 'make'
this is part of the Apples developer tools (you only need the 'unix tools'),
usually supplied with Mac \s-1OS\s0 install DVDs. You do not need the latest 
version of Xcode (which is now charged for) in order to install make.
.PP
Earlier Mac \s-1OS\s0 X releases (10.2 \*(L"Jaguar\*(R" and older) did not include a
completely thread-safe libc, so threading is not fully supported. Also,
earlier releases included a buggy libdb, so some of the DB_File tests
are known to fail on those releases.
.SH "Customizations in Apple's Perl"
.IX Header "Customizations in Apple's Perl"
Several custom features have been added to the version of perl in Mac \s-1OS\s0 X.
.SS "Module Search Path (@INC)"
.IX Subsection "Module Search Path (@INC)"
Since 10.4 \*(L"Tiger\*(R", system administrators can easily add paths to perl's
module search path.
The file '/Library/Perl/${version}/PrependToPath' contains paths (one per
line) that will be added to the beginning of the search path, while the file
\&'/Library/Perl/${version}/AppendToPath' contains paths that will be added
to the end of the search path.
.PP
By default, Mac \s-1OS\s0 X does not come with a PrependToPath file, but does come
with an AppendToPath file.
This file contains the path '/System/Library/Perl/Extras/${version}', where
third-party perl modules that Apple ships on Mac \s-1OS\s0 X, are installed.
In addition, it contains the paths to previous versions of
\&'/Library/Perl/${version}' (where ${version} are the previous versions of perl
that shipped in Mac \s-1OS\s0 X), to maintain backwards compatibility.
.PP
In 10.5 \*(L"Leopard\*(R" and beyond, the environment variable \s-1NO_PERL_PREPENDTOPATH\s0
(set to anything) will cause perl to not load any PrependToPath file.
Likewise, the \s-1NO_PERL_APPENDTOPATH\s0 environment variable will case perl to not
load any AppendToPath file.
.PP
In 10.5.7 for versions of perl before 5.16.3, there is a new path,
\&'/Library/Perl/Updates/${version}' that comes before the system perl directory.
When 'INSTALLDIRS=perl' is specified to Makefile.PL, modules that
previous overwrite those in '/System/Library/Perl/${version}', will now be
install in '/Library/Perl/Updates/${version}'.
This allows Apple to update modules in the system perl, but users will
get the versions they installed in '/Library/Perl/Updates/${version}'.
.PP
In addition, the Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" now
corresponds to this new directory.
There are also the new parameters \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R", which also correspond to this new directory,
and are provided for completeness.
.PP
However, for perl 5.16.3 in Mac \s-1OS\s0 X 10.7, the order of the include
paths was changed so that '/Library/Perl/5.16.3' came before
\&'/System/Library/Perl/5.16.3', so '/Library/Perl/Updates' is no longer needed.
The Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" have returned
to their original values, and \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R" have been removed.
.SS "Dtrace Support"
.IX Subsection "Dtrace Support"
Dtrace support has been added to perl to allow tracing of perl subroutine
calls, both entry and return.
Here is a quick example:
.PP
.Vb 2
\&    % cat test.pl
\&    #!/usr/bin/perl
\&
\&    sub a {
\&        print "Ah! death. Welcome to thee brother\en";
\&    }
\&
\&    sub b {
\&        print "Where art thou a()?\en";
\&        a();
\&    }
\&
\&    sub c {
\&        print "The band of alphabets\en";
\&        b();
\&    }
\&
\&    sub main {
\&        c();
\&    }
\&
\&    main();
\&    % cat pltest.d
\&    perl$target:::
\&    {
\&        printf("%s\en", copyinstr(arg0));
\&    }
\&    % sudo dtrace \-s pltest.d \-c \*(Aqperl test.pl\*(Aq
\&    dtrace: description \*(Aqperl$target::: \*(Aq matched 8 probes
\&    The band of alphabets
\&    Where art thou a()?
\&    Ah! death. Welcome to thee brother
\&    dtrace: pid 50272 has exited
\&    CPU     ID                    FUNCTION:NAME
\&      0  14231       Perl_pp_entersub:sub\-entry main
\&
\&      0  14231       Perl_pp_entersub:sub\-entry c
\&
\&      0  14231       Perl_pp_entersub:sub\-entry b
\&
\&      0  14231       Perl_pp_entersub:sub\-entry a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return b
\&
\&      0  15806      Perl_pp_leavesub:sub\-return c
\&
\&      0  15806      Perl_pp_leavesub:sub\-return main
.Ve
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Since 10.5 \*(L"Leopard\*(R", Mac \s-1OS\s0 X provided both 32 and 64\-bit support for libraries
and frameworks, allowing both 32 and 64\-bit applications to be written.
While running perl (and all other command-line programs) remained 32\-bit, the
\&'libperl.dylib' library is 32/64 bits.
This allows programs with embedded
perl support to run in both 32 and 64\-bit mode as needed.
.PP
To support this, changes to the Config module were made to return the correct
values for the internal sizes of perl types.
For example, \*(L"longsize\*(R" return 4 in 32\-bits, while it returns 8 in 64\-bits.
.PP
Related to this support is the new environment variable \s-1ARCHFLAGS\s0, which
provides a way to build extensions for different machine and 32/64\-bit
architectures.
The default architecture to build extensions before 10.5 was the (single)
architecture of the building machine.
In 10.5, this became building both 32\-bit PowerPC and Intel.
In 10.6 and beyond, the default architectures were changed to building 32\-bit
for both PowerPC and Intel, and 64\-bit only for Intel.
With \s-1ARCHFLAGS\s0, this can be changed to whatever architectures the user
wants to build.
For example:
.PP
.Vb 3
\&    % env ARCHFLAGS=\*(Aq\-arch i386 \-arch x86_64\*(Aq perl Makefile.PL
\&    % make
\&    % make install
.Ve
.PP
will build only 2\-way universal.
.SS "Multiple Version Support"
.IX Subsection "Multiple Version Support"
Since 10.6 \*(L"SnowLeopard\*(R", more than one version of perl are supported.
So out of the box, the default version of perl is 5.16.
However, to provide backwards compatibility with previous versions of perl,
especially for systems that have installed (version-specific) perl modules, or
to provide newer versions of perl that we aren't ready to make the default,
\&'/usr/bin/perl' can be switched to use an alternate version, on a per-user or
system-wide basis.
The alternate version of perl that is provided is .
.PP
Users can select the alternate version
by simply running the following command:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Version
.Ve
.PP
Subsequent invocations of '/usr/bin/perl' will then use the  version.
.PP
In addition, both perl versions will ship as a universal binary containing
64\-bit support, which will be on by default.
For those cases where 32\-bit perl is desired, the following command can
be used:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Prefer\-32\-Bit \-bool yes
.Ve
.PP
To set defaults systemwide, use the above commands, but replace the third
argument with '/Library/Preferences/com.apple.versioner.perl' (admin privileges
will be required).
.PP
The environment variables \s-1VERSIONER_PERL_VERSION\s0 (set to one of the supported versions) and
\&\s-1VERSIONER_PERL_PREFER_32_BIT\s0 (set to 'true', 'false', 'yes', 'no', '1' or '0')
can also be set, and they override the settings in any preference files.
.PP
Note: this may changes in future versions of Mac \s-1OS\s0 X, which may use
an improved scheme for making such settings.
.SH "Building Perl"
.IX Header "Building Perl"
.SS "Installation Prefix"
.IX Subsection "Installation Prefix"
The default installation location for this release uses the traditional
\&\s-1UNIX\s0 directory layout under /usr/local. This is the recommended location
for most users, and will leave the Apple-supplied Perl and its modules
undisturbed.
.PP
Using an installation prefix of '/usr' will result in a directory layout
that mirrors that of Apple's default Perl, with core modules stored in
\&'/System/Library/Perl/${version}', \s-1CPAN\s0 modules stored in
\&'/Library/Perl/${version}', and the addition of
\&'/Network/Library/Perl/${version}' to \f(CW@INC\fR for modules that are stored
on a file server and used by many Macs.
.SS "\s-1SDK\s0 support"
.IX Subsection "SDK support"
First, export the path to the \s-1SDK\s0 into the build environment:
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.3.9.sdk
.Ve
.PP
Use an \s-1SDK\s0 by exporting some additions to Perl's 'ccflags' and '..flags'
config variables:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.SS "Universal Binary support"
.IX Subsection "Universal Binary support"
To compile perl as a universal binary (built for both ppc and intel), export
the \s-1SDK\s0 variable as above, selecting the 10.4u \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.4u.sdk
.Ve
.PP
In addition to the compiler flags used to select the \s-1SDK\s0, also add the flags
for creating a universal binary:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-arch i686 \-arch ppc \-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-arch i686 \-arch ppc \-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.PP
In Leopard (MacOSX 10.5.6 at the time of this writing) you must use the 10.5 \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.5.sdk
.Ve
.PP
You can use the same compiler flags you would use with the 10.4u \s-1SDK\s0.
.PP
Keep in mind that these compiler and linker settings will also be used when
building \s-1CPAN\s0 modules. For \s-1XS\s0 modules to be compiled as a universal binary, any
libraries it links to must also be universal binaries. The system libraries that
Apple includes with the 10.4u \s-1SDK\s0 are all universal, but user-installed libraries
may need to be re-installed as universal binaries.
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Follow the instructions in \fI\s-1INSTALL\s0\fR to build perl with support for 64\-bit 
integers (\f(CW\*(C`use64bitint\*(C'\fR) or both 64\-bit integers and 64\-bit addressing
(\f(CW\*(C`use64bitall\*(C'\fR). In the latter case, the resulting binary will run only
on G5\-based hosts.
.PP
Support for 64\-bit addressing is experimental: some aspects of Perl may be
omitted or buggy. Note the messages output by \fIConfigure\fR for further 
information. Please use \f(CW\*(C`perlbug\*(C'\fR to submit a problem report in the
event that you encounter difficulties.
.PP
When building 64\-bit modules, it is your responsibility to ensure that linked
external libraries and frameworks provide 64\-bit support: if they do not,
module building may appear to succeed, but attempts to use the module will
result in run-time dynamic linking errors, and subsequent test failures.
You can use \f(CW\*(C`file\*(C'\fR to discover the architectures supported by a library:
.PP
.Vb 4
\&    $ file libgdbm.3.0.0.dylib 
\&    libgdbm.3.0.0.dylib: Mach\-O fat file with 2 architectures
\&    libgdbm.3.0.0.dylib (for architecture ppc):      Mach\-O dynamically linked shared library ppc
\&    libgdbm.3.0.0.dylib (for architecture ppc64):    Mach\-O 64\-bit dynamically linked shared library ppc64
.Ve
.PP
Note that this issue precludes the building of many Macintosh-specific \s-1CPAN\s0
modules (\f(CW\*(C`Mac::*\*(C'\fR), as the required Apple frameworks do not provide 64\-bit
support. Similarly, downloads from Fink or Darwinports are unlikely to provide
64\-bit support; the libraries must be rebuilt from source with the appropriate
compiler and linker flags. For further information, see Apple's
\&\fI64\-Bit Transition Guide\fR at 
<http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.
.SS "libperl and Prebinding"
.IX Subsection "libperl and Prebinding"
Mac \s-1OS\s0 X ships with a dynamically-loaded libperl, but the default for
this release is to compile a static libperl. The reason for this is
pre-binding. Dynamic libraries can be pre-bound to a specific address in
memory in order to decrease load time. To do this, one needs to be aware
of the location and size of all previously-loaded libraries. Apple
collects this information as part of their overall \s-1OS\s0 build process, and
thus has easy access to it when building Perl, but ordinary users would
need to go to a great deal of effort to obtain the information needed
for pre-binding.
.PP
You can override the default and build a shared libperl if you wish
(Configure\ ...\ \-Duseshrplib), but the load time on pre\-10.4 \s-1OS\s0
releases will be greater than either the static library, or Apple's
pre-bound dynamic library.
.PP
With 10.4 \*(L"Tiger\*(R" and newer, Apple has all but eliminated the performance
penalty for non-prebound libraries.
.SS "Updating Apple's Perl"
.IX Subsection "Updating Apple's Perl"
In a word \- don't, at least without a *very* good reason. Your scripts
can just as easily begin with \*(L"#!/usr/local/bin/perl\*(R" as with
\&\*(L"#!/usr/bin/perl\*(R". Scripts supplied by Apple and other third parties as
part of installation packages and such have generally only been tested
with the /usr/bin/perl that's installed by Apple.
.PP
If you find that you do need to update the system Perl, one issue worth
keeping in mind is the question of static vs. dynamic libraries. If you
upgrade using the default static libperl, you will find that the dynamic
libperl supplied by Apple will not be deleted. If both libraries are
present when an application that links against libperl is built, ld will
link against the dynamic library by default. So, if you need to replace
Apple's dynamic libperl with a static libperl, you need to be sure to
delete the older dynamic library after you've installed the update.
.SS "Known problems"
.IX Subsection "Known problems"
If you have installed extra libraries such as \s-1GDBM\s0 through Fink
(in other words, you have libraries under \fI/sw/lib\fR), or libdlcompat
to \fI/usr/local/lib\fR, you may need to be extra careful when running
Configure to not to confuse Configure and Perl about which libraries
to use.  Being confused will show up for example as \*(L"dyld\*(R" errors about
symbol problems, for example during \*(L"make test\*(R". The safest bet is to run
Configure as
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=/usr/lib
.Ve
.PP
to make Configure look only into the system libraries.  If you have some
extra library directories that you really want to use (such as newer
Berkeley \s-1DB\s0 libraries in pre-Panther systems), add those to the libpth:
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=\*(Aq/usr/lib /opt/lib\*(Aq
.Ve
.PP
The default of building Perl statically may cause problems with complex
applications like Tk: in that case consider building shared Perl
.PP
.Vb 1
\&    Configure ... \-Duseshrplib
.Ve
.PP
but remember that there's a startup cost to pay in that case (see above
\&\*(L"libperl and Prebinding\*(R").
.PP
Starting with Tiger (Mac \s-1OS\s0 X 10.4), Apple shipped broken locale files for
the eu_ES locale (Basque-Spain).  In previous releases of Perl, this resulted in
failures in the \fIlib/locale\fR test. These failures have been suppressed
in the current release of Perl by making the test ignore the broken locale.
If you need to use the eu_ES locale, you should contact Apple support.
.SS "Cocoa"
.IX Subsection "Cocoa"
There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge
module, included with Mac \s-1OS\s0 X, can be used by standalone scripts to
access Foundation (i.e. non-GUI) classes and objects.
.PP
An alternative is CamelBones, a framework that allows access to both
Foundation and AppKit classes and objects, so that full \s-1GUI\s0 applications
can be built in Perl. CamelBones can be found on SourceForge, at
<http://www.sourceforge.net/projects/camelbones/>.
.SH "Starting From Scratch"
.IX Header "Starting From Scratch"
Unfortunately it is not that difficult somehow manage to break one's
Mac \s-1OS\s0 X Perl rather severely.  If all else fails and you want to
really, \fB\s-1REALLY\s0\fR, start from scratch and remove even your Apple Perl
installation (which has become corrupted somehow), the following
instructions should do it.  \fBPlease think twice before following
these instructions: they are much like conducting brain surgery to
yourself.  Without anesthesia.\fR  We will \fBnot\fR come to fix your system
if you do this.
.PP
First, get rid of the libperl.dylib:
.PP
.Vb 2
\&    # cd /System/Library/Perl/darwin/CORE
\&    # rm libperl.dylib
.Ve
.PP
Then delete every .bundle file found anywhere in the folders:
.PP
.Vb 2
\&    /System/Library/Perl
\&    /Library/Perl
.Ve
.PP
You can find them for example by
.PP
.Vb 1
\&    # find /System/Library/Perl /Library/Perl \-name \*(Aq*.bundle\*(Aq \-print
.Ve
.PP
After this you can either copy Perl from your operating system media
(you will need at least the /System/Library/Perl and /usr/bin/perl),
or rebuild Perl from the source code with \f(CW\*(C`Configure \-Dprefix=/usr
\&\-Duseshrplib\*(C'\fR \s-1NOTE:\s0 the \f(CW\*(C`\-Dprefix=/usr\*(C'\fR to replace the system Perl
works much better with Perl 5.8.1 and later, in Perl 5.8.0 the
settings were not quite right.
.PP
\&\*(L"Pacifist\*(R" from CharlesSoft (<http://www.charlessoft.com/>) is a nice
way to extract the Perl binaries from the \s-1OS\s0 media, without having to
reinstall the entire \s-1OS\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
This \s-1README\s0 was written by Sherm Pendley <sherm@dot\-app.org>,
and subsequently updated by Dominic Dunlop <domo@computer.org>.
The \*(L"Starting From Scratch\*(R" recipe was contributed by John Montbriand
<montbriand@apple.com>.
.SH "DATE"
.IX Header "DATE"
Last modified 2011\-10\-31.
                                                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmacosx5.18.1                             0100644 0001750 0001750 00000057426 12566207441 023446  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMACOSX 1"
.TH PERLMACOSX 1 "2015-08-22" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmacosx \- Perl under Mac OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document briefly describes Perl under Mac \s-1OS X.\s0
.PP
.Vb 7
\&  curl http://www.cpan.org/src/perl\-5.18.2.tar.gz > perl\-5.18.0.tar.gz
\&  tar \-xzf perl\-5.18.2.tar.gz
\&  cd perl\-5.18.2
\&  ./Configure \-des \-Dprefix=/usr/local/
\&  make
\&  make test
\&  sudo make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The latest Perl release (5.18.2 as of this writing) builds without changes
under all versions of Mac \s-1OS X\s0 from 10.3 \*(L"Panther\*(R" onwards.
.PP
In order to build your own version of Perl you will need 'make',
which is part of Apple's developer tools \- also known as Xcode. From
Mac \s-1OS X 10.7 \s0\*(L"Lion\*(R" onwards, it can be downloaded separately as the
\&'Command Line Tools' bundle directly from <https://developer.apple.com/downloads/>
(you will need a free account to log in), or as a part of the Xcode suite,
freely available at the App Store. Xcode is a pretty big app, so
unless you already have it or really want it, you are advised to get the
\&'Command Line Tools' bundle separately from the link above. If you want
to do it from within Xcode, go to Xcode \-> Preferences \-> Downloads and
select the 'Command Line Tools' option.
.PP
Between Mac \s-1OS X 10.3 \s0\*(L"Panther\*(R" and 10.6 \*(L"Snow Leopard\*(R", the 'Command
Line Tools' bundle was called 'unix tools', and was usually supplied
with Mac \s-1OS\s0 install DVDs.
.PP
Earlier Mac \s-1OS X\s0 releases (10.2 \*(L"Jaguar\*(R" and older) did not include a
completely thread-safe libc, so threading is not fully supported. Also,
earlier releases included a buggy libdb, so some of the DB_File tests
are known to fail on those releases.
.SH "Customizations in Apple's Perl"
.IX Header "Customizations in Apple's Perl"
Several custom features have been added to the version of perl in Mac \s-1OS X.\s0
.SS "Module Search Path (@INC)"
.IX Subsection "Module Search Path (@INC)"
Since 10.4 \*(L"Tiger\*(R", system administrators can easily add paths to perl's
module search path.
The file '/Library/Perl/${version}/PrependToPath' contains paths (one per
line) that will be added to the beginning of the search path, while the file
\&'/Library/Perl/${version}/AppendToPath' contains paths that will be added
to the end of the search path.
.PP
By default, Mac \s-1OS X\s0 does not come with a PrependToPath file, but does come
with an AppendToPath file.
This file contains the path '/System/Library/Perl/Extras/${version}', where
third-party perl modules that Apple ships on Mac \s-1OS X,\s0 are installed.
In addition, it contains the paths to previous versions of
\&'/Library/Perl/${version}' (where ${version} are the previous versions of perl
that shipped in Mac \s-1OS X\s0), to maintain backwards compatibility.
.PP
In 10.5 \*(L"Leopard\*(R" and beyond, the environment variable \s-1NO_PERL_PREPENDTOPATH
\&\s0(set to anything) will cause perl to not load any PrependToPath file.
Likewise, the \s-1NO_PERL_APPENDTOPATH\s0 environment variable will case perl to not
load any AppendToPath file.
.PP
In 10.5.7 for versions of perl before 5.18.2, there is a new path,
\&'/Library/Perl/Updates/${version}' that comes before the system perl directory.
When 'INSTALLDIRS=perl' is specified to Makefile.PL, modules that
previous overwrite those in '/System/Library/Perl/${version}', will now be
install in '/Library/Perl/Updates/${version}'.
This allows Apple to update modules in the system perl, but users will
get the versions they installed in '/Library/Perl/Updates/${version}'.
.PP
In addition, the Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" now
corresponds to this new directory.
There are also the new parameters \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R", which also correspond to this new directory,
and are provided for completeness.
.PP
However, for perl 5.18.2 in Mac \s-1OS X 10.7,\s0 the order of the include
paths was changed so that '/Library/Perl/5.18.2' came before
\&'/System/Library/Perl/5.18.2', so '/Library/Perl/Updates' is no longer needed.
The Config parameters \*(L"installprivlib\*(R" and \*(L"installarchlib\*(R" have returned
to their original values, and \*(L"installupdateslib\*(R", \*(L"installupdatesarch\*(R",
\&\*(L"updateslib\*(R" and \*(L"updatesarch\*(R" have been removed.
.SS "Dtrace Support"
.IX Subsection "Dtrace Support"
Dtrace support has been added to perl to allow tracing of perl subroutine
calls, both entry and return.
Here is a quick example:
.PP
.Vb 2
\&    % cat test.pl
\&    #!/usr/bin/perl
\&
\&    sub a {
\&        print "Ah! death. Welcome to thee brother\en";
\&    }
\&
\&    sub b {
\&        print "Where art thou a()?\en";
\&        a();
\&    }
\&
\&    sub c {
\&        print "The band of alphabets\en";
\&        b();
\&    }
\&
\&    sub main {
\&        c();
\&    }
\&
\&    main();
\&    % cat pltest.d
\&    perl$target:::
\&    {
\&        printf("%s\en", copyinstr(arg0));
\&    }
\&    % sudo dtrace \-s pltest.d \-c \*(Aqperl test.pl\*(Aq
\&    dtrace: description \*(Aqperl$target::: \*(Aq matched 8 probes
\&    The band of alphabets
\&    Where art thou a()?
\&    Ah! death. Welcome to thee brother
\&    dtrace: pid 50272 has exited
\&    CPU     ID                    FUNCTION:NAME
\&      0  14231       Perl_pp_entersub:sub\-entry main
\&
\&      0  14231       Perl_pp_entersub:sub\-entry c
\&
\&      0  14231       Perl_pp_entersub:sub\-entry b
\&
\&      0  14231       Perl_pp_entersub:sub\-entry a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return a
\&
\&      0  15806      Perl_pp_leavesub:sub\-return b
\&
\&      0  15806      Perl_pp_leavesub:sub\-return c
\&
\&      0  15806      Perl_pp_leavesub:sub\-return main
.Ve
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Since 10.5 \*(L"Leopard\*(R", Mac \s-1OS X\s0 provided both 32 and 64\-bit support for libraries
and frameworks, allowing both 32 and 64\-bit applications to be written.
While running perl (and all other command-line programs) remained 32\-bit, the
\&'libperl.dylib' library is 32/64 bits.
This allows programs with embedded
perl support to run in both 32 and 64\-bit mode as needed.
.PP
To support this, changes to the Config module were made to return the correct
values for the internal sizes of perl types.
For example, \*(L"longsize\*(R" return 4 in 32\-bits, while it returns 8 in 64\-bits.
.PP
Related to this support is the new environment variable \s-1ARCHFLAGS,\s0 which
provides a way to build extensions for different machine and 32/64\-bit
architectures.
The default architecture to build extensions before 10.5 was the (single)
architecture of the building machine.
In 10.5, this became building both 32\-bit PowerPC and Intel.
In 10.6 and beyond, the default architectures were changed to building 32\-bit
for both PowerPC and Intel, and 64\-bit only for Intel.
With \s-1ARCHFLAGS,\s0 this can be changed to whatever architectures the user
wants to build.
For example:
.PP
.Vb 3
\&    % env ARCHFLAGS=\*(Aq\-arch i386 \-arch x86_64\*(Aq perl Makefile.PL
\&    % make
\&    % make install
.Ve
.PP
will build only 2\-way universal.
.SS "Multiple Version Support"
.IX Subsection "Multiple Version Support"
Since 10.6 \*(L"SnowLeopard\*(R", more than one version of perl are supported.
So out of the box, the default version of perl is 5.18.
However, to provide backwards compatibility with previous versions of perl,
especially for systems that have installed (version-specific) perl modules, or
to provide newer versions of perl that we aren't ready to make the default,
\&'/usr/bin/perl' can be switched to use an alternate version, on a per-user or
system-wide basis.
The alternate version of perl that is provided is .
.PP
Users can select the alternate version
by simply running the following command:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Version
.Ve
.PP
Subsequent invocations of '/usr/bin/perl' will then use the  version.
.PP
In addition, both perl versions will ship as a universal binary containing
64\-bit support, which will be on by default.
For those cases where 32\-bit perl is desired, the following command can
be used:
.PP
.Vb 1
\&    % defaults write com.apple.versioner.perl Prefer\-32\-Bit \-bool yes
.Ve
.PP
To set defaults systemwide, use the above commands, but replace the third
argument with '/Library/Preferences/com.apple.versioner.perl' (admin privileges
will be required).
.PP
The environment variables \s-1VERSIONER_PERL_VERSION \s0(set to one of the supported versions) and
\&\s-1VERSIONER_PERL_PREFER_32_BIT \s0(set to 'true', 'false', 'yes', 'no', '1' or '0')
can also be set, and they override the settings in any preference files.
.PP
Note: this may changes in future versions of Mac \s-1OS X,\s0 which may use
an improved scheme for making such settings.
.SH "Building Perl"
.IX Header "Building Perl"
.SS "Installation Prefix"
.IX Subsection "Installation Prefix"
The default installation location for this release uses the traditional
\&\s-1UNIX\s0 directory layout under /usr/local. This is the recommended location
for most users, and will leave the Apple-supplied Perl and its modules
undisturbed.
.PP
Using an installation prefix of '/usr' will result in a directory layout
that mirrors that of Apple's default Perl, with core modules stored in
\&'/System/Library/Perl/${version}', \s-1CPAN\s0 modules stored in
\&'/Library/Perl/${version}', and the addition of
\&'/Network/Library/Perl/${version}' to \f(CW@INC\fR for modules that are stored
on a file server and used by many Macs.
.SS "\s-1SDK\s0 support"
.IX Subsection "SDK support"
First, export the path to the \s-1SDK\s0 into the build environment:
.PP
.Vb 1
\&    export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk
.Ve
.PP
Please make sure the \s-1SDK\s0 version (i.e. the numbers right before '.sdk')
matches your system's (in this case, Mac \s-1OS X 10.8 \s0\*(L"Mountain Lion\*(R"), as it is
possible to have more than one \s-1SDK\s0 installed. Also make sure the path exists
in your system, and if it doesn't please make sure the \s-1SDK\s0 is properly
installed, as it should come with the 'Command Line Tools' bundle mentioned
above. Finally, if you have an older Mac \s-1OS X \s0(10.6 \*(L"Snow Leopard\*(R" and below)
running Xcode 4.2 or lower, the \s-1SDK\s0 path might be something like
\&\f(CW\*(Aq/Developer/SDKs/MacOSX10.3.9.sdk\*(Aq\fR.
.PP
You can use the \s-1SDK\s0 by exporting some additions to Perl's 'ccflags' and '..flags'
config variables:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.SS "Universal Binary support"
.IX Subsection "Universal Binary support"
Note: From Mac \s-1OS X 10.6 \s0\*(L"Snow Leopard\*(R" onwards, Apple only supports
Intel-based hardware. This means you can safely skip this section unless
you have an older Apple computer running on ppc or wish to create a perl
binary with backwards compatibility.
.PP
You can compile perl as a universal binary (built for both ppc and intel).
In Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R", you must export the 'u' variant of the \s-1SDK:\s0
.PP
.Vb 1
\&    export SDK=/Developer/SDKs/MacOSX10.4u.sdk
.Ve
.PP
Mac \s-1OS X 10.5 \s0\*(L"Leopard\*(R" and above do not require the 'u' variant.
.PP
In addition to the compiler flags used to select the \s-1SDK,\s0 also add the flags
for creating a universal binary:
.PP
.Vb 5
\&    ./Configure \-Accflags="\-arch i686 \-arch ppc \-nostdinc \-B$SDK/usr/include/gcc \e
\&                           \-B$SDK/usr/lib/gcc \-isystem$SDK/usr/include \e
\&                           \-F$SDK/System/Library/Frameworks" \e
\&                \-Aldflags="\-arch i686 \-arch ppc \-Wl,\-syslibroot,$SDK" \e
\&                \-de
.Ve
.PP
Keep in mind that these compiler and linker settings will also be used when
building \s-1CPAN\s0 modules. For \s-1XS\s0 modules to be compiled as a universal binary, any
libraries it links to must also be universal binaries. The system libraries that
Apple includes with the 10.4u \s-1SDK\s0 are all universal, but user-installed libraries
may need to be re-installed as universal binaries.
.SS "64\-bit Support"
.IX Subsection "64-bit Support"
Follow the instructions in \fI\s-1INSTALL\s0\fR to build perl with support for 64\-bit 
integers (\f(CW\*(C`use64bitint\*(C'\fR) or both 64\-bit integers and 64\-bit addressing
(\f(CW\*(C`use64bitall\*(C'\fR). In the latter case, the resulting binary will run only
on G5\-based hosts.
.PP
Support for 64\-bit addressing is experimental: some aspects of Perl may be
omitted or buggy. Note the messages output by \fIConfigure\fR for further 
information. Please use \f(CW\*(C`perlbug\*(C'\fR to submit a problem report in the
event that you encounter difficulties.
.PP
When building 64\-bit modules, it is your responsibility to ensure that linked
external libraries and frameworks provide 64\-bit support: if they do not,
module building may appear to succeed, but attempts to use the module will
result in run-time dynamic linking errors, and subsequent test failures.
You can use \f(CW\*(C`file\*(C'\fR to discover the architectures supported by a library:
.PP
.Vb 4
\&    $ file libgdbm.3.0.0.dylib 
\&    libgdbm.3.0.0.dylib: Mach\-O fat file with 2 architectures
\&    libgdbm.3.0.0.dylib (for architecture ppc):      Mach\-O dynamically linked shared library ppc
\&    libgdbm.3.0.0.dylib (for architecture ppc64):    Mach\-O 64\-bit dynamically linked shared library ppc64
.Ve
.PP
Note that this issue precludes the building of many Macintosh-specific \s-1CPAN\s0
modules (\f(CW\*(C`Mac::*\*(C'\fR), as the required Apple frameworks do not provide 64\-bit
support. Similarly, downloads from Fink or Darwinports are unlikely to provide
64\-bit support; the libraries must be rebuilt from source with the appropriate
compiler and linker flags. For further information, see Apple's
\&\fI64\-Bit Transition Guide\fR at 
<http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.
.SS "libperl and Prebinding"
.IX Subsection "libperl and Prebinding"
Mac \s-1OS X\s0 ships with a dynamically-loaded libperl, but the default for
this release is to compile a static libperl. The reason for this is
pre-binding. Dynamic libraries can be pre-bound to a specific address in
memory in order to decrease load time. To do this, one needs to be aware
of the location and size of all previously-loaded libraries. Apple
collects this information as part of their overall \s-1OS\s0 build process, and
thus has easy access to it when building Perl, but ordinary users would
need to go to a great deal of effort to obtain the information needed
for pre-binding.
.PP
You can override the default and build a shared libperl if you wish
(Configure\ ...\ \-Duseshrplib).
.PP
With Mac \s-1OS X 10.4 \s0\*(L"Tiger\*(R" and newer, there is almost no performance
penalty for non-prebound libraries. Earlier releases will suffer a greater
load time than either the static library, or Apple's pre-bound dynamic library.
.SS "Updating Apple's Perl"
.IX Subsection "Updating Apple's Perl"
In a word \- don't, at least not without a *very* good reason. Your scripts
can just as easily begin with \*(L"#!/usr/local/bin/perl\*(R" as with
\&\*(L"#!/usr/bin/perl\*(R". Scripts supplied by Apple and other third parties as
part of installation packages and such have generally only been tested
with the /usr/bin/perl that's installed by Apple.
.PP
If you find that you do need to update the system Perl, one issue worth
keeping in mind is the question of static vs. dynamic libraries. If you
upgrade using the default static libperl, you will find that the dynamic
libperl supplied by Apple will not be deleted. If both libraries are
present when an application that links against libperl is built, ld will
link against the dynamic library by default. So, if you need to replace
Apple's dynamic libperl with a static libperl, you need to be sure to
delete the older dynamic library after you've installed the update.
.SS "Known problems"
.IX Subsection "Known problems"
If you have installed extra libraries such as \s-1GDBM\s0 through Fink
(in other words, you have libraries under \fI/sw/lib\fR), or libdlcompat
to \fI/usr/local/lib\fR, you may need to be extra careful when running
Configure to not to confuse Configure and Perl about which libraries
to use.  Being confused will show up for example as \*(L"dyld\*(R" errors about
symbol problems, for example during \*(L"make test\*(R". The safest bet is to run
Configure as
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=/usr/lib
.Ve
.PP
to make Configure look only into the system libraries.  If you have some
extra library directories that you really want to use (such as newer
Berkeley \s-1DB\s0 libraries in pre-Panther systems), add those to the libpth:
.PP
.Vb 1
\&    Configure ... \-Uloclibpth \-Dlibpth=\*(Aq/usr/lib /opt/lib\*(Aq
.Ve
.PP
The default of building Perl statically may cause problems with complex
applications like Tk: in that case consider building shared Perl
.PP
.Vb 1
\&    Configure ... \-Duseshrplib
.Ve
.PP
but remember that there's a startup cost to pay in that case (see above
\&\*(L"libperl and Prebinding\*(R").
.PP
Starting with Tiger (Mac \s-1OS X 10.4\s0), Apple shipped broken locale files for
the eu_ES locale (Basque-Spain).  In previous releases of Perl, this resulted in
failures in the \fIlib/locale\fR test. These failures have been suppressed
in the current release of Perl by making the test ignore the broken locale.
If you need to use the eu_ES locale, you should contact Apple support.
.SS "Cocoa"
.IX Subsection "Cocoa"
There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge
module, included with Mac \s-1OS X,\s0 can be used by standalone scripts to
access Foundation (i.e. non-GUI) classes and objects.
.PP
An alternative is CamelBones, a framework that allows access to both
Foundation and AppKit classes and objects, so that full \s-1GUI\s0 applications
can be built in Perl. CamelBones can be found on SourceForge, at
<http://www.sourceforge.net/projects/camelbones/>.
.SH "Starting From Scratch"
.IX Header "Starting From Scratch"
Unfortunately it is not that difficult somehow manage to break one's
Mac \s-1OS X\s0 Perl rather severely.  If all else fails and you want to
really, \fB\s-1REALLY\s0\fR, start from scratch and remove even your Apple Perl
installation (which has become corrupted somehow), the following
instructions should do it.  \fBPlease think twice before following
these instructions: they are much like conducting brain surgery to
yourself.  Without anesthesia.\fR  We will \fBnot\fR come to fix your system
if you do this.
.PP
First, get rid of the libperl.dylib:
.PP
.Vb 2
\&    # cd /System/Library/Perl/darwin/CORE
\&    # rm libperl.dylib
.Ve
.PP
Then delete every .bundle file found anywhere in the folders:
.PP
.Vb 2
\&    /System/Library/Perl
\&    /Library/Perl
.Ve
.PP
You can find them for example by
.PP
.Vb 1
\&    # find /System/Library/Perl /Library/Perl \-name \*(Aq*.bundle\*(Aq \-print
.Ve
.PP
After this you can either copy Perl from your operating system media
(you will need at least the /System/Library/Perl and /usr/bin/perl),
or rebuild Perl from the source code with \f(CW\*(C`Configure \-Dprefix=/usr
\&\-Duseshrplib\*(C'\fR \s-1NOTE:\s0 the \f(CW\*(C`\-Dprefix=/usr\*(C'\fR to replace the system Perl
works much better with Perl 5.8.1 and later, in Perl 5.8.0 the
settings were not quite right.
.PP
\&\*(L"Pacifist\*(R" from CharlesSoft (<http://www.charlessoft.com/>) is a nice
way to extract the Perl binaries from the \s-1OS\s0 media, without having to
reinstall the entire \s-1OS.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
This \s-1README\s0 was written by Sherm Pendley <sherm@dot\-app.org>,
and subsequently updated by Dominic Dunlop <domo@computer.org>
and Breno G. de Oliveira <garu@cpan.org>. The \*(L"Starting From Scratch\*(R"
recipe was contributed by John Montbriand <montbriand@apple.com>.
.SH "DATE"
.IX Header "DATE"
Last modified 2011\-10\-31.
                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmod.1                                    0100644 0001750 0001750 00000076756 12566207442 022427  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMOD 1"
.TH PERLMOD 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmod \- Perl modules (packages and symbol tables)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Packages"
.IX Xref "package namespace variable, global global variable global"
.IX Subsection "Packages"
Perl provides a mechanism for alternative namespaces to protect
packages from stomping on each other's variables.  In fact, there's
really no such thing as a global variable in Perl.  The package
statement declares the compilation unit as being in the given
namespace.  The scope of the package declaration is from the
declaration itself through the end of the enclosing block, \f(CW\*(C`eval\*(C'\fR,
or file, whichever comes first (the same scope as the \fImy()\fR and
\&\fIlocal()\fR operators).  Unqualified dynamic identifiers will be in
this namespace, except for those few identifiers that if unqualified,
default to the main package instead of the current one as described
below.  A package statement affects only dynamic variables\*(--including
those you've used \fIlocal()\fR on\*(--but \fInot\fR lexical variables created
with \fImy()\fR.  Typically it would be the first declaration in a file
included by the \f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  You can
switch into a package in more than one place; it merely influences
which symbol table is used by the compiler for the rest of that
block.  You can refer to variables and filehandles in other packages
by prefixing the identifier with the package name and a double
colon: \f(CW$Package::Variable\fR.  If the package name is null, the
\&\f(CW\*(C`main\*(C'\fR package is assumed.  That is, \f(CW$::sail\fR is equivalent to
\&\f(CW$main::sail\fR.
.PP
The old package delimiter was a single quote, but double colon is now the
preferred delimiter, in part because it's more readable to humans, and
in part because it's more readable to \fBemacs\fR macros.  It also makes \*(C+
programmers feel like they know what's going on\*(--as opposed to using the
single quote as separator, which was there to make Ada programmers feel
like they knew what was going on.  Because the old-fashioned syntax is still
supported for backwards compatibility, if you try to use a string like
\&\f(CW"This is $owner\*(Aqs house"\fR, you'll be accessing \f(CW$owner::s\fR; that is,
the \f(CW$s\fR variable in package \f(CW\*(C`owner\*(C'\fR, which is probably not what you meant.
Use braces to disambiguate, as in \f(CW"This is ${owner}\*(Aqs house"\fR.
.IX Xref ":: '"
.PP
Packages may themselves contain package separators, as in
\&\f(CW$OUTER::INNER::var\fR.  This implies nothing about the order of
name lookups, however.  There are no relative packages: all symbols
are either local to the current package, or must be fully qualified
from the outer package name down.  For instance, there is nowhere
within package \f(CW\*(C`OUTER\*(C'\fR that \f(CW$INNER::var\fR refers to
\&\f(CW$OUTER::INNER::var\fR.  \f(CW\*(C`INNER\*(C'\fR refers to a totally
separate global package.
.PP
Only identifiers starting with letters (or underscore) are stored
in a package's symbol table.  All other symbols are kept in package
\&\f(CW\*(C`main\*(C'\fR, including all punctuation variables, like \f(CW$_\fR.  In addition,
when unqualified, the identifiers \s-1STDIN, STDOUT, STDERR, ARGV,
ARGVOUT, ENV, INC,\s0 and \s-1SIG\s0 are forced to be in package \f(CW\*(C`main\*(C'\fR,
even when used for other purposes than their built-in ones.  If you
have a package called \f(CW\*(C`m\*(C'\fR, \f(CW\*(C`s\*(C'\fR, or \f(CW\*(C`y\*(C'\fR, then you can't use the
qualified form of an identifier because it would be instead interpreted
as a pattern match, a substitution, or a transliteration.
.IX Xref "variable, punctuation"
.PP
Variables beginning with underscore used to be forced into package
main, but we decided it was more useful for package writers to be able
to use leading underscore to indicate private variables and method names.
However, variables and functions named with a single \f(CW\*(C`_\*(C'\fR, such as
\&\f(CW$_\fR and \f(CW\*(C`sub _\*(C'\fR, are still forced into the package \f(CW\*(C`main\*(C'\fR.  See also
\&\*(L"The Syntax of Variable Names\*(R" in perlvar.
.PP
\&\f(CW\*(C`eval\*(C'\fRed strings are compiled in the package in which the \fIeval()\fR was
compiled.  (Assignments to \f(CW$SIG{}\fR, however, assume the signal
handler specified is in the \f(CW\*(C`main\*(C'\fR package.  Qualify the signal handler
name if you wish to have a signal handler in a package.)  For an
example, examine \fIperldb.pl\fR in the Perl library.  It initially switches
to the \f(CW\*(C`DB\*(C'\fR package so that the debugger doesn't interfere with variables
in the program you are trying to debug.  At various points, however, it
temporarily switches back to the \f(CW\*(C`main\*(C'\fR package to evaluate various
expressions in the context of the \f(CW\*(C`main\*(C'\fR package (or wherever you came
from).  See perldebug.
.PP
The special symbol \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR contains the current package, but cannot
(easily) be used to construct variable names.
.PP
See perlsub for other scoping issues related to \fImy()\fR and \fIlocal()\fR,
and perlref regarding closures.
.SS "Symbol Tables"
.IX Xref "symbol table stash %:: %main:: typeglob glob alias"
.IX Subsection "Symbol Tables"
The symbol table for a package happens to be stored in the hash of that
name with two colons appended.  The main symbol table's name is thus
\&\f(CW%main::\fR, or \f(CW%::\fR for short.  Likewise the symbol table for the nested
package mentioned earlier is named \f(CW%OUTER::INNER::\fR.
.PP
The value in each entry of the hash is what you are referring to when you
use the \f(CW*name\fR typeglob notation.
.PP
.Vb 1
\&    local *main::foo    = *main::bar;
.Ve
.PP
You can use this to print out all the variables in a package, for
instance.  The standard but antiquated \fIdumpvar.pl\fR library and
the \s-1CPAN\s0 module Devel::Symdump make use of this.
.PP
The results of creating new symbol table entries directly or modifying any
entries that are not already typeglobs are undefined and subject to change
between releases of perl.
.PP
Assignment to a typeglob performs an aliasing operation, i.e.,
.PP
.Vb 1
\&    *dick = *richard;
.Ve
.PP
causes variables, subroutines, formats, and file and directory handles
accessible via the identifier \f(CW\*(C`richard\*(C'\fR also to be accessible via the
identifier \f(CW\*(C`dick\*(C'\fR.  If you want to alias only a particular variable or
subroutine, assign a reference instead:
.PP
.Vb 1
\&    *dick = \e$richard;
.Ve
.PP
Which makes \f(CW$richard\fR and \f(CW$dick\fR the same variable, but leaves
\&\f(CW@richard\fR and \f(CW@dick\fR as separate arrays.  Tricky, eh?
.PP
There is one subtle difference between the following statements:
.PP
.Vb 2
\&    *foo = *bar;
\&    *foo = \e$bar;
.Ve
.PP
\&\f(CW\*(C`*foo = *bar\*(C'\fR makes the typeglobs themselves synonymous while
\&\f(CW\*(C`*foo = \e$bar\*(C'\fR makes the \s-1SCALAR\s0 portions of two distinct typeglobs
refer to the same scalar value. This means that the following code:
.PP
.Vb 2
\&    $bar = 1;
\&    *foo = \e$bar;       # Make $foo an alias for $bar
\&
\&    {
\&        local $bar = 2; # Restrict changes to block
\&        print $foo;     # Prints \*(Aq1\*(Aq!
\&    }
.Ve
.PP
Would print '1', because \f(CW$foo\fR holds a reference to the \fIoriginal\fR
\&\f(CW$bar\fR. The one that was stuffed away by \f(CW\*(C`local()\*(C'\fR and which will be
restored when the block ends. Because variables are accessed through the
typeglob, you can use \f(CW\*(C`*foo = *bar\*(C'\fR to create an alias which can be
localized. (But be aware that this means you can't have a separate
\&\f(CW@foo\fR and \f(CW@bar\fR, etc.)
.PP
What makes all of this important is that the Exporter module uses glob
aliasing as the import/export mechanism. Whether or not you can properly
localize a variable that has been exported from a module depends on how
it was exported:
.PP
.Vb 2
\&    @EXPORT = qw($FOO); # Usual form, can\*(Aqt be localized
\&    @EXPORT = qw(*FOO); # Can be localized
.Ve
.PP
You can work around the first case by using the fully qualified name
(\f(CW$Package::FOO\fR) where you need a local value, or by overriding it
by saying \f(CW\*(C`*FOO = *Package::FOO\*(C'\fR in your script.
.PP
The \f(CW\*(C`*x = \e$y\*(C'\fR mechanism may be used to pass and return cheap references
into or from subroutines if you don't want to copy the whole
thing.  It only works when assigning to dynamic variables, not
lexicals.
.PP
.Vb 9
\&    %some_hash = ();                    # can\*(Aqt be my()
\&    *some_hash = fn( \e%another_hash );
\&    sub fn {
\&        local *hashsym = shift;
\&        # now use %hashsym normally, and you
\&        # will affect the caller\*(Aqs %another_hash
\&        my %nhash = (); # do what you want
\&        return \e%nhash;
\&    }
.Ve
.PP
On return, the reference will overwrite the hash slot in the
symbol table specified by the *some_hash typeglob.  This
is a somewhat tricky way of passing around references cheaply
when you don't want to have to remember to dereference variables
explicitly.
.PP
Another use of symbol tables is for making \*(L"constant\*(R" scalars.
.IX Xref "constant scalar, constant"
.PP
.Vb 1
\&    *PI = \e3.14159265358979;
.Ve
.PP
Now you cannot alter \f(CW$PI\fR, which is probably a good thing all in all.
This isn't the same as a constant subroutine, which is subject to
optimization at compile-time.  A constant subroutine is one prototyped
to take no arguments and to return a constant expression.  See
perlsub for details on these.  The \f(CW\*(C`use constant\*(C'\fR pragma is a
convenient shorthand for these.
.PP
You can say \f(CW*foo{PACKAGE}\fR and \f(CW*foo{NAME}\fR to find out what name and
package the *foo symbol table entry comes from.  This may be useful
in a subroutine that gets passed typeglobs as arguments:
.PP
.Vb 6
\&    sub identify_typeglob {
\&        my $glob = shift;
\&        print \*(AqYou gave me \*(Aq, *{$glob}{PACKAGE}, \*(Aq::\*(Aq, *{$glob}{NAME}, "\en";
\&    }
\&    identify_typeglob *foo;
\&    identify_typeglob *bar::baz;
.Ve
.PP
This prints
.PP
.Vb 2
\&    You gave me main::foo
\&    You gave me bar::baz
.Ve
.PP
The \f(CW*foo{THING}\fR notation can also be used to obtain references to the
individual elements of *foo.  See perlref.
.PP
Subroutine definitions (and declarations, for that matter) need
not necessarily be situated in the package whose symbol table they
occupy.  You can define a subroutine outside its package by
explicitly qualifying the name of the subroutine:
.PP
.Vb 2
\&    package main;
\&    sub Some_package::foo { ... }   # &foo defined in Some_package
.Ve
.PP
This is just a shorthand for a typeglob assignment at compile time:
.PP
.Vb 1
\&    BEGIN { *Some_package::foo = sub { ... } }
.Ve
.PP
and is \fInot\fR the same as writing:
.PP
.Vb 4
\&    {
\&        package Some_package;
\&        sub foo { ... }
\&    }
.Ve
.PP
In the first two versions, the body of the subroutine is
lexically in the main package, \fInot\fR in Some_package. So
something like this:
.PP
.Vb 1
\&    package main;
\&
\&    $Some_package::name = "fred";
\&    $main::name = "barney";
\&
\&    sub Some_package::foo {
\&        print "in ", _\|_PACKAGE_\|_, ": \e$name is \*(Aq$name\*(Aq\en";
\&    }
\&
\&    Some_package::foo();
.Ve
.PP
prints:
.PP
.Vb 1
\&    in main: $name is \*(Aqbarney\*(Aq
.Ve
.PP
rather than:
.PP
.Vb 1
\&    in Some_package: $name is \*(Aqfred\*(Aq
.Ve
.PP
This also has implications for the use of the \s-1SUPER::\s0 qualifier
(see perlobj).
.SS "\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 and \s-1END \s0"
.IX Xref "BEGIN UNITCHECK CHECK INIT END"
.IX Subsection "BEGIN, UNITCHECK, CHECK, INIT and END "
Five specially named code blocks are executed at the beginning and at
the end of a running Perl program.  These are the \f(CW\*(C`BEGIN\*(C'\fR,
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, and \f(CW\*(C`END\*(C'\fR blocks.
.PP
These code blocks can be prefixed with \f(CW\*(C`sub\*(C'\fR to give the appearance of a
subroutine (although this is not considered good style).  One should note
that these code blocks don't really exist as named subroutines (despite
their appearance). The thing that gives this away is the fact that you can
have \fBmore than one\fR of these code blocks in a program, and they will get
\&\fBall\fR executed at the appropriate moment.  So you can't execute any of
these code blocks by name.
.PP
A \f(CW\*(C`BEGIN\*(C'\fR code block is executed as soon as possible, that is, the moment
it is completely defined, even before the rest of the containing file (or
string) is parsed.  You may have multiple \f(CW\*(C`BEGIN\*(C'\fR blocks within a file (or
eval'ed string); they will execute in order of definition.  Because a \f(CW\*(C`BEGIN\*(C'\fR
code block executes immediately, it can pull in definitions of subroutines
and such from other files in time to be visible to the rest of the compile
and run time.  Once a \f(CW\*(C`BEGIN\*(C'\fR has run, it is immediately undefined and any
code it used is returned to Perl's memory pool.
.PP
An \f(CW\*(C`END\*(C'\fR code block is executed as late as possible, that is, after
perl has finished running the program and just before the interpreter
is being exited, even if it is exiting as a result of a \fIdie()\fR function.
(But not if it's morphing into another program via \f(CW\*(C`exec\*(C'\fR, or
being blown out of the water by a signal\*(--you have to trap that yourself
(if you can).)  You may have multiple \f(CW\*(C`END\*(C'\fR blocks within a file\*(--they
will execute in reverse order of definition; that is: last in, first
out (\s-1LIFO\s0).  \f(CW\*(C`END\*(C'\fR blocks are not executed when you run perl with the
\&\f(CW\*(C`\-c\*(C'\fR switch, or if compilation fails.
.PP
Note that \f(CW\*(C`END\*(C'\fR code blocks are \fBnot\fR executed at the end of a string
\&\f(CW\*(C`eval()\*(C'\fR: if any \f(CW\*(C`END\*(C'\fR code blocks are created in a string \f(CW\*(C`eval()\*(C'\fR,
they will be executed just as any other \f(CW\*(C`END\*(C'\fR code block of that package
in \s-1LIFO\s0 order just before the interpreter is being exited.
.PP
Inside an \f(CW\*(C`END\*(C'\fR code block, \f(CW$?\fR contains the value that the program is
going to pass to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR to change the exit
value of the program.  Beware of changing \f(CW$?\fR by accident (e.g. by
running something via \f(CW\*(C`system\*(C'\fR).
.IX Xref "$?"
.PP
Inside of a \f(CW\*(C`END\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"END"\fR.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR code blocks are useful to catch the
transition between the compilation phase and the execution phase of
the main program.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR blocks are run just after the unit which defined them has
been compiled.  The main program file and each module it loads are
compilation units, as are string \f(CW\*(C`eval\*(C'\fRs, run-time code compiled using the
\&\f(CW\*(C`(?{ })\*(C'\fR construct in a regex, calls to \f(CW\*(C`do FILE\*(C'\fR, \f(CW\*(C`require FILE\*(C'\fR,
and code after the \f(CW\*(C`\-e\*(C'\fR switch on the command line.
.PP
\&\f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`UNITCHECK\*(C'\fR blocks are not directly related to the phase of
the interpreter.  They can be created and executed during any phase.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR code blocks are run just after the \fBinitial\fR Perl compile phase ends
and before the run time begins, in \s-1LIFO\s0 order.  \f(CW\*(C`CHECK\*(C'\fR code blocks are used
in the Perl compiler suite to save the compiled state of the program.
.PP
Inside of a \f(CW\*(C`CHECK\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"CHECK"\fR.
.PP
\&\f(CW\*(C`INIT\*(C'\fR blocks are run just before the Perl runtime begins execution, in
\&\*(L"first in, first out\*(R" (\s-1FIFO\s0) order.
.PP
Inside of an \f(CW\*(C`INIT\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be \f(CW"INIT"\fR.
.PP
The \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks in code compiled by \f(CW\*(C`require\*(C'\fR, string \f(CW\*(C`do\*(C'\fR,
or string \f(CW\*(C`eval\*(C'\fR will not be executed if they occur after the end of the
main compilation phase; that can be a problem in mod_perl and other persistent
environments which use those functions to load code at runtime.
.PP
When you use the \fB\-n\fR and \fB\-p\fR switches to Perl, \f(CW\*(C`BEGIN\*(C'\fR and
\&\f(CW\*(C`END\*(C'\fR work just as they do in \fBawk\fR, as a degenerate case.
Both \f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`CHECK\*(C'\fR blocks are run when you use the \fB\-c\fR
switch for a compile-only syntax check, although your main code
is not.
.PP
The \fBbegincheck\fR program makes it all clear, eventually:
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  # begincheck
\&
\&  print         "10. Ordinary code runs at runtime.\en";
\&
\&  END { print   "16.   So this is the end of the tale.\en" }
\&  INIT { print  " 7. INIT blocks run FIFO just before runtime.\en" }
\&  UNITCHECK {
\&    print       " 4.   And therefore before any CHECK blocks.\en"
\&  }
\&  CHECK { print " 6.   So this is the sixth line.\en" }
\&
\&  print         "11.   It runs in order, of course.\en";
\&
\&  BEGIN { print " 1. BEGIN blocks run FIFO during compilation.\en" }
\&  END { print   "15.   Read perlmod for the rest of the story.\en" }
\&  CHECK { print " 5. CHECK blocks run LIFO after all compilation.\en" }
\&  INIT { print  " 8.   Run this again, using Perl\*(Aqs \-c switch.\en" }
\&
\&  print         "12.   This is anti\-obfuscated code.\en";
\&
\&  END { print   "14. END blocks run LIFO at quitting time.\en" }
\&  BEGIN { print " 2.   So this line comes out second.\en" }
\&  UNITCHECK {
\&   print " 3. UNITCHECK blocks run LIFO after each file is compiled.\en"
\&  }
\&  INIT { print  " 9.   You\*(Aqll see the difference right away.\en" }
\&
\&  print         "13.   It merely _looks_ like it should be confusing.\en";
\&
\&  _\|_END_\|_
.Ve
.SS "Perl Classes"
.IX Xref "class @ISA"
.IX Subsection "Perl Classes"
There is no special class syntax in Perl, but a package may act
as a class if it provides subroutines to act as methods.  Such a
package may also derive some of its methods from another class (package)
by listing the other package name(s) in its global \f(CW@ISA\fR array (which
must be a package global, not a lexical).
.PP
For more on this, see perlootut and perlobj.
.SS "Perl Modules"
.IX Xref "module"
.IX Subsection "Perl Modules"
A module is just a set of related functions in a library file, i.e.,
a Perl package with the same name as the file.  It is specifically
designed to be reusable by other modules or programs.  It may do this
by providing a mechanism for exporting some of its symbols into the
symbol table of any package using it, or it may function as a class
definition and make its semantics available implicitly through
method calls on the class and its objects, without explicitly
exporting anything.  Or it can do a little of both.
.PP
For example, to start a traditional, non-OO module called Some::Module,
create a file called \fISome/Module.pm\fR and start with this template:
.PP
.Vb 1
\&    package Some::Module;  # assumes Some/Module.pm
\&
\&    use strict;
\&    use warnings;
\&
\&    BEGIN {
\&        require Exporter;
\&
\&        # set the version for version checking
\&        our $VERSION     = 1.00;
\&
\&        # Inherit from Exporter to export functions and variables
\&        our @ISA         = qw(Exporter);
\&
\&        # Functions and variables which are exported by default
\&        our @EXPORT      = qw(func1 func2);
\&
\&        # Functions and variables which can be optionally exported
\&        our @EXPORT_OK   = qw($Var1 %Hashit func3);
\&    }
\&
\&    # exported package globals go here
\&    our $Var1    = \*(Aq\*(Aq;
\&    our %Hashit  = ();
\&
\&    # non\-exported package globals go here
\&    # (they are still accessible as $Some::Module::stuff)
\&    our @more    = ();
\&    our $stuff   = \*(Aq\*(Aq;
\&
\&    # file\-private lexicals go here, before any functions which use them
\&    my $priv_var    = \*(Aq\*(Aq;
\&    my %secret_hash = ();
\&
\&    # here\*(Aqs a file\-private function as a closure,
\&    # callable as $priv_func\->();
\&    my $priv_func = sub {
\&        ...
\&    };
\&
\&    # make all your functions, whether exported or not;
\&    # remember to put something interesting in the {} stubs
\&    sub func1      { ... }
\&    sub func2      { ... }
\&
\&    # this one isn\*(Aqt exported, but could be called directly
\&    # as Some::Module::func3()
\&    sub func3      { ... }
\&
\&    END { ... }       # module clean\-up code here (global destructor)
\&
\&    1;  # don\*(Aqt forget to return a true value from the file
.Ve
.PP
Then go on to declare and use your variables in functions without
any qualifications.  See Exporter and the perlmodlib for
details on mechanics and style issues in module creation.
.PP
Perl modules are included into your program by saying
.PP
.Vb 1
\&    use Module;
.Ve
.PP
or
.PP
.Vb 1
\&    use Module LIST;
.Ve
.PP
This is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import; }
.Ve
.PP
or
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import( LIST ); }
.Ve
.PP
As a special case
.PP
.Vb 1
\&    use Module ();
.Ve
.PP
is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; }
.Ve
.PP
All Perl module files have the extension \fI.pm\fR.  The \f(CW\*(C`use\*(C'\fR operator
assumes this so you don't have to spell out "\fIModule.pm\fR" in quotes.
This also helps to differentiate new modules from old \fI.pl\fR and
\&\fI.ph\fR files.  Module names are also capitalized unless they're
functioning as pragmas; pragmas are in effect compiler directives,
and are sometimes called \*(L"pragmatic modules\*(R" (or even \*(L"pragmata\*(R"
if you're a classicist).
.PP
The two statements:
.PP
.Vb 2
\&    require SomeModule;
\&    require "SomeModule.pm";
.Ve
.PP
differ from each other in two ways.  In the first case, any double
colons in the module name, such as \f(CW\*(C`Some::Module\*(C'\fR, are translated
into your system's directory separator, usually \*(L"/\*(R".   The second
case does not, and would have to be specified literally.  The other
difference is that seeing the first \f(CW\*(C`require\*(C'\fR clues in the compiler
that uses of indirect object notation involving \*(L"SomeModule\*(R", as
in \f(CW\*(C`$ob = purge SomeModule\*(C'\fR, are method calls, not function calls.
(Yes, this really can make a difference.)
.PP
Because the \f(CW\*(C`use\*(C'\fR statement implies a \f(CW\*(C`BEGIN\*(C'\fR block, the importing
of semantics happens as soon as the \f(CW\*(C`use\*(C'\fR statement is compiled,
before the rest of the file is compiled.  This is how it is able
to function as a pragma mechanism, and also how modules are able to
declare subroutines that are then visible as list or unary operators for
the rest of the current file.  This will not work if you use \f(CW\*(C`require\*(C'\fR
instead of \f(CW\*(C`use\*(C'\fR.  With \f(CW\*(C`require\*(C'\fR you can get into this problem:
.PP
.Vb 2
\&    require Cwd;                # make Cwd:: accessible
\&    $here = Cwd::getcwd();
\&
\&    use Cwd;                    # import names from Cwd::
\&    $here = getcwd();
\&
\&    require Cwd;                # make Cwd:: accessible
\&    $here = getcwd();           # oops! no main::getcwd()
.Ve
.PP
In general, \f(CW\*(C`use Module ()\*(C'\fR is recommended over \f(CW\*(C`require Module\*(C'\fR,
because it determines module availability at compile time, not in the
middle of your program's execution.  An exception would be if two modules
each tried to \f(CW\*(C`use\*(C'\fR each other, and each also called a function from
that other module.  In that case, it's easy to use \f(CW\*(C`require\*(C'\fR instead.
.PP
Perl packages may be nested inside other package names, so we can have
package names containing \f(CW\*(C`::\*(C'\fR.  But if we used that package name
directly as a filename it would make for unwieldy or impossible
filenames on some systems.  Therefore, if a module's name is, say,
\&\f(CW\*(C`Text::Soundex\*(C'\fR, then its definition is actually found in the library
file \fIText/Soundex.pm\fR.
.PP
Perl modules always have a \fI.pm\fR file, but there may also be
dynamically linked executables (often ending in \fI.so\fR) or autoloaded
subroutine definitions (often ending in \fI.al\fR) associated with the
module.  If so, these will be entirely transparent to the user of
the module.  It is the responsibility of the \fI.pm\fR file to load
(or arrange to autoload) any additional functionality.  For example,
although the \s-1POSIX\s0 module happens to do both dynamic loading and
autoloading, the user can say just \f(CW\*(C`use POSIX\*(C'\fR to get it all.
.SS "Making your module threadsafe"
.IX Xref "threadsafe thread safe module, threadsafe module, thread safe CLONE CLONE_SKIP thread threads ithread"
.IX Subsection "Making your module threadsafe"
Perl supports a type of threads called interpreter threads (ithreads).
These threads can be used explicitly and implicitly.
.PP
Ithreads work by cloning the data tree so that no data is shared
between different threads. These threads can be used by using the \f(CW\*(C`threads\*(C'\fR
module or by doing \fIfork()\fR on win32 (fake \fIfork()\fR support). When a
thread is cloned all Perl data is cloned, however non-Perl data cannot
be cloned automatically.  Perl after 5.8.0 has support for the \f(CW\*(C`CLONE\*(C'\fR
special subroutine.  In \f(CW\*(C`CLONE\*(C'\fR you can do whatever
you need to do,
like for example handle the cloning of non-Perl data, if necessary.
\&\f(CW\*(C`CLONE\*(C'\fR will be called once as a class method for every package that has it
defined (or inherits it).  It will be called in the context of the new thread,
so all modifications are made in the new area.  Currently \s-1CLONE\s0 is called with
no parameters other than the invocant package name, but code should not assume
that this will remain unchanged, as it is likely that in future extra parameters
will be passed in to give more information about the state of cloning.
.PP
If you want to \s-1CLONE\s0 all objects you will need to keep track of them per
package. This is simply done using a hash and \fIScalar::Util::weaken()\fR.
.PP
Perl after 5.8.7 has support for the \f(CW\*(C`CLONE_SKIP\*(C'\fR special subroutine.
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is called once per package; however, it is
called just before cloning starts, and in the context of the parent
thread. If it returns a true value, then no objects of that class will
be cloned; or rather, they will be copied as unblessed, undef values.
For example: if in the parent there are two references to a single blessed
hash, then in the child there will be two references to a single undefined
scalar value instead.
This provides a simple mechanism for making a module threadsafe; just add
\&\f(CW\*(C`sub CLONE_SKIP { 1 }\*(C'\fR at the top of the class, and \f(CW\*(C`DESTROY()\*(C'\fR will
now only be called once per object. Of course, if the child thread needs
to make use of the objects, then a more sophisticated approach is
needed.
.PP
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is currently called with no parameters other
than the invocant package name, although that may change. Similarly, to
allow for future expansion, the return value should be a single \f(CW0\fR or
\&\f(CW1\fR value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See perlmodlib for general style issues related to building Perl
modules and classes, as well as descriptions of the standard library
and \s-1CPAN, \s0Exporter for how Perl's standard import/export mechanism
works, perlootut and perlobj for in-depth information on
creating classes, perlobj for a hard-core reference document on
objects, perlsub for an explanation of functions and scoping,
and perlxstut and perlguts for more information on writing
extension modules.
                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmod5.16.1                                0100644 0001750 0001750 00000076557 12566207421 022735  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMOD 1"
.TH PERLMOD 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmod \- Perl modules (packages and symbol tables)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Packages"
.IX Xref "package namespace variable, global global variable global"
.IX Subsection "Packages"
Perl provides a mechanism for alternative namespaces to protect
packages from stomping on each other's variables.  In fact, there's
really no such thing as a global variable in Perl.  The package
statement declares the compilation unit as being in the given
namespace.  The scope of the package declaration is from the
declaration itself through the end of the enclosing block, \f(CW\*(C`eval\*(C'\fR,
or file, whichever comes first (the same scope as the \fImy()\fR and
\&\fIlocal()\fR operators).  Unqualified dynamic identifiers will be in
this namespace, except for those few identifiers that if unqualified,
default to the main package instead of the current one as described
below.  A package statement affects only dynamic variables\*(--including
those you've used \fIlocal()\fR on\*(--but \fInot\fR lexical variables created
with \fImy()\fR.  Typically it would be the first declaration in a file
included by the \f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  You can
switch into a package in more than one place; it merely influences
which symbol table is used by the compiler for the rest of that
block.  You can refer to variables and filehandles in other packages
by prefixing the identifier with the package name and a double
colon: \f(CW$Package::Variable\fR.  If the package name is null, the
\&\f(CW\*(C`main\*(C'\fR package is assumed.  That is, \f(CW$::sail\fR is equivalent to
\&\f(CW$main::sail\fR.
.PP
The old package delimiter was a single quote, but double colon is now the
preferred delimiter, in part because it's more readable to humans, and
in part because it's more readable to \fBemacs\fR macros.  It also makes \*(C+
programmers feel like they know what's going on\*(--as opposed to using the
single quote as separator, which was there to make Ada programmers feel
like they knew what was going on.  Because the old-fashioned syntax is still
supported for backwards compatibility, if you try to use a string like
\&\f(CW"This is $owner\*(Aqs house"\fR, you'll be accessing \f(CW$owner::s\fR; that is,
the \f(CW$s\fR variable in package \f(CW\*(C`owner\*(C'\fR, which is probably not what you meant.
Use braces to disambiguate, as in \f(CW"This is ${owner}\*(Aqs house"\fR.
.IX Xref ":: '"
.PP
Packages may themselves contain package separators, as in
\&\f(CW$OUTER::INNER::var\fR.  This implies nothing about the order of
name lookups, however.  There are no relative packages: all symbols
are either local to the current package, or must be fully qualified
from the outer package name down.  For instance, there is nowhere
within package \f(CW\*(C`OUTER\*(C'\fR that \f(CW$INNER::var\fR refers to
\&\f(CW$OUTER::INNER::var\fR.  \f(CW\*(C`INNER\*(C'\fR refers to a totally
separate global package.
.PP
Only identifiers starting with letters (or underscore) are stored
in a package's symbol table.  All other symbols are kept in package
\&\f(CW\*(C`main\*(C'\fR, including all punctuation variables, like \f(CW$_\fR.  In addition,
when unqualified, the identifiers \s-1STDIN\s0, \s-1STDOUT\s0, \s-1STDERR\s0, \s-1ARGV\s0,
\&\s-1ARGVOUT\s0, \s-1ENV\s0, \s-1INC\s0, and \s-1SIG\s0 are forced to be in package \f(CW\*(C`main\*(C'\fR,
even when used for other purposes than their built-in ones.  If you
have a package called \f(CW\*(C`m\*(C'\fR, \f(CW\*(C`s\*(C'\fR, or \f(CW\*(C`y\*(C'\fR, then you can't use the
qualified form of an identifier because it would be instead interpreted
as a pattern match, a substitution, or a transliteration.
.IX Xref "variable, punctuation"
.PP
Variables beginning with underscore used to be forced into package
main, but we decided it was more useful for package writers to be able
to use leading underscore to indicate private variables and method names.
However, variables and functions named with a single \f(CW\*(C`_\*(C'\fR, such as
\&\f(CW$_\fR and \f(CW\*(C`sub _\*(C'\fR, are still forced into the package \f(CW\*(C`main\*(C'\fR.  See also
\&\*(L"The Syntax of Variable Names\*(R" in perlvar.
.PP
\&\f(CW\*(C`eval\*(C'\fRed strings are compiled in the package in which the \fIeval()\fR was
compiled.  (Assignments to \f(CW$SIG{}\fR, however, assume the signal
handler specified is in the \f(CW\*(C`main\*(C'\fR package.  Qualify the signal handler
name if you wish to have a signal handler in a package.)  For an
example, examine \fIperldb.pl\fR in the Perl library.  It initially switches
to the \f(CW\*(C`DB\*(C'\fR package so that the debugger doesn't interfere with variables
in the program you are trying to debug.  At various points, however, it
temporarily switches back to the \f(CW\*(C`main\*(C'\fR package to evaluate various
expressions in the context of the \f(CW\*(C`main\*(C'\fR package (or wherever you came
from).  See perldebug.
.PP
The special symbol \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR contains the current package, but cannot
(easily) be used to construct variable names.
.PP
See perlsub for other scoping issues related to \fImy()\fR and \fIlocal()\fR,
and perlref regarding closures.
.SS "Symbol Tables"
.IX Xref "symbol table stash %:: %main:: typeglob glob alias"
.IX Subsection "Symbol Tables"
The symbol table for a package happens to be stored in the hash of that
name with two colons appended.  The main symbol table's name is thus
\&\f(CW%main::\fR, or \f(CW%::\fR for short.  Likewise the symbol table for the nested
package mentioned earlier is named \f(CW%OUTER::INNER::\fR.
.PP
The value in each entry of the hash is what you are referring to when you
use the \f(CW*name\fR typeglob notation.
.PP
.Vb 1
\&    local *main::foo    = *main::bar;
.Ve
.PP
You can use this to print out all the variables in a package, for
instance.  The standard but antiquated \fIdumpvar.pl\fR library and
the \s-1CPAN\s0 module Devel::Symdump make use of this.
.PP
The results of creating new symbol table entries directly or modifying any
entries that are not already typeglobs are undefined and subject to change
between releases of perl.
.PP
Assignment to a typeglob performs an aliasing operation, i.e.,
.PP
.Vb 1
\&    *dick = *richard;
.Ve
.PP
causes variables, subroutines, formats, and file and directory handles
accessible via the identifier \f(CW\*(C`richard\*(C'\fR also to be accessible via the
identifier \f(CW\*(C`dick\*(C'\fR.  If you want to alias only a particular variable or
subroutine, assign a reference instead:
.PP
.Vb 1
\&    *dick = \e$richard;
.Ve
.PP
Which makes \f(CW$richard\fR and \f(CW$dick\fR the same variable, but leaves
\&\f(CW@richard\fR and \f(CW@dick\fR as separate arrays.  Tricky, eh?
.PP
There is one subtle difference between the following statements:
.PP
.Vb 2
\&    *foo = *bar;
\&    *foo = \e$bar;
.Ve
.PP
\&\f(CW\*(C`*foo = *bar\*(C'\fR makes the typeglobs themselves synonymous while
\&\f(CW\*(C`*foo = \e$bar\*(C'\fR makes the \s-1SCALAR\s0 portions of two distinct typeglobs
refer to the same scalar value. This means that the following code:
.PP
.Vb 2
\&    $bar = 1;
\&    *foo = \e$bar;       # Make $foo an alias for $bar
\&
\&    {
\&        local $bar = 2; # Restrict changes to block
\&        print $foo;     # Prints \*(Aq1\*(Aq!
\&    }
.Ve
.PP
Would print '1', because \f(CW$foo\fR holds a reference to the \fIoriginal\fR
\&\f(CW$bar\fR. The one that was stuffed away by \f(CW\*(C`local()\*(C'\fR and which will be
restored when the block ends. Because variables are accessed through the
typeglob, you can use \f(CW\*(C`*foo = *bar\*(C'\fR to create an alias which can be
localized. (But be aware that this means you can't have a separate
\&\f(CW@foo\fR and \f(CW@bar\fR, etc.)
.PP
What makes all of this important is that the Exporter module uses glob
aliasing as the import/export mechanism. Whether or not you can properly
localize a variable that has been exported from a module depends on how
it was exported:
.PP
.Vb 2
\&    @EXPORT = qw($FOO); # Usual form, can\*(Aqt be localized
\&    @EXPORT = qw(*FOO); # Can be localized
.Ve
.PP
You can work around the first case by using the fully qualified name
(\f(CW$Package::FOO\fR) where you need a local value, or by overriding it
by saying \f(CW\*(C`*FOO = *Package::FOO\*(C'\fR in your script.
.PP
The \f(CW\*(C`*x = \e$y\*(C'\fR mechanism may be used to pass and return cheap references
into or from subroutines if you don't want to copy the whole
thing.  It only works when assigning to dynamic variables, not
lexicals.
.PP
.Vb 9
\&    %some_hash = ();                    # can\*(Aqt be my()
\&    *some_hash = fn( \e%another_hash );
\&    sub fn {
\&        local *hashsym = shift;
\&        # now use %hashsym normally, and you
\&        # will affect the caller\*(Aqs %another_hash
\&        my %nhash = (); # do what you want
\&        return \e%nhash;
\&    }
.Ve
.PP
On return, the reference will overwrite the hash slot in the
symbol table specified by the *some_hash typeglob.  This
is a somewhat tricky way of passing around references cheaply
when you don't want to have to remember to dereference variables
explicitly.
.PP
Another use of symbol tables is for making \*(L"constant\*(R" scalars.
.IX Xref "constant scalar, constant"
.PP
.Vb 1
\&    *PI = \e3.14159265358979;
.Ve
.PP
Now you cannot alter \f(CW$PI\fR, which is probably a good thing all in all.
This isn't the same as a constant subroutine, which is subject to
optimization at compile-time.  A constant subroutine is one prototyped
to take no arguments and to return a constant expression.  See
perlsub for details on these.  The \f(CW\*(C`use constant\*(C'\fR pragma is a
convenient shorthand for these.
.PP
You can say \f(CW*foo{PACKAGE}\fR and \f(CW*foo{NAME}\fR to find out what name and
package the *foo symbol table entry comes from.  This may be useful
in a subroutine that gets passed typeglobs as arguments:
.PP
.Vb 6
\&    sub identify_typeglob {
\&        my $glob = shift;
\&        print \*(AqYou gave me \*(Aq, *{$glob}{PACKAGE}, \*(Aq::\*(Aq, *{$glob}{NAME}, "\en";
\&    }
\&    identify_typeglob *foo;
\&    identify_typeglob *bar::baz;
.Ve
.PP
This prints
.PP
.Vb 2
\&    You gave me main::foo
\&    You gave me bar::baz
.Ve
.PP
The \f(CW*foo{THING}\fR notation can also be used to obtain references to the
individual elements of *foo.  See perlref.
.PP
Subroutine definitions (and declarations, for that matter) need
not necessarily be situated in the package whose symbol table they
occupy.  You can define a subroutine outside its package by
explicitly qualifying the name of the subroutine:
.PP
.Vb 2
\&    package main;
\&    sub Some_package::foo { ... }   # &foo defined in Some_package
.Ve
.PP
This is just a shorthand for a typeglob assignment at compile time:
.PP
.Vb 1
\&    BEGIN { *Some_package::foo = sub { ... } }
.Ve
.PP
and is \fInot\fR the same as writing:
.PP
.Vb 4
\&    {
\&        package Some_package;
\&        sub foo { ... }
\&    }
.Ve
.PP
In the first two versions, the body of the subroutine is
lexically in the main package, \fInot\fR in Some_package. So
something like this:
.PP
.Vb 1
\&    package main;
\&
\&    $Some_package::name = "fred";
\&    $main::name = "barney";
\&
\&    sub Some_package::foo {
\&        print "in ", _\|_PACKAGE_\|_, ": \e$name is \*(Aq$name\*(Aq\en";
\&    }
\&
\&    Some_package::foo();
.Ve
.PP
prints:
.PP
.Vb 1
\&    in main: $name is \*(Aqbarney\*(Aq
.Ve
.PP
rather than:
.PP
.Vb 1
\&    in Some_package: $name is \*(Aqfred\*(Aq
.Ve
.PP
This also has implications for the use of the \s-1SUPER::\s0 qualifier
(see perlobj).
.SS "\s-1BEGIN\s0, \s-1UNITCHECK\s0, \s-1CHECK\s0, \s-1INIT\s0 and \s-1END\s0"
.IX Xref "BEGIN UNITCHECK CHECK INIT END"
.IX Subsection "BEGIN, UNITCHECK, CHECK, INIT and END"
Five specially named code blocks are executed at the beginning and at
the end of a running Perl program.  These are the \f(CW\*(C`BEGIN\*(C'\fR,
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, and \f(CW\*(C`END\*(C'\fR blocks.
.PP
These code blocks can be prefixed with \f(CW\*(C`sub\*(C'\fR to give the appearance of a
subroutine (although this is not considered good style).  One should note
that these code blocks don't really exist as named subroutines (despite
their appearance). The thing that gives this away is the fact that you can
have \fBmore than one\fR of these code blocks in a program, and they will get
\&\fBall\fR executed at the appropriate moment.  So you can't execute any of
these code blocks by name.
.PP
A \f(CW\*(C`BEGIN\*(C'\fR code block is executed as soon as possible, that is, the moment
it is completely defined, even before the rest of the containing file (or
string) is parsed.  You may have multiple \f(CW\*(C`BEGIN\*(C'\fR blocks within a file (or
eval'ed string); they will execute in order of definition.  Because a \f(CW\*(C`BEGIN\*(C'\fR
code block executes immediately, it can pull in definitions of subroutines
and such from other files in time to be visible to the rest of the compile
and run time.  Once a \f(CW\*(C`BEGIN\*(C'\fR has run, it is immediately undefined and any
code it used is returned to Perl's memory pool.
.PP
An \f(CW\*(C`END\*(C'\fR code block is executed as late as possible, that is, after
perl has finished running the program and just before the interpreter
is being exited, even if it is exiting as a result of a \fIdie()\fR function.
(But not if it's morphing into another program via \f(CW\*(C`exec\*(C'\fR, or
being blown out of the water by a signal\*(--you have to trap that yourself
(if you can).)  You may have multiple \f(CW\*(C`END\*(C'\fR blocks within a file\*(--they
will execute in reverse order of definition; that is: last in, first
out (\s-1LIFO\s0).  \f(CW\*(C`END\*(C'\fR blocks are not executed when you run perl with the
\&\f(CW\*(C`\-c\*(C'\fR switch, or if compilation fails.
.PP
Note that \f(CW\*(C`END\*(C'\fR code blocks are \fBnot\fR executed at the end of a string
\&\f(CW\*(C`eval()\*(C'\fR: if any \f(CW\*(C`END\*(C'\fR code blocks are created in a string \f(CW\*(C`eval()\*(C'\fR,
they will be executed just as any other \f(CW\*(C`END\*(C'\fR code block of that package
in \s-1LIFO\s0 order just before the interpreter is being exited.
.PP
Inside an \f(CW\*(C`END\*(C'\fR code block, \f(CW$?\fR contains the value that the program is
going to pass to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR to change the exit
value of the program.  Beware of changing \f(CW$?\fR by accident (e.g. by
running something via \f(CW\*(C`system\*(C'\fR).
.IX Xref "$?"
.PP
Inside of a \f(CW\*(C`END\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"END"\fR.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR code blocks are useful to catch the
transition between the compilation phase and the execution phase of
the main program.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR blocks are run just after the unit which defined them has
been compiled.  The main program file and each module it loads are
compilation units, as are string \f(CW\*(C`eval\*(C'\fRs, code compiled using the
\&\f(CW\*(C`(?{ })\*(C'\fR construct in a regex, calls to \f(CW\*(C`do FILE\*(C'\fR, \f(CW\*(C`require FILE\*(C'\fR,
and code after the \f(CW\*(C`\-e\*(C'\fR switch on the command line.
.PP
\&\f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`UNITCHECK\*(C'\fR blocks are not directly related to the phase of
the interpreter.  They can be created and executed during any phase.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR code blocks are run just after the \fBinitial\fR Perl compile phase ends
and before the run time begins, in \s-1LIFO\s0 order.  \f(CW\*(C`CHECK\*(C'\fR code blocks are used
in the Perl compiler suite to save the compiled state of the program.
.PP
Inside of a \f(CW\*(C`CHECK\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"CHECK"\fR.
.PP
\&\f(CW\*(C`INIT\*(C'\fR blocks are run just before the Perl runtime begins execution, in
\&\*(L"first in, first out\*(R" (\s-1FIFO\s0) order.
.PP
Inside of an \f(CW\*(C`INIT\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be \f(CW"INIT"\fR.
.PP
The \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks in code compiled by \f(CW\*(C`require\*(C'\fR, string \f(CW\*(C`do\*(C'\fR,
or string \f(CW\*(C`eval\*(C'\fR will not be executed if they occur after the end of the
main compilation phase; that can be a problem in mod_perl and other persistent
environments which use those functions to load code at runtime.
.PP
When you use the \fB\-n\fR and \fB\-p\fR switches to Perl, \f(CW\*(C`BEGIN\*(C'\fR and
\&\f(CW\*(C`END\*(C'\fR work just as they do in \fBawk\fR, as a degenerate case.
Both \f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`CHECK\*(C'\fR blocks are run when you use the \fB\-c\fR
switch for a compile-only syntax check, although your main code
is not.
.PP
The \fBbegincheck\fR program makes it all clear, eventually:
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  # begincheck
\&
\&  print         "10. Ordinary code runs at runtime.\en";
\&
\&  END { print   "16.   So this is the end of the tale.\en" }
\&  INIT { print  " 7. INIT blocks run FIFO just before runtime.\en" }
\&  UNITCHECK {
\&    print       " 4.   And therefore before any CHECK blocks.\en"
\&  }
\&  CHECK { print " 6.   So this is the sixth line.\en" }
\&
\&  print         "11.   It runs in order, of course.\en";
\&
\&  BEGIN { print " 1. BEGIN blocks run FIFO during compilation.\en" }
\&  END { print   "15.   Read perlmod for the rest of the story.\en" }
\&  CHECK { print " 5. CHECK blocks run LIFO after all compilation.\en" }
\&  INIT { print  " 8.   Run this again, using Perl\*(Aqs \-c switch.\en" }
\&
\&  print         "12.   This is anti\-obfuscated code.\en";
\&
\&  END { print   "14. END blocks run LIFO at quitting time.\en" }
\&  BEGIN { print " 2.   So this line comes out second.\en" }
\&  UNITCHECK {
\&   print " 3. UNITCHECK blocks run LIFO after each file is compiled.\en"
\&  }
\&  INIT { print  " 9.   You\*(Aqll see the difference right away.\en" }
\&
\&  print         "13.   It merely _looks_ like it should be confusing.\en";
\&
\&  _\|_END_\|_
.Ve
.SS "Perl Classes"
.IX Xref "class @ISA"
.IX Subsection "Perl Classes"
There is no special class syntax in Perl, but a package may act
as a class if it provides subroutines to act as methods.  Such a
package may also derive some of its methods from another class (package)
by listing the other package name(s) in its global \f(CW@ISA\fR array (which
must be a package global, not a lexical).
.PP
For more on this, see perlootut and perlobj.
.SS "Perl Modules"
.IX Xref "module"
.IX Subsection "Perl Modules"
A module is just a set of related functions in a library file, i.e.,
a Perl package with the same name as the file.  It is specifically
designed to be reusable by other modules or programs.  It may do this
by providing a mechanism for exporting some of its symbols into the
symbol table of any package using it, or it may function as a class
definition and make its semantics available implicitly through
method calls on the class and its objects, without explicitly
exporting anything.  Or it can do a little of both.
.PP
For example, to start a traditional, non-OO module called Some::Module,
create a file called \fISome/Module.pm\fR and start with this template:
.PP
.Vb 1
\&    package Some::Module;  # assumes Some/Module.pm
\&
\&    use strict;
\&    use warnings;
\&
\&    BEGIN {
\&        require Exporter;
\&
\&        # set the version for version checking
\&        our $VERSION     = 1.00;
\&
\&        # Inherit from Exporter to export functions and variables
\&        our @ISA         = qw(Exporter);
\&
\&        # Functions and variables which are exported by default
\&        our @EXPORT      = qw(func1 func2);
\&
\&        # Functions and variables which can be optionally exported
\&        our @EXPORT_OK   = qw($Var1 %Hashit func3);
\&    }
\&
\&    # exported package globals go here
\&    our $Var1    = \*(Aq\*(Aq;
\&    our %Hashit  = ();
\&
\&    # non\-exported package globals go here
\&    # (they are still accessible as $Some::Module::stuff)
\&    our @more    = ();
\&    our $stuff   = \*(Aq\*(Aq;
\&
\&    # file\-private lexicals go here, before any functions which use them
\&    my $priv_var    = \*(Aq\*(Aq;
\&    my %secret_hash = ();
\&
\&    # here\*(Aqs a file\-private function as a closure,
\&    # callable as $priv_func\->();
\&    my $priv_func = sub {
\&        ...
\&    };
\&
\&    # make all your functions, whether exported or not;
\&    # remember to put something interesting in the {} stubs
\&    sub func1      { ... }
\&    sub func2      { ... }
\&
\&    # this one isn\*(Aqt exported, but could be called directly
\&    # as Some::Module::func3()
\&    sub func3      { ... }
\&
\&    END { ... }       # module clean\-up code here (global destructor)
\&
\&    1;  # don\*(Aqt forget to return a true value from the file
.Ve
.PP
Then go on to declare and use your variables in functions without
any qualifications.  See Exporter and the perlmodlib for
details on mechanics and style issues in module creation.
.PP
Perl modules are included into your program by saying
.PP
.Vb 1
\&    use Module;
.Ve
.PP
or
.PP
.Vb 1
\&    use Module LIST;
.Ve
.PP
This is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import; }
.Ve
.PP
or
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import( LIST ); }
.Ve
.PP
As a special case
.PP
.Vb 1
\&    use Module ();
.Ve
.PP
is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; }
.Ve
.PP
All Perl module files have the extension \fI.pm\fR.  The \f(CW\*(C`use\*(C'\fR operator
assumes this so you don't have to spell out "\fIModule.pm\fR" in quotes.
This also helps to differentiate new modules from old \fI.pl\fR and
\&\fI.ph\fR files.  Module names are also capitalized unless they're
functioning as pragmas; pragmas are in effect compiler directives,
and are sometimes called \*(L"pragmatic modules\*(R" (or even \*(L"pragmata\*(R"
if you're a classicist).
.PP
The two statements:
.PP
.Vb 2
\&    require SomeModule;
\&    require "SomeModule.pm";
.Ve
.PP
differ from each other in two ways.  In the first case, any double
colons in the module name, such as \f(CW\*(C`Some::Module\*(C'\fR, are translated
into your system's directory separator, usually \*(L"/\*(R".   The second
case does not, and would have to be specified literally.  The other
difference is that seeing the first \f(CW\*(C`require\*(C'\fR clues in the compiler
that uses of indirect object notation involving \*(L"SomeModule\*(R", as
in \f(CW\*(C`$ob = purge SomeModule\*(C'\fR, are method calls, not function calls.
(Yes, this really can make a difference.)
.PP
Because the \f(CW\*(C`use\*(C'\fR statement implies a \f(CW\*(C`BEGIN\*(C'\fR block, the importing
of semantics happens as soon as the \f(CW\*(C`use\*(C'\fR statement is compiled,
before the rest of the file is compiled.  This is how it is able
to function as a pragma mechanism, and also how modules are able to
declare subroutines that are then visible as list or unary operators for
the rest of the current file.  This will not work if you use \f(CW\*(C`require\*(C'\fR
instead of \f(CW\*(C`use\*(C'\fR.  With \f(CW\*(C`require\*(C'\fR you can get into this problem:
.PP
.Vb 2
\&    require Cwd;                # make Cwd:: accessible
\&    $here = Cwd::getcwd();
\&
\&    use Cwd;                    # import names from Cwd::
\&    $here = getcwd();
\&
\&    require Cwd;                # make Cwd:: accessible
\&    $here = getcwd();           # oops! no main::getcwd()
.Ve
.PP
In general, \f(CW\*(C`use Module ()\*(C'\fR is recommended over \f(CW\*(C`require Module\*(C'\fR,
because it determines module availability at compile time, not in the
middle of your program's execution.  An exception would be if two modules
each tried to \f(CW\*(C`use\*(C'\fR each other, and each also called a function from
that other module.  In that case, it's easy to use \f(CW\*(C`require\*(C'\fR instead.
.PP
Perl packages may be nested inside other package names, so we can have
package names containing \f(CW\*(C`::\*(C'\fR.  But if we used that package name
directly as a filename it would make for unwieldy or impossible
filenames on some systems.  Therefore, if a module's name is, say,
\&\f(CW\*(C`Text::Soundex\*(C'\fR, then its definition is actually found in the library
file \fIText/Soundex.pm\fR.
.PP
Perl modules always have a \fI.pm\fR file, but there may also be
dynamically linked executables (often ending in \fI.so\fR) or autoloaded
subroutine definitions (often ending in \fI.al\fR) associated with the
module.  If so, these will be entirely transparent to the user of
the module.  It is the responsibility of the \fI.pm\fR file to load
(or arrange to autoload) any additional functionality.  For example,
although the \s-1POSIX\s0 module happens to do both dynamic loading and
autoloading, the user can say just \f(CW\*(C`use POSIX\*(C'\fR to get it all.
.SS "Making your module threadsafe"
.IX Xref "threadsafe thread safe module, threadsafe module, thread safe CLONE CLONE_SKIP thread threads ithread"
.IX Subsection "Making your module threadsafe"
Since 5.6.0, Perl has had support for a new type of threads called
interpreter threads (ithreads). These threads can be used explicitly
and implicitly.
.PP
Ithreads work by cloning the data tree so that no data is shared
between different threads. These threads can be used by using the \f(CW\*(C`threads\*(C'\fR
module or by doing \fIfork()\fR on win32 (fake \fIfork()\fR support). When a
thread is cloned all Perl data is cloned, however non-Perl data cannot
be cloned automatically.  Perl after 5.7.2 has support for the \f(CW\*(C`CLONE\*(C'\fR
special subroutine.  In \f(CW\*(C`CLONE\*(C'\fR you can do whatever
you need to do,
like for example handle the cloning of non-Perl data, if necessary.
\&\f(CW\*(C`CLONE\*(C'\fR will be called once as a class method for every package that has it
defined (or inherits it).  It will be called in the context of the new thread,
so all modifications are made in the new area.  Currently \s-1CLONE\s0 is called with
no parameters other than the invocant package name, but code should not assume
that this will remain unchanged, as it is likely that in future extra parameters
will be passed in to give more information about the state of cloning.
.PP
If you want to \s-1CLONE\s0 all objects you will need to keep track of them per
package. This is simply done using a hash and \fIScalar::Util::weaken()\fR.
.PP
Perl after 5.8.7 has support for the \f(CW\*(C`CLONE_SKIP\*(C'\fR special subroutine.
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is called once per package; however, it is
called just before cloning starts, and in the context of the parent
thread. If it returns a true value, then no objects of that class will
be cloned; or rather, they will be copied as unblessed, undef values.
For example: if in the parent there are two references to a single blessed
hash, then in the child there will be two references to a single undefined
scalar value instead.
This provides a simple mechanism for making a module threadsafe; just add
\&\f(CW\*(C`sub CLONE_SKIP { 1 }\*(C'\fR at the top of the class, and \f(CW\*(C`DESTROY()\*(C'\fR will
now only be called once per object. Of course, if the child thread needs
to make use of the objects, then a more sophisticated approach is
needed.
.PP
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is currently called with no parameters other
than the invocant package name, although that may change. Similarly, to
allow for future expansion, the return value should be a single \f(CW0\fR or
\&\f(CW1\fR value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See perlmodlib for general style issues related to building Perl
modules and classes, as well as descriptions of the standard library
and \s-1CPAN\s0, Exporter for how Perl's standard import/export mechanism
works, perlootut and perlobj for in-depth information on
creating classes, perlobj for a hard-core reference document on
objects, perlsub for an explanation of functions and scoping,
and perlxstut and perlguts for more information on writing
extension modules.
                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmod5.18.1                                0100644 0001750 0001750 00000076756 12566207442 022743  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMOD 1"
.TH PERLMOD 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmod \- Perl modules (packages and symbol tables)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Packages"
.IX Xref "package namespace variable, global global variable global"
.IX Subsection "Packages"
Perl provides a mechanism for alternative namespaces to protect
packages from stomping on each other's variables.  In fact, there's
really no such thing as a global variable in Perl.  The package
statement declares the compilation unit as being in the given
namespace.  The scope of the package declaration is from the
declaration itself through the end of the enclosing block, \f(CW\*(C`eval\*(C'\fR,
or file, whichever comes first (the same scope as the \fImy()\fR and
\&\fIlocal()\fR operators).  Unqualified dynamic identifiers will be in
this namespace, except for those few identifiers that if unqualified,
default to the main package instead of the current one as described
below.  A package statement affects only dynamic variables\*(--including
those you've used \fIlocal()\fR on\*(--but \fInot\fR lexical variables created
with \fImy()\fR.  Typically it would be the first declaration in a file
included by the \f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  You can
switch into a package in more than one place; it merely influences
which symbol table is used by the compiler for the rest of that
block.  You can refer to variables and filehandles in other packages
by prefixing the identifier with the package name and a double
colon: \f(CW$Package::Variable\fR.  If the package name is null, the
\&\f(CW\*(C`main\*(C'\fR package is assumed.  That is, \f(CW$::sail\fR is equivalent to
\&\f(CW$main::sail\fR.
.PP
The old package delimiter was a single quote, but double colon is now the
preferred delimiter, in part because it's more readable to humans, and
in part because it's more readable to \fBemacs\fR macros.  It also makes \*(C+
programmers feel like they know what's going on\*(--as opposed to using the
single quote as separator, which was there to make Ada programmers feel
like they knew what was going on.  Because the old-fashioned syntax is still
supported for backwards compatibility, if you try to use a string like
\&\f(CW"This is $owner\*(Aqs house"\fR, you'll be accessing \f(CW$owner::s\fR; that is,
the \f(CW$s\fR variable in package \f(CW\*(C`owner\*(C'\fR, which is probably not what you meant.
Use braces to disambiguate, as in \f(CW"This is ${owner}\*(Aqs house"\fR.
.IX Xref ":: '"
.PP
Packages may themselves contain package separators, as in
\&\f(CW$OUTER::INNER::var\fR.  This implies nothing about the order of
name lookups, however.  There are no relative packages: all symbols
are either local to the current package, or must be fully qualified
from the outer package name down.  For instance, there is nowhere
within package \f(CW\*(C`OUTER\*(C'\fR that \f(CW$INNER::var\fR refers to
\&\f(CW$OUTER::INNER::var\fR.  \f(CW\*(C`INNER\*(C'\fR refers to a totally
separate global package.
.PP
Only identifiers starting with letters (or underscore) are stored
in a package's symbol table.  All other symbols are kept in package
\&\f(CW\*(C`main\*(C'\fR, including all punctuation variables, like \f(CW$_\fR.  In addition,
when unqualified, the identifiers \s-1STDIN, STDOUT, STDERR, ARGV,
ARGVOUT, ENV, INC,\s0 and \s-1SIG\s0 are forced to be in package \f(CW\*(C`main\*(C'\fR,
even when used for other purposes than their built-in ones.  If you
have a package called \f(CW\*(C`m\*(C'\fR, \f(CW\*(C`s\*(C'\fR, or \f(CW\*(C`y\*(C'\fR, then you can't use the
qualified form of an identifier because it would be instead interpreted
as a pattern match, a substitution, or a transliteration.
.IX Xref "variable, punctuation"
.PP
Variables beginning with underscore used to be forced into package
main, but we decided it was more useful for package writers to be able
to use leading underscore to indicate private variables and method names.
However, variables and functions named with a single \f(CW\*(C`_\*(C'\fR, such as
\&\f(CW$_\fR and \f(CW\*(C`sub _\*(C'\fR, are still forced into the package \f(CW\*(C`main\*(C'\fR.  See also
\&\*(L"The Syntax of Variable Names\*(R" in perlvar.
.PP
\&\f(CW\*(C`eval\*(C'\fRed strings are compiled in the package in which the \fIeval()\fR was
compiled.  (Assignments to \f(CW$SIG{}\fR, however, assume the signal
handler specified is in the \f(CW\*(C`main\*(C'\fR package.  Qualify the signal handler
name if you wish to have a signal handler in a package.)  For an
example, examine \fIperldb.pl\fR in the Perl library.  It initially switches
to the \f(CW\*(C`DB\*(C'\fR package so that the debugger doesn't interfere with variables
in the program you are trying to debug.  At various points, however, it
temporarily switches back to the \f(CW\*(C`main\*(C'\fR package to evaluate various
expressions in the context of the \f(CW\*(C`main\*(C'\fR package (or wherever you came
from).  See perldebug.
.PP
The special symbol \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR contains the current package, but cannot
(easily) be used to construct variable names.
.PP
See perlsub for other scoping issues related to \fImy()\fR and \fIlocal()\fR,
and perlref regarding closures.
.SS "Symbol Tables"
.IX Xref "symbol table stash %:: %main:: typeglob glob alias"
.IX Subsection "Symbol Tables"
The symbol table for a package happens to be stored in the hash of that
name with two colons appended.  The main symbol table's name is thus
\&\f(CW%main::\fR, or \f(CW%::\fR for short.  Likewise the symbol table for the nested
package mentioned earlier is named \f(CW%OUTER::INNER::\fR.
.PP
The value in each entry of the hash is what you are referring to when you
use the \f(CW*name\fR typeglob notation.
.PP
.Vb 1
\&    local *main::foo    = *main::bar;
.Ve
.PP
You can use this to print out all the variables in a package, for
instance.  The standard but antiquated \fIdumpvar.pl\fR library and
the \s-1CPAN\s0 module Devel::Symdump make use of this.
.PP
The results of creating new symbol table entries directly or modifying any
entries that are not already typeglobs are undefined and subject to change
between releases of perl.
.PP
Assignment to a typeglob performs an aliasing operation, i.e.,
.PP
.Vb 1
\&    *dick = *richard;
.Ve
.PP
causes variables, subroutines, formats, and file and directory handles
accessible via the identifier \f(CW\*(C`richard\*(C'\fR also to be accessible via the
identifier \f(CW\*(C`dick\*(C'\fR.  If you want to alias only a particular variable or
subroutine, assign a reference instead:
.PP
.Vb 1
\&    *dick = \e$richard;
.Ve
.PP
Which makes \f(CW$richard\fR and \f(CW$dick\fR the same variable, but leaves
\&\f(CW@richard\fR and \f(CW@dick\fR as separate arrays.  Tricky, eh?
.PP
There is one subtle difference between the following statements:
.PP
.Vb 2
\&    *foo = *bar;
\&    *foo = \e$bar;
.Ve
.PP
\&\f(CW\*(C`*foo = *bar\*(C'\fR makes the typeglobs themselves synonymous while
\&\f(CW\*(C`*foo = \e$bar\*(C'\fR makes the \s-1SCALAR\s0 portions of two distinct typeglobs
refer to the same scalar value. This means that the following code:
.PP
.Vb 2
\&    $bar = 1;
\&    *foo = \e$bar;       # Make $foo an alias for $bar
\&
\&    {
\&        local $bar = 2; # Restrict changes to block
\&        print $foo;     # Prints \*(Aq1\*(Aq!
\&    }
.Ve
.PP
Would print '1', because \f(CW$foo\fR holds a reference to the \fIoriginal\fR
\&\f(CW$bar\fR. The one that was stuffed away by \f(CW\*(C`local()\*(C'\fR and which will be
restored when the block ends. Because variables are accessed through the
typeglob, you can use \f(CW\*(C`*foo = *bar\*(C'\fR to create an alias which can be
localized. (But be aware that this means you can't have a separate
\&\f(CW@foo\fR and \f(CW@bar\fR, etc.)
.PP
What makes all of this important is that the Exporter module uses glob
aliasing as the import/export mechanism. Whether or not you can properly
localize a variable that has been exported from a module depends on how
it was exported:
.PP
.Vb 2
\&    @EXPORT = qw($FOO); # Usual form, can\*(Aqt be localized
\&    @EXPORT = qw(*FOO); # Can be localized
.Ve
.PP
You can work around the first case by using the fully qualified name
(\f(CW$Package::FOO\fR) where you need a local value, or by overriding it
by saying \f(CW\*(C`*FOO = *Package::FOO\*(C'\fR in your script.
.PP
The \f(CW\*(C`*x = \e$y\*(C'\fR mechanism may be used to pass and return cheap references
into or from subroutines if you don't want to copy the whole
thing.  It only works when assigning to dynamic variables, not
lexicals.
.PP
.Vb 9
\&    %some_hash = ();                    # can\*(Aqt be my()
\&    *some_hash = fn( \e%another_hash );
\&    sub fn {
\&        local *hashsym = shift;
\&        # now use %hashsym normally, and you
\&        # will affect the caller\*(Aqs %another_hash
\&        my %nhash = (); # do what you want
\&        return \e%nhash;
\&    }
.Ve
.PP
On return, the reference will overwrite the hash slot in the
symbol table specified by the *some_hash typeglob.  This
is a somewhat tricky way of passing around references cheaply
when you don't want to have to remember to dereference variables
explicitly.
.PP
Another use of symbol tables is for making \*(L"constant\*(R" scalars.
.IX Xref "constant scalar, constant"
.PP
.Vb 1
\&    *PI = \e3.14159265358979;
.Ve
.PP
Now you cannot alter \f(CW$PI\fR, which is probably a good thing all in all.
This isn't the same as a constant subroutine, which is subject to
optimization at compile-time.  A constant subroutine is one prototyped
to take no arguments and to return a constant expression.  See
perlsub for details on these.  The \f(CW\*(C`use constant\*(C'\fR pragma is a
convenient shorthand for these.
.PP
You can say \f(CW*foo{PACKAGE}\fR and \f(CW*foo{NAME}\fR to find out what name and
package the *foo symbol table entry comes from.  This may be useful
in a subroutine that gets passed typeglobs as arguments:
.PP
.Vb 6
\&    sub identify_typeglob {
\&        my $glob = shift;
\&        print \*(AqYou gave me \*(Aq, *{$glob}{PACKAGE}, \*(Aq::\*(Aq, *{$glob}{NAME}, "\en";
\&    }
\&    identify_typeglob *foo;
\&    identify_typeglob *bar::baz;
.Ve
.PP
This prints
.PP
.Vb 2
\&    You gave me main::foo
\&    You gave me bar::baz
.Ve
.PP
The \f(CW*foo{THING}\fR notation can also be used to obtain references to the
individual elements of *foo.  See perlref.
.PP
Subroutine definitions (and declarations, for that matter) need
not necessarily be situated in the package whose symbol table they
occupy.  You can define a subroutine outside its package by
explicitly qualifying the name of the subroutine:
.PP
.Vb 2
\&    package main;
\&    sub Some_package::foo { ... }   # &foo defined in Some_package
.Ve
.PP
This is just a shorthand for a typeglob assignment at compile time:
.PP
.Vb 1
\&    BEGIN { *Some_package::foo = sub { ... } }
.Ve
.PP
and is \fInot\fR the same as writing:
.PP
.Vb 4
\&    {
\&        package Some_package;
\&        sub foo { ... }
\&    }
.Ve
.PP
In the first two versions, the body of the subroutine is
lexically in the main package, \fInot\fR in Some_package. So
something like this:
.PP
.Vb 1
\&    package main;
\&
\&    $Some_package::name = "fred";
\&    $main::name = "barney";
\&
\&    sub Some_package::foo {
\&        print "in ", _\|_PACKAGE_\|_, ": \e$name is \*(Aq$name\*(Aq\en";
\&    }
\&
\&    Some_package::foo();
.Ve
.PP
prints:
.PP
.Vb 1
\&    in main: $name is \*(Aqbarney\*(Aq
.Ve
.PP
rather than:
.PP
.Vb 1
\&    in Some_package: $name is \*(Aqfred\*(Aq
.Ve
.PP
This also has implications for the use of the \s-1SUPER::\s0 qualifier
(see perlobj).
.SS "\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 and \s-1END \s0"
.IX Xref "BEGIN UNITCHECK CHECK INIT END"
.IX Subsection "BEGIN, UNITCHECK, CHECK, INIT and END "
Five specially named code blocks are executed at the beginning and at
the end of a running Perl program.  These are the \f(CW\*(C`BEGIN\*(C'\fR,
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, and \f(CW\*(C`END\*(C'\fR blocks.
.PP
These code blocks can be prefixed with \f(CW\*(C`sub\*(C'\fR to give the appearance of a
subroutine (although this is not considered good style).  One should note
that these code blocks don't really exist as named subroutines (despite
their appearance). The thing that gives this away is the fact that you can
have \fBmore than one\fR of these code blocks in a program, and they will get
\&\fBall\fR executed at the appropriate moment.  So you can't execute any of
these code blocks by name.
.PP
A \f(CW\*(C`BEGIN\*(C'\fR code block is executed as soon as possible, that is, the moment
it is completely defined, even before the rest of the containing file (or
string) is parsed.  You may have multiple \f(CW\*(C`BEGIN\*(C'\fR blocks within a file (or
eval'ed string); they will execute in order of definition.  Because a \f(CW\*(C`BEGIN\*(C'\fR
code block executes immediately, it can pull in definitions of subroutines
and such from other files in time to be visible to the rest of the compile
and run time.  Once a \f(CW\*(C`BEGIN\*(C'\fR has run, it is immediately undefined and any
code it used is returned to Perl's memory pool.
.PP
An \f(CW\*(C`END\*(C'\fR code block is executed as late as possible, that is, after
perl has finished running the program and just before the interpreter
is being exited, even if it is exiting as a result of a \fIdie()\fR function.
(But not if it's morphing into another program via \f(CW\*(C`exec\*(C'\fR, or
being blown out of the water by a signal\*(--you have to trap that yourself
(if you can).)  You may have multiple \f(CW\*(C`END\*(C'\fR blocks within a file\*(--they
will execute in reverse order of definition; that is: last in, first
out (\s-1LIFO\s0).  \f(CW\*(C`END\*(C'\fR blocks are not executed when you run perl with the
\&\f(CW\*(C`\-c\*(C'\fR switch, or if compilation fails.
.PP
Note that \f(CW\*(C`END\*(C'\fR code blocks are \fBnot\fR executed at the end of a string
\&\f(CW\*(C`eval()\*(C'\fR: if any \f(CW\*(C`END\*(C'\fR code blocks are created in a string \f(CW\*(C`eval()\*(C'\fR,
they will be executed just as any other \f(CW\*(C`END\*(C'\fR code block of that package
in \s-1LIFO\s0 order just before the interpreter is being exited.
.PP
Inside an \f(CW\*(C`END\*(C'\fR code block, \f(CW$?\fR contains the value that the program is
going to pass to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR to change the exit
value of the program.  Beware of changing \f(CW$?\fR by accident (e.g. by
running something via \f(CW\*(C`system\*(C'\fR).
.IX Xref "$?"
.PP
Inside of a \f(CW\*(C`END\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"END"\fR.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR code blocks are useful to catch the
transition between the compilation phase and the execution phase of
the main program.
.PP
\&\f(CW\*(C`UNITCHECK\*(C'\fR blocks are run just after the unit which defined them has
been compiled.  The main program file and each module it loads are
compilation units, as are string \f(CW\*(C`eval\*(C'\fRs, run-time code compiled using the
\&\f(CW\*(C`(?{ })\*(C'\fR construct in a regex, calls to \f(CW\*(C`do FILE\*(C'\fR, \f(CW\*(C`require FILE\*(C'\fR,
and code after the \f(CW\*(C`\-e\*(C'\fR switch on the command line.
.PP
\&\f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`UNITCHECK\*(C'\fR blocks are not directly related to the phase of
the interpreter.  They can be created and executed during any phase.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR code blocks are run just after the \fBinitial\fR Perl compile phase ends
and before the run time begins, in \s-1LIFO\s0 order.  \f(CW\*(C`CHECK\*(C'\fR code blocks are used
in the Perl compiler suite to save the compiled state of the program.
.PP
Inside of a \f(CW\*(C`CHECK\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be
\&\f(CW"CHECK"\fR.
.PP
\&\f(CW\*(C`INIT\*(C'\fR blocks are run just before the Perl runtime begins execution, in
\&\*(L"first in, first out\*(R" (\s-1FIFO\s0) order.
.PP
Inside of an \f(CW\*(C`INIT\*(C'\fR block, the value of \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be \f(CW"INIT"\fR.
.PP
The \f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks in code compiled by \f(CW\*(C`require\*(C'\fR, string \f(CW\*(C`do\*(C'\fR,
or string \f(CW\*(C`eval\*(C'\fR will not be executed if they occur after the end of the
main compilation phase; that can be a problem in mod_perl and other persistent
environments which use those functions to load code at runtime.
.PP
When you use the \fB\-n\fR and \fB\-p\fR switches to Perl, \f(CW\*(C`BEGIN\*(C'\fR and
\&\f(CW\*(C`END\*(C'\fR work just as they do in \fBawk\fR, as a degenerate case.
Both \f(CW\*(C`BEGIN\*(C'\fR and \f(CW\*(C`CHECK\*(C'\fR blocks are run when you use the \fB\-c\fR
switch for a compile-only syntax check, although your main code
is not.
.PP
The \fBbegincheck\fR program makes it all clear, eventually:
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  # begincheck
\&
\&  print         "10. Ordinary code runs at runtime.\en";
\&
\&  END { print   "16.   So this is the end of the tale.\en" }
\&  INIT { print  " 7. INIT blocks run FIFO just before runtime.\en" }
\&  UNITCHECK {
\&    print       " 4.   And therefore before any CHECK blocks.\en"
\&  }
\&  CHECK { print " 6.   So this is the sixth line.\en" }
\&
\&  print         "11.   It runs in order, of course.\en";
\&
\&  BEGIN { print " 1. BEGIN blocks run FIFO during compilation.\en" }
\&  END { print   "15.   Read perlmod for the rest of the story.\en" }
\&  CHECK { print " 5. CHECK blocks run LIFO after all compilation.\en" }
\&  INIT { print  " 8.   Run this again, using Perl\*(Aqs \-c switch.\en" }
\&
\&  print         "12.   This is anti\-obfuscated code.\en";
\&
\&  END { print   "14. END blocks run LIFO at quitting time.\en" }
\&  BEGIN { print " 2.   So this line comes out second.\en" }
\&  UNITCHECK {
\&   print " 3. UNITCHECK blocks run LIFO after each file is compiled.\en"
\&  }
\&  INIT { print  " 9.   You\*(Aqll see the difference right away.\en" }
\&
\&  print         "13.   It merely _looks_ like it should be confusing.\en";
\&
\&  _\|_END_\|_
.Ve
.SS "Perl Classes"
.IX Xref "class @ISA"
.IX Subsection "Perl Classes"
There is no special class syntax in Perl, but a package may act
as a class if it provides subroutines to act as methods.  Such a
package may also derive some of its methods from another class (package)
by listing the other package name(s) in its global \f(CW@ISA\fR array (which
must be a package global, not a lexical).
.PP
For more on this, see perlootut and perlobj.
.SS "Perl Modules"
.IX Xref "module"
.IX Subsection "Perl Modules"
A module is just a set of related functions in a library file, i.e.,
a Perl package with the same name as the file.  It is specifically
designed to be reusable by other modules or programs.  It may do this
by providing a mechanism for exporting some of its symbols into the
symbol table of any package using it, or it may function as a class
definition and make its semantics available implicitly through
method calls on the class and its objects, without explicitly
exporting anything.  Or it can do a little of both.
.PP
For example, to start a traditional, non-OO module called Some::Module,
create a file called \fISome/Module.pm\fR and start with this template:
.PP
.Vb 1
\&    package Some::Module;  # assumes Some/Module.pm
\&
\&    use strict;
\&    use warnings;
\&
\&    BEGIN {
\&        require Exporter;
\&
\&        # set the version for version checking
\&        our $VERSION     = 1.00;
\&
\&        # Inherit from Exporter to export functions and variables
\&        our @ISA         = qw(Exporter);
\&
\&        # Functions and variables which are exported by default
\&        our @EXPORT      = qw(func1 func2);
\&
\&        # Functions and variables which can be optionally exported
\&        our @EXPORT_OK   = qw($Var1 %Hashit func3);
\&    }
\&
\&    # exported package globals go here
\&    our $Var1    = \*(Aq\*(Aq;
\&    our %Hashit  = ();
\&
\&    # non\-exported package globals go here
\&    # (they are still accessible as $Some::Module::stuff)
\&    our @more    = ();
\&    our $stuff   = \*(Aq\*(Aq;
\&
\&    # file\-private lexicals go here, before any functions which use them
\&    my $priv_var    = \*(Aq\*(Aq;
\&    my %secret_hash = ();
\&
\&    # here\*(Aqs a file\-private function as a closure,
\&    # callable as $priv_func\->();
\&    my $priv_func = sub {
\&        ...
\&    };
\&
\&    # make all your functions, whether exported or not;
\&    # remember to put something interesting in the {} stubs
\&    sub func1      { ... }
\&    sub func2      { ... }
\&
\&    # this one isn\*(Aqt exported, but could be called directly
\&    # as Some::Module::func3()
\&    sub func3      { ... }
\&
\&    END { ... }       # module clean\-up code here (global destructor)
\&
\&    1;  # don\*(Aqt forget to return a true value from the file
.Ve
.PP
Then go on to declare and use your variables in functions without
any qualifications.  See Exporter and the perlmodlib for
details on mechanics and style issues in module creation.
.PP
Perl modules are included into your program by saying
.PP
.Vb 1
\&    use Module;
.Ve
.PP
or
.PP
.Vb 1
\&    use Module LIST;
.Ve
.PP
This is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import; }
.Ve
.PP
or
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; \*(AqModule\*(Aq\->import( LIST ); }
.Ve
.PP
As a special case
.PP
.Vb 1
\&    use Module ();
.Ve
.PP
is exactly equivalent to
.PP
.Vb 1
\&    BEGIN { require \*(AqModule.pm\*(Aq; }
.Ve
.PP
All Perl module files have the extension \fI.pm\fR.  The \f(CW\*(C`use\*(C'\fR operator
assumes this so you don't have to spell out "\fIModule.pm\fR" in quotes.
This also helps to differentiate new modules from old \fI.pl\fR and
\&\fI.ph\fR files.  Module names are also capitalized unless they're
functioning as pragmas; pragmas are in effect compiler directives,
and are sometimes called \*(L"pragmatic modules\*(R" (or even \*(L"pragmata\*(R"
if you're a classicist).
.PP
The two statements:
.PP
.Vb 2
\&    require SomeModule;
\&    require "SomeModule.pm";
.Ve
.PP
differ from each other in two ways.  In the first case, any double
colons in the module name, such as \f(CW\*(C`Some::Module\*(C'\fR, are translated
into your system's directory separator, usually \*(L"/\*(R".   The second
case does not, and would have to be specified literally.  The other
difference is that seeing the first \f(CW\*(C`require\*(C'\fR clues in the compiler
that uses of indirect object notation involving \*(L"SomeModule\*(R", as
in \f(CW\*(C`$ob = purge SomeModule\*(C'\fR, are method calls, not function calls.
(Yes, this really can make a difference.)
.PP
Because the \f(CW\*(C`use\*(C'\fR statement implies a \f(CW\*(C`BEGIN\*(C'\fR block, the importing
of semantics happens as soon as the \f(CW\*(C`use\*(C'\fR statement is compiled,
before the rest of the file is compiled.  This is how it is able
to function as a pragma mechanism, and also how modules are able to
declare subroutines that are then visible as list or unary operators for
the rest of the current file.  This will not work if you use \f(CW\*(C`require\*(C'\fR
instead of \f(CW\*(C`use\*(C'\fR.  With \f(CW\*(C`require\*(C'\fR you can get into this problem:
.PP
.Vb 2
\&    require Cwd;                # make Cwd:: accessible
\&    $here = Cwd::getcwd();
\&
\&    use Cwd;                    # import names from Cwd::
\&    $here = getcwd();
\&
\&    require Cwd;                # make Cwd:: accessible
\&    $here = getcwd();           # oops! no main::getcwd()
.Ve
.PP
In general, \f(CW\*(C`use Module ()\*(C'\fR is recommended over \f(CW\*(C`require Module\*(C'\fR,
because it determines module availability at compile time, not in the
middle of your program's execution.  An exception would be if two modules
each tried to \f(CW\*(C`use\*(C'\fR each other, and each also called a function from
that other module.  In that case, it's easy to use \f(CW\*(C`require\*(C'\fR instead.
.PP
Perl packages may be nested inside other package names, so we can have
package names containing \f(CW\*(C`::\*(C'\fR.  But if we used that package name
directly as a filename it would make for unwieldy or impossible
filenames on some systems.  Therefore, if a module's name is, say,
\&\f(CW\*(C`Text::Soundex\*(C'\fR, then its definition is actually found in the library
file \fIText/Soundex.pm\fR.
.PP
Perl modules always have a \fI.pm\fR file, but there may also be
dynamically linked executables (often ending in \fI.so\fR) or autoloaded
subroutine definitions (often ending in \fI.al\fR) associated with the
module.  If so, these will be entirely transparent to the user of
the module.  It is the responsibility of the \fI.pm\fR file to load
(or arrange to autoload) any additional functionality.  For example,
although the \s-1POSIX\s0 module happens to do both dynamic loading and
autoloading, the user can say just \f(CW\*(C`use POSIX\*(C'\fR to get it all.
.SS "Making your module threadsafe"
.IX Xref "threadsafe thread safe module, threadsafe module, thread safe CLONE CLONE_SKIP thread threads ithread"
.IX Subsection "Making your module threadsafe"
Perl supports a type of threads called interpreter threads (ithreads).
These threads can be used explicitly and implicitly.
.PP
Ithreads work by cloning the data tree so that no data is shared
between different threads. These threads can be used by using the \f(CW\*(C`threads\*(C'\fR
module or by doing \fIfork()\fR on win32 (fake \fIfork()\fR support). When a
thread is cloned all Perl data is cloned, however non-Perl data cannot
be cloned automatically.  Perl after 5.8.0 has support for the \f(CW\*(C`CLONE\*(C'\fR
special subroutine.  In \f(CW\*(C`CLONE\*(C'\fR you can do whatever
you need to do,
like for example handle the cloning of non-Perl data, if necessary.
\&\f(CW\*(C`CLONE\*(C'\fR will be called once as a class method for every package that has it
defined (or inherits it).  It will be called in the context of the new thread,
so all modifications are made in the new area.  Currently \s-1CLONE\s0 is called with
no parameters other than the invocant package name, but code should not assume
that this will remain unchanged, as it is likely that in future extra parameters
will be passed in to give more information about the state of cloning.
.PP
If you want to \s-1CLONE\s0 all objects you will need to keep track of them per
package. This is simply done using a hash and \fIScalar::Util::weaken()\fR.
.PP
Perl after 5.8.7 has support for the \f(CW\*(C`CLONE_SKIP\*(C'\fR special subroutine.
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is called once per package; however, it is
called just before cloning starts, and in the context of the parent
thread. If it returns a true value, then no objects of that class will
be cloned; or rather, they will be copied as unblessed, undef values.
For example: if in the parent there are two references to a single blessed
hash, then in the child there will be two references to a single undefined
scalar value instead.
This provides a simple mechanism for making a module threadsafe; just add
\&\f(CW\*(C`sub CLONE_SKIP { 1 }\*(C'\fR at the top of the class, and \f(CW\*(C`DESTROY()\*(C'\fR will
now only be called once per object. Of course, if the child thread needs
to make use of the objects, then a more sophisticated approach is
needed.
.PP
Like \f(CW\*(C`CLONE\*(C'\fR, \f(CW\*(C`CLONE_SKIP\*(C'\fR is currently called with no parameters other
than the invocant package name, although that may change. Similarly, to
allow for future expansion, the return value should be a single \f(CW0\fR or
\&\f(CW1\fR value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See perlmodlib for general style issues related to building Perl
modules and classes, as well as descriptions of the standard library
and \s-1CPAN, \s0Exporter for how Perl's standard import/export mechanism
works, perlootut and perlobj for in-depth information on
creating classes, perlobj for a hard-core reference document on
objects, perlsub for an explanation of functions and scoping,
and perlxstut and perlguts for more information on writing
extension modules.
                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodinstall.1                             0100644 0001750 0001750 00000044475 12566207442 024007  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODINSTALL 1"
.TH PERLMODINSTALL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodinstall \- Installing CPAN Modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can think of a module as the fundamental unit of reusable Perl
code; see perlmod for details.  Whenever anyone creates a chunk of
Perl code that they think will be useful to the world, they register
as a Perl developer at http://www.cpan.org/modules/04pause.html
so that they can then upload their code to the \s-1CPAN. \s0 The \s-1CPAN\s0 is the
Comprehensive Perl Archive Network and can be accessed at
http://www.cpan.org/ , and searched at http://search.cpan.org/ .
.PP
This documentation is for people who want to download \s-1CPAN\s0 modules
and install them on their own computer.
.SS "\s-1PREAMBLE\s0"
.IX Subsection "PREAMBLE"
First, are you sure that the module isn't already on your system?  Try
\&\f(CW\*(C`perl \-MFoo \-e 1\*(C'\fR.  (Replace \*(L"Foo\*(R" with the name of the module; for
instance, \f(CW\*(C`perl \-MCGI::Carp \-e 1\*(C'\fR.)
.PP
If you don't see an error message, you have the module.  (If you do
see an error message, it's still possible you have the module, but
that it's not in your path, which you can display with \f(CW\*(C`perl \-e
"print qq(@INC)"\*(C'\fR.)  For the remainder of this document, we'll assume
that you really honestly truly lack an installed module, but have
found it on the \s-1CPAN.\s0
.PP
So now you have a file ending in .tar.gz (or, less often, .zip).  You
know there's a tasty module inside.  There are four steps you must now
take:
.IP "\fB\s-1DECOMPRESS\s0\fR the file" 5
.IX Item "DECOMPRESS the file"
.PD 0
.IP "\fB\s-1UNPACK\s0\fR the file into a directory" 5
.IX Item "UNPACK the file into a directory"
.IP "\fB\s-1BUILD\s0\fR the module (sometimes unnecessary)" 5
.IX Item "BUILD the module (sometimes unnecessary)"
.IP "\fB\s-1INSTALL\s0\fR the module." 5
.IX Item "INSTALL the module."
.PD
.PP
Here's how to perform each step for each operating system.  This is
<not> a substitute for reading the \s-1README\s0 and \s-1INSTALL\s0 files that
might have come with your module!
.PP
Also note that these instructions are tailored for installing the
module into your system's repository of Perl modules, but you can
install modules into any directory you wish.  For instance, where I
say \f(CW\*(C`perl Makefile.PL\*(C'\fR, you can substitute \f(CW\*(C`perl Makefile.PL
PREFIX=/my/perl_directory\*(C'\fR to install the modules into
\&\fI/my/perl_directory\fR.  Then you can use the modules from your Perl
programs with \f(CW\*(C`use lib "/my/perl_directory/lib/site_perl";\*(C'\fR or
sometimes just \f(CW\*(C`use "/my/perl_directory";\*(C'\fR.  If you're on a system
that requires superuser/root access to install modules into the
directories you see when you type \f(CW\*(C`perl \-e "print qq(@INC)"\*(C'\fR, you'll
want to install them into a local directory (such as your home
directory) and use this approach.
.IP "\(bu" 4
\&\fBIf you're on a Unix or Unix-like system,\fR
.Sp
You can use Andreas Koenig's \s-1CPAN\s0 module
( http://www.cpan.org/modules/by\-module/CPAN )
to automate the following steps, from \s-1DECOMPRESS\s0 through \s-1INSTALL.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from ftp://prep.ai.mit.edu/pub/gnu/
.Sp
Or, you can combine this step with the next to save disk space:
.Sp
.Vb 1
\&     gzip \-dc yourmodule.tar.gz | tar \-xof \-
.Ve
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with \f(CW\*(C`tar \-xof yourmodule.tar\*(C'\fR
.Sp
C. \s-1BUILD\s0
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
or
.Sp
.Vb 1
\&      perl Makefile.PL PREFIX=/my/perl_directory
.Ve
.Sp
to install it locally.  (Remember that if you do this, you'll have to
put \f(CW\*(C`use lib "/my/perl_directory";\*(C'\fR near the top of the program that
is to use this module.
.Sp
D. \s-1INSTALL\s0
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      make install
.Ve
.Sp
Make sure you have the appropriate permissions to install the module
in your Perl 5 library directory.  Often, you'll need to be root.
.Sp
That's all you need to do on Unix systems with dynamic linking.
Most Unix systems have dynamic linking. If yours doesn't, or if for
another reason you have a statically-linked perl, \fBand\fR the
module requires compilation, you'll need to build a new Perl binary
that includes the module.  Again, you'll probably need to be root.
.IP "\(bu" 4
\&\fBIf you're running ActivePerl (Win95/98/2K/NT/XP, Linux, Solaris),\fR
.Sp
First, type \f(CW\*(C`ppm\*(C'\fR from a shell and see whether ActiveState's \s-1PPM\s0
repository has your module.  If so, you can install it with \f(CW\*(C`ppm\*(C'\fR and
you won't have to bother with any of the other steps here.  You might
be able to use the \s-1CPAN\s0 instructions from the \*(L"Unix or Linux\*(R" section
above as well; give it a try.  Otherwise, you'll have to follow the
steps below.
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
You can use the shareware Winzip ( http://www.winzip.com ) to
decompress and unpack modules.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
If you used WinZip, this was already done for you.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
You'll need the \f(CW\*(C`nmake\*(C'\fR utility, available at
http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe
or dmake, available on \s-1CPAN.\s0
http://search.cpan.org/dist/dmake/
.Sp
Does the module require compilation (i.e. does it have files that end
in .xs, .c, .h, .y, .cc, .cxx, or .C)?  If it does, life is now
officially tough for you, because you have to compile the module
yourself (no easy feat on Windows).  You'll need a compiler such as
Visual \*(C+.  Alternatively, you can download a pre-built \s-1PPM\s0 package
from ActiveState.
http://aspn.activestate.com/ASPN/Downloads/ActivePerl/PPM/
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      nmake test
\&
\&
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      nmake install
.Ve
.IP "\(bu" 4
\&\fBIf you're using a Macintosh with \*(L"Classic\*(R" MacOS and MacPerl,\fR
.Sp
A. \s-1DECOMPRESS\s0
.Sp
First, make sure you have the latest \fBcpan-mac\fR distribution (
http://www.cpan.org/authors/id/CNANDOR/ ), which has utilities for
doing all of the steps.  Read the cpan-mac directions carefully and
install it.  If you choose not to use cpan-mac for some reason, there
are alternatives listed here.
.Sp
After installing cpan-mac, drop the module archive on the
\&\fBuntarzipme\fR droplet, which will decompress and unpack for you.
.Sp
\&\fBOr\fR, you can either use the shareware \fBStuffIt Expander\fR program
( http://my.smithmicro.com/mac/stuffit/ )
or the freeware \fBMacGzip\fR program (
http://persephone.cps.unizar.es/general/gente/spd/gzip/gzip.html ).
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using untarzipme or StuffIt, the archive should be extracted
now.  \fBOr\fR, you can use the freeware \fBsuntar\fR or \fITar\fR (
http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/ ).
.Sp
C. \s-1BUILD\s0
.Sp
Check the contents of the distribution.
Read the module's documentation, looking for
reasons why you might have trouble using it with MacPerl.  Look for
\&\fI.xs\fR and \fI.c\fR files, which normally denote that the distribution
must be compiled, and you cannot install it \*(L"out of the box.\*(R"
(See \*(L"\s-1PORTABILITY\*(R"\s0.)
.Sp
D. \s-1INSTALL\s0
.Sp
If you are using cpan-mac, just drop the folder on the
\&\fBinstallme\fR droplet, and use the module.
.Sp
\&\fBOr\fR, if you aren't using cpan-mac, do some manual labor.
.Sp
Make sure the newlines for the modules are in Mac format, not Unix format.
If they are not then you might have decompressed them incorrectly.  Check
your decompression and unpacking utilities settings to make sure they are
translating text files properly.
.Sp
As a last resort, you can use the perl one-liner:
.Sp
.Vb 1
\&    perl \-i.bak \-pe \*(Aqs/(?:\e015)?\e012/\e015/g\*(Aq <filenames>
.Ve
.Sp
on the source files.
.Sp
Then move the files (probably just the \fI.pm\fR files, though there
may be some additional ones, too; check the module documentation)
to their final destination: This will
most likely be in \f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR (i.e.,
\&\f(CW\*(C`HD:MacPerl folder:site_lib:\*(C'\fR).  You can add new paths to
the default \f(CW@INC\fR in the Preferences menu item in the
MacPerl application (\f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR is added
automagically).  Create whatever directory structures are required
(i.e., for \f(CW\*(C`Some::Module\*(C'\fR, create
\&\f(CW\*(C`$ENV{MACPERL}site_lib:Some:\*(C'\fR and put
\&\f(CW\*(C`Module.pm\*(C'\fR in that directory).
.Sp
Then run the following script (or something like it):
.Sp
.Vb 4
\&     #!perl \-w
\&     use AutoSplit;
\&     my $dir = "${MACPERL}site_perl";
\&     autosplit("$dir:Some:Module.pm", "$dir:auto", 0, 1, 1);
.Ve
.IP "\(bu" 4
\&\fBIf you're on the \s-1DJGPP\s0 port of \s-1DOS,\s0\fR
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
djtarx ( ftp://ftp.delorie.com/pub/djgpp/current/v2/ )
will both uncompress and unpack.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
See above.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR
in the Perl distribution.
.Sp
.Vb 1
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&     make install
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR in the Perl distribution.
.IP "\(bu" 4
\&\fBIf you're on \s-1OS/2,\s0\fR
.Sp
Get the \s-1EMX\s0 development suite and gzip/tar, from either Hobbes (
http://hobbes.nmsu.edu ) or Leo ( http://www.leo.org ), and then follow
the instructions for Unix.
.IP "\(bu" 4
\&\fBIf you're on \s-1VMS,\s0\fR
.Sp
When downloading from \s-1CPAN,\s0 save your file with a \f(CW\*(C`.tgz\*(C'\fR
extension instead of \f(CW\*(C`.tar.gz\*(C'\fR.  All other periods in the
filename should be replaced with underscores.  For example,
\&\f(CW\*(C`Your\-Module\-1.33.tar.gz\*(C'\fR should be downloaded as
\&\f(CW\*(C`Your\-Module\-1_33.tgz\*(C'\fR.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Type
.Sp
.Vb 1
\&    gzip \-d Your\-Module.tgz
.Ve
.Sp
or, for zipped modules, type
.Sp
.Vb 1
\&    unzip Your\-Module.zip
.Ve
.Sp
Executables for gzip, zip, and VMStar:
.Sp
.Vb 1
\&    http://www.hp.com/go/openvms/freeware/
.Ve
.Sp
and their source code:
.Sp
.Vb 1
\&    http://www.fsf.org/order/ftp.html
.Ve
.Sp
Note that \s-1GNU\s0's gzip/gunzip is not the same as Info-ZIP's zip/unzip
package.  The former is a simple compression tool; the latter permits
creation of multi-file archives.
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using VMStar:
.Sp
.Vb 1
\&     VMStar xf Your\-Module.tar
.Ve
.Sp
Or, if you're fond of \s-1VMS\s0 command syntax:
.Sp
.Vb 1
\&     tar/extract/verbose Your_Module.tar
.Ve
.Sp
C. \s-1BUILD\s0
.Sp
Make sure you have \s-1MMS \s0(from Digital) or the freeware \s-1MMK \s0( available
from MadGoat at http://www.madgoat.com ).  Then type this to create
the \s-1DESCRIP.MMS\s0 for the module:
.Sp
.Vb 1
\&    perl Makefile.PL
.Ve
.Sp
Now you're ready to build:
.Sp
.Vb 1
\&    mms test
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.Sp
D. \s-1INSTALL\s0
.Sp
Type
.Sp
.Vb 1
\&    mms install
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.IP "\(bu" 4
\&\fBIf you're on \s-1MVS\s0\fR,
.Sp
Introduce the \fI.tar.gz\fR file into an \s-1HFS\s0 as binary; don't translate from
\&\s-1ASCII\s0 to \s-1EBCDIC.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from
http://www.s390.ibm.com/products/oe/bpxqp1.html
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with
.Sp
.Vb 1
\&     pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < yourmodule.tar
.Ve
.Sp
The \s-1BUILD\s0 and \s-1INSTALL\s0 steps are identical to those for Unix.  Some
modules generate Makefiles that work better with \s-1GNU\s0 make, which is
available from http://www.mks.com/s390/gnu/
.SH "PORTABILITY"
.IX Header "PORTABILITY"
Note that not all modules will work with on all platforms.
See perlport for more information on portability issues.
Read the documentation to see if the module will work on your
system.  There are basically three categories
of modules that will not work \*(L"out of the box\*(R" with all
platforms (with some possibility of overlap):
.IP "\(bu" 4
\&\fBThose that should, but don't.\fR  These need to be fixed; consider
contacting the author and possibly writing a patch.
.IP "\(bu" 4
\&\fBThose that need to be compiled, where the target platform
doesn't have compilers readily available.\fR  (These modules contain
\&\fI.xs\fR or \fI.c\fR files, usually.)  You might be able to find
existing binaries on the \s-1CPAN\s0 or elsewhere, or you might
want to try getting compilers and building it yourself, and then
release the binary for other poor souls to use.
.IP "\(bu" 4
\&\fBThose that are targeted at a specific platform.\fR
(Such as the Win32:: modules.)  If the module is targeted
specifically at a platform other than yours, you're out
of luck, most likely.
.PP
Check the \s-1CPAN\s0 Testers if a module should work with your platform
but it doesn't behave as you'd expect, or you aren't sure whether or
not a module will work under your platform.  If the module you want
isn't listed there, you can test it yourself and let \s-1CPAN\s0 Testers know,
you can join \s-1CPAN\s0 Testers, or you can request it be tested.
.PP
.Vb 1
\&    http://testers.cpan.org/
.Ve
.SH "HEY"
.IX Header "HEY"
If you have any suggested changes for this page, let me know.  Please
don't send me mail asking for help on how to install your modules.
There are too many modules, and too few Orwants, for me to be able to
answer or even acknowledge all your questions.  Contact the module
author instead, or post to comp.lang.perl.modules, or ask someone
familiar with Perl on your operating system.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Orwant
.PP
orwant@medita.mit.edu
.PP
with invaluable help from Chris Nandor, and valuable help from Brandon
Allbery, Charles Bailey, Graham Barr, Dominic Dunlop, Jarkko
Hietaniemi, Ben Holzman, Tom Horsley, Nick Ing-Simmons, Tuomas
J. Lukka, Laszlo Molnar, Alan Olsen, Peter Prymmer, Gurusamy Sarathy,
Christoph Spalinger, Dan Sugalski, Larry Virden, and Ilya Zakharevich.
.PP
First version July 22, 1998; last revised November 21, 2001.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1998, 2002, 2003 Jon Orwant.  All Rights Reserved.
.PP
This document may be distributed under the same terms as Perl itself.
                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodinstall5.16.1                         0100644 0001750 0001750 00000044166 12566207421 024313  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODINSTALL 1"
.TH PERLMODINSTALL 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodinstall \- Installing CPAN Modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can think of a module as the fundamental unit of reusable Perl
code; see perlmod for details.  Whenever anyone creates a chunk of
Perl code that they think will be useful to the world, they register
as a Perl developer at http://www.cpan.org/modules/04pause.html
so that they can then upload their code to the \s-1CPAN\s0.  The \s-1CPAN\s0 is the
Comprehensive Perl Archive Network and can be accessed at
http://www.cpan.org/ , and searched at http://search.cpan.org/ .
.PP
This documentation is for people who want to download \s-1CPAN\s0 modules
and install them on their own computer.
.SS "\s-1PREAMBLE\s0"
.IX Subsection "PREAMBLE"
First, are you sure that the module isn't already on your system?  Try
\&\f(CW\*(C`perl \-MFoo \-e 1\*(C'\fR.  (Replace \*(L"Foo\*(R" with the name of the module; for
instance, \f(CW\*(C`perl \-MCGI::Carp \-e 1\*(C'\fR.
.PP
If you don't see an error message, you have the module.  (If you do
see an error message, it's still possible you have the module, but
that it's not in your path, which you can display with \f(CW\*(C`perl \-e
"print qq(@INC)"\*(C'\fR.)  For the remainder of this document, we'll assume
that you really honestly truly lack an installed module, but have
found it on the \s-1CPAN\s0.
.PP
So now you have a file ending in .tar.gz (or, less often, .zip).  You
know there's a tasty module inside.  There are four steps you must now
take:
.IP "\fB\s-1DECOMPRESS\s0\fR the file" 5
.IX Item "DECOMPRESS the file"
.PD 0
.IP "\fB\s-1UNPACK\s0\fR the file into a directory" 5
.IX Item "UNPACK the file into a directory"
.IP "\fB\s-1BUILD\s0\fR the module (sometimes unnecessary)" 5
.IX Item "BUILD the module (sometimes unnecessary)"
.IP "\fB\s-1INSTALL\s0\fR the module." 5
.IX Item "INSTALL the module."
.PD
.PP
Here's how to perform each step for each operating system.  This is
<not> a substitute for reading the \s-1README\s0 and \s-1INSTALL\s0 files that
might have come with your module!
.PP
Also note that these instructions are tailored for installing the
module into your system's repository of Perl modules, but you can
install modules into any directory you wish.  For instance, where I
say \f(CW\*(C`perl Makefile.PL\*(C'\fR, you can substitute \f(CW\*(C`perl Makefile.PL
PREFIX=/my/perl_directory\*(C'\fR to install the modules into
\&\f(CW\*(C`/my/perl_directory\*(C'\fR.  Then you can use the modules from your Perl
programs with \f(CW\*(C`use lib "/my/perl_directory/lib/site_perl";\*(C'\fR or
sometimes just \f(CW\*(C`use "/my/perl_directory";\*(C'\fR.  If you're on a system
that requires superuser/root access to install modules into the
directories you see when you type \f(CW\*(C`perl \-e "print qq(@INC)"\*(C'\fR, you'll
want to install them into a local directory (such as your home
directory) and use this approach.
.IP "\(bu" 4
\&\fBIf you're on a Unix or Unix-like system,\fR
.Sp
You can use Andreas Koenig's \s-1CPAN\s0 module
( http://www.cpan.org/modules/by\-module/CPAN )
to automate the following steps, from \s-1DECOMPRESS\s0 through \s-1INSTALL\s0.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from ftp://prep.ai.mit.edu/pub/gnu/
.Sp
Or, you can combine this step with the next to save disk space:
.Sp
.Vb 1
\&     gzip \-dc yourmodule.tar.gz | tar \-xof \-
.Ve
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with \f(CW\*(C`tar \-xof yourmodule.tar\*(C'\fR
.Sp
C. \s-1BUILD\s0
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
or
.Sp
.Vb 1
\&      perl Makefile.PL PREFIX=/my/perl_directory
.Ve
.Sp
to install it locally.  (Remember that if you do this, you'll have to
put \f(CW\*(C`use lib "/my/perl_directory";\*(C'\fR near the top of the program that
is to use this module.
.Sp
D. \s-1INSTALL\s0
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      make install
.Ve
.Sp
Make sure you have the appropriate permissions to install the module
in your Perl 5 library directory.  Often, you'll need to be root.
.Sp
That's all you need to do on Unix systems with dynamic linking.
Most Unix systems have dynamic linking. If yours doesn't, or if for
another reason you have a statically-linked perl, \fBand\fR the
module requires compilation, you'll need to build a new Perl binary
that includes the module.  Again, you'll probably need to be root.
.IP "\(bu" 4
\&\fBIf you're running ActivePerl (Win95/98/2K/NT/XP, Linux, Solaris)\fR
.Sp
First, type \f(CW\*(C`ppm\*(C'\fR from a shell and see whether ActiveState's \s-1PPM\s0
repository has your module.  If so, you can install it with \f(CW\*(C`ppm\*(C'\fR and
you won't have to bother with any of the other steps here.  You might
be able to use the \s-1CPAN\s0 instructions from the \*(L"Unix or Linux\*(R" section
above as well; give it a try.  Otherwise, you'll have to follow the
steps below.
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
You can use the shareware Winzip ( http://www.winzip.com ) to
decompress and unpack modules.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
If you used WinZip, this was already done for you.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
You'll need the \f(CW\*(C`nmake\*(C'\fR utility, available at
http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe
or dmake, available on \s-1CPAN\s0.
http://search.cpan.org/dist/dmake/
.Sp
Does the module require compilation (i.e. does it have files that end
in .xs, .c, .h, .y, .cc, .cxx, or .C)?  If it does, life is now
officially tough for you, because you have to compile the module
yourself (no easy feat on Windows).  You'll need a compiler such as
Visual \*(C+.  Alternatively, you can download a pre-built \s-1PPM\s0 package
from ActiveState.
http://aspn.activestate.com/ASPN/Downloads/ActivePerl/PPM/
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      nmake test
\&
\&
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      nmake install
.Ve
.IP "\(bu" 4
\&\fBIf you're using a Macintosh with \*(L"Classic\*(R" MacOS and MacPerl,\fR
.Sp
A. \s-1DECOMPRESS\s0
.Sp
First, make sure you have the latest \fBcpan-mac\fR distribution (
http://www.cpan.org/authors/id/CNANDOR/ ), which has utilities for
doing all of the steps.  Read the cpan-mac directions carefully and
install it.  If you choose not to use cpan-mac for some reason, there
are alternatives listed here.
.Sp
After installing cpan-mac, drop the module archive on the
\&\fBuntarzipme\fR droplet, which will decompress and unpack for you.
.Sp
\&\fBOr\fR, you can either use the shareware \fBStuffIt Expander\fR program
( http://my.smithmicro.com/mac/stuffit/ )
or the freeware \fBMacGzip\fR program (
http://persephone.cps.unizar.es/general/gente/spd/gzip/gzip.html ).
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using untarzipme or StuffIt, the archive should be extracted
now.  \fBOr\fR, you can use the freeware \fBsuntar\fR or \fITar\fR (
http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/ ).
.Sp
C. \s-1BUILD\s0
.Sp
Check the contents of the distribution.
Read the module's documentation, looking for
reasons why you might have trouble using it with MacPerl.  Look for
\&\fI.xs\fR and \fI.c\fR files, which normally denote that the distribution
must be compiled, and you cannot install it \*(L"out of the box.\*(R"
(See \*(L"\s-1PORTABILITY\s0\*(R".)
.Sp
D. \s-1INSTALL\s0
.Sp
If you are using cpan-mac, just drop the folder on the
\&\fBinstallme\fR droplet, and use the module.
.Sp
\&\fBOr\fR, if you aren't using cpan-mac, do some manual labor.
.Sp
Make sure the newlines for the modules are in Mac format, not Unix format.
If they are not then you might have decompressed them incorrectly.  Check
your decompression and unpacking utilities settings to make sure they are
translating text files properly.
.Sp
As a last resort, you can use the perl one-liner:
.Sp
.Vb 1
\&    perl \-i.bak \-pe \*(Aqs/(?:\e015)?\e012/\e015/g\*(Aq <filenames>
.Ve
.Sp
on the source files.
.Sp
Then move the files (probably just the \fI.pm\fR files, though there
may be some additional ones, too; check the module documentation)
to their final destination: This will
most likely be in \f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR (i.e.,
\&\f(CW\*(C`HD:MacPerl folder:site_lib:\*(C'\fR).  You can add new paths to
the default \f(CW@INC\fR in the Preferences menu item in the
MacPerl application (\f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR is added
automagically).  Create whatever directory structures are required
(i.e., for \f(CW\*(C`Some::Module\*(C'\fR, create
\&\f(CW\*(C`$ENV{MACPERL}site_lib:Some:\*(C'\fR and put
\&\f(CW\*(C`Module.pm\*(C'\fR in that directory).
.Sp
Then run the following script (or something like it):
.Sp
.Vb 4
\&     #!perl \-w
\&     use AutoSplit;
\&     my $dir = "${MACPERL}site_perl";
\&     autosplit("$dir:Some:Module.pm", "$dir:auto", 0, 1, 1);
.Ve
.IP "\(bu" 4
\&\fBIf you're on the \s-1DJGPP\s0 port of \s-1DOS\s0,\fR
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
djtarx ( ftp://ftp.delorie.com/pub/djgpp/current/v2/ )
will both uncompress and unpack.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
See above.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR
in the Perl distribution.
.Sp
.Vb 1
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&     make install
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR in the Perl distribution.
.IP "\(bu" 4
\&\fBIf you're on \s-1OS/2\s0,\fR
.Sp
Get the \s-1EMX\s0 development suite and gzip/tar, from either Hobbes (
http://hobbes.nmsu.edu ) or Leo ( http://www.leo.org ), and then follow
the instructions for Unix.
.IP "\(bu" 4
\&\fBIf you're on \s-1VMS\s0,\fR
.Sp
When downloading from \s-1CPAN\s0, save your file with a \f(CW\*(C`.tgz\*(C'\fR
extension instead of \f(CW\*(C`.tar.gz\*(C'\fR.  All other periods in the
filename should be replaced with underscores.  For example,
\&\f(CW\*(C`Your\-Module\-1.33.tar.gz\*(C'\fR should be downloaded as
\&\f(CW\*(C`Your\-Module\-1_33.tgz\*(C'\fR.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Type
.Sp
.Vb 1
\&    gzip \-d Your\-Module.tgz
.Ve
.Sp
or, for zipped modules, type
.Sp
.Vb 1
\&    unzip Your\-Module.zip
.Ve
.Sp
Executables for gzip, zip, and VMStar:
.Sp
.Vb 1
\&    http://www.hp.com/go/openvms/freeware/
.Ve
.Sp
and their source code:
.Sp
.Vb 1
\&    http://www.fsf.org/order/ftp.html
.Ve
.Sp
Note that \s-1GNU\s0's gzip/gunzip is not the same as Info-ZIP's zip/unzip
package.  The former is a simple compression tool; the latter permits
creation of multi-file archives.
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using VMStar:
.Sp
.Vb 1
\&     VMStar xf Your\-Module.tar
.Ve
.Sp
Or, if you're fond of \s-1VMS\s0 command syntax:
.Sp
.Vb 1
\&     tar/extract/verbose Your_Module.tar
.Ve
.Sp
C. \s-1BUILD\s0
.Sp
Make sure you have \s-1MMS\s0 (from Digital) or the freeware \s-1MMK\s0 ( available
from MadGoat at http://www.madgoat.com ).  Then type this to create
the \s-1DESCRIP\s0.MMS for the module:
.Sp
.Vb 1
\&    perl Makefile.PL
.Ve
.Sp
Now you're ready to build:
.Sp
.Vb 1
\&    mms test
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK\s0.
.Sp
D. \s-1INSTALL\s0
.Sp
Type
.Sp
.Vb 1
\&    mms install
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK\s0.
.IP "\(bu" 4
\&\fBIf you're on \s-1MVS\s0\fR,
.Sp
Introduce the \fI.tar.gz\fR file into an \s-1HFS\s0 as binary; don't translate from
\&\s-1ASCII\s0 to \s-1EBCDIC\s0.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from
http://www.s390.ibm.com/products/oe/bpxqp1.html
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with
.Sp
.Vb 1
\&     pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < yourmodule.tar
.Ve
.Sp
The \s-1BUILD\s0 and \s-1INSTALL\s0 steps are identical to those for Unix.  Some
modules generate Makefiles that work better with \s-1GNU\s0 make, which is
available from http://www.mks.com/s390/gnu/
.SH "PORTABILITY"
.IX Header "PORTABILITY"
Note that not all modules will work with on all platforms.
See perlport for more information on portability issues.
Read the documentation to see if the module will work on your
system.  There are basically three categories
of modules that will not work \*(L"out of the box\*(R" with all
platforms (with some possibility of overlap):
.IP "\(bu" 4
\&\fBThose that should, but don't.\fR  These need to be fixed; consider
contacting the author and possibly writing a patch.
.IP "\(bu" 4
\&\fBThose that need to be compiled, where the target platform
doesn't have compilers readily available.\fR  (These modules contain
\&\fI.xs\fR or \fI.c\fR files, usually.)  You might be able to find
existing binaries on the \s-1CPAN\s0 or elsewhere, or you might
want to try getting compilers and building it yourself, and then
release the binary for other poor souls to use.
.IP "\(bu" 4
\&\fBThose that are targeted at a specific platform.\fR
(Such as the Win32:: modules.)  If the module is targeted
specifically at a platform other than yours, you're out
of luck, most likely.
.PP
Check the \s-1CPAN\s0 Testers if a module should work with your platform
but it doesn't behave as you'd expect, or you aren't sure whether or
not a module will work under your platform.  If the module you want
isn't listed there, you can test it yourself and let \s-1CPAN\s0 Testers know,
you can join \s-1CPAN\s0 Testers, or you can request it be tested.
.PP
.Vb 1
\&    http://testers.cpan.org/
.Ve
.SH "HEY"
.IX Header "HEY"
If you have any suggested changes for this page, let me know.  Please
don't send me mail asking for help on how to install your modules.
There are too many modules, and too few Orwants, for me to be able to
answer or even acknowledge all your questions.  Contact the module
author instead, or post to comp.lang.perl.modules, or ask someone
familiar with Perl on your operating system.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Orwant
.PP
orwant@medita.mit.edu
.PP
with invaluable help from Chris Nandor, and valuable help from Brandon
Allbery, Charles Bailey, Graham Barr, Dominic Dunlop, Jarkko
Hietaniemi, Ben Holzman, Tom Horsley, Nick Ing-Simmons, Tuomas
J. Lukka, Laszlo Molnar, Alan Olsen, Peter Prymmer, Gurusamy Sarathy,
Christoph Spalinger, Dan Sugalski, Larry Virden, and Ilya Zakharevich.
.PP
First version July 22, 1998; last revised November 21, 2001.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1998, 2002, 2003 Jon Orwant.  All Rights Reserved.
.PP
This document may be distributed under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodinstall5.18.1                         0100644 0001750 0001750 00000044475 12566207442 024323  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODINSTALL 1"
.TH PERLMODINSTALL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodinstall \- Installing CPAN Modules
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can think of a module as the fundamental unit of reusable Perl
code; see perlmod for details.  Whenever anyone creates a chunk of
Perl code that they think will be useful to the world, they register
as a Perl developer at http://www.cpan.org/modules/04pause.html
so that they can then upload their code to the \s-1CPAN. \s0 The \s-1CPAN\s0 is the
Comprehensive Perl Archive Network and can be accessed at
http://www.cpan.org/ , and searched at http://search.cpan.org/ .
.PP
This documentation is for people who want to download \s-1CPAN\s0 modules
and install them on their own computer.
.SS "\s-1PREAMBLE\s0"
.IX Subsection "PREAMBLE"
First, are you sure that the module isn't already on your system?  Try
\&\f(CW\*(C`perl \-MFoo \-e 1\*(C'\fR.  (Replace \*(L"Foo\*(R" with the name of the module; for
instance, \f(CW\*(C`perl \-MCGI::Carp \-e 1\*(C'\fR.)
.PP
If you don't see an error message, you have the module.  (If you do
see an error message, it's still possible you have the module, but
that it's not in your path, which you can display with \f(CW\*(C`perl \-e
"print qq(@INC)"\*(C'\fR.)  For the remainder of this document, we'll assume
that you really honestly truly lack an installed module, but have
found it on the \s-1CPAN.\s0
.PP
So now you have a file ending in .tar.gz (or, less often, .zip).  You
know there's a tasty module inside.  There are four steps you must now
take:
.IP "\fB\s-1DECOMPRESS\s0\fR the file" 5
.IX Item "DECOMPRESS the file"
.PD 0
.IP "\fB\s-1UNPACK\s0\fR the file into a directory" 5
.IX Item "UNPACK the file into a directory"
.IP "\fB\s-1BUILD\s0\fR the module (sometimes unnecessary)" 5
.IX Item "BUILD the module (sometimes unnecessary)"
.IP "\fB\s-1INSTALL\s0\fR the module." 5
.IX Item "INSTALL the module."
.PD
.PP
Here's how to perform each step for each operating system.  This is
<not> a substitute for reading the \s-1README\s0 and \s-1INSTALL\s0 files that
might have come with your module!
.PP
Also note that these instructions are tailored for installing the
module into your system's repository of Perl modules, but you can
install modules into any directory you wish.  For instance, where I
say \f(CW\*(C`perl Makefile.PL\*(C'\fR, you can substitute \f(CW\*(C`perl Makefile.PL
PREFIX=/my/perl_directory\*(C'\fR to install the modules into
\&\fI/my/perl_directory\fR.  Then you can use the modules from your Perl
programs with \f(CW\*(C`use lib "/my/perl_directory/lib/site_perl";\*(C'\fR or
sometimes just \f(CW\*(C`use "/my/perl_directory";\*(C'\fR.  If you're on a system
that requires superuser/root access to install modules into the
directories you see when you type \f(CW\*(C`perl \-e "print qq(@INC)"\*(C'\fR, you'll
want to install them into a local directory (such as your home
directory) and use this approach.
.IP "\(bu" 4
\&\fBIf you're on a Unix or Unix-like system,\fR
.Sp
You can use Andreas Koenig's \s-1CPAN\s0 module
( http://www.cpan.org/modules/by\-module/CPAN )
to automate the following steps, from \s-1DECOMPRESS\s0 through \s-1INSTALL.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from ftp://prep.ai.mit.edu/pub/gnu/
.Sp
Or, you can combine this step with the next to save disk space:
.Sp
.Vb 1
\&     gzip \-dc yourmodule.tar.gz | tar \-xof \-
.Ve
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with \f(CW\*(C`tar \-xof yourmodule.tar\*(C'\fR
.Sp
C. \s-1BUILD\s0
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
or
.Sp
.Vb 1
\&      perl Makefile.PL PREFIX=/my/perl_directory
.Ve
.Sp
to install it locally.  (Remember that if you do this, you'll have to
put \f(CW\*(C`use lib "/my/perl_directory";\*(C'\fR near the top of the program that
is to use this module.
.Sp
D. \s-1INSTALL\s0
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      make install
.Ve
.Sp
Make sure you have the appropriate permissions to install the module
in your Perl 5 library directory.  Often, you'll need to be root.
.Sp
That's all you need to do on Unix systems with dynamic linking.
Most Unix systems have dynamic linking. If yours doesn't, or if for
another reason you have a statically-linked perl, \fBand\fR the
module requires compilation, you'll need to build a new Perl binary
that includes the module.  Again, you'll probably need to be root.
.IP "\(bu" 4
\&\fBIf you're running ActivePerl (Win95/98/2K/NT/XP, Linux, Solaris),\fR
.Sp
First, type \f(CW\*(C`ppm\*(C'\fR from a shell and see whether ActiveState's \s-1PPM\s0
repository has your module.  If so, you can install it with \f(CW\*(C`ppm\*(C'\fR and
you won't have to bother with any of the other steps here.  You might
be able to use the \s-1CPAN\s0 instructions from the \*(L"Unix or Linux\*(R" section
above as well; give it a try.  Otherwise, you'll have to follow the
steps below.
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
You can use the shareware Winzip ( http://www.winzip.com ) to
decompress and unpack modules.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
If you used WinZip, this was already done for you.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
You'll need the \f(CW\*(C`nmake\*(C'\fR utility, available at
http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe
or dmake, available on \s-1CPAN.\s0
http://search.cpan.org/dist/dmake/
.Sp
Does the module require compilation (i.e. does it have files that end
in .xs, .c, .h, .y, .cc, .cxx, or .C)?  If it does, life is now
officially tough for you, because you have to compile the module
yourself (no easy feat on Windows).  You'll need a compiler such as
Visual \*(C+.  Alternatively, you can download a pre-built \s-1PPM\s0 package
from ActiveState.
http://aspn.activestate.com/ASPN/Downloads/ActivePerl/PPM/
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      nmake test
\&
\&
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&      nmake install
.Ve
.IP "\(bu" 4
\&\fBIf you're using a Macintosh with \*(L"Classic\*(R" MacOS and MacPerl,\fR
.Sp
A. \s-1DECOMPRESS\s0
.Sp
First, make sure you have the latest \fBcpan-mac\fR distribution (
http://www.cpan.org/authors/id/CNANDOR/ ), which has utilities for
doing all of the steps.  Read the cpan-mac directions carefully and
install it.  If you choose not to use cpan-mac for some reason, there
are alternatives listed here.
.Sp
After installing cpan-mac, drop the module archive on the
\&\fBuntarzipme\fR droplet, which will decompress and unpack for you.
.Sp
\&\fBOr\fR, you can either use the shareware \fBStuffIt Expander\fR program
( http://my.smithmicro.com/mac/stuffit/ )
or the freeware \fBMacGzip\fR program (
http://persephone.cps.unizar.es/general/gente/spd/gzip/gzip.html ).
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using untarzipme or StuffIt, the archive should be extracted
now.  \fBOr\fR, you can use the freeware \fBsuntar\fR or \fITar\fR (
http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/ ).
.Sp
C. \s-1BUILD\s0
.Sp
Check the contents of the distribution.
Read the module's documentation, looking for
reasons why you might have trouble using it with MacPerl.  Look for
\&\fI.xs\fR and \fI.c\fR files, which normally denote that the distribution
must be compiled, and you cannot install it \*(L"out of the box.\*(R"
(See \*(L"\s-1PORTABILITY\*(R"\s0.)
.Sp
D. \s-1INSTALL\s0
.Sp
If you are using cpan-mac, just drop the folder on the
\&\fBinstallme\fR droplet, and use the module.
.Sp
\&\fBOr\fR, if you aren't using cpan-mac, do some manual labor.
.Sp
Make sure the newlines for the modules are in Mac format, not Unix format.
If they are not then you might have decompressed them incorrectly.  Check
your decompression and unpacking utilities settings to make sure they are
translating text files properly.
.Sp
As a last resort, you can use the perl one-liner:
.Sp
.Vb 1
\&    perl \-i.bak \-pe \*(Aqs/(?:\e015)?\e012/\e015/g\*(Aq <filenames>
.Ve
.Sp
on the source files.
.Sp
Then move the files (probably just the \fI.pm\fR files, though there
may be some additional ones, too; check the module documentation)
to their final destination: This will
most likely be in \f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR (i.e.,
\&\f(CW\*(C`HD:MacPerl folder:site_lib:\*(C'\fR).  You can add new paths to
the default \f(CW@INC\fR in the Preferences menu item in the
MacPerl application (\f(CW\*(C`$ENV{MACPERL}site_lib:\*(C'\fR is added
automagically).  Create whatever directory structures are required
(i.e., for \f(CW\*(C`Some::Module\*(C'\fR, create
\&\f(CW\*(C`$ENV{MACPERL}site_lib:Some:\*(C'\fR and put
\&\f(CW\*(C`Module.pm\*(C'\fR in that directory).
.Sp
Then run the following script (or something like it):
.Sp
.Vb 4
\&     #!perl \-w
\&     use AutoSplit;
\&     my $dir = "${MACPERL}site_perl";
\&     autosplit("$dir:Some:Module.pm", "$dir:auto", 0, 1, 1);
.Ve
.IP "\(bu" 4
\&\fBIf you're on the \s-1DJGPP\s0 port of \s-1DOS,\s0\fR
.Sp
.Vb 1
\&   A. DECOMPRESS
.Ve
.Sp
djtarx ( ftp://ftp.delorie.com/pub/djgpp/current/v2/ )
will both uncompress and unpack.
.Sp
.Vb 1
\&   B. UNPACK
.Ve
.Sp
See above.
.Sp
.Vb 1
\&   C. BUILD
.Ve
.Sp
Go into the newly-created directory and type:
.Sp
.Vb 2
\&      perl Makefile.PL
\&      make test
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR
in the Perl distribution.
.Sp
.Vb 1
\&   D. INSTALL
.Ve
.Sp
While still in that directory, type:
.Sp
.Vb 1
\&     make install
.Ve
.Sp
You will need the packages mentioned in \fI\s-1README\s0.dos\fR in the Perl distribution.
.IP "\(bu" 4
\&\fBIf you're on \s-1OS/2,\s0\fR
.Sp
Get the \s-1EMX\s0 development suite and gzip/tar, from either Hobbes (
http://hobbes.nmsu.edu ) or Leo ( http://www.leo.org ), and then follow
the instructions for Unix.
.IP "\(bu" 4
\&\fBIf you're on \s-1VMS,\s0\fR
.Sp
When downloading from \s-1CPAN,\s0 save your file with a \f(CW\*(C`.tgz\*(C'\fR
extension instead of \f(CW\*(C`.tar.gz\*(C'\fR.  All other periods in the
filename should be replaced with underscores.  For example,
\&\f(CW\*(C`Your\-Module\-1.33.tar.gz\*(C'\fR should be downloaded as
\&\f(CW\*(C`Your\-Module\-1_33.tgz\*(C'\fR.
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Type
.Sp
.Vb 1
\&    gzip \-d Your\-Module.tgz
.Ve
.Sp
or, for zipped modules, type
.Sp
.Vb 1
\&    unzip Your\-Module.zip
.Ve
.Sp
Executables for gzip, zip, and VMStar:
.Sp
.Vb 1
\&    http://www.hp.com/go/openvms/freeware/
.Ve
.Sp
and their source code:
.Sp
.Vb 1
\&    http://www.fsf.org/order/ftp.html
.Ve
.Sp
Note that \s-1GNU\s0's gzip/gunzip is not the same as Info-ZIP's zip/unzip
package.  The former is a simple compression tool; the latter permits
creation of multi-file archives.
.Sp
B. \s-1UNPACK\s0
.Sp
If you're using VMStar:
.Sp
.Vb 1
\&     VMStar xf Your\-Module.tar
.Ve
.Sp
Or, if you're fond of \s-1VMS\s0 command syntax:
.Sp
.Vb 1
\&     tar/extract/verbose Your_Module.tar
.Ve
.Sp
C. \s-1BUILD\s0
.Sp
Make sure you have \s-1MMS \s0(from Digital) or the freeware \s-1MMK \s0( available
from MadGoat at http://www.madgoat.com ).  Then type this to create
the \s-1DESCRIP.MMS\s0 for the module:
.Sp
.Vb 1
\&    perl Makefile.PL
.Ve
.Sp
Now you're ready to build:
.Sp
.Vb 1
\&    mms test
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.Sp
D. \s-1INSTALL\s0
.Sp
Type
.Sp
.Vb 1
\&    mms install
.Ve
.Sp
Substitute \f(CW\*(C`mmk\*(C'\fR for \f(CW\*(C`mms\*(C'\fR above if you're using \s-1MMK.\s0
.IP "\(bu" 4
\&\fBIf you're on \s-1MVS\s0\fR,
.Sp
Introduce the \fI.tar.gz\fR file into an \s-1HFS\s0 as binary; don't translate from
\&\s-1ASCII\s0 to \s-1EBCDIC.\s0
.Sp
A. \s-1DECOMPRESS\s0
.Sp
Decompress the file with \f(CW\*(C`gzip \-d yourmodule.tar.gz\*(C'\fR
.Sp
You can get gzip from
http://www.s390.ibm.com/products/oe/bpxqp1.html
.Sp
B. \s-1UNPACK\s0
.Sp
Unpack the result with
.Sp
.Vb 1
\&     pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < yourmodule.tar
.Ve
.Sp
The \s-1BUILD\s0 and \s-1INSTALL\s0 steps are identical to those for Unix.  Some
modules generate Makefiles that work better with \s-1GNU\s0 make, which is
available from http://www.mks.com/s390/gnu/
.SH "PORTABILITY"
.IX Header "PORTABILITY"
Note that not all modules will work with on all platforms.
See perlport for more information on portability issues.
Read the documentation to see if the module will work on your
system.  There are basically three categories
of modules that will not work \*(L"out of the box\*(R" with all
platforms (with some possibility of overlap):
.IP "\(bu" 4
\&\fBThose that should, but don't.\fR  These need to be fixed; consider
contacting the author and possibly writing a patch.
.IP "\(bu" 4
\&\fBThose that need to be compiled, where the target platform
doesn't have compilers readily available.\fR  (These modules contain
\&\fI.xs\fR or \fI.c\fR files, usually.)  You might be able to find
existing binaries on the \s-1CPAN\s0 or elsewhere, or you might
want to try getting compilers and building it yourself, and then
release the binary for other poor souls to use.
.IP "\(bu" 4
\&\fBThose that are targeted at a specific platform.\fR
(Such as the Win32:: modules.)  If the module is targeted
specifically at a platform other than yours, you're out
of luck, most likely.
.PP
Check the \s-1CPAN\s0 Testers if a module should work with your platform
but it doesn't behave as you'd expect, or you aren't sure whether or
not a module will work under your platform.  If the module you want
isn't listed there, you can test it yourself and let \s-1CPAN\s0 Testers know,
you can join \s-1CPAN\s0 Testers, or you can request it be tested.
.PP
.Vb 1
\&    http://testers.cpan.org/
.Ve
.SH "HEY"
.IX Header "HEY"
If you have any suggested changes for this page, let me know.  Please
don't send me mail asking for help on how to install your modules.
There are too many modules, and too few Orwants, for me to be able to
answer or even acknowledge all your questions.  Contact the module
author instead, or post to comp.lang.perl.modules, or ask someone
familiar with Perl on your operating system.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Orwant
.PP
orwant@medita.mit.edu
.PP
with invaluable help from Chris Nandor, and valuable help from Brandon
Allbery, Charles Bailey, Graham Barr, Dominic Dunlop, Jarkko
Hietaniemi, Ben Holzman, Tom Horsley, Nick Ing-Simmons, Tuomas
J. Lukka, Laszlo Molnar, Alan Olsen, Peter Prymmer, Gurusamy Sarathy,
Christoph Spalinger, Dan Sugalski, Larry Virden, and Ilya Zakharevich.
.PP
First version July 22, 1998; last revised November 21, 2001.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1998, 2002, 2003 Jon Orwant.  All Rights Reserved.
.PP
This document may be distributed under the same terms as Perl itself.
                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodlib.1                                 0100644 0001750 0001750 00000325077 12566207442 023107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODLIB 1"
.TH PERLMODLIB 1 "2015-08-22" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodlib \- constructing new Perl modules and finding existing ones
.SH "THE PERL MODULE LIBRARY"
.IX Header "THE PERL MODULE LIBRARY"
Many modules are included in the Perl distribution.  These are described
below, and all end in \fI.pm\fR.  You may discover compiled library
files (usually ending in \fI.so\fR) or small pieces of modules to be
autoloaded (ending in \fI.al\fR); these were automatically generated
by the installation process.  You may also discover files in the
library directory that end in either \fI.pl\fR or \fI.ph\fR.  These are
old libraries supplied so that old programs that use them still
run.  The \fI.pl\fR files will all eventually be converted into standard
modules, and the \fI.ph\fR files made by \fBh2ph\fR will probably end up
as extension modules made by \fBh2xs\fR.  (Some \fI.ph\fR values may
already be available through the \s-1POSIX,\s0 Errno, or Fcntl modules.)
The \fBpl2pm\fR file in the distribution may help in your conversion,
but it's just a mechanical process and therefore far from bulletproof.
.SS "Pragmatic Modules"
.IX Subsection "Pragmatic Modules"
They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually
work well only when used within a \f(CW\*(C`use\*(C'\fR, or \f(CW\*(C`no\*(C'\fR.  Most of these
are lexically scoped, so an inner \s-1BLOCK\s0 may countermand them
by saying:
.PP
.Vb 3
\&    no integer;
\&    no strict \*(Aqrefs\*(Aq;
\&    no warnings;
.Ve
.PP
which lasts until the end of that \s-1BLOCK.\s0
.PP
Some pragmas are lexically scoped\*(--typically those that affect the
\&\f(CW$^H\fR hints variable.  Others affect the current package instead,
like \f(CW\*(C`use vars\*(C'\fR and \f(CW\*(C`use subs\*(C'\fR, which allow you to predeclare a
variables or subroutines within a particular \fIfile\fR rather than
just a block.  Such declarations are effective for the entire file
for which they were declared.  You cannot rescind them with \f(CW\*(C`no
vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
The following pragmas are defined (and have their own documentation).
.IP "arybase" 12
.IX Item "arybase"
Set indexing base via $[
.IP "attributes" 12
.IX Item "attributes"
Get/set subroutine or variable attributes
.IP "autodie" 12
.IX Item "autodie"
Replace functions with ones that succeed or die with lexical scope
.IP "autodie::exception" 12
.IX Item "autodie::exception"
Exceptions from autodying functions.
.IP "autodie::exception::system" 12
.IX Item "autodie::exception::system"
Exceptions from autodying \fIsystem()\fR.
.IP "autodie::hints" 12
.IX Item "autodie::hints"
Provide hints about user subroutines to autodie
.IP "autouse" 12
.IX Item "autouse"
Postpone load of modules until a function is used
.IP "base" 12
.IX Item "base"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "bigint" 12
.IX Item "bigint"
Transparent BigInteger support for Perl
.IP "bignum" 12
.IX Item "bignum"
Transparent BigNumber support for Perl
.IP "bigrat" 12
.IX Item "bigrat"
Transparent BigNumber/BigRational support for Perl
.IP "blib" 12
.IX Item "blib"
Use MakeMaker's uninstalled version of a package
.IP "bytes" 12
.IX Item "bytes"
Force byte semantics rather than character semantics
.IP "charnames" 12
.IX Item "charnames"
Access to Unicode character names and named character sequences; also define character names
.IP "constant" 12
.IX Item "constant"
Declare constants
.IP "deprecate" 12
.IX Item "deprecate"
Perl pragma for deprecating the core version of a module
.IP "diagnostics" 12
.IX Item "diagnostics"
Produce verbose warning diagnostics
.IP "encoding" 12
.IX Item "encoding"
Allows you to write your script in non-ascii or non\-utf8
.IP "encoding::warnings" 12
.IX Item "encoding::warnings"
Warn on implicit encoding conversions
.IP "feature" 12
.IX Item "feature"
Enable new features
.IP "fields" 12
.IX Item "fields"
Compile-time class fields
.IP "filetest" 12
.IX Item "filetest"
Control the filetest permission operators
.IP "if" 12
.IX Item "if"
\&\f(CW\*(C`use\*(C'\fR a Perl module if a condition holds
.IP "inc::latest" 12
.IX Item "inc::latest"
Use modules bundled in inc/ if they are newer than installed ones
.IP "integer" 12
.IX Item "integer"
Use integer arithmetic instead of floating point
.IP "less" 12
.IX Item "less"
Request less of something
.IP "lib" 12
.IX Item "lib"
Manipulate \f(CW@INC\fR at compile time
.IP "locale" 12
.IX Item "locale"
Use or avoid \s-1POSIX\s0 locales for built-in operations
.IP "mro" 12
.IX Item "mro"
Method Resolution Order
.IP "open" 12
.IX Item "open"
Set default PerlIO layers for input and output
.IP "ops" 12
.IX Item "ops"
Restrict unsafe operations when compiling
.IP "overload" 12
.IX Item "overload"
Package for overloading Perl operations
.IP "overloading" 12
.IX Item "overloading"
Lexically control overloading
.IP "parent" 12
.IX Item "parent"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "perldoc" 12
.IX Item "perldoc"
Look up Perl documentation in Pod format.
.IP "perlfaq" 12
.IX Item "perlfaq"
Frequently asked questions about Perl
.IP "perlfaq1" 12
.IX Item "perlfaq1"
General Questions About Perl
.IP "perlfaq2" 12
.IX Item "perlfaq2"
Obtaining and Learning about Perl
.IP "perlfaq3" 12
.IX Item "perlfaq3"
Programming Tools
.IP "perlfaq4" 12
.IX Item "perlfaq4"
Data Manipulation
.IP "perlfaq5" 12
.IX Item "perlfaq5"
Files and Formats
.IP "perlfaq6" 12
.IX Item "perlfaq6"
Regular Expressions
.IP "perlfaq7" 12
.IX Item "perlfaq7"
General Perl Language Issues
.IP "perlfaq8" 12
.IX Item "perlfaq8"
System Interaction
.IP "perlfaq9" 12
.IX Item "perlfaq9"
Web, Email and Networking
.IP "perlfunc" 12
.IX Item "perlfunc"
Perl builtin functions
.IP "perlglossary" 12
.IX Item "perlglossary"
Perl Glossary
.IP "perlpodspeccopy" 12
.IX Item "perlpodspeccopy"
Plain Old Documentation: format specification and notes
.IP "perlvarcopy" 12
.IX Item "perlvarcopy"
Perl predefined variables
.IP "perlxs" 12
.IX Item "perlxs"
\&\s-1XS\s0 language reference manual
.IP "perlxstut" 12
.IX Item "perlxstut"
Tutorial for writing XSUBs
.IP "perlxstypemap" 12
.IX Item "perlxstypemap"
Perl \s-1XS\s0 C/Perl type mapping
.IP "re" 12
.IX Item "re"
Alter regular expression behaviour
.IP "sigtrap" 12
.IX Item "sigtrap"
Enable simple signal handling
.IP "sort" 12
.IX Item "sort"
Control \fIsort()\fR behaviour
.IP "strict" 12
.IX Item "strict"
Restrict unsafe constructs
.IP "subs" 12
.IX Item "subs"
Predeclare sub names
.IP "threads" 12
.IX Item "threads"
Perl interpreter-based threads
.IP "threads::shared" 12
.IX Item "threads::shared"
Perl extension for sharing data structures between threads
.IP "utf8" 12
.IX Item "utf8"
Enable/disable \s-1UTF\-8 \s0(or UTF-EBCDIC) in source code
.IP "vars" 12
.IX Item "vars"
Predeclare global variable names
.IP "version" 12
.IX Item "version"
Perl extension for Version Objects
.IP "vmsish" 12
.IX Item "vmsish"
Control VMS-specific language features
.IP "warnings" 12
.IX Item "warnings"
Control optional warnings
.IP "warnings::register" 12
.IX Item "warnings::register"
Warnings import function
.SS "Standard Modules"
.IX Subsection "Standard Modules"
Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the
Exporter module.  See their own documentation for details.
.PP
It's possible that not all modules listed below are installed on your
system. For example, the GDBM_File module will not be installed if you
don't have the gdbm library.
.IP "AnyDBM_File" 12
.IX Item "AnyDBM_File"
Provide framework for multiple DBMs
.IP "App::Cpan" 12
.IX Item "App::Cpan"
Easily interact with \s-1CPAN\s0 from the command line
.IP "App::Prove" 12
.IX Item "App::Prove"
Implements the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State" 12
.IX Item "App::Prove::State"
State storage for the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State::Result" 12
.IX Item "App::Prove::State::Result"
Individual test suite results.
.IP "App::Prove::State::Result::Test" 12
.IX Item "App::Prove::State::Result::Test"
Individual test results.
.IP "Archive::Extract" 12
.IX Item "Archive::Extract"
A generic archive extracting mechanism
.IP "Archive::Tar" 12
.IX Item "Archive::Tar"
Module for manipulations of tar archives
.IP "Archive::Tar::File" 12
.IX Item "Archive::Tar::File"
A subclass for in-memory extracted file from Archive::Tar
.IP "Attribute::Handlers" 12
.IX Item "Attribute::Handlers"
Simpler definition of attribute handlers
.IP "AutoLoader" 12
.IX Item "AutoLoader"
Load subroutines only on demand
.IP "AutoSplit" 12
.IX Item "AutoSplit"
Split a package for autoloading
.IP "B" 12
.IX Item "B"
The Perl Compiler Backend
.IP "B::Concise" 12
.IX Item "B::Concise"
Walk Perl syntax tree, printing concise info about ops
.IP "B::Debug" 12
.IX Item "B::Debug"
Walk Perl syntax tree, printing debug info about ops
.IP "B::Deparse" 12
.IX Item "B::Deparse"
Perl compiler backend to produce perl code
.IP "B::Lint" 12
.IX Item "B::Lint"
Perl lint
.IP "B::Lint::Debug" 12
.IX Item "B::Lint::Debug"
Adds debugging stringification to B::
.IP "B::Showlex" 12
.IX Item "B::Showlex"
Show lexical variables used in functions or files
.IP "B::Terse" 12
.IX Item "B::Terse"
Walk Perl syntax tree, printing terse info about ops
.IP "B::Xref" 12
.IX Item "B::Xref"
Generates cross reference reports for Perl programs
.IP "Benchmark" 12
.IX Item "Benchmark"
Benchmark running times of Perl code
.ie n .IP """Socket""" 12
.el .IP "\f(CWSocket\fR" 12
.IX Item "Socket"
Networking constants and support functions
.IP "\s-1CGI\s0" 12
.IX Item "CGI"
Handle Common Gateway Interface requests and responses
.IP "CGI::Apache" 12
.IX Item "CGI::Apache"
Backward compatibility module for \s-1CGI\s0.pm
.IP "CGI::Carp" 12
.IX Item "CGI::Carp"
\&\s-1CGI\s0 routines for writing to the \s-1HTTPD \s0(or other) error log
.IP "CGI::Cookie" 12
.IX Item "CGI::Cookie"
Interface to \s-1HTTP\s0 Cookies
.IP "CGI::Fast" 12
.IX Item "CGI::Fast"
\&\s-1CGI\s0 Interface for Fast \s-1CGI\s0
.IP "CGI::Pretty" 12
.IX Item "CGI::Pretty"
Module to produce nicely formatted \s-1HTML\s0 code
.IP "CGI::Push" 12
.IX Item "CGI::Push"
Simple Interface to Server Push
.IP "CGI::Switch" 12
.IX Item "CGI::Switch"
Backward compatibility module for defunct CGI::Switch
.IP "CGI::Util" 12
.IX Item "CGI::Util"
Internal utilities used by \s-1CGI\s0 module
.IP "\s-1CORE\s0" 12
.IX Item "CORE"
Namespace for Perl's core routines
.IP "\s-1CPAN\s0" 12
.IX Item "CPAN"
Query, download and build perl modules from \s-1CPAN\s0 sites
.IP "\s-1CPAN::API::HOWTO\s0" 12
.IX Item "CPAN::API::HOWTO"
A recipe book for programming with \s-1CPAN\s0.pm
.IP "CPAN::Debug" 12
.IX Item "CPAN::Debug"
Internal debugging for \s-1CPAN\s0.pm
.IP "CPAN::Distroprefs" 12
.IX Item "CPAN::Distroprefs"
Read and match distroprefs
.IP "CPAN::FirstTime" 12
.IX Item "CPAN::FirstTime"
Utility for CPAN::Config file Initialization
.IP "CPAN::HandleConfig" 12
.IX Item "CPAN::HandleConfig"
Internal configuration handling for \s-1CPAN\s0.pm
.IP "CPAN::Kwalify" 12
.IX Item "CPAN::Kwalify"
Interface between \s-1CPAN\s0.pm and Kwalify.pm
.IP "CPAN::Meta" 12
.IX Item "CPAN::Meta"
The distribution metadata for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Converter" 12
.IX Item "CPAN::Meta::Converter"
Convert \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::Feature" 12
.IX Item "CPAN::Meta::Feature"
An optional feature provided by a \s-1CPAN\s0 distribution
.IP "CPAN::Meta::History" 12
.IX Item "CPAN::Meta::History"
History of \s-1CPAN\s0 Meta Spec changes
.IP "CPAN::Meta::Prereqs" 12
.IX Item "CPAN::Meta::Prereqs"
A set of distribution prerequisites by phase and type
.IP "CPAN::Meta::Requirements" 12
.IX Item "CPAN::Meta::Requirements"
A set of version requirements for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Spec" 12
.IX Item "CPAN::Meta::Spec"
Specification for \s-1CPAN\s0 distribution metadata
.IP "CPAN::Meta::Validator" 12
.IX Item "CPAN::Meta::Validator"
Validate \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::YAML" 12
.IX Item "CPAN::Meta::YAML"
Read and write a subset of \s-1YAML\s0 for \s-1CPAN\s0 Meta files
.IP "CPAN::Nox" 12
.IX Item "CPAN::Nox"
Wrapper around \s-1CPAN\s0.pm without using any \s-1XS\s0 module
.IP "CPAN::Queue" 12
.IX Item "CPAN::Queue"
Internal queue support for \s-1CPAN\s0.pm
.IP "CPAN::Tarzip" 12
.IX Item "CPAN::Tarzip"
Internal handling of tar archives for \s-1CPAN\s0.pm
.IP "CPAN::Version" 12
.IX Item "CPAN::Version"
Utility functions to compare \s-1CPAN\s0 versions
.IP "\s-1CPANPLUS\s0" 12
.IX Item "CPANPLUS"
\&\s-1API & CLI\s0 access to the \s-1CPAN\s0 mirrors
.IP "CPANPLUS::Backend" 12
.IX Item "CPANPLUS::Backend"
Programmer's interface to \s-1CPANPLUS\s0
.IP "CPANPLUS::Backend::RV" 12
.IX Item "CPANPLUS::Backend::RV"
Return value objects
.IP "CPANPLUS::Config" 12
.IX Item "CPANPLUS::Config"
Configuration defaults and heuristics for \s-1CPANPLUS\s0
.IP "CPANPLUS::Config::HomeEnv" 12
.IX Item "CPANPLUS::Config::HomeEnv"
Set the environment for the \s-1CPANPLUS\s0 base dir
.IP "CPANPLUS::Configure" 12
.IX Item "CPANPLUS::Configure"
Configuration for \s-1CPANPLUS\s0
.IP "CPANPLUS::Dist" 12
.IX Item "CPANPLUS::Dist"
Base class for plugins
.IP "CPANPLUS::Dist::Autobundle" 12
.IX Item "CPANPLUS::Dist::Autobundle"
Distribution class for installation snapshots
.IP "CPANPLUS::Dist::Base" 12
.IX Item "CPANPLUS::Dist::Base"
Base class for custom distribution classes
.IP "CPANPLUS::Dist::Build" 12
.IX Item "CPANPLUS::Dist::Build"
\&\s-1CPANPLUS\s0 plugin to install packages that use Build.PL
.IP "CPANPLUS::Dist::Build::Constants" 12
.IX Item "CPANPLUS::Dist::Build::Constants"
Constants for CPANPLUS::Dist::Build
.IP "CPANPLUS::Dist::MM" 12
.IX Item "CPANPLUS::Dist::MM"
Distribution class for MakeMaker related modules
.IP "CPANPLUS::Dist::Sample" 12
.IX Item "CPANPLUS::Dist::Sample"
Sample code to create your own Dist::* plugin
.IP "CPANPLUS::Error" 12
.IX Item "CPANPLUS::Error"
Error handling for \s-1CPANPLUS\s0
.IP "\s-1CPANPLUS::FAQ\s0" 12
.IX Item "CPANPLUS::FAQ"
\&\s-1CPANPLUS\s0 Frequently Asked Questions
.IP "CPANPLUS::Hacking" 12
.IX Item "CPANPLUS::Hacking"
Developing \s-1CPANPLUS\s0
.IP "CPANPLUS::Internals" 12
.IX Item "CPANPLUS::Internals"
\&\s-1CPANPLUS\s0 internals
.IP "CPANPLUS::Internals::Extract" 12
.IX Item "CPANPLUS::Internals::Extract"
Internals for archive extraction
.IP "CPANPLUS::Internals::Fetch" 12
.IX Item "CPANPLUS::Internals::Fetch"
Internals for fetching files
.IP "CPANPLUS::Internals::Report" 12
.IX Item "CPANPLUS::Internals::Report"
Internals for sending test reports
.IP "CPANPLUS::Internals::Search" 12
.IX Item "CPANPLUS::Internals::Search"
Internals for searching for modules
.IP "CPANPLUS::Internals::Source" 12
.IX Item "CPANPLUS::Internals::Source"
Internals for updating source files
.IP "CPANPLUS::Internals::Source::Memory" 12
.IX Item "CPANPLUS::Internals::Source::Memory"
In memory implementation
.IP "CPANPLUS::Internals::Source::SQLite" 12
.IX Item "CPANPLUS::Internals::Source::SQLite"
SQLite implementation
.IP "CPANPLUS::Internals::Utils" 12
.IX Item "CPANPLUS::Internals::Utils"
Convenience functions for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module" 12
.IX Item "CPANPLUS::Module"
\&\s-1CPAN\s0 module objects for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author" 12
.IX Item "CPANPLUS::Module::Author"
\&\s-1CPAN\s0 author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author::Fake" 12
.IX Item "CPANPLUS::Module::Author::Fake"
Dummy author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Checksums" 12
.IX Item "CPANPLUS::Module::Checksums"
Checking the checksum of a distribution
.IP "CPANPLUS::Module::Fake" 12
.IX Item "CPANPLUS::Module::Fake"
Fake module object for internal use
.IP "CPANPLUS::Selfupdate" 12
.IX Item "CPANPLUS::Selfupdate"
Self-updating for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell" 12
.IX Item "CPANPLUS::Shell"
Base class for \s-1CPANPLUS\s0 shells
.IP "CPANPLUS::Shell::Classic" 12
.IX Item "CPANPLUS::Shell::Classic"
\&\s-1CPAN\s0.pm emulation for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default" 12
.IX Item "CPANPLUS::Shell::Default"
The default \s-1CPANPLUS\s0 shell
.IP "CPANPLUS::Shell::Default::Plugins::CustomSource" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::CustomSource"
Add custom sources to \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::HOWTO" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::HOWTO"
Documentation on how to write your own plugins
.IP "CPANPLUS::Shell::Default::Plugins::Remote" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Remote"
Connect to a remote \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::Source" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Source"
Read in \s-1CPANPLUS\s0 commands
.IP "Carp" 12
.IX Item "Carp"
Alternative warn and die for modules
.IP "Class::Struct" 12
.IX Item "Class::Struct"
Declare struct-like datatypes as Perl classes
.IP "Compress::Raw::Bzip2" 12
.IX Item "Compress::Raw::Bzip2"
Low-Level Interface to bzip2 compression library
.IP "Compress::Raw::Zlib" 12
.IX Item "Compress::Raw::Zlib"
Low-Level Interface to zlib compression library
.IP "Compress::Zlib" 12
.IX Item "Compress::Zlib"
Interface to zlib compression library
.IP "Config" 12
.IX Item "Config"
Access Perl configuration information
.IP "Config::Perl::V" 12
.IX Item "Config::Perl::V"
Structured data retrieval of perl \-V output
.IP "Cwd" 12
.IX Item "Cwd"
Get pathname of current working directory
.IP "\s-1DB\s0" 12
.IX Item "DB"
Programmatic interface to the Perl debugging \s-1API\s0
.IP "DBM_Filter" 12
.IX Item "DBM_Filter"
Filter \s-1DBM\s0 keys/values
.IP "DBM_Filter::compress" 12
.IX Item "DBM_Filter::compress"
Filter for DBM_Filter
.IP "DBM_Filter::encode" 12
.IX Item "DBM_Filter::encode"
Filter for DBM_Filter
.IP "DBM_Filter::int32" 12
.IX Item "DBM_Filter::int32"
Filter for DBM_Filter
.IP "DBM_Filter::null" 12
.IX Item "DBM_Filter::null"
Filter for DBM_Filter
.IP "DBM_Filter::utf8" 12
.IX Item "DBM_Filter::utf8"
Filter for DBM_Filter
.IP "DB_File" 12
.IX Item "DB_File"
Perl5 access to Berkeley \s-1DB\s0 version 1.x
.IP "Data::Dumper" 12
.IX Item "Data::Dumper"
Stringified perl data structures, suitable for both printing and \f(CW\*(C`eval\*(C'\fR
.IP "Devel::InnerPackage" 12
.IX Item "Devel::InnerPackage"
Find all the inner packages of a package
.IP "Devel::PPPort" 12
.IX Item "Devel::PPPort"
Perl/Pollution/Portability
.IP "Devel::Peek" 12
.IX Item "Devel::Peek"
A data debugging tool for the \s-1XS\s0 programmer
.IP "Devel::SelfStubber" 12
.IX Item "Devel::SelfStubber"
Generate stubs for a SelfLoading module
.IP "Digest" 12
.IX Item "Digest"
Modules that calculate message digests
.IP "Digest::MD5" 12
.IX Item "Digest::MD5"
Perl interface to the \s-1MD5\s0 Algorithm
.IP "Digest::SHA" 12
.IX Item "Digest::SHA"
Perl extension for \s-1SHA\-1/224/256/384/512\s0
.IP "Digest::base" 12
.IX Item "Digest::base"
Digest base class
.IP "Digest::file" 12
.IX Item "Digest::file"
Calculate digests of files
.IP "DirHandle" 12
.IX Item "DirHandle"
Supply object methods for directory handles
.IP "Dumpvalue" 12
.IX Item "Dumpvalue"
Provides screen dump of Perl data.
.IP "DynaLoader" 12
.IX Item "DynaLoader"
Dynamically load C libraries into Perl code
.IP "Encode" 12
.IX Item "Encode"
Character encodings in Perl
.IP "Encode::Alias" 12
.IX Item "Encode::Alias"
Alias definitions to encodings
.IP "Encode::Byte" 12
.IX Item "Encode::Byte"
Single Byte Encodings
.IP "Encode::CJKConstants" 12
.IX Item "Encode::CJKConstants"
Internally used by Encode::??::ISO_2022_*
.IP "Encode::CN" 12
.IX Item "Encode::CN"
China-based Chinese Encodings
.IP "Encode::CN::HZ" 12
.IX Item "Encode::CN::HZ"
Internally used by Encode::CN
.IP "Encode::Config" 12
.IX Item "Encode::Config"
Internally used by Encode
.IP "Encode::EBCDIC" 12
.IX Item "Encode::EBCDIC"
\&\s-1EBCDIC\s0 Encodings
.IP "Encode::Encoder" 12
.IX Item "Encode::Encoder"
Object Oriented Encoder
.IP "Encode::Encoding" 12
.IX Item "Encode::Encoding"
Encode Implementation Base Class
.IP "Encode::GSM0338" 12
.IX Item "Encode::GSM0338"
\&\s-1ESTI GSM 03.38\s0 Encoding
.IP "Encode::Guess" 12
.IX Item "Encode::Guess"
Guesses encoding from data
.IP "Encode::JP" 12
.IX Item "Encode::JP"
Japanese Encodings
.IP "Encode::JP::H2Z" 12
.IX Item "Encode::JP::H2Z"
Internally used by Encode::JP::2022_JP*
.IP "Encode::JP::JIS7" 12
.IX Item "Encode::JP::JIS7"
Internally used by Encode::JP
.IP "Encode::KR" 12
.IX Item "Encode::KR"
Korean Encodings
.IP "Encode::KR::2022_KR" 12
.IX Item "Encode::KR::2022_KR"
Internally used by Encode::KR
.IP "Encode::MIME::Header" 12
.IX Item "Encode::MIME::Header"
\&\s-1MIME \s0'B' and 'Q' header encoding
.IP "Encode::MIME::Name" 12
.IX Item "Encode::MIME::Name"
Internally used by Encode
.IP "Encode::PerlIO" 12
.IX Item "Encode::PerlIO"
A detailed document on Encode and PerlIO
.IP "Encode::Supported" 12
.IX Item "Encode::Supported"
Encodings supported by Encode
.IP "Encode::Symbol" 12
.IX Item "Encode::Symbol"
Symbol Encodings
.IP "Encode::TW" 12
.IX Item "Encode::TW"
Taiwan-based Chinese Encodings
.IP "Encode::Unicode" 12
.IX Item "Encode::Unicode"
Various Unicode Transformation Formats
.IP "Encode::Unicode::UTF7" 12
.IX Item "Encode::Unicode::UTF7"
\&\s-1UTF\-7\s0 encoding
.IP "English" 12
.IX Item "English"
Use nice English (or awk) names for ugly punctuation variables
.IP "Env" 12
.IX Item "Env"
Perl module that imports environment variables as scalars or arrays
.IP "Errno" 12
.IX Item "Errno"
System errno constants
.IP "Exporter" 12
.IX Item "Exporter"
Implements default import method for modules
.IP "Exporter::Heavy" 12
.IX Item "Exporter::Heavy"
Exporter guts
.IP "ExtUtils::CBuilder" 12
.IX Item "ExtUtils::CBuilder"
Compile and link C code for Perl modules
.IP "ExtUtils::CBuilder::Platform::Windows" 12
.IX Item "ExtUtils::CBuilder::Platform::Windows"
Builder class for Windows platforms
.IP "ExtUtils::Command" 12
.IX Item "ExtUtils::Command"
Utilities to replace common \s-1UNIX\s0 commands in Makefiles etc.
.IP "ExtUtils::Command::MM" 12
.IX Item "ExtUtils::Command::MM"
Commands for the \s-1MM\s0's to use in Makefiles
.IP "ExtUtils::Constant" 12
.IX Item "ExtUtils::Constant"
Generate \s-1XS\s0 code to import C header constants
.IP "ExtUtils::Constant::Base" 12
.IX Item "ExtUtils::Constant::Base"
Base class for ExtUtils::Constant objects
.IP "ExtUtils::Constant::Utils" 12
.IX Item "ExtUtils::Constant::Utils"
Helper functions for ExtUtils::Constant
.IP "ExtUtils::Constant::XS" 12
.IX Item "ExtUtils::Constant::XS"
Generate C code for \s-1XS\s0 modules' constants.
.IP "ExtUtils::Embed" 12
.IX Item "ExtUtils::Embed"
Utilities for embedding Perl in C/\*(C+ applications
.IP "ExtUtils::Install" 12
.IX Item "ExtUtils::Install"
Install files from here to there
.IP "ExtUtils::Installed" 12
.IX Item "ExtUtils::Installed"
Inventory management of installed modules
.IP "ExtUtils::Liblist" 12
.IX Item "ExtUtils::Liblist"
Determine libraries to use and how to use them
.IP "ExtUtils::MM" 12
.IX Item "ExtUtils::MM"
\&\s-1OS\s0 adjusted ExtUtils::MakeMaker subclass
.IP "ExtUtils::MM_AIX" 12
.IX Item "ExtUtils::MM_AIX"
\&\s-1AIX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Any" 12
.IX Item "ExtUtils::MM_Any"
Platform-agnostic \s-1MM\s0 methods
.IP "ExtUtils::MM_BeOS" 12
.IX Item "ExtUtils::MM_BeOS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Cygwin" 12
.IX Item "ExtUtils::MM_Cygwin"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_DOS" 12
.IX Item "ExtUtils::MM_DOS"
\&\s-1DOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Darwin" 12
.IX Item "ExtUtils::MM_Darwin"
Special behaviors for \s-1OS X\s0
.IP "ExtUtils::MM_MacOS" 12
.IX Item "ExtUtils::MM_MacOS"
Once produced Makefiles for MacOS Classic
.IP "ExtUtils::MM_NW5" 12
.IX Item "ExtUtils::MM_NW5"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_OS2" 12
.IX Item "ExtUtils::MM_OS2"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_QNX" 12
.IX Item "ExtUtils::MM_QNX"
\&\s-1QNX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_UWIN" 12
.IX Item "ExtUtils::MM_UWIN"
U/WIN specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Unix" 12
.IX Item "ExtUtils::MM_Unix"
Methods used by ExtUtils::MakeMaker
.IP "ExtUtils::MM_VMS" 12
.IX Item "ExtUtils::MM_VMS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_VOS" 12
.IX Item "ExtUtils::MM_VOS"
\&\s-1VOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Win32" 12
.IX Item "ExtUtils::MM_Win32"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Win95" 12
.IX Item "ExtUtils::MM_Win95"
Method to customize MakeMaker for Win9X
.IP "ExtUtils::MY" 12
.IX Item "ExtUtils::MY"
ExtUtils::MakeMaker subclass for customization
.IP "ExtUtils::MakeMaker" 12
.IX Item "ExtUtils::MakeMaker"
Create a module Makefile
.IP "ExtUtils::MakeMaker::Config" 12
.IX Item "ExtUtils::MakeMaker::Config"
Wrapper around Config.pm
.IP "ExtUtils::MakeMaker::FAQ" 12
.IX Item "ExtUtils::MakeMaker::FAQ"
Frequently Asked Questions About MakeMaker
.IP "ExtUtils::MakeMaker::Tutorial" 12
.IX Item "ExtUtils::MakeMaker::Tutorial"
Writing a module with MakeMaker
.IP "ExtUtils::Manifest" 12
.IX Item "ExtUtils::Manifest"
Utilities to write and check a \s-1MANIFEST\s0 file
.IP "ExtUtils::Mkbootstrap" 12
.IX Item "ExtUtils::Mkbootstrap"
Make a bootstrap file for use by DynaLoader
.IP "ExtUtils::Mksymlists" 12
.IX Item "ExtUtils::Mksymlists"
Write linker options files for dynamic extension
.IP "ExtUtils::Packlist" 12
.IX Item "ExtUtils::Packlist"
Manage .packlist files
.IP "ExtUtils::ParseXS" 12
.IX Item "ExtUtils::ParseXS"
Converts Perl \s-1XS\s0 code into C code
.IP "ExtUtils::ParseXS::Constants" 12
.IX Item "ExtUtils::ParseXS::Constants"
Initialization values for some globals
.IP "ExtUtils::ParseXS::Utilities" 12
.IX Item "ExtUtils::ParseXS::Utilities"
Subroutines used with ExtUtils::ParseXS
.IP "ExtUtils::Typemaps" 12
.IX Item "ExtUtils::Typemaps"
Read/Write/Modify Perl/XS typemap files
.IP "ExtUtils::Typemaps::Cmd" 12
.IX Item "ExtUtils::Typemaps::Cmd"
Quick commands for handling typemaps
.IP "ExtUtils::Typemaps::InputMap" 12
.IX Item "ExtUtils::Typemaps::InputMap"
Entry in the \s-1INPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::OutputMap" 12
.IX Item "ExtUtils::Typemaps::OutputMap"
Entry in the \s-1OUTPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::Type" 12
.IX Item "ExtUtils::Typemaps::Type"
Entry in the \s-1TYPEMAP\s0 section of a typemap
.IP "ExtUtils::XSSymSet" 12
.IX Item "ExtUtils::XSSymSet"
Keep sets of symbol names palatable to the \s-1VMS\s0 linker
.IP "ExtUtils::testlib" 12
.IX Item "ExtUtils::testlib"
Add blib/* directories to \f(CW@INC\fR
.IP "Fatal" 12
.IX Item "Fatal"
Replace functions with equivalents which succeed or die
.IP "Fcntl" 12
.IX Item "Fcntl"
Load the C Fcntl.h defines
.IP "File::Basename" 12
.IX Item "File::Basename"
Parse file paths into directory, filename and suffix.
.IP "File::CheckTree" 12
.IX Item "File::CheckTree"
Run many filetest checks on a tree
.IP "File::Compare" 12
.IX Item "File::Compare"
Compare files or filehandles
.IP "File::Copy" 12
.IX Item "File::Copy"
Copy files or filehandles
.IP "File::DosGlob" 12
.IX Item "File::DosGlob"
\&\s-1DOS\s0 like globbing and then some
.IP "File::Fetch" 12
.IX Item "File::Fetch"
A generic file fetching mechanism
.IP "File::Find" 12
.IX Item "File::Find"
Traverse a directory tree.
.IP "File::Glob" 12
.IX Item "File::Glob"
Perl extension for \s-1BSD\s0 glob routine
.IP "File::GlobMapper" 12
.IX Item "File::GlobMapper"
Extend File Glob to Allow Input and Output Files
.IP "File::Path" 12
.IX Item "File::Path"
Create or remove directory trees
.IP "File::Spec" 12
.IX Item "File::Spec"
Portably perform operations on file names
.IP "File::Spec::Cygwin" 12
.IX Item "File::Spec::Cygwin"
Methods for Cygwin file specs
.IP "File::Spec::Epoc" 12
.IX Item "File::Spec::Epoc"
Methods for Epoc file specs
.IP "File::Spec::Functions" 12
.IX Item "File::Spec::Functions"
Portably perform operations on file names
.IP "File::Spec::Mac" 12
.IX Item "File::Spec::Mac"
File::Spec for Mac \s-1OS \s0(Classic)
.IP "File::Spec::OS2" 12
.IX Item "File::Spec::OS2"
Methods for \s-1OS/2\s0 file specs
.IP "File::Spec::Unix" 12
.IX Item "File::Spec::Unix"
File::Spec for Unix, base for other File::Spec modules
.IP "File::Spec::VMS" 12
.IX Item "File::Spec::VMS"
Methods for \s-1VMS\s0 file specs
.IP "File::Spec::Win32" 12
.IX Item "File::Spec::Win32"
Methods for Win32 file specs
.IP "File::Temp" 12
.IX Item "File::Temp"
Return name and handle of a temporary file safely
.IP "File::stat" 12
.IX Item "File::stat"
By-name interface to Perl's built-in \fIstat()\fR functions
.IP "FileCache" 12
.IX Item "FileCache"
Keep more files open than the system permits
.IP "FileHandle" 12
.IX Item "FileHandle"
Supply object methods for filehandles
.IP "Filter::Simple" 12
.IX Item "Filter::Simple"
Simplified source filtering
.IP "Filter::Util::Call" 12
.IX Item "Filter::Util::Call"
Perl Source Filter Utility Module
.IP "FindBin" 12
.IX Item "FindBin"
Locate directory of original perl script
.IP "GDBM_File" 12
.IX Item "GDBM_File"
Perl5 access to the gdbm library.
.IP "Getopt::Long" 12
.IX Item "Getopt::Long"
Extended processing of command line options
.IP "Getopt::Std" 12
.IX Item "Getopt::Std"
Process single-character switches with switch clustering
.IP "HTTP::Tiny" 12
.IX Item "HTTP::Tiny"
A small, simple, correct \s-1HTTP/1.1\s0 client
.IP "Hash::Util" 12
.IX Item "Hash::Util"
A selection of general-utility hash subroutines
.IP "Hash::Util::FieldHash" 12
.IX Item "Hash::Util::FieldHash"
Support for Inside-Out Classes
.IP "I18N::Collate" 12
.IX Item "I18N::Collate"
Compare 8\-bit scalar data according to the current locale
.IP "I18N::LangTags" 12
.IX Item "I18N::LangTags"
Functions for dealing with RFC3066\-style language tags
.IP "I18N::LangTags::Detect" 12
.IX Item "I18N::LangTags::Detect"
Detect the user's language preferences
.IP "I18N::LangTags::List" 12
.IX Item "I18N::LangTags::List"
Tags and names for human languages
.IP "I18N::Langinfo" 12
.IX Item "I18N::Langinfo"
Query locale information
.IP "\s-1IO\s0" 12
.IX Item "IO"
Load various \s-1IO\s0 modules
.IP "IO::Compress::Base" 12
.IX Item "IO::Compress::Base"
Base Class for IO::Compress modules
.IP "IO::Compress::Bzip2" 12
.IX Item "IO::Compress::Bzip2"
Write bzip2 files/buffers
.IP "IO::Compress::Deflate" 12
.IX Item "IO::Compress::Deflate"
Write \s-1RFC 1950\s0 files/buffers
.IP "IO::Compress::FAQ" 12
.IX Item "IO::Compress::FAQ"
Frequently Asked Questions about IO::Compress
.IP "IO::Compress::Gzip" 12
.IX Item "IO::Compress::Gzip"
Write \s-1RFC 1952\s0 files/buffers
.IP "IO::Compress::RawDeflate" 12
.IX Item "IO::Compress::RawDeflate"
Write \s-1RFC 1951\s0 files/buffers
.IP "IO::Compress::Zip" 12
.IX Item "IO::Compress::Zip"
Write zip files/buffers
.IP "IO::Dir" 12
.IX Item "IO::Dir"
Supply object methods for directory handles
.IP "IO::File" 12
.IX Item "IO::File"
Supply object methods for filehandles
.IP "IO::Handle" 12
.IX Item "IO::Handle"
Supply object methods for I/O handles
.IP "IO::Pipe" 12
.IX Item "IO::Pipe"
Supply object methods for pipes
.IP "IO::Poll" 12
.IX Item "IO::Poll"
Object interface to system poll call
.IP "IO::Seekable" 12
.IX Item "IO::Seekable"
Supply seek based methods for I/O objects
.IP "IO::Select" 12
.IX Item "IO::Select"
\&\s-1OO\s0 interface to the select system call
.IP "IO::Socket" 12
.IX Item "IO::Socket"
Object interface to socket communications
.IP "IO::Socket::INET" 12
.IX Item "IO::Socket::INET"
Object interface for \s-1AF_INET\s0 domain sockets
.IP "IO::Socket::UNIX" 12
.IX Item "IO::Socket::UNIX"
Object interface for \s-1AF_UNIX\s0 domain sockets
.IP "IO::Uncompress::AnyInflate" 12
.IX Item "IO::Uncompress::AnyInflate"
Uncompress zlib-based (zip, gzip) file/buffer
.IP "IO::Uncompress::AnyUncompress" 12
.IX Item "IO::Uncompress::AnyUncompress"
Uncompress gzip, zip, bzip2 or lzop file/buffer
.IP "IO::Uncompress::Base" 12
.IX Item "IO::Uncompress::Base"
Base Class for IO::Uncompress modules
.IP "IO::Uncompress::Bunzip2" 12
.IX Item "IO::Uncompress::Bunzip2"
Read bzip2 files/buffers
.IP "IO::Uncompress::Gunzip" 12
.IX Item "IO::Uncompress::Gunzip"
Read \s-1RFC 1952\s0 files/buffers
.IP "IO::Uncompress::Inflate" 12
.IX Item "IO::Uncompress::Inflate"
Read \s-1RFC 1950\s0 files/buffers
.IP "IO::Uncompress::RawInflate" 12
.IX Item "IO::Uncompress::RawInflate"
Read \s-1RFC 1951\s0 files/buffers
.IP "IO::Uncompress::Unzip" 12
.IX Item "IO::Uncompress::Unzip"
Read zip files/buffers
.IP "IO::Zlib" 12
.IX Item "IO::Zlib"
\&\s-1IO::\s0 style interface to Compress::Zlib
.IP "IPC::Cmd" 12
.IX Item "IPC::Cmd"
Finding and running system commands made easy
.IP "IPC::Msg" 12
.IX Item "IPC::Msg"
SysV Msg \s-1IPC\s0 object class
.IP "IPC::Open2" 12
.IX Item "IPC::Open2"
Open a process for both reading and writing using \fIopen2()\fR
.IP "IPC::Open3" 12
.IX Item "IPC::Open3"
Open a process for reading, writing, and error handling using \fIopen3()\fR
.IP "IPC::Semaphore" 12
.IX Item "IPC::Semaphore"
SysV Semaphore \s-1IPC\s0 object class
.IP "IPC::SharedMem" 12
.IX Item "IPC::SharedMem"
SysV Shared Memory \s-1IPC\s0 object class
.IP "IPC::SysV" 12
.IX Item "IPC::SysV"
System V \s-1IPC\s0 constants and system calls
.IP "\s-1JSON::PP\s0" 12
.IX Item "JSON::PP"
\&\s-1JSON::XS\s0 compatible pure-Perl module.
.IP "JSON::PP::Boolean" 12
.IX Item "JSON::PP::Boolean"
Dummy module providing JSON::PP::Boolean
.IP "List::Util" 12
.IX Item "List::Util"
A selection of general-utility list subroutines
.IP "List::Util::XS" 12
.IX Item "List::Util::XS"
Indicate if List::Util was compiled with a C compiler
.IP "Locale::Codes" 12
.IX Item "Locale::Codes"
A distribution of modules to handle locale codes
.IP "Locale::Codes::API" 12
.IX Item "Locale::Codes::API"
A description of the callable function in each module
.IP "Locale::Codes::Changes" 12
.IX Item "Locale::Codes::Changes"
Details changes to Locale::Codes
.IP "Locale::Codes::Constants" 12
.IX Item "Locale::Codes::Constants"
Constants for Locale codes
.IP "Locale::Codes::Country" 12
.IX Item "Locale::Codes::Country"
Standard codes for country identification
.IP "Locale::Codes::Country_Codes" 12
.IX Item "Locale::Codes::Country_Codes"
Country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Country_Retired" 12
.IX Item "Locale::Codes::Country_Retired"
Retired country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Currency" 12
.IX Item "Locale::Codes::Currency"
Standard codes for currency identification
.IP "Locale::Codes::Currency_Codes" 12
.IX Item "Locale::Codes::Currency_Codes"
Currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::Currency_Retired" 12
.IX Item "Locale::Codes::Currency_Retired"
Retired currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::LangExt" 12
.IX Item "Locale::Codes::LangExt"
Standard codes for language extension identification
.IP "Locale::Codes::LangExt_Codes" 12
.IX Item "Locale::Codes::LangExt_Codes"
Langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangExt_Retired" 12
.IX Item "Locale::Codes::LangExt_Retired"
Retired langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangFam" 12
.IX Item "Locale::Codes::LangFam"
Standard codes for language extension identification
.IP "Locale::Codes::LangFam_Codes" 12
.IX Item "Locale::Codes::LangFam_Codes"
Langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangFam_Retired" 12
.IX Item "Locale::Codes::LangFam_Retired"
Retired langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangVar" 12
.IX Item "Locale::Codes::LangVar"
Standard codes for language variation identification
.IP "Locale::Codes::LangVar_Codes" 12
.IX Item "Locale::Codes::LangVar_Codes"
Langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::LangVar_Retired" 12
.IX Item "Locale::Codes::LangVar_Retired"
Retired langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::Language" 12
.IX Item "Locale::Codes::Language"
Standard codes for language identification
.IP "Locale::Codes::Language_Codes" 12
.IX Item "Locale::Codes::Language_Codes"
Language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Language_Retired" 12
.IX Item "Locale::Codes::Language_Retired"
Retired language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Script" 12
.IX Item "Locale::Codes::Script"
Standard codes for script identification
.IP "Locale::Codes::Script_Codes" 12
.IX Item "Locale::Codes::Script_Codes"
Script codes for the Locale::Codes::Script module
.IP "Locale::Codes::Script_Retired" 12
.IX Item "Locale::Codes::Script_Retired"
Retired script codes for the Locale::Codes::Script module
.IP "Locale::Country" 12
.IX Item "Locale::Country"
Standard codes for country identification
.IP "Locale::Currency" 12
.IX Item "Locale::Currency"
Standard codes for currency identification
.IP "Locale::Language" 12
.IX Item "Locale::Language"
Standard codes for language identification
.IP "Locale::Maketext" 12
.IX Item "Locale::Maketext"
Framework for localization
.IP "Locale::Maketext::Cookbook" 12
.IX Item "Locale::Maketext::Cookbook"
Recipes for using Locale::Maketext
.IP "Locale::Maketext::Guts" 12
.IX Item "Locale::Maketext::Guts"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::GutsLoader" 12
.IX Item "Locale::Maketext::GutsLoader"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::Simple" 12
.IX Item "Locale::Maketext::Simple"
Simple interface to Locale::Maketext::Lexicon
.IP "Locale::Maketext::TPJ13" 12
.IX Item "Locale::Maketext::TPJ13"
Article about software localization
.IP "Locale::Script" 12
.IX Item "Locale::Script"
Standard codes for script identification
.IP "Log::Message" 12
.IX Item "Log::Message"
A generic message storing mechanism;
.IP "Log::Message::Config" 12
.IX Item "Log::Message::Config"
Configuration options for Log::Message
.IP "Log::Message::Handlers" 12
.IX Item "Log::Message::Handlers"
Message handlers for Log::Message
.IP "Log::Message::Item" 12
.IX Item "Log::Message::Item"
Message objects for Log::Message
.IP "Log::Message::Simple" 12
.IX Item "Log::Message::Simple"
Simplified interface to Log::Message
.IP "MIME::Base64" 12
.IX Item "MIME::Base64"
Encoding and decoding of base64 strings
.IP "MIME::QuotedPrint" 12
.IX Item "MIME::QuotedPrint"
Encoding and decoding of quoted-printable strings
.IP "Math::BigFloat" 12
.IX Item "Math::BigFloat"
Arbitrary size floating point math package
.IP "Math::BigInt" 12
.IX Item "Math::BigInt"
Arbitrary size integer/float math package
.IP "Math::BigInt::Calc" 12
.IX Item "Math::BigInt::Calc"
Pure Perl module to support Math::BigInt
.IP "Math::BigInt::CalcEmu" 12
.IX Item "Math::BigInt::CalcEmu"
Emulate low-level math with BigInt code
.IP "Math::BigInt::FastCalc" 12
.IX Item "Math::BigInt::FastCalc"
Math::BigInt::Calc with some \s-1XS\s0 for more speed
.IP "Math::BigRat" 12
.IX Item "Math::BigRat"
Arbitrary big rational numbers
.IP "Math::Complex" 12
.IX Item "Math::Complex"
Complex numbers and associated mathematical functions
.IP "Math::Trig" 12
.IX Item "Math::Trig"
Trigonometric functions
.IP "Memoize" 12
.IX Item "Memoize"
Make functions faster by trading space for time
.IP "Memoize::AnyDBM_File" 12
.IX Item "Memoize::AnyDBM_File"
Glue to provide \s-1EXISTS\s0 for AnyDBM_File for Storable use
.IP "Memoize::Expire" 12
.IX Item "Memoize::Expire"
Plug-in module for automatic expiration of memoized values
.IP "Memoize::ExpireFile" 12
.IX Item "Memoize::ExpireFile"
Test for Memoize expiration semantics
.IP "Memoize::ExpireTest" 12
.IX Item "Memoize::ExpireTest"
Test for Memoize expiration semantics
.IP "Memoize::NDBM_File" 12
.IX Item "Memoize::NDBM_File"
Glue to provide \s-1EXISTS\s0 for NDBM_File for Storable use
.IP "Memoize::SDBM_File" 12
.IX Item "Memoize::SDBM_File"
Glue to provide \s-1EXISTS\s0 for SDBM_File for Storable use
.IP "Memoize::Storable" 12
.IX Item "Memoize::Storable"
Store Memoized data in Storable database
.IP "Module::Build" 12
.IX Item "Module::Build"
Build and install Perl modules
.IP "Module::Build::API" 12
.IX Item "Module::Build::API"
\&\s-1API\s0 Reference for Module Authors
.IP "Module::Build::Authoring" 12
.IX Item "Module::Build::Authoring"
Authoring Module::Build modules
.IP "Module::Build::Base" 12
.IX Item "Module::Build::Base"
Default methods for Module::Build
.IP "Module::Build::Bundling" 12
.IX Item "Module::Build::Bundling"
How to bundle Module::Build with a distribution
.IP "Module::Build::Compat" 12
.IX Item "Module::Build::Compat"
Compatibility with ExtUtils::MakeMaker
.IP "Module::Build::ConfigData" 12
.IX Item "Module::Build::ConfigData"
Configuration for Module::Build
.IP "Module::Build::Cookbook" 12
.IX Item "Module::Build::Cookbook"
Examples of Module::Build Usage
.IP "Module::Build::ModuleInfo" 12
.IX Item "Module::Build::ModuleInfo"
\&\s-1DEPRECATED\s0
.IP "Module::Build::Notes" 12
.IX Item "Module::Build::Notes"
Create persistent distribution configuration modules
.IP "Module::Build::PPMMaker" 12
.IX Item "Module::Build::PPMMaker"
Perl Package Manager file creation
.IP "Module::Build::Platform::Amiga" 12
.IX Item "Module::Build::Platform::Amiga"
Builder class for Amiga platforms
.IP "Module::Build::Platform::Default" 12
.IX Item "Module::Build::Platform::Default"
Stub class for unknown platforms
.IP "Module::Build::Platform::EBCDIC" 12
.IX Item "Module::Build::Platform::EBCDIC"
Builder class for \s-1EBCDIC\s0 platforms
.IP "Module::Build::Platform::MPEiX" 12
.IX Item "Module::Build::Platform::MPEiX"
Builder class for MPEiX platforms
.IP "Module::Build::Platform::MacOS" 12
.IX Item "Module::Build::Platform::MacOS"
Builder class for MacOS platforms
.IP "Module::Build::Platform::RiscOS" 12
.IX Item "Module::Build::Platform::RiscOS"
Builder class for RiscOS platforms
.IP "Module::Build::Platform::Unix" 12
.IX Item "Module::Build::Platform::Unix"
Builder class for Unix platforms
.IP "Module::Build::Platform::VMS" 12
.IX Item "Module::Build::Platform::VMS"
Builder class for \s-1VMS\s0 platforms
.IP "Module::Build::Platform::VOS" 12
.IX Item "Module::Build::Platform::VOS"
Builder class for \s-1VOS\s0 platforms
.IP "Module::Build::Platform::Windows" 12
.IX Item "Module::Build::Platform::Windows"
Builder class for Windows platforms
.IP "Module::Build::Platform::aix" 12
.IX Item "Module::Build::Platform::aix"
Builder class for \s-1AIX\s0 platform
.IP "Module::Build::Platform::cygwin" 12
.IX Item "Module::Build::Platform::cygwin"
Builder class for Cygwin platform
.IP "Module::Build::Platform::darwin" 12
.IX Item "Module::Build::Platform::darwin"
Builder class for Mac \s-1OS X\s0 platform
.IP "Module::Build::Platform::os2" 12
.IX Item "Module::Build::Platform::os2"
Builder class for \s-1OS/2\s0 platform
.IP "Module::Build::Version" 12
.IX Item "Module::Build::Version"
\&\s-1DEPRECATED\s0
.IP "Module::Build::YAML" 12
.IX Item "Module::Build::YAML"
\&\s-1DEPRECATED\s0
.IP "Module::CoreList" 12
.IX Item "Module::CoreList"
What modules shipped with versions of perl
.IP "Module::CoreList::Utils" 12
.IX Item "Module::CoreList::Utils"
What utilities shipped with versions of perl
.IP "Module::Load" 12
.IX Item "Module::Load"
Runtime require of both modules and files
.IP "Module::Load::Conditional" 12
.IX Item "Module::Load::Conditional"
Looking up module information / loading at runtime
.IP "Module::Loaded" 12
.IX Item "Module::Loaded"
Mark modules as loaded or unloaded
.IP "Module::Metadata" 12
.IX Item "Module::Metadata"
Gather package and \s-1POD\s0 information from perl module files
.IP "Module::Pluggable" 12
.IX Item "Module::Pluggable"
Automatically give your module the ability to have plugins
.IP "Module::Pluggable::Object" 12
.IX Item "Module::Pluggable::Object"
Automatically give your module the ability to have plugins
.IP "NDBM_File" 12
.IX Item "NDBM_File"
Tied access to ndbm files
.IP "\s-1NEXT\s0" 12
.IX Item "NEXT"
Provide a pseudo-class \s-1NEXT \s0(et al) that allows method redispatch
.IP "Net::Cmd" 12
.IX Item "Net::Cmd"
Network Command class (as used by \s-1FTP, SMTP\s0 etc)
.IP "Net::Config" 12
.IX Item "Net::Config"
Local configuration data for libnet
.IP "Net::Domain" 12
.IX Item "Net::Domain"
Attempt to evaluate the current host's internet name and domain
.IP "Net::FTP" 12
.IX Item "Net::FTP"
\&\s-1FTP\s0 Client class
.IP "Net::NNTP" 12
.IX Item "Net::NNTP"
\&\s-1NNTP\s0 Client class
.IP "Net::Netrc" 12
.IX Item "Net::Netrc"
\&\s-1OO\s0 interface to users netrc file
.IP "Net::POP3" 12
.IX Item "Net::POP3"
Post Office Protocol 3 Client class (\s-1RFC1939\s0)
.IP "Net::Ping" 12
.IX Item "Net::Ping"
Check a remote host for reachability
.IP "Net::SMTP" 12
.IX Item "Net::SMTP"
Simple Mail Transfer Protocol Client
.IP "Net::Time" 12
.IX Item "Net::Time"
Time and daytime network client interface
.IP "Net::hostent" 12
.IX Item "Net::hostent"
By-name interface to Perl's built-in gethost*() functions
.IP "Net::libnetFAQ" 12
.IX Item "Net::libnetFAQ"
Libnet Frequently Asked Questions
.IP "Net::netent" 12
.IX Item "Net::netent"
By-name interface to Perl's built-in getnet*() functions
.IP "Net::protoent" 12
.IX Item "Net::protoent"
By-name interface to Perl's built-in getproto*() functions
.IP "Net::servent" 12
.IX Item "Net::servent"
By-name interface to Perl's built-in getserv*() functions
.IP "O" 12
.IX Item "O"
Generic interface to Perl Compiler backends
.IP "ODBM_File" 12
.IX Item "ODBM_File"
Tied access to odbm files
.IP "Object::Accessor" 12
.IX Item "Object::Accessor"
Interface to create per object accessors
.IP "Opcode" 12
.IX Item "Opcode"
Disable named opcodes when compiling perl code
.IP "\s-1POSIX\s0" 12
.IX Item "POSIX"
Perl interface to \s-1IEEE\s0 Std 1003.1
.IP "Package::Constants" 12
.IX Item "Package::Constants"
List all constants declared in a package
.IP "Params::Check" 12
.IX Item "Params::Check"
A generic input parsing/checking mechanism.
.IP "Parse::CPAN::Meta" 12
.IX Item "Parse::CPAN::Meta"
Parse \s-1META\s0.yml and \s-1META\s0.json \s-1CPAN\s0 metadata files
.IP "Perl::OSType" 12
.IX Item "Perl::OSType"
Map Perl operating system names to generic types
.IP "PerlIO" 12
.IX Item "PerlIO"
On demand loader for PerlIO layers and root of PerlIO::* name space
.IP "PerlIO::encoding" 12
.IX Item "PerlIO::encoding"
Encoding layer
.IP "PerlIO::mmap" 12
.IX Item "PerlIO::mmap"
Memory mapped \s-1IO\s0
.IP "PerlIO::scalar" 12
.IX Item "PerlIO::scalar"
In-memory \s-1IO,\s0 scalar \s-1IO\s0
.IP "PerlIO::via" 12
.IX Item "PerlIO::via"
Helper class for PerlIO layers implemented in perl
.IP "PerlIO::via::QuotedPrint" 12
.IX Item "PerlIO::via::QuotedPrint"
PerlIO layer for quoted-printable strings
.IP "Pod::Escapes" 12
.IX Item "Pod::Escapes"
For resolving Pod E<...> sequences
.IP "Pod::Functions" 12
.IX Item "Pod::Functions"
Group Perl's functions a la perlfunc.pod
.IP "Pod::Html" 12
.IX Item "Pod::Html"
Module to convert pod files to \s-1HTML\s0
.IP "Pod::LaTeX" 12
.IX Item "Pod::LaTeX"
Convert Pod data to formatted Latex
.IP "Pod::Man" 12
.IX Item "Pod::Man"
Convert \s-1POD\s0 data to formatted *roff input
.IP "Pod::ParseLink" 12
.IX Item "Pod::ParseLink"
Parse an L<> formatting code in \s-1POD\s0 text
.IP "Pod::Perldoc" 12
.IX Item "Pod::Perldoc"
Look up Perl documentation in Pod format.
.IP "Pod::Perldoc::BaseTo" 12
.IX Item "Pod::Perldoc::BaseTo"
Base for Pod::Perldoc formatters
.IP "Pod::Perldoc::GetOptsOO" 12
.IX Item "Pod::Perldoc::GetOptsOO"
Customized option parser for Pod::Perldoc
.IP "Pod::Perldoc::ToANSI" 12
.IX Item "Pod::Perldoc::ToANSI"
Render Pod with \s-1ANSI\s0 color escapes
.IP "Pod::Perldoc::ToChecker" 12
.IX Item "Pod::Perldoc::ToChecker"
Let Perldoc check Pod for errors
.IP "Pod::Perldoc::ToMan" 12
.IX Item "Pod::Perldoc::ToMan"
Let Perldoc render Pod as man pages
.IP "Pod::Perldoc::ToNroff" 12
.IX Item "Pod::Perldoc::ToNroff"
Let Perldoc convert Pod to nroff
.IP "Pod::Perldoc::ToPod" 12
.IX Item "Pod::Perldoc::ToPod"
Let Perldoc render Pod as ... Pod!
.IP "Pod::Perldoc::ToRtf" 12
.IX Item "Pod::Perldoc::ToRtf"
Let Perldoc render Pod as \s-1RTF\s0
.IP "Pod::Perldoc::ToTerm" 12
.IX Item "Pod::Perldoc::ToTerm"
Render Pod with terminal escapes
.IP "Pod::Perldoc::ToText" 12
.IX Item "Pod::Perldoc::ToText"
Let Perldoc render Pod as plaintext
.IP "Pod::Perldoc::ToTk" 12
.IX Item "Pod::Perldoc::ToTk"
Let Perldoc use Tk::Pod to render Pod
.IP "Pod::Perldoc::ToXml" 12
.IX Item "Pod::Perldoc::ToXml"
Let Perldoc render Pod as \s-1XML\s0
.IP "Pod::Simple" 12
.IX Item "Pod::Simple"
Framework for parsing Pod
.IP "Pod::Simple::Checker" 12
.IX Item "Pod::Simple::Checker"
Check the Pod syntax of a document
.IP "Pod::Simple::Debug" 12
.IX Item "Pod::Simple::Debug"
Put Pod::Simple into trace/debug mode
.IP "Pod::Simple::DumpAsText" 12
.IX Item "Pod::Simple::DumpAsText"
Dump Pod-parsing events as text
.IP "Pod::Simple::DumpAsXML" 12
.IX Item "Pod::Simple::DumpAsXML"
Turn Pod into \s-1XML\s0
.IP "Pod::Simple::HTML" 12
.IX Item "Pod::Simple::HTML"
Convert Pod to \s-1HTML\s0
.IP "Pod::Simple::HTMLBatch" 12
.IX Item "Pod::Simple::HTMLBatch"
Convert several Pod files to several \s-1HTML\s0 files
.IP "Pod::Simple::LinkSection" 12
.IX Item "Pod::Simple::LinkSection"
Represent \*(L"section\*(R" attributes of L codes
.IP "Pod::Simple::Methody" 12
.IX Item "Pod::Simple::Methody"
Turn Pod::Simple events into method calls
.IP "Pod::Simple::PullParser" 12
.IX Item "Pod::Simple::PullParser"
A pull-parser interface to parsing Pod
.IP "Pod::Simple::PullParserEndToken" 12
.IX Item "Pod::Simple::PullParserEndToken"
End-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserStartToken" 12
.IX Item "Pod::Simple::PullParserStartToken"
Start-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserTextToken" 12
.IX Item "Pod::Simple::PullParserTextToken"
Text-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserToken" 12
.IX Item "Pod::Simple::PullParserToken"
Tokens from Pod::Simple::PullParser
.IP "Pod::Simple::RTF" 12
.IX Item "Pod::Simple::RTF"
Format Pod as \s-1RTF\s0
.IP "Pod::Simple::Search" 12
.IX Item "Pod::Simple::Search"
Find \s-1POD\s0 documents in directory trees
.IP "Pod::Simple::SimpleTree" 12
.IX Item "Pod::Simple::SimpleTree"
Parse Pod into a simple parse tree
.IP "Pod::Simple::Subclassing" 12
.IX Item "Pod::Simple::Subclassing"
Write a formatter as a Pod::Simple subclass
.IP "Pod::Simple::Text" 12
.IX Item "Pod::Simple::Text"
Format Pod as plaintext
.IP "Pod::Simple::TextContent" 12
.IX Item "Pod::Simple::TextContent"
Get the text content of Pod
.IP "Pod::Simple::XHTML" 12
.IX Item "Pod::Simple::XHTML"
Format Pod as validating \s-1XHTML\s0
.IP "Pod::Simple::XMLOutStream" 12
.IX Item "Pod::Simple::XMLOutStream"
Turn Pod into \s-1XML\s0
.IP "Pod::Text" 12
.IX Item "Pod::Text"
Convert \s-1POD\s0 data to formatted \s-1ASCII\s0 text
.IP "Pod::Text::Color" 12
.IX Item "Pod::Text::Color"
Convert \s-1POD\s0 data to formatted color \s-1ASCII\s0 text
.IP "Pod::Text::Termcap" 12
.IX Item "Pod::Text::Termcap"
Convert \s-1POD\s0 data to \s-1ASCII\s0 text with format escapes
.IP "SDBM_File" 12
.IX Item "SDBM_File"
Tied access to sdbm files
.IP "Safe" 12
.IX Item "Safe"
Compile and execute code in restricted compartments
.IP "Scalar::Util" 12
.IX Item "Scalar::Util"
A selection of general-utility scalar subroutines
.IP "Search::Dict" 12
.IX Item "Search::Dict"
Look \- search for key in dictionary file
.IP "SelectSaver" 12
.IX Item "SelectSaver"
Save and restore selected file handle
.IP "SelfLoader" 12
.IX Item "SelfLoader"
Load functions only on demand
.IP "Storable" 12
.IX Item "Storable"
Persistence for Perl data structures
.IP "Symbol" 12
.IX Item "Symbol"
Manipulate Perl symbols and their names
.IP "Sys::Hostname" 12
.IX Item "Sys::Hostname"
Try every conceivable way to get hostname
.IP "Sys::Syslog" 12
.IX Item "Sys::Syslog"
Perl interface to the \s-1UNIX\s0 \fIsyslog\fR\|(3) calls
.IP "Sys::Syslog::Win32" 12
.IX Item "Sys::Syslog::Win32"
Win32 support for Sys::Syslog
.IP "TAP::Base" 12
.IX Item "TAP::Base"
Base class that provides common functionality to TAP::Parser
.IP "TAP::Formatter::Base" 12
.IX Item "TAP::Formatter::Base"
Base class for harness output delegates
.IP "TAP::Formatter::Color" 12
.IX Item "TAP::Formatter::Color"
Run Perl test scripts with color
.IP "TAP::Formatter::Console" 12
.IX Item "TAP::Formatter::Console"
Harness output delegate for default console output
.IP "TAP::Formatter::Console::ParallelSession" 12
.IX Item "TAP::Formatter::Console::ParallelSession"
Harness output delegate for parallel console output
.IP "TAP::Formatter::Console::Session" 12
.IX Item "TAP::Formatter::Console::Session"
Harness output delegate for default console output
.IP "TAP::Formatter::File" 12
.IX Item "TAP::Formatter::File"
Harness output delegate for file output
.IP "TAP::Formatter::File::Session" 12
.IX Item "TAP::Formatter::File::Session"
Harness output delegate for file output
.IP "TAP::Formatter::Session" 12
.IX Item "TAP::Formatter::Session"
Abstract base class for harness output delegate
.IP "TAP::Harness" 12
.IX Item "TAP::Harness"
Run test scripts with statistics
.IP "TAP::Object" 12
.IX Item "TAP::Object"
Base class that provides common functionality to all \f(CW\*(C`TAP::*\*(C'\fR modules
.IP "TAP::Parser" 12
.IX Item "TAP::Parser"
Parse \s-1TAP\s0 output
.IP "TAP::Parser::Aggregator" 12
.IX Item "TAP::Parser::Aggregator"
Aggregate TAP::Parser results
.IP "TAP::Parser::Grammar" 12
.IX Item "TAP::Parser::Grammar"
A grammar for the Test Anything Protocol.
.IP "TAP::Parser::Iterator" 12
.IX Item "TAP::Parser::Iterator"
Base class for \s-1TAP\s0 source iterators
.IP "TAP::Parser::Iterator::Array" 12
.IX Item "TAP::Parser::Iterator::Array"
Iterator for array-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Process" 12
.IX Item "TAP::Parser::Iterator::Process"
Iterator for process-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Stream" 12
.IX Item "TAP::Parser::Iterator::Stream"
Iterator for filehandle-based \s-1TAP\s0 sources
.IP "TAP::Parser::IteratorFactory" 12
.IX Item "TAP::Parser::IteratorFactory"
Figures out which SourceHandler objects to use for a given Source
.IP "TAP::Parser::Multiplexer" 12
.IX Item "TAP::Parser::Multiplexer"
Multiplex multiple TAP::Parsers
.IP "TAP::Parser::Result" 12
.IX Item "TAP::Parser::Result"
Base class for TAP::Parser output objects
.IP "TAP::Parser::Result::Bailout" 12
.IX Item "TAP::Parser::Result::Bailout"
Bailout result token.
.IP "TAP::Parser::Result::Comment" 12
.IX Item "TAP::Parser::Result::Comment"
Comment result token.
.IP "TAP::Parser::Result::Plan" 12
.IX Item "TAP::Parser::Result::Plan"
Plan result token.
.IP "TAP::Parser::Result::Pragma" 12
.IX Item "TAP::Parser::Result::Pragma"
\&\s-1TAP\s0 pragma token.
.IP "TAP::Parser::Result::Test" 12
.IX Item "TAP::Parser::Result::Test"
Test result token.
.IP "TAP::Parser::Result::Unknown" 12
.IX Item "TAP::Parser::Result::Unknown"
Unknown result token.
.IP "TAP::Parser::Result::Version" 12
.IX Item "TAP::Parser::Result::Version"
\&\s-1TAP\s0 syntax version token.
.IP "TAP::Parser::Result::YAML" 12
.IX Item "TAP::Parser::Result::YAML"
\&\s-1YAML\s0 result token.
.IP "TAP::Parser::ResultFactory" 12
.IX Item "TAP::Parser::ResultFactory"
Factory for creating TAP::Parser output objects
.IP "TAP::Parser::Scheduler" 12
.IX Item "TAP::Parser::Scheduler"
Schedule tests during parallel testing
.IP "TAP::Parser::Scheduler::Job" 12
.IX Item "TAP::Parser::Scheduler::Job"
A single testing job.
.IP "TAP::Parser::Scheduler::Spinner" 12
.IX Item "TAP::Parser::Scheduler::Spinner"
A no-op job.
.IP "TAP::Parser::Source" 12
.IX Item "TAP::Parser::Source"
A \s-1TAP\s0 source & meta data about it
.IP "TAP::Parser::SourceHandler" 12
.IX Item "TAP::Parser::SourceHandler"
Base class for different \s-1TAP\s0 source handlers
.IP "TAP::Parser::SourceHandler::Executable" 12
.IX Item "TAP::Parser::SourceHandler::Executable"
Stream output from an executable \s-1TAP\s0 source
.IP "TAP::Parser::SourceHandler::File" 12
.IX Item "TAP::Parser::SourceHandler::File"
Stream \s-1TAP\s0 from a text file.
.IP "TAP::Parser::SourceHandler::Handle" 12
.IX Item "TAP::Parser::SourceHandler::Handle"
Stream \s-1TAP\s0 from an IO::Handle or a \s-1GLOB.\s0
.IP "TAP::Parser::SourceHandler::Perl" 12
.IX Item "TAP::Parser::SourceHandler::Perl"
Stream \s-1TAP\s0 from a Perl executable
.IP "TAP::Parser::SourceHandler::RawTAP" 12
.IX Item "TAP::Parser::SourceHandler::RawTAP"
Stream output from raw \s-1TAP\s0 in a scalar/array ref.
.IP "TAP::Parser::Utils" 12
.IX Item "TAP::Parser::Utils"
Internal TAP::Parser utilities
.IP "TAP::Parser::YAMLish::Reader" 12
.IX Item "TAP::Parser::YAMLish::Reader"
Read YAMLish data from iterator
.IP "TAP::Parser::YAMLish::Writer" 12
.IX Item "TAP::Parser::YAMLish::Writer"
Write YAMLish data
.IP "Term::ANSIColor" 12
.IX Item "Term::ANSIColor"
Color screen output using \s-1ANSI\s0 escape sequences
.IP "Term::Cap" 12
.IX Item "Term::Cap"
Perl termcap interface
.IP "Term::Complete" 12
.IX Item "Term::Complete"
Perl word completion module
.IP "Term::ReadLine" 12
.IX Item "Term::ReadLine"
Perl interface to various \f(CW\*(C`readline\*(C'\fR packages.
.IP "Term::UI" 12
.IX Item "Term::UI"
Term::ReadLine \s-1UI\s0 made easy
.IP "Term::UI::History" 12
.IX Item "Term::UI::History"
History function
.IP "Test" 12
.IX Item "Test"
Provides a simple framework for writing test scripts
.IP "Test::Builder" 12
.IX Item "Test::Builder"
Backend for building test libraries
.IP "Test::Builder::Module" 12
.IX Item "Test::Builder::Module"
Base class for test modules
.IP "Test::Builder::Tester" 12
.IX Item "Test::Builder::Tester"
Test testsuites that have been built with
.IP "Test::Builder::Tester::Color" 12
.IX Item "Test::Builder::Tester::Color"
Turn on colour in Test::Builder::Tester
.IP "Test::Harness" 12
.IX Item "Test::Harness"
Run Perl standard test scripts with statistics
.IP "Test::More" 12
.IX Item "Test::More"
Yet another framework for writing test scripts
.IP "Test::Simple" 12
.IX Item "Test::Simple"
Basic utilities for writing tests.
.IP "Test::Tutorial" 12
.IX Item "Test::Tutorial"
A tutorial about writing really basic tests
.IP "Text::Abbrev" 12
.IX Item "Text::Abbrev"
Abbrev \- create an abbreviation table from a list
.IP "Text::Balanced" 12
.IX Item "Text::Balanced"
Extract delimited text sequences from strings.
.IP "Text::ParseWords" 12
.IX Item "Text::ParseWords"
Parse text into an array of tokens or array of arrays
.IP "Text::Soundex" 12
.IX Item "Text::Soundex"
Implementation of the soundex algorithm.
.IP "Text::Tabs" 12
.IX Item "Text::Tabs"
Expand and unexpand tabs like unix \fIexpand\fR\|(1) and \fIunexpand\fR\|(1)
.IP "Text::Wrap" 12
.IX Item "Text::Wrap"
Line wrapping to form simple paragraphs
.IP "Thread" 12
.IX Item "Thread"
Manipulate threads in Perl (for old code only)
.IP "Thread::Queue" 12
.IX Item "Thread::Queue"
Thread-safe queues
.IP "Thread::Semaphore" 12
.IX Item "Thread::Semaphore"
Thread-safe semaphores
.IP "Tie::Array" 12
.IX Item "Tie::Array"
Base class for tied arrays
.IP "Tie::File" 12
.IX Item "Tie::File"
Access the lines of a disk file via a Perl array
.IP "Tie::Handle" 12
.IX Item "Tie::Handle"
Base class definitions for tied handles
.IP "Tie::Hash" 12
.IX Item "Tie::Hash"
Base class definitions for tied hashes
.IP "Tie::Hash::NamedCapture" 12
.IX Item "Tie::Hash::NamedCapture"
Named regexp capture buffers
.IP "Tie::Memoize" 12
.IX Item "Tie::Memoize"
Add data to hash when needed
.IP "Tie::RefHash" 12
.IX Item "Tie::RefHash"
Use references as hash keys
.IP "Tie::Scalar" 12
.IX Item "Tie::Scalar"
Base class definitions for tied scalars
.IP "Tie::StdHandle" 12
.IX Item "Tie::StdHandle"
Base class definitions for tied handles
.IP "Tie::SubstrHash" 12
.IX Item "Tie::SubstrHash"
Fixed-table-size, fixed-key-length hashing
.IP "Time::HiRes" 12
.IX Item "Time::HiRes"
High resolution alarm, sleep, gettimeofday, interval timers
.IP "Time::Local" 12
.IX Item "Time::Local"
Efficiently compute time from local and \s-1GMT\s0 time
.IP "Time::Piece" 12
.IX Item "Time::Piece"
Object Oriented time objects
.IP "Time::Seconds" 12
.IX Item "Time::Seconds"
A simple \s-1API\s0 to convert seconds to other date values
.IP "Time::gmtime" 12
.IX Item "Time::gmtime"
By-name interface to Perl's built-in \fIgmtime()\fR function
.IP "Time::localtime" 12
.IX Item "Time::localtime"
By-name interface to Perl's built-in \fIlocaltime()\fR function
.IP "Time::tm" 12
.IX Item "Time::tm"
Internal object used by Time::gmtime and Time::localtime
.IP "\s-1UNIVERSAL\s0" 12
.IX Item "UNIVERSAL"
Base class for \s-1ALL\s0 classes (blessed references)
.IP "Unicode::Collate" 12
.IX Item "Unicode::Collate"
Unicode Collation Algorithm
.IP "Unicode::Collate::CJK::Big5" 12
.IX Item "Unicode::Collate::CJK::Big5"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::GB2312" 12
.IX Item "Unicode::Collate::CJK::GB2312"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::JISX0208" 12
.IX Item "Unicode::Collate::CJK::JISX0208"
Weighting \s-1JIS KANJI\s0 for Unicode::Collate
.IP "Unicode::Collate::CJK::Korean" 12
.IX Item "Unicode::Collate::CJK::Korean"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Pinyin" 12
.IX Item "Unicode::Collate::CJK::Pinyin"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Stroke" 12
.IX Item "Unicode::Collate::CJK::Stroke"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Zhuyin" 12
.IX Item "Unicode::Collate::CJK::Zhuyin"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::Locale" 12
.IX Item "Unicode::Collate::Locale"
Linguistic tailoring for \s-1DUCET\s0 via Unicode::Collate
.IP "Unicode::Normalize" 12
.IX Item "Unicode::Normalize"
Unicode Normalization Forms
.IP "Unicode::UCD" 12
.IX Item "Unicode::UCD"
Unicode character database
.IP "User::grent" 12
.IX Item "User::grent"
By-name interface to Perl's built-in getgr*() functions
.IP "User::pwent" 12
.IX Item "User::pwent"
By-name interface to Perl's built-in getpw*() functions
.IP "VMS::DCLsym" 12
.IX Item "VMS::DCLsym"
Perl extension to manipulate \s-1DCL\s0 symbols
.IP "VMS::Stdio" 12
.IX Item "VMS::Stdio"
Standard I/O functions via \s-1VMS\s0 extensions
.IP "Win32" 12
.IX Item "Win32"
Interfaces to some Win32 \s-1API\s0 Functions
.IP "Win32API::File" 12
.IX Item "Win32API::File"
Low-level access to Win32 system \s-1API\s0 calls for files/dirs.
.IP "Win32CORE" 12
.IX Item "Win32CORE"
Win32 \s-1CORE\s0 function stubs
.IP "XS::APItest" 12
.IX Item "XS::APItest"
Test the perl C \s-1API\s0
.IP "XS::Typemap" 12
.IX Item "XS::Typemap"
Module to test the \s-1XS\s0 typemaps distributed with perl
.IP "XSLoader" 12
.IX Item "XSLoader"
Dynamically load C libraries into Perl code
.IP "version::Internals" 12
.IX Item "version::Internals"
Perl extension for Version Objects
.PP
To find out \fIall\fR modules installed on your system, including
those without documentation or outside the standard release,
just use the following command (under the default win32 shell,
double quotes should be used instead of single quotes).
.PP
.Vb 3
\&    % perl \-MFile::Find=find \-MFile::Spec::Functions \-Tlwe \e
\&      \*(Aqfind { wanted => sub { print canonpath $_ if /\e.pm\ez/ },
\&      no_chdir => 1 }, @INC\*(Aq
.Ve
.PP
(The \-T is here to prevent '.' from being listed in \f(CW@INC\fR.)
They should all have their own documentation installed and accessible
via your system \fIman\fR\|(1) command.  If you do not have a \fBfind\fR
program, you can use the Perl \fBfind2perl\fR program instead, which
generates Perl code as output you can run through perl.  If you
have a \fBman\fR program but it doesn't find your modules, you'll have
to fix your manpath.  See perl for details.  If you have no
system \fBman\fR command, you might try the \fBperldoc\fR program.
.PP
Note also that the command \f(CW\*(C`perldoc perllocal\*(C'\fR gives you a (possibly
incomplete) list of the modules that have been further installed on
your system. (The perllocal.pod file is updated by the standard MakeMaker
install process.)
.SS "Extension Modules"
.IX Subsection "Extension Modules"
Extension modules are written in C (or a mix of Perl and C).  They
are usually dynamically loaded into Perl if and when you need them,
but may also be linked in statically.  Supported extension modules
include Socket, Fcntl, and \s-1POSIX.\s0
.PP
Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time
for adequate testing and configuration across the multitude of
platforms on which Perl was beta-tested.  You are encouraged to
look for them on \s-1CPAN \s0(described below), or using web search engines
like Alta Vista or Google.
.SH "CPAN"
.IX Header "CPAN"
\&\s-1CPAN\s0 stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style
guides, tricks and traps, alternate ports to non-Unix systems and
occasional binary distributions for these.   Search engines for
\&\s-1CPAN\s0 can be found at http://www.cpan.org/
.PP
Most importantly, \s-1CPAN\s0 includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of
modules are:
.IP "\(bu" 4
Language Extensions and Documentation Tools
.IP "\(bu" 4
Development Support
.IP "\(bu" 4
Operating System Interfaces
.IP "\(bu" 4
Networking, Device Control (modems) and InterProcess Communication
.IP "\(bu" 4
Data Types and Data Type Utilities
.IP "\(bu" 4
Database Interfaces
.IP "\(bu" 4
User Interfaces
.IP "\(bu" 4
Interfaces to / Emulations of Other Programming Languages
.IP "\(bu" 4
File Names, File Systems and File Locking (see also File Handles)
.IP "\(bu" 4
String Processing, Language Text Processing, Parsing, and Searching
.IP "\(bu" 4
Option, Argument, Parameter, and Configuration File Processing
.IP "\(bu" 4
Internationalization and Locale
.IP "\(bu" 4
Authentication, Security, and Encryption
.IP "\(bu" 4
World Wide Web, \s-1HTML, HTTP, CGI, MIME\s0
.IP "\(bu" 4
Server and Daemon Utilities
.IP "\(bu" 4
Archiving and Compression
.IP "\(bu" 4
Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing
.IP "\(bu" 4
Mail and Usenet News
.IP "\(bu" 4
Control Flow Utilities (callbacks and exceptions etc)
.IP "\(bu" 4
File Handle and Input/Output Stream Utilities
.IP "\(bu" 4
Miscellaneous Modules
.PP
The list of the registered \s-1CPAN\s0 sites follows.
Please note that the sorting order is alphabetical on fields:
.PP
Continent
   |
   |\-\->Country
         |
         |\-\->[state/province]
                   |
                   |\-\->ftp
                   |
                   |\-\->[http]
.PP
and thus the North American servers happen to be listed between the
European and the South American sites.
.PP
Registered \s-1CPAN\s0 sites
.SS "Africa"
.IX Subsection "Africa"
.IP "South Africa" 4
.IX Item "South Africa"
.Vb 5
\&  http://cpan.mirror.ac.za/
\&  ftp://cpan.mirror.ac.za/
\&  http://mirror.is.co.za/pub/cpan/
\&  ftp://ftp.is.co.za/pub/cpan/
\&  ftp://ftp.saix.net/pub/CPAN/
.Ve
.SS "Asia"
.IX Subsection "Asia"
.IP "China" 4
.IX Item "China"
.Vb 1
\&  http://cpan.wenzk.com/
.Ve
.IP "Hong Kong" 4
.IX Item "Hong Kong"
.Vb 3
\&  http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  ftp://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  http://mirrors.geoexpat.com/cpan/
.Ve
.IP "India" 4
.IX Item "India"
.Vb 1
\&  http://perlmirror.indialinks.com/
.Ve
.IP "Indonesia" 4
.IX Item "Indonesia"
.Vb 6
\&  http://cpan.biz.net.id/
\&  http://komo.vlsm.org/CPAN/
\&  ftp://komo.vlsm.org/CPAN/
\&  http://cpan.cermin.lipi.go.id/
\&  ftp://cermin.lipi.go.id/pub/CPAN/
\&  http://cpan.pesat.net.id/
.Ve
.IP "Japan" 4
.IX Item "Japan"
.Vb 12
\&  ftp://ftp.u\-aizu.ac.jp/pub/CPAN
\&  ftp://ftp.kddilabs.jp/CPAN/
\&  http://ftp.nara.wide.ad.jp/pub/CPAN/
\&  ftp://ftp.nara.wide.ad.jp/pub/CPAN/
\&  http://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.dti.ad.jp/pub/lang/CPAN/
\&  ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
\&  http://ftp.riken.jp/lang/CPAN/
\&  ftp://ftp.riken.jp/lang/CPAN/
\&  http://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
\&  ftp://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
.Ve
.IP "Republic of Korea" 4
.IX Item "Republic of Korea"
.Vb 6
\&  http://ftp.kaist.ac.kr/pub/CPAN
\&  ftp://ftp.kaist.ac.kr/pub/CPAN
\&  http://cpan.mirror.cdnetworks.com/
\&  ftp://cpan.mirror.cdnetworks.com/CPAN/
\&  http://cpan.sarang.net/
\&  ftp://cpan.sarang.net/CPAN/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 2
\&  http://cpan.tomsk.ru/
\&  ftp://cpan.tomsk.ru/
.Ve
.IP "Singapore" 4
.IX Item "Singapore"
.Vb 5
\&  http://mirror.averse.net/pub/CPAN
\&  ftp://mirror.averse.net/pub/CPAN
\&  http://cpan.mirror.choon.net/
\&  http://cpan.oss.eznetsols.org
\&  ftp://ftp.oss.eznetsols.org/cpan
.Ve
.IP "Taiwan" 4
.IX Item "Taiwan"
.Vb 10
\&  http://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  ftp://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  http://cpan.nctu.edu.tw/
\&  ftp://cpan.nctu.edu.tw/
\&  ftp://ftp.ncu.edu.tw/CPAN/
\&  http://cpan.cdpa.nsysu.edu.tw/
\&  ftp://cpan.cdpa.nsysu.edu.tw/Unix/Lang/CPAN/
\&  http://cpan.stu.edu.tw
\&  ftp://ftp.stu.edu.tw/CPAN
\&  http://ftp.stu.edu.tw/CPAN
\&  ftp://ftp.stu.edu.tw/pub/CPAN
\&  http://cpan.cs.pu.edu.tw/
\&  ftp://cpan.cs.pu.edu.tw/pub/CPAN
.Ve
.IP "Thailand" 4
.IX Item "Thailand"
.Vb 4
\&  http://mirrors.issp.co.th/cpan/
\&  ftp://mirrors.issp.co.th/cpan/
\&  http://mirror.yourconnect.com/CPAN/
\&  ftp://mirror.yourconnect.com/CPAN/
.Ve
.IP "Turkey" 4
.IX Item "Turkey"
.Vb 1
\&  http://cpan.gazi.edu.tr/
.Ve
.SS "Central America"
.IX Subsection "Central America"
.IP "Costa Rica" 4
.IX Item "Costa Rica"
.Vb 2
\&  http://mirrors.ucr.ac.cr/CPAN/
\&  ftp://mirrors.ucr.ac.cr/CPAN/
.Ve
.SS "Europe"
.IX Subsection "Europe"
.IP "Austria" 4
.IX Item "Austria"
.Vb 4
\&  http://cpan.inode.at/
\&  ftp://cpan.inode.at
\&  http://gd.tuwien.ac.at/languages/perl/CPAN/
\&  ftp://gd.tuwien.ac.at/pub/CPAN/
.Ve
.IP "Belgium" 4
.IX Item "Belgium"
.Vb 4
\&  http://ftp.belnet.be/mirror/ftp.cpan.org/
\&  ftp://ftp.belnet.be/mirror/ftp.cpan.org/
\&  http://ftp.easynet.be/pub/CPAN/
\&  http://cpan.weepee.org/
.Ve
.IP "Bosnia and Herzegovina" 4
.IX Item "Bosnia and Herzegovina"
.Vb 1
\&  http://cpan.blic.net/
.Ve
.IP "Bulgaria" 4
.IX Item "Bulgaria"
.Vb 4
\&  http://cpan.cbox.biz/
\&  ftp://cpan.cbox.biz/cpan/
\&  http://cpan.digsys.bg/
\&  ftp://ftp.digsys.bg/pub/CPAN
.Ve
.IP "Croatia" 4
.IX Item "Croatia"
.Vb 2
\&  http://ftp.carnet.hr/pub/CPAN/
\&  ftp://ftp.carnet.hr/pub/CPAN/
.Ve
.IP "Czech Republic" 4
.IX Item "Czech Republic"
.Vb 2
\&  ftp://ftp.fi.muni.cz/pub/CPAN/
\&  http://archive.cpan.cz/
.Ve
.IP "Denmark" 4
.IX Item "Denmark"
.Vb 4
\&  http://mirrors.dotsrc.org/cpan
\&  ftp://mirrors.dotsrc.org/cpan/
\&  http://www.cpan.dk/
\&  http://mirror.uni\-c.dk/pub/CPAN/
.Ve
.IP "Finland" 4
.IX Item "Finland"
.Vb 2
\&  ftp://ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.eunet.fi/CPAN
.Ve
.IP "France" 4
.IX Item "France"
.Vb 10
\&  http://cpan.enstimac.fr/
\&  ftp://ftp.inria.fr/pub/CPAN/
\&  http://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://ftp.lip6.fr/pub/perl/CPAN/
\&  http://mir2.ovh.net/ftp.cpan.org
\&  ftp://mir1.ovh.net/ftp.cpan.org
\&  ftp://ftp.oleane.net/pub/CPAN/
\&  http://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  ftp://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  http://ftp.u\-strasbg.fr/CPAN
\&  ftp://ftp.u\-strasbg.fr/CPAN
\&  http://cpan.cict.fr/
\&  ftp://cpan.cict.fr/pub/CPAN/
.Ve
.IP "Germany" 4
.IX Item "Germany"
.Vb 10
\&  ftp://ftp.fu\-berlin.de/unix/languages/perl/
\&  http://mirrors.softliste.de/cpan/
\&  ftp://ftp.rub.de/pub/CPAN/
\&  http://www.planet\-elektronik.de/CPAN/
\&  http://ftp.hosteurope.de/pub/CPAN/
\&  ftp://ftp.hosteurope.de/pub/CPAN/
\&  http://www.mirrorspace.org/cpan/
\&  http://mirror.netcologne.de/cpan/
\&  ftp://mirror.netcologne.de/cpan/
\&  ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/CPAN/
\&  http://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  ftp://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  http://mirrors.zerg.biz/cpan/
\&  http://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  http://dl.ambiweb.de/mirrors/ftp.cpan.org/
\&  http://cpan.mirror.clusters.kg/
\&  http://cpan.mirror.iphh.net/
\&  ftp://cpan.mirror.iphh.net/pub/CPAN/
\&  http://cpan.mirroring.de/
\&  http://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  ftp://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  http://www.chemmedia.de/mirrors/CPAN/
\&  http://ftp.cw.net/pub/CPAN/
\&  ftp://ftp.cw.net/pub/CPAN/
\&  http://cpan.cpantesters.org/
\&  ftp://cpan.cpantesters.org/CPAN/
\&  http://cpan.mirrored.de/
\&  ftp://mirror.petamem.com/CPAN/
\&  http://cpan.noris.de/
\&  ftp://cpan.noris.de/pub/CPAN/
\&  ftp://ftp.mpi\-sb.mpg.de/pub/perl/CPAN/
\&  ftp://ftp.gmd.de/mirrors/CPAN/
.Ve
.IP "Greece" 4
.IX Item "Greece"
.Vb 4
\&  ftp://ftp.forthnet.gr/pub/languages/perl/CPAN
\&  ftp://ftp.ntua.gr/pub/lang/perl/
\&  http://cpan.cc.uoc.gr/
\&  ftp://ftp.cc.uoc.gr/mirrors/CPAN/
.Ve
.IP "Hungary" 4
.IX Item "Hungary"
.Vb 3
\&  http://cpan.mirrors.enexis.hu/
\&  ftp://cpan.mirrors.enexis.hu/mirrors/cpan/
\&  http://cpan.hu/
.Ve
.IP "Iceland" 4
.IX Item "Iceland"
.Vb 2
\&  http://ftp.rhnet.is/pub/CPAN/
\&  ftp://ftp.rhnet.is/pub/CPAN/
.Ve
.IP "Ireland" 4
.IX Item "Ireland"
.Vb 4
\&  http://ftp.esat.net/pub/languages/perl/CPAN/
\&  ftp://ftp.esat.net/pub/languages/perl/CPAN/
\&  http://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
\&  ftp://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
.Ve
.IP "Italy" 4
.IX Item "Italy"
.Vb 3
\&  http://bo.mirror.garr.it/mirrors/CPAN/
\&  http://cpan.panu.it/
\&  ftp://ftp.panu.it/pub/mirrors/perl/CPAN/
.Ve
.IP "Latvia" 4
.IX Item "Latvia"
.Vb 1
\&  http://kvin.lv/pub/CPAN/
.Ve
.IP "Lithuania" 4
.IX Item "Lithuania"
.Vb 2
\&  http://ftp.litnet.lt/pub/CPAN/
\&  ftp://ftp.litnet.lt/pub/CPAN/
.Ve
.IP "Malta" 4
.IX Item "Malta"
.Vb 1
\&  http://cpan.waldonet.net.mt/
.Ve
.IP "Netherlands" 4
.IX Item "Netherlands"
.Vb 10
\&  ftp://ftp.quicknet.nl/pub/CPAN/
\&  http://mirror.hostfuss.com/CPAN/
\&  ftp://mirror.hostfuss.com/CPAN/
\&  http://mirrors3.kernel.org/cpan/
\&  ftp://mirrors3.kernel.org/pub/CPAN/
\&  http://cpan.mirror.versatel.nl/
\&  ftp://ftp.mirror.versatel.nl/cpan/
\&  ftp://download.xs4all.nl/pub/mirror/CPAN/
\&  http://mirror.leaseweb.com/CPAN/
\&  ftp://mirror.leaseweb.com/CPAN/
\&  ftp://ftp.cpan.nl/pub/CPAN/
\&  http://archive.cs.uu.nl/mirror/CPAN/
\&  ftp://ftp.cs.uu.nl/mirror/CPAN/
\&  http://luxitude.net/cpan/
.Ve
.IP "Norway" 4
.IX Item "Norway"
.Vb 2
\&  ftp://ftp.uninett.no/pub/languages/perl/CPAN
\&  ftp://ftp.uit.no/pub/languages/perl/cpan/
.Ve
.IP "Poland" 4
.IX Item "Poland"
.Vb 7
\&  http://piotrkosoft.net/pub/mirrors/CPAN/
\&  ftp://ftp.piotrkosoft.net/pub/mirrors/CPAN/
\&  http://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.ps.pl/pub/CPAN/
\&  ftp://sunsite.icm.edu.pl/pub/CPAN/
\&  ftp://ftp.tpnet.pl/d4/CPAN/
.Ve
.IP "Portugal" 4
.IX Item "Portugal"
.Vb 9
\&  http://cpan.dei.uc.pt/
\&  ftp://ftp.dei.uc.pt/pub/CPAN
\&  ftp://ftp.ist.utl.pt/pub/CPAN/
\&  http://cpan.perl.pt/
\&  http://cpan.ip.pt/
\&  ftp://cpan.ip.pt/pub/cpan/
\&  http://mirrors.nfsi.pt/CPAN/
\&  ftp://mirrors.nfsi.pt/pub/CPAN/
\&  http://cpan.dcc.fc.up.pt/
.Ve
.IP "Romania" 4
.IX Item "Romania"
.Vb 7
\&  http://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.lug.ro/CPAN
\&  http://mirrors.xservers.ro/CPAN/
\&  http://mirrors.hostingromania.ro/ftp.cpan.org/
\&  ftp://ftp.hostingromania.ro/mirrors/ftp.cpan.org/
\&  ftp://ftp.iasi.roedu.net/pub/mirrors/ftp.cpan.org/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 8
\&  ftp://ftp.aha.ru/CPAN/
\&  http://cpan.rinet.ru/
\&  ftp://cpan.rinet.ru/pub/mirror/CPAN/
\&  ftp://ftp.SpringDaemons.com/pub/CPAN/
\&  http://mirror.rol.ru/CPAN/
\&  http://ftp.silvernet.ru/CPAN/
\&  http://ftp.spbu.ru/CPAN/
\&  ftp://ftp.spbu.ru/CPAN/
.Ve
.IP "Slovakia" 4
.IX Item "Slovakia"
.Vb 1
\&  http://cpan.fyxm.net/
.Ve
.IP "Slovenia" 4
.IX Item "Slovenia"
.Vb 1
\&  http://www.klevze.si/cpan
.Ve
.IP "Spain" 4
.IX Item "Spain"
.Vb 4
\&  http://osl.ugr.es/CPAN/
\&  ftp://ftp.rediris.es/mirror/CPAN/
\&  http://ftp.gui.uva.es/sites/cpan.org/
\&  ftp://ftp.gui.uva.es/sites/cpan.org/
.Ve
.IP "Sweden" 4
.IX Item "Sweden"
.Vb 2
\&  http://mirrors4.kernel.org/cpan/
\&  ftp://mirrors4.kernel.org/pub/CPAN/
.Ve
.IP "Switzerland" 4
.IX Item "Switzerland"
.Vb 5
\&  http://cpan.mirror.solnet.ch/
\&  ftp://ftp.solnet.ch/mirror/CPAN/
\&  ftp://ftp.adwired.ch/CPAN/
\&  http://mirror.switch.ch/ftp/mirror/CPAN/
\&  ftp://mirror.switch.ch/mirror/CPAN/
.Ve
.IP "Ukraine" 4
.IX Item "Ukraine"
.Vb 5
\&  http://cpan.makeperl.org/
\&  ftp://cpan.makeperl.org/pub/CPAN
\&  http://cpan.org.ua/
\&  http://cpan.gafol.net/
\&  ftp://ftp.gafol.net/pub/cpan/
.Ve
.IP "United Kingdom" 4
.IX Item "United Kingdom"
.Vb 10
\&  http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  ftp://ftp.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  ftp://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  http://www.mirror.8086.net/sites/CPAN/
\&  ftp://ftp.mirror.8086.net/sites/CPAN/
\&  http://cpan.mirror.anlx.net/
\&  ftp://ftp.mirror.anlx.net/CPAN/
\&  http://mirror.bytemark.co.uk/CPAN/
\&  ftp://mirror.bytemark.co.uk/CPAN/
\&  http://cpan.etla.org/
\&  ftp://cpan.etla.org/pub/CPAN
\&  ftp://ftp.demon.co.uk/pub/CPAN/
\&  http://mirror.sov.uk.goscomb.net/CPAN/
\&  ftp://mirror.sov.uk.goscomb.net/pub/CPAN/
\&  http://ftp.plig.net/pub/CPAN/
\&  ftp://ftp.plig.net/pub/CPAN/
\&  http://ftp.ticklers.org/pub/CPAN/
\&  ftp://ftp.ticklers.org/pub/CPAN/
\&  http://cpan.mirrors.uk2.net/
\&  ftp://mirrors.uk2.net/pub/CPAN/
\&  http://mirror.ox.ac.uk/sites/www.cpan.org/
\&  ftp://mirror.ox.ac.uk/sites/www.cpan.org/
.Ve
.SS "North America"
.IX Subsection "North America"
.IP "Bahamas" 4
.IX Item "Bahamas"
.Vb 1
\&  http://www.securehost.com/mirror/CPAN/
.Ve
.IP "Canada" 4
.IX Item "Canada"
.Vb 10
\&  http://cpan.arcticnetwork.ca
\&  ftp://mirror.arcticnetwork.ca/pub/CPAN
\&  http://cpan.sunsite.ualberta.ca/
\&  ftp://cpan.sunsite.ualberta.ca/pub/CPAN/
\&  http://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  http://arwen.cs.dal.ca/mirror/CPAN/
\&  ftp://arwen.cs.dal.ca/pub/mirror/CPAN/
\&  http://CPAN.mirror.rafal.ca/
\&  ftp://CPAN.mirror.rafal.ca/pub/CPAN/
\&  ftp://ftp.nrc.ca/pub/CPAN/
\&  http://mirror.csclub.uwaterloo.ca/pub/CPAN/
\&  ftp://mirror.csclub.uwaterloo.ca/pub/CPAN/
.Ve
.IP "Mexico" 4
.IX Item "Mexico"
.Vb 2
\&  http://www.msg.com.mx/CPAN/
\&  ftp://ftp.msg.com.mx/pub/CPAN/
.Ve
.IP "United States" 4
.IX Item "United States"
.RS 4
.PD 0
.IP "Alabama" 8
.IX Item "Alabama"
.PD
.Vb 2
\&  http://mirror.hiwaay.net/CPAN/
\&  ftp://mirror.hiwaay.net/CPAN/
.Ve
.IP "Arizona" 8
.IX Item "Arizona"
.Vb 1
\&  http://cpan.ezarticleinformation.com/
.Ve
.IP "California" 8
.IX Item "California"
.Vb 10
\&  http://cpan.knowledgematters.net/
\&  http://cpan.binkerton.com/
\&  http://cpan.develooper.com/
\&  http://mirrors.gossamer\-threads.com/CPAN
\&  http://cpan.schatt.com/
\&  http://mirrors.kernel.org/cpan/
\&  ftp://mirrors.kernel.org/pub/CPAN
\&  http://mirrors2.kernel.org/cpan/
\&  ftp://mirrors2.kernel.org/pub/CPAN/
\&  http://cpan.mirror.facebook.net/
\&  http://mirrors1.kernel.org/cpan/
\&  ftp://mirrors1.kernel.org/pub/CPAN/
\&  http://cpan\-sj.viaverio.com/
\&  ftp://cpan\-sj.viaverio.com/pub/CPAN/
\&  http://www.perl.com/CPAN/
.Ve
.IP "Florida" 8
.IX Item "Florida"
.Vb 3
\&  ftp://ftp.cise.ufl.edu/pub/mirrors/CPAN/
\&  http://mirror.atlantic.net/pub/CPAN/
\&  ftp://mirror.atlantic.net/pub/CPAN/
.Ve
.IP "Idaho" 8
.IX Item "Idaho"
.Vb 2
\&  http://mirror.its.uidaho.edu/pub/cpan/
\&  ftp://mirror.its.uidaho.edu/cpan/
.Ve
.IP "Illinois" 8
.IX Item "Illinois"
.Vb 6
\&  http://cpan.mirrors.hoobly.com/
\&  http://cpan.uchicago.edu/pub/CPAN/
\&  ftp://cpan.uchicago.edu/pub/CPAN/
\&  http://mirrors.servercentral.net/CPAN/
\&  http://www.stathy.com/CPAN/
\&  ftp://www.stathy.com/CPAN/
.Ve
.IP "Indiana" 8
.IX Item "Indiana"
.Vb 5
\&  ftp://ftp.uwsg.iu.edu/pub/perl/CPAN/
\&  http://cpan.netnitco.net/
\&  ftp://cpan.netnitco.net/pub/mirrors/CPAN/
\&  http://ftp.ndlug.nd.edu/pub/perl/
\&  ftp://ftp.ndlug.nd.edu/pub/perl/
.Ve
.IP "Massachusetts" 8
.IX Item "Massachusetts"
.Vb 1
\&  http://mirrors.ccs.neu.edu/CPAN/
.Ve
.IP "Michigan" 8
.IX Item "Michigan"
.Vb 2
\&  http://ftp.wayne.edu/cpan/
\&  ftp://ftp.wayne.edu/cpan/
.Ve
.IP "Minnesota" 8
.IX Item "Minnesota"
.Vb 1
\&  http://cpan.msi.umn.edu/
.Ve
.IP "New Jersey" 8
.IX Item "New Jersey"
.Vb 2
\&  http://mirror.datapipe.net/CPAN/
\&  ftp://mirror.datapipe.net/pub/CPAN/
.Ve
.IP "New York" 8
.IX Item "New York"
.Vb 12
\&  http://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  ftp://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  http://mirror.cc.columbia.edu/pub/software/cpan/
\&  ftp://mirror.cc.columbia.edu/pub/software/cpan/
\&  http://cpan.belfry.net/
\&  http://cpan.erlbaum.net/
\&  ftp://cpan.erlbaum.net/CPAN/
\&  http://cpan.hexten.net/
\&  ftp://cpan.hexten.net/
\&  ftp://mirror.nyi.net/CPAN/
\&  http://mirror.rit.edu/CPAN/
\&  ftp://mirror.rit.edu/CPAN/
.Ve
.IP "North Carolina" 8
.IX Item "North Carolina"
.Vb 2
\&  http://www.ibiblio.org/pub/mirrors/CPAN
\&  ftp://ftp.ncsu.edu/pub/mirror/CPAN/
.Ve
.IP "Oregon" 8
.IX Item "Oregon"
.Vb 2
\&  http://ftp.osuosl.org/pub/CPAN/
\&  ftp://ftp.osuosl.org/pub/CPAN/
.Ve
.IP "Pennsylvania" 8
.IX Item "Pennsylvania"
.Vb 4
\&  http://ftp.epix.net/CPAN/
\&  ftp://ftp.epix.net/pub/languages/perl/
\&  http://cpan.pair.com/
\&  ftp://cpan.pair.com/pub/CPAN/
.Ve
.IP "South Carolina" 8
.IX Item "South Carolina"
.Vb 1
\&  http://cpan.mirror.clemson.edu/
.Ve
.IP "Tennessee" 8
.IX Item "Tennessee"
.Vb 1
\&  http://mira.sunsite.utk.edu/CPAN/
.Ve
.IP "Texas" 8
.IX Item "Texas"
.Vb 1
\&  http://mirror.uta.edu/CPAN
.Ve
.IP "Utah" 8
.IX Item "Utah"
.Vb 1
\&  ftp://mirror.xmission.com/CPAN/
.Ve
.IP "Virginia" 8
.IX Item "Virginia"
.Vb 5
\&  http://cpan\-du.viaverio.com/
\&  ftp://cpan\-du.viaverio.com/pub/CPAN/
\&  http://perl.secsup.org/
\&  ftp://perl.secsup.org/pub/perl/
\&  ftp://mirror.cogentco.com/pub/CPAN/
.Ve
.IP "Washington" 8
.IX Item "Washington"
.Vb 3
\&  http://cpan.llarian.net/
\&  ftp://cpan.llarian.net/pub/CPAN/
\&  ftp://ftp\-mirror.internap.com/pub/CPAN/
.Ve
.IP "Wisconsin" 8
.IX Item "Wisconsin"
.Vb 4
\&  http://cpan.mirrors.tds.net
\&  ftp://cpan.mirrors.tds.net/pub/CPAN
\&  http://mirror.sit.wisc.edu/pub/CPAN/
\&  ftp://mirror.sit.wisc.edu/pub/CPAN/
.Ve
.RE
.RS 4
.RE
.SS "Oceania"
.IX Subsection "Oceania"
.IP "Australia" 4
.IX Item "Australia"
.Vb 5
\&  http://mirror.internode.on.net/pub/cpan/
\&  ftp://mirror.internode.on.net/pub/cpan/
\&  http://cpan.mirror.aussiehq.net.au/
\&  http://mirror.as24220.net/cpan/
\&  ftp://mirror.as24220.net/cpan/
.Ve
.IP "New Zealand" 4
.IX Item "New Zealand"
.Vb 5
\&  ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
\&  http://cpan.inspire.net.nz
\&  ftp://cpan.inspire.net.nz/cpan
\&  http://cpan.catalyst.net.nz/CPAN/
\&  ftp://cpan.catalyst.net.nz/pub/CPAN/
.Ve
.SS "South America"
.IX Subsection "South America"
.IP "Argentina" 4
.IX Item "Argentina"
.Vb 3
\&  http://cpan.patan.com.ar/
\&  http://cpan.localhost.net.ar
\&  ftp://mirrors.localhost.net.ar/pub/mirrors/CPAN
.Ve
.IP "Brazil" 4
.IX Item "Brazil"
.Vb 4
\&  ftp://cpan.pop\-mg.com.br/pub/CPAN/
\&  http://ftp.pucpr.br/CPAN
\&  ftp://ftp.pucpr.br/CPAN
\&  http://cpan.kinghost.net/
.Ve
.IP "Chile" 4
.IX Item "Chile"
.Vb 2
\&  http://cpan.dcc.uchile.cl/
\&  ftp://cpan.dcc.uchile.cl/pub/lang/cpan/
.Ve
.IP "Colombia" 4
.IX Item "Colombia"
.Vb 1
\&  http://www.laqee.unal.edu.co/CPAN/
.Ve
.SS "\s-1RSYNC\s0 Mirrors"
.IX Subsection "RSYNC Mirrors"
.Vb 10
\&                      mirror.as24220.net::cpan
\&                      cpan.inode.at::CPAN
\&                      gd.tuwien.ac.at::CPAN
\&                      ftp.belnet.be::packages/cpan
\&                      rsync.linorg.usp.br::CPAN
\&                      rsync.arcticnetwork.ca::CPAN
\&                      CPAN.mirror.rafal.ca::CPAN
\&                      mirror.csclub.uwaterloo.ca::CPAN
\&                      theoryx5.uwinnipeg.ca::CPAN
\&                      www.laqee.unal.edu.co::CPAN
\&                      mirror.uni\-c.dk::CPAN
\&                      rsync.nic.funet.fi::CPAN
\&                      rsync://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&                      mir1.ovh.net::CPAN
\&                      miroir\-francais.fr::cpan
\&                      ftp.crihan.fr::CPAN
\&                      rsync://mirror.cict.fr/cpan/
\&                      rsync://mirror.netcologne.de/cpan/
\&                      ftp\-stud.hs\-esslingen.de::CPAN/
\&                      ftp.gwdg.de::FTP/languages/perl/CPAN/
\&                      cpan.mirror.iphh.net::CPAN
\&                      cpan.cpantesters.org::cpan
\&                      cpan.hu::CPAN
\&                      komo.vlsm.org::CPAN
\&                      mirror.unej.ac.id::cpan
\&                      ftp.esat.net::/pub/languages/perl/CPAN
\&                      ftp.heanet.ie::mirrors/ftp.perl.org/pub/CPAN
\&                      rsync.panu.it::CPAN
\&                      cpan.fastbull.org::CPAN
\&                      ftp.kddilabs.jp::cpan
\&                      ftp.nara.wide.ad.jp::cpan/
\&                      rsync://ftp.jaist.ac.jp/pub/CPAN/
\&                      rsync://ftp.riken.jp/cpan/
\&                      mirror.linuxiso.kz::CPAN
\&                      rsync://mirrors3.kernel.org/mirrors/CPAN/
\&                      rsync://rsync.osmirror.nl/cpan/
\&                      mirror.leaseweb.com::CPAN
\&                      cpan.nautile.nc::CPAN
\&                      mirror.icis.pcz.pl::CPAN
\&                      piotrkosoft.net::mirrors/CPAN
\&                      rsync://cpan.perl.pt/
\&                      ftp.kaist.ac.kr::cpan
\&                      cpan.sarang.net::CPAN
\&                      mirror.averse.net::cpan
\&                      rsync.oss.eznetsols.org
\&                      mirror.ac.za::cpan
\&                      ftp.is.co.za::IS\-Mirror/ftp.cpan.org/
\&                      rsync://ftp.gui.uva.es/cpan/
\&                      rsync://mirrors4.kernel.org/mirrors/CPAN/
\&                      ftp.solnet.ch::CPAN
\&                      ftp.ulak.net.tr::CPAN
\&                      gafol.net::cpan
\&                      rsync.mirrorservice.org::ftp.funet.fi/pub/
\&                      rsync://rsync.mirror.8086.net/CPAN/
\&                      rsync.mirror.anlx.net::CPAN
\&                      mirror.bytemark.co.uk::CPAN
\&                      ftp.plig.net::CPAN
\&                      rsync://ftp.ticklers.org:CPAN/
\&                      mirrors.ibiblio.org::CPAN
\&                      cpan\-du.viaverio.com::CPAN
\&                      mirror.hiwaay.net::CPAN
\&                      rsync://mira.sunsite.utk.edu/CPAN/
\&                      cpan.mirrors.tds.net::CPAN
\&                      mirror.its.uidaho.edu::cpan
\&                      rsync://mirror.cc.columbia.edu::cpan/
\&                      ftp.fxcorporate.com::CPAN
\&                      rsync.atlantic.net::CPAN
\&                      mirrors.kernel.org::mirrors/CPAN
\&                      rsync://mirrors2.kernel.org/mirrors/CPAN/
\&                      cpan.pair.com::CPAN
\&                      rsync://mirror.rit.edu/CPAN/
\&                      rsync://mirror.facebook.net/cpan/
\&                      rsync://mirrors1.kernel.org/mirrors/CPAN/
\&                      cpan\-sj.viaverio.com::CPAN
.Ve
.PP
For an up-to-date listing of \s-1CPAN\s0 sites,
see http://www.cpan.org/SITES or ftp://www.cpan.org/SITES .
.SH "Modules: Creation, Use, and Abuse"
.IX Header "Modules: Creation, Use, and Abuse"
(The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest \s-1CPAN\s0 site.)
.PP
Perl implements a class using a package, but the presence of a
package doesn't imply the presence of a class.  A package is just a
namespace.  A class is a package that provides subroutines that can be
used as methods.  A method is just a subroutine that expects, as its
first argument, either the name of a package (for \*(L"static\*(R" methods),
or a reference to something (for \*(L"virtual\*(R" methods).
.PP
A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of
its methods by loading dynamic C or \*(C+ objects, but that should be
totally transparent to the user of the module.  Likewise, the module
might set up an \s-1AUTOLOAD\s0 function to slurp in subroutine definitions on
demand, but this is also transparent.  Only the \fI.pm\fR file is required to
exist.  See perlsub, perlobj, and AutoLoader for details about
the \s-1AUTOLOAD\s0 mechanism.
.SS "Guidelines for Module Creation"
.IX Subsection "Guidelines for Module Creation"
.IP "\(bu" 4
Do similar modules already exist in some form?
.Sp
If so, please try to reuse the existing modules either in whole or
by inheriting useful features into a new class.  If this is not
practical try to get together with the module authors to work on
extending or enhancing the functionality of the existing modules.
A perfect example is the plethora of packages in perl4 for dealing
with command line options.
.Sp
If you are writing a module to expand an already existing set of
modules, please coordinate with the author of the package.  It
helps if you follow the same naming scheme and module interaction
scheme as the original author.
.IP "\(bu" 4
Try to design the new module to be easy to extend and reuse.
.Sp
Try to \f(CW\*(C`use warnings;\*(C'\fR (or \f(CW\*(C`use warnings qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no warnings qw(...);\*(C'\fR to individual blocks
of code that need less warnings.
.Sp
Use blessed references.  Use the two argument form of bless to bless
into the class name given as the first parameter of the constructor,
e.g.,:
.Sp
.Vb 4
\& sub new {
\&     my $class = shift;
\&     return bless {}, $class;
\& }
.Ve
.Sp
or even this if you'd like it to be used as either a static
or a virtual method.
.Sp
.Vb 5
\& sub new {
\&     my $self  = shift;
\&     my $class = ref($self) || $self;
\&     return bless {}, $class;
\& }
.Ve
.Sp
Pass arrays as references so more parameters can be added later
(it's also faster).  Convert functions into methods where
appropriate.  Split large methods into smaller more flexible ones.
Inherit methods from other modules if appropriate.
.Sp
Avoid class name tests like: \f(CW\*(C`die "Invalid" unless ref $ref eq \*(AqFOO\*(Aq\*(C'\fR.
Generally you can delete the \f(CW\*(C`eq \*(AqFOO\*(Aq\*(C'\fR part with no harm at all.
Let the objects look after themselves! Generally, avoid hard-wired
class names as far as possible.
.Sp
Avoid \f(CW\*(C`$r\->Class::func()\*(C'\fR where using \f(CW\*(C`@ISA=qw(... Class ...)\*(C'\fR and
\&\f(CW\*(C`$r\->func()\*(C'\fR would work.
.Sp
Use autosplit so little used or newly added functions won't be a
burden to programs that don't use them. Add test functions to
the module after _\|_END_\|_ either using AutoSplit or by saying:
.Sp
.Vb 1
\& eval join(\*(Aq\*(Aq,<main::DATA>) || die $@ unless caller();
.Ve
.Sp
Does your module pass the 'empty subclass' test? If you say
\&\f(CW\*(C`@SUBCLASS::ISA = qw(YOURCLASS);\*(C'\fR your applications should be able
to use \s-1SUBCLASS\s0 in exactly the same way as \s-1YOURCLASS. \s0 For example,
does your application still work if you change:  \f(CW\*(C`$obj = YOURCLASS\->new();\*(C'\fR
into: \f(CW\*(C`$obj = SUBCLASS\->new();\*(C'\fR ?
.Sp
Avoid keeping any state information in your packages. It makes it
difficult for multiple other packages to use yours. Keep state
information in objects.
.Sp
Always use \fB\-w\fR.
.Sp
Try to \f(CW\*(C`use strict;\*(C'\fR (or \f(CW\*(C`use strict qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no strict qw(...);\*(C'\fR to individual blocks
of code that need less strictness.
.Sp
Always use \fB\-w\fR.
.Sp
Follow the guidelines in perlstyle.
.Sp
Always use \fB\-w\fR.
.IP "\(bu" 4
Some simple style guidelines
.Sp
The perlstyle manual supplied with Perl has many helpful points.
.Sp
Coding style is a matter of personal taste. Many people evolve their
style over several years as they learn what helps them write and
maintain good code.  Here's one set of assorted suggestions that
seem to be widely used by experienced developers:
.Sp
Use underscores to separate words.  It is generally easier to read
\&\f(CW$var_names_like_this\fR than \f(CW$VarNamesLikeThis\fR, especially for
non-native speakers of English. It's also a simple rule that works
consistently with \s-1VAR_NAMES_LIKE_THIS.\s0
.Sp
Package/Module names are an exception to this rule. Perl informally
reserves lowercase module names for 'pragma' modules like integer
and strict. Other modules normally begin with a capital letter and
use mixed case with no underscores (need to be short and portable).
.Sp
You may find it helpful to use letter case to indicate the scope
or nature of a variable. For example:
.Sp
.Vb 3
\& $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
\& $Some_Caps_Here  package\-wide global/static
\& $no_caps_here    function scope my() or local() variables
.Ve
.Sp
Function and method names seem to work best as all lowercase.
e.g., \f(CW\*(C`$obj\->as_string()\*(C'\fR.
.Sp
You can use a leading underscore to indicate that a variable or
function should not be used outside the package that defined it.
.IP "\(bu" 4
Select what to export.
.Sp
Do \s-1NOT\s0 export method names!
.Sp
Do \s-1NOT\s0 export anything else by default without a good reason!
.Sp
Exports pollute the namespace of the module user.  If you must
export try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid
short or common names to reduce the risk of name clashes.
.Sp
Generally anything not exported is still accessible from outside the
module using the ModuleName::item_name (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
indicate informally that they are 'internal' and not for public use.
.Sp
(It is actually possible to get private functions by saying:
\&\f(CW\*(C`my $subref = sub { ... };  &$subref;\*(C'\fR.  But there's no way to call that
directly as a method, because a method must have a name in the symbol
table.)
.Sp
As a general rule, if the module is trying to be object oriented
then export nothing. If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution.
.IP "\(bu" 4
Select a name for the module.
.Sp
This name should be as descriptive, accurate, and complete as
possible.  Avoid any risk of ambiguity. Always try to use two or
more whole words.  Generally the name should reflect what is special
about what the module does rather than how it does it.  Please use
nested module names to group informally or categorize a module.
There should be a very good reason for a module not to have a nested name.
Module names should begin with a capital letter.
.Sp
Having 57 modules all called Sort will not make life easy for anyone
(though having 23 called Sort::Quick is only marginally better :\-).
Imagine someone trying to install your module alongside many others.
If in any doubt ask for suggestions in comp.lang.perl.misc.
.Sp
If you are developing a suite of related modules/classes it's good
practice to use nested classes with a common prefix as this will
avoid namespace clashes. For example: Xyz::Control, Xyz::View,
Xyz::Model etc. Use the modules in this list as a naming guide.
.Sp
If adding a new module to a set, follow the original author's
standards for naming modules and the interface to methods in
those modules.
.Sp
If developing modules for private internal or project specific use,
that will never be released to the public, then you should ensure
that their names will not clash with any future public module. You
can do this either by using the reserved Local::* category or by
using a category name that includes an underscore like Foo_Corp::*.
.Sp
To be portable each component of a module name should be limited to
11 characters. If it might be used on MS-DOS then try to ensure each is
unique in the first 8 characters. Nested modules make this easier.
.IP "\(bu" 4
Have you got it right?
.Sp
How do you know that you've made the right decisions? Have you
picked an interface design that will cause problems later? Have
you picked the most appropriate name? Do you have any questions?
.Sp
The best way to know for sure, and pick up many helpful suggestions,
is to ask someone who knows. Comp.lang.perl.misc is read by just about
all the people who develop modules and it's the best place to ask.
.Sp
All you need to do is post a short summary of the module, its
purpose and interfaces. A few lines on each of the main methods is
probably enough. (If you post the whole module it might be ignored
by busy people \- generally the very people you want to read it!)
.Sp
Don't worry about posting if you can't say when the module will be
ready \- just say so in the message. It might be worth inviting
others to help you, they may be able to complete it for you!
.IP "\(bu" 4
\&\s-1README\s0 and other Additional Files.
.Sp
It's well known that software developers usually fully document the
software they write. If, however, the world is in urgent need of
your software and there is not enough time to write the full
documentation please at least provide a \s-1README\s0 file containing:
.RS 4
.IP "\(bu" 10
A description of the module/package/extension etc.
.IP "\(bu" 10
A copyright notice \- see below.
.IP "\(bu" 10
Prerequisites \- what else you may need to have.
.IP "\(bu" 10
How to build it \- possible changes to Makefile.PL etc.
.IP "\(bu" 10
How to install it.
.IP "\(bu" 10
Recent changes in this release, especially incompatibilities
.IP "\(bu" 10
Changes / enhancements you plan to make in the future.
.RE
.RS 4
.Sp
If the \s-1README\s0 file seems to be getting too large you may wish to
split out some of the sections into separate files: \s-1INSTALL,\s0
Copying, ToDo etc.
.IP "\(bu" 4
Adding a Copyright Notice.
.Sp
How you choose to license your work is a personal decision.
The general mechanism is to assert your Copyright and then make
a declaration of how others may copy/use/modify your work.
.Sp
Perl, for example, is supplied with two types of licence: The \s-1GNU GPL\s0
and The Artistic Licence (see the files \s-1README,\s0 Copying, and Artistic,
or perlgpl and perlartistic).  Larry has good reasons for \s-1NOT\s0
just using the \s-1GNU GPL.\s0
.Sp
My personal recommendation, out of respect for Larry, Perl, and the
Perl community at large is to state something simply like:
.Sp
.Vb 3
\& Copyright (c) 1995 Your Name. All rights reserved.
\& This program is free software; you can redistribute it and/or
\& modify it under the same terms as Perl itself.
.Ve
.Sp
This statement should at least appear in the \s-1README\s0 file. You may
also wish to include it in a Copying file and your source files.
Remember to include the other words in addition to the Copyright.
.IP "\(bu" 4
Give the module a version/issue/release number.
.Sp
To be fully compatible with the Exporter and MakeMaker modules you
should store your module's version number in a non-my package
variable called \f(CW$VERSION\fR.  This should be a positive floating point
number with at least two digits after the decimal (i.e., hundredths,
e.g, \f(CW\*(C`$VERSION = "0.01"\*(C'\fR).  Don't use a \*(L"1.3.2\*(R" style version.
See Exporter for details.
.Sp
It may be handy to add a function or method to retrieve the number.
Use the number in announcements and archive file names when
releasing the module (ModuleName\-1.02.tar.Z).
See perldoc ExtUtils::MakeMaker.pm for details.
.IP "\(bu" 4
How to release and distribute a module.
.Sp
It's good idea to post an announcement of the availability of your
module (or the module itself if small) to the comp.lang.perl.announce
Usenet newsgroup.  This will at least ensure very wide once-off
distribution.
.Sp
If possible, register the module with \s-1CPAN. \s0 You should
include details of its location in your announcement.
.Sp
Some notes about ftp archives: Please use a long descriptive file
name that includes the version number. Most incoming directories
will not be readable/listable, i.e., you won't be able to see your
file after uploading it. Remember to send your email notification
message as soon as possible after uploading else your file may get
deleted automatically. Allow time for the file to be processed
and/or check the file has been processed before announcing its
location.
.Sp
\&\s-1FTP\s0 Archives for Perl Modules:
.Sp
Follow the instructions and links on:
.Sp
.Vb 2
\&   http://www.cpan.org/modules/00modlist.long.html
\&   http://www.cpan.org/modules/04pause.html
.Ve
.Sp
or upload to one of these sites:
.Sp
.Vb 2
\&   https://pause.kbx.de/pause/
\&   http://pause.perl.org/
.Ve
.Sp
and notify <modules@perl.org>.
.Sp
By using the \s-1WWW\s0 interface you can ask the Upload Server to mirror
your modules from your ftp or \s-1WWW\s0 site into your own directory on
\&\s-1CPAN\s0!
.Sp
Please remember to send me an updated entry for the Module list!
.IP "\(bu" 4
Take care when changing a released module.
.Sp
Always strive to remain compatible with previous released versions.
Otherwise try to add a mechanism to revert to the
old behavior if people rely on it.  Document incompatible changes.
.RE
.RS 4
.RE
.SS "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IX Subsection "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IP "\(bu" 4
There is no requirement to convert anything.
.Sp
If it ain't broke, don't fix it! Perl 4 library scripts should
continue to work with no problems. You may need to make some minor
changes (like escaping non-array @'s in double quoted strings) but
there is no need to convert a .pl file into a Module for just that.
.IP "\(bu" 4
Consider the implications.
.Sp
All Perl applications that make use of the script will need to
be changed (slightly) if the script is converted into a module.  Is
it worth it unless you plan to make other changes at the same time?
.IP "\(bu" 4
Make the most of the opportunity.
.Sp
If you are going to convert the script to a module you can use the
opportunity to redesign the interface.  The guidelines for module
creation above include many of the issues you should consider.
.IP "\(bu" 4
The pl2pm utility will get you started.
.Sp
This utility will read *.pl files (given as parameters) and write
corresponding *.pm files. The pl2pm utilities does the following:
.RS 4
.IP "\(bu" 10
Adds the standard Module prologue lines
.IP "\(bu" 10
Converts package specifiers from ' to ::
.IP "\(bu" 10
Converts die(...) to croak(...)
.IP "\(bu" 10
Several other minor changes
.RE
.RS 4
.Sp
Being a mechanical process pl2pm is not bullet proof. The converted
code will need careful checking, especially any package statements.
Don't delete the original .pl file till the new .pm one works!
.RE
.SS "Guidelines for Reusing Application Code"
.IX Subsection "Guidelines for Reusing Application Code"
.IP "\(bu" 4
Complete applications rarely belong in the Perl Module Library.
.IP "\(bu" 4
Many applications contain some Perl code that could be reused.
.Sp
Help save the world! Share your code in a form that makes it easy
to reuse.
.IP "\(bu" 4
Break-out the reusable code into one or more separate module files.
.IP "\(bu" 4
Take the opportunity to reconsider and redesign the interfaces.
.IP "\(bu" 4
In some cases the 'application' can then be reduced to a small
.Sp
fragment of code built on top of the reusable modules. In these cases
the application could invoked as:
.Sp
.Vb 3
\&     % perl \-e \*(Aquse Module::Name; method(@ARGV)\*(Aq ...
\&or
\&     % perl \-mModule::Name ...    (in perl5.002 or higher)
.Ve
.SH "NOTE"
.IX Header "NOTE"
Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like \*(C+, Ada, or Modula\-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer
that you stayed out of its living room because you weren't invited, not
because it has a shotgun.
.PP
The module and its user have a contract, part of which is common law,
and part of which is \*(L"written\*(R".  Part of the common law contract is
that a module doesn't pollute any namespace it wasn't asked to.  The
written contract for the module (A.K.A. documentation) may make other
provisions.  But then you know when you \f(CW\*(C`use RedefineTheWorld\*(C'\fR that
you're redefining the world and willing to take the consequences.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodlib5.16.1                             0100644 0001750 0001750 00000324666 12566207421 023421  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODLIB 1"
.TH PERLMODLIB 1 "2015-08-22" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodlib \- constructing new Perl modules and finding existing ones
.SH "THE PERL MODULE LIBRARY"
.IX Header "THE PERL MODULE LIBRARY"
Many modules are included in the Perl distribution.  These are described
below, and all end in \fI.pm\fR.  You may discover compiled library
files (usually ending in \fI.so\fR) or small pieces of modules to be
autoloaded (ending in \fI.al\fR); these were automatically generated
by the installation process.  You may also discover files in the
library directory that end in either \fI.pl\fR or \fI.ph\fR.  These are
old libraries supplied so that old programs that use them still
run.  The \fI.pl\fR files will all eventually be converted into standard
modules, and the \fI.ph\fR files made by \fBh2ph\fR will probably end up
as extension modules made by \fBh2xs\fR.  (Some \fI.ph\fR values may
already be available through the \s-1POSIX\s0, Errno, or Fcntl modules.)
The \fBpl2pm\fR file in the distribution may help in your conversion,
but it's just a mechanical process and therefore far from bulletproof.
.SS "Pragmatic Modules"
.IX Subsection "Pragmatic Modules"
They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually
work well only when used within a \f(CW\*(C`use\*(C'\fR, or \f(CW\*(C`no\*(C'\fR.  Most of these
are lexically scoped, so an inner \s-1BLOCK\s0 may countermand them
by saying:
.PP
.Vb 3
\&    no integer;
\&    no strict \*(Aqrefs\*(Aq;
\&    no warnings;
.Ve
.PP
which lasts until the end of that \s-1BLOCK\s0.
.PP
Some pragmas are lexically scoped\*(--typically those that affect the
\&\f(CW$^H\fR hints variable.  Others affect the current package instead,
like \f(CW\*(C`use vars\*(C'\fR and \f(CW\*(C`use subs\*(C'\fR, which allow you to predeclare a
variables or subroutines within a particular \fIfile\fR rather than
just a block.  Such declarations are effective for the entire file
for which they were declared.  You cannot rescind them with \f(CW\*(C`no
vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
The following pragmas are defined (and have their own documentation).
.IP "arybase" 12
.IX Item "arybase"
Set indexing base via $[
.IP "attributes" 12
.IX Item "attributes"
Get/set subroutine or variable attributes
.IP "autodie" 12
.IX Item "autodie"
Replace functions with ones that succeed or die with lexical scope
.IP "autodie::exception" 12
.IX Item "autodie::exception"
Exceptions from autodying functions.
.IP "autodie::exception::system" 12
.IX Item "autodie::exception::system"
Exceptions from autodying \fIsystem()\fR.
.IP "autodie::hints" 12
.IX Item "autodie::hints"
Provide hints about user subroutines to autodie
.IP "autouse" 12
.IX Item "autouse"
Postpone load of modules until a function is used
.IP "base" 12
.IX Item "base"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "bigint" 12
.IX Item "bigint"
Transparent BigInteger support for Perl
.IP "bignum" 12
.IX Item "bignum"
Transparent BigNumber support for Perl
.IP "bigrat" 12
.IX Item "bigrat"
Transparent BigNumber/BigRational support for Perl
.IP "blib" 12
.IX Item "blib"
Use MakeMaker's uninstalled version of a package
.IP "bytes" 12
.IX Item "bytes"
Force byte semantics rather than character semantics
.IP "charnames" 12
.IX Item "charnames"
Access to Unicode character names and named character sequences; also define character names
.IP "constant" 12
.IX Item "constant"
Declare constants
.IP "deprecate" 12
.IX Item "deprecate"
Perl pragma for deprecating the core version of a module
.IP "diagnostics" 12
.IX Item "diagnostics"
Produce verbose warning diagnostics
.IP "encoding" 12
.IX Item "encoding"
Allows you to write your script in non-ascii or non\-utf8
.IP "encoding::warnings" 12
.IX Item "encoding::warnings"
Warn on implicit encoding conversions
.IP "feature" 12
.IX Item "feature"
Enable new features
.IP "fields" 12
.IX Item "fields"
Compile-time class fields
.IP "filetest" 12
.IX Item "filetest"
Control the filetest permission operators
.IP "if" 12
.IX Item "if"
\&\f(CW\*(C`use\*(C'\fR a Perl module if a condition holds
.IP "inc::latest" 12
.IX Item "inc::latest"
Use modules bundled in inc/ if they are newer than installed ones
.IP "integer" 12
.IX Item "integer"
Use integer arithmetic instead of floating point
.IP "less" 12
.IX Item "less"
Request less of something
.IP "lib" 12
.IX Item "lib"
Manipulate \f(CW@INC\fR at compile time
.IP "locale" 12
.IX Item "locale"
Use or avoid \s-1POSIX\s0 locales for built-in operations
.IP "mro" 12
.IX Item "mro"
Method Resolution Order
.IP "open" 12
.IX Item "open"
Set default PerlIO layers for input and output
.IP "ops" 12
.IX Item "ops"
Restrict unsafe operations when compiling
.IP "overload" 12
.IX Item "overload"
Package for overloading Perl operations
.IP "overloading" 12
.IX Item "overloading"
Lexically control overloading
.IP "parent" 12
.IX Item "parent"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "perldoc" 12
.IX Item "perldoc"
Look up Perl documentation in Pod format.
.IP "perlfaq" 12
.IX Item "perlfaq"
Frequently asked questions about Perl
.IP "perlfaq1" 12
.IX Item "perlfaq1"
General Questions About Perl
.IP "perlfaq2" 12
.IX Item "perlfaq2"
Obtaining and Learning about Perl
.IP "perlfaq3" 12
.IX Item "perlfaq3"
Programming Tools
.IP "perlfaq4" 12
.IX Item "perlfaq4"
Data Manipulation
.IP "perlfaq5" 12
.IX Item "perlfaq5"
Files and Formats
.IP "perlfaq6" 12
.IX Item "perlfaq6"
Regular Expressions
.IP "perlfaq7" 12
.IX Item "perlfaq7"
General Perl Language Issues
.IP "perlfaq8" 12
.IX Item "perlfaq8"
System Interaction
.IP "perlfaq9" 12
.IX Item "perlfaq9"
Web, Email and Networking
.IP "perlfunc" 12
.IX Item "perlfunc"
Perl builtin functions
.IP "perlglossary" 12
.IX Item "perlglossary"
Perl Glossary
.IP "perlpodspeccopy" 12
.IX Item "perlpodspeccopy"
Plain Old Documentation: format specification and notes
.IP "perlvarcopy" 12
.IX Item "perlvarcopy"
Perl predefined variables
.IP "perlxs" 12
.IX Item "perlxs"
\&\s-1XS\s0 language reference manual
.IP "perlxstut" 12
.IX Item "perlxstut"
Tutorial for writing XSUBs
.IP "perlxstypemap" 12
.IX Item "perlxstypemap"
Perl \s-1XS\s0 C/Perl type mapping
.IP "re" 12
.IX Item "re"
Alter regular expression behaviour
.IP "sigtrap" 12
.IX Item "sigtrap"
Enable simple signal handling
.IP "sort" 12
.IX Item "sort"
Control \fIsort()\fR behaviour
.IP "strict" 12
.IX Item "strict"
Restrict unsafe constructs
.IP "subs" 12
.IX Item "subs"
Predeclare sub names
.IP "threads" 12
.IX Item "threads"
Perl interpreter-based threads
.IP "threads::shared" 12
.IX Item "threads::shared"
Perl extension for sharing data structures between threads
.IP "utf8" 12
.IX Item "utf8"
Enable/disable \s-1UTF\-8\s0 (or UTF-EBCDIC) in source code
.IP "vars" 12
.IX Item "vars"
Predeclare global variable names (obsolete)
.IP "version" 12
.IX Item "version"
Perl extension for Version Objects
.IP "vmsish" 12
.IX Item "vmsish"
Control VMS-specific language features
.IP "warnings" 12
.IX Item "warnings"
Control optional warnings
.IP "warnings::register" 12
.IX Item "warnings::register"
Warnings import function
.SS "Standard Modules"
.IX Subsection "Standard Modules"
Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the
Exporter module.  See their own documentation for details.
.PP
It's possible that not all modules listed below are installed on your
system. For example, the GDBM_File module will not be installed if you
don't have the gdbm library.
.IP "AnyDBM_File" 12
.IX Item "AnyDBM_File"
Provide framework for multiple DBMs
.IP "App::Cpan" 12
.IX Item "App::Cpan"
Easily interact with \s-1CPAN\s0 from the command line
.IP "App::Prove" 12
.IX Item "App::Prove"
Implements the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State" 12
.IX Item "App::Prove::State"
State storage for the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State::Result" 12
.IX Item "App::Prove::State::Result"
Individual test suite results.
.IP "App::Prove::State::Result::Test" 12
.IX Item "App::Prove::State::Result::Test"
Individual test results.
.IP "Archive::Extract" 12
.IX Item "Archive::Extract"
A generic archive extracting mechanism
.IP "Archive::Tar" 12
.IX Item "Archive::Tar"
Module for manipulations of tar archives
.IP "Archive::Tar::File" 12
.IX Item "Archive::Tar::File"
A subclass for in-memory extracted file from Archive::Tar
.IP "Attribute::Handlers" 12
.IX Item "Attribute::Handlers"
Simpler definition of attribute handlers
.IP "AutoLoader" 12
.IX Item "AutoLoader"
Load subroutines only on demand
.IP "AutoSplit" 12
.IX Item "AutoSplit"
Split a package for autoloading
.IP "B" 12
.IX Item "B"
The Perl Compiler Backend
.IP "B::Concise" 12
.IX Item "B::Concise"
Walk Perl syntax tree, printing concise info about ops
.IP "B::Debug" 12
.IX Item "B::Debug"
Walk Perl syntax tree, printing debug info about ops
.IP "B::Deparse" 12
.IX Item "B::Deparse"
Perl compiler backend to produce perl code
.IP "B::Lint" 12
.IX Item "B::Lint"
Perl lint
.IP "B::Lint::Debug" 12
.IX Item "B::Lint::Debug"
Adds debugging stringification to B::
.IP "B::Showlex" 12
.IX Item "B::Showlex"
Show lexical variables used in functions or files
.IP "B::Terse" 12
.IX Item "B::Terse"
Walk Perl syntax tree, printing terse info about ops
.IP "B::Xref" 12
.IX Item "B::Xref"
Generates cross reference reports for Perl programs
.IP "Benchmark" 12
.IX Item "Benchmark"
Benchmark running times of Perl code
.ie n .IP """Socket""" 12
.el .IP "\f(CWSocket\fR" 12
.IX Item "Socket"
Networking constants and support functions
.IP "\s-1CGI\s0" 12
.IX Item "CGI"
Handle Common Gateway Interface requests and responses
.IP "CGI::Apache" 12
.IX Item "CGI::Apache"
Backward compatibility module for \s-1CGI\s0.pm
.IP "CGI::Carp" 12
.IX Item "CGI::Carp"
\&\s-1CGI\s0 routines for writing to the \s-1HTTPD\s0 (or other) error log
.IP "CGI::Cookie" 12
.IX Item "CGI::Cookie"
Interface to \s-1HTTP\s0 Cookies
.IP "CGI::Fast" 12
.IX Item "CGI::Fast"
\&\s-1CGI\s0 Interface for Fast \s-1CGI\s0
.IP "CGI::Pretty" 12
.IX Item "CGI::Pretty"
Module to produce nicely formatted \s-1HTML\s0 code
.IP "CGI::Push" 12
.IX Item "CGI::Push"
Simple Interface to Server Push
.IP "CGI::Switch" 12
.IX Item "CGI::Switch"
Backward compatibility module for defunct CGI::Switch
.IP "CGI::Util" 12
.IX Item "CGI::Util"
Internal utilities used by \s-1CGI\s0 module
.IP "\s-1CORE\s0" 12
.IX Item "CORE"
Namespace for Perl's core routines
.IP "\s-1CPAN\s0" 12
.IX Item "CPAN"
Query, download and build perl modules from \s-1CPAN\s0 sites
.IP "\s-1CPAN::API::HOWTO\s0" 12
.IX Item "CPAN::API::HOWTO"
A recipe book for programming with \s-1CPAN\s0.pm
.IP "CPAN::Distroprefs" 12
.IX Item "CPAN::Distroprefs"
Read and match distroprefs
.IP "CPAN::FirstTime" 12
.IX Item "CPAN::FirstTime"
Utility for CPAN::Config file Initialization
.IP "CPAN::Kwalify" 12
.IX Item "CPAN::Kwalify"
Interface between \s-1CPAN\s0.pm and Kwalify.pm
.IP "CPAN::Meta" 12
.IX Item "CPAN::Meta"
The distribution metadata for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Converter" 12
.IX Item "CPAN::Meta::Converter"
Convert \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::Feature" 12
.IX Item "CPAN::Meta::Feature"
An optional feature provided by a \s-1CPAN\s0 distribution
.IP "CPAN::Meta::History" 12
.IX Item "CPAN::Meta::History"
History of \s-1CPAN\s0 Meta Spec changes
.IP "CPAN::Meta::Prereqs" 12
.IX Item "CPAN::Meta::Prereqs"
A set of distribution prerequisites by phase and type
.IP "CPAN::Meta::Requirements" 12
.IX Item "CPAN::Meta::Requirements"
A set of version requirements for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Spec" 12
.IX Item "CPAN::Meta::Spec"
Specification for \s-1CPAN\s0 distribution metadata
.IP "CPAN::Meta::Validator" 12
.IX Item "CPAN::Meta::Validator"
Validate \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::YAML" 12
.IX Item "CPAN::Meta::YAML"
Read and write a subset of \s-1YAML\s0 for \s-1CPAN\s0 Meta files
.IP "CPAN::Nox" 12
.IX Item "CPAN::Nox"
Wrapper around \s-1CPAN\s0.pm without using any \s-1XS\s0 module
.IP "CPAN::Version" 12
.IX Item "CPAN::Version"
Utility functions to compare \s-1CPAN\s0 versions
.IP "\s-1CPANPLUS\s0" 12
.IX Item "CPANPLUS"
\&\s-1API\s0 & \s-1CLI\s0 access to the \s-1CPAN\s0 mirrors
.IP "CPANPLUS::Backend" 12
.IX Item "CPANPLUS::Backend"
Programmer's interface to \s-1CPANPLUS\s0
.IP "CPANPLUS::Backend::RV" 12
.IX Item "CPANPLUS::Backend::RV"
Return value objects
.IP "CPANPLUS::Config" 12
.IX Item "CPANPLUS::Config"
Configuration defaults and heuristics for \s-1CPANPLUS\s0
.IP "CPANPLUS::Configure" 12
.IX Item "CPANPLUS::Configure"
Configuration for \s-1CPANPLUS\s0
.IP "CPANPLUS::Dist" 12
.IX Item "CPANPLUS::Dist"
Base class for plugins
.IP "CPANPLUS::Dist::Autobundle" 12
.IX Item "CPANPLUS::Dist::Autobundle"
Distribution class for installation snapshots
.IP "CPANPLUS::Dist::Base" 12
.IX Item "CPANPLUS::Dist::Base"
Base class for custom distribution classes
.IP "CPANPLUS::Dist::Build" 12
.IX Item "CPANPLUS::Dist::Build"
\&\s-1CPANPLUS\s0 plugin to install packages that use Build.PL
.IP "CPANPLUS::Dist::Build::Constants" 12
.IX Item "CPANPLUS::Dist::Build::Constants"
Constants for CPANPLUS::Dist::Build
.IP "CPANPLUS::Dist::MM" 12
.IX Item "CPANPLUS::Dist::MM"
Distribution class for MakeMaker related modules
.IP "CPANPLUS::Dist::Sample" 12
.IX Item "CPANPLUS::Dist::Sample"
Sample code to create your own Dist::* plugin
.IP "CPANPLUS::Error" 12
.IX Item "CPANPLUS::Error"
Error handling for \s-1CPANPLUS\s0
.IP "\s-1CPANPLUS::FAQ\s0" 12
.IX Item "CPANPLUS::FAQ"
\&\s-1CPANPLUS\s0 Frequently Asked Questions
.IP "CPANPLUS::Hacking" 12
.IX Item "CPANPLUS::Hacking"
Developing \s-1CPANPLUS\s0
.IP "CPANPLUS::Internals" 12
.IX Item "CPANPLUS::Internals"
\&\s-1CPANPLUS\s0 internals
.IP "CPANPLUS::Internals::Extract" 12
.IX Item "CPANPLUS::Internals::Extract"
Internals for archive extraction
.IP "CPANPLUS::Internals::Fetch" 12
.IX Item "CPANPLUS::Internals::Fetch"
Internals for fetching files
.IP "CPANPLUS::Internals::Report" 12
.IX Item "CPANPLUS::Internals::Report"
Internals for sending test reports
.IP "CPANPLUS::Internals::Search" 12
.IX Item "CPANPLUS::Internals::Search"
Internals for searching for modules
.IP "CPANPLUS::Internals::Source" 12
.IX Item "CPANPLUS::Internals::Source"
Internals for updating source files
.IP "CPANPLUS::Internals::Source::Memory" 12
.IX Item "CPANPLUS::Internals::Source::Memory"
In memory implementation
.IP "CPANPLUS::Internals::Source::SQLite" 12
.IX Item "CPANPLUS::Internals::Source::SQLite"
SQLite implementation
.IP "CPANPLUS::Internals::Utils" 12
.IX Item "CPANPLUS::Internals::Utils"
Convenience functions for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module" 12
.IX Item "CPANPLUS::Module"
\&\s-1CPAN\s0 module objects for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author" 12
.IX Item "CPANPLUS::Module::Author"
\&\s-1CPAN\s0 author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author::Fake" 12
.IX Item "CPANPLUS::Module::Author::Fake"
Dummy author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Checksums" 12
.IX Item "CPANPLUS::Module::Checksums"
Checking the checksum of a distribution
.IP "CPANPLUS::Module::Fake" 12
.IX Item "CPANPLUS::Module::Fake"
Fake module object for internal use
.IP "CPANPLUS::Selfupdate" 12
.IX Item "CPANPLUS::Selfupdate"
Self-updating for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell" 12
.IX Item "CPANPLUS::Shell"
Base class for \s-1CPANPLUS\s0 shells
.IP "CPANPLUS::Shell::Classic" 12
.IX Item "CPANPLUS::Shell::Classic"
\&\s-1CPAN\s0.pm emulation for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default" 12
.IX Item "CPANPLUS::Shell::Default"
The default \s-1CPANPLUS\s0 shell
.IP "CPANPLUS::Shell::Default::Plugins::CustomSource" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::CustomSource"
Add custom sources to \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::HOWTO" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::HOWTO"
Documentation on how to write your own plugins
.IP "CPANPLUS::Shell::Default::Plugins::Remote" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Remote"
Connect to a remote \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::Source" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Source"
Read in \s-1CPANPLUS\s0 commands
.IP "Carp" 12
.IX Item "Carp"
Alternative warn and die for modules
.IP "Class::Struct" 12
.IX Item "Class::Struct"
Declare struct-like datatypes as Perl classes
.IP "Compress::Raw::Bzip2" 12
.IX Item "Compress::Raw::Bzip2"
Low-Level Interface to bzip2 compression library
.IP "Compress::Raw::Zlib" 12
.IX Item "Compress::Raw::Zlib"
Low-Level Interface to zlib compression library
.IP "Compress::Zlib" 12
.IX Item "Compress::Zlib"
Interface to zlib compression library
.IP "Config" 12
.IX Item "Config"
Access Perl configuration information
.IP "Cwd" 12
.IX Item "Cwd"
Get pathname of current working directory
.IP "\s-1DB\s0" 12
.IX Item "DB"
Programmatic interface to the Perl debugging \s-1API\s0
.IP "DBM_Filter" 12
.IX Item "DBM_Filter"
Filter \s-1DBM\s0 keys/values
.IP "DBM_Filter::compress" 12
.IX Item "DBM_Filter::compress"
Filter for DBM_Filter
.IP "DBM_Filter::encode" 12
.IX Item "DBM_Filter::encode"
Filter for DBM_Filter
.IP "DBM_Filter::int32" 12
.IX Item "DBM_Filter::int32"
Filter for DBM_Filter
.IP "DBM_Filter::null" 12
.IX Item "DBM_Filter::null"
Filter for DBM_Filter
.IP "DBM_Filter::utf8" 12
.IX Item "DBM_Filter::utf8"
Filter for DBM_Filter
.IP "DB_File" 12
.IX Item "DB_File"
Perl5 access to Berkeley \s-1DB\s0 version 1.x
.IP "Data::Dumper" 12
.IX Item "Data::Dumper"
Stringified perl data structures, suitable for both printing and \f(CW\*(C`eval\*(C'\fR
.IP "Devel::InnerPackage" 12
.IX Item "Devel::InnerPackage"
Find all the inner packages of a package
.IP "Devel::PPPort" 12
.IX Item "Devel::PPPort"
Perl/Pollution/Portability
.IP "Devel::Peek" 12
.IX Item "Devel::Peek"
A data debugging tool for the \s-1XS\s0 programmer
.IP "Devel::SelfStubber" 12
.IX Item "Devel::SelfStubber"
Generate stubs for a SelfLoading module
.IP "Digest" 12
.IX Item "Digest"
Modules that calculate message digests
.IP "Digest::MD5" 12
.IX Item "Digest::MD5"
Perl interface to the \s-1MD5\s0 Algorithm
.IP "Digest::SHA" 12
.IX Item "Digest::SHA"
Perl extension for \s-1SHA\-1/224/256/384/512\s0
.IP "Digest::base" 12
.IX Item "Digest::base"
Digest base class
.IP "Digest::file" 12
.IX Item "Digest::file"
Calculate digests of files
.IP "DirHandle" 12
.IX Item "DirHandle"
Supply object methods for directory handles
.IP "Dumpvalue" 12
.IX Item "Dumpvalue"
Provides screen dump of Perl data.
.IP "DynaLoader" 12
.IX Item "DynaLoader"
Dynamically load C libraries into Perl code
.IP "Encode" 12
.IX Item "Encode"
Character encodings in Perl
.IP "Encode::Alias" 12
.IX Item "Encode::Alias"
Alias definitions to encodings
.IP "Encode::Byte" 12
.IX Item "Encode::Byte"
Single Byte Encodings
.IP "Encode::CJKConstants" 12
.IX Item "Encode::CJKConstants"
Internally used by Encode::??::ISO_2022_*
.IP "Encode::CN" 12
.IX Item "Encode::CN"
China-based Chinese Encodings
.IP "Encode::CN::HZ" 12
.IX Item "Encode::CN::HZ"
Internally used by Encode::CN
.IP "Encode::Config" 12
.IX Item "Encode::Config"
Internally used by Encode
.IP "Encode::EBCDIC" 12
.IX Item "Encode::EBCDIC"
\&\s-1EBCDIC\s0 Encodings
.IP "Encode::Encoder" 12
.IX Item "Encode::Encoder"
Object Oriented Encoder
.IP "Encode::Encoding" 12
.IX Item "Encode::Encoding"
Encode Implementation Base Class
.IP "Encode::GSM0338" 12
.IX Item "Encode::GSM0338"
\&\s-1ESTI\s0 \s-1GSM\s0 03.38 Encoding
.IP "Encode::Guess" 12
.IX Item "Encode::Guess"
Guesses encoding from data
.IP "Encode::JP" 12
.IX Item "Encode::JP"
Japanese Encodings
.IP "Encode::JP::H2Z" 12
.IX Item "Encode::JP::H2Z"
Internally used by Encode::JP::2022_JP*
.IP "Encode::JP::JIS7" 12
.IX Item "Encode::JP::JIS7"
Internally used by Encode::JP
.IP "Encode::KR" 12
.IX Item "Encode::KR"
Korean Encodings
.IP "Encode::KR::2022_KR" 12
.IX Item "Encode::KR::2022_KR"
Internally used by Encode::KR
.IP "Encode::MIME::Header" 12
.IX Item "Encode::MIME::Header"
\&\s-1MIME\s0 'B' and 'Q' header encoding
.IP "Encode::MIME::Name" 12
.IX Item "Encode::MIME::Name"
Internally used by Encode
.IP "Encode::PerlIO" 12
.IX Item "Encode::PerlIO"
A detailed document on Encode and PerlIO
.IP "Encode::Supported" 12
.IX Item "Encode::Supported"
Encodings supported by Encode
.IP "Encode::Symbol" 12
.IX Item "Encode::Symbol"
Symbol Encodings
.IP "Encode::TW" 12
.IX Item "Encode::TW"
Taiwan-based Chinese Encodings
.IP "Encode::Unicode" 12
.IX Item "Encode::Unicode"
Various Unicode Transformation Formats
.IP "Encode::Unicode::UTF7" 12
.IX Item "Encode::Unicode::UTF7"
\&\s-1UTF\-7\s0 encoding
.IP "English" 12
.IX Item "English"
Use nice English (or awk) names for ugly punctuation variables
.IP "Env" 12
.IX Item "Env"
Perl module that imports environment variables as scalars or arrays
.IP "Errno" 12
.IX Item "Errno"
System errno constants
.IP "Exporter" 12
.IX Item "Exporter"
Implements default import method for modules
.IP "Exporter::Heavy" 12
.IX Item "Exporter::Heavy"
Exporter guts
.IP "ExtUtils::CBuilder" 12
.IX Item "ExtUtils::CBuilder"
Compile and link C code for Perl modules
.IP "ExtUtils::CBuilder::Platform::Windows" 12
.IX Item "ExtUtils::CBuilder::Platform::Windows"
Builder class for Windows platforms
.IP "ExtUtils::Command" 12
.IX Item "ExtUtils::Command"
Utilities to replace common \s-1UNIX\s0 commands in Makefiles etc.
.IP "ExtUtils::Command::MM" 12
.IX Item "ExtUtils::Command::MM"
Commands for the \s-1MM\s0's to use in Makefiles
.IP "ExtUtils::Constant" 12
.IX Item "ExtUtils::Constant"
Generate \s-1XS\s0 code to import C header constants
.IP "ExtUtils::Constant::Base" 12
.IX Item "ExtUtils::Constant::Base"
Base class for ExtUtils::Constant objects
.IP "ExtUtils::Constant::Utils" 12
.IX Item "ExtUtils::Constant::Utils"
Helper functions for ExtUtils::Constant
.IP "ExtUtils::Constant::XS" 12
.IX Item "ExtUtils::Constant::XS"
Generate C code for \s-1XS\s0 modules' constants.
.IP "ExtUtils::Embed" 12
.IX Item "ExtUtils::Embed"
Utilities for embedding Perl in C/\*(C+ applications
.IP "ExtUtils::Install" 12
.IX Item "ExtUtils::Install"
Install files from here to there
.IP "ExtUtils::Installed" 12
.IX Item "ExtUtils::Installed"
Inventory management of installed modules
.IP "ExtUtils::Liblist" 12
.IX Item "ExtUtils::Liblist"
Determine libraries to use and how to use them
.IP "ExtUtils::MM" 12
.IX Item "ExtUtils::MM"
\&\s-1OS\s0 adjusted ExtUtils::MakeMaker subclass
.IP "ExtUtils::MM_AIX" 12
.IX Item "ExtUtils::MM_AIX"
\&\s-1AIX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Any" 12
.IX Item "ExtUtils::MM_Any"
Platform-agnostic \s-1MM\s0 methods
.IP "ExtUtils::MM_BeOS" 12
.IX Item "ExtUtils::MM_BeOS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Cygwin" 12
.IX Item "ExtUtils::MM_Cygwin"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_DOS" 12
.IX Item "ExtUtils::MM_DOS"
\&\s-1DOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Darwin" 12
.IX Item "ExtUtils::MM_Darwin"
Special behaviors for \s-1OS\s0 X
.IP "ExtUtils::MM_MacOS" 12
.IX Item "ExtUtils::MM_MacOS"
Once produced Makefiles for MacOS Classic
.IP "ExtUtils::MM_NW5" 12
.IX Item "ExtUtils::MM_NW5"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_OS2" 12
.IX Item "ExtUtils::MM_OS2"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_QNX" 12
.IX Item "ExtUtils::MM_QNX"
\&\s-1QNX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_UWIN" 12
.IX Item "ExtUtils::MM_UWIN"
U/WIN specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Unix" 12
.IX Item "ExtUtils::MM_Unix"
Methods used by ExtUtils::MakeMaker
.IP "ExtUtils::MM_VMS" 12
.IX Item "ExtUtils::MM_VMS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_VOS" 12
.IX Item "ExtUtils::MM_VOS"
\&\s-1VOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Win32" 12
.IX Item "ExtUtils::MM_Win32"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Win95" 12
.IX Item "ExtUtils::MM_Win95"
Method to customize MakeMaker for Win9X
.IP "ExtUtils::MY" 12
.IX Item "ExtUtils::MY"
ExtUtils::MakeMaker subclass for customization
.IP "ExtUtils::MakeMaker" 12
.IX Item "ExtUtils::MakeMaker"
Create a module Makefile
.IP "ExtUtils::MakeMaker::Config" 12
.IX Item "ExtUtils::MakeMaker::Config"
Wrapper around Config.pm
.IP "ExtUtils::MakeMaker::FAQ" 12
.IX Item "ExtUtils::MakeMaker::FAQ"
Frequently Asked Questions About MakeMaker
.IP "ExtUtils::MakeMaker::Tutorial" 12
.IX Item "ExtUtils::MakeMaker::Tutorial"
Writing a module with MakeMaker
.IP "ExtUtils::Manifest" 12
.IX Item "ExtUtils::Manifest"
Utilities to write and check a \s-1MANIFEST\s0 file
.IP "ExtUtils::Mkbootstrap" 12
.IX Item "ExtUtils::Mkbootstrap"
Make a bootstrap file for use by DynaLoader
.IP "ExtUtils::Mksymlists" 12
.IX Item "ExtUtils::Mksymlists"
Write linker options files for dynamic extension
.IP "ExtUtils::Packlist" 12
.IX Item "ExtUtils::Packlist"
Manage .packlist files
.IP "ExtUtils::ParseXS" 12
.IX Item "ExtUtils::ParseXS"
Converts Perl \s-1XS\s0 code into C code
.IP "ExtUtils::ParseXS::Constants" 12
.IX Item "ExtUtils::ParseXS::Constants"
Initialization values for some globals
.IP "ExtUtils::ParseXS::Utilities" 12
.IX Item "ExtUtils::ParseXS::Utilities"
Subroutines used with ExtUtils::ParseXS
.IP "ExtUtils::Typemaps" 12
.IX Item "ExtUtils::Typemaps"
Read/Write/Modify Perl/XS typemap files
.IP "ExtUtils::Typemaps::Cmd" 12
.IX Item "ExtUtils::Typemaps::Cmd"
Quick commands for handling typemaps
.IP "ExtUtils::Typemaps::InputMap" 12
.IX Item "ExtUtils::Typemaps::InputMap"
Entry in the \s-1INPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::OutputMap" 12
.IX Item "ExtUtils::Typemaps::OutputMap"
Entry in the \s-1OUTPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::Type" 12
.IX Item "ExtUtils::Typemaps::Type"
Entry in the \s-1TYPEMAP\s0 section of a typemap
.IP "ExtUtils::XSSymSet" 12
.IX Item "ExtUtils::XSSymSet"
Keep sets of symbol names palatable to the \s-1VMS\s0 linker
.IP "ExtUtils::testlib" 12
.IX Item "ExtUtils::testlib"
Add blib/* directories to \f(CW@INC\fR
.IP "Fatal" 12
.IX Item "Fatal"
Replace functions with equivalents which succeed or die
.IP "Fcntl" 12
.IX Item "Fcntl"
Load the C Fcntl.h defines
.IP "File::Basename" 12
.IX Item "File::Basename"
Parse file paths into directory, filename and suffix.
.IP "File::CheckTree" 12
.IX Item "File::CheckTree"
Run many filetest checks on a tree
.IP "File::Compare" 12
.IX Item "File::Compare"
Compare files or filehandles
.IP "File::Copy" 12
.IX Item "File::Copy"
Copy files or filehandles
.IP "File::DosGlob" 12
.IX Item "File::DosGlob"
\&\s-1DOS\s0 like globbing and then some
.IP "File::Fetch" 12
.IX Item "File::Fetch"
A generic file fetching mechanism
.IP "File::Find" 12
.IX Item "File::Find"
Traverse a directory tree.
.IP "File::Glob" 12
.IX Item "File::Glob"
Perl extension for \s-1BSD\s0 glob routine
.IP "File::GlobMapper" 12
.IX Item "File::GlobMapper"
Extend File Glob to Allow Input and Output Files
.IP "File::Path" 12
.IX Item "File::Path"
Create or remove directory trees
.IP "File::Spec" 12
.IX Item "File::Spec"
Portably perform operations on file names
.IP "File::Spec::Cygwin" 12
.IX Item "File::Spec::Cygwin"
Methods for Cygwin file specs
.IP "File::Spec::Epoc" 12
.IX Item "File::Spec::Epoc"
Methods for Epoc file specs
.IP "File::Spec::Functions" 12
.IX Item "File::Spec::Functions"
Portably perform operations on file names
.IP "File::Spec::Mac" 12
.IX Item "File::Spec::Mac"
File::Spec for Mac \s-1OS\s0 (Classic)
.IP "File::Spec::OS2" 12
.IX Item "File::Spec::OS2"
Methods for \s-1OS/2\s0 file specs
.IP "File::Spec::Unix" 12
.IX Item "File::Spec::Unix"
File::Spec for Unix, base for other File::Spec modules
.IP "File::Spec::VMS" 12
.IX Item "File::Spec::VMS"
Methods for \s-1VMS\s0 file specs
.IP "File::Spec::Win32" 12
.IX Item "File::Spec::Win32"
Methods for Win32 file specs
.IP "File::Temp" 12
.IX Item "File::Temp"
Return name and handle of a temporary file safely
.IP "File::stat" 12
.IX Item "File::stat"
By-name interface to Perl's built-in \fIstat()\fR functions
.IP "FileCache" 12
.IX Item "FileCache"
Keep more files open than the system permits
.IP "FileHandle" 12
.IX Item "FileHandle"
Supply object methods for filehandles
.IP "Filter::Simple" 12
.IX Item "Filter::Simple"
Simplified source filtering
.IP "Filter::Util::Call" 12
.IX Item "Filter::Util::Call"
Perl Source Filter Utility Module
.IP "FindBin" 12
.IX Item "FindBin"
Locate directory of original perl script
.IP "GDBM_File" 12
.IX Item "GDBM_File"
Perl5 access to the gdbm library.
.IP "Getopt::Long" 12
.IX Item "Getopt::Long"
Extended processing of command line options
.IP "Getopt::Std" 12
.IX Item "Getopt::Std"
Process single-character switches with switch clustering
.IP "HTTP::Tiny" 12
.IX Item "HTTP::Tiny"
A small, simple, correct \s-1HTTP/1\s0.1 client
.IP "Hash::Util" 12
.IX Item "Hash::Util"
A selection of general-utility hash subroutines
.IP "Hash::Util::FieldHash" 12
.IX Item "Hash::Util::FieldHash"
Support for Inside-Out Classes
.IP "I18N::Collate" 12
.IX Item "I18N::Collate"
Compare 8\-bit scalar data according to the current locale
.IP "I18N::LangTags" 12
.IX Item "I18N::LangTags"
Functions for dealing with RFC3066\-style language tags
.IP "I18N::LangTags::Detect" 12
.IX Item "I18N::LangTags::Detect"
Detect the user's language preferences
.IP "I18N::LangTags::List" 12
.IX Item "I18N::LangTags::List"
Tags and names for human languages
.IP "I18N::Langinfo" 12
.IX Item "I18N::Langinfo"
Query locale information
.IP "\s-1IO\s0" 12
.IX Item "IO"
Load various \s-1IO\s0 modules
.IP "IO::Compress::Base" 12
.IX Item "IO::Compress::Base"
Base Class for IO::Compress modules
.IP "IO::Compress::Bzip2" 12
.IX Item "IO::Compress::Bzip2"
Write bzip2 files/buffers
.IP "IO::Compress::Deflate" 12
.IX Item "IO::Compress::Deflate"
Write \s-1RFC\s0 1950 files/buffers
.IP "IO::Compress::FAQ" 12
.IX Item "IO::Compress::FAQ"
Frequently Asked Questions about IO::Compress
.IP "IO::Compress::Gzip" 12
.IX Item "IO::Compress::Gzip"
Write \s-1RFC\s0 1952 files/buffers
.IP "IO::Compress::RawDeflate" 12
.IX Item "IO::Compress::RawDeflate"
Write \s-1RFC\s0 1951 files/buffers
.IP "IO::Compress::Zip" 12
.IX Item "IO::Compress::Zip"
Write zip files/buffers
.IP "IO::Dir" 12
.IX Item "IO::Dir"
Supply object methods for directory handles
.IP "IO::File" 12
.IX Item "IO::File"
Supply object methods for filehandles
.IP "IO::Handle" 12
.IX Item "IO::Handle"
Supply object methods for I/O handles
.IP "IO::Pipe" 12
.IX Item "IO::Pipe"
Supply object methods for pipes
.IP "IO::Poll" 12
.IX Item "IO::Poll"
Object interface to system poll call
.IP "IO::Seekable" 12
.IX Item "IO::Seekable"
Supply seek based methods for I/O objects
.IP "IO::Select" 12
.IX Item "IO::Select"
\&\s-1OO\s0 interface to the select system call
.IP "IO::Socket" 12
.IX Item "IO::Socket"
Object interface to socket communications
.IP "IO::Socket::INET" 12
.IX Item "IO::Socket::INET"
Object interface for \s-1AF_INET\s0 domain sockets
.IP "IO::Socket::UNIX" 12
.IX Item "IO::Socket::UNIX"
Object interface for \s-1AF_UNIX\s0 domain sockets
.IP "IO::Uncompress::AnyInflate" 12
.IX Item "IO::Uncompress::AnyInflate"
Uncompress zlib-based (zip, gzip) file/buffer
.IP "IO::Uncompress::AnyUncompress" 12
.IX Item "IO::Uncompress::AnyUncompress"
Uncompress gzip, zip, bzip2 or lzop file/buffer
.IP "IO::Uncompress::Base" 12
.IX Item "IO::Uncompress::Base"
Base Class for IO::Uncompress modules
.IP "IO::Uncompress::Bunzip2" 12
.IX Item "IO::Uncompress::Bunzip2"
Read bzip2 files/buffers
.IP "IO::Uncompress::Gunzip" 12
.IX Item "IO::Uncompress::Gunzip"
Read \s-1RFC\s0 1952 files/buffers
.IP "IO::Uncompress::Inflate" 12
.IX Item "IO::Uncompress::Inflate"
Read \s-1RFC\s0 1950 files/buffers
.IP "IO::Uncompress::RawInflate" 12
.IX Item "IO::Uncompress::RawInflate"
Read \s-1RFC\s0 1951 files/buffers
.IP "IO::Uncompress::Unzip" 12
.IX Item "IO::Uncompress::Unzip"
Read zip files/buffers
.IP "IO::Zlib" 12
.IX Item "IO::Zlib"
\&\s-1IO::\s0 style interface to Compress::Zlib
.IP "IPC::Cmd" 12
.IX Item "IPC::Cmd"
Finding and running system commands made easy
.IP "IPC::Msg" 12
.IX Item "IPC::Msg"
SysV Msg \s-1IPC\s0 object class
.IP "IPC::Open2" 12
.IX Item "IPC::Open2"
Open a process for both reading and writing using \fIopen2()\fR
.IP "IPC::Open3" 12
.IX Item "IPC::Open3"
Open a process for reading, writing, and error handling using \fIopen3()\fR
.IP "IPC::Semaphore" 12
.IX Item "IPC::Semaphore"
SysV Semaphore \s-1IPC\s0 object class
.IP "IPC::SharedMem" 12
.IX Item "IPC::SharedMem"
SysV Shared Memory \s-1IPC\s0 object class
.IP "IPC::SysV" 12
.IX Item "IPC::SysV"
System V \s-1IPC\s0 constants and system calls
.IP "\s-1JSON::PP\s0" 12
.IX Item "JSON::PP"
\&\s-1JSON::XS\s0 compatible pure-Perl module.
.IP "JSON::PP::Boolean" 12
.IX Item "JSON::PP::Boolean"
Dummy module providing JSON::PP::Boolean
.IP "List::Util" 12
.IX Item "List::Util"
A selection of general-utility list subroutines
.IP "List::Util::XS" 12
.IX Item "List::Util::XS"
Indicate if List::Util was compiled with a C compiler
.IP "Locale::Codes" 12
.IX Item "Locale::Codes"
A distribution of modules to handle locale codes
.IP "Locale::Codes::API" 12
.IX Item "Locale::Codes::API"
A description of the callable function in each module
.IP "Locale::Codes::Changes" 12
.IX Item "Locale::Codes::Changes"
Details changes to Locale::Codes
.IP "Locale::Codes::Constants" 12
.IX Item "Locale::Codes::Constants"
Constants for Locale codes
.IP "Locale::Codes::Country" 12
.IX Item "Locale::Codes::Country"
Standard codes for country identification
.IP "Locale::Codes::Country_Codes" 12
.IX Item "Locale::Codes::Country_Codes"
Country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Country_Retired" 12
.IX Item "Locale::Codes::Country_Retired"
Retired country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Currency" 12
.IX Item "Locale::Codes::Currency"
Standard codes for currency identification
.IP "Locale::Codes::Currency_Codes" 12
.IX Item "Locale::Codes::Currency_Codes"
Currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::Currency_Retired" 12
.IX Item "Locale::Codes::Currency_Retired"
Retired currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::LangExt" 12
.IX Item "Locale::Codes::LangExt"
Standard codes for language extension identification
.IP "Locale::Codes::LangExt_Codes" 12
.IX Item "Locale::Codes::LangExt_Codes"
Langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangExt_Retired" 12
.IX Item "Locale::Codes::LangExt_Retired"
Retired langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangFam" 12
.IX Item "Locale::Codes::LangFam"
Standard codes for language extension identification
.IP "Locale::Codes::LangFam_Codes" 12
.IX Item "Locale::Codes::LangFam_Codes"
Langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangFam_Retired" 12
.IX Item "Locale::Codes::LangFam_Retired"
Retired langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangVar" 12
.IX Item "Locale::Codes::LangVar"
Standard codes for language variation identification
.IP "Locale::Codes::LangVar_Codes" 12
.IX Item "Locale::Codes::LangVar_Codes"
Langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::LangVar_Retired" 12
.IX Item "Locale::Codes::LangVar_Retired"
Retired langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::Language" 12
.IX Item "Locale::Codes::Language"
Standard codes for language identification
.IP "Locale::Codes::Language_Codes" 12
.IX Item "Locale::Codes::Language_Codes"
Language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Language_Retired" 12
.IX Item "Locale::Codes::Language_Retired"
Retired language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Script" 12
.IX Item "Locale::Codes::Script"
Standard codes for script identification
.IP "Locale::Codes::Script_Codes" 12
.IX Item "Locale::Codes::Script_Codes"
Script codes for the Locale::Codes::Script module
.IP "Locale::Codes::Script_Retired" 12
.IX Item "Locale::Codes::Script_Retired"
Retired script codes for the Locale::Codes::Script module
.IP "Locale::Country" 12
.IX Item "Locale::Country"
Standard codes for country identification
.IP "Locale::Currency" 12
.IX Item "Locale::Currency"
Standard codes for currency identification
.IP "Locale::Language" 12
.IX Item "Locale::Language"
Standard codes for language identification
.IP "Locale::Maketext" 12
.IX Item "Locale::Maketext"
Framework for localization
.IP "Locale::Maketext::Cookbook" 12
.IX Item "Locale::Maketext::Cookbook"
Recipes for using Locale::Maketext
.IP "Locale::Maketext::Guts" 12
.IX Item "Locale::Maketext::Guts"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::GutsLoader" 12
.IX Item "Locale::Maketext::GutsLoader"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::Simple" 12
.IX Item "Locale::Maketext::Simple"
Simple interface to Locale::Maketext::Lexicon
.IP "Locale::Maketext::TPJ13" 12
.IX Item "Locale::Maketext::TPJ13"
Article about software localization
.IP "Locale::Script" 12
.IX Item "Locale::Script"
Standard codes for script identification
.IP "Log::Message" 12
.IX Item "Log::Message"
A generic message storing mechanism;
.IP "Log::Message::Config" 12
.IX Item "Log::Message::Config"
Configuration options for Log::Message
.IP "Log::Message::Handlers" 12
.IX Item "Log::Message::Handlers"
Message handlers for Log::Message
.IP "Log::Message::Item" 12
.IX Item "Log::Message::Item"
Message objects for Log::Message
.IP "Log::Message::Simple" 12
.IX Item "Log::Message::Simple"
Simplified interface to Log::Message
.IP "MIME::Base64" 12
.IX Item "MIME::Base64"
Encoding and decoding of base64 strings
.IP "MIME::QuotedPrint" 12
.IX Item "MIME::QuotedPrint"
Encoding and decoding of quoted-printable strings
.IP "Math::BigFloat" 12
.IX Item "Math::BigFloat"
Arbitrary size floating point math package
.IP "Math::BigInt" 12
.IX Item "Math::BigInt"
Arbitrary size integer/float math package
.IP "Math::BigInt::Calc" 12
.IX Item "Math::BigInt::Calc"
Pure Perl module to support Math::BigInt
.IP "Math::BigInt::CalcEmu" 12
.IX Item "Math::BigInt::CalcEmu"
Emulate low-level math with BigInt code
.IP "Math::BigInt::FastCalc" 12
.IX Item "Math::BigInt::FastCalc"
Math::BigInt::Calc with some \s-1XS\s0 for more speed
.IP "Math::BigRat" 12
.IX Item "Math::BigRat"
Arbitrary big rational numbers
.IP "Math::Complex" 12
.IX Item "Math::Complex"
Complex numbers and associated mathematical functions
.IP "Math::Trig" 12
.IX Item "Math::Trig"
Trigonometric functions
.IP "Memoize" 12
.IX Item "Memoize"
Make functions faster by trading space for time
.IP "Memoize::AnyDBM_File" 12
.IX Item "Memoize::AnyDBM_File"
Glue to provide \s-1EXISTS\s0 for AnyDBM_File for Storable use
.IP "Memoize::Expire" 12
.IX Item "Memoize::Expire"
Plug-in module for automatic expiration of memoized values
.IP "Memoize::ExpireFile" 12
.IX Item "Memoize::ExpireFile"
Test for Memoize expiration semantics
.IP "Memoize::ExpireTest" 12
.IX Item "Memoize::ExpireTest"
Test for Memoize expiration semantics
.IP "Memoize::NDBM_File" 12
.IX Item "Memoize::NDBM_File"
Glue to provide \s-1EXISTS\s0 for NDBM_File for Storable use
.IP "Memoize::SDBM_File" 12
.IX Item "Memoize::SDBM_File"
Glue to provide \s-1EXISTS\s0 for SDBM_File for Storable use
.IP "Memoize::Storable" 12
.IX Item "Memoize::Storable"
Store Memoized data in Storable database
.IP "Module::Build" 12
.IX Item "Module::Build"
Build and install Perl modules
.IP "Module::Build::API" 12
.IX Item "Module::Build::API"
\&\s-1API\s0 Reference for Module Authors
.IP "Module::Build::Authoring" 12
.IX Item "Module::Build::Authoring"
Authoring Module::Build modules
.IP "Module::Build::Base" 12
.IX Item "Module::Build::Base"
Default methods for Module::Build
.IP "Module::Build::Bundling" 12
.IX Item "Module::Build::Bundling"
How to bundle Module::Build with a distribution
.IP "Module::Build::Compat" 12
.IX Item "Module::Build::Compat"
Compatibility with ExtUtils::MakeMaker
.IP "Module::Build::ConfigData" 12
.IX Item "Module::Build::ConfigData"
Configuration for Module::Build
.IP "Module::Build::Cookbook" 12
.IX Item "Module::Build::Cookbook"
Examples of Module::Build Usage
.IP "Module::Build::ModuleInfo" 12
.IX Item "Module::Build::ModuleInfo"
\&\s-1DEPRECATED\s0
.IP "Module::Build::Notes" 12
.IX Item "Module::Build::Notes"
Create persistent distribution configuration modules
.IP "Module::Build::PPMMaker" 12
.IX Item "Module::Build::PPMMaker"
Perl Package Manager file creation
.IP "Module::Build::Platform::Amiga" 12
.IX Item "Module::Build::Platform::Amiga"
Builder class for Amiga platforms
.IP "Module::Build::Platform::Default" 12
.IX Item "Module::Build::Platform::Default"
Stub class for unknown platforms
.IP "Module::Build::Platform::EBCDIC" 12
.IX Item "Module::Build::Platform::EBCDIC"
Builder class for \s-1EBCDIC\s0 platforms
.IP "Module::Build::Platform::MPEiX" 12
.IX Item "Module::Build::Platform::MPEiX"
Builder class for MPEiX platforms
.IP "Module::Build::Platform::MacOS" 12
.IX Item "Module::Build::Platform::MacOS"
Builder class for MacOS platforms
.IP "Module::Build::Platform::RiscOS" 12
.IX Item "Module::Build::Platform::RiscOS"
Builder class for RiscOS platforms
.IP "Module::Build::Platform::Unix" 12
.IX Item "Module::Build::Platform::Unix"
Builder class for Unix platforms
.IP "Module::Build::Platform::VMS" 12
.IX Item "Module::Build::Platform::VMS"
Builder class for \s-1VMS\s0 platforms
.IP "Module::Build::Platform::VOS" 12
.IX Item "Module::Build::Platform::VOS"
Builder class for \s-1VOS\s0 platforms
.IP "Module::Build::Platform::Windows" 12
.IX Item "Module::Build::Platform::Windows"
Builder class for Windows platforms
.IP "Module::Build::Platform::aix" 12
.IX Item "Module::Build::Platform::aix"
Builder class for \s-1AIX\s0 platform
.IP "Module::Build::Platform::cygwin" 12
.IX Item "Module::Build::Platform::cygwin"
Builder class for Cygwin platform
.IP "Module::Build::Platform::darwin" 12
.IX Item "Module::Build::Platform::darwin"
Builder class for Mac \s-1OS\s0 X platform
.IP "Module::Build::Platform::os2" 12
.IX Item "Module::Build::Platform::os2"
Builder class for \s-1OS/2\s0 platform
.IP "Module::Build::Version" 12
.IX Item "Module::Build::Version"
\&\s-1DEPRECATED\s0
.IP "Module::Build::YAML" 12
.IX Item "Module::Build::YAML"
\&\s-1DEPRECATED\s0
.IP "Module::CoreList" 12
.IX Item "Module::CoreList"
What modules shipped with versions of perl
.IP "Module::Load" 12
.IX Item "Module::Load"
Runtime require of both modules and files
.IP "Module::Load::Conditional" 12
.IX Item "Module::Load::Conditional"
Looking up module information / loading at runtime
.IP "Module::Loaded" 12
.IX Item "Module::Loaded"
Mark modules as loaded or unloaded
.IP "Module::Metadata" 12
.IX Item "Module::Metadata"
Gather package and \s-1POD\s0 information from perl module files
.IP "Module::Pluggable" 12
.IX Item "Module::Pluggable"
Automatically give your module the ability to have plugins
.IP "Module::Pluggable::Object" 12
.IX Item "Module::Pluggable::Object"
Automatically give your module the ability to have plugins
.IP "NDBM_File" 12
.IX Item "NDBM_File"
Tied access to ndbm files
.IP "\s-1NEXT\s0" 12
.IX Item "NEXT"
Provide a pseudo-class \s-1NEXT\s0 (et al) that allows method redispatch
.IP "Net::Cmd" 12
.IX Item "Net::Cmd"
Network Command class (as used by \s-1FTP\s0, \s-1SMTP\s0 etc)
.IP "Net::Config" 12
.IX Item "Net::Config"
Local configuration data for libnet
.IP "Net::Domain" 12
.IX Item "Net::Domain"
Attempt to evaluate the current host's internet name and domain
.IP "Net::FTP" 12
.IX Item "Net::FTP"
\&\s-1FTP\s0 Client class
.IP "Net::NNTP" 12
.IX Item "Net::NNTP"
\&\s-1NNTP\s0 Client class
.IP "Net::Netrc" 12
.IX Item "Net::Netrc"
\&\s-1OO\s0 interface to users netrc file
.IP "Net::POP3" 12
.IX Item "Net::POP3"
Post Office Protocol 3 Client class (\s-1RFC1939\s0)
.IP "Net::Ping" 12
.IX Item "Net::Ping"
Check a remote host for reachability
.IP "Net::SMTP" 12
.IX Item "Net::SMTP"
Simple Mail Transfer Protocol Client
.IP "Net::Time" 12
.IX Item "Net::Time"
Time and daytime network client interface
.IP "Net::hostent" 12
.IX Item "Net::hostent"
By-name interface to Perl's built-in gethost*() functions
.IP "Net::libnetFAQ" 12
.IX Item "Net::libnetFAQ"
Libnet Frequently Asked Questions
.IP "Net::netent" 12
.IX Item "Net::netent"
By-name interface to Perl's built-in getnet*() functions
.IP "Net::protoent" 12
.IX Item "Net::protoent"
By-name interface to Perl's built-in getproto*() functions
.IP "Net::servent" 12
.IX Item "Net::servent"
By-name interface to Perl's built-in getserv*() functions
.IP "O" 12
.IX Item "O"
Generic interface to Perl Compiler backends
.IP "ODBM_File" 12
.IX Item "ODBM_File"
Tied access to odbm files
.IP "Object::Accessor" 12
.IX Item "Object::Accessor"
Interface to create per object accessors
.IP "Opcode" 12
.IX Item "Opcode"
Disable named opcodes when compiling perl code
.IP "\s-1POSIX\s0" 12
.IX Item "POSIX"
Perl interface to \s-1IEEE\s0 Std 1003.1
.IP "Package::Constants" 12
.IX Item "Package::Constants"
List all constants declared in a package
.IP "Params::Check" 12
.IX Item "Params::Check"
A generic input parsing/checking mechanism.
.IP "Parse::CPAN::Meta" 12
.IX Item "Parse::CPAN::Meta"
Parse \s-1META\s0.yml and \s-1META\s0.json \s-1CPAN\s0 metadata files
.IP "Perl::OSType" 12
.IX Item "Perl::OSType"
Map Perl operating system names to generic types
.IP "PerlIO" 12
.IX Item "PerlIO"
On demand loader for PerlIO layers and root of PerlIO::* name space
.IP "PerlIO::encoding" 12
.IX Item "PerlIO::encoding"
Encoding layer
.IP "PerlIO::mmap" 12
.IX Item "PerlIO::mmap"
Memory mapped \s-1IO\s0
.IP "PerlIO::scalar" 12
.IX Item "PerlIO::scalar"
In-memory \s-1IO\s0, scalar \s-1IO\s0
.IP "PerlIO::via" 12
.IX Item "PerlIO::via"
Helper class for PerlIO layers implemented in perl
.IP "PerlIO::via::QuotedPrint" 12
.IX Item "PerlIO::via::QuotedPrint"
PerlIO layer for quoted-printable strings
.IP "Pod::Checker" 12
.IX Item "Pod::Checker"
Check pod documents for syntax errors
.IP "Pod::Escapes" 12
.IX Item "Pod::Escapes"
For resolving Pod E<...> sequences
.IP "Pod::Find" 12
.IX Item "Pod::Find"
Find \s-1POD\s0 documents in directory trees
.IP "Pod::Functions" 12
.IX Item "Pod::Functions"
Group Perl's functions a la perlfunc.pod
.IP "Pod::Html" 12
.IX Item "Pod::Html"
Module to convert pod files to \s-1HTML\s0
.IP "Pod::InputObjects" 12
.IX Item "Pod::InputObjects"
Objects representing \s-1POD\s0 input paragraphs, commands, etc.
.IP "Pod::LaTeX" 12
.IX Item "Pod::LaTeX"
Convert Pod data to formatted Latex
.IP "Pod::Man" 12
.IX Item "Pod::Man"
Convert \s-1POD\s0 data to formatted *roff input
.IP "Pod::ParseLink" 12
.IX Item "Pod::ParseLink"
Parse an L<> formatting code in \s-1POD\s0 text
.IP "Pod::ParseUtils" 12
.IX Item "Pod::ParseUtils"
Helpers for \s-1POD\s0 parsing and conversion
.IP "Pod::Parser" 12
.IX Item "Pod::Parser"
Base class for creating \s-1POD\s0 filters and translators
.IP "Pod::Perldoc" 12
.IX Item "Pod::Perldoc"
Look up Perl documentation in Pod format.
.IP "Pod::Perldoc::BaseTo" 12
.IX Item "Pod::Perldoc::BaseTo"
Base for Pod::Perldoc formatters
.IP "Pod::Perldoc::GetOptsOO" 12
.IX Item "Pod::Perldoc::GetOptsOO"
Customized option parser for Pod::Perldoc
.IP "Pod::Perldoc::ToANSI" 12
.IX Item "Pod::Perldoc::ToANSI"
Render Pod with \s-1ANSI\s0 color escapes
.IP "Pod::Perldoc::ToChecker" 12
.IX Item "Pod::Perldoc::ToChecker"
Let Perldoc check Pod for errors
.IP "Pod::Perldoc::ToMan" 12
.IX Item "Pod::Perldoc::ToMan"
Let Perldoc render Pod as man pages
.IP "Pod::Perldoc::ToNroff" 12
.IX Item "Pod::Perldoc::ToNroff"
Let Perldoc convert Pod to nroff
.IP "Pod::Perldoc::ToPod" 12
.IX Item "Pod::Perldoc::ToPod"
Let Perldoc render Pod as ... Pod!
.IP "Pod::Perldoc::ToRtf" 12
.IX Item "Pod::Perldoc::ToRtf"
Let Perldoc render Pod as \s-1RTF\s0
.IP "Pod::Perldoc::ToTerm" 12
.IX Item "Pod::Perldoc::ToTerm"
Render Pod with terminal escapes
.IP "Pod::Perldoc::ToText" 12
.IX Item "Pod::Perldoc::ToText"
Let Perldoc render Pod as plaintext
.IP "Pod::Perldoc::ToTk" 12
.IX Item "Pod::Perldoc::ToTk"
Let Perldoc use Tk::Pod to render Pod
.IP "Pod::Perldoc::ToXml" 12
.IX Item "Pod::Perldoc::ToXml"
Let Perldoc render Pod as \s-1XML\s0
.IP "Pod::PlainText" 12
.IX Item "Pod::PlainText"
Convert \s-1POD\s0 data to formatted \s-1ASCII\s0 text
.IP "Pod::Select" 12
.IX Item "Pod::Select"
Extract selected sections of \s-1POD\s0 from input
.IP "Pod::Simple" 12
.IX Item "Pod::Simple"
Framework for parsing Pod
.IP "Pod::Simple::Checker" 12
.IX Item "Pod::Simple::Checker"
Check the Pod syntax of a document
.IP "Pod::Simple::Debug" 12
.IX Item "Pod::Simple::Debug"
Put Pod::Simple into trace/debug mode
.IP "Pod::Simple::DumpAsText" 12
.IX Item "Pod::Simple::DumpAsText"
Dump Pod-parsing events as text
.IP "Pod::Simple::DumpAsXML" 12
.IX Item "Pod::Simple::DumpAsXML"
Turn Pod into \s-1XML\s0
.IP "Pod::Simple::HTML" 12
.IX Item "Pod::Simple::HTML"
Convert Pod to \s-1HTML\s0
.IP "Pod::Simple::HTMLBatch" 12
.IX Item "Pod::Simple::HTMLBatch"
Convert several Pod files to several \s-1HTML\s0 files
.IP "Pod::Simple::LinkSection" 12
.IX Item "Pod::Simple::LinkSection"
Represent \*(L"section\*(R" attributes of L codes
.IP "Pod::Simple::Methody" 12
.IX Item "Pod::Simple::Methody"
Turn Pod::Simple events into method calls
.IP "Pod::Simple::PullParser" 12
.IX Item "Pod::Simple::PullParser"
A pull-parser interface to parsing Pod
.IP "Pod::Simple::PullParserEndToken" 12
.IX Item "Pod::Simple::PullParserEndToken"
End-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserStartToken" 12
.IX Item "Pod::Simple::PullParserStartToken"
Start-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserTextToken" 12
.IX Item "Pod::Simple::PullParserTextToken"
Text-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserToken" 12
.IX Item "Pod::Simple::PullParserToken"
Tokens from Pod::Simple::PullParser
.IP "Pod::Simple::RTF" 12
.IX Item "Pod::Simple::RTF"
Format Pod as \s-1RTF\s0
.IP "Pod::Simple::Search" 12
.IX Item "Pod::Simple::Search"
Find \s-1POD\s0 documents in directory trees
.IP "Pod::Simple::SimpleTree" 12
.IX Item "Pod::Simple::SimpleTree"
Parse Pod into a simple parse tree
.IP "Pod::Simple::Subclassing" 12
.IX Item "Pod::Simple::Subclassing"
Write a formatter as a Pod::Simple subclass
.IP "Pod::Simple::Text" 12
.IX Item "Pod::Simple::Text"
Format Pod as plaintext
.IP "Pod::Simple::TextContent" 12
.IX Item "Pod::Simple::TextContent"
Get the text content of Pod
.IP "Pod::Simple::XHTML" 12
.IX Item "Pod::Simple::XHTML"
Format Pod as validating \s-1XHTML\s0
.IP "Pod::Simple::XMLOutStream" 12
.IX Item "Pod::Simple::XMLOutStream"
Turn Pod into \s-1XML\s0
.IP "Pod::Text" 12
.IX Item "Pod::Text"
Convert \s-1POD\s0 data to formatted \s-1ASCII\s0 text
.IP "Pod::Text::Color" 12
.IX Item "Pod::Text::Color"
Convert \s-1POD\s0 data to formatted color \s-1ASCII\s0 text
.IP "Pod::Text::Termcap" 12
.IX Item "Pod::Text::Termcap"
Convert \s-1POD\s0 data to \s-1ASCII\s0 text with format escapes
.IP "Pod::Usage" 12
.IX Item "Pod::Usage"
Print a usage message from embedded pod documentation
.IP "SDBM_File" 12
.IX Item "SDBM_File"
Tied access to sdbm files
.IP "Safe" 12
.IX Item "Safe"
Compile and execute code in restricted compartments
.IP "Scalar::Util" 12
.IX Item "Scalar::Util"
A selection of general-utility scalar subroutines
.IP "Search::Dict" 12
.IX Item "Search::Dict"
Look \- search for key in dictionary file
.IP "SelectSaver" 12
.IX Item "SelectSaver"
Save and restore selected file handle
.IP "SelfLoader" 12
.IX Item "SelfLoader"
Load functions only on demand
.IP "Storable" 12
.IX Item "Storable"
Persistence for Perl data structures
.IP "Symbol" 12
.IX Item "Symbol"
Manipulate Perl symbols and their names
.IP "Sys::Hostname" 12
.IX Item "Sys::Hostname"
Try every conceivable way to get hostname
.IP "Sys::Syslog" 12
.IX Item "Sys::Syslog"
Perl interface to the \s-1UNIX\s0 \fIsyslog\fR\|(3) calls
.IP "Sys::Syslog::Win32" 12
.IX Item "Sys::Syslog::Win32"
Win32 support for Sys::Syslog
.IP "TAP::Base" 12
.IX Item "TAP::Base"
Base class that provides common functionality to TAP::Parser
.IP "TAP::Formatter::Base" 12
.IX Item "TAP::Formatter::Base"
Base class for harness output delegates
.IP "TAP::Formatter::Color" 12
.IX Item "TAP::Formatter::Color"
Run Perl test scripts with color
.IP "TAP::Formatter::Console" 12
.IX Item "TAP::Formatter::Console"
Harness output delegate for default console output
.IP "TAP::Formatter::Console::ParallelSession" 12
.IX Item "TAP::Formatter::Console::ParallelSession"
Harness output delegate for parallel console output
.IP "TAP::Formatter::Console::Session" 12
.IX Item "TAP::Formatter::Console::Session"
Harness output delegate for default console output
.IP "TAP::Formatter::File" 12
.IX Item "TAP::Formatter::File"
Harness output delegate for file output
.IP "TAP::Formatter::File::Session" 12
.IX Item "TAP::Formatter::File::Session"
Harness output delegate for file output
.IP "TAP::Formatter::Session" 12
.IX Item "TAP::Formatter::Session"
Abstract base class for harness output delegate
.IP "TAP::Harness" 12
.IX Item "TAP::Harness"
Run test scripts with statistics
.IP "TAP::Object" 12
.IX Item "TAP::Object"
Base class that provides common functionality to all \f(CW\*(C`TAP::*\*(C'\fR modules
.IP "TAP::Parser" 12
.IX Item "TAP::Parser"
Parse \s-1TAP\s0 output
.IP "TAP::Parser::Aggregator" 12
.IX Item "TAP::Parser::Aggregator"
Aggregate TAP::Parser results
.IP "TAP::Parser::Grammar" 12
.IX Item "TAP::Parser::Grammar"
A grammar for the Test Anything Protocol.
.IP "TAP::Parser::Iterator" 12
.IX Item "TAP::Parser::Iterator"
Base class for \s-1TAP\s0 source iterators
.IP "TAP::Parser::Iterator::Array" 12
.IX Item "TAP::Parser::Iterator::Array"
Iterator for array-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Process" 12
.IX Item "TAP::Parser::Iterator::Process"
Iterator for process-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Stream" 12
.IX Item "TAP::Parser::Iterator::Stream"
Iterator for filehandle-based \s-1TAP\s0 sources
.IP "TAP::Parser::IteratorFactory" 12
.IX Item "TAP::Parser::IteratorFactory"
Figures out which SourceHandler objects to use for a given Source
.IP "TAP::Parser::Multiplexer" 12
.IX Item "TAP::Parser::Multiplexer"
Multiplex multiple TAP::Parsers
.IP "TAP::Parser::Result" 12
.IX Item "TAP::Parser::Result"
Base class for TAP::Parser output objects
.IP "TAP::Parser::Result::Bailout" 12
.IX Item "TAP::Parser::Result::Bailout"
Bailout result token.
.IP "TAP::Parser::Result::Comment" 12
.IX Item "TAP::Parser::Result::Comment"
Comment result token.
.IP "TAP::Parser::Result::Plan" 12
.IX Item "TAP::Parser::Result::Plan"
Plan result token.
.IP "TAP::Parser::Result::Pragma" 12
.IX Item "TAP::Parser::Result::Pragma"
\&\s-1TAP\s0 pragma token.
.IP "TAP::Parser::Result::Test" 12
.IX Item "TAP::Parser::Result::Test"
Test result token.
.IP "TAP::Parser::Result::Unknown" 12
.IX Item "TAP::Parser::Result::Unknown"
Unknown result token.
.IP "TAP::Parser::Result::Version" 12
.IX Item "TAP::Parser::Result::Version"
\&\s-1TAP\s0 syntax version token.
.IP "TAP::Parser::Result::YAML" 12
.IX Item "TAP::Parser::Result::YAML"
\&\s-1YAML\s0 result token.
.IP "TAP::Parser::ResultFactory" 12
.IX Item "TAP::Parser::ResultFactory"
Factory for creating TAP::Parser output objects
.IP "TAP::Parser::Scheduler" 12
.IX Item "TAP::Parser::Scheduler"
Schedule tests during parallel testing
.IP "TAP::Parser::Scheduler::Job" 12
.IX Item "TAP::Parser::Scheduler::Job"
A single testing job.
.IP "TAP::Parser::Scheduler::Spinner" 12
.IX Item "TAP::Parser::Scheduler::Spinner"
A no-op job.
.IP "TAP::Parser::Source" 12
.IX Item "TAP::Parser::Source"
A \s-1TAP\s0 source & meta data about it
.IP "TAP::Parser::SourceHandler" 12
.IX Item "TAP::Parser::SourceHandler"
Base class for different \s-1TAP\s0 source handlers
.IP "TAP::Parser::SourceHandler::Executable" 12
.IX Item "TAP::Parser::SourceHandler::Executable"
Stream output from an executable \s-1TAP\s0 source
.IP "TAP::Parser::SourceHandler::File" 12
.IX Item "TAP::Parser::SourceHandler::File"
Stream \s-1TAP\s0 from a text file.
.IP "TAP::Parser::SourceHandler::Handle" 12
.IX Item "TAP::Parser::SourceHandler::Handle"
Stream \s-1TAP\s0 from an IO::Handle or a \s-1GLOB\s0.
.IP "TAP::Parser::SourceHandler::Perl" 12
.IX Item "TAP::Parser::SourceHandler::Perl"
Stream \s-1TAP\s0 from a Perl executable
.IP "TAP::Parser::SourceHandler::RawTAP" 12
.IX Item "TAP::Parser::SourceHandler::RawTAP"
Stream output from raw \s-1TAP\s0 in a scalar/array ref.
.IP "TAP::Parser::Utils" 12
.IX Item "TAP::Parser::Utils"
Internal TAP::Parser utilities
.IP "TAP::Parser::YAMLish::Reader" 12
.IX Item "TAP::Parser::YAMLish::Reader"
Read YAMLish data from iterator
.IP "TAP::Parser::YAMLish::Writer" 12
.IX Item "TAP::Parser::YAMLish::Writer"
Write YAMLish data
.IP "Term::ANSIColor" 12
.IX Item "Term::ANSIColor"
Color screen output using \s-1ANSI\s0 escape sequences
.IP "Term::Cap" 12
.IX Item "Term::Cap"
Perl termcap interface
.IP "Term::Complete" 12
.IX Item "Term::Complete"
Perl word completion module
.IP "Term::ReadLine" 12
.IX Item "Term::ReadLine"
Perl interface to various \f(CW\*(C`readline\*(C'\fR packages.
.IP "Term::UI" 12
.IX Item "Term::UI"
Term::ReadLine \s-1UI\s0 made easy
.IP "Term::UI::History" 12
.IX Item "Term::UI::History"
History function
.IP "Test" 12
.IX Item "Test"
Provides a simple framework for writing test scripts
.IP "Test::Builder" 12
.IX Item "Test::Builder"
Backend for building test libraries
.IP "Test::Builder::Module" 12
.IX Item "Test::Builder::Module"
Base class for test modules
.IP "Test::Builder::Tester" 12
.IX Item "Test::Builder::Tester"
Test testsuites that have been built with
.IP "Test::Builder::Tester::Color" 12
.IX Item "Test::Builder::Tester::Color"
Turn on colour in Test::Builder::Tester
.IP "Test::Harness" 12
.IX Item "Test::Harness"
Run Perl standard test scripts with statistics
.IP "Test::More" 12
.IX Item "Test::More"
Yet another framework for writing test scripts
.IP "Test::Simple" 12
.IX Item "Test::Simple"
Basic utilities for writing tests.
.IP "Test::Tutorial" 12
.IX Item "Test::Tutorial"
A tutorial about writing really basic tests
.IP "Text::Abbrev" 12
.IX Item "Text::Abbrev"
Abbrev \- create an abbreviation table from a list
.IP "Text::Balanced" 12
.IX Item "Text::Balanced"
Extract delimited text sequences from strings.
.IP "Text::ParseWords" 12
.IX Item "Text::ParseWords"
Parse text into an array of tokens or array of arrays
.IP "Text::Soundex" 12
.IX Item "Text::Soundex"
Implementation of the soundex algorithm.
.IP "Text::Tabs" 12
.IX Item "Text::Tabs"
Expand and unexpand tabs per the unix \fIexpand\fR\|(1) and \fIunexpand\fR\|(1)
.IP "Text::Wrap" 12
.IX Item "Text::Wrap"
Line wrapping to form simple paragraphs
.IP "Thread" 12
.IX Item "Thread"
Manipulate threads in Perl (for old code only)
.IP "Thread::Queue" 12
.IX Item "Thread::Queue"
Thread-safe queues
.IP "Thread::Semaphore" 12
.IX Item "Thread::Semaphore"
Thread-safe semaphores
.IP "Tie::Array" 12
.IX Item "Tie::Array"
Base class for tied arrays
.IP "Tie::File" 12
.IX Item "Tie::File"
Access the lines of a disk file via a Perl array
.IP "Tie::Handle" 12
.IX Item "Tie::Handle"
Base class definitions for tied handles
.IP "Tie::Hash" 12
.IX Item "Tie::Hash"
Base class definitions for tied hashes
.IP "Tie::Hash::NamedCapture" 12
.IX Item "Tie::Hash::NamedCapture"
Named regexp capture buffers
.IP "Tie::Memoize" 12
.IX Item "Tie::Memoize"
Add data to hash when needed
.IP "Tie::RefHash" 12
.IX Item "Tie::RefHash"
Use references as hash keys
.IP "Tie::Scalar" 12
.IX Item "Tie::Scalar"
Base class definitions for tied scalars
.IP "Tie::StdHandle" 12
.IX Item "Tie::StdHandle"
Base class definitions for tied handles
.IP "Tie::SubstrHash" 12
.IX Item "Tie::SubstrHash"
Fixed-table-size, fixed-key-length hashing
.IP "Time::HiRes" 12
.IX Item "Time::HiRes"
High resolution alarm, sleep, gettimeofday, interval timers
.IP "Time::Local" 12
.IX Item "Time::Local"
Efficiently compute time from local and \s-1GMT\s0 time
.IP "Time::Piece" 12
.IX Item "Time::Piece"
Object Oriented time objects
.IP "Time::Seconds" 12
.IX Item "Time::Seconds"
A simple \s-1API\s0 to convert seconds to other date values
.IP "Time::gmtime" 12
.IX Item "Time::gmtime"
By-name interface to Perl's built-in \fIgmtime()\fR function
.IP "Time::localtime" 12
.IX Item "Time::localtime"
By-name interface to Perl's built-in \fIlocaltime()\fR function
.IP "Time::tm" 12
.IX Item "Time::tm"
Internal object used by Time::gmtime and Time::localtime
.IP "\s-1UNIVERSAL\s0" 12
.IX Item "UNIVERSAL"
Base class for \s-1ALL\s0 classes (blessed references)
.IP "Unicode::Collate" 12
.IX Item "Unicode::Collate"
Unicode Collation Algorithm
.IP "Unicode::Collate::CJK::Big5" 12
.IX Item "Unicode::Collate::CJK::Big5"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::GB2312" 12
.IX Item "Unicode::Collate::CJK::GB2312"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::JISX0208" 12
.IX Item "Unicode::Collate::CJK::JISX0208"
Weighting \s-1JIS\s0 \s-1KANJI\s0 for Unicode::Collate
.IP "Unicode::Collate::CJK::Korean" 12
.IX Item "Unicode::Collate::CJK::Korean"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Pinyin" 12
.IX Item "Unicode::Collate::CJK::Pinyin"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Stroke" 12
.IX Item "Unicode::Collate::CJK::Stroke"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::Locale" 12
.IX Item "Unicode::Collate::Locale"
Linguistic tailoring for \s-1DUCET\s0 via Unicode::Collate
.IP "Unicode::Normalize" 12
.IX Item "Unicode::Normalize"
Unicode Normalization Forms
.IP "Unicode::UCD" 12
.IX Item "Unicode::UCD"
Unicode character database
.IP "User::grent" 12
.IX Item "User::grent"
By-name interface to Perl's built-in getgr*() functions
.IP "User::pwent" 12
.IX Item "User::pwent"
By-name interface to Perl's built-in getpw*() functions
.IP "VMS::DCLsym" 12
.IX Item "VMS::DCLsym"
Perl extension to manipulate \s-1DCL\s0 symbols
.IP "VMS::Stdio" 12
.IX Item "VMS::Stdio"
Standard I/O functions via \s-1VMS\s0 extensions
.IP "Version::Requirements" 12
.IX Item "Version::Requirements"
A set of version requirements for a \s-1CPAN\s0 dist
.IP "Win32API::File" 12
.IX Item "Win32API::File"
Low-level access to Win32 system \s-1API\s0 calls for files/dirs.
.IP "Win32CORE" 12
.IX Item "Win32CORE"
Win32 \s-1CORE\s0 function stubs
.IP "XS::APItest" 12
.IX Item "XS::APItest"
Test the perl C \s-1API\s0
.IP "XS::Typemap" 12
.IX Item "XS::Typemap"
Module to test the \s-1XS\s0 typemaps distributed with perl
.IP "XSLoader" 12
.IX Item "XSLoader"
Dynamically load C libraries into Perl code
.IP "version::Internals" 12
.IX Item "version::Internals"
Perl extension for Version Objects
.PP
To find out \fIall\fR modules installed on your system, including
those without documentation or outside the standard release,
just use the following command (under the default win32 shell,
double quotes should be used instead of single quotes).
.PP
.Vb 3
\&    % perl \-MFile::Find=find \-MFile::Spec::Functions \-Tlwe \e
\&      \*(Aqfind { wanted => sub { print canonpath $_ if /\e.pm\ez/ },
\&      no_chdir => 1 }, @INC\*(Aq
.Ve
.PP
(The \-T is here to prevent '.' from being listed in \f(CW@INC\fR.)
They should all have their own documentation installed and accessible
via your system \fIman\fR\|(1) command.  If you do not have a \fBfind\fR
program, you can use the Perl \fBfind2perl\fR program instead, which
generates Perl code as output you can run through perl.  If you
have a \fBman\fR program but it doesn't find your modules, you'll have
to fix your manpath.  See perl for details.  If you have no
system \fBman\fR command, you might try the \fBperldoc\fR program.
.PP
Note also that the command \f(CW\*(C`perldoc perllocal\*(C'\fR gives you a (possibly
incomplete) list of the modules that have been further installed on
your system. (The perllocal.pod file is updated by the standard MakeMaker
install process.)
.SS "Extension Modules"
.IX Subsection "Extension Modules"
Extension modules are written in C (or a mix of Perl and C).  They
are usually dynamically loaded into Perl if and when you need them,
but may also be linked in statically.  Supported extension modules
include Socket, Fcntl, and \s-1POSIX\s0.
.PP
Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time
for adequate testing and configuration across the multitude of
platforms on which Perl was beta-tested.  You are encouraged to
look for them on \s-1CPAN\s0 (described below), or using web search engines
like Alta Vista or Google.
.SH "CPAN"
.IX Header "CPAN"
\&\s-1CPAN\s0 stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style
guides, tricks and traps, alternate ports to non-Unix systems and
occasional binary distributions for these.   Search engines for
\&\s-1CPAN\s0 can be found at http://www.cpan.org/
.PP
Most importantly, \s-1CPAN\s0 includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of
modules are:
.IP "\(bu" 4
Language Extensions and Documentation Tools
.IP "\(bu" 4
Development Support
.IP "\(bu" 4
Operating System Interfaces
.IP "\(bu" 4
Networking, Device Control (modems) and InterProcess Communication
.IP "\(bu" 4
Data Types and Data Type Utilities
.IP "\(bu" 4
Database Interfaces
.IP "\(bu" 4
User Interfaces
.IP "\(bu" 4
Interfaces to / Emulations of Other Programming Languages
.IP "\(bu" 4
File Names, File Systems and File Locking (see also File Handles)
.IP "\(bu" 4
String Processing, Language Text Processing, Parsing, and Searching
.IP "\(bu" 4
Option, Argument, Parameter, and Configuration File Processing
.IP "\(bu" 4
Internationalization and Locale
.IP "\(bu" 4
Authentication, Security, and Encryption
.IP "\(bu" 4
World Wide Web, \s-1HTML\s0, \s-1HTTP\s0, \s-1CGI\s0, \s-1MIME\s0
.IP "\(bu" 4
Server and Daemon Utilities
.IP "\(bu" 4
Archiving and Compression
.IP "\(bu" 4
Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing
.IP "\(bu" 4
Mail and Usenet News
.IP "\(bu" 4
Control Flow Utilities (callbacks and exceptions etc)
.IP "\(bu" 4
File Handle and Input/Output Stream Utilities
.IP "\(bu" 4
Miscellaneous Modules
.PP
The list of the registered \s-1CPAN\s0 sites follows.
Please note that the sorting order is alphabetical on fields:
.PP
Continent
   |
   |\-\->Country
         |
         |\-\->[state/province]
                   |
                   |\-\->ftp
                   |
                   |\-\->[http]
.PP
and thus the North American servers happen to be listed between the
European and the South American sites.
.PP
Registered \s-1CPAN\s0 sites
.SS "Africa"
.IX Subsection "Africa"
.IP "South Africa" 4
.IX Item "South Africa"
.Vb 5
\&  http://cpan.mirror.ac.za/
\&  ftp://cpan.mirror.ac.za/
\&  http://mirror.is.co.za/pub/cpan/
\&  ftp://ftp.is.co.za/pub/cpan/
\&  ftp://ftp.saix.net/pub/CPAN/
.Ve
.SS "Asia"
.IX Subsection "Asia"
.IP "China" 4
.IX Item "China"
.Vb 1
\&  http://cpan.wenzk.com/
.Ve
.IP "Hong Kong" 4
.IX Item "Hong Kong"
.Vb 3
\&  http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  ftp://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  http://mirrors.geoexpat.com/cpan/
.Ve
.IP "India" 4
.IX Item "India"
.Vb 1
\&  http://perlmirror.indialinks.com/
.Ve
.IP "Indonesia" 4
.IX Item "Indonesia"
.Vb 6
\&  http://cpan.biz.net.id/
\&  http://komo.vlsm.org/CPAN/
\&  ftp://komo.vlsm.org/CPAN/
\&  http://cpan.cermin.lipi.go.id/
\&  ftp://cermin.lipi.go.id/pub/CPAN/
\&  http://cpan.pesat.net.id/
.Ve
.IP "Japan" 4
.IX Item "Japan"
.Vb 12
\&  ftp://ftp.u\-aizu.ac.jp/pub/CPAN
\&  ftp://ftp.kddilabs.jp/CPAN/
\&  http://ftp.nara.wide.ad.jp/pub/CPAN/
\&  ftp://ftp.nara.wide.ad.jp/pub/CPAN/
\&  http://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.dti.ad.jp/pub/lang/CPAN/
\&  ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
\&  http://ftp.riken.jp/lang/CPAN/
\&  ftp://ftp.riken.jp/lang/CPAN/
\&  http://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
\&  ftp://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
.Ve
.IP "Republic of Korea" 4
.IX Item "Republic of Korea"
.Vb 6
\&  http://ftp.kaist.ac.kr/pub/CPAN
\&  ftp://ftp.kaist.ac.kr/pub/CPAN
\&  http://cpan.mirror.cdnetworks.com/
\&  ftp://cpan.mirror.cdnetworks.com/CPAN/
\&  http://cpan.sarang.net/
\&  ftp://cpan.sarang.net/CPAN/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 2
\&  http://cpan.tomsk.ru/
\&  ftp://cpan.tomsk.ru/
.Ve
.IP "Singapore" 4
.IX Item "Singapore"
.Vb 5
\&  http://mirror.averse.net/pub/CPAN
\&  ftp://mirror.averse.net/pub/CPAN
\&  http://cpan.mirror.choon.net/
\&  http://cpan.oss.eznetsols.org
\&  ftp://ftp.oss.eznetsols.org/cpan
.Ve
.IP "Taiwan" 4
.IX Item "Taiwan"
.Vb 10
\&  http://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  ftp://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  http://cpan.nctu.edu.tw/
\&  ftp://cpan.nctu.edu.tw/
\&  ftp://ftp.ncu.edu.tw/CPAN/
\&  http://cpan.cdpa.nsysu.edu.tw/
\&  ftp://cpan.cdpa.nsysu.edu.tw/Unix/Lang/CPAN/
\&  http://cpan.stu.edu.tw
\&  ftp://ftp.stu.edu.tw/CPAN
\&  http://ftp.stu.edu.tw/CPAN
\&  ftp://ftp.stu.edu.tw/pub/CPAN
\&  http://cpan.cs.pu.edu.tw/
\&  ftp://cpan.cs.pu.edu.tw/pub/CPAN
.Ve
.IP "Thailand" 4
.IX Item "Thailand"
.Vb 4
\&  http://mirrors.issp.co.th/cpan/
\&  ftp://mirrors.issp.co.th/cpan/
\&  http://mirror.yourconnect.com/CPAN/
\&  ftp://mirror.yourconnect.com/CPAN/
.Ve
.IP "Turkey" 4
.IX Item "Turkey"
.Vb 1
\&  http://cpan.gazi.edu.tr/
.Ve
.SS "Central America"
.IX Subsection "Central America"
.IP "Costa Rica" 4
.IX Item "Costa Rica"
.Vb 2
\&  http://mirrors.ucr.ac.cr/CPAN/
\&  ftp://mirrors.ucr.ac.cr/CPAN/
.Ve
.SS "Europe"
.IX Subsection "Europe"
.IP "Austria" 4
.IX Item "Austria"
.Vb 4
\&  http://cpan.inode.at/
\&  ftp://cpan.inode.at
\&  http://gd.tuwien.ac.at/languages/perl/CPAN/
\&  ftp://gd.tuwien.ac.at/pub/CPAN/
.Ve
.IP "Belgium" 4
.IX Item "Belgium"
.Vb 4
\&  http://ftp.belnet.be/mirror/ftp.cpan.org/
\&  ftp://ftp.belnet.be/mirror/ftp.cpan.org/
\&  http://ftp.easynet.be/pub/CPAN/
\&  http://cpan.weepee.org/
.Ve
.IP "Bosnia and Herzegovina" 4
.IX Item "Bosnia and Herzegovina"
.Vb 1
\&  http://cpan.blic.net/
.Ve
.IP "Bulgaria" 4
.IX Item "Bulgaria"
.Vb 4
\&  http://cpan.cbox.biz/
\&  ftp://cpan.cbox.biz/cpan/
\&  http://cpan.digsys.bg/
\&  ftp://ftp.digsys.bg/pub/CPAN
.Ve
.IP "Croatia" 4
.IX Item "Croatia"
.Vb 2
\&  http://ftp.carnet.hr/pub/CPAN/
\&  ftp://ftp.carnet.hr/pub/CPAN/
.Ve
.IP "Czech Republic" 4
.IX Item "Czech Republic"
.Vb 2
\&  ftp://ftp.fi.muni.cz/pub/CPAN/
\&  http://archive.cpan.cz/
.Ve
.IP "Denmark" 4
.IX Item "Denmark"
.Vb 4
\&  http://mirrors.dotsrc.org/cpan
\&  ftp://mirrors.dotsrc.org/cpan/
\&  http://www.cpan.dk/
\&  http://mirror.uni\-c.dk/pub/CPAN/
.Ve
.IP "Finland" 4
.IX Item "Finland"
.Vb 2
\&  ftp://ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.eunet.fi/CPAN
.Ve
.IP "France" 4
.IX Item "France"
.Vb 10
\&  http://cpan.enstimac.fr/
\&  ftp://ftp.inria.fr/pub/CPAN/
\&  http://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://ftp.lip6.fr/pub/perl/CPAN/
\&  http://mir2.ovh.net/ftp.cpan.org
\&  ftp://mir1.ovh.net/ftp.cpan.org
\&  ftp://ftp.oleane.net/pub/CPAN/
\&  http://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  ftp://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  http://ftp.u\-strasbg.fr/CPAN
\&  ftp://ftp.u\-strasbg.fr/CPAN
\&  http://cpan.cict.fr/
\&  ftp://cpan.cict.fr/pub/CPAN/
.Ve
.IP "Germany" 4
.IX Item "Germany"
.Vb 10
\&  ftp://ftp.fu\-berlin.de/unix/languages/perl/
\&  http://mirrors.softliste.de/cpan/
\&  ftp://ftp.rub.de/pub/CPAN/
\&  http://www.planet\-elektronik.de/CPAN/
\&  http://ftp.hosteurope.de/pub/CPAN/
\&  ftp://ftp.hosteurope.de/pub/CPAN/
\&  http://www.mirrorspace.org/cpan/
\&  http://mirror.netcologne.de/cpan/
\&  ftp://mirror.netcologne.de/cpan/
\&  ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/CPAN/
\&  http://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  ftp://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  http://mirrors.zerg.biz/cpan/
\&  http://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  http://dl.ambiweb.de/mirrors/ftp.cpan.org/
\&  http://cpan.mirror.clusters.kg/
\&  http://cpan.mirror.iphh.net/
\&  ftp://cpan.mirror.iphh.net/pub/CPAN/
\&  http://cpan.mirroring.de/
\&  http://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  ftp://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  http://www.chemmedia.de/mirrors/CPAN/
\&  http://ftp.cw.net/pub/CPAN/
\&  ftp://ftp.cw.net/pub/CPAN/
\&  http://cpan.cpantesters.org/
\&  ftp://cpan.cpantesters.org/CPAN/
\&  http://cpan.mirrored.de/
\&  ftp://mirror.petamem.com/CPAN/
\&  http://cpan.noris.de/
\&  ftp://cpan.noris.de/pub/CPAN/
\&  ftp://ftp.mpi\-sb.mpg.de/pub/perl/CPAN/
\&  ftp://ftp.gmd.de/mirrors/CPAN/
.Ve
.IP "Greece" 4
.IX Item "Greece"
.Vb 4
\&  ftp://ftp.forthnet.gr/pub/languages/perl/CPAN
\&  ftp://ftp.ntua.gr/pub/lang/perl/
\&  http://cpan.cc.uoc.gr/
\&  ftp://ftp.cc.uoc.gr/mirrors/CPAN/
.Ve
.IP "Hungary" 4
.IX Item "Hungary"
.Vb 3
\&  http://cpan.mirrors.enexis.hu/
\&  ftp://cpan.mirrors.enexis.hu/mirrors/cpan/
\&  http://cpan.hu/
.Ve
.IP "Iceland" 4
.IX Item "Iceland"
.Vb 2
\&  http://ftp.rhnet.is/pub/CPAN/
\&  ftp://ftp.rhnet.is/pub/CPAN/
.Ve
.IP "Ireland" 4
.IX Item "Ireland"
.Vb 4
\&  http://ftp.esat.net/pub/languages/perl/CPAN/
\&  ftp://ftp.esat.net/pub/languages/perl/CPAN/
\&  http://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
\&  ftp://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
.Ve
.IP "Italy" 4
.IX Item "Italy"
.Vb 3
\&  http://bo.mirror.garr.it/mirrors/CPAN/
\&  http://cpan.panu.it/
\&  ftp://ftp.panu.it/pub/mirrors/perl/CPAN/
.Ve
.IP "Latvia" 4
.IX Item "Latvia"
.Vb 1
\&  http://kvin.lv/pub/CPAN/
.Ve
.IP "Lithuania" 4
.IX Item "Lithuania"
.Vb 2
\&  http://ftp.litnet.lt/pub/CPAN/
\&  ftp://ftp.litnet.lt/pub/CPAN/
.Ve
.IP "Malta" 4
.IX Item "Malta"
.Vb 1
\&  http://cpan.waldonet.net.mt/
.Ve
.IP "Netherlands" 4
.IX Item "Netherlands"
.Vb 10
\&  ftp://ftp.quicknet.nl/pub/CPAN/
\&  http://mirror.hostfuss.com/CPAN/
\&  ftp://mirror.hostfuss.com/CPAN/
\&  http://mirrors3.kernel.org/cpan/
\&  ftp://mirrors3.kernel.org/pub/CPAN/
\&  http://cpan.mirror.versatel.nl/
\&  ftp://ftp.mirror.versatel.nl/cpan/
\&  ftp://download.xs4all.nl/pub/mirror/CPAN/
\&  http://mirror.leaseweb.com/CPAN/
\&  ftp://mirror.leaseweb.com/CPAN/
\&  ftp://ftp.cpan.nl/pub/CPAN/
\&  http://archive.cs.uu.nl/mirror/CPAN/
\&  ftp://ftp.cs.uu.nl/mirror/CPAN/
\&  http://luxitude.net/cpan/
.Ve
.IP "Norway" 4
.IX Item "Norway"
.Vb 2
\&  ftp://ftp.uninett.no/pub/languages/perl/CPAN
\&  ftp://ftp.uit.no/pub/languages/perl/cpan/
.Ve
.IP "Poland" 4
.IX Item "Poland"
.Vb 7
\&  http://piotrkosoft.net/pub/mirrors/CPAN/
\&  ftp://ftp.piotrkosoft.net/pub/mirrors/CPAN/
\&  http://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.ps.pl/pub/CPAN/
\&  ftp://sunsite.icm.edu.pl/pub/CPAN/
\&  ftp://ftp.tpnet.pl/d4/CPAN/
.Ve
.IP "Portugal" 4
.IX Item "Portugal"
.Vb 9
\&  http://cpan.dei.uc.pt/
\&  ftp://ftp.dei.uc.pt/pub/CPAN
\&  ftp://ftp.ist.utl.pt/pub/CPAN/
\&  http://cpan.perl.pt/
\&  http://cpan.ip.pt/
\&  ftp://cpan.ip.pt/pub/cpan/
\&  http://mirrors.nfsi.pt/CPAN/
\&  ftp://mirrors.nfsi.pt/pub/CPAN/
\&  http://cpan.dcc.fc.up.pt/
.Ve
.IP "Romania" 4
.IX Item "Romania"
.Vb 7
\&  http://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.lug.ro/CPAN
\&  http://mirrors.xservers.ro/CPAN/
\&  http://mirrors.hostingromania.ro/ftp.cpan.org/
\&  ftp://ftp.hostingromania.ro/mirrors/ftp.cpan.org/
\&  ftp://ftp.iasi.roedu.net/pub/mirrors/ftp.cpan.org/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 8
\&  ftp://ftp.aha.ru/CPAN/
\&  http://cpan.rinet.ru/
\&  ftp://cpan.rinet.ru/pub/mirror/CPAN/
\&  ftp://ftp.SpringDaemons.com/pub/CPAN/
\&  http://mirror.rol.ru/CPAN/
\&  http://ftp.silvernet.ru/CPAN/
\&  http://ftp.spbu.ru/CPAN/
\&  ftp://ftp.spbu.ru/CPAN/
.Ve
.IP "Slovakia" 4
.IX Item "Slovakia"
.Vb 1
\&  http://cpan.fyxm.net/
.Ve
.IP "Slovenia" 4
.IX Item "Slovenia"
.Vb 1
\&  http://www.klevze.si/cpan
.Ve
.IP "Spain" 4
.IX Item "Spain"
.Vb 4
\&  http://osl.ugr.es/CPAN/
\&  ftp://ftp.rediris.es/mirror/CPAN/
\&  http://ftp.gui.uva.es/sites/cpan.org/
\&  ftp://ftp.gui.uva.es/sites/cpan.org/
.Ve
.IP "Sweden" 4
.IX Item "Sweden"
.Vb 2
\&  http://mirrors4.kernel.org/cpan/
\&  ftp://mirrors4.kernel.org/pub/CPAN/
.Ve
.IP "Switzerland" 4
.IX Item "Switzerland"
.Vb 5
\&  http://cpan.mirror.solnet.ch/
\&  ftp://ftp.solnet.ch/mirror/CPAN/
\&  ftp://ftp.adwired.ch/CPAN/
\&  http://mirror.switch.ch/ftp/mirror/CPAN/
\&  ftp://mirror.switch.ch/mirror/CPAN/
.Ve
.IP "Ukraine" 4
.IX Item "Ukraine"
.Vb 5
\&  http://cpan.makeperl.org/
\&  ftp://cpan.makeperl.org/pub/CPAN
\&  http://cpan.org.ua/
\&  http://cpan.gafol.net/
\&  ftp://ftp.gafol.net/pub/cpan/
.Ve
.IP "United Kingdom" 4
.IX Item "United Kingdom"
.Vb 10
\&  http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  ftp://ftp.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  ftp://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  http://www.mirror.8086.net/sites/CPAN/
\&  ftp://ftp.mirror.8086.net/sites/CPAN/
\&  http://cpan.mirror.anlx.net/
\&  ftp://ftp.mirror.anlx.net/CPAN/
\&  http://mirror.bytemark.co.uk/CPAN/
\&  ftp://mirror.bytemark.co.uk/CPAN/
\&  http://cpan.etla.org/
\&  ftp://cpan.etla.org/pub/CPAN
\&  ftp://ftp.demon.co.uk/pub/CPAN/
\&  http://mirror.sov.uk.goscomb.net/CPAN/
\&  ftp://mirror.sov.uk.goscomb.net/pub/CPAN/
\&  http://ftp.plig.net/pub/CPAN/
\&  ftp://ftp.plig.net/pub/CPAN/
\&  http://ftp.ticklers.org/pub/CPAN/
\&  ftp://ftp.ticklers.org/pub/CPAN/
\&  http://cpan.mirrors.uk2.net/
\&  ftp://mirrors.uk2.net/pub/CPAN/
\&  http://mirror.ox.ac.uk/sites/www.cpan.org/
\&  ftp://mirror.ox.ac.uk/sites/www.cpan.org/
.Ve
.SS "North America"
.IX Subsection "North America"
.IP "Bahamas" 4
.IX Item "Bahamas"
.Vb 1
\&  http://www.securehost.com/mirror/CPAN/
.Ve
.IP "Canada" 4
.IX Item "Canada"
.Vb 10
\&  http://cpan.arcticnetwork.ca
\&  ftp://mirror.arcticnetwork.ca/pub/CPAN
\&  http://cpan.sunsite.ualberta.ca/
\&  ftp://cpan.sunsite.ualberta.ca/pub/CPAN/
\&  http://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  http://arwen.cs.dal.ca/mirror/CPAN/
\&  ftp://arwen.cs.dal.ca/pub/mirror/CPAN/
\&  http://CPAN.mirror.rafal.ca/
\&  ftp://CPAN.mirror.rafal.ca/pub/CPAN/
\&  ftp://ftp.nrc.ca/pub/CPAN/
\&  http://mirror.csclub.uwaterloo.ca/pub/CPAN/
\&  ftp://mirror.csclub.uwaterloo.ca/pub/CPAN/
.Ve
.IP "Mexico" 4
.IX Item "Mexico"
.Vb 2
\&  http://www.msg.com.mx/CPAN/
\&  ftp://ftp.msg.com.mx/pub/CPAN/
.Ve
.IP "United States" 4
.IX Item "United States"
.RS 4
.PD 0
.IP "Alabama" 8
.IX Item "Alabama"
.PD
.Vb 2
\&  http://mirror.hiwaay.net/CPAN/
\&  ftp://mirror.hiwaay.net/CPAN/
.Ve
.IP "Arizona" 8
.IX Item "Arizona"
.Vb 1
\&  http://cpan.ezarticleinformation.com/
.Ve
.IP "California" 8
.IX Item "California"
.Vb 10
\&  http://cpan.knowledgematters.net/
\&  http://cpan.binkerton.com/
\&  http://cpan.develooper.com/
\&  http://mirrors.gossamer\-threads.com/CPAN
\&  http://cpan.schatt.com/
\&  http://mirrors.kernel.org/cpan/
\&  ftp://mirrors.kernel.org/pub/CPAN
\&  http://mirrors2.kernel.org/cpan/
\&  ftp://mirrors2.kernel.org/pub/CPAN/
\&  http://cpan.mirror.facebook.net/
\&  http://mirrors1.kernel.org/cpan/
\&  ftp://mirrors1.kernel.org/pub/CPAN/
\&  http://cpan\-sj.viaverio.com/
\&  ftp://cpan\-sj.viaverio.com/pub/CPAN/
\&  http://www.perl.com/CPAN/
.Ve
.IP "Florida" 8
.IX Item "Florida"
.Vb 3
\&  ftp://ftp.cise.ufl.edu/pub/mirrors/CPAN/
\&  http://mirror.atlantic.net/pub/CPAN/
\&  ftp://mirror.atlantic.net/pub/CPAN/
.Ve
.IP "Idaho" 8
.IX Item "Idaho"
.Vb 2
\&  http://mirror.its.uidaho.edu/pub/cpan/
\&  ftp://mirror.its.uidaho.edu/cpan/
.Ve
.IP "Illinois" 8
.IX Item "Illinois"
.Vb 6
\&  http://cpan.mirrors.hoobly.com/
\&  http://cpan.uchicago.edu/pub/CPAN/
\&  ftp://cpan.uchicago.edu/pub/CPAN/
\&  http://mirrors.servercentral.net/CPAN/
\&  http://www.stathy.com/CPAN/
\&  ftp://www.stathy.com/CPAN/
.Ve
.IP "Indiana" 8
.IX Item "Indiana"
.Vb 5
\&  ftp://ftp.uwsg.iu.edu/pub/perl/CPAN/
\&  http://cpan.netnitco.net/
\&  ftp://cpan.netnitco.net/pub/mirrors/CPAN/
\&  http://ftp.ndlug.nd.edu/pub/perl/
\&  ftp://ftp.ndlug.nd.edu/pub/perl/
.Ve
.IP "Massachusetts" 8
.IX Item "Massachusetts"
.Vb 1
\&  http://mirrors.ccs.neu.edu/CPAN/
.Ve
.IP "Michigan" 8
.IX Item "Michigan"
.Vb 2
\&  http://ftp.wayne.edu/cpan/
\&  ftp://ftp.wayne.edu/cpan/
.Ve
.IP "Minnesota" 8
.IX Item "Minnesota"
.Vb 1
\&  http://cpan.msi.umn.edu/
.Ve
.IP "New Jersey" 8
.IX Item "New Jersey"
.Vb 2
\&  http://mirror.datapipe.net/CPAN/
\&  ftp://mirror.datapipe.net/pub/CPAN/
.Ve
.IP "New York" 8
.IX Item "New York"
.Vb 12
\&  http://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  ftp://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  http://mirror.cc.columbia.edu/pub/software/cpan/
\&  ftp://mirror.cc.columbia.edu/pub/software/cpan/
\&  http://cpan.belfry.net/
\&  http://cpan.erlbaum.net/
\&  ftp://cpan.erlbaum.net/CPAN/
\&  http://cpan.hexten.net/
\&  ftp://cpan.hexten.net/
\&  ftp://mirror.nyi.net/CPAN/
\&  http://mirror.rit.edu/CPAN/
\&  ftp://mirror.rit.edu/CPAN/
.Ve
.IP "North Carolina" 8
.IX Item "North Carolina"
.Vb 2
\&  http://www.ibiblio.org/pub/mirrors/CPAN
\&  ftp://ftp.ncsu.edu/pub/mirror/CPAN/
.Ve
.IP "Oregon" 8
.IX Item "Oregon"
.Vb 2
\&  http://ftp.osuosl.org/pub/CPAN/
\&  ftp://ftp.osuosl.org/pub/CPAN/
.Ve
.IP "Pennsylvania" 8
.IX Item "Pennsylvania"
.Vb 4
\&  http://ftp.epix.net/CPAN/
\&  ftp://ftp.epix.net/pub/languages/perl/
\&  http://cpan.pair.com/
\&  ftp://cpan.pair.com/pub/CPAN/
.Ve
.IP "South Carolina" 8
.IX Item "South Carolina"
.Vb 1
\&  http://cpan.mirror.clemson.edu/
.Ve
.IP "Tennessee" 8
.IX Item "Tennessee"
.Vb 1
\&  http://mira.sunsite.utk.edu/CPAN/
.Ve
.IP "Texas" 8
.IX Item "Texas"
.Vb 1
\&  http://mirror.uta.edu/CPAN
.Ve
.IP "Utah" 8
.IX Item "Utah"
.Vb 1
\&  ftp://mirror.xmission.com/CPAN/
.Ve
.IP "Virginia" 8
.IX Item "Virginia"
.Vb 5
\&  http://cpan\-du.viaverio.com/
\&  ftp://cpan\-du.viaverio.com/pub/CPAN/
\&  http://perl.secsup.org/
\&  ftp://perl.secsup.org/pub/perl/
\&  ftp://mirror.cogentco.com/pub/CPAN/
.Ve
.IP "Washington" 8
.IX Item "Washington"
.Vb 3
\&  http://cpan.llarian.net/
\&  ftp://cpan.llarian.net/pub/CPAN/
\&  ftp://ftp\-mirror.internap.com/pub/CPAN/
.Ve
.IP "Wisconsin" 8
.IX Item "Wisconsin"
.Vb 4
\&  http://cpan.mirrors.tds.net
\&  ftp://cpan.mirrors.tds.net/pub/CPAN
\&  http://mirror.sit.wisc.edu/pub/CPAN/
\&  ftp://mirror.sit.wisc.edu/pub/CPAN/
.Ve
.RE
.RS 4
.RE
.SS "Oceania"
.IX Subsection "Oceania"
.IP "Australia" 4
.IX Item "Australia"
.Vb 5
\&  http://mirror.internode.on.net/pub/cpan/
\&  ftp://mirror.internode.on.net/pub/cpan/
\&  http://cpan.mirror.aussiehq.net.au/
\&  http://mirror.as24220.net/cpan/
\&  ftp://mirror.as24220.net/cpan/
.Ve
.IP "New Zealand" 4
.IX Item "New Zealand"
.Vb 5
\&  ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
\&  http://cpan.inspire.net.nz
\&  ftp://cpan.inspire.net.nz/cpan
\&  http://cpan.catalyst.net.nz/CPAN/
\&  ftp://cpan.catalyst.net.nz/pub/CPAN/
.Ve
.SS "South America"
.IX Subsection "South America"
.IP "Argentina" 4
.IX Item "Argentina"
.Vb 3
\&  http://cpan.patan.com.ar/
\&  http://cpan.localhost.net.ar
\&  ftp://mirrors.localhost.net.ar/pub/mirrors/CPAN
.Ve
.IP "Brazil" 4
.IX Item "Brazil"
.Vb 4
\&  ftp://cpan.pop\-mg.com.br/pub/CPAN/
\&  http://ftp.pucpr.br/CPAN
\&  ftp://ftp.pucpr.br/CPAN
\&  http://cpan.kinghost.net/
.Ve
.IP "Chile" 4
.IX Item "Chile"
.Vb 2
\&  http://cpan.dcc.uchile.cl/
\&  ftp://cpan.dcc.uchile.cl/pub/lang/cpan/
.Ve
.IP "Colombia" 4
.IX Item "Colombia"
.Vb 1
\&  http://www.laqee.unal.edu.co/CPAN/
.Ve
.SS "\s-1RSYNC\s0 Mirrors"
.IX Subsection "RSYNC Mirrors"
.Vb 10
\&                      mirror.as24220.net::cpan
\&                      cpan.inode.at::CPAN
\&                      gd.tuwien.ac.at::CPAN
\&                      ftp.belnet.be::packages/cpan
\&                      rsync.linorg.usp.br::CPAN
\&                      rsync.arcticnetwork.ca::CPAN
\&                      CPAN.mirror.rafal.ca::CPAN
\&                      mirror.csclub.uwaterloo.ca::CPAN
\&                      theoryx5.uwinnipeg.ca::CPAN
\&                      www.laqee.unal.edu.co::CPAN
\&                      mirror.uni\-c.dk::CPAN
\&                      rsync.nic.funet.fi::CPAN
\&                      rsync://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&                      mir1.ovh.net::CPAN
\&                      miroir\-francais.fr::cpan
\&                      ftp.crihan.fr::CPAN
\&                      rsync://mirror.cict.fr/cpan/
\&                      rsync://mirror.netcologne.de/cpan/
\&                      ftp\-stud.hs\-esslingen.de::CPAN/
\&                      ftp.gwdg.de::FTP/languages/perl/CPAN/
\&                      cpan.mirror.iphh.net::CPAN
\&                      cpan.cpantesters.org::cpan
\&                      cpan.hu::CPAN
\&                      komo.vlsm.org::CPAN
\&                      mirror.unej.ac.id::cpan
\&                      ftp.esat.net::/pub/languages/perl/CPAN
\&                      ftp.heanet.ie::mirrors/ftp.perl.org/pub/CPAN
\&                      rsync.panu.it::CPAN
\&                      cpan.fastbull.org::CPAN
\&                      ftp.kddilabs.jp::cpan
\&                      ftp.nara.wide.ad.jp::cpan/
\&                      rsync://ftp.jaist.ac.jp/pub/CPAN/
\&                      rsync://ftp.riken.jp/cpan/
\&                      mirror.linuxiso.kz::CPAN
\&                      rsync://mirrors3.kernel.org/mirrors/CPAN/
\&                      rsync://rsync.osmirror.nl/cpan/
\&                      mirror.leaseweb.com::CPAN
\&                      cpan.nautile.nc::CPAN
\&                      mirror.icis.pcz.pl::CPAN
\&                      piotrkosoft.net::mirrors/CPAN
\&                      rsync://cpan.perl.pt/
\&                      ftp.kaist.ac.kr::cpan
\&                      cpan.sarang.net::CPAN
\&                      mirror.averse.net::cpan
\&                      rsync.oss.eznetsols.org
\&                      mirror.ac.za::cpan
\&                      ftp.is.co.za::IS\-Mirror/ftp.cpan.org/
\&                      rsync://ftp.gui.uva.es/cpan/
\&                      rsync://mirrors4.kernel.org/mirrors/CPAN/
\&                      ftp.solnet.ch::CPAN
\&                      ftp.ulak.net.tr::CPAN
\&                      gafol.net::cpan
\&                      rsync.mirrorservice.org::ftp.funet.fi/pub/
\&                      rsync://rsync.mirror.8086.net/CPAN/
\&                      rsync.mirror.anlx.net::CPAN
\&                      mirror.bytemark.co.uk::CPAN
\&                      ftp.plig.net::CPAN
\&                      rsync://ftp.ticklers.org:CPAN/
\&                      mirrors.ibiblio.org::CPAN
\&                      cpan\-du.viaverio.com::CPAN
\&                      mirror.hiwaay.net::CPAN
\&                      rsync://mira.sunsite.utk.edu/CPAN/
\&                      cpan.mirrors.tds.net::CPAN
\&                      mirror.its.uidaho.edu::cpan
\&                      rsync://mirror.cc.columbia.edu::cpan/
\&                      ftp.fxcorporate.com::CPAN
\&                      rsync.atlantic.net::CPAN
\&                      mirrors.kernel.org::mirrors/CPAN
\&                      rsync://mirrors2.kernel.org/mirrors/CPAN/
\&                      cpan.pair.com::CPAN
\&                      rsync://mirror.rit.edu/CPAN/
\&                      rsync://mirror.facebook.net/cpan/
\&                      rsync://mirrors1.kernel.org/mirrors/CPAN/
\&                      cpan\-sj.viaverio.com::CPAN
.Ve
.PP
For an up-to-date listing of \s-1CPAN\s0 sites,
see http://www.cpan.org/SITES or ftp://www.cpan.org/SITES .
.SH "Modules: Creation, Use, and Abuse"
.IX Header "Modules: Creation, Use, and Abuse"
(The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest \s-1CPAN\s0 site.)
.PP
Perl implements a class using a package, but the presence of a
package doesn't imply the presence of a class.  A package is just a
namespace.  A class is a package that provides subroutines that can be
used as methods.  A method is just a subroutine that expects, as its
first argument, either the name of a package (for \*(L"static\*(R" methods),
or a reference to something (for \*(L"virtual\*(R" methods).
.PP
A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of
its methods by loading dynamic C or \*(C+ objects, but that should be
totally transparent to the user of the module.  Likewise, the module
might set up an \s-1AUTOLOAD\s0 function to slurp in subroutine definitions on
demand, but this is also transparent.  Only the \fI.pm\fR file is required to
exist.  See perlsub, perlobj, and AutoLoader for details about
the \s-1AUTOLOAD\s0 mechanism.
.SS "Guidelines for Module Creation"
.IX Subsection "Guidelines for Module Creation"
.IP "\(bu" 4
Do similar modules already exist in some form?
.Sp
If so, please try to reuse the existing modules either in whole or
by inheriting useful features into a new class.  If this is not
practical try to get together with the module authors to work on
extending or enhancing the functionality of the existing modules.
A perfect example is the plethora of packages in perl4 for dealing
with command line options.
.Sp
If you are writing a module to expand an already existing set of
modules, please coordinate with the author of the package.  It
helps if you follow the same naming scheme and module interaction
scheme as the original author.
.IP "\(bu" 4
Try to design the new module to be easy to extend and reuse.
.Sp
Try to \f(CW\*(C`use warnings;\*(C'\fR (or \f(CW\*(C`use warnings qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no warnings qw(...);\*(C'\fR to individual blocks
of code that need less warnings.
.Sp
Use blessed references.  Use the two argument form of bless to bless
into the class name given as the first parameter of the constructor,
e.g.,:
.Sp
.Vb 4
\& sub new {
\&     my $class = shift;
\&     return bless {}, $class;
\& }
.Ve
.Sp
or even this if you'd like it to be used as either a static
or a virtual method.
.Sp
.Vb 5
\& sub new {
\&     my $self  = shift;
\&     my $class = ref($self) || $self;
\&     return bless {}, $class;
\& }
.Ve
.Sp
Pass arrays as references so more parameters can be added later
(it's also faster).  Convert functions into methods where
appropriate.  Split large methods into smaller more flexible ones.
Inherit methods from other modules if appropriate.
.Sp
Avoid class name tests like: \f(CW\*(C`die "Invalid" unless ref $ref eq \*(AqFOO\*(Aq\*(C'\fR.
Generally you can delete the \f(CW\*(C`eq \*(AqFOO\*(Aq\*(C'\fR part with no harm at all.
Let the objects look after themselves! Generally, avoid hard-wired
class names as far as possible.
.Sp
Avoid \f(CW\*(C`$r\->Class::func()\*(C'\fR where using \f(CW\*(C`@ISA=qw(... Class ...)\*(C'\fR and
\&\f(CW\*(C`$r\->func()\*(C'\fR would work.
.Sp
Use autosplit so little used or newly added functions won't be a
burden to programs that don't use them. Add test functions to
the module after _\|_END_\|_ either using AutoSplit or by saying:
.Sp
.Vb 1
\& eval join(\*(Aq\*(Aq,<main::DATA>) || die $@ unless caller();
.Ve
.Sp
Does your module pass the 'empty subclass' test? If you say
\&\f(CW\*(C`@SUBCLASS::ISA = qw(YOURCLASS);\*(C'\fR your applications should be able
to use \s-1SUBCLASS\s0 in exactly the same way as \s-1YOURCLASS\s0.  For example,
does your application still work if you change:  \f(CW\*(C`$obj = YOURCLASS\->new();\*(C'\fR
into: \f(CW\*(C`$obj = SUBCLASS\->new();\*(C'\fR ?
.Sp
Avoid keeping any state information in your packages. It makes it
difficult for multiple other packages to use yours. Keep state
information in objects.
.Sp
Always use \fB\-w\fR.
.Sp
Try to \f(CW\*(C`use strict;\*(C'\fR (or \f(CW\*(C`use strict qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no strict qw(...);\*(C'\fR to individual blocks
of code that need less strictness.
.Sp
Always use \fB\-w\fR.
.Sp
Follow the guidelines in perlstyle.
.Sp
Always use \fB\-w\fR.
.IP "\(bu" 4
Some simple style guidelines
.Sp
The perlstyle manual supplied with Perl has many helpful points.
.Sp
Coding style is a matter of personal taste. Many people evolve their
style over several years as they learn what helps them write and
maintain good code.  Here's one set of assorted suggestions that
seem to be widely used by experienced developers:
.Sp
Use underscores to separate words.  It is generally easier to read
\&\f(CW$var_names_like_this\fR than \f(CW$VarNamesLikeThis\fR, especially for
non-native speakers of English. It's also a simple rule that works
consistently with \s-1VAR_NAMES_LIKE_THIS\s0.
.Sp
Package/Module names are an exception to this rule. Perl informally
reserves lowercase module names for 'pragma' modules like integer
and strict. Other modules normally begin with a capital letter and
use mixed case with no underscores (need to be short and portable).
.Sp
You may find it helpful to use letter case to indicate the scope
or nature of a variable. For example:
.Sp
.Vb 3
\& $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
\& $Some_Caps_Here  package\-wide global/static
\& $no_caps_here    function scope my() or local() variables
.Ve
.Sp
Function and method names seem to work best as all lowercase.
e.g., \f(CW\*(C`$obj\->as_string()\*(C'\fR.
.Sp
You can use a leading underscore to indicate that a variable or
function should not be used outside the package that defined it.
.IP "\(bu" 4
Select what to export.
.Sp
Do \s-1NOT\s0 export method names!
.Sp
Do \s-1NOT\s0 export anything else by default without a good reason!
.Sp
Exports pollute the namespace of the module user.  If you must
export try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid
short or common names to reduce the risk of name clashes.
.Sp
Generally anything not exported is still accessible from outside the
module using the ModuleName::item_name (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
indicate informally that they are 'internal' and not for public use.
.Sp
(It is actually possible to get private functions by saying:
\&\f(CW\*(C`my $subref = sub { ... };  &$subref;\*(C'\fR.  But there's no way to call that
directly as a method, because a method must have a name in the symbol
table.)
.Sp
As a general rule, if the module is trying to be object oriented
then export nothing. If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution.
.IP "\(bu" 4
Select a name for the module.
.Sp
This name should be as descriptive, accurate, and complete as
possible.  Avoid any risk of ambiguity. Always try to use two or
more whole words.  Generally the name should reflect what is special
about what the module does rather than how it does it.  Please use
nested module names to group informally or categorize a module.
There should be a very good reason for a module not to have a nested name.
Module names should begin with a capital letter.
.Sp
Having 57 modules all called Sort will not make life easy for anyone
(though having 23 called Sort::Quick is only marginally better :\-).
Imagine someone trying to install your module alongside many others.
If in any doubt ask for suggestions in comp.lang.perl.misc.
.Sp
If you are developing a suite of related modules/classes it's good
practice to use nested classes with a common prefix as this will
avoid namespace clashes. For example: Xyz::Control, Xyz::View,
Xyz::Model etc. Use the modules in this list as a naming guide.
.Sp
If adding a new module to a set, follow the original author's
standards for naming modules and the interface to methods in
those modules.
.Sp
If developing modules for private internal or project specific use,
that will never be released to the public, then you should ensure
that their names will not clash with any future public module. You
can do this either by using the reserved Local::* category or by
using a category name that includes an underscore like Foo_Corp::*.
.Sp
To be portable each component of a module name should be limited to
11 characters. If it might be used on MS-DOS then try to ensure each is
unique in the first 8 characters. Nested modules make this easier.
.IP "\(bu" 4
Have you got it right?
.Sp
How do you know that you've made the right decisions? Have you
picked an interface design that will cause problems later? Have
you picked the most appropriate name? Do you have any questions?
.Sp
The best way to know for sure, and pick up many helpful suggestions,
is to ask someone who knows. Comp.lang.perl.misc is read by just about
all the people who develop modules and it's the best place to ask.
.Sp
All you need to do is post a short summary of the module, its
purpose and interfaces. A few lines on each of the main methods is
probably enough. (If you post the whole module it might be ignored
by busy people \- generally the very people you want to read it!)
.Sp
Don't worry about posting if you can't say when the module will be
ready \- just say so in the message. It might be worth inviting
others to help you, they may be able to complete it for you!
.IP "\(bu" 4
\&\s-1README\s0 and other Additional Files.
.Sp
It's well known that software developers usually fully document the
software they write. If, however, the world is in urgent need of
your software and there is not enough time to write the full
documentation please at least provide a \s-1README\s0 file containing:
.RS 4
.IP "\(bu" 10
A description of the module/package/extension etc.
.IP "\(bu" 10
A copyright notice \- see below.
.IP "\(bu" 10
Prerequisites \- what else you may need to have.
.IP "\(bu" 10
How to build it \- possible changes to Makefile.PL etc.
.IP "\(bu" 10
How to install it.
.IP "\(bu" 10
Recent changes in this release, especially incompatibilities
.IP "\(bu" 10
Changes / enhancements you plan to make in the future.
.RE
.RS 4
.Sp
If the \s-1README\s0 file seems to be getting too large you may wish to
split out some of the sections into separate files: \s-1INSTALL\s0,
Copying, ToDo etc.
.IP "\(bu" 4
Adding a Copyright Notice.
.Sp
How you choose to license your work is a personal decision.
The general mechanism is to assert your Copyright and then make
a declaration of how others may copy/use/modify your work.
.Sp
Perl, for example, is supplied with two types of licence: The \s-1GNU\s0 \s-1GPL\s0
and The Artistic Licence (see the files \s-1README\s0, Copying, and Artistic,
or perlgpl and perlartistic).  Larry has good reasons for \s-1NOT\s0
just using the \s-1GNU\s0 \s-1GPL\s0.
.Sp
My personal recommendation, out of respect for Larry, Perl, and the
Perl community at large is to state something simply like:
.Sp
.Vb 3
\& Copyright (c) 1995 Your Name. All rights reserved.
\& This program is free software; you can redistribute it and/or
\& modify it under the same terms as Perl itself.
.Ve
.Sp
This statement should at least appear in the \s-1README\s0 file. You may
also wish to include it in a Copying file and your source files.
Remember to include the other words in addition to the Copyright.
.IP "\(bu" 4
Give the module a version/issue/release number.
.Sp
To be fully compatible with the Exporter and MakeMaker modules you
should store your module's version number in a non-my package
variable called \f(CW$VERSION\fR.  This should be a positive floating point
number with at least two digits after the decimal (i.e., hundredths,
e.g, \f(CW\*(C`$VERSION = "0.01"\*(C'\fR).  Don't use a \*(L"1.3.2\*(R" style version.
See Exporter for details.
.Sp
It may be handy to add a function or method to retrieve the number.
Use the number in announcements and archive file names when
releasing the module (ModuleName\-1.02.tar.Z).
See perldoc ExtUtils::MakeMaker.pm for details.
.IP "\(bu" 4
How to release and distribute a module.
.Sp
It's good idea to post an announcement of the availability of your
module (or the module itself if small) to the comp.lang.perl.announce
Usenet newsgroup.  This will at least ensure very wide once-off
distribution.
.Sp
If possible, register the module with \s-1CPAN\s0.  You should
include details of its location in your announcement.
.Sp
Some notes about ftp archives: Please use a long descriptive file
name that includes the version number. Most incoming directories
will not be readable/listable, i.e., you won't be able to see your
file after uploading it. Remember to send your email notification
message as soon as possible after uploading else your file may get
deleted automatically. Allow time for the file to be processed
and/or check the file has been processed before announcing its
location.
.Sp
\&\s-1FTP\s0 Archives for Perl Modules:
.Sp
Follow the instructions and links on:
.Sp
.Vb 2
\&   http://www.cpan.org/modules/00modlist.long.html
\&   http://www.cpan.org/modules/04pause.html
.Ve
.Sp
or upload to one of these sites:
.Sp
.Vb 2
\&   https://pause.kbx.de/pause/
\&   http://pause.perl.org/
.Ve
.Sp
and notify <modules@perl.org>.
.Sp
By using the \s-1WWW\s0 interface you can ask the Upload Server to mirror
your modules from your ftp or \s-1WWW\s0 site into your own directory on
\&\s-1CPAN\s0!
.Sp
Please remember to send me an updated entry for the Module list!
.IP "\(bu" 4
Take care when changing a released module.
.Sp
Always strive to remain compatible with previous released versions.
Otherwise try to add a mechanism to revert to the
old behavior if people rely on it.  Document incompatible changes.
.RE
.RS 4
.RE
.SS "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IX Subsection "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IP "\(bu" 4
There is no requirement to convert anything.
.Sp
If it ain't broke, don't fix it! Perl 4 library scripts should
continue to work with no problems. You may need to make some minor
changes (like escaping non-array @'s in double quoted strings) but
there is no need to convert a .pl file into a Module for just that.
.IP "\(bu" 4
Consider the implications.
.Sp
All Perl applications that make use of the script will need to
be changed (slightly) if the script is converted into a module.  Is
it worth it unless you plan to make other changes at the same time?
.IP "\(bu" 4
Make the most of the opportunity.
.Sp
If you are going to convert the script to a module you can use the
opportunity to redesign the interface.  The guidelines for module
creation above include many of the issues you should consider.
.IP "\(bu" 4
The pl2pm utility will get you started.
.Sp
This utility will read *.pl files (given as parameters) and write
corresponding *.pm files. The pl2pm utilities does the following:
.RS 4
.IP "\(bu" 10
Adds the standard Module prologue lines
.IP "\(bu" 10
Converts package specifiers from ' to ::
.IP "\(bu" 10
Converts die(...) to croak(...)
.IP "\(bu" 10
Several other minor changes
.RE
.RS 4
.Sp
Being a mechanical process pl2pm is not bullet proof. The converted
code will need careful checking, especially any package statements.
Don't delete the original .pl file till the new .pm one works!
.RE
.SS "Guidelines for Reusing Application Code"
.IX Subsection "Guidelines for Reusing Application Code"
.IP "\(bu" 4
Complete applications rarely belong in the Perl Module Library.
.IP "\(bu" 4
Many applications contain some Perl code that could be reused.
.Sp
Help save the world! Share your code in a form that makes it easy
to reuse.
.IP "\(bu" 4
Break-out the reusable code into one or more separate module files.
.IP "\(bu" 4
Take the opportunity to reconsider and redesign the interfaces.
.IP "\(bu" 4
In some cases the 'application' can then be reduced to a small
.Sp
fragment of code built on top of the reusable modules. In these cases
the application could invoked as:
.Sp
.Vb 3
\&     % perl \-e \*(Aquse Module::Name; method(@ARGV)\*(Aq ...
\&or
\&     % perl \-mModule::Name ...    (in perl5.002 or higher)
.Ve
.SH "NOTE"
.IX Header "NOTE"
Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like \*(C+, Ada, or Modula\-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer
that you stayed out of its living room because you weren't invited, not
because it has a shotgun.
.PP
The module and its user have a contract, part of which is common law,
and part of which is \*(L"written\*(R".  Part of the common law contract is
that a module doesn't pollute any namespace it wasn't asked to.  The
written contract for the module (A.K.A. documentation) may make other
provisions.  But then you know when you \f(CW\*(C`use RedefineTheWorld\*(C'\fR that
you're redefining the world and willing to take the consequences.
                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodlib5.18.1                             0100644 0001750 0001750 00000325077 12566207442 023423  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODLIB 1"
.TH PERLMODLIB 1 "2015-08-22" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodlib \- constructing new Perl modules and finding existing ones
.SH "THE PERL MODULE LIBRARY"
.IX Header "THE PERL MODULE LIBRARY"
Many modules are included in the Perl distribution.  These are described
below, and all end in \fI.pm\fR.  You may discover compiled library
files (usually ending in \fI.so\fR) or small pieces of modules to be
autoloaded (ending in \fI.al\fR); these were automatically generated
by the installation process.  You may also discover files in the
library directory that end in either \fI.pl\fR or \fI.ph\fR.  These are
old libraries supplied so that old programs that use them still
run.  The \fI.pl\fR files will all eventually be converted into standard
modules, and the \fI.ph\fR files made by \fBh2ph\fR will probably end up
as extension modules made by \fBh2xs\fR.  (Some \fI.ph\fR values may
already be available through the \s-1POSIX,\s0 Errno, or Fcntl modules.)
The \fBpl2pm\fR file in the distribution may help in your conversion,
but it's just a mechanical process and therefore far from bulletproof.
.SS "Pragmatic Modules"
.IX Subsection "Pragmatic Modules"
They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually
work well only when used within a \f(CW\*(C`use\*(C'\fR, or \f(CW\*(C`no\*(C'\fR.  Most of these
are lexically scoped, so an inner \s-1BLOCK\s0 may countermand them
by saying:
.PP
.Vb 3
\&    no integer;
\&    no strict \*(Aqrefs\*(Aq;
\&    no warnings;
.Ve
.PP
which lasts until the end of that \s-1BLOCK.\s0
.PP
Some pragmas are lexically scoped\*(--typically those that affect the
\&\f(CW$^H\fR hints variable.  Others affect the current package instead,
like \f(CW\*(C`use vars\*(C'\fR and \f(CW\*(C`use subs\*(C'\fR, which allow you to predeclare a
variables or subroutines within a particular \fIfile\fR rather than
just a block.  Such declarations are effective for the entire file
for which they were declared.  You cannot rescind them with \f(CW\*(C`no
vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
The following pragmas are defined (and have their own documentation).
.IP "arybase" 12
.IX Item "arybase"
Set indexing base via $[
.IP "attributes" 12
.IX Item "attributes"
Get/set subroutine or variable attributes
.IP "autodie" 12
.IX Item "autodie"
Replace functions with ones that succeed or die with lexical scope
.IP "autodie::exception" 12
.IX Item "autodie::exception"
Exceptions from autodying functions.
.IP "autodie::exception::system" 12
.IX Item "autodie::exception::system"
Exceptions from autodying \fIsystem()\fR.
.IP "autodie::hints" 12
.IX Item "autodie::hints"
Provide hints about user subroutines to autodie
.IP "autouse" 12
.IX Item "autouse"
Postpone load of modules until a function is used
.IP "base" 12
.IX Item "base"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "bigint" 12
.IX Item "bigint"
Transparent BigInteger support for Perl
.IP "bignum" 12
.IX Item "bignum"
Transparent BigNumber support for Perl
.IP "bigrat" 12
.IX Item "bigrat"
Transparent BigNumber/BigRational support for Perl
.IP "blib" 12
.IX Item "blib"
Use MakeMaker's uninstalled version of a package
.IP "bytes" 12
.IX Item "bytes"
Force byte semantics rather than character semantics
.IP "charnames" 12
.IX Item "charnames"
Access to Unicode character names and named character sequences; also define character names
.IP "constant" 12
.IX Item "constant"
Declare constants
.IP "deprecate" 12
.IX Item "deprecate"
Perl pragma for deprecating the core version of a module
.IP "diagnostics" 12
.IX Item "diagnostics"
Produce verbose warning diagnostics
.IP "encoding" 12
.IX Item "encoding"
Allows you to write your script in non-ascii or non\-utf8
.IP "encoding::warnings" 12
.IX Item "encoding::warnings"
Warn on implicit encoding conversions
.IP "feature" 12
.IX Item "feature"
Enable new features
.IP "fields" 12
.IX Item "fields"
Compile-time class fields
.IP "filetest" 12
.IX Item "filetest"
Control the filetest permission operators
.IP "if" 12
.IX Item "if"
\&\f(CW\*(C`use\*(C'\fR a Perl module if a condition holds
.IP "inc::latest" 12
.IX Item "inc::latest"
Use modules bundled in inc/ if they are newer than installed ones
.IP "integer" 12
.IX Item "integer"
Use integer arithmetic instead of floating point
.IP "less" 12
.IX Item "less"
Request less of something
.IP "lib" 12
.IX Item "lib"
Manipulate \f(CW@INC\fR at compile time
.IP "locale" 12
.IX Item "locale"
Use or avoid \s-1POSIX\s0 locales for built-in operations
.IP "mro" 12
.IX Item "mro"
Method Resolution Order
.IP "open" 12
.IX Item "open"
Set default PerlIO layers for input and output
.IP "ops" 12
.IX Item "ops"
Restrict unsafe operations when compiling
.IP "overload" 12
.IX Item "overload"
Package for overloading Perl operations
.IP "overloading" 12
.IX Item "overloading"
Lexically control overloading
.IP "parent" 12
.IX Item "parent"
Establish an \s-1ISA\s0 relationship with base classes at compile time
.IP "perldoc" 12
.IX Item "perldoc"
Look up Perl documentation in Pod format.
.IP "perlfaq" 12
.IX Item "perlfaq"
Frequently asked questions about Perl
.IP "perlfaq1" 12
.IX Item "perlfaq1"
General Questions About Perl
.IP "perlfaq2" 12
.IX Item "perlfaq2"
Obtaining and Learning about Perl
.IP "perlfaq3" 12
.IX Item "perlfaq3"
Programming Tools
.IP "perlfaq4" 12
.IX Item "perlfaq4"
Data Manipulation
.IP "perlfaq5" 12
.IX Item "perlfaq5"
Files and Formats
.IP "perlfaq6" 12
.IX Item "perlfaq6"
Regular Expressions
.IP "perlfaq7" 12
.IX Item "perlfaq7"
General Perl Language Issues
.IP "perlfaq8" 12
.IX Item "perlfaq8"
System Interaction
.IP "perlfaq9" 12
.IX Item "perlfaq9"
Web, Email and Networking
.IP "perlfunc" 12
.IX Item "perlfunc"
Perl builtin functions
.IP "perlglossary" 12
.IX Item "perlglossary"
Perl Glossary
.IP "perlpodspeccopy" 12
.IX Item "perlpodspeccopy"
Plain Old Documentation: format specification and notes
.IP "perlvarcopy" 12
.IX Item "perlvarcopy"
Perl predefined variables
.IP "perlxs" 12
.IX Item "perlxs"
\&\s-1XS\s0 language reference manual
.IP "perlxstut" 12
.IX Item "perlxstut"
Tutorial for writing XSUBs
.IP "perlxstypemap" 12
.IX Item "perlxstypemap"
Perl \s-1XS\s0 C/Perl type mapping
.IP "re" 12
.IX Item "re"
Alter regular expression behaviour
.IP "sigtrap" 12
.IX Item "sigtrap"
Enable simple signal handling
.IP "sort" 12
.IX Item "sort"
Control \fIsort()\fR behaviour
.IP "strict" 12
.IX Item "strict"
Restrict unsafe constructs
.IP "subs" 12
.IX Item "subs"
Predeclare sub names
.IP "threads" 12
.IX Item "threads"
Perl interpreter-based threads
.IP "threads::shared" 12
.IX Item "threads::shared"
Perl extension for sharing data structures between threads
.IP "utf8" 12
.IX Item "utf8"
Enable/disable \s-1UTF\-8 \s0(or UTF-EBCDIC) in source code
.IP "vars" 12
.IX Item "vars"
Predeclare global variable names
.IP "version" 12
.IX Item "version"
Perl extension for Version Objects
.IP "vmsish" 12
.IX Item "vmsish"
Control VMS-specific language features
.IP "warnings" 12
.IX Item "warnings"
Control optional warnings
.IP "warnings::register" 12
.IX Item "warnings::register"
Warnings import function
.SS "Standard Modules"
.IX Subsection "Standard Modules"
Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the
Exporter module.  See their own documentation for details.
.PP
It's possible that not all modules listed below are installed on your
system. For example, the GDBM_File module will not be installed if you
don't have the gdbm library.
.IP "AnyDBM_File" 12
.IX Item "AnyDBM_File"
Provide framework for multiple DBMs
.IP "App::Cpan" 12
.IX Item "App::Cpan"
Easily interact with \s-1CPAN\s0 from the command line
.IP "App::Prove" 12
.IX Item "App::Prove"
Implements the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State" 12
.IX Item "App::Prove::State"
State storage for the \f(CW\*(C`prove\*(C'\fR command.
.IP "App::Prove::State::Result" 12
.IX Item "App::Prove::State::Result"
Individual test suite results.
.IP "App::Prove::State::Result::Test" 12
.IX Item "App::Prove::State::Result::Test"
Individual test results.
.IP "Archive::Extract" 12
.IX Item "Archive::Extract"
A generic archive extracting mechanism
.IP "Archive::Tar" 12
.IX Item "Archive::Tar"
Module for manipulations of tar archives
.IP "Archive::Tar::File" 12
.IX Item "Archive::Tar::File"
A subclass for in-memory extracted file from Archive::Tar
.IP "Attribute::Handlers" 12
.IX Item "Attribute::Handlers"
Simpler definition of attribute handlers
.IP "AutoLoader" 12
.IX Item "AutoLoader"
Load subroutines only on demand
.IP "AutoSplit" 12
.IX Item "AutoSplit"
Split a package for autoloading
.IP "B" 12
.IX Item "B"
The Perl Compiler Backend
.IP "B::Concise" 12
.IX Item "B::Concise"
Walk Perl syntax tree, printing concise info about ops
.IP "B::Debug" 12
.IX Item "B::Debug"
Walk Perl syntax tree, printing debug info about ops
.IP "B::Deparse" 12
.IX Item "B::Deparse"
Perl compiler backend to produce perl code
.IP "B::Lint" 12
.IX Item "B::Lint"
Perl lint
.IP "B::Lint::Debug" 12
.IX Item "B::Lint::Debug"
Adds debugging stringification to B::
.IP "B::Showlex" 12
.IX Item "B::Showlex"
Show lexical variables used in functions or files
.IP "B::Terse" 12
.IX Item "B::Terse"
Walk Perl syntax tree, printing terse info about ops
.IP "B::Xref" 12
.IX Item "B::Xref"
Generates cross reference reports for Perl programs
.IP "Benchmark" 12
.IX Item "Benchmark"
Benchmark running times of Perl code
.ie n .IP """Socket""" 12
.el .IP "\f(CWSocket\fR" 12
.IX Item "Socket"
Networking constants and support functions
.IP "\s-1CGI\s0" 12
.IX Item "CGI"
Handle Common Gateway Interface requests and responses
.IP "CGI::Apache" 12
.IX Item "CGI::Apache"
Backward compatibility module for \s-1CGI\s0.pm
.IP "CGI::Carp" 12
.IX Item "CGI::Carp"
\&\s-1CGI\s0 routines for writing to the \s-1HTTPD \s0(or other) error log
.IP "CGI::Cookie" 12
.IX Item "CGI::Cookie"
Interface to \s-1HTTP\s0 Cookies
.IP "CGI::Fast" 12
.IX Item "CGI::Fast"
\&\s-1CGI\s0 Interface for Fast \s-1CGI\s0
.IP "CGI::Pretty" 12
.IX Item "CGI::Pretty"
Module to produce nicely formatted \s-1HTML\s0 code
.IP "CGI::Push" 12
.IX Item "CGI::Push"
Simple Interface to Server Push
.IP "CGI::Switch" 12
.IX Item "CGI::Switch"
Backward compatibility module for defunct CGI::Switch
.IP "CGI::Util" 12
.IX Item "CGI::Util"
Internal utilities used by \s-1CGI\s0 module
.IP "\s-1CORE\s0" 12
.IX Item "CORE"
Namespace for Perl's core routines
.IP "\s-1CPAN\s0" 12
.IX Item "CPAN"
Query, download and build perl modules from \s-1CPAN\s0 sites
.IP "\s-1CPAN::API::HOWTO\s0" 12
.IX Item "CPAN::API::HOWTO"
A recipe book for programming with \s-1CPAN\s0.pm
.IP "CPAN::Debug" 12
.IX Item "CPAN::Debug"
Internal debugging for \s-1CPAN\s0.pm
.IP "CPAN::Distroprefs" 12
.IX Item "CPAN::Distroprefs"
Read and match distroprefs
.IP "CPAN::FirstTime" 12
.IX Item "CPAN::FirstTime"
Utility for CPAN::Config file Initialization
.IP "CPAN::HandleConfig" 12
.IX Item "CPAN::HandleConfig"
Internal configuration handling for \s-1CPAN\s0.pm
.IP "CPAN::Kwalify" 12
.IX Item "CPAN::Kwalify"
Interface between \s-1CPAN\s0.pm and Kwalify.pm
.IP "CPAN::Meta" 12
.IX Item "CPAN::Meta"
The distribution metadata for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Converter" 12
.IX Item "CPAN::Meta::Converter"
Convert \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::Feature" 12
.IX Item "CPAN::Meta::Feature"
An optional feature provided by a \s-1CPAN\s0 distribution
.IP "CPAN::Meta::History" 12
.IX Item "CPAN::Meta::History"
History of \s-1CPAN\s0 Meta Spec changes
.IP "CPAN::Meta::Prereqs" 12
.IX Item "CPAN::Meta::Prereqs"
A set of distribution prerequisites by phase and type
.IP "CPAN::Meta::Requirements" 12
.IX Item "CPAN::Meta::Requirements"
A set of version requirements for a \s-1CPAN\s0 dist
.IP "CPAN::Meta::Spec" 12
.IX Item "CPAN::Meta::Spec"
Specification for \s-1CPAN\s0 distribution metadata
.IP "CPAN::Meta::Validator" 12
.IX Item "CPAN::Meta::Validator"
Validate \s-1CPAN\s0 distribution metadata structures
.IP "CPAN::Meta::YAML" 12
.IX Item "CPAN::Meta::YAML"
Read and write a subset of \s-1YAML\s0 for \s-1CPAN\s0 Meta files
.IP "CPAN::Nox" 12
.IX Item "CPAN::Nox"
Wrapper around \s-1CPAN\s0.pm without using any \s-1XS\s0 module
.IP "CPAN::Queue" 12
.IX Item "CPAN::Queue"
Internal queue support for \s-1CPAN\s0.pm
.IP "CPAN::Tarzip" 12
.IX Item "CPAN::Tarzip"
Internal handling of tar archives for \s-1CPAN\s0.pm
.IP "CPAN::Version" 12
.IX Item "CPAN::Version"
Utility functions to compare \s-1CPAN\s0 versions
.IP "\s-1CPANPLUS\s0" 12
.IX Item "CPANPLUS"
\&\s-1API & CLI\s0 access to the \s-1CPAN\s0 mirrors
.IP "CPANPLUS::Backend" 12
.IX Item "CPANPLUS::Backend"
Programmer's interface to \s-1CPANPLUS\s0
.IP "CPANPLUS::Backend::RV" 12
.IX Item "CPANPLUS::Backend::RV"
Return value objects
.IP "CPANPLUS::Config" 12
.IX Item "CPANPLUS::Config"
Configuration defaults and heuristics for \s-1CPANPLUS\s0
.IP "CPANPLUS::Config::HomeEnv" 12
.IX Item "CPANPLUS::Config::HomeEnv"
Set the environment for the \s-1CPANPLUS\s0 base dir
.IP "CPANPLUS::Configure" 12
.IX Item "CPANPLUS::Configure"
Configuration for \s-1CPANPLUS\s0
.IP "CPANPLUS::Dist" 12
.IX Item "CPANPLUS::Dist"
Base class for plugins
.IP "CPANPLUS::Dist::Autobundle" 12
.IX Item "CPANPLUS::Dist::Autobundle"
Distribution class for installation snapshots
.IP "CPANPLUS::Dist::Base" 12
.IX Item "CPANPLUS::Dist::Base"
Base class for custom distribution classes
.IP "CPANPLUS::Dist::Build" 12
.IX Item "CPANPLUS::Dist::Build"
\&\s-1CPANPLUS\s0 plugin to install packages that use Build.PL
.IP "CPANPLUS::Dist::Build::Constants" 12
.IX Item "CPANPLUS::Dist::Build::Constants"
Constants for CPANPLUS::Dist::Build
.IP "CPANPLUS::Dist::MM" 12
.IX Item "CPANPLUS::Dist::MM"
Distribution class for MakeMaker related modules
.IP "CPANPLUS::Dist::Sample" 12
.IX Item "CPANPLUS::Dist::Sample"
Sample code to create your own Dist::* plugin
.IP "CPANPLUS::Error" 12
.IX Item "CPANPLUS::Error"
Error handling for \s-1CPANPLUS\s0
.IP "\s-1CPANPLUS::FAQ\s0" 12
.IX Item "CPANPLUS::FAQ"
\&\s-1CPANPLUS\s0 Frequently Asked Questions
.IP "CPANPLUS::Hacking" 12
.IX Item "CPANPLUS::Hacking"
Developing \s-1CPANPLUS\s0
.IP "CPANPLUS::Internals" 12
.IX Item "CPANPLUS::Internals"
\&\s-1CPANPLUS\s0 internals
.IP "CPANPLUS::Internals::Extract" 12
.IX Item "CPANPLUS::Internals::Extract"
Internals for archive extraction
.IP "CPANPLUS::Internals::Fetch" 12
.IX Item "CPANPLUS::Internals::Fetch"
Internals for fetching files
.IP "CPANPLUS::Internals::Report" 12
.IX Item "CPANPLUS::Internals::Report"
Internals for sending test reports
.IP "CPANPLUS::Internals::Search" 12
.IX Item "CPANPLUS::Internals::Search"
Internals for searching for modules
.IP "CPANPLUS::Internals::Source" 12
.IX Item "CPANPLUS::Internals::Source"
Internals for updating source files
.IP "CPANPLUS::Internals::Source::Memory" 12
.IX Item "CPANPLUS::Internals::Source::Memory"
In memory implementation
.IP "CPANPLUS::Internals::Source::SQLite" 12
.IX Item "CPANPLUS::Internals::Source::SQLite"
SQLite implementation
.IP "CPANPLUS::Internals::Utils" 12
.IX Item "CPANPLUS::Internals::Utils"
Convenience functions for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module" 12
.IX Item "CPANPLUS::Module"
\&\s-1CPAN\s0 module objects for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author" 12
.IX Item "CPANPLUS::Module::Author"
\&\s-1CPAN\s0 author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Author::Fake" 12
.IX Item "CPANPLUS::Module::Author::Fake"
Dummy author object for \s-1CPANPLUS\s0
.IP "CPANPLUS::Module::Checksums" 12
.IX Item "CPANPLUS::Module::Checksums"
Checking the checksum of a distribution
.IP "CPANPLUS::Module::Fake" 12
.IX Item "CPANPLUS::Module::Fake"
Fake module object for internal use
.IP "CPANPLUS::Selfupdate" 12
.IX Item "CPANPLUS::Selfupdate"
Self-updating for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell" 12
.IX Item "CPANPLUS::Shell"
Base class for \s-1CPANPLUS\s0 shells
.IP "CPANPLUS::Shell::Classic" 12
.IX Item "CPANPLUS::Shell::Classic"
\&\s-1CPAN\s0.pm emulation for \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default" 12
.IX Item "CPANPLUS::Shell::Default"
The default \s-1CPANPLUS\s0 shell
.IP "CPANPLUS::Shell::Default::Plugins::CustomSource" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::CustomSource"
Add custom sources to \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::HOWTO" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::HOWTO"
Documentation on how to write your own plugins
.IP "CPANPLUS::Shell::Default::Plugins::Remote" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Remote"
Connect to a remote \s-1CPANPLUS\s0
.IP "CPANPLUS::Shell::Default::Plugins::Source" 12
.IX Item "CPANPLUS::Shell::Default::Plugins::Source"
Read in \s-1CPANPLUS\s0 commands
.IP "Carp" 12
.IX Item "Carp"
Alternative warn and die for modules
.IP "Class::Struct" 12
.IX Item "Class::Struct"
Declare struct-like datatypes as Perl classes
.IP "Compress::Raw::Bzip2" 12
.IX Item "Compress::Raw::Bzip2"
Low-Level Interface to bzip2 compression library
.IP "Compress::Raw::Zlib" 12
.IX Item "Compress::Raw::Zlib"
Low-Level Interface to zlib compression library
.IP "Compress::Zlib" 12
.IX Item "Compress::Zlib"
Interface to zlib compression library
.IP "Config" 12
.IX Item "Config"
Access Perl configuration information
.IP "Config::Perl::V" 12
.IX Item "Config::Perl::V"
Structured data retrieval of perl \-V output
.IP "Cwd" 12
.IX Item "Cwd"
Get pathname of current working directory
.IP "\s-1DB\s0" 12
.IX Item "DB"
Programmatic interface to the Perl debugging \s-1API\s0
.IP "DBM_Filter" 12
.IX Item "DBM_Filter"
Filter \s-1DBM\s0 keys/values
.IP "DBM_Filter::compress" 12
.IX Item "DBM_Filter::compress"
Filter for DBM_Filter
.IP "DBM_Filter::encode" 12
.IX Item "DBM_Filter::encode"
Filter for DBM_Filter
.IP "DBM_Filter::int32" 12
.IX Item "DBM_Filter::int32"
Filter for DBM_Filter
.IP "DBM_Filter::null" 12
.IX Item "DBM_Filter::null"
Filter for DBM_Filter
.IP "DBM_Filter::utf8" 12
.IX Item "DBM_Filter::utf8"
Filter for DBM_Filter
.IP "DB_File" 12
.IX Item "DB_File"
Perl5 access to Berkeley \s-1DB\s0 version 1.x
.IP "Data::Dumper" 12
.IX Item "Data::Dumper"
Stringified perl data structures, suitable for both printing and \f(CW\*(C`eval\*(C'\fR
.IP "Devel::InnerPackage" 12
.IX Item "Devel::InnerPackage"
Find all the inner packages of a package
.IP "Devel::PPPort" 12
.IX Item "Devel::PPPort"
Perl/Pollution/Portability
.IP "Devel::Peek" 12
.IX Item "Devel::Peek"
A data debugging tool for the \s-1XS\s0 programmer
.IP "Devel::SelfStubber" 12
.IX Item "Devel::SelfStubber"
Generate stubs for a SelfLoading module
.IP "Digest" 12
.IX Item "Digest"
Modules that calculate message digests
.IP "Digest::MD5" 12
.IX Item "Digest::MD5"
Perl interface to the \s-1MD5\s0 Algorithm
.IP "Digest::SHA" 12
.IX Item "Digest::SHA"
Perl extension for \s-1SHA\-1/224/256/384/512\s0
.IP "Digest::base" 12
.IX Item "Digest::base"
Digest base class
.IP "Digest::file" 12
.IX Item "Digest::file"
Calculate digests of files
.IP "DirHandle" 12
.IX Item "DirHandle"
Supply object methods for directory handles
.IP "Dumpvalue" 12
.IX Item "Dumpvalue"
Provides screen dump of Perl data.
.IP "DynaLoader" 12
.IX Item "DynaLoader"
Dynamically load C libraries into Perl code
.IP "Encode" 12
.IX Item "Encode"
Character encodings in Perl
.IP "Encode::Alias" 12
.IX Item "Encode::Alias"
Alias definitions to encodings
.IP "Encode::Byte" 12
.IX Item "Encode::Byte"
Single Byte Encodings
.IP "Encode::CJKConstants" 12
.IX Item "Encode::CJKConstants"
Internally used by Encode::??::ISO_2022_*
.IP "Encode::CN" 12
.IX Item "Encode::CN"
China-based Chinese Encodings
.IP "Encode::CN::HZ" 12
.IX Item "Encode::CN::HZ"
Internally used by Encode::CN
.IP "Encode::Config" 12
.IX Item "Encode::Config"
Internally used by Encode
.IP "Encode::EBCDIC" 12
.IX Item "Encode::EBCDIC"
\&\s-1EBCDIC\s0 Encodings
.IP "Encode::Encoder" 12
.IX Item "Encode::Encoder"
Object Oriented Encoder
.IP "Encode::Encoding" 12
.IX Item "Encode::Encoding"
Encode Implementation Base Class
.IP "Encode::GSM0338" 12
.IX Item "Encode::GSM0338"
\&\s-1ESTI GSM 03.38\s0 Encoding
.IP "Encode::Guess" 12
.IX Item "Encode::Guess"
Guesses encoding from data
.IP "Encode::JP" 12
.IX Item "Encode::JP"
Japanese Encodings
.IP "Encode::JP::H2Z" 12
.IX Item "Encode::JP::H2Z"
Internally used by Encode::JP::2022_JP*
.IP "Encode::JP::JIS7" 12
.IX Item "Encode::JP::JIS7"
Internally used by Encode::JP
.IP "Encode::KR" 12
.IX Item "Encode::KR"
Korean Encodings
.IP "Encode::KR::2022_KR" 12
.IX Item "Encode::KR::2022_KR"
Internally used by Encode::KR
.IP "Encode::MIME::Header" 12
.IX Item "Encode::MIME::Header"
\&\s-1MIME \s0'B' and 'Q' header encoding
.IP "Encode::MIME::Name" 12
.IX Item "Encode::MIME::Name"
Internally used by Encode
.IP "Encode::PerlIO" 12
.IX Item "Encode::PerlIO"
A detailed document on Encode and PerlIO
.IP "Encode::Supported" 12
.IX Item "Encode::Supported"
Encodings supported by Encode
.IP "Encode::Symbol" 12
.IX Item "Encode::Symbol"
Symbol Encodings
.IP "Encode::TW" 12
.IX Item "Encode::TW"
Taiwan-based Chinese Encodings
.IP "Encode::Unicode" 12
.IX Item "Encode::Unicode"
Various Unicode Transformation Formats
.IP "Encode::Unicode::UTF7" 12
.IX Item "Encode::Unicode::UTF7"
\&\s-1UTF\-7\s0 encoding
.IP "English" 12
.IX Item "English"
Use nice English (or awk) names for ugly punctuation variables
.IP "Env" 12
.IX Item "Env"
Perl module that imports environment variables as scalars or arrays
.IP "Errno" 12
.IX Item "Errno"
System errno constants
.IP "Exporter" 12
.IX Item "Exporter"
Implements default import method for modules
.IP "Exporter::Heavy" 12
.IX Item "Exporter::Heavy"
Exporter guts
.IP "ExtUtils::CBuilder" 12
.IX Item "ExtUtils::CBuilder"
Compile and link C code for Perl modules
.IP "ExtUtils::CBuilder::Platform::Windows" 12
.IX Item "ExtUtils::CBuilder::Platform::Windows"
Builder class for Windows platforms
.IP "ExtUtils::Command" 12
.IX Item "ExtUtils::Command"
Utilities to replace common \s-1UNIX\s0 commands in Makefiles etc.
.IP "ExtUtils::Command::MM" 12
.IX Item "ExtUtils::Command::MM"
Commands for the \s-1MM\s0's to use in Makefiles
.IP "ExtUtils::Constant" 12
.IX Item "ExtUtils::Constant"
Generate \s-1XS\s0 code to import C header constants
.IP "ExtUtils::Constant::Base" 12
.IX Item "ExtUtils::Constant::Base"
Base class for ExtUtils::Constant objects
.IP "ExtUtils::Constant::Utils" 12
.IX Item "ExtUtils::Constant::Utils"
Helper functions for ExtUtils::Constant
.IP "ExtUtils::Constant::XS" 12
.IX Item "ExtUtils::Constant::XS"
Generate C code for \s-1XS\s0 modules' constants.
.IP "ExtUtils::Embed" 12
.IX Item "ExtUtils::Embed"
Utilities for embedding Perl in C/\*(C+ applications
.IP "ExtUtils::Install" 12
.IX Item "ExtUtils::Install"
Install files from here to there
.IP "ExtUtils::Installed" 12
.IX Item "ExtUtils::Installed"
Inventory management of installed modules
.IP "ExtUtils::Liblist" 12
.IX Item "ExtUtils::Liblist"
Determine libraries to use and how to use them
.IP "ExtUtils::MM" 12
.IX Item "ExtUtils::MM"
\&\s-1OS\s0 adjusted ExtUtils::MakeMaker subclass
.IP "ExtUtils::MM_AIX" 12
.IX Item "ExtUtils::MM_AIX"
\&\s-1AIX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Any" 12
.IX Item "ExtUtils::MM_Any"
Platform-agnostic \s-1MM\s0 methods
.IP "ExtUtils::MM_BeOS" 12
.IX Item "ExtUtils::MM_BeOS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Cygwin" 12
.IX Item "ExtUtils::MM_Cygwin"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_DOS" 12
.IX Item "ExtUtils::MM_DOS"
\&\s-1DOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Darwin" 12
.IX Item "ExtUtils::MM_Darwin"
Special behaviors for \s-1OS X\s0
.IP "ExtUtils::MM_MacOS" 12
.IX Item "ExtUtils::MM_MacOS"
Once produced Makefiles for MacOS Classic
.IP "ExtUtils::MM_NW5" 12
.IX Item "ExtUtils::MM_NW5"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_OS2" 12
.IX Item "ExtUtils::MM_OS2"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_QNX" 12
.IX Item "ExtUtils::MM_QNX"
\&\s-1QNX\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_UWIN" 12
.IX Item "ExtUtils::MM_UWIN"
U/WIN specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Unix" 12
.IX Item "ExtUtils::MM_Unix"
Methods used by ExtUtils::MakeMaker
.IP "ExtUtils::MM_VMS" 12
.IX Item "ExtUtils::MM_VMS"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_VOS" 12
.IX Item "ExtUtils::MM_VOS"
\&\s-1VOS\s0 specific subclass of ExtUtils::MM_Unix
.IP "ExtUtils::MM_Win32" 12
.IX Item "ExtUtils::MM_Win32"
Methods to override UN*X behaviour in ExtUtils::MakeMaker
.IP "ExtUtils::MM_Win95" 12
.IX Item "ExtUtils::MM_Win95"
Method to customize MakeMaker for Win9X
.IP "ExtUtils::MY" 12
.IX Item "ExtUtils::MY"
ExtUtils::MakeMaker subclass for customization
.IP "ExtUtils::MakeMaker" 12
.IX Item "ExtUtils::MakeMaker"
Create a module Makefile
.IP "ExtUtils::MakeMaker::Config" 12
.IX Item "ExtUtils::MakeMaker::Config"
Wrapper around Config.pm
.IP "ExtUtils::MakeMaker::FAQ" 12
.IX Item "ExtUtils::MakeMaker::FAQ"
Frequently Asked Questions About MakeMaker
.IP "ExtUtils::MakeMaker::Tutorial" 12
.IX Item "ExtUtils::MakeMaker::Tutorial"
Writing a module with MakeMaker
.IP "ExtUtils::Manifest" 12
.IX Item "ExtUtils::Manifest"
Utilities to write and check a \s-1MANIFEST\s0 file
.IP "ExtUtils::Mkbootstrap" 12
.IX Item "ExtUtils::Mkbootstrap"
Make a bootstrap file for use by DynaLoader
.IP "ExtUtils::Mksymlists" 12
.IX Item "ExtUtils::Mksymlists"
Write linker options files for dynamic extension
.IP "ExtUtils::Packlist" 12
.IX Item "ExtUtils::Packlist"
Manage .packlist files
.IP "ExtUtils::ParseXS" 12
.IX Item "ExtUtils::ParseXS"
Converts Perl \s-1XS\s0 code into C code
.IP "ExtUtils::ParseXS::Constants" 12
.IX Item "ExtUtils::ParseXS::Constants"
Initialization values for some globals
.IP "ExtUtils::ParseXS::Utilities" 12
.IX Item "ExtUtils::ParseXS::Utilities"
Subroutines used with ExtUtils::ParseXS
.IP "ExtUtils::Typemaps" 12
.IX Item "ExtUtils::Typemaps"
Read/Write/Modify Perl/XS typemap files
.IP "ExtUtils::Typemaps::Cmd" 12
.IX Item "ExtUtils::Typemaps::Cmd"
Quick commands for handling typemaps
.IP "ExtUtils::Typemaps::InputMap" 12
.IX Item "ExtUtils::Typemaps::InputMap"
Entry in the \s-1INPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::OutputMap" 12
.IX Item "ExtUtils::Typemaps::OutputMap"
Entry in the \s-1OUTPUT\s0 section of a typemap
.IP "ExtUtils::Typemaps::Type" 12
.IX Item "ExtUtils::Typemaps::Type"
Entry in the \s-1TYPEMAP\s0 section of a typemap
.IP "ExtUtils::XSSymSet" 12
.IX Item "ExtUtils::XSSymSet"
Keep sets of symbol names palatable to the \s-1VMS\s0 linker
.IP "ExtUtils::testlib" 12
.IX Item "ExtUtils::testlib"
Add blib/* directories to \f(CW@INC\fR
.IP "Fatal" 12
.IX Item "Fatal"
Replace functions with equivalents which succeed or die
.IP "Fcntl" 12
.IX Item "Fcntl"
Load the C Fcntl.h defines
.IP "File::Basename" 12
.IX Item "File::Basename"
Parse file paths into directory, filename and suffix.
.IP "File::CheckTree" 12
.IX Item "File::CheckTree"
Run many filetest checks on a tree
.IP "File::Compare" 12
.IX Item "File::Compare"
Compare files or filehandles
.IP "File::Copy" 12
.IX Item "File::Copy"
Copy files or filehandles
.IP "File::DosGlob" 12
.IX Item "File::DosGlob"
\&\s-1DOS\s0 like globbing and then some
.IP "File::Fetch" 12
.IX Item "File::Fetch"
A generic file fetching mechanism
.IP "File::Find" 12
.IX Item "File::Find"
Traverse a directory tree.
.IP "File::Glob" 12
.IX Item "File::Glob"
Perl extension for \s-1BSD\s0 glob routine
.IP "File::GlobMapper" 12
.IX Item "File::GlobMapper"
Extend File Glob to Allow Input and Output Files
.IP "File::Path" 12
.IX Item "File::Path"
Create or remove directory trees
.IP "File::Spec" 12
.IX Item "File::Spec"
Portably perform operations on file names
.IP "File::Spec::Cygwin" 12
.IX Item "File::Spec::Cygwin"
Methods for Cygwin file specs
.IP "File::Spec::Epoc" 12
.IX Item "File::Spec::Epoc"
Methods for Epoc file specs
.IP "File::Spec::Functions" 12
.IX Item "File::Spec::Functions"
Portably perform operations on file names
.IP "File::Spec::Mac" 12
.IX Item "File::Spec::Mac"
File::Spec for Mac \s-1OS \s0(Classic)
.IP "File::Spec::OS2" 12
.IX Item "File::Spec::OS2"
Methods for \s-1OS/2\s0 file specs
.IP "File::Spec::Unix" 12
.IX Item "File::Spec::Unix"
File::Spec for Unix, base for other File::Spec modules
.IP "File::Spec::VMS" 12
.IX Item "File::Spec::VMS"
Methods for \s-1VMS\s0 file specs
.IP "File::Spec::Win32" 12
.IX Item "File::Spec::Win32"
Methods for Win32 file specs
.IP "File::Temp" 12
.IX Item "File::Temp"
Return name and handle of a temporary file safely
.IP "File::stat" 12
.IX Item "File::stat"
By-name interface to Perl's built-in \fIstat()\fR functions
.IP "FileCache" 12
.IX Item "FileCache"
Keep more files open than the system permits
.IP "FileHandle" 12
.IX Item "FileHandle"
Supply object methods for filehandles
.IP "Filter::Simple" 12
.IX Item "Filter::Simple"
Simplified source filtering
.IP "Filter::Util::Call" 12
.IX Item "Filter::Util::Call"
Perl Source Filter Utility Module
.IP "FindBin" 12
.IX Item "FindBin"
Locate directory of original perl script
.IP "GDBM_File" 12
.IX Item "GDBM_File"
Perl5 access to the gdbm library.
.IP "Getopt::Long" 12
.IX Item "Getopt::Long"
Extended processing of command line options
.IP "Getopt::Std" 12
.IX Item "Getopt::Std"
Process single-character switches with switch clustering
.IP "HTTP::Tiny" 12
.IX Item "HTTP::Tiny"
A small, simple, correct \s-1HTTP/1.1\s0 client
.IP "Hash::Util" 12
.IX Item "Hash::Util"
A selection of general-utility hash subroutines
.IP "Hash::Util::FieldHash" 12
.IX Item "Hash::Util::FieldHash"
Support for Inside-Out Classes
.IP "I18N::Collate" 12
.IX Item "I18N::Collate"
Compare 8\-bit scalar data according to the current locale
.IP "I18N::LangTags" 12
.IX Item "I18N::LangTags"
Functions for dealing with RFC3066\-style language tags
.IP "I18N::LangTags::Detect" 12
.IX Item "I18N::LangTags::Detect"
Detect the user's language preferences
.IP "I18N::LangTags::List" 12
.IX Item "I18N::LangTags::List"
Tags and names for human languages
.IP "I18N::Langinfo" 12
.IX Item "I18N::Langinfo"
Query locale information
.IP "\s-1IO\s0" 12
.IX Item "IO"
Load various \s-1IO\s0 modules
.IP "IO::Compress::Base" 12
.IX Item "IO::Compress::Base"
Base Class for IO::Compress modules
.IP "IO::Compress::Bzip2" 12
.IX Item "IO::Compress::Bzip2"
Write bzip2 files/buffers
.IP "IO::Compress::Deflate" 12
.IX Item "IO::Compress::Deflate"
Write \s-1RFC 1950\s0 files/buffers
.IP "IO::Compress::FAQ" 12
.IX Item "IO::Compress::FAQ"
Frequently Asked Questions about IO::Compress
.IP "IO::Compress::Gzip" 12
.IX Item "IO::Compress::Gzip"
Write \s-1RFC 1952\s0 files/buffers
.IP "IO::Compress::RawDeflate" 12
.IX Item "IO::Compress::RawDeflate"
Write \s-1RFC 1951\s0 files/buffers
.IP "IO::Compress::Zip" 12
.IX Item "IO::Compress::Zip"
Write zip files/buffers
.IP "IO::Dir" 12
.IX Item "IO::Dir"
Supply object methods for directory handles
.IP "IO::File" 12
.IX Item "IO::File"
Supply object methods for filehandles
.IP "IO::Handle" 12
.IX Item "IO::Handle"
Supply object methods for I/O handles
.IP "IO::Pipe" 12
.IX Item "IO::Pipe"
Supply object methods for pipes
.IP "IO::Poll" 12
.IX Item "IO::Poll"
Object interface to system poll call
.IP "IO::Seekable" 12
.IX Item "IO::Seekable"
Supply seek based methods for I/O objects
.IP "IO::Select" 12
.IX Item "IO::Select"
\&\s-1OO\s0 interface to the select system call
.IP "IO::Socket" 12
.IX Item "IO::Socket"
Object interface to socket communications
.IP "IO::Socket::INET" 12
.IX Item "IO::Socket::INET"
Object interface for \s-1AF_INET\s0 domain sockets
.IP "IO::Socket::UNIX" 12
.IX Item "IO::Socket::UNIX"
Object interface for \s-1AF_UNIX\s0 domain sockets
.IP "IO::Uncompress::AnyInflate" 12
.IX Item "IO::Uncompress::AnyInflate"
Uncompress zlib-based (zip, gzip) file/buffer
.IP "IO::Uncompress::AnyUncompress" 12
.IX Item "IO::Uncompress::AnyUncompress"
Uncompress gzip, zip, bzip2 or lzop file/buffer
.IP "IO::Uncompress::Base" 12
.IX Item "IO::Uncompress::Base"
Base Class for IO::Uncompress modules
.IP "IO::Uncompress::Bunzip2" 12
.IX Item "IO::Uncompress::Bunzip2"
Read bzip2 files/buffers
.IP "IO::Uncompress::Gunzip" 12
.IX Item "IO::Uncompress::Gunzip"
Read \s-1RFC 1952\s0 files/buffers
.IP "IO::Uncompress::Inflate" 12
.IX Item "IO::Uncompress::Inflate"
Read \s-1RFC 1950\s0 files/buffers
.IP "IO::Uncompress::RawInflate" 12
.IX Item "IO::Uncompress::RawInflate"
Read \s-1RFC 1951\s0 files/buffers
.IP "IO::Uncompress::Unzip" 12
.IX Item "IO::Uncompress::Unzip"
Read zip files/buffers
.IP "IO::Zlib" 12
.IX Item "IO::Zlib"
\&\s-1IO::\s0 style interface to Compress::Zlib
.IP "IPC::Cmd" 12
.IX Item "IPC::Cmd"
Finding and running system commands made easy
.IP "IPC::Msg" 12
.IX Item "IPC::Msg"
SysV Msg \s-1IPC\s0 object class
.IP "IPC::Open2" 12
.IX Item "IPC::Open2"
Open a process for both reading and writing using \fIopen2()\fR
.IP "IPC::Open3" 12
.IX Item "IPC::Open3"
Open a process for reading, writing, and error handling using \fIopen3()\fR
.IP "IPC::Semaphore" 12
.IX Item "IPC::Semaphore"
SysV Semaphore \s-1IPC\s0 object class
.IP "IPC::SharedMem" 12
.IX Item "IPC::SharedMem"
SysV Shared Memory \s-1IPC\s0 object class
.IP "IPC::SysV" 12
.IX Item "IPC::SysV"
System V \s-1IPC\s0 constants and system calls
.IP "\s-1JSON::PP\s0" 12
.IX Item "JSON::PP"
\&\s-1JSON::XS\s0 compatible pure-Perl module.
.IP "JSON::PP::Boolean" 12
.IX Item "JSON::PP::Boolean"
Dummy module providing JSON::PP::Boolean
.IP "List::Util" 12
.IX Item "List::Util"
A selection of general-utility list subroutines
.IP "List::Util::XS" 12
.IX Item "List::Util::XS"
Indicate if List::Util was compiled with a C compiler
.IP "Locale::Codes" 12
.IX Item "Locale::Codes"
A distribution of modules to handle locale codes
.IP "Locale::Codes::API" 12
.IX Item "Locale::Codes::API"
A description of the callable function in each module
.IP "Locale::Codes::Changes" 12
.IX Item "Locale::Codes::Changes"
Details changes to Locale::Codes
.IP "Locale::Codes::Constants" 12
.IX Item "Locale::Codes::Constants"
Constants for Locale codes
.IP "Locale::Codes::Country" 12
.IX Item "Locale::Codes::Country"
Standard codes for country identification
.IP "Locale::Codes::Country_Codes" 12
.IX Item "Locale::Codes::Country_Codes"
Country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Country_Retired" 12
.IX Item "Locale::Codes::Country_Retired"
Retired country codes for the Locale::Codes::Country module
.IP "Locale::Codes::Currency" 12
.IX Item "Locale::Codes::Currency"
Standard codes for currency identification
.IP "Locale::Codes::Currency_Codes" 12
.IX Item "Locale::Codes::Currency_Codes"
Currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::Currency_Retired" 12
.IX Item "Locale::Codes::Currency_Retired"
Retired currency codes for the Locale::Codes::Currency module
.IP "Locale::Codes::LangExt" 12
.IX Item "Locale::Codes::LangExt"
Standard codes for language extension identification
.IP "Locale::Codes::LangExt_Codes" 12
.IX Item "Locale::Codes::LangExt_Codes"
Langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangExt_Retired" 12
.IX Item "Locale::Codes::LangExt_Retired"
Retired langext codes for the Locale::Codes::LangExt module
.IP "Locale::Codes::LangFam" 12
.IX Item "Locale::Codes::LangFam"
Standard codes for language extension identification
.IP "Locale::Codes::LangFam_Codes" 12
.IX Item "Locale::Codes::LangFam_Codes"
Langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangFam_Retired" 12
.IX Item "Locale::Codes::LangFam_Retired"
Retired langfam codes for the Locale::Codes::LangFam module
.IP "Locale::Codes::LangVar" 12
.IX Item "Locale::Codes::LangVar"
Standard codes for language variation identification
.IP "Locale::Codes::LangVar_Codes" 12
.IX Item "Locale::Codes::LangVar_Codes"
Langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::LangVar_Retired" 12
.IX Item "Locale::Codes::LangVar_Retired"
Retired langvar codes for the Locale::Codes::LangVar module
.IP "Locale::Codes::Language" 12
.IX Item "Locale::Codes::Language"
Standard codes for language identification
.IP "Locale::Codes::Language_Codes" 12
.IX Item "Locale::Codes::Language_Codes"
Language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Language_Retired" 12
.IX Item "Locale::Codes::Language_Retired"
Retired language codes for the Locale::Codes::Language module
.IP "Locale::Codes::Script" 12
.IX Item "Locale::Codes::Script"
Standard codes for script identification
.IP "Locale::Codes::Script_Codes" 12
.IX Item "Locale::Codes::Script_Codes"
Script codes for the Locale::Codes::Script module
.IP "Locale::Codes::Script_Retired" 12
.IX Item "Locale::Codes::Script_Retired"
Retired script codes for the Locale::Codes::Script module
.IP "Locale::Country" 12
.IX Item "Locale::Country"
Standard codes for country identification
.IP "Locale::Currency" 12
.IX Item "Locale::Currency"
Standard codes for currency identification
.IP "Locale::Language" 12
.IX Item "Locale::Language"
Standard codes for language identification
.IP "Locale::Maketext" 12
.IX Item "Locale::Maketext"
Framework for localization
.IP "Locale::Maketext::Cookbook" 12
.IX Item "Locale::Maketext::Cookbook"
Recipes for using Locale::Maketext
.IP "Locale::Maketext::Guts" 12
.IX Item "Locale::Maketext::Guts"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::GutsLoader" 12
.IX Item "Locale::Maketext::GutsLoader"
Deprecated module to load Locale::Maketext utf8 code
.IP "Locale::Maketext::Simple" 12
.IX Item "Locale::Maketext::Simple"
Simple interface to Locale::Maketext::Lexicon
.IP "Locale::Maketext::TPJ13" 12
.IX Item "Locale::Maketext::TPJ13"
Article about software localization
.IP "Locale::Script" 12
.IX Item "Locale::Script"
Standard codes for script identification
.IP "Log::Message" 12
.IX Item "Log::Message"
A generic message storing mechanism;
.IP "Log::Message::Config" 12
.IX Item "Log::Message::Config"
Configuration options for Log::Message
.IP "Log::Message::Handlers" 12
.IX Item "Log::Message::Handlers"
Message handlers for Log::Message
.IP "Log::Message::Item" 12
.IX Item "Log::Message::Item"
Message objects for Log::Message
.IP "Log::Message::Simple" 12
.IX Item "Log::Message::Simple"
Simplified interface to Log::Message
.IP "MIME::Base64" 12
.IX Item "MIME::Base64"
Encoding and decoding of base64 strings
.IP "MIME::QuotedPrint" 12
.IX Item "MIME::QuotedPrint"
Encoding and decoding of quoted-printable strings
.IP "Math::BigFloat" 12
.IX Item "Math::BigFloat"
Arbitrary size floating point math package
.IP "Math::BigInt" 12
.IX Item "Math::BigInt"
Arbitrary size integer/float math package
.IP "Math::BigInt::Calc" 12
.IX Item "Math::BigInt::Calc"
Pure Perl module to support Math::BigInt
.IP "Math::BigInt::CalcEmu" 12
.IX Item "Math::BigInt::CalcEmu"
Emulate low-level math with BigInt code
.IP "Math::BigInt::FastCalc" 12
.IX Item "Math::BigInt::FastCalc"
Math::BigInt::Calc with some \s-1XS\s0 for more speed
.IP "Math::BigRat" 12
.IX Item "Math::BigRat"
Arbitrary big rational numbers
.IP "Math::Complex" 12
.IX Item "Math::Complex"
Complex numbers and associated mathematical functions
.IP "Math::Trig" 12
.IX Item "Math::Trig"
Trigonometric functions
.IP "Memoize" 12
.IX Item "Memoize"
Make functions faster by trading space for time
.IP "Memoize::AnyDBM_File" 12
.IX Item "Memoize::AnyDBM_File"
Glue to provide \s-1EXISTS\s0 for AnyDBM_File for Storable use
.IP "Memoize::Expire" 12
.IX Item "Memoize::Expire"
Plug-in module for automatic expiration of memoized values
.IP "Memoize::ExpireFile" 12
.IX Item "Memoize::ExpireFile"
Test for Memoize expiration semantics
.IP "Memoize::ExpireTest" 12
.IX Item "Memoize::ExpireTest"
Test for Memoize expiration semantics
.IP "Memoize::NDBM_File" 12
.IX Item "Memoize::NDBM_File"
Glue to provide \s-1EXISTS\s0 for NDBM_File for Storable use
.IP "Memoize::SDBM_File" 12
.IX Item "Memoize::SDBM_File"
Glue to provide \s-1EXISTS\s0 for SDBM_File for Storable use
.IP "Memoize::Storable" 12
.IX Item "Memoize::Storable"
Store Memoized data in Storable database
.IP "Module::Build" 12
.IX Item "Module::Build"
Build and install Perl modules
.IP "Module::Build::API" 12
.IX Item "Module::Build::API"
\&\s-1API\s0 Reference for Module Authors
.IP "Module::Build::Authoring" 12
.IX Item "Module::Build::Authoring"
Authoring Module::Build modules
.IP "Module::Build::Base" 12
.IX Item "Module::Build::Base"
Default methods for Module::Build
.IP "Module::Build::Bundling" 12
.IX Item "Module::Build::Bundling"
How to bundle Module::Build with a distribution
.IP "Module::Build::Compat" 12
.IX Item "Module::Build::Compat"
Compatibility with ExtUtils::MakeMaker
.IP "Module::Build::ConfigData" 12
.IX Item "Module::Build::ConfigData"
Configuration for Module::Build
.IP "Module::Build::Cookbook" 12
.IX Item "Module::Build::Cookbook"
Examples of Module::Build Usage
.IP "Module::Build::ModuleInfo" 12
.IX Item "Module::Build::ModuleInfo"
\&\s-1DEPRECATED\s0
.IP "Module::Build::Notes" 12
.IX Item "Module::Build::Notes"
Create persistent distribution configuration modules
.IP "Module::Build::PPMMaker" 12
.IX Item "Module::Build::PPMMaker"
Perl Package Manager file creation
.IP "Module::Build::Platform::Amiga" 12
.IX Item "Module::Build::Platform::Amiga"
Builder class for Amiga platforms
.IP "Module::Build::Platform::Default" 12
.IX Item "Module::Build::Platform::Default"
Stub class for unknown platforms
.IP "Module::Build::Platform::EBCDIC" 12
.IX Item "Module::Build::Platform::EBCDIC"
Builder class for \s-1EBCDIC\s0 platforms
.IP "Module::Build::Platform::MPEiX" 12
.IX Item "Module::Build::Platform::MPEiX"
Builder class for MPEiX platforms
.IP "Module::Build::Platform::MacOS" 12
.IX Item "Module::Build::Platform::MacOS"
Builder class for MacOS platforms
.IP "Module::Build::Platform::RiscOS" 12
.IX Item "Module::Build::Platform::RiscOS"
Builder class for RiscOS platforms
.IP "Module::Build::Platform::Unix" 12
.IX Item "Module::Build::Platform::Unix"
Builder class for Unix platforms
.IP "Module::Build::Platform::VMS" 12
.IX Item "Module::Build::Platform::VMS"
Builder class for \s-1VMS\s0 platforms
.IP "Module::Build::Platform::VOS" 12
.IX Item "Module::Build::Platform::VOS"
Builder class for \s-1VOS\s0 platforms
.IP "Module::Build::Platform::Windows" 12
.IX Item "Module::Build::Platform::Windows"
Builder class for Windows platforms
.IP "Module::Build::Platform::aix" 12
.IX Item "Module::Build::Platform::aix"
Builder class for \s-1AIX\s0 platform
.IP "Module::Build::Platform::cygwin" 12
.IX Item "Module::Build::Platform::cygwin"
Builder class for Cygwin platform
.IP "Module::Build::Platform::darwin" 12
.IX Item "Module::Build::Platform::darwin"
Builder class for Mac \s-1OS X\s0 platform
.IP "Module::Build::Platform::os2" 12
.IX Item "Module::Build::Platform::os2"
Builder class for \s-1OS/2\s0 platform
.IP "Module::Build::Version" 12
.IX Item "Module::Build::Version"
\&\s-1DEPRECATED\s0
.IP "Module::Build::YAML" 12
.IX Item "Module::Build::YAML"
\&\s-1DEPRECATED\s0
.IP "Module::CoreList" 12
.IX Item "Module::CoreList"
What modules shipped with versions of perl
.IP "Module::CoreList::Utils" 12
.IX Item "Module::CoreList::Utils"
What utilities shipped with versions of perl
.IP "Module::Load" 12
.IX Item "Module::Load"
Runtime require of both modules and files
.IP "Module::Load::Conditional" 12
.IX Item "Module::Load::Conditional"
Looking up module information / loading at runtime
.IP "Module::Loaded" 12
.IX Item "Module::Loaded"
Mark modules as loaded or unloaded
.IP "Module::Metadata" 12
.IX Item "Module::Metadata"
Gather package and \s-1POD\s0 information from perl module files
.IP "Module::Pluggable" 12
.IX Item "Module::Pluggable"
Automatically give your module the ability to have plugins
.IP "Module::Pluggable::Object" 12
.IX Item "Module::Pluggable::Object"
Automatically give your module the ability to have plugins
.IP "NDBM_File" 12
.IX Item "NDBM_File"
Tied access to ndbm files
.IP "\s-1NEXT\s0" 12
.IX Item "NEXT"
Provide a pseudo-class \s-1NEXT \s0(et al) that allows method redispatch
.IP "Net::Cmd" 12
.IX Item "Net::Cmd"
Network Command class (as used by \s-1FTP, SMTP\s0 etc)
.IP "Net::Config" 12
.IX Item "Net::Config"
Local configuration data for libnet
.IP "Net::Domain" 12
.IX Item "Net::Domain"
Attempt to evaluate the current host's internet name and domain
.IP "Net::FTP" 12
.IX Item "Net::FTP"
\&\s-1FTP\s0 Client class
.IP "Net::NNTP" 12
.IX Item "Net::NNTP"
\&\s-1NNTP\s0 Client class
.IP "Net::Netrc" 12
.IX Item "Net::Netrc"
\&\s-1OO\s0 interface to users netrc file
.IP "Net::POP3" 12
.IX Item "Net::POP3"
Post Office Protocol 3 Client class (\s-1RFC1939\s0)
.IP "Net::Ping" 12
.IX Item "Net::Ping"
Check a remote host for reachability
.IP "Net::SMTP" 12
.IX Item "Net::SMTP"
Simple Mail Transfer Protocol Client
.IP "Net::Time" 12
.IX Item "Net::Time"
Time and daytime network client interface
.IP "Net::hostent" 12
.IX Item "Net::hostent"
By-name interface to Perl's built-in gethost*() functions
.IP "Net::libnetFAQ" 12
.IX Item "Net::libnetFAQ"
Libnet Frequently Asked Questions
.IP "Net::netent" 12
.IX Item "Net::netent"
By-name interface to Perl's built-in getnet*() functions
.IP "Net::protoent" 12
.IX Item "Net::protoent"
By-name interface to Perl's built-in getproto*() functions
.IP "Net::servent" 12
.IX Item "Net::servent"
By-name interface to Perl's built-in getserv*() functions
.IP "O" 12
.IX Item "O"
Generic interface to Perl Compiler backends
.IP "ODBM_File" 12
.IX Item "ODBM_File"
Tied access to odbm files
.IP "Object::Accessor" 12
.IX Item "Object::Accessor"
Interface to create per object accessors
.IP "Opcode" 12
.IX Item "Opcode"
Disable named opcodes when compiling perl code
.IP "\s-1POSIX\s0" 12
.IX Item "POSIX"
Perl interface to \s-1IEEE\s0 Std 1003.1
.IP "Package::Constants" 12
.IX Item "Package::Constants"
List all constants declared in a package
.IP "Params::Check" 12
.IX Item "Params::Check"
A generic input parsing/checking mechanism.
.IP "Parse::CPAN::Meta" 12
.IX Item "Parse::CPAN::Meta"
Parse \s-1META\s0.yml and \s-1META\s0.json \s-1CPAN\s0 metadata files
.IP "Perl::OSType" 12
.IX Item "Perl::OSType"
Map Perl operating system names to generic types
.IP "PerlIO" 12
.IX Item "PerlIO"
On demand loader for PerlIO layers and root of PerlIO::* name space
.IP "PerlIO::encoding" 12
.IX Item "PerlIO::encoding"
Encoding layer
.IP "PerlIO::mmap" 12
.IX Item "PerlIO::mmap"
Memory mapped \s-1IO\s0
.IP "PerlIO::scalar" 12
.IX Item "PerlIO::scalar"
In-memory \s-1IO,\s0 scalar \s-1IO\s0
.IP "PerlIO::via" 12
.IX Item "PerlIO::via"
Helper class for PerlIO layers implemented in perl
.IP "PerlIO::via::QuotedPrint" 12
.IX Item "PerlIO::via::QuotedPrint"
PerlIO layer for quoted-printable strings
.IP "Pod::Escapes" 12
.IX Item "Pod::Escapes"
For resolving Pod E<...> sequences
.IP "Pod::Functions" 12
.IX Item "Pod::Functions"
Group Perl's functions a la perlfunc.pod
.IP "Pod::Html" 12
.IX Item "Pod::Html"
Module to convert pod files to \s-1HTML\s0
.IP "Pod::LaTeX" 12
.IX Item "Pod::LaTeX"
Convert Pod data to formatted Latex
.IP "Pod::Man" 12
.IX Item "Pod::Man"
Convert \s-1POD\s0 data to formatted *roff input
.IP "Pod::ParseLink" 12
.IX Item "Pod::ParseLink"
Parse an L<> formatting code in \s-1POD\s0 text
.IP "Pod::Perldoc" 12
.IX Item "Pod::Perldoc"
Look up Perl documentation in Pod format.
.IP "Pod::Perldoc::BaseTo" 12
.IX Item "Pod::Perldoc::BaseTo"
Base for Pod::Perldoc formatters
.IP "Pod::Perldoc::GetOptsOO" 12
.IX Item "Pod::Perldoc::GetOptsOO"
Customized option parser for Pod::Perldoc
.IP "Pod::Perldoc::ToANSI" 12
.IX Item "Pod::Perldoc::ToANSI"
Render Pod with \s-1ANSI\s0 color escapes
.IP "Pod::Perldoc::ToChecker" 12
.IX Item "Pod::Perldoc::ToChecker"
Let Perldoc check Pod for errors
.IP "Pod::Perldoc::ToMan" 12
.IX Item "Pod::Perldoc::ToMan"
Let Perldoc render Pod as man pages
.IP "Pod::Perldoc::ToNroff" 12
.IX Item "Pod::Perldoc::ToNroff"
Let Perldoc convert Pod to nroff
.IP "Pod::Perldoc::ToPod" 12
.IX Item "Pod::Perldoc::ToPod"
Let Perldoc render Pod as ... Pod!
.IP "Pod::Perldoc::ToRtf" 12
.IX Item "Pod::Perldoc::ToRtf"
Let Perldoc render Pod as \s-1RTF\s0
.IP "Pod::Perldoc::ToTerm" 12
.IX Item "Pod::Perldoc::ToTerm"
Render Pod with terminal escapes
.IP "Pod::Perldoc::ToText" 12
.IX Item "Pod::Perldoc::ToText"
Let Perldoc render Pod as plaintext
.IP "Pod::Perldoc::ToTk" 12
.IX Item "Pod::Perldoc::ToTk"
Let Perldoc use Tk::Pod to render Pod
.IP "Pod::Perldoc::ToXml" 12
.IX Item "Pod::Perldoc::ToXml"
Let Perldoc render Pod as \s-1XML\s0
.IP "Pod::Simple" 12
.IX Item "Pod::Simple"
Framework for parsing Pod
.IP "Pod::Simple::Checker" 12
.IX Item "Pod::Simple::Checker"
Check the Pod syntax of a document
.IP "Pod::Simple::Debug" 12
.IX Item "Pod::Simple::Debug"
Put Pod::Simple into trace/debug mode
.IP "Pod::Simple::DumpAsText" 12
.IX Item "Pod::Simple::DumpAsText"
Dump Pod-parsing events as text
.IP "Pod::Simple::DumpAsXML" 12
.IX Item "Pod::Simple::DumpAsXML"
Turn Pod into \s-1XML\s0
.IP "Pod::Simple::HTML" 12
.IX Item "Pod::Simple::HTML"
Convert Pod to \s-1HTML\s0
.IP "Pod::Simple::HTMLBatch" 12
.IX Item "Pod::Simple::HTMLBatch"
Convert several Pod files to several \s-1HTML\s0 files
.IP "Pod::Simple::LinkSection" 12
.IX Item "Pod::Simple::LinkSection"
Represent \*(L"section\*(R" attributes of L codes
.IP "Pod::Simple::Methody" 12
.IX Item "Pod::Simple::Methody"
Turn Pod::Simple events into method calls
.IP "Pod::Simple::PullParser" 12
.IX Item "Pod::Simple::PullParser"
A pull-parser interface to parsing Pod
.IP "Pod::Simple::PullParserEndToken" 12
.IX Item "Pod::Simple::PullParserEndToken"
End-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserStartToken" 12
.IX Item "Pod::Simple::PullParserStartToken"
Start-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserTextToken" 12
.IX Item "Pod::Simple::PullParserTextToken"
Text-tokens from Pod::Simple::PullParser
.IP "Pod::Simple::PullParserToken" 12
.IX Item "Pod::Simple::PullParserToken"
Tokens from Pod::Simple::PullParser
.IP "Pod::Simple::RTF" 12
.IX Item "Pod::Simple::RTF"
Format Pod as \s-1RTF\s0
.IP "Pod::Simple::Search" 12
.IX Item "Pod::Simple::Search"
Find \s-1POD\s0 documents in directory trees
.IP "Pod::Simple::SimpleTree" 12
.IX Item "Pod::Simple::SimpleTree"
Parse Pod into a simple parse tree
.IP "Pod::Simple::Subclassing" 12
.IX Item "Pod::Simple::Subclassing"
Write a formatter as a Pod::Simple subclass
.IP "Pod::Simple::Text" 12
.IX Item "Pod::Simple::Text"
Format Pod as plaintext
.IP "Pod::Simple::TextContent" 12
.IX Item "Pod::Simple::TextContent"
Get the text content of Pod
.IP "Pod::Simple::XHTML" 12
.IX Item "Pod::Simple::XHTML"
Format Pod as validating \s-1XHTML\s0
.IP "Pod::Simple::XMLOutStream" 12
.IX Item "Pod::Simple::XMLOutStream"
Turn Pod into \s-1XML\s0
.IP "Pod::Text" 12
.IX Item "Pod::Text"
Convert \s-1POD\s0 data to formatted \s-1ASCII\s0 text
.IP "Pod::Text::Color" 12
.IX Item "Pod::Text::Color"
Convert \s-1POD\s0 data to formatted color \s-1ASCII\s0 text
.IP "Pod::Text::Termcap" 12
.IX Item "Pod::Text::Termcap"
Convert \s-1POD\s0 data to \s-1ASCII\s0 text with format escapes
.IP "SDBM_File" 12
.IX Item "SDBM_File"
Tied access to sdbm files
.IP "Safe" 12
.IX Item "Safe"
Compile and execute code in restricted compartments
.IP "Scalar::Util" 12
.IX Item "Scalar::Util"
A selection of general-utility scalar subroutines
.IP "Search::Dict" 12
.IX Item "Search::Dict"
Look \- search for key in dictionary file
.IP "SelectSaver" 12
.IX Item "SelectSaver"
Save and restore selected file handle
.IP "SelfLoader" 12
.IX Item "SelfLoader"
Load functions only on demand
.IP "Storable" 12
.IX Item "Storable"
Persistence for Perl data structures
.IP "Symbol" 12
.IX Item "Symbol"
Manipulate Perl symbols and their names
.IP "Sys::Hostname" 12
.IX Item "Sys::Hostname"
Try every conceivable way to get hostname
.IP "Sys::Syslog" 12
.IX Item "Sys::Syslog"
Perl interface to the \s-1UNIX\s0 \fIsyslog\fR\|(3) calls
.IP "Sys::Syslog::Win32" 12
.IX Item "Sys::Syslog::Win32"
Win32 support for Sys::Syslog
.IP "TAP::Base" 12
.IX Item "TAP::Base"
Base class that provides common functionality to TAP::Parser
.IP "TAP::Formatter::Base" 12
.IX Item "TAP::Formatter::Base"
Base class for harness output delegates
.IP "TAP::Formatter::Color" 12
.IX Item "TAP::Formatter::Color"
Run Perl test scripts with color
.IP "TAP::Formatter::Console" 12
.IX Item "TAP::Formatter::Console"
Harness output delegate for default console output
.IP "TAP::Formatter::Console::ParallelSession" 12
.IX Item "TAP::Formatter::Console::ParallelSession"
Harness output delegate for parallel console output
.IP "TAP::Formatter::Console::Session" 12
.IX Item "TAP::Formatter::Console::Session"
Harness output delegate for default console output
.IP "TAP::Formatter::File" 12
.IX Item "TAP::Formatter::File"
Harness output delegate for file output
.IP "TAP::Formatter::File::Session" 12
.IX Item "TAP::Formatter::File::Session"
Harness output delegate for file output
.IP "TAP::Formatter::Session" 12
.IX Item "TAP::Formatter::Session"
Abstract base class for harness output delegate
.IP "TAP::Harness" 12
.IX Item "TAP::Harness"
Run test scripts with statistics
.IP "TAP::Object" 12
.IX Item "TAP::Object"
Base class that provides common functionality to all \f(CW\*(C`TAP::*\*(C'\fR modules
.IP "TAP::Parser" 12
.IX Item "TAP::Parser"
Parse \s-1TAP\s0 output
.IP "TAP::Parser::Aggregator" 12
.IX Item "TAP::Parser::Aggregator"
Aggregate TAP::Parser results
.IP "TAP::Parser::Grammar" 12
.IX Item "TAP::Parser::Grammar"
A grammar for the Test Anything Protocol.
.IP "TAP::Parser::Iterator" 12
.IX Item "TAP::Parser::Iterator"
Base class for \s-1TAP\s0 source iterators
.IP "TAP::Parser::Iterator::Array" 12
.IX Item "TAP::Parser::Iterator::Array"
Iterator for array-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Process" 12
.IX Item "TAP::Parser::Iterator::Process"
Iterator for process-based \s-1TAP\s0 sources
.IP "TAP::Parser::Iterator::Stream" 12
.IX Item "TAP::Parser::Iterator::Stream"
Iterator for filehandle-based \s-1TAP\s0 sources
.IP "TAP::Parser::IteratorFactory" 12
.IX Item "TAP::Parser::IteratorFactory"
Figures out which SourceHandler objects to use for a given Source
.IP "TAP::Parser::Multiplexer" 12
.IX Item "TAP::Parser::Multiplexer"
Multiplex multiple TAP::Parsers
.IP "TAP::Parser::Result" 12
.IX Item "TAP::Parser::Result"
Base class for TAP::Parser output objects
.IP "TAP::Parser::Result::Bailout" 12
.IX Item "TAP::Parser::Result::Bailout"
Bailout result token.
.IP "TAP::Parser::Result::Comment" 12
.IX Item "TAP::Parser::Result::Comment"
Comment result token.
.IP "TAP::Parser::Result::Plan" 12
.IX Item "TAP::Parser::Result::Plan"
Plan result token.
.IP "TAP::Parser::Result::Pragma" 12
.IX Item "TAP::Parser::Result::Pragma"
\&\s-1TAP\s0 pragma token.
.IP "TAP::Parser::Result::Test" 12
.IX Item "TAP::Parser::Result::Test"
Test result token.
.IP "TAP::Parser::Result::Unknown" 12
.IX Item "TAP::Parser::Result::Unknown"
Unknown result token.
.IP "TAP::Parser::Result::Version" 12
.IX Item "TAP::Parser::Result::Version"
\&\s-1TAP\s0 syntax version token.
.IP "TAP::Parser::Result::YAML" 12
.IX Item "TAP::Parser::Result::YAML"
\&\s-1YAML\s0 result token.
.IP "TAP::Parser::ResultFactory" 12
.IX Item "TAP::Parser::ResultFactory"
Factory for creating TAP::Parser output objects
.IP "TAP::Parser::Scheduler" 12
.IX Item "TAP::Parser::Scheduler"
Schedule tests during parallel testing
.IP "TAP::Parser::Scheduler::Job" 12
.IX Item "TAP::Parser::Scheduler::Job"
A single testing job.
.IP "TAP::Parser::Scheduler::Spinner" 12
.IX Item "TAP::Parser::Scheduler::Spinner"
A no-op job.
.IP "TAP::Parser::Source" 12
.IX Item "TAP::Parser::Source"
A \s-1TAP\s0 source & meta data about it
.IP "TAP::Parser::SourceHandler" 12
.IX Item "TAP::Parser::SourceHandler"
Base class for different \s-1TAP\s0 source handlers
.IP "TAP::Parser::SourceHandler::Executable" 12
.IX Item "TAP::Parser::SourceHandler::Executable"
Stream output from an executable \s-1TAP\s0 source
.IP "TAP::Parser::SourceHandler::File" 12
.IX Item "TAP::Parser::SourceHandler::File"
Stream \s-1TAP\s0 from a text file.
.IP "TAP::Parser::SourceHandler::Handle" 12
.IX Item "TAP::Parser::SourceHandler::Handle"
Stream \s-1TAP\s0 from an IO::Handle or a \s-1GLOB.\s0
.IP "TAP::Parser::SourceHandler::Perl" 12
.IX Item "TAP::Parser::SourceHandler::Perl"
Stream \s-1TAP\s0 from a Perl executable
.IP "TAP::Parser::SourceHandler::RawTAP" 12
.IX Item "TAP::Parser::SourceHandler::RawTAP"
Stream output from raw \s-1TAP\s0 in a scalar/array ref.
.IP "TAP::Parser::Utils" 12
.IX Item "TAP::Parser::Utils"
Internal TAP::Parser utilities
.IP "TAP::Parser::YAMLish::Reader" 12
.IX Item "TAP::Parser::YAMLish::Reader"
Read YAMLish data from iterator
.IP "TAP::Parser::YAMLish::Writer" 12
.IX Item "TAP::Parser::YAMLish::Writer"
Write YAMLish data
.IP "Term::ANSIColor" 12
.IX Item "Term::ANSIColor"
Color screen output using \s-1ANSI\s0 escape sequences
.IP "Term::Cap" 12
.IX Item "Term::Cap"
Perl termcap interface
.IP "Term::Complete" 12
.IX Item "Term::Complete"
Perl word completion module
.IP "Term::ReadLine" 12
.IX Item "Term::ReadLine"
Perl interface to various \f(CW\*(C`readline\*(C'\fR packages.
.IP "Term::UI" 12
.IX Item "Term::UI"
Term::ReadLine \s-1UI\s0 made easy
.IP "Term::UI::History" 12
.IX Item "Term::UI::History"
History function
.IP "Test" 12
.IX Item "Test"
Provides a simple framework for writing test scripts
.IP "Test::Builder" 12
.IX Item "Test::Builder"
Backend for building test libraries
.IP "Test::Builder::Module" 12
.IX Item "Test::Builder::Module"
Base class for test modules
.IP "Test::Builder::Tester" 12
.IX Item "Test::Builder::Tester"
Test testsuites that have been built with
.IP "Test::Builder::Tester::Color" 12
.IX Item "Test::Builder::Tester::Color"
Turn on colour in Test::Builder::Tester
.IP "Test::Harness" 12
.IX Item "Test::Harness"
Run Perl standard test scripts with statistics
.IP "Test::More" 12
.IX Item "Test::More"
Yet another framework for writing test scripts
.IP "Test::Simple" 12
.IX Item "Test::Simple"
Basic utilities for writing tests.
.IP "Test::Tutorial" 12
.IX Item "Test::Tutorial"
A tutorial about writing really basic tests
.IP "Text::Abbrev" 12
.IX Item "Text::Abbrev"
Abbrev \- create an abbreviation table from a list
.IP "Text::Balanced" 12
.IX Item "Text::Balanced"
Extract delimited text sequences from strings.
.IP "Text::ParseWords" 12
.IX Item "Text::ParseWords"
Parse text into an array of tokens or array of arrays
.IP "Text::Soundex" 12
.IX Item "Text::Soundex"
Implementation of the soundex algorithm.
.IP "Text::Tabs" 12
.IX Item "Text::Tabs"
Expand and unexpand tabs like unix \fIexpand\fR\|(1) and \fIunexpand\fR\|(1)
.IP "Text::Wrap" 12
.IX Item "Text::Wrap"
Line wrapping to form simple paragraphs
.IP "Thread" 12
.IX Item "Thread"
Manipulate threads in Perl (for old code only)
.IP "Thread::Queue" 12
.IX Item "Thread::Queue"
Thread-safe queues
.IP "Thread::Semaphore" 12
.IX Item "Thread::Semaphore"
Thread-safe semaphores
.IP "Tie::Array" 12
.IX Item "Tie::Array"
Base class for tied arrays
.IP "Tie::File" 12
.IX Item "Tie::File"
Access the lines of a disk file via a Perl array
.IP "Tie::Handle" 12
.IX Item "Tie::Handle"
Base class definitions for tied handles
.IP "Tie::Hash" 12
.IX Item "Tie::Hash"
Base class definitions for tied hashes
.IP "Tie::Hash::NamedCapture" 12
.IX Item "Tie::Hash::NamedCapture"
Named regexp capture buffers
.IP "Tie::Memoize" 12
.IX Item "Tie::Memoize"
Add data to hash when needed
.IP "Tie::RefHash" 12
.IX Item "Tie::RefHash"
Use references as hash keys
.IP "Tie::Scalar" 12
.IX Item "Tie::Scalar"
Base class definitions for tied scalars
.IP "Tie::StdHandle" 12
.IX Item "Tie::StdHandle"
Base class definitions for tied handles
.IP "Tie::SubstrHash" 12
.IX Item "Tie::SubstrHash"
Fixed-table-size, fixed-key-length hashing
.IP "Time::HiRes" 12
.IX Item "Time::HiRes"
High resolution alarm, sleep, gettimeofday, interval timers
.IP "Time::Local" 12
.IX Item "Time::Local"
Efficiently compute time from local and \s-1GMT\s0 time
.IP "Time::Piece" 12
.IX Item "Time::Piece"
Object Oriented time objects
.IP "Time::Seconds" 12
.IX Item "Time::Seconds"
A simple \s-1API\s0 to convert seconds to other date values
.IP "Time::gmtime" 12
.IX Item "Time::gmtime"
By-name interface to Perl's built-in \fIgmtime()\fR function
.IP "Time::localtime" 12
.IX Item "Time::localtime"
By-name interface to Perl's built-in \fIlocaltime()\fR function
.IP "Time::tm" 12
.IX Item "Time::tm"
Internal object used by Time::gmtime and Time::localtime
.IP "\s-1UNIVERSAL\s0" 12
.IX Item "UNIVERSAL"
Base class for \s-1ALL\s0 classes (blessed references)
.IP "Unicode::Collate" 12
.IX Item "Unicode::Collate"
Unicode Collation Algorithm
.IP "Unicode::Collate::CJK::Big5" 12
.IX Item "Unicode::Collate::CJK::Big5"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::GB2312" 12
.IX Item "Unicode::Collate::CJK::GB2312"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::JISX0208" 12
.IX Item "Unicode::Collate::CJK::JISX0208"
Weighting \s-1JIS KANJI\s0 for Unicode::Collate
.IP "Unicode::Collate::CJK::Korean" 12
.IX Item "Unicode::Collate::CJK::Korean"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Pinyin" 12
.IX Item "Unicode::Collate::CJK::Pinyin"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Stroke" 12
.IX Item "Unicode::Collate::CJK::Stroke"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::CJK::Zhuyin" 12
.IX Item "Unicode::Collate::CJK::Zhuyin"
Weighting \s-1CJK\s0 Unified Ideographs
.IP "Unicode::Collate::Locale" 12
.IX Item "Unicode::Collate::Locale"
Linguistic tailoring for \s-1DUCET\s0 via Unicode::Collate
.IP "Unicode::Normalize" 12
.IX Item "Unicode::Normalize"
Unicode Normalization Forms
.IP "Unicode::UCD" 12
.IX Item "Unicode::UCD"
Unicode character database
.IP "User::grent" 12
.IX Item "User::grent"
By-name interface to Perl's built-in getgr*() functions
.IP "User::pwent" 12
.IX Item "User::pwent"
By-name interface to Perl's built-in getpw*() functions
.IP "VMS::DCLsym" 12
.IX Item "VMS::DCLsym"
Perl extension to manipulate \s-1DCL\s0 symbols
.IP "VMS::Stdio" 12
.IX Item "VMS::Stdio"
Standard I/O functions via \s-1VMS\s0 extensions
.IP "Win32" 12
.IX Item "Win32"
Interfaces to some Win32 \s-1API\s0 Functions
.IP "Win32API::File" 12
.IX Item "Win32API::File"
Low-level access to Win32 system \s-1API\s0 calls for files/dirs.
.IP "Win32CORE" 12
.IX Item "Win32CORE"
Win32 \s-1CORE\s0 function stubs
.IP "XS::APItest" 12
.IX Item "XS::APItest"
Test the perl C \s-1API\s0
.IP "XS::Typemap" 12
.IX Item "XS::Typemap"
Module to test the \s-1XS\s0 typemaps distributed with perl
.IP "XSLoader" 12
.IX Item "XSLoader"
Dynamically load C libraries into Perl code
.IP "version::Internals" 12
.IX Item "version::Internals"
Perl extension for Version Objects
.PP
To find out \fIall\fR modules installed on your system, including
those without documentation or outside the standard release,
just use the following command (under the default win32 shell,
double quotes should be used instead of single quotes).
.PP
.Vb 3
\&    % perl \-MFile::Find=find \-MFile::Spec::Functions \-Tlwe \e
\&      \*(Aqfind { wanted => sub { print canonpath $_ if /\e.pm\ez/ },
\&      no_chdir => 1 }, @INC\*(Aq
.Ve
.PP
(The \-T is here to prevent '.' from being listed in \f(CW@INC\fR.)
They should all have their own documentation installed and accessible
via your system \fIman\fR\|(1) command.  If you do not have a \fBfind\fR
program, you can use the Perl \fBfind2perl\fR program instead, which
generates Perl code as output you can run through perl.  If you
have a \fBman\fR program but it doesn't find your modules, you'll have
to fix your manpath.  See perl for details.  If you have no
system \fBman\fR command, you might try the \fBperldoc\fR program.
.PP
Note also that the command \f(CW\*(C`perldoc perllocal\*(C'\fR gives you a (possibly
incomplete) list of the modules that have been further installed on
your system. (The perllocal.pod file is updated by the standard MakeMaker
install process.)
.SS "Extension Modules"
.IX Subsection "Extension Modules"
Extension modules are written in C (or a mix of Perl and C).  They
are usually dynamically loaded into Perl if and when you need them,
but may also be linked in statically.  Supported extension modules
include Socket, Fcntl, and \s-1POSIX.\s0
.PP
Many popular C extension modules do not come bundled (at least, not
completely) due to their sizes, volatility, or simply lack of time
for adequate testing and configuration across the multitude of
platforms on which Perl was beta-tested.  You are encouraged to
look for them on \s-1CPAN \s0(described below), or using web search engines
like Alta Vista or Google.
.SH "CPAN"
.IX Header "CPAN"
\&\s-1CPAN\s0 stands for Comprehensive Perl Archive Network; it's a globally
replicated trove of Perl materials, including documentation, style
guides, tricks and traps, alternate ports to non-Unix systems and
occasional binary distributions for these.   Search engines for
\&\s-1CPAN\s0 can be found at http://www.cpan.org/
.PP
Most importantly, \s-1CPAN\s0 includes around a thousand unbundled modules,
some of which require a C compiler to build.  Major categories of
modules are:
.IP "\(bu" 4
Language Extensions and Documentation Tools
.IP "\(bu" 4
Development Support
.IP "\(bu" 4
Operating System Interfaces
.IP "\(bu" 4
Networking, Device Control (modems) and InterProcess Communication
.IP "\(bu" 4
Data Types and Data Type Utilities
.IP "\(bu" 4
Database Interfaces
.IP "\(bu" 4
User Interfaces
.IP "\(bu" 4
Interfaces to / Emulations of Other Programming Languages
.IP "\(bu" 4
File Names, File Systems and File Locking (see also File Handles)
.IP "\(bu" 4
String Processing, Language Text Processing, Parsing, and Searching
.IP "\(bu" 4
Option, Argument, Parameter, and Configuration File Processing
.IP "\(bu" 4
Internationalization and Locale
.IP "\(bu" 4
Authentication, Security, and Encryption
.IP "\(bu" 4
World Wide Web, \s-1HTML, HTTP, CGI, MIME\s0
.IP "\(bu" 4
Server and Daemon Utilities
.IP "\(bu" 4
Archiving and Compression
.IP "\(bu" 4
Images, Pixmap and Bitmap Manipulation, Drawing, and Graphing
.IP "\(bu" 4
Mail and Usenet News
.IP "\(bu" 4
Control Flow Utilities (callbacks and exceptions etc)
.IP "\(bu" 4
File Handle and Input/Output Stream Utilities
.IP "\(bu" 4
Miscellaneous Modules
.PP
The list of the registered \s-1CPAN\s0 sites follows.
Please note that the sorting order is alphabetical on fields:
.PP
Continent
   |
   |\-\->Country
         |
         |\-\->[state/province]
                   |
                   |\-\->ftp
                   |
                   |\-\->[http]
.PP
and thus the North American servers happen to be listed between the
European and the South American sites.
.PP
Registered \s-1CPAN\s0 sites
.SS "Africa"
.IX Subsection "Africa"
.IP "South Africa" 4
.IX Item "South Africa"
.Vb 5
\&  http://cpan.mirror.ac.za/
\&  ftp://cpan.mirror.ac.za/
\&  http://mirror.is.co.za/pub/cpan/
\&  ftp://ftp.is.co.za/pub/cpan/
\&  ftp://ftp.saix.net/pub/CPAN/
.Ve
.SS "Asia"
.IX Subsection "Asia"
.IP "China" 4
.IX Item "China"
.Vb 1
\&  http://cpan.wenzk.com/
.Ve
.IP "Hong Kong" 4
.IX Item "Hong Kong"
.Vb 3
\&  http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  ftp://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/
\&  http://mirrors.geoexpat.com/cpan/
.Ve
.IP "India" 4
.IX Item "India"
.Vb 1
\&  http://perlmirror.indialinks.com/
.Ve
.IP "Indonesia" 4
.IX Item "Indonesia"
.Vb 6
\&  http://cpan.biz.net.id/
\&  http://komo.vlsm.org/CPAN/
\&  ftp://komo.vlsm.org/CPAN/
\&  http://cpan.cermin.lipi.go.id/
\&  ftp://cermin.lipi.go.id/pub/CPAN/
\&  http://cpan.pesat.net.id/
.Ve
.IP "Japan" 4
.IX Item "Japan"
.Vb 12
\&  ftp://ftp.u\-aizu.ac.jp/pub/CPAN
\&  ftp://ftp.kddilabs.jp/CPAN/
\&  http://ftp.nara.wide.ad.jp/pub/CPAN/
\&  ftp://ftp.nara.wide.ad.jp/pub/CPAN/
\&  http://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.jaist.ac.jp/pub/CPAN/
\&  ftp://ftp.dti.ad.jp/pub/lang/CPAN/
\&  ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/
\&  http://ftp.riken.jp/lang/CPAN/
\&  ftp://ftp.riken.jp/lang/CPAN/
\&  http://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
\&  ftp://ftp.yz.yamagata\-u.ac.jp/pub/lang/cpan/
.Ve
.IP "Republic of Korea" 4
.IX Item "Republic of Korea"
.Vb 6
\&  http://ftp.kaist.ac.kr/pub/CPAN
\&  ftp://ftp.kaist.ac.kr/pub/CPAN
\&  http://cpan.mirror.cdnetworks.com/
\&  ftp://cpan.mirror.cdnetworks.com/CPAN/
\&  http://cpan.sarang.net/
\&  ftp://cpan.sarang.net/CPAN/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 2
\&  http://cpan.tomsk.ru/
\&  ftp://cpan.tomsk.ru/
.Ve
.IP "Singapore" 4
.IX Item "Singapore"
.Vb 5
\&  http://mirror.averse.net/pub/CPAN
\&  ftp://mirror.averse.net/pub/CPAN
\&  http://cpan.mirror.choon.net/
\&  http://cpan.oss.eznetsols.org
\&  ftp://ftp.oss.eznetsols.org/cpan
.Ve
.IP "Taiwan" 4
.IX Item "Taiwan"
.Vb 10
\&  http://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  ftp://ftp.cse.yzu.edu.tw/pub/CPAN/
\&  http://cpan.nctu.edu.tw/
\&  ftp://cpan.nctu.edu.tw/
\&  ftp://ftp.ncu.edu.tw/CPAN/
\&  http://cpan.cdpa.nsysu.edu.tw/
\&  ftp://cpan.cdpa.nsysu.edu.tw/Unix/Lang/CPAN/
\&  http://cpan.stu.edu.tw
\&  ftp://ftp.stu.edu.tw/CPAN
\&  http://ftp.stu.edu.tw/CPAN
\&  ftp://ftp.stu.edu.tw/pub/CPAN
\&  http://cpan.cs.pu.edu.tw/
\&  ftp://cpan.cs.pu.edu.tw/pub/CPAN
.Ve
.IP "Thailand" 4
.IX Item "Thailand"
.Vb 4
\&  http://mirrors.issp.co.th/cpan/
\&  ftp://mirrors.issp.co.th/cpan/
\&  http://mirror.yourconnect.com/CPAN/
\&  ftp://mirror.yourconnect.com/CPAN/
.Ve
.IP "Turkey" 4
.IX Item "Turkey"
.Vb 1
\&  http://cpan.gazi.edu.tr/
.Ve
.SS "Central America"
.IX Subsection "Central America"
.IP "Costa Rica" 4
.IX Item "Costa Rica"
.Vb 2
\&  http://mirrors.ucr.ac.cr/CPAN/
\&  ftp://mirrors.ucr.ac.cr/CPAN/
.Ve
.SS "Europe"
.IX Subsection "Europe"
.IP "Austria" 4
.IX Item "Austria"
.Vb 4
\&  http://cpan.inode.at/
\&  ftp://cpan.inode.at
\&  http://gd.tuwien.ac.at/languages/perl/CPAN/
\&  ftp://gd.tuwien.ac.at/pub/CPAN/
.Ve
.IP "Belgium" 4
.IX Item "Belgium"
.Vb 4
\&  http://ftp.belnet.be/mirror/ftp.cpan.org/
\&  ftp://ftp.belnet.be/mirror/ftp.cpan.org/
\&  http://ftp.easynet.be/pub/CPAN/
\&  http://cpan.weepee.org/
.Ve
.IP "Bosnia and Herzegovina" 4
.IX Item "Bosnia and Herzegovina"
.Vb 1
\&  http://cpan.blic.net/
.Ve
.IP "Bulgaria" 4
.IX Item "Bulgaria"
.Vb 4
\&  http://cpan.cbox.biz/
\&  ftp://cpan.cbox.biz/cpan/
\&  http://cpan.digsys.bg/
\&  ftp://ftp.digsys.bg/pub/CPAN
.Ve
.IP "Croatia" 4
.IX Item "Croatia"
.Vb 2
\&  http://ftp.carnet.hr/pub/CPAN/
\&  ftp://ftp.carnet.hr/pub/CPAN/
.Ve
.IP "Czech Republic" 4
.IX Item "Czech Republic"
.Vb 2
\&  ftp://ftp.fi.muni.cz/pub/CPAN/
\&  http://archive.cpan.cz/
.Ve
.IP "Denmark" 4
.IX Item "Denmark"
.Vb 4
\&  http://mirrors.dotsrc.org/cpan
\&  ftp://mirrors.dotsrc.org/cpan/
\&  http://www.cpan.dk/
\&  http://mirror.uni\-c.dk/pub/CPAN/
.Ve
.IP "Finland" 4
.IX Item "Finland"
.Vb 2
\&  ftp://ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.eunet.fi/CPAN
.Ve
.IP "France" 4
.IX Item "France"
.Vb 10
\&  http://cpan.enstimac.fr/
\&  ftp://ftp.inria.fr/pub/CPAN/
\&  http://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&  ftp://ftp.lip6.fr/pub/perl/CPAN/
\&  http://mir2.ovh.net/ftp.cpan.org
\&  ftp://mir1.ovh.net/ftp.cpan.org
\&  ftp://ftp.oleane.net/pub/CPAN/
\&  http://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  ftp://ftp.crihan.fr/mirrors/ftp.cpan.org/
\&  http://ftp.u\-strasbg.fr/CPAN
\&  ftp://ftp.u\-strasbg.fr/CPAN
\&  http://cpan.cict.fr/
\&  ftp://cpan.cict.fr/pub/CPAN/
.Ve
.IP "Germany" 4
.IX Item "Germany"
.Vb 10
\&  ftp://ftp.fu\-berlin.de/unix/languages/perl/
\&  http://mirrors.softliste.de/cpan/
\&  ftp://ftp.rub.de/pub/CPAN/
\&  http://www.planet\-elektronik.de/CPAN/
\&  http://ftp.hosteurope.de/pub/CPAN/
\&  ftp://ftp.hosteurope.de/pub/CPAN/
\&  http://www.mirrorspace.org/cpan/
\&  http://mirror.netcologne.de/cpan/
\&  ftp://mirror.netcologne.de/cpan/
\&  ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/CPAN/
\&  http://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  ftp://ftp\-stud.hs\-esslingen.de/pub/Mirrors/CPAN/
\&  http://mirrors.zerg.biz/cpan/
\&  http://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  ftp://ftp.gwdg.de/pub/languages/perl/CPAN/
\&  http://dl.ambiweb.de/mirrors/ftp.cpan.org/
\&  http://cpan.mirror.clusters.kg/
\&  http://cpan.mirror.iphh.net/
\&  ftp://cpan.mirror.iphh.net/pub/CPAN/
\&  http://cpan.mirroring.de/
\&  http://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  ftp://mirror.informatik.uni\-mannheim.de/pub/mirrors/CPAN/
\&  http://www.chemmedia.de/mirrors/CPAN/
\&  http://ftp.cw.net/pub/CPAN/
\&  ftp://ftp.cw.net/pub/CPAN/
\&  http://cpan.cpantesters.org/
\&  ftp://cpan.cpantesters.org/CPAN/
\&  http://cpan.mirrored.de/
\&  ftp://mirror.petamem.com/CPAN/
\&  http://cpan.noris.de/
\&  ftp://cpan.noris.de/pub/CPAN/
\&  ftp://ftp.mpi\-sb.mpg.de/pub/perl/CPAN/
\&  ftp://ftp.gmd.de/mirrors/CPAN/
.Ve
.IP "Greece" 4
.IX Item "Greece"
.Vb 4
\&  ftp://ftp.forthnet.gr/pub/languages/perl/CPAN
\&  ftp://ftp.ntua.gr/pub/lang/perl/
\&  http://cpan.cc.uoc.gr/
\&  ftp://ftp.cc.uoc.gr/mirrors/CPAN/
.Ve
.IP "Hungary" 4
.IX Item "Hungary"
.Vb 3
\&  http://cpan.mirrors.enexis.hu/
\&  ftp://cpan.mirrors.enexis.hu/mirrors/cpan/
\&  http://cpan.hu/
.Ve
.IP "Iceland" 4
.IX Item "Iceland"
.Vb 2
\&  http://ftp.rhnet.is/pub/CPAN/
\&  ftp://ftp.rhnet.is/pub/CPAN/
.Ve
.IP "Ireland" 4
.IX Item "Ireland"
.Vb 4
\&  http://ftp.esat.net/pub/languages/perl/CPAN/
\&  ftp://ftp.esat.net/pub/languages/perl/CPAN/
\&  http://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
\&  ftp://ftp.heanet.ie/mirrors/ftp.perl.org/pub/CPAN
.Ve
.IP "Italy" 4
.IX Item "Italy"
.Vb 3
\&  http://bo.mirror.garr.it/mirrors/CPAN/
\&  http://cpan.panu.it/
\&  ftp://ftp.panu.it/pub/mirrors/perl/CPAN/
.Ve
.IP "Latvia" 4
.IX Item "Latvia"
.Vb 1
\&  http://kvin.lv/pub/CPAN/
.Ve
.IP "Lithuania" 4
.IX Item "Lithuania"
.Vb 2
\&  http://ftp.litnet.lt/pub/CPAN/
\&  ftp://ftp.litnet.lt/pub/CPAN/
.Ve
.IP "Malta" 4
.IX Item "Malta"
.Vb 1
\&  http://cpan.waldonet.net.mt/
.Ve
.IP "Netherlands" 4
.IX Item "Netherlands"
.Vb 10
\&  ftp://ftp.quicknet.nl/pub/CPAN/
\&  http://mirror.hostfuss.com/CPAN/
\&  ftp://mirror.hostfuss.com/CPAN/
\&  http://mirrors3.kernel.org/cpan/
\&  ftp://mirrors3.kernel.org/pub/CPAN/
\&  http://cpan.mirror.versatel.nl/
\&  ftp://ftp.mirror.versatel.nl/cpan/
\&  ftp://download.xs4all.nl/pub/mirror/CPAN/
\&  http://mirror.leaseweb.com/CPAN/
\&  ftp://mirror.leaseweb.com/CPAN/
\&  ftp://ftp.cpan.nl/pub/CPAN/
\&  http://archive.cs.uu.nl/mirror/CPAN/
\&  ftp://ftp.cs.uu.nl/mirror/CPAN/
\&  http://luxitude.net/cpan/
.Ve
.IP "Norway" 4
.IX Item "Norway"
.Vb 2
\&  ftp://ftp.uninett.no/pub/languages/perl/CPAN
\&  ftp://ftp.uit.no/pub/languages/perl/cpan/
.Ve
.IP "Poland" 4
.IX Item "Poland"
.Vb 7
\&  http://piotrkosoft.net/pub/mirrors/CPAN/
\&  ftp://ftp.piotrkosoft.net/pub/mirrors/CPAN/
\&  http://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.man.poznan.pl/pub/CPAN
\&  ftp://ftp.ps.pl/pub/CPAN/
\&  ftp://sunsite.icm.edu.pl/pub/CPAN/
\&  ftp://ftp.tpnet.pl/d4/CPAN/
.Ve
.IP "Portugal" 4
.IX Item "Portugal"
.Vb 9
\&  http://cpan.dei.uc.pt/
\&  ftp://ftp.dei.uc.pt/pub/CPAN
\&  ftp://ftp.ist.utl.pt/pub/CPAN/
\&  http://cpan.perl.pt/
\&  http://cpan.ip.pt/
\&  ftp://cpan.ip.pt/pub/cpan/
\&  http://mirrors.nfsi.pt/CPAN/
\&  ftp://mirrors.nfsi.pt/pub/CPAN/
\&  http://cpan.dcc.fc.up.pt/
.Ve
.IP "Romania" 4
.IX Item "Romania"
.Vb 7
\&  http://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.astral.ro/pub/CPAN/
\&  ftp://ftp.lug.ro/CPAN
\&  http://mirrors.xservers.ro/CPAN/
\&  http://mirrors.hostingromania.ro/ftp.cpan.org/
\&  ftp://ftp.hostingromania.ro/mirrors/ftp.cpan.org/
\&  ftp://ftp.iasi.roedu.net/pub/mirrors/ftp.cpan.org/
.Ve
.IP "Russia" 4
.IX Item "Russia"
.Vb 8
\&  ftp://ftp.aha.ru/CPAN/
\&  http://cpan.rinet.ru/
\&  ftp://cpan.rinet.ru/pub/mirror/CPAN/
\&  ftp://ftp.SpringDaemons.com/pub/CPAN/
\&  http://mirror.rol.ru/CPAN/
\&  http://ftp.silvernet.ru/CPAN/
\&  http://ftp.spbu.ru/CPAN/
\&  ftp://ftp.spbu.ru/CPAN/
.Ve
.IP "Slovakia" 4
.IX Item "Slovakia"
.Vb 1
\&  http://cpan.fyxm.net/
.Ve
.IP "Slovenia" 4
.IX Item "Slovenia"
.Vb 1
\&  http://www.klevze.si/cpan
.Ve
.IP "Spain" 4
.IX Item "Spain"
.Vb 4
\&  http://osl.ugr.es/CPAN/
\&  ftp://ftp.rediris.es/mirror/CPAN/
\&  http://ftp.gui.uva.es/sites/cpan.org/
\&  ftp://ftp.gui.uva.es/sites/cpan.org/
.Ve
.IP "Sweden" 4
.IX Item "Sweden"
.Vb 2
\&  http://mirrors4.kernel.org/cpan/
\&  ftp://mirrors4.kernel.org/pub/CPAN/
.Ve
.IP "Switzerland" 4
.IX Item "Switzerland"
.Vb 5
\&  http://cpan.mirror.solnet.ch/
\&  ftp://ftp.solnet.ch/mirror/CPAN/
\&  ftp://ftp.adwired.ch/CPAN/
\&  http://mirror.switch.ch/ftp/mirror/CPAN/
\&  ftp://mirror.switch.ch/mirror/CPAN/
.Ve
.IP "Ukraine" 4
.IX Item "Ukraine"
.Vb 5
\&  http://cpan.makeperl.org/
\&  ftp://cpan.makeperl.org/pub/CPAN
\&  http://cpan.org.ua/
\&  http://cpan.gafol.net/
\&  ftp://ftp.gafol.net/pub/cpan/
.Ve
.IP "United Kingdom" 4
.IX Item "United Kingdom"
.Vb 10
\&  http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  ftp://ftp.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/
\&  http://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  ftp://mirror.tje.me.uk/pub/mirrors/ftp.cpan.org/
\&  http://www.mirror.8086.net/sites/CPAN/
\&  ftp://ftp.mirror.8086.net/sites/CPAN/
\&  http://cpan.mirror.anlx.net/
\&  ftp://ftp.mirror.anlx.net/CPAN/
\&  http://mirror.bytemark.co.uk/CPAN/
\&  ftp://mirror.bytemark.co.uk/CPAN/
\&  http://cpan.etla.org/
\&  ftp://cpan.etla.org/pub/CPAN
\&  ftp://ftp.demon.co.uk/pub/CPAN/
\&  http://mirror.sov.uk.goscomb.net/CPAN/
\&  ftp://mirror.sov.uk.goscomb.net/pub/CPAN/
\&  http://ftp.plig.net/pub/CPAN/
\&  ftp://ftp.plig.net/pub/CPAN/
\&  http://ftp.ticklers.org/pub/CPAN/
\&  ftp://ftp.ticklers.org/pub/CPAN/
\&  http://cpan.mirrors.uk2.net/
\&  ftp://mirrors.uk2.net/pub/CPAN/
\&  http://mirror.ox.ac.uk/sites/www.cpan.org/
\&  ftp://mirror.ox.ac.uk/sites/www.cpan.org/
.Ve
.SS "North America"
.IX Subsection "North America"
.IP "Bahamas" 4
.IX Item "Bahamas"
.Vb 1
\&  http://www.securehost.com/mirror/CPAN/
.Ve
.IP "Canada" 4
.IX Item "Canada"
.Vb 10
\&  http://cpan.arcticnetwork.ca
\&  ftp://mirror.arcticnetwork.ca/pub/CPAN
\&  http://cpan.sunsite.ualberta.ca/
\&  ftp://cpan.sunsite.ualberta.ca/pub/CPAN/
\&  http://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  ftp://theoryx5.uwinnipeg.ca/pub/CPAN/
\&  http://arwen.cs.dal.ca/mirror/CPAN/
\&  ftp://arwen.cs.dal.ca/pub/mirror/CPAN/
\&  http://CPAN.mirror.rafal.ca/
\&  ftp://CPAN.mirror.rafal.ca/pub/CPAN/
\&  ftp://ftp.nrc.ca/pub/CPAN/
\&  http://mirror.csclub.uwaterloo.ca/pub/CPAN/
\&  ftp://mirror.csclub.uwaterloo.ca/pub/CPAN/
.Ve
.IP "Mexico" 4
.IX Item "Mexico"
.Vb 2
\&  http://www.msg.com.mx/CPAN/
\&  ftp://ftp.msg.com.mx/pub/CPAN/
.Ve
.IP "United States" 4
.IX Item "United States"
.RS 4
.PD 0
.IP "Alabama" 8
.IX Item "Alabama"
.PD
.Vb 2
\&  http://mirror.hiwaay.net/CPAN/
\&  ftp://mirror.hiwaay.net/CPAN/
.Ve
.IP "Arizona" 8
.IX Item "Arizona"
.Vb 1
\&  http://cpan.ezarticleinformation.com/
.Ve
.IP "California" 8
.IX Item "California"
.Vb 10
\&  http://cpan.knowledgematters.net/
\&  http://cpan.binkerton.com/
\&  http://cpan.develooper.com/
\&  http://mirrors.gossamer\-threads.com/CPAN
\&  http://cpan.schatt.com/
\&  http://mirrors.kernel.org/cpan/
\&  ftp://mirrors.kernel.org/pub/CPAN
\&  http://mirrors2.kernel.org/cpan/
\&  ftp://mirrors2.kernel.org/pub/CPAN/
\&  http://cpan.mirror.facebook.net/
\&  http://mirrors1.kernel.org/cpan/
\&  ftp://mirrors1.kernel.org/pub/CPAN/
\&  http://cpan\-sj.viaverio.com/
\&  ftp://cpan\-sj.viaverio.com/pub/CPAN/
\&  http://www.perl.com/CPAN/
.Ve
.IP "Florida" 8
.IX Item "Florida"
.Vb 3
\&  ftp://ftp.cise.ufl.edu/pub/mirrors/CPAN/
\&  http://mirror.atlantic.net/pub/CPAN/
\&  ftp://mirror.atlantic.net/pub/CPAN/
.Ve
.IP "Idaho" 8
.IX Item "Idaho"
.Vb 2
\&  http://mirror.its.uidaho.edu/pub/cpan/
\&  ftp://mirror.its.uidaho.edu/cpan/
.Ve
.IP "Illinois" 8
.IX Item "Illinois"
.Vb 6
\&  http://cpan.mirrors.hoobly.com/
\&  http://cpan.uchicago.edu/pub/CPAN/
\&  ftp://cpan.uchicago.edu/pub/CPAN/
\&  http://mirrors.servercentral.net/CPAN/
\&  http://www.stathy.com/CPAN/
\&  ftp://www.stathy.com/CPAN/
.Ve
.IP "Indiana" 8
.IX Item "Indiana"
.Vb 5
\&  ftp://ftp.uwsg.iu.edu/pub/perl/CPAN/
\&  http://cpan.netnitco.net/
\&  ftp://cpan.netnitco.net/pub/mirrors/CPAN/
\&  http://ftp.ndlug.nd.edu/pub/perl/
\&  ftp://ftp.ndlug.nd.edu/pub/perl/
.Ve
.IP "Massachusetts" 8
.IX Item "Massachusetts"
.Vb 1
\&  http://mirrors.ccs.neu.edu/CPAN/
.Ve
.IP "Michigan" 8
.IX Item "Michigan"
.Vb 2
\&  http://ftp.wayne.edu/cpan/
\&  ftp://ftp.wayne.edu/cpan/
.Ve
.IP "Minnesota" 8
.IX Item "Minnesota"
.Vb 1
\&  http://cpan.msi.umn.edu/
.Ve
.IP "New Jersey" 8
.IX Item "New Jersey"
.Vb 2
\&  http://mirror.datapipe.net/CPAN/
\&  ftp://mirror.datapipe.net/pub/CPAN/
.Ve
.IP "New York" 8
.IX Item "New York"
.Vb 12
\&  http://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  ftp://mirrors.24\-7\-solutions.net/pub/CPAN/
\&  http://mirror.cc.columbia.edu/pub/software/cpan/
\&  ftp://mirror.cc.columbia.edu/pub/software/cpan/
\&  http://cpan.belfry.net/
\&  http://cpan.erlbaum.net/
\&  ftp://cpan.erlbaum.net/CPAN/
\&  http://cpan.hexten.net/
\&  ftp://cpan.hexten.net/
\&  ftp://mirror.nyi.net/CPAN/
\&  http://mirror.rit.edu/CPAN/
\&  ftp://mirror.rit.edu/CPAN/
.Ve
.IP "North Carolina" 8
.IX Item "North Carolina"
.Vb 2
\&  http://www.ibiblio.org/pub/mirrors/CPAN
\&  ftp://ftp.ncsu.edu/pub/mirror/CPAN/
.Ve
.IP "Oregon" 8
.IX Item "Oregon"
.Vb 2
\&  http://ftp.osuosl.org/pub/CPAN/
\&  ftp://ftp.osuosl.org/pub/CPAN/
.Ve
.IP "Pennsylvania" 8
.IX Item "Pennsylvania"
.Vb 4
\&  http://ftp.epix.net/CPAN/
\&  ftp://ftp.epix.net/pub/languages/perl/
\&  http://cpan.pair.com/
\&  ftp://cpan.pair.com/pub/CPAN/
.Ve
.IP "South Carolina" 8
.IX Item "South Carolina"
.Vb 1
\&  http://cpan.mirror.clemson.edu/
.Ve
.IP "Tennessee" 8
.IX Item "Tennessee"
.Vb 1
\&  http://mira.sunsite.utk.edu/CPAN/
.Ve
.IP "Texas" 8
.IX Item "Texas"
.Vb 1
\&  http://mirror.uta.edu/CPAN
.Ve
.IP "Utah" 8
.IX Item "Utah"
.Vb 1
\&  ftp://mirror.xmission.com/CPAN/
.Ve
.IP "Virginia" 8
.IX Item "Virginia"
.Vb 5
\&  http://cpan\-du.viaverio.com/
\&  ftp://cpan\-du.viaverio.com/pub/CPAN/
\&  http://perl.secsup.org/
\&  ftp://perl.secsup.org/pub/perl/
\&  ftp://mirror.cogentco.com/pub/CPAN/
.Ve
.IP "Washington" 8
.IX Item "Washington"
.Vb 3
\&  http://cpan.llarian.net/
\&  ftp://cpan.llarian.net/pub/CPAN/
\&  ftp://ftp\-mirror.internap.com/pub/CPAN/
.Ve
.IP "Wisconsin" 8
.IX Item "Wisconsin"
.Vb 4
\&  http://cpan.mirrors.tds.net
\&  ftp://cpan.mirrors.tds.net/pub/CPAN
\&  http://mirror.sit.wisc.edu/pub/CPAN/
\&  ftp://mirror.sit.wisc.edu/pub/CPAN/
.Ve
.RE
.RS 4
.RE
.SS "Oceania"
.IX Subsection "Oceania"
.IP "Australia" 4
.IX Item "Australia"
.Vb 5
\&  http://mirror.internode.on.net/pub/cpan/
\&  ftp://mirror.internode.on.net/pub/cpan/
\&  http://cpan.mirror.aussiehq.net.au/
\&  http://mirror.as24220.net/cpan/
\&  ftp://mirror.as24220.net/cpan/
.Ve
.IP "New Zealand" 4
.IX Item "New Zealand"
.Vb 5
\&  ftp://ftp.auckland.ac.nz/pub/perl/CPAN/
\&  http://cpan.inspire.net.nz
\&  ftp://cpan.inspire.net.nz/cpan
\&  http://cpan.catalyst.net.nz/CPAN/
\&  ftp://cpan.catalyst.net.nz/pub/CPAN/
.Ve
.SS "South America"
.IX Subsection "South America"
.IP "Argentina" 4
.IX Item "Argentina"
.Vb 3
\&  http://cpan.patan.com.ar/
\&  http://cpan.localhost.net.ar
\&  ftp://mirrors.localhost.net.ar/pub/mirrors/CPAN
.Ve
.IP "Brazil" 4
.IX Item "Brazil"
.Vb 4
\&  ftp://cpan.pop\-mg.com.br/pub/CPAN/
\&  http://ftp.pucpr.br/CPAN
\&  ftp://ftp.pucpr.br/CPAN
\&  http://cpan.kinghost.net/
.Ve
.IP "Chile" 4
.IX Item "Chile"
.Vb 2
\&  http://cpan.dcc.uchile.cl/
\&  ftp://cpan.dcc.uchile.cl/pub/lang/cpan/
.Ve
.IP "Colombia" 4
.IX Item "Colombia"
.Vb 1
\&  http://www.laqee.unal.edu.co/CPAN/
.Ve
.SS "\s-1RSYNC\s0 Mirrors"
.IX Subsection "RSYNC Mirrors"
.Vb 10
\&                      mirror.as24220.net::cpan
\&                      cpan.inode.at::CPAN
\&                      gd.tuwien.ac.at::CPAN
\&                      ftp.belnet.be::packages/cpan
\&                      rsync.linorg.usp.br::CPAN
\&                      rsync.arcticnetwork.ca::CPAN
\&                      CPAN.mirror.rafal.ca::CPAN
\&                      mirror.csclub.uwaterloo.ca::CPAN
\&                      theoryx5.uwinnipeg.ca::CPAN
\&                      www.laqee.unal.edu.co::CPAN
\&                      mirror.uni\-c.dk::CPAN
\&                      rsync.nic.funet.fi::CPAN
\&                      rsync://distrib\-coffee.ipsl.jussieu.fr/pub/mirrors/cpan/
\&                      mir1.ovh.net::CPAN
\&                      miroir\-francais.fr::cpan
\&                      ftp.crihan.fr::CPAN
\&                      rsync://mirror.cict.fr/cpan/
\&                      rsync://mirror.netcologne.de/cpan/
\&                      ftp\-stud.hs\-esslingen.de::CPAN/
\&                      ftp.gwdg.de::FTP/languages/perl/CPAN/
\&                      cpan.mirror.iphh.net::CPAN
\&                      cpan.cpantesters.org::cpan
\&                      cpan.hu::CPAN
\&                      komo.vlsm.org::CPAN
\&                      mirror.unej.ac.id::cpan
\&                      ftp.esat.net::/pub/languages/perl/CPAN
\&                      ftp.heanet.ie::mirrors/ftp.perl.org/pub/CPAN
\&                      rsync.panu.it::CPAN
\&                      cpan.fastbull.org::CPAN
\&                      ftp.kddilabs.jp::cpan
\&                      ftp.nara.wide.ad.jp::cpan/
\&                      rsync://ftp.jaist.ac.jp/pub/CPAN/
\&                      rsync://ftp.riken.jp/cpan/
\&                      mirror.linuxiso.kz::CPAN
\&                      rsync://mirrors3.kernel.org/mirrors/CPAN/
\&                      rsync://rsync.osmirror.nl/cpan/
\&                      mirror.leaseweb.com::CPAN
\&                      cpan.nautile.nc::CPAN
\&                      mirror.icis.pcz.pl::CPAN
\&                      piotrkosoft.net::mirrors/CPAN
\&                      rsync://cpan.perl.pt/
\&                      ftp.kaist.ac.kr::cpan
\&                      cpan.sarang.net::CPAN
\&                      mirror.averse.net::cpan
\&                      rsync.oss.eznetsols.org
\&                      mirror.ac.za::cpan
\&                      ftp.is.co.za::IS\-Mirror/ftp.cpan.org/
\&                      rsync://ftp.gui.uva.es/cpan/
\&                      rsync://mirrors4.kernel.org/mirrors/CPAN/
\&                      ftp.solnet.ch::CPAN
\&                      ftp.ulak.net.tr::CPAN
\&                      gafol.net::cpan
\&                      rsync.mirrorservice.org::ftp.funet.fi/pub/
\&                      rsync://rsync.mirror.8086.net/CPAN/
\&                      rsync.mirror.anlx.net::CPAN
\&                      mirror.bytemark.co.uk::CPAN
\&                      ftp.plig.net::CPAN
\&                      rsync://ftp.ticklers.org:CPAN/
\&                      mirrors.ibiblio.org::CPAN
\&                      cpan\-du.viaverio.com::CPAN
\&                      mirror.hiwaay.net::CPAN
\&                      rsync://mira.sunsite.utk.edu/CPAN/
\&                      cpan.mirrors.tds.net::CPAN
\&                      mirror.its.uidaho.edu::cpan
\&                      rsync://mirror.cc.columbia.edu::cpan/
\&                      ftp.fxcorporate.com::CPAN
\&                      rsync.atlantic.net::CPAN
\&                      mirrors.kernel.org::mirrors/CPAN
\&                      rsync://mirrors2.kernel.org/mirrors/CPAN/
\&                      cpan.pair.com::CPAN
\&                      rsync://mirror.rit.edu/CPAN/
\&                      rsync://mirror.facebook.net/cpan/
\&                      rsync://mirrors1.kernel.org/mirrors/CPAN/
\&                      cpan\-sj.viaverio.com::CPAN
.Ve
.PP
For an up-to-date listing of \s-1CPAN\s0 sites,
see http://www.cpan.org/SITES or ftp://www.cpan.org/SITES .
.SH "Modules: Creation, Use, and Abuse"
.IX Header "Modules: Creation, Use, and Abuse"
(The following section is borrowed directly from Tim Bunce's modules
file, available at your nearest \s-1CPAN\s0 site.)
.PP
Perl implements a class using a package, but the presence of a
package doesn't imply the presence of a class.  A package is just a
namespace.  A class is a package that provides subroutines that can be
used as methods.  A method is just a subroutine that expects, as its
first argument, either the name of a package (for \*(L"static\*(R" methods),
or a reference to something (for \*(L"virtual\*(R" methods).
.PP
A module is a file that (by convention) provides a class of the same
name (sans the .pm), plus an import method in that class that can be
called to fetch exported symbols.  This module may implement some of
its methods by loading dynamic C or \*(C+ objects, but that should be
totally transparent to the user of the module.  Likewise, the module
might set up an \s-1AUTOLOAD\s0 function to slurp in subroutine definitions on
demand, but this is also transparent.  Only the \fI.pm\fR file is required to
exist.  See perlsub, perlobj, and AutoLoader for details about
the \s-1AUTOLOAD\s0 mechanism.
.SS "Guidelines for Module Creation"
.IX Subsection "Guidelines for Module Creation"
.IP "\(bu" 4
Do similar modules already exist in some form?
.Sp
If so, please try to reuse the existing modules either in whole or
by inheriting useful features into a new class.  If this is not
practical try to get together with the module authors to work on
extending or enhancing the functionality of the existing modules.
A perfect example is the plethora of packages in perl4 for dealing
with command line options.
.Sp
If you are writing a module to expand an already existing set of
modules, please coordinate with the author of the package.  It
helps if you follow the same naming scheme and module interaction
scheme as the original author.
.IP "\(bu" 4
Try to design the new module to be easy to extend and reuse.
.Sp
Try to \f(CW\*(C`use warnings;\*(C'\fR (or \f(CW\*(C`use warnings qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no warnings qw(...);\*(C'\fR to individual blocks
of code that need less warnings.
.Sp
Use blessed references.  Use the two argument form of bless to bless
into the class name given as the first parameter of the constructor,
e.g.,:
.Sp
.Vb 4
\& sub new {
\&     my $class = shift;
\&     return bless {}, $class;
\& }
.Ve
.Sp
or even this if you'd like it to be used as either a static
or a virtual method.
.Sp
.Vb 5
\& sub new {
\&     my $self  = shift;
\&     my $class = ref($self) || $self;
\&     return bless {}, $class;
\& }
.Ve
.Sp
Pass arrays as references so more parameters can be added later
(it's also faster).  Convert functions into methods where
appropriate.  Split large methods into smaller more flexible ones.
Inherit methods from other modules if appropriate.
.Sp
Avoid class name tests like: \f(CW\*(C`die "Invalid" unless ref $ref eq \*(AqFOO\*(Aq\*(C'\fR.
Generally you can delete the \f(CW\*(C`eq \*(AqFOO\*(Aq\*(C'\fR part with no harm at all.
Let the objects look after themselves! Generally, avoid hard-wired
class names as far as possible.
.Sp
Avoid \f(CW\*(C`$r\->Class::func()\*(C'\fR where using \f(CW\*(C`@ISA=qw(... Class ...)\*(C'\fR and
\&\f(CW\*(C`$r\->func()\*(C'\fR would work.
.Sp
Use autosplit so little used or newly added functions won't be a
burden to programs that don't use them. Add test functions to
the module after _\|_END_\|_ either using AutoSplit or by saying:
.Sp
.Vb 1
\& eval join(\*(Aq\*(Aq,<main::DATA>) || die $@ unless caller();
.Ve
.Sp
Does your module pass the 'empty subclass' test? If you say
\&\f(CW\*(C`@SUBCLASS::ISA = qw(YOURCLASS);\*(C'\fR your applications should be able
to use \s-1SUBCLASS\s0 in exactly the same way as \s-1YOURCLASS. \s0 For example,
does your application still work if you change:  \f(CW\*(C`$obj = YOURCLASS\->new();\*(C'\fR
into: \f(CW\*(C`$obj = SUBCLASS\->new();\*(C'\fR ?
.Sp
Avoid keeping any state information in your packages. It makes it
difficult for multiple other packages to use yours. Keep state
information in objects.
.Sp
Always use \fB\-w\fR.
.Sp
Try to \f(CW\*(C`use strict;\*(C'\fR (or \f(CW\*(C`use strict qw(...);\*(C'\fR).
Remember that you can add \f(CW\*(C`no strict qw(...);\*(C'\fR to individual blocks
of code that need less strictness.
.Sp
Always use \fB\-w\fR.
.Sp
Follow the guidelines in perlstyle.
.Sp
Always use \fB\-w\fR.
.IP "\(bu" 4
Some simple style guidelines
.Sp
The perlstyle manual supplied with Perl has many helpful points.
.Sp
Coding style is a matter of personal taste. Many people evolve their
style over several years as they learn what helps them write and
maintain good code.  Here's one set of assorted suggestions that
seem to be widely used by experienced developers:
.Sp
Use underscores to separate words.  It is generally easier to read
\&\f(CW$var_names_like_this\fR than \f(CW$VarNamesLikeThis\fR, especially for
non-native speakers of English. It's also a simple rule that works
consistently with \s-1VAR_NAMES_LIKE_THIS.\s0
.Sp
Package/Module names are an exception to this rule. Perl informally
reserves lowercase module names for 'pragma' modules like integer
and strict. Other modules normally begin with a capital letter and
use mixed case with no underscores (need to be short and portable).
.Sp
You may find it helpful to use letter case to indicate the scope
or nature of a variable. For example:
.Sp
.Vb 3
\& $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
\& $Some_Caps_Here  package\-wide global/static
\& $no_caps_here    function scope my() or local() variables
.Ve
.Sp
Function and method names seem to work best as all lowercase.
e.g., \f(CW\*(C`$obj\->as_string()\*(C'\fR.
.Sp
You can use a leading underscore to indicate that a variable or
function should not be used outside the package that defined it.
.IP "\(bu" 4
Select what to export.
.Sp
Do \s-1NOT\s0 export method names!
.Sp
Do \s-1NOT\s0 export anything else by default without a good reason!
.Sp
Exports pollute the namespace of the module user.  If you must
export try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid
short or common names to reduce the risk of name clashes.
.Sp
Generally anything not exported is still accessible from outside the
module using the ModuleName::item_name (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
indicate informally that they are 'internal' and not for public use.
.Sp
(It is actually possible to get private functions by saying:
\&\f(CW\*(C`my $subref = sub { ... };  &$subref;\*(C'\fR.  But there's no way to call that
directly as a method, because a method must have a name in the symbol
table.)
.Sp
As a general rule, if the module is trying to be object oriented
then export nothing. If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution.
.IP "\(bu" 4
Select a name for the module.
.Sp
This name should be as descriptive, accurate, and complete as
possible.  Avoid any risk of ambiguity. Always try to use two or
more whole words.  Generally the name should reflect what is special
about what the module does rather than how it does it.  Please use
nested module names to group informally or categorize a module.
There should be a very good reason for a module not to have a nested name.
Module names should begin with a capital letter.
.Sp
Having 57 modules all called Sort will not make life easy for anyone
(though having 23 called Sort::Quick is only marginally better :\-).
Imagine someone trying to install your module alongside many others.
If in any doubt ask for suggestions in comp.lang.perl.misc.
.Sp
If you are developing a suite of related modules/classes it's good
practice to use nested classes with a common prefix as this will
avoid namespace clashes. For example: Xyz::Control, Xyz::View,
Xyz::Model etc. Use the modules in this list as a naming guide.
.Sp
If adding a new module to a set, follow the original author's
standards for naming modules and the interface to methods in
those modules.
.Sp
If developing modules for private internal or project specific use,
that will never be released to the public, then you should ensure
that their names will not clash with any future public module. You
can do this either by using the reserved Local::* category or by
using a category name that includes an underscore like Foo_Corp::*.
.Sp
To be portable each component of a module name should be limited to
11 characters. If it might be used on MS-DOS then try to ensure each is
unique in the first 8 characters. Nested modules make this easier.
.IP "\(bu" 4
Have you got it right?
.Sp
How do you know that you've made the right decisions? Have you
picked an interface design that will cause problems later? Have
you picked the most appropriate name? Do you have any questions?
.Sp
The best way to know for sure, and pick up many helpful suggestions,
is to ask someone who knows. Comp.lang.perl.misc is read by just about
all the people who develop modules and it's the best place to ask.
.Sp
All you need to do is post a short summary of the module, its
purpose and interfaces. A few lines on each of the main methods is
probably enough. (If you post the whole module it might be ignored
by busy people \- generally the very people you want to read it!)
.Sp
Don't worry about posting if you can't say when the module will be
ready \- just say so in the message. It might be worth inviting
others to help you, they may be able to complete it for you!
.IP "\(bu" 4
\&\s-1README\s0 and other Additional Files.
.Sp
It's well known that software developers usually fully document the
software they write. If, however, the world is in urgent need of
your software and there is not enough time to write the full
documentation please at least provide a \s-1README\s0 file containing:
.RS 4
.IP "\(bu" 10
A description of the module/package/extension etc.
.IP "\(bu" 10
A copyright notice \- see below.
.IP "\(bu" 10
Prerequisites \- what else you may need to have.
.IP "\(bu" 10
How to build it \- possible changes to Makefile.PL etc.
.IP "\(bu" 10
How to install it.
.IP "\(bu" 10
Recent changes in this release, especially incompatibilities
.IP "\(bu" 10
Changes / enhancements you plan to make in the future.
.RE
.RS 4
.Sp
If the \s-1README\s0 file seems to be getting too large you may wish to
split out some of the sections into separate files: \s-1INSTALL,\s0
Copying, ToDo etc.
.IP "\(bu" 4
Adding a Copyright Notice.
.Sp
How you choose to license your work is a personal decision.
The general mechanism is to assert your Copyright and then make
a declaration of how others may copy/use/modify your work.
.Sp
Perl, for example, is supplied with two types of licence: The \s-1GNU GPL\s0
and The Artistic Licence (see the files \s-1README,\s0 Copying, and Artistic,
or perlgpl and perlartistic).  Larry has good reasons for \s-1NOT\s0
just using the \s-1GNU GPL.\s0
.Sp
My personal recommendation, out of respect for Larry, Perl, and the
Perl community at large is to state something simply like:
.Sp
.Vb 3
\& Copyright (c) 1995 Your Name. All rights reserved.
\& This program is free software; you can redistribute it and/or
\& modify it under the same terms as Perl itself.
.Ve
.Sp
This statement should at least appear in the \s-1README\s0 file. You may
also wish to include it in a Copying file and your source files.
Remember to include the other words in addition to the Copyright.
.IP "\(bu" 4
Give the module a version/issue/release number.
.Sp
To be fully compatible with the Exporter and MakeMaker modules you
should store your module's version number in a non-my package
variable called \f(CW$VERSION\fR.  This should be a positive floating point
number with at least two digits after the decimal (i.e., hundredths,
e.g, \f(CW\*(C`$VERSION = "0.01"\*(C'\fR).  Don't use a \*(L"1.3.2\*(R" style version.
See Exporter for details.
.Sp
It may be handy to add a function or method to retrieve the number.
Use the number in announcements and archive file names when
releasing the module (ModuleName\-1.02.tar.Z).
See perldoc ExtUtils::MakeMaker.pm for details.
.IP "\(bu" 4
How to release and distribute a module.
.Sp
It's good idea to post an announcement of the availability of your
module (or the module itself if small) to the comp.lang.perl.announce
Usenet newsgroup.  This will at least ensure very wide once-off
distribution.
.Sp
If possible, register the module with \s-1CPAN. \s0 You should
include details of its location in your announcement.
.Sp
Some notes about ftp archives: Please use a long descriptive file
name that includes the version number. Most incoming directories
will not be readable/listable, i.e., you won't be able to see your
file after uploading it. Remember to send your email notification
message as soon as possible after uploading else your file may get
deleted automatically. Allow time for the file to be processed
and/or check the file has been processed before announcing its
location.
.Sp
\&\s-1FTP\s0 Archives for Perl Modules:
.Sp
Follow the instructions and links on:
.Sp
.Vb 2
\&   http://www.cpan.org/modules/00modlist.long.html
\&   http://www.cpan.org/modules/04pause.html
.Ve
.Sp
or upload to one of these sites:
.Sp
.Vb 2
\&   https://pause.kbx.de/pause/
\&   http://pause.perl.org/
.Ve
.Sp
and notify <modules@perl.org>.
.Sp
By using the \s-1WWW\s0 interface you can ask the Upload Server to mirror
your modules from your ftp or \s-1WWW\s0 site into your own directory on
\&\s-1CPAN\s0!
.Sp
Please remember to send me an updated entry for the Module list!
.IP "\(bu" 4
Take care when changing a released module.
.Sp
Always strive to remain compatible with previous released versions.
Otherwise try to add a mechanism to revert to the
old behavior if people rely on it.  Document incompatible changes.
.RE
.RS 4
.RE
.SS "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IX Subsection "Guidelines for Converting Perl 4 Library Scripts into Modules"
.IP "\(bu" 4
There is no requirement to convert anything.
.Sp
If it ain't broke, don't fix it! Perl 4 library scripts should
continue to work with no problems. You may need to make some minor
changes (like escaping non-array @'s in double quoted strings) but
there is no need to convert a .pl file into a Module for just that.
.IP "\(bu" 4
Consider the implications.
.Sp
All Perl applications that make use of the script will need to
be changed (slightly) if the script is converted into a module.  Is
it worth it unless you plan to make other changes at the same time?
.IP "\(bu" 4
Make the most of the opportunity.
.Sp
If you are going to convert the script to a module you can use the
opportunity to redesign the interface.  The guidelines for module
creation above include many of the issues you should consider.
.IP "\(bu" 4
The pl2pm utility will get you started.
.Sp
This utility will read *.pl files (given as parameters) and write
corresponding *.pm files. The pl2pm utilities does the following:
.RS 4
.IP "\(bu" 10
Adds the standard Module prologue lines
.IP "\(bu" 10
Converts package specifiers from ' to ::
.IP "\(bu" 10
Converts die(...) to croak(...)
.IP "\(bu" 10
Several other minor changes
.RE
.RS 4
.Sp
Being a mechanical process pl2pm is not bullet proof. The converted
code will need careful checking, especially any package statements.
Don't delete the original .pl file till the new .pm one works!
.RE
.SS "Guidelines for Reusing Application Code"
.IX Subsection "Guidelines for Reusing Application Code"
.IP "\(bu" 4
Complete applications rarely belong in the Perl Module Library.
.IP "\(bu" 4
Many applications contain some Perl code that could be reused.
.Sp
Help save the world! Share your code in a form that makes it easy
to reuse.
.IP "\(bu" 4
Break-out the reusable code into one or more separate module files.
.IP "\(bu" 4
Take the opportunity to reconsider and redesign the interfaces.
.IP "\(bu" 4
In some cases the 'application' can then be reduced to a small
.Sp
fragment of code built on top of the reusable modules. In these cases
the application could invoked as:
.Sp
.Vb 3
\&     % perl \-e \*(Aquse Module::Name; method(@ARGV)\*(Aq ...
\&or
\&     % perl \-mModule::Name ...    (in perl5.002 or higher)
.Ve
.SH "NOTE"
.IX Header "NOTE"
Perl does not enforce private and public parts of its modules as you may
have been used to in other languages like \*(C+, Ada, or Modula\-17.  Perl
doesn't have an infatuation with enforced privacy.  It would prefer
that you stayed out of its living room because you weren't invited, not
because it has a shotgun.
.PP
The module and its user have a contract, part of which is common law,
and part of which is \*(L"written\*(R".  Part of the common law contract is
that a module doesn't pollute any namespace it wasn't asked to.  The
written contract for the module (A.K.A. documentation) may make other
provisions.  But then you know when you \f(CW\*(C`use RedefineTheWorld\*(C'\fR that
you're redefining the world and willing to take the consequences.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodstyle.1                               0100644 0001750 0001750 00000066662 12566207442 023503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODSTYLE 1"
.TH PERLMODSTYLE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodstyle \- Perl module style guide
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This document attempts to describe the Perl Community's \*(L"best practice\*(R"
for writing Perl modules.  It extends the recommendations found in 
perlstyle , which should be considered required reading
before reading this document.
.PP
While this document is intended to be useful to all module authors, it is
particularly aimed at authors who wish to publish their modules on \s-1CPAN.\s0
.PP
The focus is on elements of style which are visible to the users of a 
module, rather than those parts which are only seen by the module's 
developers.  However, many of the guidelines presented in this document
can be extrapolated and applied successfully to a module's internals.
.PP
This document differs from perlnewmod in that it is a style guide
rather than a tutorial on creating \s-1CPAN\s0 modules.  It provides a
checklist against which modules can be compared to determine whether
they conform to best practice, without necessarily describing in detail
how to achieve this.
.PP
All the advice contained in this document has been gleaned from
extensive conversations with experienced \s-1CPAN\s0 authors and users.  Every
piece of advice given here is the result of previous mistakes.  This
information is here to help you avoid the same mistakes and the extra
work that would inevitably be required to fix them.
.PP
The first section of this document provides an itemized checklist; 
subsequent sections provide a more detailed discussion of the items on 
the list.  The final section, \*(L"Common Pitfalls\*(R", describes some of the 
most popular mistakes made by \s-1CPAN\s0 authors.
.SH "QUICK CHECKLIST"
.IX Header "QUICK CHECKLIST"
For more detail on each item in this checklist, see below.
.SS "Before you start"
.IX Subsection "Before you start"
.IP "\(bu" 4
Don't re-invent the wheel
.IP "\(bu" 4
Patch, extend or subclass an existing module where possible
.IP "\(bu" 4
Do one thing and do it well
.IP "\(bu" 4
Choose an appropriate name
.SS "The \s-1API\s0"
.IX Subsection "The API"
.IP "\(bu" 4
\&\s-1API\s0 should be understandable by the average programmer
.IP "\(bu" 4
Simple methods for simple tasks
.IP "\(bu" 4
Separate functionality from output
.IP "\(bu" 4
Consistent naming of subroutines or methods
.IP "\(bu" 4
Use named parameters (a hash or hashref) when there are more than two
parameters
.SS "Stability"
.IX Subsection "Stability"
.IP "\(bu" 4
Ensure your module works under \f(CW\*(C`use strict\*(C'\fR and \f(CW\*(C`\-w\*(C'\fR
.IP "\(bu" 4
Stable modules should maintain backwards compatibility
.SS "Documentation"
.IX Subsection "Documentation"
.IP "\(bu" 4
Write documentation in \s-1POD\s0
.IP "\(bu" 4
Document purpose, scope and target applications
.IP "\(bu" 4
Document each publically accessible method or subroutine, including params and return values
.IP "\(bu" 4
Give examples of use in your documentation
.IP "\(bu" 4
Provide a \s-1README\s0 file and perhaps also release notes, changelog, etc
.IP "\(bu" 4
Provide links to further information (\s-1URL,\s0 email)
.SS "Release considerations"
.IX Subsection "Release considerations"
.IP "\(bu" 4
Specify pre-requisites in Makefile.PL or Build.PL
.IP "\(bu" 4
Specify Perl version requirements with \f(CW\*(C`use\*(C'\fR
.IP "\(bu" 4
Include tests with your module
.IP "\(bu" 4
Choose a sensible and consistent version numbering scheme (X.YY is the common Perl module numbering scheme)
.IP "\(bu" 4
Increment the version number for every change, no matter how small
.IP "\(bu" 4
Package the module using \*(L"make dist\*(R"
.IP "\(bu" 4
Choose an appropriate license (GPL/Artistic is a good default)
.SH "BEFORE YOU START WRITING A MODULE"
.IX Header "BEFORE YOU START WRITING A MODULE"
Try not to launch headlong into developing your module without spending
some time thinking first.  A little forethought may save you a vast
amount of effort later on.
.SS "Has it been done before?"
.IX Subsection "Has it been done before?"
You may not even need to write the module.  Check whether it's already 
been done in Perl, and avoid re-inventing the wheel unless you have a 
good reason.
.PP
Good places to look for pre-existing modules include
http://search.cpan.org/ and asking on modules@perl.org
.PP
If an existing module \fBalmost\fR does what you want, consider writing a
patch, writing a subclass, or otherwise extending the existing module
rather than rewriting it.
.SS "Do one thing and do it well"
.IX Subsection "Do one thing and do it well"
At the risk of stating the obvious, modules are intended to be modular.
A Perl developer should be able to use modules to put together the
building blocks of their application.  However, it's important that the
blocks are the right shape, and that the developer shouldn't have to use
a big block when all they need is a small one.
.PP
Your module should have a clearly defined scope which is no longer than
a single sentence.  Can your module be broken down into a family of
related modules?
.PP
Bad example:
.PP
\&\*(L"FooBar.pm provides an implementation of the \s-1FOO\s0 protocol and the
related \s-1BAR\s0 standard.\*(R"
.PP
Good example:
.PP
\&\*(L"Foo.pm provides an implementation of the \s-1FOO\s0 protocol.  Bar.pm
implements the related \s-1BAR\s0 protocol.\*(R"
.PP
This means that if a developer only needs a module for the \s-1BAR\s0 standard,
they should not be forced to install libraries for \s-1FOO\s0 as well.
.SS "What's in a name?"
.IX Subsection "What's in a name?"
Make sure you choose an appropriate name for your module early on.  This
will help people find and remember your module, and make programming
with your module more intuitive.
.PP
When naming your module, consider the following:
.IP "\(bu" 4
Be descriptive (i.e. accurately describes the purpose of the module).
.IP "\(bu" 4
Be consistent with existing modules.
.IP "\(bu" 4
Reflect the functionality of the module, not the implementation.
.IP "\(bu" 4
Avoid starting a new top-level hierarchy, especially if a suitable
hierarchy already exists under which you could place your module.
.PP
You should contact modules@perl.org to ask them about your module name
before publishing your module.  You should also try to ask people who 
are already familiar with the module's application domain and the \s-1CPAN\s0
naming system.  Authors of similar modules, or modules with similar
names, may be a good place to start.
.SH "DESIGNING AND WRITING YOUR MODULE"
.IX Header "DESIGNING AND WRITING YOUR MODULE"
Considerations for module design and coding:
.SS "To \s-1OO\s0 or not to \s-1OO\s0?"
.IX Subsection "To OO or not to OO?"
Your module may be object oriented (\s-1OO\s0) or not, or it may have both kinds 
of interfaces available.  There are pros and cons of each technique, which 
should be considered when you design your \s-1API.\s0
.PP
In \fIPerl Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is the
right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.PP
Think carefully about whether \s-1OO\s0 is appropriate for your module.
Gratuitous object orientation results in complex APIs which are
difficult for the average module user to understand or use.
.SS "Designing your \s-1API\s0"
.IX Subsection "Designing your API"
Your interfaces should be understandable by an average Perl programmer.  
The following guidelines may help you judge whether your \s-1API\s0 is
sufficiently straightforward:
.IP "Write simple routines to do simple things." 4
.IX Item "Write simple routines to do simple things."
It's better to have numerous simple routines than a few monolithic ones.
If your routine changes its behaviour significantly based on its
arguments, it's a sign that you should have two (or more) separate
routines.
.IP "Separate functionality from output." 4
.IX Item "Separate functionality from output."
Return your results in the most generic form possible and allow the user 
to choose how to use them.  The most generic form possible is usually a
Perl data structure which can then be used to generate a text report,
\&\s-1HTML, XML,\s0 a database query, or whatever else your users require.
.Sp
If your routine iterates through some kind of list (such as a list of
files, or records in a database) you may consider providing a callback
so that users can manipulate each element of the list in turn.
File::Find provides an example of this with its 
\&\f(CW\*(C`find(\e&wanted, $dir)\*(C'\fR syntax.
.IP "Provide sensible shortcuts and defaults." 4
.IX Item "Provide sensible shortcuts and defaults."
Don't require every module user to jump through the same hoops to achieve a
simple result.  You can always include optional parameters or routines for 
more complex or non-standard behaviour.  If most of your users have to
type a few almost identical lines of code when they start using your
module, it's a sign that you should have made that behaviour a default.
Another good indicator that you should use defaults is if most of your 
users call your routines with the same arguments.
.IP "Naming conventions" 4
.IX Item "Naming conventions"
Your naming should be consistent.  For instance, it's better to have:
.Sp
.Vb 3
\&        display_day();
\&        display_week();
\&        display_year();
.Ve
.Sp
than
.Sp
.Vb 3
\&        display_day();
\&        week_display();
\&        show_year();
.Ve
.Sp
This applies equally to method names, parameter names, and anything else
which is visible to the user (and most things that aren't!)
.IP "Parameter passing" 4
.IX Item "Parameter passing"
Use named parameters. It's easier to use a hash like this:
.Sp
.Vb 5
\&    $obj\->do_something(
\&            name => "wibble",
\&            type => "text",
\&            size => 1024,
\&    );
.Ve
.Sp
\&... than to have a long list of unnamed parameters like this:
.Sp
.Vb 1
\&    $obj\->do_something("wibble", "text", 1024);
.Ve
.Sp
While the list of arguments might work fine for one, two or even three
arguments, any more arguments become hard for the module user to
remember, and hard for the module author to manage.  If you want to add
a new parameter you will have to add it to the end of the list for
backward compatibility, and this will probably make your list order
unintuitive.  Also, if many elements may be undefined you may see the
following unattractive method calls:
.Sp
.Vb 1
\&    $obj\->do_something(undef, undef, undef, undef, undef, undef, 1024);
.Ve
.Sp
Provide sensible defaults for parameters which have them.  Don't make
your users specify parameters which will almost always be the same.
.Sp
The issue of whether to pass the arguments in a hash or a hashref is
largely a matter of personal style.
.Sp
The use of hash keys starting with a hyphen (\f(CW\*(C`\-name\*(C'\fR) or entirely in 
upper case (\f(CW\*(C`NAME\*(C'\fR) is a relic of older versions of Perl in which
ordinary lower case strings were not handled correctly by the \f(CW\*(C`=>\*(C'\fR
operator.  While some modules retain uppercase or hyphenated argument
keys for historical reasons or as a matter of personal style, most new
modules should use simple lower case keys.  Whatever you choose, be
consistent!
.SS "Strictness and warnings"
.IX Subsection "Strictness and warnings"
Your module should run successfully under the strict pragma and should
run without generating any warnings.  Your module should also handle 
taint-checking where appropriate, though this can cause difficulties in
many cases.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
Modules which are \*(L"stable\*(R" should not break backwards compatibility
without at least a long transition phase and a major change in version
number.
.SS "Error handling and messages"
.IX Subsection "Error handling and messages"
When your module encounters an error it should do one or more of:
.IP "\(bu" 4
Return an undefined value.
.IP "\(bu" 4
set \f(CW$Module::errstr\fR or similar (\f(CW\*(C`errstr\*(C'\fR is a common name used by
\&\s-1DBI\s0 and other popular modules; if you choose something else, be sure to
document it clearly).
.IP "\(bu" 4
\&\f(CW\*(C`warn()\*(C'\fR or \f(CW\*(C`carp()\*(C'\fR a message to \s-1STDERR.  \s0
.IP "\(bu" 4
\&\f(CW\*(C`croak()\*(C'\fR only when your module absolutely cannot figure out what to
do.  (\f(CW\*(C`croak()\*(C'\fR is a better version of \f(CW\*(C`die()\*(C'\fR for use within 
modules, which reports its errors from the perspective of the caller.  
See Carp for details of \f(CW\*(C`croak()\*(C'\fR, \f(CW\*(C`carp()\*(C'\fR and other useful
routines.)
.IP "\(bu" 4
As an alternative to the above, you may prefer to throw exceptions using 
the Error module.
.PP
Configurable error handling can be very useful to your users.  Consider
offering a choice of levels for warning and debug messages, an option to
send messages to a separate file, a way to specify an error-handling
routine, or other such features.  Be sure to default all these options
to the commonest use.
.SH "DOCUMENTING YOUR MODULE"
.IX Header "DOCUMENTING YOUR MODULE"
.SS "\s-1POD\s0"
.IX Subsection "POD"
Your module should include documentation aimed at Perl developers.
You should use Perl's \*(L"plain old documentation\*(R" (\s-1POD\s0) for your general 
technical documentation, though you may wish to write additional
documentation (white papers, tutorials, etc) in some other format.  
You need to cover the following subjects:
.IP "\(bu" 4
A synopsis of the common uses of the module
.IP "\(bu" 4
The purpose, scope and target applications of your module
.IP "\(bu" 4
Use of each publically accessible method or subroutine, including
parameters and return values
.IP "\(bu" 4
Examples of use
.IP "\(bu" 4
Sources of further information
.IP "\(bu" 4
A contact email address for the author/maintainer
.PP
The level of detail in Perl module documentation generally goes from
less detailed to more detailed.  Your \s-1SYNOPSIS\s0 section should contain a
minimal example of use (perhaps as little as one line of code; skip the
unusual use cases or anything not needed by most users); the
\&\s-1DESCRIPTION\s0 should describe your module in broad terms, generally in
just a few paragraphs; more detail of the module's routines or methods,
lengthy code examples, or other in-depth material should be given in 
subsequent sections.
.PP
Ideally, someone who's slightly familiar with your module should be able
to refresh their memory without hitting \*(L"page down\*(R".  As your reader
continues through the document, they should receive a progressively
greater amount of knowledge.
.PP
The recommended order of sections in Perl module documentation is:
.IP "\(bu" 4
\&\s-1NAME\s0
.IP "\(bu" 4
\&\s-1SYNOPSIS\s0
.IP "\(bu" 4
\&\s-1DESCRIPTION\s0
.IP "\(bu" 4
One or more sections or subsections giving greater detail of available 
methods and routines and any other relevant information.
.IP "\(bu" 4
BUGS/CAVEATS/etc
.IP "\(bu" 4
\&\s-1AUTHOR\s0
.IP "\(bu" 4
\&\s-1SEE ALSO\s0
.IP "\(bu" 4
\&\s-1COPYRIGHT\s0 and \s-1LICENSE\s0
.PP
Keep your documentation near the code it documents (\*(L"inline\*(R"
documentation).  Include \s-1POD\s0 for a given method right above that 
method's subroutine.  This makes it easier to keep the documentation up
to date, and avoids having to document each piece of code twice (once in
\&\s-1POD\s0 and once in comments).
.SS "\s-1README, INSTALL,\s0 release notes, changelogs"
.IX Subsection "README, INSTALL, release notes, changelogs"
Your module should also include a \s-1README\s0 file describing the module and
giving pointers to further information (website, author email).
.PP
An \s-1INSTALL\s0 file should be included, and should contain simple installation 
instructions. When using ExtUtils::MakeMaker this will usually be:
.IP "perl Makefile.PL" 4
.IX Item "perl Makefile.PL"
.PD 0
.IP "make" 4
.IX Item "make"
.IP "make test" 4
.IX Item "make test"
.IP "make install" 4
.IX Item "make install"
.PD
.PP
When using Module::Build, this will usually be:
.IP "perl Build.PL" 4
.IX Item "perl Build.PL"
.PD 0
.IP "perl Build" 4
.IX Item "perl Build"
.IP "perl Build test" 4
.IX Item "perl Build test"
.IP "perl Build install" 4
.IX Item "perl Build install"
.PD
.PP
Release notes or changelogs should be produced for each release of your
software describing user-visible changes to your module, in terms
relevant to the user.
.SH "RELEASE CONSIDERATIONS"
.IX Header "RELEASE CONSIDERATIONS"
.SS "Version numbering"
.IX Subsection "Version numbering"
Version numbers should indicate at least major and minor releases, and
possibly sub-minor releases.  A major release is one in which most of
the functionality has changed, or in which major new functionality is
added.  A minor release is one in which a small amount of functionality
has been added or changed.  Sub-minor version numbers are usually used
for changes which do not affect functionality, such as documentation
patches.
.PP
The most common \s-1CPAN\s0 version numbering scheme looks like this:
.PP
.Vb 1
\&    1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32
.Ve
.PP
A correct \s-1CPAN\s0 version number is a floating point number with at least 
2 digits after the decimal. You can test whether it conforms to \s-1CPAN\s0 by 
using
.PP
.Vb 1
\&    perl \-MExtUtils::MakeMaker \-le \*(Aqprint MM\->parse_version(shift)\*(Aq \*(AqFoo.pm\*(Aq
.Ve
.PP
If you want to release a 'beta' or 'alpha' version of a module but
don't want \s-1CPAN\s0.pm to list it as most recent use an '_' after the
regular version number followed by at least 2 digits, eg. 1.20_01. If
you do this, the following idiom is recommended:
.PP
.Vb 3
\&  $VERSION = "1.12_01";
\&  $XS_VERSION = $VERSION; # only needed if you have XS code
\&  $VERSION = eval $VERSION;
.Ve
.PP
With that trick MakeMaker will only read the first line and thus read
the underscore, while the perl interpreter will evaluate the \f(CW$VERSION\fR
and convert the string into a number. Later operations that treat
\&\f(CW$VERSION\fR as a number will then be able to do so without provoking a
warning about \f(CW$VERSION\fR not being a number.
.PP
Never release anything (even a one-word documentation patch) without
incrementing the number.  Even a one-word documentation patch should
result in a change in version at the sub-minor level.
.SS "Pre-requisites"
.IX Subsection "Pre-requisites"
Module authors should carefully consider whether to rely on other
modules, and which modules to rely on.
.PP
Most importantly, choose modules which are as stable as possible.  In
order of preference:
.IP "\(bu" 4
Core Perl modules
.IP "\(bu" 4
Stable \s-1CPAN\s0 modules
.IP "\(bu" 4
Unstable \s-1CPAN\s0 modules
.IP "\(bu" 4
Modules not available from \s-1CPAN\s0
.PP
Specify version requirements for other Perl modules in the
pre-requisites in your Makefile.PL or Build.PL.
.PP
Be sure to specify Perl version requirements both in Makefile.PL or
Build.PL and with \f(CW\*(C`require 5.6.1\*(C'\fR or similar. See the section on
\&\f(CW\*(C`use VERSION\*(C'\fR of \*(L"require\*(R" in perlfunc for details.
.SS "Testing"
.IX Subsection "Testing"
All modules should be tested before distribution (using \*(L"make disttest\*(R"),
and the tests should also be available to people installing the modules 
(using \*(L"make test\*(R").  
For Module::Build you would use the \f(CW\*(C`make test\*(C'\fR equivalent \f(CW\*(C`perl Build test\*(C'\fR.
.PP
The importance of these tests is proportional to the alleged stability of a 
module. A module which purports to be stable or which hopes to achieve wide 
use should adhere to as strict a testing regime as possible.
.PP
Useful modules to help you write tests (with minimum impact on your 
development process or your time) include Test::Simple, Carp::Assert 
and Test::Inline.
For more sophisticated test suites there are Test::More and Test::MockObject.
.SS "Packaging"
.IX Subsection "Packaging"
Modules should be packaged using one of the standard packaging tools.
Currently you have the choice between ExtUtils::MakeMaker and the
more platform independent Module::Build, allowing modules to be installed in a
consistent manner.
When using ExtUtils::MakeMaker, you can use \*(L"make dist\*(R" to create your
package. Tools exist to help you to build your module in a MakeMaker-friendly
style. These include ExtUtils::ModuleMaker and h2xs.  See also perlnewmod.
.SS "Licensing"
.IX Subsection "Licensing"
Make sure that your module has a license, and that the full text of it
is included in the distribution (unless it's a common one and the terms
of the license don't require you to include it).
.PP
If you don't know what license to use, dual licensing under the \s-1GPL\s0
and Artistic licenses (the same as Perl itself) is a good idea.
See perlgpl and perlartistic.
.SH "COMMON PITFALLS"
.IX Header "COMMON PITFALLS"
.SS "Reinventing the wheel"
.IX Subsection "Reinventing the wheel"
There are certain application spaces which are already very, very well
served by \s-1CPAN. \s0 One example is templating systems, another is date and
time modules, and there are many more.  While it is a rite of passage to
write your own version of these things, please consider carefully
whether the Perl world really needs you to publish it.
.SS "Trying to do too much"
.IX Subsection "Trying to do too much"
Your module will be part of a developer's toolkit.  It will not, in
itself, form the \fBentire\fR toolkit.  It's tempting to add extra features
until your code is a monolithic system rather than a set of modular
building blocks.
.SS "Inappropriate documentation"
.IX Subsection "Inappropriate documentation"
Don't fall into the trap of writing for the wrong audience.  Your
primary audience is a reasonably experienced developer with at least 
a moderate understanding of your module's application domain, who's just 
downloaded your module and wants to start using it as quickly as possible.
.PP
Tutorials, end-user documentation, research papers, FAQs etc are not 
appropriate in a module's main documentation.  If you really want to 
write these, include them as sub-documents such as \f(CW\*(C`My::Module::Tutorial\*(C'\fR or
\&\f(CW\*(C`My::Module::FAQ\*(C'\fR and provide a link in the \s-1SEE ALSO\s0 section of the
main documentation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "perlstyle" 4
.IX Item "perlstyle"
General Perl style guide
.IP "perlnewmod" 4
.IX Item "perlnewmod"
How to create a new module
.IP "perlpod" 4
.IX Item "perlpod"
\&\s-1POD\s0 documentation
.IP "podchecker" 4
.IX Item "podchecker"
Verifies your \s-1POD\s0's correctness
.IP "Packaging Tools" 4
.IX Item "Packaging Tools"
ExtUtils::MakeMaker, Module::Build
.IP "Testing tools" 4
.IX Item "Testing tools"
Test::Simple, Test::Inline, Carp::Assert, Test::More, Test::MockObject
.IP "http://pause.perl.org/" 4
.IX Item "http://pause.perl.org/"
Perl Authors Upload Server.  Contains links to information for module
authors.
.IP "Any good book on software engineering" 4
.IX Item "Any good book on software engineering"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kirrily \*(L"Skud\*(R" Robert <skud@cpan.org>
                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodstyle5.16.1                           0100644 0001750 0001750 00000066373 12566207421 024011  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODSTYLE 1"
.TH PERLMODSTYLE 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodstyle \- Perl module style guide
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This document attempts to describe the Perl Community's \*(L"best practice\*(R"
for writing Perl modules.  It extends the recommendations found in 
perlstyle , which should be considered required reading
before reading this document.
.PP
While this document is intended to be useful to all module authors, it is
particularly aimed at authors who wish to publish their modules on \s-1CPAN\s0.
.PP
The focus is on elements of style which are visible to the users of a 
module, rather than those parts which are only seen by the module's 
developers.  However, many of the guidelines presented in this document
can be extrapolated and applied successfully to a module's internals.
.PP
This document differs from perlnewmod in that it is a style guide
rather than a tutorial on creating \s-1CPAN\s0 modules.  It provides a
checklist against which modules can be compared to determine whether
they conform to best practice, without necessarily describing in detail
how to achieve this.
.PP
All the advice contained in this document has been gleaned from
extensive conversations with experienced \s-1CPAN\s0 authors and users.  Every
piece of advice given here is the result of previous mistakes.  This
information is here to help you avoid the same mistakes and the extra
work that would inevitably be required to fix them.
.PP
The first section of this document provides an itemized checklist; 
subsequent sections provide a more detailed discussion of the items on 
the list.  The final section, \*(L"Common Pitfalls\*(R", describes some of the 
most popular mistakes made by \s-1CPAN\s0 authors.
.SH "QUICK CHECKLIST"
.IX Header "QUICK CHECKLIST"
For more detail on each item in this checklist, see below.
.SS "Before you start"
.IX Subsection "Before you start"
.IP "\(bu" 4
Don't re-invent the wheel
.IP "\(bu" 4
Patch, extend or subclass an existing module where possible
.IP "\(bu" 4
Do one thing and do it well
.IP "\(bu" 4
Choose an appropriate name
.SS "The \s-1API\s0"
.IX Subsection "The API"
.IP "\(bu" 4
\&\s-1API\s0 should be understandable by the average programmer
.IP "\(bu" 4
Simple methods for simple tasks
.IP "\(bu" 4
Separate functionality from output
.IP "\(bu" 4
Consistent naming of subroutines or methods
.IP "\(bu" 4
Use named parameters (a hash or hashref) when there are more than two
parameters
.SS "Stability"
.IX Subsection "Stability"
.IP "\(bu" 4
Ensure your module works under \f(CW\*(C`use strict\*(C'\fR and \f(CW\*(C`\-w\*(C'\fR
.IP "\(bu" 4
Stable modules should maintain backwards compatibility
.SS "Documentation"
.IX Subsection "Documentation"
.IP "\(bu" 4
Write documentation in \s-1POD\s0
.IP "\(bu" 4
Document purpose, scope and target applications
.IP "\(bu" 4
Document each publically accessible method or subroutine, including params and return values
.IP "\(bu" 4
Give examples of use in your documentation
.IP "\(bu" 4
Provide a \s-1README\s0 file and perhaps also release notes, changelog, etc
.IP "\(bu" 4
Provide links to further information (\s-1URL\s0, email)
.SS "Release considerations"
.IX Subsection "Release considerations"
.IP "\(bu" 4
Specify pre-requisites in Makefile.PL or Build.PL
.IP "\(bu" 4
Specify Perl version requirements with \f(CW\*(C`use\*(C'\fR
.IP "\(bu" 4
Include tests with your module
.IP "\(bu" 4
Choose a sensible and consistent version numbering scheme (X.YY is the common Perl module numbering scheme)
.IP "\(bu" 4
Increment the version number for every change, no matter how small
.IP "\(bu" 4
Package the module using \*(L"make dist\*(R"
.IP "\(bu" 4
Choose an appropriate license (GPL/Artistic is a good default)
.SH "BEFORE YOU START WRITING A MODULE"
.IX Header "BEFORE YOU START WRITING A MODULE"
Try not to launch headlong into developing your module without spending
some time thinking first.  A little forethought may save you a vast
amount of effort later on.
.SS "Has it been done before?"
.IX Subsection "Has it been done before?"
You may not even need to write the module.  Check whether it's already 
been done in Perl, and avoid re-inventing the wheel unless you have a 
good reason.
.PP
Good places to look for pre-existing modules include
http://search.cpan.org/ and asking on modules@perl.org
.PP
If an existing module \fBalmost\fR does what you want, consider writing a
patch, writing a subclass, or otherwise extending the existing module
rather than rewriting it.
.SS "Do one thing and do it well"
.IX Subsection "Do one thing and do it well"
At the risk of stating the obvious, modules are intended to be modular.
A Perl developer should be able to use modules to put together the
building blocks of their application.  However, it's important that the
blocks are the right shape, and that the developer shouldn't have to use
a big block when all they need is a small one.
.PP
Your module should have a clearly defined scope which is no longer than
a single sentence.  Can your module be broken down into a family of
related modules?
.PP
Bad example:
.PP
\&\*(L"FooBar.pm provides an implementation of the \s-1FOO\s0 protocol and the
related \s-1BAR\s0 standard.\*(R"
.PP
Good example:
.PP
\&\*(L"Foo.pm provides an implementation of the \s-1FOO\s0 protocol.  Bar.pm
implements the related \s-1BAR\s0 protocol.\*(R"
.PP
This means that if a developer only needs a module for the \s-1BAR\s0 standard,
they should not be forced to install libraries for \s-1FOO\s0 as well.
.SS "What's in a name?"
.IX Subsection "What's in a name?"
Make sure you choose an appropriate name for your module early on.  This
will help people find and remember your module, and make programming
with your module more intuitive.
.PP
When naming your module, consider the following:
.IP "\(bu" 4
Be descriptive (i.e. accurately describes the purpose of the module).
.IP "\(bu" 4
Be consistent with existing modules.
.IP "\(bu" 4
Reflect the functionality of the module, not the implementation.
.IP "\(bu" 4
Avoid starting a new top-level hierarchy, especially if a suitable
hierarchy already exists under which you could place your module.
.PP
You should contact modules@perl.org to ask them about your module name
before publishing your module.  You should also try to ask people who 
are already familiar with the module's application domain and the \s-1CPAN\s0
naming system.  Authors of similar modules, or modules with similar
names, may be a good place to start.
.SH "DESIGNING AND WRITING YOUR MODULE"
.IX Header "DESIGNING AND WRITING YOUR MODULE"
Considerations for module design and coding:
.SS "To \s-1OO\s0 or not to \s-1OO\s0?"
.IX Subsection "To OO or not to OO?"
Your module may be object oriented (\s-1OO\s0) or not, or it may have both kinds 
of interfaces available.  There are pros and cons of each technique, which 
should be considered when you design your \s-1API\s0.
.PP
In \fIPerl Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is the
right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.PP
Think carefully about whether \s-1OO\s0 is appropriate for your module.
Gratuitous object orientation results in complex APIs which are
difficult for the average module user to understand or use.
.SS "Designing your \s-1API\s0"
.IX Subsection "Designing your API"
Your interfaces should be understandable by an average Perl programmer.  
The following guidelines may help you judge whether your \s-1API\s0 is
sufficiently straightforward:
.IP "Write simple routines to do simple things." 4
.IX Item "Write simple routines to do simple things."
It's better to have numerous simple routines than a few monolithic ones.
If your routine changes its behaviour significantly based on its
arguments, it's a sign that you should have two (or more) separate
routines.
.IP "Separate functionality from output." 4
.IX Item "Separate functionality from output."
Return your results in the most generic form possible and allow the user 
to choose how to use them.  The most generic form possible is usually a
Perl data structure which can then be used to generate a text report,
\&\s-1HTML\s0, \s-1XML\s0, a database query, or whatever else your users require.
.Sp
If your routine iterates through some kind of list (such as a list of
files, or records in a database) you may consider providing a callback
so that users can manipulate each element of the list in turn.
File::Find provides an example of this with its 
\&\f(CW\*(C`find(\e&wanted, $dir)\*(C'\fR syntax.
.IP "Provide sensible shortcuts and defaults." 4
.IX Item "Provide sensible shortcuts and defaults."
Don't require every module user to jump through the same hoops to achieve a
simple result.  You can always include optional parameters or routines for 
more complex or non-standard behaviour.  If most of your users have to
type a few almost identical lines of code when they start using your
module, it's a sign that you should have made that behaviour a default.
Another good indicator that you should use defaults is if most of your 
users call your routines with the same arguments.
.IP "Naming conventions" 4
.IX Item "Naming conventions"
Your naming should be consistent.  For instance, it's better to have:
.Sp
.Vb 3
\&        display_day();
\&        display_week();
\&        display_year();
.Ve
.Sp
than
.Sp
.Vb 3
\&        display_day();
\&        week_display();
\&        show_year();
.Ve
.Sp
This applies equally to method names, parameter names, and anything else
which is visible to the user (and most things that aren't!)
.IP "Parameter passing" 4
.IX Item "Parameter passing"
Use named parameters. It's easier to use a hash like this:
.Sp
.Vb 5
\&    $obj\->do_something(
\&            name => "wibble",
\&            type => "text",
\&            size => 1024,
\&    );
.Ve
.Sp
\&... than to have a long list of unnamed parameters like this:
.Sp
.Vb 1
\&    $obj\->do_something("wibble", "text", 1024);
.Ve
.Sp
While the list of arguments might work fine for one, two or even three
arguments, any more arguments become hard for the module user to
remember, and hard for the module author to manage.  If you want to add
a new parameter you will have to add it to the end of the list for
backward compatibility, and this will probably make your list order
unintuitive.  Also, if many elements may be undefined you may see the
following unattractive method calls:
.Sp
.Vb 1
\&    $obj\->do_something(undef, undef, undef, undef, undef, undef, 1024);
.Ve
.Sp
Provide sensible defaults for parameters which have them.  Don't make
your users specify parameters which will almost always be the same.
.Sp
The issue of whether to pass the arguments in a hash or a hashref is
largely a matter of personal style.
.Sp
The use of hash keys starting with a hyphen (\f(CW\*(C`\-name\*(C'\fR) or entirely in 
upper case (\f(CW\*(C`NAME\*(C'\fR) is a relic of older versions of Perl in which
ordinary lower case strings were not handled correctly by the \f(CW\*(C`=>\*(C'\fR
operator.  While some modules retain uppercase or hyphenated argument
keys for historical reasons or as a matter of personal style, most new
modules should use simple lower case keys.  Whatever you choose, be
consistent!
.SS "Strictness and warnings"
.IX Subsection "Strictness and warnings"
Your module should run successfully under the strict pragma and should
run without generating any warnings.  Your module should also handle 
taint-checking where appropriate, though this can cause difficulties in
many cases.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
Modules which are \*(L"stable\*(R" should not break backwards compatibility
without at least a long transition phase and a major change in version
number.
.SS "Error handling and messages"
.IX Subsection "Error handling and messages"
When your module encounters an error it should do one or more of:
.IP "\(bu" 4
Return an undefined value.
.IP "\(bu" 4
set \f(CW$Module::errstr\fR or similar (\f(CW\*(C`errstr\*(C'\fR is a common name used by
\&\s-1DBI\s0 and other popular modules; if you choose something else, be sure to
document it clearly).
.IP "\(bu" 4
\&\f(CW\*(C`warn()\*(C'\fR or \f(CW\*(C`carp()\*(C'\fR a message to \s-1STDERR\s0.
.IP "\(bu" 4
\&\f(CW\*(C`croak()\*(C'\fR only when your module absolutely cannot figure out what to
do.  (\f(CW\*(C`croak()\*(C'\fR is a better version of \f(CW\*(C`die()\*(C'\fR for use within 
modules, which reports its errors from the perspective of the caller.  
See Carp for details of \f(CW\*(C`croak()\*(C'\fR, \f(CW\*(C`carp()\*(C'\fR and other useful
routines.)
.IP "\(bu" 4
As an alternative to the above, you may prefer to throw exceptions using 
the Error module.
.PP
Configurable error handling can be very useful to your users.  Consider
offering a choice of levels for warning and debug messages, an option to
send messages to a separate file, a way to specify an error-handling
routine, or other such features.  Be sure to default all these options
to the commonest use.
.SH "DOCUMENTING YOUR MODULE"
.IX Header "DOCUMENTING YOUR MODULE"
.SS "\s-1POD\s0"
.IX Subsection "POD"
Your module should include documentation aimed at Perl developers.
You should use Perl's \*(L"plain old documentation\*(R" (\s-1POD\s0) for your general 
technical documentation, though you may wish to write additional
documentation (white papers, tutorials, etc) in some other format.  
You need to cover the following subjects:
.IP "\(bu" 4
A synopsis of the common uses of the module
.IP "\(bu" 4
The purpose, scope and target applications of your module
.IP "\(bu" 4
Use of each publically accessible method or subroutine, including
parameters and return values
.IP "\(bu" 4
Examples of use
.IP "\(bu" 4
Sources of further information
.IP "\(bu" 4
A contact email address for the author/maintainer
.PP
The level of detail in Perl module documentation generally goes from
less detailed to more detailed.  Your \s-1SYNOPSIS\s0 section should contain a
minimal example of use (perhaps as little as one line of code; skip the
unusual use cases or anything not needed by most users); the
\&\s-1DESCRIPTION\s0 should describe your module in broad terms, generally in
just a few paragraphs; more detail of the module's routines or methods,
lengthy code examples, or other in-depth material should be given in 
subsequent sections.
.PP
Ideally, someone who's slightly familiar with your module should be able
to refresh their memory without hitting \*(L"page down\*(R".  As your reader
continues through the document, they should receive a progressively
greater amount of knowledge.
.PP
The recommended order of sections in Perl module documentation is:
.IP "\(bu" 4
\&\s-1NAME\s0
.IP "\(bu" 4
\&\s-1SYNOPSIS\s0
.IP "\(bu" 4
\&\s-1DESCRIPTION\s0
.IP "\(bu" 4
One or more sections or subsections giving greater detail of available 
methods and routines and any other relevant information.
.IP "\(bu" 4
BUGS/CAVEATS/etc
.IP "\(bu" 4
\&\s-1AUTHOR\s0
.IP "\(bu" 4
\&\s-1SEE\s0 \s-1ALSO\s0
.IP "\(bu" 4
\&\s-1COPYRIGHT\s0 and \s-1LICENSE\s0
.PP
Keep your documentation near the code it documents (\*(L"inline\*(R"
documentation).  Include \s-1POD\s0 for a given method right above that 
method's subroutine.  This makes it easier to keep the documentation up
to date, and avoids having to document each piece of code twice (once in
\&\s-1POD\s0 and once in comments).
.SS "\s-1README\s0, \s-1INSTALL\s0, release notes, changelogs"
.IX Subsection "README, INSTALL, release notes, changelogs"
Your module should also include a \s-1README\s0 file describing the module and
giving pointers to further information (website, author email).
.PP
An \s-1INSTALL\s0 file should be included, and should contain simple installation 
instructions. When using ExtUtils::MakeMaker this will usually be:
.IP "perl Makefile.PL" 4
.IX Item "perl Makefile.PL"
.PD 0
.IP "make" 4
.IX Item "make"
.IP "make test" 4
.IX Item "make test"
.IP "make install" 4
.IX Item "make install"
.PD
.PP
When using Module::Build, this will usually be:
.IP "perl Build.PL" 4
.IX Item "perl Build.PL"
.PD 0
.IP "perl Build" 4
.IX Item "perl Build"
.IP "perl Build test" 4
.IX Item "perl Build test"
.IP "perl Build install" 4
.IX Item "perl Build install"
.PD
.PP
Release notes or changelogs should be produced for each release of your
software describing user-visible changes to your module, in terms
relevant to the user.
.SH "RELEASE CONSIDERATIONS"
.IX Header "RELEASE CONSIDERATIONS"
.SS "Version numbering"
.IX Subsection "Version numbering"
Version numbers should indicate at least major and minor releases, and
possibly sub-minor releases.  A major release is one in which most of
the functionality has changed, or in which major new functionality is
added.  A minor release is one in which a small amount of functionality
has been added or changed.  Sub-minor version numbers are usually used
for changes which do not affect functionality, such as documentation
patches.
.PP
The most common \s-1CPAN\s0 version numbering scheme looks like this:
.PP
.Vb 1
\&    1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32
.Ve
.PP
A correct \s-1CPAN\s0 version number is a floating point number with at least 
2 digits after the decimal. You can test whether it conforms to \s-1CPAN\s0 by 
using
.PP
.Vb 1
\&    perl \-MExtUtils::MakeMaker \-le \*(Aqprint MM\->parse_version(shift)\*(Aq \*(AqFoo.pm\*(Aq
.Ve
.PP
If you want to release a 'beta' or 'alpha' version of a module but
don't want \s-1CPAN\s0.pm to list it as most recent use an '_' after the
regular version number followed by at least 2 digits, eg. 1.20_01. If
you do this, the following idiom is recommended:
.PP
.Vb 3
\&  $VERSION = "1.12_01";
\&  $XS_VERSION = $VERSION; # only needed if you have XS code
\&  $VERSION = eval $VERSION;
.Ve
.PP
With that trick MakeMaker will only read the first line and thus read
the underscore, while the perl interpreter will evaluate the \f(CW$VERSION\fR
and convert the string into a number. Later operations that treat
\&\f(CW$VERSION\fR as a number will then be able to do so without provoking a
warning about \f(CW$VERSION\fR not being a number.
.PP
Never release anything (even a one-word documentation patch) without
incrementing the number.  Even a one-word documentation patch should
result in a change in version at the sub-minor level.
.SS "Pre-requisites"
.IX Subsection "Pre-requisites"
Module authors should carefully consider whether to rely on other
modules, and which modules to rely on.
.PP
Most importantly, choose modules which are as stable as possible.  In
order of preference:
.IP "\(bu" 4
Core Perl modules
.IP "\(bu" 4
Stable \s-1CPAN\s0 modules
.IP "\(bu" 4
Unstable \s-1CPAN\s0 modules
.IP "\(bu" 4
Modules not available from \s-1CPAN\s0
.PP
Specify version requirements for other Perl modules in the
pre-requisites in your Makefile.PL or Build.PL.
.PP
Be sure to specify Perl version requirements both in Makefile.PL or
Build.PL and with \f(CW\*(C`require 5.6.1\*(C'\fR or similar. See the section on
\&\f(CW\*(C`use VERSION\*(C'\fR of \*(L"require\*(R" in perlfunc for details.
.SS "Testing"
.IX Subsection "Testing"
All modules should be tested before distribution (using \*(L"make disttest\*(R"),
and the tests should also be available to people installing the modules 
(using \*(L"make test\*(R").  
For Module::Build you would use the \f(CW\*(C`make test\*(C'\fR equivalent \f(CW\*(C`perl Build test\*(C'\fR.
.PP
The importance of these tests is proportional to the alleged stability of a 
module. A module which purports to be stable or which hopes to achieve wide 
use should adhere to as strict a testing regime as possible.
.PP
Useful modules to help you write tests (with minimum impact on your 
development process or your time) include Test::Simple, Carp::Assert 
and Test::Inline.
For more sophisticated test suites there are Test::More and Test::MockObject.
.SS "Packaging"
.IX Subsection "Packaging"
Modules should be packaged using one of the standard packaging tools.
Currently you have the choice between ExtUtils::MakeMaker and the
more platform independent Module::Build, allowing modules to be installed in a
consistent manner.
When using ExtUtils::MakeMaker, you can use \*(L"make dist\*(R" to create your
package. Tools exist to help you to build your module in a MakeMaker-friendly
style. These include ExtUtils::ModuleMaker and h2xs.  See also perlnewmod.
.SS "Licensing"
.IX Subsection "Licensing"
Make sure that your module has a license, and that the full text of it
is included in the distribution (unless it's a common one and the terms
of the license don't require you to include it).
.PP
If you don't know what license to use, dual licensing under the \s-1GPL\s0
and Artistic licenses (the same as Perl itself) is a good idea.
See perlgpl and perlartistic.
.SH "COMMON PITFALLS"
.IX Header "COMMON PITFALLS"
.SS "Reinventing the wheel"
.IX Subsection "Reinventing the wheel"
There are certain application spaces which are already very, very well
served by \s-1CPAN\s0.  One example is templating systems, another is date and
time modules, and there are many more.  While it is a rite of passage to
write your own version of these things, please consider carefully
whether the Perl world really needs you to publish it.
.SS "Trying to do too much"
.IX Subsection "Trying to do too much"
Your module will be part of a developer's toolkit.  It will not, in
itself, form the \fBentire\fR toolkit.  It's tempting to add extra features
until your code is a monolithic system rather than a set of modular
building blocks.
.SS "Inappropriate documentation"
.IX Subsection "Inappropriate documentation"
Don't fall into the trap of writing for the wrong audience.  Your
primary audience is a reasonably experienced developer with at least 
a moderate understanding of your module's application domain, who's just 
downloaded your module and wants to start using it as quickly as possible.
.PP
Tutorials, end-user documentation, research papers, FAQs etc are not 
appropriate in a module's main documentation.  If you really want to 
write these, include them as sub-documents such as \f(CW\*(C`My::Module::Tutorial\*(C'\fR or
\&\f(CW\*(C`My::Module::FAQ\*(C'\fR and provide a link in the \s-1SEE\s0 \s-1ALSO\s0 section of the
main documentation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "perlstyle" 4
.IX Item "perlstyle"
General Perl style guide
.IP "perlnewmod" 4
.IX Item "perlnewmod"
How to create a new module
.IP "perlpod" 4
.IX Item "perlpod"
\&\s-1POD\s0 documentation
.IP "podchecker" 4
.IX Item "podchecker"
Verifies your \s-1POD\s0's correctness
.IP "Packaging Tools" 4
.IX Item "Packaging Tools"
ExtUtils::MakeMaker, Module::Build
.IP "Testing tools" 4
.IX Item "Testing tools"
Test::Simple, Test::Inline, Carp::Assert, Test::More, Test::MockObject
.IP "http://pause.perl.org/" 4
.IX Item "http://pause.perl.org/"
Perl Authors Upload Server.  Contains links to information for module
authors.
.IP "Any good book on software engineering" 4
.IX Item "Any good book on software engineering"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kirrily \*(L"Skud\*(R" Robert <skud@cpan.org>
                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmodstyle5.18.1                           0100644 0001750 0001750 00000066662 12566207442 024017  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMODSTYLE 1"
.TH PERLMODSTYLE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmodstyle \- Perl module style guide
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This document attempts to describe the Perl Community's \*(L"best practice\*(R"
for writing Perl modules.  It extends the recommendations found in 
perlstyle , which should be considered required reading
before reading this document.
.PP
While this document is intended to be useful to all module authors, it is
particularly aimed at authors who wish to publish their modules on \s-1CPAN.\s0
.PP
The focus is on elements of style which are visible to the users of a 
module, rather than those parts which are only seen by the module's 
developers.  However, many of the guidelines presented in this document
can be extrapolated and applied successfully to a module's internals.
.PP
This document differs from perlnewmod in that it is a style guide
rather than a tutorial on creating \s-1CPAN\s0 modules.  It provides a
checklist against which modules can be compared to determine whether
they conform to best practice, without necessarily describing in detail
how to achieve this.
.PP
All the advice contained in this document has been gleaned from
extensive conversations with experienced \s-1CPAN\s0 authors and users.  Every
piece of advice given here is the result of previous mistakes.  This
information is here to help you avoid the same mistakes and the extra
work that would inevitably be required to fix them.
.PP
The first section of this document provides an itemized checklist; 
subsequent sections provide a more detailed discussion of the items on 
the list.  The final section, \*(L"Common Pitfalls\*(R", describes some of the 
most popular mistakes made by \s-1CPAN\s0 authors.
.SH "QUICK CHECKLIST"
.IX Header "QUICK CHECKLIST"
For more detail on each item in this checklist, see below.
.SS "Before you start"
.IX Subsection "Before you start"
.IP "\(bu" 4
Don't re-invent the wheel
.IP "\(bu" 4
Patch, extend or subclass an existing module where possible
.IP "\(bu" 4
Do one thing and do it well
.IP "\(bu" 4
Choose an appropriate name
.SS "The \s-1API\s0"
.IX Subsection "The API"
.IP "\(bu" 4
\&\s-1API\s0 should be understandable by the average programmer
.IP "\(bu" 4
Simple methods for simple tasks
.IP "\(bu" 4
Separate functionality from output
.IP "\(bu" 4
Consistent naming of subroutines or methods
.IP "\(bu" 4
Use named parameters (a hash or hashref) when there are more than two
parameters
.SS "Stability"
.IX Subsection "Stability"
.IP "\(bu" 4
Ensure your module works under \f(CW\*(C`use strict\*(C'\fR and \f(CW\*(C`\-w\*(C'\fR
.IP "\(bu" 4
Stable modules should maintain backwards compatibility
.SS "Documentation"
.IX Subsection "Documentation"
.IP "\(bu" 4
Write documentation in \s-1POD\s0
.IP "\(bu" 4
Document purpose, scope and target applications
.IP "\(bu" 4
Document each publically accessible method or subroutine, including params and return values
.IP "\(bu" 4
Give examples of use in your documentation
.IP "\(bu" 4
Provide a \s-1README\s0 file and perhaps also release notes, changelog, etc
.IP "\(bu" 4
Provide links to further information (\s-1URL,\s0 email)
.SS "Release considerations"
.IX Subsection "Release considerations"
.IP "\(bu" 4
Specify pre-requisites in Makefile.PL or Build.PL
.IP "\(bu" 4
Specify Perl version requirements with \f(CW\*(C`use\*(C'\fR
.IP "\(bu" 4
Include tests with your module
.IP "\(bu" 4
Choose a sensible and consistent version numbering scheme (X.YY is the common Perl module numbering scheme)
.IP "\(bu" 4
Increment the version number for every change, no matter how small
.IP "\(bu" 4
Package the module using \*(L"make dist\*(R"
.IP "\(bu" 4
Choose an appropriate license (GPL/Artistic is a good default)
.SH "BEFORE YOU START WRITING A MODULE"
.IX Header "BEFORE YOU START WRITING A MODULE"
Try not to launch headlong into developing your module without spending
some time thinking first.  A little forethought may save you a vast
amount of effort later on.
.SS "Has it been done before?"
.IX Subsection "Has it been done before?"
You may not even need to write the module.  Check whether it's already 
been done in Perl, and avoid re-inventing the wheel unless you have a 
good reason.
.PP
Good places to look for pre-existing modules include
http://search.cpan.org/ and asking on modules@perl.org
.PP
If an existing module \fBalmost\fR does what you want, consider writing a
patch, writing a subclass, or otherwise extending the existing module
rather than rewriting it.
.SS "Do one thing and do it well"
.IX Subsection "Do one thing and do it well"
At the risk of stating the obvious, modules are intended to be modular.
A Perl developer should be able to use modules to put together the
building blocks of their application.  However, it's important that the
blocks are the right shape, and that the developer shouldn't have to use
a big block when all they need is a small one.
.PP
Your module should have a clearly defined scope which is no longer than
a single sentence.  Can your module be broken down into a family of
related modules?
.PP
Bad example:
.PP
\&\*(L"FooBar.pm provides an implementation of the \s-1FOO\s0 protocol and the
related \s-1BAR\s0 standard.\*(R"
.PP
Good example:
.PP
\&\*(L"Foo.pm provides an implementation of the \s-1FOO\s0 protocol.  Bar.pm
implements the related \s-1BAR\s0 protocol.\*(R"
.PP
This means that if a developer only needs a module for the \s-1BAR\s0 standard,
they should not be forced to install libraries for \s-1FOO\s0 as well.
.SS "What's in a name?"
.IX Subsection "What's in a name?"
Make sure you choose an appropriate name for your module early on.  This
will help people find and remember your module, and make programming
with your module more intuitive.
.PP
When naming your module, consider the following:
.IP "\(bu" 4
Be descriptive (i.e. accurately describes the purpose of the module).
.IP "\(bu" 4
Be consistent with existing modules.
.IP "\(bu" 4
Reflect the functionality of the module, not the implementation.
.IP "\(bu" 4
Avoid starting a new top-level hierarchy, especially if a suitable
hierarchy already exists under which you could place your module.
.PP
You should contact modules@perl.org to ask them about your module name
before publishing your module.  You should also try to ask people who 
are already familiar with the module's application domain and the \s-1CPAN\s0
naming system.  Authors of similar modules, or modules with similar
names, may be a good place to start.
.SH "DESIGNING AND WRITING YOUR MODULE"
.IX Header "DESIGNING AND WRITING YOUR MODULE"
Considerations for module design and coding:
.SS "To \s-1OO\s0 or not to \s-1OO\s0?"
.IX Subsection "To OO or not to OO?"
Your module may be object oriented (\s-1OO\s0) or not, or it may have both kinds 
of interfaces available.  There are pros and cons of each technique, which 
should be considered when you design your \s-1API.\s0
.PP
In \fIPerl Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is the
right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.PP
Think carefully about whether \s-1OO\s0 is appropriate for your module.
Gratuitous object orientation results in complex APIs which are
difficult for the average module user to understand or use.
.SS "Designing your \s-1API\s0"
.IX Subsection "Designing your API"
Your interfaces should be understandable by an average Perl programmer.  
The following guidelines may help you judge whether your \s-1API\s0 is
sufficiently straightforward:
.IP "Write simple routines to do simple things." 4
.IX Item "Write simple routines to do simple things."
It's better to have numerous simple routines than a few monolithic ones.
If your routine changes its behaviour significantly based on its
arguments, it's a sign that you should have two (or more) separate
routines.
.IP "Separate functionality from output." 4
.IX Item "Separate functionality from output."
Return your results in the most generic form possible and allow the user 
to choose how to use them.  The most generic form possible is usually a
Perl data structure which can then be used to generate a text report,
\&\s-1HTML, XML,\s0 a database query, or whatever else your users require.
.Sp
If your routine iterates through some kind of list (such as a list of
files, or records in a database) you may consider providing a callback
so that users can manipulate each element of the list in turn.
File::Find provides an example of this with its 
\&\f(CW\*(C`find(\e&wanted, $dir)\*(C'\fR syntax.
.IP "Provide sensible shortcuts and defaults." 4
.IX Item "Provide sensible shortcuts and defaults."
Don't require every module user to jump through the same hoops to achieve a
simple result.  You can always include optional parameters or routines for 
more complex or non-standard behaviour.  If most of your users have to
type a few almost identical lines of code when they start using your
module, it's a sign that you should have made that behaviour a default.
Another good indicator that you should use defaults is if most of your 
users call your routines with the same arguments.
.IP "Naming conventions" 4
.IX Item "Naming conventions"
Your naming should be consistent.  For instance, it's better to have:
.Sp
.Vb 3
\&        display_day();
\&        display_week();
\&        display_year();
.Ve
.Sp
than
.Sp
.Vb 3
\&        display_day();
\&        week_display();
\&        show_year();
.Ve
.Sp
This applies equally to method names, parameter names, and anything else
which is visible to the user (and most things that aren't!)
.IP "Parameter passing" 4
.IX Item "Parameter passing"
Use named parameters. It's easier to use a hash like this:
.Sp
.Vb 5
\&    $obj\->do_something(
\&            name => "wibble",
\&            type => "text",
\&            size => 1024,
\&    );
.Ve
.Sp
\&... than to have a long list of unnamed parameters like this:
.Sp
.Vb 1
\&    $obj\->do_something("wibble", "text", 1024);
.Ve
.Sp
While the list of arguments might work fine for one, two or even three
arguments, any more arguments become hard for the module user to
remember, and hard for the module author to manage.  If you want to add
a new parameter you will have to add it to the end of the list for
backward compatibility, and this will probably make your list order
unintuitive.  Also, if many elements may be undefined you may see the
following unattractive method calls:
.Sp
.Vb 1
\&    $obj\->do_something(undef, undef, undef, undef, undef, undef, 1024);
.Ve
.Sp
Provide sensible defaults for parameters which have them.  Don't make
your users specify parameters which will almost always be the same.
.Sp
The issue of whether to pass the arguments in a hash or a hashref is
largely a matter of personal style.
.Sp
The use of hash keys starting with a hyphen (\f(CW\*(C`\-name\*(C'\fR) or entirely in 
upper case (\f(CW\*(C`NAME\*(C'\fR) is a relic of older versions of Perl in which
ordinary lower case strings were not handled correctly by the \f(CW\*(C`=>\*(C'\fR
operator.  While some modules retain uppercase or hyphenated argument
keys for historical reasons or as a matter of personal style, most new
modules should use simple lower case keys.  Whatever you choose, be
consistent!
.SS "Strictness and warnings"
.IX Subsection "Strictness and warnings"
Your module should run successfully under the strict pragma and should
run without generating any warnings.  Your module should also handle 
taint-checking where appropriate, though this can cause difficulties in
many cases.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
Modules which are \*(L"stable\*(R" should not break backwards compatibility
without at least a long transition phase and a major change in version
number.
.SS "Error handling and messages"
.IX Subsection "Error handling and messages"
When your module encounters an error it should do one or more of:
.IP "\(bu" 4
Return an undefined value.
.IP "\(bu" 4
set \f(CW$Module::errstr\fR or similar (\f(CW\*(C`errstr\*(C'\fR is a common name used by
\&\s-1DBI\s0 and other popular modules; if you choose something else, be sure to
document it clearly).
.IP "\(bu" 4
\&\f(CW\*(C`warn()\*(C'\fR or \f(CW\*(C`carp()\*(C'\fR a message to \s-1STDERR.  \s0
.IP "\(bu" 4
\&\f(CW\*(C`croak()\*(C'\fR only when your module absolutely cannot figure out what to
do.  (\f(CW\*(C`croak()\*(C'\fR is a better version of \f(CW\*(C`die()\*(C'\fR for use within 
modules, which reports its errors from the perspective of the caller.  
See Carp for details of \f(CW\*(C`croak()\*(C'\fR, \f(CW\*(C`carp()\*(C'\fR and other useful
routines.)
.IP "\(bu" 4
As an alternative to the above, you may prefer to throw exceptions using 
the Error module.
.PP
Configurable error handling can be very useful to your users.  Consider
offering a choice of levels for warning and debug messages, an option to
send messages to a separate file, a way to specify an error-handling
routine, or other such features.  Be sure to default all these options
to the commonest use.
.SH "DOCUMENTING YOUR MODULE"
.IX Header "DOCUMENTING YOUR MODULE"
.SS "\s-1POD\s0"
.IX Subsection "POD"
Your module should include documentation aimed at Perl developers.
You should use Perl's \*(L"plain old documentation\*(R" (\s-1POD\s0) for your general 
technical documentation, though you may wish to write additional
documentation (white papers, tutorials, etc) in some other format.  
You need to cover the following subjects:
.IP "\(bu" 4
A synopsis of the common uses of the module
.IP "\(bu" 4
The purpose, scope and target applications of your module
.IP "\(bu" 4
Use of each publically accessible method or subroutine, including
parameters and return values
.IP "\(bu" 4
Examples of use
.IP "\(bu" 4
Sources of further information
.IP "\(bu" 4
A contact email address for the author/maintainer
.PP
The level of detail in Perl module documentation generally goes from
less detailed to more detailed.  Your \s-1SYNOPSIS\s0 section should contain a
minimal example of use (perhaps as little as one line of code; skip the
unusual use cases or anything not needed by most users); the
\&\s-1DESCRIPTION\s0 should describe your module in broad terms, generally in
just a few paragraphs; more detail of the module's routines or methods,
lengthy code examples, or other in-depth material should be given in 
subsequent sections.
.PP
Ideally, someone who's slightly familiar with your module should be able
to refresh their memory without hitting \*(L"page down\*(R".  As your reader
continues through the document, they should receive a progressively
greater amount of knowledge.
.PP
The recommended order of sections in Perl module documentation is:
.IP "\(bu" 4
\&\s-1NAME\s0
.IP "\(bu" 4
\&\s-1SYNOPSIS\s0
.IP "\(bu" 4
\&\s-1DESCRIPTION\s0
.IP "\(bu" 4
One or more sections or subsections giving greater detail of available 
methods and routines and any other relevant information.
.IP "\(bu" 4
BUGS/CAVEATS/etc
.IP "\(bu" 4
\&\s-1AUTHOR\s0
.IP "\(bu" 4
\&\s-1SEE ALSO\s0
.IP "\(bu" 4
\&\s-1COPYRIGHT\s0 and \s-1LICENSE\s0
.PP
Keep your documentation near the code it documents (\*(L"inline\*(R"
documentation).  Include \s-1POD\s0 for a given method right above that 
method's subroutine.  This makes it easier to keep the documentation up
to date, and avoids having to document each piece of code twice (once in
\&\s-1POD\s0 and once in comments).
.SS "\s-1README, INSTALL,\s0 release notes, changelogs"
.IX Subsection "README, INSTALL, release notes, changelogs"
Your module should also include a \s-1README\s0 file describing the module and
giving pointers to further information (website, author email).
.PP
An \s-1INSTALL\s0 file should be included, and should contain simple installation 
instructions. When using ExtUtils::MakeMaker this will usually be:
.IP "perl Makefile.PL" 4
.IX Item "perl Makefile.PL"
.PD 0
.IP "make" 4
.IX Item "make"
.IP "make test" 4
.IX Item "make test"
.IP "make install" 4
.IX Item "make install"
.PD
.PP
When using Module::Build, this will usually be:
.IP "perl Build.PL" 4
.IX Item "perl Build.PL"
.PD 0
.IP "perl Build" 4
.IX Item "perl Build"
.IP "perl Build test" 4
.IX Item "perl Build test"
.IP "perl Build install" 4
.IX Item "perl Build install"
.PD
.PP
Release notes or changelogs should be produced for each release of your
software describing user-visible changes to your module, in terms
relevant to the user.
.SH "RELEASE CONSIDERATIONS"
.IX Header "RELEASE CONSIDERATIONS"
.SS "Version numbering"
.IX Subsection "Version numbering"
Version numbers should indicate at least major and minor releases, and
possibly sub-minor releases.  A major release is one in which most of
the functionality has changed, or in which major new functionality is
added.  A minor release is one in which a small amount of functionality
has been added or changed.  Sub-minor version numbers are usually used
for changes which do not affect functionality, such as documentation
patches.
.PP
The most common \s-1CPAN\s0 version numbering scheme looks like this:
.PP
.Vb 1
\&    1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32
.Ve
.PP
A correct \s-1CPAN\s0 version number is a floating point number with at least 
2 digits after the decimal. You can test whether it conforms to \s-1CPAN\s0 by 
using
.PP
.Vb 1
\&    perl \-MExtUtils::MakeMaker \-le \*(Aqprint MM\->parse_version(shift)\*(Aq \*(AqFoo.pm\*(Aq
.Ve
.PP
If you want to release a 'beta' or 'alpha' version of a module but
don't want \s-1CPAN\s0.pm to list it as most recent use an '_' after the
regular version number followed by at least 2 digits, eg. 1.20_01. If
you do this, the following idiom is recommended:
.PP
.Vb 3
\&  $VERSION = "1.12_01";
\&  $XS_VERSION = $VERSION; # only needed if you have XS code
\&  $VERSION = eval $VERSION;
.Ve
.PP
With that trick MakeMaker will only read the first line and thus read
the underscore, while the perl interpreter will evaluate the \f(CW$VERSION\fR
and convert the string into a number. Later operations that treat
\&\f(CW$VERSION\fR as a number will then be able to do so without provoking a
warning about \f(CW$VERSION\fR not being a number.
.PP
Never release anything (even a one-word documentation patch) without
incrementing the number.  Even a one-word documentation patch should
result in a change in version at the sub-minor level.
.SS "Pre-requisites"
.IX Subsection "Pre-requisites"
Module authors should carefully consider whether to rely on other
modules, and which modules to rely on.
.PP
Most importantly, choose modules which are as stable as possible.  In
order of preference:
.IP "\(bu" 4
Core Perl modules
.IP "\(bu" 4
Stable \s-1CPAN\s0 modules
.IP "\(bu" 4
Unstable \s-1CPAN\s0 modules
.IP "\(bu" 4
Modules not available from \s-1CPAN\s0
.PP
Specify version requirements for other Perl modules in the
pre-requisites in your Makefile.PL or Build.PL.
.PP
Be sure to specify Perl version requirements both in Makefile.PL or
Build.PL and with \f(CW\*(C`require 5.6.1\*(C'\fR or similar. See the section on
\&\f(CW\*(C`use VERSION\*(C'\fR of \*(L"require\*(R" in perlfunc for details.
.SS "Testing"
.IX Subsection "Testing"
All modules should be tested before distribution (using \*(L"make disttest\*(R"),
and the tests should also be available to people installing the modules 
(using \*(L"make test\*(R").  
For Module::Build you would use the \f(CW\*(C`make test\*(C'\fR equivalent \f(CW\*(C`perl Build test\*(C'\fR.
.PP
The importance of these tests is proportional to the alleged stability of a 
module. A module which purports to be stable or which hopes to achieve wide 
use should adhere to as strict a testing regime as possible.
.PP
Useful modules to help you write tests (with minimum impact on your 
development process or your time) include Test::Simple, Carp::Assert 
and Test::Inline.
For more sophisticated test suites there are Test::More and Test::MockObject.
.SS "Packaging"
.IX Subsection "Packaging"
Modules should be packaged using one of the standard packaging tools.
Currently you have the choice between ExtUtils::MakeMaker and the
more platform independent Module::Build, allowing modules to be installed in a
consistent manner.
When using ExtUtils::MakeMaker, you can use \*(L"make dist\*(R" to create your
package. Tools exist to help you to build your module in a MakeMaker-friendly
style. These include ExtUtils::ModuleMaker and h2xs.  See also perlnewmod.
.SS "Licensing"
.IX Subsection "Licensing"
Make sure that your module has a license, and that the full text of it
is included in the distribution (unless it's a common one and the terms
of the license don't require you to include it).
.PP
If you don't know what license to use, dual licensing under the \s-1GPL\s0
and Artistic licenses (the same as Perl itself) is a good idea.
See perlgpl and perlartistic.
.SH "COMMON PITFALLS"
.IX Header "COMMON PITFALLS"
.SS "Reinventing the wheel"
.IX Subsection "Reinventing the wheel"
There are certain application spaces which are already very, very well
served by \s-1CPAN. \s0 One example is templating systems, another is date and
time modules, and there are many more.  While it is a rite of passage to
write your own version of these things, please consider carefully
whether the Perl world really needs you to publish it.
.SS "Trying to do too much"
.IX Subsection "Trying to do too much"
Your module will be part of a developer's toolkit.  It will not, in
itself, form the \fBentire\fR toolkit.  It's tempting to add extra features
until your code is a monolithic system rather than a set of modular
building blocks.
.SS "Inappropriate documentation"
.IX Subsection "Inappropriate documentation"
Don't fall into the trap of writing for the wrong audience.  Your
primary audience is a reasonably experienced developer with at least 
a moderate understanding of your module's application domain, who's just 
downloaded your module and wants to start using it as quickly as possible.
.PP
Tutorials, end-user documentation, research papers, FAQs etc are not 
appropriate in a module's main documentation.  If you really want to 
write these, include them as sub-documents such as \f(CW\*(C`My::Module::Tutorial\*(C'\fR or
\&\f(CW\*(C`My::Module::FAQ\*(C'\fR and provide a link in the \s-1SEE ALSO\s0 section of the
main documentation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "perlstyle" 4
.IX Item "perlstyle"
General Perl style guide
.IP "perlnewmod" 4
.IX Item "perlnewmod"
How to create a new module
.IP "perlpod" 4
.IX Item "perlpod"
\&\s-1POD\s0 documentation
.IP "podchecker" 4
.IX Item "podchecker"
Verifies your \s-1POD\s0's correctness
.IP "Packaging Tools" 4
.IX Item "Packaging Tools"
ExtUtils::MakeMaker, Module::Build
.IP "Testing tools" 4
.IX Item "Testing tools"
Test::Simple, Test::Inline, Carp::Assert, Test::More, Test::MockObject
.IP "http://pause.perl.org/" 4
.IX Item "http://pause.perl.org/"
Perl Authors Upload Server.  Contains links to information for module
authors.
.IP "Any good book on software engineering" 4
.IX Item "Any good book on software engineering"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kirrily \*(L"Skud\*(R" Robert <skud@cpan.org>
                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmpeix.1                                  0100644 0001750 0001750 00000047162 12566207421 022754  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMPEIX 1"
.TH PERLMPEIX 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmpeix \- Perl/iX for HP e3000 MPE
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   http://www.bixby.org/mark/perlix.html
\&   Perl language for MPE
\&   Last updated January 12, 2006 @ 2100 UTC
.Ve
.SH "NOTE"
.IX Header "NOTE"
This is a podified version of what used to be on the above-mentioned web page,
podified by Jarkko Hietaniemi 2001\-Jan\-01.
.SH "What's New in Perl for MPE/iX"
.IX Header "What's New in Perl for MPE/iX"
January 12, 2006
.IP "\(bu" 4
Updated for perl\-5.8.8 and perl\-5.9.3 by Ken Hirsch.
.Sp
Simplified the build process by using the \s-1MPEAUTOCONF\s0
functionality in Mark Klein's ld.
.Sp
If you build this from scratch, make sure you have a version
of ld which supports it.  In the shell, type
.Sp
.Vb 2
\&  ld \-\-help
\&    and look for AUTOCONF or MPEAUTOCONF near the bottom
\&
\&  or do this:
\&  ld \-\-help 2>&1 | grep AUTOCONF
.Ve
.Sp
If you see don't see \s-1AUTOCONF\s0 or \s-1MPEAUTOCONF\s0, make sure you get a new
version.
.Sp
You also do not have to use mpeix/relink after building, so the
recommend sequence is:
.Sp
.Vb 1
\&  ./Configure \-de
\&
\&      # or ./Configure \-de \-Dusedevel 
\&      # if you\*(Aqre building a development version
\&
\&  make
\&  make test
\&     # if you run this in a job, do "make test_notty"
\&
\&  make install
.Ve
.Sp
Be prepared for a wait. These take much longer on MPE/iX than on a Unix
system, because of a slow forking, mostly.  On a lightly-loaded \s-1HP3000\s0
Series 979 running MPE/iX 7.5:
.Sp
.Vb 3
\&    Configure: 1 hour
\&    make:      1 hour 15 minutes
\&    make test  1 hour 45 minutes
.Ve
.Sp
Various socket problems were fixed in mpeix.c.
.Sp
Mark Klein provided a fixed sigsetjmp (that works with dynamic
libraries) in mpeix_setjmp.c
.PP
June 1, 2000
.IP "\(bu" 4
Rebuilt to be compatible with mod_perl.  If you plan on using
mod_perl, you \s-1MUST\s0 download and install this version of Perl/iX!
.IP "\(bu" 4
uselargefiles=\*(L"undef\*(R": not available in \s-1MPE\s0 for \s-1POSIX\s0 files yet.
.IP "\(bu" 4
Now bundled with various add-on packages:
.RS 4
.IP "\(bu" 8
libnet (as seen on \s-1CPAN\s0)
.IP "\(bu" 8
libwww-perl (\s-1LWP\s0) which lets Perl programs behave like web browsers:
.IP "\(bu" 8
mod_perl (just the perl portion; the actual \s-1DSO\s0 will be released
soon with Apache/iX 1.3.12 from bixby.org).  This module allows you to
write high performance persistent Perl \s-1CGI\s0 scripts and all sorts of
cool things. (<http://perl.apache.org/>)
.Sp
and much much more hiding under /PERL/PUB/.cpan/
.IP "\(bu" 8
The \s-1CPAN\s0 module now works for automatic downloading and
installing of add-on packages:
.Sp
.Vb 3
\&    1. export FTP_PASSIVE=1
\&    2. perl \-MCPAN \-e shell
\&    3. Ignore any terminal I/O related complaints!
.Ve
.Sp
(<http://search.cpan.org/dist/CPAN/>)
.RE
.RS 4
.RE
.PP
May 20, 2000
.IP "\(bu" 4
Updated to version 5.6.0.  Builds straight out of the box on MPE/iX.
.IP "\(bu" 4
Perl's \fIgetpwnam()\fR function which had regressed to being
unimplemented on \s-1MPE\s0 is now implemented once again.
.PP
September 17, 1999
.IP "\(bu" 4
Migrated from cccd.edu to bixby.org.
.SH "Welcome to Perl/iX"
.IX Header "Welcome to Perl/iX"
This is the official home page for the \s-1HP\s0 e3000 MPE/iX
( <http://www.hp.com/go/e3000> ) port of the Perl scripting
language ( <http://www.perl.com/> ) which gives you all of the power of C,
awk, sed, and sh in a single language. Check here for the latest news,
implemented functionality, known bugs, to-do list, etc. Status reports
about major milestones will also be posted to the \s-1HP3000\-L\s0 mailing list
( http://www.lsoft.com/scripts/wl.exe?SL1=HP3000\-L&H=RAVEN.UTC.EDU <http://www.lsoft.com/scripts/wl.exe?SL1=HP3000-L&H=RAVEN.UTC.EDU> ) and
its associated gatewayed newsgroup comp.sys.hp.mpe.
.PP
I'm doing this port because I can't live without Perl on the Unix
machines that I administer, and I want to have the same power
available to me on \s-1MPE\s0.
.PP
Please send your comments, questions, and bug reports directly to me,
Mark Bixby ( <http://www.bixby.org/mark/> ). Or just post them to \s-1HP3000\-L\s0.
.PP
The platform I'm using to do this port is an \s-1HP\s0 3000 957RX running
MPE/iX 6.0 and using the \s-1GNU\s0 gcc C compiler
( <http://jazz.external.hp.com/src/gnu/gnuframe.html> ).
.PP
The combined porting wisdom from all of my ports can be found in my
MPE/iX Porting Guide (<http://www.bixby.org/mark/porting.html>).
.PP
\&\s-1IMPORTANT\s0 \s-1NOTICE:\s0 Yes, I do work for the \s-1HP\s0 \s-1CSY\s0 R&D lab, but \s-1ALL\s0 of
the software you download from bixby.org is my personal freeware that
is \s-1NOT\s0 supported by \s-1HP\s0.
.SH "System Requirements for Perl/iX"
.IX Header "System Requirements for Perl/iX"
.IP "\(bu" 4
MPE/iX 5.5 or later. This version of Perl/iX does \s-1NOT\s0 run on
MPE/iX 5.0 or earlier, nor does it run on \*(L"classic\*(R" \s-1MPE/V\s0 machines.
.IP "\(bu" 4
If you wish to recompile Perl, you must install both \s-1GNUCORE\s0 and
\&\s-1GNUGCC\s0 from jazz (<http://jazz.external.hp.com/src/gnu/gnuframe.html>).
.IP "\(bu" 4
Perl/iX will be happier on MPE/iX 5.5 if you install the \s-1MPEKX40B\s0
extended \s-1POSIX\s0 filename characters patch, but this is optional.
.IP "\(bu" 4
Patch \s-1LBCJXT6A\s0 is required on MPE/iX 5.5 machines in order to
prevent Perl/iX from dying with an unresolved external reference
to _getenv_libc.
.IP "\(bu" 4
If you will be compiling Perl/iX yourself, you will also need
Syslog/iX ( <http://www.bixby.org/mark/syslogix.html> ) and the
/BIND/PUB/include and /BIND/PUB/lib portions of BIND/iX
( <http://www.bixby.org/mark/bindix.html> ).
.SH "How to Obtain Perl/iX"
.IX Header "How to Obtain Perl/iX"
.IP "1." 4
Download Perl using either \s-1FTP\s0.ARPA.SYS or some other client
.IP "2." 4
Extract the installation script
.IP "3." 4
Edit the installation script
.IP "4." 4
Run the installation script
.IP "5." 4
Convert your *.a system archive libraries to *.sl shared libraries
.PP
Download Perl using \s-1FTP\s0.ARPA.SYS from your \s-1HP\s0 3000 (the preferred
method).....
.PP
.Vb 9
\&    :HELLO MANAGER.SYS
\&    :XEQ FTP.ARPA.SYS
\&    open ftp.bixby.org
\&    anonymous
\&    your@email.address
\&    bytestream
\&    cd /pub/mpe
\&    get perl\-5.6.0\-mpe.tar.Z /tmp/perl.tar.Z;disc=2147483647
\&    exit
.Ve
.PP
\&.....Or download using some other generic web or ftp client (the alternate
method)
.PP
Download the following files (make sure that you use \*(L"binary mode\*(R" or
whatever client feature that is 8\-bit clean):
.IP "\(bu" 4
Perl from
.Sp
.Vb 1
\&    http://www.bixby.org/ftp/pub/mpe/perl\-5.6.0\-mpe.tar.Z
.Ve
.Sp
or
.Sp
.Vb 1
\&    ftp://ftp.bixby.org/pub/mpe/perl\-5.6.0\-mpe.tar.Z
.Ve
.IP "\(bu" 4
Upload those files to your \s-1HP\s0 3000 in an 8\-bit clean bytestream manner to:
.Sp
.Vb 1
\&    /tmp/perl.tar.Z
.Ve
.IP "\(bu" 4
Then extract the installation script (after both download methods)
.Sp
.Vb 2
\&    :CHDIR /tmp
\&    :XEQ TAR.HPBIN.SYS \*(Aqxvfopz /tmp/perl.tar.Z INSTALL\*(Aq
.Ve
.IP "\(bu" 4
Edit the installation script
.Sp
Examine the accounting structure creation commands and modify if
necessary (adding additional capabilities, choosing a non-system
volume set, etc).
.Sp
.Vb 1
\&    :XEQ VI.HPBIN.SYS /tmp/INSTALL
.Ve
.IP "\(bu" 4
Run the installation script.
.Sp
The accounting structure will be created and then all files will be
extracted from the archive.
.Sp
.Vb 1
\&    :XEQ SH.HPBIN.SYS /tmp/INSTALL
.Ve
.IP "\(bu" 4
Convert your *.a system archive libraries to *.sl shared libraries
.Sp
You only have to do this \s-1ONCE\s0 on your MPE/iX 5.5 machine in order to
convert /lib/lib*.a and /usr/lib/lib*.a libraries to their *.sl
equivalents.  This step should not be necessary on MPE/iX 6.0 or later
machines because the 6.0 or later update process does it for you.
.Sp
.Vb 1
\&    :XEQ SH.HPBIN.SYS /PERL/PUB/LIBSHP3K
.Ve
.SH "Perl/iX Distribution Contents Highlights"
.IX Header "Perl/iX Distribution Contents Highlights"
.IP "\s-1README\s0" 4
.IX Item "README"
The file you're reading now.
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
Perl/iX Installation script.
.IP "\s-1LIBSHP3K\s0" 4
.IX Item "LIBSHP3K"
Script to convert *.a system archive libraries to *.sl shared libraries.
.IP "\s-1PERL\s0" 4
.IX Item "PERL"
Perl \s-1NMPRG\s0 executable.  A version-numbered backup copy also
exists.  You might wish to \*(L"ln \-s /PERL/PUB/PERL /usr/local/bin/perl\*(R".
.IP ".cpan/" 4
.IX Item ".cpan/"
Much add-on source code downloaded with the \s-1CPAN\s0 module.
.IP "lib/" 4
.IX Item "lib/"
Perl libraries, both core and add-on.
.IP "man/" 4
.IX Item "man/"
Perl man page documentation.
.IP "public_html/feedback.cgi" 4
.IX Item "public_html/feedback.cgi"
Sample feedback \s-1CGI\s0 form written in Perl.
.IP "src/perl\-5.6.0\-mpe" 4
.IX Item "src/perl-5.6.0-mpe"
Source code.
.SH "How to Compile Perl/iX"
.IX Header "How to Compile Perl/iX"
.IP "1." 4
cd src/perl\-5.6.0\-mpe
.IP "2." 4
Read the \s-1INSTALL\s0 file for the official instructions
.IP "3." 4
\&./Configure \-d
.IP "4." 4
make
.IP "5." 4
\&./mpeix/relink
.IP "6." 4
make test (expect approximately 15 out of 11306 subtests to fail,
mostly due to \s-1MPE\s0 not supporting hard links, \s-1UDP\s0 socket problems,
and handling \fIexit()\fR return codes improperly)
.IP "7." 4
make install
.IP "8." 4
Optionally create symbolic links that point to the Perl
executable, i.e. ln \-s /PERL/PUB/PERL /usr/local/bin/perl
.PP
The summary test results from \*(L"cd t; ./perl \-I../lib harness\*(R":
.PP
.Vb 11
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/fs.t                      29    8  27.59%  2\-5, 7\-9, 11
\&  io/openpid.t                 10    1  10.00%  7
\&  lib/io_sock.t                14    1   7.14%  13
\&  lib/io_udp.t                  7    2  28.57%  3, 5
\&  lib/posix.t                  27    1   3.70%  12
\&  op/lex_assign.t             187    1   0.53%  13
\&  op/stat.t                    58    1   1.72%  3
\&  15 tests and 94 subtests skipped.
\&  Failed 7/236 test scripts, 97.03% okay. 15/11306 subtests failed, 99.87% okay.
.Ve
.SH "Getting Started with Perl/iX"
.IX Header "Getting Started with Perl/iX"
Create your Perl script files with \*(L"#!/PERL/PUB/perl\*(R" (or an
equivalent symbolic link) as the first line.  Use the chmod command to
make sure that your script has execute permission. Run your script!
.PP
Be sure to take a look at the \s-1CPAN\s0 module list
( <http://www.cpan.org/CPAN.html> ). A wide variety of free Perl software
is available.  You can automatically download these packages by using
the \s-1CPAN\s0 module ( <http://search.cpan.org/dist/CPAN/> ).
.SH "MPE/iX Implementation Considerations"
.IX Header "MPE/iX Implementation Considerations"
There some minor functionality issues to be aware of when comparing
Perl for Unix (Perl/UX) to Perl/iX:
.IP "\(bu" 4
\&\s-1MPE\s0 gcc/ld doesn't properly support linking \s-1NMPRG\s0 executables against
\&\s-1NMXL\s0 dynamic libraries, so you must manually run mpeix/relink after
each re-build of Perl.
.IP "\(bu" 4
Perl/iX File::Copy will use \s-1MPE\s0's /bin/cp command to copy files by
name in order to preserve file attributes like file code.
.IP "\(bu" 4
\&\s-1MPE\s0 (and thus Perl/iX) lacks support for \fIsetgrent()\fR, \fIendgrent()\fR,
\&\fIsetpwent()\fR, \fIendpwent()\fR.
.IP "\(bu" 4
\&\s-1MPE\s0 (and thus Perl/iX) lacks support for hard links.
.IP "\(bu" 4
\&\s-1MPE\s0 requires \s-1\fIGETPRIVMODE\s0()\fR in order to \fIbind()\fR to ports less than 1024.
Perl/iX will call \s-1\fIGETPRIVMODE\s0()\fR automatically on your behalf if you
attempt to \fIbind()\fR to these low-numbered ports.  Note that the Perl/iX
executable and the \s-1PERL\s0 account do not normally have CAP=PM, so if you
will be \fIbind()\fR\-ing to these privileged ports, you will manually need
to add \s-1PM\s0 capability as appropriate.
.IP "\(bu" 4
\&\s-1MPE\s0 requires that you \fIbind()\fR to an \s-1IP\s0 address of zero.  Perl/iX
automatically replaces the \s-1IP\s0 address that you pass to \fIbind()\fR with
a zero.
.IP "\(bu" 4
\&\s-1MPE\s0 requires \s-1\fIGETPRIVMODE\s0()\fR in order to \fIsetuid()\fR.  There are too many
calls to \fIsetuid()\fR within Perl/iX, so I have not attempted an automatic
\&\s-1\fIGETPRIVMODE\s0()\fR solution similar to \fIbind()\fR.
.SH "Known Perl/iX Bugs Under Investigation"
.IX Header "Known Perl/iX Bugs Under Investigation"
None.
.SH "Perl/iX To-Do List"
.IX Header "Perl/iX To-Do List"
.IP "\(bu" 4
Make \fIsetuid()\fR/\fIsetgid()\fR support work.
.IP "\(bu" 4
Make sure that \fIfcntl()\fR against a socket descriptor is redirected to \fIsfcntl()\fR.
.IP "\(bu" 4
Add support for Berkeley \s-1DB\s0 once I've finished porting Berkeley \s-1DB\s0.
.IP "\(bu" 4
Write an \s-1MPE\s0 \s-1XS\s0 extension library containing miscellaneous important
\&\s-1MPE\s0 functions like \s-1\fIGETPRIVMODE\s0()\fR, \s-1\fIGETUSERMODE\s0()\fR, and \fIsfcntl()\fR.
.SH "Perl/iX Change History"
.IX Header "Perl/iX Change History"
May 6, 1999
.IP "\(bu" 4
Patch \s-1LBCJXT6A\s0 is required on MPE/iX 5.5 machines in order to prevent
Perl/iX from dying with an unresolved external reference to _getenv_libc.
.PP
April 7, 1999
.IP "\(bu" 4
Updated to version 5.005_03.
.IP "\(bu" 4
The official source distribution once again compiles \*(L"straight out
of the box\*(R" for \s-1MPE\s0.
.IP "\(bu" 4
The current incarnation of the 5.5 \s-1POSIX\s0 filename extended
characters patch is now \s-1MPEKX40B\s0.
.IP "\(bu" 4
The \s-1LIBSHP3K\s0 *.a \-> *.sl library conversion script is now included
as /PERL/PUB/LIBSHP3K.
.PP
November 20, 1998
.IP "\(bu" 4
Updated to version 5.005_02.
.IP "\(bu" 4
Fixed a DynaLoader bug that was unable to load symbols from relative
path name libraries.
.IP "\(bu" 4
Fixed a .xs compilation bug where the mpeixish.sh include file wasn't
being installed into the proper directory.
.IP "\(bu" 4
All bugfixes will be submitted back to the official Perl developers.
.IP "\(bu" 4
The current incarnation of the \s-1POSIX\s0 filename extended characters
patch is now \s-1MPEKXJ3A\s0.
.PP
August 14, 1998
.IP "\(bu" 4
The previous \s-1POSIX\s0 filename extended characters patch \s-1MPEKX44C\s0 has
been superseded by \s-1MPEKXB5A\s0.
.PP
August 7, 1998
.IP "\(bu" 4
The previous \s-1POSIX\s0 filename extended characters patch \s-1MPEKX76A\s0 has
been superseded by \s-1MPEKX44C\s0.
.PP
July 28, 1998
.IP "\(bu" 4
Updated to version 5.005_01.
.PP
July 23, 1998
.IP "\(bu" 4
Updated to version 5.005 (production release).  The public
freeware sources are now 100% MPE-ready \*(L"straight out of the box\*(R".
.PP
July 17, 1998
.IP "\(bu" 4
Updated to version 5.005b1 (public beta release).  The public
freeware sources are now 99.9% MPE-ready.  By installing and
testing this beta on your own \s-1HP3000\s0, you will be helping to
insure that the final release of 5.005 will be 100% MPE-ready and
100% bug free.
.IP "\(bu" 4
My \s-1MPE\s0 binary release is now extracted using my standard \s-1INSTALL\s0 script.
.PP
July 15, 1998
.IP "\(bu" 4
Changed startperl to #!/PERL/PUB/perl so that Perl will recognize
scripts more easily and efficiently.
.PP
July 8, 1998
.IP "\(bu" 4
Updated to version 5.004_70 (internal developer release) which is now
MPE-ready.  The next public freeware release of Perl should compile
\&\*(L"straight out of the box\*(R" on \s-1MPE\s0.  Note that this version of Perl/iX
was strictly internal to me and never publicly released.  Note that
[21]BIND/iX is now required (well, the include files and libbind.a) if
you wish to compile Perl/iX.
.PP
November 6, 1997
.IP "\(bu" 4
Updated to version 5.004_04.  No changes in MPE-specific functionality.
.PP
October 16, 1997
.IP "\(bu" 4
Added Demos section to the Perl/iX home page so you can see some
sample Perl applications running on my 3000.
.PP
October 3, 1997
.IP "\(bu" 4
Added System Requirements section to the Perl/iX home page just so the
prerequisites stand out more. Various other home page tweaks.
.PP
October 2, 1997
.IP "\(bu" 4
Initial public release.
.PP
September 1997
.IP "\(bu" 4
Porting begins.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Bixby, <http://www.bixby.org/mark/>
                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmpeix5.16.1                              0100644 0001750 0001750 00000047162 12566207421 023266  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMPEIX 1"
.TH PERLMPEIX 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmpeix \- Perl/iX for HP e3000 MPE
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   http://www.bixby.org/mark/perlix.html
\&   Perl language for MPE
\&   Last updated January 12, 2006 @ 2100 UTC
.Ve
.SH "NOTE"
.IX Header "NOTE"
This is a podified version of what used to be on the above-mentioned web page,
podified by Jarkko Hietaniemi 2001\-Jan\-01.
.SH "What's New in Perl for MPE/iX"
.IX Header "What's New in Perl for MPE/iX"
January 12, 2006
.IP "\(bu" 4
Updated for perl\-5.8.8 and perl\-5.9.3 by Ken Hirsch.
.Sp
Simplified the build process by using the \s-1MPEAUTOCONF\s0
functionality in Mark Klein's ld.
.Sp
If you build this from scratch, make sure you have a version
of ld which supports it.  In the shell, type
.Sp
.Vb 2
\&  ld \-\-help
\&    and look for AUTOCONF or MPEAUTOCONF near the bottom
\&
\&  or do this:
\&  ld \-\-help 2>&1 | grep AUTOCONF
.Ve
.Sp
If you see don't see \s-1AUTOCONF\s0 or \s-1MPEAUTOCONF\s0, make sure you get a new
version.
.Sp
You also do not have to use mpeix/relink after building, so the
recommend sequence is:
.Sp
.Vb 1
\&  ./Configure \-de
\&
\&      # or ./Configure \-de \-Dusedevel 
\&      # if you\*(Aqre building a development version
\&
\&  make
\&  make test
\&     # if you run this in a job, do "make test_notty"
\&
\&  make install
.Ve
.Sp
Be prepared for a wait. These take much longer on MPE/iX than on a Unix
system, because of a slow forking, mostly.  On a lightly-loaded \s-1HP3000\s0
Series 979 running MPE/iX 7.5:
.Sp
.Vb 3
\&    Configure: 1 hour
\&    make:      1 hour 15 minutes
\&    make test  1 hour 45 minutes
.Ve
.Sp
Various socket problems were fixed in mpeix.c.
.Sp
Mark Klein provided a fixed sigsetjmp (that works with dynamic
libraries) in mpeix_setjmp.c
.PP
June 1, 2000
.IP "\(bu" 4
Rebuilt to be compatible with mod_perl.  If you plan on using
mod_perl, you \s-1MUST\s0 download and install this version of Perl/iX!
.IP "\(bu" 4
uselargefiles=\*(L"undef\*(R": not available in \s-1MPE\s0 for \s-1POSIX\s0 files yet.
.IP "\(bu" 4
Now bundled with various add-on packages:
.RS 4
.IP "\(bu" 8
libnet (as seen on \s-1CPAN\s0)
.IP "\(bu" 8
libwww-perl (\s-1LWP\s0) which lets Perl programs behave like web browsers:
.IP "\(bu" 8
mod_perl (just the perl portion; the actual \s-1DSO\s0 will be released
soon with Apache/iX 1.3.12 from bixby.org).  This module allows you to
write high performance persistent Perl \s-1CGI\s0 scripts and all sorts of
cool things. (<http://perl.apache.org/>)
.Sp
and much much more hiding under /PERL/PUB/.cpan/
.IP "\(bu" 8
The \s-1CPAN\s0 module now works for automatic downloading and
installing of add-on packages:
.Sp
.Vb 3
\&    1. export FTP_PASSIVE=1
\&    2. perl \-MCPAN \-e shell
\&    3. Ignore any terminal I/O related complaints!
.Ve
.Sp
(<http://search.cpan.org/dist/CPAN/>)
.RE
.RS 4
.RE
.PP
May 20, 2000
.IP "\(bu" 4
Updated to version 5.6.0.  Builds straight out of the box on MPE/iX.
.IP "\(bu" 4
Perl's \fIgetpwnam()\fR function which had regressed to being
unimplemented on \s-1MPE\s0 is now implemented once again.
.PP
September 17, 1999
.IP "\(bu" 4
Migrated from cccd.edu to bixby.org.
.SH "Welcome to Perl/iX"
.IX Header "Welcome to Perl/iX"
This is the official home page for the \s-1HP\s0 e3000 MPE/iX
( <http://www.hp.com/go/e3000> ) port of the Perl scripting
language ( <http://www.perl.com/> ) which gives you all of the power of C,
awk, sed, and sh in a single language. Check here for the latest news,
implemented functionality, known bugs, to-do list, etc. Status reports
about major milestones will also be posted to the \s-1HP3000\-L\s0 mailing list
( http://www.lsoft.com/scripts/wl.exe?SL1=HP3000\-L&H=RAVEN.UTC.EDU <http://www.lsoft.com/scripts/wl.exe?SL1=HP3000-L&H=RAVEN.UTC.EDU> ) and
its associated gatewayed newsgroup comp.sys.hp.mpe.
.PP
I'm doing this port because I can't live without Perl on the Unix
machines that I administer, and I want to have the same power
available to me on \s-1MPE\s0.
.PP
Please send your comments, questions, and bug reports directly to me,
Mark Bixby ( <http://www.bixby.org/mark/> ). Or just post them to \s-1HP3000\-L\s0.
.PP
The platform I'm using to do this port is an \s-1HP\s0 3000 957RX running
MPE/iX 6.0 and using the \s-1GNU\s0 gcc C compiler
( <http://jazz.external.hp.com/src/gnu/gnuframe.html> ).
.PP
The combined porting wisdom from all of my ports can be found in my
MPE/iX Porting Guide (<http://www.bixby.org/mark/porting.html>).
.PP
\&\s-1IMPORTANT\s0 \s-1NOTICE:\s0 Yes, I do work for the \s-1HP\s0 \s-1CSY\s0 R&D lab, but \s-1ALL\s0 of
the software you download from bixby.org is my personal freeware that
is \s-1NOT\s0 supported by \s-1HP\s0.
.SH "System Requirements for Perl/iX"
.IX Header "System Requirements for Perl/iX"
.IP "\(bu" 4
MPE/iX 5.5 or later. This version of Perl/iX does \s-1NOT\s0 run on
MPE/iX 5.0 or earlier, nor does it run on \*(L"classic\*(R" \s-1MPE/V\s0 machines.
.IP "\(bu" 4
If you wish to recompile Perl, you must install both \s-1GNUCORE\s0 and
\&\s-1GNUGCC\s0 from jazz (<http://jazz.external.hp.com/src/gnu/gnuframe.html>).
.IP "\(bu" 4
Perl/iX will be happier on MPE/iX 5.5 if you install the \s-1MPEKX40B\s0
extended \s-1POSIX\s0 filename characters patch, but this is optional.
.IP "\(bu" 4
Patch \s-1LBCJXT6A\s0 is required on MPE/iX 5.5 machines in order to
prevent Perl/iX from dying with an unresolved external reference
to _getenv_libc.
.IP "\(bu" 4
If you will be compiling Perl/iX yourself, you will also need
Syslog/iX ( <http://www.bixby.org/mark/syslogix.html> ) and the
/BIND/PUB/include and /BIND/PUB/lib portions of BIND/iX
( <http://www.bixby.org/mark/bindix.html> ).
.SH "How to Obtain Perl/iX"
.IX Header "How to Obtain Perl/iX"
.IP "1." 4
Download Perl using either \s-1FTP\s0.ARPA.SYS or some other client
.IP "2." 4
Extract the installation script
.IP "3." 4
Edit the installation script
.IP "4." 4
Run the installation script
.IP "5." 4
Convert your *.a system archive libraries to *.sl shared libraries
.PP
Download Perl using \s-1FTP\s0.ARPA.SYS from your \s-1HP\s0 3000 (the preferred
method).....
.PP
.Vb 9
\&    :HELLO MANAGER.SYS
\&    :XEQ FTP.ARPA.SYS
\&    open ftp.bixby.org
\&    anonymous
\&    your@email.address
\&    bytestream
\&    cd /pub/mpe
\&    get perl\-5.6.0\-mpe.tar.Z /tmp/perl.tar.Z;disc=2147483647
\&    exit
.Ve
.PP
\&.....Or download using some other generic web or ftp client (the alternate
method)
.PP
Download the following files (make sure that you use \*(L"binary mode\*(R" or
whatever client feature that is 8\-bit clean):
.IP "\(bu" 4
Perl from
.Sp
.Vb 1
\&    http://www.bixby.org/ftp/pub/mpe/perl\-5.6.0\-mpe.tar.Z
.Ve
.Sp
or
.Sp
.Vb 1
\&    ftp://ftp.bixby.org/pub/mpe/perl\-5.6.0\-mpe.tar.Z
.Ve
.IP "\(bu" 4
Upload those files to your \s-1HP\s0 3000 in an 8\-bit clean bytestream manner to:
.Sp
.Vb 1
\&    /tmp/perl.tar.Z
.Ve
.IP "\(bu" 4
Then extract the installation script (after both download methods)
.Sp
.Vb 2
\&    :CHDIR /tmp
\&    :XEQ TAR.HPBIN.SYS \*(Aqxvfopz /tmp/perl.tar.Z INSTALL\*(Aq
.Ve
.IP "\(bu" 4
Edit the installation script
.Sp
Examine the accounting structure creation commands and modify if
necessary (adding additional capabilities, choosing a non-system
volume set, etc).
.Sp
.Vb 1
\&    :XEQ VI.HPBIN.SYS /tmp/INSTALL
.Ve
.IP "\(bu" 4
Run the installation script.
.Sp
The accounting structure will be created and then all files will be
extracted from the archive.
.Sp
.Vb 1
\&    :XEQ SH.HPBIN.SYS /tmp/INSTALL
.Ve
.IP "\(bu" 4
Convert your *.a system archive libraries to *.sl shared libraries
.Sp
You only have to do this \s-1ONCE\s0 on your MPE/iX 5.5 machine in order to
convert /lib/lib*.a and /usr/lib/lib*.a libraries to their *.sl
equivalents.  This step should not be necessary on MPE/iX 6.0 or later
machines because the 6.0 or later update process does it for you.
.Sp
.Vb 1
\&    :XEQ SH.HPBIN.SYS /PERL/PUB/LIBSHP3K
.Ve
.SH "Perl/iX Distribution Contents Highlights"
.IX Header "Perl/iX Distribution Contents Highlights"
.IP "\s-1README\s0" 4
.IX Item "README"
The file you're reading now.
.IP "\s-1INSTALL\s0" 4
.IX Item "INSTALL"
Perl/iX Installation script.
.IP "\s-1LIBSHP3K\s0" 4
.IX Item "LIBSHP3K"
Script to convert *.a system archive libraries to *.sl shared libraries.
.IP "\s-1PERL\s0" 4
.IX Item "PERL"
Perl \s-1NMPRG\s0 executable.  A version-numbered backup copy also
exists.  You might wish to \*(L"ln \-s /PERL/PUB/PERL /usr/local/bin/perl\*(R".
.IP ".cpan/" 4
.IX Item ".cpan/"
Much add-on source code downloaded with the \s-1CPAN\s0 module.
.IP "lib/" 4
.IX Item "lib/"
Perl libraries, both core and add-on.
.IP "man/" 4
.IX Item "man/"
Perl man page documentation.
.IP "public_html/feedback.cgi" 4
.IX Item "public_html/feedback.cgi"
Sample feedback \s-1CGI\s0 form written in Perl.
.IP "src/perl\-5.6.0\-mpe" 4
.IX Item "src/perl-5.6.0-mpe"
Source code.
.SH "How to Compile Perl/iX"
.IX Header "How to Compile Perl/iX"
.IP "1." 4
cd src/perl\-5.6.0\-mpe
.IP "2." 4
Read the \s-1INSTALL\s0 file for the official instructions
.IP "3." 4
\&./Configure \-d
.IP "4." 4
make
.IP "5." 4
\&./mpeix/relink
.IP "6." 4
make test (expect approximately 15 out of 11306 subtests to fail,
mostly due to \s-1MPE\s0 not supporting hard links, \s-1UDP\s0 socket problems,
and handling \fIexit()\fR return codes improperly)
.IP "7." 4
make install
.IP "8." 4
Optionally create symbolic links that point to the Perl
executable, i.e. ln \-s /PERL/PUB/PERL /usr/local/bin/perl
.PP
The summary test results from \*(L"cd t; ./perl \-I../lib harness\*(R":
.PP
.Vb 11
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/fs.t                      29    8  27.59%  2\-5, 7\-9, 11
\&  io/openpid.t                 10    1  10.00%  7
\&  lib/io_sock.t                14    1   7.14%  13
\&  lib/io_udp.t                  7    2  28.57%  3, 5
\&  lib/posix.t                  27    1   3.70%  12
\&  op/lex_assign.t             187    1   0.53%  13
\&  op/stat.t                    58    1   1.72%  3
\&  15 tests and 94 subtests skipped.
\&  Failed 7/236 test scripts, 97.03% okay. 15/11306 subtests failed, 99.87% okay.
.Ve
.SH "Getting Started with Perl/iX"
.IX Header "Getting Started with Perl/iX"
Create your Perl script files with \*(L"#!/PERL/PUB/perl\*(R" (or an
equivalent symbolic link) as the first line.  Use the chmod command to
make sure that your script has execute permission. Run your script!
.PP
Be sure to take a look at the \s-1CPAN\s0 module list
( <http://www.cpan.org/CPAN.html> ). A wide variety of free Perl software
is available.  You can automatically download these packages by using
the \s-1CPAN\s0 module ( <http://search.cpan.org/dist/CPAN/> ).
.SH "MPE/iX Implementation Considerations"
.IX Header "MPE/iX Implementation Considerations"
There some minor functionality issues to be aware of when comparing
Perl for Unix (Perl/UX) to Perl/iX:
.IP "\(bu" 4
\&\s-1MPE\s0 gcc/ld doesn't properly support linking \s-1NMPRG\s0 executables against
\&\s-1NMXL\s0 dynamic libraries, so you must manually run mpeix/relink after
each re-build of Perl.
.IP "\(bu" 4
Perl/iX File::Copy will use \s-1MPE\s0's /bin/cp command to copy files by
name in order to preserve file attributes like file code.
.IP "\(bu" 4
\&\s-1MPE\s0 (and thus Perl/iX) lacks support for \fIsetgrent()\fR, \fIendgrent()\fR,
\&\fIsetpwent()\fR, \fIendpwent()\fR.
.IP "\(bu" 4
\&\s-1MPE\s0 (and thus Perl/iX) lacks support for hard links.
.IP "\(bu" 4
\&\s-1MPE\s0 requires \s-1\fIGETPRIVMODE\s0()\fR in order to \fIbind()\fR to ports less than 1024.
Perl/iX will call \s-1\fIGETPRIVMODE\s0()\fR automatically on your behalf if you
attempt to \fIbind()\fR to these low-numbered ports.  Note that the Perl/iX
executable and the \s-1PERL\s0 account do not normally have CAP=PM, so if you
will be \fIbind()\fR\-ing to these privileged ports, you will manually need
to add \s-1PM\s0 capability as appropriate.
.IP "\(bu" 4
\&\s-1MPE\s0 requires that you \fIbind()\fR to an \s-1IP\s0 address of zero.  Perl/iX
automatically replaces the \s-1IP\s0 address that you pass to \fIbind()\fR with
a zero.
.IP "\(bu" 4
\&\s-1MPE\s0 requires \s-1\fIGETPRIVMODE\s0()\fR in order to \fIsetuid()\fR.  There are too many
calls to \fIsetuid()\fR within Perl/iX, so I have not attempted an automatic
\&\s-1\fIGETPRIVMODE\s0()\fR solution similar to \fIbind()\fR.
.SH "Known Perl/iX Bugs Under Investigation"
.IX Header "Known Perl/iX Bugs Under Investigation"
None.
.SH "Perl/iX To-Do List"
.IX Header "Perl/iX To-Do List"
.IP "\(bu" 4
Make \fIsetuid()\fR/\fIsetgid()\fR support work.
.IP "\(bu" 4
Make sure that \fIfcntl()\fR against a socket descriptor is redirected to \fIsfcntl()\fR.
.IP "\(bu" 4
Add support for Berkeley \s-1DB\s0 once I've finished porting Berkeley \s-1DB\s0.
.IP "\(bu" 4
Write an \s-1MPE\s0 \s-1XS\s0 extension library containing miscellaneous important
\&\s-1MPE\s0 functions like \s-1\fIGETPRIVMODE\s0()\fR, \s-1\fIGETUSERMODE\s0()\fR, and \fIsfcntl()\fR.
.SH "Perl/iX Change History"
.IX Header "Perl/iX Change History"
May 6, 1999
.IP "\(bu" 4
Patch \s-1LBCJXT6A\s0 is required on MPE/iX 5.5 machines in order to prevent
Perl/iX from dying with an unresolved external reference to _getenv_libc.
.PP
April 7, 1999
.IP "\(bu" 4
Updated to version 5.005_03.
.IP "\(bu" 4
The official source distribution once again compiles \*(L"straight out
of the box\*(R" for \s-1MPE\s0.
.IP "\(bu" 4
The current incarnation of the 5.5 \s-1POSIX\s0 filename extended
characters patch is now \s-1MPEKX40B\s0.
.IP "\(bu" 4
The \s-1LIBSHP3K\s0 *.a \-> *.sl library conversion script is now included
as /PERL/PUB/LIBSHP3K.
.PP
November 20, 1998
.IP "\(bu" 4
Updated to version 5.005_02.
.IP "\(bu" 4
Fixed a DynaLoader bug that was unable to load symbols from relative
path name libraries.
.IP "\(bu" 4
Fixed a .xs compilation bug where the mpeixish.sh include file wasn't
being installed into the proper directory.
.IP "\(bu" 4
All bugfixes will be submitted back to the official Perl developers.
.IP "\(bu" 4
The current incarnation of the \s-1POSIX\s0 filename extended characters
patch is now \s-1MPEKXJ3A\s0.
.PP
August 14, 1998
.IP "\(bu" 4
The previous \s-1POSIX\s0 filename extended characters patch \s-1MPEKX44C\s0 has
been superseded by \s-1MPEKXB5A\s0.
.PP
August 7, 1998
.IP "\(bu" 4
The previous \s-1POSIX\s0 filename extended characters patch \s-1MPEKX76A\s0 has
been superseded by \s-1MPEKX44C\s0.
.PP
July 28, 1998
.IP "\(bu" 4
Updated to version 5.005_01.
.PP
July 23, 1998
.IP "\(bu" 4
Updated to version 5.005 (production release).  The public
freeware sources are now 100% MPE-ready \*(L"straight out of the box\*(R".
.PP
July 17, 1998
.IP "\(bu" 4
Updated to version 5.005b1 (public beta release).  The public
freeware sources are now 99.9% MPE-ready.  By installing and
testing this beta on your own \s-1HP3000\s0, you will be helping to
insure that the final release of 5.005 will be 100% MPE-ready and
100% bug free.
.IP "\(bu" 4
My \s-1MPE\s0 binary release is now extracted using my standard \s-1INSTALL\s0 script.
.PP
July 15, 1998
.IP "\(bu" 4
Changed startperl to #!/PERL/PUB/perl so that Perl will recognize
scripts more easily and efficiently.
.PP
July 8, 1998
.IP "\(bu" 4
Updated to version 5.004_70 (internal developer release) which is now
MPE-ready.  The next public freeware release of Perl should compile
\&\*(L"straight out of the box\*(R" on \s-1MPE\s0.  Note that this version of Perl/iX
was strictly internal to me and never publicly released.  Note that
[21]BIND/iX is now required (well, the include files and libbind.a) if
you wish to compile Perl/iX.
.PP
November 6, 1997
.IP "\(bu" 4
Updated to version 5.004_04.  No changes in MPE-specific functionality.
.PP
October 16, 1997
.IP "\(bu" 4
Added Demos section to the Perl/iX home page so you can see some
sample Perl applications running on my 3000.
.PP
October 3, 1997
.IP "\(bu" 4
Added System Requirements section to the Perl/iX home page just so the
prerequisites stand out more. Various other home page tweaks.
.PP
October 2, 1997
.IP "\(bu" 4
Initial public release.
.PP
September 1997
.IP "\(bu" 4
Porting begins.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Bixby, <http://www.bixby.org/mark/>
                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmroapi.1                                 0100644 0001750 0001750 00000017234 12566207442 023121  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMROAPI 1"
.TH PERLMROAPI 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmroapi \- Perl method resolution plugin interface
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface.
.PP
Each plugin should register itself by providing
the following structure
.PP
.Vb 7
\&    struct mro_alg {
\&        AV *(*resolve)(pTHX_ HV *stash, U32 level);
\&        const char *name;
\&        U16 length;
\&        U16 kflags;
\&        U32 hash;
\&    };
.Ve
.PP
and calling \f(CW\*(C`Perl_mro_register\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_register(aTHX_ &my_mro_alg);
.Ve
.IP "resolve" 4
.IX Item "resolve"
Pointer to the linearisation function, described below.
.IP "name" 4
.IX Item "name"
Name of the \s-1MRO,\s0 either in \s-1ISO\-8859\-1\s0 or \s-1UTF\-8.\s0
.IP "length" 4
.IX Item "length"
Length of the name.
.IP "kflags" 4
.IX Item "kflags"
If the name is given in \s-1UTF\-8,\s0 set this to \f(CW\*(C`HVhek_UTF8\*(C'\fR. The value is passed
direct as the parameter \fIkflags\fR to \f(CW\*(C`hv_common()\*(C'\fR.
.IP "hash" 4
.IX Item "hash"
A precomputed hash value for the \s-1MRO\s0's name, or 0.
.SH "Callbacks"
.IX Header "Callbacks"
The \f(CW\*(C`resolve\*(C'\fR function is called to generate a linearised \s-1ISA\s0 for the
given stash, using this \s-1MRO.\s0 It is called with a pointer to the stash, and
a \fIlevel\fR of 0. The core always sets \fIlevel\fR to 0 when it calls your
function \- the parameter is provided to allow your implementation to track
depth if it needs to recurse.
.PP
The function should return a reference to an array containing the parent
classes in order. The names of the classes should be the result of calling
\&\f(CW\*(C`HvENAME()\*(C'\fR on the stash. In those cases where \f(CW\*(C`HvENAME()\*(C'\fR returns null,
\&\f(CW\*(C`HvNAME()\*(C'\fR should be used instead.
.PP
The caller is responsible for incrementing the reference count of the array
returned if it wants to keep the structure. Hence, if you have created a
temporary value that you keep no pointer to, \f(CW\*(C`sv_2mortal()\*(C'\fR to ensure that
it is disposed of correctly. If you have cached your return value, then
return a pointer to it without changing the reference count.
.SH "Caching"
.IX Header "Caching"
Computing MROs can be expensive. The implementation provides a cache, in
which you can store a single \f(CW\*(C`SV *\*(C'\fR, or anything that can be cast to
\&\f(CW\*(C`SV *\*(C'\fR, such as \f(CW\*(C`AV *\*(C'\fR. To read your private value, use the macro
\&\f(CW\*(C`MRO_GET_PRIVATE_DATA()\*(C'\fR, passing it the \f(CW\*(C`mro_meta\*(C'\fR structure from the
stash, and a pointer to your \f(CW\*(C`mro_alg\*(C'\fR structure:
.PP
.Vb 2
\&    meta = HvMROMETA(stash);
\&    private_sv = MRO_GET_PRIVATE_DATA(meta, &my_mro_alg);
.Ve
.PP
To set your private value, call \f(CW\*(C`Perl_mro_set_private_data()\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_set_private_data(aTHX_ meta, &c3_alg, private_sv);
.Ve
.PP
The private data cache will take ownership of a reference to private_sv,
much the same way that \f(CW\*(C`hv_store()\*(C'\fR takes ownership of a reference to the
value that you pass it.
.SH "Examples"
.IX Header "Examples"
For examples of \s-1MRO\s0 implementations, see \f(CW\*(C`S_mro_get_linear_isa_c3()\*(C'\fR
and the \f(CW\*(C`BOOT:\*(C'\fR section of \fImro/mro.xs\fR, and \f(CW\*(C`S_mro_get_linear_isa_dfs()\*(C'\fR
in \fImro.c\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
The implementation of the C3 \s-1MRO\s0 and switchable MROs within the perl core was
written by Brandon L Black. Nicholas Clark created the pluggable interface, 
refactored Brandon's implementation to work with it, and wrote this document.
                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmroapi5.16.1                             0100644 0001750 0001750 00000016713 12566207421 023431  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMROAPI 1"
.TH PERLMROAPI 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmroapi \- Perl method resolution plugin interface
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface.
.PP
Each plugin should register itself by providing
the following structure
.PP
.Vb 7
\&    struct mro_alg {
\&        AV *(*resolve)(pTHX_ HV *stash, U32 level);
\&        const char *name;
\&        U16 length;
\&        U16 kflags;
\&        U32 hash;
\&    };
.Ve
.PP
and calling \f(CW\*(C`Perl_mro_register\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_register(aTHX_ &my_mro_alg);
.Ve
.IP "resolve" 4
.IX Item "resolve"
Pointer to the linearisation function, described below.
.IP "name" 4
.IX Item "name"
Name of the \s-1MRO\s0, either in \s-1ISO\-8859\-1\s0 or \s-1UTF\-8\s0.
.IP "length" 4
.IX Item "length"
Length of the name.
.IP "kflags" 4
.IX Item "kflags"
If the name is given in \s-1UTF\-8\s0, set this to \f(CW\*(C`HVhek_UTF8\*(C'\fR. The value is passed
direct as the parameter \fIkflags\fR to \f(CW\*(C`hv_common()\*(C'\fR.
.IP "hash" 4
.IX Item "hash"
A precomputed hash value for the \s-1MRO\s0's name, or 0.
.SH "Callbacks"
.IX Header "Callbacks"
The \f(CW\*(C`resolve\*(C'\fR function is called to generate a linearised \s-1ISA\s0 for the
given stash, using this \s-1MRO\s0. It is called with a pointer to the stash, and
a \fIlevel\fR of 0. The core always sets \fIlevel\fR to 0 when it calls your
function \- the parameter is provided to allow your implementation to track
depth if it needs to recurse.
.PP
The function should return a reference to an array containing the parent
classes in order. The names of the classes should be the result of calling
\&\f(CW\*(C`HvENAME()\*(C'\fR on the stash. In those cases where \f(CW\*(C`HvENAME()\*(C'\fR returns null,
\&\f(CW\*(C`HvNAME()\*(C'\fR should be used instead.
.PP
The caller is responsible for incrementing the reference count of the array
returned if it wants to keep the structure. Hence, if you have created a
temporary value that you keep no pointer to, \f(CW\*(C`sv_2mortal()\*(C'\fR to ensure that
it is disposed of correctly. If you have cached your return value, then
return a pointer to it without changing the reference count.
.SH "Caching"
.IX Header "Caching"
Computing MROs can be expensive. The implementation provides a cache, in
which you can store a single \f(CW\*(C`SV *\*(C'\fR, or anything that can be cast to
\&\f(CW\*(C`SV *\*(C'\fR, such as \f(CW\*(C`AV *\*(C'\fR. To read your private value, use the macro
\&\f(CW\*(C`MRO_GET_PRIVATE_DATA()\*(C'\fR, passing it the \f(CW\*(C`mro_meta\*(C'\fR structure from the
stash, and a pointer to your \f(CW\*(C`mro_alg\*(C'\fR structure:
.PP
.Vb 2
\&    meta = HvMROMETA(stash);
\&    private_sv = MRO_GET_PRIVATE_DATA(meta, &my_mro_alg);
.Ve
.PP
To set your private value, call \f(CW\*(C`Perl_mro_set_private_data()\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_set_private_data(aTHX_ meta, &c3_alg, private_sv);
.Ve
.PP
The private data cache will take ownership of a reference to private_sv,
much the same way that \f(CW\*(C`hv_store()\*(C'\fR takes ownership of a reference to the
value that you pass it.
.SH "Examples"
.IX Header "Examples"
For examples of \s-1MRO\s0 implementations, see \f(CW\*(C`S_mro_get_linear_isa_c3()\*(C'\fR
and the \f(CW\*(C`BOOT:\*(C'\fR section of \fImro/mro.xs\fR, and \f(CW\*(C`S_mro_get_linear_isa_dfs()\*(C'\fR
in \fImro.c\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
The implementation of the C3 \s-1MRO\s0 and switchable MROs within the perl core was
written by Brandon L Black. Nicholas Clark created the pluggable interface, 
refactored Brandon's implementation to work with it, and wrote this document.
                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlmroapi5.18.1                             0100644 0001750 0001750 00000017234 12566207442 023435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLMROAPI 1"
.TH PERLMROAPI 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlmroapi \- Perl method resolution plugin interface
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface.
.PP
Each plugin should register itself by providing
the following structure
.PP
.Vb 7
\&    struct mro_alg {
\&        AV *(*resolve)(pTHX_ HV *stash, U32 level);
\&        const char *name;
\&        U16 length;
\&        U16 kflags;
\&        U32 hash;
\&    };
.Ve
.PP
and calling \f(CW\*(C`Perl_mro_register\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_register(aTHX_ &my_mro_alg);
.Ve
.IP "resolve" 4
.IX Item "resolve"
Pointer to the linearisation function, described below.
.IP "name" 4
.IX Item "name"
Name of the \s-1MRO,\s0 either in \s-1ISO\-8859\-1\s0 or \s-1UTF\-8.\s0
.IP "length" 4
.IX Item "length"
Length of the name.
.IP "kflags" 4
.IX Item "kflags"
If the name is given in \s-1UTF\-8,\s0 set this to \f(CW\*(C`HVhek_UTF8\*(C'\fR. The value is passed
direct as the parameter \fIkflags\fR to \f(CW\*(C`hv_common()\*(C'\fR.
.IP "hash" 4
.IX Item "hash"
A precomputed hash value for the \s-1MRO\s0's name, or 0.
.SH "Callbacks"
.IX Header "Callbacks"
The \f(CW\*(C`resolve\*(C'\fR function is called to generate a linearised \s-1ISA\s0 for the
given stash, using this \s-1MRO.\s0 It is called with a pointer to the stash, and
a \fIlevel\fR of 0. The core always sets \fIlevel\fR to 0 when it calls your
function \- the parameter is provided to allow your implementation to track
depth if it needs to recurse.
.PP
The function should return a reference to an array containing the parent
classes in order. The names of the classes should be the result of calling
\&\f(CW\*(C`HvENAME()\*(C'\fR on the stash. In those cases where \f(CW\*(C`HvENAME()\*(C'\fR returns null,
\&\f(CW\*(C`HvNAME()\*(C'\fR should be used instead.
.PP
The caller is responsible for incrementing the reference count of the array
returned if it wants to keep the structure. Hence, if you have created a
temporary value that you keep no pointer to, \f(CW\*(C`sv_2mortal()\*(C'\fR to ensure that
it is disposed of correctly. If you have cached your return value, then
return a pointer to it without changing the reference count.
.SH "Caching"
.IX Header "Caching"
Computing MROs can be expensive. The implementation provides a cache, in
which you can store a single \f(CW\*(C`SV *\*(C'\fR, or anything that can be cast to
\&\f(CW\*(C`SV *\*(C'\fR, such as \f(CW\*(C`AV *\*(C'\fR. To read your private value, use the macro
\&\f(CW\*(C`MRO_GET_PRIVATE_DATA()\*(C'\fR, passing it the \f(CW\*(C`mro_meta\*(C'\fR structure from the
stash, and a pointer to your \f(CW\*(C`mro_alg\*(C'\fR structure:
.PP
.Vb 2
\&    meta = HvMROMETA(stash);
\&    private_sv = MRO_GET_PRIVATE_DATA(meta, &my_mro_alg);
.Ve
.PP
To set your private value, call \f(CW\*(C`Perl_mro_set_private_data()\*(C'\fR:
.PP
.Vb 1
\&    Perl_mro_set_private_data(aTHX_ meta, &c3_alg, private_sv);
.Ve
.PP
The private data cache will take ownership of a reference to private_sv,
much the same way that \f(CW\*(C`hv_store()\*(C'\fR takes ownership of a reference to the
value that you pass it.
.SH "Examples"
.IX Header "Examples"
For examples of \s-1MRO\s0 implementations, see \f(CW\*(C`S_mro_get_linear_isa_c3()\*(C'\fR
and the \f(CW\*(C`BOOT:\*(C'\fR section of \fImro/mro.xs\fR, and \f(CW\*(C`S_mro_get_linear_isa_dfs()\*(C'\fR
in \fImro.c\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
The implementation of the C3 \s-1MRO\s0 and switchable MROs within the perl core was
written by Brandon L Black. Nicholas Clark created the pluggable interface, 
refactored Brandon's implementation to work with it, and wrote this document.
                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnetware.1                                0100644 0001750 0001750 00000025350 12566207442 023275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNETWARE 1"
.TH PERLNETWARE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnetware \- Perl for NetWare
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file gives instructions for building Perl 5.7 and above, and also 
Perl modules for NetWare. Before you start, you may want to read the
\&\s-1README\s0 file found in the top level directory into which the Perl source
code distribution was extracted. Make sure you read and understand
the terms under which the software is being distributed.
.SH "BUILD"
.IX Header "BUILD"
This section describes the steps to be performed to build a Perl \s-1NLM\s0
and other associated NLMs.
.SS "Tools & \s-1SDK\s0"
.IX Subsection "Tools & SDK"
The build requires CodeWarrior compiler and linker.  In addition,
the \*(L"NetWare \s-1SDK\*(R", \*(L"NLM &\s0 NetWare Libraries for C\*(R" and
\&\*(L"NetWare Server Protocol Libraries for C\*(R", all available at
<http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit>,
are required. Microsoft Visual \*(C+ version 4.2 or later is also
required.
.SS "Setup"
.IX Subsection "Setup"
The build process is dependent on the location of the NetWare \s-1SDK.\s0
Once the Tools & \s-1SDK\s0 are installed, the build environment has to
be setup.  The following batch files setup the environment.
.IP "SetNWBld.bat" 4
.IX Item "SetNWBld.bat"
The Execution of this file takes 2 parameters as input. The first
being the NetWare \s-1SDK\s0 path, second being the path for CodeWarrior
Compiler & tools. Execution of this file sets these paths and also
sets the build type to Release by default.
.IP "Buildtype.bat" 4
.IX Item "Buildtype.bat"
This is used to set the build type to debug or release. Change the
build type only after executing SetNWBld.bat
.Sp
Example:
.RS 4
.IP "1." 4
Typing \*(L"buildtype d on\*(R" at the command prompt causes the buildtype
to be set to Debug type with D2 flag set.
.IP "2." 4
Typing \*(L"buildtype d off\*(R" or \*(L"buildtype d\*(R" at the command prompt causes
the buildtype to be set to Debug type with D1 flag set.
.IP "3." 4
Typing \*(L"buildtype r\*(R" at the command prompt sets it to Release Build type.
.RE
.RS 4
.RE
.SS "Make"
.IX Subsection "Make"
The make process runs only under WinNT shell.  The NetWare makefile is
located under the NetWare folder.  This makes use of miniperl.exe to
run some of the Perl scripts. To create miniperl.exe, first set the
required paths for Visual c++ compiler (specify vcvars32 location) at
the command prompt.  Then run nmake from win32 folder through WinNT
command prompt.  The build process can be stopped after miniperl.exe
is created. Then run nmake from NetWare folder through WinNT command
prompt.
.PP
Currently the following two build types are tested on NetWare:
.IP "\(bu" 4
\&\s-1USE_MULTI, USE_ITHREADS & USE_IMP_SYS\s0 defined
.IP "\(bu" 4
\&\s-1USE_MULTI & USE_IMP_SYS\s0 defined and \s-1USE_ITHREADS\s0 not defined
.SS "Interpreter"
.IX Subsection "Interpreter"
Once miniperl.exe creation is over, run nmake from the NetWare folder.
This will build the Perl interpreter for NetWare as \fIperl.nlm\fR.
This is copied under the \fIRelease\fR folder if you are doing
a release build, else will be copied under \fIDebug\fR folder for debug builds.
.SS "Extensions"
.IX Subsection "Extensions"
The make process also creates the Perl extensions as \fI<Extension\fR.nlm>
.SH "INSTALL"
.IX Header "INSTALL"
To install NetWare Perl onto a NetWare server, first map the Sys
volume of a NetWare server to \fIi:\fR. This is because the makefile by
default sets the drive letter to \fIi:\fR.  Type \fInmake nwinstall\fR from
NetWare folder on a WinNT command prompt.  This will copy the binaries
and module files onto the NetWare server under \fIsys:\ePerl\fR
folder. The Perl interpreter, \fIperl.nlm\fR, is copied under
\&\fIsys:\eperl\esystem\fR folder.  Copy this to \fIsys:\esystem\fR folder.
.PP
Example: At the command prompt Type \*(L"nmake nwinstall\*(R".
          This will install NetWare Perl on the NetWare Server.
          Similarly, if you type \*(L"nmake install\*(R",
          this will cause the binaries to be installed on the local machine.
          (Typically under the c:\eperl folder)
.SH "BUILD NEW EXTENSIONS"
.IX Header "BUILD NEW EXTENSIONS"
To build extensions other than standard extensions, NetWare Perl has
to be installed on Windows along with Windows Perl. The Perl for
Windows can be either downloaded from the \s-1CPAN\s0 site and built using
the sources, or the binaries can be directly downloaded from the
ActiveState site.  Installation can be done by invoking \fInmake
install\fR from the NetWare folder on a WinNT command prompt after
building NetWare Perl by following steps given above.  This will copy
all the *.pm files and other required files.  Documentation files are
not copied.  Thus one must first install Windows Perl, Then install
NetWare Perl.
.PP
Once this is done, do the following to build any extension:
.IP "\(bu" 4
Change to the extension directory where its source files are present.
.IP "\(bu" 4
Run the following command at the command prompt:
.Sp
.Vb 1
\&    perl \-II<path to NetWare lib dir> \-II<path to lib> Makefile.pl
.Ve
.Sp
Example:
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
.Ve
.IP "\(bu" 4
nmake
.IP "\(bu" 4
nmake install
.Sp
Install will copy the files into the Windows machine where NetWare
Perl is installed and these files may have to be copied to the NetWare
server manually. Alternatively, pass \fIINSTALLSITELIB=i:\eperl\elib\fR as
an input to makefile.pl above. Here \fIi:\fR is the mapped drive to the
sys: volume of the server where Perl on NetWare is installed. Now
typing \fInmake install\fR, will copy the files onto the NetWare server.
.Sp
Example: You can execute the following on the command prompt.
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.Sp
or
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.IP "\(bu" 4
Note: Some modules downloaded from \s-1CPAN\s0 may require NetWare related
\&\s-1API\s0 in order to build on NetWare.  Other modules may however build
smoothly with or without minor changes depending on the type of
module.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The makefile for Win32 is used as a reference to create the makefile
for NetWare.  Also, the make process for NetWare port uses
miniperl.exe to run scripts during the make and installation process.
.SH "AUTHORS"
.IX Header "AUTHORS"
Anantha Kesari H Y (hyanantha@novell.com)
Aditya C (caditya@novell.com)
.SH "DATE"
.IX Header "DATE"
.IP "\(bu" 4
Created \- 18 Jan 2001
.IP "\(bu" 4
Modified \- 25 June 2001
.IP "\(bu" 4
Modified \- 13 July 2001
.IP "\(bu" 4
Modified \- 28 May 2002
                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnetware5.16.1                            0100644 0001750 0001750 00000025063 12566207421 023605  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNETWARE 1"
.TH PERLNETWARE 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnetware \- Perl for NetWare
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file gives instructions for building Perl 5.7 and above, and also 
Perl modules for NetWare. Before you start, you may want to read the
\&\s-1README\s0 file found in the top level directory into which the Perl source
code distribution was extracted. Make sure you read and understand
the terms under which the software is being distributed.
.SH "BUILD"
.IX Header "BUILD"
This section describes the steps to be performed to build a Perl \s-1NLM\s0
and other associated NLMs.
.SS "Tools & \s-1SDK\s0"
.IX Subsection "Tools & SDK"
The build requires CodeWarrior compiler and linker.  In addition,
the \*(L"NetWare \s-1SDK\s0\*(R", \*(L"\s-1NLM\s0 & NetWare Libraries for C\*(R" and
\&\*(L"NetWare Server Protocol Libraries for C\*(R", all available at
<http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit>,
are required. Microsoft Visual \*(C+ version 4.2 or later is also
required.
.SS "Setup"
.IX Subsection "Setup"
The build process is dependent on the location of the NetWare \s-1SDK\s0.
Once the Tools & \s-1SDK\s0 are installed, the build environment has to
be setup.  The following batch files setup the environment.
.IP "SetNWBld.bat" 4
.IX Item "SetNWBld.bat"
The Execution of this file takes 2 parameters as input. The first
being the NetWare \s-1SDK\s0 path, second being the path for CodeWarrior
Compiler & tools. Execution of this file sets these paths and also
sets the build type to Release by default.
.IP "Buildtype.bat" 4
.IX Item "Buildtype.bat"
This is used to set the build type to debug or release. Change the
build type only after executing SetNWBld.bat
.Sp
Example:
.RS 4
.IP "1." 4
Typing \*(L"buildtype d on\*(R" at the command prompt causes the buildtype
to be set to Debug type with D2 flag set.
.IP "2." 4
Typing \*(L"buildtype d off\*(R" or \*(L"buildtype d\*(R" at the command prompt causes
the buildtype to be set to Debug type with D1 flag set.
.IP "3." 4
Typing \*(L"buildtype r\*(R" at the command prompt sets it to Release Build type.
.RE
.RS 4
.RE
.SS "Make"
.IX Subsection "Make"
The make process runs only under WinNT shell.  The NetWare makefile is
located under the NetWare folder.  This makes use of miniperl.exe to
run some of the Perl scripts. To create miniperl.exe, first set the
required paths for Visual c++ compiler (specify vcvars32 location) at
the command prompt.  Then run nmake from win32 folder through WinNT
command prompt.  The build process can be stopped after miniperl.exe
is created. Then run nmake from NetWare folder through WinNT command
prompt.
.PP
Currently the following two build types are tested on NetWare:
.IP "\(bu" 4
\&\s-1USE_MULTI\s0, \s-1USE_ITHREADS\s0 & \s-1USE_IMP_SYS\s0 defined
.IP "\(bu" 4
\&\s-1USE_MULTI\s0 & \s-1USE_IMP_SYS\s0 defined and \s-1USE_ITHREADS\s0 not defined
.SS "Interpreter"
.IX Subsection "Interpreter"
Once miniperl.exe creation is over, run nmake from the NetWare folder.
This will build the Perl interpreter for NetWare as \fIperl.nlm\fR.
This is copied under the \fIRelease\fR folder if you are doing
a release build, else will be copied under \fIDebug\fR folder for debug builds.
.SS "Extensions"
.IX Subsection "Extensions"
The make process also creates the Perl extensions as \fI<Extension\fR.nlm>
.SH "INSTALL"
.IX Header "INSTALL"
To install NetWare Perl onto a NetWare server, first map the Sys
volume of a NetWare server to \fIi:\fR. This is because the makefile by
default sets the drive letter to \fIi:\fR.  Type \fInmake nwinstall\fR from
NetWare folder on a WinNT command prompt.  This will copy the binaries
and module files onto the NetWare server under \fIsys:\ePerl\fR
folder. The Perl interpreter, \fIperl.nlm\fR, is copied under
\&\fIsys:\eperl\esystem\fR folder.  Copy this to \fIsys:\esystem\fR folder.
.PP
Example: At the command prompt Type \*(L"nmake nwinstall\*(R".
          This will install NetWare Perl on the NetWare Server.
          Similarly, if you type \*(L"nmake install\*(R",
          this will cause the binaries to be installed on the local machine.
          (Typically under the c:\eperl folder)
.SH "BUILD NEW EXTENSIONS"
.IX Header "BUILD NEW EXTENSIONS"
To build extensions other than standard extensions, NetWare Perl has
to be installed on Windows along with Windows Perl. The Perl for
Windows can be either downloaded from the \s-1CPAN\s0 site and built using
the sources, or the binaries can be directly downloaded from the
ActiveState site.  Installation can be done by invoking \fInmake
install\fR from the NetWare folder on a WinNT command prompt after
building NetWare Perl by following steps given above.  This will copy
all the *.pm files and other required files.  Documentation files are
not copied.  Thus one must first install Windows Perl, Then install
NetWare Perl.
.PP
Once this is done, do the following to build any extension:
.IP "\(bu" 4
Change to the extension directory where its source files are present.
.IP "\(bu" 4
Run the following command at the command prompt:
.Sp
.Vb 1
\&    perl \-II<path to NetWare lib dir> \-II<path to lib> Makefile.pl
.Ve
.Sp
Example:
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
.Ve
.IP "\(bu" 4
nmake
.IP "\(bu" 4
nmake install
.Sp
Install will copy the files into the Windows machine where NetWare
Perl is installed and these files may have to be copied to the NetWare
server manually. Alternatively, pass \fIINSTALLSITELIB=i:\eperl\elib\fR as
an input to makefile.pl above. Here \fIi:\fR is the mapped drive to the
sys: volume of the server where Perl on NetWare is installed. Now
typing \fInmake install\fR, will copy the files onto the NetWare server.
.Sp
Example: You can execute the following on the command prompt.
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.Sp
or
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.IP "\(bu" 4
Note: Some modules downloaded from \s-1CPAN\s0 may require NetWare related
\&\s-1API\s0 in order to build on NetWare.  Other modules may however build
smoothly with or without minor changes depending on the type of
module.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The makefile for Win32 is used as a reference to create the makefile
for NetWare.  Also, the make process for NetWare port uses
miniperl.exe to run scripts during the make and installation process.
.SH "AUTHORS"
.IX Header "AUTHORS"
Anantha Kesari H Y (hyanantha@novell.com)
Aditya C (caditya@novell.com)
.SH "DATE"
.IX Header "DATE"
.IP "\(bu" 4
Created \- 18 Jan 2001
.IP "\(bu" 4
Modified \- 25 June 2001
.IP "\(bu" 4
Modified \- 13 July 2001
.IP "\(bu" 4
Modified \- 28 May 2002
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnetware5.18.1                            0100644 0001750 0001750 00000025350 12566207442 023611  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNETWARE 1"
.TH PERLNETWARE 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnetware \- Perl for NetWare
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file gives instructions for building Perl 5.7 and above, and also 
Perl modules for NetWare. Before you start, you may want to read the
\&\s-1README\s0 file found in the top level directory into which the Perl source
code distribution was extracted. Make sure you read and understand
the terms under which the software is being distributed.
.SH "BUILD"
.IX Header "BUILD"
This section describes the steps to be performed to build a Perl \s-1NLM\s0
and other associated NLMs.
.SS "Tools & \s-1SDK\s0"
.IX Subsection "Tools & SDK"
The build requires CodeWarrior compiler and linker.  In addition,
the \*(L"NetWare \s-1SDK\*(R", \*(L"NLM &\s0 NetWare Libraries for C\*(R" and
\&\*(L"NetWare Server Protocol Libraries for C\*(R", all available at
<http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit>,
are required. Microsoft Visual \*(C+ version 4.2 or later is also
required.
.SS "Setup"
.IX Subsection "Setup"
The build process is dependent on the location of the NetWare \s-1SDK.\s0
Once the Tools & \s-1SDK\s0 are installed, the build environment has to
be setup.  The following batch files setup the environment.
.IP "SetNWBld.bat" 4
.IX Item "SetNWBld.bat"
The Execution of this file takes 2 parameters as input. The first
being the NetWare \s-1SDK\s0 path, second being the path for CodeWarrior
Compiler & tools. Execution of this file sets these paths and also
sets the build type to Release by default.
.IP "Buildtype.bat" 4
.IX Item "Buildtype.bat"
This is used to set the build type to debug or release. Change the
build type only after executing SetNWBld.bat
.Sp
Example:
.RS 4
.IP "1." 4
Typing \*(L"buildtype d on\*(R" at the command prompt causes the buildtype
to be set to Debug type with D2 flag set.
.IP "2." 4
Typing \*(L"buildtype d off\*(R" or \*(L"buildtype d\*(R" at the command prompt causes
the buildtype to be set to Debug type with D1 flag set.
.IP "3." 4
Typing \*(L"buildtype r\*(R" at the command prompt sets it to Release Build type.
.RE
.RS 4
.RE
.SS "Make"
.IX Subsection "Make"
The make process runs only under WinNT shell.  The NetWare makefile is
located under the NetWare folder.  This makes use of miniperl.exe to
run some of the Perl scripts. To create miniperl.exe, first set the
required paths for Visual c++ compiler (specify vcvars32 location) at
the command prompt.  Then run nmake from win32 folder through WinNT
command prompt.  The build process can be stopped after miniperl.exe
is created. Then run nmake from NetWare folder through WinNT command
prompt.
.PP
Currently the following two build types are tested on NetWare:
.IP "\(bu" 4
\&\s-1USE_MULTI, USE_ITHREADS & USE_IMP_SYS\s0 defined
.IP "\(bu" 4
\&\s-1USE_MULTI & USE_IMP_SYS\s0 defined and \s-1USE_ITHREADS\s0 not defined
.SS "Interpreter"
.IX Subsection "Interpreter"
Once miniperl.exe creation is over, run nmake from the NetWare folder.
This will build the Perl interpreter for NetWare as \fIperl.nlm\fR.
This is copied under the \fIRelease\fR folder if you are doing
a release build, else will be copied under \fIDebug\fR folder for debug builds.
.SS "Extensions"
.IX Subsection "Extensions"
The make process also creates the Perl extensions as \fI<Extension\fR.nlm>
.SH "INSTALL"
.IX Header "INSTALL"
To install NetWare Perl onto a NetWare server, first map the Sys
volume of a NetWare server to \fIi:\fR. This is because the makefile by
default sets the drive letter to \fIi:\fR.  Type \fInmake nwinstall\fR from
NetWare folder on a WinNT command prompt.  This will copy the binaries
and module files onto the NetWare server under \fIsys:\ePerl\fR
folder. The Perl interpreter, \fIperl.nlm\fR, is copied under
\&\fIsys:\eperl\esystem\fR folder.  Copy this to \fIsys:\esystem\fR folder.
.PP
Example: At the command prompt Type \*(L"nmake nwinstall\*(R".
          This will install NetWare Perl on the NetWare Server.
          Similarly, if you type \*(L"nmake install\*(R",
          this will cause the binaries to be installed on the local machine.
          (Typically under the c:\eperl folder)
.SH "BUILD NEW EXTENSIONS"
.IX Header "BUILD NEW EXTENSIONS"
To build extensions other than standard extensions, NetWare Perl has
to be installed on Windows along with Windows Perl. The Perl for
Windows can be either downloaded from the \s-1CPAN\s0 site and built using
the sources, or the binaries can be directly downloaded from the
ActiveState site.  Installation can be done by invoking \fInmake
install\fR from the NetWare folder on a WinNT command prompt after
building NetWare Perl by following steps given above.  This will copy
all the *.pm files and other required files.  Documentation files are
not copied.  Thus one must first install Windows Perl, Then install
NetWare Perl.
.PP
Once this is done, do the following to build any extension:
.IP "\(bu" 4
Change to the extension directory where its source files are present.
.IP "\(bu" 4
Run the following command at the command prompt:
.Sp
.Vb 1
\&    perl \-II<path to NetWare lib dir> \-II<path to lib> Makefile.pl
.Ve
.Sp
Example:
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
.Ve
.IP "\(bu" 4
nmake
.IP "\(bu" 4
nmake install
.Sp
Install will copy the files into the Windows machine where NetWare
Perl is installed and these files may have to be copied to the NetWare
server manually. Alternatively, pass \fIINSTALLSITELIB=i:\eperl\elib\fR as
an input to makefile.pl above. Here \fIi:\fR is the mapped drive to the
sys: volume of the server where Perl on NetWare is installed. Now
typing \fInmake install\fR, will copy the files onto the NetWare server.
.Sp
Example: You can execute the following on the command prompt.
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.6.1/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.6.1\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.Sp
or
.Sp
.Vb 2
\&          perl \-Ic:/perl/5.8.0/lib/NetWare\-x86\-multi\-thread \-Ic:\eperl\e5.8.0\elib MakeFile.pl
\&          INSTALLSITELIB=i:\eperl\elib
.Ve
.IP "\(bu" 4
Note: Some modules downloaded from \s-1CPAN\s0 may require NetWare related
\&\s-1API\s0 in order to build on NetWare.  Other modules may however build
smoothly with or without minor changes depending on the type of
module.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The makefile for Win32 is used as a reference to create the makefile
for NetWare.  Also, the make process for NetWare port uses
miniperl.exe to run scripts during the make and installation process.
.SH "AUTHORS"
.IX Header "AUTHORS"
Anantha Kesari H Y (hyanantha@novell.com)
Aditya C (caditya@novell.com)
.SH "DATE"
.IX Header "DATE"
.IP "\(bu" 4
Created \- 18 Jan 2001
.IP "\(bu" 4
Modified \- 25 June 2001
.IP "\(bu" 4
Modified \- 13 July 2001
.IP "\(bu" 4
Modified \- 28 May 2002
                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnewmod.1                                 0100644 0001750 0001750 00000040513 12566207442 023117  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNEWMOD 1"
.TH PERLNEWMOD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnewmod \- preparing a new module for distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document gives you some suggestions about how to go about writing
Perl modules, preparing them for distribution, and making them available
via \s-1CPAN.\s0
.PP
One of the things that makes Perl really powerful is the fact that Perl
hackers tend to want to share the solutions to problems they've faced,
so you and I don't have to battle with the same problem again.
.PP
The main way they do this is by abstracting the solution into a Perl
module. If you don't know what one of these is, the rest of this
document isn't going to be much use to you. You're also missing out on
an awful lot of useful code; consider having a look at perlmod,
perlmodlib and perlmodinstall before coming back here.
.PP
When you've found that there isn't a module available for what you're
trying to do, and you've had to write the code yourself, consider
packaging up the solution into a module and uploading it to \s-1CPAN\s0 so that
others can benefit.
.SS "Warning"
.IX Subsection "Warning"
We're going to primarily concentrate on Perl-only modules here, rather
than \s-1XS\s0 modules. \s-1XS\s0 modules serve a rather different purpose, and
you should consider different things before distributing them \- the
popularity of the library you are gluing, the portability to other
operating systems, and so on. However, the notes on preparing the Perl
side of the module and packaging and distributing it will apply equally
well to an \s-1XS\s0 module as a pure-Perl one.
.SS "What should I make into a module?"
.IX Subsection "What should I make into a module?"
You should make a module out of any code that you think is going to be
useful to others. Anything that's likely to fill a hole in the communal
library and which someone else can slot directly into their program. Any
part of your code which you can isolate and extract and plug into
something else is a likely candidate.
.PP
Let's take an example. Suppose you're reading in data from a local
format into a hash-of-hashes in Perl, turning that into a tree, walking
the tree and then piping each node to an Acme Transmogrifier Server.
.PP
Now, quite a few people have the Acme Transmogrifier, and you've had to
write something to talk the protocol from scratch \- you'd almost
certainly want to make that into a module. The level at which you pitch
it is up to you: you might want protocol-level modules analogous to
Net::SMTP which then talk to higher level modules analogous
to Mail::Send. The choice is yours, but you do want to get
a module out for that server protocol.
.PP
Nobody else on the planet is going to talk your local data format, so we
can ignore that. But what about the thing in the middle? Building tree
structures from Perl variables and then traversing them is a nice,
general problem, and if nobody's already written a module that does
that, you might want to modularise that code too.
.PP
So hopefully you've now got a few ideas about what's good to modularise.
Let's now see how it's done.
.SS "Step-by-step: Preparing the ground"
.IX Subsection "Step-by-step: Preparing the ground"
Before we even start scraping out the code, there are a few things we'll
want to do in advance.
.IP "Look around" 3
.IX Item "Look around"
Dig into a bunch of modules to see how they're written. I'd suggest
starting with Text::Tabs, since it's in the standard
library and is nice and simple, and then looking at something a little
more complex like File::Copy.  For object oriented
code, \f(CW\*(C`WWW::Mechanize\*(C'\fR or the \f(CW\*(C`Email::*\*(C'\fR modules provide some good
examples.
.Sp
These should give you an overall feel for how modules are laid out and
written.
.IP "Check it's new" 3
.IX Item "Check it's new"
There are a lot of modules on \s-1CPAN,\s0 and it's easy to miss one that's
similar to what you're planning on contributing. Have a good plough
through the <http://search.cpan.org> and make sure you're not the one
reinventing the wheel!
.IP "Discuss the need" 3
.IX Item "Discuss the need"
You might love it. You might feel that everyone else needs it. But there
might not actually be any real demand for it out there. If you're unsure
about the demand your module will have, consider sending out feelers
on the \f(CW\*(C`comp.lang.perl.modules\*(C'\fR newsgroup, or as a last resort, ask the
modules list at \f(CW\*(C`modules@perl.org\*(C'\fR. Remember that this is a closed list
with a very long turn-around time \- be prepared to wait a good while for
a response from them.
.IP "Choose a name" 3
.IX Item "Choose a name"
Perl modules included on \s-1CPAN\s0 have a naming hierarchy you should try to
fit in with. See perlmodlib for more details on how this works, and
browse around \s-1CPAN\s0 and the modules list to get a feel of it. At the very
least, remember this: modules should be title capitalised, (This::Thing)
fit in with a category, and explain their purpose succinctly.
.IP "Check again" 3
.IX Item "Check again"
While you're doing that, make really sure you haven't missed a module
similar to the one you're about to write.
.Sp
When you've got your name sorted out and you're sure that your module is
wanted and not currently available, it's time to start coding.
.SS "Step-by-step: Making the module"
.IX Subsection "Step-by-step: Making the module"
.IP "Start with \fImodule-starter\fR or \fIh2xs\fR" 3
.IX Item "Start with module-starter or h2xs"
The \fImodule-starter\fR utility is distributed as part of the
Module::Starter \s-1CPAN\s0 package.  It creates a directory
with stubs of all the necessary files to start a new module, according
to recent \*(L"best practice\*(R" for module development, and is invoked from
the command line, thus:
.Sp
.Vb 2
\&    module\-starter \-\-module=Foo::Bar \e
\&       \-\-author="Your Name" \-\-email=yourname@cpan.org
.Ve
.Sp
If you do not wish to install the Module::Starter
package from \s-1CPAN, \s0\fIh2xs\fR is an older tool, originally intended for the
development of \s-1XS\s0 modules, which comes packaged with the Perl
distribution.
.Sp
A typical invocation of h2xs for a pure Perl module is:
.Sp
.Vb 1
\&    h2xs \-AX \-\-skip\-exporter \-\-use\-new\-tests \-n Foo::Bar
.Ve
.Sp
The \f(CW\*(C`\-A\*(C'\fR omits the Autoloader code, \f(CW\*(C`\-X\*(C'\fR omits \s-1XS\s0 elements,
\&\f(CW\*(C`\-\-skip\-exporter\*(C'\fR omits the Exporter code, \f(CW\*(C`\-\-use\-new\-tests\*(C'\fR sets up a
modern testing environment, and \f(CW\*(C`\-n\*(C'\fR specifies the name of the module.
.IP "Use strict and warnings" 3
.IX Item "Use strict and warnings"
A module's code has to be warning and strict-clean, since you can't
guarantee the conditions that it'll be used under. Besides, you wouldn't
want to distribute code that wasn't warning or strict-clean anyway,
right?
.IP "Use Carp" 3
.IX Item "Use Carp"
The Carp module allows you to present your error messages from
the caller's perspective; this gives you a way to signal a problem with
the caller and not your module. For instance, if you say this:
.Sp
.Vb 1
\&    warn "No hostname given";
.Ve
.Sp
the user will see something like this:
.Sp
.Vb 2
\&    No hostname given at /usr/local/lib/perl5/site_perl/5.6.0/Net/Acme.pm
\&    line 123.
.Ve
.Sp
which looks like your module is doing something wrong. Instead, you want
to put the blame on the user, and say this:
.Sp
.Vb 1
\&    No hostname given at bad_code, line 10.
.Ve
.Sp
You do this by using Carp and replacing your \f(CW\*(C`warn\*(C'\fRs with
\&\f(CW\*(C`carp\*(C'\fRs. If you need to \f(CW\*(C`die\*(C'\fR, say \f(CW\*(C`croak\*(C'\fR instead. However, keep
\&\f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR in place for your sanity checks \- where it really is
your module at fault.
.IP "Use Exporter \- wisely!" 3
.IX Item "Use Exporter - wisely!"
Exporter gives you a standard way of exporting symbols and
subroutines from your module into the caller's namespace. For instance,
saying \f(CW\*(C`use Net::Acme qw(&frob)\*(C'\fR would import the \f(CW\*(C`frob\*(C'\fR subroutine.
.Sp
The package variable \f(CW@EXPORT\fR will determine which symbols will get
exported when the caller simply says \f(CW\*(C`use Net::Acme\*(C'\fR \- you will hardly
ever want to put anything in there. \f(CW@EXPORT_OK\fR, on the other hand,
specifies which symbols you're willing to export. If you do want to
export a bunch of symbols, use the \f(CW%EXPORT_TAGS\fR and define a standard
export set \- look at Exporter for more details.
.IP "Use plain old documentation" 3
.IX Item "Use plain old documentation"
The work isn't over until the paperwork is done, and you're going to
need to put in some time writing some documentation for your module.
\&\f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR will provide a stub for you to fill in; if
you're not sure about the format, look at perlpod for an
introduction. Provide a good synopsis of how your module is used in
code, a description, and then notes on the syntax and function of the
individual subroutines or methods. Use Perl comments for developer notes
and \s-1POD\s0 for end-user notes.
.IP "Write tests" 3
.IX Item "Write tests"
You're encouraged to create self-tests for your module to ensure it's
working as intended on the myriad platforms Perl supports; if you upload
your module to \s-1CPAN,\s0 a host of testers will build your module and send
you the results of the tests. Again, \f(CW\*(C`module\-starter\*(C'\fR and \f(CW\*(C`h2xs\*(C'\fR
provide a test framework which you can extend \- you should do something
more than just checking your module will compile.
Test::Simple and Test::More are good
places to start when writing a test suite.
.IP "Write the \s-1README\s0" 3
.IX Item "Write the README"
If you're uploading to \s-1CPAN,\s0 the automated gremlins will extract the
\&\s-1README\s0 file and place that in your \s-1CPAN\s0 directory. It'll also appear in
the main \fIby-module\fR and \fIby-category\fR directories if you make it onto
the modules list. It's a good idea to put here what the module actually
does in detail, and the user-visible changes since the last release.
.SS "Step-by-step: Distributing your module"
.IX Subsection "Step-by-step: Distributing your module"
.IP "Get a \s-1CPAN\s0 user \s-1ID\s0" 3
.IX Item "Get a CPAN user ID"
Every developer publishing modules on \s-1CPAN\s0 needs a \s-1CPAN ID. \s0 Visit
\&\f(CW\*(C`http://pause.perl.org/\*(C'\fR, select \*(L"Request \s-1PAUSE\s0 Account\*(R", and wait for
your request to be approved by the \s-1PAUSE\s0 administrators.
.ie n .IP """perl Makefile.PL; make test; make dist""" 3
.el .IP "\f(CWperl Makefile.PL; make test; make dist\fR" 3
.IX Item "perl Makefile.PL; make test; make dist"
Once again, \f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR has done all the work for you.
They produce the standard \f(CW\*(C`Makefile.PL\*(C'\fR you see when you download and
install modules, and this produces a Makefile with a \f(CW\*(C`dist\*(C'\fR target.
.Sp
Once you've ensured that your module passes its own tests \- always a
good thing to make sure \- you can \f(CW\*(C`make dist\*(C'\fR, and the Makefile will
hopefully produce you a nice tarball of your module, ready for upload.
.IP "Upload the tarball" 3
.IX Item "Upload the tarball"
The email you got when you received your \s-1CPAN ID\s0 will tell you how to
log in to \s-1PAUSE,\s0 the Perl Authors Upload SErver. From the menus there,
you can upload your module to \s-1CPAN.\s0
.IP "Announce to the modules list" 3
.IX Item "Announce to the modules list"
Once uploaded, it'll sit unnoticed in your author directory. If you want
it connected to the rest of the \s-1CPAN,\s0 you'll need to go to \*(L"Register
Namespace\*(R" on \s-1PAUSE. \s0 Once registered, your module will appear in the
by-module and by-category listings on \s-1CPAN.\s0
.IP "Announce to clpa" 3
.IX Item "Announce to clpa"
If you have a burning desire to tell the world about your release, post
an announcement to the moderated \f(CW\*(C`comp.lang.perl.announce\*(C'\fR newsgroup.
.IP "Fix bugs!" 3
.IX Item "Fix bugs!"
Once you start accumulating users, they'll send you bug reports. If
you're lucky, they'll even send you patches. Welcome to the joys of
maintaining a software project...
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Cozens, \f(CW\*(C`simon@cpan.org\*(C'\fR
.PP
Updated by Kirrily \*(L"Skud\*(R" Robert, \f(CW\*(C`skud@cpan.org\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlmod, perlmodlib, perlmodinstall, h2xs, strict,
Carp, Exporter, perlpod, Test::Simple, Test::More
ExtUtils::MakeMaker, Module::Build, Module::Starter
http://www.cpan.org/ , Ken Williams's tutorial on building your own
module at http://mathforum.org/~ken/perl_modules.html
                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnewmod5.16.1                             0100644 0001750 0001750 00000040210 12566207421 023420  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNEWMOD 1"
.TH PERLNEWMOD 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnewmod \- preparing a new module for distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document gives you some suggestions about how to go about writing
Perl modules, preparing them for distribution, and making them available
via \s-1CPAN\s0.
.PP
One of the things that makes Perl really powerful is the fact that Perl
hackers tend to want to share the solutions to problems they've faced,
so you and I don't have to battle with the same problem again.
.PP
The main way they do this is by abstracting the solution into a Perl
module. If you don't know what one of these is, the rest of this
document isn't going to be much use to you. You're also missing out on
an awful lot of useful code; consider having a look at perlmod,
perlmodlib and perlmodinstall before coming back here.
.PP
When you've found that there isn't a module available for what you're
trying to do, and you've had to write the code yourself, consider
packaging up the solution into a module and uploading it to \s-1CPAN\s0 so that
others can benefit.
.SS "Warning"
.IX Subsection "Warning"
We're going to primarily concentrate on Perl-only modules here, rather
than \s-1XS\s0 modules. \s-1XS\s0 modules serve a rather different purpose, and
you should consider different things before distributing them \- the
popularity of the library you are gluing, the portability to other
operating systems, and so on. However, the notes on preparing the Perl
side of the module and packaging and distributing it will apply equally
well to an \s-1XS\s0 module as a pure-Perl one.
.SS "What should I make into a module?"
.IX Subsection "What should I make into a module?"
You should make a module out of any code that you think is going to be
useful to others. Anything that's likely to fill a hole in the communal
library and which someone else can slot directly into their program. Any
part of your code which you can isolate and extract and plug into
something else is a likely candidate.
.PP
Let's take an example. Suppose you're reading in data from a local
format into a hash-of-hashes in Perl, turning that into a tree, walking
the tree and then piping each node to an Acme Transmogrifier Server.
.PP
Now, quite a few people have the Acme Transmogrifier, and you've had to
write something to talk the protocol from scratch \- you'd almost
certainly want to make that into a module. The level at which you pitch
it is up to you: you might want protocol-level modules analogous to
Net::SMTP which then talk to higher level modules analogous
to Mail::Send. The choice is yours, but you do want to get
a module out for that server protocol.
.PP
Nobody else on the planet is going to talk your local data format, so we
can ignore that. But what about the thing in the middle? Building tree
structures from Perl variables and then traversing them is a nice,
general problem, and if nobody's already written a module that does
that, you might want to modularise that code too.
.PP
So hopefully you've now got a few ideas about what's good to modularise.
Let's now see how it's done.
.SS "Step-by-step: Preparing the ground"
.IX Subsection "Step-by-step: Preparing the ground"
Before we even start scraping out the code, there are a few things we'll
want to do in advance.
.IP "Look around" 3
.IX Item "Look around"
Dig into a bunch of modules to see how they're written. I'd suggest
starting with Text::Tabs, since it's in the standard
library and is nice and simple, and then looking at something a little
more complex like File::Copy.  For object oriented
code, \f(CW\*(C`WWW::Mechanize\*(C'\fR or the \f(CW\*(C`Email::*\*(C'\fR modules provide some good
examples.
.Sp
These should give you an overall feel for how modules are laid out and
written.
.IP "Check it's new" 3
.IX Item "Check it's new"
There are a lot of modules on \s-1CPAN\s0, and it's easy to miss one that's
similar to what you're planning on contributing. Have a good plough
through the <http://search.cpan.org> and make sure you're not the one
reinventing the wheel!
.IP "Discuss the need" 3
.IX Item "Discuss the need"
You might love it. You might feel that everyone else needs it. But there
might not actually be any real demand for it out there. If you're unsure
about the demand your module will have, consider sending out feelers
on the \f(CW\*(C`comp.lang.perl.modules\*(C'\fR newsgroup, or as a last resort, ask the
modules list at \f(CW\*(C`modules@perl.org\*(C'\fR. Remember that this is a closed list
with a very long turn-around time \- be prepared to wait a good while for
a response from them.
.IP "Choose a name" 3
.IX Item "Choose a name"
Perl modules included on \s-1CPAN\s0 have a naming hierarchy you should try to
fit in with. See perlmodlib for more details on how this works, and
browse around \s-1CPAN\s0 and the modules list to get a feel of it. At the very
least, remember this: modules should be title capitalised, (This::Thing)
fit in with a category, and explain their purpose succinctly.
.IP "Check again" 3
.IX Item "Check again"
While you're doing that, make really sure you haven't missed a module
similar to the one you're about to write.
.Sp
When you've got your name sorted out and you're sure that your module is
wanted and not currently available, it's time to start coding.
.SS "Step-by-step: Making the module"
.IX Subsection "Step-by-step: Making the module"
.IP "Start with \fImodule-starter\fR or \fIh2xs\fR" 3
.IX Item "Start with module-starter or h2xs"
The \fImodule-starter\fR utility is distributed as part of the
Module::Starter \s-1CPAN\s0 package.  It creates a directory
with stubs of all the necessary files to start a new module, according
to recent \*(L"best practice\*(R" for module development, and is invoked from
the command line, thus:
.Sp
.Vb 2
\&    module\-starter \-\-module=Foo::Bar \e
\&       \-\-author="Your Name" \-\-email=yourname@cpan.org
.Ve
.Sp
If you do not wish to install the Module::Starter
package from \s-1CPAN\s0, \fIh2xs\fR is an older tool, originally intended for the
development of \s-1XS\s0 modules, which comes packaged with the Perl
distribution.
.Sp
A typical invocation of h2xs for a pure Perl module is:
.Sp
.Vb 1
\&    h2xs \-AX \-\-skip\-exporter \-\-use\-new\-tests \-n Foo::Bar
.Ve
.Sp
The \f(CW\*(C`\-A\*(C'\fR omits the Autoloader code, \f(CW\*(C`\-X\*(C'\fR omits \s-1XS\s0 elements,
\&\f(CW\*(C`\-\-skip\-exporter\*(C'\fR omits the Exporter code, \f(CW\*(C`\-\-use\-new\-tests\*(C'\fR sets up a
modern testing environment, and \f(CW\*(C`\-n\*(C'\fR specifies the name of the module.
.IP "Use strict and warnings" 3
.IX Item "Use strict and warnings"
A module's code has to be warning and strict-clean, since you can't
guarantee the conditions that it'll be used under. Besides, you wouldn't
want to distribute code that wasn't warning or strict-clean anyway,
right?
.IP "Use Carp" 3
.IX Item "Use Carp"
The Carp module allows you to present your error messages from
the caller's perspective; this gives you a way to signal a problem with
the caller and not your module. For instance, if you say this:
.Sp
.Vb 1
\&    warn "No hostname given";
.Ve
.Sp
the user will see something like this:
.Sp
.Vb 2
\&    No hostname given at /usr/local/lib/perl5/site_perl/5.6.0/Net/Acme.pm
\&    line 123.
.Ve
.Sp
which looks like your module is doing something wrong. Instead, you want
to put the blame on the user, and say this:
.Sp
.Vb 1
\&    No hostname given at bad_code, line 10.
.Ve
.Sp
You do this by using Carp and replacing your \f(CW\*(C`warn\*(C'\fRs with
\&\f(CW\*(C`carp\*(C'\fRs. If you need to \f(CW\*(C`die\*(C'\fR, say \f(CW\*(C`croak\*(C'\fR instead. However, keep
\&\f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR in place for your sanity checks \- where it really is
your module at fault.
.IP "Use Exporter \- wisely!" 3
.IX Item "Use Exporter - wisely!"
Exporter gives you a standard way of exporting symbols and
subroutines from your module into the caller's namespace. For instance,
saying \f(CW\*(C`use Net::Acme qw(&frob)\*(C'\fR would import the \f(CW\*(C`frob\*(C'\fR subroutine.
.Sp
The package variable \f(CW@EXPORT\fR will determine which symbols will get
exported when the caller simply says \f(CW\*(C`use Net::Acme\*(C'\fR \- you will hardly
ever want to put anything in there. \f(CW@EXPORT_OK\fR, on the other hand,
specifies which symbols you're willing to export. If you do want to
export a bunch of symbols, use the \f(CW%EXPORT_TAGS\fR and define a standard
export set \- look at Exporter for more details.
.IP "Use plain old documentation" 3
.IX Item "Use plain old documentation"
The work isn't over until the paperwork is done, and you're going to
need to put in some time writing some documentation for your module.
\&\f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR will provide a stub for you to fill in; if
you're not sure about the format, look at perlpod for an
introduction. Provide a good synopsis of how your module is used in
code, a description, and then notes on the syntax and function of the
individual subroutines or methods. Use Perl comments for developer notes
and \s-1POD\s0 for end-user notes.
.IP "Write tests" 3
.IX Item "Write tests"
You're encouraged to create self-tests for your module to ensure it's
working as intended on the myriad platforms Perl supports; if you upload
your module to \s-1CPAN\s0, a host of testers will build your module and send
you the results of the tests. Again, \f(CW\*(C`module\-starter\*(C'\fR and \f(CW\*(C`h2xs\*(C'\fR
provide a test framework which you can extend \- you should do something
more than just checking your module will compile.
Test::Simple and Test::More are good
places to start when writing a test suite.
.IP "Write the \s-1README\s0" 3
.IX Item "Write the README"
If you're uploading to \s-1CPAN\s0, the automated gremlins will extract the
\&\s-1README\s0 file and place that in your \s-1CPAN\s0 directory. It'll also appear in
the main \fIby-module\fR and \fIby-category\fR directories if you make it onto
the modules list. It's a good idea to put here what the module actually
does in detail, and the user-visible changes since the last release.
.SS "Step-by-step: Distributing your module"
.IX Subsection "Step-by-step: Distributing your module"
.IP "Get a \s-1CPAN\s0 user \s-1ID\s0" 3
.IX Item "Get a CPAN user ID"
Every developer publishing modules on \s-1CPAN\s0 needs a \s-1CPAN\s0 \s-1ID\s0.  Visit
\&\f(CW\*(C`http://pause.perl.org/\*(C'\fR, select \*(L"Request \s-1PAUSE\s0 Account\*(R", and wait for
your request to be approved by the \s-1PAUSE\s0 administrators.
.ie n .IP """perl Makefile.PL; make test; make dist""" 3
.el .IP "\f(CWperl Makefile.PL; make test; make dist\fR" 3
.IX Item "perl Makefile.PL; make test; make dist"
Once again, \f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR has done all the work for you.
They produce the standard \f(CW\*(C`Makefile.PL\*(C'\fR you see when you download and
install modules, and this produces a Makefile with a \f(CW\*(C`dist\*(C'\fR target.
.Sp
Once you've ensured that your module passes its own tests \- always a
good thing to make sure \- you can \f(CW\*(C`make dist\*(C'\fR, and the Makefile will
hopefully produce you a nice tarball of your module, ready for upload.
.IP "Upload the tarball" 3
.IX Item "Upload the tarball"
The email you got when you received your \s-1CPAN\s0 \s-1ID\s0 will tell you how to
log in to \s-1PAUSE\s0, the Perl Authors Upload SErver. From the menus there,
you can upload your module to \s-1CPAN\s0.
.IP "Announce to the modules list" 3
.IX Item "Announce to the modules list"
Once uploaded, it'll sit unnoticed in your author directory. If you want
it connected to the rest of the \s-1CPAN\s0, you'll need to go to \*(L"Register
Namespace\*(R" on \s-1PAUSE\s0.  Once registered, your module will appear in the
by-module and by-category listings on \s-1CPAN\s0.
.IP "Announce to clpa" 3
.IX Item "Announce to clpa"
If you have a burning desire to tell the world about your release, post
an announcement to the moderated \f(CW\*(C`comp.lang.perl.announce\*(C'\fR newsgroup.
.IP "Fix bugs!" 3
.IX Item "Fix bugs!"
Once you start accumulating users, they'll send you bug reports. If
you're lucky, they'll even send you patches. Welcome to the joys of
maintaining a software project...
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Cozens, \f(CW\*(C`simon@cpan.org\*(C'\fR
.PP
Updated by Kirrily \*(L"Skud\*(R" Robert, \f(CW\*(C`skud@cpan.org\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlmod, perlmodlib, perlmodinstall, h2xs, strict,
Carp, Exporter, perlpod, Test::Simple, Test::More
ExtUtils::MakeMaker, Module::Build, Module::Starter
http://www.cpan.org/ , Ken Williams's tutorial on building your own
module at http://mathforum.org/~ken/perl_modules.html
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnewmod5.18.1                             0100644 0001750 0001750 00000040513 12566207442 023433  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNEWMOD 1"
.TH PERLNEWMOD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnewmod \- preparing a new module for distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document gives you some suggestions about how to go about writing
Perl modules, preparing them for distribution, and making them available
via \s-1CPAN.\s0
.PP
One of the things that makes Perl really powerful is the fact that Perl
hackers tend to want to share the solutions to problems they've faced,
so you and I don't have to battle with the same problem again.
.PP
The main way they do this is by abstracting the solution into a Perl
module. If you don't know what one of these is, the rest of this
document isn't going to be much use to you. You're also missing out on
an awful lot of useful code; consider having a look at perlmod,
perlmodlib and perlmodinstall before coming back here.
.PP
When you've found that there isn't a module available for what you're
trying to do, and you've had to write the code yourself, consider
packaging up the solution into a module and uploading it to \s-1CPAN\s0 so that
others can benefit.
.SS "Warning"
.IX Subsection "Warning"
We're going to primarily concentrate on Perl-only modules here, rather
than \s-1XS\s0 modules. \s-1XS\s0 modules serve a rather different purpose, and
you should consider different things before distributing them \- the
popularity of the library you are gluing, the portability to other
operating systems, and so on. However, the notes on preparing the Perl
side of the module and packaging and distributing it will apply equally
well to an \s-1XS\s0 module as a pure-Perl one.
.SS "What should I make into a module?"
.IX Subsection "What should I make into a module?"
You should make a module out of any code that you think is going to be
useful to others. Anything that's likely to fill a hole in the communal
library and which someone else can slot directly into their program. Any
part of your code which you can isolate and extract and plug into
something else is a likely candidate.
.PP
Let's take an example. Suppose you're reading in data from a local
format into a hash-of-hashes in Perl, turning that into a tree, walking
the tree and then piping each node to an Acme Transmogrifier Server.
.PP
Now, quite a few people have the Acme Transmogrifier, and you've had to
write something to talk the protocol from scratch \- you'd almost
certainly want to make that into a module. The level at which you pitch
it is up to you: you might want protocol-level modules analogous to
Net::SMTP which then talk to higher level modules analogous
to Mail::Send. The choice is yours, but you do want to get
a module out for that server protocol.
.PP
Nobody else on the planet is going to talk your local data format, so we
can ignore that. But what about the thing in the middle? Building tree
structures from Perl variables and then traversing them is a nice,
general problem, and if nobody's already written a module that does
that, you might want to modularise that code too.
.PP
So hopefully you've now got a few ideas about what's good to modularise.
Let's now see how it's done.
.SS "Step-by-step: Preparing the ground"
.IX Subsection "Step-by-step: Preparing the ground"
Before we even start scraping out the code, there are a few things we'll
want to do in advance.
.IP "Look around" 3
.IX Item "Look around"
Dig into a bunch of modules to see how they're written. I'd suggest
starting with Text::Tabs, since it's in the standard
library and is nice and simple, and then looking at something a little
more complex like File::Copy.  For object oriented
code, \f(CW\*(C`WWW::Mechanize\*(C'\fR or the \f(CW\*(C`Email::*\*(C'\fR modules provide some good
examples.
.Sp
These should give you an overall feel for how modules are laid out and
written.
.IP "Check it's new" 3
.IX Item "Check it's new"
There are a lot of modules on \s-1CPAN,\s0 and it's easy to miss one that's
similar to what you're planning on contributing. Have a good plough
through the <http://search.cpan.org> and make sure you're not the one
reinventing the wheel!
.IP "Discuss the need" 3
.IX Item "Discuss the need"
You might love it. You might feel that everyone else needs it. But there
might not actually be any real demand for it out there. If you're unsure
about the demand your module will have, consider sending out feelers
on the \f(CW\*(C`comp.lang.perl.modules\*(C'\fR newsgroup, or as a last resort, ask the
modules list at \f(CW\*(C`modules@perl.org\*(C'\fR. Remember that this is a closed list
with a very long turn-around time \- be prepared to wait a good while for
a response from them.
.IP "Choose a name" 3
.IX Item "Choose a name"
Perl modules included on \s-1CPAN\s0 have a naming hierarchy you should try to
fit in with. See perlmodlib for more details on how this works, and
browse around \s-1CPAN\s0 and the modules list to get a feel of it. At the very
least, remember this: modules should be title capitalised, (This::Thing)
fit in with a category, and explain their purpose succinctly.
.IP "Check again" 3
.IX Item "Check again"
While you're doing that, make really sure you haven't missed a module
similar to the one you're about to write.
.Sp
When you've got your name sorted out and you're sure that your module is
wanted and not currently available, it's time to start coding.
.SS "Step-by-step: Making the module"
.IX Subsection "Step-by-step: Making the module"
.IP "Start with \fImodule-starter\fR or \fIh2xs\fR" 3
.IX Item "Start with module-starter or h2xs"
The \fImodule-starter\fR utility is distributed as part of the
Module::Starter \s-1CPAN\s0 package.  It creates a directory
with stubs of all the necessary files to start a new module, according
to recent \*(L"best practice\*(R" for module development, and is invoked from
the command line, thus:
.Sp
.Vb 2
\&    module\-starter \-\-module=Foo::Bar \e
\&       \-\-author="Your Name" \-\-email=yourname@cpan.org
.Ve
.Sp
If you do not wish to install the Module::Starter
package from \s-1CPAN, \s0\fIh2xs\fR is an older tool, originally intended for the
development of \s-1XS\s0 modules, which comes packaged with the Perl
distribution.
.Sp
A typical invocation of h2xs for a pure Perl module is:
.Sp
.Vb 1
\&    h2xs \-AX \-\-skip\-exporter \-\-use\-new\-tests \-n Foo::Bar
.Ve
.Sp
The \f(CW\*(C`\-A\*(C'\fR omits the Autoloader code, \f(CW\*(C`\-X\*(C'\fR omits \s-1XS\s0 elements,
\&\f(CW\*(C`\-\-skip\-exporter\*(C'\fR omits the Exporter code, \f(CW\*(C`\-\-use\-new\-tests\*(C'\fR sets up a
modern testing environment, and \f(CW\*(C`\-n\*(C'\fR specifies the name of the module.
.IP "Use strict and warnings" 3
.IX Item "Use strict and warnings"
A module's code has to be warning and strict-clean, since you can't
guarantee the conditions that it'll be used under. Besides, you wouldn't
want to distribute code that wasn't warning or strict-clean anyway,
right?
.IP "Use Carp" 3
.IX Item "Use Carp"
The Carp module allows you to present your error messages from
the caller's perspective; this gives you a way to signal a problem with
the caller and not your module. For instance, if you say this:
.Sp
.Vb 1
\&    warn "No hostname given";
.Ve
.Sp
the user will see something like this:
.Sp
.Vb 2
\&    No hostname given at /usr/local/lib/perl5/site_perl/5.6.0/Net/Acme.pm
\&    line 123.
.Ve
.Sp
which looks like your module is doing something wrong. Instead, you want
to put the blame on the user, and say this:
.Sp
.Vb 1
\&    No hostname given at bad_code, line 10.
.Ve
.Sp
You do this by using Carp and replacing your \f(CW\*(C`warn\*(C'\fRs with
\&\f(CW\*(C`carp\*(C'\fRs. If you need to \f(CW\*(C`die\*(C'\fR, say \f(CW\*(C`croak\*(C'\fR instead. However, keep
\&\f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR in place for your sanity checks \- where it really is
your module at fault.
.IP "Use Exporter \- wisely!" 3
.IX Item "Use Exporter - wisely!"
Exporter gives you a standard way of exporting symbols and
subroutines from your module into the caller's namespace. For instance,
saying \f(CW\*(C`use Net::Acme qw(&frob)\*(C'\fR would import the \f(CW\*(C`frob\*(C'\fR subroutine.
.Sp
The package variable \f(CW@EXPORT\fR will determine which symbols will get
exported when the caller simply says \f(CW\*(C`use Net::Acme\*(C'\fR \- you will hardly
ever want to put anything in there. \f(CW@EXPORT_OK\fR, on the other hand,
specifies which symbols you're willing to export. If you do want to
export a bunch of symbols, use the \f(CW%EXPORT_TAGS\fR and define a standard
export set \- look at Exporter for more details.
.IP "Use plain old documentation" 3
.IX Item "Use plain old documentation"
The work isn't over until the paperwork is done, and you're going to
need to put in some time writing some documentation for your module.
\&\f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR will provide a stub for you to fill in; if
you're not sure about the format, look at perlpod for an
introduction. Provide a good synopsis of how your module is used in
code, a description, and then notes on the syntax and function of the
individual subroutines or methods. Use Perl comments for developer notes
and \s-1POD\s0 for end-user notes.
.IP "Write tests" 3
.IX Item "Write tests"
You're encouraged to create self-tests for your module to ensure it's
working as intended on the myriad platforms Perl supports; if you upload
your module to \s-1CPAN,\s0 a host of testers will build your module and send
you the results of the tests. Again, \f(CW\*(C`module\-starter\*(C'\fR and \f(CW\*(C`h2xs\*(C'\fR
provide a test framework which you can extend \- you should do something
more than just checking your module will compile.
Test::Simple and Test::More are good
places to start when writing a test suite.
.IP "Write the \s-1README\s0" 3
.IX Item "Write the README"
If you're uploading to \s-1CPAN,\s0 the automated gremlins will extract the
\&\s-1README\s0 file and place that in your \s-1CPAN\s0 directory. It'll also appear in
the main \fIby-module\fR and \fIby-category\fR directories if you make it onto
the modules list. It's a good idea to put here what the module actually
does in detail, and the user-visible changes since the last release.
.SS "Step-by-step: Distributing your module"
.IX Subsection "Step-by-step: Distributing your module"
.IP "Get a \s-1CPAN\s0 user \s-1ID\s0" 3
.IX Item "Get a CPAN user ID"
Every developer publishing modules on \s-1CPAN\s0 needs a \s-1CPAN ID. \s0 Visit
\&\f(CW\*(C`http://pause.perl.org/\*(C'\fR, select \*(L"Request \s-1PAUSE\s0 Account\*(R", and wait for
your request to be approved by the \s-1PAUSE\s0 administrators.
.ie n .IP """perl Makefile.PL; make test; make dist""" 3
.el .IP "\f(CWperl Makefile.PL; make test; make dist\fR" 3
.IX Item "perl Makefile.PL; make test; make dist"
Once again, \f(CW\*(C`module\-starter\*(C'\fR or \f(CW\*(C`h2xs\*(C'\fR has done all the work for you.
They produce the standard \f(CW\*(C`Makefile.PL\*(C'\fR you see when you download and
install modules, and this produces a Makefile with a \f(CW\*(C`dist\*(C'\fR target.
.Sp
Once you've ensured that your module passes its own tests \- always a
good thing to make sure \- you can \f(CW\*(C`make dist\*(C'\fR, and the Makefile will
hopefully produce you a nice tarball of your module, ready for upload.
.IP "Upload the tarball" 3
.IX Item "Upload the tarball"
The email you got when you received your \s-1CPAN ID\s0 will tell you how to
log in to \s-1PAUSE,\s0 the Perl Authors Upload SErver. From the menus there,
you can upload your module to \s-1CPAN.\s0
.IP "Announce to the modules list" 3
.IX Item "Announce to the modules list"
Once uploaded, it'll sit unnoticed in your author directory. If you want
it connected to the rest of the \s-1CPAN,\s0 you'll need to go to \*(L"Register
Namespace\*(R" on \s-1PAUSE. \s0 Once registered, your module will appear in the
by-module and by-category listings on \s-1CPAN.\s0
.IP "Announce to clpa" 3
.IX Item "Announce to clpa"
If you have a burning desire to tell the world about your release, post
an announcement to the moderated \f(CW\*(C`comp.lang.perl.announce\*(C'\fR newsgroup.
.IP "Fix bugs!" 3
.IX Item "Fix bugs!"
Once you start accumulating users, they'll send you bug reports. If
you're lucky, they'll even send you patches. Welcome to the joys of
maintaining a software project...
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Cozens, \f(CW\*(C`simon@cpan.org\*(C'\fR
.PP
Updated by Kirrily \*(L"Skud\*(R" Robert, \f(CW\*(C`skud@cpan.org\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlmod, perlmodlib, perlmodinstall, h2xs, strict,
Carp, Exporter, perlpod, Test::Simple, Test::More
ExtUtils::MakeMaker, Module::Build, Module::Starter
http://www.cpan.org/ , Ken Williams's tutorial on building your own
module at http://mathforum.org/~ken/perl_modules.html
                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnumber.1                                 0100644 0001750 0001750 00000032727 12566207442 023126  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNUMBER 1"
.TH PERLNUMBER 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnumber \- semantics of numbers and numeric operations in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    $n = 1234;              # decimal integer
\&    $n = 0b1110011;         # binary integer
\&    $n = 01234;             # octal integer
\&    $n = 0x1234;            # hexadecimal integer
\&    $n = 12.34e\-56;         # exponential notation
\&    $n = "\-12.34e56";       # number specified as a string
\&    $n = "1234";            # number specified as a string
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes how Perl internally handles numeric values.
.PP
Perl's operator overloading facility is completely ignored here.  Operator
overloading allows user-defined behaviors for numbers, such as operations
over arbitrarily large integers, floating points numbers with arbitrary
precision, operations over \*(L"exotic\*(R" numbers such as modular arithmetic or
p\-adic arithmetic, and so on.  See overload for details.
.SH "Storing numbers"
.IX Header "Storing numbers"
Perl can internally represent numbers in 3 different ways: as native
integers, as native floating point numbers, and as decimal strings.
Decimal strings may have an exponential notation part, as in \f(CW"12.34e\-56"\fR.
\&\fINative\fR here means \*(L"a format supported by the C compiler which was used
to build perl\*(R".
.PP
The term \*(L"native\*(R" does not mean quite as much when we talk about native
integers, as it does when native floating point numbers are involved.
The only implication of the term \*(L"native\*(R" on integers is that the limits for
the maximal and the minimal supported true integral quantities are close to
powers of 2.  However, \*(L"native\*(R" floats have a most fundamental
restriction: they may represent only those numbers which have a relatively
\&\*(L"short\*(R" representation when converted to a binary fraction.  For example,
0.9 cannot be represented by a native float, since the binary fraction
for 0.9 is infinite:
.PP
.Vb 1
\&  binary0.1110011001100...
.Ve
.PP
with the sequence \f(CW1100\fR repeating again and again.  In addition to this
limitation,  the exponent of the binary number is also restricted when it
is represented as a floating point number.  On typical hardware, floating
point values can store numbers with up to 53 binary digits, and with binary
exponents between \-1024 and 1024.  In decimal representation this is close
to 16 decimal digits and decimal exponents in the range of \-304..304.
The upshot of all this is that Perl cannot store a number like
12345678901234567 as a floating point number on such architectures without
loss of information.
.PP
Similarly, decimal strings can represent only those numbers which have a
finite decimal expansion.  Being strings, and thus of arbitrary length, there
is no practical limit for the exponent or number of decimal digits for these
numbers.  (But realize that what we are discussing the rules for just the
\&\fIstorage\fR of these numbers.  The fact that you can store such \*(L"large\*(R" numbers
does not mean that the \fIoperations\fR over these numbers will use all
of the significant digits.
See \*(L"Numeric operators and numeric conversions\*(R" for details.)
.PP
In fact numbers stored in the native integer format may be stored either
in the signed native form, or in the unsigned native form.  Thus the limits
for Perl numbers stored as native integers would typically be \-2**31..2**32\-1,
with appropriate modifications in the case of 64\-bit integers.  Again, this
does not mean that Perl can do operations only over integers in this range:
it is possible to store many more integers in floating point format.
.PP
Summing up, Perl numeric values can store only those numbers which have
a finite decimal expansion or a \*(L"short\*(R" binary expansion.
.SH "Numeric operators and numeric conversions"
.IX Header "Numeric operators and numeric conversions"
As mentioned earlier, Perl can store a number in any one of three formats,
but most operators typically understand only one of those formats.  When
a numeric value is passed as an argument to such an operator, it will be
converted to the format understood by the operator.
.PP
Six such conversions are possible:
.PP
.Vb 6
\&  native integer        \-\-> native floating point       (*)
\&  native integer        \-\-> decimal string
\&  native floating_point \-\-> native integer              (*)
\&  native floating_point \-\-> decimal string              (*)
\&  decimal string        \-\-> native integer
\&  decimal string        \-\-> native floating point       (*)
.Ve
.PP
These conversions are governed by the following general rules:
.IP "\(bu" 4
If the source number can be represented in the target form, that
representation is used.
.IP "\(bu" 4
If the source number is outside of the limits representable in the target form,
a representation of the closest limit is used.  (\fILoss of information\fR)
.IP "\(bu" 4
If the source number is between two numbers representable in the target form,
a representation of one of these numbers is used.  (\fILoss of information\fR)
.IP "\(bu" 4
In \f(CW\*(C`native floating point \-\-> native integer\*(C'\fR conversions the magnitude
of the result is less than or equal to the magnitude of the source.
(\fI\*(L"Rounding to zero\*(R".\fR)
.IP "\(bu" 4
If the \f(CW\*(C`decimal string \-\-> native integer\*(C'\fR conversion cannot be done
without loss of information, the result is compatible with the conversion
sequence \f(CW\*(C`decimal_string \-\-> native_floating_point \-\-> native_integer\*(C'\fR.
In particular, rounding is strongly biased to 0, though a number like
\&\f(CW"0.99999999999999999999"\fR has a chance of being rounded to 1.
.PP
\&\fB\s-1RESTRICTION\s0\fR: The conversions marked with \f(CW\*(C`(*)\*(C'\fR above involve steps
performed by the C compiler.  In particular, bugs/features of the compiler
used may lead to breakage of some of the above rules.
.SH "Flavors of Perl numeric operations"
.IX Header "Flavors of Perl numeric operations"
Perl operations which take a numeric argument treat that argument in one
of four different ways: they may force it to one of the integer/floating/
string formats, or they may behave differently depending on the format of
the operand.  Forcing a numeric value to a particular format does not
change the number stored in the value.
.PP
All the operators which need an argument in the integer format treat the
argument as in modular arithmetic, e.g., \f(CW\*(C`mod 2**32\*(C'\fR on a 32\-bit
architecture.  \f(CW\*(C`sprintf "%u", \-1\*(C'\fR therefore provides the same result as
\&\f(CW\*(C`sprintf "%u", ~0\*(C'\fR.
.IP "Arithmetic operators" 4
.IX Item "Arithmetic operators"
The binary operators \f(CW\*(C`+\*(C'\fR \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`/\*(C'\fR \f(CW\*(C`%\*(C'\fR \f(CW\*(C`==\*(C'\fR \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`>\*(C'\fR \f(CW\*(C`<\*(C'\fR
\&\f(CW\*(C`>=\*(C'\fR \f(CW\*(C`<=\*(C'\fR and the unary operators \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`abs\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR will
attempt to convert arguments to integers.  If both conversions are possible
without loss of precision, and the operation can be performed without
loss of precision then the integer result is used.  Otherwise arguments are
converted to floating point format and the floating point result is used.
The caching of conversions (as described above) means that the integer
conversion does not throw away fractional parts on floating point numbers.
.IP "++" 4
\&\f(CW\*(C`++\*(C'\fR behaves as the other operators above, except that if it is a string
matching the format \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR the string increment described
in perlop is used.
.ie n .IP "Arithmetic operators during ""use integer""" 4
.el .IP "Arithmetic operators during \f(CWuse integer\fR" 4
.IX Item "Arithmetic operators during use integer"
In scopes where \f(CW\*(C`use integer;\*(C'\fR is in force, nearly all the operators listed
above will force their argument(s) into integer format, and return an integer
result.  The exceptions, \f(CW\*(C`abs\*(C'\fR, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, do not change their
behavior with \f(CW\*(C`use integer;\*(C'\fR
.IP "Other mathematical operators" 4
.IX Item "Other mathematical operators"
Operators such as \f(CW\*(C`**\*(C'\fR, \f(CW\*(C`sin\*(C'\fR and \f(CW\*(C`exp\*(C'\fR force arguments to floating point
format.
.IP "Bitwise operators" 4
.IX Item "Bitwise operators"
Arguments are forced into the integer format if not strings.
.ie n .IP "Bitwise operators during ""use integer""" 4
.el .IP "Bitwise operators during \f(CWuse integer\fR" 4
.IX Item "Bitwise operators during use integer"
forces arguments to integer format. Also shift operations internally use
signed integers rather than the default unsigned.
.IP "Operators which expect an integer" 4
.IX Item "Operators which expect an integer"
force the argument into the integer format.  This is applicable
to the third and fourth arguments of \f(CW\*(C`sysread\*(C'\fR, for example.
.IP "Operators which expect a string" 4
.IX Item "Operators which expect a string"
force the argument into the string format.  For example, this is
applicable to \f(CW\*(C`printf "%s", $value\*(C'\fR.
.PP
Though forcing an argument into a particular form does not change the
stored number, Perl remembers the result of such conversions.  In
particular, though the first such conversion may be time-consuming,
repeated operations will not need to redo the conversion.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich \f(CW\*(C`ilya@math.ohio\-state.edu\*(C'\fR
.PP
Editorial adjustments by Gurusamy Sarathy <gsar@ActiveState.com>
.PP
Updates for 5.8.0 by Nicholas Clark <nick@ccl4.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
overload, perlop
                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnumber5.16.1                             0100644 0001750 0001750 00000032406 12566207421 023427  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNUMBER 1"
.TH PERLNUMBER 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnumber \- semantics of numbers and numeric operations in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    $n = 1234;              # decimal integer
\&    $n = 0b1110011;         # binary integer
\&    $n = 01234;             # octal integer
\&    $n = 0x1234;            # hexadecimal integer
\&    $n = 12.34e\-56;         # exponential notation
\&    $n = "\-12.34e56";       # number specified as a string
\&    $n = "1234";            # number specified as a string
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes how Perl internally handles numeric values.
.PP
Perl's operator overloading facility is completely ignored here.  Operator
overloading allows user-defined behaviors for numbers, such as operations
over arbitrarily large integers, floating points numbers with arbitrary
precision, operations over \*(L"exotic\*(R" numbers such as modular arithmetic or
p\-adic arithmetic, and so on.  See overload for details.
.SH "Storing numbers"
.IX Header "Storing numbers"
Perl can internally represent numbers in 3 different ways: as native
integers, as native floating point numbers, and as decimal strings.
Decimal strings may have an exponential notation part, as in \f(CW"12.34e\-56"\fR.
\&\fINative\fR here means \*(L"a format supported by the C compiler which was used
to build perl\*(R".
.PP
The term \*(L"native\*(R" does not mean quite as much when we talk about native
integers, as it does when native floating point numbers are involved.
The only implication of the term \*(L"native\*(R" on integers is that the limits for
the maximal and the minimal supported true integral quantities are close to
powers of 2.  However, \*(L"native\*(R" floats have a most fundamental
restriction: they may represent only those numbers which have a relatively
\&\*(L"short\*(R" representation when converted to a binary fraction.  For example,
0.9 cannot be represented by a native float, since the binary fraction
for 0.9 is infinite:
.PP
.Vb 1
\&  binary0.1110011001100...
.Ve
.PP
with the sequence \f(CW1100\fR repeating again and again.  In addition to this
limitation,  the exponent of the binary number is also restricted when it
is represented as a floating point number.  On typical hardware, floating
point values can store numbers with up to 53 binary digits, and with binary
exponents between \-1024 and 1024.  In decimal representation this is close
to 16 decimal digits and decimal exponents in the range of \-304..304.
The upshot of all this is that Perl cannot store a number like
12345678901234567 as a floating point number on such architectures without
loss of information.
.PP
Similarly, decimal strings can represent only those numbers which have a
finite decimal expansion.  Being strings, and thus of arbitrary length, there
is no practical limit for the exponent or number of decimal digits for these
numbers.  (But realize that what we are discussing the rules for just the
\&\fIstorage\fR of these numbers.  The fact that you can store such \*(L"large\*(R" numbers
does not mean that the \fIoperations\fR over these numbers will use all
of the significant digits.
See \*(L"Numeric operators and numeric conversions\*(R" for details.)
.PP
In fact numbers stored in the native integer format may be stored either
in the signed native form, or in the unsigned native form.  Thus the limits
for Perl numbers stored as native integers would typically be \-2**31..2**32\-1,
with appropriate modifications in the case of 64\-bit integers.  Again, this
does not mean that Perl can do operations only over integers in this range:
it is possible to store many more integers in floating point format.
.PP
Summing up, Perl numeric values can store only those numbers which have
a finite decimal expansion or a \*(L"short\*(R" binary expansion.
.SH "Numeric operators and numeric conversions"
.IX Header "Numeric operators and numeric conversions"
As mentioned earlier, Perl can store a number in any one of three formats,
but most operators typically understand only one of those formats.  When
a numeric value is passed as an argument to such an operator, it will be
converted to the format understood by the operator.
.PP
Six such conversions are possible:
.PP
.Vb 6
\&  native integer        \-\-> native floating point       (*)
\&  native integer        \-\-> decimal string
\&  native floating_point \-\-> native integer              (*)
\&  native floating_point \-\-> decimal string              (*)
\&  decimal string        \-\-> native integer
\&  decimal string        \-\-> native floating point       (*)
.Ve
.PP
These conversions are governed by the following general rules:
.IP "\(bu" 4
If the source number can be represented in the target form, that
representation is used.
.IP "\(bu" 4
If the source number is outside of the limits representable in the target form,
a representation of the closest limit is used.  (\fILoss of information\fR)
.IP "\(bu" 4
If the source number is between two numbers representable in the target form,
a representation of one of these numbers is used.  (\fILoss of information\fR)
.IP "\(bu" 4
In \f(CW\*(C`native floating point \-\-> native integer\*(C'\fR conversions the magnitude
of the result is less than or equal to the magnitude of the source.
(\fI\*(L"Rounding to zero\*(R".\fR)
.IP "\(bu" 4
If the \f(CW\*(C`decimal string \-\-> native integer\*(C'\fR conversion cannot be done
without loss of information, the result is compatible with the conversion
sequence \f(CW\*(C`decimal_string \-\-> native_floating_point \-\-> native_integer\*(C'\fR.
In particular, rounding is strongly biased to 0, though a number like
\&\f(CW"0.99999999999999999999"\fR has a chance of being rounded to 1.
.PP
\&\fB\s-1RESTRICTION\s0\fR: The conversions marked with \f(CW\*(C`(*)\*(C'\fR above involve steps
performed by the C compiler.  In particular, bugs/features of the compiler
used may lead to breakage of some of the above rules.
.SH "Flavors of Perl numeric operations"
.IX Header "Flavors of Perl numeric operations"
Perl operations which take a numeric argument treat that argument in one
of four different ways: they may force it to one of the integer/floating/
string formats, or they may behave differently depending on the format of
the operand.  Forcing a numeric value to a particular format does not
change the number stored in the value.
.PP
All the operators which need an argument in the integer format treat the
argument as in modular arithmetic, e.g., \f(CW\*(C`mod 2**32\*(C'\fR on a 32\-bit
architecture.  \f(CW\*(C`sprintf "%u", \-1\*(C'\fR therefore provides the same result as
\&\f(CW\*(C`sprintf "%u", ~0\*(C'\fR.
.IP "Arithmetic operators" 4
.IX Item "Arithmetic operators"
The binary operators \f(CW\*(C`+\*(C'\fR \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`/\*(C'\fR \f(CW\*(C`%\*(C'\fR \f(CW\*(C`==\*(C'\fR \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`>\*(C'\fR \f(CW\*(C`<\*(C'\fR
\&\f(CW\*(C`>=\*(C'\fR \f(CW\*(C`<=\*(C'\fR and the unary operators \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`abs\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR will
attempt to convert arguments to integers.  If both conversions are possible
without loss of precision, and the operation can be performed without
loss of precision then the integer result is used.  Otherwise arguments are
converted to floating point format and the floating point result is used.
The caching of conversions (as described above) means that the integer
conversion does not throw away fractional parts on floating point numbers.
.IP "++" 4
\&\f(CW\*(C`++\*(C'\fR behaves as the other operators above, except that if it is a string
matching the format \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR the string increment described
in perlop is used.
.ie n .IP "Arithmetic operators during ""use integer""" 4
.el .IP "Arithmetic operators during \f(CWuse integer\fR" 4
.IX Item "Arithmetic operators during use integer"
In scopes where \f(CW\*(C`use integer;\*(C'\fR is in force, nearly all the operators listed
above will force their argument(s) into integer format, and return an integer
result.  The exceptions, \f(CW\*(C`abs\*(C'\fR, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, do not change their
behavior with \f(CW\*(C`use integer;\*(C'\fR
.IP "Other mathematical operators" 4
.IX Item "Other mathematical operators"
Operators such as \f(CW\*(C`**\*(C'\fR, \f(CW\*(C`sin\*(C'\fR and \f(CW\*(C`exp\*(C'\fR force arguments to floating point
format.
.IP "Bitwise operators" 4
.IX Item "Bitwise operators"
Arguments are forced into the integer format if not strings.
.ie n .IP "Bitwise operators during ""use integer""" 4
.el .IP "Bitwise operators during \f(CWuse integer\fR" 4
.IX Item "Bitwise operators during use integer"
forces arguments to integer format. Also shift operations internally use
signed integers rather than the default unsigned.
.IP "Operators which expect an integer" 4
.IX Item "Operators which expect an integer"
force the argument into the integer format.  This is applicable
to the third and fourth arguments of \f(CW\*(C`sysread\*(C'\fR, for example.
.IP "Operators which expect a string" 4
.IX Item "Operators which expect a string"
force the argument into the string format.  For example, this is
applicable to \f(CW\*(C`printf "%s", $value\*(C'\fR.
.PP
Though forcing an argument into a particular form does not change the
stored number, Perl remembers the result of such conversions.  In
particular, though the first such conversion may be time-consuming,
repeated operations will not need to redo the conversion.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich \f(CW\*(C`ilya@math.ohio\-state.edu\*(C'\fR
.PP
Editorial adjustments by Gurusamy Sarathy <gsar@ActiveState.com>
.PP
Updates for 5.8.0 by Nicholas Clark <nick@ccl4.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
overload, perlop
                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlnumber5.18.1                             0100644 0001750 0001750 00000032727 12566207442 023442  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLNUMBER 1"
.TH PERLNUMBER 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlnumber \- semantics of numbers and numeric operations in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    $n = 1234;              # decimal integer
\&    $n = 0b1110011;         # binary integer
\&    $n = 01234;             # octal integer
\&    $n = 0x1234;            # hexadecimal integer
\&    $n = 12.34e\-56;         # exponential notation
\&    $n = "\-12.34e56";       # number specified as a string
\&    $n = "1234";            # number specified as a string
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes how Perl internally handles numeric values.
.PP
Perl's operator overloading facility is completely ignored here.  Operator
overloading allows user-defined behaviors for numbers, such as operations
over arbitrarily large integers, floating points numbers with arbitrary
precision, operations over \*(L"exotic\*(R" numbers such as modular arithmetic or
p\-adic arithmetic, and so on.  See overload for details.
.SH "Storing numbers"
.IX Header "Storing numbers"
Perl can internally represent numbers in 3 different ways: as native
integers, as native floating point numbers, and as decimal strings.
Decimal strings may have an exponential notation part, as in \f(CW"12.34e\-56"\fR.
\&\fINative\fR here means \*(L"a format supported by the C compiler which was used
to build perl\*(R".
.PP
The term \*(L"native\*(R" does not mean quite as much when we talk about native
integers, as it does when native floating point numbers are involved.
The only implication of the term \*(L"native\*(R" on integers is that the limits for
the maximal and the minimal supported true integral quantities are close to
powers of 2.  However, \*(L"native\*(R" floats have a most fundamental
restriction: they may represent only those numbers which have a relatively
\&\*(L"short\*(R" representation when converted to a binary fraction.  For example,
0.9 cannot be represented by a native float, since the binary fraction
for 0.9 is infinite:
.PP
.Vb 1
\&  binary0.1110011001100...
.Ve
.PP
with the sequence \f(CW1100\fR repeating again and again.  In addition to this
limitation,  the exponent of the binary number is also restricted when it
is represented as a floating point number.  On typical hardware, floating
point values can store numbers with up to 53 binary digits, and with binary
exponents between \-1024 and 1024.  In decimal representation this is close
to 16 decimal digits and decimal exponents in the range of \-304..304.
The upshot of all this is that Perl cannot store a number like
12345678901234567 as a floating point number on such architectures without
loss of information.
.PP
Similarly, decimal strings can represent only those numbers which have a
finite decimal expansion.  Being strings, and thus of arbitrary length, there
is no practical limit for the exponent or number of decimal digits for these
numbers.  (But realize that what we are discussing the rules for just the
\&\fIstorage\fR of these numbers.  The fact that you can store such \*(L"large\*(R" numbers
does not mean that the \fIoperations\fR over these numbers will use all
of the significant digits.
See \*(L"Numeric operators and numeric conversions\*(R" for details.)
.PP
In fact numbers stored in the native integer format may be stored either
in the signed native form, or in the unsigned native form.  Thus the limits
for Perl numbers stored as native integers would typically be \-2**31..2**32\-1,
with appropriate modifications in the case of 64\-bit integers.  Again, this
does not mean that Perl can do operations only over integers in this range:
it is possible to store many more integers in floating point format.
.PP
Summing up, Perl numeric values can store only those numbers which have
a finite decimal expansion or a \*(L"short\*(R" binary expansion.
.SH "Numeric operators and numeric conversions"
.IX Header "Numeric operators and numeric conversions"
As mentioned earlier, Perl can store a number in any one of three formats,
but most operators typically understand only one of those formats.  When
a numeric value is passed as an argument to such an operator, it will be
converted to the format understood by the operator.
.PP
Six such conversions are possible:
.PP
.Vb 6
\&  native integer        \-\-> native floating point       (*)
\&  native integer        \-\-> decimal string
\&  native floating_point \-\-> native integer              (*)
\&  native floating_point \-\-> decimal string              (*)
\&  decimal string        \-\-> native integer
\&  decimal string        \-\-> native floating point       (*)
.Ve
.PP
These conversions are governed by the following general rules:
.IP "\(bu" 4
If the source number can be represented in the target form, that
representation is used.
.IP "\(bu" 4
If the source number is outside of the limits representable in the target form,
a representation of the closest limit is used.  (\fILoss of information\fR)
.IP "\(bu" 4
If the source number is between two numbers representable in the target form,
a representation of one of these numbers is used.  (\fILoss of information\fR)
.IP "\(bu" 4
In \f(CW\*(C`native floating point \-\-> native integer\*(C'\fR conversions the magnitude
of the result is less than or equal to the magnitude of the source.
(\fI\*(L"Rounding to zero\*(R".\fR)
.IP "\(bu" 4
If the \f(CW\*(C`decimal string \-\-> native integer\*(C'\fR conversion cannot be done
without loss of information, the result is compatible with the conversion
sequence \f(CW\*(C`decimal_string \-\-> native_floating_point \-\-> native_integer\*(C'\fR.
In particular, rounding is strongly biased to 0, though a number like
\&\f(CW"0.99999999999999999999"\fR has a chance of being rounded to 1.
.PP
\&\fB\s-1RESTRICTION\s0\fR: The conversions marked with \f(CW\*(C`(*)\*(C'\fR above involve steps
performed by the C compiler.  In particular, bugs/features of the compiler
used may lead to breakage of some of the above rules.
.SH "Flavors of Perl numeric operations"
.IX Header "Flavors of Perl numeric operations"
Perl operations which take a numeric argument treat that argument in one
of four different ways: they may force it to one of the integer/floating/
string formats, or they may behave differently depending on the format of
the operand.  Forcing a numeric value to a particular format does not
change the number stored in the value.
.PP
All the operators which need an argument in the integer format treat the
argument as in modular arithmetic, e.g., \f(CW\*(C`mod 2**32\*(C'\fR on a 32\-bit
architecture.  \f(CW\*(C`sprintf "%u", \-1\*(C'\fR therefore provides the same result as
\&\f(CW\*(C`sprintf "%u", ~0\*(C'\fR.
.IP "Arithmetic operators" 4
.IX Item "Arithmetic operators"
The binary operators \f(CW\*(C`+\*(C'\fR \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`/\*(C'\fR \f(CW\*(C`%\*(C'\fR \f(CW\*(C`==\*(C'\fR \f(CW\*(C`!=\*(C'\fR \f(CW\*(C`>\*(C'\fR \f(CW\*(C`<\*(C'\fR
\&\f(CW\*(C`>=\*(C'\fR \f(CW\*(C`<=\*(C'\fR and the unary operators \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`abs\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR will
attempt to convert arguments to integers.  If both conversions are possible
without loss of precision, and the operation can be performed without
loss of precision then the integer result is used.  Otherwise arguments are
converted to floating point format and the floating point result is used.
The caching of conversions (as described above) means that the integer
conversion does not throw away fractional parts on floating point numbers.
.IP "++" 4
\&\f(CW\*(C`++\*(C'\fR behaves as the other operators above, except that if it is a string
matching the format \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR the string increment described
in perlop is used.
.ie n .IP "Arithmetic operators during ""use integer""" 4
.el .IP "Arithmetic operators during \f(CWuse integer\fR" 4
.IX Item "Arithmetic operators during use integer"
In scopes where \f(CW\*(C`use integer;\*(C'\fR is in force, nearly all the operators listed
above will force their argument(s) into integer format, and return an integer
result.  The exceptions, \f(CW\*(C`abs\*(C'\fR, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, do not change their
behavior with \f(CW\*(C`use integer;\*(C'\fR
.IP "Other mathematical operators" 4
.IX Item "Other mathematical operators"
Operators such as \f(CW\*(C`**\*(C'\fR, \f(CW\*(C`sin\*(C'\fR and \f(CW\*(C`exp\*(C'\fR force arguments to floating point
format.
.IP "Bitwise operators" 4
.IX Item "Bitwise operators"
Arguments are forced into the integer format if not strings.
.ie n .IP "Bitwise operators during ""use integer""" 4
.el .IP "Bitwise operators during \f(CWuse integer\fR" 4
.IX Item "Bitwise operators during use integer"
forces arguments to integer format. Also shift operations internally use
signed integers rather than the default unsigned.
.IP "Operators which expect an integer" 4
.IX Item "Operators which expect an integer"
force the argument into the integer format.  This is applicable
to the third and fourth arguments of \f(CW\*(C`sysread\*(C'\fR, for example.
.IP "Operators which expect a string" 4
.IX Item "Operators which expect a string"
force the argument into the string format.  For example, this is
applicable to \f(CW\*(C`printf "%s", $value\*(C'\fR.
.PP
Though forcing an argument into a particular form does not change the
stored number, Perl remembers the result of such conversions.  In
particular, though the first such conversion may be time-consuming,
repeated operations will not need to redo the conversion.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich \f(CW\*(C`ilya@math.ohio\-state.edu\*(C'\fR
.PP
Editorial adjustments by Gurusamy Sarathy <gsar@ActiveState.com>
.PP
Updates for 5.8.0 by Nicholas Clark <nick@ccl4.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
overload, perlop
                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlobj.1                                    0100644 0001750 0001750 00000126105 12566207442 022402  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOBJ 1"
.TH PERLOBJ 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlobj \- Perl object reference
.IX Xref "object OOP"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a reference for Perl's object orientation
features. If you're looking for an introduction to object-oriented
programming in Perl, please see perlootut.
.PP
In order to understand Perl objects, you first need to understand
references in Perl. See perlref for details.
.PP
This document describes all of Perl's object-oriented (\s-1OO\s0) features
from the ground up. If you're just looking to write some
object-oriented code of your own, you are probably better served by
using one of the object systems from \s-1CPAN\s0 described in perlootut.
.PP
If you're looking to write your own object system, or you need to
maintain code which implements objects from scratch then this document
will help you understand exactly how Perl does object orientation.
.PP
There are a few basic principles which define object oriented Perl:
.IP "1." 4
An object is simply a data structure that knows to which class it
belongs.
.IP "2." 4
A class is simply a package. A class provides methods that expect to
operate on objects.
.IP "3." 4
A method is simply a subroutine that expects a reference to an object
(or a package name, for class methods) as the first argument.
.PP
Let's look at each of these principles in depth.
.SS "An Object is Simply a Data Structure"
.IX Xref "object bless constructor new"
.IX Subsection "An Object is Simply a Data Structure"
Unlike many other languages which support object orientation, Perl does
not provide any special syntax for constructing an object. Objects are
merely Perl data structures (hashes, arrays, scalars, filehandles,
etc.) that have been explicitly associated with a particular class.
.PP
That explicit association is created by the built-in \f(CW\*(C`bless\*(C'\fR function,
which is typically used within the \fIconstructor\fR subroutine of the
class.
.PP
Here is a simple constructor:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The name \f(CW\*(C`new\*(C'\fR isn't special. We could name our constructor something
else:
.PP
.Vb 1
\&  package File;
\&
\&  sub load {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The modern convention for \s-1OO\s0 modules is to always use \f(CW\*(C`new\*(C'\fR as the
name for the constructor, but there is no requirement to do so. Any
subroutine that blesses a data structure into a class is a valid
constructor in Perl.
.PP
In the previous examples, the \f(CW\*(C`{}\*(C'\fR code creates a reference to an
empty anonymous hash. The \f(CW\*(C`bless\*(C'\fR function then takes that reference
and associates the hash with the class in \f(CW$class\fR. In the simplest
case, the \f(CW$class\fR variable will end up containing the string \*(L"File\*(R".
.PP
We can also use a variable to store a reference to the data structure
that is being blessed as our object:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
Once we've blessed the hash referred to by \f(CW$self\fR we can start
calling methods on it. This is useful if you want to put object
initialization in its own separate method:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      $self\->_initialize();
\&
\&      return $self;
\&  }
.Ve
.PP
Since the object is also a hash, you can treat it as one, using it to
store data associated with the object. Typically, code inside the class
can treat the hash as an accessible data structure, while code outside
the class should always treat the object as opaque. This is called
\&\fBencapsulation\fR. Encapsulation means that the user of an object does
not have to know how it is implemented. The user simply calls
documented methods on the object.
.PP
Note, however, that (unlike most other \s-1OO\s0 languages) Perl does not
ensure or enforce encapsulation in any way. If you want objects to
actually \fIbe\fR opaque you need to arrange for that yourself. This can
be done in a varierty of ways, including using \*(L"Inside-Out objects\*(R"
or modules from \s-1CPAN.\s0
.PP
\fIObjects Are Blessed; Variables Are Not\fR
.IX Subsection "Objects Are Blessed; Variables Are Not"
.PP
When we bless something, we are not blessing the variable which
contains a reference to that thing, nor are we blessing the reference
that the variable stores; we are blessing the thing that the variable
refers to (sometimes known as the \fIreferent\fR). This is best
demonstrated with this code:
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  my $foo = {};
\&  my $bar = $foo;
\&
\&  bless $foo, \*(AqClass\*(Aq;
\&  print blessed( $bar );      # prints "Class"
\&
\&  $bar = "some other value";
\&  print blessed( $bar );      # prints undef
.Ve
.PP
When we call \f(CW\*(C`bless\*(C'\fR on a variable, we are actually blessing the
underlying data structure that the variable refers to. We are not
blessing the reference itself, nor the variable that contains that
reference. That's why the second call to \f(CW\*(C`blessed( $bar )\*(C'\fR returns
false. At that point \f(CW$bar\fR is no longer storing a reference to an
object.
.PP
You will sometimes see older books or documentation mention \*(L"blessing a
reference\*(R" or describe an object as a \*(L"blessed reference\*(R", but this is
incorrect. It isn't the reference that is blessed as an object; it's
the thing the reference refers to (i.e. the referent).
.SS "A Class is Simply a Package"
.IX Xref "class package @ISA inheritance"
.IX Subsection "A Class is Simply a Package"
Perl does not provide any special syntax for class definitions. A
package is simply a namespace containing variables and subroutines. The
only difference is that in a class, the subroutines may expect a
reference to an object or the name of a class as the first argument.
This is purely a matter of convention, so a class may contain both
methods and subroutines which \fIdon't\fR operate on an object or class.
.PP
Each package contains a special array called \f(CW@ISA\fR. The \f(CW@ISA\fR array
contains a list of that class's parent classes, if any. This array is
examined when Perl does method resolution, which we will cover later.
.PP
It is possible to manually set \f(CW@ISA\fR, and you may see this in older
Perl code. Much older code also uses the base pragma. For new code,
we recommend that you use the parent pragma to declare your parents.
This pragma will take care of setting \f(CW@ISA\fR. It will also load the
parent classes and make sure that the package doesn't inherit from
itself.
.PP
However the parent classes are set, the package's \f(CW@ISA\fR variable will
contain a list of those parents. This is simply a list of scalars, each
of which is a string that corresponds to a package name.
.PP
All classes inherit from the \s-1UNIVERSAL\s0 class implicitly. The
\&\s-1UNIVERSAL\s0 class is implemented by the Perl core, and provides
several default methods, such as \f(CW\*(C`isa()\*(C'\fR, \f(CW\*(C`can()\*(C'\fR, and \f(CW\*(C`VERSION()\*(C'\fR.
The \f(CW\*(C`UNIVERSAL\*(C'\fR class will \fInever\fR appear in a package's \f(CW@ISA\fR
variable.
.PP
Perl \fIonly\fR provides method inheritance as a built-in feature.
Attribute inheritance is left up the class to implement. See the
\&\*(L"Writing Accessors\*(R" section for details.
.SS "A Method is Simply a Subroutine"
.IX Xref "method"
.IX Subsection "A Method is Simply a Subroutine"
Perl does not provide any special syntax for defining a method. A
method is simply a regular subroutine, and is declared with \f(CW\*(C`sub\*(C'\fR.
What makes a method special is that it expects to receive either an
object or a class name as its first argument.
.PP
Perl \fIdoes\fR provide special syntax for method invocation, the \f(CW\*(C`\->\*(C'\fR operator. We will cover this in more detail later.
.PP
Most methods you write will expect to operate on objects:
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      open my $fh, \*(Aq>\*(Aq, $self\->path() or die $!;
\&      print {$fh} $self\->data()       or die $!;
\&      close $fh                       or die $!;
\&  }
.Ve
.SS "Method Invocation"
.IX Xref "invocation method arrow ->"
.IX Subsection "Method Invocation"
Calling a method on an object is written as \f(CW\*(C`$object\->method\*(C'\fR.
.PP
The left hand side of the method invocation (or arrow) operator is the
object (or class name), and the right hand side is the method name.
.PP
.Vb 2
\&  my $pod = File\->new( \*(Aqperlobj.pod\*(Aq, $data );
\&  $pod\->save();
.Ve
.PP
The \f(CW\*(C`\->\*(C'\fR syntax is also used when dereferencing a reference. It
looks like the same operator, but these are two different operations.
.PP
When you call a method, the thing on the left side of the arrow is
passed as the first argument to the method. That means when we call \f(CW\*(C`Critter\->new()\*(C'\fR, the \f(CW\*(C`new()\*(C'\fR method receives the string \f(CW"Critter"\fR
as its first argument. When we call \f(CW\*(C`$fred\->speak()\*(C'\fR, the \f(CW$fred\fR
variable is passed as the first argument to \f(CW\*(C`speak()\*(C'\fR.
.PP
Just as with any Perl subroutine, all of the arguments passed in \f(CW@_\fR
are aliases to the original argument. This includes the object itself.
If you assign directly to \f(CW$_[0]\fR you will change the contents of the
variable that holds the reference to the object. We recommend that you
don't do this unless you know exactly what you're doing.
.PP
Perl knows what package the method is in by looking at the left side of
the arrow. If the left hand side is a package name, it looks for the
method in that package. If the left hand side is an object, then Perl
looks for the method in the package that the object has been blessed
into.
.PP
If the left hand side is neither a package name nor an object, then the
method call will cause an error, but see the section on \*(L"Method Call
Variations\*(R" for more nuances.
.SS "Inheritance"
.IX Xref "inheritance"
.IX Subsection "Inheritance"
We already talked about the special \f(CW@ISA\fR array and the parent
pragma.
.PP
When a class inherits from another class, any methods defined in the
parent class are available to the child class. If you attempt to call a
method on an object that isn't defined in its own class, Perl will also
look for that method in any parent classes it may have.
.PP
.Vb 2
\&  package File::MP3;
\&  use parent \*(AqFile\*(Aq;    # sets @File::MP3::ISA = (\*(AqFile\*(Aq);
\&
\&  my $mp3 = File::MP3\->new( \*(AqAndvari.mp3\*(Aq, $data );
\&  $mp3\->save();
.Ve
.PP
Since we didn't define a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File::MP3\*(C'\fR class,
Perl will look at the \f(CW\*(C`File::MP3\*(C'\fR class's parent classes to find the
\&\f(CW\*(C`save()\*(C'\fR method. If Perl cannot find a \f(CW\*(C`save()\*(C'\fR method anywhere in
the inheritance hierarchy, it will die.
.PP
In this case, it finds a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File\*(C'\fR class. Note
that the object passed to \f(CW\*(C`save()\*(C'\fR in this case is still a
\&\f(CW\*(C`File::MP3\*(C'\fR object, even though the method is found in the \f(CW\*(C`File\*(C'\fR
class.
.PP
We can override a parent's method in a child class. When we do so, we
can still call the parent class's method with the \f(CW\*(C`SUPER\*(C'\fR
pseudo-class.
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      say \*(AqPrepare to rock\*(Aq;
\&      $self\->SUPER::save();
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER\*(C'\fR modifier can \fIonly\fR be used for method calls. You can't
use it for regular subroutine calls or class methods:
.PP
.Vb 1
\&  SUPER::save($thing);     # FAIL: looks for save() sub in package SUPER
\&
\&  SUPER\->save($thing);     # FAIL: looks for save() method in class
\&                           #       SUPER
\&
\&  $thing\->SUPER::save();   # Okay: looks for save() method in parent
\&                           #       classes
.Ve
.PP
\fIHow \s-1SUPER\s0 is Resolved\fR
.IX Xref "SUPER"
.IX Subsection "How SUPER is Resolved"
.PP
The \f(CW\*(C`SUPER\*(C'\fR pseudo-class is resolved from the package where the call
is made. It is \fInot\fR resolved based on the object's class. This is
important, because it lets methods at different levels within a deep
inheritance hierarchy each correctly call their respective parent
methods.
.PP
.Vb 1
\&  package A;
\&
\&  sub new {
\&      return bless {}, shift;
\&  }
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      say \*(AqA\*(Aq;
\&  }
\&
\&  package B;
\&
\&  use parent \-norequire, \*(AqA\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqB\*(Aq;
\&  }
\&
\&  package C;
\&
\&  use parent \-norequire, \*(AqB\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqC\*(Aq;
\&  }
\&
\&  my $c = C\->new();
\&  $c\->speak();
.Ve
.PP
In this example, we will get the following output:
.PP
.Vb 3
\&  A
\&  B
\&  C
.Ve
.PP
This demonstrates how \f(CW\*(C`SUPER\*(C'\fR is resolved. Even though the object is
blessed into the \f(CW\*(C`C\*(C'\fR class, the \f(CW\*(C`speak()\*(C'\fR method in the \f(CW\*(C`B\*(C'\fR class
can still call \f(CW\*(C`SUPER::speak()\*(C'\fR and expect it to correctly look in the
parent class of \f(CW\*(C`B\*(C'\fR (i.e the class the method call is in), not in the
parent class of \f(CW\*(C`C\*(C'\fR (i.e. the class the object belongs to).
.PP
There are rare cases where this package-based resolution can be a
problem. If you copy a subroutine from one package to another, \f(CW\*(C`SUPER\*(C'\fR
resolution will be done based on the original package.
.PP
\fIMultiple Inheritance\fR
.IX Xref "multiple inheritance"
.IX Subsection "Multiple Inheritance"
.PP
Multiple inheritance often indicates a design problem, but Perl always
gives you enough rope to hang yourself with if you ask for it.
.PP
To declare multiple parents, you simply need to pass multiple class
names to \f(CW\*(C`use parent\*(C'\fR:
.PP
.Vb 1
\&  package MultiChild;
\&
\&  use parent \*(AqParent1\*(Aq, \*(AqParent2\*(Aq;
.Ve
.PP
\fIMethod Resolution Order\fR
.IX Xref "method resolution order mro"
.IX Subsection "Method Resolution Order"
.PP
Method resolution order only matters in the case of multiple
inheritance. In the case of single inheritance, Perl simply looks up
the inheritance chain to find a method:
.PP
.Vb 5
\&  Grandparent
\&    |
\&  Parent
\&    |
\&  Child
.Ve
.PP
If we call a method on a \f(CW\*(C`Child\*(C'\fR object and that method is not defined
in the \f(CW\*(C`Child\*(C'\fR class, Perl will look for that method in the \f(CW\*(C`Parent\*(C'\fR
class and then, if necessary, in the \f(CW\*(C`Grandparent\*(C'\fR class.
.PP
If Perl cannot find the method in any of these classes, it will die
with an error message.
.PP
When a class has multiple parents, the method lookup order becomes more
complicated.
.PP
By default, Perl does a depth-first left-to-right search for a method.
That means it starts with the first parent in the \f(CW@ISA\fR array, and
then searches all of its parents, grandparents, etc. If it fails to
find the method, it then goes to the next parent in the original
class's \f(CW@ISA\fR array and searches from there.
.PP
.Vb 7
\&            SharedGreatGrandParent
\&            /                    \e
\&  PaternalGrandparent       MaternalGrandparent
\&            \e                    /
\&             Father        Mother
\&                   \e      /
\&                    Child
.Ve
.PP
So given the diagram above, Perl will search \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`SharedGreatGrandParent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR, and
finally \f(CW\*(C`MaternalGrandparent\*(C'\fR. This may be a problem because now we're
looking in \f(CW\*(C`SharedGreatGrandParent\*(C'\fR \fIbefore\fR we've checked all its
derived classes (i.e. before we tried \f(CW\*(C`Mother\*(C'\fR and
\&\f(CW\*(C`MaternalGrandparent\*(C'\fR).
.PP
It is possible to ask for a different method resolution order with the
mro pragma.
.PP
.Vb 1
\&  package Child;
\&
\&  use mro \*(Aqc3\*(Aq;
\&  use parent \*(AqFather\*(Aq, \*(AqMother\*(Aq;
.Ve
.PP
This pragma lets you switch to the \*(L"C3\*(R" resolution order. In simple
terms, \*(L"C3\*(R" order ensures that shared parent classes are never searched
before child classes, so Perl will now search: \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR \f(CW\*(C`MaternalGrandparent\*(C'\fR, and finally
\&\f(CW\*(C`SharedGreatGrandParent\*(C'\fR. Note however that this is not
\&\*(L"breadth-first\*(R" searching: All the \f(CW\*(C`Father\*(C'\fR ancestors (except the
common ancestor) are searched before any of the \f(CW\*(C`Mother\*(C'\fR ancestors are
considered.
.PP
The C3 order also lets you call methods in sibling classes with the
\&\f(CW\*(C`next\*(C'\fR pseudo-class. See the mro documentation for more details on
this feature.
.PP
\fIMethod Resolution Caching\fR
.IX Subsection "Method Resolution Caching"
.PP
When Perl searches for a method, it caches the lookup so that future
calls to the method do not need to search for it again. Changing a
class's parent class or adding subroutines to a class will invalidate
the cache for that class.
.PP
The mro pragma provides some functions for manipulating the method
cache directly.
.SS "Writing Constructors"
.IX Xref "constructor"
.IX Subsection "Writing Constructors"
As we mentioned earlier, Perl provides no special constructor syntax.
This means that a class must implement its own constructor. A
constructor is simply a class method that returns a reference to a new
object.
.PP
The constructor can also accept additional parameters that define the
object. Let's write a real constructor for the \f(CW\*(C`File\*(C'\fR class we used
earlier:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      my $self = bless {
\&          path => $path,
\&          data => $data,
\&      }, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
As you can see, we've stored the path and file data in the object
itself. Remember, under the hood, this object is still just a hash.
Later, we'll write accessors to manipulate this data.
.PP
For our File::MP3 class, we can check to make sure that the path we're
given ends with \*(L".mp3\*(R":
.PP
.Vb 1
\&  package File::MP3;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      die "You cannot create a File::MP3 without an mp3 extension\en"
\&          unless $path =~ /\e.mp3\ez/;
\&
\&      return $class\->SUPER::new(@_);
\&  }
.Ve
.PP
This constructor lets its parent class do the actual object
construction.
.SS "Attributes"
.IX Xref "attribute"
.IX Subsection "Attributes"
An attribute is a piece of data belonging to a particular object.
Unlike most object-oriented languages, Perl provides no special syntax
or support for declaring and manipulating attributes.
.PP
Attributes are often stored in the object itself. For example, if the
object is an anonymous hash, we can store the attribute values in the
hash using the attribute name as the key.
.PP
While it's possible to refer directly to these hash keys outside of the
class, it's considered a best practice to wrap all access to the
attribute with accessor methods.
.PP
This has several advantages. Accessors make it easier to change the
implementation of an object later while still preserving the original
\&\s-1API.\s0
.PP
An accessor lets you add additional code around attribute access. For
example, you could apply a default to an attribute that wasn't set in
the constructor, or you could validate that a new value for the
attribute is acceptable.
.PP
Finally, using accessors makes inheritance much simpler. Subclasses can
use the accessors rather than having to know how a parent class is
implemented internally.
.PP
\fIWriting Accessors\fR
.IX Xref "accessor"
.IX Subsection "Writing Accessors"
.PP
As with constructors, Perl provides no special accessor declaration
syntax, so classes must provide explicitly written accessor methods.
There are two common types of accessors, read-only and read-write.
.PP
A simple read-only accessor simply gets the value of a single
attribute:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      return $self\->{path};
\&  }
.Ve
.PP
A read-write accessor will allow the caller to set the value as well as
get it:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      if (@_) {
\&          $self\->{path} = shift;
\&      }
\&
\&      return $self\->{path};
\&  }
.Ve
.SS "An Aside About Smarter and Safer Code"
.IX Subsection "An Aside About Smarter and Safer Code"
Our constructor and accessors are not very smart. They don't check that
a \f(CW$path\fR is defined, nor do they check that a \f(CW$path\fR is a valid
filesystem path.
.PP
Doing these checks by hand can quickly become tedious. Writing a bunch
of accessors by hand is also incredibly tedious. There are a lot of
modules on \s-1CPAN\s0 that can help you write safer and more concise code,
including the modules we recommend in perlootut.
.SS "Method Call Variations"
.IX Xref "method"
.IX Subsection "Method Call Variations"
Perl supports several other ways to call methods besides the \f(CW\*(C`$object\->method()\*(C'\fR usage we've seen so far.
.PP
\fIMethod Names as Strings\fR
.IX Subsection "Method Names as Strings"
.PP
Perl lets you use a scalar variable containing a string as a method
name:
.PP
.Vb 1
\&  my $file = File\->new( $path, $data );
\&
\&  my $method = \*(Aqsave\*(Aq;
\&  $file\->$method();
.Ve
.PP
This works exactly like calling \f(CW\*(C`$file\->save()\*(C'\fR. This can be very
useful for writing dynamic code. For example, it allows you to pass a
method name to be called as a parameter to another method.
.PP
\fIClass Names as Strings\fR
.IX Subsection "Class Names as Strings"
.PP
Perl also lets you use a scalar containing a string as a class name:
.PP
.Vb 1
\&  my $class = \*(AqFile\*(Aq;
\&
\&  my $file = $class\->new( $path, $data );
.Ve
.PP
Again, this allows for very dynamic code.
.PP
\fISubroutine References as Methods\fR
.IX Subsection "Subroutine References as Methods"
.PP
You can also use a subroutine reference as a method:
.PP
.Vb 2
\&  my $sub = sub {
\&      my $self = shift;
\&
\&      $self\->save();
\&  };
\&
\&  $file\->$sub();
.Ve
.PP
This is exactly equivalent to writing \f(CW\*(C`$sub\->($file)\*(C'\fR. You may see
this idiom in the wild combined with a call to \f(CW\*(C`can\*(C'\fR:
.PP
.Vb 3
\&  if ( my $meth = $object\->can(\*(Aqfoo\*(Aq) ) {
\&      $object\->$meth();
\&  }
.Ve
.PP
\fIDeferencing Method Call\fR
.IX Subsection "Deferencing Method Call"
.PP
Perl also lets you use a dereferenced scalar reference in a method
call. That's a mouthful, so let's look at some code:
.PP
.Vb 4
\&  $file\->${ \e\*(Aqsave\*(Aq };
\&  $file\->${ returns_scalar_ref() };
\&  $file\->${ \e( returns_scalar() ) };
\&  $file\->${ returns_ref_to_sub_ref() };
.Ve
.PP
This works if the dereference produces a string \fIor\fR a subroutine
reference.
.PP
\fIMethod Calls on Filehandles\fR
.IX Subsection "Method Calls on Filehandles"
.PP
Under the hood, Perl filehandles are instances of the \f(CW\*(C`IO::Handle\*(C'\fR or
\&\f(CW\*(C`IO::File\*(C'\fR class. Once you have an open filehandle, you can call
methods on it. Additionally, you can call methods on the \f(CW\*(C`STDIN\*(C'\fR,
\&\f(CW\*(C`STDOUT\*(C'\fR, and \f(CW\*(C`STDERR\*(C'\fR filehandles.
.PP
.Vb 3
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpath/to/file\*(Aq;
\&  $fh\->autoflush();
\&  $fh\->print(\*(Aqcontent\*(Aq);
\&
\&  STDOUT\->autoflush();
.Ve
.SS "Invoking Class Methods"
.IX Xref "invocation"
.IX Subsection "Invoking Class Methods"
Because Perl allows you to use barewords for package names and
subroutine names, it sometimes interprets a bareword's meaning
incorrectly. For example, the construct \f(CW\*(C`Class\->new()\*(C'\fR can be
interpreted as either \f(CW\*(C`\*(AqClass\*(Aq\->new()\*(C'\fR or \f(CW\*(C`Class()\->new()\*(C'\fR.
In English, that second interpretation reads as \*(L"call a subroutine
named \fIClass()\fR, then call \fInew()\fR as a method on the return value of
\&\fIClass()\fR\*(R". If there is a subroutine named \f(CW\*(C`Class()\*(C'\fR in the current
namespace, Perl will always interpret \f(CW\*(C`Class\->new()\*(C'\fR as the second
alternative: a call to \f(CW\*(C`new()\*(C'\fR on the object  returned by a call to
\&\f(CW\*(C`Class()\*(C'\fR
.PP
You can force Perl to use the first interpretation (i.e. as a method
call on the class named \*(L"Class\*(R") in two ways. First, you can append a
\&\f(CW\*(C`::\*(C'\fR to the class name:
.PP
.Vb 1
\&    Class::\->new()
.Ve
.PP
Perl will always interpret this as a method call.
.PP
Alternatively, you can quote the class name:
.PP
.Vb 1
\&    \*(AqClass\*(Aq\->new()
.Ve
.PP
Of course, if the class name is in a scalar Perl will do the right
thing as well:
.PP
.Vb 2
\&    my $class = \*(AqClass\*(Aq;
\&    $class\->new();
.Ve
.PP
\fIIndirect Object Syntax\fR
.IX Xref "indirect object"
.IX Subsection "Indirect Object Syntax"
.PP
\&\fBOutside of the file handle case, use of this syntax is discouraged as
it can confuse the Perl interpreter. See below for more details.\fR
.PP
Perl suports another method invocation syntax called \*(L"indirect object\*(R"
notation. This syntax is called \*(L"indirect\*(R" because the method comes
before the object it is being invoked on.
.PP
This syntax can be used with any class or object method:
.PP
.Vb 2
\&    my $file = new File $path, $data;
\&    save $file;
.Ve
.PP
We recommend that you avoid this syntax, for several reasons.
.PP
First, it can be confusing to read. In the above example, it's not
clear if \f(CW\*(C`save\*(C'\fR is a method provided by the \f(CW\*(C`File\*(C'\fR class or simply a
subroutine that expects a file object as its first argument.
.PP
When used with class methods, the problem is even worse. Because Perl
allows subroutine names to be written as barewords, Perl has to guess
whether the bareword after the method is a class name or subroutine
name. In other words, Perl can resolve the syntax as either \f(CW\*(C`File\->new( $path, $data )\*(C'\fR \fBor\fR \f(CW\*(C`new( File( $path, $data ) )\*(C'\fR.
.PP
To parse this code, Perl uses a heuristic based on what package names
it has seen, what subroutines exist in the current package, what
barewords it has previously seen, and other input. Needless to say,
heuristics can produce very surprising results!
.PP
Older documentation (and some \s-1CPAN\s0 modules) encouraged this syntax,
particularly for constructors, so you may still find it in the wild.
However, we encourage you to avoid using it in new code.
.PP
You can force Perl to interpret the bareword as a class name by
appending \*(L"::\*(R" to it, like we saw earlier:
.PP
.Vb 1
\&  my $file = new File:: $path, $data;
.Ve
.ie n .SS """bless"", ""blessed"", and ""ref"""
.el .SS "\f(CWbless\fP, \f(CWblessed\fP, and \f(CWref\fP"
.IX Subsection "bless, blessed, and ref"
As we saw earlier, an object is simply a data structure that has been
blessed into a class via the \f(CW\*(C`bless\*(C'\fR function. The \f(CW\*(C`bless\*(C'\fR function
can take either one or two arguments:
.PP
.Vb 2
\&  my $object = bless {}, $class;
\&  my $object = bless {};
.Ve
.PP
In the first form, the anonymous hash is being blessed into the class
in \f(CW$class\fR. In the second form, the anonymous hash is blessed into
the current package.
.PP
The second form is strongly discouraged, because it breaks the ability
of a subclass to reuse the parent's constructor, but you may still run
across it in existing code.
.PP
If you want to know whether a particular scalar refers to an object,
you can use the \f(CW\*(C`blessed\*(C'\fR function exported by Scalar::Util, which
is shipped with the Perl core.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  if ( defined blessed($thing) ) { ... }
.Ve
.PP
If \f(CW$thing\fR refers to an object, then this function returns the name
of the package the object has been blessed into. If \f(CW$thing\fR doesn't
contain a reference to a blessed object, the \f(CW\*(C`blessed\*(C'\fR function
returns \f(CW\*(C`undef\*(C'\fR.
.PP
Note that \f(CW\*(C`blessed($thing)\*(C'\fR will also return false if \f(CW$thing\fR has
been blessed into a class named \*(L"0\*(R". This is a possible, but quite
pathological. Don't create a class named \*(L"0\*(R" unless you know what
you're doing.
.PP
Similarly, Perl's built-in \f(CW\*(C`ref\*(C'\fR function treats a reference to a
blessed object specially. If you call \f(CW\*(C`ref($thing)\*(C'\fR and \f(CW$thing\fR
holds a reference to an object, it will return the name of the class
that the object has been blessed into.
.PP
If you simply want to check that a variable contains an object
reference, we recommend that you use \f(CW\*(C`defined blessed($object)\*(C'\fR, since
\&\f(CW\*(C`ref\*(C'\fR returns true values for all references, not just objects.
.SS "The \s-1UNIVERSAL\s0 Class"
.IX Xref "UNIVERSAL"
.IX Subsection "The UNIVERSAL Class"
All classes automatically inherit from the \s-1UNIVERSAL\s0 class, which is
built-in to the Perl core. This class provides a number of methods, all
of which can be called on either a class or an object. You can also
choose to override some of these methods in your class. If you do so,
we recommend that you follow the built-in semantics described below.
.IP "isa($class)" 4
.IX Xref "isa"
.IX Item "isa($class)"
The \f(CW\*(C`isa\*(C'\fR method returns \fItrue\fR if the object is a member of the
class in \f(CW$class\fR, or a member of a subclass of \f(CW$class\fR.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1DOES\s0($role)" 4
.IX Xref "DOES"
.IX Item "DOES($role)"
The \f(CW\*(C`DOES\*(C'\fR method returns \fItrue\fR if its object claims to perform the
role \f(CW$role\fR. By default, this is equivalent to \f(CW\*(C`isa\*(C'\fR. This method is
provided for use by object system extensions that implement roles, like
\&\f(CW\*(C`Moose\*(C'\fR and \f(CW\*(C`Role::Tiny\*(C'\fR.
.Sp
You can also override \f(CW\*(C`DOES\*(C'\fR directly in your own classes. If you
override this method, it should never throw an exception.
.IP "can($method)" 4
.IX Xref "can"
.IX Item "can($method)"
The \f(CW\*(C`can\*(C'\fR method checks to see if the class or object it was called on
has a method named \f(CW$method\fR. This checks for the method in the class
and all of its parents. If the method exists, then a reference to the
subroutine is returned. If it does not then \f(CW\*(C`undef\*(C'\fR is returned.
.Sp
If your class responds to method calls via \f(CW\*(C`AUTOLOAD\*(C'\fR, you may want to
overload \f(CW\*(C`can\*(C'\fR to return a subroutine reference for methods which your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method handles.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1VERSION\s0($need)" 4
.IX Xref "VERSION"
.IX Item "VERSION($need)"
The \f(CW\*(C`VERSION\*(C'\fR method returns the version number of the class
(package).
.Sp
If the \f(CW$need\fR argument is given then it will check that the current
version (as defined by the \f(CW$VERSION\fR variable in the package) is greater
than or equal to \f(CW$need\fR; it will die if this is not the case. This
method is called automatically by the \f(CW\*(C`VERSION\*(C'\fR form of \f(CW\*(C`use\*(C'\fR.
.Sp
.Vb 3
\&    use Package 1.2 qw(some imported subs);
\&    # implies:
\&    Package\->VERSION(1.2);
.Ve
.Sp
We recommend that you use this method to access another package's
version, rather than looking directly at \f(CW$Package::VERSION\fR. The
package you are looking at could have overridden the \f(CW\*(C`VERSION\*(C'\fR method.
.Sp
We also recommend using this method to check whether a module has a
sufficient version. The internal implementation uses the version
module to make sure that different types of version numbers are
compared correctly.
.SS "\s-1AUTOLOAD \s0"
.IX Xref "AUTOLOAD"
.IX Subsection "AUTOLOAD "
If you call a method that doesn't exist in a class, Perl will throw an
error. However, if that class or any of its parent classes defines an
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method, that \f(CW\*(C`AUTOLOAD\*(C'\fR method is called instead.
.PP
\&\f(CW\*(C`AUTOLOAD\*(C'\fR is called as a regular method, and the caller will not know
the difference. Whatever value your \f(CW\*(C`AUTOLOAD\*(C'\fR method returns is
returned to the caller.
.PP
The fully qualified method name that was called is available in the
\&\f(CW$AUTOLOAD\fR package global for your class. Since this is a global, if
you want to refer to do it without a package name prefix under \f(CW\*(C`strict
\&\*(Aqvars\*(Aq\*(C'\fR, you need to declare it.
.PP
.Vb 5
\&  # XXX \- this is a terrible way to implement accessors, but it makes
\&  # for a simple example.
\&  our $AUTOLOAD;
\&  sub AUTOLOAD {
\&      my $self = shift;
\&
\&      # Remove qualifier from original method name...
\&      my $called =  $AUTOLOAD =~ s/.*:://r;
\&
\&      # Is there an attribute of that name?
\&      die "No such attribute: $called"
\&          unless exists $self\->{$called};
\&
\&      # If so, return it...
\&      return $self\->{$called};
\&  }
\&
\&  sub DESTROY { } # see below
.Ve
.PP
Without the \f(CW\*(C`our $AUTOLOAD\*(C'\fR declaration, this code will not compile
under the strict pragma.
.PP
As the comment says, this is not a good way to implement accessors.
It's slow and too clever by far. However, you may see this as a way to
provide accessors in older Perl code. See perlootut for
recommendations on \s-1OO\s0 coding in Perl.
.PP
If your class does have an \f(CW\*(C`AUTOLOAD\*(C'\fR method, we strongly recommend
that you override \f(CW\*(C`can\*(C'\fR in your class as well. Your overridden \f(CW\*(C`can\*(C'\fR
method should return a subroutine reference for any method that your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR responds to.
.SS "Destructors"
.IX Xref "destructor DESTROY"
.IX Subsection "Destructors"
When the last reference to an object goes away, the object is
destroyed. If you only have one reference to an object stored in a
lexical scalar, the object is destroyed when that scalar goes out of
scope. If you store the object in a package global, that object may not
go out of scope until the program exits.
.PP
If you want to do something when the object is destroyed, you can
define a \f(CW\*(C`DESTROY\*(C'\fR method in your class. This method will always be
called by Perl at the appropriate time, unless the method is empty.
.PP
This is called just like any other method, with the object as the first
argument. It does not receive any additional arguments. However, the
\&\f(CW$_[0]\fR variable will be read-only in the destructor, so you cannot
assign a value to it.
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method throws an error, this error will be ignored.
It will not be sent to \f(CW\*(C`STDERR\*(C'\fR and it will not cause the program to
die. However, if your destructor is running inside an \f(CW\*(C`eval {}\*(C'\fR block,
then the error will change the value of \f(CW$@\fR.
.PP
Because \f(CW\*(C`DESTROY\*(C'\fR methods can be called at any time, you should
localize any global variables you might update in your \f(CW\*(C`DESTROY\*(C'\fR. In
particular, if you use \f(CW\*(C`eval {}\*(C'\fR you should localize \f(CW$@\fR, and if you
use \f(CW\*(C`system\*(C'\fR or backticks you should localize \f(CW$?\fR.
.PP
If you define an \f(CW\*(C`AUTOLOAD\*(C'\fR in your class, then Perl will call your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR to handle the \f(CW\*(C`DESTROY\*(C'\fR method. You can prevent this by
defining an empty \f(CW\*(C`DESTROY\*(C'\fR, like we did in the autoloading example.
You can also check the value of \f(CW$AUTOLOAD\fR and return without doing
anything when called to handle \f(CW\*(C`DESTROY\*(C'\fR.
.PP
\fIGlobal Destruction\fR
.IX Subsection "Global Destruction"
.PP
The order in which objects are destroyed during the global destruction
before the program exits is unpredictable. This means that any objects
contained by your object may already have been destroyed. You should
check that a contained object is defined before calling a method on it:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      $self\->{handle}\->close() if $self\->{handle};
\&  }
.Ve
.PP
You can use the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable to detect if you are
currently in the global destruction phase:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      return if ${^GLOBAL_PHASE} eq \*(AqDESTRUCT\*(Aq;
\&
\&      $self\->{handle}\->close();
\&  }
.Ve
.PP
Note that this variable was added in Perl 5.14.0. If you want to detect
the global destruction phase on older versions of Perl, you can use the
\&\f(CW\*(C`Devel::GlobalDestruction\*(C'\fR module on \s-1CPAN.\s0
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method issues a warning during global destruction,
the Perl interpreter will append the string \*(L" during global
destruction\*(R" the warning.
.PP
During global destruction, Perl will always garbage collect objects
before unblessed references. See \*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 in perlhacktips
for more information about global destruction.
.SS "Non-Hash Objects"
.IX Subsection "Non-Hash Objects"
All the examples so far have shown objects based on a blessed hash.
However, it's possible to bless any type of data structure or referent,
including scalars, globs, and subroutines. You may see this sort of
thing when looking at code in the wild.
.PP
Here's an example of a module as a blessed scalar:
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $time = time;
\&      return bless \e$time, $class;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&      return ${ $self };
\&  }
\&
\&  my $time = Time\->new();
\&  print $time\->epoch();
.Ve
.SS "Inside-Out objects"
.IX Subsection "Inside-Out objects"
In the past, the Perl community experimented with a technique called
\&\*(L"inside-out objects\*(R". An inside-out object stores its data outside of
the object's reference, indexed on a unique property of the object,
such as its memory address, rather than in the object itself. This has
the advantage of enforcing the encapsulation of object attributes,
since their data is not stored in the object itself.
.PP
This technique was popular for a while (and was recommended in Damian
Conway's \fIPerl Best Practices\fR), but never achieved universal
adoption. The Object::InsideOut module on \s-1CPAN\s0 provides a
comprehensive implementation of this technique, and you may see it or
other inside-out modules in the wild.
.PP
Here is a simple example of the technique, using the
Hash::Util::FieldHash core module. This module was added to the core
to support inside-out object implementations.
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  use Hash::Util::FieldHash \*(Aqfieldhash\*(Aq;
\&
\&  fieldhash my %time_for;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = bless \e( my $object ), $class;
\&
\&      $time_for{$self} = time;
\&
\&      return $self;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&
\&      return $time_for{$self};
\&  }
\&
\&  my $time = Time\->new;
\&  print $time\->epoch;
.Ve
.SS "Pseudo-hashes"
.IX Subsection "Pseudo-hashes"
The pseudo-hash feature was an experimental feature introduced in
earlier versions of Perl and removed in 5.10.0. A pseudo-hash is an
array reference which can be accessed using named keys like a hash. You
may run in to some code in the wild which uses it. See the fields
pragma for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
A kinder, gentler tutorial on object-oriented programming in Perl can
be found in perlootut. You should also check out perlmodlib for
some style guides on constructing both modules and classes.
                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlobj5.16.1                                0100644 0001750 0001750 00000125571 12566207421 022717  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOBJ 1"
.TH PERLOBJ 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlobj \- Perl object reference
.IX Xref "object OOP"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a reference for Perl's object orientation
features. If you're looking for an introduction to object-oriented
programming in Perl, please see perlootut.
.PP
In order to understand Perl objects, you first need to understand
references in Perl. See perlref for details.
.PP
This document describes all of Perl's object-oriented (\s-1OO\s0) features
from the ground up. If you're just looking to write some
object-oriented code of your own, you are probably better served by
using one of the object systems from \s-1CPAN\s0 described in perlootut.
.PP
If you're looking to write your own object system, or you need to
maintain code which implements objects from scratch then this document
will help you understand exactly how Perl does object orientation.
.PP
There are a few basic principles which define object oriented Perl:
.IP "1." 4
An object is simply a data structure that knows to which class it
belongs.
.IP "2." 4
A class is simply a package. A class provides methods that expect to
operate on objects.
.IP "3." 4
A method is simply a subroutine that expects a reference to an object
(or a package name, for class methods) as the first argument.
.PP
Let's look at each of these principles in depth.
.SS "An Object is Simply a Data Structure"
.IX Xref "object bless constructor new"
.IX Subsection "An Object is Simply a Data Structure"
Unlike many other languages which support object orientation, Perl does
not provide any special syntax for constructing an object. Objects are
merely Perl data structures (hashes, arrays, scalars, filehandles,
etc.) that have been explicitly associated with a particular class.
.PP
That explicit association is created by the built-in \f(CW\*(C`bless\*(C'\fR function,
which is typically used within the \fIconstructor\fR subroutine of the
class.
.PP
Here is a simple constructor:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The name \f(CW\*(C`new\*(C'\fR isn't special. We could name our constructor something
else:
.PP
.Vb 1
\&  package File;
\&
\&  sub load {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The modern convention for \s-1OO\s0 modules is to always use \f(CW\*(C`new\*(C'\fR as the
name for the constructor, but there is no requirement to do so. Any
subroutine that blesses a data structure into a class is a valid
constructor in Perl.
.PP
In the previous examples, the \f(CW\*(C`{}\*(C'\fR code creates a reference to an
empty anonymous hash. The \f(CW\*(C`bless\*(C'\fR function then takes that reference
and associates the hash with the class in \f(CW$class\fR. In the simplest
case, the \f(CW$class\fR variable will end up containing the string \*(L"File\*(R".
.PP
We can also use a variable to store a reference to the data structure
that is being blessed as our object:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
Once we've blessed the hash referred to by \f(CW$self\fR we can start
calling methods on it. This is useful if you want to put object
initialization in its own separate method:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      $self\->_initialize();
\&
\&      return $self;
\&  }
.Ve
.PP
Since the object is also a hash, you can treat it as one, using it to
store data associated with the object. Typically, code inside the class
can treat the hash as an accessible data structure, while code outside
the class should always treat the object as opaque. This is called
\&\fBencapsulation\fR. Encapsulation means that the user of an object does
not have to know how it is implemented. The user simply calls
documented methods on the object.
.PP
Note, however, that (unlike most other \s-1OO\s0 languages) Perl does not
ensure or enforce encapsulation in any way. If you want objects to
actually \fIbe\fR opaque you need to arrange for that yourself. This can
be done in a varierty of ways, including using \*(L"Inside-Out objects\*(R"
or modules from \s-1CPAN\s0.
.PP
\fIObjects Are Blessed; Variables Are Not\fR
.IX Subsection "Objects Are Blessed; Variables Are Not"
.PP
When we bless something, we are not blessing the variable which
contains a reference to that thing, nor are we blessing the reference
that the variable stores; we are blessing the thing that the variable
refers to (sometimes known as the \fIreferent\fR). This is best
demonstrated with this code:
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  my $foo = {};
\&  my $bar = $foo;
\&
\&  bless $foo, \*(AqClass\*(Aq;
\&  print blessed( $bar );      # prints "Class"
\&
\&  $bar = "some other value";
\&  print blessed( $bar );      # prints undef
.Ve
.PP
When we call \f(CW\*(C`bless\*(C'\fR on a variable, we are actually blessing the
underlying data structure that the variable refers to. We are not
blessing the reference itself, nor the variable that contains that
reference. That's why the second call to \f(CW\*(C`blessed( $bar )\*(C'\fR returns
false. At that point \f(CW$bar\fR is no longer storing a reference to an
object.
.PP
You will sometimes see older books or documentation mention \*(L"blessing a
reference\*(R" or describe an object as a \*(L"blessed reference\*(R", but this is
incorrect. It isn't the reference that is blessed as an object; it's
the thing the reference refers to (i.e. the referent).
.SS "A Class is Simply a Package"
.IX Xref "class package @ISA inheritance"
.IX Subsection "A Class is Simply a Package"
Perl does not provide any special syntax for class definitions. A
package is simply a namespace containing variables and subroutines. The
only difference is that in a class, the subroutines may expect a
reference to an object or t