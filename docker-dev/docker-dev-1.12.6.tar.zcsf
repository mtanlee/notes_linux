
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ssl 3"
.TH ssl 3 "2015-07-15" "0.9.8" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL \- OpenSSL SSL/TLS library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The OpenSSL \fBssl\fR library implements the Secure Sockets Layer (\s-1SSL\s0 v2/v3) and
Transport Layer Security (\s-1TLS\s0 v1) protocols. It provides a rich \s-1API\s0 which is
documented here.
.PP
At first the library must be initialized; see
\&\fISSL_library_init\fR\|(3).
.PP
Then an \fB\s-1SSL_CTX\s0\fR object is created as a framework to establish
\&\s-1TLS/SSL\s0 enabled connections (see \fISSL_CTX_new\fR\|(3)).
Various options regarding certificates, algorithms etc. can be set
in this object.
.PP
When a network connection has been created, it can be assigned to an
\&\fB\s-1SSL\s0\fR object. After the \fB\s-1SSL\s0\fR object has been created using
\&\fISSL_new\fR\|(3), \fISSL_set_fd\fR\|(3) or
\&\fISSL_set_bio\fR\|(3) can be used to associate the network
connection with the object.
.PP
Then the \s-1TLS/SSL\s0 handshake is performed using
\&\fISSL_accept\fR\|(3) or \fISSL_connect\fR\|(3)
respectively.
\&\fISSL_read\fR\|(3) and \fISSL_write\fR\|(3) are used
to read and write data on the \s-1TLS/SSL\s0 connection.
\&\fISSL_shutdown\fR\|(3) can be used to shut down the
\&\s-1TLS/SSL\s0 connection.
.SH "DATA STRUCTURES"
.IX Header "DATA STRUCTURES"
Currently the OpenSSL \fBssl\fR library functions deals with the following data
structures:
.IP "\fB\s-1SSL_METHOD\s0\fR (\s-1SSL\s0 Method)" 4
.IX Item "SSL_METHOD (SSL Method)"
That's a dispatch structure describing the internal \fBssl\fR library
methods/functions which implement the various protocol versions (SSLv1, SSLv2
and TLSv1). It's needed to create an \fB\s-1SSL_CTX\s0\fR.
.IP "\fB\s-1SSL_CIPHER\s0\fR (\s-1SSL\s0 Cipher)" 4
.IX Item "SSL_CIPHER (SSL Cipher)"
This structure holds the algorithm information for a particular cipher which
are a core part of the \s-1SSL/TLS\s0 protocol. The available ciphers are configured
on a \fB\s-1SSL_CTX\s0\fR basis and the actually used ones are then part of the
\&\fB\s-1SSL_SESSION\s0\fR.
.IP "\fB\s-1SSL_CTX\s0\fR (\s-1SSL\s0 Context)" 4
.IX Item "SSL_CTX (SSL Context)"
That's the global context structure which is created by a server or client
once per program life-time and which holds mainly default values for the
\&\fB\s-1SSL\s0\fR structures which are later created for the connections.
.IP "\fB\s-1SSL_SESSION\s0\fR (\s-1SSL\s0 Session)" 4
.IX Item "SSL_SESSION (SSL Session)"
This is a structure containing the current \s-1TLS/SSL\s0 session details for a
connection: \fB\s-1SSL_CIPHER\s0\fRs, client and server certificates, keys, etc.
.IP "\fB\s-1SSL\s0\fR (\s-1SSL\s0 Connection)" 4
.IX Item "SSL (SSL Connection)"
That's the main \s-1SSL/TLS\s0 structure which is created by a server or client per
established connection. This actually is the core structure in the \s-1SSL API.\s0
Under run-time the application usually deals with this structure which has
links to mostly all other structures.
.SH "HEADER FILES"
.IX Header "HEADER FILES"
Currently the OpenSSL \fBssl\fR library provides the following C header files
containing the prototypes for the data structures and and functions:
.IP "\fBssl.h\fR" 4
.IX Item "ssl.h"
That's the common header file for the \s-1SSL/TLS API. \s0 Include it into your
program to make the \s-1API\s0 of the \fBssl\fR library available. It internally
includes both more private \s-1SSL\s0 headers and headers from the \fBcrypto\fR library.
Whenever you need hard-core details on the internals of the \s-1SSL API,\s0 look
inside this header file.
.IP "\fBssl2.h\fR" 4
.IX Item "ssl2.h"
That's the sub header file dealing with the SSLv2 protocol only.
\&\fIUsually you don't have to include it explicitly because
it's already included by ssl.h\fR.
.IP "\fBssl3.h\fR" 4
.IX Item "ssl3.h"
That's the sub header file dealing with the SSLv3 protocol only.
\&\fIUsually you don't have to include it explicitly because
it's already included by ssl.h\fR.
.IP "\fBssl23.h\fR" 4
.IX Item "ssl23.h"
That's the sub header file dealing with the combined use of the SSLv2 and
SSLv3 protocols.
\&\fIUsually you don't have to include it explicitly because
it's already included by ssl.h\fR.
.IP "\fBtls1.h\fR" 4
.IX Item "tls1.h"
That's the sub header file dealing with the TLSv1 protocol only.
\&\fIUsually you don't have to include it explicitly because
it's already included by ssl.h\fR.
.SH "API FUNCTIONS"
.IX Header "API FUNCTIONS"
Currently the OpenSSL \fBssl\fR library exports 214 \s-1API\s0 functions.
They are documented in the following:
.SS "\s-1DEALING WITH PROTOCOL METHODS\s0"
.IX Subsection "DEALING WITH PROTOCOL METHODS"
Here we document the various \s-1API\s0 functions which deal with the \s-1SSL/TLS\s0
protocol methods defined in \fB\s-1SSL_METHOD\s0\fR structures.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv2_client_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv2_client_method(void);"
Constructor for the SSLv2 \s-1SSL_METHOD\s0 structure for a dedicated client.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv2_server_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv2_server_method(void);"
Constructor for the SSLv2 \s-1SSL_METHOD\s0 structure for a dedicated server.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv2_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv2_method(void);"
Constructor for the SSLv2 \s-1SSL_METHOD\s0 structure for combined client and server.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv3_client_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv3_client_method(void);"
Constructor for the SSLv3 \s-1SSL_METHOD\s0 structure for a dedicated client.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv3_server_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv3_server_method(void);"
Constructor for the SSLv3 \s-1SSL_METHOD\s0 structure for a dedicated server.
.IP "\s-1SSL_METHOD\s0 *\fBSSLv3_method\fR(void);" 4
.IX Item "SSL_METHOD *SSLv3_method(void);"
Constructor for the SSLv3 \s-1SSL_METHOD\s0 structure for combined client and server.
.IP "\s-1SSL_METHOD\s0 *\fBTLSv1_client_method\fR(void);" 4
.IX Item "SSL_METHOD *TLSv1_client_method(void);"
Constructor for the TLSv1 \s-1SSL_METHOD\s0 structure for a dedicated client.
.IP "\s-1SSL_METHOD\s0 *\fBTLSv1_server_method\fR(void);" 4
.IX Item "SSL_METHOD *TLSv1_server_method(void);"
Constructor for the TLSv1 \s-1SSL_METHOD\s0 structure for a dedicated server.
.IP "\s-1SSL_METHOD\s0 *\fBTLSv1_method\fR(void);" 4
.IX Item "SSL_METHOD *TLSv1_method(void);"
Constructor for the TLSv1 \s-1SSL_METHOD\s0 structure for combined client and server.
.SS "\s-1DEALING WITH CIPHERS\s0"
.IX Subsection "DEALING WITH CIPHERS"
Here we document the various \s-1API\s0 functions which deal with the \s-1SSL/TLS\s0
ciphers defined in \fB\s-1SSL_CIPHER\s0\fR structures.
.IP "char *\fBSSL_CIPHER_description\fR(\s-1SSL_CIPHER\s0 *cipher, char *buf, int len);" 4
.IX Item "char *SSL_CIPHER_description(SSL_CIPHER *cipher, char *buf, int len);"
Write a string to \fIbuf\fR (with a maximum size of \fIlen\fR) containing a human
readable description of \fIcipher\fR. Returns \fIbuf\fR.
.IP "int \fBSSL_CIPHER_get_bits\fR(\s-1SSL_CIPHER\s0 *cipher, int *alg_bits);" 4
.IX Item "int SSL_CIPHER_get_bits(SSL_CIPHER *cipher, int *alg_bits);"
Determine the number of bits in \fIcipher\fR. Because of export crippled ciphers
there are two bits: The bits the algorithm supports in general (stored to
\&\fIalg_bits\fR) and the bits which are actually used (the return value).
.IP "const char *\fBSSL_CIPHER_get_name\fR(\s-1SSL_CIPHER\s0 *cipher);" 4
.IX Item "const char *SSL_CIPHER_get_name(SSL_CIPHER *cipher);"
Return the internal name of \fIcipher\fR as a string. These are the various
strings defined by the \fISSL2_TXT_xxx\fR, \fISSL3_TXT_xxx\fR and \fITLS1_TXT_xxx\fR
definitions in the header files.
.IP "char *\fBSSL_CIPHER_get_version\fR(\s-1SSL_CIPHER\s0 *cipher);" 4
.IX Item "char *SSL_CIPHER_get_version(SSL_CIPHER *cipher);"
Returns a string like "\f(CW\*(C`TLSv1/SSLv3\*(C'\fR\*(L" or \*(R"\f(CW\*(C`SSLv2\*(C'\fR" which indicates the
\&\s-1SSL/TLS\s0 protocol version to which \fIcipher\fR belongs (i.e. where it was defined
in the specification the first time).
.SS "\s-1DEALING WITH PROTOCOL CONTEXTS\s0"
.IX Subsection "DEALING WITH PROTOCOL CONTEXTS"
Here we document the various \s-1API\s0 functions which deal with the \s-1SSL/TLS\s0
protocol context defined in the \fB\s-1SSL_CTX\s0\fR structure.
.IP "int \fBSSL_CTX_add_client_CA\fR(\s-1SSL_CTX\s0 *ctx, X509 *x);" 4
.IX Item "int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);"
.PD 0
.IP "long \fBSSL_CTX_add_extra_chain_cert\fR(\s-1SSL_CTX\s0 *ctx, X509 *x509);" 4
.IX Item "long SSL_CTX_add_extra_chain_cert(SSL_CTX *ctx, X509 *x509);"
.IP "int \fBSSL_CTX_add_session\fR(\s-1SSL_CTX\s0 *ctx, \s-1SSL_SESSION\s0 *c);" 4
.IX Item "int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c);"
.IP "int \fBSSL_CTX_check_private_key\fR(const \s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_check_private_key(const SSL_CTX *ctx);"
.IP "long \fBSSL_CTX_ctrl\fR(\s-1SSL_CTX\s0 *ctx, int cmd, long larg, char *parg);" 4
.IX Item "long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, char *parg);"
.IP "void \fBSSL_CTX_flush_sessions\fR(\s-1SSL_CTX\s0 *s, long t);" 4
.IX Item "void SSL_CTX_flush_sessions(SSL_CTX *s, long t);"
.IP "void \fBSSL_CTX_free\fR(\s-1SSL_CTX\s0 *a);" 4
.IX Item "void SSL_CTX_free(SSL_CTX *a);"
.IP "char *\fBSSL_CTX_get_app_data\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "char *SSL_CTX_get_app_data(SSL_CTX *ctx);"
.IP "X509_STORE *\fBSSL_CTX_get_cert_store\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "X509_STORE *SSL_CTX_get_cert_store(SSL_CTX *ctx);"
.IP "\s-1STACK\s0 *\fBSSL_CTX_get_client_CA_list\fR(const \s-1SSL_CTX\s0 *ctx);" 4
.IX Item "STACK *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx);"
.IP "int (*\fBSSL_CTX_get_client_cert_cb\fR(\s-1SSL_CTX\s0 *ctx))(\s-1SSL\s0 *ssl, X509 **x509, \s-1EVP_PKEY\s0 **pkey);" 4
.IX Item "int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);"
.IP "char *\fBSSL_CTX_get_ex_data\fR(const \s-1SSL_CTX\s0 *s, int idx);" 4
.IX Item "char *SSL_CTX_get_ex_data(const SSL_CTX *s, int idx);"
.IP "int \fBSSL_CTX_get_ex_new_index\fR(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))" 4
.IX Item "int SSL_CTX_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))"
.IP "void (*\fBSSL_CTX_get_info_callback\fR(\s-1SSL_CTX\s0 *ctx))(\s-1SSL\s0 *ssl, int cb, int ret);" 4
.IX Item "void (*SSL_CTX_get_info_callback(SSL_CTX *ctx))(SSL *ssl, int cb, int ret);"
.IP "int \fBSSL_CTX_get_quiet_shutdown\fR(const \s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_get_session_cache_mode\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_get_session_cache_mode(SSL_CTX *ctx);"
.IP "long \fBSSL_CTX_get_timeout\fR(const \s-1SSL_CTX\s0 *ctx);" 4
.IX Item "long SSL_CTX_get_timeout(const SSL_CTX *ctx);"
.IP "int (*\fBSSL_CTX_get_verify_callback\fR(const \s-1SSL_CTX\s0 *ctx))(int ok, X509_STORE_CTX *ctx);" 4
.IX Item "int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx))(int ok, X509_STORE_CTX *ctx);"
.IP "int \fBSSL_CTX_get_verify_mode\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_get_verify_mode(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_load_verify_locations\fR(\s-1SSL_CTX\s0 *ctx, char *CAfile, char *CApath);" 4
.IX Item "int SSL_CTX_load_verify_locations(SSL_CTX *ctx, char *CAfile, char *CApath);"
.IP "long \fBSSL_CTX_need_tmp_RSA\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "long SSL_CTX_need_tmp_RSA(SSL_CTX *ctx);"
.IP "\s-1SSL_CTX\s0 *\fBSSL_CTX_new\fR(\s-1SSL_METHOD\s0 *meth);" 4
.IX Item "SSL_CTX *SSL_CTX_new(SSL_METHOD *meth);"
.IP "int \fBSSL_CTX_remove_session\fR(\s-1SSL_CTX\s0 *ctx, \s-1SSL_SESSION\s0 *c);" 4
.IX Item "int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c);"
.IP "int \fBSSL_CTX_sess_accept\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_accept(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_accept_good\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_accept_good(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_accept_renegotiate\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_accept_renegotiate(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_cache_full\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_cache_full(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_cb_hits\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_cb_hits(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_connect\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_connect(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_connect_good\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_connect_good(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_connect_renegotiate\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_connect_renegotiate(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_get_cache_size\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_get_cache_size(SSL_CTX *ctx);"
.IP "\s-1SSL_SESSION\s0 *(*\fBSSL_CTX_sess_get_get_cb\fR(\s-1SSL_CTX\s0 *ctx))(\s-1SSL\s0 *ssl, unsigned char *data, int len, int *copy);" 4
.IX Item "SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(SSL *ssl, unsigned char *data, int len, int *copy);"
.IP "int (*\fBSSL_CTX_sess_get_new_cb\fR(\s-1SSL_CTX\s0 *ctx)(\s-1SSL\s0 *ssl, \s-1SSL_SESSION\s0 *sess);" 4
.IX Item "int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)(SSL *ssl, SSL_SESSION *sess);"
.IP "void (*\fBSSL_CTX_sess_get_remove_cb\fR(\s-1SSL_CTX\s0 *ctx)(\s-1SSL_CTX\s0 *ctx, \s-1SSL_SESSION\s0 *sess);" 4
.IX Item "void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)(SSL_CTX *ctx, SSL_SESSION *sess);"
.IP "int \fBSSL_CTX_sess_hits\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_hits(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_misses\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_misses(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_sess_number\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_number(SSL_CTX *ctx);"
.IP "void \fBSSL_CTX_sess_set_cache_size\fR(\s-1SSL_CTX\s0 *ctx,t);" 4
.IX Item "void SSL_CTX_sess_set_cache_size(SSL_CTX *ctx,t);"
.IP "void \fBSSL_CTX_sess_set_get_cb\fR(\s-1SSL_CTX\s0 *ctx, \s-1SSL_SESSION\s0 *(*cb)(\s-1SSL\s0 *ssl, unsigned char *data, int len, int *copy));" 4
.IX Item "void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx, SSL_SESSION *(*cb)(SSL *ssl, unsigned char *data, int len, int *copy));"
.IP "void \fBSSL_CTX_sess_set_new_cb\fR(\s-1SSL_CTX\s0 *ctx, int (*cb)(\s-1SSL\s0 *ssl, \s-1SSL_SESSION\s0 *sess));" 4
.IX Item "void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int (*cb)(SSL *ssl, SSL_SESSION *sess));"
.IP "void \fBSSL_CTX_sess_set_remove_cb\fR(\s-1SSL_CTX\s0 *ctx, void (*cb)(\s-1SSL_CTX\s0 *ctx, \s-1SSL_SESSION\s0 *sess));" 4
.IX Item "void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx, void (*cb)(SSL_CTX *ctx, SSL_SESSION *sess));"
.IP "int \fBSSL_CTX_sess_timeouts\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_sess_timeouts(SSL_CTX *ctx);"
.IP "\s-1LHASH\s0 *\fBSSL_CTX_sessions\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "LHASH *SSL_CTX_sessions(SSL_CTX *ctx);"
.IP "void \fBSSL_CTX_set_app_data\fR(\s-1SSL_CTX\s0 *ctx, void *arg);" 4
.IX Item "void SSL_CTX_set_app_data(SSL_CTX *ctx, void *arg);"
.IP "void \fBSSL_CTX_set_cert_store\fR(\s-1SSL_CTX\s0 *ctx, X509_STORE *cs);" 4
.IX Item "void SSL_CTX_set_cert_store(SSL_CTX *ctx, X509_STORE *cs);"
.IP "void \fBSSL_CTX_set_cert_verify_cb\fR(\s-1SSL_CTX\s0 *ctx, int (*cb)(), char *arg)" 4
.IX Item "void SSL_CTX_set_cert_verify_cb(SSL_CTX *ctx, int (*cb)(), char *arg)"
.IP "int \fBSSL_CTX_set_cipher_list\fR(\s-1SSL_CTX\s0 *ctx, char *str);" 4
.IX Item "int SSL_CTX_set_cipher_list(SSL_CTX *ctx, char *str);"
.IP "void \fBSSL_CTX_set_client_CA_list\fR(\s-1SSL_CTX\s0 *ctx, \s-1STACK\s0 *list);" 4
.IX Item "void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK *list);"
.IP "void \fBSSL_CTX_set_client_cert_cb\fR(\s-1SSL_CTX\s0 *ctx, int (*cb)(\s-1SSL\s0 *ssl, X509 **x509, \s-1EVP_PKEY\s0 **pkey));" 4
.IX Item "void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int (*cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));"
.IP "void \fBSSL_CTX_set_default_passwd_cb\fR(\s-1SSL_CTX\s0 *ctx, int (*cb);(void))" 4
.IX Item "void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, int (*cb);(void))"
.IP "void \fBSSL_CTX_set_default_read_ahead\fR(\s-1SSL_CTX\s0 *ctx, int m);" 4
.IX Item "void SSL_CTX_set_default_read_ahead(SSL_CTX *ctx, int m);"
.IP "int \fBSSL_CTX_set_default_verify_paths\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);"
.IP "int \fBSSL_CTX_set_ex_data\fR(\s-1SSL_CTX\s0 *s, int idx, char *arg);" 4
.IX Item "int SSL_CTX_set_ex_data(SSL_CTX *s, int idx, char *arg);"
.IP "void \fBSSL_CTX_set_info_callback\fR(\s-1SSL_CTX\s0 *ctx, void (*cb)(\s-1SSL\s0 *ssl, int cb, int ret));" 4
.IX Item "void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*cb)(SSL *ssl, int cb, int ret));"
.IP "void \fBSSL_CTX_set_msg_callback\fR(\s-1SSL_CTX\s0 *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, \s-1SSL\s0 *ssl, void *arg));" 4
.IX Item "void SSL_CTX_set_msg_callback(SSL_CTX *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));"
.IP "void \fBSSL_CTX_set_msg_callback_arg\fR(\s-1SSL_CTX\s0 *ctx, void *arg);" 4
.IX Item "void SSL_CTX_set_msg_callback_arg(SSL_CTX *ctx, void *arg);"
.IP "void \fBSSL_CTX_set_options\fR(\s-1SSL_CTX\s0 *ctx, unsigned long op);" 4
.IX Item "void SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op);"
.IP "void \fBSSL_CTX_set_quiet_shutdown\fR(\s-1SSL_CTX\s0 *ctx, int mode);" 4
.IX Item "void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);"
.IP "void \fBSSL_CTX_set_session_cache_mode\fR(\s-1SSL_CTX\s0 *ctx, int mode);" 4
.IX Item "void SSL_CTX_set_session_cache_mode(SSL_CTX *ctx, int mode);"
.IP "int \fBSSL_CTX_set_ssl_version\fR(\s-1SSL_CTX\s0 *ctx, \s-1SSL_METHOD\s0 *meth);" 4
.IX Item "int SSL_CTX_set_ssl_version(SSL_CTX *ctx, SSL_METHOD *meth);"
.IP "void \fBSSL_CTX_set_timeout\fR(\s-1SSL_CTX\s0 *ctx, long t);" 4
.IX Item "void SSL_CTX_set_timeout(SSL_CTX *ctx, long t);"
.IP "long \fBSSL_CTX_set_tmp_dh\fR(SSL_CTX* ctx, \s-1DH\s0 *dh);" 4
.IX Item "long SSL_CTX_set_tmp_dh(SSL_CTX* ctx, DH *dh);"
.IP "long \fBSSL_CTX_set_tmp_dh_callback\fR(\s-1SSL_CTX\s0 *ctx, \s-1DH\s0 *(*cb)(void));" 4
.IX Item "long SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx, DH *(*cb)(void));"
.IP "long \fBSSL_CTX_set_tmp_rsa\fR(\s-1SSL_CTX\s0 *ctx, \s-1RSA\s0 *rsa);" 4
.IX Item "long SSL_CTX_set_tmp_rsa(SSL_CTX *ctx, RSA *rsa);"
.IP "SSL_CTX_set_tmp_rsa_callback" 4
.IX Item "SSL_CTX_set_tmp_rsa_callback"
.PD
\&\f(CW\*(C`long \f(CBSSL_CTX_set_tmp_rsa_callback\f(CW(SSL_CTX *\f(CBctx\f(CW, RSA *(*\f(CBcb\f(CW)(SSL *\f(CBssl\f(CW, int \f(CBexport\f(CW, int \f(CBkeylength\f(CW));\*(C'\fR
.Sp
Sets the callback which will be called when a temporary private key is
required. The \fB\f(CB\*(C`export\*(C'\fB\fR flag will be set if the reason for needing
a temp key is that an export ciphersuite is in use, in which case,
\&\fB\f(CB\*(C`keylength\*(C'\fB\fR will contain the required keylength in bits. Generate a key of
appropriate size (using ???) and return it.
.IP "SSL_set_tmp_rsa_callback" 4
.IX Item "SSL_set_tmp_rsa_callback"
long \fBSSL_set_tmp_rsa_callback\fR(\s-1SSL\s0 *ssl, \s-1RSA\s0 *(*cb)(\s-1SSL\s0 *ssl, int export, int keylength));
.Sp
The same as \fBSSL_CTX_set_tmp_rsa_callback\fR, except it operates on an \s-1SSL\s0
session instead of a context.
.IP "void \fBSSL_CTX_set_verify\fR(\s-1SSL_CTX\s0 *ctx, int mode, int (*cb);(void))" 4
.IX Item "void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, int (*cb);(void))"
.PD 0
.IP "int \fBSSL_CTX_use_PrivateKey\fR(\s-1SSL_CTX\s0 *ctx, \s-1EVP_PKEY\s0 *pkey);" 4
.IX Item "int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);"
.IP "int \fBSSL_CTX_use_PrivateKey_ASN1\fR(int type, \s-1SSL_CTX\s0 *ctx, unsigned char *d, long len);" 4
.IX Item "int SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx, unsigned char *d, long len);"
.IP "int \fBSSL_CTX_use_PrivateKey_file\fR(\s-1SSL_CTX\s0 *ctx, char *file, int type);" 4
.IX Item "int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, char *file, int type);"
.IP "int \fBSSL_CTX_use_RSAPrivateKey\fR(\s-1SSL_CTX\s0 *ctx, \s-1RSA\s0 *rsa);" 4
.IX Item "int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);"
.IP "int \fBSSL_CTX_use_RSAPrivateKey_ASN1\fR(\s-1SSL_CTX\s0 *ctx, unsigned char *d, long len);" 4
.IX Item "int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);"
.IP "int \fBSSL_CTX_use_RSAPrivateKey_file\fR(\s-1SSL_CTX\s0 *ctx, char *file, int type);" 4
.IX Item "int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, char *file, int type);"
.IP "int \fBSSL_CTX_use_certificate\fR(\s-1SSL_CTX\s0 *ctx, X509 *x);" 4
.IX Item "int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);"
.IP "int \fBSSL_CTX_use_certificate_ASN1\fR(\s-1SSL_CTX\s0 *ctx, int len, unsigned char *d);" 4
.IX Item "int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned char *d);"
.IP "int \fBSSL_CTX_use_certificate_file\fR(\s-1SSL_CTX\s0 *ctx, char *file, int type);" 4
.IX Item "int SSL_CTX_use_certificate_file(SSL_CTX *ctx, char *file, int type);"
.PD
.SS "\s-1DEALING WITH SESSIONS\s0"
.IX Subsection "DEALING WITH SESSIONS"
Here we document the various \s-1API\s0 functions which deal with the \s-1SSL/TLS\s0
sessions defined in the \fB\s-1SSL_SESSION\s0\fR structures.
.IP "int \fBSSL_SESSION_cmp\fR(const \s-1SSL_SESSION\s0 *a, const \s-1SSL_SESSION\s0 *b);" 4
.IX Item "int SSL_SESSION_cmp(const SSL_SESSION *a, const SSL_SESSION *b);"
.PD 0
.IP "void \fBSSL_SESSION_free\fR(\s-1SSL_SESSION\s0 *ss);" 4
.IX Item "void SSL_SESSION_free(SSL_SESSION *ss);"
.IP "char *\fBSSL_SESSION_get_app_data\fR(\s-1SSL_SESSION\s0 *s);" 4
.IX Item "char *SSL_SESSION_get_app_data(SSL_SESSION *s);"
.IP "char *\fBSSL_SESSION_get_ex_data\fR(const \s-1SSL_SESSION\s0 *s, int idx);" 4
.IX Item "char *SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx);"
.IP "int \fBSSL_SESSION_get_ex_new_index\fR(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))" 4
.IX Item "int SSL_SESSION_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))"
.IP "long \fBSSL_SESSION_get_time\fR(const \s-1SSL_SESSION\s0 *s);" 4
.IX Item "long SSL_SESSION_get_time(const SSL_SESSION *s);"
.IP "long \fBSSL_SESSION_get_timeout\fR(const \s-1SSL_SESSION\s0 *s);" 4
.IX Item "long SSL_SESSION_get_timeout(const SSL_SESSION *s);"
.IP "unsigned long \fBSSL_SESSION_hash\fR(const \s-1SSL_SESSION\s0 *a);" 4
.IX Item "unsigned long SSL_SESSION_hash(const SSL_SESSION *a);"
.IP "\s-1SSL_SESSION\s0 *\fBSSL_SESSION_new\fR(void);" 4
.IX Item "SSL_SESSION *SSL_SESSION_new(void);"
.IP "int \fBSSL_SESSION_print\fR(\s-1BIO\s0 *bp, const \s-1SSL_SESSION\s0 *x);" 4
.IX Item "int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x);"
.IP "int \fBSSL_SESSION_print_fp\fR(\s-1FILE\s0 *fp, const \s-1SSL_SESSION\s0 *x);" 4
.IX Item "int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x);"
.IP "void \fBSSL_SESSION_set_app_data\fR(\s-1SSL_SESSION\s0 *s, char *a);" 4
.IX Item "void SSL_SESSION_set_app_data(SSL_SESSION *s, char *a);"
.IP "int \fBSSL_SESSION_set_ex_data\fR(\s-1SSL_SESSION\s0 *s, int idx, char *arg);" 4
.IX Item "int SSL_SESSION_set_ex_data(SSL_SESSION *s, int idx, char *arg);"
.IP "long \fBSSL_SESSION_set_time\fR(\s-1SSL_SESSION\s0 *s, long t);" 4
.IX Item "long SSL_SESSION_set_time(SSL_SESSION *s, long t);"
.IP "long \fBSSL_SESSION_set_timeout\fR(\s-1SSL_SESSION\s0 *s, long t);" 4
.IX Item "long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);"
.PD
.SS "\s-1DEALING WITH CONNECTIONS\s0"
.IX Subsection "DEALING WITH CONNECTIONS"
Here we document the various \s-1API\s0 functions which deal with the \s-1SSL/TLS\s0
connection defined in the \fB\s-1SSL\s0\fR structure.
.IP "int \fBSSL_accept\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_accept(SSL *ssl);"
.PD 0
.IP "int \fBSSL_add_dir_cert_subjects_to_stack\fR(\s-1STACK\s0 *stack, const char *dir);" 4
.IX Item "int SSL_add_dir_cert_subjects_to_stack(STACK *stack, const char *dir);"
.IP "int \fBSSL_add_file_cert_subjects_to_stack\fR(\s-1STACK\s0 *stack, const char *file);" 4
.IX Item "int SSL_add_file_cert_subjects_to_stack(STACK *stack, const char *file);"
.IP "int \fBSSL_add_client_CA\fR(\s-1SSL\s0 *ssl, X509 *x);" 4
.IX Item "int SSL_add_client_CA(SSL *ssl, X509 *x);"
.IP "char *\fBSSL_alert_desc_string\fR(int value);" 4
.IX Item "char *SSL_alert_desc_string(int value);"
.IP "char *\fBSSL_alert_desc_string_long\fR(int value);" 4
.IX Item "char *SSL_alert_desc_string_long(int value);"
.IP "char *\fBSSL_alert_type_string\fR(int value);" 4
.IX Item "char *SSL_alert_type_string(int value);"
.IP "char *\fBSSL_alert_type_string_long\fR(int value);" 4
.IX Item "char *SSL_alert_type_string_long(int value);"
.IP "int \fBSSL_check_private_key\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_check_private_key(const SSL *ssl);"
.IP "void \fBSSL_clear\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "void SSL_clear(SSL *ssl);"
.IP "long \fBSSL_clear_num_renegotiations\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_clear_num_renegotiations(SSL *ssl);"
.IP "int \fBSSL_connect\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_connect(SSL *ssl);"
.IP "void \fBSSL_copy_session_id\fR(\s-1SSL\s0 *t, const \s-1SSL\s0 *f);" 4
.IX Item "void SSL_copy_session_id(SSL *t, const SSL *f);"
.IP "long \fBSSL_ctrl\fR(\s-1SSL\s0 *ssl, int cmd, long larg, char *parg);" 4
.IX Item "long SSL_ctrl(SSL *ssl, int cmd, long larg, char *parg);"
.IP "int \fBSSL_do_handshake\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_do_handshake(SSL *ssl);"
.IP "\s-1SSL\s0 *\fBSSL_dup\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "SSL *SSL_dup(SSL *ssl);"
.IP "\s-1STACK\s0 *\fBSSL_dup_CA_list\fR(\s-1STACK\s0 *sk);" 4
.IX Item "STACK *SSL_dup_CA_list(STACK *sk);"
.IP "void \fBSSL_free\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "void SSL_free(SSL *ssl);"
.IP "\s-1SSL_CTX\s0 *\fBSSL_get_SSL_CTX\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);"
.IP "char *\fBSSL_get_app_data\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_get_app_data(SSL *ssl);"
.IP "X509 *\fBSSL_get_certificate\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "X509 *SSL_get_certificate(const SSL *ssl);"
.IP "const char *\fBSSL_get_cipher\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "const char *SSL_get_cipher(const SSL *ssl);"
.IP "int \fBSSL_get_cipher_bits\fR(const \s-1SSL\s0 *ssl, int *alg_bits);" 4
.IX Item "int SSL_get_cipher_bits(const SSL *ssl, int *alg_bits);"
.IP "char *\fBSSL_get_cipher_list\fR(const \s-1SSL\s0 *ssl, int n);" 4
.IX Item "char *SSL_get_cipher_list(const SSL *ssl, int n);"
.IP "char *\fBSSL_get_cipher_name\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_get_cipher_name(const SSL *ssl);"
.IP "char *\fBSSL_get_cipher_version\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_get_cipher_version(const SSL *ssl);"
.IP "\s-1STACK\s0 *\fBSSL_get_ciphers\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "STACK *SSL_get_ciphers(const SSL *ssl);"
.IP "\s-1STACK\s0 *\fBSSL_get_client_CA_list\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "STACK *SSL_get_client_CA_list(const SSL *ssl);"
.IP "\s-1SSL_CIPHER\s0 *\fBSSL_get_current_cipher\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "SSL_CIPHER *SSL_get_current_cipher(SSL *ssl);"
.IP "long \fBSSL_get_default_timeout\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_get_default_timeout(const SSL *ssl);"
.IP "int \fBSSL_get_error\fR(const \s-1SSL\s0 *ssl, int i);" 4
.IX Item "int SSL_get_error(const SSL *ssl, int i);"
.IP "char *\fBSSL_get_ex_data\fR(const \s-1SSL\s0 *ssl, int idx);" 4
.IX Item "char *SSL_get_ex_data(const SSL *ssl, int idx);"
.IP "int \fBSSL_get_ex_data_X509_STORE_CTX_idx\fR(void);" 4
.IX Item "int SSL_get_ex_data_X509_STORE_CTX_idx(void);"
.IP "int \fBSSL_get_ex_new_index\fR(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))" 4
.IX Item "int SSL_get_ex_new_index(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))"
.IP "int \fBSSL_get_fd\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_fd(const SSL *ssl);"
.IP "void (*\fBSSL_get_info_callback\fR(const \s-1SSL\s0 *ssl);)()" 4
.IX Item "void (*SSL_get_info_callback(const SSL *ssl);)()"
.IP "\s-1STACK\s0 *\fBSSL_get_peer_cert_chain\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "STACK *SSL_get_peer_cert_chain(const SSL *ssl);"
.IP "X509 *\fBSSL_get_peer_certificate\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "X509 *SSL_get_peer_certificate(const SSL *ssl);"
.IP "\s-1EVP_PKEY\s0 *\fBSSL_get_privatekey\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "EVP_PKEY *SSL_get_privatekey(SSL *ssl);"
.IP "int \fBSSL_get_quiet_shutdown\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_quiet_shutdown(const SSL *ssl);"
.IP "\s-1BIO\s0 *\fBSSL_get_rbio\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "BIO *SSL_get_rbio(const SSL *ssl);"
.IP "int \fBSSL_get_read_ahead\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_read_ahead(const SSL *ssl);"
.IP "\s-1SSL_SESSION\s0 *\fBSSL_get_session\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "SSL_SESSION *SSL_get_session(const SSL *ssl);"
.IP "char *\fBSSL_get_shared_ciphers\fR(const \s-1SSL\s0 *ssl, char *buf, int len);" 4
.IX Item "char *SSL_get_shared_ciphers(const SSL *ssl, char *buf, int len);"
.IP "int \fBSSL_get_shutdown\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_shutdown(const SSL *ssl);"
.IP "\s-1SSL_METHOD\s0 *\fBSSL_get_ssl_method\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "SSL_METHOD *SSL_get_ssl_method(SSL *ssl);"
.IP "int \fBSSL_get_state\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_state(const SSL *ssl);"
.IP "long \fBSSL_get_time\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_get_time(const SSL *ssl);"
.IP "long \fBSSL_get_timeout\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_get_timeout(const SSL *ssl);"
.IP "int (*\fBSSL_get_verify_callback\fR(const \s-1SSL\s0 *ssl))(int,X509_STORE_CTX *)" 4
.IX Item "int (*SSL_get_verify_callback(const SSL *ssl))(int,X509_STORE_CTX *)"
.IP "int \fBSSL_get_verify_mode\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_get_verify_mode(const SSL *ssl);"
.IP "long \fBSSL_get_verify_result\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_get_verify_result(const SSL *ssl);"
.IP "char *\fBSSL_get_version\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_get_version(const SSL *ssl);"
.IP "\s-1BIO\s0 *\fBSSL_get_wbio\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "BIO *SSL_get_wbio(const SSL *ssl);"
.IP "int \fBSSL_in_accept_init\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_in_accept_init(SSL *ssl);"
.IP "int \fBSSL_in_before\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_in_before(SSL *ssl);"
.IP "int \fBSSL_in_connect_init\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_in_connect_init(SSL *ssl);"
.IP "int \fBSSL_in_init\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_in_init(SSL *ssl);"
.IP "int \fBSSL_is_init_finished\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_is_init_finished(SSL *ssl);"
.IP "\s-1STACK\s0 *\fBSSL_load_client_CA_file\fR(char *file);" 4
.IX Item "STACK *SSL_load_client_CA_file(char *file);"
.IP "void \fBSSL_load_error_strings\fR(void);" 4
.IX Item "void SSL_load_error_strings(void);"
.IP "\s-1SSL\s0 *\fBSSL_new\fR(\s-1SSL_CTX\s0 *ctx);" 4
.IX Item "SSL *SSL_new(SSL_CTX *ctx);"
.IP "long \fBSSL_num_renegotiations\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_num_renegotiations(SSL *ssl);"
.IP "int \fBSSL_peek\fR(\s-1SSL\s0 *ssl, void *buf, int num);" 4
.IX Item "int SSL_peek(SSL *ssl, void *buf, int num);"
.IP "int \fBSSL_pending\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_pending(const SSL *ssl);"
.IP "int \fBSSL_read\fR(\s-1SSL\s0 *ssl, void *buf, int num);" 4
.IX Item "int SSL_read(SSL *ssl, void *buf, int num);"
.IP "int \fBSSL_renegotiate\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_renegotiate(SSL *ssl);"
.IP "char *\fBSSL_rstate_string\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_rstate_string(SSL *ssl);"
.IP "char *\fBSSL_rstate_string_long\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_rstate_string_long(SSL *ssl);"
.IP "long \fBSSL_session_reused\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_session_reused(SSL *ssl);"
.IP "void \fBSSL_set_accept_state\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "void SSL_set_accept_state(SSL *ssl);"
.IP "void \fBSSL_set_app_data\fR(\s-1SSL\s0 *ssl, char *arg);" 4
.IX Item "void SSL_set_app_data(SSL *ssl, char *arg);"
.IP "void \fBSSL_set_bio\fR(\s-1SSL\s0 *ssl, \s-1BIO\s0 *rbio, \s-1BIO\s0 *wbio);" 4
.IX Item "void SSL_set_bio(SSL *ssl, BIO *rbio, BIO *wbio);"
.IP "int \fBSSL_set_cipher_list\fR(\s-1SSL\s0 *ssl, char *str);" 4
.IX Item "int SSL_set_cipher_list(SSL *ssl, char *str);"
.IP "void \fBSSL_set_client_CA_list\fR(\s-1SSL\s0 *ssl, \s-1STACK\s0 *list);" 4
.IX Item "void SSL_set_client_CA_list(SSL *ssl, STACK *list);"
.IP "void \fBSSL_set_connect_state\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "void SSL_set_connect_state(SSL *ssl);"
.IP "int \fBSSL_set_ex_data\fR(\s-1SSL\s0 *ssl, int idx, char *arg);" 4
.IX Item "int SSL_set_ex_data(SSL *ssl, int idx, char *arg);"
.IP "int \fBSSL_set_fd\fR(\s-1SSL\s0 *ssl, int fd);" 4
.IX Item "int SSL_set_fd(SSL *ssl, int fd);"
.IP "void \fBSSL_set_info_callback\fR(\s-1SSL\s0 *ssl, void (*cb);(void))" 4
.IX Item "void SSL_set_info_callback(SSL *ssl, void (*cb);(void))"
.IP "void \fBSSL_set_msg_callback\fR(\s-1SSL\s0 *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, \s-1SSL\s0 *ssl, void *arg));" 4
.IX Item "void SSL_set_msg_callback(SSL *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));"
.IP "void \fBSSL_set_msg_callback_arg\fR(\s-1SSL\s0 *ctx, void *arg);" 4
.IX Item "void SSL_set_msg_callback_arg(SSL *ctx, void *arg);"
.IP "void \fBSSL_set_options\fR(\s-1SSL\s0 *ssl, unsigned long op);" 4
.IX Item "void SSL_set_options(SSL *ssl, unsigned long op);"
.IP "void \fBSSL_set_quiet_shutdown\fR(\s-1SSL\s0 *ssl, int mode);" 4
.IX Item "void SSL_set_quiet_shutdown(SSL *ssl, int mode);"
.IP "void \fBSSL_set_read_ahead\fR(\s-1SSL\s0 *ssl, int yes);" 4
.IX Item "void SSL_set_read_ahead(SSL *ssl, int yes);"
.IP "int \fBSSL_set_rfd\fR(\s-1SSL\s0 *ssl, int fd);" 4
.IX Item "int SSL_set_rfd(SSL *ssl, int fd);"
.IP "int \fBSSL_set_session\fR(\s-1SSL\s0 *ssl, \s-1SSL_SESSION\s0 *session);" 4
.IX Item "int SSL_set_session(SSL *ssl, SSL_SESSION *session);"
.IP "void \fBSSL_set_shutdown\fR(\s-1SSL\s0 *ssl, int mode);" 4
.IX Item "void SSL_set_shutdown(SSL *ssl, int mode);"
.IP "int \fBSSL_set_ssl_method\fR(\s-1SSL\s0 *ssl, \s-1SSL_METHOD\s0 *meth);" 4
.IX Item "int SSL_set_ssl_method(SSL *ssl, SSL_METHOD *meth);"
.IP "void \fBSSL_set_time\fR(\s-1SSL\s0 *ssl, long t);" 4
.IX Item "void SSL_set_time(SSL *ssl, long t);"
.IP "void \fBSSL_set_timeout\fR(\s-1SSL\s0 *ssl, long t);" 4
.IX Item "void SSL_set_timeout(SSL *ssl, long t);"
.IP "void \fBSSL_set_verify\fR(\s-1SSL\s0 *ssl, int mode, int (*callback);(void))" 4
.IX Item "void SSL_set_verify(SSL *ssl, int mode, int (*callback);(void))"
.IP "void \fBSSL_set_verify_result\fR(\s-1SSL\s0 *ssl, long arg);" 4
.IX Item "void SSL_set_verify_result(SSL *ssl, long arg);"
.IP "int \fBSSL_set_wfd\fR(\s-1SSL\s0 *ssl, int fd);" 4
.IX Item "int SSL_set_wfd(SSL *ssl, int fd);"
.IP "int \fBSSL_shutdown\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_shutdown(SSL *ssl);"
.IP "int \fBSSL_state\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_state(const SSL *ssl);"
.IP "char *\fBSSL_state_string\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_state_string(const SSL *ssl);"
.IP "char *\fBSSL_state_string_long\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "char *SSL_state_string_long(const SSL *ssl);"
.IP "long \fBSSL_total_renegotiations\fR(\s-1SSL\s0 *ssl);" 4
.IX Item "long SSL_total_renegotiations(SSL *ssl);"
.IP "int \fBSSL_use_PrivateKey\fR(\s-1SSL\s0 *ssl, \s-1EVP_PKEY\s0 *pkey);" 4
.IX Item "int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);"
.IP "int \fBSSL_use_PrivateKey_ASN1\fR(int type, \s-1SSL\s0 *ssl, unsigned char *d, long len);" 4
.IX Item "int SSL_use_PrivateKey_ASN1(int type, SSL *ssl, unsigned char *d, long len);"
.IP "int \fBSSL_use_PrivateKey_file\fR(\s-1SSL\s0 *ssl, char *file, int type);" 4
.IX Item "int SSL_use_PrivateKey_file(SSL *ssl, char *file, int type);"
.IP "int \fBSSL_use_RSAPrivateKey\fR(\s-1SSL\s0 *ssl, \s-1RSA\s0 *rsa);" 4
.IX Item "int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);"
.IP "int \fBSSL_use_RSAPrivateKey_ASN1\fR(\s-1SSL\s0 *ssl, unsigned char *d, long len);" 4
.IX Item "int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);"
.IP "int \fBSSL_use_RSAPrivateKey_file\fR(\s-1SSL\s0 *ssl, char *file, int type);" 4
.IX Item "int SSL_use_RSAPrivateKey_file(SSL *ssl, char *file, int type);"
.IP "int \fBSSL_use_certificate\fR(\s-1SSL\s0 *ssl, X509 *x);" 4
.IX Item "int SSL_use_certificate(SSL *ssl, X509 *x);"
.IP "int \fBSSL_use_certificate_ASN1\fR(\s-1SSL\s0 *ssl, int len, unsigned char *d);" 4
.IX Item "int SSL_use_certificate_ASN1(SSL *ssl, int len, unsigned char *d);"
.IP "int \fBSSL_use_certificate_file\fR(\s-1SSL\s0 *ssl, char *file, int type);" 4
.IX Item "int SSL_use_certificate_file(SSL *ssl, char *file, int type);"
.IP "int \fBSSL_version\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_version(const SSL *ssl);"
.IP "int \fBSSL_want\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_want(const SSL *ssl);"
.IP "int \fBSSL_want_nothing\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_want_nothing(const SSL *ssl);"
.IP "int \fBSSL_want_read\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_want_read(const SSL *ssl);"
.IP "int \fBSSL_want_write\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_want_write(const SSL *ssl);"
.IP "int \fBSSL_want_x509_lookup\fR(const \s-1SSL\s0 *ssl);" 4
.IX Item "int SSL_want_x509_lookup(const SSL *ssl);"
.IP "int \fBSSL_write\fR(\s-1SSL\s0 *ssl, const void *buf, int num);" 4
.IX Item "int SSL_write(SSL *ssl, const void *buf, int num);"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIopenssl\fR\|(1), \fIcrypto\fR\|(3),
\&\fISSL_accept\fR\|(3), \fISSL_clear\fR\|(3),
\&\fISSL_connect\fR\|(3),
\&\fISSL_CIPHER_get_name\fR\|(3),
\&\fISSL_COMP_add_compression_method\fR\|(3),
\&\fISSL_CTX_add_extra_chain_cert\fR\|(3),
\&\fISSL_CTX_add_session\fR\|(3),
\&\fISSL_CTX_ctrl\fR\|(3),
\&\fISSL_CTX_flush_sessions\fR\|(3),
\&\fISSL_CTX_get_ex_new_index\fR\|(3),
\&\fISSL_CTX_get_verify_mode\fR\|(3),
\&\fISSL_CTX_load_verify_locations\fR\|(3)
\&\fISSL_CTX_new\fR\|(3),
\&\fISSL_CTX_sess_number\fR\|(3),
\&\fISSL_CTX_sess_set_cache_size\fR\|(3),
\&\fISSL_CTX_sess_set_get_cb\fR\|(3),
\&\fISSL_CTX_sessions\fR\|(3),
\&\fISSL_CTX_set_cert_store\fR\|(3),
\&\fISSL_CTX_set_cert_verify_callback\fR\|(3),
\&\fISSL_CTX_set_cipher_list\fR\|(3),
\&\fISSL_CTX_set_client_CA_list\fR\|(3),
\&\fISSL_CTX_set_client_cert_cb\fR\|(3),
\&\fISSL_CTX_set_default_passwd_cb\fR\|(3),
\&\fISSL_CTX_set_generate_session_id\fR\|(3),
\&\fISSL_CTX_set_info_callback\fR\|(3),
\&\fISSL_CTX_set_max_cert_list\fR\|(3),
\&\fISSL_CTX_set_mode\fR\|(3),
\&\fISSL_CTX_set_msg_callback\fR\|(3),
\&\fISSL_CTX_set_options\fR\|(3),
\&\fISSL_CTX_set_quiet_shutdown\fR\|(3),
\&\fISSL_CTX_set_session_cache_mode\fR\|(3),
\&\fISSL_CTX_set_session_id_context\fR\|(3),
\&\fISSL_CTX_set_ssl_version\fR\|(3),
\&\fISSL_CTX_set_timeout\fR\|(3),
\&\fISSL_CTX_set_tmp_rsa_callback\fR\|(3),
\&\fISSL_CTX_set_tmp_dh_callback\fR\|(3),
\&\fISSL_CTX_set_verify\fR\|(3),
\&\fISSL_CTX_use_certificate\fR\|(3),
\&\fISSL_alert_type_string\fR\|(3),
\&\fISSL_do_handshake\fR\|(3),
\&\fISSL_get_SSL_CTX\fR\|(3),
\&\fISSL_get_ciphers\fR\|(3),
\&\fISSL_get_client_CA_list\fR\|(3),
\&\fISSL_get_default_timeout\fR\|(3),
\&\fISSL_get_error\fR\|(3),
\&\fISSL_get_ex_data_X509_STORE_CTX_idx\fR\|(3),
\&\fISSL_get_ex_new_index\fR\|(3),
\&\fISSL_get_fd\fR\|(3),
\&\fISSL_get_peer_cert_chain\fR\|(3),
\&\fISSL_get_rbio\fR\|(3),
\&\fISSL_get_session\fR\|(3),
\&\fISSL_get_verify_result\fR\|(3),
\&\fISSL_get_version\fR\|(3),
\&\fISSL_library_init\fR\|(3),
\&\fISSL_load_client_CA_file\fR\|(3),
\&\fISSL_new\fR\|(3),
\&\fISSL_pending\fR\|(3),
\&\fISSL_read\fR\|(3),
\&\fISSL_rstate_string\fR\|(3),
\&\fISSL_session_reused\fR\|(3),
\&\fISSL_set_bio\fR\|(3),
\&\fISSL_set_connect_state\fR\|(3),
\&\fISSL_set_fd\fR\|(3),
\&\fISSL_set_session\fR\|(3),
\&\fISSL_set_shutdown\fR\|(3),
\&\fISSL_shutdown\fR\|(3),
\&\fISSL_state_string\fR\|(3),
\&\fISSL_want\fR\|(3),
\&\fISSL_write\fR\|(3),
\&\fISSL_SESSION_free\fR\|(3),
\&\fISSL_SESSION_get_ex_new_index\fR\|(3),
\&\fISSL_SESSION_get_time\fR\|(3),
\&\fId2i_SSL_SESSION\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
The \fIssl\fR\|(3) document appeared in OpenSSL 0.9.2
                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/standend.3x                                  0100644 0001750 0001750 00000025201 12566174415 022737  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        '\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2006,2007 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_attr.3x,v 1.31 2007/03/17 20:30:33 tom Exp $
.TH curs_attr 3X ""
.na
.hy 0
.SH NAME
\fBattroff\fR,
\fBwattroff\fR,
\fBattron\fR,
\fBwattron\fR,
\fBattrset\fR,
\fBwattrset\fR,
\fBcolor_set\fR,
\fBwcolor_set\fR,
\fBstandend\fR,
\fBwstandend\fR,
\fBstandout\fR,
\fBwstandout\fR,
\fBattr_get\fR,
\fBwattr_get\fR,
\fBattr_off\fR,
\fBwattr_off\fR,
\fBattr_on\fR,
\fBwattr_on\fR,
\fBattr_set\fR,
\fBwattr_set\fR,
\fBchgat\fR,
\fBwchgat\fR,
\fBmvchgat\fR,
\fBmvwchgat\fR,
\fBPAIR_NUMBER\fR - \fBcurses\fR character and window attribute control routines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.br
\fBint attroff(int attrs);\fR
.br
\fBint wattroff(WINDOW *win, int attrs);\fR
.br
\fBint attron(int attrs);\fR
.br
\fBint wattron(WINDOW *win, int attrs);\fR
.br
\fBint attrset(int attrs);\fR
.br
\fBint wattrset(WINDOW *win, int attrs);\fR
.br
\fBint color_set(short color_pair_number, void* opts);\fR
.br
\fBint wcolor_set(WINDOW *win, short color_pair_number,\fR
      \fBvoid* opts);\fR
.br
\fBint standend(void);\fR
.br
\fBint wstandend(WINDOW *win);\fR
.br
\fBint standout(void);\fR
.br
\fBint wstandout(WINDOW *win);\fR
.br
\fBint attr_get(attr_t *attrs, short *pair, void *opts);\fR
.br
\fBint wattr_get(WINDOW *win, attr_t *attrs, short *pair,\fR
       \fBvoid *opts);\fR
.br
\fBint attr_off(attr_t attrs, void *opts);\fR
.br
\fBint wattr_off(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_on(attr_t attrs, void *opts);\fR
.br
\fBint wattr_on(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_set(attr_t attrs, short pair, void *opts);\fR
.br
\fBint wattr_set(WINDOW *win, attr_t attrs, short pair, void *opts);\fR
.br
\fBint chgat(int n, attr_t attr, short color,\fR
      \fBconst void *opts)\fR
.br
\fBint wchgat(WINDOW *win, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvchgat(int y, int x, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvwchgat(WINDOW *win, int y, int x, int n,\fR
      \fBattr_t attr, short color, const void *opts)\fR
.br
.SH DESCRIPTION
These routines manipulate the current attributes of the named window.  The
current attributes of a window apply to all characters that are written into
the window with \fBwaddch\fR, \fBwaddstr\fR and \fBwprintw\fR.  Attributes are
a property of the character, and move with the character through any scrolling
and insert/delete line/character operations.  To the extent possible, they are
displayed as appropriate modifications to the graphic rendition of characters
put on the screen.
.PP
The routine \fBattrset\fR sets the current attributes of the given window to
\fIattrs\fR.  The routine \fBattroff\fR turns off the named attributes without
turning any other attributes on or off.  The routine \fBattron\fR turns on the
named attributes without affecting any others.  The routine \fBstandout\fR is
the same as \fBattron(A_STANDOUT)\fR.  The routine \fBstandend\fR is the same
as \fBattrset(A_NORMAL)\fR or \fBattrset(0)\fR, that is, it turns off all
attributes.
.PP
The \fBattrset\fR and related routines do not affect the attributes used
when erasing portions of the window.
See \fBcurs_bkgd\fR(3X) for functions which modify the attributes used for
erasing and clearing.
.PP
The routine \fBcolor_set\fR sets the current color of the given window to the
foreground/background combination described by the color_pair_number. The
parameter opts is reserved for future use, applications must supply a null
pointer.
.PP
The routine \fBwattr_get\fR returns the current attribute and color pair for
the given window; \fBattr_get\fR returns the current attribute and color pair
for \fBstdscr\fR.
The remaining \fBattr_\fR* functions operate exactly like the corresponding
\fBattr\fR* functions, except that they take arguments of type \fBattr_t\fR
rather than \fBint\fR.
.PP
The routine \fBchgat\fR changes the attributes of a given number of characters
starting at the current cursor location of \fBstdscr\fR.  It does not update
the cursor and does not perform wrapping.  A character count of -1 or greater
than the remaining window width means to change attributes all the way to the
end of the current line.  The \fBwchgat\fR function generalizes this to any
window; the \fBmvwchgat\fR function does a cursor move before acting.  In these
functions, the color argument is a color-pair index (as in the first argument
of \fIinit_pair\fR, see \fBcurs_color\fR(3X)).  The \fBopts\fR argument is not
presently used, but is reserved for the future (leave it \fBNULL\fR).
.SS Attributes
The following video attributes, defined in \fB<curses.h>\fR, can be passed to
the routines \fBattron\fR, \fBattroff\fR, and \fBattrset\fR, or OR'd with the
characters passed to \fBaddch\fR.
.PP
.TS
center ;
l l .
\fBA_NORMAL\fR	Normal display (no highlight)
\fBA_STANDOUT\fR	Best highlighting mode of the terminal.
\fBA_UNDERLINE\fR	Underlining
\fBA_REVERSE\fR	Reverse video
\fBA_BLINK\fR	Blinking
\fBA_DIM\fR	Half bright
\fBA_BOLD\fR	Extra bright or bold
\fBA_PROTECT\fR	Protected mode
\fBA_INVIS\fR	Invisible or blank mode
\fBA_ALTCHARSET\fR	Alternate character set
\fBA_CHARTEXT\fR	Bit-mask to extract a character
\fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR	Color-pair number \fIn\fR
.TE
.PP
The following macro is the reverse of \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR:
.PP
.br
\fBPAIR_NUMBER(\fR\fIattrs\fR) Returns the pair number associated
                   with the \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR attribute.
.br
.PP
The return values of many of these routines are not meaningful (they are
implemented as macro-expanded assignments and simply return their argument).
The SVr4 manual page claims (falsely) that these routines always return \fB1\fR.
.SH NOTES
Note that \fBattroff\fR, \fBwattroff\fR, \fBattron\fR, \fBwattron\fR,
\fBattrset\fR, \fBwattrset\fR, \fBstandend\fR and \fBstandout\fR may be macros.
.PP
\fBCOLOR_PAIR\fP values can only be OR'd with attributes if the pair
number is less than 256.
The alternate functions such as \fBcolor_set\fP can pass a color pair
value directly.
However, ncurses ABI 4 and 5 simply OR this value within the alternate functions.
You must use ncurses ABI 6 to support more than 256 color pairs.
.SH PORTABILITY
These functions are supported in the XSI Curses standard, Issue 4.  The
standard defined the dedicated type for highlights, \fBattr_t\fR, which is not
defined in SVr4 curses. The functions taking \fBattr_t\fR arguments are
not supported under SVr4.
.PP
The XSI Curses standard states that whether the traditional functions
\fBattron\fR/\fBattroff\fR/\fBattrset\fR can manipulate attributes other than
\fBA_BLINK\fR, \fBA_BOLD\fR, \fBA_DIM\fR, \fBA_REVERSE\fR, \fBA_STANDOUT\fR, or
\fBA_UNDERLINE\fR is "unspecified".  Under this implementation as well as
SVr4 curses, these functions correctly manipulate all other highlights
(specifically, \fBA_ALTCHARSET\fR, \fBA_PROTECT\fR, and \fBA_INVIS\fR).
.PP
XSI Curses added the new entry points, \fBattr_get\fR, \fBattr_on\fR,
\fBattr_off\fR, \fBattr_set\fR, \fBwattr_on\fR, \fBwattr_off\fR,
\fBwattr_get\fR, \fBwattr_set\fR.  These are intended to work with
a new series of highlight macros prefixed with \fBWA_\fR.
.PP
Older versions of this library did not force an update of the screen
when changing the attributes.
Use \fBtouchwin\fR to force the screen to match the updated attributes.
.PP
.TS
center ;
l l .
\fBWA_NORMAL\fR	Normal display (no highlight)
\fBWA_STANDOUT\fR	Best highlighting mode of the terminal.
\fBWA_UNDERLINE\fR	Underlining
\fBWA_REVERSE\fR	Reverse video
\fBWA_BLINK\fR	Blinking
\fBWA_DIM\fR	Half bright
\fBWA_BOLD\fR	Extra bright or bold
\fBWA_ALTCHARSET\fR	Alternate character set
.TE
.PP
The XSI curses standard specifies that each pair of corresponding \fBA_\fR
and \fBWA_\fR-using functions operates on the same current-highlight
information.
.PP
The XSI standard extended conformance level adds new highlights
\fBA_HORIZONTAL\fR, \fBA_LEFT\fR, \fBA_LOW\fR, \fBA_RIGHT\fR, \fBA_TOP\fR,
\fBA_VERTICAL\fR (and corresponding \fBWA_\fR macros for each) which this
implementation does not yet support.
.SH RETURN VALUE
All routines return the integer \fBOK\fR on success, or \fBERR\fP on failure.
.PP
X/Open does not define any error conditions.
.PP
This implementation returns an error
if the window pointer is null.
The \fBwcolor_set\fP function returns an error if the color pair parameter
is outside the range 0..COLOR_PAIRS-1.
This implementation also provides
\fBgetattrs\fR
for compatibility with older versions of curses.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_addch\fR(3X),
\fBcurs_addstr\fR(3X),
\fBcurs_bkgd\fR(3X),
\fBcurs_printw\fR(3X)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/standout.3x                                  0100644 0001750 0001750 00000025201 12566174415 023000  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        '\" t
.\"***************************************************************************
.\" Copyright (c) 1998-2006,2007 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_attr.3x,v 1.31 2007/03/17 20:30:33 tom Exp $
.TH curs_attr 3X ""
.na
.hy 0
.SH NAME
\fBattroff\fR,
\fBwattroff\fR,
\fBattron\fR,
\fBwattron\fR,
\fBattrset\fR,
\fBwattrset\fR,
\fBcolor_set\fR,
\fBwcolor_set\fR,
\fBstandend\fR,
\fBwstandend\fR,
\fBstandout\fR,
\fBwstandout\fR,
\fBattr_get\fR,
\fBwattr_get\fR,
\fBattr_off\fR,
\fBwattr_off\fR,
\fBattr_on\fR,
\fBwattr_on\fR,
\fBattr_set\fR,
\fBwattr_set\fR,
\fBchgat\fR,
\fBwchgat\fR,
\fBmvchgat\fR,
\fBmvwchgat\fR,
\fBPAIR_NUMBER\fR - \fBcurses\fR character and window attribute control routines
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.br
\fBint attroff(int attrs);\fR
.br
\fBint wattroff(WINDOW *win, int attrs);\fR
.br
\fBint attron(int attrs);\fR
.br
\fBint wattron(WINDOW *win, int attrs);\fR
.br
\fBint attrset(int attrs);\fR
.br
\fBint wattrset(WINDOW *win, int attrs);\fR
.br
\fBint color_set(short color_pair_number, void* opts);\fR
.br
\fBint wcolor_set(WINDOW *win, short color_pair_number,\fR
      \fBvoid* opts);\fR
.br
\fBint standend(void);\fR
.br
\fBint wstandend(WINDOW *win);\fR
.br
\fBint standout(void);\fR
.br
\fBint wstandout(WINDOW *win);\fR
.br
\fBint attr_get(attr_t *attrs, short *pair, void *opts);\fR
.br
\fBint wattr_get(WINDOW *win, attr_t *attrs, short *pair,\fR
       \fBvoid *opts);\fR
.br
\fBint attr_off(attr_t attrs, void *opts);\fR
.br
\fBint wattr_off(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_on(attr_t attrs, void *opts);\fR
.br
\fBint wattr_on(WINDOW *win, attr_t attrs, void *opts);\fR
.br
\fBint attr_set(attr_t attrs, short pair, void *opts);\fR
.br
\fBint wattr_set(WINDOW *win, attr_t attrs, short pair, void *opts);\fR
.br
\fBint chgat(int n, attr_t attr, short color,\fR
      \fBconst void *opts)\fR
.br
\fBint wchgat(WINDOW *win, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvchgat(int y, int x, int n, attr_t attr,\fR
      \fBshort color, const void *opts)\fR
.br
\fBint mvwchgat(WINDOW *win, int y, int x, int n,\fR
      \fBattr_t attr, short color, const void *opts)\fR
.br
.SH DESCRIPTION
These routines manipulate the current attributes of the named window.  The
current attributes of a window apply to all characters that are written into
the window with \fBwaddch\fR, \fBwaddstr\fR and \fBwprintw\fR.  Attributes are
a property of the character, and move with the character through any scrolling
and insert/delete line/character operations.  To the extent possible, they are
displayed as appropriate modifications to the graphic rendition of characters
put on the screen.
.PP
The routine \fBattrset\fR sets the current attributes of the given window to
\fIattrs\fR.  The routine \fBattroff\fR turns off the named attributes without
turning any other attributes on or off.  The routine \fBattron\fR turns on the
named attributes without affecting any others.  The routine \fBstandout\fR is
the same as \fBattron(A_STANDOUT)\fR.  The routine \fBstandend\fR is the same
as \fBattrset(A_NORMAL)\fR or \fBattrset(0)\fR, that is, it turns off all
attributes.
.PP
The \fBattrset\fR and related routines do not affect the attributes used
when erasing portions of the window.
See \fBcurs_bkgd\fR(3X) for functions which modify the attributes used for
erasing and clearing.
.PP
The routine \fBcolor_set\fR sets the current color of the given window to the
foreground/background combination described by the color_pair_number. The
parameter opts is reserved for future use, applications must supply a null
pointer.
.PP
The routine \fBwattr_get\fR returns the current attribute and color pair for
the given window; \fBattr_get\fR returns the current attribute and color pair
for \fBstdscr\fR.
The remaining \fBattr_\fR* functions operate exactly like the corresponding
\fBattr\fR* functions, except that they take arguments of type \fBattr_t\fR
rather than \fBint\fR.
.PP
The routine \fBchgat\fR changes the attributes of a given number of characters
starting at the current cursor location of \fBstdscr\fR.  It does not update
the cursor and does not perform wrapping.  A character count of -1 or greater
than the remaining window width means to change attributes all the way to the
end of the current line.  The \fBwchgat\fR function generalizes this to any
window; the \fBmvwchgat\fR function does a cursor move before acting.  In these
functions, the color argument is a color-pair index (as in the first argument
of \fIinit_pair\fR, see \fBcurs_color\fR(3X)).  The \fBopts\fR argument is not
presently used, but is reserved for the future (leave it \fBNULL\fR).
.SS Attributes
The following video attributes, defined in \fB<curses.h>\fR, can be passed to
the routines \fBattron\fR, \fBattroff\fR, and \fBattrset\fR, or OR'd with the
characters passed to \fBaddch\fR.
.PP
.TS
center ;
l l .
\fBA_NORMAL\fR	Normal display (no highlight)
\fBA_STANDOUT\fR	Best highlighting mode of the terminal.
\fBA_UNDERLINE\fR	Underlining
\fBA_REVERSE\fR	Reverse video
\fBA_BLINK\fR	Blinking
\fBA_DIM\fR	Half bright
\fBA_BOLD\fR	Extra bright or bold
\fBA_PROTECT\fR	Protected mode
\fBA_INVIS\fR	Invisible or blank mode
\fBA_ALTCHARSET\fR	Alternate character set
\fBA_CHARTEXT\fR	Bit-mask to extract a character
\fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR	Color-pair number \fIn\fR
.TE
.PP
The following macro is the reverse of \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR:
.PP
.br
\fBPAIR_NUMBER(\fR\fIattrs\fR) Returns the pair number associated
                   with the \fBCOLOR_PAIR(\fR\fIn\fR\fB)\fR attribute.
.br
.PP
The return values of many of these routines are not meaningful (they are
implemented as macro-expanded assignments and simply return their argument).
The SVr4 manual page claims (falsely) that these routines always return \fB1\fR.
.SH NOTES
Note that \fBattroff\fR, \fBwattroff\fR, \fBattron\fR, \fBwattron\fR,
\fBattrset\fR, \fBwattrset\fR, \fBstandend\fR and \fBstandout\fR may be macros.
.PP
\fBCOLOR_PAIR\fP values can only be OR'd with attributes if the pair
number is less than 256.
The alternate functions such as \fBcolor_set\fP can pass a color pair
value directly.
However, ncurses ABI 4 and 5 simply OR this value within the alternate functions.
You must use ncurses ABI 6 to support more than 256 color pairs.
.SH PORTABILITY
These functions are supported in the XSI Curses standard, Issue 4.  The
standard defined the dedicated type for highlights, \fBattr_t\fR, which is not
defined in SVr4 curses. The functions taking \fBattr_t\fR arguments are
not supported under SVr4.
.PP
The XSI Curses standard states that whether the traditional functions
\fBattron\fR/\fBattroff\fR/\fBattrset\fR can manipulate attributes other than
\fBA_BLINK\fR, \fBA_BOLD\fR, \fBA_DIM\fR, \fBA_REVERSE\fR, \fBA_STANDOUT\fR, or
\fBA_UNDERLINE\fR is "unspecified".  Under this implementation as well as
SVr4 curses, these functions correctly manipulate all other highlights
(specifically, \fBA_ALTCHARSET\fR, \fBA_PROTECT\fR, and \fBA_INVIS\fR).
.PP
XSI Curses added the new entry points, \fBattr_get\fR, \fBattr_on\fR,
\fBattr_off\fR, \fBattr_set\fR, \fBwattr_on\fR, \fBwattr_off\fR,
\fBwattr_get\fR, \fBwattr_set\fR.  These are intended to work with
a new series of highlight macros prefixed with \fBWA_\fR.
.PP
Older versions of this library did not force an update of the screen
when changing the attributes.
Use \fBtouchwin\fR to force the screen to match the updated attributes.
.PP
.TS
center ;
l l .
\fBWA_NORMAL\fR	Normal display (no highlight)
\fBWA_STANDOUT\fR	Best highlighting mode of the terminal.
\fBWA_UNDERLINE\fR	Underlining
\fBWA_REVERSE\fR	Reverse video
\fBWA_BLINK\fR	Blinking
\fBWA_DIM\fR	Half bright
\fBWA_BOLD\fR	Extra bright or bold
\fBWA_ALTCHARSET\fR	Alternate character set
.TE
.PP
The XSI curses standard specifies that each pair of corresponding \fBA_\fR
and \fBWA_\fR-using functions operates on the same current-highlight
information.
.PP
The XSI standard extended conformance level adds new highlights
\fBA_HORIZONTAL\fR, \fBA_LEFT\fR, \fBA_LOW\fR, \fBA_RIGHT\fR, \fBA_TOP\fR,
\fBA_VERTICAL\fR (and corresponding \fBWA_\fR macros for each) which this
implementation does not yet support.
.SH RETURN VALUE
All routines return the integer \fBOK\fR on success, or \fBERR\fP on failure.
.PP
X/Open does not define any error conditions.
.PP
This implementation returns an error
if the window pointer is null.
The \fBwcolor_set\fP function returns an error if the color pair parameter
is outside the range 0..COLOR_PAIRS-1.
This implementation also provides
\fBgetattrs\fR
for compatibility with older versions of curses.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_addch\fR(3X),
\fBcurs_addstr\fR(3X),
\fBcurs_bkgd\fR(3X),
\fBcurs_printw\fR(3X)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/start_color.3x                               0100644 0001750 0001750 00000025775 12566174416 023513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"***************************************************************************
.\" Copyright (c) 1998-2004,2005 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_color.3x,v 1.28 2005/12/18 00:00:37 tom Exp $
.TH curs_color 3X ""
.na
.hy 0
.SH NAME
\fBstart_color\fR,
\fBinit_pair\fR,
\fBinit_color\fR,
\fBhas_colors\fR,
\fBcan_change_color\fR,
\fBcolor_content\fR,
\fBpair_content\fR,
\fBCOLOR_PAIR\fR - \fBcurses\fR color manipulation routines
.ad
.hy
.SH SYNOPSIS
\fB# include <curses.h>\fR
.br
\fBint start_color(void);\fR
.br
\fBint init_pair(short pair, short f, short b);\fR
.br
\fBint init_color(short color, short r, short g, short b);\fR
.br
\fBbool has_colors(void);\fR
.br
\fBbool can_change_color(void);\fR
.br
\fBint color_content(short color, short *r, short *g, short *b);\fR
.br
\fBint pair_content(short pair, short *f, short *b);\fR
.br
.SH DESCRIPTION
.SS Overview
\fBcurses\fR support color attributes on terminals with that capability.  To
use these routines \fBstart_color\fR must be called, usually right after
\fBinitscr\fR.  Colors are always used in pairs (referred to as color-pairs).
A color-pair consists of a foreground color (for characters) and a background
color (for the blank field on which the characters are displayed).  A
programmer initializes a color-pair with the routine \fBinit_pair\fR.  After it
has been initialized, \fBCOLOR_PAIR\fR(\fIn\fR), a macro defined in
\fB<curses.h>\fR, can be used as a new video attribute.
.PP
If a terminal is capable of redefining colors, the programmer can use the
routine \fBinit_color\fR to change the definition of a color.  The routines
\fBhas_colors\fR and \fBcan_change_color\fR return \fBTRUE\fR or \fBFALSE\fR,
depending on whether the terminal has color capabilities and whether the
programmer can change the colors.  The routine \fBcolor_content\fR allows a
programmer to extract the amounts of red, green, and blue components in an
initialized color.  The routine \fBpair_content\fR allows a programmer to find
out how a given color-pair is currently defined.
.SS Routine Descriptions
The \fBstart_color\fR routine requires no arguments.  It must be
called if the programmer wants to use colors, and before any other
color manipulation routine is called.  It is good practice to call
this routine right after \fBinitscr\fR.  \fBstart_color\fR initializes
eight basic colors (black, red, green, yellow, blue, magenta, cyan,
and white), and two global variables, \fBCOLORS\fR and
\fBCOLOR_PAIRS\fR (respectively defining the maximum number of colors
and color-pairs the terminal can support).  It also restores the
colors on the terminal to the values they had when the terminal was
just turned on.
.PP
The \fBinit_pair\fR routine changes the definition of a color-pair.  It takes
three arguments: the number of the color-pair to be changed, the foreground
color number, and the background color number.
For portable applications:
.TP 5
-
The value of the first argument
must be between \fB1\fR and \fBCOLOR_PAIRS-1\fR.
.TP 5
-
The value of the second and
third arguments must be between 0 and \fBCOLORS\fR.
Color pair 0 is assumed to be white on black,
but is actually whatever the terminal implements before color is initialized.
It cannot be modified by the application.
.PP
If the color-pair was previously
initialized, the screen is refreshed and all occurrences of that color-pair
are changed to the new definition.
.PP
As an extension, ncurses allows you to set color pair 0 via
the \fBassume_default_colors\fR routine, or to specify the use of
default colors (color number \fB-1\fR) if you first invoke the
\fBuse_default_colors\fR routine.
.PP
The \fBinit_color\fR routine changes the definition of a color.  It takes four
arguments: the number of the color to be changed followed by three RGB values
(for the amounts of red, green, and blue components).  The value of the first
argument must be between \fB0\fR and \fBCOLORS\fR.  (See the section
\fBColors\fR for the default color index.)  Each of the last three arguments
must be a value between 0 and 1000.  When \fBinit_color\fR is used, all
occurrences of that color on the screen immediately change to the new
definition.
.PP
The \fBhas_colors\fR routine requires no arguments.  It returns \fBTRUE\fR if
the terminal can manipulate colors; otherwise, it returns \fBFALSE\fR.  This
routine facilitates writing terminal-independent programs.  For example, a
programmer can use it to decide whether to use color or some other video
attribute.
.PP
The \fBcan_change_color\fR routine requires no arguments.  It returns
\fBTRUE\fR if the terminal supports colors and can change their definitions;
other, it returns \fBFALSE\fR.  This routine facilitates writing
terminal-independent programs.
.PP
The \fBcolor_content\fR routine gives programmers a way to find the intensity
of the red, green, and blue (RGB) components in a color.  It requires four
arguments: the color number, and three addresses of \fBshort\fRs for storing
the information about the amounts of red, green, and blue components in the
given color.  The value of the first argument must be between 0 and
\fBCOLORS\fR.  The values that are stored at the addresses pointed to by the
last three arguments are between 0 (no component) and 1000 (maximum amount of
component).
.PP
The \fBpair_content\fR routine allows programmers to find out what colors a
given color-pair consists of.  It requires three arguments: the color-pair
number, and two addresses of \fBshort\fRs for storing the foreground and the
background color numbers.  The value of the first argument must be between 1
and \fBCOLOR_PAIRS-1\fR.  The values that are stored at the addresses pointed
to by the second and third arguments are between 0 and \fBCOLORS\fR.
.SS Colors
In \fB<curses.h>\fR the following macros are defined.  These are the default
colors.  \fBcurses\fR also assumes that \fBCOLOR_BLACK\fR is the default
background color for all terminals.
.PP
.nf
      \fBCOLOR_BLACK\fR
      \fBCOLOR_RED\fR
      \fBCOLOR_GREEN\fR
      \fBCOLOR_YELLOW\fR
      \fBCOLOR_BLUE\fR
      \fBCOLOR_MAGENTA\fR
      \fBCOLOR_CYAN\fR
      \fBCOLOR_WHITE\fR
.fi
.SH RETURN VALUE
The routines \fBcan_change_color()\fR and \fBhas_colors()\fR return \fBTRUE\fR
or \fBFALSE\fR.
.PP
All other routines return the integer \fBERR\fR upon failure and an \fBOK\fR
(SVr4 specifies only "an integer value other than \fBERR\fR") upon successful
completion.
.PP
X/Open defines no error conditions.
This implementation will return \fBERR\fR on attempts to
use color values outside the range 0 to COLORS-1
(except for the default colors extension),
or use color pairs outside the range 0 to COLOR_PAIR-1.
Color values used in \fBinit_color\fP must be in the range 0 to 1000.
An error is returned from all functions
if the terminal has not been initialized.
An error is returned from secondary functions such as \fBinit_pair\fP
if \fBstart_color\fP was not called.
.RS
.TP 5
\fBinit_color\fP
returns an error if the terminal does not support
this feature, e.g., if the \fIinitialize_color\fP capability is absent
from the terminal description.
.TP 5
\fBstart_color\fP
returns an error
If the color table cannot be allocated.
.RE
.SH NOTES
In the \fIncurses\fR implementation, there is a separate color activation flag,
color palette, color pairs table, and associated COLORS and COLOR_PAIRS counts
for each screen; the \fBstart_color\fR function only affects the current
screen.  The SVr4/XSI interface is not really designed with this in mind, and
historical implementations may use a single shared color palette.
.PP
Note that setting an implicit background color via a color pair affects only
character cells that a character write operation explicitly touches.  To change
the background color used when parts of a window are blanked by erasing or
scrolling operations, see \fBcurs_bkgd\fR(3X).
.PP
Several caveats apply on 386 and 486 machines with VGA-compatible graphics:
.TP 5
-
COLOR_YELLOW is actually brown.  To get yellow, use COLOR_YELLOW combined with
the \fBA_BOLD\fR attribute.
.TP 5
-
The A_BLINK attribute should in theory cause the background to go bright.  This
often fails to work, and even some cards for which it mostly works (such as the
Paradise and compatibles) do the wrong thing when you try to set a bright
"yellow" background (you get a blinking yellow foreground instead).
.TP 5
-
Color RGB values are not settable.
.SH PORTABILITY
This implementation satisfies XSI Curses's minimum maximums
for \fBCOLORS\fR and \fBCOLOR_PAIRS\fR.
.PP
The \fBinit_pair\fP routine accepts negative values of foreground
and background color to support the \fBuse_default_colors\fP extension,
but only if that routine has been first invoked.
.PP
The assumption that \fBCOLOR_BLACK\fR is the default
background color for all terminals can be modified using the
\fBassume_default_colors\fP extension.
.PP
This implementation checks the pointers,
e.g., for the values returned by
\fBcolor_content\fP and \fBpair_content\fP,
and will treat those as optional parameters when null.
.SH SEE ALSO
\fBcurses\fR(3X),
\fBcurs_initscr\fR(3X),
\fBcurs_attr\fR(3X),
\fBdefault_colors\fR(3X)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/statvfs.3                                    0100644 0001750 0001750 00000012767 12566166145 022457  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"
.\" Copyright 2002 Massachusetts Institute of Technology
.\"
.\" Permission to use, copy, modify, and distribute this software and
.\" its documentation for any purpose and without fee is hereby
.\" granted, provided that both the above copyright notice and this
.\" permission notice appear in all copies, that both the above
.\" copyright notice and this permission notice appear in all
.\" supporting documentation, and that the name of M.I.T. not be used
.\" in advertising or publicity pertaining to distribution of the
.\" software without specific, written prior permission.  M.I.T. makes
.\" no representations about the suitability of this software for any
.\" purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" THIS SOFTWARE IS PROVIDED BY M.I.T. ``AS IS''.  M.I.T. DISCLAIMS
.\" ALL EXPRESS OR IMPLIED WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT
.\" SHALL M.I.T. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/gen/statvfs.3,v 1.7 2003/06/08 10:01:51 charnier Exp $
.\"
.Dd July 13, 2002
.Dt STATVFS 3
.Os
.Sh NAME
.Nm fstatvfs ,
.Nm statvfs
.Nd retrieve file system information
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In sys/statvfs.h
.Ft int
.Fo fstatvfs
.Fa "int fildes"
.Fa "struct statvfs *buf"
.Fc
.Ft int
.Fo statvfs
.Fa "const char *restrict path"
.Fa "struct statvfs *restrict buf"
.Fc
.Sh DESCRIPTION
The
.Fn statvfs
and
.Fn fstatvfs
functions attempt to fill the structure pointed to by
.Fa buf
with file system
statistics, but portable applications must not depend on this.
Applications must pass a pathname or file descriptor which refers to a
file on the file system in which they are interested.
.Pp
The
.Vt statvfs
structure contains the following members:
.Bl -tag -offset indent -width ".Va f_namemax"
.It Va f_namemax
The maximum length in bytes of a file name on this file system.
Applications should use
.Xr pathconf 2
instead.
.It Va f_fsid
Not meaningful in this implementation.
.It Va f_frsize
The size in bytes of the minimum unit of allocation on this
file system.
(This corresponds to the
.Va f_bsize
member of
.Vt "struct statfs" . )
.It Va f_bsize
The preferred length of I/O requests for files on this file system.
(Corresponds to the
.Va f_iosize
member of
.Vt "struct statfs" . )
.It Va f_flag
Flags describing mount options for this file system; see below.
.El
.Pp
In addition, there are three members of type
.Vt fsfilcnt_t ,
which represent counts of file serial numbers
.Em ( i.e. ,
inodes); these are named
.Va f_files , f_favail ,
and
.Va f_ffree ,
and represent the number of file serial numbers which exist in total,
are available to unprivileged processes, and are available to
privileged processes, respectively.
Likewise, the members
.Va f_blocks , f_bavail ,
and
.Va f_bfree
(all of type
.Vt fsblkcnt_t )
represent the respective allocation-block counts.
.Pp
There are two flags defined for the
.Va f_flag
member:
.Bl -tag -offset indent -width ".Dv ST_NOSUID"
.It Dv ST_RDONLY
The file system is mounted read-only.
.It Dv ST_NOSUID
The semantics of the
.Dv S_ISUID
and
.Dv S_ISGID
file mode bits
are not supported by, or are disabled on, this file system.
.El
.Sh IMPLEMENTATION NOTES
The
.Fn statvfs
and
.Fn fstatvfs
functions are implemented as wrappers around the
.Fn statfs
and
.Fn fstatfs
functions, respectively.
Not all the information provided by those functions is made available
through this interface.
.Sh RETURN VALUES
.Rv -std statvfs fstatvfs
.Sh ERRORS
The
.Fn statvfs
function fails if one or more of the following are true:
.Bl -tag -width Er
.It Bq Er EACCES
Search permission is denied for a component of the path prefix of
.Fa path .
.It Bq Er EFAULT
.Fa Buf
or
.Fa path
points to an invalid address.
.It Bq Er EIO
An
.Tn I/O
error occurred while reading from or writing to the file system.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating
.Fa path .
.It Bq Er ENAMETOOLONG
The length of a component of
.Fa path
exceeds 
.Dv {NAME_MAX}
characters, or the length of
.Fa path
exceeds 
.Dv {PATH_MAX}
characters.
.It Bq Er ENOENT
The file referred to by
.Fa path
does not exist.
.It Bq Er ENOTDIR
A component of the path prefix of
.Fa Path
is not a directory.
.El
.Pp
The
.Fn fstatvfs
functions fails if one or more of the following are true:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa fildes
is not a valid open file descriptor.
.It Bq Er EFAULT
.Fa Buf
points to an invalid address.
.It Bq Er EIO
An
.Tn I/O
error occurred while reading from or writing to the file system.
.El
.Sh SEE ALSO
.Xr statfs 2
.Sh STANDARDS
The
.Fn statvfs
and
.Fn fstatvfs
functions conform to
.St -p1003.1-2001 .
As standardized, portable applications cannot depend on these functions
returning any valid information at all.
This implementation attempts to provide as much useful information as
is provided by the underlying file system, subject to the limitations
of the specified data types.
.Sh AUTHORS
The
.Fn statvfs
and
.Fn fstatvfs
manual page was originally written by
.An Garrett Wollman Aq wollman@FreeBSD.org .
         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/stdarg.3                                     0100644 0001750 0001750 00000014524 12566166145 022242  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)stdarg.3	8.1 (Berkeley) 6/5/93
.\" $FreeBSD: src/share/man/man3/stdarg.3,v 1.15 2005/01/21 08:36:36 ru Exp $
.\"
.Dd October 25, 2002
.Dt STDARG 3
.Os
.Sh NAME
.Nm stdarg
.Nd variable argument lists
.Sh SYNOPSIS
.In stdarg.h
.Ft void
.Fn va_start "va_list ap" last
.Ft type
.Fn va_arg "va_list ap" type
.Ft void
.Fn va_copy "va_list dest" "va_list src"
.Ft void
.Fn va_end "va_list ap"
.Sh DESCRIPTION
A function may be called with a varying number of arguments of varying
types.
The include file
.In stdarg.h
declares a type
.Pq Em va_list
and defines three macros for stepping
through a list of arguments whose number and types are not known to
the called function.
.Pp
The called function must declare an object of type
.Em va_list
which is used by the macros
.Fn va_start ,
.Fn va_arg ,
.Fn va_copy ,
and
.Fn va_end .
.Pp
The
.Fn va_start
macro must be called first, and it initializes
.Fa ap ,
which can be passed to
.Fn va_arg
for each argument to be processed.
Calling
.Fn va_end
signals that there are no further arguments, and causes
.Fa ap
to be invalidated.
Note that each call to
.Fn va_start
must be matched by a call to
.Fn va_end ,
from within the same function.
.Pp
The parameter
.Fa last
is the name of the last parameter before the variable argument list,
i.e., the last parameter of which the calling function knows the type.
.Pp
Because the address of this parameter is used in the
.Fn va_start
macro, it should not be declared as a register variable, or as a
function or an array type.
.Pp
The
.Fn va_arg
macro expands to an expression that has the type and value of the next
argument in the call.
The parameter
.Fa ap
is the
.Em va_list Fa ap
initialized by
.Fn va_start .
Each call to
.Fn va_arg
modifies
.Fa ap
so that the next call returns the next argument.
The parameter
.Fa type
is a type name specified so that the type of a pointer to an
object that has the specified type can be obtained simply by
adding a *
to
.Fa type .
.Pp
If there is no next argument, or if
.Fa type
is not compatible with the type of the actual next argument
(as promoted according to the default argument promotions),
random errors will occur.
.Pp
The first use of the
.Fn va_arg
macro after that of the
.Fn va_start
macro returns the argument after
.Fa last .
Successive invocations return the values of the remaining
arguments.
.Pp
The
.Fn va_copy
macro copies the state of the variable argument list, 
.Fa src ,
previously initialized by
.Fn va_start ,
to the variable argument list,
.Fa dest ,
which must not have been previously initialized by
.Fn va_start ,
without an intervening call to
.Fn va_end .
The state preserved in
.Fa dest
is equivalent to calling
.Fn va_start
and
.Fn va_arg
on
.Fa dest
in the same way as was used on
.Fa src .
The copied variable argument list can subsequently be passed to
.Fn va_arg ,
and must finally be passed to
.Fn va_end
when through with it.
.Pp
After a variable argument list is invalidated by
.Fn va_end ,
it can be reinitialized with
.Fn va_start
or made a copy of another variable argument list with
.Fn va_copy .
.Sh EXAMPLES
The function
.Em foo
takes a string of format characters and prints out the argument
associated with each format character based on the type.
.Bd -literal -offset indent
void foo(char *fmt, ...)
{
	va_list ap, ap2;
	int d;
	char c, *s;

	va_start(ap, fmt);
	va_copy(ap2, ap);
	while (*fmt)
		switch(*fmt++) {
		case 's':			/* string */
			s = va_arg(ap, char *);
			printf("string %s\en", s);
			break;
		case 'd':			/* int */
			d = va_arg(ap, int);
			printf("int %d\en", d);
			break;
		case 'c':			/* char */
			/* Note: char is promoted to int. */
			c = va_arg(ap, int);
			printf("char %c\en", c);
			break;
		}
	va_end(ap);
	...
	/* use ap2 to iterate over the arguments again */
	...
	va_end(ap2);
}
.Ed
.Sh COMPATIBILITY
These macros are
.Em not
compatible with the historic macros they replace.
A backward compatible version can be found in the include
file
.In varargs.h .
.Sh STANDARDS
The
.Fn va_start ,
.Fn va_arg ,
.Fn va_copy ,
and
.Fn va_end
macros conform to
.St -isoC-99 .
.Sh BUGS
Unlike the
.Em varargs
macros, the
.Nm
macros do not permit programmers to
code a function with no fixed arguments.
This problem generates work mainly when converting
.Em varargs
code to
.Nm
code,
but it also creates difficulties for variadic functions that
wish to pass all of their arguments on to a function
that takes a
.Em va_list
argument, such as
.Xr vfprintf 3 .
                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/stdio.3                                      0100644 0001750 0001750 00000026167 12566166145 022106  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)stdio.3	8.7 (Berkeley) 4/19/94
.\" $FreeBSD: src/lib/libc/stdio/stdio.3,v 1.30 2009/03/04 03:38:51 das Exp $
.\"
.Dd March 3, 2009
.Dt STDIO 3
.Os
.Sh NAME
.Nm stdio
.Nd standard input/output library functions
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdio.h
.Vt FILE *stdin ;
.Vt FILE *stdout ;
.Vt FILE *stderr ;
.Pp
Note:
The current implementation does not allow these variables
to be evaluated at C compile/link time.
That is, a runtime calculation must be performed, such as:
.Bd -literal -offset indent
#include <stdio.h>

static FILE *var;

int main() {
    var = stdout;
}
.Ed
.Sh DESCRIPTION
The standard
.Tn I/O
library provides a simple and efficient buffered stream
.Tn I/O
interface.
Input and output is mapped into logical data streams
and the physical
.Tn I/O
characteristics are concealed.
The functions and macros are listed
below; more information is available from the individual man pages.
.Pp
A stream is associated with an external file (which may be a physical
device) by
.Em opening
a file, which may involve creating a new file.
Creating an
existing file causes its former contents to be discarded.
If a file can support positioning requests (such as a disk file, as opposed
to a terminal) then a
.Em file position indicator
associated with the stream is positioned at the start of the file (byte
zero), unless the file is opened with append mode.
If append mode
is used, the position indicator will be placed at the end-of-file.
The position indicator is maintained by subsequent reads, writes
and positioning requests.
All input occurs as if the characters
were read by successive calls to the
.Xr fgetc 3
function; all output takes place as if all characters were
written by successive calls to the
.Xr fputc 3
function.
.Pp
A file is disassociated from a stream by
.Em closing
the file.
Output streams are flushed (any unwritten buffer contents are transferred
to the host environment) before the stream is disassociated from the file.
The value of a pointer to a
.Dv FILE
object is indeterminate (garbage) after a file is closed.
.Pp
A file may be subsequently reopened, by the same or another program
execution, and its contents reclaimed or modified (if it can be repositioned
at the start).
If the main function returns to its original caller, or
the
.Xr exit 3
function is called, all open files are closed (hence all output
streams are flushed) before program termination.
Other methods
of program termination may not close files properly and hence
buffered output may be lost.
In particular,
.Xr _exit 2
does not flush stdio files.
Neither does an exit due to a signal.
Buffers are flushed by
.Xr abort 3
as required by POSIX, although previous implementations did not.
.Pp
This implementation makes no distinction between
.Dq text
and
.Dq binary
streams.
In effect, all streams are binary.
No translation is performed and no extra padding appears on any stream.
.Pp
At program startup, three streams are predefined and need not be
opened explicitly:
.Bl -bullet -compact -offset indent
.It
.Em standard input
(for reading conventional input),
.It
.Em standard output
(for writing conventional output), and
.It
.Em standard error
(for writing diagnostic output).
.El
These streams are abbreviated
.Dv stdin , stdout
and
.Dv stderr .
Initially, the standard error stream
is unbuffered; the standard input and output streams are
fully buffered if and only if the streams do not refer to
an interactive or
.Dq terminal
device, as determined by the
.Xr isatty 3
function.
In fact,
.Em all
freshly-opened streams that refer to terminal devices
default to line buffering, and
pending output to such streams is written automatically
whenever such an input stream is read.
Note that this applies only to
.Dq "true reads" ;
if the read request can be satisfied by existing buffered data,
no automatic flush will occur.
In these cases,
or when a large amount of computation is done after printing
part of a line on an output terminal, it is necessary to
.Xr fflush 3
the standard output before going off and computing so that the output
will appear.
Alternatively, these defaults may be modified via the
.Xr setvbuf 3
function.
.Pp
The
.Nm
library is a part of the library
.Nm libc
and routines are automatically loaded as needed by the C compiler.
The
.Tn SYNOPSIS
sections of the following manual pages indicate which include files
are to be used, what the compiler declaration for the function
looks like and which external variables are of interest.
.Pp
The following are defined as macros;
these names may not be re-used
without first removing their current definitions with
.Ic #undef :
.Dv BUFSIZ ,
.Dv EOF ,
.Dv FILENAME_MAX ,
.Dv FOPEN_MAX ,
.Dv L_ctermid ,
.Dv L_cuserid ,
.Dv L_tmpnam ,
.Dv NULL ,
.Dv P_tmpdir ,
.Dv SEEK_CUR ,
.Dv SEEK_END ,
.Dv SEEK_SET ,
.Dv TMP_MAX ,
.Dv clearerr ,
.Dv clearerr_unlocked ,
.Dv feof ,
.Dv feof_unlocked ,
.Dv ferror ,
.Dv ferror_unlocked ,
.Dv fileno ,
.Dv fileno_unlocked ,
.Dv fropen ,
.Dv fwopen ,
.Dv getc ,
.Dv getc_unlocked ,
.Dv getchar ,
.Dv getchar_unlocked ,
.Dv putc ,
.Dv putc_unlocked ,
.Dv putchar ,
.Dv putchar_unlocked ,
.Dv stderr ,
.Dv stdin
and
.Dv stdout .
Function versions of the macro functions
.Dv clearerr ,
.Dv clearerr_unlocked ,
.Dv feof ,
.Dv feof_unlocked ,
.Dv ferror ,
.Dv ferror_unlocked ,
.Dv fileno ,
.Dv fileno_unlocked ,
.Dv getc ,
.Dv getc_unlocked ,
.Dv getchar ,
.Dv getchar_unlocked ,
.Dv putc ,
.Dv putc_unlocked ,
.Dv putchar ,
and
.Dv putchar_unlocked
exist and will be used if the macro
definitions are explicitly removed.
.Sh LEGACY SYNOPSIS
The -D_NONSTD_SOURCE flag can be used
to allow stdin, stdout, and/or stderr
to be evaluated at compile/link time, as:
.Bd -literal -offset indent
#include <stdio.h>

static FILE *var = stdout;
.Ed
.Sh SEE ALSO
.Xr close 2 ,
.Xr open 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr compat 5
.Sh STANDARDS
The
.Nm
library conforms to
.St -isoC-99 .
.Sh LIST OF FUNCTIONS
.Bl -column "Description"
.It Sy "Function	Description"
.It "asprintf	formatted output conversion"
.It ""
.It "clearerr	check and reset stream status"
.It ""
.It "fclose	close a stream"
.It "fdopen	stream open functions"
.It "feof	check and reset stream status"
.It "ferror	check and reset stream status"
.It "fflush	flush a stream"
.It "fgetc	get next character or word from input stream"
.It "fgetln	get a line from a stream"
.It "fgetpos	reposition a stream"
.It "fgets	get a line from a stream"
.It "fgetwc	get next wide character from input stream"
.It "fgetws	get a line of wide characters from a stream"
.It "fileno	check and reset stream status"
.It "fopen	stream open functions"
.It "fprintf	formatted output conversion"
.It "fpurge	flush a stream"
.It "fputc	output a character or word to a stream"
.It "fputs	output a line to a stream"
.It "fputwc	output a wide character to a stream"
.It "fputws	output a line of wide characters to a stream"
.It "fread	binary stream input/output"
.It "freopen	stream open functions"
.It "fropen	open a stream"
.It "fscanf	input format conversion"
.It "fseek	reposition a stream"
.It "fsetpos	reposition a stream"
.It "ftell	reposition a stream"
.It "funopen	open a stream"
.It "fwide	set/get orientation of stream"
.It "fwopen	open a stream"
.It "fwprintf	formatted wide character output conversion"
.It "fwrite	binary stream input/output"
.It ""
.It "getc	get next character or word from input stream"
.It "getchar	get next character or word from input stream"
.It "getdelim	get a line from a stream"
.It "getline	get a line from a stream"
.It "gets	get a line from a stream"
.It "getw	get next character or word from input stream"
.It "getwc	get next wide character from input stream"
.It "getwchar	get next wide character from input stream"
.It ""
.It "mkdtemp	create unique temporary directory"
.It "mkstemp	create unique temporary file"
.It "mktemp	create unique temporary file"
.It ""
.It "perror	system error messages"
.It "printf	formatted output conversion"
.It "putc	output a character or word to a stream"
.It "putchar	output a character or word to a stream"
.It "puts	output a line to a stream"
.It "putw	output a character or word to a stream"
.It "putwc	output a wide character to a stream"
.It "putwchar	output a wide character to a stream"
.It ""
.It "remove	remove directory entry"
.It "rewind	reposition a stream"
.It ""
.It "scanf	input format conversion"
.It "setbuf	stream buffering operations"
.It "setbuffer	stream buffering operations"
.It "setlinebuf	stream buffering operations"
.It "setvbuf	stream buffering operations"
.It "snprintf	formatted output conversion"
.It "sprintf	formatted output conversion"
.It "sscanf	input format conversion"
.It "strerror	system error messages"
.It "swprintf	formatted wide character output conversion"
.It "sys_errlist	system error messages"
.It "sys_nerr	system error messages"
.It ""
.It "tempnam	temporary file routines"
.It "tmpfile	temporary file routines"
.It "tmpnam	temporary file routines"
.It ""
.It "ungetc	un-get character from input stream"
.It "ungetwc	un-get wide character from input stream"
.It ""
.It "vasprintf	formatted output conversion"
.It "vfprintf	formatted output conversion"
.It "vfscanf	input format conversion"
.It "vfwprintf	formatted wide character output conversion"
.It "vprintf	formatted output conversion"
.It "vscanf	input format conversion"
.It "vsnprintf	formatted output conversion"
.It "vsprintf	formatted output conversion"
.It "vsscanf	input format conversion"
.It "vswprintf	formatted wide character output conversion"
.It "vwprintf	formatted wide character output conversion"
.It ""
.It "wprintf	formatted wide character output conversion"
.El
.Sh BUGS
The standard buffered functions do not interact well with certain other
library and system functions, especially
.Xr vfork 2 .
                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/stpcpy.3                                     0120777 0001750 0001750 00000000000 12620245063 023665  2strcpy.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/stpncpy.3                                    0120777 0001750 0001750 00000000000 12620245063 024043  2strcpy.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcasecmp.3                                 0100644 0001750 0001750 00000006736 12566166145 023130  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcasecmp.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/string/strcasecmp.3,v 1.13 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd June 9, 1993
.Dt STRCASECMP 3
.Os
.Sh NAME
.Nm strcasecmp ,
.Nm strcasecmp_l ,
.Nm strncasecmp ,
.Nm strncasecmp_l
.Nd compare strings, ignoring case
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In strings.h
.Ft int
.Fo strcasecmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft int
.Fo strncasecmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "size_t n"
.Fc
.In strings.h
.In xlocale.h
.Ft int
.Fo strcasecmp_l
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "locale_t loc"
.Fc
.Ft int
.Fo strncasecmp_l
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "size_t n"
.Fa "locale_t loc"
.Fc
.Sh DESCRIPTION
The
.Fn strcasecmp
and
.Fn strncasecmp
functions
compare the null-terminated strings
.Fa s1
and
.Fa s2 .
.Pp
The
.Fn strncasecmp
compares at most
.Fa n
characters.
.Pp
Although the
.Fn strcasecmp
and
.Fn strncasecmp
functions use the current locale, the
.Fn strcasecmp_l
and
.Fn strncasecmp_l
functions may be passed locales directly. See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
The
.Fn strcasecmp
and
.Fn strncasecmp
return an integer greater than, equal to, or less than 0,
according as
.Fa s1
is lexicographically greater than, equal to, or less than
.Fa s2
after translation of each corresponding character to lower-case.
The strings themselves are not modified.
The comparison is done using unsigned characters, so that
.Sq Li \e200
is greater than
.Ql \e0 .
.Sh SEE ALSO
.Xr bcmp 3 ,
.Xr memcmp 3 ,
.Xr strcmp 3 ,
.Xr strcoll 3 ,
.Xr strxfrm 3 ,
.Xr tolower 3 ,
.Xr xlocale 3
.Sh HISTORY
The
.Fn strcasecmp
and
.Fn strncasecmp
functions first appeared in
.Bx 4.4 .
Their prototypes existed previously in
.In string.h
before they were moved to
.In strings.h
for
.St -p1003.1-2001
compliance.
                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcasecmp_l.3                               0120777 0001750 0001750 00000000000 12620245063 025642  2strcasecmp.3                                                                                        ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcasestr.3                                 0120777 0001750 0001750 00000000000 12620245063 024555  2strstr.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcasestr_l.3                               0120777 0001750 0001750 00000000000 12620245063 025070  2strstr.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcat.3                                     0100644 0001750 0001750 00000010510 12566166145 022245  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcat.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strcat.3,v 1.17 2009/12/01 07:28:56 brueffer Exp $
.\"
.Dd December 1, 2009
.Dt STRCAT 3
.Os
.Sh NAME
.Nm strcat ,
.Nm strncat
.Nd concatenate strings
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fo strcat
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fc
.Ft char *
.Fo strncat
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fa "size_t n"
.Fc
.Sh DESCRIPTION
The
.Fn strcat
and
.Fn strncat
functions
append a copy of the null-terminated string
.Fa s2
to the end of the null-terminated string
.Fa s1 ,
then add a terminating
.Ql \e0 .
The string
.Fa s1
must have sufficient space to hold the result.
.Pp
The
.Fn strncat
function
appends not more than
.Fa n
characters from
.Fa s2 ,
and then adds a terminating
.Ql \e0 .
.Pp
The source and destination strings should not overlap, as the
behavior is undefined.
.Sh RETURN VALUES
The
.Fn strcat
and
.Fn strncat
functions
return the pointer
.Fa s1 .
.Sh SECURITY CONSIDERATIONS
The
.Fn strcat
function is easily misused in a manner
which enables malicious users to arbitrarily change
a running program's functionality through a buffer overflow attack.
(See
the FSA.)
.Pp
Avoid using
.Fn strcat .
Instead, use
.Fn strncat
or
.Fn strlcat
and ensure that no more characters are copied to the destination buffer
than it can hold.
.Pp
Note that
.Fn strncat
can also be problematic.
It may be a security concern for a string to be truncated at all.
Since the truncated string will not be as long as the original,
it may refer to a completely different resource
and usage of the truncated resource
could result in very incorrect behavior.
Example:
.Bd -literal
void
foo(const char *arbitrary_string)
{
	char onstack[8] = "";

#if defined(BAD)
	/*
	 * This first strcat is bad behavior.  Do not use strcat!
	 */
	(void)strcat(onstack, arbitrary_string);	/* BAD! */
#elif defined(BETTER)
	/*
	 * The following two lines demonstrate better use of
	 * strncat().
	 */
	(void)strncat(onstack, arbitrary_string,
	    sizeof(onstack) - strlen(onstack) - 1);
#elif defined(BEST)
	/*
	 * These lines are even more robust due to testing for
	 * truncation.
	 */
	if (strlen(arbitrary_string) + 1 >
	    sizeof(onstack) - strlen(onstack))
		err(1, "onstack would be truncated");
	(void)strncat(onstack, arbitrary_string,
	    sizeof(onstack) - strlen(onstack) - 1);
#endif
}
.Ed
.Sh SEE ALSO
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr strcpy 3 ,
.Xr strlcat 3 ,
.Xr strlcpy 3 ,
.Xr wcscat 3
.Sh STANDARDS
The
.Fn strcat
and
.Fn strncat
functions
conform to
.St -isoC .
                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strchr.3                                     0100644 0001750 0001750 00000005643 12566166145 022265  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strchr.3	8.2 (Berkeley) 4/19/94
.\" $FreeBSD: src/lib/libc/string/strchr.3,v 1.14 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd April 19, 1994
.Dt STRCHR 3
.Os
.Sh NAME
.Nm strchr , strrchr
.Nd locate character in string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft "char *"
.Fo strchr
.Fa "const char *s"
.Fa "int c"
.Fc
.Ft "char *"
.Fo strrchr
.Fa "const char *s"
.Fa "int c"
.Fc
.Sh DESCRIPTION
The
.Fn strchr
function locates the first occurrence of
.Fa c
(converted to a
.Vt char )
in the string pointed to by
.Fa s .
The terminating null character is considered to be part of the string;
therefore if
.Fa c
is
.Ql \e0 ,
the functions locate the terminating
.Ql \e0 .
.Pp
The
.Fn strrchr
function is identical to
.Fn strchr ,
except it locates the last occurrence of
.Fa c .
.Sh RETURN VALUES
The functions
.Fn strchr
and
.Fn strrchr
return a pointer to the located character, or
.Dv NULL
if the character does not appear in the string.
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr memmem 3 ,
.Xr strcspn 3 ,
.Xr strpbrk 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr strtok 3 ,
.Xr wcschr 3
.Sh STANDARDS
The functions
.Fn strchr
and
.Fn strrchr
conform to
.St -isoC .
                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcmp.3                                     0100644 0001750 0001750 00000005746 12566166145 022274  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcmp.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strcmp.3,v 1.13 2009/12/04 09:20:20 trhodes Exp $
.\"
.Dd October 11, 2001
.Dt STRCMP 3
.Os
.Sh NAME
.Nm strcmp ,
.Nm strncmp
.Nd compare strings
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft int
.Fo strcmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft int
.Fo strncmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "size_t n"
.Fc
.Sh DESCRIPTION
The
.Fn strcmp
and
.Fn strncmp
functions
lexicographically compare the null-terminated strings
.Fa s1
and
.Fa s2 .
.Pp
The
.Fn strncmp
function
compares not more than
.Fa n
characters.
Because
.Fn strncmp
is designed for comparing strings rather than binary data,
characters that appear after a
.Ql \e0
character are not compared.
.Sh RETURN VALUES
The
.Fn strcmp
and
.Fn strncmp
functions return an integer greater than, equal to, or less than 0, according
as the string
.Fa s1
is greater than, equal to, or less than the string
.Fa s2 .
The comparison is done using unsigned characters, so that
.Ql \e200
is greater than
.Ql \e0 .
.Sh SEE ALSO
.Xr bcmp 3 ,
.Xr memcmp 3 ,
.Xr strcasecmp 3 ,
.Xr strcoll 3 ,
.Xr strxfrm 3 ,
.Xr wcscmp 3
.Sh STANDARDS
The
.Fn strcmp
and
.Fn strncmp
functions
conform to
.St -isoC .
                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcoll.3                                    0100644 0001750 0001750 00000005663 12566166145 022444  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcoll.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strcoll.3,v 1.14 2007/01/09 00:28:12 imp Exp $
.\"
.Dd June 4, 1993
.Dt STRCOLL 3
.Os
.Sh NAME
.Nm strcoll ,
.Nm strcoll_l
.Nd compare strings, according to current collation
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft int
.Fo strcoll
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.In string.h
.In xlocale.h
.Ft int
.Fo strcoll_l
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "locale_t loc"
.Fc
.Sh DESCRIPTION
The
.Fn strcoll
function
lexicographically compares the null-terminated strings
.Fa s1
and
.Fa s2
according to the current locale collation
and returns an integer greater than, equal to, or less than 0,
according as
.Fa s1
is greater than, equal to, or less than
.Fa s2 .
If information about the current locale collation is not available,
the value of
.Fn strcmp s1 s2
is returned.
.Pp
Although the
.Fn strcoll
function uses the current locale, the
.Fn strcoll_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Sh SEE ALSO
.Xr setlocale 3 ,
.Xr strcmp 3 ,
.Xr strxfrm 3 ,
.Xr wcscoll 3 ,
.Xr xlocale 3
.Sh STANDARDS
The
.Fn strcoll
function
conforms to
.St -isoC .
                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcoll_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024476  2strcoll.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcpy.3                                     0100644 0001750 0001750 00000011235 12566166145 022276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcpy.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD$
.\"
.Dd February 28, 2009
.Dt STRCPY 3
.Os
.Sh NAME
.Nm stpcpy, stpncpy, strcpy , strncpy
.Nd copy strings
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fn stpcpy "char * dst" "const char * src"
.Ft char *
.Fn stpncpy "char * dst" "const char * src" "size_t len"
.Ft char *
.Fn strcpy "char * dst" "const char * src"
.Ft char *
.Fn strncpy "char * dst" "const char * src" "size_t len"
.Sh DESCRIPTION
The
.Fn stpcpy
and
.Fn strcpy
functions
copy the string
.Fa src
to
.Fa dst
(including the terminating
.Ql \e0
character.)
.Pp
The
.Fn stpncpy
and
.Fn strncpy
functions copy at most
.Fa len
characters from
.Fa src
into
.Fa dst .
If
.Fa src
is less than
.Fa len
characters long,
the remainder of
.Fa dst
is filled with
.Ql \e0
characters.
Otherwise,
.Fa dst
is
.Em not
terminated.
.Pp
The source and destination strings should not overlap, as the
behavior is undefined.
.Sh RETURN VALUES
The
.Fn strcpy
and
.Fn strncpy
functions
return
.Fa dst .
The
.Fn stpcpy
and
.Fn stpncpy
functions return a pointer to the terminating
.Ql \e0
character of
.Fa dst .
If
.Fn stpncpy
does not terminate
.Fa dst
with a
.Dv NUL
character, it instead returns a pointer to
.Li dst[n]
(which does not necessarily refer to a valid memory location.)
.Sh EXAMPLES
The following sets
.Va chararray
to
.Dq Li abc\e0\e0\e0 :
.Bd -literal -offset indent
char chararray[6];

(void)strncpy(chararray, "abc", sizeof(chararray));
.Ed
.Pp
The following sets
.Va chararray
to
.Dq Li abcdef :
.Bd -literal -offset indent
char chararray[6];

(void)strncpy(chararray, "abcdefgh", sizeof(chararray));
.Ed
.Pp
Note that it does
.Em not
.Tn NUL
terminate
.Va chararray
because the length of the source string is greater than or equal
to the length argument.
.Pp
The following copies as many characters from
.Va input
to
.Va buf
as will fit and
.Tn NUL
terminates the result.
Because
.Fn strncpy
does
.Em not
guarantee to
.Tn NUL
terminate the string itself, this must be done explicitly.
.Bd -literal -offset indent
char buf[1024];

(void)strncpy(buf, input, sizeof(buf) - 1);
buf[sizeof(buf) - 1] = '\e0';
.Ed
.Pp
This could be better achieved using
.Xr strlcpy 3 ,
as shown in the following example:
.Pp
.Dl "(void)strlcpy(buf, input, sizeof(buf));"
.Pp
Note that because
.Xr strlcpy 3
is not defined in any standards, it should
only be used when portability is not a concern.
.Sh SEE ALSO
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr strlcpy 3 ,
.Xr wcscpy 3
.Sh STANDARDS
The
.Fn strcpy
and
.Fn strncpy
functions
conform to
.St -isoC .
The
.Fn stpcpy
and
.Fn stpncpy
functions conform to
.St -p1003.1-2008 .
.Sh HISTORY
The
.Fn stpcpy
function first appeared in
.Fx 4.4 ,
and
.Fn stpncpy
was added in
.Fx 8.0 .
.Sh SECURITY CONSIDERATIONS
The
.Fn strcpy
function is easily misused in a manner which enables malicious users
to arbitrarily change a running program's functionality through a
buffer overflow attack.
                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strcspn.3                                    0100644 0001750 0001750 00000005351 12566166145 022450  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcspn.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strcspn.3,v 1.9 2007/01/09 00:28:12 imp Exp $
.\"
.Dd June 4, 1993
.Dt STRCSPN 3
.Os
.Sh NAME
.Nm strcspn
.Nd span the complement of a string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fo strcspn
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Sh DESCRIPTION
The
.Fn strcspn
function
spans the initial part of the null-terminated string
.Fa s1 ,
as long as the characters from
.Fa s1
do not occur in string
.Fa s2
(it
spans the
.Em complement
of
.Fa s2 ) .
In other words, it computes the string array index in
.Fa s1
of the first character of
.Fa s1
which is also in
.Fa s2 ,
else the index of the first null character.
.Sh RETURN VALUES
The
.Fn strcspn
function
returns the number of characters spanned.
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr strchr 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr strtok 3
.Sh STANDARDS
The
.Fn strcspn
function
conforms to
.St -isoC .
                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strdup.3                                     0100644 0001750 0001750 00000005064 12566166145 022276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strdup.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/string/strdup.3,v 1.15 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd December 5, 2008
.Dt STRDUP 3
.Os
.Sh NAME
.Nm strdup ,
.Nm strndup
.Nd save a copy of a string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fo strdup
.Fa "const char *s1"
.Fc
.Ft char *
.Fo strndup
.Fa "const char *s1"
.Fa "size_t n"
.Fc
.Sh DESCRIPTION
The
.Fn strdup
function
allocates sufficient memory for a copy
of the string
.Fa s1 ,
does the copy, and returns a pointer to it.
The pointer may subsequently be used as an
argument to the function
.Xr free 3 .
.Pp
If insufficient memory is available, NULL is returned and
.Va errno
is set to
.Er ENOMEM .
.Pp
The
.Fn strndup
function copies at most
.Fa n
characters from the string
.Fa s1
always
.Dv NUL
terminating the copied string.
.Sh SEE ALSO
.Xr free 3 ,
.Xr malloc 3
.Sh HISTORY
The
.Fn strdup
function first appeared in
.Bx 4.4 .
The
.Fn strndup
function was added in
.Fx 7.2 .
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strerror.3                                   0100644 0001750 0001750 00000011447 12566166145 022641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strerror.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/string/strerror.3,v 1.24 2007/01/09 00:28:12 imp Exp $
.\"
.Dd October 12, 2004
.Dt STRERROR 3
.Os
.Sh NAME
.Nm perror ,
.Nm strerror ,
.Nm strerror_r ,
.Nm sys_errlist ,
.Nm sys_nerr
.Nd system error messages
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdio.h
.Ft void
.Fo perror
.Fa "const char *s"
.Fc
.Vt extern const char * const sys_errlist[] ;
.Vt extern const int sys_nerr ;
.In string.h
.Ft "char *"
.Fo strerror
.Fa "int errnum"
.Fc
.Ft int
.Fo strerror_r
.Fa "int errnum"
.Fa "char *strerrbuf"
.Fa "size_t buflen"
.Fc
.Sh DESCRIPTION
The
.Fn strerror ,
.Fn strerror_r ,
and
.Fn perror
functions look up the error message string corresponding to an
error number.
.Pp
The
.Fn strerror
function accepts an error number argument
.Fa errnum
and returns a pointer to the corresponding
message string.
.Pp
The
.Fn strerror_r
function renders the same result into
.Fa strerrbuf
for a maximum of
.Fa buflen
characters and returns 0 upon success.
.Pp
The
.Fn perror
function finds the error message corresponding to the current
value of the global variable
.Va errno
.Pq Xr intro 2
and writes it, followed by a newline, to the
standard error file descriptor.
If the argument
.Fa s
is
.Pf non- Dv NULL
and does not point to the null character,
this string is prepended to the message
string and separated from it by
a colon and space
.Pq Dq Li ":\ " ;
otherwise, only the error message string is printed.
.Pp
If the error number is not recognized, these functions return an error message
string containing
.Dq Li "Unknown error:\ "
followed by the error number in decimal.
The
.Fn strerror
and
.Fn strerror_r
functions return
.Er EINVAL
as a warning.
Error numbers recognized by this implementation fall in
the range 0 <=
.Fa errnum
<
.Fa sys_nerr .
.Pp
If insufficient storage is provided in
.Fa strerrbuf
(as specified in
.Fa buflen )
to contain the error string,
.Fn strerror_r
returns
.Er ERANGE
and
.Fa strerrbuf
will contain an error message that has been truncated and
.Dv NUL
terminated to fit the length specified by
.Fa buflen .
.Pp
The message strings can be accessed directly using the external
array
.Va sys_errlist .
The external value
.Va sys_nerr
contains a count of the messages in
.Va sys_errlist .
The use of these variables is deprecated;
.Fn strerror
or
.Fn strerror_r
should be used instead.
.Sh SEE ALSO
.Xr intro 2 ,
.Xr psignal 3
.Sh STANDARDS
The
.Fn perror
and
.Fn strerror
functions conform to
.St -isoC-99 .
The
.Fn strerror_r
function conforms to
.St -p1003.1-2001 .
.Sh HISTORY
The
.Fn strerror
and
.Fn perror
functions first appeared in
.Bx 4.4 .
The
.Fn strerror_r
function was implemented in
.Fx 4.4
by
.An Wes Peters Aq wes@FreeBSD.org .
.Sh BUGS
For unknown error numbers, the
.Fn strerror
function will return its result in a static buffer which
may be overwritten by subsequent calls.
.Pp
The return type for
.Fn strerror
is missing a type-qualifier; it should actually be
.Vt const char * .
.Pp
Programs that use the deprecated
.Va sys_errlist
variable often fail to compile because they declare it
inconsistently.
                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strerror_r.3                                 0120777 0001750 0001750 00000000000 12620245063 025104  2strerror.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strfmon.3                                    0100644 0001750 0001750 00000012366 12566166145 022450  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	$NetBSD: strfmon.3,v 1.3 2005/04/04 08:19:00 wiz Exp $
.\"
.\" Copyright (c) 2001 Jeroen Ruigrok van der Werven <asmodai@FreeBSD.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" 	From: FreeBSD: Id: strfmon.3,v 1.7 2003/01/06 06:21:25 tjr Exp
.\"
.Dd October 12, 2002
.Dt STRFMON 3
.Os
.Sh NAME
.Nm strfmon ,
.Nm strfmon_l
.Nd convert monetary value to string
.\" .Sh LIBRARY
.\" .Lb libc
.Sh SYNOPSIS
.In monetary.h
.Ft ssize_t
.Fo strfmon
.Fa "char *restrict s"
.Fa "size_t maxsize"
.Fa "const char *restrict format"
.Fa "..."
.Fc
.In monetary.h
.In xlocale.h
.Ft ssize_t
.Fo strfmon_l
.Fa "char *restrict s"
.Fa "size_t maxsize"
.Fa "locale_t loc"
.Fa "const char *restrict format"
.Fa "..."
.Fc
.Sh DESCRIPTION
The
.Fn strfmon
function places characters into the array pointed to by
.Fa s ,
as controlled by the string pointed to by
.Fa format .
No more than
.Fa maxsize
bytes are placed into the array.
.Pp
While the
.Fn strfmon
function uses the current locale, the
.Fn strfmon_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Pp
The format string is composed of zero or more directives:
ordinary characters (not
.Cm % ) ,
which are copied unchanged to the output stream; and conversion
specifications, each of which results in fetching zero or more subsequent
arguments.
Each conversion specification is introduced by the
.Cm %
character.
After the
.Cm % ,
the following appear in sequence:
.Bl -bullet
.It
Zero or more of the following flags:
.Bl -tag -width "XXX"
.It Cm = Ns Ar f
A
.Sq Cm =
character followed by another character
.Ar f
which is used as the numeric fill character.
.It Cm ^
Do not use grouping characters, regardless of the current locale default.
.It Cm +
Represent positive values by prefixing them with a positive sign,
and negative values by prefixing them with a negative sign.
This is the default.
.It Cm \&(
Enclose negative values in parentheses.
.It Cm \&!
Do not include a currency symbol in the output.
.It Cm \-
Left justify the result.
Only valid when a field width is specified.
.El
.It
An optional minimum field width as a decimal number.
By default, there is no minimum width.
.It
A
.Sq Cm #
sign followed by a decimal number specifying the maximum
expected number of digits after the radix character.
.It
A
.Sq Cm \&.
character followed by a decimal number specifying the number
of digits after the radix character.
.It
One of the following conversion specifiers:
.Bl -tag -width "XXX"
.It Cm i
The
.Vt double
argument is formatted as an international monetary amount.
.It Cm n
The
.Vt double
argument is formatted as a national monetary amount.
.It Cm %
A
.Sq Li %
character is written.
.El
.El
.Sh RETURN VALUES
If the total number of resulting bytes, including the terminating
.Dv NULL
byte, is not more than
.Fa maxsize ,
.Fn strfmon
returns the number of bytes placed into the array pointed to by
.Fa s ,
not including the terminating
.Dv NULL
byte.
Otherwise, \-1 is returned,
the contents of the array are indeterminate,
and
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn strfmon
function will fail if:
.Bl -tag -width Er
.It Bq Er E2BIG
Conversion stopped due to lack of space in the buffer.
.It Bq Er EINVAL
The format string is invalid.
.It Bq Er ENOMEM
Not enough memory for temporary buffers.
.El
.Sh EXAMPLE
.Bd -literal -offset indent -compact
  #include <stdio.h>
  #include <monetary.h>
  #include <locale.h>

  int main() {
          char buf[200];
          setlocale(LC_ALL, "en_US");
          (void)strfmon (buf, sizeof(buf)-1, "%n" , 123456.78);
          printf("%s\n", buf);
  }
.Ed
.Pp
.Sh SEE ALSO
.Xr localeconv 3 ,
.Xr xlocale 3
.Sh STANDARDS
The
.Fn strfmon
function
conforms to
.St -p1003.1-2001 .
.Sh AUTHORS
.An -nosplit
The
.Fn strfmon
function was implemented by
.An Alexey Zelkin Aq phantom@FreeBSD.org .
.Pp
This manual page was written by
.An Jeroen Ruigrok van der Werven Aq asmodai@FreeBSD.org
based on the standard's text.
.Sh BUGS
The
.Fn strfmon
function does not correctly handle multibyte characters in the
.Fa format
argument.
                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strfmon_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024512  2strfmon.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strftime.3                                   0100644 0001750 0001750 00000020275 12566166145 022613  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strftime.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdtime/strftime.3,v 1.40 2008/05/16 04:33:04 grog Exp $
.\"
.Dd November 4, 2004
.Dt STRFTIME 3
.Os
.Sh NAME
.Nm strftime ,
.Nm strftime_l
.Nd format date and time
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In time.h
.Ft size_t
.Fo strftime
.Fa "char *restrict s"
.Fa "size_t maxsize"
.Fa "const char *restrict format"
.Fa "const struct tm *restrict timeptr"
.Fc
.In time.h
.In xlocale.h
.Ft size_t
.Fo strftime_l
.Fa "char *restrict s"
.Fa "size_t maxsize"
.Fa "const char *restrict format"
.Fa "const struct tm *restrict timeptr"
.Fa "locale_t loc"
.Fc
.Sh DESCRIPTION
The
.Fn strftime
function formats the information from
.Fa timeptr
into the buffer
.Fa s ,
according to the string pointed to by
.Fa format .
.Pp
The
.Fa format
string consists of zero or more conversion specifications and
ordinary characters.
All ordinary characters are copied directly into the buffer.
A conversion specification consists of a percent sign
.Dq Ql %
and one other character.
.Pp
No more than
.Fa maxsize
characters will be placed into the array.
If the total number of resulting characters, including the terminating
NUL character, is not more than
.Fa maxsize ,
.Fn strftime
returns the number of characters in the array, not counting the
terminating NUL.
Otherwise, zero is returned and the buffer contents are indeterminate.
.Pp
Although the
.Fn strftime
function uses the current locale, the
.Fn strftime_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Pp
The conversion specifications are copied to the buffer after expansion
as follows:-
.Bl -tag -width "xxxx"
.It Cm \&%A
is replaced by national representation of the full weekday name.
.It Cm %a
is replaced by national representation of
the abbreviated weekday name.
.It Cm \&%B
is replaced by national representation of the full month name.
.It Cm %b
is replaced by national representation of
the abbreviated month name.
.It Cm \&%C
is replaced by (year / 100) as decimal number; single
digits are preceded by a zero.
.It Cm %c
is replaced by national representation of time and date.
.It Cm \&%D
is equivalent to
.Dq Li %m/%d/%y .
.It Cm %d
is replaced by the day of the month as a decimal number (01-31).
.It Cm %E* %O*
POSIX locale extensions.
The sequences
%Ec %EC %Ex %EX %Ey %EY
%Od %Oe %OH %OI %Om %OM
%OS %Ou %OU %OV %Ow %OW %Oy
are supposed to provide alternate
representations.
.Pp
Additionally %OB implemented
to represent alternative months names
(used standalone, without day mentioned).
.It Cm %e
is replaced by the day of the month as a decimal number (1-31); single
digits are preceded by a blank.
.It Cm \&%F
is equivalent to
.Dq Li %Y-%m-%d .
.It Cm \&%G
is replaced by a year as a decimal number with century.
This year is the one that contains the greater part of
the week (Monday as the first day of the week).
.It Cm %g
is replaced by the same year as in
.Dq Li %G ,
but as a decimal number without century (00-99).
.It Cm \&%H
is replaced by the hour (24-hour clock) as a decimal number (00-23).
.It Cm %h
the same as
.Cm %b .
.It Cm \&%I
is replaced by the hour (12-hour clock) as a decimal number (01-12).
.It Cm %j
is replaced by the day of the year as a decimal number (001-366).
.It Cm %k
is replaced by the hour (24-hour clock) as a decimal number (0-23);
single digits are preceded by a blank.
.It Cm %l
is replaced by the hour (12-hour clock) as a decimal number (1-12);
single digits are preceded by a blank.
.It Cm \&%M
is replaced by the minute as a decimal number (00-59).
.It Cm %m
is replaced by the month as a decimal number (01-12).
.It Cm %n
is replaced by a newline.
.It Cm %O*
the same as
.Cm %E* .
.It Cm %p
is replaced by national representation of either
"ante meridiem" (a.m.)
or
"post meridiem" (p.m.)
as appropriate.
.It Cm \&%R
is equivalent to
.Dq Li %H:%M .
.It Cm %r
is equivalent to
.Dq Li %I:%M:%S %p .
.It Cm \&%S
is replaced by the second as a decimal number (00-60).
.It Cm %s
is replaced by the number of seconds since the Epoch, UTC (see
.Xr mktime 3 ) .
.It Cm \&%T
is equivalent to
.Dq Li %H:%M:%S .
.It Cm %t
is replaced by a tab.
.It Cm \&%U
is replaced by the week number of the year (Sunday as the first day of
the week) as a decimal number (00-53).
.It Cm %u
is replaced by the weekday (Monday as the first day of the week)
as a decimal number (1-7).
.It Cm \&%V
is replaced by the week number of the year (Monday as the first day of
the week) as a decimal number (01-53).
If the week containing January
1 has four or more days in the new year, then it is week 1; otherwise
it is the last week of the previous year, and the next week is week 1.
.It Cm %v
is equivalent to
.Dq Li %e-%b-%Y .
.It Cm \&%W
is replaced by the week number of the year (Monday as the first day of
the week) as a decimal number (00-53).
.It Cm %w
is replaced by the weekday (Sunday as the first day of the week)
as a decimal number (0-6).
.It Cm \&%X
is replaced by national representation of the time.
.It Cm %x
is replaced by national representation of the date.
.It Cm \&%Y
is replaced by the year with century as a decimal number.
.It Cm %y
is replaced by the year without century as a decimal number (00-99).
.It Cm \&%Z
is replaced by the time zone name.
.It Cm %z
is replaced by the time zone offset from UTC; a leading plus sign stands for
east of UTC, a minus sign for west of UTC, hours and minutes follow
with two digits each and no delimiter between them (common form for
RFC 822 date headers).
.It Cm %+
is replaced by national representation of the date and time
(the format is similar to that produced by
.Xr date 1 ) .
.It Cm %-*
GNU libc extension.
Do not do any padding when performing numerical outputs.
.It Cm %_*
GNU libc extension.
Explicitly specify space for padding.
.It Cm %0*
GNU libc extension.
Explicitly specify zero for padding.
.It Cm %%
is replaced by
.Ql % .
.El
.Sh SEE ALSO
.Xr date 1 ,
.Xr printf 1 ,
.Xr ctime 3 ,
.Xr printf 3 ,
.Xr strptime 3 ,
.Xr wcsftime 3 ,
.Xr xlocale 3
.Sh STANDARDS
The
.Fn strftime
function
conforms to
.St -isoC
with a lot of extensions including
.Ql %C ,
.Ql \&%D ,
.Ql %E* ,
.Ql %e ,
.Ql %G ,
.Ql %g ,
.Ql %h ,
.Ql %k ,
.Ql %l ,
.Ql %n ,
.Ql %O* ,
.Ql \&%R ,
.Ql %r ,
.Ql %s ,
.Ql \&%T ,
.Ql %t ,
.Ql %u ,
.Ql \&%V ,
.Ql %z ,
and
.Ql %+ .
.Pp
The peculiar week number and year in the replacements of
.Ql %G ,
.Ql %g ,
and
.Ql \&%V
are defined in ISO 8601: 1988.
.Sh BUGS
There is no conversion specification for the phase of the moon.
.Pp
The
.Fn strftime
function does not correctly handle multibyte characters in the
.Fa format
argument.
                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strftime_l.3                                 0120777 0001750 0001750 00000000000 12620245063 025024  2strftime.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strict.3pm                                   0100644 0001750 0001750 00000017015 12566207465 022622  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strict 3pm"
.TH strict 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strict \- Perl pragma to restrict unsafe constructs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use strict;
\&
\&    use strict "vars";
\&    use strict "refs";
\&    use strict "subs";
\&
\&    use strict;
\&    no strict "vars";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are three possible things to be
strict about:  \*(L"subs\*(R", \*(L"vars\*(R", and \*(L"refs\*(R".
.ie n .IP """strict refs""" 6
.el .IP "\f(CWstrict refs\fR" 6
.IX Item "strict refs"
This generates a runtime error if you 
use symbolic references (see perlref).
.Sp
.Vb 7
\&    use strict \*(Aqrefs\*(Aq;
\&    $ref = \e$foo;
\&    print $$ref;        # ok
\&    $ref = "foo";
\&    print $$ref;        # runtime error; normally ok
\&    $file = "STDOUT";
\&    print $file "Hi!";  # error; note: no comma after $file
.Ve
.Sp
There is one exception to this rule:
.Sp
.Vb 2
\&    $bar = \e&{\*(Aqfoo\*(Aq};
\&    &$bar;
.Ve
.Sp
is allowed so that \f(CW\*(C`goto &$AUTOLOAD\*(C'\fR would not break under stricture.
.ie n .IP """strict vars""" 6
.el .IP "\f(CWstrict vars\fR" 6
.IX Item "strict vars"
This generates a compile-time error if you access a variable that was
neither explicitly declared (using any of \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, \f(CW\*(C`state\*(C'\fR, or \f(CW\*(C`use
vars\*(C'\fR) nor fully qualified.  (Because this is to avoid variable suicide
problems and subtle dynamic scoping issues, a merely \f(CW\*(C`local\*(C'\fR variable isn't
good enough.)  See \*(L"my\*(R" in perlfunc, \*(L"our\*(R" in perlfunc, \*(L"state\*(R" in perlfunc,
\&\*(L"local\*(R" in perlfunc, and vars.
.Sp
.Vb 4
\&    use strict \*(Aqvars\*(Aq;
\&    $X::foo = 1;         # ok, fully qualified
\&    my $foo = 10;        # ok, my() var
\&    local $baz = 9;      # blows up, $baz not declared before
\&
\&    package Cinna;
\&    our $bar;                   # Declares $bar in current package
\&    $bar = \*(AqHgS\*(Aq;               # ok, global declared via pragma
.Ve
.Sp
The \fIlocal()\fR generated a compile-time error because you just touched a global
name without fully qualifying it.
.Sp
Because of their special use by \fIsort()\fR, the variables \f(CW$a\fR and \f(CW$b\fR are
exempted from this check.
.ie n .IP """strict subs""" 6
.el .IP "\f(CWstrict subs\fR" 6
.IX Item "strict subs"
This disables the poetry optimization, generating a compile-time error if
you try to use a bareword identifier that's not a subroutine, unless it
is a simple identifier (no colons) and that it appears in curly braces or
on the left hand side of the \f(CW\*(C`=>\*(C'\fR symbol.
.Sp
.Vb 4
\&    use strict \*(Aqsubs\*(Aq;
\&    $SIG{PIPE} = Plumber;       # blows up
\&    $SIG{PIPE} = "Plumber";     # just fine: quoted string is always ok
\&    $SIG{PIPE} = \e&Plumber;     # preferred form
.Ve
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib.
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR, with Perl 5.6.1, erroneously permitted to use an unquoted
compound identifier (e.g. \f(CW\*(C`Foo::Bar\*(C'\fR) as a hash key (before \f(CW\*(C`=>\*(C'\fR or
inside curlies), but without forcing it always to a literal string.
.PP
Starting with Perl 5.8.1 strict is strict about its restrictions:
if unknown restrictions are used, the strict pragma will abort with
.PP
.Vb 1
\&    Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq...\*(Aq
.Ve
.PP
As of version 1.04 (Perl 5.10), strict verifies that it is used as
\&\*(L"strict\*(R" to avoid the dreaded Strict trap on case insensitive file
systems.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strict5.16.3pm                               0100644 0001750 0001750 00000016474 12566207443 023140  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strict 3pm"
.TH strict 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strict \- Perl pragma to restrict unsafe constructs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use strict;
\&
\&    use strict "vars";
\&    use strict "refs";
\&    use strict "subs";
\&
\&    use strict;
\&    no strict "vars";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are three possible things to be
strict about:  \*(L"subs\*(R", \*(L"vars\*(R", and \*(L"refs\*(R".
.ie n .IP """strict refs""" 6
.el .IP "\f(CWstrict refs\fR" 6
.IX Item "strict refs"
This generates a runtime error if you 
use symbolic references (see perlref).
.Sp
.Vb 7
\&    use strict \*(Aqrefs\*(Aq;
\&    $ref = \e$foo;
\&    print $$ref;        # ok
\&    $ref = "foo";
\&    print $$ref;        # runtime error; normally ok
\&    $file = "STDOUT";
\&    print $file "Hi!";  # error; note: no comma after $file
.Ve
.Sp
There is one exception to this rule:
.Sp
.Vb 2
\&    $bar = \e&{\*(Aqfoo\*(Aq};
\&    &$bar;
.Ve
.Sp
is allowed so that \f(CW\*(C`goto &$AUTOLOAD\*(C'\fR would not break under stricture.
.ie n .IP """strict vars""" 6
.el .IP "\f(CWstrict vars\fR" 6
.IX Item "strict vars"
This generates a compile-time error if you access a variable that was
neither explicitly declared (using any of \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, \f(CW\*(C`state\*(C'\fR, or \f(CW\*(C`use
vars\*(C'\fR) nor fully qualified.  (Because this is to avoid variable suicide
problems and subtle dynamic scoping issues, a merely \f(CW\*(C`local\*(C'\fR variable isn't
good enough.)  See \*(L"my\*(R" in perlfunc, \*(L"our\*(R" in perlfunc, \*(L"state\*(R" in perlfunc,
\&\*(L"local\*(R" in perlfunc, and vars.
.Sp
.Vb 4
\&    use strict \*(Aqvars\*(Aq;
\&    $X::foo = 1;         # ok, fully qualified
\&    my $foo = 10;        # ok, my() var
\&    local $baz = 9;      # blows up, $baz not declared before
\&
\&    package Cinna;
\&    our $bar;                   # Declares $bar in current package
\&    $bar = \*(AqHgS\*(Aq;               # ok, global declared via pragma
.Ve
.Sp
The \fIlocal()\fR generated a compile-time error because you just touched a global
name without fully qualifying it.
.Sp
Because of their special use by \fIsort()\fR, the variables \f(CW$a\fR and \f(CW$b\fR are
exempted from this check.
.ie n .IP """strict subs""" 6
.el .IP "\f(CWstrict subs\fR" 6
.IX Item "strict subs"
This disables the poetry optimization, generating a compile-time error if
you try to use a bareword identifier that's not a subroutine, unless it
is a simple identifier (no colons) and that it appears in curly braces or
on the left hand side of the \f(CW\*(C`=>\*(C'\fR symbol.
.Sp
.Vb 4
\&    use strict \*(Aqsubs\*(Aq;
\&    $SIG{PIPE} = Plumber;       # blows up
\&    $SIG{PIPE} = "Plumber";     # just fine: quoted string is always ok
\&    $SIG{PIPE} = \e&Plumber;     # preferred form
.Ve
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib.
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR, with Perl 5.6.1, erroneously permitted to use an unquoted
compound identifier (e.g. \f(CW\*(C`Foo::Bar\*(C'\fR) as a hash key (before \f(CW\*(C`=>\*(C'\fR or
inside curlies), but without forcing it always to a literal string.
.PP
Starting with Perl 5.8.1 strict is strict about its restrictions:
if unknown restrictions are used, the strict pragma will abort with
.PP
.Vb 1
\&    Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq...\*(Aq
.Ve
.PP
As of version 1.04 (Perl 5.10), strict verifies that it is used as
\&\*(L"strict\*(R" to avoid the dreaded Strict trap on case insensitive file
systems.
                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strict5.18.3pm                               0100644 0001750 0001750 00000017015 12566207465 023136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strict 3pm"
.TH strict 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strict \- Perl pragma to restrict unsafe constructs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use strict;
\&
\&    use strict "vars";
\&    use strict "refs";
\&    use strict "subs";
\&
\&    use strict;
\&    no strict "vars";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are three possible things to be
strict about:  \*(L"subs\*(R", \*(L"vars\*(R", and \*(L"refs\*(R".
.ie n .IP """strict refs""" 6
.el .IP "\f(CWstrict refs\fR" 6
.IX Item "strict refs"
This generates a runtime error if you 
use symbolic references (see perlref).
.Sp
.Vb 7
\&    use strict \*(Aqrefs\*(Aq;
\&    $ref = \e$foo;
\&    print $$ref;        # ok
\&    $ref = "foo";
\&    print $$ref;        # runtime error; normally ok
\&    $file = "STDOUT";
\&    print $file "Hi!";  # error; note: no comma after $file
.Ve
.Sp
There is one exception to this rule:
.Sp
.Vb 2
\&    $bar = \e&{\*(Aqfoo\*(Aq};
\&    &$bar;
.Ve
.Sp
is allowed so that \f(CW\*(C`goto &$AUTOLOAD\*(C'\fR would not break under stricture.
.ie n .IP """strict vars""" 6
.el .IP "\f(CWstrict vars\fR" 6
.IX Item "strict vars"
This generates a compile-time error if you access a variable that was
neither explicitly declared (using any of \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, \f(CW\*(C`state\*(C'\fR, or \f(CW\*(C`use
vars\*(C'\fR) nor fully qualified.  (Because this is to avoid variable suicide
problems and subtle dynamic scoping issues, a merely \f(CW\*(C`local\*(C'\fR variable isn't
good enough.)  See \*(L"my\*(R" in perlfunc, \*(L"our\*(R" in perlfunc, \*(L"state\*(R" in perlfunc,
\&\*(L"local\*(R" in perlfunc, and vars.
.Sp
.Vb 4
\&    use strict \*(Aqvars\*(Aq;
\&    $X::foo = 1;         # ok, fully qualified
\&    my $foo = 10;        # ok, my() var
\&    local $baz = 9;      # blows up, $baz not declared before
\&
\&    package Cinna;
\&    our $bar;                   # Declares $bar in current package
\&    $bar = \*(AqHgS\*(Aq;               # ok, global declared via pragma
.Ve
.Sp
The \fIlocal()\fR generated a compile-time error because you just touched a global
name without fully qualifying it.
.Sp
Because of their special use by \fIsort()\fR, the variables \f(CW$a\fR and \f(CW$b\fR are
exempted from this check.
.ie n .IP """strict subs""" 6
.el .IP "\f(CWstrict subs\fR" 6
.IX Item "strict subs"
This disables the poetry optimization, generating a compile-time error if
you try to use a bareword identifier that's not a subroutine, unless it
is a simple identifier (no colons) and that it appears in curly braces or
on the left hand side of the \f(CW\*(C`=>\*(C'\fR symbol.
.Sp
.Vb 4
\&    use strict \*(Aqsubs\*(Aq;
\&    $SIG{PIPE} = Plumber;       # blows up
\&    $SIG{PIPE} = "Plumber";     # just fine: quoted string is always ok
\&    $SIG{PIPE} = \e&Plumber;     # preferred form
.Ve
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib.
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR, with Perl 5.6.1, erroneously permitted to use an unquoted
compound identifier (e.g. \f(CW\*(C`Foo::Bar\*(C'\fR) as a hash key (before \f(CW\*(C`=>\*(C'\fR or
inside curlies), but without forcing it always to a literal string.
.PP
Starting with Perl 5.8.1 strict is strict about its restrictions:
if unknown restrictions are used, the strict pragma will abort with
.PP
.Vb 1
\&    Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq...\*(Aq
.Ve
.PP
As of version 1.04 (Perl 5.10), strict verifies that it is used as
\&\*(L"strict\*(R" to avoid the dreaded Strict trap on case insensitive file
systems.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strictures.3pm                               0100644 0001750 0001750 00000027534 12566242370 023522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strictures 3"
.TH strictures 3 "2013-12-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strictures \- turn on strict and make all warnings fatal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
.Ve
.PP
except when called from a file which matches:
.PP
.Vb 1
\&  (caller)[1] =~ /^(?:t|xt|lib|blib)/
.Ve
.PP
and when either \f(CW\*(C`.git\*(C'\fR, \f(CW\*(C`.svn\*(C'\fR, or \f(CW\*(C`.hg\*(C'\fR is present in the current directory (with
the intention of only forcing extra tests on the author side) \*(-- or when \f(CW\*(C`.git\*(C'\fR,
\&\f(CW\*(C`.svn\*(C'\fR, or \f(CW\*(C`.hg\*(C'\fR is present two directories up along with \f(CW\*(C`dist.ini\*(C'\fR (which would
indicate we are in a \f(CW\*(C`dzil test\*(C'\fR operation, via Dist::Zilla) \*(--
or when the \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable is set, in which case
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 5
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
\&  no indirect \*(Aqfatal\*(Aq;
\&  no multidimensional;
\&  no bareword::filehandles;
.Ve
.PP
Note that \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR may at some point add even more tests, with only a minor
version increase, but any changes to the effect of \f(CW\*(C`use strictures\*(C'\fR in
normal mode will involve a major version bump.
.PP
If any of the extra testing modules are not present, strictures will
complain loudly, once, via \f(CW\*(C`warn()\*(C'\fR, and then shut up. But you really
should consider installing them, they're all great anti-footgun tools.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I've been writing the equivalent of this module at the top of my code for
about a year now. I figured it was time to make it shorter.
.PP
Things like the importer in \f(CW\*(C`use Moose\*(C'\fR don't help me because they turn
warnings on but don't make them fatal \*(-- which from my point of view is
useless because I want an exception to tell me my code isn't warnings-clean.
.PP
Any time I see a warning from my code, that indicates a mistake.
.PP
Any time my code encounters a mistake, I want a crash \*(-- not spew to \s-1STDERR\s0
and then unknown (and probably undesired) subsequent behaviour.
.PP
I also want to ensure that obvious coding mistakes, like indirect object
syntax (and not so obvious mistakes that cause things to accidentally compile
as such) get caught, but not at the cost of an \s-1XS\s0 dependency and not at the
cost of blowing things up on another machine.
.PP
Therefore, strictures turns on additional checking, but only when it thinks
it's running in a test file in a \s-1VCS\s0 checkout \*(-- although if this causes
undesired behaviour this can be overridden by setting the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable.
.PP
If additional useful author side checks come to mind, I'll add them to the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR code path only \*(-- this will result in a minor version increase (e.g.
1.000000 to 1.001000 (1.1.0) or similar). Any fixes only to the mechanism of
this code will result in a sub-version increase (e.g. 1.000000 to 1.000001
(1.0.1)).
.PP
If the behaviour of \f(CW\*(C`use strictures\*(C'\fR in normal mode changes in any way, that
will constitute a major version increase \*(-- and the code already checks
when its version is tested to ensure that
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
will continue to only introduce the current set of strictures even if 2.0 is
installed.
.SH "METHODS"
.IX Header "METHODS"
.SS "import"
.IX Subsection "import"
This method does the setup work described above in \*(L"\s-1DESCRIPTION\*(R"\s0
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
This method traps the \f(CW\*(C`strictures\->VERSION(1)\*(C'\fR call produced by a use line
with a version number on it and does the version check.
.SH "EXTRA TESTING RATIONALE"
.IX Header "EXTRA TESTING RATIONALE"
Every so often, somebody complains that they're deploying via \f(CW\*(C`git pull\*(C'\fR
and that they don't want strictures to enable itself in this case \*(-- and that
setting \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR to 0 isn't acceptable (additional ways to
disable extra testing would be welcome but the discussion never seems to get
that far).
.PP
In order to allow us to skip a couple of stages and get straight to a
productive conversation, here's my current rationale for turning the
extra testing on via a heuristic:
.PP
The extra testing is all stuff that only ever blows up at compile time;
this is intentional. So the oft-raised concern that it's different code being
tested is only sort of the case \*(-- none of the modules involved affect the
final optree to my knowledge, so the author gets some additional compile
time crashes which he/she then fixes, and the rest of the testing is
completely valid for all environments.
.PP
The point of the extra testing \*(-- especially \f(CW\*(C`no indirect\*(C'\fR \*(-- is to catch
mistakes that newbie users won't even realise are mistakes without
help. For example,
.PP
.Vb 1
\&  foo { ... };
.Ve
.PP
where foo is an & prototyped sub that you forgot to import \*(-- this is
pernicious to track down since all \fIseems\fR fine until it gets called
and you get a crash. Worse still, you can fail to have imported it due
to a circular require, at which point you have a load order dependent
bug which I've seen before now \fIonly\fR show up in production due to tiny
differences between the production and the development environment. I wrote
<http://shadow.cat/blog/matt\-s\-trout/indirect\-but\-still\-fatal/> to explain
this particular problem before strictures itself existed.
.PP
As such, in my experience so far strictures' extra testing has
\&\fIavoided\fR production versus development differences, not caused them.
.PP
Additionally, strictures' policy is very much \*(L"try and provide as much
protection as possible for newbies \*(-- who won't think about whether there's
an option to turn on or not\*(R" \*(-- so having only the environment variable
is not sufficient to achieve that (I get to explain that you need to add
\&\f(CW\*(C`use strict\*(C'\fR at least once a week on freenode #perl \*(-- newbies sometimes
completely skip steps because they don't understand that that step
is important).
.PP
I make no claims that the heuristic is perfect \*(-- it's already been evolved
significantly over time, especially for 1.004 where we changed things to
ensure it only fires on files in your checkout (rather than strictures\-using
modules you happened to have installed, which was just silly). However, I
hope the above clarifies why a heuristic approach is not only necessary but
desirable from a point of view of providing new users with as much safety as possible,
and will allow any future discussion on the subject to focus on \*(L"how do we
minimise annoyance to people deploying from checkouts intentionally\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
indirect
.IP "\(bu" 4
multidimensional
.IP "\(bu" 4
bareword::filehandles
.SH "COMMUNITY AND SUPPORT"
.IX Header "COMMUNITY AND SUPPORT"
.SS "\s-1IRC\s0 channel"
.IX Subsection "IRC channel"
irc.perl.org #toolchain
.PP
(or bug 'mst' in query on there or freenode)
.SS "Git repository"
.IX Subsection "Git repository"
Gitweb is on http://git.shadowcat.co.uk/ and the clone \s-1URL\s0 is:
.PP
.Vb 1
\&  git clone git://git.shadowcat.co.uk/p5sagit/strictures.git
.Ve
.PP
The web interface to the repository is at:
.PP
.Vb 1
\&  http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=p5sagit/strictures.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Karen Etheridge (cpan:ETHER) <ether@cpan.org>
.PP
Mithaldu \- Christian Walde (cpan:MITHALDU) <walde.christian@gmail.com>
.PP
haarg \- Graham Knop (cpan:HAARG) <haarg@haarg.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 the strictures \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strictures5.16.3pm                           0100644 0001750 0001750 00000026653 12566242354 024037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strictures 3"
.TH strictures 3 "2012-09-08" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strictures \- turn on strict and make all warnings fatal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
.Ve
.PP
except when called from a file which matches:
.PP
.Vb 1
\&  (caller)[1] =~ /^(?:t|xt|lib|blib)/
.Ve
.PP
and when either \f(CW\*(C`.git\*(C'\fR or \f(CW\*(C`.svn\*(C'\fR is present in the current directory (with
the intention of only forcing extra tests on the author side) \*(-- or when \f(CW\*(C`.git\*(C'\fR
or \f(CW\*(C`.svn\*(C'\fR is present two directories up along with \f(CW\*(C`dist.ini\*(C'\fR (which would
indicate we are in a \f(CW\*(C`dzil test\*(C'\fR operation, via Dist::Zilla) \*(--
or when the \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable is set, in which case
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 5
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
\&  no indirect \*(Aqfatal\*(Aq;
\&  no multidimensional;
\&  no bareword::filehandles;
.Ve
.PP
Note that \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR may at some point add even more tests, with only a minor
version increase, but any changes to the effect of \f(CW\*(C`use strictures\*(C'\fR in
normal mode will involve a major version bump.
.PP
If any of the extra testing modules are not present, strictures will
complain loudly, once, via \f(CW\*(C`warn()\*(C'\fR, and then shut up. But you really
should consider installing them, they're all great anti-footgun tools.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I've been writing the equivalent of this module at the top of my code for
about a year now. I figured it was time to make it shorter.
.PP
Things like the importer in \f(CW\*(C`use Moose\*(C'\fR don't help me because they turn
warnings on but don't make them fatal \*(-- which from my point of view is
useless because I want an exception to tell me my code isn't warnings-clean.
.PP
Any time I see a warning from my code, that indicates a mistake.
.PP
Any time my code encounters a mistake, I want a crash \*(-- not spew to \s-1STDERR\s0
and then unknown (and probably undesired) subsequent behaviour.
.PP
I also want to ensure that obvious coding mistakes, like indirect object
syntax (and not so obvious mistakes that cause things to accidentally compile
as such) get caught, but not at the cost of an \s-1XS\s0 dependency and not at the
cost of blowing things up on another machine.
.PP
Therefore, strictures turns on additional checking, but only when it thinks
it's running in a test file in a \s-1VCS\s0 checkout \*(-- although if this causes
undesired behaviour this can be overridden by setting the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable.
.PP
If additional useful author side checks come to mind, I'll add them to the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR code path only \*(-- this will result in a minor version increase (e.g.
1.000000 to 1.001000 (1.1.0) or similar). Any fixes only to the mechanism of
this code will result in a sub-version increase (e.g. 1.000000 to 1.000001
(1.0.1)).
.PP
If the behaviour of \f(CW\*(C`use strictures\*(C'\fR in normal mode changes in any way, that
will constitute a major version increase \*(-- and the code already checks
when its version is tested to ensure that
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
will continue to only introduce the current set of strictures even if 2.0 is
installed.
.SH "METHODS"
.IX Header "METHODS"
.SS "import"
.IX Subsection "import"
This method does the setup work described above in \*(L"\s-1DESCRIPTION\s0\*(R"
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
This method traps the \f(CW\*(C`strictures\->VERSION(1)\*(C'\fR call produced by a use line
with a version number on it and does the version check.
.SH "EXTRA TESTING RATIONALE"
.IX Header "EXTRA TESTING RATIONALE"
Every so often, somebody complains that they're deploying via \f(CW\*(C`git pull\*(C'\fR
and that they don't want strictures to enable itself in this case \*(-- and that
setting \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR to 0 isn't acceptable (additional ways to
disable extra testing would be welcome but the discussion never seems to get
that far).
.PP
In order to allow us to skip a couple of stages and get straight to a
productive conversation, here's my current rationale for turning the
extra testing on via a heuristic:
.PP
The extra testing is all stuff that only ever blows up at compile time;
this is intentional. So the oft-raised concern that it's different code being
tested is only sort of the case \*(-- none of the modules involved affect the
final optree to my knowledge, so the author gets some additional compile
time crashes which he/she then fixes, and the rest of the testing is
completely valid for all environments.
.PP
The point of the extra testing \*(-- especially \f(CW\*(C`no indirect\*(C'\fR \*(-- is to catch
mistakes that newbie users won't even realise are mistakes without
help. For example,
.PP
.Vb 1
\&  foo { ... };
.Ve
.PP
where foo is an & prototyped sub that you forgot to import \*(-- this is
pernicious to track down since all \fIseems\fR fine until it gets called
and you get a crash. Worse still, you can fail to have imported it due
to a circular require, at which point you have a load order dependent
bug which I've seen before now \fIonly\fR show up in production due to tiny
differences between the production and the development environment. I wrote
http://shadow.cat/blog/matt\-s\-trout/indirect\-but\-still\-fatal/ <http://shadow.cat/blog/matt-s-trout/indirect-but-still-fatal/> to explain
this particular problem before strictures itself existed.
.PP
As such, in my experience so far strictures' extra testing has
\&\fIavoided\fR production versus development differences, not caused them.
.PP
Additionally, strictures' policy is very much \*(L"try and provide as much
protection as possible for newbies \*(-- who won't think about whether there's
an option to turn on or not\*(R" \*(-- so having only the environment variable
is not sufficient to achieve that (I get to explain that you need to add
\&\f(CW\*(C`use strict\*(C'\fR at least once a week on freenode #perl \*(-- newbies sometimes
completely skip steps because they don't understand that that step
is important).
.PP
I make no claims that the heuristic is perfect \*(-- it's already been evolved
significantly over time, especially for 1.004 where we changed things to
ensure it only fires on files in your checkout (rather than strictures\-using
modules you happened to have installed, which was just silly). However, I
hope the above clarifies why a heuristic approach is not only necessary but
desirable from a point of view of providing new users with as much safety as possible,
and will allow any future discussion on the subject to focus on \*(L"how do we
minimise annoyance to people deploying from checkouts intentionally\*(R".
.SH "COMMUNITY AND SUPPORT"
.IX Header "COMMUNITY AND SUPPORT"
.SS "\s-1IRC\s0 channel"
.IX Subsection "IRC channel"
irc.perl.org #toolchain
.PP
(or bug 'mst' in query on there or freenode)
.SS "Git repository"
.IX Subsection "Git repository"
Gitweb is on http://git.shadowcat.co.uk/ and the clone \s-1URL\s0 is:
.PP
.Vb 1
\&  git clone git://git.shadowcat.co.uk/p5sagit/strictures.git
.Ve
.PP
The web interface to the repository is at:
.PP
.Vb 1
\&  http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=p5sagit/strictures.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
None required yet. Maybe this module is perfect (hahahahaha ...).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 the strictures \*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R"
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strictures5.18.3pm                           0100644 0001750 0001750 00000027534 12566242370 024036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strictures 3"
.TH strictures 3 "2013-12-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strictures \- turn on strict and make all warnings fatal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
.Ve
.PP
except when called from a file which matches:
.PP
.Vb 1
\&  (caller)[1] =~ /^(?:t|xt|lib|blib)/
.Ve
.PP
and when either \f(CW\*(C`.git\*(C'\fR, \f(CW\*(C`.svn\*(C'\fR, or \f(CW\*(C`.hg\*(C'\fR is present in the current directory (with
the intention of only forcing extra tests on the author side) \*(-- or when \f(CW\*(C`.git\*(C'\fR,
\&\f(CW\*(C`.svn\*(C'\fR, or \f(CW\*(C`.hg\*(C'\fR is present two directories up along with \f(CW\*(C`dist.ini\*(C'\fR (which would
indicate we are in a \f(CW\*(C`dzil test\*(C'\fR operation, via Dist::Zilla) \*(--
or when the \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable is set, in which case
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 5
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
\&  no indirect \*(Aqfatal\*(Aq;
\&  no multidimensional;
\&  no bareword::filehandles;
.Ve
.PP
Note that \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR may at some point add even more tests, with only a minor
version increase, but any changes to the effect of \f(CW\*(C`use strictures\*(C'\fR in
normal mode will involve a major version bump.
.PP
If any of the extra testing modules are not present, strictures will
complain loudly, once, via \f(CW\*(C`warn()\*(C'\fR, and then shut up. But you really
should consider installing them, they're all great anti-footgun tools.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I've been writing the equivalent of this module at the top of my code for
about a year now. I figured it was time to make it shorter.
.PP
Things like the importer in \f(CW\*(C`use Moose\*(C'\fR don't help me because they turn
warnings on but don't make them fatal \*(-- which from my point of view is
useless because I want an exception to tell me my code isn't warnings-clean.
.PP
Any time I see a warning from my code, that indicates a mistake.
.PP
Any time my code encounters a mistake, I want a crash \*(-- not spew to \s-1STDERR\s0
and then unknown (and probably undesired) subsequent behaviour.
.PP
I also want to ensure that obvious coding mistakes, like indirect object
syntax (and not so obvious mistakes that cause things to accidentally compile
as such) get caught, but not at the cost of an \s-1XS\s0 dependency and not at the
cost of blowing things up on another machine.
.PP
Therefore, strictures turns on additional checking, but only when it thinks
it's running in a test file in a \s-1VCS\s0 checkout \*(-- although if this causes
undesired behaviour this can be overridden by setting the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR environment variable.
.PP
If additional useful author side checks come to mind, I'll add them to the
\&\f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR code path only \*(-- this will result in a minor version increase (e.g.
1.000000 to 1.001000 (1.1.0) or similar). Any fixes only to the mechanism of
this code will result in a sub-version increase (e.g. 1.000000 to 1.000001
(1.0.1)).
.PP
If the behaviour of \f(CW\*(C`use strictures\*(C'\fR in normal mode changes in any way, that
will constitute a major version increase \*(-- and the code already checks
when its version is tested to ensure that
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
will continue to only introduce the current set of strictures even if 2.0 is
installed.
.SH "METHODS"
.IX Header "METHODS"
.SS "import"
.IX Subsection "import"
This method does the setup work described above in \*(L"\s-1DESCRIPTION\*(R"\s0
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
This method traps the \f(CW\*(C`strictures\->VERSION(1)\*(C'\fR call produced by a use line
with a version number on it and does the version check.
.SH "EXTRA TESTING RATIONALE"
.IX Header "EXTRA TESTING RATIONALE"
Every so often, somebody complains that they're deploying via \f(CW\*(C`git pull\*(C'\fR
and that they don't want strictures to enable itself in this case \*(-- and that
setting \f(CW\*(C`PERL_STRICTURES_EXTRA\*(C'\fR to 0 isn't acceptable (additional ways to
disable extra testing would be welcome but the discussion never seems to get
that far).
.PP
In order to allow us to skip a couple of stages and get straight to a
productive conversation, here's my current rationale for turning the
extra testing on via a heuristic:
.PP
The extra testing is all stuff that only ever blows up at compile time;
this is intentional. So the oft-raised concern that it's different code being
tested is only sort of the case \*(-- none of the modules involved affect the
final optree to my knowledge, so the author gets some additional compile
time crashes which he/she then fixes, and the rest of the testing is
completely valid for all environments.
.PP
The point of the extra testing \*(-- especially \f(CW\*(C`no indirect\*(C'\fR \*(-- is to catch
mistakes that newbie users won't even realise are mistakes without
help. For example,
.PP
.Vb 1
\&  foo { ... };
.Ve
.PP
where foo is an & prototyped sub that you forgot to import \*(-- this is
pernicious to track down since all \fIseems\fR fine until it gets called
and you get a crash. Worse still, you can fail to have imported it due
to a circular require, at which point you have a load order dependent
bug which I've seen before now \fIonly\fR show up in production due to tiny
differences between the production and the development environment. I wrote
<http://shadow.cat/blog/matt\-s\-trout/indirect\-but\-still\-fatal/> to explain
this particular problem before strictures itself existed.
.PP
As such, in my experience so far strictures' extra testing has
\&\fIavoided\fR production versus development differences, not caused them.
.PP
Additionally, strictures' policy is very much \*(L"try and provide as much
protection as possible for newbies \*(-- who won't think about whether there's
an option to turn on or not\*(R" \*(-- so having only the environment variable
is not sufficient to achieve that (I get to explain that you need to add
\&\f(CW\*(C`use strict\*(C'\fR at least once a week on freenode #perl \*(-- newbies sometimes
completely skip steps because they don't understand that that step
is important).
.PP
I make no claims that the heuristic is perfect \*(-- it's already been evolved
significantly over time, especially for 1.004 where we changed things to
ensure it only fires on files in your checkout (rather than strictures\-using
modules you happened to have installed, which was just silly). However, I
hope the above clarifies why a heuristic approach is not only necessary but
desirable from a point of view of providing new users with as much safety as possible,
and will allow any future discussion on the subject to focus on \*(L"how do we
minimise annoyance to people deploying from checkouts intentionally\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
indirect
.IP "\(bu" 4
multidimensional
.IP "\(bu" 4
bareword::filehandles
.SH "COMMUNITY AND SUPPORT"
.IX Header "COMMUNITY AND SUPPORT"
.SS "\s-1IRC\s0 channel"
.IX Subsection "IRC channel"
irc.perl.org #toolchain
.PP
(or bug 'mst' in query on there or freenode)
.SS "Git repository"
.IX Subsection "Git repository"
Gitweb is on http://git.shadowcat.co.uk/ and the clone \s-1URL\s0 is:
.PP
.Vb 1
\&  git clone git://git.shadowcat.co.uk/p5sagit/strictures.git
.Ve
.PP
The web interface to the repository is at:
.PP
.Vb 1
\&  http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=p5sagit/strictures.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Karen Etheridge (cpan:ETHER) <ether@cpan.org>
.PP
Mithaldu \- Christian Walde (cpan:MITHALDU) <walde.christian@gmail.com>
.PP
haarg \- Graham Knop (cpan:HAARG) <haarg@haarg.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 the strictures \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/string.3                                     0100644 0001750 0001750 00000011062 12566166145 022256  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)string.3	8.2 (Berkeley) 12/11/93
.\" $FreeBSD: src/lib/libc/string/string.3,v 1.14 2007/01/09 00:28:12 imp Exp $
.\"
.Dd December 11, 1993
.Dt STRING 3
.Os
.Sh NAME
.Nm index ,
.Nm rindex ,
.Nm stpcpy ,
.Nm strcasecmp ,
.Nm strcat ,
.Nm strchr ,
.Nm strcmp ,
.Nm strcpy ,
.Nm strcspn ,
.Nm strerror ,
.Nm strlen ,
.Nm strncasecmp ,
.Nm strncat ,
.Nm strncmp ,
.Nm strncpy ,
.Nm strpbrk ,
.Nm strrchr ,
.Nm strsep ,
.Nm strspn ,
.Nm strstr ,
.Nm strtok
.Nd string specific functions
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In strings.h
.Ft char *
.Fo index
.Fa "const char *s"
.Fa "int c"
.Fc
.Ft char *
.Fo rindex
.Fa "const char *s"
.Fa "int c"
.Fc
.Ft int
.Fo strcasecmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft int
.Fo strncasecmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "size_t n"
.Fc
.In string.h
.Ft char *
.Fo stpcpy
.Fa "char *dst"
.Fa "const char *src"
.Fc
.Ft char *
.Fo strcat
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fc
.Ft char *
.Fo strchr
.Fa "const char *s"
.Fa "int c"
.Fc
.Ft int
.Fo strcmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft char *
.Fo strcpy
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fc
.Ft size_t
.Fo strcspn
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft char *
.Fo strerror
.Fa "int errnum"
.Fc
.Ft size_t
.Fo strlen
.Fa "const char *s"
.Fc
.Ft char *
.Fo strncat
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fa "size_t n"
.Fc
.Ft int
.Fo strncmp
.Fa "const char *s1"
.Fa "const char *s2"
.Fa "size_t n"
.Fc
.Ft char *
.Fo strncpy
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fa "size_t n"
.Fc
.Ft char *
.Fo strpbrk
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft char *
.Fo strrchr
.Fa "const char *s"
.Fa "int c"
.Fc
.Ft char *
.Fo strsep
.Fa "char **stringp"
.Fa "const char *delim"
.Fc
.Ft size_t
.Fo strspn
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft char *
.Fo strstr
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Ft char *
.Fo strtok
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fc
.Sh DESCRIPTION
The string
functions manipulate strings that are terminated by a
null byte.
.Pp
See the specific manual pages for more information.
For manipulating variable length generic objects as byte
strings (without the null byte check), see
.Xr bstring 3 .
.Pp
Except as noted in their specific manual pages,
the string functions do not test the destination
for size limitations.
.Sh SEE ALSO
.Xr bstring 3 ,
.Xr index 3 ,
.Xr rindex 3 ,
.Xr stpcpy 3 ,
.Xr strcasecmp 3 ,
.Xr strcat 3 ,
.Xr strchr 3 ,
.Xr strcmp 3 ,
.Xr strcpy 3 ,
.Xr strcspn 3 ,
.Xr strerror 3 ,
.Xr strlen 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr strtok 3
.Sh STANDARDS
The
.Fn strcat ,
.Fn strncat ,
.Fn strchr ,
.Fn strrchr ,
.Fn strcmp ,
.Fn strncmp ,
.Fn strcpy ,
.Fn strncpy ,
.Fn strerror ,
.Fn strlen ,
.Fn strpbrk ,
.Fn strspn ,
.Fn strcspn ,
.Fn strstr ,
and
.Fn strtok
functions
conform to
.St -isoC .
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/stringlist.3                                 0100644 0001750 0001750 00000007230 12566166145 023154  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	$NetBSD: stringlist.3,v 1.5 1999/03/22 19:44:46 garbled Exp $
.\"
.\" Copyright (c) 1997, 1999 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This file was contributed to The NetBSD Foundation by Luke Mewburn.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/gen/stringlist.3,v 1.11 2005/02/13 23:45:46 ru Exp $
.\"
.Dd November 28, 1999
.Os
.Dt STRINGLIST 3
.Sh NAME
.Nm stringlist ,
.Nm sl_init ,
.Nm sl_add ,
.Nm sl_free ,
.Nm sl_find
.Nd stringlist manipulation functions
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stringlist.h
.Ft StringList *
.Fn sl_init
.Ft int
.Fn sl_add "StringList *sl" "char *item"
.Ft void
.Fn sl_free "StringList *sl" "int freeall"
.Ft char *
.Fn sl_find "StringList *sl" "char *item"
.Sh DESCRIPTION
The
.Nm
functions manipulate stringlists, which are lists of
strings that extend automatically if necessary.
.Pp
The
.Vt StringList
structure has the following definition:
.Bd -literal -offset indent
typedef struct _stringlist {
	char	**sl_str;
	size_t	  sl_max;
	size_t	  sl_cur;
} StringList;
.Ed
.Pp
.Bl -tag -width "sl_str" -offset indent
.It Va sl_str
a pointer to the base of the array containing the list.
.It Va sl_max
the size of
.Va sl_str .
.It Va sl_cur
the offset in
.Va sl_str
of the current element.
.El
.Pp
The following stringlist manipulation functions are available:
.Bl -tag -width "sl_init()"
.It Fn sl_init
Create a stringlist.
Returns a pointer to a
.Vt StringList ,
or
.Dv NULL
in case of failure.
.It Fn sl_free
Releases memory occupied by
.Fa sl
and the
.Fa sl->sl_str
array.
If
.Fa freeall
is non-zero, then each of the items within
.Fa sl->sl_str
is released as well.
.It Fn sl_add
Add
.Fa item
to
.Fa sl->sl_str
at
.Fa sl->sl_cur ,
extending the size of
.Fa sl->sl_str .
Returns zero upon success, \-1 upon failure.
.It Fn sl_find
Find
.Fa item
in
.Fa sl ,
returning NULL if it is not found.
.El
.Sh SEE ALSO
.Xr free 3 ,
.Xr malloc 3
.Sh HISTORY
The
.Nm
functions appeared in
.Fx 2.2.6
and
.Nx 1.3 .
                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strlcat.3                                    0120777 0001750 0001750 00000000000 12620245063 024173  2strlcpy.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strlcpy.3                                    0100644 0001750 0001750 00000012436 12566166145 022456  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" $OpenBSD: strlcpy.3,v 1.19 2007/05/31 19:19:32 jmc Exp $
.\"
.\" Copyright (c) 1998, 2000 Todd C. Miller <Todd.Miller@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/string/strlcpy.3,v 1.16 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd June 22, 1998
.Dt STRLCPY 3
.Os
.Sh NAME
.Nm strlcpy ,
.Nm strlcat
.Nd size-bounded string copying and concatenation
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fn strlcpy "char * restrict dst" "const char * restrict src" "size_t size"
.Ft size_t
.Fn strlcat "char * restrict dst" "const char * restrict src" "size_t size"
.Sh DESCRIPTION
The
.Fn strlcpy
and
.Fn strlcat
functions copy and concatenate strings respectively.
They are designed
to be safer, more consistent, and less error prone replacements for
.Xr strncpy 3
and
.Xr strncat 3 .
Unlike those functions,
.Fn strlcpy
and
.Fn strlcat
take the full size of the buffer (not just the length) and guarantee to
NUL-terminate the result (as long as
.Fa size
is larger than 0 or, in the case of
.Fn strlcat ,
as long as there is at least one byte free in
.Fa dst ) .
Note that a byte for the NUL should be included in
.Fa size .
Also note that
.Fn strlcpy
and
.Fn strlcat
only operate on true
.Dq C
strings.
This means that for
.Fn strlcpy
.Fa src
must be NUL-terminated and for
.Fn strlcat
both
.Fa src
and
.Fa dst
must be NUL-terminated.
.Pp
The
.Fn strlcpy
function copies up to
.Fa size
- 1 characters from the NUL-terminated string
.Fa src
to
.Fa dst ,
NUL-terminating the result.
.Pp
The
.Fn strlcat
function appends the NUL-terminated string
.Fa src
to the end of
.Fa dst .
It will append at most
.Fa size
- strlen(dst) - 1 bytes, NUL-terminating the result.
.Pp
The source and destination strings should not overlap, as the
behavior is undefined.
.Sh RETURN VALUES
The
.Fn strlcpy
and
.Fn strlcat
functions return the total length of the string they tried to
create.
For
.Fn strlcpy
that means the length of
.Fa src .
For
.Fn strlcat
that means the initial length of
.Fa dst
plus
the length of
.Fa src .
While this may seem somewhat confusing, it was done to make
truncation detection simple.
.Pp
Note however, that if
.Fn strlcat
traverses
.Fa size
characters without finding a NUL, the length of the string is considered
to be
.Fa size
and the destination string will not be NUL-terminated (since there was
no space for the NUL).
This keeps
.Fn strlcat
from running off the end of a string.
In practice this should not happen (as it means that either
.Fa size
is incorrect or that
.Fa dst
is not a proper
.Dq C
string).
The check exists to prevent potential security problems in incorrect code.
.Sh EXAMPLES
The following code fragment illustrates the simple case:
.Bd -literal -offset indent
char *s, *p, buf[BUFSIZ];

\&...

(void)strlcpy(buf, s, sizeof(buf));
(void)strlcat(buf, p, sizeof(buf));
.Ed
.Pp
To detect truncation, perhaps while building a pathname, something
like the following might be used:
.Bd -literal -offset indent
char *dir, *file, pname[MAXPATHLEN];

\&...

if (strlcpy(pname, dir, sizeof(pname)) >= sizeof(pname))
	goto toolong;
if (strlcat(pname, file, sizeof(pname)) >= sizeof(pname))
	goto toolong;
.Ed
.Pp
Since it is known how many characters were copied the first time, things
can be sped up a bit by using a copy instead of an append
.Bd -literal -offset indent
char *dir, *file, pname[MAXPATHLEN];
size_t n;

\&...

n = strlcpy(pname, dir, sizeof(pname));
if (n >= sizeof(pname))
	goto toolong;
if (strlcpy(pname + n, file, sizeof(pname) - n) >= sizeof(pname) - n)
	goto toolong;
.Ed
.Pp
However, one may question the validity of such optimizations, as they
defeat the whole purpose of
.Fn strlcpy
and
.Fn strlcat .
As a matter of fact, the first version of this manual page got it wrong.
.Sh SEE ALSO
.Xr snprintf 3 ,
.Xr strncat 3 ,
.Xr strncpy 3 ,
.Xr wcslcpy 3
.Sh HISTORY
The
.Fn strlcpy
and
.Fn strlcat
functions first appeared in
.Ox 2.4 ,
and made their appearance in
.Fx 3.3 .
                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strlen.3                                     0100644 0001750 0001750 00000005332 12566166145 022262  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strlen.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strlen.3,v 1.9 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd February 28, 2009
.Dt STRLEN 3
.Os
.Sh NAME
.Nm strlen, strnlen
.Nd find length of string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fn strlen "const char *s"
.Ft size_t
.Fn strnlen "const char *s" "size_t maxlen"
.Sh DESCRIPTION
The
.Fn strlen
function
computes the length of the string
.Fa s .
The
.Fn strnlen
function attempts to compute the length of
.Fa s ,
but never scans beyond the first
.Fa maxlen
bytes of
.Fa s .
.Sh RETURN VALUES
The
.Fn strlen
function
returns
the number of characters that precede the
terminating
.Dv NUL
character.
The
.Fn strnlen
function returns either the same result as
.Fn strlen
or
.Fa maxlen ,
whichever is smaller.
.Sh SEE ALSO
.Xr string 3 ,
.Xr wcslen 3 ,
.Xr wcswidth 3
.Sh STANDARDS
The
.Fn strlen
function
conforms to
.St -isoC .
The
.Fn strnlen
function conforms to
.St -p1003.1-2008 .
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strmode.3                                    0100644 0001750 0001750 00000011406 12566166145 022427  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strmode.3	8.3 (Berkeley) 7/28/94
.\" $FreeBSD: src/lib/libc/string/strmode.3,v 1.11 2009/04/14 11:39:56 trasz Exp $
.\"
.Dd July 28, 1994
.Dt STRMODE 3
.Os
.Sh NAME
.Nm strmode
.Nd convert inode status information into a symbolic string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft void
.Fo strmode
.Fa "int mode"
.Fa "char *bp"
.Fc
.Sh DESCRIPTION
The
.Fn strmode
function
converts a file
.Fa mode
(the type and permission information associated with an inode, see
.Xr stat 2 )
into a symbolic string which is stored in the location referenced by
.Fa bp .
This stored string is eleven characters in length plus a trailing
.Dv NUL .
.Pp
The first character is the inode type, and will be one of the following:
.Pp
.Bl -tag -width flag -offset indent -compact
.It \-
regular file
.It b
block special
.It c
character special
.It d
directory
.It l
symbolic link
.It p
fifo
.It s
socket
.It w
whiteout
.It ?
unknown inode type
.El
.Pp
The next nine characters encode three sets of permissions, in three
characters each.
The first three characters are the permissions for the owner of the
file, the second three for the group the file belongs to, and the
third for the ``other'', or default, set of users.
.Pp
Permission checking is done as specifically as possible.
If read permission is denied to the owner of a file in the first set
of permissions, the owner of the file will not be able to read the file.
This is true even if the owner is in the file's group and the group
permissions allow reading or the ``other'' permissions allow reading.
.Pp
If the first character of the three character set is an ``r'', the file is
readable for that set of users; if a dash ``\-'', it is not readable.
.Pp
If the second character of the three character set is a ``w'', the file is
writable for that set of users; if a dash ``\-'', it is not writable.
.Pp
The third character is the first of the following characters that apply:
.Bl -tag -width xxxx
.It S
If the character is part of the owner permissions and the file is not
executable or the directory is not searchable by the owner, and the
set-user-id bit is set.
.It S
If the character is part of the group permissions and the file is not
executable or the directory is not searchable by the group, and the
set-group-id bit is set.
.It T
If the character is part of the other permissions and the file is not
executable or the directory is not searchable by others, and the ``sticky''
.Pq Dv S_ISVTX
bit is set.
.It s
If the character is part of the owner permissions and the file is
executable or the directory searchable by the owner, and the set-user-id
bit is set.
.It s
If the character is part of the group permissions and the file is
executable or the directory searchable by the group, and the set-group-id
bit is set.
.It t
If the character is part of the other permissions and the file is
executable or the directory searchable by others, and the ``sticky''
.Pq Dv S_ISVTX
bit is set.
.It x
The file is executable or the directory is searchable.
.It \-
None of the above apply.
.El
.Pp
The last character will always be a space.
.Sh SEE ALSO
.Xr chmod 1 ,
.Xr find 1 ,
.Xr stat 2 ,
.Xr getmode 3 ,
.Xr setmode 3
.Sh HISTORY
The
.Fn strmode
function first appeared in
.Bx 4.4 .
                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strncasecmp.3                                0120777 0001750 0001750 00000000000 12620245063 025505  2strcasecmp.3                                                                                        ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strncasecmp_l.3                              0120777 0001750 0001750 00000000000 12620245063 026020  2strcasecmp.3                                                                                        ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strncat.3                                    0120777 0001750 0001750 00000000000 12620245063 023775  2strcat.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strncmp.3                                    0120777 0001750 0001750 00000000000 12620245063 024015  2strcmp.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strncpy.3                                    0120777 0001750 0001750 00000000000 12620245063 024045  2strcpy.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strndup.3                                    0120777 0001750 0001750 00000000000 12620245063 024037  2strdup.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strnlen.3                                    0120777 0001750 0001750 00000000000 12620245063 024013  2strlen.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strnstr.3                                    0120777 0001750 0001750 00000000000 12620245063 024077  2strstr.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strpbrk.3                                    0100644 0001750 0001750 00000005075 12566166145 022446  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strpbrk.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strpbrk.3,v 1.9 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd June 4, 1993
.Dt STRPBRK 3
.Os
.Sh NAME
.Nm strpbrk
.Nd locate multiple characters in string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fo strpbrk
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Sh DESCRIPTION
The
.Fn strpbrk
function
locates in the null-terminated string
.Fa s1
the first occurrence of any character in the string
.Fa s2 ,
returning a pointer to this character.
If no characters from
.Fa s2
occur anywhere in
.Fa s1 ,
.Fn strpbrk
returns NULL.
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr strchr 3 ,
.Xr strcspn 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr strtok 3 ,
.Xr wcspbrk 3
.Sh STANDARDS
The
.Fn strpbrk
function
conforms to
.St -isoC .
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strptime.3                                   0100644 0001750 0001750 00000012116 12566166145 022620  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"
.\" Copyright (c) 1997 Joerg Wunsch
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/stdtime/strptime.3,v 1.24 2005/01/20 09:17:04 ru Exp $
.\" "
.Dd January 4, 2003
.Dt STRPTIME 3
.Os
.Sh NAME
.Nm strptime ,
.Nm strptime_l
.Nd parse date and time string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In time.h
.Ft char *
.Fo strptime
.Fa "const char *restrict buf"
.Fa "const char *restrict format"
.Fa "struct tm *restrict tm"
.Fc
.In time.h
.In xlocale.h
.Ft char *
.Fo strptime_l
.Fa "const char *restrict buf"
.Fa "const char *restrict format"
.Fa "struct tm *restrict tm"
.Fa "locale_t loc"
.Fc
.Sh DESCRIPTION
The
.Fn strptime
function parses the string in the buffer
.Fa buf ,
according to the string pointed to by
.Fa format ,
and fills in the elements of the structure pointed to by
.Fa tm .
The resulting values will be relative to the local time zone.
Thus, it can be considered the reverse operation of
.Xr strftime 3 .
.Pp
The
.Fa format
string consists of zero or more conversion specifications and
ordinary characters.
All ordinary characters are matched exactly with the buffer, where
white space in the format string will match any amount of white space
in the buffer.
All conversion specifications are identical to those described in
.Xr strftime 3 .
.Pp
Two-digit year values, including formats
.Fa %y
and
.Fa \&%D ,
are now interpreted as beginning at 1969 per POSIX requirements.
Years 69-00 are interpreted in the 20th century (1969-2000), years
01-68 in the 21st century (2001-2068).
.Pp
If the
.Fa format
string does not contain enough conversion specifications to completely
specify the resulting
.Vt struct tm ,
the unspecified members of
.Va tm
are left untouched.
For example, if
.Fa format
is
.Dq Li "%H:%M:%S" ,
only
.Va tm_hour ,
.Va tm_sec
and
.Va tm_min
will be modified.
If time relative to today is desired, initialize the
.Fa tm
structure with today's date before passing it to
.Fn strptime .
.Pp
While the
.Fn strptime
function uses the current locale, the
.Fn strptime_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
Upon successful completion,
.Fn strptime
returns the pointer to the first character in
.Fa buf
that has not been required to satisfy the specified conversions in
.Fa format .
It returns
.Dv NULL
if one of the conversions failed.
.Sh LEGACY DESCRIPTION
In legacy mode, the
.Fa %Y
format specifier expects exactly 4 digits (leaving any trailing digits for the
next specifier).
.Sh SEE ALSO
.Xr date 1 ,
.Xr scanf 3 ,
.Xr strftime 3 ,
.Xr xlocale 3
.Sh HISTORY
The
.Fn strptime
function appeared in
.Fx 3.0 .
.Sh AUTHORS
The
.Fn strptime
function has been contributed by Powerdog Industries.
.Pp
This man page was written by
.An J\(:org Wunsch .
.Sh BUGS
Both the
.Fa %e
and
.Fa %l
format specifiers may incorrectly scan one too many digits
if the intended values comprise only a single digit
and that digit is followed immediately by another digit.
Both specifiers accept zero-padded values,
even though they are both defined as taking unpadded values.
.Pp
The
.Fa %p
format specifier has no effect unless it is parsed
.Em after
hour-related specifiers.
Specifying
.Fa %l
without
.Fa %p
will produce undefined results.
Note that 12AM
(ante meridiem)
is taken as midnight
and 12PM
(post meridiem)
is taken as noon.
.Pp
The
.Fa %U
and
.Fa %W
format specifiers accept any value within the range 00 to 53
without validating against other values supplied (like month
or day of the year, for example).
.Pp
The
.Fa %Z
format specifier only accepts time zone abbreviations of the local time zone,
or the value "GMT".
This limitation is because of ambiguity due to of the over loading of time
zone abbreviations.
One such example is
.Fa EST
which is both Eastern Standard Time and Eastern Australia Summer Time.
.Pp
The
.Fn strptime
function does not correctly handle multibyte characters in the
.Fa format
argument.
                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strptime_l.3                                 0120777 0001750 0001750 00000000000 12620245063 025050  2strptime.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strrchr.3                                    0120777 0001750 0001750 00000000000 12620245063 024013  2strchr.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strsep.3                                     0100644 0001750 0001750 00000007451 12566166145 022277  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)strsep.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/string/strsep.3,v 1.16 2008/12/05 15:50:59 pjd Exp $
.\"
.Dd December 5, 2008
.Dt STRSEP 3
.Os
.Sh NAME
.Nm strsep
.Nd separate strings
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fn strsep "char **stringp" "const char *delim"
.Sh DESCRIPTION
The
.Fn strsep
function locates, in the string referenced by
.Fa *stringp ,
the first occurrence of any character in the string
.Fa delim
(or the terminating
.Ql \e0
character) and replaces it with a
.Ql \e0 .
The location of the next character after the delimiter character
(or NULL, if the end of the string was reached) is stored in
.Fa *stringp .
The original value of
.Fa *stringp
is returned.
.Pp
An
.Dq empty
field (i.e., a character in the string
.Fa delim
occurs as the first character of
.Fa *stringp )
can be detected by comparing the location referenced by the returned pointer
to
.Ql \e0 .
.Pp
If
.Fa *stringp
is initially
.Dv NULL ,
.Fn strsep
returns
.Dv NULL .
.Sh EXAMPLES
The following uses
.Fn strsep
to parse a string, and prints each token in separate line:
.Bd -literal -offset indent
char *token, *string, *tofree;

tofree = string = strdup("abc,def,ghi");
assert(string != NULL);

while ((token = strsep(&string, ",")) != NULL)
	printf("%s\en", token);

free(tofree);
.Ed
.Pp
The following uses
.Fn strsep
to parse a string, containing tokens delimited by white space, into an
argument vector:
.Bd -literal -offset indent
char **ap, *argv[10], *inputstring;

for (ap = argv; (*ap = strsep(&inputstring, " \et")) != NULL;)
	if (**ap != '\e0')
		if (++ap >= &argv[10])
			break;
.Ed
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr strchr 3 ,
.Xr strcspn 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr strtok 3
.Sh HISTORY
The
.Fn strsep
function
is intended as a replacement for the
.Fn strtok
function.
While the
.Fn strtok
function should be preferred for portability reasons (it conforms to
.St -isoC )
it is unable to handle empty fields, i.e., detect fields delimited by
two adjacent delimiter characters, or to be used for more than a single
string at a time.
The
.Fn strsep
function first appeared in
.Bx 4.4 .
                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strsignal.3                                  0120777 0001750 0001750 00000000000 12620245063 024462  2psignal.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strspn.3                                     0100644 0001750 0001750 00000005305 12566166145 022304  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strspn.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strspn.3,v 1.11 2009/04/07 13:42:53 trasz Exp $
.\"
.Dd June 4, 1993
.Dt STRSPN 3
.Os
.Sh NAME
.Nm strspn
.Nd span a string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fo strspn
.Fa "const char *s1"
.Fa "const char *s2"
.Fc
.Sh DESCRIPTION
The
.Fn strspn
function
spans the initial part of the null-terminated string
.Fa s1 ,
as long as the characters from
.Fa s1
occur in the null-terminated string
.Fa s2 .
In other words, it computes the string array index in
.Fa s1
of the first character of
.Fa s1
which is not in
.Fa s2 ,
else the index of the first null character.
.Sh RETURN VALUES
The
.Fn strspn
function
returns the number of characters spanned.
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr strchr 3 ,
.Xr strcspn 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strstr 3 ,
.Xr strtok 3 ,
.Xr wcsspn 3
.Sh STANDARDS
The
.Fn strspn
function
conforms to
.St -isoC .
                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strstr.3                                     0100644 0001750 0001750 00000010122 12566166145 022305  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 2001 Mike Barcroft <mike@FreeBSD.org>
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strstr.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD$
.\"
.Dd October 11, 2001
.Dt STRSTR 3
.Os
.Sh NAME
.Nm strstr , strcasestr , strnstr
.Nd locate a substring in a string
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fn strstr "const char *big" "const char *little"
.Ft char *
.Fn strcasestr "const char *big" "const char *little"
.Ft char *
.Fn strnstr "const char *big" "const char *little" "size_t len"
.In string.h
.In xlocale.h
.Ft char *
.Fn strcasestr_l "const char *big" "const char *little" "locale_t loc"
.Sh DESCRIPTION
The
.Fn strstr
function
locates the first occurrence of the null-terminated string
.Fa little
in the null-terminated string
.Fa big .
.Pp
The
.Fn strcasestr
function is similar to
.Fn strstr ,
but ignores the case of both strings.
.Pp
The
.Fn strnstr
function
locates the first occurrence of the null-terminated string
.Fa little
in the string
.Fa big ,
where not more than
.Fa len
characters are searched.
Characters that appear after a
.Ql \e0
character are not searched.
Since the
.Fn strnstr
function is a
.Fx
specific API, it should only be used when portability is not a concern.
.Pp
While the
.Fn strcasestr
function uses the current locale, the
.Fn strcasestr_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
If
.Fa little
is an empty string,
.Fa big
is returned;
if
.Fa little
occurs nowhere in
.Fa big ,
.Dv NULL
is returned;
otherwise a pointer to the first character of the first occurrence of
.Fa little
is returned.
.Sh EXAMPLES
The following sets the pointer
.Va ptr
to the
.Qq Li Bar Baz
portion of
.Va largestring :
.Bd -literal -offset indent
const char *largestring = "Foo Bar Baz";
const char *smallstring = "Bar";
char *ptr;

ptr = strstr(largestring, smallstring);
.Ed
.Pp
The following sets the pointer
.Va ptr
to
.Dv NULL ,
because only the first 4 characters of
.Va largestring
are searched:
.Bd -literal -offset indent
const char *largestring = "Foo Bar Baz";
const char *smallstring = "Bar";
char *ptr;

ptr = strnstr(largestring, smallstring, 4);
.Ed
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr memmem 3 ,
.Xr strchr 3 ,
.Xr strcspn 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strtok 3 ,
.Xr wcsstr 3 ,
.Xr xlocale 3
.Sh STANDARDS
The
.Fn strstr
function
conforms to
.St -isoC .
                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtod.3                                     0100644 0001750 0001750 00000014165 12566166145 022276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtod.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdlib/strtod.3,v 1.22 2007/12/16 21:19:28 das Exp $
.\"
.Dd March 2, 2003
.Dt STRTOD 3
.Os
.Sh NAME
.Nm strtod , strtof , strtold
.Nd convert
.Tn ASCII
string to floating point
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdlib.h
.Ft double
.Fo strtod
.Fa "const char *restrict nptr"
.Fa "char **restrict endptr"
.Fc
.Ft float
.Fo strtof
.Fa "const char *restrict nptr"
.Fa "char **restrict endptr"
.Fc
.Ft "long double"
.Fo strtold
.Fa "const char *restrict nptr"
.Fa "char **restrict endptr"
.Fc
.Sh DESCRIPTION
These conversion
functions convert the initial portion of the string
pointed to by
.Fa nptr
to
.Vt double ,
.Vt float ,
and
.Vt "long double"
representation, respectively.
.Pp
The expected form of the string
is an optional plus (``+'') or minus (``\-'') sign,
followed by either:
.Bl -bullet
.It
a decimal significand, consisting of a sequence of decimal digits
(optionally containing a decimal-point character) or
.It
a hexadecimal significand, consisting of a ``0X'' or ``0x'' followed
by a sequence of hexadecimal digits
(optionally containing a decimal-point character).
.El
.Pp
In both cases, the significand may be optionally followed by an
exponent.
An exponent consists of an ``E'' or ``e'' (for decimal
constants) or a ``P'' or ``p'' (for hexadecimal constants),
followed by an optional plus or minus sign, followed by a
sequence of decimal digits.
For decimal constants, the exponent indicates the power of 10 by
which the significand should be scaled.
For hexadecimal constants, the scaling is instead done by powers
of 2.
.Pp
Alternatively, if the portion of the string following the optional
plus or minus sign begins with
.Dq INFINITY
or
.Dq NAN ,
ignoring case, it is interpreted as an infinity or a quiet \*(Na,
respectively.
The syntax
.Dq Xo Pf NAN( Ar "s" ) Xc ,
where
.Ar s
is an alphanumeric string, produces the same value as the call
.Fo nan
.Qq Ar s Ns
.Fc
(respectively,
.Fo nanf
.Qq Ar s Ns
.Fc
and
.Fo nanl
.Qq Ar s Ns
.Fc . )
.Pp
In any of the above cases, leading white-space characters in the
string (as defined by the
.Xr isspace 3
function) are skipped.
The decimal point
character is defined in the program's locale (category
.Dv LC_NUMERIC ) .
.Pp
Extended locale versions of these functions are documented in
.Xr strtod_l 3 .
See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
The
.Fn strtod ,
.Fn strtof ,
and
.Fn strtold
functions return the converted value, if any.
.Pp
If
.Fa endptr
is not
.Dv NULL ,
a pointer to the character after the last character used
in the conversion is stored in the location referenced by
.Fa endptr .
.Pp
If no conversion is performed, zero is returned and the value of
.Fa nptr
is stored in the location referenced by
.Fa endptr .
.Pp
If the correct value would cause overflow, plus or minus
.Dv HUGE_VAL ,
.Dv HUGE_VALF ,
or
.Dv HUGE_VALL
is returned (according to the sign and type of the return value), and
.Er ERANGE
is stored in
.Va errno .
If the correct value would cause underflow, zero is
returned and
.Er ERANGE
is stored in
.Va errno .
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er ERANGE
Overflow or underflow occurred.
.El
.Sh SEE ALSO
.Xr atof 3 ,
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr nan 3 ,
.Xr strtod_l 3 ,
.Xr strtol 3 ,
.Xr strtoul 3 ,
.Xr wcstod 3
.Sh STANDARDS
The
.Fn strtod
function
conforms to
.St -isoC-99 .
.Sh AUTHORS
The author of this software is
.An David M. Gay .
.Pp
.Bd -literal
Copyright (c) 1998 by Lucent Technologies
All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that the copyright notice and this
permission notice and warranty disclaimer appear in supporting
documentation, and that the name of Lucent or any of its entities
not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.

LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY
SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.
.Ed
                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtod_l.3                                   0100644 0001750 0001750 00000005622 12566166145 022607  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtod.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdlib/strtod.3,v 1.19 2003/05/22 13:02:28 ru Exp $
.\"
.Dd March 11, 2005
.Dt STRTOD_L 3
.Os
.Sh NAME
.Nm strtod_l , strtof_l , strtold_l
.Nd convert
.Tn ASCII
string to floating point
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdlib.h
.In xlocale.h
.Ft double
.Fn strtod_l "const char * restrict nptr" "char ** restrict endptr" "locale_t loc"
.Ft float
.Fn strtof_l "const char * restrict nptr" "char ** restrict endptr" "locale_t loc"
.Ft "long double"
.Fn strtold_l "const char * restrict nptr" "char ** restrict endptr" "locale_t loc"
.Sh DESCRIPTION
The
.Fn strtod_l ,
.Fn strtof_l ,
and
.Fn strtold_l
functions are extended locale versions of the
.Fn strtod ,
.Fn strtof ,
and
.Fn strtold
functions, respectively.
Refer to their manual pages for details.
Also, see
.Xr xlocale 3 for more information about extended locales.
.Sh SEE ALSO
.Xr strtod 3 ,
.Xr xlocale 3
                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtof.3                                     0120777 0001750 0001750 00000000000 12620245063 023657  2strtod.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtof_l.3                                   0120777 0001750 0001750 00000000000 12620245063 024505  2strtod_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtofflags.3                                0100644 0001750 0001750 00000006464 12566166145 023320  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)setmode.3	8.2 (Berkeley) 4/28/95
.\" $FreeBSD: src/lib/libc/gen/strtofflags.3,v 1.7 2001/10/01 16:08:51 ru Exp $
.\"
.Dd January 1, 2000
.Dt STRTOFFLAGS 3
.Os
.Sh NAME
.Nm fflagstostr ,
.Nm strtofflags
.Nd convert between file flag bits and their string names
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft char *
.Fo fflagstostr
.Fa "unsigned long flags"
.Fc
.Ft int
.Fo strtofflags
.Fa "char **stringp"
.Fa "unsigned long *setp"
.Fa "unsigned long *clrp"
.Fc
.Sh DESCRIPTION
The
.Fn fflagstostr
function returns a comma separated string of the file flags represented by
.Fa flags .
If no flags are set a zero length string is returned.
.Pp
If memory cannot be allocated for the return value,
.Fn fflagstostr
returns
.Dv NULL .
.Pp
The value returned from
.Fn fflagstostr
is obtained from
.Fn malloc
and should be returned to the system with
.Fn free
when the program is done with it.
.Pp
The
.Fn strtofflags
function takes a string of file flags, as described in
.Xr chflags 1 ,
parses it, and returns the 'set' flags and 'clear' flags
such as would be given as arguments to
.Xr chflags 2 .
On success
.Fn strtofflags
returns 0, otherwise it returns non-zero and
.Fa stringp
is left pointing to the offending token.
.Sh ERRORS
The
.Fn fflagstostr
function
may fail and set errno for any of the errors specified for the library
routine
.Xr malloc 3 .
.Sh SEE ALSO
.Xr chflags 1 ,
.Xr chflags 2 ,
.Xr malloc 3
.Sh HISTORY
The
.Fn fflagstostr
and
.Fn strtofflags
functions first appeared in
.Fx 4.0 .
                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoimax.3                                  0120777 0001750 0001750 00000000000 12620245063 024400  2strtol.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoimax_l.3                                0120777 0001750 0001750 00000000000 12620245063 025226  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtok.3                                     0100644 0001750 0001750 00000011363 12566166145 022302  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1998 Softweyr LLC.  All rights reserved.
.\"
.\" strtok_r, from Berkeley strtok
.\" Oct 13, 1998 by Wes Peters <wes@softweyr.com>
.\"
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notices, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above
.\"    copyright notices, this list of conditions and the following
.\"    disclaimer in the documentation and/or other materials provided
.\"    with the distribution.
.\"
.\" 4. Neither the name of Softweyr LLC, the University nor the names
.\"    of its contributors may be used to endorse or promote products
.\"    derived from this software without specific prior written
.\"    permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY SOFTWEYR LLC, THE REGENTS AND
.\" CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL SOFTWEYR LLC, THE REGENTS, OR
.\" CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtok.3	8.2 (Berkeley) 2/3/94
.\" $FreeBSD: src/lib/libc/string/strtok.3,v 1.26 2007/12/12 18:33:06 wes Exp $
.\"
.Dd November 27, 1998
.Dt STRTOK 3
.Os
.Sh NAME
.Nm strtok , strtok_r
.Nd string tokens
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft char *
.Fo strtok
.Fa "char *restrict str"
.Fa "const char *restrict sep"
.Fc
.Ft char *
.Fo strtok_r
.Fa "char *restrict str"
.Fa "const char *restrict sep"
.Fa "char **restrict lasts"
.Fc
.Sh DESCRIPTION
.Bf -symbolic
This interface is obsoleted by
.Xr strsep 3 .
.Ef
.Pp
The
.Fn strtok
function
is used to isolate sequential tokens in a null-terminated string,
.Fa str .
These tokens are separated in the string by at least one of the
characters in
.Fa sep .
The first time that
.Fn strtok
is called,
.Fa str
should be specified; subsequent calls, wishing to obtain further tokens
from the same string, should pass a null pointer instead.
The separator string,
.Fa sep ,
must be supplied each time, and may change between calls.
.Pp
The implementation will behave as if no library function calls
.Fn strtok .
.Pp
The
.Fn strtok_r
function is a reentrant version of
.Fn strtok .
The context pointer
.Fa last
must be provided on each call.
The
.Fn strtok_r
function
may also be used to nest two parsing loops within one another, as
long as separate context pointers are used.
.Pp
The
.Fn strtok
and
.Fn strtok_r
functions
return a pointer to the beginning of each subsequent token in the string,
after replacing the token itself with a
.Dv NUL
character.
When no more tokens remain, a null pointer is returned.
.Sh EXAMPLES
The following uses
.Fn strtok_r
to parse two strings using separate contexts:
.Bd -literal
char test[80], blah[80];
char *sep = "\e\e/:;=-";
char *word, *phrase, *brkt, *brkb;

strcpy(test, "This;is.a:test:of=the/string\e\etokenizer-function.");

for (word = strtok_r(test, sep, &brkt);
     word;
     word = strtok_r(NULL, sep, &brkt))
{
    strcpy(blah, "blah:blat:blab:blag");

    for (phrase = strtok_r(blah, sep, &brkb);
         phrase;
         phrase = strtok_r(NULL, sep, &brkb))
    {
        printf("So far we're at %s:%s\en", word, phrase);
    }
}
.Ed
.Sh SEE ALSO
.Xr memchr 3 ,
.Xr strchr 3 ,
.Xr strcspn 3 ,
.Xr strpbrk 3 ,
.Xr strrchr 3 ,
.Xr strsep 3 ,
.Xr strspn 3 ,
.Xr strstr 3 ,
.Xr wcstok 3
.Sh STANDARDS
The
.Fn strtok
function
conforms to
.St -isoC .
.Sh AUTHORS
.An Wes Peters ,
Softweyr LLC:
.Aq wes@softweyr.com
.Pp
Based on the
.Fx 3.0
implementation.
.Sh BUGS
The System V
.Fn strtok ,
if handed a string containing only delimiter characters,
will not alter the next starting point, so that a call to
.Fn strtok
with a different (or empty) delimiter string
may return a
.Pf non- Dv NULL
value.
Since this implementation always alters the next starting point,
such a sequence of calls would always return
.Dv NULL .
                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtok_r.3                                   0120777 0001750 0001750 00000000000 12620245063 024214  2strtok.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtol.3                                     0100644 0001750 0001750 00000013226 12566166145 022303  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtol.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdlib/strtol.3,v 1.23 2007/04/10 11:17:00 ru Exp $
.\"
.Dd November 28, 2001
.Dt STRTOL 3
.Os
.Sh NAME
.Nm strtoimax ,
.Nm strtol ,
.Nm strtoll ,
.Nm strtoq
.Nd "convert a string value to a"
.Vt long , "long long" , intmax_t
or
.Vt quad_t
integer
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In inttypes.h
.Ft intmax_t
.Fo strtoimax
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.In stdlib.h
.Ft long
.Fo strtol
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.Ft long long
.Fo strtoll
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.In sys/types.h
.In stdlib.h
.In limits.h
.Ft quad_t
.Fo strtoq
.Fa "const char *str"
.Fa "char **endptr"
.Fa "int base"
.Fc
.Sh DESCRIPTION
The
.Fn strtol
function
converts the string in
.Fa str
to a
.Vt long
value.
The
.Fn strtoll
function
converts the string in
.Fa str
to a
.Vt "long long"
value.
The
.Fn strtoimax
function
converts the string in
.Fa str
to an
.Vt intmax_t
value.
The
.Fn strtoq
function
converts the string in
.Fa str
to a
.Vt quad_t
value.
The conversion is done according to the given
.Fa base ,
which must be between 2 and 36 inclusive,
or be the special value 0.
.Pp
The string may begin with an arbitrary amount of white space
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16,
the string may then include a
.Dq Li 0x
prefix,
and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to a
.Vt long , "long long" , intmax_t
or
.Vt quad_t
value in the obvious manner,
stopping at the first character which is not a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case
represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is not
.Dv NULL ,
.Fn strtol
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtol
stores the original value of
.Fa str
in
.Fa *endptr .
(Thus, if
.Fa *str
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Pp
Extended locale versions of these functions are documented in
.Xr strtol_l 3 .
See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
The
.Fn strtol ,
.Fn strtoll ,
.Fn strtoimax ,
and
.Fn strtoq
functions
return the result of the conversion,
unless the value would underflow or overflow.
If no conversion could be performed, 0 is returned and
the global variable
.Va errno
is set to
.Er EINVAL
(the last feature is not portable across all platforms).
If an overflow or underflow occurs,
.Va errno
is set to
.Er ERANGE
and the function return value is clamped according
to the following table.
.Bl -column -offset indent ".Fn strtoimax" ".Dv INTMAX_MIN" ".Dv INTMAX_MAX"
.It Sy Function Ta Sy underflow Ta Sy overflow
.It Fn strtol Ta Dv LONG_MIN Ta Dv LONG_MAX
.It Fn strtoll Ta Dv LLONG_MIN Ta Dv LLONG_MAX
.It Fn strtoimax Ta Dv INTMAX_MIN Ta Dv INTMAX_MAX
.It Fn strtoq Ta Dv LLONG_MIN Ta Dv LLONG_MAX
.El
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The value of
.Fa base
is not supported or
no conversion could be performed
(the last feature is not portable across all platforms).
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped.
.El
.Sh LEGACY SYNOPSIS
.Fd #include <stdlib.h>
.Fd #include <limits.h>
.Pp
.In limits.h
is necessary for the
.Fn strtol
and
.Fn strtoll
functions.
.Sh SEE ALSO
.Xr atof 3 ,
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr strtod 3 ,
.Xr strtol_l 3 ,
.Xr strtoul 3 ,
.Xr wcstol 3 ,
.Xr compat 5
.Sh STANDARDS
The
.Fn strtol
function
conforms to
.St -isoC .
The
.Fn strtoll
and
.Fn strtoimax
functions
conform to
.St -isoC-99 .
The
.Bx
.Fn strtoq
function is deprecated.
                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtol_l.3                                   0100644 0001750 0001750 00000007622 12566166145 022621  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtol.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdlib/strtol.3,v 1.19 2002/10/10 04:31:57 tjr Exp $
.\"
.Dd March 11, 2005
.Dt STRTOL_L 3
.Os
.Sh NAME
.Nm strtol_l , strtoll_l , strtoimax_l , strtoq_l ,
.Nm strtoul_l , strtoull_l , strtoumax_l , strtouq_l
.Nd "convert a string value to a"
.Vt long , "long long" , intmax_t , quad_t
.Vt "unsigned long" , "unsigned long long" , uintmax_t ,
or
.Vt u_quad_t
integer
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdlib.h
.In limits.h
.In xlocale.h
.Ft long
.Fn strtol_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.Ft long long
.Fn strtoll_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.Ft "unsigned long"
.Fn strtoul_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.Ft "unsigned long long"
.Fn strtoull_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.In inttypes.h
.In xlocale.h
.Ft intmax_t
.Fn strtoimax_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.Ft uintmax_t
.Fn strtoumax_l "const char * restrict nptr" "char ** restrict endptr" "int base" "locale_t loc"
.In sys/types.h
.In stdlib.h
.In limits.h
.In xlocale.h
.Ft quad_t
.Fn strtoq_l "const char *nptr" "char **endptr" "int base" "locale_t loc"
.Ft u_quad_t
.Fn strtouq_l "const char *nptr" "char **endptr" "int base" "locale_t loc"
.Sh DESCRIPTION
The
.Fn strtol_l ,
.Fn strtoll_l ,
.Fn strtoimax_l ,
.Fn strtoq_l ,
.Fn strtoul_l ,
.Fn strtoull_l ,
.Fn strtoumax_l ,
and
.Fn strtouq_l
functions are extended locale versions of the
.Fn strtol ,
.Fn strtoll ,
.Fn strtoimax ,
.Fn strtoq ,
.Fn strtoul ,
.Fn strtoull ,
.Fn strtoumax ,
and
.Fn strtouq
functions, respectively.
Refer to their manual pages for details.
Also, see
.Xr xlocale 3 for more information about extended locales.
.Sh SEE ALSO
.Xr strtol 3 ,
.Xr strtoul 3 ,
.Xr xlocale 3
                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtold.3                                    0120777 0001750 0001750 00000000000 12620245063 024031  2strtod.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtold_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024657  2strtod_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoll.3                                    0120777 0001750 0001750 00000000000 12620245063 024051  2strtol.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoll_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024677  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoq.3                                     0120777 0001750 0001750 00000000000 12620245063 023702  2strtol.3                                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoq_l.3                                   0120777 0001750 0001750 00000000000 12620245063 024530  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoul.3                                    0100644 0001750 0001750 00000012724 12566166145 022472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtoul.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/stdlib/strtoul.3,v 1.23 2007/01/09 00:28:10 imp Exp $
.\"
.Dd November 28, 2001
.Dt STRTOUL 3
.Os
.Sh NAME
.Nm strtoul ,
.Nm strtoull ,
.Nm strtoumax ,
.Nm strtouq
.Nd "convert a string to an"
.Vt "unsigned long" , "unsigned long long" , uintmax_t ,
or
.Vt u_quad_t
integer
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdlib.h
.Ft "unsigned long"
.Fo strtoul
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.Ft "unsigned long long"
.Fo strtoull
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.In inttypes.h
.Ft uintmax_t
.Fo strtoumax
.Fa "const char *restrict str"
.Fa "char **restrict endptr"
.Fa "int base"
.Fc
.In sys/types.h
.In stdlib.h
.In limits.h
.Ft u_quad_t
.Fo strtouq
.Fa "const char *str"
.Fa "char **endptr"
.Fa "int base"
.Fc
.Sh DESCRIPTION
The
.Fn strtoul
function
converts the string in
.Fa str
to an
.Vt "unsigned long"
value.
The
.Fn strtoull
function
converts the string in
.Fa str
to an
.Vt "unsigned long long"
value.
The
.Fn strtoumax
function
converts the string in
.Fa str
to an
.Vt uintmax_t
value.
The
.Fn strtouq
function
converts the string in
.Fa str
to a
.Vt u_quad_t
value.
The conversion is done according to the given
.Fa base ,
which must be between 2 and 36 inclusive,
or be the special value 0.
.Pp
The string may begin with an arbitrary amount of white space
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16,
the string may then include a
.Dq Li 0x
prefix,
and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to an
.Vt "unsigned long"
value in the obvious manner,
stopping at the end of the string
or at the first character that does not produce a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case
represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is not
.Dv NULL ,
.Fn strtoul
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtoul
stores the original value of
.Fa str
in
.Fa *endptr .
(Thus, if
.Fa *str
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtoul ,
.Fn strtoull ,
.Fn strtoumax
and
.Fn strtouq
functions
return either the result of the conversion
or, if there was a leading minus sign,
the negation of the result of the conversion,
unless the original (non-negated) value would overflow;
in the latter case,
.Fn strtoul
returns
.Dv ULONG_MAX ,
.Fn strtoull
returns
.Dv ULLONG_MAX ,
.Fn strtoumax
returns
.Dv UINTMAX_MAX ,
and
.Fn strtouq
returns
.Dv ULLONG_MAX .
In all cases,
.Va errno
is set to
.Er ERANGE .
If no conversion could be performed, 0 is returned and
the global variable
.Va errno
is set to
.Er EINVAL
(the last feature is not portable across all platforms).
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The value of
.Fa base
is not supported or
no conversion could be performed
(the last feature is not portable across all platforms).
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped.
.El
.Sh LEGACY SYNOPSIS
.Fd #include <stdlib.h>
.Fd #include <limits.h>
.Pp
.In limits.h
is necessary for the
.Fn strtoul
and
.Fn strtoull
functions.
.Sh SEE ALSO
.Xr strtol 3 ,
.Xr strtol_l 3 ,
.Xr strtonum 3 ,
.Xr wcstoul 3 ,
.Xr compat 5
.Sh STANDARDS
The
.Fn strtoul
function
conforms to
.St -isoC .
The
.Fn strtoull
and
.Fn strtoumax
functions
conform to
.St -isoC-99 .
The
.Bx
.Fn strtouq
function is deprecated.
                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoul_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024710  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoull.3                                   0120777 0001750 0001750 00000000000 12620245063 024423  2strtoul.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoull_l.3                                 0120777 0001750 0001750 00000000000 12620245063 025064  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoumax.3                                  0120777 0001750 0001750 00000000000 12620245063 024601  2strtoul.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtoumax_l.3                                0120777 0001750 0001750 00000000000 12620245063 025242  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtouq.3                                    0120777 0001750 0001750 00000000000 12620245063 024254  2strtoul.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strtouq_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024715  2strtol_l.3                                                                                          ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strunvis.3                                   0120777 0001750 0001750 00000000000 12620245063 024060  2unvis.3                                                                                             ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strunvisx.3                                  0120777 0001750 0001750 00000000000 12620245063 024250  2unvis.3                                                                                             ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strvis.3                                     0120777 0001750 0001750 00000000000 12620245063 023152  2vis.3                                                                                               ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strvisx.3                                    0120777 0001750 0001750 00000000000 12620245063 023342  2vis.3                                                                                               ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strxfrm.3                                    0100644 0001750 0001750 00000006530 12566166145 022461  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strxfrm.3	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/string/strxfrm.3,v 1.18 2007/01/09 00:28:12 imp Exp $
.\"
.Dd June 4, 1993
.Dt STRXFRM 3
.Os
.Sh NAME
.Nm strxfrm ,
.Nm strxfrm_l
.Nd transform a string under locale
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In string.h
.Ft size_t
.Fo strxfrm
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fa "size_t n"
.Fc
.In string.h
.In xlocale.h
.Ft size_t
.Fo strxfrm_l
.Fa "char *restrict s1"
.Fa "const char *restrict s2"
.Fa "size_t n"
.Fa "locale_t loc"
.Fc
.Sh DESCRIPTION
The
.Fn strxfrm
function transforms a null-terminated string pointed to by
.Fa s2
according to the current locale collation if any,
then copies the transformed string
into
.Fa s1 .
Not more than
.Fa n
characters are copied into
.Fa s1 ,
including the terminating null character added.
If
.Fa n
is set to 0
(it helps to determine an actual size needed
for transformation),
.Fa s1
is permitted to be a NULL pointer.
.Pp
Comparing two strings using
.Fn strcmp
after
.Fn strxfrm
is equal to comparing
two original strings with
.Fn strcoll .
.Pp
Although the
.Fn strxfrm
function uses the current locale, the
.Fn strxfrm_l
function may be passed a locale directly. See
.Xr xlocale 3
for more information.
.Sh RETURN VALUES
Upon successful completion,
.Fn strxfrm
returns the length of the transformed string not including
the terminating null character.
If this value is
.Fa n
or more, the contents of
.Fa s1
are indeterminate.
.Sh SEE ALSO
.Xr setlocale 3 ,
.Xr strcmp 3 ,
.Xr strcoll 3 ,
.Xr wcsxfrm 3 ,
.Xr xlocale 3
.Sh STANDARDS
The
.Fn strxfrm
function
conforms to
.St -isoC .
                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/strxfrm_l.3                                  0120777 0001750 0001750 00000000000 12620245063 024544  2strxfrm.3                                                                                           ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/subpad.3x                                    0100644 0001750 0001750 00000016061 12566174421 022416  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"***************************************************************************
.\" Copyright (c) 1998-2004,2005 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_pad.3x,v 1.14 2005/05/15 16:18:43 tom Exp $
.TH curs_pad 3X ""
.na
.hy 0
.SH NAME
\fBnewpad\fR,
\fBsubpad\fR,
\fBprefresh\fR,
\fBpnoutrefresh\fR,
\fBpechochar\fR,
\fBpecho_wchar\fR - create and display \fBcurses\fR pads
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBWINDOW *newpad(int nlines, int ncols);\fR
.br
\fBWINDOW *subpad(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBint prefresh(WINDOW *pad, int pminrow, int pmincol,\fR
      \fBint sminrow, int smincol, int smaxrow, int smaxcol);\fR
.br
\fBint pnoutrefresh(WINDOW *pad, int pminrow, int pmincol,\fR
      \fBint sminrow, int smincol, int smaxrow, int smaxcol);\fR
.br
\fBint pechochar(WINDOW *pad, chtype ch);\fR
.br
\fBint pecho_wchar(WINDOW *pad, const cchar_t *wch);\fR
.SH DESCRIPTION
The \fBnewpad\fR routine creates and returns a pointer to a new pad data
structure with the given number of lines, \fInlines\fR, and columns,
\fIncols\fR.
A pad is like a window, except that it is not restricted by the
screen size, and is not necessarily associated with a particular part of the
screen.
Pads can be used when a large window is needed, and only a part of the
window will be on the screen at one time.
Automatic refreshes of pads
(e.g., from scrolling or echoing of input) do not occur.
It is not
legal to call \fBwrefresh\fR with a \fIpad\fR as an argument; the routines
\fBprefresh\fR or \fBpnoutrefresh\fR should be called instead.
Note that these
routines require additional parameters to specify the part of the pad to be
displayed and the location on the screen to be used for the display.
.PP
The \fBsubpad\fR routine creates and returns a pointer to a subwindow within a
pad with the given number of lines, \fInlines\fR, and columns, \fIncols\fR.
Unlike \fBsubwin\fR, which uses screen coordinates, the window is at position
(\fIbegin\fR_\fIx\fR\fB,\fR \fIbegin\fR_\fIy\fR) on the pad.
The window is
made in the middle of the window \fIorig\fR, so that changes made to one window
affect both windows.
During the use of this routine, it will often be
necessary to call \fBtouchwin\fR or \fBtouchline\fR on \fIorig\fR before
calling \fBprefresh\fR.
.PP
The \fBprefresh\fR and \fBpnoutrefresh\fR routines are analogous to
\fBwrefresh\fR and \fBwnoutrefresh\fR except that they relate to pads instead
of windows.
The additional parameters are needed to indicate what part of the
pad and screen are involved.
\fIpminrow\fR and \fIpmincol\fR specify the upper
left-hand corner of the rectangle to be displayed in the pad.
\fIsminrow\fR,
\fIsmincol\fR, \fIsmaxrow\fR, and \fIsmaxcol\fR specify the edges of the
rectangle to be displayed on the screen.
The lower right-hand corner of the
rectangle to be displayed in the pad is calculated from the screen coordinates,
since the rectangles must be the same size.
Both rectangles must be entirely
contained within their respective structures.
Negative values of
\fIpminrow\fR, \fIpmincol\fR, \fIsminrow\fR, or \fIsmincol\fR are treated as if
they were zero.
.PP
The \fBpechochar\fR routine is functionally equivalent to a call to \fBaddch\fR
followed by a call to \fBrefresh\fR, a call to \fBwaddch\fR followed by a call
to \fBwrefresh\fR, or a call to \fBwaddch\fR followed by a call to
\fBprefresh\fR.
The knowledge that only a single character is being output is
taken into consideration and, for non-control characters, a considerable
performance gain might be seen by using these routines instead of their
equivalents.
In the case of \fBpechochar\fR, the last location of the pad on
the screen is reused for the arguments to \fBprefresh\fR.
.PP
The \fBpecho_wchar\fR function is the analogous wide-character
form of \fBpechochar\fR.
It outputs one character to a pad and immediately refreshes the pad.
It does this by a call to \fBwadd_wch\fR followed by a call to \fBprefresh\fR.
.SH RETURN VALUE
Routines that return an integer return \fBERR\fR upon failure and \fBOK\fR
(SVr4 only specifies "an integer value other than \fBERR\fR") upon successful
completion.
.PP
Routines that return pointers return \fBNULL\fR on error, and set \fBerrno\fR
to \fBENOMEM\fR.
.PP
X/Open does not define any error conditions.
In this implementation
.RS
.TP 5
\fBprefresh\fP and \fBpnoutrefresh\fP
return an error
if the window pointer is null, or
if the window is not really a pad or
if the area to refresh extends off-screen or
if the minimum coordinates are greater than the maximum.
.TP 5
\fBpechochar\fP
returns an error
if the window is not really a pad, and the associated call
to \fBwechochar\fP returns an error.
.TP 5
\fBpecho_wchar\fP
returns an error
if the window is not really a pad, and the associated call
to \fBwecho_wchar\fP returns an error.
.RE
.SH NOTES
Note that \fBpechochar\fR may be a macro.
.SH PORTABILITY
The XSI Curses standard, Issue 4 describes these functions.
.SH SEE ALSO
\fBcurses\fR(3X), \fBcurs_refresh\fR(3X), \fBcurs_touch\fR(3X), \fBcurs_addch\fR(3X).
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/subs.3pm                                     0100644 0001750 0001750 00000011214 12566207465 022261  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "subs 3pm"
.TH subs 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
subs \- Perl pragma to predeclare sub names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use subs qw(frob);
\&    frob 3..10;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This will predeclare all the subroutine whose names are 
in the list, allowing you to use them without parentheses
even before they're declared.
.PP
Unlike pragmas that affect the \f(CW$^H\fR hints variable, the \f(CW\*(C`use vars\*(C'\fR and
\&\f(CW\*(C`use subs\*(C'\fR declarations are not BLOCK-scoped.  They are thus effective
for the entire package in which they appear.  You may not rescind such
declarations with \f(CW\*(C`no vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib and \*(L"strict subs\*(R" in strict.
                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/subs5.16.3pm                                 0100644 0001750 0001750 00000010673 12566207443 022577  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "subs 3pm"
.TH subs 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
subs \- Perl pragma to predeclare sub names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use subs qw(frob);
\&    frob 3..10;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This will predeclare all the subroutine whose names are 
in the list, allowing you to use them without parentheses
even before they're declared.
.PP
Unlike pragmas that affect the \f(CW$^H\fR hints variable, the \f(CW\*(C`use vars\*(C'\fR and
\&\f(CW\*(C`use subs\*(C'\fR declarations are not BLOCK-scoped.  They are thus effective
for the entire package in which they appear.  You may not rescind such
declarations with \f(CW\*(C`no vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib and \*(L"strict subs\*(R" in strict.
                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/subs5.18.3pm                                 0100644 0001750 0001750 00000011214 12566207465 022575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "subs 3pm"
.TH subs 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
subs \- Perl pragma to predeclare sub names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use subs qw(frob);
\&    frob 3..10;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This will predeclare all the subroutine whose names are 
in the list, allowing you to use them without parentheses
even before they're declared.
.PP
Unlike pragmas that affect the \f(CW$^H\fR hints variable, the \f(CW\*(C`use vars\*(C'\fR and
\&\f(CW\*(C`use subs\*(C'\fR declarations are not BLOCK-scoped.  They are thus effective
for the entire package in which they appear.  You may not rescind such
declarations with \f(CW\*(C`no vars\*(C'\fR or \f(CW\*(C`no subs\*(C'\fR.
.PP
See \*(L"Pragmatic Modules\*(R" in perlmodlib and \*(L"strict subs\*(R" in strict.
                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/subwin.3x                                    0100644 0001750 0001750 00000017312 12566174423 022451  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"***************************************************************************
.\" Copyright (c) 1998-2005,2006 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_window.3x,v 1.14 2006/02/25 21:49:19 tom Exp $
.TH curs_window 3X ""
.na
.hy 0
.SH NAME
\fBnewwin\fR,
\fBdelwin\fR,
\fBmvwin\fR,
\fBsubwin\fR,
\fBderwin\fR,
\fBmvderwin\fR,
\fBdupwin\fR,
\fBwsyncup\fR,
\fBsyncok\fR,
\fBwcursyncup\fR,
\fBwsyncdown\fR - create \fBcurses\fR windows
.ad
.hy
.SH SYNOPSIS
\fB#include <curses.h>\fR
.sp
\fBWINDOW *newwin(int nlines, int ncols, int begin_y,\fR
      \fBint begin_x);\fR
.br
\fBint delwin(WINDOW *win);\fR
.br
\fBint mvwin(WINDOW *win, int y, int x);\fR
.br
\fBWINDOW *subwin(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBWINDOW *derwin(WINDOW *orig, int nlines, int ncols,\fR
      \fBint begin_y, int begin_x);\fR
.br
\fBint mvderwin(WINDOW *win, int par_y, int par_x);\fR
.br
\fBWINDOW *dupwin(WINDOW *win);\fR
.br
\fBvoid wsyncup(WINDOW *win);\fR
.br
\fBint syncok(WINDOW *win, bool bf);\fR
.br
\fBvoid wcursyncup(WINDOW *win);\fR
.br
\fBvoid wsyncdown(WINDOW *win);\fR
.br
.SH DESCRIPTION
Calling \fBnewwin\fR creates and returns a pointer to a new window with the
given number of lines and columns.  The upper left-hand corner of the window is
at line \fIbegin\fR_\fIy\fR, column \fIbegin\fR_\fIx\fR.  If either
\fInlines\fR or \fIncols\fR is zero, they default to \fBLINES -\fR
\fIbegin\fR_\fIy\fR and \fBCOLS -\fR \fIbegin\fR_\fIx\fR.  A new full-screen
window is created by calling \fBnewwin(0,0,0,0)\fR.
.PP
Calling \fBdelwin\fR deletes the named window, freeing all memory
associated with it (it does not actually erase the window's screen
image).  Subwindows must be deleted before the main window can be
deleted.
.PP
Calling \fBmvwin\fR moves the window so that the upper left-hand
corner is at position (\fIx\fR, \fIy\fR).  If the move would cause the
window to be off the screen, it is an error and the window is not
moved.  Moving subwindows is allowed, but should be avoided.
.PP
Calling \fBsubwin\fR creates and returns a pointer to a new window
with the given number of lines, \fInlines\fR, and columns,
\fIncols\fR.  The window is at position (\fIbegin\fR_\fIy\fR,
\fIbegin\fR_\fIx\fR) on the screen.  (This position is relative to the
screen, and not to the window \fIorig\fR.)  The window is made in the
middle of the window \fIorig\fR, so that changes made to one window
will affect both windows.  The subwindow shares memory with the window
\fIorig\fR.  When using this routine, it is necessary to call
\fBtouchwin\fR or \fBtouchline\fR on \fIorig\fR before calling
\fBwrefresh\fR on the subwindow.
.PP
Calling \fBderwin\fR is the same as calling \fBsubwin,\fR except that
\fIbegin\fR_\fIy\fR and \fIbegin\fR_\fIx\fR are relative to the origin
of the window \fIorig\fR rather than the screen.  There is no
difference between the subwindows and the derived windows.
.PP
Calling \fBmvderwin\fR moves a derived window (or subwindow)
inside its parent window.  The screen-relative parameters of the
window are not changed.  This routine is used to display different
parts of the parent window at the same physical position on the
screen.
.PP
Calling \fBdupwin\fR creates an exact duplicate of the window \fIwin\fR.
.PP
Calling \fBwsyncup\fR touches all locations in ancestors of \fIwin\fR that are
changed in \fIwin\fR.  If \fBsyncok\fR is called with second argument
\fBTRUE\fR then \fBwsyncup\fR is called automatically whenever there is a
change in the window.
.PP
The \fBwsyncdown\fR routine touches each location in \fIwin\fR that has been
touched in any of its ancestor windows.  This routine is called by
\fBwrefresh\fR, so it should almost never be necessary to call it manually.
.PP
The routine \fBwcursyncup\fR updates the current cursor position of all the
ancestors of the window to reflect the current cursor position of the
window.
.SH RETURN VALUE
Routines that return an integer return the integer \fBERR\fR upon failure and
\fBOK\fR (SVr4 only specifies "an integer value other than \fBERR\fR") upon
successful completion.
.PP
Routines that return pointers return \fBNULL\fR on error.
.PP
X/Open defines no error conditions.
In this implementation
.RS
.TP 5
\fBdelwin\fR
returns an error if the window pointer is null, or
if the window is the parent of another window.
.IP
This implementation also maintains a list of windows,
and checks that the pointer passed to \fBdelwin\fP is one that
it created, returning an error if it was not..
.TP 5
\fBmvderwin\fP
returns an error
if the window pointer is null, or
if some part of the window would be placed off-screen.
.TP 5
\fBmvwin\fP
returns an error
if the window pointer is null, or
if the window is really a pad, or
if some part of the window would be placed off-screen.
.TP 5
\fBsyncok\fP
returns an error
if the window pointer is null.
.RE
.SH NOTES
If many small changes are made to the window, the \fBwsyncup\fR option could
degrade performance.
.PP
Note that \fBsyncok\fR may be a macro.
.SH BUGS
The subwindow functions (\fIsubwin\fR, \fIderwin\fR, \fImvderwin\fR,
\fBwsyncup\fR, \fBwsyncdown\fR, \fBwcursyncup\fR, \fBsyncok\fR) are flaky,
incompletely implemented, and not well tested.
.PP
The System V curses documentation is very unclear about what \fBwsyncup\fR
and \fBwsyncdown\fR actually do.  It seems to imply that they are only
supposed to touch exactly those lines that are affected by ancestor changes.
The language here, and the behavior of the \fBcurses\fR implementation,
is patterned on the XPG4 curses standard.  The weaker XPG4 spec may result
in slower updates.
.SH PORTABILITY
The XSI Curses standard, Issue 4 describes these functions.
.SH SEE ALSO
\fBcurses\fR(3X), \fBcurs_refresh\fR(3X), \fBcurs_touch\fR(3X)
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_destroy.3                                0100644 0001750 0001750 00000073141 12566167025 023320  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_fds.3                                    0100644 0001750 0001750 00000073141 12566167025 022403  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_fdset.3                                  0100644 0001750 0001750 00000073141 12566167025 022734  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_getargs.3                                0100644 0001750 0001750 00000073141 12566167025 023263  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_getcaller.3                              0100644 0001750 0001750 00000073141 12566167025 023571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_getreg.3                                 0100644 0001750 0001750 00000073141 12566167025 023104  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_getregset.3                              0100644 0001750 0001750 00000073141 12566167025 023620  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_register.3                               0100644 0001750 0001750 00000073141 12566167025 023453  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_run.3                                    0100644 0001750 0001750 00000073141 12566167025 022433  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_sendreply.3                              0100644 0001750 0001750 00000073141 12566167025 023634  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svc_unregister.3                             0100644 0001750 0001750 00000073141 12566167025 024016  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_auth.3                                0100644 0001750 0001750 00000073141 12566167025 023301  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_decode.3                              0100644 0001750 0001750 00000073141 12566167025 023563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_noproc.3                              0100644 0001750 0001750 00000073141 12566167025 023640  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_noprog.3                              0100644 0001750 0001750 00000073141 12566167025 023644  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_progvers.3                            0100644 0001750 0001750 00000073141 12566167025 024207  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_systemerr.3                           0100644 0001750 0001750 00000073141 12566167025 024375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcerr_weakauth.3                            0100644 0001750 0001750 00000073141 12566167025 024151  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcfd_create.3                               0100644 0001750 0001750 00000073141 12566167025 023404  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcraw_create.3                              0100644 0001750 0001750 00000073141 12566167025 023604  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svctcp_create.3                              0100644 0001750 0001750 00000073141 12566167025 023601  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
This allows the user to specify the maximun packet size for sending and 
receiving
.SM UDP\s0-based
.SM RPC messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
\s-1XDR\s0 *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
.SM RPC
reply messages. This routine is useful for users who
wish to generate
\s-1RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
\s-1XDR\s0 *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
.SM UNIX
credentials. This routine is useful for users
who wish to generate these credentials without using the
.SM RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
\s-1XDR\s0 *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
.SM RPC
call header messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
call messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
\s-1XDR\s0 *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
.SM RPC
authentication information messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
\s-1XDR\s0 *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
\s-1XDR\s0 *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
\s-1XDR\s0 *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC\s0-style
messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
\s-1XDR\s0 *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
.SM RPC
reply messages.
This routine is useful for users who wish to generate
.SM RPC
style messages without using the
.SM RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
After
.SM RPC
service transport handles are created,
they should register themselves with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Before an
.SM RPC
service transport handle is destroyed,
it should unregister itself with the
.SM RPC
service package.
This routine modifies the global variable
.BR svc_fds(\|) .
Service implementors usually do not need this routine.
.SH SEE ALSO
.BR rpc_secure (3N),
.BR xdr (3N)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "\s-1RPC\s0: Remote Procedure Call Protocol Specification" ,
.SM RFC1050, Sun Microsystems, Inc.,
.SM USC-ISI\s0.

                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/svcudp_bufcreate.3                           0100644 0001750 0001750 00000073141 12566167025 024300  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\"	from: @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"	$Id: rpc.3,v 1.1 1999/04/13 23:15:37 wsanchez Exp $
.\"
.TH RPC 3N "16 February 1988"
.SH NAME
rpc \- library routines for remote procedure calls
.SH SYNOPSIS AND DESCRIPTION
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.LP
Routines that are used for Secure RPC (DES authentication) are described in
.BR rpc_secure (3N).
Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
\s-1AUTH\s0 *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures. The use of
.I auth
is undefined after calling
.BR auth_destroy(\|) .
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authnone_create(\|)
.fi
.ft R
.IP
Create and returns an
.SM RPC
authentication handle that passes nonusable authentication
information with each remote procedure call. This is the
default authentication used by
.SM RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup.gids;
.fi
.ft R
.IP
Create and return an
.SM RPC
authentication handle that contains
.UX
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
.SM ID ;
.I gid
is the user's current group
.SM ID ;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
\s-1AUTH\s0 *
authunix_create_default(\|)
.fi
.ft R
.IP
Calls
.B authunix_create(\|)
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.B clnt_perrno(\|)
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
.SM UDP/IP
as a transport; see
.B clntudp_create(\|)
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc, out, eachresult)
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc(\|) ,
except the call message is broadcast to all locally
connected broadcast nets. Each time it receives a
response, this routine calls
.BR eachresult(\|) ,
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast(\|) ,
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.B eachresult(\|)
returns zero,
.B clnt_broadcast(\|)
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link. For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
\s-1CLIENT\s0 *clnt;
u_long
procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
.SM RPC
client creation routine such as
.BR clnt_create(\|) .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
\s-1CLIENT\s0 *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
.SM RPC
handle. Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.  Use of
.I clnt
is undefined after calling
.BR clnt_destroy(\|) .
If the
.SM RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnt_create(host, prog, vers, proto)
char *host;
u_long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use. The
currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control(\|) .
.IP
Warning: Using
.SM UDP
has its shortcomings.  Since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
\s-1CLIENT\s0 *cl;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information. For both
.SM UDP
and
.SM TCP\s0,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_TIMEOUT\s0	struct timeval	set total timeout
.SM CLGET_TIMEOUT\s0	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control(\|) ,
the timeout parameter passed to
.B clnt_call(\|)
will be ignored in all future calls.
.IP
.nf
.SM CLGET_SERVER_ADDR\s0	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
.SM UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
.SM CLSET_RETRY_TIMEOUT\s0		struct timeval	set the retry timeout
.SM CLGET_RETRY_TIMEOUT\s0		struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
.SM "UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
\s-1CLIENT\s0 *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the results of an
.SM RPC
call.  The
parameter
.I out
is the address of the results, and
.I outproc
is the
.SM XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
\s-1CLIENT\s0 *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
.SM RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create(\|) ,
.BR clntraw_create(\|) ,
.BR clnttcp_create(\|) ,
or
.B clntudp_create(\|)
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc(\|) .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
\s-1CLIENT\s0 *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
.SM RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror(\|) ,
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno(\|) ,
but instead of sending a message to the standard error
indicating why an
.SM RPC
call failed, return a pointer to a string which contains
the message.  The string ends with a
.SM NEWLINE\s0.
.IP
.B clnt_sperrno(\|)
is used instead of
.B clnt_perrno(\|)
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf ,
or if a message format different than that supported by
.B clnt_perrno(\|)
is to be used.
Note: unlike
.B clnt_sperror(\|)
and
.BR clnt_spcreaterror(\|) ,
.B clnt_sperrno(\|)
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
\s-1CLIENT\s0 *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror(\|) ,
except that (like
.BR clnt_sperrno(\|) )
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntraw_create(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
.SM RPC
server should live in the same address space; see
.BR svcraw_create(\|) .
This allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads, such as round trip times, without any
kernel interference. This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
u_long prognum, versnum;
int *sockp;
u_int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.SM TCP/IP
as a transport. The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.IR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
Warning: since
.SM UDP\s0-based
.SM RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
\s-1CLIENT\s0 *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize, recosize)
struct sockaddr_in *addr;
u_long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
.SM RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
.SM UDP/IP
as a transport. The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information). The parameter
.I sockp
is a socket; if it is
.BR \s-1RPC_ANYSOCK\s0 ,
then this routine opens a new one and sets
.BR sockp .
The
.SM UDP
transport resends the call message in intervals of
.B wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call(\|) .
.IP
This allows the user to specify the maximun packet size for sending and receiving 
.SM UDP\s0-based
.SM RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
.SM IP
address into
.IR *addr ,
without consulting the library routines that deal with
.BR /etc/hosts .
The port number is always set to
.BR htons(\s-1PMAPPORT\s0) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
.SM RPC
program-to-port mappings
on the host located at
.SM IP
address
.IR *addr .
This routine can return
.SM NULL .
The command
.RB ` "rpcinfo \-p" '
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
u_short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
u_long prognum, versnum, protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
A return value of zero means that the mapping does not exist
or that
the
.SM RPC
system failured to contact the remote
.B portmap
service.  In the latter case, the global variable
.B rpc_createerr(\|)
contains the
.SM RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in, outproc, out, tout, portp)
struct sockaddr_in *addr;
u_long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
u_long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
.SM IP
address
.I *addr
to make an
.SM RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds. The definitions of other parameters are discussed
in
.B callrpc(\|)
and
.BR clnt_call(\|) .
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
u_long prognum, versnum, protocol;
u_short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service. The value of
.I protocol
is most likely
.B
.SM IPPROTO_UDP
or 
.BR \s-1IPPROTO_TCP\s0 .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
u_long prognum, versnum, procnum;
char *(*procname) (\|) ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
.SM RPC
service package.  If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
.SM UDP/IP
transport; see
.B svcudp_create(\|)
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
.SM RPC
client creation routine
that does not succeed.  Use the routine
.B clnt_pcreateerror(\|)
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
svc_destroy(xprt)
\s-1SVCXPRT\s0 *
xprt;
.fi
.ft R
.IP
A macro that destroys the
.SM RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.  Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
.SM RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.B select
system call. This is only of interest
if a service implementor does not call
.BR svc_run(\|) ,
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select !),
yet it may change after calls to
.B svc_getreqset(\|)
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fedset(\|) ,
but limited to 32 descriptors. This
interface is obsoleted by
.BR svc_fdset(\|) .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
.SM RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs(\|) .
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
.SM RPC
request
associated with the
.SM RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
.SM XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
.SM RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run(\|) ,
but instead implements custom asynchronous event processing.
It is called when the
.B select
system call has determined that an
.SM RPC
request has arrived on some
.SM RPC
.B socket(s) ;
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset(\|) ,
but limited to 32 descriptors. This interface is obsoleted by
.BR svc_getreqset(\|) .
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
\s-1SVCXPRT\s0 *xprt;
u_long prognum, versnum;
void (*dispatch) (\|);
u_long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.  If
.I protocol
is non-zero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
.SM IPPROTO_UDP
or 
.B
.SM IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
\s-1SVCXPRT\s0 *xprt;
.ft R
.fi
.RE
.IP
The
.B svc_register(\|)
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run(\|)
.fi
.ft R
.IP
This routine never returns. It waits for
.SM RPC
requests to arrive, and calls the appropriate service
procedure using
.B svc_getreq(\|)
when one arrives. This procedure is usually waiting for a
.B select(\|)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
\s-1SVCXPRT\s0 *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
.SM RPC
service's dispatch routine to send the results of a
remote procedure call.  The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
.SM XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
u_long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
\s-1SVCXPRT\s0 *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters. See also
.BR svc_getargs(\|) .
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
.SM RPC
package. Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
\s-1SVCXPRT\s0 *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.  The routine calls
.BR "svcerr_auth(xprt, \s-1AUTH_TOOWEAK\s0)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcraw_create(\|)
.fi
.ft R
.IP
This routine creates a toy
.SM RPC
service transport, to which it returns a pointer.  The
transport
is really a buffer within the process's address space,
so the corresponding
.SM RPC
client should live in the same
address space;
see
.BR clntraw_create(\|) .
This routine allows simulation of
.SM RPC
and acquisition of
.SM RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
.SM NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
u_int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
.SM TCP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM TCP
port, then this routine binds it to an arbitrary port.  Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails. Since
.SM TCP\s0-based
.SM RPC
uses buffered
.SM I/O ,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcfd_create(fd, sendsize, recvsize)
int fd;
u_int sendsize;
u_int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor. Typically,
this
descriptor is a connected socket for a stream protocol such
as
.SM TCP\s0.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.  If they are
zero, a reasonable default is chosen.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
\s-1SVCXPRT\s0 *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
.fi
.ft R
.IP
This routine creates a
.SM UDP/IP\s0-based
.SM RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.B \s-1RPC_ANYSOCK\s0 ,
in which case a new socket is created.
If the socket is not bound to a local
.SM UDP
port, then this routine binds it to an arbitrary port. Upon
completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
.SM NULL
if it fails.
.IP
T