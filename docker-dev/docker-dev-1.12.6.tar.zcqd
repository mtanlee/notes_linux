P_MD_CTX structure
.Ve
.Sp
The complete idea behind \s-1EVP_MD_CTX\s0 looks like this example:
.Sp
.Vb 1
\&  Net::SSLeay::OpenSSL_add_all_digests();
\&
\&  my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
\&  my $ctx = Net::SSLeay::EVP_MD_CTX_create();
\&  Net::SSLeay::EVP_DigestInit($ctx, $md);
\&
\&  while(my $chunk = get_piece_of_data()) {
\&    Net::SSLeay::EVP_DigestUpdate($ctx,$chunk);
\&  }
\&
\&  my $result = Net::SSLeay::EVP_DigestFinal($ctx);
\&  Net::SSLeay::EVP_MD_CTX_destroy($ctx);
\&
\&  print "digest=", unpack(\*(AqH*\*(Aq, $result), "\en"; #print hex value
.Ve
.IP "\(bu" 4
EVP_DigestInit_ex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Sets up digest context \f(CW$ctx\fR to use a digest \f(CW$type\fR from \s-1ENGINE\s0 \f(CW$impl\fR, \f(CW$ctx\fR must be
initialized before calling this function, type will typically be supplied by a function
such as \*(L"EVP_get_digestbyname\*(R". If \f(CW$impl\fR is 0 then the default implementation of digest \f(CW$type\fR is used.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl);
\& # $ctx  \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure
\& # $impl \- value corresponding to openssl\*(Aqs ENGINE structure
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_DigestInit
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Behaves in the same way as \*(L"EVP_DigestInit_ex\*(R" except the passed context \f(CW$ctx\fR does not have
to be initialized, and it always uses the default digest implementation.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_DigestInit($ctx, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_MD_CTX_destroy
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Cleans up digest context \f(CW$ctx\fR and frees up the space allocated to it, it should be
called only on a context created using \*(L"EVP_MD_CTX_create\*(R".
.Sp
.Vb 4
\& Net::SSLeay::EVP_MD_CTX_destroy($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
EVP_DigestUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_DigestUpdate($ctx, $data);
\& # $ctx  \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $data \- data to be hashed
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_DigestFinal_ex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Retrieves the digest value from \f(CW$ctx\fR. After calling \*(L"EVP_DigestFinal_ex\*(R" no
additional calls to \*(L"EVP_DigestUpdate\*(R" can be made, but
\&\*(L"EVP_DigestInit_ex\*(R" can be called to initialize a new digest operation.
.Sp
.Vb 4
\& my $digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
EVP_DigestFinal
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Similar to \*(L"EVP_DigestFinal_ex\*(R" except the digest context ctx is automatically cleaned up.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_DigestFinal($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
\&\s-1MD2\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR no supported by default in openssl\-1.0.0
.Sp
Computes \s-1MD2\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD2($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1MD4\s0
.Sp
Computes \s-1MD4\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD4($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1MD5\s0
.Sp
Computes \s-1MD5\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD5($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1RIPEMD160\s0
.Sp
Computes \s-1RIPEMD160\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::RIPEMD160($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA1\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Computes \s-1SHA1\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA1($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA256\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
Computes \s-1SHA256\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA256($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA512\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
Computes \s-1SHA512\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA512($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
EVP_Digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Computes \*(L"any\*(R" digest from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_get_digestbyname("sha1"); #or any other algorithm
\& my $digest = Net::SSLeay::EVP_Digest($data, $md);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
EVP_sha1
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha1();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_sha256
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR requires at least openssl\-0.9.8
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha256();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_sha512
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha512();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_add_digest
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_add_digest($digest);
\& # $digest \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 on success, 0 otherwise
.Ve
.PP
\fILow level \s-1API:\s0 CIPHER_* related functions\fR
.IX Subsection "Low level API: CIPHER_* related functions"
.IP "\(bu" 4
CIPHER_get_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Returns name of the cipher used.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CIPHER_description($cipher);
\& # $cipher \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& #
\& # returns: (string) cipher name e.g. \*(AqDHE\-RSA\-AES256\-SHA\*(Aq
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.Sp
Example:
.Sp
.Vb 2
\& my $ssl_cipher = Net::SSLeay::get_current_cipher($ssl);
\& my $cipher_name = Net::SSLeay::CIPHER_get_name($ssl_cipher);
.Ve
.IP "\(bu" 4
CIPHER_description
.Sp
Returns a textual description of the cipher used.
.Sp
??? (does this function really work?)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CIPHER_description($cipher, $buf, $size);
\& # $cipher \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& # $bufer \- (string/buffer) ???
\& # $size \- (integer) ???
\& #
\& # returns: (string) cipher description e.g. \*(AqDHE\-RSA\-AES256\-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1\*(Aq
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.IP "\(bu" 4
CIPHER_get_bits
.Sp
Returns the number of secret bits used for cipher.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CIPHER_get_bits($c);
\& # $c \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& #
\& # returns: (integert) number of secret bits, 0 on error
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.PP
\fILow level \s-1API:\s0 RSA_* related functions\fR
.IX Subsection "Low level API: RSA_* related functions"
.IP "\(bu" 4
RSA_generate_key
.Sp
Generates a key pair and returns it in a newly allocated \s-1RSA\s0 structure.
The pseudo-random number generator must be seeded prior to calling RSA_generate_key.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::RSA_generate_key($bits, $e, $perl_cb, $perl_cb_arg);
\& # $bits \- (integer) modulus size in bits e.g. 512, 1024, 2048
\& # $e \- (integer) public exponent, an odd number, typically 3, 17 or 65537
\& # $perl_cb \- [optional] reference to perl callback function
\& # $perl_cb_arg \- [optional] data that will be passed to callback function when invoked
\& #
\& # returns: value corresponding to openssl\*(Aqs RSA structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RSA_generate_key.html>
.IP "\(bu" 4
RSA_free
.Sp
Frees the \s-1RSA\s0 structure and its components. The key is erased before the memory is returned to the system.
.Sp
.Vb 4
\& Net::SSLeay::RSA_free($r);
\& # $r \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RSA_new.html>
.PP
\fILow level \s-1API:\s0 BIO_* related functions\fR
.IX Subsection "Low level API: BIO_* related functions"
.IP "\(bu" 4
BIO_eof
.Sp
Returns 1 if the \s-1BIO\s0 has read \s-1EOF\s0, the precise meaning of '\s-1EOF\s0' varies according to the \s-1BIO\s0 type.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_eof($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 if EOF has been reached 0 otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_f_ssl
.Sp
Returns the \s-1SSL\s0 \s-1BIO\s0 method. This is a filter \s-1BIO\s0 which is a wrapper
round the OpenSSL \s-1SSL\s0 routines adding a \s-1BIO\s0 'flavour' to \s-1SSL\s0 I/O.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::BIO_f_ssl();
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_free
.Sp
Frees up a single \s-1BIO\s0.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_free($bio;);
\& # $bio; \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_new.html>
.IP "\(bu" 4
BIO_new
.Sp
Returns a new \s-1BIO\s0 using method \f(CW$type\fR
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new($type);
\& # $type \- value corresponding to openssl\*(Aqs BIO_METHOD structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_new.html>
.IP "\(bu" 4
BIO_new_buffer_ssl_connect
.Sp
Creates a new \s-1BIO\s0 chain consisting of a buffering \s-1BIO\s0, an \s-1SSL\s0 \s-1BIO\s0 (using ctx) and a connect \s-1BIO\s0.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new_buffer_ssl_connect($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_new_file
.Sp
Creates a new file \s-1BIO\s0 with mode mode the meaning of mode is the same
as the stdio function \fIfopen()\fR. The \s-1BIO_CLOSE\s0 flag is set on the returned \s-1BIO\s0.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_new_file($filename, $mode);
\& # $filename \- (string) filename
\& # $mode \- (string) opening mode (as mode by stdio function fopen)
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_s_file.html>
.IP "\(bu" 4
BIO_new_ssl
.Sp
Allocates an \s-1SSL\s0 \s-1BIO\s0 using \s-1SSL_CTX\s0 ctx and using client mode if client is non zero.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_new_ssl($ctx, $client);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $client \- (integer) 0 or 1 \- indicates ssl client mode
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_new_ssl_connect
.Sp
Creates a new \s-1BIO\s0 chain consisting of an \s-1SSL\s0 \s-1BIO\s0 (using ctx) followed by a connect \s-1BIO\s0.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new_ssl_connect($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_pending
.Sp
Return the number of pending characters in the BIOs read buffers.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_pending($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: the amount of pending data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_wpending
.Sp
Return the number of pending characters in the BIOs write buffers.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_wpending($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: the amount of pending data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_read
.Sp
Read the underlying descriptor.
.Sp
.Vb 5
\& Net::SSLeay::BIO_read($s, $max);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& # $max \- [optional] max. bytes to read (if not specified, the value 32768 is used)
\& #
\& # returns: data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_read.html>
.IP "\(bu" 4
BIO_write
.Sp
Attempts to write data from \f(CW$buffer\fR to \s-1BIO\s0 \f(CW$b\fR.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::BIO_write($b, $buffer);
\& # $b \- value corresponding to openssl\*(Aqs BIO structure
\& # $buffer \- data
\& #
\& # returns: amount of data successfully written
\& #          or that no data was successfully read or written if the result is 0 or \-1
\& #          or \-2 when the operation is not implemented in the specific BIO type
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_read.html>
.IP "\(bu" 4
BIO_s_mem
.Sp
Return the memory \s-1BIO\s0 method function.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::BIO_s_mem();
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_s_mem.html>
.IP "\(bu" 4
BIO_ssl_copy_session_id
.Sp
Copies an \s-1SSL\s0 session id between \s-1BIO\s0 chains from and to. It does this by locating
the \s-1SSL\s0 BIOs in each chain and calling \fISSL_copy_session_id()\fR on the internal \s-1SSL\s0 pointer.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_ssl_copy_session_id($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs BIO structure
\& # $from \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_ssl_shutdown
.Sp
Closes down an \s-1SSL\s0 connection on \s-1BIO\s0 chain bio. It does this by locating the
\&\s-1SSL\s0 \s-1BIO\s0 in the chain and calling \fISSL_shutdown()\fR on its internal \s-1SSL\s0 pointer.
.Sp
.Vb 4
\& Net::SSLeay::BIO_ssl_shutdown($ssl_bio);
\& # $ssl_bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.PP
\fILow level \s-1API:\s0 \s-1NPN\s0 (next protocol negotiation) related functions\fR
.IX Subsection "Low level API: NPN (next protocol negotiation) related functions"
.PP
Simple approach for using \s-1NPN\s0 support looks like this:
.PP
.Vb 3
\& ### client side
\& use Net::SSLeay;
\& use IO::Socket::INET;
\& 
\& Net::SSLeay::initialize();
\& my $sock = IO::Socket::INET\->new(PeerAddr=>\*(Aqencrypted.google.com:443\*(Aq) or die;
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::CTX_set_next_proto_select_cb($ctx, [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]);
\& my $ssl = Net::SSLeay::new($ctx) or die;
\& Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
\& Net::SSLeay::connect($ssl);
\&
\& warn "client:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl), "\en";
\& warn "client:last_status=", Net::SSLeay::P_next_proto_last_status($ssl), "\en";
\& 
\& ### server side 
\& use Net::SSLeay;
\& use IO::Socket::INET;
\& 
\& Net::SSLeay::initialize();
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::set_cert_and_key($ctx, "t/data/cert.pem", "t/data/key.pem");
\& Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, [\*(Aqspdy/2\*(Aq,\*(Aqhttp1.1\*(Aq]);
\& my $sock = IO::Socket::INET\->new(LocalAddr=>\*(Aqlocalhost\*(Aq, LocalPort=>5443, Proto=>\*(Aqtcp\*(Aq, Listen=>20) or die;
\& 
\& while (1) {
\&   my $ssl = Net::SSLeay::new($ctx);
\&   warn("server:waiting for incoming connection...\en");
\&   my $fd = $sock\->accept();
\&   Net::SSLeay::set_fd($ssl, $fd\->fileno);
\&   Net::SSLeay::accept($ssl);  
\&   warn "server:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl),"\en";
\&   my $got = Net::SSLeay::read($ssl);
\&   Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
\&   Net::SSLeay::free($ssl);
\&   $fd\->close();
\& }
\& # check with: openssl s_client \-connect localhost:5443 \-nextprotoneg http/1.1,spdy/2
.Ve
.PP
Please note that the selection (negotiation) is performed by client side, the server side simply advertise the list of supported protocols.
.PP
Advanced approach allows you to implement your own negotiation algorithm.
.PP
.Vb 3
\& #see below documentation for:
\& Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
\& Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
.Ve
.PP
Detection of \s-1NPN\s0 support (works even in older Net::SSLeay versions):
.PP
.Vb 1
\& use Net::SSLeay;
\& 
\& if (exists &Net::SSLeay::P_next_proto_negotiated) {
\&   # do NPN stuff
\& }
.Ve
.IP "\(bu" 4
CTX_set_next_proto_select_cb
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_next_proto_select_cb on \fBclient side\fR of \s-1SSL\s0 connection.
.Sp
Simple usage \- in this case a \*(L"common\*(R" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.
.Sp
.Vb 5
\& $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $arrayref);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arrayref \- list of accepted protocols \- e.g. [\*(Aqhttp1.0\*(Aq, \*(Aqhttp1.1\*(Aq]
\& #
\& # returns: 0 on success, 1 on failure
.Ve
.Sp
Advanced usage (you probably do not need this):
.Sp
.Vb 6
\& $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $perl_callback_function \- reference to perl function
\& # $callback_data \- [optional] data to passed to callback function when invoked
\& #
\& # returns: 0 on success, 1 on failure
\& 
\& # where callback function looks like
\& sub npn_advertised_cb_invoke {
\&   my ($ssl, $arrayref_proto_list_advertised_by_server, $callback_data) = @_;
\&   my $status;
\&   # ...
\&   $status = 1;   #status can be:
\&                  # 0 \- OPENSSL_NPN_UNSUPPORTED
\&                  # 1 \- OPENSSL_NPN_NEGOTIATED
\&                  # 2 \- OPENSSL_NPN_NO_OVERLAP
\&   return $status, [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]; # the callback has to return 2 values
\& }
.Ve
.Sp
To undefine/clear this callback use:
.Sp
.Vb 1
\& Net::SSleay::CTX_set_next_proto_select_cb($ctx, undef);
.Ve
.IP "\(bu" 4
CTX_set_next_protos_advertised_cb
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_next_proto_select_cb on \fBserver side\fR of \s-1SSL\s0 connection.
.Sp
Simple usage:
.Sp
.Vb 5
\& $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $arrayref);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arrayref \- list of advertised protocols \- e.g. [\*(Aqhttp1.0\*(Aq, \*(Aqhttp1.1\*(Aq]
\& #
\& # returns: 0 on success, 1 on failure
.Ve
.Sp
Advanced usage (you probably do not need this):
.Sp
.Vb 6
\& $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $perl_callback_function \- reference to perl function
\& # $callback_data \- [optional] data to passed to callback function when invoked
\& #
\& # returns: 0 on success, 1 on failure
\& 
\& # where callback function looks like
\& sub npn_advertised_cb_invoke {
\&   my ($ssl, $callback_data) = @_;
\&   # ...
\&   return [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]; # the callback has to return arrayref
\& }
.Ve
.Sp
To undefine/clear this callback use:
.Sp
.Vb 1
\& Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, undef);
.Ve
.IP "\(bu" 4
P_next_proto_negotiated
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
Returns the name of negotiated protocol for given \s-1SSL\s0 connection \f(CW$ssl\fR.
.Sp
.Vb 4
\& $rv = Net::SSLeay::P_next_proto_negotiated($ssl)
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)
.Ve
.IP "\(bu" 4
P_next_proto_last_status
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
Returns the result of the last negotiation for given \s-1SSL\s0 connection \f(CW$ssl\fR.
.Sp
.Vb 7
\& $rv = Net::SSLeay::P_next_proto_last_status($ssl)
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) negotiation status
\& #          0 \- OPENSSL_NPN_UNSUPPORTED
\& #          1 \- OPENSSL_NPN_NEGOTIATED
\& #          2 \- OPENSSL_NPN_NO_OVERLAP
.Ve
.PP
\fILow level \s-1API:\s0 Other functions\fR
.IX Subsection "Low level API: Other functions"
.IP "\(bu" 4
COMP_add_compression_method
.Sp
Adds the compression method cm with the identifier id to the list of available compression methods.
This list is globally maintained for all \s-1SSL\s0 operations within this application.
It cannot be set for specific \s-1SSL_CTX\s0 or \s-1SSL\s0 objects.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::COMP_add_compression_method($id, $cm);
\& # $id \- (integer) compression method id
\& #       0 to 63:    methods defined by the IETF
\& #       64 to 192:  external party methods assigned by IANA
\& #       193 to 255: reserved for private use
\& #
\& # $cm \- value corresponding to openssl\*(Aqs COMP_METHOD structure
\& #
\& # returns: 0 on success, 1 on failure (check the error queue to find out the reason)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html>
.IP "\(bu" 4
DH_free
.Sp
Frees the \s-1DH\s0 structure and its components. The values are erased before the memory is returned to the system.
.Sp
.Vb 4
\& Net::SSLeay::DH_free($dh);
\& # $dh \- value corresponding to openssl\*(Aqs DH structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/DH_new.html>
.SS "Constants"
.IX Subsection "Constants"
There are many openssl constants available in Net::SSLeay. You can use them like this:
.PP
.Vb 4
\& use Net::SSLeay;
\& print &Net::SSLeay::NID_commonName;
\& #or
\& print Net::SSLeay::NID_commonName();
.Ve
.PP
Or you can import them and use:
.PP
.Vb 6
\& use Net::SSLeay qw/NID_commonName/;
\& print &NID_commonName;
\& #or
\& print NID_commonName();
\& #or
\& print NID_commonName;
.Ve
.PP
The constants names are derived from openssl constants, however constants starting with \f(CW\*(C`SSL_\*(C'\fR prefix
have name with \f(CW\*(C`SSL_\*(C'\fR part stripped \- e.g. openssl's constant \f(CW\*(C`SSL_OP_ALL\*(C'\fR is available as \f(CW\*(C`Net::SSleay::OP_ALL\*(C'\fR
.PP
The list of all available constant names:
.PP
.Vb 10
\& ASN1_STRFLGS_ESC_CTRL           NID_ext_req                            OP_CISCO_ANYCONNECT
\& ASN1_STRFLGS_ESC_MSB            NID_friendlyName                       OP_COOKIE_EXCHANGE
\& ASN1_STRFLGS_ESC_QUOTE          NID_givenName                          OP_CRYPTOPRO_TLSEXT_BUG
\& ASN1_STRFLGS_RFC2253            NID_hmacWithSHA1                       OP_DONT_INSERT_EMPTY_FRAGMENTS
\& CB_ACCEPT_EXIT                  NID_id_ad                              OP_EPHEMERAL_RSA
\& CB_ACCEPT_LOOP                  NID_id_ce                              OP_LEGACY_SERVER_CONNECT
\& CB_CONNECT_EXIT                 NID_id_kp                              OP_MICROSOFT_BIG_SSLV3_BUFFER
\& CB_CONNECT_LOOP                 NID_id_pbkdf2                          OP_MICROSOFT_SESS_ID_BUG
\& ERROR_NONE                      NID_id_pe                              OP_MSIE_SSLV2_RSA_PADDING
\& ERROR_SSL                       NID_id_pkix                            OP_NETSCAPE_CA_DN_BUG
\& ERROR_SYSCALL                   NID_id_qt_cps                          OP_NETSCAPE_CHALLENGE_BUG
\& ERROR_WANT_ACCEPT               NID_id_qt_unotice                      OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
\& ERROR_WANT_CONNECT              NID_idea_cbc                           OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
\& ERROR_WANT_READ                 NID_idea_cfb64                         OP_NON_EXPORT_FIRST
\& ERROR_WANT_WRITE                NID_idea_ecb                           OP_NO_COMPRESSION
\& ERROR_WANT_X509_LOOKUP          NID_idea_ofb64                         OP_NO_QUERY_MTU
\& ERROR_ZERO_RETURN               NID_info_access                        OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
\& EVP_PKS_DSA                     NID_initials                           OP_NO_SSLv2
\& EVP_PKS_EC                      NID_invalidity_date                    OP_NO_SSLv3
\& EVP_PKS_RSA                     NID_issuer_alt_name                    OP_NO_TICKET
\& EVP_PKT_ENC                     NID_keyBag                             OP_NO_TLSv1
\& EVP_PKT_EXCH                    NID_key_usage                          OP_NO_TLSv1_1
\& EVP_PKT_EXP                     NID_localKeyID                         OP_NO_TLSv1_2
\& EVP_PKT_SIGN                    NID_localityName                       OP_PKCS1_CHECK_1
\& EVP_PK_DH                       NID_md2                                OP_PKCS1_CHECK_2
\& EVP_PK_DSA                      NID_md2WithRSAEncryption               OP_SINGLE_DH_USE
\& EVP_PK_EC                       NID_md5                                OP_SINGLE_ECDH_USE
\& EVP_PK_RSA                      NID_md5WithRSA                         OP_SSLEAY_080_CLIENT_DH_BUG
\& FILETYPE_ASN1                   NID_md5WithRSAEncryption               OP_SSLREF2_REUSE_CERT_TYPE_BUG
\& FILETYPE_PEM                    NID_md5_sha1                           OP_TLS_BLOCK_PADDING_BUG
\& F_CLIENT_CERTIFICATE            NID_mdc2                               OP_TLS_D5_BUG
\& F_CLIENT_HELLO                  NID_mdc2WithRSA                        OP_TLS_ROLLBACK_BUG
\& F_CLIENT_MASTER_KEY             NID_ms_code_com                        READING
\& F_D2I_SSL_SESSION               NID_ms_code_ind                        RECEIVED_SHUTDOWN
\& F_GET_CLIENT_FINISHED           NID_ms_ctl_sign                        RSA_3
\& F_GET_CLIENT_HELLO              NID_ms_efs                             RSA_F4
\& F_GET_CLIENT_MASTER_KEY         NID_ms_ext_req                         R_BAD_AUTHENTICATION_TYPE
\& F_GET_SERVER_FINISHED           NID_ms_sgc                             R_BAD_CHECKSUM
\& F_GET_SERVER_HELLO              NID_name                               R_BAD_MAC_DECODE
\& F_GET_SERVER_VERIFY             NID_netscape                           R_BAD_RESPONSE_ARGUMENT
\& F_I2D_SSL_SESSION               NID_netscape_base_url                  R_BAD_SSL_FILETYPE
\& F_READ_N                        NID_netscape_ca_policy_url             R_BAD_SSL_SESSION_ID_LENGTH
\& F_REQUEST_CERTIFICATE           NID_netscape_ca_revocation_url         R_BAD_STATE
\& F_SERVER_HELLO                  NID_netscape_cert_extension            R_BAD_WRITE_RETRY
\& F_SSL_CERT_NEW                  NID_netscape_cert_sequence             R_CHALLENGE_IS_DIFFERENT
\& F_SSL_GET_NEW_SESSION           NID_netscape_cert_type                 R_CIPHER_TABLE_SRC_ERROR
\& F_SSL_NEW                       NID_netscape_comment                   R_INVALID_CHALLENGE_LENGTH
\& F_SSL_READ                      NID_netscape_data_type                 R_NO_CERTIFICATE_SET
\& F_SSL_RSA_PRIVATE_DECRYPT       NID_netscape_renewal_url               R_NO_CERTIFICATE_SPECIFIED
\& F_SSL_RSA_PUBLIC_ENCRYPT        NID_netscape_revocation_url            R_NO_CIPHER_LIST
\& F_SSL_SESSION_NEW               NID_netscape_ssl_server_name           R_NO_CIPHER_MATCH
\& F_SSL_SESSION_PRINT_FP          NID_ns_sgc                             R_NO_PRIVATEKEY
\& F_SSL_SET_FD                    NID_organizationName                   R_NO_PUBLICKEY
\& F_SSL_SET_RFD                   NID_organizationalUnitName             R_NULL_SSL_CTX
\& F_SSL_SET_WFD                   NID_pbeWithMD2AndDES_CBC               R_PEER_DID_NOT_RETURN_A_CERTIFICATE
\& F_SSL_USE_CERTIFICATE           NID_pbeWithMD2AndRC2_CBC               R_PEER_ERROR
\& F_SSL_USE_CERTIFICATE_ASN1      NID_pbeWithMD5AndCast5_CBC             R_PEER_ERROR_CERTIFICATE
\& F_SSL_USE_CERTIFICATE_FILE      NID_pbeWithMD5AndDES_CBC               R_PEER_ERROR_NO_CIPHER
\& F_SSL_USE_PRIVATEKEY            NID_pbeWithMD5AndRC2_CBC               R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
\& F_SSL_USE_PRIVATEKEY_ASN1       NID_pbeWithSHA1AndDES_CBC              R_PUBLIC_KEY_ENCRYPT_ERROR
\& F_SSL_USE_PRIVATEKEY_FILE       NID_pbeWithSHA1AndRC2_CBC              R_PUBLIC_KEY_IS_NOT_RSA
\& F_SSL_USE_RSAPRIVATEKEY         NID_pbe_WithSHA1And128BitRC2_CBC       R_READ_WRONG_PACKET_TYPE
\& F_SSL_USE_RSAPRIVATEKEY_ASN1    NID_pbe_WithSHA1And128BitRC4           R_SHORT_READ
\& F_SSL_USE_RSAPRIVATEKEY_FILE    NID_pbe_WithSHA1And2_Key_TripleDES_CBC R_SSL_SESSION_ID_IS_DIFFERENT
\& F_WRITE_PENDING                 NID_pbe_WithSHA1And3_Key_TripleDES_CBC R_UNABLE_TO_EXTRACT_PUBLIC_KEY
\& GEN_DIRNAME                     NID_pbe_WithSHA1And40BitRC2_CBC        R_UNKNOWN_REMOTE_ERROR_TYPE
\& GEN_DNS                         NID_pbe_WithSHA1And40BitRC4            R_UNKNOWN_STATE
\& GEN_EDIPARTY                    NID_pbes2                              R_X509_LIB
\& GEN_EMAIL                       NID_pbmac1                             SENT_SHUTDOWN
\& GEN_IPADD                       NID_pkcs                               SESSION_ASN1_VERSION
\& GEN_OTHERNAME                   NID_pkcs3                              ST_ACCEPT
\& GEN_RID                         NID_pkcs7                              ST_BEFORE
\& GEN_URI                         NID_pkcs7_data                         ST_CONNECT
\& GEN_X400                        NID_pkcs7_digest                       ST_INIT
\& MBSTRING_ASC                    NID_pkcs7_encrypted                    ST_OK
\& MBSTRING_BMP                    NID_pkcs7_enveloped                    ST_READ_BODY
\& MBSTRING_FLAG                   NID_pkcs7_signed                       ST_READ_HEADER
\& MBSTRING_UNIV                   NID_pkcs7_signedAndEnveloped           VERIFY_CLIENT_ONCE
\& MBSTRING_UTF8                   NID_pkcs8ShroudedKeyBag                VERIFY_FAIL_IF_NO_PEER_CERT
\& MIN_RSA_MODULUS_LENGTH_IN_BYTES NID_pkcs9                              VERIFY_NONE
\& MODE_ACCEPT_MOVING_WRITE_BUFFER NID_pkcs9_challengePassword            VERIFY_PEER
\& MODE_AUTO_RETRY                 NID_pkcs9_contentType                  WRITING
\& MODE_ENABLE_PARTIAL_WRITE       NID_pkcs9_countersignature             X509_LOOKUP
\& MODE_RELEASE_BUFFERS            NID_pkcs9_emailAddress                 X509_PURPOSE_ANY
\& NID_OCSP_sign                   NID_pkcs9_extCertAttributes            X509_PURPOSE_CRL_SIGN
\& NID_SMIMECapabilities           NID_pkcs9_messageDigest                X509_PURPOSE_NS_SSL_SERVER
\& NID_X500                        NID_pkcs9_signingTime                  X509_PURPOSE_OCSP_HELPER
\& NID_X509                        NID_pkcs9_unstructuredAddress          X509_PURPOSE_SMIME_ENCRYPT
\& NID_ad_OCSP                     NID_pkcs9_unstructuredName             X509_PURPOSE_SMIME_SIGN
\& NID_ad_ca_issuers               NID_private_key_usage_period           X509_PURPOSE_SSL_CLIENT
\& NID_algorithm                   NID_rc2_40_cbc                         X509_PURPOSE_SSL_SERVER
\& NID_authority_key_identifier    NID_rc2_64_cbc                         X509_PURPOSE_TIMESTAMP_SIGN
\& NID_basic_constraints           NID_rc2_cbc                            X509_TRUST_COMPAT
\& NID_bf_cbc                      NID_rc2_cfb64                          X509_TRUST_EMAIL
\& NID_bf_cfb64                    NID_rc2_ecb                            X509_TRUST_OBJECT_SIGN
\& NID_bf_ecb                      NID_rc2_ofb64                          X509_TRUST_OCSP_REQUEST
\& NID_bf_ofb64                    NID_rc4                                X509_TRUST_OCSP_SIGN
\& NID_cast5_cbc                   NID_rc4_40                             X509_TRUST_SSL_CLIENT
\& NID_cast5_cfb64                 NID_rc5_cbc                            X509_TRUST_SSL_SERVER
\& NID_cast5_ecb                   NID_rc5_cfb64                          X509_TRUST_TSA
\& NID_cast5_ofb64                 NID_rc5_ecb                            X509_V_FLAG_ALLOW_PROXY_CERTS
\& NID_certBag                     NID_rc5_ofb64                          X509_V_FLAG_CB_ISSUER_CHECK
\& NID_certificate_policies        NID_ripemd160                          X509_V_FLAG_CHECK_SS_SIGNATURE
\& NID_client_auth                 NID_ripemd160WithRSA                   X509_V_FLAG_CRL_CHECK
\& NID_code_sign                   NID_rle_compression                    X509_V_FLAG_CRL_CHECK_ALL
\& NID_commonName                  NID_rsa                                X509_V_FLAG_EXPLICIT_POLICY
\& NID_countryName                 NID_rsaEncryption                      X509_V_FLAG_EXTENDED_CRL_SUPPORT
\& NID_crlBag                      NID_rsadsi                             X509_V_FLAG_IGNORE_CRITICAL
\& NID_crl_distribution_points     NID_safeContentsBag                    X509_V_FLAG_INHIBIT_ANY
\& NID_crl_number                  NID_sdsiCertificate                    X509_V_FLAG_INHIBIT_MAP
\& NID_crl_reason                  NID_secretBag                          X509_V_FLAG_NOTIFY_POLICY
\& NID_delta_crl                   NID_serialNumber                       X509_V_FLAG_POLICY_CHECK
\& NID_des_cbc                     NID_server_auth                        X509_V_FLAG_POLICY_MASK
\& NID_des_cfb64                   NID_sha                                X509_V_FLAG_USE_CHECK_TIME
\& NID_des_ecb                     NID_sha1                               X509_V_FLAG_USE_DELTAS
\& NID_des_ede                     NID_sha1WithRSA                        X509_V_FLAG_X509_STRICT
\& NID_des_ede3                    NID_sha1WithRSAEncryption              X509_V_OK
\& NID_des_ede3_cbc                NID_shaWithRSAEncryption               XN_FLAG_COMPAT
\& NID_des_ede3_cfb64              NID_stateOrProvinceName                XN_FLAG_DN_REV
\& NID_des_ede3_ofb64              NID_subject_alt_name                   XN_FLAG_DUMP_UNKNOWN_FIELDS
\& NID_des_ede_cbc                 NID_subject_key_identifier             XN_FLAG_FN_ALIGN
\& NID_des_ede_cfb64               NID_surname                            XN_FLAG_FN_LN
\& NID_des_ede_ofb64               NID_sxnet                              XN_FLAG_FN_MASK
\& NID_des_ofb64                   NID_time_stamp                         XN_FLAG_FN_NONE
\& NID_description                 NID_title                              XN_FLAG_FN_OID
\& NID_desx_cbc                    NID_undef                              XN_FLAG_FN_SN
\& NID_dhKeyAgreement              NID_uniqueIdentifier                   XN_FLAG_MULTILINE
\& NID_dnQualifier                 NID_x509Certificate                    XN_FLAG_ONELINE
\& NID_dsa                         NID_x509Crl                            XN_FLAG_RFC2253
\& NID_dsaWithSHA                  NID_zlib_compression                   XN_FLAG_SEP_COMMA_PLUS
\& NID_dsaWithSHA1                 NOTHING                                XN_FLAG_SEP_CPLUS_SPC
\& NID_dsaWithSHA1_2               OPENSSL_VERSION_NUMBER                 XN_FLAG_SEP_MASK
\& NID_dsa_2                       OP_ALL                                 XN_FLAG_SEP_MULTILINE
\& NID_email_protect               OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION   XN_FLAG_SEP_SPLUS_SPC
\& NID_ext_key_usage               OP_CIPHER_SERVER_PREFERENCE            XN_FLAG_SPC_EQ
.Ve
.SS "\s-1INTERNAL\s0 \s-1ONLY\s0 functions (do not use these)"
.IX Subsection "INTERNAL ONLY functions (do not use these)"
The following functions are not intended for use from outside of Net::SSLeay module.
They might be removed, renamed or changed without prior notice in future version.
.PP
Simply \fB\s-1DO\s0 \s-1NOT\s0 \s-1USE\s0 \s-1THEM\s0\fR!
.IP "\(bu" 4
hello
.IP "\(bu" 4
blength
.IP "\(bu" 4
constant
.SH "EXAMPLES"
.IX Header "EXAMPLES"
One very good example to look at is the implementation of \f(CW\*(C`sslcat()\*(C'\fR in the
\&\f(CW\*(C`SSLeay.pm\*(C'\fR file.
.PP
The following is a simple SSLeay client (with too little error checking :\-(
.PP
.Vb 6
\&    #!/usr/bin/perl
\&    use Socket;
\&    use Net::SSLeay qw(die_now die_if_ssl_error) ;
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    ($dest_serv, $port, $msg) = @ARGV;      # Read command line
\&    $port = getservbyname ($port, \*(Aqtcp\*(Aq) unless $port =~ /^\ed+$/;
\&    $dest_ip = gethostbyname ($dest_serv);
\&    $dest_serv_params  = sockaddr_in($port, $dest_ip);
\&
\&    socket  (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
\&    connect (S, $dest_serv_params)          or die "connect: $!";
\&    select  (S); $| = 1; select (STDOUT);   # Eliminate STDIO buffering
\&
\&    # The network connection is now open, lets fire up SSL
\&
\&    $ctx = Net::SSLeay::CTX_new() or die_now("Failed to create SSL_CTX $!");
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
\&    $ssl = Net::SSLeay::new($ctx) or die_now("Failed to create SSL $!");
\&    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno
\&    $res = Net::SSLeay::connect($ssl) and die_if_ssl_error("ssl connect");
\&    print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&    # Exchange data
\&
\&    $res = Net::SSLeay::write($ssl, $msg);  # Perl knows how long $msg is
\&    die_if_ssl_error("ssl write");
\&    CORE::shutdown S, 1;  # Half close \-\-> No more output, sends EOF to server
\&    $got = Net::SSLeay::read($ssl);         # Perl returns undef on failure
\&    die_if_ssl_error("ssl read");
\&    print $got;
\&
\&    Net::SSLeay::free ($ssl);               # Tear down connection
\&    Net::SSLeay::CTX_free ($ctx);
\&    close S;
.Ve
.PP
The following is a simple SSLeay echo server (non forking):
.PP
.Vb 6
\&    #!/usr/bin/perl \-w
\&    use Socket;
\&    use Net::SSLeay qw(die_now die_if_ssl_error);
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    $our_ip = "\e0\e0\e0\e0"; # Bind to all interfaces
\&    $port = 1235;
\&    $sockaddr_template = \*(AqS n a4 x8\*(Aq;
\&    $our_serv_params = pack ($sockaddr_template, &AF_INET, $port, $our_ip);
\&
\&    socket (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
\&    bind (S, $our_serv_params)             or die "bind:   $!";
\&    listen (S, 5)                          or die "listen: $!";
\&    $ctx = Net::SSLeay::CTX_new ()         or die_now("CTX_new ($ctx): $!");
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
\&
\&    # Following will ask password unless private key is not encrypted
\&    Net::SSLeay::CTX_use_RSAPrivateKey_file ($ctx, \*(Aqplain\-rsa.pem\*(Aq,
\&                                             &Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("private key");
\&    Net::SSLeay::CTX_use_certificate_file ($ctx, \*(Aqplain\-cert.pem\*(Aq,
\&                                           &Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("certificate");
\&
\&    while (1) {
\&        print "Accepting connections...\en";
\&        ($addr = accept (NS, S))           or die "accept: $!";
\&        select (NS); $| = 1; select (STDOUT);  # Piping hot!
\&
\&        ($af,$client_port,$client_ip) = unpack($sockaddr_template,$addr);
\&        @inetaddr = unpack(\*(AqC4\*(Aq,$client_ip);
\&        print "$af connection from " .
\&        join (\*(Aq.\*(Aq, @inetaddr) . ":$client_port\en";
\&
\&        # We now have a network connection, lets fire up SSLeay...
\&
\&        $ssl = Net::SSLeay::new($ctx)      or die_now("SSL_new ($ssl): $!");
\&        Net::SSLeay::set_fd($ssl, fileno(NS));
\&
\&        $err = Net::SSLeay::accept($ssl) and die_if_ssl_error(\*(Aqssl accept\*(Aq);
\&        print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&        # Connected. Exchange some data.
\&
\&        $got = Net::SSLeay::read($ssl);     # Returns undef on fail
\&        die_if_ssl_error("ssl read");
\&        print "Got \`$got\*(Aq (" . length ($got) . " chars)\en";
\&
\&        Net::SSLeay::write ($ssl, uc ($got)) or die "write: $!";
\&        die_if_ssl_error("ssl write");
\&
\&        Net::SSLeay::free ($ssl);           # Tear down connection
\&        close NS;
\&    }
.Ve
.PP
Yet another echo server. This one runs from \f(CW\*(C`/etc/inetd.conf\*(C'\fR so it avoids
all the socket code overhead. Only caveat is opening an rsa key file \-
it had better be without any encryption or else it will not know where
to ask for the password. Note how \f(CW\*(C`STDIN\*(C'\fR and \f(CW\*(C`STDOUT\*(C'\fR are wired to \s-1SSL\s0.
.PP
.Vb 5
\&    #!/usr/bin/perl
\&    # /etc/inetd.conf
\&    #    ssltst stream tcp nowait root /path/to/server.pl server.pl
\&    # /etc/services
\&    #    ssltst         1234/tcp
\&
\&    use Net::SSLeay qw(die_now die_if_ssl_error);
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    chdir \*(Aq/key/dir\*(Aq or die "chdir: $!";
\&    $| = 1;  # Piping hot!
\&    open LOG, ">>/dev/console" or die "Can\*(Aqt open log file $!";
\&    select LOG; print "server.pl started\en";
\&
\&    $ctx = Net::SSLeay::CTX_new()     or die_now "CTX_new ($ctx) ($!)";
\&    $ssl = Net::SSLeay::new($ctx)     or die_now "new ($ssl) ($!)";
\&    Net::SSLeay::set_options($ssl, &Net::SSLeay::OP_ALL)
\&         and die_if_ssl_error("ssl set options");
\&
\&    # We get already open network connection from inetd, now we just
\&    # need to attach SSLeay to STDIN and STDOUT
\&    Net::SSLeay::set_rfd($ssl, fileno(STDIN));
\&    Net::SSLeay::set_wfd($ssl, fileno(STDOUT));
\&
\&    Net::SSLeay::use_RSAPrivateKey_file ($ssl, \*(Aqplain\-rsa.pem\*(Aq,
\&                                         Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("private key");
\&    Net::SSLeay::use_certificate_file ($ssl, \*(Aqplain\-cert.pem\*(Aq,
\&                                       Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("certificate");
\&
\&    Net::SSLeay::accept($ssl) and die_if_ssl_err("ssl accept: $!");
\&    print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&    $got = Net::SSLeay::read($ssl);
\&    die_if_ssl_error("ssl read");
\&    print "Got \`$got\*(Aq (" . length ($got) . " chars)\en";
\&
\&    Net::SSLeay::write ($ssl, uc($got)) or die "write: $!";
\&    die_if_ssl_error("ssl write");
\&
\&    Net::SSLeay::free ($ssl);         # Tear down the connection
\&    Net::SSLeay::CTX_free ($ctx);
\&    close LOG;
.Ve
.PP
There are also a number of example/test programs in the examples directory:
.PP
.Vb 11
\&    sslecho.pl   \-  A simple server, not unlike the one above
\&    minicli.pl   \-  Implements a client using low level SSLeay routines
\&    sslcat.pl    \-  Demonstrates using high level sslcat utility function
\&    get_page.pl  \-  Is a utility for getting html pages from secure servers
\&    callback.pl  \-  Demonstrates certificate verification and callback usage
\&    stdio_bulk.pl       \- Does SSL over Unix pipes
\&    ssl\-inetd\-serv.pl   \- SSL server that can be invoked from inetd.conf
\&    httpd\-proxy\-snif.pl \- Utility that allows you to see how a browser
\&                          sends https request to given server and what reply
\&                          it gets back (very educative :\-)
\&    makecert.pl  \-  Creates a self signed cert (does not use this module)
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
\&\f(CW\*(C`Net::SSLeay::read()\*(C'\fR uses an internal buffer of 32KB, thus no single read
will return more. In practice one read returns much less, usually
as much as fits in one network packet. To work around this,
you should use a loop like this:
.PP
.Vb 5
\&    $reply = \*(Aq\*(Aq;
\&    while ($got = Net::SSLeay::read($ssl)) {
\&        last if print_errs(\*(AqSSL_read\*(Aq);
\&        $reply .= $got;
\&    }
.Ve
.PP
Although there is no built-in limit in \f(CW\*(C`Net::SSLeay::write()\*(C'\fR, the network
packet size limitation applies here as well, thus use:
.PP
.Vb 1
\&    $written = 0;
\&
\&    while ($written < length($message)) {
\&        $written += Net::SSLeay::write($ssl, substr($message, $written));
\&        last if print_errs(\*(AqSSL_write\*(Aq);
\&    }
.Ve
.PP
Or alternatively you can just use the following convenience functions:
.PP
.Vb 2
\&    Net::SSLeay::ssl_write_all($ssl, $message) or die "ssl write failure";
\&    $got = Net::SSLeay::ssl_read_all($ssl) or die "ssl read failure";
.Ve
.SH "KNOWN BUGS AND CAVEATS"
.IX Header "KNOWN BUGS AND CAVEATS"
Autoloader emits a
.PP
.Vb 1
\&    Argument "xxx" isn\*(Aqt numeric in entersub at blib/lib/Net/SSLeay.pm\*(Aq
.Ve
.PP
warning if die_if_ssl_error is made autoloadable. If you figure out why,
drop me a line.
.PP
Callback set using \f(CW\*(C`SSL_set_verify()\*(C'\fR does not appear to work. This may
well be an openssl problem (e.g. see \f(CW\*(C`ssl/ssl_lib.c\*(C'\fR line 1029). Try using
\&\f(CW\*(C`SSL_CTX_set_verify()\*(C'\fR instead and do not be surprised if even this stops
working in future versions.
.PP
Callback and certificate verification stuff is generally too little tested.
.PP
Random numbers are not initialized randomly enough, especially if you
do not have \f(CW\*(C`/dev/random\*(C'\fR and/or \f(CW\*(C`/dev/urandom\*(C'\fR (such as in Solaris
platforms \- but it's been suggested that cryptorand daemon from the SUNski
package solves this). In this case you should investigate third party
software that can emulate these devices, e.g. by way of a named pipe
to some program.
.PP
Another gotcha with random number initialization is randomness
depletion. This phenomenon, which has been extensively discussed in
OpenSSL, Apache-SSL, and Apache\-mod_ssl forums, can cause your
script to block if you use \f(CW\*(C`/dev/random\*(C'\fR or to operate insecurely
if you use \f(CW\*(C`/dev/urandom\*(C'\fR. What happens is that when too much
randomness is drawn from the operating system's randomness pool
then randomness can temporarily be unavailable. \f(CW\*(C`/dev/random\*(C'\fR solves
this problem by waiting until enough randomness can be gathered \- and
this can take a long time since blocking reduces activity in the
machine and less activity provides less random events: a vicious circle.
\&\f(CW\*(C`/dev/urandom\*(C'\fR solves this dilemma more pragmatically by simply returning
predictable \*(L"random\*(R" numbers. Some\f(CW\*(C` /dev/urandom\*(C'\fR emulation software
however actually seems to implement \f(CW\*(C`/dev/random\*(C'\fR semantics. Caveat emptor.
.PP
I've been pointed to two such daemons by Mik Firestone <mik@@speed.stdio._com>
who has used them on Solaris 8:
.IP "1." 4
Entropy Gathering Daemon (\s-1EGD\s0) at <http://www.lothar.com/tech/crypto/>
.IP "2." 4
Pseudo-random number generating daemon (\s-1PRNGD\s0) at
http://www.aet.tu\-cottbus.de/personen/jaenicke/postfix_tls/prngd.html <http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
.PP
If you are using the low level \s-1API\s0 functions to communicate with other
\&\s-1SSL\s0 implementations, you would do well to call
.PP
.Vb 2
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
.Ve
.PP
to cope with some well know bugs in some other \s-1SSL\s0
implementations. The high level \s-1API\s0 functions always set all known
compatibility options.
.PP
Sometimes \f(CW\*(C`sslcat()\*(C'\fR (and the high level \s-1HTTPS\s0 functions that build on it)
is too fast in signaling the \s-1EOF\s0 to legacy \s-1HTTPS\s0 servers. This causes
the server to return empty page. To work around this problem you can
set the global variable
.PP
.Vb 1
\&    $Net::SSLeay::slowly = 1;   # Add sleep so broken servers can keep up
.Ve
.PP
\&\s-1HTTP/1\s0.1 is not supported. Specifically this module does not know to
issue or serve multiple http requests per connection. This is a serious
shortcoming, but using the \s-1SSL\s0 session cache on your server helps to
alleviate the \s-1CPU\s0 load somewhat.
.PP
As of version 1.09 many newer OpenSSL auxiliary functions were
added (from \f(CW\*(C`REM_AUTOMATICALLY_GENERATED_1_09\*(C'\fR onwards in \f(CW\*(C`SSLeay.xs\*(C'\fR).
Unfortunately I have not had any opportunity to test these. Some of
them are trivial enough that I believe they \*(L"just work\*(R", but others
have rather complex interfaces with function pointers and all. In these
cases you should proceed wit great caution.
.PP
This module defaults to using OpenSSL automatic protocol negotiation
code for automatically detecting the version of the \s-1SSL\s0 protocol
that the other end talks. With most web servers this works just
fine, but once in a while I get complaints from people that the module
does not work with some web servers. Usually this can be solved
by explicitly setting the protocol version, e.g.
.PP
.Vb 3
\&   $Net::SSLeay::ssl_version = 2;  # Insist on SSLv2
\&   $Net::SSLeay::ssl_version = 3;  # Insist on SSLv3
\&   $Net::SSLeay::ssl_version = 10; # Insist on TLSv1
.Ve
.PP
Although the autonegotiation is nice to have, the \s-1SSL\s0 standards
do not formally specify any such mechanism. Most of the world has
accepted the SSLeay/OpenSSL way of doing it as the de facto standard. But
for the few that think differently, you have to explicitly speak
the correct version. This is not really a bug, but rather a deficiency
in the standards. If a site refuses to respond or sends back some
nonsensical error codes (at the \s-1SSL\s0 handshake level), try this option
before mailing me.
.PP
On some systems, OpenSSL may be compiled without support for SSLv2.
If this is the case, Net::SSLeay will warn if ssl_version has been set
to 2.
.PP
The high level \s-1API\s0 returns the certificate of the peer, thus allowing
one to check what certificate was supplied. However, you will only be
able to check the certificate after the fact, i.e. you already sent
your form data by the time you find out that you did not trust them,
oops.
.PP
So, while being able to know the certificate after the fact is surely
useful, the security minded would still choose to do the connection
and certificate verification first and only then exchange data
with the site. Currently none of the high level \s-1API\s0 functions do
this, thus you would have to program it using the low level \s-1API\s0. A
good place to start is to see how the \f(CW\*(C`Net::SSLeay::http_cat()\*(C'\fR function
is implemented.
.PP
The high level \s-1API\s0 functions use a global file handle \f(CW\*(C`SSLCAT_S\*(C'\fR
internally. This really should not be a problem because there is no
way to interleave the high level \s-1API\s0 functions, unless you use threads
(but threads are not very well supported in perl anyway (as of version
5.6.1). However, you may run into problems if you call undocumented
internal functions in an interleaved fashion. The best solution is to \*(L"require Net::SSLeay\*(R"
in one thread after all the threads have been created.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Random number generator not seeded!!!" 4
.IX Item "Random number generator not seeded!!!"
\&\fB(W)\fR This warning indicates that \f(CW\*(C`randomize()\*(C'\fR was not able to read
\&\f(CW\*(C`/dev/random\*(C'\fR or \f(CW\*(C`/dev/urandom\*(C'\fR, possibly because your system does not
have them or they are differently named. You can still use \s-1SSL\s0, but
the encryption will not be as strong.
.IP "open_tcp_connection: destination host not found:`server' (port 123) ($!)" 4
.IX Item "open_tcp_connection: destination host not found:`server' (port 123) ($!)"
Name lookup for host named \f(CW\*(C`server\*(C'\fR failed.
.IP "open_tcp_connection: failed `server', 123 ($!)" 4
.IX Item "open_tcp_connection: failed `server', 123 ($!)"
The name was resolved, but establishing the \s-1TCP\s0 connection failed.
.IP "msg 123: 1 \- error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto" 4
.IX Item "msg 123: 1 - error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto"
SSLeay error string. The first number (123) is the \s-1PID\s0, the second number
(1) indicates the position of the error message in SSLeay error stack.
You often see a pile of these messages as errors cascade.
.IP "msg 123: 1 \- \fIerror:02001002::lib\fR\|(2) :\fIfunc\fR\|(1) :\fIreason\fR\|(2)" 4
.IX Item "msg 123: 1 - error:02001002::lib :func :reason"
The same as above, but you didn't call \fIload_error_strings()\fR so SSLeay
couldn't verbosely explain the error. You can still find out what it
means with this command:
.Sp
.Vb 1
\&    /usr/local/ssl/bin/ssleay errstr 02001002
.Ve
.IP "Password is being asked for private key" 4
.IX Item "Password is being asked for private key"
This is normal behaviour if your private key is encrypted. Either
you have to supply the password or you have to use an unencrypted
private key. Scan OpenSSL.org for the \s-1FAQ\s0 that explains how to
do this (or just study examples/makecert.pl which is used
during \f(CW\*(C`make test\*(C'\fR to do just that).
.SH "SECURITY"
.IX Header "SECURITY"
You can mitigate some of the security vulnerabilites that might be present in your \s-1SSL/TLS\s0 application:
.SS "\s-1BEAST\s0 Attack"
.IX Subsection "BEAST Attack"
http://blogs.cisco.com/security/beat\-the\-beast\-with\-tls/
https://community.qualys.com/blogs/securitylabs/2011/10/17/mitigating\-the\-beast\-attack\-on\-tls
http://blog.zoller.lu/2011/09/beast\-summary\-tls\-cbc\-countermeasures.html
.PP
The \s-1BEAST\s0 attack relies on a weakness in the way \s-1CBC\s0 mode is used in \s-1SSL/TLS\s0. 
In OpenSSL versions 0.9.6d and later, the protocol-level mitigation is enabled by default, 
thus making it not vulnerable to the \s-1BEAST\s0 attack.
.PP
Solutions:
.IP "\(bu" 4
Compile with OpenSSL versions 0.9.6d or later, which enables \s-1SSL_OP_ALL\s0 by default
.IP "\(bu" 4
Ensure \s-1SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\s0 is not enabled (its not enabled by default)
.IP "\(bu" 4
Dont support SSLv2, SSLv3
.IP "\(bu" 4
Actively control the ciphers your server supports with set_cipher_list:
.PP
Net::SSLeay::set_cipher_list($ssl, '\s-1RC4\-SHA:HIGH:\s0!ADH');
.SS "Session Resumption"
.IX Subsection "Session Resumption"
http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html
.PP
The \s-1SSL\s0 Labs vulnerability test on your \s-1SSL\s0 server might report in red:
.PP
Session resumption      No (IDs assigned but not accepted)
.PP
This report is not really bug or a vulnerability, since the server will not 
accept session resumption requests.
However, you can prevent this noise in the report by disabling the session cache altogether:
Net::SSLeay::CTX_set_session_cache_mode($ssl_ctx, 0);
.SS "Secure Renegotiation and DoS Attack"
.IX Subsection "Secure Renegotiation and DoS Attack"
https://community.qualys.com/blogs/securitylabs/2011/10/31/tls\-renegotiation\-and\-denial\-of\-service\-attacks
.PP
This is not a \*(L"security flaw,\*(R" it is more of a DoS vulnerability.
.PP
Solutions:
.IP "\(bu" 4
Do not support SSLv2
.IP "\(bu" 4
Do not set the \s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0 option
.IP "\(bu" 4
Compile with OpenSSL 0.9.8m or later
.SH "BUGS AND SUPPORT"
.IX Header "BUGS AND SUPPORT"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-Net\-SSLeay at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/Public/Dist/Display.html?Name=Net\-SSLeay <http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSLeay>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.PP
Subversion access to the latest source code etc can be obtained at
http://alioth.debian.org/projects/net\-ssleay <http://alioth.debian.org/projects/net-ssleay>
.PP
The developer mailing list (for people interested in contributing
to the source code) can be found at
http://lists.alioth.debian.org/mailman/listinfo/net\-ssleay\-devel <http://lists.alioth.debian.org/mailman/listinfo/net-ssleay-devel>
.PP
You can find documentation for this module with the \f(CW\*(C`perldoc\*(C'\fR command.
.PP
.Vb 1
\&    perldoc Net::SSLeay
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Net\-SSLeay <http://annocpan.org/dist/Net-SSLeay>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Net\-SSLeay <http://cpanratings.perl.org/d/Net-SSLeay>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Net\-SSLeay <http://search.cpan.org/dist/Net-SSLeay>
.PP
Commercial support for Net::SSLeay may be obtained from
.PP
.Vb 3
\&   Symlabs (netssleay@symlabs.com)
\&   Tel: +351\-214.222.630
\&   Fax: +351\-214.222.637
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Maintained by Mike McCauley and Florian Ragwitz since November 2005
.PP
Originally written by Sampo Kelloma\*:ki <sampo@symlabs.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-2003 Sampo Kelloma\*:ki <sampo@symlabs.com>
.PP
Copyright (C) 2005\-2006 Florian Ragwitz <rafl@debian.org>
.PP
Copyright (C) 2005 Mike McCauley <mikem@open.com.au>
.PP
All Rights Reserved.
.PP
Distribution and use of this module is under the same terms as the
OpenSSL package itself (i.e. free, but mandatory attribution; \s-1NO\s0
\&\s-1WARRANTY\s0). Please consult \s-1LICENSE\s0 file in the root of the OpenSSL
distribution.
.PP
While the source distribution of this perl module does not contain
Eric's or OpenSSL's code, if you use this module you will use OpenSSL
library. Please give Eric and OpenSSL team credit (as required by
their licenses).
.PP
And remember, you, and nobody else but you, are responsible for
auditing this module and OpenSSL library for security problems,
backdoors, and general suitability for your application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 10
\&  Net::SSLeay::Handle                      \- File handle interface
\&  ./examples                               \- Example servers and a clients
\&  <http://www.openssl.org/>                \- OpenSSL source, documentation, etc
\&  openssl\-users\-request@openssl.org        \- General OpenSSL mailing list
\&  <http://www.ietf.org/rfc/rfc2246.txt>    \- TLS 1.0 specification
\&  <http://www.w3c.org>                     \- HTTP specifications
\&  <http://www.ietf.org/rfc/rfc2617.txt>    \- How to send password
\&  <http://www.lothar.com/tech/crypto/>     \- Entropy Gathering Daemon (EGD)
\&  <http://www.aet.tu\-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
\&                           \- pseudo\-random number generating daemon (PRNGD)
\&  perl(1)
\&  perlref(1)
\&  perllol(1)
\&  perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod
.Ve
                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::SSLeay5.18.3pm                          0100644 0001750 0001750 00001203237 12566241553 023621  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSLeay 3"
.TH Net::SSLeay 3 "2014-01-08" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSLeay \- Perl extension for using OpenSSL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::SSLeay qw(get_https post_https sslcat make_headers make_form);
\&
\&  ($page) = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);                 # Case 1
\&
\&  ($page, $response, %reply_headers)
\&         = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq,                   # Case 2
\&                make_headers(User\-Agent => \*(AqCryptozilla/5.0b1\*(Aq,
\&                             Referer    => \*(Aqhttps://www.bacus.pt\*(Aq
\&                ));
\&
\&  ($page, $result, %headers) =                                   # Case 2b
\&         = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/protected.html\*(Aq,
\&              make_headers(Authorization =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("$user:$pass",\*(Aq\*(Aq))
\&              );
\&
\&  ($page, $response, %reply_headers)
\&         = post_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/foo.cgi\*(Aq, \*(Aq\*(Aq,       # Case 3
\&                make_form(OK   => \*(Aq1\*(Aq,
\&                          name => \*(AqSampo\*(Aq
\&                ));
\&
\&  $reply = sslcat($host, $port, $request);                       # Case 4
\&
\&  ($reply, $err, $server_cert) = sslcat($host, $port, $request); # Case 5
\&
\&  $Net::SSLeay::trace = 2;  # 0=no debugging, 1=ciphers, 2=trace, 3=dump data
\&
\&  Net::SSLeay::initialize(); # Initialize ssl library once
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSLeay module contains perl bindings to openssl (<http://www.openssl.org>) library.
.PP
\&\fB\s-1COMPATIBILITY NOTE:\s0\fR Net::SSLeay cannot be built with pre\-0.9.3 openssl. It is strongly recommended
to use at least 0.9.7 (as older versions are not tested during development). Some low level \s-1API\s0 functions
may be available with certain openssl versions.
.PP
Net::SSLeay module basically comprise of:
.IP "\(bu" 4
High level functions for accessing web servers (by using \s-1HTTP/HTTPS\s0)
.IP "\(bu" 4
Low level \s-1API \s0(mostly mapped 1:1 to openssl's C functions)
.IP "\(bu" 4
Convenience functions (related to low level \s-1API\s0 but with more perl friendly interface)
.PP
There is also a related module called Net::SSLeay::Handle included in this
distribution that you might want to use instead. It has its own pod
documentation.
.SS "High level functions for accessing web servers"
.IX Subsection "High level functions for accessing web servers"
This module offers some high level convenience functions for accessing
web pages on \s-1SSL\s0 servers (for symmetry, the same \s-1API\s0 is offered for
accessing http servers, too), an \f(CW\*(C`sslcat()\*(C'\fR function for writing your own
clients, and finally access to the \s-1SSL\s0 api of the SSLeay/OpenSSL package
so you can write servers or clients for more complicated applications.
.PP
For high level functions it is most convenient to import them into your
main namespace as indicated in the synopsis.
.PP
\fIBasic set of functions\fR
.IX Subsection "Basic set of functions"
.IP "\(bu" 4
get_https
.IP "\(bu" 4
post_https
.IP "\(bu" 4
put_https
.IP "\(bu" 4
head_https
.IP "\(bu" 4
do_https
.IP "\(bu" 4
sslcat
.IP "\(bu" 4
https_cat
.IP "\(bu" 4
make_form
.IP "\(bu" 4
make_headers
.PP
\&\fBCase 1 (in \s-1SYNOPSIS\s0)\fR demonstrates the typical invocation of \fIget_https()\fR to fetch an \s-1HTML\s0
page from secure server. The first argument provides the hostname or \s-1IP\s0
in dotted decimal notation of the remote server to contact. The second
argument is the \s-1TCP\s0 port at the remote end (your own port is picked
arbitrarily from high numbered ports as usual for \s-1TCP\s0). The third
argument is the \s-1URL\s0 of the page without the host name part. If in
doubt consult the \s-1HTTP\s0 specifications at <http://www.w3c.org>.
.PP
\&\fBCase 2 (in \s-1SYNOPSIS\s0)\fR demonstrates full fledged use of \f(CW\*(C`get_https()\*(C'\fR. As can be seen,
\&\f(CW\*(C`get_https()\*(C'\fR parses the response and response headers and returns them as
a list, which can be captured in a hash for later reference. Also a
fourth argument to \f(CW\*(C`get_https()\*(C'\fR is used to insert some additional headers
in the request. \f(CW\*(C`make_headers()\*(C'\fR is a function that will convert a list or
hash to such headers. By default \f(CW\*(C`get_https()\*(C'\fR supplies \f(CW\*(C`Host\*(C'\fR (to make
virtual hosting easy) and \f(CW\*(C`Accept\*(C'\fR (reportedly needed by \s-1IIS\s0) headers.
.PP
\&\fBCase 2b (in \s-1SYNOPSIS\s0)\fR demonstrates how to get a password protected page. Refer to
the \s-1HTTP\s0 protocol specifications for further details (e.g. \s-1RFC\-2617\s0).
.PP
\&\fBCase 3 (in \s-1SYNOPSIS\s0)\fR invokes \f(CW\*(C`post_https()\*(C'\fR to submit a \s-1HTML/CGI\s0 form to a secure
server. The first four arguments are equal to \f(CW\*(C`get_https()\*(C'\fR (note that
the empty string (\f(CW\*(Aq\*(Aq\fR) is passed as header argument).
The fifth argument is the
contents of the form formatted according to \s-1CGI\s0 specification. 
Do not post \s-1UTF\-8\s0 data as content: use utf8::downgrade first. In this
case the helper function \f(CW\*(C`make_https()\*(C'\fR is used to do the formatting,
but you could pass any string. \f(CW\*(C`post_https()\*(C'\fR automatically adds
\&\f(CW\*(C`Content\-Type\*(C'\fR and \f(CW\*(C`Content\-Length\*(C'\fR headers to the request.
.PP
\&\fBCase 4 (in \s-1SYNOPSIS\s0)\fR shows the fundamental \f(CW\*(C`sslcat()\*(C'\fR function (inspired in spirit by
the \f(CW\*(C`netcat\*(C'\fR utility :\-). It's your swiss army knife that allows you to
easily contact servers, send some data, and then get the response. You
are responsible for formatting the data and parsing the response \-
\&\f(CW\*(C`sslcat()\*(C'\fR is just a transport.
.PP
\&\fBCase 5 (in \s-1SYNOPSIS\s0)\fR is a full invocation of \f(CW\*(C`sslcat()\*(C'\fR which allows the return of errors
as well as the server (peer) certificate.
.PP
The \f(CW$trace\fR global variable can be used to control the verbosity of the
high level functions. Level 0 guarantees silence, level 1 (the default)
only emits error messages.
.PP
\fIAlternate versions of high-level \s-1API\s0\fR
.IX Subsection "Alternate versions of high-level API"
.IP "\(bu" 4
get_https3
.IP "\(bu" 4
post_https3
.IP "\(bu" 4
put_https3
.IP "\(bu" 4
get_https4
.IP "\(bu" 4
post_https4
.IP "\(bu" 4
put_https4
.PP
The above mentioned functions actually return the response headers as
a list, which only gets converted to hash upon assignment (this
assignment looses information if the same header occurs twice, as may
be the case with cookies). There are also other variants of the
functions that return unprocessed headers and that return a reference
to a hash.
.PP
.Vb 4
\&  ($page, $response, @headers) = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);
\&  for ($i = 0; $i < $#headers; $i+=2) {
\&      print "$headers[$i] = " . $headers[$i+1] . "\en";
\&  }
\&
\&  ($page, $response, $headers, $server_cert)
\&    = get_https3(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);
\&  print "$headers\en";
\&
\&  ($page, $response, $headers_ref)
\&    = get_https4(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);
\&  for $k (sort keys %{$headers_ref}) {
\&      for $v (@{$$headers_ref{$k}}) {
\&          print "$k = $v\en";
\&      }
\&  }
.Ve
.PP
All of the above code fragments accomplish the same thing: display all
values of all headers. The \s-1API\s0 functions ending in \*(L"3\*(R" return the
headers simply as a scalar string and it is up to the application to
split them up. The functions ending in \*(L"4\*(R" return a reference to
a hash of arrays (see perlref and perllol if you are
not familiar with complex perl data structures). To access a single value
of such a header hash you would do something like
.PP
.Vb 1
\&  print $$headers_ref{COOKIE}[0];
.Ve
.PP
Variants 3 and 4 also allow you to discover the server certificate
in case you would like to store or display it, e.g.
.PP
.Vb 11
\&  ($p, $resp, $hdrs, $server_cert) = get_https3(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);
\&  if (!defined($server_cert) || ($server_cert == 0)) {
\&      warn "Subject Name: undefined, Issuer  Name: undefined";
\&  } else {
\&      warn \*(AqSubject Name: \*(Aq
\&          . Net::SSLeay::X509_NAME_oneline(
\&                 Net::SSLeay::X509_get_subject_name($server_cert))
\&              . \*(AqIssuer  Name: \*(Aq
\&                  . Net::SSLeay::X509_NAME_oneline(
\&                         Net::SSLeay::X509_get_issuer_name($server_cert));
\&  }
.Ve
.PP
Beware that this method only allows after the fact verification of
the certificate: by the time \f(CW\*(C`get_https3()\*(C'\fR has returned the https
request has already been sent to the server, whether you decide to
trust it or not. To do the verification correctly you must either
employ the OpenSSL certificate verification framework or use
the lower level \s-1API\s0 to first connect and verify the certificate
and only then send the http data. See the implementation of \f(CW\*(C`ds_https3()\*(C'\fR
for guidance on how to do this.
.PP
\fIUsing client certificates\fR
.IX Subsection "Using client certificates"
.PP
Secure web communications are encrypted using symmetric crypto keys
exchanged using encryption based on the certificate of the
server. Therefore in all \s-1SSL\s0 connections the server must have a
certificate. This serves both to authenticate the server to the
clients and to perform the key exchange.
.PP
Sometimes it is necessary to authenticate the client as well. Two
options are available: \s-1HTTP\s0 basic authentication and a client side
certificate. The basic authentication over \s-1HTTPS\s0 is actually quite
safe because \s-1HTTPS\s0 guarantees that the password will not travel in
the clear. Never-the-less, problems like easily guessable passwords
remain. The client certificate method involves authentication of the
client at the \s-1SSL\s0 level using a certificate. For this to work, both the
client and the server have certificates (which typically are
different) and private keys.
.PP
The \s-1API\s0 functions outlined above accept additional arguments that
allow one to supply the client side certificate and key files. The
format of these files is the same as used for server certificates and
the caveat about encrypting private keys applies.
.PP
.Vb 5
\&  ($page, $result, %headers) =                                   # 2c
\&         = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/protected.html\*(Aq,
\&              make_headers(Authorization =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("$user:$pass",\*(Aq\*(Aq)),
\&              \*(Aq\*(Aq, $mime_type6, $path_to_crt7, $path_to_key8);
\&
\&  ($page, $response, %reply_headers)
\&         = post_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/foo.cgi\*(Aq,           # 3b
\&              make_headers(\*(AqAuthorization\*(Aq =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("$user:$pass",\*(Aq\*(Aq)),
\&              make_form(OK   => \*(Aq1\*(Aq, name => \*(AqSampo\*(Aq),
\&              $mime_type6, $path_to_crt7, $path_to_key8);
.Ve
.PP
\&\fBCase 2c (in \s-1SYNOPSIS\s0)\fR demonstrates getting a password protected page that also requires
a client certificate, i.e. it is possible to use both authentication
methods simultaneously.
.PP
\&\fBCase 3b (in \s-1SYNOPSIS\s0)\fR is a full blown \s-1POST\s0 to a secure server that requires both password
authentication and a client certificate, just like in case 2c.
.PP
Note: The client will not send a certificate unless the server requests one.
This is typically achieved by setting the verify mode to \f(CW\*(C`VERIFY_PEER\*(C'\fR on the
server:
.PP
.Vb 1
\&  Net::SSLeay::set_verify(ssl, Net::SSLeay::VERIFY_PEER, 0);
.Ve
.PP
See \f(CW\*(C`perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod\*(C'\fR for a full description.
.PP
\fIWorking through a web proxy\fR
.IX Subsection "Working through a web proxy"
.IP "\(bu" 4
set_proxy
.PP
\&\f(CW\*(C`Net::SSLeay\*(C'\fR can use a web proxy to make its connections. You need to
first set the proxy host and port using \f(CW\*(C`set_proxy()\*(C'\fR and then just
use the normal \s-1API\s0 functions, e.g:
.PP
.Vb 2
\&  Net::SSLeay::set_proxy(\*(Aqgateway.myorg.com\*(Aq, 8080);
\&  ($page) = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/\*(Aq);
.Ve
.PP
If your proxy requires authentication, you can supply a username and
password as well
.PP
.Vb 6
\&  Net::SSLeay::set_proxy(\*(Aqgateway.myorg.com\*(Aq, 8080, \*(Aqjoe\*(Aq, \*(Aqsalainen\*(Aq);
\&  ($page, $result, %headers) =
\&         = get_https(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/protected.html\*(Aq,
\&              make_headers(Authorization =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("susie:pass",\*(Aq\*(Aq))
\&              );
.Ve
.PP
This example demonstrates the case where we authenticate to the proxy as
\&\f(CW"joe"\fR and to the final web server as \f(CW"susie"\fR. Proxy authentication
requires the \f(CW\*(C`MIME::Base64\*(C'\fR module to work.
.PP
\fI\s-1HTTP \s0(without S) \s-1API\s0\fR
.IX Subsection "HTTP (without S) API"
.IP "\(bu" 4
get_http
.IP "\(bu" 4
post_http
.IP "\(bu" 4
tcpcat
.IP "\(bu" 4
get_httpx
.IP "\(bu" 4
post_httpx
.IP "\(bu" 4
tcpxcat
.PP
Over the years it has become clear that it would be convenient to use
the light-weight flavour \s-1API\s0 of \f(CW\*(C`Net::SSLeay\*(C'\fR for normal \s-1HTTP\s0 as well (see
\&\f(CW\*(C`LWP\*(C'\fR for the heavy-weight object-oriented approach). In fact it would be
nice to be able to flip https on and off on the fly. Thus regular \s-1HTTP\s0
support was evolved.
.PP
.Vb 3
\&  use Net::SSLeay qw(get_http post_http tcpcat
\&                      get_httpx post_httpx tcpxcat
\&                      make_headers make_form);
\&
\&  ($page, $result, %headers)
\&         = get_http(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/protected.html\*(Aq,
\&              make_headers(Authorization =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("$user:$pass",\*(Aq\*(Aq))
\&              );
\&
\&  ($page, $response, %reply_headers)
\&         = post_http(\*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/foo.cgi\*(Aq, \*(Aq\*(Aq,
\&                make_form(OK   => \*(Aq1\*(Aq,
\&                          name => \*(AqSampo\*(Aq
\&                ));
\&
\&  ($reply, $err) = tcpcat($host, $port, $request);
\&
\&  ($page, $result, %headers)
\&         = get_httpx($usessl, \*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/protected.html\*(Aq,
\&              make_headers(Authorization =>
\&                           \*(AqBasic \*(Aq . MIME::Base64::encode("$user:$pass",\*(Aq\*(Aq))
\&              );
\&
\&  ($page, $response, %reply_headers)
\&         = post_httpx($usessl, \*(Aqwww.bacus.pt\*(Aq, 443, \*(Aq/foo.cgi\*(Aq, \*(Aq\*(Aq,
\&                make_form(OK   => \*(Aq1\*(Aq,  name => \*(AqSampo\*(Aq ));
\&
\&  ($reply, $err, $server_cert) = tcpxcat($usessl, $host, $port, $request);
.Ve
.PP
As can be seen, the \f(CW"x"\fR family of APIs takes as the first argument a flag
which indicates whether \s-1SSL\s0 is used or not.
.SS "Certificate verification and Certificate Revocation Lists (CRLs)"
.IX Subsection "Certificate verification and Certificate Revocation Lists (CRLs)"
OpenSSL supports the ability to verify peer certificates. It can also
optionally check the peer certificate against a Certificate Revocation
List (\s-1CRL\s0) from the certificates issuer. A \s-1CRL\s0 is a file, created by
the certificate issuer that lists all the certificates that it
previously signed, but which it now revokes. CRLs are in \s-1PEM\s0 format.
.PP
You can enable \f(CW\*(C`Net::SSLeay CRL\*(C'\fR checking like this:
.PP
.Vb 3
\&            &Net::SSLeay::X509_STORE_set_flags
\&                (&Net::SSLeay::CTX_get_cert_store($ssl),
\&                 &Net::SSLeay::X509_V_FLAG_CRL_CHECK);
.Ve
.PP
After setting this flag, if OpenSSL checks a peer's certificate, then
it will attempt to find a \s-1CRL\s0 for the issuer. It does this by looking
for a specially named file in the search directory specified by
CTX_load_verify_locations.  \s-1CRL\s0 files are named with the hash of the
issuer's subject name, followed by \f(CW\*(C`.r0\*(C'\fR, \f(CW\*(C`.r1\*(C'\fR etc.  For example
\&\f(CW\*(C`ab1331b2.r0\*(C'\fR, \f(CW\*(C`ab1331b2.r1\*(C'\fR. It will read all the .r files for the
issuer, and then check for a revocation of the peer certificate in all
of them.  (You can also force it to look in a specific named \s-1CRL\s0
file., see below).  You can find out the hash of the issuer subject
name in a \s-1CRL\s0 with
.PP
.Vb 1
\&        openssl crl \-in crl.pem \-hash \-noout
.Ve
.PP
If the peer certificate does not pass the revocation list, or if no
\&\s-1CRL\s0 is found, then the handshaking fails with an error.
.PP
You can also force OpenSSL to look for CRLs in one or more arbitrarily
named files.
.PP
.Vb 9
\&    my $bio = Net::SSLeay::BIO_new_file($crlfilename, \*(Aqr\*(Aq);
\&    my $crl = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
\&    if ($crl) {
\&        Net::SSLeay::X509_STORE_add_crl(
\&             Net::SSLeay::CTX_get_cert_store($ssl, $crl)
\&        );
\&    } else {
\&        error reading CRL....
\&    }
.Ve
.SS "Using Net::SSLeay in multi-threaded applications"
.IX Subsection "Using Net::SSLeay in multi-threaded applications"
\&\fB\s-1IMPORTANT:\s0 versions 1.42 or earlier are not thread-safe!\fR
.PP
Net::SSLeay module implements all necessary stuff to be ready for multi-threaded
environment \- it requires openssl\-0.9.7 or newer. The implementation fully follows thread safety related requirements
of openssl library(see <http://www.openssl.org/docs/crypto/threads.html>).
.PP
If you are about to use Net::SSLeay (or any other module based on Net::SSLeay) in multi-threaded
perl application it is recommended to follow this best-practice:
.PP
\fIInitialization\fR
.IX Subsection "Initialization"
.PP
Load and initialize Net::SSLeay module in the main thread:
.PP
.Vb 2
\&    use threads;
\&    use Net::SSLeay;
\&
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    sub do_master_job {
\&      #... call whatever from Net::SSLeay
\&    }
\&
\&    sub do_worker_job {
\&      #... call whatever from Net::SSLeay
\&    }
\&
\&    #start threads
\&    my $master  = threads\->new(\e&do_master_job, \*(Aqparam1\*(Aq, \*(Aqparam2\*(Aq);
\&    my @workers = threads\->new(\e&do_worker_job, \*(Aqarg1\*(Aq, \*(Aqarg2\*(Aq) for (1..10);
\&
\&    #waiting for all threads to finish
\&    $_\->join() for (threads\->list);
.Ve
.PP
\&\s-1NOTE:\s0 Openssl's \f(CW\*(C`int SSL_library_init(void)\*(C'\fR function (which is also aliased as
\&\f(CW\*(C`SSLeay_add_ssl_algorithms\*(C'\fR, \f(CW\*(C`OpenSSL_add_ssl_algorithms\*(C'\fR and \f(CW\*(C`add_ssl_algorithms\*(C'\fR)
is not re-entrant and multiple calls can cause a crash in threaded application.
Net::SSLeay implements flags preventing repeated calls to this function,
therefore even multiple initialization via \fINet::SSLeay::SSLeay_add_ssl_algorithms()\fR
should work without trouble.
.PP
\fIUsing callbacks\fR
.IX Subsection "Using callbacks"
.PP
Do not use callbacks across threads (the module blocks cross-thread callback operations
and throws a warning). Allways do the callback setup, callback use and callback destruction
within the same thread.
.PP
\fIUsing openssl elements\fR
.IX Subsection "Using openssl elements"
.PP
All openssl elements (X509, \s-1SSL_CTX, ...\s0) can be directly passed between threads.
.PP
.Vb 2
\&    use threads;
\&    use Net::SSLeay;
\&
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    sub do_job {
\&      my $context = shift;
\&      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { "secret" });
\&      #...
\&    }
\&
\&    my $c = Net::SSLeay::CTX_new();
\&    threads\->create(\e&do_job, $c);
.Ve
.PP
Or:
.PP
.Vb 2
\&    use threads;
\&    use Net::SSLeay;
\&
\&    my $context; #does not need to be \*(Aqshared\*(Aq
\&
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    sub do_job {
\&      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { "secret" });
\&      #...
\&    }
\&
\&    $context = Net::SSLeay::CTX_new();
\&    threads\->create(\e&do_job);
.Ve
.PP
\fIUsing other perl modules based on Net::SSLeay\fR
.IX Subsection "Using other perl modules based on Net::SSLeay"
.PP
It should be fine to use any other module based on Net::SSLeay (like IO::Socket::SSL)
in multi-threaded applications. It is generally recommended to do any global initialization
of such a module in the main thread before calling \f(CW\*(C`threads\->new(..)\*(C'\fR or
\&\f(CW\*(C`threads\->create(..)\*(C'\fR but it might differ module by module.
.PP
To be play safe you can load and init Net::SSLeay explicitly in the main thread:
.PP
.Vb 2
\&    use Net::SSLeay;
\&    use Other::SSLeay::Based::Module;
\&
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();Net::SSLeay::initialize();
\&    Net::SSLeay::initialize();
.Ve
.PP
Or even safer:
.PP
.Vb 2
\&    use Net::SSLeay;
\&    use Other::SSLeay::Based::Module;
\&
\&    BEGIN {
\&      Net::SSLeay::load_error_strings();
\&      Net::SSLeay::SSLeay_add_ssl_algorithms();
\&      Net::SSLeay::randomize();Net::SSLeay::initialize();
\&    }
.Ve
.PP
\fICombining Net::SSLeay with other modules linked with openssl\fR
.IX Subsection "Combining Net::SSLeay with other modules linked with openssl"
.PP
\&\fB\s-1BEWARE:\s0 This might be a big trouble! This is not guaranteed be thread-safe!\fR
.PP
There are many other (\s-1XS\s0) modules linked directly to openssl library (like Crypt::SSLeay).
.PP
As it is expected that also \*(L"another\*(R" module will call \f(CW\*(C`SSLeay_add_ssl_algorithms\*(C'\fR at some point
we have again a trouble with multiple openssl initialization by Net::SSLeay and \*(L"another\*(R" module.
.PP
As you can expect Net::SSLeay is not able to avoid multiple initialization of openssl library
called by \*(L"another\*(R" module, thus you have to handle this on your own (in some cases it might
not be possible at all to avoid this).
.PP
\fIThreading with get_https and friends\fR
.IX Subsection "Threading with get_https and friends"
.PP
The convenience functions get_https, post_https etc all initialize the \s-1SSL\s0 library by calling
Net::SSLeay::initialize which does the conventional library initialization:
.PP
.Vb 3
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
.Ve
.PP
Net::SSLeay::initialize initializes the \s-1SSL\s0 library at most once.
You can override the Net::SSLeay::initialize function if you desire
some other type of initialization behaviour by get_https and friends.
You can call Net::SSLeay::initialize from your own code if you desire this conventional library initialization.
.SS "Convenience routines"
.IX Subsection "Convenience routines"
To be used with Low level \s-1API\s0
.PP
.Vb 5
\&    Net::SSLeay::randomize($rn_seed_file,$additional_seed);
\&    Net::SSLeay::set_cert_and_key($ctx, $cert_path, $key_path);
\&    $cert = Net::SSLeay::dump_peer_certificate($ssl);
\&    Net::SSLeay::ssl_write_all($ssl, $message) or die "ssl write failure";
\&    $got = Net::SSLeay::ssl_read_all($ssl) or die "ssl read failure";
\&
\&    $got = Net::SSLeay::ssl_read_CRLF($ssl [, $max_length]);
\&    $got = Net::SSLeay::ssl_read_until($ssl [, $delimit [, $max_length]]);
\&    Net::SSLeay::ssl_write_CRLF($ssl, $message);
.Ve
.IP "\(bu" 4
randomize
.Sp
seeds the openssl \s-1PRNG\s0 with \f(CW\*(C`/dev/urandom\*(C'\fR (see the top of \f(CW\*(C`SSLeay.pm\*(C'\fR
for how to change or configure this) and optionally with user provided
data. It is very important to properly seed your random numbers, so
do not forget to call this. The high level \s-1API\s0 functions automatically
call \f(CW\*(C`randomize()\*(C'\fR so it is not needed with them. See also caveats.
.IP "\(bu" 4
set_cert_and_key
.Sp
takes two file names as arguments and sets
the certificate and private key to those. This can be used to
set either server certificates or client certificates.
.IP "\(bu" 4
dump_peer_certificate
.Sp
allows you to get a plaintext description of the
certificate the peer (usually the server) presented to us.
.IP "\(bu" 4
ssl_read_all
.Sp
see ssl_write_all (below)
.IP "\(bu" 4
ssl_write_all
.Sp
\&\f(CW\*(C`ssl_read_all()\*(C'\fR and \f(CW\*(C`ssl_write_all()\*(C'\fR provide true blocking semantics for
these operations (see limitation, below, for explanation). These are
much preferred to the low level \s-1API\s0 equivalents (which implement \s-1BSD\s0
blocking semantics). The message argument to \f(CW\*(C`ssl_write_all()\*(C'\fR can be
a reference. This is helpful to avoid unnecessary copying when writing
something big, e.g:
.Sp
.Vb 2
\&    $data = \*(AqA\*(Aq x 1000000000;
\&    Net::SSLeay::ssl_write_all($ssl, \e$data) or die "ssl write failed";
.Ve
.IP "\(bu" 4
ssl_read_CRLF
.Sp
uses \f(CW\*(C`ssl_read_all()\*(C'\fR to read in a line terminated with a
carriage return followed by a linefeed (\s-1CRLF\s0).  The \s-1CRLF\s0 is included in
the returned scalar.
.IP "\(bu" 4
ssl_read_until
.Sp
uses \f(CW\*(C`ssl_read_all()\*(C'\fR to read from the \s-1SSL\s0 input
stream until it encounters a programmer specified delimiter.
If the delimiter is undefined, \f(CW$/\fR is used.  If \f(CW$/\fR is undefined,
\&\f(CW\*(C`\en\*(C'\fR is used.  One can optionally set a maximum length of bytes to read
from the \s-1SSL\s0 input stream.
.IP "\(bu" 4
ssl_write_CRLF
.Sp
writes \f(CW$message\fR and appends \s-1CRLF\s0 to the \s-1SSL\s0 output stream.
.SS "Initialization"
.IX Subsection "Initialization"
In order to use the low level \s-1API\s0 you should start your programs with
the following incantation:
.PP
.Vb 6
\&        use Net::SSLeay qw(die_now die_if_ssl_error);
\&        Net::SSLeay::load_error_strings();
\&        Net::SSLeay::SSLeay_add_ssl_algorithms();    # Important!
\&        Net::SSLeay::ENGINE_load_builtin_engines();  # If you want built\-in engines
\&        Net::SSLeay::ENGINE_register_all_complete(); # If you want built\-in engines
\&        Net::SSLeay::randomize();
.Ve
.SS "Error handling functions"
.IX Subsection "Error handling functions"
I can not emphasize the need to check for error enough. Use these
functions even in the most simple programs, they will reduce debugging
time greatly. Do not ask questions on the mailing list without having
first sprinkled these in your code.
.IP "\(bu" 4
die_now
.IP "\(bu" 4
die_if_ssl_error
.Sp
\&\f(CW\*(C`die_now()\*(C'\fR and \f(CW\*(C`die_if_ssl_error()\*(C'\fR are used to conveniently print the SSLeay error
stack when something goes wrong:
.Sp
.Vb 1
\&        Net::SSLeay::connect($ssl) or die_now("Failed SSL connect ($!)");
\&
\&
\&        Net::SSLeay::write($ssl, "foo") or die_if_ssl_error("SSL write ($!)");
.Ve
.IP "\(bu" 4
print_errs
.Sp
You can also use \f(CW\*(C`Net::SSLeay::print_errs()\*(C'\fR to dump the error stack without
exiting the program. As can be seen, your code becomes much more readable
if you import the error reporting functions into your main name space.
.SS "Sockets"
.IX Subsection "Sockets"
Perl uses file handles for all I/O. While SSLeay has a quite flexible \s-1BIO\s0
mechanism and perl has an evolved PerlIO mechanism, this module still
sticks to using file descriptors. Thus to attach SSLeay to a socket you
should use \f(CW\*(C`fileno()\*(C'\fR to extract the underlying file descriptor:
.PP
.Vb 1
\&    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno
.Ve
.PP
You should also set \f(CW$|\fR to 1 to eliminate \s-1STDIO\s0 buffering so you do not
get confused if you use perl I/O functions to manipulate your socket
handle.
.PP
If you need to \f(CWselect(2)\fR on the socket, go right ahead, but be warned
that OpenSSL does some internal buffering so SSL_read does not always
return data even if the socket selected for reading (just keep on
selecting and trying to read). \f(CW\*(C`Net::SSLeay\*(C'\fR is no different from the
C language OpenSSL in this respect.
.SS "Callbacks"
.IX Subsection "Callbacks"
You can establish a per-context verify callback function something like this:
.PP
.Vb 6
\&        sub verify {
\&            my ($ok, $x509_store_ctx) = @_;
\&            print "Verifying certificate...\en";
\&                ...
\&            return $ok;
\&        }
.Ve
.PP
It is used like this:
.PP
.Vb 1
\&        Net::SSLeay::set_verify ($ssl, Net::SSLeay::VERIFY_PEER, \e&verify);
.Ve
.PP
Per-context callbacks for decrypting private keys are implemented.
.PP
.Vb 5
\&        Net::SSLeay::CTX_set_default_passwd_cb($ctx, sub { "top\-secret" });
\&        Net::SSLeay::CTX_use_PrivateKey_file($ctx, "key.pem",
\&                                             Net::SSLeay::FILETYPE_PEM)
\&            or die "Error reading private key";
\&        Net::SSLeay::CTX_set_default_passwd_cb($ctx, undef);
.Ve
.PP
If Hello Extensions are supported by your OpenSSL,
a session secret callback can be set up to be called when a session secret is set
by openssl.
.PP
Establish it like this:
    Net::SSLeay::set_session_secret_cb($ssl, \e&session_secret_cb, \f(CW$somedata\fR);
.PP
It will be called like this:
.PP
.Vb 4
\&    sub session_secret_cb
\&    {
\&        my ($secret, \e@cipherlist, \e$preferredcipher, $somedata) = @_;
\&    }
.Ve
.PP
No other callbacks are implemented. You do not need to use any
callback for simple (i.e. normal) cases where the SSLeay built-in
verify mechanism satisfies your needs.
.PP
It is required to reset these callbacks to undef immediately after use to prevent
memory leaks, thread safety problems and crashes on exit that
can occur if different threads set different callbacks.
.PP
If you want to use callback stuff, see examples/callback.pl! It's the
only one I am able to make work reliably.
.SS "Low level \s-1API\s0"
.IX Subsection "Low level API"
In addition to the high level functions outlined above, this module
contains straight-forward access to \s-1CRYPTO\s0 and \s-1SSL\s0 parts of OpenSSL C \s-1API.\s0
.PP
See the \f(CW\*(C`*.h\*(C'\fR headers from OpenSSL C distribution for a list of low level
SSLeay functions to call (check SSLeay.xs to see if some function has been
implemented). The module strips the initial \f(CW"SSL_"\fR off of the SSLeay names.
Generally you should use \f(CW\*(C`Net::SSLeay::\*(C'\fR in its place.
.PP
Note that some functions are prefixed with \f(CW"P_"\fR \- these are very close to
the original \s-1API\s0 however contain some kind of a wrapper making its interface
more perl friendly.
.PP
For example:
.PP
In C:
.PP
.Vb 1
\&        #include <ssl.h>
\&
\&        err = SSL_set_verify (ssl, SSL_VERIFY_CLIENT_ONCE,
\&                                   &your_call_back_here);
.Ve
.PP
In Perl:
.PP
.Vb 1
\&        use Net::SSLeay;
\&
\&        $err = Net::SSLeay::set_verify ($ssl,
\&                                        Net::SSLeay::VERIFY_CLIENT_ONCE,
\&                                        \e&your_call_back_here);
.Ve
.PP
If the function does not start with \f(CW\*(C`SSL_\*(C'\fR you should use the full
function name, e.g.:
.PP
.Vb 1
\&        $err = Net::SSLeay::ERR_get_error;
.Ve
.PP
The following new functions behave in perlish way:
.PP
.Vb 4
\&        $got = Net::SSLeay::read($ssl);
\&                                    # Performs SSL_read, but returns $got
\&                                    # resized according to data received.
\&                                    # Returns undef on failure.
\&
\&        Net::SSLeay::write($ssl, $foo) || die;
\&                                    # Performs SSL_write, but automatically
\&                                    # figures out the size of $foo
.Ve
.PP
\fILow level \s-1API:\s0 Version related functions\fR
.IX Subsection "Low level API: Version related functions"
.IP "\(bu" 4
SSLeay
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Gives version number (numeric) of underlaying openssl library.
.Sp
.Vb 10
\& my $ver_number = Net::SSLeay::SSLeay();
\& # returns: the number identifying the openssl release
\& #
\& # 0x00903100 => openssl\-0.9.3
\& # 0x00904100 => openssl\-0.9.4
\& # 0x00905100 => openssl\-0.9.5
\& # 0x0090600f => openssl\-0.9.6
\& # 0x0090601f => openssl\-0.9.6a
\& # 0x0090602f => openssl\-0.9.6b
\& # ...
\& # 0x009060df => openssl\-0.9.6m
\& # 0x0090700f => openssl\-0.9.7
\& # 0x0090701f => openssl\-0.9.7a
\& # 0x0090702f => openssl\-0.9.7b
\& # ...
\& # 0x009070df => openssl\-0.9.7m
\& # 0x0090800f => openssl\-0.9.8
\& # 0x0090801f => openssl\-0.9.8a
\& # 0x0090802f => openssl\-0.9.8b
\& # ...
\& # 0x0090814f => openssl\-0.9.8t
\& # 0x1000000f => openssl\-1.0.0
\& # 0x1000004f => openssl\-1.0.0d
\& # 0x1000007f => openssl\-1.0.0g
.Ve
.Sp
You can use it like this:
.Sp
.Vb 3
\&  if (Net::SSLeay::SSLeay() < 0x0090800f) {
\&    die "you need openssl\-0.9.8 or higher";
\&  }
.Ve
.IP "\(bu" 4
SSLeay_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Gives version number (string) of underlaying openssl library.
.Sp
.Vb 8
\& my $ver_string = Net::SSLeay::SSLeay_version($type);
\& # $type
\& #   0 (=SSLEAY_VERSION) \- e.g. \*(AqOpenSSL 1.0.0d 8 Feb 2011\*(Aq
\& #   2 (=SSLEAY_CFLAGS)  \- e.g. \*(Aqcompiler: gcc \-D_WINDLL \-DOPENSSL_USE_APPLINK .....\*(Aq
\& #   3 (=SSLEAY_BUILT_ON)\- e.g. \*(Aqbuilt on: Fri May  6 00:00:46 GMT 2011\*(Aq
\& #   4 (=SSLEAY_PLATFORM)\- e.g. \*(Aqplatform: mingw\*(Aq
\& #
\& # returns: string
\&
\& Net::SSLeay::SSLeay_version();
\& #is equivalent to
\& Net::SSLeay::SSLeay_version(0);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/SSLeay_version.html>
.PP
\fILow level \s-1API:\s0 Initialization related functions\fR
.IX Subsection "Low level API: Initialization related functions"
.IP "\(bu" 4
library_init
.Sp
Initialize \s-1SSL\s0 library by registering algorithms.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::library_init();
\& #
\& # returns: always 1
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_library_init.html>
.IP "\(bu" 4
add_ssl_algorithms
.Sp
The alias for \*(L"library_init\*(R"
.Sp
.Vb 1
\& Net::SSLeay::add_ssl_algorithms();
.Ve
.IP "\(bu" 4
OpenSSL_add_ssl_algorithms
.Sp
The alias for \*(L"library_init\*(R"
.Sp
.Vb 1
\& Net::SSLeay::OpenSSL_add_ssl_algorithms();
.Ve
.IP "\(bu" 4
SSLeay_add_ssl_algorithms
.Sp
The alias for \*(L"library_init\*(R"
.Sp
.Vb 1
\& Net::SSLeay::SSLeay_add_ssl_algorithms();
.Ve
.IP "\(bu" 4
load_error_strings
.Sp
Registers the error strings for all libcrypto + libssl related functions.
.Sp
.Vb 3
\& Net::SSLeay::load_error_strings();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>
.IP "\(bu" 4
ERR_load_crypto_strings
.Sp
Registers the error strings for all libcrypto functions. No need to call this function if you have already called \*(L"load_error_strings\*(R".
.Sp
.Vb 3
\& Net::SSLeay::ERR_load_crypto_strings();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html>
.IP "\(bu" 4
ERR_load_RAND_strings
.Sp
Registers the error strings for \s-1RAND\s0 related functions. No need to call this function if you have already called \*(L"load_error_strings\*(R".
.Sp
.Vb 3
\& Net::SSLeay::ERR_load_RAND_strings();
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
ERR_load_SSL_strings
.Sp
Registers the error strings for \s-1SSL\s0 related functions. No need to call this function if you have already called \*(L"load_error_strings\*(R".
.Sp
.Vb 3
\& Net::SSLeay::ERR_load_SSL_strings();
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
OpenSSL_add_all_algorithms
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Add algorithms to internal table.
.Sp
.Vb 3
\& Net::SSLeay::OpenSSL_add_all_algorithms();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html>
.IP "\(bu" 4
OPENSSL_add_all_algorithms_conf
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Similar to \*(L"OpenSSL_add_all_algorithms\*(R" \- will \s-1ALWAYS\s0 load the config file
.Sp
.Vb 3
\& Net::SSLeay::OPENSSL_add_all_algorithms_conf();
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
OPENSSL_add_all_algorithms_noconf
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Similar to \*(L"OpenSSL_add_all_algorithms\*(R" \- will \s-1NEVER\s0 load the config file
.Sp
.Vb 3
\& Net::SSLeay::OPENSSL_add_all_algorithms_noconf();
\& #
\& # returns: no return value
.Ve
.PP
\fILow level \s-1API:\s0 ERR_* and SSL_alert_* related functions\fR
.IX Subsection "Low level API: ERR_* and SSL_alert_* related functions"
.PP
\&\fB\s-1NOTE:\s0\fR Please note that SSL_alert_* function have \*(L"\s-1SSL_\*(R"\s0 part stripped from their names.
.IP "\(bu" 4
ERR_clear_error
.Sp
Clear the error queue.
.Sp
.Vb 3
\& Net::SSLeay::ERR_clear_error();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_clear_error.html>
.IP "\(bu" 4
ERR_error_string
.Sp
Generates a human-readable string representing the error code \f(CW$error\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::ERR_error_string($error);
\& # $error \- (unsigned integer) error code
\& #
\& # returns: string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_error_string.html>
.IP "\(bu" 4
ERR_get_error
.Sp
Returns the earliest error code from the thread's error queue and removes the entry.
This function can be called repeatedly until there are no more error codes to return.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::ERR_get_error();
\& #
\& # returns: (unsigned integer) error code
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_get_error.html>
.IP "\(bu" 4
ERR_peek_error
.Sp
Returns the earliest error code from the thread's error queue without modifying it.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::ERR_peek_error();
\& #
\& # returns: (unsigned integer) error code
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_get_error.html>
.IP "\(bu" 4
ERR_put_error
.Sp
Adds an error code to the thread's error queue. It signals that the error of \f(CW$reason\fR
code reason occurred in function \f(CW$func\fR of library \f(CW$lib\fR, in line number \f(CW$line\fR of \f(CW$file\fR.
.Sp
.Vb 8
\& Net::SSLeay::ERR_put_error($lib, $func, $reason, $file, $line);
\& # $lib \- (integer) library id (check openssl/err.h for constants e.g. ERR_LIB_SSL)
\& # $func \- (integer) function id (check openssl/ssl.h for constants e.g. SSL_F_SSL23_READ)
\& # $reason \- (integer) reason id (check openssl/ssl.h for constants e.g. SSL_R_SSL_HANDSHAKE_FAILURE)
\& # $file \- (string) file name
\& # $line \- (integer) line number in $file
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/ERR_put_error.html>
and <http://www.openssl.org/docs/crypto/err.html>
.IP "\(bu" 4
alert_desc_string
.Sp
Returns a two letter string as a short form describing the reason of the alert specified by value.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::alert_desc_string($value);
\& # $value \- (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
\& #
\& # returns: description string (2 letters)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>
.IP "\(bu" 4
alert_desc_string_long
.Sp
Returns a string describing the reason of the alert specified by value.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::alert_desc_string_long($value);
\& # $value \- (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
\& #
\& # returns: description string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>
.IP "\(bu" 4
alert_type_string
.Sp
Returns a one letter string indicating the type of the alert specified by value.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::alert_type_string($value);
\& # $value \- (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
\& #
\& # returns: string (1 letter)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>
.IP "\(bu" 4
alert_type_string_long
.Sp
Returns a string indicating the type of the alert specified by value.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::alert_type_string_long($value);
\& # $value \- (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
\& #
\& # returns: string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_alert_type_string.html>
.PP
\fILow level \s-1API:\s0 SSL_METHOD_* related functions\fR
.IX Subsection "Low level API: SSL_METHOD_* related functions"
.IP "\(bu" 4
SSLv2_method
.Sp
Returns \s-1SSL_METHOD\s0 structure corresponding to SSLv2 method, the return value can be later used as a param of \*(L"CTX_new_with_method\*(R". Only available where supported by the underlying openssl.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::SSLv2_method();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.IP "\(bu" 4
SSLv3_method
.Sp
Returns \s-1SSL_METHOD\s0 structure corresponding to SSLv3 method, the return value can be later used as a param of \*(L"CTX_new_with_method\*(R".
.Sp
.Vb 3
\& my $rv = Net::SSLeay::SSLv3_method();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.IP "\(bu" 4
TLSv1_method
.Sp
Returns \s-1SSL_METHOD\s0 structure corresponding to TLSv1 method, the return value can be later used as a param of \*(L"CTX_new_with_method\*(R".
.Sp
.Vb 3
\& my $rv = Net::SSLeay::TLSv1_method();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.IP "\(bu" 4
TLSv1_1_method
.Sp
Returns \s-1SSL_METHOD\s0 structure corresponding to TLSv1_1 method, the return value can be later used as a param of \*(L"CTX_new_with_method\*(R". Only available where supported by the underlying openssl.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::TLSv1_\|_1method();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.IP "\(bu" 4
TLSv1_2_method
.Sp
Returns \s-1SSL_METHOD\s0 structure corresponding to TLSv1_2 method, the return value can be later used as a param of \*(L"CTX_new_with_method\*(R". Only available where supported by the underlying openssl.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::TLSv1_2_method();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.PP
\fILow level \s-1API:\s0 ENGINE_* related functions\fR
.IX Subsection "Low level API: ENGINE_* related functions"
.IP "\(bu" 4
ENGINE_load_builtin_engines
.Sp
Load all bundled ENGINEs into memory and make them visible.
.Sp
.Vb 3
\& Net::SSLeay::ENGINE_load_builtin_engines();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/engine.html>
.IP "\(bu" 4
ENGINE_register_all_complete
.Sp
Register all loaded ENGINEs for every algorithm they collectively implement.
.Sp
.Vb 3
\& Net::SSLeay::ENGINE_register_all_complete();
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/engine.html>
.IP "\(bu" 4
ENGINE_set_default
.Sp
Set default engine to \f(CW$e\fR + set its flags to \f(CW$flags\fR.
.Sp
.Vb 10
\& my $rv = Net::SSLeay::ENGINE_set_default($e, $flags);
\& # $e \- value corresponding to openssl\*(Aqs ENGINE structure
\& # $flags \- (integer) engine flags
\& #          flags value can be made by bitwise "OR"ing:
\& #          0x0001 \- ENGINE_METHOD_RSA
\& #          0x0002 \- ENGINE_METHOD_DSA
\& #          0x0004 \- ENGINE_METHOD_DH
\& #          0x0008 \- ENGINE_METHOD_RAND
\& #          0x0010 \- ENGINE_METHOD_ECDH
\& #          0x0020 \- ENGINE_METHOD_ECDSA
\& #          0x0040 \- ENGINE_METHOD_CIPHERS
\& #          0x0080 \- ENGINE_METHOD_DIGESTS
\& #          0x0100 \- ENGINE_METHOD_STORE
\& #          0x0200 \- ENGINE_METHOD_PKEY_METHS
\& #          0x0400 \- ENGINE_METHOD_PKEY_ASN1_METHS
\& #          Obvious all\-or\-nothing cases:
\& #          0xFFFF \- ENGINE_METHOD_ALL
\& #          0x0000 \- ENGINE_METHOD_NONE
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/engine.html>
.IP "\(bu" 4
ENGINE_by_id
.Sp
Get \s-1ENGINE\s0 by its identification \f(CW$id\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::ENGINE_by_id($id);
\& # $id \- (string) engine identification e.g. "dynamic"
\& #
\& # returns: value corresponding to openssl\*(Aqs ENGINE structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/engine.html>
.PP
\fILow level \s-1API:\s0 EVP_PKEY_* related functions\fR
.IX Subsection "Low level API: EVP_PKEY_* related functions"
.IP "\(bu" 4
EVP_PKEY_copy_parameters
.Sp
Copies the parameters from key \f(CW$from\fR to key \f(CW$to\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_PKEY_copy_parameters($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& # $from \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html>
.IP "\(bu" 4
EVP_PKEY_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Creates a new \s-1EVP_PKEY\s0 structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::EVP_PKEY_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_PKEY structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>
.IP "\(bu" 4
EVP_PKEY_free
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Free an allocated \s-1EVP_PKEY\s0 structure.
.Sp
.Vb 4
\& Net::SSLeay::EVP_PKEY_free($pkey);
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_PKEY_new.html>
.IP "\(bu" 4
EVP_PKEY_assign_RSA
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Set the key referenced by \f(CW$pkey\fR to \f(CW$key\fR
.Sp
\&\fB\s-1NOTE:\s0\fR In accordance with the OpenSSL naming convention the \f(CW$key\fR assigned
to the \f(CW$pkey\fR using the \*(L"1\*(R" functions must be freed as well as \f(CW$pkey\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_PKEY_assign_RSA($pkey, $key);
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& # $key \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html>
.IP "\(bu" 4
EVP_PKEY_bits
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns the size of the key \f(CW$pkey\fR in bits.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_PKEY_bits($pkey);
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: size in bits
.Ve
.IP "\(bu" 4
EVP_PKEY_size
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns the maximum size of a signature in bytes. The actual signature may be smaller.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_PKEY_size($pkey);
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: the maximum size in bytes
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_SignInit.html>
.IP "\(bu" 4
EVP_PKEY_id
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.0
.Sp
Returns \f(CW$pkey\fR type (integer value of corresponding \s-1NID\s0).
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_PKEY_id($pkey);
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: (integer) key type
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $pubkey = Net::SSLeay::X509_get_pubkey($x509);
\& my $type = Net::SSLeay::EVP_PKEY_id($pubkey);
\& print Net::SSLeay::OBJ_nid2sn($type);             #prints e.g. \*(AqrsaEncryption\*(Aq
.Ve
.PP
\fILow level \s-1API:\s0 PEM_* related functions\fR
.IX Subsection "Low level API: PEM_* related functions"
.PP
Check openssl doc <http://www.openssl.org/docs/crypto/pem.html>
.IP "\(bu" 4
PEM_read_bio_X509
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1PEM\s0 formatted X509 certificate via given \s-1BIO\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::PEM_read_bio_X509($bio);
\& # $bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqr\*(Aq);
\& my $x509 = Net::SSLeay::PEM_read_bio_X509($bio);
\& Net::SSLeay::BIO_free($bio);
.Ve
.IP "\(bu" 4
PEM_read_bio_X509_REQ
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1PEM\s0 formatted X509_REQ object via given \s-1BIO\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::PEM_read_bio_X509_REQ($bio, $x=NULL, $cb=NULL, $u=NULL);
\& # $bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_REQ structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqr\*(Aq);
\& my $x509_req = Net::SSLeay::PEM_read_bio_X509_REQ($bio);
\& Net::SSLeay::BIO_free($bio);
.Ve
.IP "\(bu" 4
PEM_read_bio_DHparams
.Sp
Reads \s-1DH\s0 structure from \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::PEM_read_bio_DHparams($bio);
\& # $bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs DH structure (0 on failure)
.Ve
.IP "\(bu" 4
PEM_read_bio_X509_CRL
.Sp
Reads X509_CRL structure from \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
\& # $bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_CRL structure (0 on failure)
.Ve
.IP "\(bu" 4
PEM_read_bio_PrivateKey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1PEM\s0 formatted private key via given \s-1BIO\s0 structure.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::PEM_read_bio_PrivateKey($bio, $cb, $data);
\& # $bio \- value corresponding to openssl\*(Aqs BIO structure
\& # $cb \- reference to perl callback function
\& # $data \- data that will be passed to callback function (see examples below)
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_PKEY structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqr\*(Aq);
\& my $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio); #ask for password if needed
\& Net::SSLeay::BIO_free($bio);
.Ve
.Sp
To use password you have the following options:
.Sp
.Vb 4
\& $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \e&callback_func); # use callback func for getting password
\& $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \e&callback_func, $data); # use callback_func + pass $data to callback_func
\& $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "secret"); # use password "secret"
\& $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "");       # use empty password
.Ve
.Sp
Callback function signature:
.Sp
.Vb 5
\& sub callback_func {
\&   my ($max_passwd_size, $rwflag, $data) = @_;
\&   # $max_passwd_size \- maximum size of returned password (longer values will be discarded)
\&   # $rwflag \- indicates whether we are loading (0) or storing (1) \- for PEM_read_bio_PrivateKey always 0
\&   # $data \- the data passed to PEM_read_bio_PrivateKey as 3rd parameter
\&
\&   return "secret";
\& }
.Ve
.IP "\(bu" 4
PEM_get_string_X509
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Converts/exports X509 certificate to string (\s-1PEM\s0 format).
.Sp
.Vb 4
\& Net::SSLeay::PEM_get_string_X509($x509);
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: string with $x509 in PEM format
.Ve
.IP "\(bu" 4
PEM_get_string_PrivateKey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Converts public key \f(CW$pk\fR into \s-1PEM\s0 formatted string (optionally protected with password).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::PEM_get_string_PrivateKey($pk, $passwd, $enc_alg);
\& # $pk \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& # $passwd \- [optional] (string) password to use for key encryption
\& # $enc_alg \- [optional] algorithm to use for key encryption (default: DES_CBC) \- value corresponding to openssl\*(Aqs EVP_CIPHER structure
\& #
\& # returns: PEM formatted string
.Ve
.Sp
Examples:
.Sp
.Vb 3
\& $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk);
\& $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret");
\& $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret", Net::SSLeay::EVP_get_cipherbyname("DES\-EDE3\-CBC"));
.Ve
.IP "\(bu" 4
PEM_get_string_X509_CRL
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Converts X509_CRL object \f(CW$x509_crl\fR into \s-1PEM\s0 formatted string.
.Sp
.Vb 4
\& Net::SSLeay::PEM_get_string_X509_CRL($x509_crl);
\& # $x509_crl \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
PEM_get_string_X509_REQ
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Converts X509_REQ object \f(CW$x509_crl\fR into \s-1PEM\s0 formatted string.
.Sp
.Vb 4
\& Net::SSLeay::PEM_get_string_X509_REQ($x509_req);
\& # $x509_req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: no return value
.Ve
.PP
\fILow level \s-1API:\s0 d2i_* (\s-1DER\s0 format) related functions\fR
.IX Subsection "Low level API: d2i_* (DER format) related functions"
.IP "\(bu" 4
d2i_X509_bio
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1DER\s0 formatted X509 certificate via given \s-1BIO\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::d2i_X509_bio($bp);
\& # $bp \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqrb\*(Aq);
\& my $x509 = Net::SSLeay::d2i_X509_bio($bio);
\& Net::SSLeay::BIO_free($bio);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/d2i_X509.html>
.IP "\(bu" 4
d2i_X509_CRL_bio
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1DER\s0 formatted X509_CRL object via given \s-1BIO\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::d2i_X509_CRL_bio($bp);
\& # $bp \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_CRL structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqrb\*(Aq);
\& my $x509_crl = Net::SSLeay::d2i_X509_CRL_bio($bio);
\& Net::SSLeay::BIO_free($bio);
.Ve
.IP "\(bu" 4
d2i_X509_REQ_bio
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads \s-1DER\s0 formatted X509_REQ object via given \s-1BIO\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::d2i_X509_REQ_bio($bp);
\& # $bp \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_REQ structure (0 on failure)
.Ve
.Sp
Example:
.Sp
.Vb 3
\& my $bio = Net::SSLeay::BIO_new_file($filename, \*(Aqrb\*(Aq);
\& my $x509_req = Net::SSLeay::d2i_X509_REQ_bio($bio);
\& Net::SSLeay::BIO_free($bio);
.Ve
.PP
\fILow level \s-1API: PKCS12\s0 related functions\fR
.IX Subsection "Low level API: PKCS12 related functions"
.IP "\(bu" 4
P_PKCS12_load_file
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Loads X509 certificate + private key + certificates of \s-1CA\s0 chain (if present in \s-1PKCS12\s0 file).
.Sp
.Vb 9
\& my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, $load_chain, $password);
\& # $filename \- name of PKCS12 file
\& # $load_chain \- [optional] whether load (1) or not(0) CA chain (default: 0)
\& # $password \- [optional] password for private key
\& #
\& # returns: triplet ($privkey, $cert, @cachain)
\& #          $privkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #          $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #          @cachain \- array of values corresponding to openssl\*(Aqs X509 structure (empty if no CA chain in PKCS12)
.Ve
.Sp
\&\fB\s-1IMPORTANT NOTE:\s0\fR after you do the job you need to call \fIX509_free()\fR on \f(CW$privkey\fR + all members
of \f(CW@cachain\fR and \fIEVP_PKEY_free()\fR on \f(CW$privkey\fR.
.Sp
Examples:
.Sp
.Vb 7
\& my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename);
\& #or
\& my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 0, $password);
\& #or
\& my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1);
\& #or
\& my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);
\&
\& #BEWARE: THIS IS WRONG \- MEMORY LEAKS! (you cannot free @cachain items)
\& my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);
.Ve
.PP
\fILow level \s-1API:\s0 SESSION_* related functions\fR
.IX Subsection "Low level API: SESSION_* related functions"
.IP "\(bu" 4
d2i_SSL_SESSION
.Sp
Transforms the external \s-1ASN1\s0 representation of an \s-1SSL/TLS\s0 session, stored as binary data
at location pp with length of \f(CW$length\fR, into an \s-1SSL_SESSION\s0 object.
.Sp
??? (does this function really work?)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::d2i_SSL_SESSION($a, $pp, $length);
\& # $a \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $pp \- pointer/buffer ???
\& # $length \- ???
\& #
\& # returns: ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html>
.IP "\(bu" 4
i2d_SSL_SESSION
.Sp
Transforms the \s-1SSL_SESSION\s0 object in into the \s-1ASN1\s0 representation and stores it
into the memory location pointed to by pp. The length of the resulting \s-1ASN1\s0
representation is returned.
.Sp
??? (does this function really work?)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::i2d_SSL_SESSION($in, $pp);
\& # $in \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $pp \- pointer/data ???
\& #
\& # returns: 1 on success, 0
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html>
.IP "\(bu" 4
SESSION_new
.Sp
Creates a new \s-1SSL_SESSION\s0 structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::SESSION_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_SESSION structure (0 on failure)
.Ve
.IP "\(bu" 4
SESSION_free
.Sp
Free an allocated \s-1SSL_SESSION\s0 structure.
.Sp
.Vb 4
\& Net::SSLeay::SESSION_free($ses);
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_free.html>
.IP "\(bu" 4
SESSION_cmp
.Sp
Compare two \s-1SSL_SESSION\s0 structures.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_cmp($sesa, $sesb);
\& # $sesa \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $sesb \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 0 if the two structures are the same
.Ve
.Sp
\&\fB\s-1NOTE:\s0\fR Not available in openssl 1.0 or later
.IP "\(bu" 4
SESSION_get_app_data
.Sp
Can be used to get application defined value/data.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::SESSION_get_app_data($ses);
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: string/buffer/pointer ???
.Ve
.IP "\(bu" 4
SESSION_set_app_data
.Sp
Can be used to set some application defined value/data.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_set_app_data($s, $a);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $a \- (string/buffer/pointer ???) data
\& #
\& # returns: ???
.Ve
.IP "\(bu" 4
SESSION_get_ex_data
.Sp
Is used to retrieve the information for \f(CW$idx\fR from session \f(CW$ses\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_get_ex_data($ses, $idx);
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $idx \- (integer) index for application specific data
\& #
\& # returns: pointer to ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>
.IP "\(bu" 4
SESSION_set_ex_data
.Sp
Is used to store application data at arg for idx into the session object.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::SESSION_set_ex_data($ss, $idx, $data);
\& # $ss \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $idx \- (integer) ???
\& # $data \- (pointer) ???
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>
.IP "\(bu" 4
SESSION_get_ex_new_index
.Sp
Is used to register a new index for application specific data.
.Sp
.Vb 8
\& my $rv = Net::SSLeay::SESSION_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
\& # $argl \- (long) ???
\& # $argp \- (pointer) ???
\& # $new_func \- function pointer ??? (CRYPTO_EX_new *)
\& # $dup_func \- function pointer ??? (CRYPTO_EX_dup *)
\& # $free_func \- function pointer ??? (CRYPTO_EX_free *)
\& #
\& # returns: (integer) ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html>
.IP "\(bu" 4
SESSION_get_master_key
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Returns 'master_key' value from \s-1SSL_SESSION\s0 structure \f(CW$s\fR
.Sp
.Vb 4
\& Net::SSLeay::SESSION_get_master_key($s);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: master key (binary data)
.Ve
.IP "\(bu" 4
SESSION_set_master_key
.Sp
Sets 'master_key' value for \s-1SSL_SESSION\s0 structure \f(CW$s\fR
.Sp
.Vb 5
\& Net::SSLeay::SESSION_set_master_key($s, $key);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $key \- master key (binary data)
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
SESSION_get_time
.Sp
Returns the time at which the session s was established.
The time is given in seconds since 1.1.1970.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::SESSION_get_time($s);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: timestamp (seconds since 1.1.1970)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>
.IP "\(bu" 4
get_time
.Sp
Technically the same functionality as \*(L"SESSION_get_time\*(R".
.Sp
.Vb 1
\& my $rv = Net::SSLeay::get_time($s);
.Ve
.IP "\(bu" 4
SESSION_get_timeout
.Sp
Returns the timeout value set for session \f(CW$s\fR in seconds.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::SESSION_get_timeout($s);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: timeout (in seconds)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>
.IP "\(bu" 4
get_timeout
.Sp
Technically the same functionality as \*(L"SESSION_get_timeout\*(R".
.Sp
.Vb 1
\& my $rv = Net::SSLeay::get_timeout($s);
.Ve
.IP "\(bu" 4
SESSION_print
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Prints session details (e.g. protocol version, cipher, session-id ...) to \s-1BIO.\s0
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_print($fp, $ses);
\& # $fp \- value corresponding to openssl\*(Aqs BIO structure
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
You have to use necessary \s-1BIO\s0 functions like this:
.Sp
.Vb 5
\& # let us have $ssl corresponding to openssl\*(Aqs SSL structure
\& my $ses = Net::SSLeay::get_session($ssl);
\& my $bio = Net::SSLeay::BIO_new(&Net::SSLeay::BIO_s_mem);
\& Net::SSLeay::SESSION_print($bio, $ses);
\& print Net::SSLeay::BIO_read($bio);
.Ve
.IP "\(bu" 4
SESSION_print_fp
.Sp
Prints session details (e.g. protocol version, cipher, session-id ...) to file handle.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_print_fp($fp, $ses);
\& # $fp \- perl file handle
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Example:
.Sp
.Vb 4
\& # let us have $ssl corresponding to openssl\*(Aqs SSL structure
\& my $ses = Net::SSLeay::get_session($ssl);
\& open my $fh, ">", "output.txt";
\& Net::SSLeay::SESSION_print_fp($fh,$ses);
.Ve
.IP "\(bu" 4
SESSION_set_time
.Sp
Replaces the creation time of the session s with the chosen value \f(CW$t\fR (seconds since 1.1.1970).
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_set_time($ses, $t);
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $t \- time value
\& #
\& # returns: 1 on success
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>
.IP "\(bu" 4
set_time
.Sp
Technically the same functionality as \*(L"SESSION_set_time\*(R".
.Sp
.Vb 1
\& my $rv = Net::SSLeay::set_time($ses, $t);
.Ve
.IP "\(bu" 4
SESSION_set_timeout
.Sp
Sets the timeout value for session s in seconds to \f(CW$t\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::SESSION_set_timeout($s, $t);
\& # $s \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& # $t \- timeout (in seconds)
\& #
\& # returns: 1 on success
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html>
.IP "\(bu" 4
set_timeout
.Sp
Technically the same functionality as \*(L"SESSION_set_timeout\*(R".
.Sp
.Vb 1
\& my $rv = Net::SSLeay::set_timeout($ses, $t);
.Ve
.PP
\fILow level \s-1API:\s0 SSL_CTX_* related functions\fR
.IX Subsection "Low level API: SSL_CTX_* related functions"
.PP
\&\fB\s-1NOTE:\s0\fR Please note that the function described in this chapter have \*(L"\s-1SSL_\*(R"\s0 part stripped from their original openssl names.
.IP "\(bu" 4
CTX_add_client_CA
.Sp
Adds the \s-1CA\s0 name extracted from \f(CW$cacert\fR to the list of CAs sent to the client when requesting a client certificate for \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_add_client_CA($ctx, $cacert);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $cacert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>
.IP "\(bu" 4
CTX_add_extra_chain_cert
.Sp
Adds the certificate \f(CW$x509\fR to the certificate chain presented together with the certificate. Several certificates can be added one after the other.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_add_extra_chain_cert($ctx, $x509);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, check out the error stack to find out the reason for failure otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html>
.IP "\(bu" 4
CTX_add_session
.Sp
Adds the session \f(CW$ses\fR to the context \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_add_session($ctx, $ses);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>
.IP "\(bu" 4
CTX_callback_ctrl
.Sp
??? (more info needed)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_callback_ctrl($ctx, $cmd, $fp);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $cmd \- (integer) command id
\& # $fp \- (function pointer) ???
\& #
\& # returns: ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>
.IP "\(bu" 4
CTX_check_private_key
.Sp
Checks the consistency of a private key with the corresponding certificate loaded into \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_check_private_key($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_ctrl
.Sp
Internal handling function for \s-1SSL_CTX\s0 objects.
.Sp
\&\fB\s-1BEWARE:\s0\fR openssl doc says: This function should never be called directly!
.Sp
.Vb 7
\& my $rv = Net::SSLeay::CTX_ctrl($ctx, $cmd, $larg, $parg);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $cmd \- (integer) command id
\& # $larg \- (integer) long ???
\& # $parg \- (string/pointer) ???
\& #
\& # returns: (long) result of given command ???
\&
\& #valid $cmd values
\&  1 \- SSL_CTRL_NEED_TMP_RSA
\&  2 \- SSL_CTRL_SET_TMP_RSA
\&  3 \- SSL_CTRL_SET_TMP_DH
\&  4 \- SSL_CTRL_SET_TMP_ECDH
\&  5 \- SSL_CTRL_SET_TMP_RSA_CB
\&  6 \- SSL_CTRL_SET_TMP_DH_CB
\&  7 \- SSL_CTRL_SET_TMP_ECDH_CB
\&  8 \- SSL_CTRL_GET_SESSION_REUSED
\&  9 \- SSL_CTRL_GET_CLIENT_CERT_REQUEST
\& 10 \- SSL_CTRL_GET_NUM_RENEGOTIATIONS
\& 11 \- SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
\& 12 \- SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
\& 13 \- SSL_CTRL_GET_FLAGS
\& 14 \- SSL_CTRL_EXTRA_CHAIN_CERT
\& 15 \- SSL_CTRL_SET_MSG_CALLBACK
\& 16 \- SSL_CTRL_SET_MSG_CALLBACK_ARG
\& 17 \- SSL_CTRL_SET_MTU
\& 20 \- SSL_CTRL_SESS_NUMBER
\& 21 \- SSL_CTRL_SESS_CONNECT
\& 22 \- SSL_CTRL_SESS_CONNECT_GOOD
\& 23 \- SSL_CTRL_SESS_CONNECT_RENEGOTIATE
\& 24 \- SSL_CTRL_SESS_ACCEPT
\& 25 \- SSL_CTRL_SESS_ACCEPT_GOOD
\& 26 \- SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
\& 27 \- SSL_CTRL_SESS_HIT
\& 28 \- SSL_CTRL_SESS_CB_HIT
\& 29 \- SSL_CTRL_SESS_MISSES
\& 30 \- SSL_CTRL_SESS_TIMEOUTS
\& 31 \- SSL_CTRL_SESS_CACHE_FULL
\& 32 \- SSL_CTRL_OPTIONS
\& 33 \- SSL_CTRL_MODE
\& 40 \- SSL_CTRL_GET_READ_AHEAD
\& 41 \- SSL_CTRL_SET_READ_AHEAD
\& 42 \- SSL_CTRL_SET_SESS_CACHE_SIZE
\& 43 \- SSL_CTRL_GET_SESS_CACHE_SIZE
\& 44 \- SSL_CTRL_SET_SESS_CACHE_MODE
\& 45 \- SSL_CTRL_GET_SESS_CACHE_MODE
\& 50 \- SSL_CTRL_GET_MAX_CERT_LIST
\& 51 \- SSL_CTRL_SET_MAX_CERT_LIST
\& 52 \- SSL_CTRL_SET_MAX_SEND_FRAGMENT
\& 53 \- SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
\& 54 \- SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
\& 55 \- SSL_CTRL_SET_TLSEXT_HOSTNAME
\& 56 \- SSL_CTRL_SET_TLSEXT_DEBUG_CB
\& 57 \- SSL_CTRL_SET_TLSEXT_DEBUG_ARG
\& 58 \- SSL_CTRL_GET_TLSEXT_TICKET_KEYS
\& 59 \- SSL_CTRL_SET_TLSEXT_TICKET_KEYS
\& 60 \- SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
\& 61 \- SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
\& 62 \- SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
\& 63 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
\& 64 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
\& 65 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
\& 66 \- SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
\& 67 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
\& 68 \- SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
\& 69 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
\& 70 \- SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
\& 71 \- SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
\& 72 \- SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
\& 73 \- DTLS_CTRL_GET_TIMEOUT
\& 74 \- DTLS_CTRL_HANDLE_TIMEOUT
\& 75 \- DTLS_CTRL_LISTEN
\& 76 \- SSL_CTRL_GET_RI_SUPPORT
\& 77 \- SSL_CTRL_CLEAR_OPTIONS
\& 78 \- SSL_CTRL_CLEAR_MODE
\&
\& 82 \- SSL_CTRL_GET_EXTRA_CHAIN_CERTS
\& 83 \- SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
\&
\& 88 \- SSL_CTRL_CHAIN
\& 89 \- SSL_CTRL_CHAIN_CERT
\&
\& 90 \- SSL_CTRL_GET_CURVES
\& 91 \- SSL_CTRL_SET_CURVES
\& 92 \- SSL_CTRL_SET_CURVES_LIST
\& 93 \- SSL_CTRL_GET_SHARED_CURVE 
\& 94 \- SSL_CTRL_SET_ECDH_AUTO
\& 97 \- SSL_CTRL_SET_SIGALGS
\& 98 \- SSL_CTRL_SET_SIGALGS_LIST
\& 99 \- SSL_CTRL_CERT_FLAGS
\& 100 \- SSL_CTRL_CLEAR_CERT_FLAGS
\& 101 \- SSL_CTRL_SET_CLIENT_SIGALGS
\& 102 \- SSL_CTRL_SET_CLIENT_SIGALGS_LIST
\& 103 \- SSL_CTRL_GET_CLIENT_CERT_TYPES
\& 104 \- SSL_CTRL_SET_CLIENT_CERT_TYPES
\& 105 \- SSL_CTRL_BUILD_CERT_CHAIN
\& 106 \- SSL_CTRL_SET_VERIFY_CERT_STORE
\& 107 \- SSL_CTRL_SET_CHAIN_CERT_STORE
\& 108 \- SSL_CTRL_GET_PEER_SIGNATURE_NID
\& 109 \- SSL_CTRL_GET_SERVER_TMP_KEY
\& 110 \- SSL_CTRL_GET_RAW_CIPHERLIST
\& 111 \- SSL_CTRL_GET_EC_POINT_FORMATS
\& 112 \- SSL_CTRL_GET_TLSA_RECORD
\& 113 \- SSL_CTRL_SET_TLSA_RECORD
\& 114 \- SSL_CTRL_PULL_TLSA_RECORD
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>
.IP "\(bu" 4
CTX_flush_sessions
.Sp
Causes a run through the session cache of \f(CW$ctx\fR to remove sessions expired at time \f(CW$tm\fR.
.Sp
.Vb 5
\& Net::SSLeay::CTX_flush_sessions($ctx, $tm);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $tm \- specifies the time which should be used for the expiration test (seconds since 1.1.1970)
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html>
.IP "\(bu" 4
CTX_free
.Sp
Free an allocated \s-1SSL_CTX\s0 object.
.Sp
.Vb 4
\& Net::SSLeay::CTX_free($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_free.html>
.IP "\(bu" 4
CTX_get_app_data
.Sp
Can be used to get application defined value/data.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_app_data($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: string/buffer/pointer ???
.Ve
.IP "\(bu" 4
CTX_set_app_data
.Sp
Can be used to set some application defined value/data.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_app_data($ctx, $arg);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arg \- (string/buffer/pointer ???) data
\& #
\& # returns: ???
.Ve
.IP "\(bu" 4
CTX_get_cert_store
.Sp
Returns the current certificate verification storage.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_cert_store($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_STORE structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>
.IP "\(bu" 4
CTX_get_client_CA_list
.Sp
Returns the list of client CAs explicitly set for \f(CW$ctx\fR using \*(L"CTX_set_client_CA_list\*(R".
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_client_CA_list($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME_STACK structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>
.IP "\(bu" 4
CTX_get_ex_data
.Sp
Is used to retrieve the information for index \f(CW$idx\fR from \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_get_ex_data($ssl, $idx);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $idx \- (integer) index for application specific data
\& #
\& # returns: pointer to ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>
.IP "\(bu" 4
CTX_get_ex_new_index
.Sp
Is used to register a new index for application specific data.
.Sp
.Vb 8
\& my $rv = Net::SSLeay::CTX_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
\& # $argl \- (long) ???
\& # $argp \- (pointer) ???
\& # $new_func \- function pointer ??? (CRYPTO_EX_new *)
\& # $dup_func \- function pointer ??? (CRYPTO_EX_dup *)
\& # $free_func \- function pointer ??? (CRYPTO_EX_free *)
\& #
\& # returns: (integer) ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>
.IP "\(bu" 4
CTX_get_mode
.Sp
Returns the mode set for ctx.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_mode($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: mode (bitmask)
\&
\& #to decode the return value (bitmask) use:
\& 0x00000001 corresponds to SSL_MODE_ENABLE_PARTIAL_WRITE
\& 0x00000002 corresponds to SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
\& 0x00000004 corresponds to SSL_MODE_AUTO_RETRY
\& 0x00000008 corresponds to SSL_MODE_NO_AUTO_CHAIN
\& 0x00000010 corresponds to SSL_MODE_RELEASE_BUFFERS
\& (note: some of the bits might not be supported by older openssl versions)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>
.IP "\(bu" 4
CTX_set_mode
.Sp
Adds the mode set via bitmask in \f(CW$mode\fR to \f(CW$ctx\fR. Options already set before are not cleared.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_mode($ctx, $mode);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $mode \- mode bitmask
\& #
\& # returns: the new mode bitmask after adding $mode
.Ve
.Sp
For bitmask details see \*(L"CTX_get_mode\*(R" (above).
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>
.IP "\(bu" 4
CTX_get_options
.Sp
Returns the options (bitmask) set for \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_options($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: options (bitmask)
\&
\& #to decode the return value (bitmask) use:
\& 0x00000001 corresponds to SSL_OP_MICROSOFT_SESS_ID_BUG
\& 0x00000002 corresponds to SSL_OP_NETSCAPE_CHALLENGE_BUG
\& 0x00000004 corresponds to SSL_OP_LEGACY_SERVER_CONNECT
\& 0x00000008 corresponds to SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
\& 0x00000010 corresponds to SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
\& 0x00000020 corresponds to SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
\& 0x00000040 corresponds to SSL_OP_MSIE_SSLV2_RSA_PADDING
\& 0x00000080 corresponds to SSL_OP_SSLEAY_080_CLIENT_DH_BUG
\& 0x00000100 corresponds to SSL_OP_TLS_D5_BUG
\& 0x00000200 corresponds to SSL_OP_TLS_BLOCK_PADDING_BUG
\& 0x00000800 corresponds to SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
\& 0x80000FFF corresponds to SSL_OP_ALL
\& 0x00001000 corresponds to SSL_OP_NO_QUERY_MTU
\& 0x00002000 corresponds to SSL_OP_COOKIE_EXCHANGE
\& 0x00004000 corresponds to SSL_OP_NO_TICKET
\& 0x00008000 corresponds to SSL_OP_CISCO_ANYCONNECT
\& 0x00010000 corresponds to SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
\& 0x00020000 corresponds to SSL_OP_NO_COMPRESSION
\& 0x00040000 corresponds to SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
\& 0x00080000 corresponds to SSL_OP_SINGLE_ECDH_USE
\& 0x00100000 corresponds to SSL_OP_SINGLE_DH_USE
\& 0x00200000 corresponds to SSL_OP_EPHEMERAL_RSA
\& 0x00400000 corresponds to SSL_OP_CIPHER_SERVER_PREFERENCE
\& 0x00800000 corresponds to SSL_OP_TLS_ROLLBACK_BUG
\& 0x01000000 corresponds to SSL_OP_NO_SSLv2
\& 0x02000000 corresponds to SSL_OP_NO_SSLv3
\& 0x04000000 corresponds to SSL_OP_NO_TLSv1
\& 0x08000000 corresponds to SSL_OP_PKCS1_CHECK_1
\& 0x10000000 corresponds to SSL_OP_PKCS1_CHECK_2
\& 0x20000000 corresponds to SSL_OP_NETSCAPE_CA_DN_BUG
\& 0x40000000 corresponds to SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
\& 0x80000000 corresponds to SSL_OP_CRYPTOPRO_TLSEXT_BUG
\& (note: some of the bits might not be supported by older openssl versions)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>
.IP "\(bu" 4
CTX_set_options
.Sp
Adds the options set via bitmask in \f(CW$options\fR to ctx. Options already set before are not cleared.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_options($ctx, $options);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $options \- options bitmask
\& #
\& # returns: the new options bitmask after adding $options
.Ve
.Sp
For bitmask details see \*(L"CTX_get_options\*(R" (above).
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>
.IP "\(bu" 4
CTX_get_quiet_shutdown
.Sp
Returns the 'quiet shutdown' setting of \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_quiet_shutdown($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: (integer) the current setting
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>
.IP "\(bu" 4
CTX_get_read_ahead
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_read_ahead($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: (integer) read_ahead value
.Ve
.IP "\(bu" 4
CTX_get_session_cache_mode
.Sp
Returns the currently used cache mode (bitmask).
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_session_cache_mode($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: mode (bitmask)
\&
\& #to decode the return value (bitmask) use:
\& 0x0000 corresponds to SSL_SESS_CACHE_OFF
\& 0x0001 corresponds to SSL_SESS_CACHE_CLIENT
\& 0x0002 corresponds to SSL_SESS_CACHE_SERVER
\& 0x0080 corresponds to SSL_SESS_CACHE_NO_AUTO_CLEAR
\& 0x0100 corresponds to SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
\& 0x0200 corresponds to SSL_SESS_CACHE_NO_INTERNAL_STORE
\& (note: some of the bits might not be supported by older openssl versions)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>
.IP "\(bu" 4
CTX_set_session_cache_mode
.Sp
Enables/disables session caching by setting the operational mode for \f(CW$ctx\fR to \f(CW$mode\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_session_cache_mode($ctx, $mode);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $mode \- mode (bitmask)
\& #
\& # returns: previously set cache mode
.Ve
.Sp
For bitmask details see \*(L"CTX_get_session_cache_mode\*(R" (above).
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html>
.IP "\(bu" 4
CTX_get_timeout
.Sp
Returns the currently set timeout value for \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_timeout($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: timeout in seconds
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>
.IP "\(bu" 4
CTX_get_verify_depth
.Sp
Returns the verification depth limit currently set in \f(CW$ctx\fR. If no limit has been explicitly set, \-1 is returned and the default value will be used.",
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_verify_depth($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: depth limit currently set in $ctx, \-1 if no limit has been explicitly set
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>
.IP "\(bu" 4
CTX_get_verify_mode
.Sp
Returns the verification mode (bitmask) currently set in \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_get_verify_mode($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: mode (bitmask)
\&
\& #to decode the return value (bitmask) use:
\& 0x00 corresponds to SSL_VERIFY_NONE
\& 0x01 corresponds to SSL_VERIFY_PEER
\& 0x02 corresponds to SSL_VERIFY_FAIL_IF_NO_PEER_CERT
\& 0x04 corresponds to SSL_VERIFY_CLIENT_ONCE
\& (note: some of the bits might not be supported by older openssl versions)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>
.IP "\(bu" 4
CTX_set_verify
.Sp
Sets the verification flags for \f(CW$ctx\fR to be \f(CW$mode\fR and specifies the verify_callback function to be used.
.Sp
.Vb 6
\& Net::SSLeay::CTX_set_verify($ctx, $mode, $callback);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $mode \- mode (bitmask)
\& # $callback \- [optional] reference to perl callback function
\& #
\& # returns: no return value
.Ve
.Sp
For bitmask details see \*(L"CTX_get_verify_mode\*(R" (above).
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>
.IP "\(bu" 4
CTX_load_verify_locations
.Sp
Specifies the locations for \f(CW$ctx\fR, at which \s-1CA\s0 certificates for verification purposes are located. The certificates available via \f(CW$CAfile\fR and \f(CW$CApath\fR are trusted.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_load_verify_locations($ctx, $CAfile, $CApath);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $CAfile \- (string) file of CA certificates in PEM format, the file can contain several CA certificates (or \*(Aq\*(Aq)
\& # $CApath \- (string) directory containing CA certificates in PEM format (or \*(Aq\*(Aq)
\& #
\& # returns: 1 on success, 0 on failure (check the error stack to find out the reason)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>
.IP "\(bu" 4
CTX_need_tmp_RSA
.Sp
Return the result of \f(CW\*(C`SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)\*(C'\fR
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_need_tmp_RSA($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: result of SSL_CTRL_NEED_TMP_RSA command
.Ve
.IP "\(bu" 4
CTX_new
.Sp
The same as \*(L"CTX_v23_new\*(R"
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.IP "\(bu" 4
CTX_v2_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fISSLv2_method()\fR \- as framework to establish \s-1TLS/SSL\s0 enabled connections.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_v2_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_v23_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fISSLv23_method()\fR \- as framework to establish \s-1TLS/SSL\s0 enabled connections.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_v23_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_v3_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fISSLv3_method()\fR \- as framework to establish \s-1TLS/SSL\s0 enabled connections.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_v3_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_tlsv1_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fITLSv1_method()\fR \- as framework to establish \s-1TLS/SSL\s0 enabled connections.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_tlsv1_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_tlsv1_1_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fITLSv1_1_method()\fR \- as framework to establish \s-1TLS/SSL \s0
enabled connections. Only available where supported by the underlying openssl.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_tlsv1_1_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_tlsv1_2_new
.Sp
Creates a new \s-1SSL_CTX\s0 object \- based on \fITLSv1_2_method()\fR \- as framework to establish \s-1TLS/SSL \s0
enabled connections. Only available where supported by the underlying openssl.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::CTX_tlsv1_2_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.IP "\(bu" 4
CTX_new_with_method
.Sp
Creates a new \s-1SSL_CTX\s0 object based on \f(CW$meth\fR method
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_new_with_method($meth);
\& # $meth \- value corresponding to openssl\*(Aqs SSL_METHOD structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
\&
\& #example
\& my $ctx = Net::SSLeay::CTX_new_with_method(&Net::SSLeay::TLSv1_method);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_new.html>
.IP "\(bu" 4
CTX_remove_session
.Sp
Removes the session \f(CW$ses\fR from the context \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_remove_session($ctx, $ses);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html>
.IP "\(bu" 4
CTX_sess_accept
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_accept($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of started SSL/TLS handshakes in server mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_accept_good
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_accept_good($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of successfully established SSL/TLS sessions in server mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_accept_renegotiate
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_accept_renegotiate($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of start renegotiations in server mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_cache_full
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_cache_full($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of sessions that were removed because the maximum session cache size was exceeded
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_cb_hits
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_cb_hits($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of successfully retrieved sessions from the external session cache in server mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_connect
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_connect($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of started SSL/TLS handshakes in client mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_connect_good
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_connect_good($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of successfully established SSL/TLS sessions in client mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_connect_renegotiate
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_connect_renegotiate($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of start renegotiations in client mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_get_cache_size
.Sp
Returns the currently valid session cache size.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_get_cache_size($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: current size
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>
.IP "\(bu" 4
CTX_sess_hits
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_hits($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of successfully reused sessions
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_misses
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_misses($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of sessions proposed by clients that were not found in the internal session cache in server mode
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_number
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_number($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: current number of sessions in the internal session cache
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sess_set_cache_size
.Sp
Sets the size of the internal session cache of context \f(CW$ctx\fR to \f(CW$size\fR.
.Sp
.Vb 5
\& Net::SSLeay::CTX_sess_set_cache_size($ctx, $size);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $size \- cache size (0 = unlimited)
\& #
\& # returns: previously valid size
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html>
.IP "\(bu" 4
CTX_sess_timeouts
.Sp
Returns the number of sessions proposed by clients and either found in the internal or external session cache in
server mode, but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits count.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sess_timeouts($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: number of sessions
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>
.IP "\(bu" 4
CTX_sessions
.Sp
Returns a pointer to the lhash databases containing the internal session cache for ctx.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_sessions($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs LHASH structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html>
.IP "\(bu" 4
CTX_set1_param
.Sp
Applies X509 verification parameters \f(CW$vpm\fR on \f(CW$ctx\fR
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set1_param($ctx, $vpm);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $vpm \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
CTX_set_cert_store
.Sp
Sets/replaces the certificate verification storage of \f(CW$ctx\fR to/with \f(CW$store\fR.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_cert_store($ctx, $store);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $store \- value corresponding to openssl\*(Aqs X509_STORE structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html>
.IP "\(bu" 4
CTX_set_cert_verify_callback
.Sp
Sets the verification callback function for \f(CW$ctx\fR. \s-1SSL\s0 objects that are created from \f(CW$ctx\fR
inherit the setting valid at the time when \f(CW\*(C`Net::SSLeay::new($ctx)\*(C'\fR is called.
.Sp
.Vb 6
\& Net::SSLeay::CTX_set_cert_verify_callback($ctx, $func, $data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $func \- perl reference to callback function
\& # $data \- [optional] data that will be passed to callback function when invoked
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html>
.IP "\(bu" 4
CTX_set_cipher_list
.Sp
Sets the list of available ciphers for \f(CW$ctx\fR using the control string \f(CW$str\fR.
The list of ciphers is inherited by all ssl objects created from \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_cipher_list($s, $str);
\& # $s \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $str \- (string) cipher list e.g. \*(Aq3DES:+RSA\*(Aq
\& #
\& # returns: 1 if any cipher could be selected and 0 on complete failure
.Ve
.Sp
The format of \f(CW$str\fR is described in <http://www.openssl.org/docs/apps/ciphers.html>
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>
.IP "\(bu" 4
CTX_set_client_CA_list
.Sp
Sets the list of CAs sent to the client when requesting a client certificate for \f(CW$ctx\fR.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_client_CA_list($ctx, $list);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $list \- value corresponding to openssl\*(Aqs X509_NAME_STACK structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>
.IP "\(bu" 4
CTX_set_default_passwd_cb
.Sp
Sets the default password callback called when loading/storing a \s-1PEM\s0 certificate with encryption.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_default_passwd_cb($ctx, $func);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $func \- perl reference to callback function
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>
.IP "\(bu" 4
CTX_set_default_passwd_cb_userdata
.Sp
Sets a pointer to userdata which will be provided to the password callback on invocation.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_default_passwd_cb_userdata($ctx, $userdata);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $userdata \- data that will be passed to callback function when invoked
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html>
.IP "\(bu" 4
CTX_set_default_verify_paths
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CTX_set_default_verify_paths($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
CTX_set_ex_data
.Sp
Is used to store application data at \f(CW$data\fR for \f(CW$idx\fR into the \f(CW$ctx\fR object.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_set_ex_data($ssl, $idx, $data);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $idx \- (integer) ???
\& # $data \- (pointer) ???
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html>
.IP "\(bu" 4
CTX_set_purpose
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_purpose($s, $purpose);
\& # $s \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $purpose \- (integer) purpose identifier
\& #
\& # returns: 1 on success, 0 on failure
\&
\& #avainable purpose identifier
\& 1 \- X509_PURPOSE_SSL_CLIENT
\& 2 \- X509_PURPOSE_SSL_SERVER
\& 3 \- X509_PURPOSE_NS_SSL_SERVER
\& 4 \- X509_PURPOSE_SMIME_SIGN
\& 5 \- X509_PURPOSE_SMIME_ENCRYPT
\& 6 \- X509_PURPOSE_CRL_SIGN
\& 7 \- X509_PURPOSE_ANY
\& 8 \- X509_PURPOSE_OCSP_HELPER
\& 9 \- X509_PURPOSE_TIMESTAMP_SIGN
\&
\& #or use corresponding constants
\& $purpose = &Net::SSLeay::X509_PURPOSE_SSL_CLIENT;
\& ...
\& $purpose = &Net::SSLeay::X509_PURPOSE_TIMESTAMP_SIGN;
.Ve
.IP "\(bu" 4
CTX_set_quiet_shutdown
.Sp
Sets the 'quiet shutdown' flag for \f(CW$ctx\fR to be mode. \s-1SSL\s0 objects created from \f(CW$ctx\fR inherit the mode valid at the time \f(CW\*(C`Net::SSLeay::new($ctx)\*(C'\fR is called.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_quiet_shutdown($ctx, $mode);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $mode \- 0 or 1
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>
.IP "\(bu" 4
CTX_set_read_ahead
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_read_ahead($ctx, $val);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $val \- read_ahead value to be set
\& #
\& # returns: the original read_ahead value
.Ve
.IP "\(bu" 4
CTX_set_session_id_context
.Sp
Sets the context \f(CW$sid_ctx\fR of length \f(CW$sid_ctx_len\fR within which a session can be reused for the \f(CW$ctx\fR object.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_set_session_id_context($ctx, $sid_ctx, $sid_ctx_len);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $sid_ctx \- data buffer
\& # $sid_ctx_len \- length of data in $sid_ctx
\& #
\& # returns: 1 on success, 0 on failure (the error is logged to the error stack)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>
.IP "\(bu" 4
CTX_set_ssl_version
.Sp
Sets a new default \s-1TLS/SSL\s0 method for \s-1SSL\s0 objects newly created from this \f(CW$ctx\fR.
\&\s-1SSL\s0 objects already created with \f(CW\*(C`Net::SSLeay::new($ctx)\*(C'\fR are not
affected, except when \f(CW\*(C`Net::SSLeay:clear($ssl)\*(C'\fR is being called.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_ssl_version($ctx, $meth);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $meth \- value corresponding to openssl\*(Aqs SSL_METHOD structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>
.IP "\(bu" 4
CTX_set_timeout
.Sp
Sets the timeout for newly created sessions for \f(CW$ctx\fR to \f(CW$t\fR. The timeout value \f(CW$t\fR must be given in seconds.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_timeout($ctx, $t);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $t \- timeout in seconds
\& #
\& # returns: previously set timeout value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html>
.IP "\(bu" 4
CTX_set_tmp_dh
.Sp
Sets \s-1DH\s0 parameters to be used to be \f(CW$dh\fR. The key is inherited by all ssl objects created from \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_tmp_dh($ctx, $dh);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $dh \- value corresponding to openssl\*(Aqs DH structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>
.IP "\(bu" 4
CTX_set_tmp_dh_callback
.Sp
Sets the callback function for \f(CW$ctx\fR to be used when a \s-1DH\s0 parameters are required to \f(CW$tmp_dh_callback\fR.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_tmp_dh_callback($ctx, $tmp_dh_callback);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # tmp_dh_callback \- (function pointer) ???
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>
.IP "\(bu" 4
CTX_set_tmp_rsa
.Sp
Sets the temporary/ephemeral \s-1RSA\s0 key to be used to be \f(CW$rsa\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_tmp_rsa($ctx, $rsa);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $rsa \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>
.IP "\(bu" 4
CTX_set_tmp_rsa_callback
.Sp
Sets the callback function for ctx to be used when a temporary/ephemeral \s-1RSA\s0 key is required to \f(CW$tmp_rsa_callback\fR.
.Sp
??? (does this function really work?)
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_tmp_rsa_callback($ctx, $tmp_rsa_callback);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $tmp_rsa_callback \- (function pointer) ???
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>
.IP "\(bu" 4
CTX_set_trust
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_set_trust($s, $trust);
\& # $s \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $trust \- (integer) trust identifier
\& #
\& # returns: the original value
\&
\& #available trust identifiers
\& 1 \- X509_TRUST_COMPAT
\& 2 \- X509_TRUST_SSL_CLIENT
\& 3 \- X509_TRUST_SSL_SERVER
\& 4 \- X509_TRUST_EMAIL
\& 5 \- X509_TRUST_OBJECT_SIGN
\& 6 \- X509_TRUST_OCSP_SIGN
\& 7 \- X509_TRUST_OCSP_REQUEST
\& 8 \- X509_TRUST_TSA
\&
\& #or use corresponding constants
\& $trust = &Net::SSLeay::X509_TRUST_COMPAT;
\& ...
\& $trust = &Net::SSLeay::X509_TRUST_TSA;
.Ve
.IP "\(bu" 4
CTX_set_verify_depth
.Sp
Sets the maximum depth for the certificate chain verification that shall be allowed for ctx.
.Sp
.Vb 5
\& Net::SSLeay::CTX_set_verify_depth($ctx, $depth);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $depth \- max. depth
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>
.IP "\(bu" 4
CTX_use_PKCS12_file
.Sp
Adds the certificate and private key from \s-1PKCS12\s0 file \f(CW$p12filename\fR to \f(CW$ctx\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_use_PKCS12_file($ctx, $p12filename, $password);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $p12filename \- (string) filename
\& # $password \- (string) password to decrypt private key
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
CTX_use_PrivateKey
.Sp
Adds the private key \f(CW$pkey\fR to \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_use_PrivateKey($ctx, $pkey);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_use_PrivateKey_file
.Sp
Adds the first private key found in \f(CW$file\fR to \f(CW$ctx\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_use_PrivateKey_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_use_RSAPrivateKey
.Sp
Adds the \s-1RSA\s0 private key \f(CW$rsa\fR to \f(CW$ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_use_RSAPrivateKey($ctx, $rsa);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $rsa \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_use_RSAPrivateKey_file
.Sp
Adds the first \s-1RSA\s0 private key found in \f(CW$file\fR to \f(CW$ctx\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_use_RSAPrivateKey_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.IP "\(bu" 4
CTX_use_certificate
.Sp
Loads the certificate \f(CW$x\fR into \f(CW$ctx\fR
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_use_certificate($ctx, $x);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_use_certificate_chain_file
.Sp
Loads a certificate chain from \f(CW$file\fR into \f(CW$ctx\fR. The certificates must be in \s-1PEM\s0 format and must be sorted
starting with the subject's certificate (actual client or server certificate), followed by intermediate
\&\s-1CA\s0 certificates if applicable, and ending at the highest level (root) \s-1CA.\s0
.Sp
.Vb 5
\& my $rv = Net::SSLeay::CTX_use_certificate_chain_file($ctx, $file);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $file \- (string) file name
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
CTX_use_certificate_file
.Sp
Loads the first certificate stored in \f(CW$file\fR into \f(CW$ctx\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CTX_use_certificate_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.PP
\fILow level \s-1API:\s0 SSL_* related functions\fR
.IX Subsection "Low level API: SSL_* related functions"
.PP
\&\fB\s-1NOTE:\s0\fR Please note that the function described in this chapter have \*(L"\s-1SSL_\*(R"\s0 part stripped from their original openssl names.
.IP "\(bu" 4
new
.Sp
Creates a new \s-1SSL\s0 structure which is needed to hold the data for a \s-1TLS/SSL\s0 connection.
The new structure inherits the settings of the underlying context \f(CW$ctx:\fR connection
method (SSLv2/v3/TLSv1), options, verification settings, timeout settings.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::new($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_new.html>
.IP "\(bu" 4
accept
.Sp
Waits for a \s-1TLS/SSL\s0 client to initiate the \s-1TLS/SSL\s0 handshake. The communication
channel must already have been set and assigned to the ssl by setting an underlying \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::accept($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_accept.html>
.IP "\(bu" 4
add_client_CA
.Sp
Adds the \s-1CA\s0 name extracted from cacert to the list of CAs sent to the client
when requesting a client certificate for the chosen ssl, overriding the setting
valid for ssl's \s-1SSL_CTX\s0 object.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::add_client_CA($ssl, $x);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>
.IP "\(bu" 4
callback_ctrl
.Sp
??? (more info needed)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::callback_ctrl($ssl, $cmd, $fp);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $cmd \- (integer) command id
\& # $fp \- (function pointer) ???
\& #
\& # returns: ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>
.IP "\(bu" 4
check_private_key
.Sp
Checks the consistency of a private key with the corresponding certificate loaded into \f(CW$ssl\fR
.Sp
.Vb 4
\& my $rv = Net::SSLeay::check_private_key($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
clear
.Sp
Reset \s-1SSL\s0 object to allow another connection.
.Sp
.Vb 4
\& Net::SSLeay::clear($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_clear.html>
.IP "\(bu" 4
connect
.Sp
Initiate the \s-1TLS/SSL\s0 handshake with an \s-1TLS/SSL\s0 server.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::connect($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_connect.html>
.IP "\(bu" 4
copy_session_id
.Sp
Copies the session structure fro \f(CW$from\fR to \f(CW$to\fR (+ also the private key and certificate associated with \f(CW$from\fR).
.Sp
.Vb 5
\& Net::SSLeay::copy_session_id($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs SSL structure
\& # $from \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
ctrl
.Sp
Internal handling function for \s-1SSL\s0 objects.
.Sp
\&\fB\s-1BEWARE:\s0\fR openssl doc says: This function should never be called directly!
.Sp
.Vb 7
\& my $rv = Net::SSLeay::ctrl($ssl, $cmd, $larg, $parg);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $cmd \- (integer) command id
\& # $larg \- (integer) long ???
\& # $parg \- (string/pointer) ???
\& #
\& # returns: (long) result of given command ???
.Ve
.Sp
For more details about valid \f(CW$cmd\fR values check \*(L"CTX_ctrl\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html>
.IP "\(bu" 4
do_handshake
.Sp
Will wait for a \s-1SSL/TLS\s0 handshake to take place. If the connection is in client
mode, the handshake will be started. The handshake routines may have to be
explicitly set in advance using either SSL_set_connect_state or \fISSL_set_accept_state\fR\|(3).
.Sp
.Vb 4
\& my $rv = Net::SSLeay::do_handshake($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 = success, 0 = handshake not successfull, <0 = fatal error during handshake
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_do_handshake.html>
.IP "\(bu" 4
dup
.Sp
Returns a duplicate of \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::dup($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL structure (0 on failure)
.Ve
.IP "\(bu" 4
free
.Sp
Free an allocated \s-1SSL\s0 structure.
.Sp
.Vb 4
\& Net::SSLeay::free($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_free.html>
.IP "\(bu" 4
get_SSL_CTX
.Sp
Returns a pointer to the \s-1SSL_CTX\s0 object, from which \f(CW$ssl\fR was created with Net::SSLeay::new.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_SSL_CTX($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CTX structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html>
.IP "\(bu" 4
set_SSL_CTX
.Sp
Sets the \s-1SSL_CTX\s0 the corresponds to an \s-1SSL\s0 session.
.Sp
.Vb 5
\& my $the_ssl_ctx = Net::SSLeay::set_SSL_CTX($ssl, $ssl_ctx);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $ssl_ctx \- Change the ssl object to the given ssl_ctx
\& #
\& # returns \- the ssl_ctx
.Ve
.IP "\(bu" 4
get_app_data
.Sp
Can be used to get application defined value/data.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_app_data($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: string/buffer/pointer ???
.Ve
.IP "\(bu" 4
set_app_data
.Sp
Can be used to set some application defined value/data.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_app_data($ssl, $arg);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $arg \- (string/buffer/pointer ???) data
\& #
\& # returns: ???
.Ve
.IP "\(bu" 4
get_certificate
.Sp
Gets X509 certificate from an established \s-1SSL\s0 connection.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_certificate($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.IP "\(bu" 4
get_cipher
.Sp
Obtains the name of the currently used cipher.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_cipher($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (string) cipher name e.g. \*(AqDHE\-RSA\-AES256\-SHA\*(Aq or \*(Aq\*(Aq, when no session has been established.
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>
.IP "\(bu" 4
get_cipher_bits
.Sp
Obtain the number of secret/algorithm bits used.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_cipher_bits($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: number of secret bits used by current cipher
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>
and <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.IP "\(bu" 4
get_cipher_list
.Sp
Returns the name (string) of the \s-1SSL_CIPHER\s0 listed for \f(CW$ssl\fR with priority \f(CW$n\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::get_cipher_list($ssl, $n);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $n \- (integer) priority
\& #
\& # returns: (string) cipher name e.g. \*(AqEDH\-DSS\-DES\-CBC3\-SHA\*(Aq or \*(Aq\*(Aq in case of error
.Ve
.Sp
Call Net::SSLeay::get_cipher_list with priority starting from 0 to obtain
the sorted list of available ciphers, until '' is returned:
.Sp
.Vb 5
\& my $priority = 0;
\& while (my $c = Net::SSLeay::get_cipher_list($ssl, $priority)) {
\&   print "cipher[$priority] = $c\en";
\&   $priority++;
\& }
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_ciphers.html>
.IP "\(bu" 4
get_client_CA_list
.Sp
Returns the list of client CAs explicitly set for \f(CW$ssl\fR using \f(CW\*(C`Net::SSleay::set_client_CA_list\*(C'\fR
or \f(CW$ssl\fR's \s-1SSL_CTX\s0 object with \f(CW\*(C`Net::SSLeay::CTX_set_client_CA_list\*(C'\fR, when in server mode.
.Sp
In client mode, returns the list of client CAs sent from the server, if any.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_client_CA_list($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html>
.IP "\(bu" 4
get_current_cipher
.Sp
Returns the cipher actually used.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_current_cipher($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_CIPHER structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html>
.IP "\(bu" 4
get_default_timeout
.Sp
Returns the default timeout value assigned to \s-1SSL_SESSION\s0 objects negotiated for the protocol valid for \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_default_timeout($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (long) timeout in seconds
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html>
.IP "\(bu" 4
get_error
.Sp
Returns a result code for a preceding call to \f(CW\*(C`connect\*(C'\fR, \f(CW\*(C`accept\*(C'\fR, \f(CW\*(C`do_handshake\*(C'\fR, \f(CW\*(C`read\*(C'\fR, \f(CW\*(C`peek\*(C'\fR or \f(CW\*(C`write\*(C'\fR on \f(CW$ssl\fR.
.Sp
.Vb 10
\& my $rv = Net::SSLeay::get_error($ssl, $ret);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $ret \- return value of preceding TLS/SSL I/O operation
\& #
\& # returns: result code, which is one of the following values:
\& #  0 \- SSL_ERROR_NONE
\& #  1 \- SSL_ERROR_SSL
\& #  2 \- SSL_ERROR_WANT_READ
\& #  3 \- SSL_ERROR_WANT_WRITE
\& #  4 \- SSL_ERROR_WANT_X509_LOOKUP
\& #  5 \- SSL_ERROR_SYSCALL
\& #  6 \- SSL_ERROR_ZERO_RETURN
\& #  7 \- SSL_ERROR_WANT_CONNECT
\& #  8 \- SSL_ERROR_WANT_ACCEPT
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_error.html>
.IP "\(bu" 4
get_ex_data
.Sp
Is used to retrieve the information for \f(CW$idx\fR from \f(CW$ssl\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::get_ex_data($ssl, $idx);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $idx \- (integer) index for application specific data
\& #
\& # returns: pointer to ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>
.IP "\(bu" 4
set_ex_data
.Sp
Is used to store application data at \f(CW$data\fR for \f(CW$idx\fR into the \f(CW$ssl\fR object.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::set_ex_data($ssl, $idx, $data);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $idx \- (integer) ???
\& # $data \- (pointer) ???
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>
.IP "\(bu" 4
get_ex_new_index
.Sp
Is used to register a new index for application specific data.
.Sp
.Vb 8
\& my $rv = Net::SSLeay::get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
\& # $argl \- (long) ???
\& # $argp \- (pointer) ???
\& # $new_func \- function pointer ??? (CRYPTO_EX_new *)
\& # $dup_func \- function pointer ??? (CRYPTO_EX_dup *)
\& # $free_func \- function pointer ??? (CRYPTO_EX_free *)
\& #
\& # returns: (integer) ???
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html>
.IP "\(bu" 4
get_fd
.Sp
Returns the file descriptor which is linked to \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_fd($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: file descriptor (>=0) or \-1 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_fd.html>
.IP "\(bu" 4
get_finished
.Sp
Obtains the latest 'Finished' message sent to the peer.
.Sp
??? (does this function really work?)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::get_finished($ssl, $buf, $count);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $buf \- buffer where the returned data will be stored (pointer ???, pre\-allocated ???)
\& # $count \- max. size of return data
\& #
\& # returns: actual size of the returned data in $buf
.Ve
.IP "\(bu" 4
get_peer_finished
.Sp
Obtains the latest 'Finished' message expected from the peer.
.Sp
??? (does this function really work?)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::get_peer_finished($ssl, $buf, $count);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $buf \- buffer where the returned data will be stored (pointer ???, pre\-allocated ???)
\& # $count \- max. size of the return data
\& #
\& # returns: actual size of the returned data in $buf
.Ve
.IP "\(bu" 4
get_keyblock_size
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function.
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_keyblock_size($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: keyblock size, \-1 on error
.Ve
.IP "\(bu" 4
get_mode
.Sp
Returns the mode (bitmask) set for \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_mode($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: mode (bitmask)
.Ve
.Sp
To decode the return value (bitmask) see documentation for \*(L"CTX_get_mode\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>
.IP "\(bu" 4
set_mode
.Sp
Adds the mode set via bitmask in \f(CW$mode\fR to \f(CW$ssl\fR. Options already set before are not cleared.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_mode($ssl, $mode);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $mode \- mode (bitmask)
\& #
\& # returns: the new mode bitmask after adding $mode
.Ve
.Sp
For \f(CW$mode\fR bitmask details see \*(L"CTX_get_mode\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html>
.IP "\(bu" 4
get_options
.Sp
Returns the options (bitmask) set for \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_options($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: options (bitmask)
.Ve
.Sp
To decode the return value (bitmask) see documentation for \*(L"CTX_get_options\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>
.IP "\(bu" 4
set_options
.Sp
Adds the options set via bitmask in \f(CW$options\fR to \f(CW$ssl\fR. Options already set before are not cleared!
.Sp
.Vb 5
\& Net::SSLeay::set_options($ssl, $options);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $options \- options (bitmask)
\& #
\& # returns: the new options bitmask after adding $options
.Ve
.Sp
For \f(CW$options\fR bitmask details see \*(L"CTX_get_options\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html>
.IP "\(bu" 4
get_peer_certificate
.Sp
Get the X509 certificate of the peer.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_peer_certificate($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html>
.IP "\(bu" 4
get_peer_cert_chain
.Sp
Get the certificate chain of the peer as an array of X509 structures.
.Sp
.Vb 4
\& my @rv = Net::SSLeay::get_peer_certificate($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: list of X509 structures
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html>
.IP "\(bu" 4
get_quiet_shutdown
.Sp
Returns the 'quiet shutdown' setting of ssl.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_quiet_shutdown($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) current \*(Aqquiet shutdown\*(Aq value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>
.IP "\(bu" 4
get_rbio
.Sp
Get 'read' \s-1BIO\s0 linked to an \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_rbio($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_rbio.html>
.IP "\(bu" 4
get_read_ahead
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_read_ahead($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) read_ahead value
.Ve
.IP "\(bu" 4
set_read_ahead
.Sp
.Vb 5
\& Net::SSLeay::set_read_ahead($ssl, $val);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $val \- read_ahead value to be set
\& #
\& # returns: the original read_ahead value
.Ve
.IP "\(bu" 4
get_server_random
.Sp
Returns internal SSLv3 server_random value.
.Sp
.Vb 4
\& Net::SSLeay::get_server_random($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: server_random value (binary data)
.Ve
.IP "\(bu" 4
get_client_random
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Returns internal SSLv3 client_random value.
.Sp
.Vb 4
\& Net::SSLeay::get_client_random($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: client_random value (binary data)
.Ve
.IP "\(bu" 4
export_keying_material
.Sp
Returns a buffer of \f(CW$req_len\fR bytes of keying material based on the constant string \f(CW$label\fR using the
masterkey and client and server random strings as described in 
draft\-ietf\-pppext\-eap\-ttls\-01.txt and See rfc2716
If p is present, it will be concatenated before generating the keying material
Returns undef on error
.Sp
.Vb 1
\&    my $out = Net::SSLeay::export_keying_material($ssl, $req_len, $label, $p);
.Ve
.IP "\(bu" 4
get_session
.Sp
Retrieve \s-1TLS/SSL\s0 session data used in \f(CW$ssl\fR. The reference count of the \s-1SSL_SESSION\s0 is \s-1NOT\s0 incremented.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_session($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_SESSION structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_session.html>
.IP "\(bu" 4
SSL_get0_session
.Sp
The alias for \*(L"get_session\*(R" (note that the name is \f(CW\*(C`SSL_get0_session\*(C'\fR \s-1NOT \s0\f(CW\*(C`get0_session\*(C'\fR).
.Sp
.Vb 1
\& my $rv = Net::SSLeay::SSL_get0_session();
.Ve
.IP "\(bu" 4
get1_session
.Sp
Returns a pointer to the \s-1SSL_SESSION\s0 actually used in \f(CW$ssl\fR. The reference count of the \s-1SSL_SESSION\s0 is incremented by 1.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get1_session($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_SESSION structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_session.html>
.IP "\(bu" 4
get_shared_ciphers
.Sp
Returns string with a list (colon ':' separated) of ciphers shared between client and server
within \s-1SSL\s0 session \f(CW$ssl\fR.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::get_shared_ciphers()
\& #
\& # returns: string like \*(AqECDHE\-RSA\-AES256\-SHA:ECDHE\-ECDSA\-AES256\-SHA:DHE\-RSA\-AES256\-SHA:DHE\-DSS\-AES256\-SHA:...\*(Aq
.Ve
.IP "\(bu" 4
get_shutdown
.Sp
Returns the shutdown mode of \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_shutdown($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: shutdown mode (bitmask) of ssl
\&
\& #to decode the return value (bitmask) use:
\& 0 \- No shutdown setting, yet
\& 1 \- SSL_SENT_SHUTDOWN
\& 2 \- SSL_RECEIVED_SHUTDOWN
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>
.IP "\(bu" 4
get_ssl_method
.Sp
Returns a function pointer to the \s-1TLS/SSL\s0 method set in \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_ssl_method($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs SSL_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>
.IP "\(bu" 4
get_state
.Sp
Returns the \s-1SSL\s0 connection state.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::get_state($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) state value
\& #          to decode the returned state check:
\& #          SSL_ST_* constants in openssl/ssl.h
\& #          SSL2_ST_* constants in openssl/ssl2.h
\& #          SSL23_ST_* constants in openssl/ssl23.h
\& #          SSL3_ST_* + DTLS1_ST_* constants in openssl/ssl3.h
.Ve
.IP "\(bu" 4
state
.Sp
Exactly the same as \*(L"get_state\*(R".
.Sp
.Vb 1
\& my $rv = Net::SSLeay::state($ssl);
.Ve
.IP "\(bu" 4
get_verify_depth
.Sp
Returns the verification depth limit currently set in \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_verify_depth($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: current depth or \-1 if no limit has been explicitly set
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>
.IP "\(bu" 4
set_verify_depth
.Sp
Sets the maximum depth for the certificate chain verification that shall be allowed for \f(CW$ssl\fR.
.Sp
.Vb 5
\& Net::SSLeay::set_verify_depth($ssl, $depth);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $depth \- (integer) depth
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>
.IP "\(bu" 4
get_verify_mode
.Sp
Returns the verification mode (bitmask) currently set in \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_verify_mode($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: mode (bitmask)
.Ve
.Sp
To decode the return value (bitmask) see documentation for \*(L"CTX_get_verify_mode\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html>
.IP "\(bu" 4
set_verify
.Sp
Sets the verification flags for \f(CW$ssl\fR to be \f(CW$mode\fR and specifies the \f(CW$verify_callback\fR function to be used.
.Sp
.Vb 6
\& Net::SSLeay::set_verify($ssl, $mode, $callback);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $mode \- mode (bitmask)
\& # $callback \- [optional] reference to perl callback function
\& #
\& # returns: no return value
.Ve
.Sp
For \f(CW$mode\fR bitmask details see \*(L"CTX_get_verify_mode\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html>
.IP "\(bu" 4
get_verify_result
.Sp
Returns the result of the verification of the X509 certificate presented by the peer, if any.
.Sp
.Vb 10
\& my $rv = Net::SSLeay::get_verify_result($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer)
\& #      0 \- X509_V_OK: ok
\& #      2 \- X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
\& #      3 \- X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
\& #      4 \- X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate\*(Aqs signature
\& #      5 \- X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL\*(Aqs signature
\& #      6 \- X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
\& #      7 \- X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
\& #      8 \- X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
\& #      9 \- X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
\& #     10 \- X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
\& #     11 \- X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
\& #     12 \- X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
\& #     13 \- X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate\*(Aqs notBefore field
\& #     14 \- X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate\*(Aqs notAfter field
\& #     15 \- X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL\*(Aqs lastUpdate field
\& #     16 \- X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL\*(Aqs nextUpdate field
\& #     17 \- X509_V_ERR_OUT_OF_MEM: out of memory
\& #     18 \- X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
\& #     19 \- X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
\& #     20 \- X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
\& #     21 \- X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
\& #     22 \- X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
\& #     23 \- X509_V_ERR_CERT_REVOKED: certificate revoked
\& #     24 \- X509_V_ERR_INVALID_CA: invalid CA certificate
\& #     25 \- X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
\& #     26 \- X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
\& #     27 \- X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
\& #     28 \- X509_V_ERR_CERT_REJECTED: certificate rejected
\& #     29 \- X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
\& #     30 \- X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
\& #     31 \- X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
\& #     32 \- X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
\& #     50 \- X509_V_ERR_APPLICATION_VERIFICATION: application verification failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_verify_result.html>
.IP "\(bu" 4
set_verify_result
.Sp
Override result of peer certificate verification.
.Sp
.Vb 5
\& Net::SSLeay::set_verify_result($ssl, $v);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $v \- (integer) result value
\& #
\& # returns: no return value
.Ve
.Sp
For more info about valid return values see \*(L"get_verify_result\*(R"
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_verify_result.html>
.IP "\(bu" 4
get_wbio
.Sp
Get 'write' \s-1BIO\s0 linked to an \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::get_wbio($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_get_rbio.html>
.IP "\(bu" 4
load_client_CA_file
.Sp
Load X509 certificates from file (\s-1PEM\s0 formatted).
.Sp
.Vb 4
\& my $rv = Net::SSLeay::load_client_CA_file($file);
\& # $file \- (string) file name
\& #
\& # returns: value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html>
.IP "\(bu" 4
clear_num_renegotiations
.Sp
Executes \s-1SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS\s0 command on \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::clear_num_renegotiations($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: command result
.Ve
.IP "\(bu" 4
need_tmp_RSA
.Sp
Executes \s-1SSL_CTRL_NEED_TMP_RSA\s0 command on \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::need_tmp_RSA($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: command result
.Ve
.IP "\(bu" 4
num_renegotiations
.Sp
Executes \s-1SSL_CTRL_GET_NUM_RENEGOTIATIONS\s0 command on \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::num_renegotiations($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: command result
.Ve
.IP "\(bu" 4
total_renegotiations
.Sp
Executes \s-1SSL_CTRL_GET_TOTAL_RENEGOTIATIONS\s0 command on \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::total_renegotiations($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: command result
.Ve
.IP "\(bu" 4
peek
.Sp
Copies \f(CW$max\fR bytes from the specified \f(CW$ssl\fR into the returned value.
In contrast to the \f(CW\*(C`Net::SSLeay::read()\*(C'\fR function, the data in the \s-1SSL\s0
buffer is unmodified after the \fISSL_peek()\fR operation.
.Sp
.Vb 5
\& Net::SSLeay::peek($ssl, $max);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $max \- [optional] max bytes to peek (integer) \- default is 32768
\& #
\& # returns: read data, undef on error
.Ve
.IP "\(bu" 4
pending
.Sp
Obtain number of readable bytes buffered in \f(CW$ssl\fR object.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::pending($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: the number of bytes pending
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_pending.html>
.IP "\(bu" 4
read
.Sp
Tries to read \f(CW$max\fR bytes from the specified \f(CW$ssl\fR.
.Sp
.Vb 9
\& my $got = Net::SSLeay::read($ssl, $max);
\& my($got, $rv) = Net::SSLeay::read($ssl, $max);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $max \- [optional] max bytes to read (integer) \- default is 32768
\& #
\& # returns:
\& # in scalar context: data read from the TLS/SSL connection, undef on error
\& # in list context:   two\-item array consisting of data read (undef on error),
\& #                      and return code from SSL_read().
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_read.html>
.IP "\(bu" 4
renegotiate
.Sp
Turn on flags for renegotiation so that renegotiation will happen
.Sp
.Vb 4
\& my $rv = Net::SSLeay::renegotiate($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
rstate_string
.Sp
Returns a 2 letter string indicating the current read state of the \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::rstate_string($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 2\-letter string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_rstate_string.html>
.IP "\(bu" 4
rstate_string_long
.Sp
Returns a string indicating the current read state of the \s-1SSL\s0 object ssl.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::rstate_string_long($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: string with current state
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_rstate_string.html>
.IP "\(bu" 4
session_reused
.Sp
Query whether a reused session was negotiated during handshake.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::session_reused($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 0 \- new session was negotiated; 1 \- session was reused.
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_session_reused.html>
.IP "\(bu" 4
set1_param
.Sp
Applies X509 verification parameters \f(CW$vpm\fR on \f(CW$ssl\fR
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set1_param($ssl, $vpm);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $vpm \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
set_accept_state
.Sp
Sets \f(CW$ssl\fR to work in server mode.
.Sp
.Vb 4
\& Net::SSLeay::set_accept_state($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>
.IP "\(bu" 4
set_bio
.Sp
Connects the BIOs \f(CW$rbio\fR and \f(CW$wbio\fR for the read and write operations of the \s-1TLS/SSL \s0(encrypted) side of \f(CW$ssl\fR.
.Sp
.Vb 6
\& Net::SSLeay::set_bio($ssl, $rbio, $wbio);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $rbio \- value corresponding to openssl\*(Aqs BIO structure
\& # $wbio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_bio.html>
.IP "\(bu" 4
set_cipher_list
.Sp
Sets the list of ciphers only for ssl.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_cipher_list($ssl, $str);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $str \- (string) cipher list e.g. \*(Aq3DES:+RSA\*(Aq
\& #
\& # returns: 1 if any cipher could be selected and 0 on complete failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>
.IP "\(bu" 4
set_client_CA_list
.Sp
Sets the list of CAs sent to the client when requesting a client certificate
for the chosen \f(CW$ssl\fR, overriding the setting valid for \f(CW$ssl\fR's \s-1SSL_CTX\s0 object.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_client_CA_list($ssl, $list);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $list \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html>
.IP "\(bu" 4
set_connect_state
.Sp
Sets \f(CW$ssl\fR to work in client mode.
.Sp
.Vb 4
\& Net::SSLeay::set_connect_state($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_connect_state.html>
.IP "\(bu" 4
set_fd
.Sp
Sets the file descriptor \f(CW$fd\fR as the input/output facility for the \s-1TLS/SSL \s0(encrypted)
side of \f(CW$ssl\fR, \f(CW$fd\fR will typically be the socket file descriptor of a network connection.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_fd($ssl, $fd);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $fd \- (integer) file handle (got via perl\*(Aqs fileno)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_fd.html>
.IP "\(bu" 4
set_rfd
.Sp
Sets the file descriptor \f(CW$fd\fR as the input (read) facility for the \s-1TLS/SSL \s0(encrypted) side of \f(CW$ssl\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_rfd($ssl, $fd);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $fd \- (integer) file handle (got via perl\*(Aqs fileno)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_fd.html>
.IP "\(bu" 4
set_wfd
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_wfd($ssl, $fd);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $fd \- (integer) file handle (got via perl\*(Aqs fileno)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_fd.html>
.IP "\(bu" 4
set_info_callback
.Sp
Sets the callback function, that can be used to obtain state information for \f(CW$ssl\fR during connection setup and use.
When callback is 0 (\s-1NULL\s0), the callback setting currently valid for ctx is used.
.Sp
??? (does this function really work?)
.Sp
.Vb 5
\& Net::SSLeay::set_info_callback($ssl, $cb);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $cb \- pointer to function ???
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html>
.IP "\(bu" 4
set_pref_cipher
.Sp
Sets the list of available ciphers for \f(CW$ssl\fR using the control string \f(CW$str\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_pref_cipher($ssl, $str);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $str \- (string) cipher list e.g. \*(Aq3DES:+RSA\*(Aq
\& #
\& # returns: 1 if any cipher could be selected and 0 on complete failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html>
.IP "\(bu" 4
set_purpose
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_purpose($ssl, $purpose);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $purpose \- (integer) purpose identifier
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
For more info about available \f(CW$purpose\fR identifiers see \*(L"CTX_set_purpose\*(R".
.IP "\(bu" 4
set_quiet_shutdown
.Sp
Sets the 'quiet shutdown' flag for \f(CW$ssl\fR to be \f(CW$mode\fR.
.Sp
.Vb 5
\& Net::SSLeay::set_quiet_shutdown($ssl, $mode);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $mode \- 0 or 1
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html>
.IP "\(bu" 4
set_session
.Sp
Set a \s-1TLS/SSL\s0 session to be used during \s-1TLS/SSL\s0 connect.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_session($to, $ses);
\& # $to \- value corresponding to openssl\*(Aqs SSL structure
\& # $ses \- value corresponding to openssl\*(Aqs SSL_SESSION structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_session.html>
.IP "\(bu" 4
set_session_id_context
.Sp
Sets the context \f(CW$sid_ctx\fR of length \f(CW$sid_ctx_len\fR within which a session can be reused for the \f(CW$ssl\fR object.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::set_session_id_context($ssl, $sid_ctx, $sid_ctx_len);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $sid_ctx \- data buffer
\& # $sid_ctx_len \- length of data in $sid_ctx
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html>
.IP "\(bu" 4
set_session_secret_cb
.Sp
Setup pre-shared secret session resumption function.
.Sp
.Vb 6
\& Net::SSLeay::set_session_secret_cb($ssl, $func, $data);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $func \- perl reference to callback function
\& # $data \- [optional] data that will be passed to callback function when invoked
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
set_shutdown
.Sp
Sets the shutdown state of \f(CW$ssl\fR to \f(CW$mode\fR.
.Sp
.Vb 9
\& Net::SSLeay::set_shutdown($ssl, $mode);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $mode \- (integer) shutdown mode:
\& #         0 \- No shutdown
\& #         1 \- SSL_SENT_SHUTDOWN
\& #         2 \- SSL_RECEIVED_SHUTDOWN
\& #         3 \- SSL_RECEIVED_SHUTDOWN+SSL_SENT_SHUTDOWN
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_set_shutdown.html>
.IP "\(bu" 4
set_ssl_method
.Sp
Sets a new \s-1TLS/SSL\s0 method for a particular \f(CW$ssl\fR object.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_ssl_method($ssl, $method);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $method \- value corresponding to openssl\*(Aqs SSL_METHOD structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html>
.IP "\(bu" 4
set_tmp_dh
.Sp
Sets \s-1DH\s0 parameters to be used to be \f(CW$dh\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_tmp_dh($ssl, $dh);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $dh \- value corresponding to openssl\*(Aqs DH structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>
.IP "\(bu" 4
set_tmp_dh_callback
.Sp
Sets the callback function for \f(CW$ssl\fR to be used when a \s-1DH\s0 parameters are required to \f(CW$dh_cb\fR.
.Sp
??? (does this function really work?)
.Sp
.Vb 5
\& Net::SSLeay::set_tmp_dh_callback($ssl, $dh);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $dh_cb \- pointer to function ???
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html>
.IP "\(bu" 4
set_tmp_rsa
.Sp
Sets the temporary/ephemeral \s-1RSA\s0 key to be used in \f(CW$ssl\fR to be \f(CW$rsa\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_tmp_rsa($ssl, $rsa);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $rsa \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Example:
.Sp
.Vb 3
\& $rsakey = Net::SSLeay::RSA_generate_key();
\& Net::SSLeay::set_tmp_rsa($ssl, $rsakey);
\& Net::SSLeay::RSA_free($rsakey);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>
.IP "\(bu" 4
set_tmp_rsa_callback
.Sp
Sets the callback function for \f(CW$ssl\fR to be used when a temporary/ephemeral \s-1RSA\s0 key is required to \f(CW$tmp_rsa_callback\fR.
.Sp
??? (does this function really work?)
.Sp
.Vb 5
\& Net::SSLeay::set_tmp_rsa_callback($ssl, $tmp_rsa_callback);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $tmp_rsa_callback \- (function pointer) ???
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html>
.IP "\(bu" 4
set_trust
.Sp
.Vb 5
\& my $rv = Net::SSLeay::set_trust($ssl, $trust);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $trust \- (integer) trust identifier
\& #
\& # returns: the original value
.Ve
.Sp
For more details about \f(CW$trust\fR values see \*(L"CTX_set_trust\*(R".
.IP "\(bu" 4
shutdown
.Sp
Shuts down an active \s-1TLS/SSL\s0 connection. It sends the 'close notify' shutdown alert to the peer.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::shutdown($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 1 \- shutdown was successfully completed
\& #          0 \- shutdown is not yet finished,
\& #         \-1 \- shutdown was not successful
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_shutdown.html>
.IP "\(bu" 4
state_string
.Sp
Returns a 6 letter string indicating the current state of the \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::state_string($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: 6\-letter string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_state_string.html>
.IP "\(bu" 4
state_string_long
.Sp
Returns a string indicating the current state of the \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::state_string_long($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: state strings
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_state_string.html>
.IP "\(bu" 4
use_PrivateKey
.Sp
Adds \f(CW$pkey\fR as private key to \f(CW$ssl\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::use_PrivateKey($ssl, $pkey);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_PrivateKey_ASN1
.Sp
Adds the private key of type \f(CW$pk\fR stored in \f(CW$data\fR to \f(CW$ssl\fR.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::use_PrivateKey_ASN1($pk, $ssl, $d, $len);
\& # $pk \- (integer) key type, NID of corresponding algorithm
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $data \- key data (binary)
\& # $len \- length of $data
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_PrivateKey_file
.Sp
Adds the first private key found in \f(CW$file\fR to \f(CW$ssl\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::use_PrivateKey_file($ssl, $file, $type);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_RSAPrivateKey
.Sp
Adds \f(CW$rsa\fR as \s-1RSA\s0 private key to \f(CW$ssl\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::use_RSAPrivateKey($ssl, $rsa);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $rsa \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_RSAPrivateKey_ASN1
.Sp
Adds \s-1RSA\s0 private key stored in \f(CW$data\fR to \f(CW$ssl\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::use_RSAPrivateKey_ASN1($ssl, $data, $len);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $data \- key data (binary)
\& # $len \- length of $data
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_RSAPrivateKey_file
.Sp
Adds the first \s-1RSA\s0 private key found in \f(CW$file\fR to \f(CW$ssl\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::use_RSAPrivateKey_file($ssl, $file, $type);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_certificate
.Sp
Loads the certificate \f(CW$x\fR into \f(CW$ssl\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::use_certificate($ssl, $x);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_certificate_ASN1
.Sp
Loads the \s-1ASN1\s0 encoded certificate from \f(CW$data\fR to \f(CW$ssl\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::use_certificate_ASN1($ssl, $data, $len);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $data \- certificate data (binary)
\& # $len \- length of $data
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
use_certificate_file
.Sp
Loads the first certificate stored in \f(CW$file\fR into \f(CW$ssl\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::use_certificate_file($ssl, $file, $type);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, otherwise check out the error stack to find out the reason
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html>
.IP "\(bu" 4
version
.Sp
Returns \s-1SSL/TLS\s0 protocol version
.Sp
.Vb 8
\& my $rv = Net::SSLeay::version($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) protocol version
\& #          0x0002 \- SSL2_VERSION  (SSLv2)
\& #          0x0300 \- SSL3_VERSION  (SSLv3)
\& #          0x0301 \- TLS1_VERSION  (TLSv1)
\& #          0xFEFF \- DTLS1_VERSION (DTLSv1)
.Ve
.IP "\(bu" 4
want
.Sp
Returns state information for the \s-1SSL\s0 object \f(CW$ssl\fR.
.Sp
.Vb 8
\& my $rv = Net::SSLeay::want($ssl);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: state
\& #          1 \- SSL_NOTHING
\& #          2 \- SSL_WRITING
\& #          3 \- SSL_READING
\& #          4 \- SSL_X509_LOOKUP
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_want.html>
.IP "\(bu" 4
write
.Sp
Writes data from the buffer \f(CW$data\fR into the specified \f(CW$ssl\fR connection.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::write($ssl, $data);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $data \- data to be written
\& #
\& # returns: >0 \- (success) number of bytes actually written to the TLS/SSL connection
\& #           0 \- write not successful, probably the underlying connection was closed
\& #          <0 \- error
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_write.html>
.IP "\(bu" 4
write_partial
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Writes a fragment of data in \f(CW$data\fR from the buffer \f(CW$data\fR into the specified \f(CW$ssl\fR connection.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::write_partial($ssl, $from, $count, $data);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $from \- (integer) offset from the beginning of $data
\& # $count \- (integer) length of data to be written
\& # $data \- data buffer
\& #
\& # returns: >0 \- (success) number of bytes actually written to the TLS/SSL connection
\& #           0 \- write not successful, probably the underlying connection was closed
\& #          <0 \- error
.Ve
.IP "\(bu" 4
set_tlsext_host_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.8f
.Sp
Sets \s-1TLS\s0 servername extension on \s-1SLL\s0 object \f(CW$ssl\fR to value \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = set_tlsext_host_name($ssl, $name);
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& # $name \- (string) name to be set
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.PP
\fILow level \s-1API:\s0 RAND_* related functions\fR
.IX Subsection "Low level API: RAND_* related functions"
.PP
Check openssl doc related to \s-1RAND\s0 stuff <http://www.openssl.org/docs/crypto/rand.html>
.IP "\(bu" 4
RAND_add
.Sp
Mixes the \f(CW$num\fR bytes at \f(CW$buf\fR into the \s-1PRNG\s0 state.
.Sp
.Vb 6
\& Net::SSLeay::RAND_add($buf, $num, $entropy);
\& # $buf \- buffer with data to be mixed into the PRNG state
\& # $num \- number of bytes in $buf
\& # $entropy \- estimate of how much randomness is contained in $buf (in bytes)
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_add.html>
.IP "\(bu" 4
RAND_seed
.Sp
Equivalent to \*(L"RAND_add\*(R" when \f(CW$num\fR == \f(CW$entropy\fR.
.Sp
.Vb 5
\& Net::SSLeay::RAND_seed($buf);   # Perlishly figures out buf size
\& # $buf \- buffer with data to be mixed into the PRNG state
\& # $num \- number of bytes in $buf
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_add.html>
.IP "\(bu" 4
RAND_status
.Sp
Gives \s-1PRNG\s0 status (seeded enough or not).
.Sp
.Vb 2
\& my $rv = Net::SSLeay::RAND_status();
\& #returns: 1 if the PRNG has been seeded with enough data, 0 otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_add.html>
.IP "\(bu" 4
RAND_bytes
.Sp
Puts \f(CW$num\fR cryptographically strong pseudo-random bytes into \f(CW$buf\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::RAND_bytes($buf, $num);
\& # $buf \- buffer where the random data will be stored
\& # $num \- the size (in bytes) of requested random data
\& #
\& # returns: 1 on success, 0 otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_bytes.html>
.IP "\(bu" 4
RAND_pseudo_bytes
.Sp
Puts \f(CW$num\fR pseudo-random (not necessarily unpredictable) bytes into \f(CW$buf\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::RAND_pseudo_bytes($buf, $num);
\& # $buf \- buffer where the random data will be stored
\& # $num \- the size (in bytes) of requested random data
\& #
\& # returns: 1 if the bytes generated are cryptographically strong, 0 otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_bytes.html>
.IP "\(bu" 4
RAND_cleanup
.Sp
Erase the \s-1PRNG\s0 state.
.Sp
.Vb 2
\& Net::SSLeay::RAND_cleanup();
\& # no args, no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_cleanup.html>
.IP "\(bu" 4
RAND_egd
.Sp
Queries the entropy gathering daemon \s-1EGD\s0 on socket \f(CW$path\fR for 255 bytes.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::RAND_egd($path);
\& # $path \- path to a socket of entropy gathering daemon EGD
\& #
\& # returns: the number of bytes read from the daemon on success, and \-1 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_egd.html>
.IP "\(bu" 4
RAND_egd_bytes
.Sp
Queries the entropy gathering daemon \s-1EGD\s0 on socket \f(CW$path\fR for \f(CW$bytes\fR bytes.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::RAND_egd_bytes($path, $bytes);
\& # $path \- path to a socket of entropy gathering daemon EGD
\& # $bytes \- number of bytes we want from EGD
\& #
\& # returns: the number of bytes read from the daemon on success, and \-1 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_egd.html>
.IP "\(bu" 4
RAND_file_name
.Sp
Generates a default path for the random seed file.
.Sp
.Vb 4
\& my $file = Net::SSLeay::RAND_file_name($num);
\& # $num \- maximum size of returned file name
\& #
\& # returns: string with file name on success, \*(Aq\*(Aq (empty string) on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_load_file.html>
.IP "\(bu" 4
RAND_load_file
.Sp
Reads \f(CW$max_bytes\fR of bytes from \f(CW$file_name\fR and adds them to the \s-1PRNG.\s0
.Sp
.Vb 5
\& my $rv = Net::SSLeay::RAND_load_file($file_name, $max_bytes);
\& # $file_name \- the name of file
\& # $max_bytes \- bytes to read from $file_name; \-1 => the complete file is read
\& #
\& # returns: the number of bytes read
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_load_file.html>
.IP "\(bu" 4
RAND_write_file
.Sp
Writes 1024 random bytes to \f(CW$file_name\fR which can be used to initialize the \s-1PRNG\s0 by calling \*(L"RAND_load_file\*(R" in a later session.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::RAND_write_file($file_name);
\& # $file_name \- the name of file
\& #
\& # returns: the number of bytes written, and \-1 if the bytes written were generated without appropriate seed
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RAND_load_file.html>
.IP "\(bu" 4
RAND_poll
.Sp
Collects some entropy from operating system and adds it to the \s-1PRNG.\s0
.Sp
.Vb 2
\& my $rv = Net::SSLeay::RAND_poll();
\& # returns: 1 on success, 0 on failure (unable to gather reasonable entropy)
.Ve
.PP
\fILow level \s-1API:\s0 OBJ_* related functions\fR
.IX Subsection "Low level API: OBJ_* related functions"
.IP "\(bu" 4
OBJ_cmp
.Sp
Compares \s-1ASN1_OBJECT\s0 \f(CW$a\fR to \s-1ASN1_OBJECT\s0 \f(CW$b\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::OBJ_cmp($a, $b);
\& # $a \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& # $b \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& #
\& # returns: if the two are identical 0 is returned
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_dup
.Sp
Returns a copy/duplicate of \f(CW$o\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_dup($o);
\& # $o \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_nid2ln
.Sp
Returns long name for given \s-1NID\s0 \f(CW$n\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_nid2ln($n);
\& # $n \- (integer) NID
\& #
\& # returns: (string) long name e.g. \*(AqcommonName\*(Aq
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_ln2nid
.Sp
Returns \s-1NID\s0 corresponding to given long name \f(CW$n\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_ln2nid($s);
\& # $s \- (string) long name e.g. \*(AqcommonName\*(Aq
\& #
\& # returns: (integer) NID
.Ve
.IP "\(bu" 4
OBJ_nid2sn
.Sp
Returns short name for given \s-1NID\s0 \f(CW$n\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_nid2sn($n);
\& # $n \- (integer) NID
\& #
\& # returns: (string) short name e.g. \*(AqCN\*(Aq
.Ve
.Sp
Example:
.Sp
.Vb 1
\& print Net::SSLeay::OBJ_nid2sn(&Net::SSLeay::NID_commonName);
.Ve
.IP "\(bu" 4
OBJ_sn2nid
.Sp
Returns \s-1NID\s0 corresponding to given short name \f(CW$s\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_sn2nid($s);
\& # $s \- (string) short name e.g. \*(AqCN\*(Aq
\& #
\& # returns: (integer) NID
.Ve
.Sp
Example:
.Sp
.Vb 2
\& print "NID_commonName constant=", &Net::SSLeay::NID_commonName;
\& print "OBJ_sn2nid(\*(AqCN\*(Aq)=", Net::SSLeay::OBJ_sn2nid(\*(AqCN\*(Aq);
.Ve
.IP "\(bu" 4
OBJ_nid2obj
.Sp
Returns \s-1ASN1_OBJECT\s0 for given \s-1NID\s0 \f(CW$n\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_nid2obj($n);
\& # $n \- (integer) NID
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_obj2nid
.Sp
Returns \s-1NID\s0 corresponding to given \s-1ASN1_OBJECT\s0 \f(CW$o\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_obj2nid($o);
\& # $o \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& #
\& # returns: (integer) NID
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_txt2obj
.Sp
Converts the text string s into an \s-1ASN1_OBJECT\s0 structure. If \f(CW$no_name\fR is 0 then
long names (e.g. 'commonName') and short names (e.g. '\s-1CN\s0') will be interpreted
as well as numerical forms (e.g. '2.5.4.3'). If \f(CW$no_name\fR is 1 only the numerical
form is acceptable.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::OBJ_txt2obj($s, $no_name);
\& # $s \- text string to be converted
\& # $no_name \- (integer) 0 or 1
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_obj2txt
.Sp
Converts the \s-1ASN1_OBJECT\s0 a into a textual representation.
.Sp
.Vb 5
\& Net::SSLeay::OBJ_obj2txt($a, $no_name);
\& # $a \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& # $no_name \- (integer) 0 or 1
\& #
\& # returns: textual representation e.g. \*(AqcommonName\*(Aq ($no_name=0), \*(Aq2.5.4.3\*(Aq ($no_name=1)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.IP "\(bu" 4
OBJ_txt2nid
.Sp
Returns \s-1NID\s0 corresponding to text string \f(CW$s\fR which can be a long name, a short name or the numerical representation of an object.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::OBJ_txt2nid($s);
\& # $s \- (string) e.g. \*(AqcommonName\*(Aq or \*(AqCN\*(Aq or \*(Aq2.5.4.3\*(Aq
\& #
\& # returns: (integer) NID
.Ve
.Sp
Example:
.Sp
.Vb 2
\& my $nid = Net::SSLeay::OBJ_txt2nid(\*(Aq2.5.4.3\*(Aq);
\& Net::SSLeay::OBJ_nid2sn($n);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/OBJ_nid2obj.html>
.PP
\fILow level \s-1API:\s0 ASN1_INTEGER_* related functions\fR
.IX Subsection "Low level API: ASN1_INTEGER_* related functions"
.IP "\(bu" 4
ASN1_INTEGER_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Creates a new \s-1ASN1_INTEGER\s0 structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::ASN1_INTEGER_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_INTEGER structure (0 on failure)
.Ve
.IP "\(bu" 4
ASN1_INTEGER_free
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Free an allocated \s-1ASN1_INTEGER\s0 structure.
.Sp
.Vb 4
\& Net::SSLeay::ASN1_INTEGER_free($i);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
ASN1_INTEGER_get
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns integer value of given \s-1ASN1_INTEGER\s0 object.
.Sp
\&\fB\s-1BEWARE:\s0\fR If the value stored in \s-1ASN1_INTEGER\s0 is greater than max. integer that can be stored
in 'long' type (usually 32bit but may vary according to platform) then this function will return \-1.
For getting large \s-1ASN1_INTEGER\s0 values consider using \*(L"P_ASN1_INTEGER_get_dec\*(R" or \*(L"P_ASN1_INTEGER_get_hex\*(R".
.Sp
.Vb 4
\& my $rv = Net::SSLeay::ASN1_INTEGER_get($a);
\& # $a \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: integer value of ASN1_INTEGER object in $a
.Ve
.IP "\(bu" 4
ASN1_INTEGER_set
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets value of given \s-1ASN1_INTEGER\s0 object to value \f(CW$val\fR
.Sp
\&\fB\s-1BEWARE:\s0\fR \f(CW$val\fR has max. limit (= max. integer that can be stored in 'long' type).
For setting large \s-1ASN1_INTEGER\s0 values consider using \*(L"P_ASN1_INTEGER_set_dec\*(R" or \*(L"P_ASN1_INTEGER_set_hex\*(R".
.Sp
.Vb 5
\& my $rv = Net::SSLeay::ASN1_INTEGER_set($i, $val);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& # $val \- integer value
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
P_ASN1_INTEGER_get_dec
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns string with decimal representation of integer value of given \s-1ASN1_INTEGER\s0 object.
.Sp
.Vb 4
\& Net::SSLeay::P_ASN1_INTEGER_get_dec($i);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: string with decimal representation
.Ve
.IP "\(bu" 4
P_ASN1_INTEGER_get_hex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns string with hexadecimal representation of integer value of given \s-1ASN1_INTEGER\s0 object.
.Sp
.Vb 4
\& Net::SSLeay::P_ASN1_INTEGER_get_hex($i);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: string with hexadecimal representation
.Ve
.IP "\(bu" 4
P_ASN1_INTEGER_set_dec
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets value of given \s-1ASN1_INTEGER\s0 object to value \f(CW$val\fR (decimal string, suitable for large integers)
.Sp
.Vb 5
\& Net::SSLeay::P_ASN1_INTEGER_set_dec($i, $str);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& # $str \- string with decimal representation
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
P_ASN1_INTEGER_set_hex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets value of given \s-1ASN1_INTEGER\s0 object to value \f(CW$val\fR (hexadecimal string, suitable for large integers)
.Sp
.Vb 5
\& Net::SSLeay::P_ASN1_INTEGER_set_hex($i, $str);
\& # $i \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& # $str \- string with hexadecimal representation
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.PP
\fILow level \s-1API:\s0 ASN1_STRING_* related functions\fR
.IX Subsection "Low level API: ASN1_STRING_* related functions"
.IP "\(bu" 4
P_ASN1_STRING_get
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns string value of given \s-1ASN1_STRING\s0 object.
.Sp
.Vb 5
\& Net::SSLeay::P_ASN1_STRING_get($s, $utf8_decode);
\& # $s \- value corresponding to openssl\*(Aqs ASN1_STRING structure
\& # $utf8_decode \- [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
\& #
\& # returns: string
\&
\& $string = Net::SSLeay::P_ASN1_STRING_get($s);
\& #is the same as:
\& $string = Net::SSLeay::P_ASN1_STRING_get($s, 0);
.Ve
.PP
\fILow level \s-1API:\s0 ASN1_TIME_* related functions\fR
.IX Subsection "Low level API: ASN1_TIME_* related functions"
.IP "\(bu" 4
ASN1_TIME_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 2
\& my $time = ASN1_TIME_new();
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure
.Ve
.IP "\(bu" 4
ASN1_TIME_free
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 2
\& ASN1_TIME_free($time);
\& # $time \- value corresponding to openssl\*(Aqs ASN1_TIME structure
.Ve
.IP "\(bu" 4
ASN1_TIME_set
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 3
\& ASN1_TIME_set($time, $t);
\& # $time \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& # $t \- time value in seconds since 1.1.1970
.Ve
.Sp
\&\fB\s-1BEWARE:\s0\fR It is platform dependent how this function will handle dates after 2038.
Although perl's integer is large enough the internal implementation of this function
is dependent on the size of time_t structure (32bit time_t has problem with 2038).
.Sp
If you want to safely set date and time after 2038 use function \*(L"P_ASN1_TIME_set_isotime\*(R".
.IP "\(bu" 4
P_ASN1_TIME_get_isotime
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7e
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Gives \s-1ISO\-8601\s0 string representation of \s-1ASN1_TIME\s0 structure.
.Sp
.Vb 4
\& my $datetime_string = P_ASN1_TIME_get_isotime($time);
\& # $time \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& #
\& # returns: datetime string like \*(Aq2033\-05\-16T20:39:37Z\*(Aq or \*(Aq\*(Aq on failure
.Ve
.Sp
The output format is compatible with module DateTime::Format::RFC3339
.IP "\(bu" 4
P_ASN1_TIME_set_isotime
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7e
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Sets time and date value of ANS1_time structure.
.Sp
.Vb 5
\& my $rv = P_ASN1_TIME_set_isotime($time, $string);
\& # $time \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& # $string \- ISO\-8601 timedate string like \*(Aq2033\-05\-16T20:39:37Z\*(Aq
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
The \f(CW$string\fR parameter has to be in full form like \f(CW"2012\-03\-22T23:55:33"\fR or
\&\f(CW"2012\-03\-22T23:55:33Z"\fR or \f(CW"2012\-03\-22T23:55:33CET"\fR. Short forms like
\&\f(CW"2012\-03\-22T23:55"\fR or \f(CW"2012\-03\-22"\fR are not supported.
.IP "\(bu" 4
P_ASN1_TIME_put2string
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before, has bugs with openssl\-0.9.8i
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
Gives string representation of \s-1ASN1_TIME\s0 structure.
.Sp
.Vb 4
\& my $str = P_ASN1_TIME_put2string($time);
\& # $time \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& #
\& # returns: datetime string like \*(AqMay 16 20:39:37 2033 GMT\*(Aq
.Ve
.IP "\(bu" 4
P_ASN1_UTCTIME_put2string
.Sp
\&\fB\s-1NOTE:\s0\fR deprecated function, only for backward compatibility, just an alias
for \*(L"P_ASN1_TIME_put2string\*(R"
.PP
\fILow level \s-1API:\s0 X509_* related functions\fR
.IX Subsection "Low level API: X509_* related functions"
.IP "\(bu" 4
X509_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Allocates and initializes a X509 structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::X509_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_new.html>
.IP "\(bu" 4
X509_free
.Sp
Frees up the X509 structure.
.Sp
.Vb 4
\& Net::SSLeay::X509_free($a);
\& # $a \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_new.html>
.IP "\(bu" 4
X509_certificate_type
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns bitmask with type of certificate \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_certificate_type($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: (integer) bitmask with certificate type
\&
\& #to decode bitmask returned by this function use these constants:
\& &Net::SSLeay::EVP_PKS_DSA
\& &Net::SSLeay::EVP_PKS_EC
\& &Net::SSLeay::EVP_PKS_RSA
\& &Net::SSLeay::EVP_PKT_ENC
\& &Net::SSLeay::EVP_PKT_EXCH
\& &Net::SSLeay::EVP_PKT_EXP
\& &Net::SSLeay::EVP_PKT_SIGN
\& &Net::SSLeay::EVP_PK_DH
\& &Net::SSLeay::EVP_PK_DSA
\& &Net::SSLeay::EVP_PK_EC
\& &Net::SSLeay::EVP_PK_RSA
.Ve
.IP "\(bu" 4
X509_digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Computes digest/fingerprint of X509 \f(CW$data\fR using \f(CW$type\fR hash function.
.Sp
.Vb 5
\& my $digest_value = Net::SSLeay::X509_digest($data, $type);
\& # $data \- value corresponding to openssl\*(Aqs X509 structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure \- e.g. got via EVP_get_digestbyname()
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
X509_issuer_and_serial_hash
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sort of a checksum of issuer name and serial number of X509 certificate \f(CW$x\fR.
The result is not a full hash (e.g. sha\-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_issuer_and_serial_hash($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: number representing checksum
.Ve
.IP "\(bu" 4
X509_issuer_name_hash
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sort of a checksum of issuer name of X509 certificate \f(CW$x\fR.
The result is not a full hash (e.g. sha\-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_issuer_name_hash($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: number representing checksum
.Ve
.IP "\(bu" 4
X509_subject_name_hash
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sort of a checksum of subject name of X509 certificate \f(CW$x\fR.
The result is not a full hash (e.g. sha\-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_subject_name_hash($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: number representing checksum
.Ve
.IP "\(bu" 4
X509_pubkey_digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Computes digest/fingerprint of public key from X509 certificate \f(CW$data\fR using \f(CW$type\fR hash function.
.Sp
.Vb 5
\& my $digest_value = Net::SSLeay::X509_pubkey_digest($data, $type);
\& # $data \- value corresponding to openssl\*(Aqs X509 structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure \- e.g. got via EVP_get_digestbyname()
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
X509_set_issuer_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets issuer of X509 certificate \f(CW$x\fR to \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_set_issuer_name($x, $name);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_set_pubkey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets public key of X509 certificate \f(CW$x\fR to \f(CW$pkey\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_set_pubkey($x, $pkey);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_set_serialNumber
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets serial number of X509 certificate \f(CW$x\fR to \f(CW$serial\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_set_serialNumber($x, $serial);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $serial \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: 1 on success, 0 on failure
\&
\& #to create $serial value use one of these:
\& $serial = Net::SSLeay::P_ASN1_INTEGER_set_hex(\*(Aq45ad6f\*(Aq);
\& $serial = Net::SSLeay::P_ASN1_INTEGER_set_dec(\*(Aq7896541238529631478\*(Aq);
\& $serial = Net::SSLeay::ASN1_INTEGER_set(45896);
.Ve
.IP "\(bu" 4
X509_set_subject_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets subject of X509 certificate \f(CW$x\fR to \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_set_subject_name($x, $name);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_set_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Set 'version' value for X509 certificate $ to \f(CW$version\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_set_version($x, $version);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $version \- (integer) version number
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_sign
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sign X509 certificate \f(CW$x\fR with private key \f(CW$pkey\fR (using digest algorithm \f(CW$md\fR).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_sign($x, $pkey, $md);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& # $md \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_verify
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Verifies X509 object \f(CW$a\fR using public key \f(CW$r\fR (pubkey of issuing \s-1CA\s0).
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_verify($x, $r);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $r \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 0 \- verify failure, 1 \- verify OK, <0 \- error
.Ve
.IP "\(bu" 4
X509_get_ext_count
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns the total number of extensions in X509 object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_ext_count($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: count of extensions
.Ve
.IP "\(bu" 4
X509_get_pubkey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns public key corresponding to given X509 object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_pubkey($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_PKEY structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_get_serialNumber
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns serial number of X509 certificate \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_serialNumber($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_INTEGER structure (0 on failure)
.Ve
.Sp
See \*(L"P_ASN1_INTEGER_get_dec\*(R", \*(L"P_ASN1_INTEGER_get_hex\*(R" or \*(L"ASN1_INTEGER_get\*(R" to decode \s-1ASN1_INTEGER\s0 object.
.IP "\(bu" 4
X509_get_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'version' value of given X509 certificate \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_version($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: (integer) version
.Ve
.IP "\(bu" 4
X509_get_ext
.Sp
Returns X509_EXTENSION from \f(CW$x509\fR based on given position/index.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_get_ext($x509, $index);
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& # $index \- (integer) position/index of extension within $x509
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_EXTENSION structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_get_ext_by_NID
.Sp
Returns X509_EXTENSION from \f(CW$x509\fR based on given \s-1NID.\s0
.Sp
.Vb 7
\& my $rv = Net::SSLeay::X509_get_ext_by_NID($x509, $nid, $loc);
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& # $nid \- (integer) NID value
\& # $loc \- (integer) position to start lookup at
\& #
\& # returns: position/index of extension, negative value on error
\& #          call Net::SSLeay::X509_get_ext($x509, $rv) to get the actual extension
.Ve
.IP "\(bu" 4
X509_get_fingerprint
.Sp
Returns fingerprint of certificate \f(CW$cert\fR.
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function. The implementation
is basen on openssl's \f(CW\*(C`X509_digest()\*(C'\fR.
.Sp
.Vb 9
\& Net::SSLeay::X509_get_fingerprint($x509, $type);
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& # $type \- (string) digest type, currently supported values:
\& #         "md5"
\& #         "sha1"
\& #         "sha256"
\& #         "ripemd160"
\& #
\& # returns: certificate digest \- hexadecimal string (NOT binary data!)
.Ve
.IP "\(bu" 4
X509_get_issuer_name
.Sp
Return an X509_NAME object representing the issuer of the certificate \f(CW$cert\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_issuer_name($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_get_notAfter
.Sp
Return an object giving the time after which the certificate \f(CW$cert\fR is not valid.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_notAfter($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure (0 on failure)
.Ve
.Sp
To get human readable/printable form the return value you can use:
.Sp
.Vb 2
\& my $time = Net::SSLeay::X509_get_notAfter($cert);
\& print "notAfter=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\en";
.Ve
.IP "\(bu" 4
X509_get_notBefore
.Sp
Return an object giving the time before which the certificate \f(CW$cert\fR is not valid
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_notBefore($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure (0 on failure)
.Ve
.Sp
To get human readable/printable form the return value you can use:
.Sp
.Vb 2
\& my $time = Net::SSLeay::X509_get_notBefore($cert);
\& print "notBefore=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\en";
.Ve
.IP "\(bu" 4
X509_get_subjectAltNames
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function.
.Sp
Returns the list of alternative subject names from X509 certificate \f(CW$cert\fR.
.Sp
.Vb 10
\& my @rv = Net::SSLeay::X509_get_subjectAltNames($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: list containing pairs \- name_type (integer), name_value (string)
\& #          where name_type can be:
\& #          0 \- GEN_OTHERNAME
\& #          1 \- GEN_EMAIL
\& #          2 \- GEN_DNS
\& #          3 \- GEN_X400
\& #          4 \- GEN_DIRNAME
\& #          5 \- GEN_EDIPARTY
\& #          6 \- GEN_URI
\& #          7 \- GEN_IPADD
\& #          8 \- GEN_RID
.Ve
.IP "\(bu" 4
X509_get_subject_name
.Sp
Returns the subject of the certificate \f(CW$cert\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_get_subject_name($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_gmtime_adj
.Sp
Adjust th \s-1ASN1_TIME\s0 object to the timestamp (in \s-1GMT\s0).
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_gmtime_adj($s, $adj);
\& # $s \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& # $adj \- timestamp (seconds since 1.1.1970)
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure (0 on failure)
.Ve
.Sp
\&\fB\s-1BEWARE:\s0\fR this function may fail for dates after 2038 as it is dependent on time_t size on your
system (32bit time_t does not work after 2038). Consider using \*(L"P_ASN1_TIME_set_isotime\*(R" instead).
.IP "\(bu" 4
X509_load_cert_crl_file
.Sp
Takes \s-1PEM\s0 file and loads all X509 certificates and X509 CRLs from that file into X509_LOOKUP structure.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::X509_load_cert_crl_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_LOOKUP structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #                          if not FILETYPE_PEM then behaves as Net::SSLeay::X509_load_cert_file()
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_load_cert_file
.Sp
Loads/adds X509 certificate from \f(CW$file\fR to X509_LOOKUP structure
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_load_cert_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_LOOKUP structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_load_crl_file
.Sp
Loads/adds X509 \s-1CRL\s0 from \f(CW$file\fR to X509_LOOKUP structure
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_load_crl_file($ctx, $file, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_LOOKUP structure
\& # $file \- (string) file name
\& # $type \- (integer) type \- use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_policy_level_get0_node
.Sp
??? (more info needed)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_policy_level_get0_node($level, $i);
\& # $level \- value corresponding to openssl\*(Aqs X509_POLICY_LEVEL structure
\& # $i \- (integer) index/position
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_POLICY_NODE structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_level_node_count
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_level_node_count($level);
\& # $level \- value corresponding to openssl\*(Aqs X509_POLICY_LEVEL structure
\& #
\& # returns: (integer) node count
.Ve
.IP "\(bu" 4
X509_policy_node_get0_parent
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_node_get0_parent($node);
\& # $node \- value corresponding to openssl\*(Aqs X509_POLICY_NODE structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_POLICY_NODE structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_node_get0_policy
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_node_get0_policy($node);
\& # $node \- value corresponding to openssl\*(Aqs X509_POLICY_NODE structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_node_get0_qualifiers
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_node_get0_qualifiers($node);
\& # $node \- value corresponding to openssl\*(Aqs X509_POLICY_NODE structure
\& #
\& # returns: value corresponding to openssl\*(Aqs STACK_OF(POLICYQUALINFO) structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_tree_free
.Sp
??? (more info needed)
.Sp
.Vb 4
\& Net::SSLeay::X509_policy_tree_free($tree);
\& # $tree \- value corresponding to openssl\*(Aqs X509_POLICY_TREE structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
X509_policy_tree_get0_level
.Sp
??? (more info needed)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_policy_tree_get0_level($tree, $i);
\& # $tree \- value corresponding to openssl\*(Aqs X509_POLICY_TREE structure
\& # $i \- (integer) level index
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_POLICY_LEVEL structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_tree_get0_policies
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_tree_get0_policies($tree);
\& # $tree \- value corresponding to openssl\*(Aqs X509_POLICY_TREE structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_POLICY_NODE structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_tree_get0_user_policies
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_tree_get0_user_policies($tree);
\& # $tree \- value corresponding to openssl\*(Aqs X509_POLICY_TREE structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_POLICY_NODE structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_policy_tree_level_count
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_policy_tree_level_count($tree);
\& # $tree \- value corresponding to openssl\*(Aqs X509_POLICY_TREE structure
\& #
\& # returns: (integer) count
.Ve
.IP "\(bu" 4
X509_verify_cert_error_string
.Sp
Returns a human readable error string for verification error \f(CW$n\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_verify_cert_error_string($n);
\& # $n \- (long) numeric error code
\& #
\& # returns: error string
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>
.IP "\(bu" 4
P_X509_add_extensions
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Adds one or more X509 extensions to X509 object \f(CW$x\fR.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::P_X509_add_extensions($x, $ca_cert, $nid, $value);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& # $ca_cert \- value corresponding to openssl\*(Aqs X509 structure (issuer\*(Aqs cert \- necessary for sertting NID_authority_key_identifier)
\& # $nid \- NID identifying extension to be set
\& # $value \- extension value
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
You can set more extensions at once:
.Sp
.Vb 10
\& my $rv = Net::SSLeay::P_X509_add_extensions($x509, $ca_cert,
\&                &Net::SSLeay::NID_key_usage => \*(AqdigitalSignature,keyEncipherment\*(Aq,
\&                &Net::SSLeay::NID_subject_key_identifier => \*(Aqhash\*(Aq,
\&                &Net::SSLeay::NID_authority_key_identifier => \*(Aqkeyid\*(Aq,
\&                &Net::SSLeay::NID_authority_key_identifier => \*(Aqissuer\*(Aq,
\&                &Net::SSLeay::NID_basic_constraints => \*(AqCA:FALSE\*(Aq,
\&                &Net::SSLeay::NID_ext_key_usage => \*(AqserverAuth,clientAuth\*(Aq,
\&                &Net::SSLeay::NID_netscape_cert_type => \*(Aqserver\*(Aq,
\&                &Net::SSLeay::NID_subject_alt_name => \*(AqDNS:s1.dom.com,DNS:s2.dom.com,DNS:s3.dom.com\*(Aq,
\&          );
.Ve
.IP "\(bu" 4
P_X509_copy_extensions
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Copies X509 extensions from X509_REQ object to X509 object \- handy when you need to turn X509_REQ into X509 certificate.
.Sp
.Vb 6
\& Net::SSLeay::P_X509_copy_extensions($x509_req, $x509, $override);
\& # $x509_req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& # $override \- (integer) flag indication whether to override already existing items in $x509 (default 1)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
P_X509_get_crl_distribution_points
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Get the list of \s-1CRL\s0 distribution points from X509 certificate.
.Sp
.Vb 4
\& my @cdp = Net::SSLeay::P_X509_get_crl_distribution_points($x509);
\& # $x509 \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: list of distribution points (usually URLs)
.Ve
.IP "\(bu" 4
P_X509_get_ext_key_usage
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Gets the list of extended key usage of given X509 certificate \f(CW$cert\fR.
.Sp
.Vb 5
\& my @ext_usage = Net::SSLeay::P_X509_get_ext_key_usage($cert, $format);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& # $format \- choose type of return values: 0=OIDs, 1=NIDs, 2=shortnames, 3=longnames
\& #
\& # returns: list of values
.Ve
.Sp
Examples:
.Sp
.Vb 2
\& my @extkeyusage_oid = Net::SSLeay::P_X509_get_ext_key_usage($x509,0);
\& # returns for example: ("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")
\&
\& my @extkeyusage_nid = Net::SSLeay::P_X509_get_ext_key_usage($x509,1);
\& # returns for example: (129, 130)
\&
\& my @extkeyusage_sn  = Net::SSLeay::P_X509_get_ext_key_usage($x509,2);
\& # returns for example: ("serverAuth", "clientAuth")
\&
\& my @extkeyusage_ln  = Net::SSLeay::P_X509_get_ext_key_usage($x509,3);
\& # returns for example: ("TLS Web Server Authentication",  "TLS Web Client Authentication")
.Ve
.IP "\(bu" 4
P_X509_get_key_usage
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Gets the list of key usage of given X509 certificate \f(CW$cert\fR.
.Sp
.Vb 10
\& my @keyusage = Net::SSLeay::P_X509_get_key_usage($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: list of key usage values which can be none, one or more from the following list:
\& #          "digitalSignature"
\& #          "nonRepudiation"
\& #          "keyEncipherment"
\& #          "dataEncipherment"
\& #          "keyAgreement"
\& #          "keyCertSign"
\& #          "cRLSign"
\& #          "encipherOnly"
\& #          "decipherOnly"
.Ve
.IP "\(bu" 4
P_X509_get_netscape_cert_type
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Gets the list of Netscape cert types of given X509 certificate \f(CW$cert\fR.
.Sp
.Vb 12
\& Net::SSLeay::P_X509_get_netscape_cert_type($cert);
\& # $cert \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: list of Netscape type values which can be none, one or more from the following list:
\& #          "client"
\& #          "server"
\& #          "email"
\& #          "objsign"
\& #          "reserved"
\& #          "sslCA"
\& #          "emailCA"
\& #          "objCA"
.Ve
.IP "\(bu" 4
P_X509_get_pubkey_alg
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns \s-1ASN1_OBJECT\s0 corresponding to X509 certificate public key algorithm.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::P_X509_get_pubkey_alg($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
To get textual representation use:
.Sp
.Vb 2
\& my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_pubkey_alg($x509));
\& # returns for example: "rsaEncryption"
.Ve
.IP "\(bu" 4
P_X509_get_signature_alg
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns \s-1ASN1_OBJECT\s0 corresponding to X509 signarite key algorithm.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::P_X509_get_signature_alg($x);
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
To get textual representation use:
.Sp
.Vb 2
\& my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_signature_alg($x509))
\& # returns for example: "sha1WithRSAEncryption"
.Ve
.PP
\fILow level \s-1API:\s0 X509_REQ_* related functions\fR
.IX Subsection "Low level API: X509_REQ_* related functions"
.IP "\(bu" 4
X509_REQ_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Creates a new X509_REQ structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::X509_REQ_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_REQ structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_REQ_free
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Free an allocated X509_REQ structure.
.Sp
.Vb 4
\& Net::SSLeay::X509_REQ_free($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
X509_REQ_add1_attr_by_NID
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Adds an attribute whose name is defined by a \s-1NID\s0 \f(CW$nid\fR. The field value to be added is in \f(CW$bytes\fR.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::X509_REQ_add1_attr_by_NID($req, $nid, $type, $bytes);
\& # $req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $nid \- (integer) NID value
\& # $type \- (integer) type of data in $bytes (see below)
\& # $bytes \- data to be set
\& #
\& # returns: 1 on success, 0 on failure
\&
\& # values for $type \- use constants:
\& &Net::SSLeay::MBSTRING_UTF8     \- $bytes contains utf8 encoded data
\& &Net::SSLeay::MBSTRING_ASC      \- $bytes contains ASCII data
.Ve
.IP "\(bu" 4
X509_REQ_digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Computes digest/fingerprint of X509_REQ \f(CW$data\fR using \f(CW$type\fR hash function.
.Sp
.Vb 5
\& my $digest_value = Net::SSLeay::X509_REQ_digest($data, $type);
\& # $data \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure \- e.g. got via EVP_get_digestbyname()
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
X509_REQ_get_attr_by_NID
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Retrieve the next index matching \f(CW$nid\fR after \f(CW$lastpos\fR ($lastpos should initially be set to \-1).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid, $lastpos=\-1);
\& # $req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $nid \- (integer) NID value
\& # $lastpos \- [optional] (integer) index where to start search (default \-1)
\& #
\& # returns: index (\-1 if there are no more entries)
.Ve
.Sp
Note: use \*(L"P_X509_REQ_get_attr\*(R" to get the actual attribute value \- e.g.
.Sp
.Vb 2
\& my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
\& my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);
.Ve
.IP "\(bu" 4
X509_REQ_get_attr_by_OBJ
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Retrieve the next index matching \f(CW$obj\fR after \f(CW$lastpos\fR ($lastpos should initially be set to \-1).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_REQ_get_attr_by_OBJ($req, $obj, $lastpos=\-1);
\& # $req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $obj \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& # $lastpos \- [optional] (integer) index where to start search (default \-1)
\& #
\& # returns: index (\-1 if there are no more entries)
.Ve
.Sp
Note: use \*(L"P_X509_REQ_get_attr\*(R" to get the actual attribute value \- e.g.
.Sp
.Vb 2
\& my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
\& my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);
.Ve
.IP "\(bu" 4
X509_REQ_get_attr_count
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns the total number of attributes in \f(CW$req\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_REQ_get_attr_count($req);
\& # $req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: (integer) items count
.Ve
.IP "\(bu" 4
X509_REQ_get_pubkey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns public key corresponding to given X509_REQ object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_REQ_get_pubkey($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_PKEY structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_REQ_get_subject_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns X509_NAME object corresponding to subject name of given X509_REQ object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_REQ_get_subject_name($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_REQ_get_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'version' value for given X509_REQ object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_REQ_get_version($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& #
\& # returns: (integer) version e.g. 0 = "version 1"
.Ve
.IP "\(bu" 4
X509_REQ_set_pubkey
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets public key of given X509_REQ object \f(CW$x\fR to \f(CW$pkey\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_REQ_set_pubkey($x, $pkey);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_REQ_set_subject_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets subject name of given X509_REQ object \f(CW$x\fR to X509_NAME object \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_REQ_set_subject_name($x, $name);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_REQ_set_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sets 'version' of given X509_REQ object \f(CW$x\fR to \f(CW$version\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_REQ_set_version($x, $version);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $version \- (integer) e.g. 0 = "version 1"
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_REQ_sign
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sign X509_REQ object \f(CW$x\fR with private key \f(CW$pk\fR (using digest algorithm \f(CW$md\fR).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_REQ_sign($x, $pk, $md);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $pk \- value corresponding to openssl\*(Aqs EVP_PKEY structure (requestor\*(Aqs private key)
\& # $md \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_REQ_verify
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Verifies X509_REQ object \f(CW$x\fR using public key \f(CW$r\fR (pubkey of requesting party).
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_REQ_verify($x, $r);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $r \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 0 \- verify failure, 1 \- verify OK, <0 \- error
.Ve
.IP "\(bu" 4
P_X509_REQ_add_extensions
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Adds one or more X509 extensions to X509_REQ object \f(CW$x\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x, $nid, $value);
\& # $x \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $nid \- NID identifying extension to be set
\& # $value \- extension value
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
You can set more extensions at once:
.Sp
.Vb 8
\& my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x509_req,
\&            &Net::SSLeay::NID_key_usage => \*(AqdigitalSignature,keyEncipherment\*(Aq,
\&            &Net::SSLeay::NID_basic_constraints => \*(AqCA:FALSE\*(Aq,
\&            &Net::SSLeay::NID_ext_key_usage => \*(AqserverAuth,clientAuth\*(Aq,
\&            &Net::SSLeay::NID_netscape_cert_type => \*(Aqserver\*(Aq,
\&            &Net::SSLeay::NID_subject_alt_name => \*(AqDNS:s1.com,DNS:s2.com\*(Aq,
\&            &Net::SSLeay::NID_crl_distribution_points => \*(AqURI:http://pki.com/crl1,URI:http://pki.com/crl2\*(Aq,
\&          );
.Ve
.IP "\(bu" 4
P_X509_REQ_get_attr
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Returns attribute value for X509_REQ's attribute at index \f(CW$n\fR.
.Sp
.Vb 5
\& Net::SSLeay::P_X509_REQ_get_attr($req, $n);
\& # $req \- value corresponding to openssl\*(Aqs X509_REQ structure
\& # $n \- (integer) attribute index
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_STRING structure
.Ve
.PP
\fILow level \s-1API:\s0 X509_CRL_* related functions\fR
.IX Subsection "Low level API: X509_CRL_* related functions"
.IP "\(bu" 4
X509_CRL_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Creates a new X509_CRL structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::X509_CRL_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_CRL structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_CRL_free
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Free an allocated X509_CRL structure.
.Sp
.Vb 4
\& Net::SSLeay::X509_CRL_free($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
X509_CRL_digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Computes digest/fingerprint of X509_CRL \f(CW$data\fR using \f(CW$type\fR hash function.
.Sp
.Vb 5
\& my $digest_value = Net::SSLeay::X509_CRL_digest($data, $type);
\& # $data \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure \- e.g. got via EVP_get_digestbyname()
\& #
\& # returns: hash value (binary)
.Ve
.Sp
Example:
.Sp
.Vb 5
\& my $x509_crl
\& my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
\& my $digest_value = Net::SSLeay::X509_CRL_digest($x509_crl, $md);
\& #to get printable (hex) value of digest use:
\& print "digest=", unpack(\*(AqH*\*(Aq, $digest_value), "\en";
.Ve
.IP "\(bu" 4
X509_CRL_get_ext
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.54 and before
.Sp
Returns X509_EXTENSION from \f(CW$x509\fR based on given position/index.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_get_ext($x509, $index);
\& # $x509 \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $index \- (integer) position/index of extension within $x509
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_EXTENSION structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_CRL_get_ext_by_NID
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.54 and before
.Sp
Returns X509_EXTENSION from \f(CW$x509\fR based on given \s-1NID.\s0
.Sp
.Vb 7
\& my $rv = Net::SSLeay::X509_CRL_get_ext_by_NID($x509, $nid, $loc);
\& # $x509 \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $nid \- (integer) NID value
\& # $loc \- (integer) position to start lookup at
\& #
\& # returns: position/index of extension, negative value on error
\& #          call Net::SSLeay::X509_CRL_get_ext($x509, $rv) to get the actual extension
.Ve
.IP "\(bu" 4
X509_CRL_get_ext_count
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.54 and before
.Sp
Returns the total number of extensions in X509_CRL object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_get_ext_count($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: count of extensions
.Ve
.IP "\(bu" 4
X509_CRL_get_issuer
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns X509_NAME object corresponding to the issuer of X509_CRL \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_get_issuer($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.Sp
See other \f(CW\*(C`X509_NAME_*\*(C'\fR functions to get more info from X509_NAME structure.
.IP "\(bu" 4
X509_CRL_get_lastUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'lastUpdate' date-time value of X509_CRL object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_get_lastUpdate($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_CRL_get_nextUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'nextUpdate' date-time value of X509_CRL object \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_get_nextUpdate($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_TIME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_CRL_get_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'version' value of given X509_CRL structure \f(CW$x\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_get_version($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: (integer) version
.Ve
.IP "\(bu" 4
X509_CRL_set_issuer_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sets the issuer of X509_CRL object \f(CW$x\fR to X509_NAME object \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_set_issuer_name($x, $name);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_CRL_set_lastUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sets 'lastUpdate' value of X509_CRL object \f(CW$x\fR to \f(CW$tm\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_set_lastUpdate($x, $tm);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $tm \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_CRL_set_nextUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sets 'nextUpdate' value of X509_CRL object \f(CW$x\fR to \f(CW$tm\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_set_nextUpdate($x, $tm);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $tm \- value corresponding to openssl\*(Aqs ASN1_TIME structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_CRL_set_version
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sets 'version' value of given X509_CRL structure \f(CW$x\fR to \f(CW$version\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_set_version($x, $version);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $version \- (integer) version number (1 = version 2 CRL)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Note that if you want to use any X509_CRL extension you need to set \*(L"version 2 \s-1CRL\*(R" \- \s0\f(CW\*(C`Net::SSLeay::X509_CRL_set_version($x, 1)\*(C'\fR.
.IP "\(bu" 4
X509_CRL_sign
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Sign X509_CRL object \f(CW$x\fR with private key \f(CW$pkey\fR (using digest algorithm \f(CW$md\fR).
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_CRL_sign($x, $pkey, $md);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $pkey \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& # $md \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_CRL_sort
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sorts the data of X509_CRL object so it will be written in serial number order.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_CRL_sort($x);
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_CRL_verify
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Verifies X509_CRL object \f(CW$a\fR using public key \f(CW$r\fR (pubkey of issuing \s-1CA\s0).
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_CRL_verify($a, $r);
\& # $a \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $r \- value corresponding to openssl\*(Aqs EVP_PKEY structure
\& #
\& # returns: 0 \- verify failure, 1 \- verify OK, <0 \- error
.Ve
.IP "\(bu" 4
P_X509_CRL_add_revoked_serial_hex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Adds given serial number \f(CW$serial_hex\fR to X509_CRL object \f(CW$crl\fR.
.Sp
.Vb 8
\& Net::SSLeay::P_X509_CRL_add_revoked_serial_hex($crl, $serial_hex, $rev_time, $reason_code, $comp_time);
\& # $crl \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $serial_hex \- string (hexadecimal) representation of serial number
\& # $rev_time \- (revocation time) value corresponding to openssl\*(Aqs ASN1_TIME structure
\& # $reason_code \- [optional] (integer) reason code (see below) \- default 0
\& # $comp_time \- [optional] (compromise time) value corresponding to openssl\*(Aqs ASN1_TIME structure
\& #
\& # returns: no return value
\&
\& reason codes:
\& 0 \- unspecified
\& 1 \- keyCompromise
\& 2 \- CACompromise
\& 3 \- affiliationChanged
\& 4 \- superseded
\& 5 \- cessationOfOperation
\& 6 \- certificateHold
\& 7 \- removeFromCRL
.Ve
.IP "\(bu" 4
P_X509_CRL_get_serial
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Returns serial number of X509_CRL object.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::P_X509_CRL_get_serial($crl);
\& # $crl \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_INTEGER structure (0 on failure)
.Ve
.IP "\(bu" 4
P_X509_CRL_set_serial
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.7
.Sp
Sets serial number of X509_CRL object to \f(CW$crl_number\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::P_X509_CRL_set_serial($crl, $crl_number);
\& # $crl \- value corresponding to openssl\*(Aqs X509_CRL structure
\& # $crl_number \- value corresponding to openssl\*(Aqs ASN1_INTEGER structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.PP
\fILow level \s-1API:\s0 X509_EXTENSION_* related functions\fR
.IX Subsection "Low level API: X509_EXTENSION_* related functions"
.IP "\(bu" 4
X509_EXTENSION_get_critical
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns 'critical' flag of given X509_EXTENSION object \f(CW$ex\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_EXTENSION_get_critical($ex);
\& # $ex \- value corresponding to openssl\*(Aqs X509_EXTENSION structure
\& #
\& # returns: (integer) 1 \- critical, 0 \- noncritical
.Ve
.IP "\(bu" 4
X509_EXTENSION_get_data
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns value (raw data) of X509_EXTENSION object \f(CW$ne\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_EXTENSION_get_data($ne);
\& # $ne \- value corresponding to openssl\*(Aqs X509_EXTENSION structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OCTET_STRING structure (0 on failure)
.Ve
.Sp
Note: you can use \*(L"P_ASN1_STRING_get\*(R" to convert \s-1ASN1_OCTET_STRING\s0 into perl scalar variable.
.IP "\(bu" 4
X509_EXTENSION_get_object
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns \s-1OID \s0(\s-1ASN1_OBJECT\s0) of X509_EXTENSION object \f(CW$ne\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_EXTENSION_get_object($ex);
\& # $ex \- value corresponding to openssl\*(Aqs X509_EXTENSION structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.IP "\(bu" 4
X509V3_EXT_print
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns string representation of given X509_EXTENSION object \f(CW$ext\fR.
.Sp
.Vb 6
\& Net::SSLeay::X509V3_EXT_print($ext, $flags, $utf8_decode);
\& # $ext \- value corresponding to openssl\*(Aqs X509_EXTENSION structure
\& # $flags \- [optional] (integer) Currently the flag argument is unused and should be set to 0
\& # $utf8_decode \- [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
X509V3_EXT_d2i
.Sp
Parses an extension and returns its internal structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509V3_EXT_d2i($ext);
\& # $ext \- value corresponding to openssl\*(Aqs X509_EXTENSION structure
\& #
\& # returns: pointer ???
.Ve
.PP
\fILow level \s-1API:\s0 X509_NAME_* related functions\fR
.IX Subsection "Low level API: X509_NAME_* related functions"
.IP "\(bu" 4
X509_NAME_ENTRY_get_data
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Retrieves the field value of \f(CW$ne\fR in and \s-1ASN1_STRING\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_NAME_ENTRY_get_data($ne);
\& # $ne \- value corresponding to openssl\*(Aqs X509_NAME_ENTRY structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_STRING structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>
.IP "\(bu" 4
X509_NAME_ENTRY_get_object
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Retrieves the field name of \f(CW$ne\fR in and \s-1ASN1_OBJECT\s0 structure.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_NAME_ENTRY_get_object($ne);
\& # $ne \- value corresponding to openssl\*(Aqs X509_NAME_ENTRY structure
\& #
\& # returns: value corresponding to openssl\*(Aqs ASN1_OBJECT structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html>
.IP "\(bu" 4
X509_NAME_new
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.5
.Sp
Creates a new X509_NAME structure.
Adds a field whose name is defined by a string \f(CW$field\fR. The field value to be added is in \f(CW$bytes\fR.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::X509_NAME_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_NAME_hash
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.5
.Sp
Sort of a checksum of issuer name \f(CW$name\fR.
The result is not a full hash (e.g. sha\-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_NAME_hash($name);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: number representing checksum
.Ve
.IP "\(bu" 4
X509_NAME_add_entry_by_txt
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.5
.Sp
Adds a field whose name is defined by a string \f(CW$field\fR. The field value to be added is in \f(CW$bytes\fR.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::X509_NAME_add_entry_by_txt($name, $field, $type, $bytes, $len, $loc, $set);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $field \- (string) field definition (name) \- e.g. "organizationName"
\& # $type \- (integer) type of data in $bytes (see below)
\& # $bytes \- data to be set
\& # $loc \- [optional] (integer) index where the new entry is inserted: if it is \-1 (default) it is appended
\& # $set \- [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
\& #
\& # returns: 1 on success, 0 on failure
\&
\& # values for $type \- use constants:
\& &Net::SSLeay::MBSTRING_UTF8     \- $bytes contains utf8 encoded data
\& &Net::SSLeay::MBSTRING_ASC      \- $bytes contains ASCII data
.Ve
.Sp
Unicode note: when passing non-ascii (unicode) string in \f(CW$bytes\fR do not forget to set \f(CW\*(C`$flags = &Net::SSLeay::MBSTRING_UTF8\*(C'\fR and encode the perl \f(CW$string\fR via \f(CW\*(C`$bytes = encode(\*(Aqutf\-8\*(Aq, $string)\*(C'\fR.
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>
.IP "\(bu" 4
X509_NAME_add_entry_by_NID
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.5
.Sp
Adds a field whose name is defined by a \s-1NID\s0 \f(CW$nid\fR. The field value to be added is in \f(CW$bytes\fR.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::X509_NAME_add_entry_by_NID($name, $nid, $type, $bytes, $len, $loc, $set);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $nid \- (integer) field definition \- NID value
\& # $type \- (integer) type of data in $bytes (see below)
\& # $bytes \- data to be set
\& # $loc \- [optional] (integer) index where the new entry is inserted: if it is \-1 (default) it is appended
\& # $set \- [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>
.IP "\(bu" 4
X509_NAME_add_entry_by_OBJ
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-0.9.5
.Sp
Adds a field whose name is defined by a object (\s-1OID\s0) \f(CW$obj\fR . The field value to be added is in \f(CW$bytes\fR.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::X509_NAME_add_entry_by_OBJ($name, $obj, $type, $bytes, $len, $loc, $set);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $obj \- field definition \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& # $type \- (integer) type of data in $bytes (see below)
\& # $bytes \- data to be set
\& # $loc \- [optional] (integer) index where the new entry is inserted: if it is \-1 (default) it is appended
\& # $set \- [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html>
.IP "\(bu" 4
X509_NAME_cmp
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Compares two X509_NAME obejcts.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_NAME_cmp($a, $b);
\& # $a \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $b \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: 0 if $a matches $b; non zero otherwise
.Ve
.IP "\(bu" 4
X509_NAME_digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Computes digest/fingerprint of X509_NAME \f(CW$data\fR using \f(CW$type\fR hash function.
.Sp
.Vb 5
\& my $digest_value = Net::SSLeay::X509_NAME_digest($data, $type);
\& # $data \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure \- e.g. got via EVP_get_digestbyname()
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
X509_NAME_entry_count
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns the total number of entries in \f(CW$name\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_NAME_entry_count($name);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: (integer) entries count
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
.IP "\(bu" 4
X509_NAME_get_entry
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Retrieves the X509_NAME_ENTRY from \f(CW$name\fR corresponding to index \f(CW$loc\fR. Acceptable values for \f(CW$loc\fR run
from 0 to \f(CW\*(C`Net::SSLeay::X509_NAME_entry_count($name)\- 1\*(C'\fR. The value returned is an internal pointer which must not be freed.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_NAME_get_entry($name, $loc);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $loc \- (integer) index of wanted entry
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME_ENTRY structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
.IP "\(bu" 4
X509_NAME_print_ex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns a string with human readable version of \f(CW$name\fR.
.Sp
.Vb 6
\& Net::SSLeay::X509_NAME_print_ex($name, $flags, $utf8_decode);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $flags \- [optional] conversion flags (default XN_FLAG_RFC2253) \- see below
\& # $utf8_decode \- [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
\& #
\& # returns: string representation of $name
\&
\& #available conversion flags \- use constants:
\& &Net::SSLeay::XN_FLAG_COMPAT
\& &Net::SSLeay::XN_FLAG_DN_REV
\& &Net::SSLeay::XN_FLAG_DUMP_UNKNOWN_FIELDS
\& &Net::SSLeay::XN_FLAG_FN_ALIGN
\& &Net::SSLeay::XN_FLAG_FN_LN
\& &Net::SSLeay::XN_FLAG_FN_MASK
\& &Net::SSLeay::XN_FLAG_FN_NONE
\& &Net::SSLeay::XN_FLAG_FN_OID
\& &Net::SSLeay::XN_FLAG_FN_SN
\& &Net::SSLeay::XN_FLAG_MULTILINE
\& &Net::SSLeay::XN_FLAG_ONELINE
\& &Net::SSLeay::XN_FLAG_RFC2253
\& &Net::SSLeay::XN_FLAG_SEP_COMMA_PLUS
\& &Net::SSLeay::XN_FLAG_SEP_CPLUS_SPC
\& &Net::SSLeay::XN_FLAG_SEP_MASK
\& &Net::SSLeay::XN_FLAG_SEP_MULTILINE
\& &Net::SSLeay::XN_FLAG_SEP_SPLUS_SPC
\& &Net::SSLeay::XN_FLAG_SPC_EQ
.Ve
.Sp
Most likely you will be fine with default:
.Sp
.Vb 1
\& Net::SSLeay::X509_NAME_print_ex($name, &Net::SSLeay::XN_FLAG_RFC2253);
.Ve
.Sp
Or you might want RFC2253\-like output without utf8 chars escaping:
.Sp
.Vb 3
\& use Net::SSLeay qw/XN_FLAG_RFC2253 ASN1_STRFLGS_ESC_MSB/;
\& my $flag_rfc22536_utf8 = (XN_FLAG_RFC2253) & (~ ASN1_STRFLGS_ESC_MSB);
\& my $result = Net::SSLeay::X509_NAME_print_ex($name, $flag_rfc22536_utf8, 1);
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>
.IP "\(bu" 4
X509_NAME_get_text_by_NID
.Sp
Retrieves the text from the first entry in name which matches \f(CW$nid\fR, if no
such entry exists \-1 is returned.
.Sp
\&\fBopenssl note:\fR this is a legacy function which has various limitations which
makes it of minimal use in practice. It can only find the first matching
entry and will copy the contents of the field verbatim: this can be highly
confusing if the target is a multicharacter string type like a BMPString or a UTF8String.
.Sp
.Vb 5
\& Net::SSLeay::X509_NAME_get_text_by_NID($name, $nid);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& # $nid \- NID value (integer)
\& #
\& # returns: text value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html>
.IP "\(bu" 4
X509_NAME_oneline
.Sp
Return an \s-1ASCII\s0 version of \f(CW$name\fR.
.Sp
.Vb 4
\& Net::SSLeay::X509_NAME_oneline($name);
\& # $name \- value corresponding to openssl\*(Aqs X509_NAME structure
\& #
\& # returns: (string) ASCII version of $name
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html>
.IP "\(bu" 4
sk_X509_NAME_free
.Sp
Free an allocated \s-1STACK_OF\s0(X509_NAME) structure.
.Sp
.Vb 4
\& Net::SSLeay::sk_X509_NAME_free($sk);
\& # $sk \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
sk_X509_NAME_num
.Sp
Return number of items in \s-1STACK_OF\s0(X509_NAME)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::sk_X509_NAME_num($sk);
\& # $sk \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& #
\& # returns: number of items
.Ve
.IP "\(bu" 4
sk_X509_NAME_value
.Sp
Returns X509_NAME from position \f(CW$index\fR in \s-1STACK_OF\s0(X509_NAME)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::sk_X509_NAME_value($sk, $i);
\& # $sk \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& # $i \- (integer) index/position
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_NAME structure (0 on failure)
.Ve
.IP "\(bu" 4
add_file_cert_subjects_to_stack
.Sp
Add a file of certs to a stack. All certs in \f(CW$file\fR that are not already in the \f(CW$stackCAs\fR will be added.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::add_file_cert_subjects_to_stack($stackCAs, $file);
\& # $stackCAs \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& # $file \- (string) filename
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
add_dir_cert_subjects_to_stack
.Sp
Add a directory of certs to a stack. All certs in \f(CW$dir\fR that are not already in the \f(CW$stackCAs\fR will be added.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::add_dir_cert_subjects_to_stack($stackCAs, $dir);
\& # $stackCAs \- value corresponding to openssl\*(Aqs STACK_OF(X509_NAME) structure
\& # $dir \- (string) the directory to append from. All files in this directory will be examined as potential certs. Any that are acceptable to SSL_add_dir_cert_subjects_to_stack() that are not already in the stack will be included.
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.PP
\fILow level \s-1API:\s0 X509_STORE_* related functions\fR
.IX Subsection "Low level API: X509_STORE_* related functions"
.IP "\(bu" 4
X509_STORE_CTX_get_current_cert
.Sp
Returns the certificate in ctx which caused the error or 0 if no certificate is relevant.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs X509 structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>
.IP "\(bu" 4
X509_STORE_CTX_get_error
.Sp
Returns the error code of \f(CW$ctx\fR.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_STORE_CTX_get_error($x509_store_ctx);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& #
\& # returns: (integer) error code
.Ve
.Sp
For more info about erro code values check function \*(L"get_verify_result\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>
.IP "\(bu" 4
X509_STORE_CTX_get_error_depth
.Sp
Returns the depth of the error. This is a non-negative integer representing
where in the certificate chain the error occurred. If it is zero it occurred
in the end entity certificate, one if it is the certificate which signed
the end entity certificate and so on.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_STORE_CTX_get_error_depth($x509_store_ctx);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& #
\& # returns: (integer) depth
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>
.IP "\(bu" 4
X509_STORE_CTX_get_ex_data
.Sp
Is used to retrieve the information for \f(CW$idx\fR from \f(CW$x509_store_ctx\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_STORE_CTX_get_ex_data($x509_store_ctx, $idx);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& # $idx \- (integer) index for application specific data
\& #
\& # returns: pointer to ???
.Ve
.IP "\(bu" 4
X509_STORE_CTX_set_ex_data
.Sp
Is used to store application data at arg for idx into \f(CW$x509_store_ctx\fR.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::X509_STORE_CTX_set_ex_data($x509_store_ctx, $idx, $data);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& # $idx \- (integer) ???
\& # $data \- (pointer) ???
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_STORE_CTX_set_cert
.Sp
Sets the certificate to be verified in \f(CW$x509_store_ctx\fR to \f(CW$x\fR.
.Sp
.Vb 5
\& Net::SSLeay::X509_STORE_CTX_set_cert($x509_store_ctx, $x);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html>
.IP "\(bu" 4
X509_STORE_CTX_set_error
.Sp
Sets the error code of \f(CW$ctx\fR to \f(CW$s\fR. For example it might be used in a verification callback to set an error based on additional checks.
.Sp
.Vb 5
\& Net::SSLeay::X509_STORE_CTX_set_error($x509_store_ctx, $s);
\& # $x509_store_ctx \- value corresponding to openssl\*(Aqs X509_STORE_CTX structure
\& # $s \- (integer) error id
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html>
.IP "\(bu" 4
X509_STORE_add_cert
.Sp
Adds X509 certificate \f(CW$x\fR into the X509_STORE \f(CW$store\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_STORE_add_cert($store, $x);
\& # $store \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $x \- value corresponding to openssl\*(Aqs X509 structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_STORE_add_crl
.Sp
Adds X509 \s-1CRL\s0 \f(CW$x\fR into the X509_STORE \f(CW$store\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_STORE_add_crl($store, $x);
\& # $store \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $x \- value corresponding to openssl\*(Aqs X509_CRL structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_STORE_set1_param
.Sp
??? (more info needed)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_STORE_set1_param($store, $pm);
\& # $store \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $pm \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_STORE_set_flags
.Sp
.Vb 5
\& Net::SSLeay::X509_STORE_set_flags($ctx, $flags);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $flags \- (unsigned long) flags to be set (bitmask)
\& #
\& # returns: no return value
\&
\& #to create $flags value use:
\& 0x0001 \- X509_V_FLAG_CB_ISSUER_CHECK \- Send issuer+subject checks to verify_cb
\& 0x0002 \- X509_V_FLAG_USE_CHECK_TIME \- Use check time instead of current time
\& 0x0004 \- X509_V_FLAG_CRL_CHECK \- Lookup CRLs
\& 0x0008 \- X509_V_FLAG_CRL_CHECK_ALL \- Lookup CRLs for whole chain
\& 0x0010 \- X509_V_FLAG_IGNORE_CRITICAL \- Ignore unhandled critical extensions
\& 0x0020 \- X509_V_FLAG_X509_STRICT \- Disable workarounds for broken certificates
\& 0x0040 \- X509_V_FLAG_ALLOW_PROXY_CERTS \- Enable proxy certificate validation
\& 0x0080 \- X509_V_FLAG_POLICY_CHECK \- Enable policy checking
\& 0x0100 \- X509_V_FLAG_EXPLICIT_POLICY \- Policy variable require\-explicit\-policy
\& 0x0200 \- X509_V_FLAG_INHIBIT_ANY \- Policy variable inhibit\-any\-policy
\& 0x0400 \- X509_V_FLAG_INHIBIT_MAP \- Policy variable inhibit\-policy\-mapping
\& 0x0800 \- X509_V_FLAG_NOTIFY_POLICY \- Notify callback that policy is OK
\& 0x1000 \- X509_V_FLAG_EXTENDED_CRL_SUPPORT \- Extended CRL features such as indirect CRLs, alternate CRL signing keys
\& 0x2000 \- X509_V_FLAG_USE_DELTAS \- Delta CRL support
\& 0x4000 \- X509_V_FLAG_CHECK_SS_SIGNATURE \- Check selfsigned CA signature
\&
\& #or use corresponding constants like
\& $flags = &Net::SSLeay::X509_V_FLAG_CB_ISSUER_CHECK;
\& ...
\& $flags = &Net::SSLeay::X509_V_FLAG_CHECK_SS_SIGNATURE;
.Ve
.IP "\(bu" 4
X509_STORE_set_purpose
.Sp
.Vb 5
\& Net::SSLeay::X509_STORE_set_purpose($ctx, $purpose);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $purpose \- (integer) purpose identifier
\& #
\& # returns: no return value
.Ve
.Sp
For more details about \f(CW$purpose\fR identifier check \*(L"CTX_set_purpose\*(R".
.IP "\(bu" 4
X509_STORE_set_trust
.Sp
.Vb 5
\& Net::SSLeay::X509_STORE_set_trust($ctx, $trust);
\& # $ctx \- value corresponding to openssl\*(Aqs X509_STORE structure
\& # $trust \- (integer) trust identifier
\& #
\& # returns: no return value
.Ve
.Sp
For more details about \f(CW$trust\fR identifier check \*(L"CTX_set_trust\*(R".
.PP
\fILow level \s-1API:\s0 X509_VERIFY_PARAM_* related functions\fR
.IX Subsection "Low level API: X509_VERIFY_PARAM_* related functions"
.IP "\(bu" 4
X509_VERIFY_PARAM_add0_policy
.Sp
Enables policy checking (it is disabled by default) and adds \f(CW$policy\fR to the acceptable policy set.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_policy($param, $policy);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $policy \- value corresponding to openssl\*(Aqs ASN1_OBJECT structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_add0_table
.Sp
??? (more info needed)
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_table($param);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_clear_flags
.Sp
Clears the flags \f(CW$flags\fR in param.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_clear_flags($param, $flags);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $flags \- (unsigned long) flags to be set (bitmask)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
For more details about \f(CW$flags\fR bitmask see \*(L"X509_STORE_set_flags\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_free
.Sp
Frees up the X509_VERIFY_PARAM structure.
.Sp
.Vb 4
\& Net::SSLeay::X509_VERIFY_PARAM_free($param);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_get_depth
.Sp
Returns the current verification depth.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_depth($param);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: (ineger) depth
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_get_flags
.Sp
Returns the current verification flags.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_flags($param);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: (unsigned long) flags to be set (bitmask)
.Ve
.Sp
For more details about returned flags bitmask see \*(L"X509_STORE_set_flags\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_set_flags
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_flags($param, $flags);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $flags \- (unsigned long) flags to be set (bitmask)
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
For more details about \f(CW$flags\fR bitmask see \*(L"X509_STORE_set_flags\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_inherit
.Sp
??? (more info needed)
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_inherit($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $from \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_lookup
.Sp
Finds X509_VERIFY_PARAM by name.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_lookup($name);
\& # $name \- (string) name we want to find
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_new
.Sp
Creates a new X509_VERIFY_PARAM structure.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_new();
\& #
\& # returns: value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure (0 on failure)
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_set1
.Sp
Sets the name of X509_VERIFY_PARAM structure \f(CW$to\fR to the same value
as the name of X509_VERIFY_PARAM structure \f(CW$from\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $from \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_set1_name
.Sp
Sets the name of X509_VERIFY_PARAM structure \f(CW$param\fR to \f(CW$name\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_name($param, $name);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $name \- (string) name to be set
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.IP "\(bu" 4
X509_VERIFY_PARAM_set1_policies
.Sp
Enables policy checking (it is disabled by default) and sets the acceptable policy set to policies.
Any existing policy set is cleared. The policies parameter can be 0 to clear an existing policy set.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_policies($param, $policies);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $policies \- value corresponding to openssl\*(Aqs STACK_OF(ASN1_OBJECT) structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_set_depth
.Sp
Sets the maximum verification depth to depth. That is the maximum number of untrusted \s-1CA\s0 certificates that can appear in a chain.
.Sp
.Vb 5
\& Net::SSLeay::X509_VERIFY_PARAM_set_depth($param, $depth);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $depth \- (integer) depth to be set
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_set_purpose
.Sp
Sets the verification purpose in \f(CW$param\fR to \f(CW$purpose\fR. This determines the acceptable purpose
of the certificate chain, for example \s-1SSL\s0 client or \s-1SSL\s0 server.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_purpose($param, $purpose);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $purpose \- (integer) purpose identifier
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
For more details about \f(CW$purpose\fR identifier check \*(L"CTX_set_purpose\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_set_time
.Sp
Sets the verification time in \f(CW$param\fR to \f(CW$t\fR. Normally the current time is used.
.Sp
.Vb 5
\& Net::SSLeay::X509_VERIFY_PARAM_set_time($param, $t);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $t \- (time_t) time in seconds since 1.1.1970
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_set_trust
.Sp
Sets the trust setting in \f(CW$param\fR to \f(CW$trust\fR.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_trust($param, $trust);
\& # $param \- value corresponding to openssl\*(Aqs X509_VERIFY_PARAM structure
\& # $trust \- (integer) trust identifier
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
For more details about \f(CW$trust\fR identifier check \*(L"CTX_set_trust\*(R".
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html>
.IP "\(bu" 4
X509_VERIFY_PARAM_table_cleanup
.Sp
??? (more info needed)
.Sp
.Vb 3
\& Net::SSLeay::X509_VERIFY_PARAM_table_cleanup();
\& #
\& # returns: no return value
.Ve
.PP
\fILow level \s-1API:\s0 Cipher (EVP_CIPHER_*) related functions\fR
.IX Subsection "Low level API: Cipher (EVP_CIPHER_*) related functions"
.IP "\(bu" 4
EVP_get_cipherbyname
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before
.Sp
Returns an \s-1EVP_CIPHER\s0 structure when passed a cipher name.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_get_cipherbyname($name);
\& # $name \- (string) cipher name e.g. \*(Aqaes\-128\-cbc\*(Aq, \*(Aqcamellia\-256\-ecb\*(Aq, \*(Aqdes\-ede\*(Aq, ...
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_CIPHER structure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/EVP_EncryptInit.html>
.PP
\fILow level \s-1API:\s0 Digest (EVP_MD_*) related functions\fR
.IX Subsection "Low level API: Digest (EVP_MD_*) related functions"
.IP "\(bu" 4
OpenSSL_add_all_digests
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 2
\& Net::SSLeay::OpenSSL_add_all_digests();
\& # no args, no return value
.Ve
.Sp
http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html
.IP "\(bu" 4
P_EVP_MD_list_all
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-1.0.0
.Sp
\&\fB\s-1NOTE:\s0\fR Does not exactly correspond to any low level \s-1API\s0 function
.Sp
.Vb 3
\& my $rv = Net::SSLeay::P_EVP_MD_list_all();
\& #
\& # returns: arrayref \- list of available digest names
.Ve
.Sp
The returned digest names correspond to values expected by \*(L"EVP_get_digestbyname\*(R".
.Sp
Note that some of the digests are available by default and some only after calling \*(L"OpenSSL_add_all_digests\*(R".
.IP "\(bu" 4
EVP_get_digestbyname
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_get_digestbyname($name);
\& # $name \- string with digest name
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.Sp
The \f(CW$name\fR param can be:
.Sp
.Vb 11
\& md2
\& md4
\& md5
\& mdc2
\& ripemd160
\& sha
\& sha1
\& sha224
\& sha256
\& sha512
\& whirlpool
.Ve
.Sp
Or better check the supported digests by calling \*(L"P_EVP_MD_list_all\*(R".
.IP "\(bu" 4
EVP_MD_type
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_MD_type($md);
\& # $md \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: the NID (integer) of the OBJECT IDENTIFIER representing the given message digest
.Ve
.IP "\(bu" 4
EVP_MD_size
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_MD_size($md);
\& # $md \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: the size of the message digest in bytes (e.g. 20 for SHA1)
.Ve
.IP "\(bu" 4
EVP_MD_CTX_md
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
.Vb 4
\& Net::SSLeay::EVP_MD_CTX_md($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_MD_CTX_create
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Allocates, initializes and returns a digest context.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::EVP_MD_CTX_create();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD_CTX structure
.Ve
.Sp
The complete idea behind \s-1EVP_MD_CTX\s0 looks like this example:
.Sp
.Vb 1
\&  Net::SSLeay::OpenSSL_add_all_digests();
\&
\&  my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
\&  my $ctx = Net::SSLeay::EVP_MD_CTX_create();
\&  Net::SSLeay::EVP_DigestInit($ctx, $md);
\&
\&  while(my $chunk = get_piece_of_data()) {
\&    Net::SSLeay::EVP_DigestUpdate($ctx,$chunk);
\&  }
\&
\&  my $result = Net::SSLeay::EVP_DigestFinal($ctx);
\&  Net::SSLeay::EVP_MD_CTX_destroy($ctx);
\&
\&  print "digest=", unpack(\*(AqH*\*(Aq, $result), "\en"; #print hex value
.Ve
.IP "\(bu" 4
EVP_DigestInit_ex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Sets up digest context \f(CW$ctx\fR to use a digest \f(CW$type\fR from \s-1ENGINE\s0 \f(CW$impl\fR, \f(CW$ctx\fR must be
initialized before calling this function, type will typically be supplied by a function
such as \*(L"EVP_get_digestbyname\*(R". If \f(CW$impl\fR is 0 then the default implementation of digest \f(CW$type\fR is used.
.Sp
.Vb 6
\& my $rv = Net::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl);
\& # $ctx  \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure
\& # $impl \- value corresponding to openssl\*(Aqs ENGINE structure
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_DigestInit
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Behaves in the same way as \*(L"EVP_DigestInit_ex\*(R" except the passed context \f(CW$ctx\fR does not have
to be initialized, and it always uses the default digest implementation.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_DigestInit($ctx, $type);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $type \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_MD_CTX_destroy
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Cleans up digest context \f(CW$ctx\fR and frees up the space allocated to it, it should be
called only on a context created using \*(L"EVP_MD_CTX_create\*(R".
.Sp
.Vb 4
\& Net::SSLeay::EVP_MD_CTX_destroy($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: no return value
.Ve
.IP "\(bu" 4
EVP_DigestUpdate
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
.Vb 5
\& my $rv = Net::SSLeay::EVP_DigestUpdate($ctx, $data);
\& # $ctx  \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& # $data \- data to be hashed
\& #
\& # returns: 1 for success and 0 for failure
.Ve
.IP "\(bu" 4
EVP_DigestFinal_ex
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Retrieves the digest value from \f(CW$ctx\fR. After calling \*(L"EVP_DigestFinal_ex\*(R" no
additional calls to \*(L"EVP_DigestUpdate\*(R" can be made, but
\&\*(L"EVP_DigestInit_ex\*(R" can be called to initialize a new digest operation.
.Sp
.Vb 4
\& my $digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
EVP_DigestFinal
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Similar to \*(L"EVP_DigestFinal_ex\*(R" except the digest context ctx is automatically cleaned up.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_DigestFinal($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs EVP_MD_CTX structure
\& #
\& # returns: hash value (binary)
\&
\& #to get printable (hex) value of digest use:
\& print unpack(\*(AqH*\*(Aq, $digest_value);
.Ve
.IP "\(bu" 4
\&\s-1MD2\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR no supported by default in openssl\-1.0.0
.Sp
Computes \s-1MD2\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD2($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1MD4\s0
.Sp
Computes \s-1MD4\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD4($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1MD5\s0
.Sp
Computes \s-1MD5\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::MD5($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1RIPEMD160\s0
.Sp
Computes \s-1RIPEMD160\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::RIPEMD160($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA1\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Computes \s-1SHA1\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA1($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA256\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
Computes \s-1SHA256\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA256($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
\&\s-1SHA512\s0
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
Computes \s-1SHA512\s0 from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 2
\& my $digest = Net::SSLeay::SHA512($data);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
EVP_Digest
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.7
.Sp
Computes \*(L"any\*(R" digest from given \f(CW$data\fR (all data needs to be loaded into memory)
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_get_digestbyname("sha1"); #or any other algorithm
\& my $digest = Net::SSLeay::EVP_Digest($data, $md);
\& print "digest(hexadecimal)=", unpack(\*(AqH*\*(Aq, $digest);
.Ve
.IP "\(bu" 4
EVP_sha1
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha1();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_sha256
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR requires at least openssl\-0.9.8
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha256();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_sha512
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before; requires at least openssl\-0.9.8
.Sp
.Vb 3
\& my $md = Net::SSLeay::EVP_sha512();
\& #
\& # returns: value corresponding to openssl\*(Aqs EVP_MD structure
.Ve
.IP "\(bu" 4
EVP_add_digest
.Sp
.Vb 4
\& my $rv = Net::SSLeay::EVP_add_digest($digest);
\& # $digest \- value corresponding to openssl\*(Aqs EVP_MD structure
\& #
\& # returns: 1 on success, 0 otherwise
.Ve
.PP
\fILow level \s-1API:\s0 CIPHER_* related functions\fR
.IX Subsection "Low level API: CIPHER_* related functions"
.IP "\(bu" 4
CIPHER_get_name
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.42 and before
.Sp
Returns name of the cipher used.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CIPHER_description($cipher);
\& # $cipher \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& #
\& # returns: (string) cipher name e.g. \*(AqDHE\-RSA\-AES256\-SHA\*(Aq
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.Sp
Example:
.Sp
.Vb 2
\& my $ssl_cipher = Net::SSLeay::get_current_cipher($ssl);
\& my $cipher_name = Net::SSLeay::CIPHER_get_name($ssl_cipher);
.Ve
.IP "\(bu" 4
CIPHER_description
.Sp
Returns a textual description of the cipher used.
.Sp
??? (does this function really work?)
.Sp
.Vb 6
\& my $rv = Net::SSLeay::CIPHER_description($cipher, $buf, $size);
\& # $cipher \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& # $bufer \- (string/buffer) ???
\& # $size \- (integer) ???
\& #
\& # returns: (string) cipher description e.g. \*(AqDHE\-RSA\-AES256\-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1\*(Aq
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.IP "\(bu" 4
CIPHER_get_bits
.Sp
Returns the number of secret bits used for cipher.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::CIPHER_get_bits($c);
\& # $c \- value corresponding to openssl\*(Aqs SSL_CIPHER structure
\& #
\& # returns: (integert) number of secret bits, 0 on error
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html>
.PP
\fILow level \s-1API:\s0 RSA_* related functions\fR
.IX Subsection "Low level API: RSA_* related functions"
.IP "\(bu" 4
RSA_generate_key
.Sp
Generates a key pair and returns it in a newly allocated \s-1RSA\s0 structure.
The pseudo-random number generator must be seeded prior to calling RSA_generate_key.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::RSA_generate_key($bits, $e, $perl_cb, $perl_cb_arg);
\& # $bits \- (integer) modulus size in bits e.g. 512, 1024, 2048
\& # $e \- (integer) public exponent, an odd number, typically 3, 17 or 65537
\& # $perl_cb \- [optional] reference to perl callback function
\& # $perl_cb_arg \- [optional] data that will be passed to callback function when invoked
\& #
\& # returns: value corresponding to openssl\*(Aqs RSA structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RSA_generate_key.html>
.IP "\(bu" 4
RSA_free
.Sp
Frees the \s-1RSA\s0 structure and its components. The key is erased before the memory is returned to the system.
.Sp
.Vb 4
\& Net::SSLeay::RSA_free($r);
\& # $r \- value corresponding to openssl\*(Aqs RSA structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/RSA_new.html>
.PP
\fILow level \s-1API:\s0 BIO_* related functions\fR
.IX Subsection "Low level API: BIO_* related functions"
.IP "\(bu" 4
BIO_eof
.Sp
Returns 1 if the \s-1BIO\s0 has read \s-1EOF,\s0 the precise meaning of '\s-1EOF\s0' varies according to the \s-1BIO\s0 type.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_eof($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 if EOF has been reached 0 otherwise
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_f_ssl
.Sp
Returns the \s-1SSL BIO\s0 method. This is a filter \s-1BIO\s0 which is a wrapper
round the OpenSSL \s-1SSL\s0 routines adding a \s-1BIO \s0'flavour' to \s-1SSL I/O.\s0
.Sp
.Vb 3
\& my $rv = Net::SSLeay::BIO_f_ssl();
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_free
.Sp
Frees up a single \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_free($bio;);
\& # $bio; \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_new.html>
.IP "\(bu" 4
BIO_new
.Sp
Returns a new \s-1BIO\s0 using method \f(CW$type\fR
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new($type);
\& # $type \- value corresponding to openssl\*(Aqs BIO_METHOD structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_new.html>
.IP "\(bu" 4
BIO_new_buffer_ssl_connect
.Sp
Creates a new \s-1BIO\s0 chain consisting of a buffering \s-1BIO,\s0 an \s-1SSL BIO \s0(using ctx) and a connect \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new_buffer_ssl_connect($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_new_file
.Sp
Creates a new file \s-1BIO\s0 with mode \f(CW$mode\fR the meaning of mode is the same
as the stdio function \fIfopen()\fR. The \s-1BIO_CLOSE\s0 flag is set on the returned \s-1BIO.\s0
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_new_file($filename, $mode);
\& # $filename \- (string) filename
\& # $mode \- (string) opening mode (as mode by stdio function fopen)
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_s_file.html>
.IP "\(bu" 4
BIO_new_ssl
.Sp
Allocates an \s-1SSL BIO\s0 using \s-1SSL_CTX\s0 ctx and using client mode if client is non zero.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_new_ssl($ctx, $client);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $client \- (integer) 0 or 1 \- indicates ssl client mode
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_new_ssl_connect
.Sp
Creates a new \s-1BIO\s0 chain consisting of an \s-1SSL BIO \s0(using ctx) followed by a connect \s-1BIO.\s0
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_new_ssl_connect($ctx);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_pending
.Sp
Return the number of pending characters in the BIOs read buffers.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_pending($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: the amount of pending data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_wpending
.Sp
Return the number of pending characters in the BIOs write buffers.
.Sp
.Vb 4
\& my $rv = Net::SSLeay::BIO_wpending($s);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: the amount of pending data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_ctrl.html>
.IP "\(bu" 4
BIO_read
.Sp
Read the underlying descriptor.
.Sp
.Vb 5
\& Net::SSLeay::BIO_read($s, $max);
\& # $s \- value corresponding to openssl\*(Aqs BIO structure
\& # $max \- [optional] max. bytes to read (if not specified, the value 32768 is used)
\& #
\& # returns: data
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_read.html>
.IP "\(bu" 4
BIO_write
.Sp
Attempts to write data from \f(CW$buffer\fR to \s-1BIO\s0 \f(CW$b\fR.
.Sp
.Vb 7
\& my $rv = Net::SSLeay::BIO_write($b, $buffer);
\& # $b \- value corresponding to openssl\*(Aqs BIO structure
\& # $buffer \- data
\& #
\& # returns: amount of data successfully written
\& #          or that no data was successfully read or written if the result is 0 or \-1
\& #          or \-2 when the operation is not implemented in the specific BIO type
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_read.html>
.IP "\(bu" 4
BIO_s_mem
.Sp
Return the memory \s-1BIO\s0 method function.
.Sp
.Vb 3
\& my $rv = Net::SSLeay::BIO_s_mem();
\& #
\& # returns: value corresponding to openssl\*(Aqs BIO_METHOD structure (0 on failure)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_s_mem.html>
.IP "\(bu" 4
BIO_ssl_copy_session_id
.Sp
Copies an \s-1SSL\s0 session id between \s-1BIO\s0 chains from and to. It does this by locating
the \s-1SSL\s0 BIOs in each chain and calling \fISSL_copy_session_id()\fR on the internal \s-1SSL\s0 pointer.
.Sp
.Vb 5
\& my $rv = Net::SSLeay::BIO_ssl_copy_session_id($to, $from);
\& # $to \- value corresponding to openssl\*(Aqs BIO structure
\& # $from \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: 1 on success, 0 on failure
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.IP "\(bu" 4
BIO_ssl_shutdown
.Sp
Closes down an \s-1SSL\s0 connection on \s-1BIO\s0 chain bio. It does this by locating the
\&\s-1SSL BIO\s0 in the chain and calling \fISSL_shutdown()\fR on its internal \s-1SSL\s0 pointer.
.Sp
.Vb 4
\& Net::SSLeay::BIO_ssl_shutdown($ssl_bio);
\& # $ssl_bio \- value corresponding to openssl\*(Aqs BIO structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/BIO_f_ssl.html>
.PP
\fILow level \s-1API:\s0 Server side Server Name Indication (\s-1SNI\s0) support\fR
.IX Subsection "Low level API: Server side Server Name Indication (SNI) support"
.IP "\(bu" 4
set_tlsext_host_name
.Sp
\&\s-1TBA\s0
.IP "\(bu" 4
get_servername
.Sp
\&\s-1TBA\s0
.IP "\(bu" 4
get_servername_type
.Sp
\&\s-1TBA\s0
.IP "\(bu" 4
CTX_set_tlsext_servername_callback
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR requires at least OpenSSL 0.9.8f
.Sp
This function is used in a server to support Server side Server Name Indication (\s-1SNI\s0).
.Sp
.Vb 7
\& Net::SSLeay::CTX_set_tlsext_servername_callback($ctx, $code)
\& # $ctx \- SSL context
\& # $code \- reference to a subroutine that will be called when a new connection is being initiated
\& #
\& # returns: no return value
\&On the client side:
\&use set_tlsext_host_name($ssl, $servername) before initiating the SSL connection.
.Ve
.Sp
On the server side:
Set up an additional \s-1\fISSL_CTX\s0()\fR for each different certificate;
.Sp
Add a servername callback to each \s-1\fISSL_CTX\s0()\fR using \fICTX_set_tlsext_servername_callback()\fR;
.Sp
The callback function is required to retrieve the client-supplied servername
with get_servername(ssl). Figure out the right
\&\s-1SSL_CTX\s0 to go with that host name, then switch the \s-1SSL\s0 object to that \s-1SSL_CTX\s0
with \fIset_SSL_CTX()\fR.
.Sp
Example:
.Sp
.Vb 7
\& # set callback
\& Net::SSLeay::CTX_set_tlsext_servername_callback($ctx, 
\&    sub {
\&      my $ssl = shift;
\&      my $h = Net::SSLeay::get_servername($ssl);
\&      Net::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}\->{ctx}) if exists $hostnames{$h};
\&    } );
.Ve
.Sp
More complete example:
.Sp
.Vb 1
\& # ... initialize Net::SSLeay
\&
\& my %hostnames = (
\&   \*(Aqsni1\*(Aq => { cert=>\*(Aqsni1.pem\*(Aq, key=>\*(Aqsni1.key\*(Aq },
\&   \*(Aqsni2\*(Aq => { cert=>\*(Aqsni2.pem\*(Aq, key=>\*(Aqsni2.key\*(Aq },
\& );
\&
\& # create a new context for each certificate/key pair
\& for my $name (keys %hostnames) {
\&   $hostnames{$name}\->{ctx} = Net::SSLeay::CTX_new or die;
\&   Net::SSLeay::CTX_set_cipher_list($hostnames{$name}\->{ctx}, \*(AqALL\*(Aq);
\&   Net::SSLeay::set_cert_and_key($hostnames{$name}\->{ctx},
\&   $hostnames{$name}\->{cert}, $hostnames{$name}\->{key}) or die;
\& }
\&
\& # create default context
\& my $ctx = Net::SSLeay::CTX_new or die;
\& Net::SSLeay::CTX_set_cipher_list($ctx, \*(AqALL\*(Aq);
\& Net::SSLeay::set_cert_and_key($ctx, \*(Aqcert.pem\*(Aq,\*(Aqkey.pem\*(Aq) or die;
\&
\& # set callback
\& Net::SSLeay::CTX_set_tlsext_servername_callback($ctx, sub {
\&   my $ssl = shift;
\&   my $h = Net::SSLeay::get_servername($ssl);
\&   Net::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}\->{ctx}) if exists $hostnames{$h};
\&   } );
\&
\& # ... later
\&
\& $s = Net::SSLeay::new($ctx);
\& Net::SSLeay::set_fd($s, fileno($accepted_socket));
\& Net::SSLeay::accept($s);
.Ve
.PP
\fILow level \s-1API: NPN \s0(next protocol negotiation) related functions\fR
.IX Subsection "Low level API: NPN (next protocol negotiation) related functions"
.PP
\&\s-1NPN\s0 is being replaced with \s-1ALPN,\s0 a more recent \s-1TLS\s0 extension for application
protocol negotiation that's in process of being adopted by \s-1IETF.\s0 Please look
below for \s-1APLN API\s0 description.
.PP
Simple approach for using \s-1NPN\s0 support looks like this:
.PP
.Vb 3
\& ### client side
\& use Net::SSLeay;
\& use IO::Socket::INET;
\&
\& Net::SSLeay::initialize();
\& my $sock = IO::Socket::INET\->new(PeerAddr=>\*(Aqencrypted.google.com:443\*(Aq) or die;
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::CTX_set_next_proto_select_cb($ctx, [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]);
\& my $ssl = Net::SSLeay::new($ctx) or die;
\& Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
\& Net::SSLeay::connect($ssl);
\&
\& warn "client:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl), "\en";
\& warn "client:last_status=", Net::SSLeay::P_next_proto_last_status($ssl), "\en";
\& 
\& ### server side 
\& use Net::SSLeay;
\& use IO::Socket::INET;
\& 
\& Net::SSLeay::initialize();
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::set_cert_and_key($ctx, "t/data/cert.pem", "t/data/key.pem");
\& Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, [\*(Aqspdy/2\*(Aq,\*(Aqhttp1.1\*(Aq]);
\& my $sock = IO::Socket::INET\->new(LocalAddr=>\*(Aqlocalhost\*(Aq, LocalPort=>5443, Proto=>\*(Aqtcp\*(Aq, Listen=>20) or die;
\& 
\& while (1) {
\&   my $ssl = Net::SSLeay::new($ctx);
\&   warn("server:waiting for incoming connection...\en");
\&   my $fd = $sock\->accept();
\&   Net::SSLeay::set_fd($ssl, $fd\->fileno);
\&   Net::SSLeay::accept($ssl);  
\&   warn "server:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl),"\en";
\&   my $got = Net::SSLeay::read($ssl);
\&   Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
\&   Net::SSLeay::free($ssl);
\&   $fd\->close();
\& }
\& # check with: openssl s_client \-connect localhost:5443 \-nextprotoneg http/1.1,spdy/2
.Ve
.PP
Please note that the selection (negotiation) is performed by client side, the server side simply advertise the list of supported protocols.
.PP
Advanced approach allows you to implement your own negotiation algorithm.
.PP
.Vb 3
\& #see below documentation for:
\& Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
\& Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
.Ve
.PP
Detection of \s-1NPN\s0 support (works even in older Net::SSLeay versions):
.PP
.Vb 1
\& use Net::SSLeay;
\& 
\& if (exists &Net::SSLeay::P_next_proto_negotiated) {
\&   # do NPN stuff
\& }
.Ve
.IP "\(bu" 4
CTX_set_next_proto_select_cb
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_next_proto_select_cb on \fBclient side\fR of \s-1SSL\s0 connection.
.Sp
Simple usage \- in this case a \*(L"common\*(R" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.
.Sp
.Vb 5
\& $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $arrayref);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arrayref \- list of accepted protocols \- e.g. [\*(Aqhttp1.0\*(Aq, \*(Aqhttp1.1\*(Aq]
\& #
\& # returns: 0 on success, 1 on failure
.Ve
.Sp
Advanced usage (you probably do not need this):
.Sp
.Vb 6
\& $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $perl_callback_function \- reference to perl function
\& # $callback_data \- [optional] data to passed to callback function when invoked
\& #
\& # returns: 0 on success, 1 on failure
\& 
\& # where callback function looks like
\& sub npn_advertised_cb_invoke {
\&   my ($ssl, $arrayref_proto_list_advertised_by_server, $callback_data) = @_;
\&   my $status;
\&   # ...
\&   $status = 1;   #status can be:
\&                  # 0 \- OPENSSL_NPN_UNSUPPORTED
\&                  # 1 \- OPENSSL_NPN_NEGOTIATED
\&                  # 2 \- OPENSSL_NPN_NO_OVERLAP
\&   return $status, [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]; # the callback has to return 2 values
\& }
.Ve
.Sp
To undefine/clear this callback use:
.Sp
.Vb 1
\& Net::SSleay::CTX_set_next_proto_select_cb($ctx, undef);
.Ve
.IP "\(bu" 4
CTX_set_next_protos_advertised_cb
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_next_proto_select_cb on \fBserver side\fR of \s-1SSL\s0 connection.
.Sp
Simple usage:
.Sp
.Vb 5
\& $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $arrayref);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arrayref \- list of advertised protocols \- e.g. [\*(Aqhttp1.0\*(Aq, \*(Aqhttp1.1\*(Aq]
\& #
\& # returns: 0 on success, 1 on failure
.Ve
.Sp
Advanced usage (you probably do not need this):
.Sp
.Vb 6
\& $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $perl_callback_function \- reference to perl function
\& # $callback_data \- [optional] data to passed to callback function when invoked
\& #
\& # returns: 0 on success, 1 on failure
\& 
\& # where callback function looks like
\& sub npn_advertised_cb_invoke {
\&   my ($ssl, $callback_data) = @_;
\&   # ...
\&   return [\*(Aqhttp1.1\*(Aq,\*(Aqspdy/2\*(Aq]; # the callback has to return arrayref
\& }
.Ve
.Sp
To undefine/clear this callback use:
.Sp
.Vb 1
\& Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, undef);
.Ve
.IP "\(bu" 4
P_next_proto_negotiated
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
Returns the name of negotiated protocol for given \s-1SSL\s0 connection \f(CW$ssl\fR.
.Sp
.Vb 4
\& $rv = Net::SSLeay::P_next_proto_negotiated($ssl)
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)
.Ve
.IP "\(bu" 4
P_next_proto_last_status
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.45 and before; requires at least openssl\-1.0.1
.Sp
Returns the result of the last negotiation for given \s-1SSL\s0 connection \f(CW$ssl\fR.
.Sp
.Vb 7
\& $rv = Net::SSLeay::P_next_proto_last_status($ssl)
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (integer) negotiation status
\& #          0 \- OPENSSL_NPN_UNSUPPORTED
\& #          1 \- OPENSSL_NPN_NEGOTIATED
\& #          2 \- OPENSSL_NPN_NO_OVERLAP
.Ve
.PP
\fILow level \s-1API: ALPN \s0(application layer protocol negotiation) related functions\fR
.IX Subsection "Low level API: ALPN (application layer protocol negotiation) related functions"
.PP
Application protocol can be negotiated via two different mechanisms employing
two different \s-1TLS\s0 extensions: \s-1NPN \s0(obsolete) and \s-1ALPN \s0(recommended).
.PP
The \s-1API\s0 is rather similar, with slight differences reflecting protocol
specifics. In particular, with \s-1ALPN\s0 the protocol negotiation takes place on
server, while with \s-1NPN\s0 the client implements the protocol negotiation logic.
.PP
With \s-1ALPN,\s0 the most basic implementation looks like this:
.PP
.Vb 3
\& ### client side
\& use Net::SSLeay;
\& use IO::Socket::INET;
\&
\& Net::SSLeay::initialize();
\& my $sock = IO::Socket::INET\->new(PeerAddr=>\*(Aqencrypted.google.com:443\*(Aq) or die;
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::CTX_set_alpn_protos($ctx, [\*(Aqhttp/1.1\*(Aq, \*(Aqhttp/2.0\*(Aq, \*(Aqspdy/3]);
\& my $ssl = Net::SSLeay::new($ctx) or die;
\& Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
\& Net::SSLeay::connect($ssl);
\&
\& warn "client:selected=",Net::SSLeay::P_alpn_selected($ssl), "\en";
\&
\& ### server side
\& use Net::SSLeay;
\& use IO::Socket::INET;
\&
\& Net::SSLeay::initialize();
\& my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
\& Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
\& Net::SSLeay::set_cert_and_key($ctx, "t/data/cert.pem", "t/data/key.pem");
\& Net::SSLeay::CTX_set_alpn_select_cb($ctx, [\*(Aqhttp/1.1\*(Aq, \*(Aqhttp/2.0\*(Aq, \*(Aqspdy/3]);
\& my $sock = IO::Socket::INET\->new(LocalAddr=>\*(Aqlocalhost\*(Aq, LocalPort=>5443, Proto=>\*(Aqtcp\*(Aq, Listen=>20) or die;
\&
\& while (1) {
\&   my $ssl = Net::SSLeay::new($ctx);
\&   warn("server:waiting for incoming connection...\en");
\&   my $fd = $sock\->accept();
\&   Net::SSLeay::set_fd($ssl, $fd\->fileno);
\&   Net::SSLeay::accept($ssl);
\&   warn "server:selected=",Net::SSLeay::P_alpn_selected($ssl),"\en";
\&   my $got = Net::SSLeay::read($ssl);
\&   Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
\&   Net::SSLeay::free($ssl);
\&   $fd\->close();
\& }
\& # check with: openssl s_client \-connect localhost:5443 \-alpn spdy/3,http/1.1
.Ve
.PP
Advanced approach allows you to implement your own negotiation algorithm.
.PP
.Vb 2
\& #see below documentation for:
\& Net::SSleay::CTX_set_alpn_select_cb($ctx, $perl_callback_function, $callback_data);
.Ve
.PP
Detection of \s-1ALPN\s0 support (works even in older Net::SSLeay versions):
.PP
.Vb 1
\& use Net::SSLeay;
\&
\& if (exists &Net::SSLeay::P_alpn_selected) {
\&   # do ALPN stuff
\& }
.Ve
.IP "\(bu" 4
CTX_set_alpn_select_cb
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.55 and before; requires at least openssl\-1.0.2
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_alpn_select_cb on \fBserver side\fR of \s-1TLS\s0 connection.
.Sp
Simple usage \- in this case a \*(L"common\*(R" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.
.Sp
.Vb 5
\& $rv = Net::SSleay::CTX_set_alpn_select_cb($ctx, $arrayref);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $arrayref \- list of accepted protocols \- e.g. [\*(Aqhttp/2.0\*(Aq, \*(Aqhttp/1.1\*(Aq, \*(Aqspdy/3\*(Aq]
\& #
\& # returns: 0 on success, 1 on failure
.Ve
.Sp
Advanced usage (you probably do not need this):
.Sp
.Vb 6
\& $rv = Net::SSleay::CTX_set_alpn_select_cb($ctx, $perl_callback_function, $callback_data);
\& # $ctx \- value corresponding to openssl\*(Aqs SSL_CTX structure
\& # $perl_callback_function \- reference to perl function
\& # $callback_data \- [optional] data to passed to callback function when invoked
\& #
\& # returns: 0 on success, 1 on failure
\&
\& # where callback function looks like
\& sub alpn_select_cb_invoke {
\&   my ($ssl, $arrayref_proto_list_advertised_by_client, $callback_data) = @_;
\&   # ...
\&   if ($negotiated) {
\&     return \*(Aqhttp/2.0\*(Aq;
\&   } else {
\&     return undef;
\&   }
\& }
.Ve
.Sp
To undefine/clear this callback use:
.Sp
.Vb 1
\& Net::SSleay::CTX_set_alpn_select_cb($ctx, undef);
.Ve
.IP "\(bu" 4
set_alpn_protos
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.55 and before; requires at least openssl\-1.0.2
.Sp
\&\fB\s-1NOTE:\s0\fR You need set_alpn_protos on \fBclient side\fR of \s-1TLS\s0 connection.
.Sp
This adds list of supported application layer protocols to ClientHello message sent by a client.
It advertises the enumeration of supported protocols:
.Sp
.Vb 2
\& Net::SSLeay::set_alpn_protos($ssl, [\*(Aqhttp/1.1\*(Aq, \*(Aqhttp/2.0\*(Aq, \*(Aqspdy/3]);
\& # returns 0 on success
.Ve
.IP "\(bu" 4
CTX_set_alpn_protos
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.55 and before; requires at least openssl\-1.0.2
.Sp
\&\fB\s-1NOTE:\s0\fR You need CTX_set_alpn_protos on \fBclient side\fR of \s-1TLS\s0 connection.
.Sp
This adds list of supported application layer protocols to ClientHello message sent by a client.
It advertises the enumeration of supported protocols:
.Sp
.Vb 2
\& Net::SSLeay::CTX_set_alpn_protos($ctx, [\*(Aqhttp/1.1\*(Aq, \*(Aqhttp/2.0\*(Aq, \*(Aqspdy/3]);
\& # returns 0 on success
.Ve
.IP "\(bu" 4
P_alpn_selected
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR not available in Net\-SSLeay\-1.55 and before; requires at least openssl\-1.0.2
.Sp
Returns the name of negotiated protocol for given \s-1TLS\s0 connection \f(CW$ssl\fR.
.Sp
.Vb 4
\& $rv = Net::SSLeay::P_alpn_selected($ssl)
\& # $ssl \- value corresponding to openssl\*(Aqs SSL structure
\& #
\& # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)
.Ve
.PP
\fILow level \s-1API: DANE\s0 Support\fR
.IX Subsection "Low level API: DANE Support"
.PP
OpenSSL version 1.0.2 adds preliminary support \s-1RFC6698\s0 Domain Authentication of
Named Entities (\s-1DANE\s0) Transport Layer Association within OpenSSL
.IP "\(bu" 4
SSL_get_tlsa_record_byname
.Sp
\&\fB\s-1COMPATIBILITY:\s0\fR \s-1DELETED\s0 from net-ssleay, since it is not supported by OpenSSL
.Sp
In order to facilitate \s-1DANE\s0 there is additional interface,
SSL_get_tlsa_record_byname, accepting hostname, port and socket type
that returns packed \s-1TLSA\s0 record. In order to make it even easier there
is additional SSL_ctrl function that calls SSL_get_tlsa_record_byname
for you. Latter is recommended for programmers that wish to maintain
broader binary compatibility, e.g. make application work with both 1.0.2
and prior version (in which case call to SSL_ctrl with new code
returning error would have to be ignored when running with prior version).
.Sp
Net::SSLeay::get_tlsa_record_byname($name, \f(CW$port\fR, \f(CW$type\fR);
.PP
\fILow level \s-1API:\s0 Other functions\fR
.IX Subsection "Low level API: Other functions"
.IP "\(bu" 4
COMP_add_compression_method
.Sp
Adds the compression method cm with the identifier id to the list of available compression methods.
This list is globally maintained for all \s-1SSL\s0 operations within this application.
It cannot be set for specific \s-1SSL_CTX\s0 or \s-1SSL\s0 objects.
.Sp
.Vb 9
\& my $rv = Net::SSLeay::COMP_add_compression_method($id, $cm);
\& # $id \- (integer) compression method id
\& #       0 to 63:    methods defined by the IETF
\& #       64 to 192:  external party methods assigned by IANA
\& #       193 to 255: reserved for private use
\& #
\& # $cm \- value corresponding to openssl\*(Aqs COMP_METHOD structure
\& #
\& # returns: 0 on success, 1 on failure (check the error queue to find out the reason)
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html>
.IP "\(bu" 4
DH_free
.Sp
Frees the \s-1DH\s0 structure and its components. The values are erased before the memory is returned to the system.
.Sp
.Vb 4
\& Net::SSLeay::DH_free($dh);
\& # $dh \- value corresponding to openssl\*(Aqs DH structure
\& #
\& # returns: no return value
.Ve
.Sp
Check openssl doc <http://www.openssl.org/docs/crypto/DH_new.html>
.IP "\(bu" 4
FIPS_mode_set
.Sp
Enable or disable \s-1FIPS\s0 mode in a \s-1FIPS\s0 capable OpenSSL.
.Sp
.Vb 2
\& Net::SSLeay:: FIPS_mode_set($enable);
\& # $enable \- (integer) 1 to enable, 0 to disable
.Ve
.PP
\fILow level \s-1API: EC\s0 related functions\fR
.IX Subsection "Low level API: EC related functions"
.IP "\(bu" 4
CTX_set_tmp_ecdh
.Sp
\&\s-1TBA\s0
.IP "\(bu" 4
EC_KEY_free
.Sp
\&\s-1TBA\s0
.IP "\(bu" 4
EC_KEY_new_by_curve_name
.Sp
\&\s-1TBA\s0
.SS "Constants"
.IX Subsection "Constants"
There are many openssl constants available in Net::SSLeay. You can use them like this:
.PP
.Vb 4
\& use Net::SSLeay;
\& print &Net::SSLeay::NID_commonName;
\& #or
\& print Net::SSLeay::NID_commonName();
.Ve
.PP
Or you can import them and use:
.PP
.Vb 6
\& use Net::SSLeay qw/NID_commonName/;
\& print &NID_commonName;
\& #or
\& print NID_commonName();
\& #or
\& print NID_commonName;
.Ve
.PP
The constants names are derived from openssl constants, however constants starting with \f(CW\*(C`SSL_\*(C'\fR prefix
have name with \f(CW\*(C`SSL_\*(C'\fR part stripped \- e.g. openssl's constant \f(CW\*(C`SSL_OP_ALL\*(C'\fR is available as \f(CW\*(C`Net::SSleay::OP_ALL\*(C'\fR
.PP
The list of all available constant names:
.PP
.Vb 10
\& ASN1_STRFLGS_ESC_CTRL           NID_ext_req                            OP_CISCO_ANYCONNECT
\& ASN1_STRFLGS_ESC_MSB            NID_friendlyName                       OP_COOKIE_EXCHANGE
\& ASN1_STRFLGS_ESC_QUOTE          NID_givenName                          OP_CRYPTOPRO_TLSEXT_BUG
\& ASN1_STRFLGS_RFC2253            NID_hmacWithSHA1                       OP_DONT_INSERT_EMPTY_FRAGMENTS
\& CB_ACCEPT_EXIT                  NID_id_ad                              OP_EPHEMERAL_RSA
\& CB_ACCEPT_LOOP                  NID_id_ce                              OP_LEGACY_SERVER_CONNECT
\& CB_CONNECT_EXIT                 NID_id_kp                              OP_MICROSOFT_BIG_SSLV3_BUFFER
\& CB_CONNECT_LOOP                 NID_id_pbkdf2                          OP_MICROSOFT_SESS_ID_BUG
\& ERROR_NONE                      NID_id_pe                              OP_MSIE_SSLV2_RSA_PADDING
\& ERROR_SSL                       NID_id_pkix                            OP_NETSCAPE_CA_DN_BUG
\& ERROR_SYSCALL                   NID_id_qt_cps                          OP_NETSCAPE_CHALLENGE_BUG
\& ERROR_WANT_ACCEPT               NID_id_qt_unotice                      OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
\& ERROR_WANT_CONNECT              NID_idea_cbc                           OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
\& ERROR_WANT_READ                 NID_idea_cfb64                         OP_NON_EXPORT_FIRST
\& ERROR_WANT_WRITE                NID_idea_ecb                           OP_NO_COMPRESSION
\& ERROR_WANT_X509_LOOKUP          NID_idea_ofb64                         OP_NO_QUERY_MTU
\& ERROR_ZERO_RETURN               NID_info_access                        OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
\& EVP_PKS_DSA                     NID_initials                           OP_NO_SSLv2
\& EVP_PKS_EC                      NID_invalidity_date                    OP_NO_SSLv3
\& EVP_PKS_RSA                     NID_issuer_alt_name                    OP_NO_TICKET
\& EVP_PKT_ENC                     NID_keyBag                             OP_NO_TLSv1
\& EVP_PKT_EXCH                    NID_key_usage                          OP_NO_TLSv1_1
\& EVP_PKT_EXP                     NID_localKeyID                         OP_NO_TLSv1_2
\& EVP_PKT_SIGN                    NID_localityName                       OP_PKCS1_CHECK_1
\& EVP_PK_DH                       NID_md2                                OP_PKCS1_CHECK_2
\& EVP_PK_DSA                      NID_md2WithRSAEncryption               OP_SINGLE_DH_USE
\& EVP_PK_EC                       NID_md5                                OP_SINGLE_ECDH_USE
\& EVP_PK_RSA                      NID_md5WithRSA                         OP_SSLEAY_080_CLIENT_DH_BUG
\& FILETYPE_ASN1                   NID_md5WithRSAEncryption               OP_SSLREF2_REUSE_CERT_TYPE_BUG
\& FILETYPE_PEM                    NID_md5_sha1                           OP_TLS_BLOCK_PADDING_BUG
\& F_CLIENT_CERTIFICATE            NID_mdc2                               OP_TLS_D5_BUG
\& F_CLIENT_HELLO                  NID_mdc2WithRSA                        OP_TLS_ROLLBACK_BUG
\& F_CLIENT_MASTER_KEY             NID_ms_code_com                        READING
\& F_D2I_SSL_SESSION               NID_ms_code_ind                        RECEIVED_SHUTDOWN
\& F_GET_CLIENT_FINISHED           NID_ms_ctl_sign                        RSA_3
\& F_GET_CLIENT_HELLO              NID_ms_efs                             RSA_F4
\& F_GET_CLIENT_MASTER_KEY         NID_ms_ext_req                         R_BAD_AUTHENTICATION_TYPE
\& F_GET_SERVER_FINISHED           NID_ms_sgc                             R_BAD_CHECKSUM
\& F_GET_SERVER_HELLO              NID_name                               R_BAD_MAC_DECODE
\& F_GET_SERVER_VERIFY             NID_netscape                           R_BAD_RESPONSE_ARGUMENT
\& F_I2D_SSL_SESSION               NID_netscape_base_url                  R_BAD_SSL_FILETYPE
\& F_READ_N                        NID_netscape_ca_policy_url             R_BAD_SSL_SESSION_ID_LENGTH
\& F_REQUEST_CERTIFICATE           NID_netscape_ca_revocation_url         R_BAD_STATE
\& F_SERVER_HELLO                  NID_netscape_cert_extension            R_BAD_WRITE_RETRY
\& F_SSL_CERT_NEW                  NID_netscape_cert_sequence             R_CHALLENGE_IS_DIFFERENT
\& F_SSL_GET_NEW_SESSION           NID_netscape_cert_type                 R_CIPHER_TABLE_SRC_ERROR
\& F_SSL_NEW                       NID_netscape_comment                   R_INVALID_CHALLENGE_LENGTH
\& F_SSL_READ                      NID_netscape_data_type                 R_NO_CERTIFICATE_SET
\& F_SSL_RSA_PRIVATE_DECRYPT       NID_netscape_renewal_url               R_NO_CERTIFICATE_SPECIFIED
\& F_SSL_RSA_PUBLIC_ENCRYPT        NID_netscape_revocation_url            R_NO_CIPHER_LIST
\& F_SSL_SESSION_NEW               NID_netscape_ssl_server_name           R_NO_CIPHER_MATCH
\& F_SSL_SESSION_PRINT_FP          NID_ns_sgc                             R_NO_PRIVATEKEY
\& F_SSL_SET_FD                    NID_organizationName                   R_NO_PUBLICKEY
\& F_SSL_SET_RFD                   NID_organizationalUnitName             R_NULL_SSL_CTX
\& F_SSL_SET_WFD                   NID_pbeWithMD2AndDES_CBC               R_PEER_DID_NOT_RETURN_A_CERTIFICATE
\& F_SSL_USE_CERTIFICATE           NID_pbeWithMD2AndRC2_CBC               R_PEER_ERROR
\& F_SSL_USE_CERTIFICATE_ASN1      NID_pbeWithMD5AndCast5_CBC             R_PEER_ERROR_CERTIFICATE
\& F_SSL_USE_CERTIFICATE_FILE      NID_pbeWithMD5AndDES_CBC               R_PEER_ERROR_NO_CIPHER
\& F_SSL_USE_PRIVATEKEY            NID_pbeWithMD5AndRC2_CBC               R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
\& F_SSL_USE_PRIVATEKEY_ASN1       NID_pbeWithSHA1AndDES_CBC              R_PUBLIC_KEY_ENCRYPT_ERROR
\& F_SSL_USE_PRIVATEKEY_FILE       NID_pbeWithSHA1AndRC2_CBC              R_PUBLIC_KEY_IS_NOT_RSA
\& F_SSL_USE_RSAPRIVATEKEY         NID_pbe_WithSHA1And128BitRC2_CBC       R_READ_WRONG_PACKET_TYPE
\& F_SSL_USE_RSAPRIVATEKEY_ASN1    NID_pbe_WithSHA1And128BitRC4           R_SHORT_READ
\& F_SSL_USE_RSAPRIVATEKEY_FILE    NID_pbe_WithSHA1And2_Key_TripleDES_CBC R_SSL_SESSION_ID_IS_DIFFERENT
\& F_WRITE_PENDING                 NID_pbe_WithSHA1And3_Key_TripleDES_CBC R_UNABLE_TO_EXTRACT_PUBLIC_KEY
\& GEN_DIRNAME                     NID_pbe_WithSHA1And40BitRC2_CBC        R_UNKNOWN_REMOTE_ERROR_TYPE
\& GEN_DNS                         NID_pbe_WithSHA1And40BitRC4            R_UNKNOWN_STATE
\& GEN_EDIPARTY                    NID_pbes2                              R_X509_LIB
\& GEN_EMAIL                       NID_pbmac1                             SENT_SHUTDOWN
\& GEN_IPADD                       NID_pkcs                               SESSION_ASN1_VERSION
\& GEN_OTHERNAME                   NID_pkcs3                              ST_ACCEPT
\& GEN_RID                         NID_pkcs7                              ST_BEFORE
\& GEN_URI                         NID_pkcs7_data                         ST_CONNECT
\& GEN_X400                        NID_pkcs7_digest                       ST_INIT
\& MBSTRING_ASC                    NID_pkcs7_encrypted                    ST_OK
\& MBSTRING_BMP                    NID_pkcs7_enveloped                    ST_READ_BODY
\& MBSTRING_FLAG                   NID_pkcs7_signed                       ST_READ_HEADER
\& MBSTRING_UNIV                   NID_pkcs7_signedAndEnveloped           VERIFY_CLIENT_ONCE
\& MBSTRING_UTF8                   NID_pkcs8ShroudedKeyBag                VERIFY_FAIL_IF_NO_PEER_CERT
\& MIN_RSA_MODULUS_LENGTH_IN_BYTES NID_pkcs9                              VERIFY_NONE
\& MODE_ACCEPT_MOVING_WRITE_BUFFER NID_pkcs9_challengePassword            VERIFY_PEER
\& MODE_AUTO_RETRY                 NID_pkcs9_contentType                  WRITING
\& MODE_ENABLE_PARTIAL_WRITE       NID_pkcs9_countersignature             X509_LOOKUP
\& MODE_RELEASE_BUFFERS            NID_pkcs9_emailAddress                 X509_PURPOSE_ANY
\& NID_OCSP_sign                   NID_pkcs9_extCertAttributes            X509_PURPOSE_CRL_SIGN
\& NID_SMIMECapabilities           NID_pkcs9_messageDigest                X509_PURPOSE_NS_SSL_SERVER
\& NID_X500                        NID_pkcs9_signingTime                  X509_PURPOSE_OCSP_HELPER
\& NID_X509                        NID_pkcs9_unstructuredAddress          X509_PURPOSE_SMIME_ENCRYPT
\& NID_ad_OCSP                     NID_pkcs9_unstructuredName             X509_PURPOSE_SMIME_SIGN
\& NID_ad_ca_issuers               NID_private_key_usage_period           X509_PURPOSE_SSL_CLIENT
\& NID_algorithm                   NID_rc2_40_cbc                         X509_PURPOSE_SSL_SERVER
\& NID_authority_key_identifier    NID_rc2_64_cbc                         X509_PURPOSE_TIMESTAMP_SIGN
\& NID_basic_constraints           NID_rc2_cbc                            X509_TRUST_COMPAT
\& NID_bf_cbc                      NID_rc2_cfb64                          X509_TRUST_EMAIL
\& NID_bf_cfb64                    NID_rc2_ecb                            X509_TRUST_OBJECT_SIGN
\& NID_bf_ecb                      NID_rc2_ofb64                          X509_TRUST_OCSP_REQUEST
\& NID_bf_ofb64                    NID_rc4                                X509_TRUST_OCSP_SIGN
\& NID_cast5_cbc                   NID_rc4_40                             X509_TRUST_SSL_CLIENT
\& NID_cast5_cfb64                 NID_rc5_cbc                            X509_TRUST_SSL_SERVER
\& NID_cast5_ecb                   NID_rc5_cfb64                          X509_TRUST_TSA
\& NID_cast5_ofb64                 NID_rc5_ecb                            X509_V_FLAG_ALLOW_PROXY_CERTS
\& NID_certBag                     NID_rc5_ofb64                          X509_V_FLAG_CB_ISSUER_CHECK
\& NID_certificate_policies        NID_ripemd160                          X509_V_FLAG_CHECK_SS_SIGNATURE
\& NID_client_auth                 NID_ripemd160WithRSA                   X509_V_FLAG_CRL_CHECK
\& NID_code_sign                   NID_rle_compression                    X509_V_FLAG_CRL_CHECK_ALL
\& NID_commonName                  NID_rsa                                X509_V_FLAG_EXPLICIT_POLICY
\& NID_countryName                 NID_rsaEncryption                      X509_V_FLAG_EXTENDED_CRL_SUPPORT
\& NID_crlBag                      NID_rsadsi                             X509_V_FLAG_IGNORE_CRITICAL
\& NID_crl_distribution_points     NID_safeContentsBag                    X509_V_FLAG_INHIBIT_ANY
\& NID_crl_number                  NID_sdsiCertificate                    X509_V_FLAG_INHIBIT_MAP
\& NID_crl_reason                  NID_secretBag                          X509_V_FLAG_NOTIFY_POLICY
\& NID_delta_crl                   NID_serialNumber                       X509_V_FLAG_POLICY_CHECK
\& NID_des_cbc                     NID_server_auth                        X509_V_FLAG_POLICY_MASK
\& NID_des_cfb64                   NID_sha                                X509_V_FLAG_USE_CHECK_TIME
\& NID_des_ecb                     NID_sha1                               X509_V_FLAG_USE_DELTAS
\& NID_des_ede                     NID_sha1WithRSA                        X509_V_FLAG_X509_STRICT
\& NID_des_ede3                    NID_sha1WithRSAEncryption              X509_V_OK
\& NID_des_ede3_cbc                NID_shaWithRSAEncryption               XN_FLAG_COMPAT
\& NID_des_ede3_cfb64              NID_stateOrProvinceName                XN_FLAG_DN_REV
\& NID_des_ede3_ofb64              NID_subject_alt_name                   XN_FLAG_DUMP_UNKNOWN_FIELDS
\& NID_des_ede_cbc                 NID_subject_key_identifier             XN_FLAG_FN_ALIGN
\& NID_des_ede_cfb64               NID_surname                            XN_FLAG_FN_LN
\& NID_des_ede_ofb64               NID_sxnet                              XN_FLAG_FN_MASK
\& NID_des_ofb64                   NID_time_stamp                         XN_FLAG_FN_NONE
\& NID_description                 NID_title                              XN_FLAG_FN_OID
\& NID_desx_cbc                    NID_undef                              XN_FLAG_FN_SN
\& NID_dhKeyAgreement              NID_uniqueIdentifier                   XN_FLAG_MULTILINE
\& NID_dnQualifier                 NID_x509Certificate                    XN_FLAG_ONELINE
\& NID_dsa                         NID_x509Crl                            XN_FLAG_RFC2253
\& NID_dsaWithSHA                  NID_zlib_compression                   XN_FLAG_SEP_COMMA_PLUS
\& NID_dsaWithSHA1                 NOTHING                                XN_FLAG_SEP_CPLUS_SPC
\& NID_dsaWithSHA1_2               OPENSSL_VERSION_NUMBER                 XN_FLAG_SEP_MASK
\& NID_dsa_2                       OP_ALL                                 XN_FLAG_SEP_MULTILINE
\& NID_email_protect               OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION   XN_FLAG_SEP_SPLUS_SPC
\& NID_ext_key_usage               OP_CIPHER_SERVER_PREFERENCE            XN_FLAG_SPC_EQ
.Ve
.SS "\s-1INTERNAL ONLY\s0 functions (do not use these)"
.IX Subsection "INTERNAL ONLY functions (do not use these)"
The following functions are not intended for use from outside of Net::SSLeay module.
They might be removed, renamed or changed without prior notice in future version.
.PP
Simply \fB\s-1DO NOT USE THEM\s0\fR!
.IP "\(bu" 4
hello
.IP "\(bu" 4
blength
.IP "\(bu" 4
constant
.SH "EXAMPLES"
.IX Header "EXAMPLES"
One very good example to look at is the implementation of \f(CW\*(C`sslcat()\*(C'\fR in the
\&\f(CW\*(C`SSLeay.pm\*(C'\fR file.
.PP
The following is a simple SSLeay client (with too little error checking :\-(
.PP
.Vb 6
\&    #!/usr/bin/perl
\&    use Socket;
\&    use Net::SSLeay qw(die_now die_if_ssl_error) ;
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    ($dest_serv, $port, $msg) = @ARGV;      # Read command line
\&    $port = getservbyname ($port, \*(Aqtcp\*(Aq) unless $port =~ /^\ed+$/;
\&    $dest_ip = gethostbyname ($dest_serv);
\&    $dest_serv_params  = sockaddr_in($port, $dest_ip);
\&
\&    socket  (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
\&    connect (S, $dest_serv_params)          or die "connect: $!";
\&    select  (S); $| = 1; select (STDOUT);   # Eliminate STDIO buffering
\&
\&    # The network connection is now open, lets fire up SSL
\&
\&    $ctx = Net::SSLeay::CTX_new() or die_now("Failed to create SSL_CTX $!");
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
\&    $ssl = Net::SSLeay::new($ctx) or die_now("Failed to create SSL $!");
\&    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno
\&    $res = Net::SSLeay::connect($ssl) and die_if_ssl_error("ssl connect");
\&    print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&    # Exchange data
\&
\&    $res = Net::SSLeay::write($ssl, $msg);  # Perl knows how long $msg is
\&    die_if_ssl_error("ssl write");
\&    CORE::shutdown S, 1;  # Half close \-\-> No more output, sends EOF to server
\&    $got = Net::SSLeay::read($ssl);         # Perl returns undef on failure
\&    die_if_ssl_error("ssl read");
\&    print $got;
\&
\&    Net::SSLeay::free ($ssl);               # Tear down connection
\&    Net::SSLeay::CTX_free ($ctx);
\&    close S;
.Ve
.PP
The following is a simple SSLeay echo server (non forking):
.PP
.Vb 6
\&    #!/usr/bin/perl \-w
\&    use Socket;
\&    use Net::SSLeay qw(die_now die_if_ssl_error);
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    $our_ip = "\e0\e0\e0\e0"; # Bind to all interfaces
\&    $port = 1235;
\&    $sockaddr_template = \*(AqS n a4 x8\*(Aq;
\&    $our_serv_params = pack ($sockaddr_template, &AF_INET, $port, $our_ip);
\&
\&    socket (S, &AF_INET, &SOCK_STREAM, 0)  or die "socket: $!";
\&    bind (S, $our_serv_params)             or die "bind:   $!";
\&    listen (S, 5)                          or die "listen: $!";
\&    $ctx = Net::SSLeay::CTX_new ()         or die_now("CTX_new ($ctx): $!");
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
\&
\&    # Following will ask password unless private key is not encrypted
\&    Net::SSLeay::CTX_use_RSAPrivateKey_file ($ctx, \*(Aqplain\-rsa.pem\*(Aq,
\&                                             &Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("private key");
\&    Net::SSLeay::CTX_use_certificate_file ($ctx, \*(Aqplain\-cert.pem\*(Aq,
\&                                           &Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("certificate");
\&
\&    while (1) {
\&        print "Accepting connections...\en";
\&        ($addr = accept (NS, S))           or die "accept: $!";
\&        select (NS); $| = 1; select (STDOUT);  # Piping hot!
\&
\&        ($af,$client_port,$client_ip) = unpack($sockaddr_template,$addr);
\&        @inetaddr = unpack(\*(AqC4\*(Aq,$client_ip);
\&        print "$af connection from " .
\&        join (\*(Aq.\*(Aq, @inetaddr) . ":$client_port\en";
\&
\&        # We now have a network connection, lets fire up SSLeay...
\&
\&        $ssl = Net::SSLeay::new($ctx)      or die_now("SSL_new ($ssl): $!");
\&        Net::SSLeay::set_fd($ssl, fileno(NS));
\&
\&        $err = Net::SSLeay::accept($ssl) and die_if_ssl_error(\*(Aqssl accept\*(Aq);
\&        print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&        # Connected. Exchange some data.
\&
\&        $got = Net::SSLeay::read($ssl);     # Returns undef on fail
\&        die_if_ssl_error("ssl read");
\&        print "Got \`$got\*(Aq (" . length ($got) . " chars)\en";
\&
\&        Net::SSLeay::write ($ssl, uc ($got)) or die "write: $!";
\&        die_if_ssl_error("ssl write");
\&
\&        Net::SSLeay::free ($ssl);           # Tear down connection
\&        close NS;
\&    }
.Ve
.PP
Yet another echo server. This one runs from \f(CW\*(C`/etc/inetd.conf\*(C'\fR so it avoids
all the socket code overhead. Only caveat is opening an rsa key file \-
it had better be without any encryption or else it will not know where
to ask for the password. Note how \f(CW\*(C`STDIN\*(C'\fR and \f(CW\*(C`STDOUT\*(C'\fR are wired to \s-1SSL.\s0
.PP
.Vb 5
\&    #!/usr/bin/perl
\&    # /etc/inetd.conf
\&    #    ssltst stream tcp nowait root /path/to/server.pl server.pl
\&    # /etc/services
\&    #    ssltst         1234/tcp
\&
\&    use Net::SSLeay qw(die_now die_if_ssl_error);
\&    Net::SSLeay::load_error_strings();
\&    Net::SSLeay::SSLeay_add_ssl_algorithms();
\&    Net::SSLeay::randomize();
\&
\&    chdir \*(Aq/key/dir\*(Aq or die "chdir: $!";
\&    $| = 1;  # Piping hot!
\&    open LOG, ">>/dev/console" or die "Can\*(Aqt open log file $!";
\&    select LOG; print "server.pl started\en";
\&
\&    $ctx = Net::SSLeay::CTX_new()     or die_now "CTX_new ($ctx) ($!)";
\&    $ssl = Net::SSLeay::new($ctx)     or die_now "new ($ssl) ($!)";
\&    Net::SSLeay::set_options($ssl, &Net::SSLeay::OP_ALL)
\&         and die_if_ssl_error("ssl set options");
\&
\&    # We get already open network connection from inetd, now we just
\&    # need to attach SSLeay to STDIN and STDOUT
\&    Net::SSLeay::set_rfd($ssl, fileno(STDIN));
\&    Net::SSLeay::set_wfd($ssl, fileno(STDOUT));
\&
\&    Net::SSLeay::use_RSAPrivateKey_file ($ssl, \*(Aqplain\-rsa.pem\*(Aq,
\&                                         Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("private key");
\&    Net::SSLeay::use_certificate_file ($ssl, \*(Aqplain\-cert.pem\*(Aq,
\&                                       Net::SSLeay::FILETYPE_PEM);
\&    die_if_ssl_error("certificate");
\&
\&    Net::SSLeay::accept($ssl) and die_if_ssl_err("ssl accept: $!");
\&    print "Cipher \`" . Net::SSLeay::get_cipher($ssl) . "\*(Aq\en";
\&
\&    $got = Net::SSLeay::read($ssl);
\&    die_if_ssl_error("ssl read");
\&    print "Got \`$got\*(Aq (" . length ($got) . " chars)\en";
\&
\&    Net::SSLeay::write ($ssl, uc($got)) or die "write: $!";
\&    die_if_ssl_error("ssl write");
\&
\&    Net::SSLeay::free ($ssl);         # Tear down the connection
\&    Net::SSLeay::CTX_free ($ctx);
\&    close LOG;
.Ve
.PP
There are also a number of example/test programs in the examples directory:
.PP
.Vb 11
\&    sslecho.pl   \-  A simple server, not unlike the one above
\&    minicli.pl   \-  Implements a client using low level SSLeay routines
\&    sslcat.pl    \-  Demonstrates using high level sslcat utility function
\&    get_page.pl  \-  Is a utility for getting html pages from secure servers
\&    callback.pl  \-  Demonstrates certificate verification and callback usage
\&    stdio_bulk.pl       \- Does SSL over Unix pipes
\&    ssl\-inetd\-serv.pl   \- SSL server that can be invoked from inetd.conf
\&    httpd\-proxy\-snif.pl \- Utility that allows you to see how a browser
\&                          sends https request to given server and what reply
\&                          it gets back (very educative :\-)
\&    makecert.pl  \-  Creates a self signed cert (does not use this module)
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
\&\f(CW\*(C`Net::SSLeay::read()\*(C'\fR uses an internal buffer of 32KB, thus no single read
will return more. In practice one read returns much less, usually
as much as fits in one network packet. To work around this,
you should use a loop like this:
.PP
.Vb 5
\&    $reply = \*(Aq\*(Aq;
\&    while ($got = Net::SSLeay::read($ssl)) {
\&        last if print_errs(\*(AqSSL_read\*(Aq);
\&        $reply .= $got;
\&    }
.Ve
.PP
Although there is no built-in limit in \f(CW\*(C`Net::SSLeay::write()\*(C'\fR, the network
packet size limitation applies here as well, thus use:
.PP
.Vb 1
\&    $written = 0;
\&
\&    while ($written < length($message)) {
\&        $written += Net::SSLeay::write($ssl, substr($message, $written));
\&        last if print_errs(\*(AqSSL_write\*(Aq);
\&    }
.Ve
.PP
Or alternatively you can just use the following convenience functions:
.PP
.Vb 2
\&    Net::SSLeay::ssl_write_all($ssl, $message) or die "ssl write failure";
\&    $got = Net::SSLeay::ssl_read_all($ssl) or die "ssl read failure";
.Ve
.SH "KNOWN BUGS AND CAVEATS"
.IX Header "KNOWN BUGS AND CAVEATS"
Autoloader emits a
.PP
.Vb 1
\&    Argument "xxx" isn\*(Aqt numeric in entersub at blib/lib/Net/SSLeay.pm\*(Aq
.Ve
.PP
warning if die_if_ssl_error is made autoloadable. If you figure out why,
drop me a line.
.PP
Callback set using \f(CW\*(C`SSL_set_verify()\*(C'\fR does not appear to work. This may
well be an openssl problem (e.g. see \f(CW\*(C`ssl/ssl_lib.c\*(C'\fR line 1029). Try using
\&\f(CW\*(C`SSL_CTX_set_verify()\*(C'\fR instead and do not be surprised if even this stops
working in future versions.
.PP
Callback and certificate verification stuff is generally too little tested.
.PP
Random numbers are not initialized randomly enough, especially if you
do not have \f(CW\*(C`/dev/random\*(C'\fR and/or \f(CW\*(C`/dev/urandom\*(C'\fR (such as in Solaris
platforms \- but it's been suggested that cryptorand daemon from the SUNski
package solves this). In this case you should investigate third party
software that can emulate these devices, e.g. by way of a named pipe
to some program.
.PP
Another gotcha with random number initialization is randomness
depletion. This phenomenon, which has been extensively discussed in
OpenSSL, Apache-SSL, and Apache\-mod_ssl forums, can cause your
script to block if you use \f(CW\*(C`/dev/random\*(C'\fR or to operate insecurely
if you use \f(CW\*(C`/dev/urandom\*(C'\fR. What happens is that when too much
randomness is drawn from the operating system's randomness pool
then randomness can temporarily be unavailable. \f(CW\*(C`/dev/random\*(C'\fR solves
this problem by waiting until enough randomness can be gathered \- and
this can take a long time since blocking reduces activity in the
machine and less activity provides less random events: a vicious circle.
\&\f(CW\*(C`/dev/urandom\*(C'\fR solves this dilemma more pragmatically by simply returning
predictable \*(L"random\*(R" numbers. Some\f(CW\*(C` /dev/urandom\*(C'\fR emulation software
however actually seems to implement \f(CW\*(C`/dev/random\*(C'\fR semantics. Caveat emptor.
.PP
I've been pointed to two such daemons by Mik Firestone <mik@@speed.stdio._com>
who has used them on Solaris 8:
.IP "1." 4
Entropy Gathering Daemon (\s-1EGD\s0) at <http://www.lothar.com/tech/crypto/>
.IP "2." 4
Pseudo-random number generating daemon (\s-1PRNGD\s0) at
<http://www.aet.tu\-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
.PP
If you are using the low level \s-1API\s0 functions to communicate with other
\&\s-1SSL\s0 implementations, you would do well to call
.PP
.Vb 2
\&    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL)
\&         or die_if_ssl_error("ssl ctx set options");
.Ve
.PP
to cope with some well know bugs in some other \s-1SSL\s0
implementations. The high level \s-1API\s0 functions always set all known
compatibility options.
.PP
Sometimes \f(CW\*(C`sslcat()\*(C'\fR (and the high level \s-1HTTPS\s0 functions that build on it)
is too fast in signaling the \s-1EOF\s0 to legacy \s-1HTTPS\s0 servers. This causes
the server to return empty page. To work around this problem you can
set the global variable
.PP
.Vb 1
\&    $Net::SSLeay::slowly = 1;   # Add sleep so broken servers can keep up
.Ve
.PP
\&\s-1HTTP/1.1\s0 is not supported. Specifically this module does not know to
issue or serve multiple http requests per connection. This is a serious
shortcoming, but using the \s-1SSL\s0 session cache on your server helps to
alleviate the \s-1CPU\s0 load somewhat.
.PP
As of version 1.09 many newer OpenSSL auxiliary functions were
added (from \f(CW\*(C`REM_AUTOMATICALLY_GENERATED_1_09\*(C'\fR onwards in \f(CW\*(C`SSLeay.xs\*(C'\fR).
Unfortunately I have not had any opportunity to test these. Some of
them are trivial enough that I believe they \*(L"just work\*(R", but others
have rather complex interfaces with function pointers and all. In these
cases you should proceed wit great caution.
.PP
This module defaults to using OpenSSL automatic protocol negotiation
code for automatically detecting the version of the \s-1SSL\s0 protocol
that the other end talks. With most web servers this works just
fine, but once in a while I get complaints from people that the module
does not work with some web servers. Usually this can be solved
by explicitly setting the protocol version, e.g.
.PP
.Vb 3
\&   $Net::SSLeay::ssl_version = 2;  # Insist on SSLv2
\&   $Net::SSLeay::ssl_version = 3;  # Insist on SSLv3
\&   $Net::SSLeay::ssl_version = 10; # Insist on TLSv1
.Ve
.PP
Although the autonegotiation is nice to have, the \s-1SSL\s0 standards
do not formally specify any such mechanism. Most of the world has
accepted the SSLeay/OpenSSL way of doing it as the de facto standard. But
for the few that think differently, you have to explicitly speak
the correct version. This is not really a bug, but rather a deficiency
in the standards. If a site refuses to respond or sends back some
nonsensical error codes (at the \s-1SSL\s0 handshake level), try this option
before mailing me.
.PP
On some systems, OpenSSL may be compiled without support for SSLv2.
If this is the case, Net::SSLeay will warn if ssl_version has been set
to 2.
.PP
The high level \s-1API\s0 returns the certificate of the peer, thus allowing
one to check what certificate was supplied. However, you will only be
able to check the certificate after the fact, i.e. you already sent
your form data by the time you find out that you did not trust them,
oops.
.PP
So, while being able to know the certificate after the fact is surely
useful, the security minded would still choose to do the connection
and certificate verification first and only then exchange data
with the site. Currently none of the high level \s-1API\s0 functions do
this, thus you would have to program it using the low level \s-1API. A\s0
good place to start is to see how the \f(CW\*(C`Net::SSLeay::http_cat()\*(C'\fR function
is implemented.
.PP
The high level \s-1API\s0 functions use a global file handle \f(CW\*(C`SSLCAT_S\*(C'\fR
internally. This really should not be a problem because there is no
way to interleave the high level \s-1API\s0 functions, unless you use threads
(but threads are not very well supported in perl anyway (as of version
5.6.1). However, you may run into problems if you call undocumented
internal functions in an interleaved fashion. The best solution is to \*(L"require Net::SSLeay\*(R"
in one thread after all the threads have been created.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Random number generator not seeded!!!" 4
.IX Item "Random number generator not seeded!!!"
\&\fB(W)\fR This warning indicates that \f(CW\*(C`randomize()\*(C'\fR was not able to read
\&\f(CW\*(C`/dev/random\*(C'\fR or \f(CW\*(C`/dev/urandom\*(C'\fR, possibly because your system does not
have them or they are differently named. You can still use \s-1SSL,\s0 but
the encryption will not be as strong.
.IP "open_tcp_connection: destination host not found:`server' (port 123) ($!)" 4
.IX Item "open_tcp_connection: destination host not found:`server' (port 123) ($!)"
Name lookup for host named \f(CW\*(C`server\*(C'\fR failed.
.IP "open_tcp_connection: failed `server', 123 ($!)" 4
.IX Item "open_tcp_connection: failed `server', 123 ($!)"
The name was resolved, but establishing the \s-1TCP\s0 connection failed.
.IP "msg 123: 1 \- error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto" 4
.IX Item "msg 123: 1 - error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto"
SSLeay error string. The first number (123) is the \s-1PID,\s0 the second number
(1) indicates the position of the error message in SSLeay error stack.
You often see a pile of these messages as errors cascade.
.IP "msg 123: 1 \- \fIerror:02001002::lib\fR\|(2) :\fIfunc\fR\|(1) :\fIreason\fR\|(2)" 4
.IX Item "msg 123: 1 - error:02001002::lib :func :reason"
The same as above, but you didn't call \fIload_error_strings()\fR so SSLeay
couldn't verbosely explain the error. You can still find out what it
means with this command:
.Sp
.Vb 1
\&    /usr/local/ssl/bin/ssleay errstr 02001002
.Ve
.IP "Password is being asked for private key" 4
.IX Item "Password is being asked for private key"
This is normal behaviour if your private key is encrypted. Either
you have to supply the password or you have to use an unencrypted
private key. Scan OpenSSL.org for the \s-1FAQ\s0 that explains how to
do this (or just study examples/makecert.pl which is used
during \f(CW\*(C`make test\*(C'\fR to do just that).
.SH "SECURITY"
.IX Header "SECURITY"
You can mitigate some of the security vulnerabilities that might be present in your \s-1SSL/TLS\s0 application:
.SS "\s-1BEAST\s0 Attack"
.IX Subsection "BEAST Attack"
http://blogs.cisco.com/security/beat\-the\-beast\-with\-tls/
https://community.qualys.com/blogs/securitylabs/2011/10/17/mitigating\-the\-beast\-attack\-on\-tls
http://blog.zoller.lu/2011/09/beast\-summary\-tls\-cbc\-countermeasures.html
.PP
The \s-1BEAST\s0 attack relies on a weakness in the way \s-1CBC\s0 mode is used in \s-1SSL/TLS. \s0
In OpenSSL versions 0.9.6d and later, the protocol-level mitigation is enabled by default, 
thus making it not vulnerable to the \s-1BEAST\s0 attack.
.PP
Solutions:
.IP "\(bu" 4
Compile with OpenSSL versions 0.9.6d or later, which enables \s-1SSL_OP_ALL\s0 by default
.IP "\(bu" 4
Ensure \s-1SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\s0 is not enabled (its not enabled by default)
.IP "\(bu" 4
Don't support SSLv2, SSLv3
.IP "\(bu" 4
Actively control the ciphers your server supports with set_cipher_list:
.PP
Net::SSLeay::set_cipher_list($ssl, '\s-1RC4\-SHA:HIGH:\s0!ADH');
.SS "Session Resumption"
.IX Subsection "Session Resumption"
http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html
.PP
The \s-1SSL\s0 Labs vulnerability test on your \s-1SSL\s0 server might report in red:
.PP
Session resumption      No (IDs assigned but not accepted)
.PP
This report is not really bug or a vulnerability, since the server will not 
accept session resumption requests.
However, you can prevent this noise in the report by disabling the session cache altogether:
Net::SSLeay::CTX_set_session_cache_mode($ssl_ctx, 0);
.SS "Secure Renegotiation and DoS Attack"
.IX Subsection "Secure Renegotiation and DoS Attack"
https://community.qualys.com/blogs/securitylabs/2011/10/31/tls\-renegotiation\-and\-denial\-of\-service\-attacks
.PP
This is not a \*(L"security flaw,\*(R" it is more of a DoS vulnerability.
.PP
Solutions:
.IP "\(bu" 4
Do not support SSLv2
.IP "\(bu" 4
Do not set the \s-1SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\s0 option
.IP "\(bu" 4
Compile with OpenSSL 0.9.8m or later
.SH "BUGS AND SUPPORT"
.IX Header "BUGS AND SUPPORT"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-Net\-SSLeay at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/Public/Dist/Display.html?Name=Net\-SSLeay>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.PP
Subversion access to the latest source code etc can be obtained at
<http://alioth.debian.org/projects/net\-ssleay>
.PP
The developer mailing list (for people interested in contributing
to the source code) can be found at
<http://lists.alioth.debian.org/mailman/listinfo/net\-ssleay\-devel>
.PP
You can find documentation for this module with the \f(CW\*(C`perldoc\*(C'\fR command.
.PP
.Vb 1
\&    perldoc Net::SSLeay
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-SSLeay>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Net\-SSLeay>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Net\-SSLeay>
.PP
Commercial support for Net::SSLeay may be obtained from
.PP
.Vb 3
\&   Symlabs (netssleay@symlabs.com)
\&   Tel: +351\-214.222.630
\&   Fax: +351\-214.222.637
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Maintained by Mike McCauley and Florian Ragwitz since November 2005
.PP
Originally written by Sampo Kelloma\*:ki <sampo@symlabs.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-2003 Sampo Kelloma\*:ki <sampo@symlabs.com>
.PP
Copyright (C) 2005\-2006 Florian Ragwitz <rafl@debian.org>
.PP
Copyright (C) 2005 Mike McCauley <mikem@airspayce.com>
.PP
All Rights Reserved.
.PP
Distribution and use of this module is under the same terms as the
OpenSSL package itself (i.e. free, but mandatory attribution; \s-1NO
WARRANTY\s0). Please consult \s-1LICENSE\s0 file in the root of the OpenSSL
distribution, and also included in this distribution.
.PP
While the source distribution of this perl module does not contain
Eric's or OpenSSL's code, if you use this module you will use OpenSSL
library. Please give Eric and OpenSSL team credit (as required by
their licenses).
.PP
And remember, you, and nobody else but you, are responsible for
auditing this module and OpenSSL library for security problems,
backdoors, and general suitability for your application.
.SH "LICENSE"
.IX Header "LICENSE"
See the \s-1LICENSE\s0 file included in this distribution
.PP
(ignore this line: this is to keep kwalitee happy by saying: Not \s-1GPL\s0)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 10
\&  Net::SSLeay::Handle                      \- File handle interface
\&  ./examples                               \- Example servers and a clients
\&  <http://www.openssl.org/>                \- OpenSSL source, documentation, etc
\&  openssl\-users\-request@openssl.org        \- General OpenSSL mailing list
\&  <http://www.ietf.org/rfc/rfc2246.txt>    \- TLS 1.0 specification
\&  <http://www.w3c.org>                     \- HTTP specifications
\&  <http://www.ietf.org/rfc/rfc2617.txt>    \- How to send password
\&  <http://www.lothar.com/tech/crypto/>     \- Entropy Gathering Daemon (EGD)
\&  <http://www.aet.tu\-cottbus.de/personen/jaenicke/postfix_tls/prngd.html>
\&                           \- pseudo\-random number generating daemon (PRNGD)
\&  perl(1)
\&  perlref(1)
\&  perllol(1)
\&  perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod
.Ve
                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::SSLeay::Handle.3pm                      0100644 0001750 0001750 00000021647 12566241552 024606  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSLeay::Handle 3"
.TH Net::SSLeay::Handle 3 "2006-09-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSLeay::Handle \- Perl module that lets SSL (HTTPS) sockets be
handled as standard file handles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSLeay::Handle allows you to request and receive \s-1HTTPS\s0 web pages
using \*(L"old-fashion\*(R" file handles as in:
.PP
.Vb 1
\&    print SSL "GET / HTTP/1.0\er\en";
.Ve
.PP
and
.PP
.Vb 1
\&    print while (<SSL>);
.Ve
.PP
If you export the shutdown routine, then the only extra code that
you need to add to your program is the tie function as in:
.PP
.Vb 9
\&    my $socket;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $host, $port);
\&        $socket = \e*S2;
\&    else {
\&        $socket = Net::SSLeay::Handle\->make_socket($host, $port);
\&    }
\&    print $socket $request_headers;
\&    ...
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "shutdown" 4
.IX Item "shutdown"
.Vb 1
\&  shutdown(\e*SOCKET, $mode)
.Ve
.Sp
Calls to the main \fIshutdown()\fR don't work with tied sockets created with this
module.  This shutdown should be able to distinquish between tied and untied
sockets and do the right thing.
.IP "debug" 4
.IX Item "debug"
.Vb 2
\&  my $debug = Net::SSLeay::Handle\->debug()
\&  Net::SSLeay::Handle\->debug(1)
.Ve
.Sp
Get/set debuging mode. Always returns the debug value before the function call.
if an additional argument is given the debug option will be set to this value.
.IP "make_socket" 4
.IX Item "make_socket"
.Vb 1
\&  my $sock = Net::SSLeay::Handle\->make_socket($host, $port);
.Ve
.Sp
Creates a socket that is connected to \f(CW$post\fR using \f(CW$port\fR. It uses
\&\f(CW$Net::SSLeay::proxyhost\fR and proxyport if set and authentificates itself against
this proxy depending on \f(CW$Net::SSLeay::proxyauth\fR. It also turns autoflush on for
the created socket.
.SS "\s-1USING EXISTING SOCKETS\s0"
.IX Subsection "USING EXISTING SOCKETS"
One of the motivations for writing this module was to avoid
duplicating socket creation code (which is mostly error handling).
The calls to \fItie()\fR above where it is passed a \f(CW$host\fR and \f(CW$port\fR is
provided for convenience testing.  If you already have a socket
connected to the right host and port, S1, then you can do something
like:
.PP
.Vb 8
\&    my $socket \e*S1;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $socket);
\&        $socket = \e*S2;
\&    }
\&    my $last_sel = select($socket); $| = 1; select($last_sel);
\&    print $socket $request_headers;
\&    ...
.Ve
.PP
Note: As far as I know you must be careful with the globs in the \fItie()\fR
function.  The first parameter must be a glob (*SOMETHING) and the
last parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a
scaler that was assigned to a reference to a glob (as in the example
above)
.PP
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.PP
You can export the \fIshutdown()\fR function.
.PP
It is suggested that you do export \fIshutdown()\fR or use the fully
qualified \fINet::SSLeay::Handle::shutdown()\fR function to shutdown \s-1SSL\s0
sockets.  It should be smart enough to distinguish between \s-1SSL\s0 and
non-SSL sockets and do the right thing.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "TODO"
.IX Header "TODO"
Better error handling.  Callback routine?
.SH "CAVEATS"
.IX Header "CAVEATS"
Tying to a file handle is a little tricky (for me at least).
.PP
The first parameter to \fItie()\fR must be a glob (*SOMETHING) and the last
parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a scaler
that was assigned to a reference to a glob ($s = \e*SOMETHING_ELSE).
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.PP
I was able to associate attributes to globs created by this module
(like *SSL above) by making a hash of hashes keyed by the file head1.
.PP
Support for old perls may not be 100%. If in trouble try 5.6.0 or
newer.
.SH "CHANGES"
.IX Header "CHANGES"
Please see Net\-SSLeay\-Handle\-0.50/Changes file.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If you let this module construct sockets for you with Perl versions
below v.5.6 then there is a slight memory leak.  Other upgrade your
Perl, or create the sockets yourself.  The leak was created to let
these older versions of Perl access more than one Handle at a time.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jim Bowlin jbowlin@linklint.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SSLeay, \fIperl\fR\|(1), http://openssl.org/
                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::SSLeay::Handle5.16.3pm                  0100644 0001750 0001750 00000021344 12566241552 025112  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSLeay::Handle 3"
.TH Net::SSLeay::Handle 3 "2006-09-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSLeay::Handle \- Perl module that lets SSL (HTTPS) sockets be
handled as standard file handles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSLeay::Handle allows you to request and receive \s-1HTTPS\s0 web pages
using \*(L"old-fashion\*(R" file handles as in:
.PP
.Vb 1
\&    print SSL "GET / HTTP/1.0\er\en";
.Ve
.PP
and
.PP
.Vb 1
\&    print while (<SSL>);
.Ve
.PP
If you export the shutdown routine, then the only extra code that
you need to add to your program is the tie function as in:
.PP
.Vb 9
\&    my $socket;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $host, $port);
\&        $socket = \e*S2;
\&    else {
\&        $socket = Net::SSLeay::Handle\->make_socket($host, $port);
\&    }
\&    print $socket $request_headers;
\&    ...
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "shutdown" 4
.IX Item "shutdown"
.Vb 1
\&  shutdown(\e*SOCKET, $mode)
.Ve
.Sp
Calls to the main \fIshutdown()\fR don't work with tied sockets created with this
module.  This shutdown should be able to distinquish between tied and untied
sockets and do the right thing.
.IP "debug" 4
.IX Item "debug"
.Vb 2
\&  my $debug = Net::SSLeay::Handle\->debug()
\&  Net::SSLeay::Handle\->debug(1)
.Ve
.Sp
Get/set debuging mode. Always returns the debug value before the function call.
if an additional argument is given the debug option will be set to this value.
.IP "make_socket" 4
.IX Item "make_socket"
.Vb 1
\&  my $sock = Net::SSLeay::Handle\->make_socket($host, $port);
.Ve
.Sp
Creates a socket that is connected to \f(CW$post\fR using \f(CW$port\fR. It uses
\&\f(CW$Net::SSLeay::proxyhost\fR and proxyport if set and authentificates itself against
this proxy depending on \f(CW$Net::SSLeay::proxyauth\fR. It also turns autoflush on for
the created socket.
.SS "\s-1USING\s0 \s-1EXISTING\s0 \s-1SOCKETS\s0"
.IX Subsection "USING EXISTING SOCKETS"
One of the motivations for writing this module was to avoid
duplicating socket creation code (which is mostly error handling).
The calls to \fItie()\fR above where it is passed a \f(CW$host\fR and \f(CW$port\fR is
provided for convenience testing.  If you already have a socket
connected to the right host and port, S1, then you can do something
like:
.PP
.Vb 8
\&    my $socket \e*S1;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $socket);
\&        $socket = \e*S2;
\&    }
\&    my $last_sel = select($socket); $| = 1; select($last_sel);
\&    print $socket $request_headers;
\&    ...
.Ve
.PP
Note: As far as I know you must be careful with the globs in the \fItie()\fR
function.  The first parameter must be a glob (*SOMETHING) and the
last parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a
scaler that was assigned to a reference to a glob (as in the example
above)
.PP
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.PP
You can export the \fIshutdown()\fR function.
.PP
It is suggested that you do export \fIshutdown()\fR or use the fully
qualified \fINet::SSLeay::Handle::shutdown()\fR function to shutdown \s-1SSL\s0
sockets.  It should be smart enough to distinguish between \s-1SSL\s0 and
non-SSL sockets and do the right thing.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "TODO"
.IX Header "TODO"
Better error handling.  Callback routine?
.SH "CAVEATS"
.IX Header "CAVEATS"
Tying to a file handle is a little tricky (for me at least).
.PP
The first parameter to \fItie()\fR must be a glob (*SOMETHING) and the last
parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a scaler
that was assigned to a reference to a glob ($s = \e*SOMETHING_ELSE).
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.PP
I was able to associate attributes to globs created by this module
(like *SSL above) by making a hash of hashes keyed by the file head1.
.PP
Support for old perls may not be 100%. If in trouble try 5.6.0 or
newer.
.SH "CHANGES"
.IX Header "CHANGES"
Please see Net\-SSLeay\-Handle\-0.50/Changes file.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If you let this module construct sockets for you with Perl versions
below v.5.6 then there is a slight memory leak.  Other upgrade your
Perl, or create the sockets yourself.  The leak was created to let
these older versions of Perl access more than one Handle at a time.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jim Bowlin jbowlin@linklint.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SSLeay, \fIperl\fR\|(1), http://openssl.org/
                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::SSLeay::Handle5.18.3pm                  0100644 0001750 0001750 00000021647 12566241552 025122  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSLeay::Handle 3"
.TH Net::SSLeay::Handle 3 "2006-09-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSLeay::Handle \- Perl module that lets SSL (HTTPS) sockets be
handled as standard file handles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSLeay::Handle allows you to request and receive \s-1HTTPS\s0 web pages
using \*(L"old-fashion\*(R" file handles as in:
.PP
.Vb 1
\&    print SSL "GET / HTTP/1.0\er\en";
.Ve
.PP
and
.PP
.Vb 1
\&    print while (<SSL>);
.Ve
.PP
If you export the shutdown routine, then the only extra code that
you need to add to your program is the tie function as in:
.PP
.Vb 9
\&    my $socket;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $host, $port);
\&        $socket = \e*S2;
\&    else {
\&        $socket = Net::SSLeay::Handle\->make_socket($host, $port);
\&    }
\&    print $socket $request_headers;
\&    ...
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "shutdown" 4
.IX Item "shutdown"
.Vb 1
\&  shutdown(\e*SOCKET, $mode)
.Ve
.Sp
Calls to the main \fIshutdown()\fR don't work with tied sockets created with this
module.  This shutdown should be able to distinquish between tied and untied
sockets and do the right thing.
.IP "debug" 4
.IX Item "debug"
.Vb 2
\&  my $debug = Net::SSLeay::Handle\->debug()
\&  Net::SSLeay::Handle\->debug(1)
.Ve
.Sp
Get/set debuging mode. Always returns the debug value before the function call.
if an additional argument is given the debug option will be set to this value.
.IP "make_socket" 4
.IX Item "make_socket"
.Vb 1
\&  my $sock = Net::SSLeay::Handle\->make_socket($host, $port);
.Ve
.Sp
Creates a socket that is connected to \f(CW$post\fR using \f(CW$port\fR. It uses
\&\f(CW$Net::SSLeay::proxyhost\fR and proxyport if set and authentificates itself against
this proxy depending on \f(CW$Net::SSLeay::proxyauth\fR. It also turns autoflush on for
the created socket.
.SS "\s-1USING EXISTING SOCKETS\s0"
.IX Subsection "USING EXISTING SOCKETS"
One of the motivations for writing this module was to avoid
duplicating socket creation code (which is mostly error handling).
The calls to \fItie()\fR above where it is passed a \f(CW$host\fR and \f(CW$port\fR is
provided for convenience testing.  If you already have a socket
connected to the right host and port, S1, then you can do something
like:
.PP
.Vb 8
\&    my $socket \e*S1;
\&    if ($scheme eq "https") {
\&        tie(*S2, "Net::SSLeay::Handle", $socket);
\&        $socket = \e*S2;
\&    }
\&    my $last_sel = select($socket); $| = 1; select($last_sel);
\&    print $socket $request_headers;
\&    ...
.Ve
.PP
Note: As far as I know you must be careful with the globs in the \fItie()\fR
function.  The first parameter must be a glob (*SOMETHING) and the
last parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a
scaler that was assigned to a reference to a glob (as in the example
above)
.PP
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.PP
You can export the \fIshutdown()\fR function.
.PP
It is suggested that you do export \fIshutdown()\fR or use the fully
qualified \fINet::SSLeay::Handle::shutdown()\fR function to shutdown \s-1SSL\s0
sockets.  It should be smart enough to distinguish between \s-1SSL\s0 and
non-SSL sockets and do the right thing.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  use Net::SSLeay::Handle qw/shutdown/;
\&  my ($host, $port) = ("localhost", 443);
\&
\&  tie(*SSL, "Net::SSLeay::Handle", $host, $port);
\&
\&  print SSL "GET / HTTP/1.0\er\en";
\&  shutdown(\e*SSL, 1);
\&  print while (<SSL>);
\&  close SSL;
.Ve
.SH "TODO"
.IX Header "TODO"
Better error handling.  Callback routine?
.SH "CAVEATS"
.IX Header "CAVEATS"
Tying to a file handle is a little tricky (for me at least).
.PP
The first parameter to \fItie()\fR must be a glob (*SOMETHING) and the last
parameter must be a reference to a glob (\e*SOMETHING_ELSE) or a scaler
that was assigned to a reference to a glob ($s = \e*SOMETHING_ELSE).
Also, the two globs must be different.  When I tried to use the same
glob, I got a core dump.
.PP
I was able to associate attributes to globs created by this module
(like *SSL above) by making a hash of hashes keyed by the file head1.
.PP
Support for old perls may not be 100%. If in trouble try 5.6.0 or
newer.
.SH "CHANGES"
.IX Header "CHANGES"
Please see Net\-SSLeay\-Handle\-0.50/Changes file.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If you let this module construct sockets for you with Perl versions
below v.5.6 then there is a slight memory leak.  Other upgrade your
Perl, or create the sockets yourself.  The leak was created to let
these older versions of Perl access more than one Handle at a time.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jim Bowlin jbowlin@linklint.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SSLeay, \fIperl\fR\|(1), http://openssl.org/
                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server.3pm                              0100644 0001750 0001750 00000232752 12566241464 023417  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server 3"
.TH Net::Server 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server \- Extensible, general Perl server engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #!/usr/bin/perl \-w \-T
\&    package MyPackage;
\&
\&    use base qw(Net::Server);
\&
\&    sub process_request {
\&        my $self = shift;
\&        while (<STDIN>) {
\&            s/[\er\en]+$//;
\&            print "You said \*(Aq$_\*(Aq\e015\e012"; # basic echo
\&            last if /quit/i;
\&        }
\&    }
\&
\&    MyPackage\->run(port => 160, ipv => \*(Aq*\*(Aq);
\&
\&
\&    # one liner to get going quickly
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => 20208)\*(Aq
\&
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, any available IPv4 and IPv6 sockets will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
.Ve
.SH "FEATURES"
.IX Header "FEATURES"
.Vb 10
\&    * Full IPv6 support
\&    * Working SSL sockets and https (both with and without IO::Socket::SSL)
\&    * Single Server Mode
\&    * Inetd Server Mode
\&    * Preforking Simple Mode (PreForkSimple)
\&    * Preforking Managed Mode (PreFork)
\&    * Forking Mode
\&    * Multiplexing Mode using a single process
\&    * Multi port accepts on Single, Preforking, and Forking modes
\&    * Basic HTTP Daemon (supports IPv6, SSL, full apache style logs)
\&    * Basic PSGI Daemon
\&    * Simultaneous accept/recv on tcp/udp/unix, ssl/tcp, and IPv4/IPv6 sockets
\&    * Safe signal handling in Fork/PreFork avoids perl signal trouble
\&    * User customizable hooks
\&    * Chroot ability after bind
\&    * Change of user and group after bind
\&    * Basic allow/deny access control
\&    * Pluggable logging (Sys::Syslog, Log::Log4perl, log_file, STDERR, or your own)
\&    * HUP able server (clean restarts via sig HUP)
\&    * Graceful shutdowns (via sig QUIT)
\&    * Hot deploy in Fork and PreFork modes (via sig TTIN and TTOU)
\&    * Dequeue ability in all Fork and PreFork modes.
\&    * Taint clean
\&    * Written in Perl
\&    * Protection against buffer overflow
\&    * Clean process flow
\&    * Extensibility
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Server\*(C'\fR is an extensible, generic Perl server engine.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR attempts to be a generic server as in \f(CW\*(C`Net::Daemon\*(C'\fR
and \f(CW\*(C`NetServer::Generic\*(C'\fR.  It includes with it the ability to run as
an inetd process (\f(CW\*(C`Net::Server::INET\*(C'\fR), a single connection server
(\f(CW\*(C`Net::Server\*(C'\fR or \f(CW\*(C`Net::Server::Single\*(C'\fR), a forking server
(\f(CW\*(C`Net::Server::Fork\*(C'\fR), a preforking server which maintains a constant
number of preforked children (\f(CW\*(C`Net::Server::PreForkSimple\*(C'\fR), or as a
managed preforking server which maintains the number of children based
on server load (\f(CW\*(C`Net::Server::PreFork\*(C'\fR).  In all but the inetd type,
the server provides the ability to connect to one or to multiple
server ports.
.PP
The additional server types are made possible via \*(L"personalities\*(R" or
sub classes of the \f(CW\*(C`Net::Server\*(C'\fR.  By moving the multiple types of
servers out of the main \f(CW\*(C`Net::Server\*(C'\fR class, the \f(CW\*(C`Net::Server\*(C'\fR
concept is easily extended to other types (in the near future, we
would like to add a \*(L"Thread\*(R" personality).
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR borrows several concepts from the Apache Webserver.
\&\f(CW\*(C`Net::Server\*(C'\fR uses \*(L"hooks\*(R" to allow custom servers such as \s-1SMTP,
HTTP, POP3,\s0 etc. to be layered over the base \f(CW\*(C`Net::Server\*(C'\fR class.  In
addition the \f(CW\*(C`Net::Server::PreFork\*(C'\fR class borrows concepts of
min_start_servers, max_servers, and min_waiting servers.
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR also uses the concept of an flock serialized
accept when accepting on multiple ports (PreFork can choose between
flock, IPC::Semaphore, and pipe to control serialization).
.SH "PERSONALITIES"
.IX Header "PERSONALITIES"
\&\f(CW\*(C`Net::Server\*(C'\fR is built around a common class (Net::Server) and is
extended using sub classes, or \f(CW\*(C`personalities\*(C'\fR.  Each personality
inherits, overrides, or enhances the base methods of the base class.
.PP
Included with the Net::Server package are several basic personalities,
each of which has their own use.
.IP "Fork" 4
.IX Item "Fork"
Found in the module Net/Server/Fork.pm (see Net::Server::Fork).
This server binds to one or more ports and then waits for a
connection.  When a client request is received, the parent forks a
child, which then handles the client and exits.  This is good for
moderately hit services.
.IP "\s-1INET\s0" 4
.IX Item "INET"
Found in the module Net/Server/INET.pm (see Net::Server::INET).
This server is designed to be used with inetd.  The \f(CW\*(C`pre_bind\*(C'\fR,
\&\f(CW\*(C`bind\*(C'\fR, \f(CW\*(C`accept\*(C'\fR, and \f(CW\*(C`post_accept\*(C'\fR are all overridden as these
services are taken care of by the \s-1INET\s0 daemon.
.IP "MultiType" 4
.IX Item "MultiType"
Found in the module Net/Server/MultiType.pm (see
Net::Server::MultiType).  This server has no server functionality
of its own.  It is designed for servers which need a simple way to
easily switch between different personalities.  Multiple
\&\f(CW\*(C`server_type\*(C'\fR parameters may be given and Net::Server::MultiType will
cycle through until it finds a class that it can use.
.IP "Multiplex" 4
.IX Item "Multiplex"
Found in the module Net/Server/Multiplex.pm (see
Net::Server::Multiplex).  This server binds to one or more ports.
It uses IO::Multiplex to multiplex between waiting for new connections
and waiting for input on currently established connections.  This
personality is designed to run as one process without forking.  The
\&\f(CW\*(C`process_request\*(C'\fR method is never used but the \f(CW\*(C`mux_input\*(C'\fR callback
is used instead (see also IO::Multiplex).  See
examples/samplechat.pl for an example using most of the features of
Net::Server::Multiplex.
.IP "PreForkSimple" 4
.IX Item "PreForkSimple"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`max_servers\*(C'\fR child process.  The server will make sure
that at any given time there are always \f(CW\*(C`max_servers\*(C'\fR available to
receive a client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can dedicate max_server processes no matter what the
load.  It should scale well for most applications.  Multi port accept
is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "PreFork" 4
.IX Item "PreFork"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure
that at any given time there are at least \f(CW\*(C`min_spare_servers\*(C'\fR but not
more than \f(CW\*(C`max_spare_servers\*(C'\fR available to receive a client request,
up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site, and should scale well for most applications.  Multi port
accept is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "Single" 4
.IX Item "Single"
All methods fall back to Net::Server.  This personality is provided
only as parallelism for Net::Server::MultiType.
.IP "\s-1HTTP\s0" 4
.IX Item "HTTP"
Not a distinct personality.  Provides a basic \s-1HTTP\s0 daemon.  This can
be combined with the \s-1SSL\s0 or \s-1SSLEAY\s0 proto to provide an \s-1HTTPS\s0 Daemon.
See Net::Server::HTTP.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR was partially written to make it easy to add new
personalities.  Using separate modules built upon an open architecture
allows for easy addition of new features, a separate development
process, and reduced code bloat in the core module.
.SH "SOCKET ACCESS"
.IX Header "SOCKET ACCESS"
Once started, the Net::Server will take care of binding to port and
waiting for connections.  Once a connection is received, the
Net::Server will accept on the socket and will store the result (the
client connection) in \f(CW$self\fR\->{server}\->{client}.  This
property is a Socket blessed into the the IO::Socket classes.  \s-1UDP\s0
servers are slightly different in that they will perform a \fBrecv\fR
instead of an \fBaccept\fR.
.PP
To make programming easier, during the post_accept phase, \s-1STDIN\s0 and
\&\s-1STDOUT\s0 are opened to the client connection.  This allows for programs
to be written using <\s-1STDIN\s0> and print \*(L"out\en\*(R" to print to the
client connection.  \s-1UDP\s0 will require using a \->send call.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following is a very simple server.  The main functionality occurs
in the process_request method call as shown below.  Notice the use of
timeouts to prevent Denial of Service while reading.  (Other examples
of using \f(CW\*(C`Net::Server\*(C'\fR can, or will, be included with this
distribution).
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&
\&    use strict;
\&    use base qw(Net::Server::PreFork); # any personality will do
\&
\&    MyPackage\->run;
\&
\&    # over\-ride the default echo handler
\&
\&    sub process_request {
\&        my $self = shift;
\&        eval {
\&
\&            local $SIG{\*(AqALRM\*(Aq} = sub { die "Timed Out!\en" };
\&            my $timeout = 30; # give the user 30 seconds to type some lines
\&
\&            my $previous_alarm = alarm($timeout);
\&            while (<STDIN>) {
\&                s/\er?\en$//;
\&                print "You said \*(Aq$_\*(Aq\er\en";
\&                alarm($timeout);
\&            }
\&            alarm($previous_alarm);
\&
\&        };
\&
\&        if ($@ =~ /timed out/i) {
\&            print STDOUT "Timed Out.\er\en";
\&            return;
\&        }
\&
\&    }
\&
\&    1;
.Ve
.PP
Playing this file from the command line will invoke a Net::Server
using the PreFork personality.  When building a server layer over the
Net::Server, it is important to use features such as timeouts to
prevent Denial Of Service attacks.
.PP
Net::Server comes with a built in echo server by default.  You can test it
out by simply running the following from the commandline:
.PP
.Vb 1
\&    net\-server
.Ve
.PP
If you wanted to try another flavor you could try
.PP
.Vb 1
\&    net\-server PreFork
.Ve
.PP
If you wanted to try out a basic \s-1HTTP\s0 server you could use
.PP
.Vb 1
\&    net\-server HTTP
.Ve
.PP
Or if you wanted to test out a \s-1CGI\s0 you are writing you could use
.PP
.Vb 1
\&    net\-server HTTP \-\-app ../../mycgi.cgi
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
There are at least five possible ways to pass arguments to
Net::Server.  They are \fIpassing to the new method\fR, \fIpassing on
command line\fR, \fIpassing parameters to run\fR, \fIusing a conf file\fR,
\&\fIreturning values in the default_values method\fR, or \fIconfiguring the
values in post_configure_hook\fR.
.PP
The \f(CW\*(C`options\*(C'\fR method is used to determine which arguments the server
will search for and can be used to extend the parsed parameters.  Any
arguments found from the command line, parameters passed to run, and
arguments found in the conf_file will be matched against the keys of
the options template.  Any commandline parameters that do not match
will be left in place and can be further processed by the server in
the various hooks (by looking at \f(CW@ARGV\fR).  Arguments passed to new will
automatically win over any other options (this can be used if you
would like to disallow a user passing in other arguments).
.PP
Arguments consist of key value pairs.  On the commandline these pairs
follow the \s-1POSIX\s0 fashion of \f(CW\*(C`\-\-key value\*(C'\fR or \f(CW\*(C`\-\-key=value\*(C'\fR, and also
\&\f(CW\*(C`key=value\*(C'\fR.  In the conf file the parameter passing can best be
shown by the following regular expression:
($key,$val)=~/^(\ew+)\es+(\eS+?)\es+$/.  Passing arguments to the run
method is done as follows: \f(CW\*(C`<Net::Server\->run(key1 =\*(C'\fR 'val1')>>.
Passing arguments via a prebuilt object can best be shown in the
following code:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&    use strict;
\&    use base qw(Net::Server);
\&
\&    my $server = MyPackage\->new({
\&        key1 => \*(Aqval1\*(Aq,
\&    });
\&
\&    $server\->run;
.Ve
.PP
All five methods for passing arguments may be used at the same time.
Once an argument has been set, it is not over written if another
method passes the same argument.  \f(CW\*(C`Net::Server\*(C'\fR will look for
arguments in the following order:
.PP
.Vb 5
\&    1) Arguments passed to the C<new> method.
\&    2) Arguments passed on command line.
\&    3) Arguments passed to the C<run> method.
\&    4) Arguments passed via a conf file.
\&    5) Arguments set in the C<default_values> method.
.Ve
.PP
Additionally the following hooks are available:
.PP
.Vb 4
\&    1) Arguments set in the configure_hook (occurs after new
\&       but before any of the other areas are checked).
\&    2) Arguments set and validated in the post_configure_hook
\&       (occurs after all of the other areas are checked).
.Ve
.PP
Each of these levels will override parameters of the same name
specified in subsequent levels.  For example, specifying \-\-setsid=0 on
the command line will override a value of \*(L"setsid 1\*(R" in the conf file.
.PP
Note that the configure_hook method doesn't return values to set, but
is there to allow for setting up configured values before the
configure method is called.
.PP
Key/value pairs used by the server are removed by the configuration
process so that server layers on top of \f(CW\*(C`Net::Server\*(C'\fR can pass and
read their own parameters.
.SH "ADDING CUSTOM ARGUMENTS"
.IX Header "ADDING CUSTOM ARGUMENTS"
It is possible to add in your own custom parameters to those parsed by
Net::Server.  The following code shows how this is done:
.PP
.Vb 4
\&    sub options {
\&        my $self     = shift;
\&        my $prop     = $self\->{\*(Aqserver\*(Aq};
\&        my $template = shift;
\&
\&        # setup options in the parent classes
\&        $self\->SUPER::options($template);
\&
\&        # add a single value option
\&        $prop\->{\*(Aqmy_option\*(Aq} ||= undef;
\&        $template\->{\*(Aqmy_option\*(Aq} = \e $prop\->{\*(Aqmy_option\*(Aq};
\&
\&        # add a multi value option
\&        $prop\->{\*(Aqan_arrayref_item\*(Aq} ||= [];
\&        $template\->{\*(Aqan_arrayref_item\*(Aq} = $prop\->{\*(Aqan_arrayref_item\*(Aq};
\&    }
.Ve
.PP
Overriding the \f(CW\*(C`options\*(C'\fR method allows for adding your own custom
fields.  A template hashref is passed in, that should then be modified
to contain an of your custom fields.  Fields which are intended to
receive a single scalar value should have a reference to the
destination scalar given.  Fields which are intended to receive
multiple values should reference the corresponding destination
arrayref.
.PP
You are responsible for validating your custom options once they have
been parsed.  The post_configure_hook is a good place to do your
validation.
.PP
Some emails have asked why we use this \*(L"template\*(R" method.  The idea is
that you are creating the the data structure to store the values in,
and you are also creating a way to get the values into the data
structure.  The template is the way to get the values to the servers
data structure.  One of the possibilities (that probably isn't used
that much) is that by letting you specify the mapping, you could build
a nested data structure \- even though the passed in arguments are
flat.  It also allows you to setup aliases to your names.
.PP
For example, a basic structure might look like this:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq}
\&
\&   $prop\->{\*(Aqmy_custom_option\*(Aq} ||= undef;
\&   $prop\->{\*(Aqmy_custom_array\*(Aq}  ||= [];
\&
\&   $template = {
\&       my_custom_option => \e $prop\->{\*(Aqmy_custom_option\*(Aq},
\&       mco              => \e $prop\->{\*(Aqmy_custom_option\*(Aq}, # alias
\&       my_custom_array  => $prop\->{\*(Aqmy_custom_array\*(Aq},
\&       mca              => $prop\->{\*(Aqmy_custom_array\*(Aq}, # an alias
\&   };
\&
\&   $template\->{\*(Aqmco2\*(Aq} = $template\->{\*(Aqmco\*(Aq}; # another way to alias
.Ve
.PP
But you could also have more complex data:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&   $prop\->{\*(Aqone_layer\*(Aq} = {
\&       two_layer => [
\&           undef,
\&           undef,
\&       ],
\&   };
\&
\&   $template = {
\&       param1 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[0],
\&       param2 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[1],
\&   };
.Ve
.PP
This is of course a contrived example \- but it does show that you can
get the data from the flat passed in arguments to whatever type of
structure you need \- with only a little bit of effort.
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 2
\&    Key               Value                    Default
\&    conf_file         "filename"               undef
\&
\&    log_level         0\-4                      2
\&    log_file          (filename|Sys::Syslog
\&                       |Log::Log4perl)         undef
\&
\&    port              \ed+                      20203
\&    host              "host"                   "*"
\&    ipv               (4|6|*)                  *
\&    proto             (tcp|udp|unix)           "tcp"
\&    listen            \ed+                      SOMAXCONN
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
\&
\&    reverse_lookups   1                        undef
\&    allow             /regex/                  none
\&    deny              /regex/                  none
\&    cidr_allow        CIDR                     none
\&    cidr_deny         CIDR                     none
\&
\&    ## daemonization parameters
\&    pid_file          "filename"               undef
\&    chroot            "directory"              undef
\&    user              (uid|username)           "nobody"
\&    group             (gid|group)              "nobody"
\&    background        1                        undef
\&    setsid            1                        undef
\&
\&    no_close_by_child (1|undef)                undef
\&
\&    ## See Net::Server::Proto::(TCP|UDP|UNIX|SSL|SSLeay|etc)
\&    ## for more sample parameters.
.Ve
.IP "conf_file" 4
.IX Item "conf_file"
Filename from which to read additional key value pair arguments for
starting the server.  Default is undef.
.Sp
There are two ways that you can specify a default location for a
conf_file.  The first is to pass the default value to the run method
as in:
.Sp
.Vb 3
\&    MyServer\->run({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    });
.Ve
.Sp
If the end user passes in \-\-conf_file=/etc/their_server.conf then the
value will be overridden.
.Sp
The second way to do this was added in the 0.96 version.  It uses the
default_values method as in:
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&        }
\&    }
.Ve
.Sp
This method has the advantage of also being able to be overridden in
the run method.
.Sp
If you do not want the user to be able to specify a conf_file at all,
you can pass conf_file to the new method when creating your object:
.Sp
.Vb 3
\&    MyServer\->new({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    })\->run;
.Ve
.Sp
If passed this way, the value passed to new will \*(L"win\*(R" over any of the
other passed in values.
.IP "log_level" 4
.IX Item "log_level"
Ranges from 0 to 4 in level.  Specifies what level of error will be
logged.  \*(L"O\*(R" means logging is off.  \*(L"4\*(R" means very verbose.  These
levels should be able to correlate to syslog levels.  Default is 2.
These levels correlate to syslog levels as defined by the following
key/value pairs: 0=>'err', 1=>'warning', 2=>'notice', 3=>'info',
4=>'debug'.
.IP "log_file" 4
.IX Item "log_file"
Name of log file or log subsystem to be written to.  If no name is given and the
write_to_log_hook is not overridden, log goes to \s-1STDERR. \s0 Default is
undef.
.Sp
The log_file may also be the name of a Net::Server pluggable logging
class.  Net::Server is packaged with Sys::Syslog and Log::Log4perl.
If the log_file looks like a module name, it will have
\&\*(L"Net::Server::Log::\*(R" added to the front and it will then be required.
The package should provide an \f(CW\*(C`initialize\*(C'\fR class method that returns
a single function which will be used for logging.  This returned
function will be passed log_level, and message.
.Sp
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Net::Server::Log::Sys::Syslog module.  If syslog is used the
parameters \f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and
\&\f(CW\*(C`syslog_logopt\*(C'\fR,and \f(CW\*(C`syslog_facility\*(C'\fR may also be defined.  See
Net::Server::Log::Sys::Syslog.
.Sp
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined. See
Net::Server::Log::Log::Log4per.
.Sp
If a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0
will automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT. \s0 This will prevent any output from ending up at the terminal.
.IP "pid_file" 4
.IX Item "pid_file"
Filename to store pid of parent process.  Generally applies only to
forking servers.  Default is none (undef).
.IP "port" 4
.IX Item "port"
See Net::Server::Proto for further examples of configuration.
.Sp
Local port/socket on which to bind.  If it is a low port, the process
must start as root.  If multiple ports are given, all will be bound at
server startup.  May be of the form \f(CW\*(C`host:port/proto\*(C'\fR,
\&\f(CW\*(C`host:port/proto/ipv\*(C'\fR, \f(CW\*(C`host:port\*(C'\fR, \f(CW\*(C`port/proto\*(C'\fR, or \f(CW\*(C`port\*(C'\fR, where
\&\fIhost\fR represents a hostname residing on the local box, where \fIport\fR
represents either the number of the port (eg. \*(L"80\*(R") or the service
designation (eg. \*(L"http\*(R"), where \fIipv\fR represents the \s-1IP\s0 protocol version
(IPv4 or IPv6 or IPv*) and where \fIproto\fR represents the protocol to be
used. See Net::Server::Proto.  The following are some valid port
strings:
.Sp
.Vb 9
\&    20203                            # port only
\&    localhost:20203                  # host and port
\&    localhost:http                   # localhost bound to port 80
\&    localhost:20203/tcp              # host, port, protocol
\&    localhost:20203/tcp/IPv*         # host, port, protocol and family
\&    localhost, 20203, tcp, IPv*      # same
\&    localhost | 20203 | tcp | IPv*   # same
\&    localhost:20203/IPv*             # bind any configured interfaces for IPv4 or 6 (default)
\&    localhost:20203/IPv4/IPv6        # bind localhost on IPv4 and 6 (fails if it cannot do both)
\&
\&    *:20203                          # bind all local interfaces
.Ve
.Sp
Additionally, when passed in the code (non-commandline, and non-config),
the port may be passed as a hashref or array hashrefs of information:
.Sp
.Vb 6
\&    port => {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 6,     # IPv6 only
\&        proto => \*(Aqudp\*(Aq, # UDP protocol
\&    }
\&
\&    port => [{
\&        host  => \*(Aq*\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 4,     # IPv4 only
\&        proto => \*(Aqtcp\*(Aq, # (default)
\&    }, {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20204\*(Aq,
\&        ipv   => \*(Aq*\*(Aq,      # default \- all IPv4 and IPv6 interfaces tied to localhost
\&        proto => \*(Aqssleay\*(Aq, # or ssl \- Using SSL
\&    }],
.Ve
.Sp
An explicit \fIhost\fR given in a port specification overrides a default
binding address (a \f(CW\*(C`host\*(C'\fR setting, see below).  The \fIhost\fR part may
be enclosed in square brackets, but when it is a numerical IPv6
address it \fBshould\fR be enclosed in square brackets to avoid ambiguity
in parsing a port number, e.g.: \*(L"[::1]:80\*(R".  However you could also
use pipes, white space, or commas to separate these.  Note that host
and port number must come first.
.Sp
If the protocol is not specified, \fIproto\fR will default to the
\&\f(CW\*(C`proto\*(C'\fR specified in the arguments.  If \f(CW\*(C`proto\*(C'\fR is not specified
there it will default to \*(L"tcp\*(R".  If \fIhost\fR is not specified, \fIhost\fR
will default to \f(CW\*(C`host\*(C'\fR specified in the arguments.  If \f(CW\*(C`host\*(C'\fR is not
specified there it will default to \*(L"*\*(R".  Default port is 20203.
Configuration passed to new or run may be either a scalar containing a
single port number or an arrayref of ports.  If \f(CW\*(C`ipv\*(C'\fR is not specified
it will default to \*(L"*\*(R" (Any resolved addresses under IPv4 or IPv6).
.Sp
If you are working with unix sockets, you may also specify
\&\f(CW\*(C`socket_file|unix\*(C'\fR or \f(CW\*(C`socket_file|type|unix\*(C'\fR where type is \s-1SOCK_DGRAM\s0
or \s-1SOCK_STREAM.\s0
.Sp
On systems that support it, a port value of 0 may be used to ask
the \s-1OS\s0 to auto-assign a port.  The value of the auto-assigned port
will be stored in the NS_port property of the Net::Server::Proto::TCP
object and is also available in the sockport method.  When the server
is processing a request, the \f(CW$self\fR\->{server}\->{sockport} property
contains the port that was connected through.
.IP "host" 4
.IX Item "host"
Local host or addr upon which to bind port.  If a value of '*' is
given, the server will bind that port on all available addresses on
the box.  The \f(CW\*(C`host\*(C'\fR argument provides a default local host address
if the \f(CW\*(C`port\*(C'\fR argument omits a host specification.  See
Net::Server::Proto. See IO::Socket.  Configuration passed to new
or run may be either a scalar containing a single host or an arrayref
of hosts \- if the hosts array is shorter than the ports array, the
last host entry will be used to augment the hosts arrary to the size
of the ports array.
.Sp
If an IPv4 address is passed, an IPv4 socket will be created.  If an
IPv6 address is passed, an IPv6 socket will be created.  If a hostname
is given, Net::Server will look at the value of ipv (default IPv4) to
determine which type of socket to create.  Optionally the ipv
specification can be passed as part of the hostname.
.Sp
.Vb 1
\&    host => "127.0.0.1",  # an IPv4 address
\&
\&    host => "::1",        # an IPv6 address
\&
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (default any IPv4 and/or IPv6)
\&
\&    host => \*(Aqlocalhost/IPv*\*(Aq,  # same
\&
\&    ipv  => 6,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv6)
\&
\&    ipv  => 4,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv4)
\&
\&    ipv  => \*(AqIPv4 IPv6\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (requires IPv6 and IPv4)
\&
\&    host => \*(Aq*\*(Aq,          # any local interfaces (any IPv6 or IPv4)
\&
\&    host => \*(Aq*/IPv*\*(Aq,     # same (any IPv6 or IPv4)
\&
\&    ipv  => 4,
\&    host => \*(Aq*\*(Aq,          # any local IPv4 interfaces interfaces
.Ve
.IP "proto" 4
.IX Item "proto"
See Net::Server::Proto.
Protocol to use when binding ports.  See IO::Socket.  As of release
2.0, Net::Server supports tcp, udp, and unix, unixdgram, ssl, and
ssleay.  Other types will need to be added later (or custom modules
extending the Net::Server::Proto class may be used).  Configuration
passed to new or run may be either a scalar containing a single proto
or an arrayref of protos \- if the protos array is shorter than the
ports array, the last proto entry will be used to augment the protos
arrary to the size of the ports array.
.Sp
Additionally the proto may also contain the ipv specification.
.IP "ipv (IPv4 and IPv6)" 4
.IX Item "ipv (IPv4 and IPv6)"
See Net::Server::Proto.
.Sp
IPv6 is now available under Net::Server.  It will be used
automatically if an IPv6 address is passed, or if the ipv is set
explicitly to IPv6, or if ipv is left as the default value of IPv*.
This is a significant change from version 2.004 and earlier where the
default value was IPv4.  However, the previous behavior led to
confusion on IPv6 only hosts, and on hosts that only had IPv6 entries
for a local hostname.  Trying to pass an IPv4 address when ipv is set
to 6 (only 6 \- not * or 4) will result in an error.
.Sp
.Vb 2
\&    localhost:20203 # will use IPv6 if there is a corresponding entry for localhost
\&                    # it will also use IPv4 if there is a corresponding v4 entry for localhost
\&
\&    localhost:20203:IPv*  # same (default)
\&
\&    localhost:20203:IPv6  # will use IPv6
\&
\&    [::1]:20203           # will use IPv6 (IPv6 style address)
\&
\&    localhost:20203:IPv4  # will use IPv4
\&
\&    127.0.0.1:20203       # will use IPv4 (IPv4 style address
\&
\&    localhost:20203:IPv4:IPv6 # will bind to both v4 and v6 \- fails otherwise
\&
\&    # or as a hashref as
\&    port => {
\&        host => "localhost",
\&        ipv  => 6, # only binds IPv6
\&    }
\&
\&    port => {
\&        host => "localhost",
\&        ipv  => 4, # only binds IPv4
\&    }
\&
\&    port => {
\&        host => "::1",
\&        ipv  => "IPv6", # same as passing "6"
\&    }
\&
\&    port => {
\&        host => "localhost/IPv*",       # any IPv4 or IPv6
\&    }
\&
\&    port => {
\&        host => "localhost IPv4 IPv6",  # must create both
\&    }
.Ve
.Sp
In many proposed Net::Server solutions, IPv* was enabled by default.
For versions 2.000 through 2.004, the previous default of IPv4 was
used.  We have attempted to make it easy to set IPv4, IPv6, or IPv*.
If you do not want or need IPv6, simply set ipv to 4, pass IPv4 along
in the port specification, set \f(CW$ENV\fR{'\s-1IPV\s0'}=4; before running the
server, or uninstall IO::Socket::INET6.
.Sp
On my local box the following command results in the following output:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "localhost")\*(Aq
\&
\&    Resolved [localhost]:20203 to [::1]:20203, IPv6
\&    Resolved [localhost]:20203 to [127.0.0.1]:20203, IPv4
\&    Binding to TCP port 20203 on host ::1 with IPv6
\&    Binding to TCP port 20203 on host 127.0.0.1 with IPv4
.Ve
.Sp
My local box has IPv6 enabled and there are entries for localhost on
both IPv6 ::1 and IPv4 127.0.0.1.  I could also choose to explicitly
bind ports rather than depending upon ipv => \*(L"*\*(R" to resolve them for
me as in the following:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => [20203,20203], host => "localhost", ipv => [4,6])\*(Aq
\&
\&    Binding to TCP port 20203 on host localhost with IPv4
\&    Binding to TCP port 20203 on host localhost with IPv6
.Ve
.Sp
There is a special case of using host => \*(L"*\*(R" as well as ipv => \*(L"*\*(R".
The Net::Server::Proto::_bindv6only method is used to check the system
setting for \f(CW\*(C`sysctl \-n net.ipv6.bindv6only\*(C'\fR (or
net.inet6.ip6.v6only).  If this setting is false, then an IPv6 socket
will listen for the corresponding IPv4 address.  For example the
address [::] (IPv6 equivalent of \s-1INADDR_ANY\s0) will also listen for
0.0.0.0.  The address ::FFFF:127.0.0.1 (IPv6) would also listen to
127.0.0.1 (IPv4).  In this case, only one socket will be created
because it will handle both cases (an error is returned if an attempt
is made to listen to both addresses when bindv6only is false).
.Sp
However, if net.ipv6.bindv6only (or equivalent) is true, then a
hostname (such as *) resolving to both a IPv4 entry as well as an IPv6
will result in both an IPv4 socket as well as an IPv6 socket.
.Sp
On my linux box which defaults to net.ipv6.bindv6only=0, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Not including resolved host [0.0.0.0] IPv4 because it will be handled by [::] IPv6
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
If I issue a \f(CW\*(C`sudo /sbin/sysctl \-w net.ipv6.bindv6only=1\*(C'\fR, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [0.0.0.0]:8080, IPv4
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Binding to TCP port 8080 on host 0.0.0.0 with IPv4
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
\&\s-1BSD\s0 differs from linux and generally defaults to
net.inet6.ip6.v6only=0.  If it cannot be determined on your \s-1OS,\s0 it
will default to false and the log message will change from \*(L"it will be
handled\*(R" to \*(L"it should be handled\*(R" (if you have a non-resource
intensive way to check on your platform, feel free to email me).  Be
sure to check the logs as you test your server to make sure you have
bound the ports you desire.  You can always pass in individual
explicit IPv4 and IPv6 port specifications if you need.  For example,
if your system has both IPv4 and IPv6 interfaces but you'd only like
to bind to IPv6 entries, then you should use a hostname of [::]
instead of [*].
.Sp
If bindv6only (or equivalent) is false, and you receive an IPv4
connection on a bound IPv6 port, the textual representation of the
peer's IPv4 address will typically be in a form of an IPv4\-mapped IPv6
addresses, e.g. \*(L"::FFFF:127.0.0.1\*(R" .
.Sp
The ipv parameter was chosen because it does not conflict with any
other existing usage, it is very similar to ipv4 or ipv6, it allows
for user code to not need to know about Socket::AF_INET or
Socket6::AF_INET6 or Socket::AF_UNSPEC, and it is short.
.IP "listen" 4
.IX Item "listen"
See IO::Socket.  Not used with udp protocol (or \s-1UNIX SOCK_DGRAM\s0).
.IP "reverse_lookups" 4
.IX Item "reverse_lookups"
Specify whether to lookup the hostname of the connected \s-1IP.\s0
Information is cached in server object under \f(CW\*(C`peerhost\*(C'\fR property.
Default is to not use reverse_lookups (undef).
.IP "allow/deny" 4
.IX Item "allow/deny"
May be specified multiple times.  Contains regex to compare to
incoming peeraddr or peerhost (if reverse_lookups has been enabled).
If allow or deny options are given, the incoming client must match an
allow and not match a deny or the client connection will be closed.
Defaults to empty array refs.
.IP "cidr_allow/cidr_deny" 4
.IX Item "cidr_allow/cidr_deny"
May be specified multiple times.  Contains a \s-1CIDR\s0 block to compare to
incoming peeraddr.  If cidr_allow or cidr_deny options are given, the
incoming client must match a cidr_allow and not match a cidr_deny or
the client connection will be closed.  Defaults to empty array refs.
.IP "chroot" 4
.IX Item "chroot"
Directory to chroot to after bind process has taken place and the
server is still running as root.  Defaults to undef.
.IP "user" 4
.IX Item "user"
Userid or username to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`user\*(C'\fR equal to \*(L"root\*(R".
.IP "group" 4
.IX Item "group"
Groupid or groupname to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`group\*(C'\fR equal to \*(L"root\*(R".
.IP "background" 4
.IX Item "background"
Specifies whether or not the server should fork after the bind method
to release itself from the command line.  Defaults to undef.  Process
will also background if \f(CW\*(C`setsid\*(C'\fR is set.
.IP "setsid" 4
.IX Item "setsid"
Specifies whether or not the server should fork after the bind method
to release itself from the command line and then run the
\&\f(CW\*(C`POSIX::setsid()\*(C'\fR command to truly daemonize.  Defaults to undef.  If
a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0 will
automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT. \s0 This will prevent any output from ending up at the terminal.
.IP "no_close_by_child" 4
.IX Item "no_close_by_child"
Boolean.  Specifies whether or not a forked child process has
permission or not to shutdown the entire server process.  If set to 1,
the child may \s-1NOT\s0 signal the parent to shutdown all children.  Default
is undef (not set).
.IP "no_client_stdout" 4
.IX Item "no_client_stdout"
Boolean.  Default undef (not set).  Specifies that \s-1STDIN\s0 and \s-1STDOUT\s0
should not be opened on the client handle once a connection has been
accepted.  By default the Net::Server will open \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client socket making it easier for many types of scripts to read
directly from and write directly to the socket using normal print and
read methods.  Disabling this is useful on clients that may be opening
their own connections to \s-1STDIN\s0 and \s-1STDOUT.\s0
.Sp
This option has no affect on \s-1STDIN\s0 and \s-1STDOUT\s0 which has a magic client
property that is tied to the already open \s-1STDIN\s0 and \s-1STDOUT.\s0
.IP "leave_children_open_on_hup" 4
.IX Item "leave_children_open_on_hup"
Boolean.  Default undef (not set).  If set, the parent will not
attempt to close child processes if the parent receives a \s-1SIG HUP.\s0
The parent will rebind the the open port and begin tracking a fresh
set of children.
.Sp
Children of a Fork server will exit after their current request.
Children of a Prefork type server will finish the current request and
then exit.
.Sp
Note \- the newly restarted parent will start up a fresh set of servers
on fork servers.  The new parent will attempt to keep track of the
children from the former parent but custom communication channels
(open pipes from the child to the old parent) will no longer be
available to the old child processes.  New child processes will still
connect properly to the new parent.
.IP "sig_passthrough" 4
.IX Item "sig_passthrough"
Default none.  Allow for passing requested signals through to
children.  Takes a single signal name, a comma separated list of
names, or an arrayref of signal names.  It first sends the signals to
the children before calling any currently registered signal by that
name.
.IP "tie_client_stdout" 4
.IX Item "tie_client_stdout"
Default undef.  If set will use Net::Server::TiedHandle tied interface
for \s-1STDIN\s0 and \s-1STDOUT. \s0 This interface allows \s-1SSL\s0 and \s-1SSLEAY\s0 to work.
It also allows for intercepting read and write via the
tied_stdin_callback and tied_stdout_callback.
.IP "tied_stdin_callback" 4
.IX Item "tied_stdin_callback"
Default undef.  Called during a read of \s-1STDIN\s0 data if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other input operation.
.IP "tied_stdout_callback" 4
.IX Item "tied_stdout_callback"
Default undef.  Called during a write of data to \s-1STDOUT\s0 if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other output operation.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
All of the \f(CW\*(C`ARGUMENTS\*(C'\fR listed above become properties of the server
object under the same name.  These properties, as well as other
internal properties, are available during hooks and other method
calls.
.PP
The structure of a Net::Server object is shown below:
.PP
.Vb 6
\&    $self = bless({
\&        server => {
\&            key1 => \*(Aqval1\*(Aq,
\&            # more key/vals
\&        },
\&    }, \*(AqNet::Server\*(Aq);
.Ve
.PP
This structure was chosen so that all server related properties are
grouped under a single key of the object hashref.  This is so that
other objects could layer on top of the Net::Server object class and
still have a fairly clean namespace in the hashref.
.PP
You may get and set properties in two ways.  The suggested way is to
access properties directly via
.PP
.Vb 1
\&    my $val = $self\->{server}\->{key1};
.Ve
.PP
Accessing the properties directly will speed the server process \-
though some would deem this as bad style.  A second way has been
provided for object oriented types who believe in methods.  The second
way consists of the following methods:
.PP
.Vb 2
\&    my $val = $self\->get_property( \*(Aqkey1\*(Aq );
\&    my $self\->set_property( key1 => \*(Aqval1\*(Aq );
.Ve
.PP
Properties are allowed to be changed at any time with caution (please
do not undef the sock property or you will close the client
connection).
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server\*(C'\fR allows for the use of a configuration file to read in
server parameters.  The format of this conf file is simple key value
pairs.  Comments and blank lines are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    # logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    # optional syslog directive
\&    # used in place of log_file above
\&    #log_file       Sys::Syslog
\&    #syslog_logsock unix
\&    #syslog_ident   myserver
\&    #syslog_logopt  pid|cons
\&
\&    # access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&    cidr_allow  127.0.0.0/8
\&    cidr_allow  192.0.2.0/24
\&    cidr_deny   192.0.2.4/30
\&
\&    # background the process?
\&    background  1
\&
\&    # ports to bind (this should bind
\&    # 127.0.0.1:20205 on IPv6 and
\&    # localhost:20204 on IPv4)
\&    # See Net::Server::Proto
\&    host        127.0.0.1
\&    ipv         IPv6
\&    port        localhost:20204/IPv4
\&    port        20205
\&
\&    # reverse lookups ?
\&    # reverse_lookups on
\&
\&  #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to
override, easy to hook, fashion.  The basic flow is
shown below.  This is the flow of the \f(CW\*(C`$self\->run\*(C'\fR method.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop;
\&
\&    ### routines inside a standard $self\->loop
\&    # $self\->accept;
\&    # $self\->run_client_connection;
\&    # $self\->done;
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->server_close;
.Ve
.PP
The server then exits.
.PP
During the client processing phase
(\f(CW\*(C`$self\->run_client_connection\*(C'\fR), the following
represents the program flow:
.PP
.Vb 1
\&    $self\->post_accept;
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook;
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&        $self\->process_request;
\&
\&    } else {
\&
\&        $self\->request_denied_hook;
\&
\&    }
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->post_process_request;
\&
\&    $self\->post_client_connection_hook;
.Ve
.PP
The process then loops and waits for the next connection.  For a more
in depth discussion, please read the code.
.PP
During the server shutdown phase (\f(CW\*(C`$self\->server_close\*(C'\fR), the
following represents the program flow:
.PP
.Vb 1
\&    $self\->close_children;  # if any
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&    }
\&
\&    $self\->shutdown_sockets;
\&
\&    $self\->server_exit;
.Ve
.SH "MAIN SERVER METHODS"
.IX Header "MAIN SERVER METHODS"
.ie n .IP """$self\->run""" 4
.el .IP "\f(CW$self\->run\fR" 4
.IX Item "$self->run"
This method incorporates the main process flow.  This flow is listed
above.
.Sp
The method run may be called in any of the following ways.
.Sp
.Vb 1
\&     MyPackage\->run(port => 20201);
\&
\&     MyPackage\->new({port => 20201})\->run;
\&
\&     my $obj = bless {server=>{port => 20201}}, \*(AqMyPackage\*(Aq;
\&     $obj\->run;
.Ve
.Sp
The \->run method should typically be the last method called in a
server start script (the server will exit at the end of the \->run
method).
.ie n .IP """$self\->configure""" 4
.el .IP "\f(CW$self\->configure\fR" 4
.IX Item "$self->configure"
This method attempts to read configurations from the commandline, from
the run method call, or from a specified conf_file (the conf_file may
be specified by passed in parameters, or in the default_values).  All
of the configured parameters are then stored in the {\*(L"server\*(R"}
property of the Server object.
.ie n .IP """$self\->post_configure""" 4
.el .IP "\f(CW$self\->post_configure\fR" 4
.IX Item "$self->post_configure"
The post_configure hook begins the startup of the server.  During this
method running server instances are checked for, pid_files are
created, log_files are created, Sys::Syslog is initialized (as
needed), process backgrounding occurs and the server closes \s-1STDIN\s0 and
\&\s-1STDOUT \s0(as needed).
.ie n .IP """$self\->pre_bind""" 4
.el .IP "\f(CW$self\->pre_bind\fR" 4
.IX Item "$self->pre_bind"
This method is used to initialize all of the socket objects used by
the server.
.ie n .IP """$self\->bind""" 4
.el .IP "\f(CW$self\->bind\fR" 4
.IX Item "$self->bind"
This method actually binds to the inialized sockets (or rebinds if the
server has been HUPed).
.ie n .IP """$self\->post_bind""" 4
.el .IP "\f(CW$self\->post_bind\fR" 4
.IX Item "$self->post_bind"
During this method priveleges are dropped.  The \s-1INT, TERM,\s0 and \s-1QUIT\s0
signals are set to run server_close.  Sig \s-1PIPE\s0 is set to \s-1IGNORE. \s0 Sig
\&\s-1CHLD\s0 is set to sig_chld.  And sig \s-1HUP\s0 is set to call sig_hup.
.Sp
Under the Fork, PreFork, and PreFork simple personalities, these
signals are registered using Net::Server::SIG to allow for safe signal
handling.
.ie n .IP """$self\->loop""" 4
.el .IP "\f(CW$self\->loop\fR" 4
.IX Item "$self->loop"
During this phase, the server accepts incoming connections.  The
behavior of how the accepting occurs and if a child process handles
the connection is controlled by what type of Net::Server personality
the server is using.
.Sp
Net::Server and Net::Server single accept only one connection at a
time.
.Sp
Net::Server::INET runs one connection and then exits (for use by inetd
or xinetd daemons).
.Sp
Net::Server::MultiPlex allows for one process to simultaneously handle
multiple connections (but requires rewriting the process_request code
to operate in a more \*(L"packet-like\*(R" manner).
.Sp
Net::Server::Fork forks off a new child process for each incoming
connection.
.Sp
Net::Server::PreForkSimple starts up a fixed number of processes that
all accept on incoming connections.
.Sp
Net::Server::PreFork starts up a base number of child processes which
all accept on incoming connections.  The server throttles the number
of processes running depending upon the number of requests coming in
(similar to concept to how Apache controls its child processes in a
PreFork server).
.Sp
Read the documentation for each of the types for more information.
.ie n .IP """$self\->server_close""" 4
.el .IP "\f(CW$self\->server_close\fR" 4
.IX Item "$self->server_close"
This method is called once the server has been signaled to end, or
signaled for the server to restart (via \s-1HUP\s0), or the loop method has
been exited.
.Sp
This method takes care of cleaning up any remaining child processes,
setting appropriate flags on sockets (for HUPing), closing up logging,
and then closing open sockets.
.Sp
Can optionally be passed an exit value that will be passed to the
server_exit call.
.ie n .IP """$self\->server_exit""" 4
.el .IP "\f(CW$self\->server_exit\fR" 4
.IX Item "$self->server_exit"
This method is called at the end of server_close.  It calls exit, but
may be overridden to do other items.  At this point all services
should be shut down.
.Sp
Can optionally be passed an exit value that will be passed to the exit call.
.SH "MAIN CLIENT CONNECTION METHODS"
.IX Header "MAIN CLIENT CONNECTION METHODS"
.ie n .IP """$self\->run_client_connection""" 4
.el .IP "\f(CW$self\->run_client_connection\fR" 4
.IX Item "$self->run_client_connection"
This method is run after the server has accepted and received a client
connection.  The full process flow is listed above under \s-1PROCESS
FLOWS. \s0 This method takes care of handling each client connection.
.ie n .IP """$self\->post_accept""" 4
.el .IP "\f(CW$self\->post_accept\fR" 4
.IX Item "$self->post_accept"
This method opens \s-1STDIN\s0 and \s-1STDOUT\s0 to the client socket.  This allows
any of the methods during the run_client_connection phase to print
directly to and read directly from the client socket.
.ie n .IP """$self\->get_client_info""" 4
.el .IP "\f(CW$self\->get_client_info\fR" 4
.IX Item "$self->get_client_info"
This method looks up information about the client connection such as
ip address, socket type, and hostname (as needed).
.ie n .IP """$self\->allow_deny""" 4
.el .IP "\f(CW$self\->allow_deny\fR" 4
.IX Item "$self->allow_deny"
This method uses the rules defined in the allow and deny configuration
parameters to determine if the ip address should be accepted.
.ie n .IP """$self\->process_request""" 4
.el .IP "\f(CW$self\->process_request\fR" 4
.IX Item "$self->process_request"
This method is intended to handle all of the client communication.  At
this point \s-1STDIN\s0 and \s-1STDOUT\s0 are opened to the client, the ip address
has been verified.  The server can then interact with the client
connection according to whatever \s-1API\s0 or protocol the server is
implementing.  Note that the stub implementation uses \s-1STDIN\s0 and \s-1STDOUT\s0
and will not work if the no_client_stdout flag is set.
.Sp
This is the main method to override.
.Sp
The default method implements a simple echo server that will repeat
whatever is sent.  It will quit the child if \*(L"quit\*(R" is sent, and will
exit the server if \*(L"exit\*(R" is sent.
.Sp
As of version 2.000, the client handle is passed as an argument.
.ie n .IP """$self\->post_process_request""" 4
.el .IP "\f(CW$self\->post_process_request\fR" 4
.IX Item "$self->post_process_request"
This method is used to clean up the client connection and to handle
any parent/child accounting for the forking servers.
.SH "HOOKS"
.IX Header "HOOKS"
\&\f(CW\*(C`Net::Server\*(C'\fR provides a number of \*(L"hooks\*(R" allowing for servers
layered on top of \f(CW\*(C`Net::Server\*(C'\fR to respond at different levels of
execution without having to \*(L"\s-1SUPER\*(R"\s0 class the main built-in methods.
The placement of the hooks can be seen in the \s-1PROCESS FLOW\s0 section.
.PP
Almost all of the default hook methods do nothing.  To use a hook you
simply need to override the method in your subclass.  For example to
add your own post_configure_hook you could do something like the
following:
.PP
.Vb 1
\&    package MyServer;
\&
\&    sub post_configure_hook {
\&        my $self = shift;
\&        my $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&        # do some validation here
\&    }
.Ve
.PP
The following describes the hooks available in the plain Net::Server
class (other flavors such as Fork or PreFork have additional hooks).
.ie n .IP """$self\->configure_hook()""" 4
.el .IP "\f(CW$self\->configure_hook()\fR" 4
.IX Item "$self->configure_hook()"
This hook takes place immediately after the \f(CW\*(C`\->run()\*(C'\fR method is
called.  This hook allows for setting up the object before any built
in configuration takes place.  This allows for custom configurability.
.ie n .IP """$self\->post_configure_hook()""" 4
.el .IP "\f(CW$self\->post_configure_hook()\fR" 4
.IX Item "$self->post_configure_hook()"
This hook occurs just after the reading of configuration parameters
and initiation of logging and pid_file creation.  It also occurs
before the \f(CW\*(C`\->pre_bind()\*(C'\fR and \f(CW\*(C`\->bind()\*(C'\fR methods are called.
This hook allows for verifying configuration parameters.
.ie n .IP """$self\->post_bind_hook()""" 4
.el .IP "\f(CW$self\->post_bind_hook()\fR" 4
.IX Item "$self->post_bind_hook()"
This hook occurs just after the bind process and just before any
chrooting, change of user, or change of group occurs.  At this point
the process will still be running as the user who started the server.
.ie n .IP """$self\->pre_loop_hook()""" 4
.el .IP "\f(CW$self\->pre_loop_hook()\fR" 4
.IX Item "$self->pre_loop_hook()"
This hook occurs after chroot, change of user, and change of group has
occured.  It allows for preparation before looping begins.
.ie n .IP """$self\->can_read_hook()""" 4
.el .IP "\f(CW$self\->can_read_hook()\fR" 4
.IX Item "$self->can_read_hook()"
This hook occurs after a socket becomes readible on an
accept_multi_port request (accept_multi_port is used if there are
multiple bound ports to accept on, or if the \*(L"multi_port\*(R"
configuration parameter is set to true).  This hook is intended to
allow for processing of arbitrary handles added to the IO::Select used
for the accept_multi_port.  These handles could be added during the
post_bind_hook.  No internal support is added for processing these
handles or adding them to the IO::Socket.  Care must be used in how
much occurs during the can_read_hook as a long response time will
result in the server being susceptible to \s-1DOS\s0 attacks.  A return value
of true indicates that the Server should not pass the readible handle
on to the post_accept and process_request phases.
.Sp
It is generally suggested that other avenues be pursued for sending
messages via sockets not created by the Net::Server.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs after a client has connected to the server.  At this
point \s-1STDIN\s0 and \s-1STDOUT\s0 are mapped to the client socket.  This hook
occurs before the processing of the request.
.ie n .IP """$self\->allow_deny_hook()""" 4
.el .IP "\f(CW$self\->allow_deny_hook()\fR" 4
.IX Item "$self->allow_deny_hook()"
This hook allows for the checking of ip and host information beyond
the \f(CW\*(C`$self\->allow_deny()\*(C'\fR routine.  If this hook returns 1, the
client request will be processed, otherwise, the request will be
denied processing.
.Sp
As of version 2.000, the client connection is passed as an argument.
.ie n .IP """$self\->request_denied_hook()""" 4
.el .IP "\f(CW$self\->request_denied_hook()\fR" 4
.IX Item "$self->request_denied_hook()"
This hook occurs if either the \f(CW\*(C`$self\->allow_deny()\*(C'\fR or
\&\f(CW\*(C`$self\->allow_deny_hook()\*(C'\fR have taken place.
.ie n .IP """$self\->post_process_request_hook()""" 4
.el .IP "\f(CW$self\->post_process_request_hook()\fR" 4
.IX Item "$self->post_process_request_hook()"
This hook occurs after the processing of the request, but before the
client connection has been closed.
.ie n .IP """$self\->post_client_connection_hook""" 4
.el .IP "\f(CW$self\->post_client_connection_hook\fR" 4
.IX Item "$self->post_client_connection_hook"
This is one final hook that occurs at the very end of the
run_client_connection method.  At this point all other methods and
hooks that will run during the run_client_connection have finished and
the client connection has already been closed.
.Sp
item \f(CW\*(C`$self\->other_child_died_hook($pid)\*(C'\fR
.Sp
Net::Server takes control of signal handling and child process
cleanup; this makes it difficult to tell when a child process
terminates if that child process was not started by Net::Server
itself.  If Net::Server notices another child process dying that it
did not start, it will fire this hook with the \s-1PID\s0 of the terminated
process.
.ie n .IP """$self\->pre_server_close_hook()""" 4
.el .IP "\f(CW$self\->pre_server_close_hook()\fR" 4
.IX Item "$self->pre_server_close_hook()"
This hook occurs before the server begins shutting down.
.ie n .IP """$self\->write_to_log_hook""" 4
.el .IP "\f(CW$self\->write_to_log_hook\fR" 4
.IX Item "$self->write_to_log_hook"
This hook handles writing to log files.  The default hook is to write
to \s-1STDERR,\s0 or to the filename contained in the parameter \f(CW\*(C`log_file\*(C'\fR.
The arguments passed are a log level of 0 to 4 (4 being very verbose),
and a log line.  If log_file is equal to \*(L"Sys::Syslog\*(R", then logging
will go to Sys::Syslog and will bypass the write_to_log_hook.
.ie n .IP """$self\->fatal_hook""" 4
.el .IP "\f(CW$self\->fatal_hook\fR" 4
.IX Item "$self->fatal_hook"
This hook occurs when the server has encountered an unrecoverable
error.  Arguments passed are the error message, the package, file, and
line number.  The hook may close the server, but it is suggested that
it simply return and use the built in shut down features.
.ie n .IP """$self\->post_child_cleanup_hook""" 4
.el .IP "\f(CW$self\->post_child_cleanup_hook\fR" 4
.IX Item "$self->post_child_cleanup_hook"
This hook occurs in the parent server process after all children have
been shut down and just before the server either restarts or exits.
It is intended for additional cleanup of information.  At this point
pid_files and lockfiles still exist.
.ie n .IP """$self\->restart_open_hook""" 4
.el .IP "\f(CW$self\->restart_open_hook\fR" 4
.IX Item "$self->restart_open_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before reopening to the filenos of the sockets
that were already opened.
.ie n .IP """$self\->restart_close_hook""" 4
.el .IP "\f(CW$self\->restart_close_hook\fR" 4
.IX Item "$self->restart_close_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before restarting the server via exec.
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook is called during the forking servers.  It is also called
during run_dequeue.  It runs just after the fork and after signals
have been cleaned up.  If it is a dequeue process, the string
\&'dequeue' will be passed as an argument.
.Sp
If your child processes will be needing random numbers, this
hook is a good location to initialize srand (forked processes
maintain the same random seed unless changed).
.Sp
.Vb 4
\&    sub child_init_hook {
\&        # from perldoc \-f srand
\&        srand(time ^ $$ ^ unpack "%L*", \`ps axww | gzip \-f\`);
\&    }
.Ve
.ie n .IP """$self\->pre_fork_hook()""" 4
.el .IP "\f(CW$self\->pre_fork_hook()\fR" 4
.IX Item "$self->pre_fork_hook()"
Similar to the child_init_hook, but occurs just before the fork.
.ie n .IP """$self\->child_finish_hook()""" 4
.el .IP "\f(CW$self\->child_finish_hook()\fR" 4
.IX Item "$self->child_finish_hook()"
Similar to the child_init_hook, but ran when the forked process is
about to finish up.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .IP """$self\->default_values""" 4
.el .IP "\f(CW$self\->default_values\fR" 4
.IX Item "$self->default_values"
Allow for returning configuration values that will be used if no other
value could be found.
.Sp
Should return a hashref.
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            port => 20201,
\&        };
\&    }
.Ve
.ie n .IP """$self\->handle_syslog_error""" 4
.el .IP "\f(CW$self\->handle_syslog_error\fR" 4
.IX Item "$self->handle_syslog_error"
Called when log_file is set to 'Sys::Syslog' and an error occurs while
writing to the syslog.  It is passed two arguments, the value of $@,
and an arrayref containing the arguments that were passed to the log
method when the error occured.
.ie n .IP """$self\->log""" 4
.el .IP "\f(CW$self\->log\fR" 4
.IX Item "$self->log"
Parameters are a log_level and a message.
.Sp
If log_level is set to 'Sys::Syslog', the parameters may alternately
be a log_level, a format string, and format string parameters.  (The
second parameter is assumed to be a format string if additional
arguments are passed along).  Passing arbitrary format strings to
Sys::Syslog will allow the server to be vulnerable to exploit.  The
server maintainer should make sure that any string treated as a format
string is controlled.
.Sp
.Vb 1
\&    # assuming log_file = \*(AqSys::Syslog\*(Aq
\&
\&    $self\->log(1, "My Message with %s in it");
\&    # sends "%s", "My Message with %s in it" to syslog
\&
\&    $self\->log(1, "My Message with %s in it", "Foo");
\&    # sends "My Message with %s in it", "Foo" to syslog
.Ve
.Sp
If log_file is set to a file (other than Sys::Syslog), the message
will be appended to the log file by calling the write_to_log_hook.
.Sp
If the log_file is Sys::Syslog and an error occurs during write, the
handle_syslog_error method will be called and passed the error
exception.  The default option of handle_syslog_error is to die \- but
could easily be told to do nothing by using the following code in your
subclassed server:
.Sp
.Vb 1
\&    sub handle_syslog_error {}
.Ve
.Sp
It the log had been closed, you could attempt to reopen it in the
error handler with the following code:
.Sp
.Vb 4
\&    sub handle_syslog_error {
\&        my $self = shift;
\&        $self\->open_syslog;
\&    }
.Ve
.ie n .IP """$self\->new""" 4
.el .IP "\f(CW$self\->new\fR" 4
.IX Item "$self->new"
As of Net::Server 0.91 there is finally a \*(L"new\*(R" method.  This method
takes a class name and an argument hashref as parameters.  The
argument hashref becomes the \*(L"server\*(R" property of the object.
.Sp
.Vb 2
\&    package MyPackage;
\&    use base qw(Net::Server);
\&
\&    my $obj = MyPackage\->new({port => 20201});
\&
\&    # same as
\&
\&    my $obj = bless {server => {port => 20201}}, \*(AqMyPackage\*(Aq;
.Ve
.ie n .IP """$self\->open_syslog""" 4
.el .IP "\f(CW$self\->open_syslog\fR" 4
.IX Item "$self->open_syslog"
Called during post_configure when the log_file option is set to
\&'Sys::Syslog'.  By default it use the parsed configuration options
listed in this document.  If more custom behavior is desired, the
method could be overridden and Sys::Syslog::openlog should be called
with the custom parameters.
.ie n .IP """$self\->shutdown_sockets""" 4
.el .IP "\f(CW$self\->shutdown_sockets\fR" 4
.IX Item "$self->shutdown_sockets"
This method will close any remaining open sockets.  This is called at
the end of the server_close method.
.SH "RESTARTING"
.IX Header "RESTARTING"
Each of the server personalities (except for \s-1INET\s0), support restarting
via a \s-1HUP\s0 signal (see \*(L"kill \-l\*(R").  When a \s-1HUP\s0 is received, the server
will close children (if any), make sure that sockets are left open,
and re-exec using the same commandline parameters that initially
started the server.  (Note: for this reason it is important that \f(CW@ARGV\fR
is not modified until \f(CW\*(C`\->run\*(C'\fR is called).
.PP
The Net::Server will attempt to find out the commandline used for
starting the program.  The attempt is made before any configuration
files or other arguments are processed.  The outcome of this attempt
is stored using the method \f(CW\*(C`\->commandline\*(C'\fR.  The stored
commandline may also be retrieved using the same method name.  The
stored contents will undoubtedly contain Tainted items that will cause
the server to die during a restart when using the \-T flag (Taint
mode).  As it is impossible to arbitrarily decide what is taint safe
and what is not, the individual program must clean up the tainted
items before doing a restart.
.PP
.Vb 2
\&    sub configure_hook{
\&        my $self = shift;
\&
\&        ### see the contents
\&        my $ref  = $self\->commandline;
\&        use Data::Dumper;
\&        print Dumper $ref;
\&
\&        ### arbitrary untainting \- VERY dangerous
\&        my @untainted = map {/(.+)/;$1} @$ref;
\&
\&        $self\->commandline(\e@untainted)
\&    }
.Ve
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
Each of the Fork and PreFork personalities support graceful shutdowns
via the \s-1QUIT\s0 signal.  When a \s-1QUIT\s0 is received, the parent will signal
the children and then wait for them to exit.
.PP
All server personalities support the normal \s-1TERM\s0 and \s-1INT\s0 signal
shutdowns.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork and PreFork personalities have accepted
the \s-1TTIN\s0 and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers
is increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.PP
If the log_level is set to at 3, then the new value is displayed in
the logs.
.SH "FILES"
.IX Header "FILES"
The following files are installed as part of this distribution.
.PP
.Vb 11
\&    Net/Server.pm
\&    Net/Server/Fork.pm
\&    Net/Server/INET.pm
\&    Net/Server/MultiType.pm
\&    Net/Server/PreForkSimple.pm
\&    Net/Server/PreFork.pm
\&    Net/Server/Single.pm
\&    Net/Server/Daemonize.pm
\&    Net/Server/SIG.pm
\&    Net/Server/Proto.pm
\&    Net/Server/Proto/*.pm
.Ve
.SH "INSTALL"
.IX Header "INSTALL"
Download and extract tarball before running these commands in its base
directory:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul at seamons.com>
.SH "THANKS"
.IX Header "THANKS"
Thanks to Rob Brown (bbb at cpan.org) for help with miscellaneous
concepts such as tracking down the serialized select via flock ala
Apache and the reference to IO::Select making multiport servers
possible.  And for researching into allowing sockets to remain open
upon exec (making \s-1HUP\s0 possible).
.PP
Thanks to Jonathan J. Miner <miner at doit.wisc.edu> for patching a
blatant problem in the reverse lookups.
.PP
Thanks to Bennett Todd <bet at rahul.net> for pointing out a problem
in Solaris 2.5.1 which does not allow multiple children to accept on
the same port at the same time.  Also for showing some sample code
from Viktor Duchovni which now represents the semaphore option of the
serialize argument in the PreFork server.
.PP
Thanks to \fItraveler\fR and \fImerlyn\fR from http://perlmonks.org for
pointing me in the right direction for determining the protocol used
on a socket connection.
.PP
Thanks to Jeremy Howard <j+daemonize at howard.fm> for numerous
suggestions and for work on Net::Server::Daemonize.
.PP
Thanks to Vadim <vadim at hardison.net> for patches to implement
parent/child communication on PreFork.pm.
.PP
Thanks to Carl Lewis for suggesting \*(L"\-\*(R" in user names.
.PP
Thanks to Slaven Rezic for suggesing Reuse => 1 in Proto::UDP.
.PP
Thanks to Tim Watt for adding udp_broadcast to Proto::UDP.
.PP
Thanks to Christopher A Bongaarts for pointing out problems with the
Proto::SSL implementation that currently locks around the socket
accept and the \s-1SSL\s0 negotiation. See Net::Server::Proto::SSL.
.PP
Thanks to Alessandro Zummo for pointing out various bugs including
some in configuration, commandline args, and cidr_allow.
.PP
Thanks to various other people for bug fixes over the years.  These
and future thank-you's are available in the Changes file as well as
\&\s-1CVS\s0 comments.
.PP
Thanks to Ben Cohen and tye (on Permonks) for finding and diagnosing
more correct behavior for dealing with re-opening \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client handles.
.PP
Thanks to Mark Martinec for trouble shooting other problems with \s-1STDIN\s0
and \s-1STDOUT \s0(he proposed having a flag that is now the no_client_stdout
flag).
.PP
Thanks to David (\s-1DSCHWEI\s0) on cpan for asking for the nofatal option
with syslog.
.PP
Thanks to Andreas Kippnick and Peter Beckman for suggesting leaving
open child connections open during a \s-1HUP \s0(this is now available via
the leave_children_open_on_hup flag).
.PP
Thanks to \s-1LUPE\s0 on cpan for helping patch \s-1HUP\s0 with taint on.
.PP
Thanks to Michael Virnstein for fixing a bug in the check_for_dead
section of PreFork server.
.PP
Thanks to Rob Mueller for patching PreForkSimple to only open
lock_file once during parent call.  This patch should be portable on
systems supporting flock.  Rob also suggested not closing \s-1STDIN/STDOUT\s0
but instead reopening them to /dev/null to prevent spurious warnings.
Also suggested short circuit in post_accept if in \s-1UDP. \s0 Also for
cleaning up some of the child managment code of PreFork.
.PP
Thanks to Mark Martinec for suggesting additional log messages for
failure during accept.
.PP
Thanks to Bill Nesbitt and Carlos Velasco for pointing out double
decrement bug in PreFork.pm (rt #21271)
.PP
Thanks to John W. Krahn for pointing out glaring precended with
non-parened open and ||.
.PP
Thanks to Ricardo Signes for pointing out setuid bug for perl 5.6.1
(rt #21262).
.PP
Thanks to Carlos Velasco for updating the Syslog options (rt #21265).
And for additional fixes later.
.PP
Thanks to Steven Lembark for pointing out that no_client_stdout wasn't
working with the Multiplex server.
.PP
Thanks to Peter Beckman for suggesting allowing Sys::SysLog keyworks
be passed through the \->log method and for suggesting we allow more
types of characters through in syslog_ident.  Also to Peter Beckman
for pointing out that a poorly setup localhost will cause tests to
hang.
.PP
Thanks to Curtis Wilbar for pointing out that the Fork server called
post_accept_hook twice.  Changed to only let the child process call
this, but added the pre_fork_hook method.
.PP
And just a general Thanks You to everybody who is using Net::Server or
who has contributed fixes over the years.
.PP
Thanks to Paul Miller for some \->autoflush, FileHandle fixes.
.PP
Thanks to Patrik Wallstrom for suggesting handling syslog errors
better.
.PP
Thanks again to Rob Mueller for more logic cleanup for child
accounting in PreFork server.
.PP
Thanks to David Schweikert for suggesting handling setlogsock a little
better on newer versions of Sys::Syslog (>= 0.15).
.PP
Thanks to Mihail Nasedkin for suggesting adding a hook that is now
called post_client_connection_hook.
.PP
Thanks to Graham Barr for adding the ability to set the
check_for_spawn and min_child_ttl settings of the PreFork server.
.PP
Thanks to Daniel Kahn Gillmor for adding the other_child_died_hook.
.PP
Thanks to Dominic Humphries for helping not kill pid files on \s-1HUP.\s0
.PP
Thanks to Kristoffer Mo\*/llerho\*/j for fixing \s-1UDP\s0 on Multiplex.
.PP
Thanks to mishikal for patches for helping identify un-cleaned up
children.
.PP
Thanks to rpkelly and tim@retout for pointing out error in header
regex of \s-1HTTP.\s0
.PP
Thanks to dmcbride for some basic \s-1HTTP\s0 parsing fixes, as well as for
some broken tied handle fixes.
.PP
Thanks to Gareth for pointing out glaring bug issues with broken pipe
and semaphore serialization.
.PP
Thanks to \s-1CATONE\s0 for sending the idea for arbitrary signal passing to
children.  (See the sig_passthrough option)
.PP
Thanks to intrigeri@boum for pointing out and giving code ideas for
NS_port not functioning after a \s-1HUP.\s0
.PP
Thanks to Sergey Zasenko for adding sysread/syswrite support to \s-1SSLEAY\s0
as well as the base test.
.PP
Thanks to mbarbon@users. for adding tally dequeue to prefork server.
.PP
Thanks to stefanos@cpan for fixes to PreFork under Win32
.PP
Thanks to Mark Martinec for much of the initial work towards getting
IPv6 going.
.PP
Thanks to the munin developers and Nicolai Langfeldt for hosting the
development verion of Net::Server for so long and for fixes to the
allow_deny checking for IPv6 addresses.
.PP
Thanks to Tatsuhiko Miyagawa for feedback, and for suggesting adding
graceful shutdowns and hot deploy (max_servers adjustment).
.PP
Thanks to TONVOON@cpan for submitting a patch adding Log4perl functionality.
.PP
Thanks to Miko O'Sullivan for fixes to \s-1HTTP\s0 to correct tainting issues
and passing initial log fixes, and for patches to fix \s-1CLOSE\s0 on tied stdout
and various other \s-1HTTP\s0 issues.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::HTTP
.SH "TODO"
.IX Header "TODO"
Improve test suite to fully cover code (using Devel::Cover).  Anybody
that wanted to send me patches to the t/*.t tests that improved
coverage would earn a big thank you.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    Paul Seamons <paul at seamons.com>
\&    http://seamons.com/
\&
\&    Rob Brown <bbb at cpan.org>
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This package may be distributed under the terms of either the
.PP
.Vb 3
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
.Ve
.PP
All rights reserved.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1751:" 4
.IX Item "Around line 1751:"
Non-ASCII character seen before =encoding in 'Mo\*/llerho\*/j'. Assuming \s-1UTF\-8\s0
                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server5.16.3pm                          0100644 0001750 0001750 00000230000 12566241464 023711  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server 3"
.TH Net::Server 3 "2012-06-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server \- Extensible, general Perl server engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #!/usr/bin/perl \-w \-T
\&    package MyPackage;
\&
\&    use base qw(Net::Server);
\&
\&    sub process_request {
\&        my $self = shift;
\&        while (<STDIN>) {
\&            s/[\er\en]+$//;
\&            print "You said \*(Aq$_\*(Aq\e015\e012"; # basic echo
\&            last if /quit/i;
\&        }
\&    }
\&
\&    MyPackage\->run(port => 160, ipv => \*(Aq*\*(Aq);
\&
\&
\&    # one liner to get going quickly
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => 20208)\*(Aq
\&
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, any available IPv4 and IPv6 sockets will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
.Ve
.SH "FEATURES"
.IX Header "FEATURES"
.Vb 10
\&    * Full IPv6 support
\&    * Working SSL sockets and https (both with and without IO::Socket::SSL)
\&    * Single Server Mode
\&    * Inetd Server Mode
\&    * Preforking Simple Mode (PreForkSimple)
\&    * Preforking Managed Mode (PreFork)
\&    * Forking Mode
\&    * Multiplexing Mode using a single process
\&    * Multi port accepts on Single, Preforking, and Forking modes
\&    * Basic HTTP Daemon (supports IPv6, SSL, full apache style logs)
\&    * Basic PSGI Daemon
\&    * Simultaneous accept/recv on tcp/udp/unix, ssl/tcp, and IPv4/IPv6 sockets
\&    * Safe signal handling in Fork/PreFork avoids perl signal trouble
\&    * User customizable hooks
\&    * Chroot ability after bind
\&    * Change of user and group after bind
\&    * Basic allow/deny access control
\&    * Pluggable logging (Sys::Syslog, Log::Log4perl, log_file, STDERR, or your own)
\&    * HUP able server (clean restarts via sig HUP)
\&    * Graceful shutdowns (via sig QUIT)
\&    * Hot deploy in Fork and PreFork modes (via sig TTIN and TTOU)
\&    * Dequeue ability in all Fork and PreFork modes.
\&    * Taint clean
\&    * Written in Perl
\&    * Protection against buffer overflow
\&    * Clean process flow
\&    * Extensibility
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Server\*(C'\fR is an extensible, generic Perl server engine.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR attempts to be a generic server as in \f(CW\*(C`Net::Daemon\*(C'\fR
and \f(CW\*(C`NetServer::Generic\*(C'\fR.  It includes with it the ability to run as
an inetd process (\f(CW\*(C`Net::Server::INET\*(C'\fR), a single connection server
(\f(CW\*(C`Net::Server\*(C'\fR or \f(CW\*(C`Net::Server::Single\*(C'\fR), a forking server
(\f(CW\*(C`Net::Server::Fork\*(C'\fR), a preforking server which maintains a constant
number of preforked children (\f(CW\*(C`Net::Server::PreForkSimple\*(C'\fR), or as a
managed preforking server which maintains the number of children based
on server load (\f(CW\*(C`Net::Server::PreFork\*(C'\fR).  In all but the inetd type,
the server provides the ability to connect to one or to multiple
server ports.
.PP
The additional server types are made possible via \*(L"personalities\*(R" or
sub classes of the \f(CW\*(C`Net::Server\*(C'\fR.  By moving the multiple types of
servers out of the main \f(CW\*(C`Net::Server\*(C'\fR class, the \f(CW\*(C`Net::Server\*(C'\fR
concept is easily extended to other types (in the near future, we
would like to add a \*(L"Thread\*(R" personality).
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR borrows several concepts from the Apache Webserver.
\&\f(CW\*(C`Net::Server\*(C'\fR uses \*(L"hooks\*(R" to allow custom servers such as \s-1SMTP\s0,
\&\s-1HTTP\s0, \s-1POP3\s0, etc. to be layered over the base \f(CW\*(C`Net::Server\*(C'\fR class.  In
addition the \f(CW\*(C`Net::Server::PreFork\*(C'\fR class borrows concepts of
min_start_servers, max_servers, and min_waiting servers.
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR also uses the concept of an flock serialized
accept when accepting on multiple ports (PreFork can choose between
flock, IPC::Semaphore, and pipe to control serialization).
.SH "PERSONALITIES"
.IX Header "PERSONALITIES"
\&\f(CW\*(C`Net::Server\*(C'\fR is built around a common class (Net::Server) and is
extended using sub classes, or \f(CW\*(C`personalities\*(C'\fR.  Each personality
inherits, overrides, or enhances the base methods of the base class.
.PP
Included with the Net::Server package are several basic personalities,
each of which has their own use.
.IP "Fork" 4
.IX Item "Fork"
Found in the module Net/Server/Fork.pm (see Net::Server::Fork).
This server binds to one or more ports and then waits for a
connection.  When a client request is received, the parent forks a
child, which then handles the client and exits.  This is good for
moderately hit services.
.IP "\s-1INET\s0" 4
.IX Item "INET"
Found in the module Net/Server/INET.pm (see Net::Server::INET).
This server is designed to be used with inetd.  The \f(CW\*(C`pre_bind\*(C'\fR,
\&\f(CW\*(C`bind\*(C'\fR, \f(CW\*(C`accept\*(C'\fR, and \f(CW\*(C`post_accept\*(C'\fR are all overridden as these
services are taken care of by the \s-1INET\s0 daemon.
.IP "MultiType" 4
.IX Item "MultiType"
Found in the module Net/Server/MultiType.pm (see
Net::Server::MultiType).  This server has no server functionality
of its own.  It is designed for servers which need a simple way to
easily switch between different personalities.  Multiple
\&\f(CW\*(C`server_type\*(C'\fR parameters may be given and Net::Server::MultiType will
cycle through until it finds a class that it can use.
.IP "Multiplex" 4
.IX Item "Multiplex"
Found in the module Net/Server/Multiplex.pm (see
Net::Server::Multiplex).  This server binds to one or more ports.
It uses IO::Multiplex to multiplex between waiting for new connections
and waiting for input on currently established connections.  This
personality is designed to run as one process without forking.  The
\&\f(CW\*(C`process_request\*(C'\fR method is never used but the \f(CW\*(C`mux_input\*(C'\fR callback
is used instead (see also IO::Multiplex).  See
examples/samplechat.pl for an example using most of the features of
Net::Server::Multiplex.
.IP "PreForkSimple" 4
.IX Item "PreForkSimple"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`max_servers\*(C'\fR child process.  The server will make sure
that at any given time there are always \f(CW\*(C`max_servers\*(C'\fR available to
receive a client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can dedicate max_server processes no matter what the
load.  It should scale well for most applications.  Multi port accept
is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "PreFork" 4
.IX Item "PreFork"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure
that at any given time there are at least \f(CW\*(C`min_spare_servers\*(C'\fR but not
more than \f(CW\*(C`max_spare_servers\*(C'\fR available to receive a client request,
up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site, and should scale well for most applications.  Multi port
accept is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "Single" 4
.IX Item "Single"
All methods fall back to Net::Server.  This personality is provided
only as parallelism for Net::Server::MultiType.
.IP "\s-1HTTP\s0" 4
.IX Item "HTTP"
Not a distinct personality.  Provides a basic \s-1HTTP\s0 daemon.  This can
be combined with the \s-1SSL\s0 or \s-1SSLEAY\s0 proto to provide an \s-1HTTPS\s0 Daemon.
See Net::Server::HTTP.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR was partially written to make it easy to add new
personalities.  Using separate modules built upon an open architecture
allows for easy addition of new features, a separate development
process, and reduced code bloat in the core module.
.SH "SOCKET ACCESS"
.IX Header "SOCKET ACCESS"
Once started, the Net::Server will take care of binding to port and
waiting for connections.  Once a connection is received, the
Net::Server will accept on the socket and will store the result (the
client connection) in \f(CW$self\fR\->{server}\->{client}.  This
property is a Socket blessed into the the IO::Socket classes.  \s-1UDP\s0
servers are slightly different in that they will perform a \fBrecv\fR
instead of an \fBaccept\fR.
.PP
To make programming easier, during the post_accept phase, \s-1STDIN\s0 and
\&\s-1STDOUT\s0 are opened to the client connection.  This allows for programs
to be written using <\s-1STDIN\s0> and print \*(L"out\en\*(R" to print to the
client connection.  \s-1UDP\s0 will require using a \->send call.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following is a very simple server.  The main functionality occurs
in the process_request method call as shown below.  Notice the use of
timeouts to prevent Denial of Service while reading.  (Other examples
of using \f(CW\*(C`Net::Server\*(C'\fR can, or will, be included with this
distribution).
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&
\&    use strict;
\&    use base qw(Net::Server::PreFork); # any personality will do
\&
\&    MyPackage\->run;
\&
\&    # over\-ride the default echo handler
\&
\&    sub process_request {
\&        my $self = shift;
\&        eval {
\&
\&            local $SIG{\*(AqALRM\*(Aq} = sub { die "Timed Out!\en" };
\&            my $timeout = 30; # give the user 30 seconds to type some lines
\&
\&            my $previous_alarm = alarm($timeout);
\&            while (<STDIN>) {
\&                s/\er?\en$//;
\&                print "You said \*(Aq$_\*(Aq\er\en";
\&                alarm($timeout);
\&            }
\&            alarm($previous_alarm);
\&
\&        };
\&
\&        if ($@ =~ /timed out/i) {
\&            print STDOUT "Timed Out.\er\en";
\&            return;
\&        }
\&
\&    }
\&
\&    1;
.Ve
.PP
Playing this file from the command line will invoke a Net::Server
using the PreFork personality.  When building a server layer over the
Net::Server, it is important to use features such as timeouts to
prevent Denial Of Service attacks.
.PP
Net::Server comes with a built in echo server by default.  You can test it
out by simply running the following from the commandline:
.PP
.Vb 1
\&    net\-server
.Ve
.PP
If you wanted to try another flavor you could try
.PP
.Vb 1
\&    net\-server PreFork
.Ve
.PP
If you wanted to try out a basic \s-1HTTP\s0 server you could use
.PP
.Vb 1
\&    net\-server HTTP
.Ve
.PP
Or if you wanted to test out a \s-1CGI\s0 you are writing you could use
.PP
.Vb 1
\&    net\-server HTTP \-\-app ../../mycgi.cgi
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
There are at least five possible ways to pass arguments to
Net::Server.  They are \fIpassing to the new method\fR, \fIpassing on
command line\fR, \fIpassing parameters to run\fR, \fIusing a conf file\fR,
\&\fIreturning values in the default_values method\fR, or \fIconfiguring the
values in post_configure_hook\fR.
.PP
The \f(CW\*(C`options\*(C'\fR method is used to determine which arguments the server
will search for and can be used to extend the parsed parameters.  Any
arguments found from the command line, parameters passed to run, and
arguments found in the conf_file will be matched against the keys of
the options template.  Any commandline parameters that do not match
will be left in place and can be further processed by the server in
the various hooks (by looking at \f(CW@ARGV\fR).  Arguments passed to new will
automatically win over any other options (this can be used if you
would like to disallow a user passing in other arguments).
.PP
Arguments consist of key value pairs.  On the commandline these pairs
follow the \s-1POSIX\s0 fashion of \f(CW\*(C`\-\-key value\*(C'\fR or \f(CW\*(C`\-\-key=value\*(C'\fR, and also
\&\f(CW\*(C`key=value\*(C'\fR.  In the conf file the parameter passing can best be
shown by the following regular expression:
($key,$val)=~/^(\ew+)\es+(\eS+?)\es+$/.  Passing arguments to the run
method is done as follows: \f(CW\*(C`<Net::Server\->run(key1 =\*(C'\fR 'val1')>>.
Passing arguments via a prebuilt object can best be shown in the
following code:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&    use strict;
\&    use base qw(Net::Server);
\&
\&    my $server = MyPackage\->new({
\&        key1 => \*(Aqval1\*(Aq,
\&    });
\&
\&    $server\->run;
.Ve
.PP
All five methods for passing arguments may be used at the same time.
Once an argument has been set, it is not over written if another
method passes the same argument.  \f(CW\*(C`Net::Server\*(C'\fR will look for
arguments in the following order:
.PP
.Vb 5
\&    1) Arguments passed to the C<new> method.
\&    2) Arguments passed on command line.
\&    3) Arguments passed to the C<run> method.
\&    4) Arguments passed via a conf file.
\&    5) Arguments set in the C<default_values> method.
.Ve
.PP
Additionally the following hooks are available:
.PP
.Vb 4
\&    1) Arguments set in the configure_hook (occurs after new
\&       but before any of the other areas are checked).
\&    2) Arguments set and validated in the post_configure_hook
\&       (occurs after all of the other areas are checked).
.Ve
.PP
Each of these levels will override parameters of the same name
specified in subsequent levels.  For example, specifying \-\-setsid=0 on
the command line will override a value of \*(L"setsid 1\*(R" in the conf file.
.PP
Note that the configure_hook method doesn't return values to set, but
is there to allow for setting up configured values before the
configure method is called.
.PP
Key/value pairs used by the server are removed by the configuration
process so that server layers on top of \f(CW\*(C`Net::Server\*(C'\fR can pass and
read their own parameters.
.SH "ADDING CUSTOM ARGUMENTS"
.IX Header "ADDING CUSTOM ARGUMENTS"
It is possible to add in your own custom parameters to those parsed by
Net::Server.  The following code shows how this is done:
.PP
.Vb 4
\&    sub options {
\&        my $self     = shift;
\&        my $prop     = $self\->{\*(Aqserver\*(Aq};
\&        my $template = shift;
\&
\&        # setup options in the parent classes
\&        $self\->SUPER::options($template);
\&
\&        # add a single value option
\&        $prop\->{\*(Aqmy_option\*(Aq} ||= undef;
\&        $template\->{\*(Aqmy_option\*(Aq} = \e $prop\->{\*(Aqmy_option\*(Aq};
\&
\&        # add a multi value option
\&        $prop\->{\*(Aqan_arrayref_item\*(Aq} ||= [];
\&        $template\->{\*(Aqan_arrayref_item\*(Aq} = $prop\->{\*(Aqan_arrayref_item\*(Aq};
\&    }
.Ve
.PP
Overriding the \f(CW\*(C`options\*(C'\fR method allows for adding your own custom
fields.  A template hashref is passed in, that should then be modified
to contain an of your custom fields.  Fields which are intended to
receive a single scalar value should have a reference to the
destination scalar given.  Fields which are intended to receive
multiple values should reference the corresponding destination
arrayref.
.PP
You are responsible for validating your custom options once they have
been parsed.  The post_configure_hook is a good place to do your
validation.
.PP
Some emails have asked why we use this \*(L"template\*(R" method.  The idea is
that you are creating the the data structure to store the values in,
and you are also creating a way to get the values into the data
structure.  The template is the way to get the values to the servers
data structure.  One of the possibilities (that probably isn't used
that much) is that by letting you specify the mapping, you could build
a nested data structure \- even though the passed in arguments are
flat.  It also allows you to setup aliases to your names.
.PP
For example, a basic structure might look like this:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq}
\&
\&   $prop\->{\*(Aqmy_custom_option\*(Aq} ||= undef;
\&   $prop\->{\*(Aqmy_custom_array\*(Aq}  ||= [];
\&
\&   $template = {
\&       my_custom_option => \e $prop\->{\*(Aqmy_custom_option\*(Aq},
\&       mco              => \e $prop\->{\*(Aqmy_custom_option\*(Aq}, # alias
\&       my_custom_array  => $prop\->{\*(Aqmy_custom_array\*(Aq},
\&       mca              => $prop\->{\*(Aqmy_custom_array\*(Aq}, # an alias
\&   };
\&
\&   $template\->{\*(Aqmco2\*(Aq} = $template\->{\*(Aqmco\*(Aq}; # another way to alias
.Ve
.PP
But you could also have more complex data:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&   $prop\->{\*(Aqone_layer\*(Aq} = {
\&       two_layer => [
\&           undef,
\&           undef,
\&       ],
\&   };
\&
\&   $template = {
\&       param1 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[0],
\&       param2 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[1],
\&   };
.Ve
.PP
This is of course a contrived example \- but it does show that you can
get the data from the flat passed in arguments to whatever type of
structure you need \- with only a little bit of effort.
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 2
\&    Key               Value                    Default
\&    conf_file         "filename"               undef
\&
\&    log_level         0\-4                      2
\&    log_file          (filename|Sys::Syslog
\&                       |Log::Log4perl)         undef
\&
\&    port              \ed+                      20203
\&    host              "host"                   "*"
\&    ipv               (4|6|*)                  *
\&    proto             (tcp|udp|unix)           "tcp"
\&    listen            \ed+                      SOMAXCONN
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
\&
\&    reverse_lookups   1                        undef
\&    allow             /regex/                  none
\&    deny              /regex/                  none
\&    cidr_allow        CIDR                     none
\&    cidr_deny         CIDR                     none
\&
\&    ## daemonization parameters
\&    pid_file          "filename"               undef
\&    chroot            "directory"              undef
\&    user              (uid|username)           "nobody"
\&    group             (gid|group)              "nobody"
\&    background        1                        undef
\&    setsid            1                        undef
\&
\&    no_close_by_child (1|undef)                undef
\&
\&    ## See Net::Server::Proto::(TCP|UDP|UNIX|SSL|SSLeay|etc)
\&    ## for more sample parameters.
.Ve
.IP "conf_file" 4
.IX Item "conf_file"
Filename from which to read additional key value pair arguments for
starting the server.  Default is undef.
.Sp
There are two ways that you can specify a default location for a
conf_file.  The first is to pass the default value to the run method
as in:
.Sp
.Vb 3
\&    MyServer\->run({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    });
.Ve
.Sp
If the end user passes in \-\-conf_file=/etc/their_server.conf then the
value will be overridden.
.Sp
The second way to do this was added in the 0.96 version.  It uses the
default_values method as in:
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&        }
\&    }
.Ve
.Sp
This method has the advantage of also being able to be overridden in
the run method.
.Sp
If you do not want the user to be able to specify a conf_file at all,
you can pass conf_file to the new method when creating your object:
.Sp
.Vb 3
\&    MyServer\->new({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    })\->run;
.Ve
.Sp
If passed this way, the value passed to new will \*(L"win\*(R" over any of the
other passed in values.
.IP "log_level" 4
.IX Item "log_level"
Ranges from 0 to 4 in level.  Specifies what level of error will be
logged.  \*(L"O\*(R" means logging is off.  \*(L"4\*(R" means very verbose.  These
levels should be able to correlate to syslog levels.  Default is 2.
These levels correlate to syslog levels as defined by the following
key/value pairs: 0=>'err', 1=>'warning', 2=>'notice', 3=>'info',
4=>'debug'.
.IP "log_file" 4
.IX Item "log_file"
Name of log file or log subsystem to be written to.  If no name is given and the
write_to_log_hook is not overridden, log goes to \s-1STDERR\s0.  Default is
undef.
.Sp
The log_file may also be the name of a Net::Server pluggable logging
class.  Net::Server is packaged with Sys::Syslog and Log::Log4perl.
If the log_file looks like a module name, it will have
\&\*(L"Net::Server::Log::\*(R" added to the front and it will then be required.
The package should provide an \f(CW\*(C`initialize\*(C'\fR class method that returns
a single function which will be used for logging.  This returned
function will be passed log_level, and message.
.Sp
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Net::Server::Log::Sys::Syslog module.  If syslog is used the
parameters \f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and
\&\f(CW\*(C`syslog_logopt\*(C'\fR,and \f(CW\*(C`syslog_facility\*(C'\fR may also be defined.  See
Net::Server::Log::Sys::Syslog.
.Sp
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined. See
Net::Server::Log::Log::Log4per.
.Sp
If a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0
will automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT\s0.  This will prevent any output from ending up at the terminal.
.IP "pid_file" 4
.IX Item "pid_file"
Filename to store pid of parent process.  Generally applies only to
forking servers.  Default is none (undef).
.IP "port" 4
.IX Item "port"
See Net::Server::Proto for further examples of configuration.
.Sp
Local port/socket on which to bind.  If it is a low port, the process
must start as root.  If multiple ports are given, all will be bound at
server startup.  May be of the form \f(CW\*(C`host:port/proto\*(C'\fR,
\&\f(CW\*(C`host:port/proto/ipv\*(C'\fR, \f(CW\*(C`host:port\*(C'\fR, \f(CW\*(C`port/proto\*(C'\fR, or \f(CW\*(C`port\*(C'\fR, where
\&\fIhost\fR represents a hostname residing on the local box, where \fIport\fR
represents either the number of the port (eg. \*(L"80\*(R") or the service
designation (eg. \*(L"http\*(R"), where \fIipv\fR represents the \s-1IP\s0 protocol version
(IPv4 or IPv6 or IPv*) and where \fIproto\fR represents the protocol to be
used. See Net::Server::Proto.  The following are some valid port
strings:
.Sp
.Vb 9
\&    20203                            # port only
\&    localhost:20203                  # host and port
\&    localhost:http                   # localhost bound to port 80
\&    localhost:20203/tcp              # host, port, protocol
\&    localhost:20203/tcp/IPv*         # host, port, protocol and family
\&    localhost, 20203, tcp, IPv*      # same
\&    localhost | 20203 | tcp | IPv*   # same
\&    localhost:20203/IPv*             # bind any configured interfaces for IPv4 or 6 (default)
\&    localhost:20203/IPv4/IPv6        # bind localhost on IPv4 and 6 (fails if it cannot do both)
\&
\&    *:20203                          # bind all local interfaces
.Ve
.Sp
Additionally, when passed in the code (non-commandline, and non-config),
the port may be passed as a hashref or array hashrefs of information:
.Sp
.Vb 6
\&    port => {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 6,     # IPv6 only
\&        proto => \*(Aqudp\*(Aq, # UDP protocol
\&    }
\&
\&    port => [{
\&        host  => \*(Aq*\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 4,     # IPv4 only
\&        proto => \*(Aqtcp\*(Aq, # (default)
\&    }, {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20204\*(Aq,
\&        ipv   => \*(Aq*\*(Aq,      # default \- all IPv4 and IPv6 interfaces tied to localhost
\&        proto => \*(Aqssleay\*(Aq, # or ssl \- Using SSL
\&    }],
.Ve
.Sp
An explicit \fIhost\fR given in a port specification overrides a default
binding address (a \f(CW\*(C`host\*(C'\fR setting, see below).  The \fIhost\fR part may
be enclosed in square brackets, but when it is a numerical IPv6
address it \fBshould\fR be enclosed in square brackets to avoid ambiguity
in parsing a port number, e.g.: \*(L"[::1]:80\*(R".  However you could also
use pipes, white space, or commas to separate these.  Note that host
and port number must come first.
.Sp
If the protocol is not specified, \fIproto\fR will default to the
\&\f(CW\*(C`proto\*(C'\fR specified in the arguments.  If \f(CW\*(C`proto\*(C'\fR is not specified
there it will default to \*(L"tcp\*(R".  If \fIhost\fR is not specified, \fIhost\fR
will default to \f(CW\*(C`host\*(C'\fR specified in the arguments.  If \f(CW\*(C`host\*(C'\fR is not
specified there it will default to \*(L"*\*(R".  Default port is 20203.
Configuration passed to new or run may be either a scalar containing a
single port number or an arrayref of ports.  If \f(CW\*(C`ipv\*(C'\fR is not specified
it will default to \*(L"*\*(R" (Any resolved addresses under IPv4 or IPv6).
.Sp
If you are working with unix sockets, you may also specify
\&\f(CW\*(C`socket_file|unix\*(C'\fR or \f(CW\*(C`socket_file|type|unix\*(C'\fR where type is \s-1SOCK_DGRAM\s0
or \s-1SOCK_STREAM\s0.
.Sp
On systems that support it, a port value of 0 may be used to ask
the \s-1OS\s0 to auto-assign a port.  The value of the auto-assigned port
will be stored in the NS_port property of the Net::Server::Proto::TCP
object and is also available in the sockport method.  When the server
is processing a request, the \f(CW$self\fR\->{server}\->{sockport} property
contains the port that was connected through.
.IP "host" 4
.IX Item "host"
Local host or addr upon which to bind port.  If a value of '*' is
given, the server will bind that port on all available addresses on
the box.  The \f(CW\*(C`host\*(C'\fR argument provides a default local host address
if the \f(CW\*(C`port\*(C'\fR argument omits a host specification.  See
Net::Server::Proto. See IO::Socket.  Configuration passed to new
or run may be either a scalar containing a single host or an arrayref
of hosts \- if the hosts array is shorter than the ports array, the
last host entry will be used to augment the hosts arrary to the size
of the ports array.
.Sp
If an IPv4 address is passed, an IPv4 socket will be created.  If an
IPv6 address is passed, an IPv6 socket will be created.  If a hostname
is given, Net::Server will look at the value of ipv (default IPv4) to
determine which type of socket to create.  Optionally the ipv
specification can be passed as part of the hostname.
.Sp
.Vb 1
\&    host => "127.0.0.1",  # an IPv4 address
\&
\&    host => "::1",        # an IPv6 address
\&
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (default any IPv4 and/or IPv6)
\&
\&    host => \*(Aqlocalhost/IPv*\*(Aq,  # same
\&
\&    ipv  => 6,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv6)
\&
\&    ipv  => 4,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv4)
\&
\&    ipv  => \*(AqIPv4 IPv6\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (requires IPv6 and IPv4)
\&
\&    host => \*(Aq*\*(Aq,          # any local interfaces (any IPv6 or IPv4)
\&
\&    host => \*(Aq*/IPv*\*(Aq,     # same (any IPv6 or IPv4)
\&
\&    ipv  => 4,
\&    host => \*(Aq*\*(Aq,          # any local IPv4 interfaces interfaces
.Ve
.IP "proto" 4
.IX Item "proto"
See Net::Server::Proto.
Protocol to use when binding ports.  See IO::Socket.  As of release
2.0, Net::Server supports tcp, udp, and unix, unixdgram, ssl, and
ssleay.  Other types will need to be added later (or custom modules
extending the Net::Server::Proto class may be used).  Configuration
passed to new or run may be either a scalar containing a single proto
or an arrayref of protos \- if the protos array is shorter than the
ports array, the last proto entry will be used to augment the protos
arrary to the size of the ports array.
.Sp
Additionally the proto may also contain the ipv specification.
.IP "ipv (IPv4 and IPv6)" 4
.IX Item "ipv (IPv4 and IPv6)"
See Net::Server::Proto.
.Sp
IPv6 is now available under Net::Server.  It will be used
automatically if an IPv6 address is passed, or if the ipv is set
explicitly to IPv6, or if ipv is left as the default value of IPv*.
This is a significant change from version 2.004 and earlier where the
default value was IPv4.  However, the previous behavior led to
confusion on IPv6 only hosts, and on hosts that only had IPv6 entries
for a local hostname.  Trying to pass an IPv4 address when ipv is set
to 6 (only 6 \- not * or 4) will result in an error.
.Sp
.Vb 2
\&    localhost:20203 # will use IPv6 if there is a corresponding entry for localhost
\&                    # it will also use IPv4 if there is a corresponding v4 entry for localhost
\&
\&    localhost:20203:IPv*  # same (default)
\&
\&    localhost:20203:IPv6  # will use IPv6
\&
\&    [::1]:20203           # will use IPv6 (IPv6 style address)
\&
\&    localhost:20203:IPv4  # will use IPv4
\&
\&    127.0.0.1:20203       # will use IPv4 (IPv4 style address
\&
\&    localhost:20203:IPv4:IPv6 # will bind to both v4 and v6 \- fails otherwise
\&
\&    # or as a hashref as
\&    port => {
\&        host => "localhost",
\&        ipv  => 6, # only binds IPv6
\&    }
\&
\&    port => {
\&        host => "localhost",
\&        ipv  => 4, # only binds IPv4
\&    }
\&
\&    port => {
\&        host => "::1",
\&        ipv  => "IPv6", # same as passing "6"
\&    }
\&
\&    port => {
\&        host => "localhost/IPv*",       # any IPv4 or IPv6
\&    }
\&
\&    port => {
\&        host => "localhost IPv4 IPv6",  # must create both
\&    }
.Ve
.Sp
In many proposed Net::Server solutions, IPv* was enabled by default.
For versions 2.000 through 2.004, the previous default of IPv4 was
used.  We have attempted to make it easy to set IPv4, IPv6, or IPv*.
If you do not want or need IPv6, simply set ipv to 4, pass IPv4 along
in the port specification, set \f(CW$ENV\fR{'\s-1IPV\s0'}=4; before running the
server, or uninstall IO::Socket::INET6.
.Sp
On my local box the following command results in the following output:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "localhost")\*(Aq
\&
\&    Resolved [localhost]:20203 to [::1]:20203, IPv6
\&    Resolved [localhost]:20203 to [127.0.0.1]:20203, IPv4
\&    Binding to TCP port 20203 on host ::1 with IPv6
\&    Binding to TCP port 20203 on host 127.0.0.1 with IPv4
.Ve
.Sp
My local box has IPv6 enabled and there are entries for localhost on
both IPv6 ::1 and IPv4 127.0.0.1.  I could also choose to explictly
bind ports rather than depending upon ipv => \*(L"*\*(R" to resolve them for
me as in the following:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => [20203,20203], host => "localhost", ipv => [4,6])\*(Aq
\&
\&    Binding to TCP port 20203 on host localhost with IPv4
\&    Binding to TCP port 20203 on host localhost with IPv6
.Ve
.Sp
There is a special case of using host => \*(L"*\*(R" as well as ipv => \*(L"*\*(R".
The Net::Server::Proto::_bindv6only method is used to check the system
setting for \f(CW\*(C`sysctl \-n net.ipv6.bindv6only\*(C'\fR (or
net.inet6.ip6.v6only).  If this setting is false, then an IPv6 socket
will listen for the corresponding IPv4 address.  For example the
address [::] (IPv6 equivalent of \s-1INADDR_ANY\s0) will also listen for
0.0.0.0.  The address ::FFFF:127.0.0.1 (IPv6) would also listen to
127.0.0.1 (IPv4).  In this case, only one socket will be created
because it will handle both cases (an error is returned if an attempt
is made to listen to both addresses when bindv6only is false).
.Sp
However, if net.ipv6.bindv6only (or equivalent) is true, then a
hostname (such as *) resolving to both a IPv4 entry as well as an IPv6
will result in both an IPv4 socket as well as an IPv6 socket.
.Sp
On my linux box which defaults to net.ipv6.bindv6only=0, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Not including resolved host [0.0.0.0] IPv4 because it will be handled by [::] IPv6
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
If I issue a \f(CW\*(C`sudo /sbin/sysctl \-w net.ipv6.bindv6only=1\*(C'\fR, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [0.0.0.0]:8080, IPv4
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Binding to TCP port 8080 on host 0.0.0.0 with IPv4
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
\&\s-1BSD\s0 differs from linux and generally defaults to
net.inet6.ip6.v6only=0.  If it cannot be determined on your \s-1OS\s0, it
will default to false and the log message will change from \*(L"it will be
handled\*(R" to \*(L"it should be handled\*(R" (if you have a non-resource
intensive way to check on your platform, feel free to email me).  Be
sure to check the logs as you test your server to make sure you have
bound the ports you desire.  You can always pass in individual
explicit IPv4 and IPv6 port specifications if you need.  For example,
if your system has both IPv4 and IPv6 interfaces but you'd only like
to bind to IPv6 entries, then you should use a hostname of [::]
instead of [*].
.Sp
If bindv6only (or equivalent) is false, and you receive an IPv4
connection on a bound IPv6 port, the textual representation of the
peer's IPv4 address will typically be in a form of an IPv4\-mapped IPv6
addresses, e.g. \*(L"::FFFF:127.0.0.1\*(R" .
.Sp
The ipv parameter was chosen because it does not conflict with any
other existing usage, it is very similar to ipv4 or ipv6, it allows
for user code to not need to know about Socket::AF_INET or
Socket6::AF_INET6 or Socket::AF_UNSPEC, and it is short.
.IP "listen" 4
.IX Item "listen"
See IO::Socket.  Not used with udp protocol (or \s-1UNIX\s0 \s-1SOCK_DGRAM\s0).
.IP "reverse_lookups" 4
.IX Item "reverse_lookups"
Specify whether to lookup the hostname of the connected \s-1IP\s0.
Information is cached in server object under \f(CW\*(C`peerhost\*(C'\fR property.
Default is to not use reverse_lookups (undef).
.IP "allow/deny" 4
.IX Item "allow/deny"
May be specified multiple times.  Contains regex to compare to
incoming peeraddr or peerhost (if reverse_lookups has been enabled).
If allow or deny options are given, the incoming client must match an
allow and not match a deny or the client connection will be closed.
Defaults to empty array refs.
.IP "cidr_allow/cidr_deny" 4
.IX Item "cidr_allow/cidr_deny"
May be specified multiple times.  Contains a \s-1CIDR\s0 block to compare to
incoming peeraddr.  If cidr_allow or cidr_deny options are given, the
incoming client must match a cidr_allow and not match a cidr_deny or
the client connection will be closed.  Defaults to empty array refs.
.IP "chroot" 4
.IX Item "chroot"
Directory to chroot to after bind process has taken place and the
server is still running as root.  Defaults to undef.
.IP "user" 4
.IX Item "user"
Userid or username to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`user\*(C'\fR equal to \*(L"root\*(R".
.IP "group" 4
.IX Item "group"
Groupid or groupname to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`group\*(C'\fR equal to \*(L"root\*(R".
.IP "background" 4
.IX Item "background"
Specifies whether or not the server should fork after the bind method
to release itself from the command line.  Defaults to undef.  Process
will also background if \f(CW\*(C`setsid\*(C'\fR is set.
.IP "setsid" 4
.IX Item "setsid"
Specifies whether or not the server should fork after the bind method
to release itself from the command line and then run the
\&\f(CW\*(C`POSIX::setsid()\*(C'\fR command to truly daemonize.  Defaults to undef.  If
a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0 will
automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT\s0.  This will prevent any output from ending up at the terminal.
.IP "no_close_by_child" 4
.IX Item "no_close_by_child"
Boolean.  Specifies whether or not a forked child process has
permission or not to shutdown the entire server process.  If set to 1,
the child may \s-1NOT\s0 signal the parent to shutdown all children.  Default
is undef (not set).
.IP "no_client_stdout" 4
.IX Item "no_client_stdout"
Boolean.  Default undef (not set).  Specifies that \s-1STDIN\s0 and \s-1STDOUT\s0
should not be opened on the client handle once a connection has been
accepted.  By default the Net::Server will open \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client socket making it easier for many types of scripts to read
directly from and write directly to the socket using normal print and
read methods.  Disabling this is useful on clients that may be opening
their own connections to \s-1STDIN\s0 and \s-1STDOUT\s0.
.Sp
This option has no affect on \s-1STDIN\s0 and \s-1STDOUT\s0 which has a magic client
property that is tied to the already open \s-1STDIN\s0 and \s-1STDOUT\s0.
.IP "leave_children_open_on_hup" 4
.IX Item "leave_children_open_on_hup"
Boolean.  Default undef (not set).  If set, the parent will not
attempt to close child processes if the parent receives a \s-1SIG\s0 \s-1HUP\s0.
The parent will rebind the the open port and begin tracking a fresh
set of children.
.Sp
Children of a Fork server will exit after their current request.
Children of a Prefork type server will finish the current request and
then exit.
.Sp
Note \- the newly restarted parent will start up a fresh set of servers
on fork servers.  The new parent will attempt to keep track of the
children from the former parent but custom communication channels
(open pipes from the child to the old parent) will no longer be
available to the old child processes.  New child processes will still
connect properly to the new parent.
.IP "sig_passthrough" 4
.IX Item "sig_passthrough"
Default none.  Allow for passing requested signals through to
children.  Takes a single signal name, a comma separated list of
names, or an arrayref of signal names.  It first sends the signals to
the children before calling any currently registered signal by that
name.
.IP "tie_client_stdout" 4
.IX Item "tie_client_stdout"
Default undef.  If set will use Net::Server::TiedHandle tied interface
for \s-1STDIN\s0 and \s-1STDOUT\s0.  This interface allows \s-1SSL\s0 and \s-1SSLEAY\s0 to work.
It also allows for intercepting read and write via the
tied_stdin_callback and tied_stdout_callback.
.IP "tied_stdin_callback" 4
.IX Item "tied_stdin_callback"
Default undef.  Called during a read of \s-1STDIN\s0 data if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other input operation.
.IP "tied_stdout_callback" 4
.IX Item "tied_stdout_callback"
Default undef.  Called during a write of data to \s-1STDOUT\s0 if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other output operation.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
All of the \f(CW\*(C`ARGUMENTS\*(C'\fR listed above become properties of the server
object under the same name.  These properties, as well as other
internal properties, are available during hooks and other method
calls.
.PP
The structure of a Net::Server object is shown below:
.PP
.Vb 6
\&    $self = bless({
\&        server => {
\&            key1 => \*(Aqval1\*(Aq,
\&            # more key/vals
\&        },
\&    }, \*(AqNet::Server\*(Aq);
.Ve
.PP
This structure was chosen so that all server related properties are
grouped under a single key of the object hashref.  This is so that
other objects could layer on top of the Net::Server object class and
still have a fairly clean namespace in the hashref.
.PP
You may get and set properties in two ways.  The suggested way is to
access properties directly via
.PP
.Vb 1
\&    my $val = $self\->{server}\->{key1};
.Ve
.PP
Accessing the properties directly will speed the server process \-
though some would deem this as bad style.  A second way has been
provided for object oriented types who believe in methods.  The second
way consists of the following methods:
.PP
.Vb 2
\&    my $val = $self\->get_property( \*(Aqkey1\*(Aq );
\&    my $self\->set_property( key1 => \*(Aqval1\*(Aq );
.Ve
.PP
Properties are allowed to be changed at any time with caution (please
do not undef the sock property or you will close the client
connection).
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server\*(C'\fR allows for the use of a configuration file to read in
server parameters.  The format of this conf file is simple key value
pairs.  Comments and blank lines are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    # logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    # optional syslog directive
\&    # used in place of log_file above
\&    #log_file       Sys::Syslog
\&    #syslog_logsock unix
\&    #syslog_ident   myserver
\&    #syslog_logopt  pid|cons
\&
\&    # access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&    cidr_allow  127.0.0.0/8
\&    cidr_allow  192.0.2.0/24
\&    cidr_deny   192.0.2.4/30
\&
\&    # background the process?
\&    background  1
\&
\&    # ports to bind (this should bind
\&    # 127.0.0.1:20205 on IPv6 and
\&    # localhost:20204 on IPv4)
\&    # See Net::Server::Proto
\&    host        127.0.0.1
\&    ipv         IPv6
\&    port        localhost:20204/IPv4
\&    port        20205
\&
\&    # reverse lookups ?
\&    # reverse_lookups on
\&
\&  #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to
override, easy to hook, fashion.  The basic flow is
shown below.  This is the flow of the \f(CW\*(C`$self\->run\*(C'\fR method.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop;
\&
\&    ### routines inside a standard $self\->loop
\&    # $self\->accept;
\&    # $self\->run_client_connection;
\&    # $self\->done;
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->server_close;
.Ve
.PP
The server then exits.
.PP
During the client processing phase
(\f(CW\*(C`$self\->run_client_connection\*(C'\fR), the following
represents the program flow:
.PP
.Vb 1
\&    $self\->post_accept;
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook;
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&        $self\->process_request;
\&
\&    } else {
\&
\&        $self\->request_denied_hook;
\&
\&    }
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->post_process_request;
\&
\&    $self\->post_client_connection_hook;
.Ve
.PP
The process then loops and waits for the next connection.  For a more
in depth discussion, please read the code.
.PP
During the server shutdown phase (\f(CW\*(C`$self\->server_close\*(C'\fR), the
following represents the program flow:
.PP
.Vb 1
\&    $self\->close_children;  # if any
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&    }
\&
\&    $self\->shutdown_sockets;
\&
\&    $self\->server_exit;
.Ve
.SH "MAIN SERVER METHODS"
.IX Header "MAIN SERVER METHODS"
.ie n .IP """$self\->run""" 4
.el .IP "\f(CW$self\->run\fR" 4
.IX Item "$self->run"
This method incorporates the main process flow.  This flow is listed
above.
.Sp
The method run may be called in any of the following ways.
.Sp
.Vb 1
\&     MyPackage\->run(port => 20201);
\&
\&     MyPackage\->new({port => 20201})\->run;
\&
\&     my $obj = bless {server=>{port => 20201}}, \*(AqMyPackage\*(Aq;
\&     $obj\->run;
.Ve
.Sp
The \->run method should typically be the last method called in a
server start script (the server will exit at the end of the \->run
method).
.ie n .IP """$self\->configure""" 4
.el .IP "\f(CW$self\->configure\fR" 4
.IX Item "$self->configure"
This method attempts to read configurations from the commandline, from
the run method call, or from a specified conf_file (the conf_file may
be specified by passed in parameters, or in the default_values).  All
of the configured parameters are then stored in the {\*(L"server\*(R"}
property of the Server object.
.ie n .IP """$self\->post_configure""" 4
.el .IP "\f(CW$self\->post_configure\fR" 4
.IX Item "$self->post_configure"
The post_configure hook begins the startup of the server.  During this
method running server instances are checked for, pid_files are
created, log_files are created, Sys::Syslog is initialized (as
needed), process backgrounding occurs and the server closes \s-1STDIN\s0 and
\&\s-1STDOUT\s0 (as needed).
.ie n .IP """$self\->pre_bind""" 4
.el .IP "\f(CW$self\->pre_bind\fR" 4
.IX Item "$self->pre_bind"
This method is used to initialize all of the socket objects used by
the server.
.ie n .IP """$self\->bind""" 4
.el .IP "\f(CW$self\->bind\fR" 4
.IX Item "$self->bind"
This method actually binds to the inialized sockets (or rebinds if the
server has been HUPed).
.ie n .IP """$self\->post_bind""" 4
.el .IP "\f(CW$self\->post_bind\fR" 4
.IX Item "$self->post_bind"
During this method priveleges are dropped.  The \s-1INT\s0, \s-1TERM\s0, and \s-1QUIT\s0
signals are set to run server_close.  Sig \s-1PIPE\s0 is set to \s-1IGNORE\s0.  Sig
\&\s-1CHLD\s0 is set to sig_chld.  And sig \s-1HUP\s0 is set to call sig_hup.
.Sp
Under the Fork, PreFork, and PreFork simple personalities, these
signals are registered using Net::Server::SIG to allow for safe signal
handling.
.ie n .IP """$self\->loop""" 4
.el .IP "\f(CW$self\->loop\fR" 4
.IX Item "$self->loop"
During this phase, the server accepts incoming connections.  The
behavior of how the accepting occurs and if a child process handles
the connection is controlled by what type of Net::Server personality
the server is using.
.Sp
Net::Server and Net::Server single accept only one connection at a
time.
.Sp
Net::Server::INET runs one connection and then exits (for use by inetd
or xinetd daemons).
.Sp
Net::Server::MultiPlex allows for one process to simultaneously handle
multiple connections (but requires rewriting the process_request code
to operate in a more \*(L"packet-like\*(R" manner).
.Sp
Net::Server::Fork forks off a new child process for each incoming
connection.
.Sp
Net::Server::PreForkSimple starts up a fixed number of processes that
all accept on incoming connections.
.Sp
Net::Server::PreFork starts up a base number of child processes which
all accept on incoming connections.  The server throttles the number
of processes running depending upon the number of requests coming in
(similar to concept to how Apache controls its child processes in a
PreFork server).
.Sp
Read the documentation for each of the types for more information.
.ie n .IP """$self\->server_close""" 4
.el .IP "\f(CW$self\->server_close\fR" 4
.IX Item "$self->server_close"
This method is called once the server has been signaled to end, or
signaled for the server to restart (via \s-1HUP\s0), or the loop method has
been exited.
.Sp
This method takes care of cleaning up any remaining child processes,
setting appropriate flags on sockets (for HUPing), closing up logging,
and then closing open sockets.
.Sp
Can optionally be passed an exit value that will be passed to the
server_exit call.
.ie n .IP """$self\->server_exit""" 4
.el .IP "\f(CW$self\->server_exit\fR" 4
.IX Item "$self->server_exit"
This method is called at the end of server_close.  It calls exit, but
may be overridden to do other items.  At this point all services
should be shut down.
.Sp
Can optionally be passed an exit value that will be passed to the exit call.
.SH "MAIN CLIENT CONNECTION METHODS"
.IX Header "MAIN CLIENT CONNECTION METHODS"
.ie n .IP """$self\->run_client_connection""" 4
.el .IP "\f(CW$self\->run_client_connection\fR" 4
.IX Item "$self->run_client_connection"
This method is run after the server has accepted and received a client
connection.  The full process flow is listed above under \s-1PROCESS\s0
\&\s-1FLOWS\s0.  This method takes care of handling each client connection.
.ie n .IP """$self\->post_accept""" 4
.el .IP "\f(CW$self\->post_accept\fR" 4
.IX Item "$self->post_accept"
This method opens \s-1STDIN\s0 and \s-1STDOUT\s0 to the client socket.  This allows
any of the methods during the run_client_connection phase to print
directly to and read directly from the client socket.
.ie n .IP """$self\->get_client_info""" 4
.el .IP "\f(CW$self\->get_client_info\fR" 4
.IX Item "$self->get_client_info"
This method looks up information about the client connection such as
ip address, socket type, and hostname (as needed).
.ie n .IP """$self\->allow_deny""" 4
.el .IP "\f(CW$self\->allow_deny\fR" 4
.IX Item "$self->allow_deny"
This method uses the rules defined in the allow and deny configuration
parameters to determine if the ip address should be accepted.
.ie n .IP """$self\->process_request""" 4
.el .IP "\f(CW$self\->process_request\fR" 4
.IX Item "$self->process_request"
This method is intended to handle all of the client communication.  At
this point \s-1STDIN\s0 and \s-1STDOUT\s0 are opened to the client, the ip address
has been verified.  The server can then interact with the client
connection according to whatever \s-1API\s0 or protocol the server is
implementing.  Note that the stub implementation uses \s-1STDIN\s0 and \s-1STDOUT\s0
and will not work if the no_client_stdout flag is set.
.Sp
This is the main method to override.
.Sp
The default method implements a simple echo server that will repeat
whatever is sent.  It will quit the child if \*(L"quit\*(R" is sent, and will
exit the server if \*(L"exit\*(R" is sent.
.Sp
As of version 2.000, the client handle is passed as an argument.
.ie n .IP """$self\->post_process_request""" 4
.el .IP "\f(CW$self\->post_process_request\fR" 4
.IX Item "$self->post_process_request"
This method is used to clean up the client connection and to handle
any parent/child accounting for the forking servers.
.SH "HOOKS"
.IX Header "HOOKS"
\&\f(CW\*(C`Net::Server\*(C'\fR provides a number of \*(L"hooks\*(R" allowing for servers
layered on top of \f(CW\*(C`Net::Server\*(C'\fR to respond at different levels of
execution without having to \*(L"\s-1SUPER\s0\*(R" class the main built-in methods.
The placement of the hooks can be seen in the \s-1PROCESS\s0 \s-1FLOW\s0 section.
.PP
Almost all of the default hook methods do nothing.  To use a hook you
simply need to override the method in your subclass.  For example to
add your own post_configure_hook you could do something like the
following:
.PP
.Vb 1
\&    package MyServer;
\&
\&    sub post_configure_hook {
\&        my $self = shift;
\&        my $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&        # do some validation here
\&    }
.Ve
.PP
The following describes the hooks available in the plain Net::Server
class (other flavors such as Fork or PreFork have additional hooks).
.ie n .IP """$self\->configure_hook()""" 4
.el .IP "\f(CW$self\->configure_hook()\fR" 4
.IX Item "$self->configure_hook()"
This hook takes place immediately after the \f(CW\*(C`\->run()\*(C'\fR method is
called.  This hook allows for setting up the object before any built
in configuration takes place.  This allows for custom configurability.
.ie n .IP """$self\->post_configure_hook()""" 4
.el .IP "\f(CW$self\->post_configure_hook()\fR" 4
.IX Item "$self->post_configure_hook()"
This hook occurs just after the reading of configuration parameters
and initiation of logging and pid_file creation.  It also occurs
before the \f(CW\*(C`\->pre_bind()\*(C'\fR and \f(CW\*(C`\->bind()\*(C'\fR methods are called.
This hook allows for verifying configuration parameters.
.ie n .IP """$self\->post_bind_hook()""" 4
.el .IP "\f(CW$self\->post_bind_hook()\fR" 4
.IX Item "$self->post_bind_hook()"
This hook occurs just after the bind process and just before any
chrooting, change of user, or change of group occurs.  At this point
the process will still be running as the user who started the server.
.ie n .IP """$self\->pre_loop_hook()""" 4
.el .IP "\f(CW$self\->pre_loop_hook()\fR" 4
.IX Item "$self->pre_loop_hook()"
This hook occurs after chroot, change of user, and change of group has
occured.  It allows for preparation before looping begins.
.ie n .IP """$self\->can_read_hook()""" 4
.el .IP "\f(CW$self\->can_read_hook()\fR" 4
.IX Item "$self->can_read_hook()"
This hook occurs after a socket becomes readible on an
accept_multi_port request (accept_multi_port is used if there are
multiple bound ports to accept on, or if the \*(L"multi_port\*(R"
configuration parameter is set to true).  This hook is intended to
allow for processing of arbitrary handles added to the IO::Select used
for the accept_multi_port.  These handles could be added during the
post_bind_hook.  No internal support is added for processing these
handles or adding them to the IO::Socket.  Care must be used in how
much occurs during the can_read_hook as a long response time will
result in the server being susceptible to \s-1DOS\s0 attacks.  A return value
of true indicates that the Server should not pass the readible handle
on to the post_accept and process_request phases.
.Sp
It is generally suggested that other avenues be pursued for sending
messages via sockets not created by the Net::Server.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs after a client has connected to the server.  At this
point \s-1STDIN\s0 and \s-1STDOUT\s0 are mapped to the client socket.  This hook
occurs before the processing of the request.
.ie n .IP """$self\->allow_deny_hook()""" 4
.el .IP "\f(CW$self\->allow_deny_hook()\fR" 4
.IX Item "$self->allow_deny_hook()"
This hook allows for the checking of ip and host information beyond
the \f(CW\*(C`$self\->allow_deny()\*(C'\fR routine.  If this hook returns 1, the
client request will be processed, otherwise, the request will be
denied processing.
.Sp
As of version 2.000, the client connection is passed as an argument.
.ie n .IP """$self\->request_denied_hook()""" 4
.el .IP "\f(CW$self\->request_denied_hook()\fR" 4
.IX Item "$self->request_denied_hook()"
This hook occurs if either the \f(CW\*(C`$self\->allow_deny()\*(C'\fR or
\&\f(CW\*(C`$self\->allow_deny_hook()\*(C'\fR have taken place.
.ie n .IP """$self\->post_process_request_hook()""" 4
.el .IP "\f(CW$self\->post_process_request_hook()\fR" 4
.IX Item "$self->post_process_request_hook()"
This hook occurs after the processing of the request, but before the
client connection has been closed.
.ie n .IP """$self\->post_client_connection_hook""" 4
.el .IP "\f(CW$self\->post_client_connection_hook\fR" 4
.IX Item "$self->post_client_connection_hook"
This is one final hook that occurs at the very end of the
run_client_connection method.  At this point all other methods and
hooks that will run during the run_client_connection have finished and
the client connection has already been closed.
.Sp
item \f(CW\*(C`$self\->other_child_died_hook($pid)\*(C'\fR
.Sp
Net::Server takes control of signal handling and child process
cleanup; this makes it difficult to tell when a child process
terminates if that child process was not started by Net::Server
itself.  If Net::Server notices another child process dying that it
did not start, it will fire this hook with the \s-1PID\s0 of the terminated
process.
.ie n .IP """$self\->pre_server_close_hook()""" 4
.el .IP "\f(CW$self\->pre_server_close_hook()\fR" 4
.IX Item "$self->pre_server_close_hook()"
This hook occurs before the server begins shutting down.
.ie n .IP """$self\->write_to_log_hook""" 4
.el .IP "\f(CW$self\->write_to_log_hook\fR" 4
.IX Item "$self->write_to_log_hook"
This hook handles writing to log files.  The default hook is to write
to \s-1STDERR\s0, or to the filename contained in the parameter \f(CW\*(C`log_file\*(C'\fR.
The arguments passed are a log level of 0 to 4 (4 being very verbose),
and a log line.  If log_file is equal to \*(L"Sys::Syslog\*(R", then logging
will go to Sys::Syslog and will bypass the write_to_log_hook.
.ie n .IP """$self\->fatal_hook""" 4
.el .IP "\f(CW$self\->fatal_hook\fR" 4
.IX Item "$self->fatal_hook"
This hook occurs when the server has encountered an unrecoverable
error.  Arguments passed are the error message, the package, file, and
line number.  The hook may close the server, but it is suggested that
it simply return and use the built in shut down features.
.ie n .IP """$self\->post_child_cleanup_hook""" 4
.el .IP "\f(CW$self\->post_child_cleanup_hook\fR" 4
.IX Item "$self->post_child_cleanup_hook"
This hook occurs in the parent server process after all children have
been shut down and just before the server either restarts or exits.
It is intended for additional cleanup of information.  At this point
pid_files and lockfiles still exist.
.ie n .IP """$self\->restart_open_hook""" 4
.el .IP "\f(CW$self\->restart_open_hook\fR" 4
.IX Item "$self->restart_open_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before reopening to the filenos of the sockets
that were already opened.
.ie n .IP """$self\->restart_close_hook""" 4
.el .IP "\f(CW$self\->restart_close_hook\fR" 4
.IX Item "$self->restart_close_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before restarting the server via exec.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .IP """$self\->default_values""" 4
.el .IP "\f(CW$self\->default_values\fR" 4
.IX Item "$self->default_values"
Allow for returning configuration values that will be used if no other
value could be found.
.Sp
Should return a hashref.
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            port => 20201,
\&        };
\&    }
.Ve
.ie n .IP """$self\->handle_syslog_error""" 4
.el .IP "\f(CW$self\->handle_syslog_error\fR" 4
.IX Item "$self->handle_syslog_error"
Called when log_file is set to 'Sys::Syslog' and an error occurs while
writing to the syslog.  It is passed two arguments, the value of $@,
and an arrayref containing the arguments that were passed to the log
method when the error occured.
.ie n .IP """$self\->log""" 4
.el .IP "\f(CW$self\->log\fR" 4
.IX Item "$self->log"
Parameters are a log_level and a message.
.Sp
If log_level is set to 'Sys::Syslog', the parameters may alternately
be a log_level, a format string, and format string parameters.  (The
second parameter is assumed to be a format string if additional
arguments are passed along).  Passing arbitrary format strings to
Sys::Syslog will allow the server to be vulnerable to exploit.  The
server maintainer should make sure that any string treated as a format
string is controlled.
.Sp
.Vb 1
\&    # assuming log_file = \*(AqSys::Syslog\*(Aq
\&
\&    $self\->log(1, "My Message with %s in it");
\&    # sends "%s", "My Message with %s in it" to syslog
\&
\&    $self\->log(1, "My Message with %s in it", "Foo");
\&    # sends "My Message with %s in it", "Foo" to syslog
.Ve
.Sp
If log_file is set to a file (other than Sys::Syslog), the message
will be appended to the log file by calling the write_to_log_hook.
.Sp
If the log_file is Sys::Syslog and an error occurs during write, the
handle_syslog_error method will be called and passed the error
exception.  The default option of handle_syslog_error is to die \- but
could easily be told to do nothing by using the following code in your
subclassed server:
.Sp
.Vb 1
\&    sub handle_syslog_error {}
.Ve
.Sp
It the log had been closed, you could attempt to reopen it in the
error handler with the following code:
.Sp
.Vb 4
\&    sub handle_syslog_error {
\&        my $self = shift;
\&        $self\->open_syslog;
\&    }
.Ve
.ie n .IP """$self\->new""" 4
.el .IP "\f(CW$self\->new\fR" 4
.IX Item "$self->new"
As of Net::Server 0.91 there is finally a \*(L"new\*(R" method.  This method
takes a class name and an argument hashref as parameters.  The
argument hashref becomes the \*(L"server\*(R" property of the object.
.Sp
.Vb 2
\&    package MyPackage;
\&    use base qw(Net::Server);
\&
\&    my $obj = MyPackage\->new({port => 20201});
\&
\&    # same as
\&
\&    my $obj = bless {server => {port => 20201}}, \*(AqMyPackage\*(Aq;
.Ve
.ie n .IP """$self\->open_syslog""" 4
.el .IP "\f(CW$self\->open_syslog\fR" 4
.IX Item "$self->open_syslog"
Called during post_configure when the log_file option is set to
\&'Sys::Syslog'.  By default it use the parsed configuration options
listed in this document.  If more custom behavior is desired, the
method could be overridden and Sys::Syslog::openlog should be called
with the custom parameters.
.ie n .IP """$self\->shutdown_sockets""" 4
.el .IP "\f(CW$self\->shutdown_sockets\fR" 4
.IX Item "$self->shutdown_sockets"
This method will close any remaining open sockets.  This is called at
the end of the server_close method.
.SH "RESTARTING"
.IX Header "RESTARTING"
Each of the server personalities (except for \s-1INET\s0), support restarting
via a \s-1HUP\s0 signal (see \*(L"kill \-l\*(R").  When a \s-1HUP\s0 is received, the server
will close children (if any), make sure that sockets are left open,
and re-exec using the same commandline parameters that initially
started the server.  (Note: for this reason it is important that \f(CW@ARGV\fR
is not modified until \f(CW\*(C`\->run\*(C'\fR is called).
.PP
The Net::Server will attempt to find out the commandline used for
starting the program.  The attempt is made before any configuration
files or other arguments are processed.  The outcome of this attempt
is stored using the method \f(CW\*(C`\->commandline\*(C'\fR.  The stored
commandline may also be retrieved using the same method name.  The
stored contents will undoubtedly contain Tainted items that will cause
the server to die during a restart when using the \-T flag (Taint
mode).  As it is impossible to arbitrarily decide what is taint safe
and what is not, the individual program must clean up the tainted
items before doing a restart.
.PP
.Vb 2
\&    sub configure_hook{
\&        my $self = shift;
\&
\&        ### see the contents
\&        my $ref  = $self\->commandline;
\&        use Data::Dumper;
\&        print Dumper $ref;
\&
\&        ### arbitrary untainting \- VERY dangerous
\&        my @untainted = map {/(.+)/;$1} @$ref;
\&
\&        $self\->commandline(\e@untainted)
\&    }
.Ve
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
Each of the Fork and PreFork personalities support graceful shutdowns
via the \s-1QUIT\s0 signal.  When a \s-1QUIT\s0 is recieved, the parent will signal
the children and then wait for them to exit.
.PP
All server personalities support the normal \s-1TERM\s0 and \s-1INT\s0 signal
shutdowns.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork and PreFork personalities have accepted
the \s-1TTIN\s0 and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers
is increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.PP
If the log_level is set to at 3, then the new value is displayed in
the logs.
.SH "FILES"
.IX Header "FILES"
The following files are installed as part of this distribution.
.PP
.Vb 11
\&    Net/Server.pm
\&    Net/Server/Fork.pm
\&    Net/Server/INET.pm
\&    Net/Server/MultiType.pm
\&    Net/Server/PreForkSimple.pm
\&    Net/Server/PreFork.pm
\&    Net/Server/Single.pm
\&    Net/Server/Daemonize.pm
\&    Net/Server/SIG.pm
\&    Net/Server/Proto.pm
\&    Net/Server/Proto/*.pm
.Ve
.SH "INSTALL"
.IX Header "INSTALL"
Download and extract tarball before running these commands in its base
directory:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul at seamons.com>
.SH "THANKS"
.IX Header "THANKS"
Thanks to Rob Brown (bbb at cpan.org) for help with miscellaneous
concepts such as tracking down the serialized select via flock ala
Apache and the reference to IO::Select making multiport servers
possible.  And for researching into allowing sockets to remain open
upon exec (making \s-1HUP\s0 possible).
.PP
Thanks to Jonathan J. Miner <miner at doit.wisc.edu> for patching a
blatant problem in the reverse lookups.
.PP
Thanks to Bennett Todd <bet at rahul.net> for pointing out a problem
in Solaris 2.5.1 which does not allow multiple children to accept on
the same port at the same time.  Also for showing some sample code
from Viktor Duchovni which now represents the semaphore option of the
serialize argument in the PreFork server.
.PP
Thanks to \fItraveler\fR and \fImerlyn\fR from http://perlmonks.org for
pointing me in the right direction for determining the protocol used
on a socket connection.
.PP
Thanks to Jeremy Howard <j+daemonize at howard.fm> for numerous
suggestions and for work on Net::Server::Daemonize.
.PP
Thanks to Vadim <vadim at hardison.net> for patches to implement
parent/child communication on PreFork.pm.
.PP
Thanks to Carl Lewis for suggesting \*(L"\-\*(R" in user names.
.PP
Thanks to Slaven Rezic for suggesing Reuse => 1 in Proto::UDP.
.PP
Thanks to Tim Watt for adding udp_broadcast to Proto::UDP.
.PP
Thanks to Christopher A Bongaarts for pointing out problems with the
Proto::SSL implementation that currently locks around the socket
accept and the \s-1SSL\s0 negotiation. See Net::Server::Proto::SSL.
.PP
Thanks to Alessandro Zummo for pointing out various bugs including
some in configuration, commandline args, and cidr_allow.
.PP
Thanks to various other people for bug fixes over the years.  These
and future thank-you's are available in the Changes file as well as
\&\s-1CVS\s0 comments.
.PP
Thanks to Ben Cohen and tye (on Permonks) for finding and diagnosing
more correct behavior for dealing with re-opening \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client handles.
.PP
Thanks to Mark Martinec for trouble shooting other problems with \s-1STDIN\s0
and \s-1STDOUT\s0 (he proposed having a flag that is now the no_client_stdout
flag).
.PP
Thanks to David (\s-1DSCHWEI\s0) on cpan for asking for the nofatal option
with syslog.
.PP
Thanks to Andreas Kippnick and Peter Beckman for suggesting leaving
open child connections open during a \s-1HUP\s0 (this is now available via
the leave_children_open_on_hup flag).
.PP
Thanks to \s-1LUPE\s0 on cpan for helping patch \s-1HUP\s0 with taint on.
.PP
Thanks to Michael Virnstein for fixing a bug in the check_for_dead
section of PreFork server.
.PP
Thanks to Rob Mueller for patching PreForkSimple to only open
lock_file once during parent call.  This patch should be portable on
systems supporting flock.  Rob also suggested not closing \s-1STDIN/STDOUT\s0
but instead reopening them to /dev/null to prevent spurious warnings.
Also suggested short circuit in post_accept if in \s-1UDP\s0.  Also for
cleaning up some of the child managment code of PreFork.
.PP
Thanks to Mark Martinec for suggesting additional log messages for
failure during accept.
.PP
Thanks to Bill Nesbitt and Carlos Velasco for pointing out double
decrement bug in PreFork.pm (rt #21271)
.PP
Thanks to John W. Krahn for pointing out glaring precended with
non-parened open and ||.
.PP
Thanks to Ricardo Signes for pointing out setuid bug for perl 5.6.1
(rt #21262).
.PP
Thanks to Carlos Velasco for updating the Syslog options (rt #21265).
And for additional fixes later.
.PP
Thanks to Steven Lembark for pointing out that no_client_stdout wasn't
working with the Multiplex server.
.PP
Thanks to Peter Beckman for suggesting allowing Sys::SysLog keyworks
be passed through the \->log method and for suggesting we allow more
types of characters through in syslog_ident.  Also to Peter Beckman
for pointing out that a poorly setup localhost will cause tests to
hang.
.PP
Thanks to Curtis Wilbar for pointing out that the Fork server called
post_accept_hook twice.  Changed to only let the child process call
this, but added the pre_fork_hook method.
.PP
And just a general Thanks You to everybody who is using Net::Server or
who has contributed fixes over the years.
.PP
Thanks to Paul Miller for some \->autoflush, FileHandle fixes.
.PP
Thanks to Patrik Wallstrom for suggesting handling syslog errors
better.
.PP
Thanks again to Rob Mueller for more logic cleanup for child
accounting in PreFork server.
.PP
Thanks to David Schweikert for suggesting handling setlogsock a little
better on newer versions of Sys::Syslog (>= 0.15).
.PP
Thanks to Mihail Nasedkin for suggesting adding a hook that is now
called post_client_connection_hook.
.PP
Thanks to Graham Barr for adding the ability to set the
check_for_spawn and min_child_ttl settings of the PreFork server.
.PP
Thanks to Daniel Kahn Gillmor for adding the other_child_died_hook.
.PP
Thanks to Dominic Humphries for helping not kill pid files on \s-1HUP\s0.
.PP
Thanks to Kristoffer MA\*~XllerhA\*~Xj for fixing \s-1UDP\s0 on Multiplex.
.PP
Thanks to mishikal for patches for helping identify un-cleaned up
children.
.PP
Thanks to rpkelly and tim@retout for pointing out error in header
regex of \s-1HTTP\s0.
.PP
Thanks to dmcbride for some basic \s-1HTTP\s0 parsing fixes, as well as for
some broken tied handle fixes.
.PP
Thanks to Gareth for pointing out glaring bug issues with broken pipe
and semaphore serialization.
.PP
Thanks to \s-1CATONE\s0 for sending the idea for arbitrary signal passing to
children.  (See the sig_passthrough option)
.PP
Thanks to intrigeri@boum for pointing out and giving code ideas for
NS_port not functioning after a \s-1HUP\s0.
.PP
Thanks to Sergey Zasenko for adding sysread/syswrite support to \s-1SSLEAY\s0
as well as the base test.
.PP
Thanks to mbarbon@users. for adding tally dequeue to prefork server.
.PP
Thanks to stefanos@cpan for fixes to PreFork under Win32
.PP
Thanks to Mark Martinec for much of the initial work towards getting
IPv6 going.
.PP
Thanks to the munin developers and Nicolai Langfeldt for hosting the
development verion of Net::Server for so long and for fixes to the
allow_deny checking for IPv6 addresses.
.PP
Thanks to Tatsuhiko Miyagawa for feedback, and for suggesting adding
graceful shutdowns and hot deploy (max_servers adjustment).
.PP
Thanks to TONVOON@cpan for submitting a patch adding Log4perl functionality.
.PP
Thanks to Miko O'Sullivan for fixes to \s-1HTTP\s0 to correct tainting issues
and passing initial log fixes, and for patches to fix \s-1CLOSE\s0 on tied stdout
and various other \s-1HTTP\s0 issues.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::HTTP
.SH "TODO"
.IX Header "TODO"
Improve test suite to fully cover code (using Devel::Cover).  Anybody
that wanted to send me patches to the t/*.t tests that improved
coverage would earn a big thank you.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    Paul Seamons <paul at seamons.com>
\&    http://seamons.com/
\&
\&    Rob Brown <bbb at cpan.org>
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This package may be distributed under the terms of either the
.PP
.Vb 3
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
.Ve
.PP
All rights reserved.
osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server5.18.3pm                          0100644 0001750 0001750 00000232752 12566241464 023733  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server 3"
.TH Net::Server 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server \- Extensible, general Perl server engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #!/usr/bin/perl \-w \-T
\&    package MyPackage;
\&
\&    use base qw(Net::Server);
\&
\&    sub process_request {
\&        my $self = shift;
\&        while (<STDIN>) {
\&            s/[\er\en]+$//;
\&            print "You said \*(Aq$_\*(Aq\e015\e012"; # basic echo
\&            last if /quit/i;
\&        }
\&    }
\&
\&    MyPackage\->run(port => 160, ipv => \*(Aq*\*(Aq);
\&
\&
\&    # one liner to get going quickly
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => 20208)\*(Aq
\&
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, any available IPv4 and IPv6 sockets will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
.Ve
.SH "FEATURES"
.IX Header "FEATURES"
.Vb 10
\&    * Full IPv6 support
\&    * Working SSL sockets and https (both with and without IO::Socket::SSL)
\&    * Single Server Mode
\&    * Inetd Server Mode
\&    * Preforking Simple Mode (PreForkSimple)
\&    * Preforking Managed Mode (PreFork)
\&    * Forking Mode
\&    * Multiplexing Mode using a single process
\&    * Multi port accepts on Single, Preforking, and Forking modes
\&    * Basic HTTP Daemon (supports IPv6, SSL, full apache style logs)
\&    * Basic PSGI Daemon
\&    * Simultaneous accept/recv on tcp/udp/unix, ssl/tcp, and IPv4/IPv6 sockets
\&    * Safe signal handling in Fork/PreFork avoids perl signal trouble
\&    * User customizable hooks
\&    * Chroot ability after bind
\&    * Change of user and group after bind
\&    * Basic allow/deny access control
\&    * Pluggable logging (Sys::Syslog, Log::Log4perl, log_file, STDERR, or your own)
\&    * HUP able server (clean restarts via sig HUP)
\&    * Graceful shutdowns (via sig QUIT)
\&    * Hot deploy in Fork and PreFork modes (via sig TTIN and TTOU)
\&    * Dequeue ability in all Fork and PreFork modes.
\&    * Taint clean
\&    * Written in Perl
\&    * Protection against buffer overflow
\&    * Clean process flow
\&    * Extensibility
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Server\*(C'\fR is an extensible, generic Perl server engine.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR attempts to be a generic server as in \f(CW\*(C`Net::Daemon\*(C'\fR
and \f(CW\*(C`NetServer::Generic\*(C'\fR.  It includes with it the ability to run as
an inetd process (\f(CW\*(C`Net::Server::INET\*(C'\fR), a single connection server
(\f(CW\*(C`Net::Server\*(C'\fR or \f(CW\*(C`Net::Server::Single\*(C'\fR), a forking server
(\f(CW\*(C`Net::Server::Fork\*(C'\fR), a preforking server which maintains a constant
number of preforked children (\f(CW\*(C`Net::Server::PreForkSimple\*(C'\fR), or as a
managed preforking server which maintains the number of children based
on server load (\f(CW\*(C`Net::Server::PreFork\*(C'\fR).  In all but the inetd type,
the server provides the ability to connect to one or to multiple
server ports.
.PP
The additional server types are made possible via \*(L"personalities\*(R" or
sub classes of the \f(CW\*(C`Net::Server\*(C'\fR.  By moving the multiple types of
servers out of the main \f(CW\*(C`Net::Server\*(C'\fR class, the \f(CW\*(C`Net::Server\*(C'\fR
concept is easily extended to other types (in the near future, we
would like to add a \*(L"Thread\*(R" personality).
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR borrows several concepts from the Apache Webserver.
\&\f(CW\*(C`Net::Server\*(C'\fR uses \*(L"hooks\*(R" to allow custom servers such as \s-1SMTP,
HTTP, POP3,\s0 etc. to be layered over the base \f(CW\*(C`Net::Server\*(C'\fR class.  In
addition the \f(CW\*(C`Net::Server::PreFork\*(C'\fR class borrows concepts of
min_start_servers, max_servers, and min_waiting servers.
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR also uses the concept of an flock serialized
accept when accepting on multiple ports (PreFork can choose between
flock, IPC::Semaphore, and pipe to control serialization).
.SH "PERSONALITIES"
.IX Header "PERSONALITIES"
\&\f(CW\*(C`Net::Server\*(C'\fR is built around a common class (Net::Server) and is
extended using sub classes, or \f(CW\*(C`personalities\*(C'\fR.  Each personality
inherits, overrides, or enhances the base methods of the base class.
.PP
Included with the Net::Server package are several basic personalities,
each of which has their own use.
.IP "Fork" 4
.IX Item "Fork"
Found in the module Net/Server/Fork.pm (see Net::Server::Fork).
This server binds to one or more ports and then waits for a
connection.  When a client request is received, the parent forks a
child, which then handles the client and exits.  This is good for
moderately hit services.
.IP "\s-1INET\s0" 4
.IX Item "INET"
Found in the module Net/Server/INET.pm (see Net::Server::INET).
This server is designed to be used with inetd.  The \f(CW\*(C`pre_bind\*(C'\fR,
\&\f(CW\*(C`bind\*(C'\fR, \f(CW\*(C`accept\*(C'\fR, and \f(CW\*(C`post_accept\*(C'\fR are all overridden as these
services are taken care of by the \s-1INET\s0 daemon.
.IP "MultiType" 4
.IX Item "MultiType"
Found in the module Net/Server/MultiType.pm (see
Net::Server::MultiType).  This server has no server functionality
of its own.  It is designed for servers which need a simple way to
easily switch between different personalities.  Multiple
\&\f(CW\*(C`server_type\*(C'\fR parameters may be given and Net::Server::MultiType will
cycle through until it finds a class that it can use.
.IP "Multiplex" 4
.IX Item "Multiplex"
Found in the module Net/Server/Multiplex.pm (see
Net::Server::Multiplex).  This server binds to one or more ports.
It uses IO::Multiplex to multiplex between waiting for new connections
and waiting for input on currently established connections.  This
personality is designed to run as one process without forking.  The
\&\f(CW\*(C`process_request\*(C'\fR method is never used but the \f(CW\*(C`mux_input\*(C'\fR callback
is used instead (see also IO::Multiplex).  See
examples/samplechat.pl for an example using most of the features of
Net::Server::Multiplex.
.IP "PreForkSimple" 4
.IX Item "PreForkSimple"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`max_servers\*(C'\fR child process.  The server will make sure
that at any given time there are always \f(CW\*(C`max_servers\*(C'\fR available to
receive a client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can dedicate max_server processes no matter what the
load.  It should scale well for most applications.  Multi port accept
is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "PreFork" 4
.IX Item "PreFork"
Found in the module Net/Server/PreFork.pm (see
Net::Server::PreFork).  This server binds to one or more ports and
then forks \f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure
that at any given time there are at least \f(CW\*(C`min_spare_servers\*(C'\fR but not
more than \f(CW\*(C`max_spare_servers\*(C'\fR available to receive a client request,
up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site, and should scale well for most applications.  Multi port
accept is accomplished using either flock, IPC::Semaphore, or pipe to
serialize the children.  Serialization may also be switched on for
single port in order to get around an \s-1OS\s0 that does not allow multiple
children to accept at the same time.  For a further discussion of
serialization see Net::Server::PreFork.
.IP "Single" 4
.IX Item "Single"
All methods fall back to Net::Server.  This personality is provided
only as parallelism for Net::Server::MultiType.
.IP "\s-1HTTP\s0" 4
.IX Item "HTTP"
Not a distinct personality.  Provides a basic \s-1HTTP\s0 daemon.  This can
be combined with the \s-1SSL\s0 or \s-1SSLEAY\s0 proto to provide an \s-1HTTPS\s0 Daemon.
See Net::Server::HTTP.
.PP
\&\f(CW\*(C`Net::Server\*(C'\fR was partially written to make it easy to add new
personalities.  Using separate modules built upon an open architecture
allows for easy addition of new features, a separate development
process, and reduced code bloat in the core module.
.SH "SOCKET ACCESS"
.IX Header "SOCKET ACCESS"
Once started, the Net::Server will take care of binding to port and
waiting for connections.  Once a connection is received, the
Net::Server will accept on the socket and will store the result (the
client connection) in \f(CW$self\fR\->{server}\->{client}.  This
property is a Socket blessed into the the IO::Socket classes.  \s-1UDP\s0
servers are slightly different in that they will perform a \fBrecv\fR
instead of an \fBaccept\fR.
.PP
To make programming easier, during the post_accept phase, \s-1STDIN\s0 and
\&\s-1STDOUT\s0 are opened to the client connection.  This allows for programs
to be written using <\s-1STDIN\s0> and print \*(L"out\en\*(R" to print to the
client connection.  \s-1UDP\s0 will require using a \->send call.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following is a very simple server.  The main functionality occurs
in the process_request method call as shown below.  Notice the use of
timeouts to prevent Denial of Service while reading.  (Other examples
of using \f(CW\*(C`Net::Server\*(C'\fR can, or will, be included with this
distribution).
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&
\&    use strict;
\&    use base qw(Net::Server::PreFork); # any personality will do
\&
\&    MyPackage\->run;
\&
\&    # over\-ride the default echo handler
\&
\&    sub process_request {
\&        my $self = shift;
\&        eval {
\&
\&            local $SIG{\*(AqALRM\*(Aq} = sub { die "Timed Out!\en" };
\&            my $timeout = 30; # give the user 30 seconds to type some lines
\&
\&            my $previous_alarm = alarm($timeout);
\&            while (<STDIN>) {
\&                s/\er?\en$//;
\&                print "You said \*(Aq$_\*(Aq\er\en";
\&                alarm($timeout);
\&            }
\&            alarm($previous_alarm);
\&
\&        };
\&
\&        if ($@ =~ /timed out/i) {
\&            print STDOUT "Timed Out.\er\en";
\&            return;
\&        }
\&
\&    }
\&
\&    1;
.Ve
.PP
Playing this file from the command line will invoke a Net::Server
using the PreFork personality.  When building a server layer over the
Net::Server, it is important to use features such as timeouts to
prevent Denial Of Service attacks.
.PP
Net::Server comes with a built in echo server by default.  You can test it
out by simply running the following from the commandline:
.PP
.Vb 1
\&    net\-server
.Ve
.PP
If you wanted to try another flavor you could try
.PP
.Vb 1
\&    net\-server PreFork
.Ve
.PP
If you wanted to try out a basic \s-1HTTP\s0 server you could use
.PP
.Vb 1
\&    net\-server HTTP
.Ve
.PP
Or if you wanted to test out a \s-1CGI\s0 you are writing you could use
.PP
.Vb 1
\&    net\-server HTTP \-\-app ../../mycgi.cgi
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
There are at least five possible ways to pass arguments to
Net::Server.  They are \fIpassing to the new method\fR, \fIpassing on
command line\fR, \fIpassing parameters to run\fR, \fIusing a conf file\fR,
\&\fIreturning values in the default_values method\fR, or \fIconfiguring the
values in post_configure_hook\fR.
.PP
The \f(CW\*(C`options\*(C'\fR method is used to determine which arguments the server
will search for and can be used to extend the parsed parameters.  Any
arguments found from the command line, parameters passed to run, and
arguments found in the conf_file will be matched against the keys of
the options template.  Any commandline parameters that do not match
will be left in place and can be further processed by the server in
the various hooks (by looking at \f(CW@ARGV\fR).  Arguments passed to new will
automatically win over any other options (this can be used if you
would like to disallow a user passing in other arguments).
.PP
Arguments consist of key value pairs.  On the commandline these pairs
follow the \s-1POSIX\s0 fashion of \f(CW\*(C`\-\-key value\*(C'\fR or \f(CW\*(C`\-\-key=value\*(C'\fR, and also
\&\f(CW\*(C`key=value\*(C'\fR.  In the conf file the parameter passing can best be
shown by the following regular expression:
($key,$val)=~/^(\ew+)\es+(\eS+?)\es+$/.  Passing arguments to the run
method is done as follows: \f(CW\*(C`<Net::Server\->run(key1 =\*(C'\fR 'val1')>>.
Passing arguments via a prebuilt object can best be shown in the
following code:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
\&
\&    package MyPackage;
\&    use strict;
\&    use base qw(Net::Server);
\&
\&    my $server = MyPackage\->new({
\&        key1 => \*(Aqval1\*(Aq,
\&    });
\&
\&    $server\->run;
.Ve
.PP
All five methods for passing arguments may be used at the same time.
Once an argument has been set, it is not over written if another
method passes the same argument.  \f(CW\*(C`Net::Server\*(C'\fR will look for
arguments in the following order:
.PP
.Vb 5
\&    1) Arguments passed to the C<new> method.
\&    2) Arguments passed on command line.
\&    3) Arguments passed to the C<run> method.
\&    4) Arguments passed via a conf file.
\&    5) Arguments set in the C<default_values> method.
.Ve
.PP
Additionally the following hooks are available:
.PP
.Vb 4
\&    1) Arguments set in the configure_hook (occurs after new
\&       but before any of the other areas are checked).
\&    2) Arguments set and validated in the post_configure_hook
\&       (occurs after all of the other areas are checked).
.Ve
.PP
Each of these levels will override parameters of the same name
specified in subsequent levels.  For example, specifying \-\-setsid=0 on
the command line will override a value of \*(L"setsid 1\*(R" in the conf file.
.PP
Note that the configure_hook method doesn't return values to set, but
is there to allow for setting up configured values before the
configure method is called.
.PP
Key/value pairs used by the server are removed by the configuration
process so that server layers on top of \f(CW\*(C`Net::Server\*(C'\fR can pass and
read their own parameters.
.SH "ADDING CUSTOM ARGUMENTS"
.IX Header "ADDING CUSTOM ARGUMENTS"
It is possible to add in your own custom parameters to those parsed by
Net::Server.  The following code shows how this is done:
.PP
.Vb 4
\&    sub options {
\&        my $self     = shift;
\&        my $prop     = $self\->{\*(Aqserver\*(Aq};
\&        my $template = shift;
\&
\&        # setup options in the parent classes
\&        $self\->SUPER::options($template);
\&
\&        # add a single value option
\&        $prop\->{\*(Aqmy_option\*(Aq} ||= undef;
\&        $template\->{\*(Aqmy_option\*(Aq} = \e $prop\->{\*(Aqmy_option\*(Aq};
\&
\&        # add a multi value option
\&        $prop\->{\*(Aqan_arrayref_item\*(Aq} ||= [];
\&        $template\->{\*(Aqan_arrayref_item\*(Aq} = $prop\->{\*(Aqan_arrayref_item\*(Aq};
\&    }
.Ve
.PP
Overriding the \f(CW\*(C`options\*(C'\fR method allows for adding your own custom
fields.  A template hashref is passed in, that should then be modified
to contain an of your custom fields.  Fields which are intended to
receive a single scalar value should have a reference to the
destination scalar given.  Fields which are intended to receive
multiple values should reference the corresponding destination
arrayref.
.PP
You are responsible for validating your custom options once they have
been parsed.  The post_configure_hook is a good place to do your
validation.
.PP
Some emails have asked why we use this \*(L"template\*(R" method.  The idea is
that you are creating the the data structure to store the values in,
and you are also creating a way to get the values into the data
structure.  The template is the way to get the values to the servers
data structure.  One of the possibilities (that probably isn't used
that much) is that by letting you specify the mapping, you could build
a nested data structure \- even though the passed in arguments are
flat.  It also allows you to setup aliases to your names.
.PP
For example, a basic structure might look like this:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq}
\&
\&   $prop\->{\*(Aqmy_custom_option\*(Aq} ||= undef;
\&   $prop\->{\*(Aqmy_custom_array\*(Aq}  ||= [];
\&
\&   $template = {
\&       my_custom_option => \e $prop\->{\*(Aqmy_custom_option\*(Aq},
\&       mco              => \e $prop\->{\*(Aqmy_custom_option\*(Aq}, # alias
\&       my_custom_array  => $prop\->{\*(Aqmy_custom_array\*(Aq},
\&       mca              => $prop\->{\*(Aqmy_custom_array\*(Aq}, # an alias
\&   };
\&
\&   $template\->{\*(Aqmco2\*(Aq} = $template\->{\*(Aqmco\*(Aq}; # another way to alias
.Ve
.PP
But you could also have more complex data:
.PP
.Vb 1
\&   $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&   $prop\->{\*(Aqone_layer\*(Aq} = {
\&       two_layer => [
\&           undef,
\&           undef,
\&       ],
\&   };
\&
\&   $template = {
\&       param1 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[0],
\&       param2 => \e $prop\->{\*(Aqone_layer\*(Aq}\->{\*(Aqtwo_layer\*(Aq}\->[1],
\&   };
.Ve
.PP
This is of course a contrived example \- but it does show that you can
get the data from the flat passed in arguments to whatever type of
structure you need \- with only a little bit of effort.
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 2
\&    Key               Value                    Default
\&    conf_file         "filename"               undef
\&
\&    log_level         0\-4                      2
\&    log_file          (filename|Sys::Syslog
\&                       |Log::Log4perl)         undef
\&
\&    port              \ed+                      20203
\&    host              "host"                   "*"
\&    ipv               (4|6|*)                  *
\&    proto             (tcp|udp|unix)           "tcp"
\&    listen            \ed+                      SOMAXCONN
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
\&
\&    reverse_lookups   1                        undef
\&    allow             /regex/                  none
\&    deny              /regex/                  none
\&    cidr_allow        CIDR                     none
\&    cidr_deny         CIDR                     none
\&
\&    ## daemonization parameters
\&    pid_file          "filename"               undef
\&    chroot            "directory"              undef
\&    user              (uid|username)           "nobody"
\&    group             (gid|group)              "nobody"
\&    background        1                        undef
\&    setsid            1                        undef
\&
\&    no_close_by_child (1|undef)                undef
\&
\&    ## See Net::Server::Proto::(TCP|UDP|UNIX|SSL|SSLeay|etc)
\&    ## for more sample parameters.
.Ve
.IP "conf_file" 4
.IX Item "conf_file"
Filename from which to read additional key value pair arguments for
starting the server.  Default is undef.
.Sp
There are two ways that you can specify a default location for a
conf_file.  The first is to pass the default value to the run method
as in:
.Sp
.Vb 3
\&    MyServer\->run({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    });
.Ve
.Sp
If the end user passes in \-\-conf_file=/etc/their_server.conf then the
value will be overridden.
.Sp
The second way to do this was added in the 0.96 version.  It uses the
default_values method as in:
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&        }
\&    }
.Ve
.Sp
This method has the advantage of also being able to be overridden in
the run method.
.Sp
If you do not want the user to be able to specify a conf_file at all,
you can pass conf_file to the new method when creating your object:
.Sp
.Vb 3
\&    MyServer\->new({
\&       conf_file => \*(Aq/etc/my_server.conf\*(Aq,
\&    })\->run;
.Ve
.Sp
If passed this way, the value passed to new will \*(L"win\*(R" over any of the
other passed in values.
.IP "log_level" 4
.IX Item "log_level"
Ranges from 0 to 4 in level.  Specifies what level of error will be
logged.  \*(L"O\*(R" means logging is off.  \*(L"4\*(R" means very verbose.  These
levels should be able to correlate to syslog levels.  Default is 2.
These levels correlate to syslog levels as defined by the following
key/value pairs: 0=>'err', 1=>'warning', 2=>'notice', 3=>'info',
4=>'debug'.
.IP "log_file" 4
.IX Item "log_file"
Name of log file or log subsystem to be written to.  If no name is given and the
write_to_log_hook is not overridden, log goes to \s-1STDERR. \s0 Default is
undef.
.Sp
The log_file may also be the name of a Net::Server pluggable logging
class.  Net::Server is packaged with Sys::Syslog and Log::Log4perl.
If the log_file looks like a module name, it will have
\&\*(L"Net::Server::Log::\*(R" added to the front and it will then be required.
The package should provide an \f(CW\*(C`initialize\*(C'\fR class method that returns
a single function which will be used for logging.  This returned
function will be passed log_level, and message.
.Sp
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Net::Server::Log::Sys::Syslog module.  If syslog is used the
parameters \f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and
\&\f(CW\*(C`syslog_logopt\*(C'\fR,and \f(CW\*(C`syslog_facility\*(C'\fR may also be defined.  See
Net::Server::Log::Sys::Syslog.
.Sp
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined. See
Net::Server::Log::Log::Log4per.
.Sp
If a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0
will automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT. \s0 This will prevent any output from ending up at the terminal.
.IP "pid_file" 4
.IX Item "pid_file"
Filename to store pid of parent process.  Generally applies only to
forking servers.  Default is none (undef).
.IP "port" 4
.IX Item "port"
See Net::Server::Proto for further examples of configuration.
.Sp
Local port/socket on which to bind.  If it is a low port, the process
must start as root.  If multiple ports are given, all will be bound at
server startup.  May be of the form \f(CW\*(C`host:port/proto\*(C'\fR,
\&\f(CW\*(C`host:port/proto/ipv\*(C'\fR, \f(CW\*(C`host:port\*(C'\fR, \f(CW\*(C`port/proto\*(C'\fR, or \f(CW\*(C`port\*(C'\fR, where
\&\fIhost\fR represents a hostname residing on the local box, where \fIport\fR
represents either the number of the port (eg. \*(L"80\*(R") or the service
designation (eg. \*(L"http\*(R"), where \fIipv\fR represents the \s-1IP\s0 protocol version
(IPv4 or IPv6 or IPv*) and where \fIproto\fR represents the protocol to be
used. See Net::Server::Proto.  The following are some valid port
strings:
.Sp
.Vb 9
\&    20203                            # port only
\&    localhost:20203                  # host and port
\&    localhost:http                   # localhost bound to port 80
\&    localhost:20203/tcp              # host, port, protocol
\&    localhost:20203/tcp/IPv*         # host, port, protocol and family
\&    localhost, 20203, tcp, IPv*      # same
\&    localhost | 20203 | tcp | IPv*   # same
\&    localhost:20203/IPv*             # bind any configured interfaces for IPv4 or 6 (default)
\&    localhost:20203/IPv4/IPv6        # bind localhost on IPv4 and 6 (fails if it cannot do both)
\&
\&    *:20203                          # bind all local interfaces
.Ve
.Sp
Additionally, when passed in the code (non-commandline, and non-config),
the port may be passed as a hashref or array hashrefs of information:
.Sp
.Vb 6
\&    port => {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 6,     # IPv6 only
\&        proto => \*(Aqudp\*(Aq, # UDP protocol
\&    }
\&
\&    port => [{
\&        host  => \*(Aq*\*(Aq,
\&        port  => \*(Aq20203\*(Aq,
\&        ipv   => 4,     # IPv4 only
\&        proto => \*(Aqtcp\*(Aq, # (default)
\&    }, {
\&        host  => \*(Aqlocalhost\*(Aq,
\&        port  => \*(Aq20204\*(Aq,
\&        ipv   => \*(Aq*\*(Aq,      # default \- all IPv4 and IPv6 interfaces tied to localhost
\&        proto => \*(Aqssleay\*(Aq, # or ssl \- Using SSL
\&    }],
.Ve
.Sp
An explicit \fIhost\fR given in a port specification overrides a default
binding address (a \f(CW\*(C`host\*(C'\fR setting, see below).  The \fIhost\fR part may
be enclosed in square brackets, but when it is a numerical IPv6
address it \fBshould\fR be enclosed in square brackets to avoid ambiguity
in parsing a port number, e.g.: \*(L"[::1]:80\*(R".  However you could also
use pipes, white space, or commas to separate these.  Note that host
and port number must come first.
.Sp
If the protocol is not specified, \fIproto\fR will default to the
\&\f(CW\*(C`proto\*(C'\fR specified in the arguments.  If \f(CW\*(C`proto\*(C'\fR is not specified
there it will default to \*(L"tcp\*(R".  If \fIhost\fR is not specified, \fIhost\fR
will default to \f(CW\*(C`host\*(C'\fR specified in the arguments.  If \f(CW\*(C`host\*(C'\fR is not
specified there it will default to \*(L"*\*(R".  Default port is 20203.
Configuration passed to new or run may be either a scalar containing a
single port number or an arrayref of ports.  If \f(CW\*(C`ipv\*(C'\fR is not specified
it will default to \*(L"*\*(R" (Any resolved addresses under IPv4 or IPv6).
.Sp
If you are working with unix sockets, you may also specify
\&\f(CW\*(C`socket_file|unix\*(C'\fR or \f(CW\*(C`socket_file|type|unix\*(C'\fR where type is \s-1SOCK_DGRAM\s0
or \s-1SOCK_STREAM.\s0
.Sp
On systems that support it, a port value of 0 may be used to ask
the \s-1OS\s0 to auto-assign a port.  The value of the auto-assigned port
will be stored in the NS_port property of the Net::Server::Proto::TCP
object and is also available in the sockport method.  When the server
is processing a request, the \f(CW$self\fR\->{server}\->{sockport} property
contains the port that was connected through.
.IP "host" 4
.IX Item "host"
Local host or addr upon which to bind port.  If a value of '*' is
given, the server will bind that port on all available addresses on
the box.  The \f(CW\*(C`host\*(C'\fR argument provides a default local host address
if the \f(CW\*(C`port\*(C'\fR argument omits a host specification.  See
Net::Server::Proto. See IO::Socket.  Configuration passed to new
or run may be either a scalar containing a single host or an arrayref
of hosts \- if the hosts array is shorter than the ports array, the
last host entry will be used to augment the hosts arrary to the size
of the ports array.
.Sp
If an IPv4 address is passed, an IPv4 socket will be created.  If an
IPv6 address is passed, an IPv6 socket will be created.  If a hostname
is given, Net::Server will look at the value of ipv (default IPv4) to
determine which type of socket to create.  Optionally the ipv
specification can be passed as part of the hostname.
.Sp
.Vb 1
\&    host => "127.0.0.1",  # an IPv4 address
\&
\&    host => "::1",        # an IPv6 address
\&
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (default any IPv4 and/or IPv6)
\&
\&    host => \*(Aqlocalhost/IPv*\*(Aq,  # same
\&
\&    ipv  => 6,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv6)
\&
\&    ipv  => 4,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (IPv4)
\&
\&    ipv  => \*(AqIPv4 IPv6\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses matched by localhost (requires IPv6 and IPv4)
\&
\&    host => \*(Aq*\*(Aq,          # any local interfaces (any IPv6 or IPv4)
\&
\&    host => \*(Aq*/IPv*\*(Aq,     # same (any IPv6 or IPv4)
\&
\&    ipv  => 4,
\&    host => \*(Aq*\*(Aq,          # any local IPv4 interfaces interfaces
.Ve
.IP "proto" 4
.IX Item "proto"
See Net::Server::Proto.
Protocol to use when binding ports.  See IO::Socket.  As of release
2.0, Net::Server supports tcp, udp, and unix, unixdgram, ssl, and
ssleay.  Other types will need to be added later (or custom modules
extending the Net::Server::Proto class may be used).  Configuration
passed to new or run may be either a scalar containing a single proto
or an arrayref of protos \- if the protos array is shorter than the
ports array, the last proto entry will be used to augment the protos
arrary to the size of the ports array.
.Sp
Additionally the proto may also contain the ipv specification.
.IP "ipv (IPv4 and IPv6)" 4
.IX Item "ipv (IPv4 and IPv6)"
See Net::Server::Proto.
.Sp
IPv6 is now available under Net::Server.  It will be used
automatically if an IPv6 address is passed, or if the ipv is set
explicitly to IPv6, or if ipv is left as the default value of IPv*.
This is a significant change from version 2.004 and earlier where the
default value was IPv4.  However, the previous behavior led to
confusion on IPv6 only hosts, and on hosts that only had IPv6 entries
for a local hostname.  Trying to pass an IPv4 address when ipv is set
to 6 (only 6 \- not * or 4) will result in an error.
.Sp
.Vb 2
\&    localhost:20203 # will use IPv6 if there is a corresponding entry for localhost
\&                    # it will also use IPv4 if there is a corresponding v4 entry for localhost
\&
\&    localhost:20203:IPv*  # same (default)
\&
\&    localhost:20203:IPv6  # will use IPv6
\&
\&    [::1]:20203           # will use IPv6 (IPv6 style address)
\&
\&    localhost:20203:IPv4  # will use IPv4
\&
\&    127.0.0.1:20203       # will use IPv4 (IPv4 style address
\&
\&    localhost:20203:IPv4:IPv6 # will bind to both v4 and v6 \- fails otherwise
\&
\&    # or as a hashref as
\&    port => {
\&        host => "localhost",
\&        ipv  => 6, # only binds IPv6
\&    }
\&
\&    port => {
\&        host => "localhost",
\&        ipv  => 4, # only binds IPv4
\&    }
\&
\&    port => {
\&        host => "::1",
\&        ipv  => "IPv6", # same as passing "6"
\&    }
\&
\&    port => {
\&        host => "localhost/IPv*",       # any IPv4 or IPv6
\&    }
\&
\&    port => {
\&        host => "localhost IPv4 IPv6",  # must create both
\&    }
.Ve
.Sp
In many proposed Net::Server solutions, IPv* was enabled by default.
For versions 2.000 through 2.004, the previous default of IPv4 was
used.  We have attempted to make it easy to set IPv4, IPv6, or IPv*.
If you do not want or need IPv6, simply set ipv to 4, pass IPv4 along
in the port specification, set \f(CW$ENV\fR{'\s-1IPV\s0'}=4; before running the
server, or uninstall IO::Socket::INET6.
.Sp
On my local box the following command results in the following output:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "localhost")\*(Aq
\&
\&    Resolved [localhost]:20203 to [::1]:20203, IPv6
\&    Resolved [localhost]:20203 to [127.0.0.1]:20203, IPv4
\&    Binding to TCP port 20203 on host ::1 with IPv6
\&    Binding to TCP port 20203 on host 127.0.0.1 with IPv4
.Ve
.Sp
My local box has IPv6 enabled and there are entries for localhost on
both IPv6 ::1 and IPv4 127.0.0.1.  I could also choose to explicitly
bind ports rather than depending upon ipv => \*(L"*\*(R" to resolve them for
me as in the following:
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(port => [20203,20203], host => "localhost", ipv => [4,6])\*(Aq
\&
\&    Binding to TCP port 20203 on host localhost with IPv4
\&    Binding to TCP port 20203 on host localhost with IPv6
.Ve
.Sp
There is a special case of using host => \*(L"*\*(R" as well as ipv => \*(L"*\*(R".
The Net::Server::Proto::_bindv6only method is used to check the system
setting for \f(CW\*(C`sysctl \-n net.ipv6.bindv6only\*(C'\fR (or
net.inet6.ip6.v6only).  If this setting is false, then an IPv6 socket
will listen for the corresponding IPv4 address.  For example the
address [::] (IPv6 equivalent of \s-1INADDR_ANY\s0) will also listen for
0.0.0.0.  The address ::FFFF:127.0.0.1 (IPv6) would also listen to
127.0.0.1 (IPv4).  In this case, only one socket will be created
because it will handle both cases (an error is returned if an attempt
is made to listen to both addresses when bindv6only is false).
.Sp
However, if net.ipv6.bindv6only (or equivalent) is true, then a
hostname (such as *) resolving to both a IPv4 entry as well as an IPv6
will result in both an IPv4 socket as well as an IPv6 socket.
.Sp
On my linux box which defaults to net.ipv6.bindv6only=0, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Not including resolved host [0.0.0.0] IPv4 because it will be handled by [::] IPv6
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
If I issue a \f(CW\*(C`sudo /sbin/sysctl \-w net.ipv6.bindv6only=1\*(C'\fR, the following is output.
.Sp
.Vb 1
\&    perl \-e \*(Aquse base qw(Net::Server); main\->run(host => "*")\*(Aq
\&
\&    Resolved [*]:8080 to [0.0.0.0]:8080, IPv4
\&    Resolved [*]:8080 to [::]:8080, IPv6
\&    Binding to TCP port 8080 on host 0.0.0.0 with IPv4
\&    Binding to TCP port 8080 on host :: with IPv6
.Ve
.Sp
\&\s-1BSD\s0 differs from linux and generally defaults to
net.inet6.ip6.v6only=0.  If it cannot be determined on your \s-1OS,\s0 it
will default to false and the log message will change from \*(L"it will be
handled\*(R" to \*(L"it should be handled\*(R" (if you have a non-resource
intensive way to check on your platform, feel free to email me).  Be
sure to check the logs as you test your server to make sure you have
bound the ports you desire.  You can always pass in individual
explicit IPv4 and IPv6 port specifications if you need.  For example,
if your system has both IPv4 and IPv6 interfaces but you'd only like
to bind to IPv6 entries, then you should use a hostname of [::]
instead of [*].
.Sp
If bindv6only (or equivalent) is false, and you receive an IPv4
connection on a bound IPv6 port, the textual representation of the
peer's IPv4 address will typically be in a form of an IPv4\-mapped IPv6
addresses, e.g. \*(L"::FFFF:127.0.0.1\*(R" .
.Sp
The ipv parameter was chosen because it does not conflict with any
other existing usage, it is very similar to ipv4 or ipv6, it allows
for user code to not need to know about Socket::AF_INET or
Socket6::AF_INET6 or Socket::AF_UNSPEC, and it is short.
.IP "listen" 4
.IX Item "listen"
See IO::Socket.  Not used with udp protocol (or \s-1UNIX SOCK_DGRAM\s0).
.IP "reverse_lookups" 4
.IX Item "reverse_lookups"
Specify whether to lookup the hostname of the connected \s-1IP.\s0
Information is cached in server object under \f(CW\*(C`peerhost\*(C'\fR property.
Default is to not use reverse_lookups (undef).
.IP "allow/deny" 4
.IX Item "allow/deny"
May be specified multiple times.  Contains regex to compare to
incoming peeraddr or peerhost (if reverse_lookups has been enabled).
If allow or deny options are given, the incoming client must match an
allow and not match a deny or the client connection will be closed.
Defaults to empty array refs.
.IP "cidr_allow/cidr_deny" 4
.IX Item "cidr_allow/cidr_deny"
May be specified multiple times.  Contains a \s-1CIDR\s0 block to compare to
incoming peeraddr.  If cidr_allow or cidr_deny options are given, the
incoming client must match a cidr_allow and not match a cidr_deny or
the client connection will be closed.  Defaults to empty array refs.
.IP "chroot" 4
.IX Item "chroot"
Directory to chroot to after bind process has taken place and the
server is still running as root.  Defaults to undef.
.IP "user" 4
.IX Item "user"
Userid or username to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`user\*(C'\fR equal to \*(L"root\*(R".
.IP "group" 4
.IX Item "group"
Groupid or groupname to become after the bind process has occured.
Defaults to \*(L"nobody.\*(R"  If you would like the server to run as root,
you will have to specify \f(CW\*(C`group\*(C'\fR equal to \*(L"root\*(R".
.IP "background" 4
.IX Item "background"
Specifies whether or not the server should fork after the bind method
to release itself from the command line.  Defaults to undef.  Process
will also background if \f(CW\*(C`setsid\*(C'\fR is set.
.IP "setsid" 4
.IX Item "setsid"
Specifies whether or not the server should fork after the bind method
to release itself from the command line and then run the
\&\f(CW\*(C`POSIX::setsid()\*(C'\fR command to truly daemonize.  Defaults to undef.  If
a \f(CW\*(C`log_file\*(C'\fR is given or if \f(CW\*(C`setsid\*(C'\fR is set, \s-1STDIN\s0 and \s-1STDOUT\s0 will
automatically be opened to /dev/null and \s-1STDERR\s0 will be opened to
\&\s-1STDOUT. \s0 This will prevent any output from ending up at the terminal.
.IP "no_close_by_child" 4
.IX Item "no_close_by_child"
Boolean.  Specifies whether or not a forked child process has
permission or not to shutdown the entire server process.  If set to 1,
the child may \s-1NOT\s0 signal the parent to shutdown all children.  Default
is undef (not set).
.IP "no_client_stdout" 4
.IX Item "no_client_stdout"
Boolean.  Default undef (not set).  Specifies that \s-1STDIN\s0 and \s-1STDOUT\s0
should not be opened on the client handle once a connection has been
accepted.  By default the Net::Server will open \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client socket making it easier for many types of scripts to read
directly from and write directly to the socket using normal print and
read methods.  Disabling this is useful on clients that may be opening
their own connections to \s-1STDIN\s0 and \s-1STDOUT.\s0
.Sp
This option has no affect on \s-1STDIN\s0 and \s-1STDOUT\s0 which has a magic client
property that is tied to the already open \s-1STDIN\s0 and \s-1STDOUT.\s0
.IP "leave_children_open_on_hup" 4
.IX Item "leave_children_open_on_hup"
Boolean.  Default undef (not set).  If set, the parent will not
attempt to close child processes if the parent receives a \s-1SIG HUP.\s0
The parent will rebind the the open port and begin tracking a fresh
set of children.
.Sp
Children of a Fork server will exit after their current request.
Children of a Prefork type server will finish the current request and
then exit.
.Sp
Note \- the newly restarted parent will start up a fresh set of servers
on fork servers.  The new parent will attempt to keep track of the
children from the former parent but custom communication channels
(open pipes from the child to the old parent) will no longer be
available to the old child processes.  New child processes will still
connect properly to the new parent.
.IP "sig_passthrough" 4
.IX Item "sig_passthrough"
Default none.  Allow for passing requested signals through to
children.  Takes a single signal name, a comma separated list of
names, or an arrayref of signal names.  It first sends the signals to
the children before calling any currently registered signal by that
name.
.IP "tie_client_stdout" 4
.IX Item "tie_client_stdout"
Default undef.  If set will use Net::Server::TiedHandle tied interface
for \s-1STDIN\s0 and \s-1STDOUT. \s0 This interface allows \s-1SSL\s0 and \s-1SSLEAY\s0 to work.
It also allows for intercepting read and write via the
tied_stdin_callback and tied_stdout_callback.
.IP "tied_stdin_callback" 4
.IX Item "tied_stdin_callback"
Default undef.  Called during a read of \s-1STDIN\s0 data if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other input operation.
.IP "tied_stdout_callback" 4
.IX Item "tied_stdout_callback"
Default undef.  Called during a write of data to \s-1STDOUT\s0 if
tie_client_stdout has been set, or if the client handle's tie_stdout
method returns true.  It is passed the client connection, the name of
the method that would be called, and the arguments that are being
passed.  The callback is then responsible for calling that method on
the handle or for performing some other output operation.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
All of the \f(CW\*(C`ARGUMENTS\*(C'\fR listed above become properties of the server
object under the same name.  These properties, as well as other
internal properties, are available during hooks and other method
calls.
.PP
The structure of a Net::Server object is shown below:
.PP
.Vb 6
\&    $self = bless({
\&        server => {
\&            key1 => \*(Aqval1\*(Aq,
\&            # more key/vals
\&        },
\&    }, \*(AqNet::Server\*(Aq);
.Ve
.PP
This structure was chosen so that all server related properties are
grouped under a single key of the object hashref.  This is so that
other objects could layer on top of the Net::Server object class and
still have a fairly clean namespace in the hashref.
.PP
You may get and set properties in two ways.  The suggested way is to
access properties directly via
.PP
.Vb 1
\&    my $val = $self\->{server}\->{key1};
.Ve
.PP
Accessing the properties directly will speed the server process \-
though some would deem this as bad style.  A second way has been
provided for object oriented types who believe in methods.  The second
way consists of the following methods:
.PP
.Vb 2
\&    my $val = $self\->get_property( \*(Aqkey1\*(Aq );
\&    my $self\->set_property( key1 => \*(Aqval1\*(Aq );
.Ve
.PP
Properties are allowed to be changed at any time with caution (please
do not undef the sock property or you will close the client
connection).
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server\*(C'\fR allows for the use of a configuration file to read in
server parameters.  The format of this conf file is simple key value
pairs.  Comments and blank lines are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    # logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    # optional syslog directive
\&    # used in place of log_file above
\&    #log_file       Sys::Syslog
\&    #syslog_logsock unix
\&    #syslog_ident   myserver
\&    #syslog_logopt  pid|cons
\&
\&    # access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&    cidr_allow  127.0.0.0/8
\&    cidr_allow  192.0.2.0/24
\&    cidr_deny   192.0.2.4/30
\&
\&    # background the process?
\&    background  1
\&
\&    # ports to bind (this should bind
\&    # 127.0.0.1:20205 on IPv6 and
\&    # localhost:20204 on IPv4)
\&    # See Net::Server::Proto
\&    host        127.0.0.1
\&    ipv         IPv6
\&    port        localhost:20204/IPv4
\&    port        20205
\&
\&    # reverse lookups ?
\&    # reverse_lookups on
\&
\&  #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to
override, easy to hook, fashion.  The basic flow is
shown below.  This is the flow of the \f(CW\*(C`$self\->run\*(C'\fR method.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop;
\&
\&    ### routines inside a standard $self\->loop
\&    # $self\->accept;
\&    # $self\->run_client_connection;
\&    # $self\->done;
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->server_close;
.Ve
.PP
The server then exits.
.PP
During the client processing phase
(\f(CW\*(C`$self\->run_client_connection\*(C'\fR), the following
represents the program flow:
.PP
.Vb 1
\&    $self\->post_accept;
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook;
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&        $self\->process_request;
\&
\&    } else {
\&
\&        $self\->request_denied_hook;
\&
\&    }
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->post_process_request;
\&
\&    $self\->post_client_connection_hook;
.Ve
.PP
The process then loops and waits for the next connection.  For a more
in depth discussion, please read the code.
.PP
During the server shutdown phase (\f(CW\*(C`$self\->server_close\*(C'\fR), the
following represents the program flow:
.PP
.Vb 1
\&    $self\->close_children;  # if any
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&    }
\&
\&    $self\->shutdown_sockets;
\&
\&    $self\->server_exit;
.Ve
.SH "MAIN SERVER METHODS"
.IX Header "MAIN SERVER METHODS"
.ie n .IP """$self\->run""" 4
.el .IP "\f(CW$self\->run\fR" 4
.IX Item "$self->run"
This method incorporates the main process flow.  This flow is listed
above.
.Sp
The method run may be called in any of the following ways.
.Sp
.Vb 1
\&     MyPackage\->run(port => 20201);
\&
\&     MyPackage\->new({port => 20201})\->run;
\&
\&     my $obj = bless {server=>{port => 20201}}, \*(AqMyPackage\*(Aq;
\&     $obj\->run;
.Ve
.Sp
The \->run method should typically be the last method called in a
server start script (the server will exit at the end of the \->run
method).
.ie n .IP """$self\->configure""" 4
.el .IP "\f(CW$self\->configure\fR" 4
.IX Item "$self->configure"
This method attempts to read configurations from the commandline, from
the run method call, or from a specified conf_file (the conf_file may
be specified by passed in parameters, or in the default_values).  All
of the configured parameters are then stored in the {\*(L"server\*(R"}
property of the Server object.
.ie n .IP """$self\->post_configure""" 4
.el .IP "\f(CW$self\->post_configure\fR" 4
.IX Item "$self->post_configure"
The post_configure hook begins the startup of the server.  During this
method running server instances are checked for, pid_files are
created, log_files are created, Sys::Syslog is initialized (as
needed), process backgrounding occurs and the server closes \s-1STDIN\s0 and
\&\s-1STDOUT \s0(as needed).
.ie n .IP """$self\->pre_bind""" 4
.el .IP "\f(CW$self\->pre_bind\fR" 4
.IX Item "$self->pre_bind"
This method is used to initialize all of the socket objects used by
the server.
.ie n .IP """$self\->bind""" 4
.el .IP "\f(CW$self\->bind\fR" 4
.IX Item "$self->bind"
This method actually binds to the inialized sockets (or rebinds if the
server has been HUPed).
.ie n .IP """$self\->post_bind""" 4
.el .IP "\f(CW$self\->post_bind\fR" 4
.IX Item "$self->post_bind"
During this method priveleges are dropped.  The \s-1INT, TERM,\s0 and \s-1QUIT\s0
signals are set to run server_close.  Sig \s-1PIPE\s0 is set to \s-1IGNORE. \s0 Sig
\&\s-1CHLD\s0 is set to sig_chld.  And sig \s-1HUP\s0 is set to call sig_hup.
.Sp
Under the Fork, PreFork, and PreFork simple personalities, these
signals are registered using Net::Server::SIG to allow for safe signal
handling.
.ie n .IP """$self\->loop""" 4
.el .IP "\f(CW$self\->loop\fR" 4
.IX Item "$self->loop"
During this phase, the server accepts incoming connections.  The
behavior of how the accepting occurs and if a child process handles
the connection is controlled by what type of Net::Server personality
the server is using.
.Sp
Net::Server and Net::Server single accept only one connection at a
time.
.Sp
Net::Server::INET runs one connection and then exits (for use by inetd
or xinetd daemons).
.Sp
Net::Server::MultiPlex allows for one process to simultaneously handle
multiple connections (but requires rewriting the process_request code
to operate in a more \*(L"packet-like\*(R" manner).
.Sp
Net::Server::Fork forks off a new child process for each incoming
connection.
.Sp
Net::Server::PreForkSimple starts up a fixed number of processes that
all accept on incoming connections.
.Sp
Net::Server::PreFork starts up a base number of child processes which
all accept on incoming connections.  The server throttles the number
of processes running depending upon the number of requests coming in
(similar to concept to how Apache controls its child processes in a
PreFork server).
.Sp
Read the documentation for each of the types for more information.
.ie n .IP """$self\->server_close""" 4
.el .IP "\f(CW$self\->server_close\fR" 4
.IX Item "$self->server_close"
This method is called once the server has been signaled to end, or
signaled for the server to restart (via \s-1HUP\s0), or the loop method has
been exited.
.Sp
This method takes care of cleaning up any remaining child processes,
setting appropriate flags on sockets (for HUPing), closing up logging,
and then closing open sockets.
.Sp
Can optionally be passed an exit value that will be passed to the
server_exit call.
.ie n .IP """$self\->server_exit""" 4
.el .IP "\f(CW$self\->server_exit\fR" 4
.IX Item "$self->server_exit"
This method is called at the end of server_close.  It calls exit, but
may be overridden to do other items.  At this point all services
should be shut down.
.Sp
Can optionally be passed an exit value that will be passed to the exit call.
.SH "MAIN CLIENT CONNECTION METHODS"
.IX Header "MAIN CLIENT CONNECTION METHODS"
.ie n .IP """$self\->run_client_connection""" 4
.el .IP "\f(CW$self\->run_client_connection\fR" 4
.IX Item "$self->run_client_connection"
This method is run after the server has accepted and received a client
connection.  The full process flow is listed above under \s-1PROCESS
FLOWS. \s0 This method takes care of handling each client connection.
.ie n .IP """$self\->post_accept""" 4
.el .IP "\f(CW$self\->post_accept\fR" 4
.IX Item "$self->post_accept"
This method opens \s-1STDIN\s0 and \s-1STDOUT\s0 to the client socket.  This allows
any of the methods during the run_client_connection phase to print
directly to and read directly from the client socket.
.ie n .IP """$self\->get_client_info""" 4
.el .IP "\f(CW$self\->get_client_info\fR" 4
.IX Item "$self->get_client_info"
This method looks up information about the client connection such as
ip address, socket type, and hostname (as needed).
.ie n .IP """$self\->allow_deny""" 4
.el .IP "\f(CW$self\->allow_deny\fR" 4
.IX Item "$self->allow_deny"
This method uses the rules defined in the allow and deny configuration
parameters to determine if the ip address should be accepted.
.ie n .IP """$self\->process_request""" 4
.el .IP "\f(CW$self\->process_request\fR" 4
.IX Item "$self->process_request"
This method is intended to handle all of the client communication.  At
this point \s-1STDIN\s0 and \s-1STDOUT\s0 are opened to the client, the ip address
has been verified.  The server can then interact with the client
connection according to whatever \s-1API\s0 or protocol the server is
implementing.  Note that the stub implementation uses \s-1STDIN\s0 and \s-1STDOUT\s0
and will not work if the no_client_stdout flag is set.
.Sp
This is the main method to override.
.Sp
The default method implements a simple echo server that will repeat
whatever is sent.  It will quit the child if \*(L"quit\*(R" is sent, and will
exit the server if \*(L"exit\*(R" is sent.
.Sp
As of version 2.000, the client handle is passed as an argument.
.ie n .IP """$self\->post_process_request""" 4
.el .IP "\f(CW$self\->post_process_request\fR" 4
.IX Item "$self->post_process_request"
This method is used to clean up the client connection and to handle
any parent/child accounting for the forking servers.
.SH "HOOKS"
.IX Header "HOOKS"
\&\f(CW\*(C`Net::Server\*(C'\fR provides a number of \*(L"hooks\*(R" allowing for servers
layered on top of \f(CW\*(C`Net::Server\*(C'\fR to respond at different levels of
execution without having to \*(L"\s-1SUPER\*(R"\s0 class the main built-in methods.
The placement of the hooks can be seen in the \s-1PROCESS FLOW\s0 section.
.PP
Almost all of the default hook methods do nothing.  To use a hook you
simply need to override the method in your subclass.  For example to
add your own post_configure_hook you could do something like the
following:
.PP
.Vb 1
\&    package MyServer;
\&
\&    sub post_configure_hook {
\&        my $self = shift;
\&        my $prop = $self\->{\*(Aqserver\*(Aq};
\&
\&        # do some validation here
\&    }
.Ve
.PP
The following describes the hooks available in the plain Net::Server
class (other flavors such as Fork or PreFork have additional hooks).
.ie n .IP """$self\->configure_hook()""" 4
.el .IP "\f(CW$self\->configure_hook()\fR" 4
.IX Item "$self->configure_hook()"
This hook takes place immediately after the \f(CW\*(C`\->run()\*(C'\fR method is
called.  This hook allows for setting up the object before any built
in configuration takes place.  This allows for custom configurability.
.ie n .IP """$self\->post_configure_hook()""" 4
.el .IP "\f(CW$self\->post_configure_hook()\fR" 4
.IX Item "$self->post_configure_hook()"
This hook occurs just after the reading of configuration parameters
and initiation of logging and pid_file creation.  It also occurs
before the \f(CW\*(C`\->pre_bind()\*(C'\fR and \f(CW\*(C`\->bind()\*(C'\fR methods are called.
This hook allows for verifying configuration parameters.
.ie n .IP """$self\->post_bind_hook()""" 4
.el .IP "\f(CW$self\->post_bind_hook()\fR" 4
.IX Item "$self->post_bind_hook()"
This hook occurs just after the bind process and just before any
chrooting, change of user, or change of group occurs.  At this point
the process will still be running as the user who started the server.
.ie n .IP """$self\->pre_loop_hook()""" 4
.el .IP "\f(CW$self\->pre_loop_hook()\fR" 4
.IX Item "$self->pre_loop_hook()"
This hook occurs after chroot, change of user, and change of group has
occured.  It allows for preparation before looping begins.
.ie n .IP """$self\->can_read_hook()""" 4
.el .IP "\f(CW$self\->can_read_hook()\fR" 4
.IX Item "$self->can_read_hook()"
This hook occurs after a socket becomes readible on an
accept_multi_port request (accept_multi_port is used if there are
multiple bound ports to accept on, or if the \*(L"multi_port\*(R"
configuration parameter is set to true).  This hook is intended to
allow for processing of arbitrary handles added to the IO::Select used
for the accept_multi_port.  These handles could be added during the
post_bind_hook.  No internal support is added for processing these
handles or adding them to the IO::Socket.  Care must be used in how
much occurs during the can_read_hook as a long response time will
result in the server being susceptible to \s-1DOS\s0 attacks.  A return value
of true indicates that the Server should not pass the readible handle
on to the post_accept and process_request phases.
.Sp
It is generally suggested that other avenues be pursued for sending
messages via sockets not created by the Net::Server.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs after a client has connected to the server.  At this
point \s-1STDIN\s0 and \s-1STDOUT\s0 are mapped to the client socket.  This hook
occurs before the processing of the request.
.ie n .IP """$self\->allow_deny_hook()""" 4
.el .IP "\f(CW$self\->allow_deny_hook()\fR" 4
.IX Item "$self->allow_deny_hook()"
This hook allows for the checking of ip and host information beyond
the \f(CW\*(C`$self\->allow_deny()\*(C'\fR routine.  If this hook returns 1, the
client request will be processed, otherwise, the request will be
denied processing.
.Sp
As of version 2.000, the client connection is passed as an argument.
.ie n .IP """$self\->request_denied_hook()""" 4
.el .IP "\f(CW$self\->request_denied_hook()\fR" 4
.IX Item "$self->request_denied_hook()"
This hook occurs if either the \f(CW\*(C`$self\->allow_deny()\*(C'\fR or
\&\f(CW\*(C`$self\->allow_deny_hook()\*(C'\fR have taken place.
.ie n .IP """$self\->post_process_request_hook()""" 4
.el .IP "\f(CW$self\->post_process_request_hook()\fR" 4
.IX Item "$self->post_process_request_hook()"
This hook occurs after the processing of the request, but before the
client connection has been closed.
.ie n .IP """$self\->post_client_connection_hook""" 4
.el .IP "\f(CW$self\->post_client_connection_hook\fR" 4
.IX Item "$self->post_client_connection_hook"
This is one final hook that occurs at the very end of the
run_client_connection method.  At this point all other methods and
hooks that will run during the run_client_connection have finished and
the client connection has already been closed.
.Sp
item \f(CW\*(C`$self\->other_child_died_hook($pid)\*(C'\fR
.Sp
Net::Server takes control of signal handling and child process
cleanup; this makes it difficult to tell when a child process
terminates if that child process was not started by Net::Server
itself.  If Net::Server notices another child process dying that it
did not start, it will fire this hook with the \s-1PID\s0 of the terminated
process.
.ie n .IP """$self\->pre_server_close_hook()""" 4
.el .IP "\f(CW$self\->pre_server_close_hook()\fR" 4
.IX Item "$self->pre_server_close_hook()"
This hook occurs before the server begins shutting down.
.ie n .IP """$self\->write_to_log_hook""" 4
.el .IP "\f(CW$self\->write_to_log_hook\fR" 4
.IX Item "$self->write_to_log_hook"
This hook handles writing to log files.  The default hook is to write
to \s-1STDERR,\s0 or to the filename contained in the parameter \f(CW\*(C`log_file\*(C'\fR.
The arguments passed are a log level of 0 to 4 (4 being very verbose),
and a log line.  If log_file is equal to \*(L"Sys::Syslog\*(R", then logging
will go to Sys::Syslog and will bypass the write_to_log_hook.
.ie n .IP """$self\->fatal_hook""" 4
.el .IP "\f(CW$self\->fatal_hook\fR" 4
.IX Item "$self->fatal_hook"
This hook occurs when the server has encountered an unrecoverable
error.  Arguments passed are the error message, the package, file, and
line number.  The hook may close the server, but it is suggested that
it simply return and use the built in shut down features.
.ie n .IP """$self\->post_child_cleanup_hook""" 4
.el .IP "\f(CW$self\->post_child_cleanup_hook\fR" 4
.IX Item "$self->post_child_cleanup_hook"
This hook occurs in the parent server process after all children have
been shut down and just before the server either restarts or exits.
It is intended for additional cleanup of information.  At this point
pid_files and lockfiles still exist.
.ie n .IP """$self\->restart_open_hook""" 4
.el .IP "\f(CW$self\->restart_open_hook\fR" 4
.IX Item "$self->restart_open_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before reopening to the filenos of the sockets
that were already opened.
.ie n .IP """$self\->restart_close_hook""" 4
.el .IP "\f(CW$self\->restart_close_hook\fR" 4
.IX Item "$self->restart_close_hook"
This hook occurs if a server has been HUPed (restarted via the \s-1HUP\s0
signal.  It occurs just before restarting the server via exec.
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook is called during the forking servers.  It is also called
during run_dequeue.  It runs just after the fork and after signals
have been cleaned up.  If it is a dequeue process, the string
\&'dequeue' will be passed as an argument.
.Sp
If your child processes will be needing random numbers, this
hook is a good location to initialize srand (forked processes
maintain the same random seed unless changed).
.Sp
.Vb 4
\&    sub child_init_hook {
\&        # from perldoc \-f srand
\&        srand(time ^ $$ ^ unpack "%L*", \`ps axww | gzip \-f\`);
\&    }
.Ve
.ie n .IP """$self\->pre_fork_hook()""" 4
.el .IP "\f(CW$self\->pre_fork_hook()\fR" 4
.IX Item "$self->pre_fork_hook()"
Similar to the child_init_hook, but occurs just before the fork.
.ie n .IP """$self\->child_finish_hook()""" 4
.el .IP "\f(CW$self\->child_finish_hook()\fR" 4
.IX Item "$self->child_finish_hook()"
Similar to the child_init_hook, but ran when the forked process is
about to finish up.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .IP """$self\->default_values""" 4
.el .IP "\f(CW$self\->default_values\fR" 4
.IX Item "$self->default_values"
Allow for returning configuration values that will be used if no other
value could be found.
.Sp
Should return a hashref.
.Sp
.Vb 5
\&    sub default_values {
\&        return {
\&            port => 20201,
\&        };
\&    }
.Ve
.ie n .IP """$self\->handle_syslog_error""" 4
.el .IP "\f(CW$self\->handle_syslog_error\fR" 4
.IX Item "$self->handle_syslog_error"
Called when log_file is set to 'Sys::Syslog' and an error occurs while
writing to the syslog.  It is passed two arguments, the value of $@,
and an arrayref containing the arguments that were passed to the log
method when the error occured.
.ie n .IP """$self\->log""" 4
.el .IP "\f(CW$self\->log\fR" 4
.IX Item "$self->log"
Parameters are a log_level and a message.
.Sp
If log_level is set to 'Sys::Syslog', the parameters may alternately
be a log_level, a format string, and format string parameters.  (The
second parameter is assumed to be a format string if additional
arguments are passed along).  Passing arbitrary format strings to
Sys::Syslog will allow the server to be vulnerable to exploit.  The
server maintainer should make sure that any string treated as a format
string is controlled.
.Sp
.Vb 1
\&    # assuming log_file = \*(AqSys::Syslog\*(Aq
\&
\&    $self\->log(1, "My Message with %s in it");
\&    # sends "%s", "My Message with %s in it" to syslog
\&
\&    $self\->log(1, "My Message with %s in it", "Foo");
\&    # sends "My Message with %s in it", "Foo" to syslog
.Ve
.Sp
If log_file is set to a file (other than Sys::Syslog), the message
will be appended to the log file by calling the write_to_log_hook.
.Sp
If the log_file is Sys::Syslog and an error occurs during write, the
handle_syslog_error method will be called and passed the error
exception.  The default option of handle_syslog_error is to die \- but
could easily be told to do nothing by using the following code in your
subclassed server:
.Sp
.Vb 1
\&    sub handle_syslog_error {}
.Ve
.Sp
It the log had been closed, you could attempt to reopen it in the
error handler with the following code:
.Sp
.Vb 4
\&    sub handle_syslog_error {
\&        my $self = shift;
\&        $self\->open_syslog;
\&    }
.Ve
.ie n .IP """$self\->new""" 4
.el .IP "\f(CW$self\->new\fR" 4
.IX Item "$self->new"
As of Net::Server 0.91 there is finally a \*(L"new\*(R" method.  This method
takes a class name and an argument hashref as parameters.  The
argument hashref becomes the \*(L"server\*(R" property of the object.
.Sp
.Vb 2
\&    package MyPackage;
\&    use base qw(Net::Server);
\&
\&    my $obj = MyPackage\->new({port => 20201});
\&
\&    # same as
\&
\&    my $obj = bless {server => {port => 20201}}, \*(AqMyPackage\*(Aq;
.Ve
.ie n .IP """$self\->open_syslog""" 4
.el .IP "\f(CW$self\->open_syslog\fR" 4
.IX Item "$self->open_syslog"
Called during post_configure when the log_file option is set to
\&'Sys::Syslog'.  By default it use the parsed configuration options
listed in this document.  If more custom behavior is desired, the
method could be overridden and Sys::Syslog::openlog should be called
with the custom parameters.
.ie n .IP """$self\->shutdown_sockets""" 4
.el .IP "\f(CW$self\->shutdown_sockets\fR" 4
.IX Item "$self->shutdown_sockets"
This method will close any remaining open sockets.  This is called at
the end of the server_close method.
.SH "RESTARTING"
.IX Header "RESTARTING"
Each of the server personalities (except for \s-1INET\s0), support restarting
via a \s-1HUP\s0 signal (see \*(L"kill \-l\*(R").  When a \s-1HUP\s0 is received, the server
will close children (if any), make sure that sockets are left open,
and re-exec using the same commandline parameters that initially
started the server.  (Note: for this reason it is important that \f(CW@ARGV\fR
is not modified until \f(CW\*(C`\->run\*(C'\fR is called).
.PP
The Net::Server will attempt to find out the commandline used for
starting the program.  The attempt is made before any configuration
files or other arguments are processed.  The outcome of this attempt
is stored using the method \f(CW\*(C`\->commandline\*(C'\fR.  The stored
commandline may also be retrieved using the same method name.  The
stored contents will undoubtedly contain Tainted items that will cause
the server to die during a restart when using the \-T flag (Taint
mode).  As it is impossible to arbitrarily decide what is taint safe
and what is not, the individual program must clean up the tainted
items before doing a restart.
.PP
.Vb 2
\&    sub configure_hook{
\&        my $self = shift;
\&
\&        ### see the contents
\&        my $ref  = $self\->commandline;
\&        use Data::Dumper;
\&        print Dumper $ref;
\&
\&        ### arbitrary untainting \- VERY dangerous
\&        my @untainted = map {/(.+)/;$1} @$ref;
\&
\&        $self\->commandline(\e@untainted)
\&    }
.Ve
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
Each of the Fork and PreFork personalities support graceful shutdowns
via the \s-1QUIT\s0 signal.  When a \s-1QUIT\s0 is received, the parent will signal
the children and then wait for them to exit.
.PP
All server personalities support the normal \s-1TERM\s0 and \s-1INT\s0 signal
shutdowns.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork and PreFork personalities have accepted
the \s-1TTIN\s0 and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers
is increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.PP
If the log_level is set to at 3, then the new value is displayed in
the logs.
.SH "FILES"
.IX Header "FILES"
The following files are installed as part of this distribution.
.PP
.Vb 11
\&    Net/Server.pm
\&    Net/Server/Fork.pm
\&    Net/Server/INET.pm
\&    Net/Server/MultiType.pm
\&    Net/Server/PreForkSimple.pm
\&    Net/Server/PreFork.pm
\&    Net/Server/Single.pm
\&    Net/Server/Daemonize.pm
\&    Net/Server/SIG.pm
\&    Net/Server/Proto.pm
\&    Net/Server/Proto/*.pm
.Ve
.SH "INSTALL"
.IX Header "INSTALL"
Download and extract tarball before running these commands in its base
directory:
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul at seamons.com>
.SH "THANKS"
.IX Header "THANKS"
Thanks to Rob Brown (bbb at cpan.org) for help with miscellaneous
concepts such as tracking down the serialized select via flock ala
Apache and the reference to IO::Select making multiport servers
possible.  And for researching into allowing sockets to remain open
upon exec (making \s-1HUP\s0 possible).
.PP
Thanks to Jonathan J. Miner <miner at doit.wisc.edu> for patching a
blatant problem in the reverse lookups.
.PP
Thanks to Bennett Todd <bet at rahul.net> for pointing out a problem
in Solaris 2.5.1 which does not allow multiple children to accept on
the same port at the same time.  Also for showing some sample code
from Viktor Duchovni which now represents the semaphore option of the
serialize argument in the PreFork server.
.PP
Thanks to \fItraveler\fR and \fImerlyn\fR from http://perlmonks.org for
pointing me in the right direction for determining the protocol used
on a socket connection.
.PP
Thanks to Jeremy Howard <j+daemonize at howard.fm> for numerous
suggestions and for work on Net::Server::Daemonize.
.PP
Thanks to Vadim <vadim at hardison.net> for patches to implement
parent/child communication on PreFork.pm.
.PP
Thanks to Carl Lewis for suggesting \*(L"\-\*(R" in user names.
.PP
Thanks to Slaven Rezic for suggesing Reuse => 1 in Proto::UDP.
.PP
Thanks to Tim Watt for adding udp_broadcast to Proto::UDP.
.PP
Thanks to Christopher A Bongaarts for pointing out problems with the
Proto::SSL implementation that currently locks around the socket
accept and the \s-1SSL\s0 negotiation. See Net::Server::Proto::SSL.
.PP
Thanks to Alessandro Zummo for pointing out various bugs including
some in configuration, commandline args, and cidr_allow.
.PP
Thanks to various other people for bug fixes over the years.  These
and future thank-you's are available in the Changes file as well as
\&\s-1CVS\s0 comments.
.PP
Thanks to Ben Cohen and tye (on Permonks) for finding and diagnosing
more correct behavior for dealing with re-opening \s-1STDIN\s0 and \s-1STDOUT\s0 on
the client handles.
.PP
Thanks to Mark Martinec for trouble shooting other problems with \s-1STDIN\s0
and \s-1STDOUT \s0(he proposed having a flag that is now the no_client_stdout
flag).
.PP
Thanks to David (\s-1DSCHWEI\s0) on cpan for asking for the nofatal option
with syslog.
.PP
Thanks to Andreas Kippnick and Peter Beckman for suggesting leaving
open child connections open during a \s-1HUP \s0(this is now available via
the leave_children_open_on_hup flag).
.PP
Thanks to \s-1LUPE\s0 on cpan for helping patch \s-1HUP\s0 with taint on.
.PP
Thanks to Michael Virnstein for fixing a bug in the check_for_dead
section of PreFork server.
.PP
Thanks to Rob Mueller for patching PreForkSimple to only open
lock_file once during parent call.  This patch should be portable on
systems supporting flock.  Rob also suggested not closing \s-1STDIN/STDOUT\s0
but instead reopening them to /dev/null to prevent spurious warnings.
Also suggested short circuit in post_accept if in \s-1UDP. \s0 Also for
cleaning up some of the child managment code of PreFork.
.PP
Thanks to Mark Martinec for suggesting additional log messages for
failure during accept.
.PP
Thanks to Bill Nesbitt and Carlos Velasco for pointing out double
decrement bug in PreFork.pm (rt #21271)
.PP
Thanks to John W. Krahn for pointing out glaring precended with
non-parened open and ||.
.PP
Thanks to Ricardo Signes for pointing out setuid bug for perl 5.6.1
(rt #21262).
.PP
Thanks to Carlos Velasco for updating the Syslog options (rt #21265).
And for additional fixes later.
.PP
Thanks to Steven Lembark for pointing out that no_client_stdout wasn't
working with the Multiplex server.
.PP
Thanks to Peter Beckman for suggesting allowing Sys::SysLog keyworks
be passed through the \->log method and for suggesting we allow more
types of characters through in syslog_ident.  Also to Peter Beckman
for pointing out that a poorly setup localhost will cause tests to
hang.
.PP
Thanks to Curtis Wilbar for pointing out that the Fork server called
post_accept_hook twice.  Changed to only let the child process call
this, but added the pre_fork_hook method.
.PP
And just a general Thanks You to everybody who is using Net::Server or
who has contributed fixes over the years.
.PP
Thanks to Paul Miller for some \->autoflush, FileHandle fixes.
.PP
Thanks to Patrik Wallstrom for suggesting handling syslog errors
better.
.PP
Thanks again to Rob Mueller for more logic cleanup for child
accounting in PreFork server.
.PP
Thanks to David Schweikert for suggesting handling setlogsock a little
better on newer versions of Sys::Syslog (>= 0.15).
.PP
Thanks to Mihail Nasedkin for suggesting adding a hook that is now
called post_client_connection_hook.
.PP
Thanks to Graham Barr for adding the ability to set the
check_for_spawn and min_child_ttl settings of the PreFork server.
.PP
Thanks to Daniel Kahn Gillmor for adding the other_child_died_hook.
.PP
Thanks to Dominic Humphries for helping not kill pid files on \s-1HUP.\s0
.PP
Thanks to Kristoffer Mo\*/llerho\*/j for fixing \s-1UDP\s0 on Multiplex.
.PP
Thanks to mishikal for patches for helping identify un-cleaned up
children.
.PP
Thanks to rpkelly and tim@retout for pointing out error in header
regex of \s-1HTTP.\s0
.PP
Thanks to dmcbride for some basic \s-1HTTP\s0 parsing fixes, as well as for
some broken tied handle fixes.
.PP
Thanks to Gareth for pointing out glaring bug issues with broken pipe
and semaphore serialization.
.PP
Thanks to \s-1CATONE\s0 for sending the idea for arbitrary signal passing to
children.  (See the sig_passthrough option)
.PP
Thanks to intrigeri@boum for pointing out and giving code ideas for
NS_port not functioning after a \s-1HUP.\s0
.PP
Thanks to Sergey Zasenko for adding sysread/syswrite support to \s-1SSLEAY\s0
as well as the base test.
.PP
Thanks to mbarbon@users. for adding tally dequeue to prefork server.
.PP
Thanks to stefanos@cpan for fixes to PreFork under Win32
.PP
Thanks to Mark Martinec for much of the initial work towards getting
IPv6 going.
.PP
Thanks to the munin developers and Nicolai Langfeldt for hosting the
development verion of Net::Server for so long and for fixes to the
allow_deny checking for IPv6 addresses.
.PP
Thanks to Tatsuhiko Miyagawa for feedback, and for suggesting adding
graceful shutdowns and hot deploy (max_servers adjustment).
.PP
Thanks to TONVOON@cpan for submitting a patch adding Log4perl functionality.
.PP
Thanks to Miko O'Sullivan for fixes to \s-1HTTP\s0 to correct tainting issues
and passing initial log fixes, and for patches to fix \s-1CLOSE\s0 on tied stdout
and various other \s-1HTTP\s0 issues.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::HTTP
.SH "TODO"
.IX Header "TODO"
Improve test suite to fully cover code (using Devel::Cover).  Anybody
that wanted to send me patches to the t/*.t tests that improved
coverage would earn a big thank you.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    Paul Seamons <paul at seamons.com>
\&    http://seamons.com/
\&
\&    Rob Brown <bbb at cpan.org>
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This package may be distributed under the terms of either the
.PP
.Vb 3
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
.Ve
.PP
All rights reserved.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1751:" 4
.IX Item "Around line 1751:"
Non-ASCII character seen before =encoding in 'Mo\*/llerho\*/j'. Assuming \s-1UTF\-8\s0
                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Daemonize.3pm                   0100644 0001750 0001750 00000016607 12566241464 025436  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Daemonize 3"
.TH Net::Server::Daemonize 3 "2012-05-29" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Daemonize \- Safe fork and daemonization utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::Server::Daemonize qw(daemonize);
\&
\&    daemonize(
\&      \*(Aqnobody\*(Aq,                 # User
\&      \*(Aqnobody\*(Aq,                 # Group
\&      \*(Aq/var/state/mydaemon.pid\*(Aq # Path to PID file \- optional
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to let you simply and safely daemonize your
server on systems supporting the \s-1POSIX\s0 module. This means that your
Perl script runs in the background, and it's process \s-1ID\s0 is stored in a
file so you can easily stop it later.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.IP "daemonize" 4
.IX Item "daemonize"
Main routine.  Arguments are user (or userid), group (or group id or
space delimited list of groups), and pid_file (path to file).  This
routine will check on the pid file, safely fork, create the pid file
(storing the pid in the file), become another user and group, close
\&\s-1STDIN, STDOUT\s0 and \s-1STDERR,\s0 separate from the process group (become
session leader), and install \f(CW$SIG\fR{\s-1INT\s0} to remove the pid file.  In
otherwords \- daemonize.  All errors result in a die.  As of version
0.89 the pid_file is optional.
.IP "safe_fork" 4
.IX Item "safe_fork"
Block \s-1SIGINT\s0 during fork.  No arguments.  Returns pid of forked child.
All errors result in a die.
.IP "set_user" 4
.IX Item "set_user"
Become another user and group.  Arguments are user (or userid) and
group (or group id or space delimited list of groups).
.IP "set_uid" 4
.IX Item "set_uid"
Become another user.  Argument is user (or userid).  All errors die.
.IP "set_gid" 4
.IX Item "set_gid"
Become another group.  Arguments are groups (or group ids or space
delimited list of groups or group ids).  All errors die.
.IP "get_uid" 4
.IX Item "get_uid"
Find the uid.  Argument is user (userid returns userid).  Returns
userid.  All errors die.
.IP "get_gid" 4
.IX Item "get_gid"
Find the gids.  Arguments are groups or space delimited list of
groups.  All errors die.
.IP "is_root_user" 4
.IX Item "is_root_user"
Determine if the process is running as root.  Returns 1 or undef.
.IP "check_pid_file" 4
.IX Item "check_pid_file"
Arguments are pid_file (full path to pid_file).  Checks for existance
of pid_file.  If file exists, open it and determine if the process
that created it is still running.  This is done first by checking for
a /proc file system and second using a \*(L"ps\*(R" command (\s-1BSD\s0 syntax).  (If
neither of these options exist it assumed that the process has ended)
If the process is still running, it aborts.  Otherwise, returns true.
All errors die.
.IP "create_pid_file." 4
.IX Item "create_pid_file."
Arguments are pid_file (full path to pid_file).  Calls check_pid_file.
If it is successful (no pid_file exists), creates a pid file and
stores $$ in the file.
.IP "unlink_pid_file" 4
.IX Item "unlink_pid_file"
Does just that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server.
Net::Daemon, The Perl Cookbook Recipe 17.15.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jeremy Howard <j+daemonize@howard.fm>
.PP
Program flow, concepts and initial work.
.PP
Paul Seamons <paul@seamons.com>
.PP
Code rework and componentization.
Ongoing maintainer.
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Daemonize5.16.3pm               0100644 0001750 0001750 00000016275 12566241464 025751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Daemonize 3"
.TH Net::Server::Daemonize 3 "2012-05-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Daemonize \- Safe fork and daemonization utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::Server::Daemonize qw(daemonize);
\&
\&    daemonize(
\&      \*(Aqnobody\*(Aq,                 # User
\&      \*(Aqnobody\*(Aq,                 # Group
\&      \*(Aq/var/state/mydaemon.pid\*(Aq # Path to PID file \- optional
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to let you simply and safely daemonize your
server on systems supporting the \s-1POSIX\s0 module. This means that your
Perl script runs in the background, and it's process \s-1ID\s0 is stored in a
file so you can easily stop it later.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.IP "daemonize" 4
.IX Item "daemonize"
Main routine.  Arguments are user (or userid), group (or group id or
space delimited list of groups), and pid_file (path to file).  This
routine will check on the pid file, safely fork, create the pid file
(storing the pid in the file), become another user and group, close
\&\s-1STDIN\s0, \s-1STDOUT\s0 and \s-1STDERR\s0, separate from the process group (become
session leader), and install \f(CW$SIG\fR{\s-1INT\s0} to remove the pid file.  In
otherwords \- daemonize.  All errors result in a die.  As of version
0.89 the pid_file is optional.
.IP "safe_fork" 4
.IX Item "safe_fork"
Block \s-1SIGINT\s0 during fork.  No arguments.  Returns pid of forked child.
All errors result in a die.
.IP "set_user" 4
.IX Item "set_user"
Become another user and group.  Arguments are user (or userid) and
group (or group id or space delimited list of groups).
.IP "set_uid" 4
.IX Item "set_uid"
Become another user.  Argument is user (or userid).  All errors die.
.IP "set_gid" 4
.IX Item "set_gid"
Become another group.  Arguments are groups (or group ids or space
delimited list of groups or group ids).  All errors die.
.IP "get_uid" 4
.IX Item "get_uid"
Find the uid.  Argument is user (userid returns userid).  Returns
userid.  All errors die.
.IP "get_gid" 4
.IX Item "get_gid"
Find the gids.  Arguments are groups or space delimited list of
groups.  All errors die.
.IP "is_root_user" 4
.IX Item "is_root_user"
Determine if the process is running as root.  Returns 1 or undef.
.IP "check_pid_file" 4
.IX Item "check_pid_file"
Arguments are pid_file (full path to pid_file).  Checks for existance
of pid_file.  If file exists, open it and determine if the process
that created it is still running.  This is done first by checking for
a /proc file system and second using a \*(L"ps\*(R" command (\s-1BSD\s0 syntax).  (If
neither of these options exist it assumed that the process has ended)
If the process is still running, it aborts.  Otherwise, returns true.
All errors die.
.IP "create_pid_file." 4
.IX Item "create_pid_file."
Arguments are pid_file (full path to pid_file).  Calls check_pid_file.
If it is successful (no pid_file exists), creates a pid file and
stores $$ in the file.
.IP "unlink_pid_file" 4
.IX Item "unlink_pid_file"
Does just that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server.
Net::Daemon, The Perl Cookbook Recipe 17.15.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jeremy Howard <j+daemonize@howard.fm>
.PP
Program flow, concepts and initial work.
.PP
Paul Seamons <paul@seamons.com>
.PP
Code rework and componentization.
Ongoing maintainer.
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Daemonize5.18.3pm               0100644 0001750 0001750 00000016607 12566241464 025752  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Daemonize 3"
.TH Net::Server::Daemonize 3 "2012-05-29" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Daemonize \- Safe fork and daemonization utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::Server::Daemonize qw(daemonize);
\&
\&    daemonize(
\&      \*(Aqnobody\*(Aq,                 # User
\&      \*(Aqnobody\*(Aq,                 # Group
\&      \*(Aq/var/state/mydaemon.pid\*(Aq # Path to PID file \- optional
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to let you simply and safely daemonize your
server on systems supporting the \s-1POSIX\s0 module. This means that your
Perl script runs in the background, and it's process \s-1ID\s0 is stored in a
file so you can easily stop it later.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.IP "daemonize" 4
.IX Item "daemonize"
Main routine.  Arguments are user (or userid), group (or group id or
space delimited list of groups), and pid_file (path to file).  This
routine will check on the pid file, safely fork, create the pid file
(storing the pid in the file), become another user and group, close
\&\s-1STDIN, STDOUT\s0 and \s-1STDERR,\s0 separate from the process group (become
session leader), and install \f(CW$SIG\fR{\s-1INT\s0} to remove the pid file.  In
otherwords \- daemonize.  All errors result in a die.  As of version
0.89 the pid_file is optional.
.IP "safe_fork" 4
.IX Item "safe_fork"
Block \s-1SIGINT\s0 during fork.  No arguments.  Returns pid of forked child.
All errors result in a die.
.IP "set_user" 4
.IX Item "set_user"
Become another user and group.  Arguments are user (or userid) and
group (or group id or space delimited list of groups).
.IP "set_uid" 4
.IX Item "set_uid"
Become another user.  Argument is user (or userid).  All errors die.
.IP "set_gid" 4
.IX Item "set_gid"
Become another group.  Arguments are groups (or group ids or space
delimited list of groups or group ids).  All errors die.
.IP "get_uid" 4
.IX Item "get_uid"
Find the uid.  Argument is user (userid returns userid).  Returns
userid.  All errors die.
.IP "get_gid" 4
.IX Item "get_gid"
Find the gids.  Arguments are groups or space delimited list of
groups.  All errors die.
.IP "is_root_user" 4
.IX Item "is_root_user"
Determine if the process is running as root.  Returns 1 or undef.
.IP "check_pid_file" 4
.IX Item "check_pid_file"
Arguments are pid_file (full path to pid_file).  Checks for existance
of pid_file.  If file exists, open it and determine if the process
that created it is still running.  This is done first by checking for
a /proc file system and second using a \*(L"ps\*(R" command (\s-1BSD\s0 syntax).  (If
neither of these options exist it assumed that the process has ended)
If the process is still running, it aborts.  Otherwise, returns true.
All errors die.
.IP "create_pid_file." 4
.IX Item "create_pid_file."
Arguments are pid_file (full path to pid_file).  Calls check_pid_file.
If it is successful (no pid_file exists), creates a pid file and
stores $$ in the file.
.IP "unlink_pid_file" 4
.IX Item "unlink_pid_file"
Does just that.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server.
Net::Daemon, The Perl Cookbook Recipe 17.15.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jeremy Howard <j+daemonize@howard.fm>
.PP
Program flow, concepts and initial work.
.PP
Paul Seamons <paul@seamons.com>
.PP
Code rework and componentization.
Ongoing maintainer.
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&    or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Fork.3pm                        0100644 0001750 0001750 00000016275 12566241464 024425  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Fork 3"
.TH Net::Server::Fork 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Fork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::Fork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then waits for a
client connection.  When a connection is received, the server forks a
child.  The child handles the request and then closes.
.PP
With the exception of parent/child signaling, this module will work
(with basic functionality) on Win32 systems.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Number of seconds to wait before looking for dead children.  This only
takes place if the maximum number of child processes (max_servers) has
been reached.  Default is 60 seconds.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of children to fork.  The server will not accept
connections until there are free children. Default is 256 children.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  It is intended
to use the dequeue process to take care of items such as mail queues.
If a value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the post_accept phase.  At this
point a child is forked.  The parent is immediately able to wait for
another request.  The child handles the request and then exits.
.SH "HOOKS"
.IX Header "HOOKS"
The Fork server has the following hooks in addition to the hooks
provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->pre_accept_hook()""" 4
.el .IP "\f(CW$self\->pre_accept_hook()\fR" 4
.IX Item "$self->pre_accept_hook()"
This hook occurs just before the accept is called.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs in the child after the accept and fork.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the max_servers is increased by 1.
If a \s-1TTOU\s0 signal is received the max_servers is decreased by 1.  This
allows for adjusting the number of handling processes without having
to restart the server.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul@seamons.com>
.PP
Rob Brown <bbb@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::SIG
Net::Server::Single
                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Fork5.16.3pm                    0100644 0001750 0001750 00000016551 12566241464 024734  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Fork 3"
.TH Net::Server::Fork 3 "2012-06-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Fork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::Fork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then waits for a
client connection.  When a connection is received, the server forks a
child.  The child handles the request and then closes.
.PP
With the exception of parent/child signaling, this module will work
(with basic functionality) on Win32 systems.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Number of seconds to wait before looking for dead children.  This only
takes place if the maximum number of child processes (max_servers) has
been reached.  Default is 60 seconds.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of children to fork.  The server will not accept
connections until there are free children. Default is 256 children.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  It is intended
to use the dequeue process to take care of items such as mail queues.
If a value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the post_accept phase.  At this
point a child is forked.  The parent is immediately able to wait for
another request.  The child handles the request and then exits.
.SH "HOOKS"
.IX Header "HOOKS"
The Fork server has the following hooks in addition to the hooks
provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook is called just after the fork and after signals have been
cleaned up.
.ie n .IP """$self\->pre_accept_hook()""" 4
.el .IP "\f(CW$self\->pre_accept_hook()\fR" 4
.IX Item "$self->pre_accept_hook()"
This hook occurs just before the accept is called.
.ie n .IP """$self\->pre_fork_hook()""" 4
.el .IP "\f(CW$self\->pre_fork_hook()\fR" 4
.IX Item "$self->pre_fork_hook()"
This hook occurs just after accept but before the fork.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs in the child after the accept and fork.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjuction with the check_for_dequeue
setting.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the max_servers is increased by 1.
If a \s-1TTOU\s0 signal is received the max_servers is decreased by 1.  This
allows for adjusting the number of handling processes without having
to restart the server.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul@seamons.com>
.PP
Rob Brown <bbb@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::SIG
Net::Server::Single
                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Fork5.18.3pm                    0100644 0001750 0001750 00000016275 12566241464 024741  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Fork 3"
.TH Net::Server::Fork 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Fork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::Fork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then waits for a
client connection.  When a connection is received, the server forks a
child.  The child handles the request and then closes.
.PP
With the exception of parent/child signaling, this module will work
(with basic functionality) on Win32 systems.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Number of seconds to wait before looking for dead children.  This only
takes place if the maximum number of child processes (max_servers) has
been reached.  Default is 60 seconds.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of children to fork.  The server will not accept
connections until there are free children. Default is 256 children.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  It is intended
to use the dequeue process to take care of items such as mail queues.
If a value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the post_accept phase.  At this
point a child is forked.  The parent is immediately able to wait for
another request.  The child handles the request and then exits.
.SH "HOOKS"
.IX Header "HOOKS"
The Fork server has the following hooks in addition to the hooks
provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->pre_accept_hook()""" 4
.el .IP "\f(CW$self\->pre_accept_hook()\fR" 4
.IX Item "$self->pre_accept_hook()"
This hook occurs just before the accept is called.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP "\f(CW$self\->post_accept_hook()\fR" 4
.IX Item "$self->post_accept_hook()"
This hook occurs in the child after the accept and fork.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the Fork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the max_servers is increased by 1.
If a \s-1TTOU\s0 signal is received the max_servers is decreased by 1.  This
allows for adjusting the number of handling processes without having
to restart the server.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Seamons <paul@seamons.com>
.PP
Rob Brown <bbb@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::SIG
Net::Server::Single
                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::HTTP.3pm                        0100644 0001750 0001750 00000053315 12566241464 024277  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::HTTP 3"
.TH Net::Server::HTTP 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::HTTP \- very basic Net::Server based HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::HTTP); main\->run(port => 8080)\*(Aq
\&    # will start up an echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<form method=post action=/bam><input type=text name=foo><input type=submit></form>\en";
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI;
\&        my $form = {};
\&        my $q = CGI\->new; $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        print "<pre>".Data::Dumper\->Dump([\e%ENV, $form], [\*(Aq*ENV\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Even though Net::Server::HTTP doesn't fall into the normal parallel of
the other Net::Server flavors, handling \s-1HTTP\s0 requests is an often
requested feature and is a standard and simple protocol.
.PP
Net::Server::HTTP begins with base type MultiType defaulting to
Net::Server::Fork.  It is easy to change it to any of the other
Net::Server flavors by passing server_type => \f(CW$other_flavor\fR in the
server configurtation.  The port has also been defaulted to port 80 \-
but could easily be changed to another through the server
configuration.  You can also very easily add ssl by including,
proto=>\*(L"ssl\*(R" and provide a SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::HTTP);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """_init_access_log""" 4
.el .IP "\f(CW_init_access_log\fR" 4
.IX Item "_init_access_log"
Used to open and initialize any requested access_log (see access_log_file
and access_log_format).
.ie n .IP """_tie_client_stdout""" 4
.el .IP "\f(CW_tie_client_stdout\fR" 4
.IX Item "_tie_client_stdout"
Used to initialize automatic response header parsing.
.ie n .IP """process_http_request""" 4
.el .IP "\f(CWprocess_http_request\fR" 4
.IX Item "process_http_request"
Will be passed the client handle, and will have \s-1STDOUT\s0 and \s-1STDIN\s0 tied
to the client.
.Sp
During this method, the \f(CW%ENV\fR will have been set to a standard \s-1CGI\s0
style environment.  You will need to be sure to print the Content-type
header.  This is one change from the other standard Net::Server base
classes.
.Sp
During this method you can read from \f(CW%ENV\fR and \s-1STDIN\s0 just like a normal
\&\s-1HTTP\s0 request in other web servers.  You can print to \s-1STDOUT\s0 and
Net::Server will handle the header negotiation for you.
.Sp
Note: Net::Server::HTTP has no concept of document root or script
aliases or default handling of static content.  That is up to the
consumer of Net::Server::HTTP to work out.
.Sp
Net::Server::HTTP comes with a basic \f(CW%ENV\fR display installed as the
default process_http_request method.
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::HTTP \- you should not
use it while using Net::Server::HTTP.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_http_request once the request is ready and headers
have been parsed.
.ie n .IP """process_headers""" 4
.el .IP "\f(CWprocess_headers\fR" 4
.IX Item "process_headers"
Used to read in the incoming headers and set the \s-1ENV.\s0
.ie n .IP """_init_http_request_info""" 4
.el .IP "\f(CW_init_http_request_info\fR" 4
.IX Item "_init_http_request_info"
Called at the end of process_headers.  Initializes the contents of
http_request_info.
.ie n .IP """http_request_info""" 4
.el .IP "\f(CWhttp_request_info\fR" 4
.IX Item "http_request_info"
Returns a hashref of information specific to the current request.
This information will be used for logging later on.
.ie n .IP """send_status""" 4
.el .IP "\f(CWsend_status\fR" 4
.IX Item "send_status"
Takes an \s-1HTTP\s0 status and a message.  Sends out the correct headers.
.ie n .IP """send_500""" 4
.el .IP "\f(CWsend_500\fR" 4
.IX Item "send_500"
Calls send_status with 500 and the argument passed to send_500.
.IP "c<log_http_request>" 4
.IX Item "c<log_http_request>"
Called at the end of post_process_request.  The default method looks
for the default access_log_format and checks if logging was initilized
during _init_access_log.  If both of these exist, the http_request_info
is formatted using http_log_format and the result is logged.
.ie n .IP """http_log_format""" 4
.el .IP "\f(CWhttp_log_format\fR" 4
.IX Item "http_log_format"
Takes a format string, and request_info and returns a formatted string.
The format should follow the apache mod_log_config specification.  As in
the mod_log_config specification, backslashes, quotes should be escaped
with backslashes and you may also include \en and \et characters as well.
.Sp
The following is a listing of the available parameters as well as sample
output based on a very basic \s-1HTTP\s0 server.
.Sp
.Vb 10
\&    %%                %                 # a percent
\&    %a                ::1               # remote ip
\&    %A                ::1               # local ip
\&    %b                83                # response size (\- if 0) Common Log Format
\&    %B                83                # response size
\&    %{bar}C           baz               # value of cookie by that name
\&    %D                916               # elapsed in microseconds
\&    %{HTTP_COOKIE}e   bar=baz           # value of %ENV by that name
\&    %f                \-                 # filename \- unused
\&    %h                ::1               # remote host if lookups are on, remote ip otherwise
\&    %H                http              # request protocol
\&    %{Host}i          localhost:8080    # request header by that name
\&    %I                336               # bytes received including headers
\&    %l                \-                 # remote logname \- unsused
\&    %m                GET               # request method
\&    %n                Just a note       # http_note by that name
\&    %{Content\-type}o  text/html         # output header by that name
\&    %O                189               # response size including headers
\&    %p                8080              # server port
\&    %P                22999             # pid \- does not support %{tid}P
\&    q                 ?hello=there      # query_string including ? (\- otherwise)
\&    r                 GET /bam?hello=there HTTP/1.1      # the first line of the request
\&    %s                200               # response status
\&    %u                \-                 # remote user \- unused
\&    %U                /bam              # request path (no query string)
\&    %t                [06/Jun/2012:12:14:21 \-0600]       # http_log_time standard format
\&    %t{%F %T %z}t     [2012\-06\-06 12:14:21 \-0600]        # http_log_time with format
\&    %T                0                 # elapsed time in seconds
\&    %v                localhost:8080    # http_log_vhost \- partial implementation
\&    %V                localhost:8080    # http_log_vhost \- partial implementation
\&    %X                \-                 # Connection completed and is \*(Aqclose\*(Aq (\-)
.Ve
.Sp
Additionally, the log parsing allows for the following formats.
.Sp
.Vb 5
\&    %>s               200               # status of last request
\&    %<s               200               # status of original request
\&    %400a             \-                 # remote ip if status is 400
\&    %!400a            ::1               # remote ip if status is not 400
\&    %!200a            \-                 # remote ip if status is not 200
.Ve
.Sp
There are few bits not completely implemented:
.Sp
.Vb 7
\&    > and <    # There is no internal redirection
\&    %I         # The answer to this is based on header size and Content\-length
\&                 instead of the more correct actual number of bytes read though
\&                 in common cases those would be the same.
\&    %X         # There is no Connection keepalive in the default server.
\&    %v and %V  # There are no virtual hosts in the default HTTP server.
\&    %{tid}P    # The default servers are not threaded.
.Ve
.Sp
See the \f(CW\*(C`access_log_format\*(C'\fR option for how to set a different format as
well as to see the default string.
.ie n .IP """exec_cgi""" 4
.el .IP "\f(CWexec_cgi\fR" 4
.IX Item "exec_cgi"
Allow for calling an external script as a \s-1CGI. \s0 This will use IPC::Open3 to
fork a new process and read/write from it.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_cgi($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """http_log_time""" 4
.el .IP "\f(CWhttp_log_time\fR" 4
.IX Item "http_log_time"
Used to implement the \f(CW%t\fR format.
.ie n .IP """http_log_env""" 4
.el .IP "\f(CWhttp_log_env\fR" 4
.IX Item "http_log_env"
Used to implement the \f(CW%e\fR format.
.ie n .IP """http_log_cookie""" 4
.el .IP "\f(CWhttp_log_cookie\fR" 4
.IX Item "http_log_cookie"
Used to implement the \f(CW%C\fR format.
.ie n .IP """http_log_header_in""" 4
.el .IP "\f(CWhttp_log_header_in\fR" 4
.IX Item "http_log_header_in"
used to implement the \f(CW%i\fR format.
.ie n .IP """http_log_note""" 4
.el .IP "\f(CWhttp_log_note\fR" 4
.IX Item "http_log_note"
Used to implement the \f(CW%n\fR format.
.ie n .IP """http_note""" 4
.el .IP "\f(CWhttp_note\fR" 4
.IX Item "http_note"
Takes a key and an optional value.  If passed a key and value, sets
the note for that key.  Always returns the value.  These notes
currently only are used for %{key}n output format.
.ie n .IP """http_log_header_out""" 4
.el .IP "\f(CWhttp_log_header_out\fR" 4
.IX Item "http_log_header_out"
Used to implement the \f(CW%o\fR format.
.ie n .IP """http_log_pid""" 4
.el .IP "\f(CWhttp_log_pid\fR" 4
.IX Item "http_log_pid"
Used to implement the \f(CW%P\fR format.
.ie n .IP """http_log_vhost""" 4
.el .IP "\f(CWhttp_log_vhost\fR" 4
.IX Item "http_log_vhost"
Used to implement the \f(CW%v\fR and \f(CW%V\fR formats.
.ie n .IP """http_log_constat""" 4
.el .IP "\f(CWhttp_log_constat\fR" 4
.IX Item "http_log_constat"
Used to implement the \f(CW%X\fR format.
.ie n .IP """exec_trusted_perl""" 4
.el .IP "\f(CWexec_trusted_perl\fR" 4
.IX Item "exec_trusted_perl"
Allow for calling an external perl script.  This method will still
fork, but instead of using IPC::Open3, it simply requires the perl
script.  That means that the running script will be able to make use
of any shared memory.  It also means that the \s-1STDIN/STDOUT/STDERR\s0
handles the script is using are those directly bound by the server
process.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_trusted_perl($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """exec_fork_hook""" 4
.el .IP "\f(CWexec_fork_hook\fR" 4
.IX Item "exec_fork_hook"
This method is called after the fork of exec_trusted_perl and exec_cgi
hooks.  It is passed the pid (0 if the child) and the file being ran.
Note, that the hook will not be called from the child during exec_cgi.
.ie n .IP """http_dispatch""" 4
.el .IP "\f(CWhttp_dispatch\fR" 4
.IX Item "http_dispatch"
Called if the default process_http_request and process_request methods
have not been overridden and \f(CW\*(C`app\*(C'\fR configuration parameters have been
passed.  In this case this replaces the default echo server.  You can
also enable this subsystem for your own direct use by setting
enable_dispatch to true during configuration.  See the \f(CW\*(C`app\*(C'\fR
configuration item.  It will be passed a dispatch qr (regular
expression) generated during _check_dispatch, and a dispatch table.
The qr will be applied to path_info.  This mechanism could be used to
augment Net::Server::HTTP with document root and virtual host
capabilities.
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server base
classes you can also set the following options.
.IP "max_header_size" 4
.IX Item "max_header_size"
Defaults to 100_000.  Maximum number of bytes to read while parsing
headers.
.IP "server_revision" 4
.IX Item "server_revision"
Defaults to Net::Server::HTTP/$Net::Server::VERSION.
.IP "timeout_header" 4
.IX Item "timeout_header"
Defaults to 15 \- number of seconds to wait for parsing headers.
.IP "timeout_idle" 4
.IX Item "timeout_idle"
Defaults to 60 \- number of seconds a request can be idle before the
request is closed.
.IP "access_log_file" 4
.IX Item "access_log_file"
Defaults to undef.  If true, this represents the location of where
the access log should be written to.  If a special value of \s-1STDERR\s0
is passed, the access log entry will be writing to the same location
as the \s-1ERROR\s0 log.
.IP "access_log_format" 4
.IX Item "access_log_format"
Should be a valid apache log format that will be passed to http_log_format.  See
the http_log_format method for more information.
.Sp
The default value is the \s-1NCSA\s0 extended/combined log format:
.Sp
.Vb 1
\&    \*(Aq%h %l %u %t \e"%r\e" %>s %b \e"%{Referer}i\e" \e"%{User\-Agent}i\e"\*(Aq
.Ve
.IP "app" 4
.IX Item "app"
Takes one or more items and registers them for dispatch.  Arguments
may be supplied as an arrayref containing a location/target pairs, a
hashref containing a location/target pairs, a bare code ref that will
use \*(L"/\*(R" as the location and the codref as the target, a string with a space
indicating \*(L"location target\*(R", a string containing \*(L"location=target\*(R", or
finally a string that will be used as both location and target.  For items
passed as an arrayref or hashref, the target may be a coderef which
will be called and should handle the request.  In all other cases the
target should be a valid executable suitable for passing to exec_cgi.
.Sp
The locations will be added in the order that they are configured.
They will be added to a regular expression which will be applied to
the incoming \s-1PATH_INFO\s0 string.  If the match is successful, the
\&\f(CW$ENV\fR{'\s-1SCRIPT_NAME\s0'} will be set to the matched portion and the matched
portion will be removed from \f(CW$ENV\fR{'\s-1PATH_INFO\s0'}.
.Sp
Once an app has been passed, it is necessary for the server to listen
on /.  Therefore if \*(L"/\*(R" has not been specifically configured for
dispatch, the first found dispatch target will also be used to handle
\&\*(L"/\*(R".
.Sp
For convenience, if the log_level is 2 or greater, the dispatch table
is output to the log.
.Sp
This mechanism is left as a generic mechanism suitable for overriding
by servers meant to handle more complex dispatch.  At the moment there
is no handling of virtual hosts.  At some point we will add in the
default ability to play static content and likely for the ability to
configure virtual hosts \- or that may have to wait for a third party
module.
.Sp
.Vb 3
\&    app => "/home/paul/foo.cgi",
\&      # Dispatch: /home/paul/foo.cgi => home/paul/foo.cgi
\&      # Dispatch: / => home/paul/foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "./bar.cgi",
\&    app => "baz ./bar.cgi",
\&    app => "bim=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: /bar.cgi => ./bar.cgi
\&      # Dispatch: /baz => ./bar.cgi
\&      # Dispatch: /bim => ./bar.cgi
\&      # Dispatch: / => ../../foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "/=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: / => ./bar.cgi
\&
\&    # you could also do this on the commandline
\&    net\-server HTTP app ../../foo.cgi app /=./bar.cgi
\&
\&    # extended options when configured from code
\&
\&    Net::Server::HTTP\->run(app => { # loses order of matching
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    });
\&
\&    Net::Server::HTTP\->run(app => [
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    ]);
.Ve
.SH "TODO"
.IX Header "TODO"
Add support for writing out \s-1HTTP/1.1.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::HTTP5.16.3pm                    0100644 0001750 0001750 00000052775 12566241465 024623  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::HTTP 3"
.TH Net::Server::HTTP 3 "2012-06-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::HTTP \- very basic Net::Server based HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::HTTP); main\->run(port => 8080)\*(Aq
\&    # will start up an echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<form method=post action=/bam><input type=text name=foo><input type=submit></form>\en";
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI;
\&        my $form = {};
\&        my $q = CGI\->new; $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        print "<pre>".Data::Dumper\->Dump([\e%ENV, $form], [\*(Aq*ENV\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Even though Net::Server::HTTP doesn't fall into the normal parallel of
the other Net::Server flavors, handling \s-1HTTP\s0 requests is an often
requested feature and is a standard and simple protocol.
.PP
Net::Server::HTTP begins with base type MultiType defaulting to
Net::Server::Fork.  It is easy to change it to any of the other
Net::Server flavors by passing server_type => \f(CW$other_flavor\fR in the
server configurtation.  The port has also been defaulted to port 80 \-
but could easily be changed to another through the server
configuration.  You can also very easily add ssl by including,
proto=>\*(L"ssl\*(R" and provide a SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::HTTP);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """_init_access_log""" 4
.el .IP "\f(CW_init_access_log\fR" 4
.IX Item "_init_access_log"
Used to open and initialize any requested access_log (see access_log_file
and access_log_format).
.ie n .IP """_tie_client_stdout""" 4
.el .IP "\f(CW_tie_client_stdout\fR" 4
.IX Item "_tie_client_stdout"
Used to initialize automatic response header parsing.
.ie n .IP """process_http_request""" 4
.el .IP "\f(CWprocess_http_request\fR" 4
.IX Item "process_http_request"
Will be passed the client handle, and will have \s-1STDOUT\s0 and \s-1STDIN\s0 tied
to the client.
.Sp
During this method, the \f(CW%ENV\fR will have been set to a standard \s-1CGI\s0
style environment.  You will need to be sure to print the Content-type
header.  This is one change from the other standard Net::Server base
classes.
.Sp
During this method you can read from \f(CW%ENV\fR and \s-1STDIN\s0 just like a normal
\&\s-1HTTP\s0 request in other web servers.  You can print to \s-1STDOUT\s0 and
Net::Server will handle the header negotiation for you.
.Sp
Note: Net::Server::HTTP has no concept of document root or script
aliases or default handling of static content.  That is up to the
consumer of Net::Server::HTTP to work out.
.Sp
Net::Server::HTTP comes with a basic \f(CW%ENV\fR display installed as the
default process_http_request method.
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::HTTP \- you should not
use it while using Net::Server::HTTP.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_http_request once the request is ready and headers
have been parsed.
.ie n .IP """process_headers""" 4
.el .IP "\f(CWprocess_headers\fR" 4
.IX Item "process_headers"
Used to read in the incoming headers and set the \s-1ENV\s0.
.ie n .IP """_init_http_request_info""" 4
.el .IP "\f(CW_init_http_request_info\fR" 4
.IX Item "_init_http_request_info"
Called at the end of process_headers.  Initializes the contents of
http_request_info.
.ie n .IP """http_request_info""" 4
.el .IP "\f(CWhttp_request_info\fR" 4
.IX Item "http_request_info"
Returns a hashref of information specific to the current request.
This information will be used for logging later on.
.ie n .IP """send_status""" 4
.el .IP "\f(CWsend_status\fR" 4
.IX Item "send_status"
Takes an \s-1HTTP\s0 status and a message.  Sends out the correct headers.
.ie n .IP """send_500""" 4
.el .IP "\f(CWsend_500\fR" 4
.IX Item "send_500"
Calls send_status with 500 and the argument passed to send_500.
.IP "c<log_http_request>" 4
.IX Item "c<log_http_request>"
Called at the end of post_process_request.  The default method looks
for the default access_log_format and checks if logging was initilized
during _init_access_log.  If both of these exist, the http_request_info
is formatted using http_log_format and the result is logged.
.ie n .IP """http_log_format""" 4
.el .IP "\f(CWhttp_log_format\fR" 4
.IX Item "http_log_format"
Takes a format string, and request_info and returns a formatted string.
The format should follow the apache mod_log_config specification.  As in
the mod_log_config specification, backslashes, quotes should be escaped
with backslashes and you may also include \en and \et characters as well.
.Sp
The following is a listing of the available parameters as well as sample
output based on a very basic \s-1HTTP\s0 server.
.Sp
.Vb 10
\&    %%                %                 # a percent
\&    %a                ::1               # remote ip
\&    %A                ::1               # local ip
\&    %b                83                # response size (\- if 0) Common Log Format
\&    %B                83                # response size
\&    %{bar}C           baz               # value of cookie by that name
\&    %D                916               # elapsed in microseconds
\&    %{HTTP_COOKIE}e   bar=baz           # value of %ENV by that name
\&    %f                \-                 # filename \- unused
\&    %h                ::1               # remote host if lookups are on, remote ip otherwise
\&    %H                http              # request protocol
\&    %{Host}i          localhost:8080    # request header by that name
\&    %I                336               # bytes received including headers
\&    %l                \-                 # remote logname \- unsused
\&    %m                GET               # request method
\&    %n                Just a note       # http_note by that name
\&    %{Content\-type}o  text/html         # output header by that name
\&    %O                189               # response size including headers
\&    %p                8080              # server port
\&    %P                22999             # pid \- does not support %{tid}P
\&    q                 ?hello=there      # query_string including ? (\- otherwise)
\&    r                 GET /bam?hello=there HTTP/1.1      # the first line of the request
\&    %s                200               # response status
\&    %u                \-                 # remote user \- unused
\&    %U                /bam              # request path (no query string)
\&    %t                [06/Jun/2012:12:14:21 \-0600]       # http_log_time standard format
\&    %t{%F %T %z}t     [2012\-06\-06 12:14:21 \-0600]        # http_log_time with format
\&    %T                0                 # elapsed time in seconds
\&    %v                localhost:8080    # http_log_vhost \- partial implementation
\&    %V                localhost:8080    # http_log_vhost \- partial implementation
\&    %X                \-                 # Connection completed and is \*(Aqclose\*(Aq (\-)
.Ve
.Sp
Additionally, the log parsing allows for the following formats.
.Sp
.Vb 5
\&    %>s               200               # status of last request
\&    %<s               200               # status of original request
\&    %400a             \-                 # remote ip if status is 400
\&    %!400a            ::1               # remote ip if status is not 400
\&    %!200a            \-                 # remote ip if status is not 200
.Ve
.Sp
There are few bits not completely implemented:
.Sp
.Vb 7
\&    > and <    # There is no internal redirection
\&    %I         # The answer to this is based on header size and Content\-length
\&                 instead of the more correct actual number of bytes read though
\&                 in common cases those would be the same.
\&    %X         # There is no Connection keepalive in the default server.
\&    %v and %V  # There are no virtual hosts in the default HTTP server.
\&    %{tid}P    # The default servers are not threaded.
.Ve
.Sp
See the \f(CW\*(C`access_log_format\*(C'\fR option for how to set a different format as
well as to see the default string.
.ie n .IP """exec_cgi""" 4
.el .IP "\f(CWexec_cgi\fR" 4
.IX Item "exec_cgi"
Allow for calling an external script as a \s-1CGI\s0.  This will use IPC::Open3 to
fork a new process and read/write from it.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_cgi($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """http_log_time""" 4
.el .IP "\f(CWhttp_log_time\fR" 4
.IX Item "http_log_time"
Used to implement the \f(CW%t\fR format.
.ie n .IP """http_log_env""" 4
.el .IP "\f(CWhttp_log_env\fR" 4
.IX Item "http_log_env"
Used to implement the \f(CW%e\fR format.
.ie n .IP """http_log_cookie""" 4
.el .IP "\f(CWhttp_log_cookie\fR" 4
.IX Item "http_log_cookie"
Used to implement the \f(CW%C\fR format.
.ie n .IP """http_log_header_in""" 4
.el .IP "\f(CWhttp_log_header_in\fR" 4
.IX Item "http_log_header_in"
used to implement the \f(CW%i\fR format.
.ie n .IP """http_log_note""" 4
.el .IP "\f(CWhttp_log_note\fR" 4
.IX Item "http_log_note"
Used to implement the \f(CW%n\fR format.
.ie n .IP """http_note""" 4
.el .IP "\f(CWhttp_note\fR" 4
.IX Item "http_note"
Takes a key and an optional value.  If passed a key and value, sets
the note for that key.  Always returns the value.  These notes
currently only are used for %{key}n output format.
.ie n .IP """http_log_header_out""" 4
.el .IP "\f(CWhttp_log_header_out\fR" 4
.IX Item "http_log_header_out"
Used to implement the \f(CW%o\fR format.
.ie n .IP """http_log_pid""" 4
.el .IP "\f(CWhttp_log_pid\fR" 4
.IX Item "http_log_pid"
Used to implement the \f(CW%P\fR format.
.ie n .IP """http_log_vhost""" 4
.el .IP "\f(CWhttp_log_vhost\fR" 4
.IX Item "http_log_vhost"
Used to implement the \f(CW%v\fR and \f(CW%V\fR formats.
.ie n .IP """http_log_constat""" 4
.el .IP "\f(CWhttp_log_constat\fR" 4
.IX Item "http_log_constat"
Used to implement the \f(CW%X\fR format.
.ie n .IP """exec_trusted_perl""" 4
.el .IP "\f(CWexec_trusted_perl\fR" 4
.IX Item "exec_trusted_perl"
Allow for calling an external perl script.  This method will still
fork, but instead of using IPC::Open3, it simply requires the perl
script.  That means that the running script will be able to make use
of any shared memory.  It also means that the \s-1STDIN/STDOUT/STDERR\s0
handles the script is using are those directly bound by the server
process.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_trusted_perl($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """exec_fork_hook""" 4
.el .IP "\f(CWexec_fork_hook\fR" 4
.IX Item "exec_fork_hook"
This method is called after the fork of exec_trusted_perl and exec_cgi
hooks.  It is passed the pid (0 if the child) and the file being ran.
Note, that the hook will not be called from the child during exec_cgi.
.ie n .IP """http_dispatch""" 4
.el .IP "\f(CWhttp_dispatch\fR" 4
.IX Item "http_dispatch"
Called if the default process_http_request and process_request methods
have not been overridden and \f(CW\*(C`app\*(C'\fR configuration parameters have been
passed.  In this case this replaces the default echo server.  You can
also enable this subsystem for your own direct use by setting
enable_dispatch to true during configuration.  See the \f(CW\*(C`app\*(C'\fR
configuration item.  It will be passed a dispatch qr (regular
expression) generated during _check_dispatch, and a dispatch table.
The qr will be applied to path_info.  This mechanism could be used to
augment Net::Server::HTTP with document root and virtual host
capabilities.
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server base
classes you can also set the following options.
.IP "max_header_size" 4
.IX Item "max_header_size"
Defaults to 100_000.  Maximum number of bytes to read while parsing
headers.
.IP "server_revision" 4
.IX Item "server_revision"
Defaults to Net::Server::HTTP/$Net::Server::VERSION.
.IP "timeout_header" 4
.IX Item "timeout_header"
Defaults to 15 \- number of seconds to wait for parsing headers.
.IP "timeout_idle" 4
.IX Item "timeout_idle"
Defaults to 60 \- number of seconds a request can be idle before the
request is closed.
.IP "access_log_file" 4
.IX Item "access_log_file"
Defaults to undef.  If true, this represents the location of where
the access log should be written to.  If a special value of \s-1STDERR\s0
is passed, the access log entry will be writting to the same location
as the \s-1ERROR\s0 log.
.IP "access_log_format" 4
.IX Item "access_log_format"
Should be a valid apache log format that will be passed to http_log_format.  See
the http_log_format method for more information.
.Sp
The default value is the \s-1NCSA\s0 extended/combined log format:
.Sp
.Vb 1
\&    \*(Aq%h %l %u %t \e"%r\e" %>s %b \e"%{Referer}i\e" \e"%{User\-Agent}i\e"\*(Aq
.Ve
.IP "app" 4
.IX Item "app"
Takes one or more items and registers them for dispatch.  Arguments
may be supplied as an arrayref containing a location/target pairs, a
hashref containing a location/target pairs, a bare code ref that will
use \*(L"/\*(R" as the location and the codref as the target, a string with a space
indicating \*(L"location target\*(R", a string containing \*(L"location=target\*(R", or
finally a string that will be used as both location and target.  For items
passed as an arrayref or hashref, the target may be a coderef which
will be called and should handle the request.  In all other cases the
target should be a valid executable suitable for passing to exec_cgi.
.Sp
The locations will be added in the order that they are configured.
They will be added to a regular expression which will be applied to
the incoming \s-1PATH_INFO\s0 string.  If the match is successful, the
\&\f(CW$ENV\fR{'\s-1SCRIPT_NAME\s0'} will be set to the matched portion and the matched
portion will be removed from \f(CW$ENV\fR{'\s-1PATH_INFO\s0'}.
.Sp
Once an app has been passed, it is necessary for the server to listen
on /.  Therefore if \*(L"/\*(R" has not been specifically configured for
dispatch, the first found dispatch target will also be used to handle
\&\*(L"/\*(R".
.Sp
For convenience, if the log_level is 2 or greater, the dispatch table
is output to the log.
.Sp
This mechanism is left as a generic mechanism suitable for overriding
by servers meant to handle more complex dispatch.  At the moment there
is no handling of virtual hosts.  At some point we will add in the
default ability to play static content and likely for the ability to
configure virtual hosts \- or that may have to wait for a third party
module.
.Sp
.Vb 3
\&    app => "/home/paul/foo.cgi",
\&      # Dispatch: /home/paul/foo.cgi => home/paul/foo.cgi
\&      # Dispatch: / => home/paul/foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "./bar.cgi",
\&    app => "baz ./bar.cgi",
\&    app => "bim=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: /bar.cgi => ./bar.cgi
\&      # Dispatch: /baz => ./bar.cgi
\&      # Dispatch: /bim => ./bar.cgi
\&      # Dispatch: / => ../../foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "/=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: / => ./bar.cgi
\&
\&    # you could also do this on the commandline
\&    net\-server HTTP app ../../foo.cgi app /=./bar.cgi
\&
\&    # extended options when configured from code
\&
\&    Net::Server::HTTP\->run(app => { # loses order of matching
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    });
\&
\&    Net::Server::HTTP\->run(app => [
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    ]);
.Ve
.SH "TODO"
.IX Header "TODO"
Add support for writing out \s-1HTTP/1\s0.1.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::HTTP5.18.3pm                    0100644 0001750 0001750 00000053315 12566241464 024613  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::HTTP 3"
.TH Net::Server::HTTP 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::HTTP \- very basic Net::Server based HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::HTTP); main\->run(port => 8080)\*(Aq
\&    # will start up an echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<form method=post action=/bam><input type=text name=foo><input type=submit></form>\en";
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI;
\&        my $form = {};
\&        my $q = CGI\->new; $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        print "<pre>".Data::Dumper\->Dump([\e%ENV, $form], [\*(Aq*ENV\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Even though Net::Server::HTTP doesn't fall into the normal parallel of
the other Net::Server flavors, handling \s-1HTTP\s0 requests is an often
requested feature and is a standard and simple protocol.
.PP
Net::Server::HTTP begins with base type MultiType defaulting to
Net::Server::Fork.  It is easy to change it to any of the other
Net::Server flavors by passing server_type => \f(CW$other_flavor\fR in the
server configurtation.  The port has also been defaulted to port 80 \-
but could easily be changed to another through the server
configuration.  You can also very easily add ssl by including,
proto=>\*(L"ssl\*(R" and provide a SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::HTTP);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """_init_access_log""" 4
.el .IP "\f(CW_init_access_log\fR" 4
.IX Item "_init_access_log"
Used to open and initialize any requested access_log (see access_log_file
and access_log_format).
.ie n .IP """_tie_client_stdout""" 4
.el .IP "\f(CW_tie_client_stdout\fR" 4
.IX Item "_tie_client_stdout"
Used to initialize automatic response header parsing.
.ie n .IP """process_http_request""" 4
.el .IP "\f(CWprocess_http_request\fR" 4
.IX Item "process_http_request"
Will be passed the client handle, and will have \s-1STDOUT\s0 and \s-1STDIN\s0 tied
to the client.
.Sp
During this method, the \f(CW%ENV\fR will have been set to a standard \s-1CGI\s0
style environment.  You will need to be sure to print the Content-type
header.  This is one change from the other standard Net::Server base
classes.
.Sp
During this method you can read from \f(CW%ENV\fR and \s-1STDIN\s0 just like a normal
\&\s-1HTTP\s0 request in other web servers.  You can print to \s-1STDOUT\s0 and
Net::Server will handle the header negotiation for you.
.Sp
Note: Net::Server::HTTP has no concept of document root or script
aliases or default handling of static content.  That is up to the
consumer of Net::Server::HTTP to work out.
.Sp
Net::Server::HTTP comes with a basic \f(CW%ENV\fR display installed as the
default process_http_request method.
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::HTTP \- you should not
use it while using Net::Server::HTTP.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_http_request once the request is ready and headers
have been parsed.
.ie n .IP """process_headers""" 4
.el .IP "\f(CWprocess_headers\fR" 4
.IX Item "process_headers"
Used to read in the incoming headers and set the \s-1ENV.\s0
.ie n .IP """_init_http_request_info""" 4
.el .IP "\f(CW_init_http_request_info\fR" 4
.IX Item "_init_http_request_info"
Called at the end of process_headers.  Initializes the contents of
http_request_info.
.ie n .IP """http_request_info""" 4
.el .IP "\f(CWhttp_request_info\fR" 4
.IX Item "http_request_info"
Returns a hashref of information specific to the current request.
This information will be used for logging later on.
.ie n .IP """send_status""" 4
.el .IP "\f(CWsend_status\fR" 4
.IX Item "send_status"
Takes an \s-1HTTP\s0 status and a message.  Sends out the correct headers.
.ie n .IP """send_500""" 4
.el .IP "\f(CWsend_500\fR" 4
.IX Item "send_500"
Calls send_status with 500 and the argument passed to send_500.
.IP "c<log_http_request>" 4
.IX Item "c<log_http_request>"
Called at the end of post_process_request.  The default method looks
for the default access_log_format and checks if logging was initilized
during _init_access_log.  If both of these exist, the http_request_info
is formatted using http_log_format and the result is logged.
.ie n .IP """http_log_format""" 4
.el .IP "\f(CWhttp_log_format\fR" 4
.IX Item "http_log_format"
Takes a format string, and request_info and returns a formatted string.
The format should follow the apache mod_log_config specification.  As in
the mod_log_config specification, backslashes, quotes should be escaped
with backslashes and you may also include \en and \et characters as well.
.Sp
The following is a listing of the available parameters as well as sample
output based on a very basic \s-1HTTP\s0 server.
.Sp
.Vb 10
\&    %%                %                 # a percent
\&    %a                ::1               # remote ip
\&    %A                ::1               # local ip
\&    %b                83                # response size (\- if 0) Common Log Format
\&    %B                83                # response size
\&    %{bar}C           baz               # value of cookie by that name
\&    %D                916               # elapsed in microseconds
\&    %{HTTP_COOKIE}e   bar=baz           # value of %ENV by that name
\&    %f                \-                 # filename \- unused
\&    %h                ::1               # remote host if lookups are on, remote ip otherwise
\&    %H                http              # request protocol
\&    %{Host}i          localhost:8080    # request header by that name
\&    %I                336               # bytes received including headers
\&    %l                \-                 # remote logname \- unsused
\&    %m                GET               # request method
\&    %n                Just a note       # http_note by that name
\&    %{Content\-type}o  text/html         # output header by that name
\&    %O                189               # response size including headers
\&    %p                8080              # server port
\&    %P                22999             # pid \- does not support %{tid}P
\&    q                 ?hello=there      # query_string including ? (\- otherwise)
\&    r                 GET /bam?hello=there HTTP/1.1      # the first line of the request
\&    %s                200               # response status
\&    %u                \-                 # remote user \- unused
\&    %U                /bam              # request path (no query string)
\&    %t                [06/Jun/2012:12:14:21 \-0600]       # http_log_time standard format
\&    %t{%F %T %z}t     [2012\-06\-06 12:14:21 \-0600]        # http_log_time with format
\&    %T                0                 # elapsed time in seconds
\&    %v                localhost:8080    # http_log_vhost \- partial implementation
\&    %V                localhost:8080    # http_log_vhost \- partial implementation
\&    %X                \-                 # Connection completed and is \*(Aqclose\*(Aq (\-)
.Ve
.Sp
Additionally, the log parsing allows for the following formats.
.Sp
.Vb 5
\&    %>s               200               # status of last request
\&    %<s               200               # status of original request
\&    %400a             \-                 # remote ip if status is 400
\&    %!400a            ::1               # remote ip if status is not 400
\&    %!200a            \-                 # remote ip if status is not 200
.Ve
.Sp
There are few bits not completely implemented:
.Sp
.Vb 7
\&    > and <    # There is no internal redirection
\&    %I         # The answer to this is based on header size and Content\-length
\&                 instead of the more correct actual number of bytes read though
\&                 in common cases those would be the same.
\&    %X         # There is no Connection keepalive in the default server.
\&    %v and %V  # There are no virtual hosts in the default HTTP server.
\&    %{tid}P    # The default servers are not threaded.
.Ve
.Sp
See the \f(CW\*(C`access_log_format\*(C'\fR option for how to set a different format as
well as to see the default string.
.ie n .IP """exec_cgi""" 4
.el .IP "\f(CWexec_cgi\fR" 4
.IX Item "exec_cgi"
Allow for calling an external script as a \s-1CGI. \s0 This will use IPC::Open3 to
fork a new process and read/write from it.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_cgi($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """http_log_time""" 4
.el .IP "\f(CWhttp_log_time\fR" 4
.IX Item "http_log_time"
Used to implement the \f(CW%t\fR format.
.ie n .IP """http_log_env""" 4
.el .IP "\f(CWhttp_log_env\fR" 4
.IX Item "http_log_env"
Used to implement the \f(CW%e\fR format.
.ie n .IP """http_log_cookie""" 4
.el .IP "\f(CWhttp_log_cookie\fR" 4
.IX Item "http_log_cookie"
Used to implement the \f(CW%C\fR format.
.ie n .IP """http_log_header_in""" 4
.el .IP "\f(CWhttp_log_header_in\fR" 4
.IX Item "http_log_header_in"
used to implement the \f(CW%i\fR format.
.ie n .IP """http_log_note""" 4
.el .IP "\f(CWhttp_log_note\fR" 4
.IX Item "http_log_note"
Used to implement the \f(CW%n\fR format.
.ie n .IP """http_note""" 4
.el .IP "\f(CWhttp_note\fR" 4
.IX Item "http_note"
Takes a key and an optional value.  If passed a key and value, sets
the note for that key.  Always returns the value.  These notes
currently only are used for %{key}n output format.
.ie n .IP """http_log_header_out""" 4
.el .IP "\f(CWhttp_log_header_out\fR" 4
.IX Item "http_log_header_out"
Used to implement the \f(CW%o\fR format.
.ie n .IP """http_log_pid""" 4
.el .IP "\f(CWhttp_log_pid\fR" 4
.IX Item "http_log_pid"
Used to implement the \f(CW%P\fR format.
.ie n .IP """http_log_vhost""" 4
.el .IP "\f(CWhttp_log_vhost\fR" 4
.IX Item "http_log_vhost"
Used to implement the \f(CW%v\fR and \f(CW%V\fR formats.
.ie n .IP """http_log_constat""" 4
.el .IP "\f(CWhttp_log_constat\fR" 4
.IX Item "http_log_constat"
Used to implement the \f(CW%X\fR format.
.ie n .IP """exec_trusted_perl""" 4
.el .IP "\f(CWexec_trusted_perl\fR" 4
.IX Item "exec_trusted_perl"
Allow for calling an external perl script.  This method will still
fork, but instead of using IPC::Open3, it simply requires the perl
script.  That means that the running script will be able to make use
of any shared memory.  It also means that the \s-1STDIN/STDOUT/STDERR\s0
handles the script is using are those directly bound by the server
process.
.Sp
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        if ($ENV{\*(AqPATH_INFO\*(Aq} && $ENV{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&           $ENV{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&           my $file = "/var/www/cgi\-bin/foo"; # assuming this exists
\&           return $self\->exec_trusted_perl($file);
\&        }
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<a href=/foo>Foo</a>";
\&    }
.Ve
.Sp
At this first release, the parent server is not tracking the child
script which may cause issues if the script is running when a \s-1HUP\s0 is
received.
.ie n .IP """exec_fork_hook""" 4
.el .IP "\f(CWexec_fork_hook\fR" 4
.IX Item "exec_fork_hook"
This method is called after the fork of exec_trusted_perl and exec_cgi
hooks.  It is passed the pid (0 if the child) and the file being ran.
Note, that the hook will not be called from the child during exec_cgi.
.ie n .IP """http_dispatch""" 4
.el .IP "\f(CWhttp_dispatch\fR" 4
.IX Item "http_dispatch"
Called if the default process_http_request and process_request methods
have not been overridden and \f(CW\*(C`app\*(C'\fR configuration parameters have been
passed.  In this case this replaces the default echo server.  You can
also enable this subsystem for your own direct use by setting
enable_dispatch to true during configuration.  See the \f(CW\*(C`app\*(C'\fR
configuration item.  It will be passed a dispatch qr (regular
expression) generated during _check_dispatch, and a dispatch table.
The qr will be applied to path_info.  This mechanism could be used to
augment Net::Server::HTTP with document root and virtual host
capabilities.
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server base
classes you can also set the following options.
.IP "max_header_size" 4
.IX Item "max_header_size"
Defaults to 100_000.  Maximum number of bytes to read while parsing
headers.
.IP "server_revision" 4
.IX Item "server_revision"
Defaults to Net::Server::HTTP/$Net::Server::VERSION.
.IP "timeout_header" 4
.IX Item "timeout_header"
Defaults to 15 \- number of seconds to wait for parsing headers.
.IP "timeout_idle" 4
.IX Item "timeout_idle"
Defaults to 60 \- number of seconds a request can be idle before the
request is closed.
.IP "access_log_file" 4
.IX Item "access_log_file"
Defaults to undef.  If true, this represents the location of where
the access log should be written to.  If a special value of \s-1STDERR\s0
is passed, the access log entry will be writing to the same location
as the \s-1ERROR\s0 log.
.IP "access_log_format" 4
.IX Item "access_log_format"
Should be a valid apache log format that will be passed to http_log_format.  See
the http_log_format method for more information.
.Sp
The default value is the \s-1NCSA\s0 extended/combined log format:
.Sp
.Vb 1
\&    \*(Aq%h %l %u %t \e"%r\e" %>s %b \e"%{Referer}i\e" \e"%{User\-Agent}i\e"\*(Aq
.Ve
.IP "app" 4
.IX Item "app"
Takes one or more items and registers them for dispatch.  Arguments
may be supplied as an arrayref containing a location/target pairs, a
hashref containing a location/target pairs, a bare code ref that will
use \*(L"/\*(R" as the location and the codref as the target, a string with a space
indicating \*(L"location target\*(R", a string containing \*(L"location=target\*(R", or
finally a string that will be used as both location and target.  For items
passed as an arrayref or hashref, the target may be a coderef which
will be called and should handle the request.  In all other cases the
target should be a valid executable suitable for passing to exec_cgi.
.Sp
The locations will be added in the order that they are configured.
They will be added to a regular expression which will be applied to
the incoming \s-1PATH_INFO\s0 string.  If the match is successful, the
\&\f(CW$ENV\fR{'\s-1SCRIPT_NAME\s0'} will be set to the matched portion and the matched
portion will be removed from \f(CW$ENV\fR{'\s-1PATH_INFO\s0'}.
.Sp
Once an app has been passed, it is necessary for the server to listen
on /.  Therefore if \*(L"/\*(R" has not been specifically configured for
dispatch, the first found dispatch target will also be used to handle
\&\*(L"/\*(R".
.Sp
For convenience, if the log_level is 2 or greater, the dispatch table
is output to the log.
.Sp
This mechanism is left as a generic mechanism suitable for overriding
by servers meant to handle more complex dispatch.  At the moment there
is no handling of virtual hosts.  At some point we will add in the
default ability to play static content and likely for the ability to
configure virtual hosts \- or that may have to wait for a third party
module.
.Sp
.Vb 3
\&    app => "/home/paul/foo.cgi",
\&      # Dispatch: /home/paul/foo.cgi => home/paul/foo.cgi
\&      # Dispatch: / => home/paul/foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "./bar.cgi",
\&    app => "baz ./bar.cgi",
\&    app => "bim=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: /bar.cgi => ./bar.cgi
\&      # Dispatch: /baz => ./bar.cgi
\&      # Dispatch: /bim => ./bar.cgi
\&      # Dispatch: / => ../../foo.cgi (default)
\&
\&
\&    app => "../../foo.cgi",
\&    app => "/=./bar.cgi",
\&      # Dispatch: /foo.cgi => ../../foo.cgi
\&      # Dispatch: / => ./bar.cgi
\&
\&    # you could also do this on the commandline
\&    net\-server HTTP app ../../foo.cgi app /=./bar.cgi
\&
\&    # extended options when configured from code
\&
\&    Net::Server::HTTP\->run(app => { # loses order of matching
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    });
\&
\&    Net::Server::HTTP\->run(app => [
\&      \*(Aq/\*(Aq => sub { ... },
\&      \*(Aq/foo\*(Aq => sub { ... },
\&      \*(Aq/bar\*(Aq => \*(Aq/path/to/some.cgi\*(Aq,
\&    ]);
.Ve
.SH "TODO"
.IX Header "TODO"
Add support for writing out \s-1HTTP/1.1.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::INET.3pm                        0100644 0001750 0001750 00000012056 12566241464 024254  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::INET 3"
.TH Net::Server::INET 3 "2012-06-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::INET \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::INET);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    Net::Server::INET\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended for use with inetd.  It offers no methods
beyond the Net::Server base class.  This module operates by overriding
the pre_bind, bind, accept, and post_accept methods to let all socket
processing to be done by inetd.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::INET.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::INET5.16.3pm                    0100644 0001750 0001750 00000011535 12566241464 024567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::INET 3"
.TH Net::Server::INET 3 "2012-06-07" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::INET \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::INET);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    Net::Server::INET\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended for use with inetd.  It offers no methods
beyond the Net::Server base class.  This module operates by overriding
the pre_bind, bind, accept, and post_accept methods to let all socket
processing to be done by inetd.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::INET.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::INET5.18.3pm                    0100644 0001750 0001750 00000012056 12566241464 024570  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::INET 3"
.TH Net::Server::INET 3 "2012-06-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::INET \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::INET);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    Net::Server::INET\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended for use with inetd.  It offers no methods
beyond the Net::Server base class.  This module operates by overriding
the pre_bind, bind, accept, and post_accept methods to let all socket
processing to be done by inetd.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::INET.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Log::Log4perl.3pm          0100644 0001750 0001750 00000015276 12566241464 026670  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Log::Log4perl 3"
.TH Net::Server::Log::Log::Log4perl 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Log::Log4perl \- log via Log4perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqLog::Log4perl\*(Aq,
\&        log4perl_conf => \*(Aq/path/to/my/log4perl.conf\*(Aq,
\&        log4perl_logger => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Log::Log4perl style logging to the Net::Server
system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "log_file" 4
.IX Item "log_file"
To begin using Log::Log4perl logging, simply set the Net::Server
log_file configuration parameter to \*(L"Log::Log4perl\*(R".
.Sp
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined.
.IP "log4perl_conf" 4
.IX Item "log4perl_conf"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Log::Log4perl\*(R".  This is
the filename of the log4perl configuration file \- see
Log::Log4perl. If this is not set, will die on startup. If the file
is not readable, will die.
.IP "log4perl_poll" 4
.IX Item "log4perl_poll"
If set to a value, will initialise with Log::Log4perl::init_and_watch
with this polling value. This can also be the string \*(L"\s-1HUP\*(R"\s0 to re-read
the log4perl_conf when a \s-1HUP\s0 signal is received. If set to 0, no
polling is done. See Log::Log4perl for more details.
.IP "log4perl_logger" 4
.IX Item "log4perl_logger"
This is the facility name. Defaults to \*(L"Net::Server\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## log4perl parameters (if log_file eq Log::Log4perl)
\&    log4perl_conf     "filename"               will die if not set
\&    log4perl_poll     number or HUP            0 (no polling)
\&    log4perl_logger   "name"                   "Net::Server"
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Log::Log4perl5.16.3pm      0100644 0001750 0001750 00000015670 12566241464 027200  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Log::Log4perl 3"
.TH Net::Server::Log::Log::Log4perl 3 "2012-06-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Log::Log4perl \- log via Log4perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqLog::Log4perl\*(Aq,
\&        log4perl_conf => \*(Aq/path/to/my/log4perl.conf\*(Aq,
\&        log4perl_logger => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Log::Log4perl style logging to the Net::Server
system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SH "log_file"
.IX Header "log_file"
To begin using Log::Log4perl logging, simply set the Net::Server
log_file configuration parameter to \*(L"Log::Log4perl\*(R".
.PP
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined.
.IP "log4perl_conf" 4
.IX Item "log4perl_conf"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Log::Log4perl\*(R".  This is
the filename of the log4perl configuration file \- see
Log::Log4perl. If this is not set, will die on startup. If the file
is not readable, will die.
.IP "log4perl_poll" 4
.IX Item "log4perl_poll"
If set to a value, will initialise with Log::Log4perl::init_and_watch
with this polling value. This can also be the string \*(L"\s-1HUP\s0\*(R" to re-read
the log4perl_conf when a \s-1HUP\s0 signal is received. If set to 0, no
polling is done. See Log::Log4perl for more details.
.IP "log4perl_logger" 4
.IX Item "log4perl_logger"
This is the facility name. Defaults to \*(L"Net::Server\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## log4perl parameters (if log_file eq Log::Log4perl)
\&    log4perl_conf     "filename"               will die if not set
\&    log4perl_poll     number or HUP            0 (no polling)
\&    log4perl_logger   "name"                   "Net::Server"
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 84:" 4
.IX Item "Around line 84:"
You forgot a '=back' before '=head1'
.IP "Around line 93:" 4
.IX Item "Around line 93:"
\&'=item' outside of any '=over'
.IP "Around line 129:" 4
.IX Item "Around line 129:"
Unknown directive: =over4
.IP "Around line 131:" 4
.IX Item "Around line 131:"
\&'=item' outside of any '=over'
                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Log::Log4perl5.18.3pm      0100644 0001750 0001750 00000015276 12566241464 027204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Log::Log4perl 3"
.TH Net::Server::Log::Log::Log4perl 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Log::Log4perl \- log via Log4perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqLog::Log4perl\*(Aq,
\&        log4perl_conf => \*(Aq/path/to/my/log4perl.conf\*(Aq,
\&        log4perl_logger => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Log::Log4perl style logging to the Net::Server
system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "log_file" 4
.IX Item "log_file"
To begin using Log::Log4perl logging, simply set the Net::Server
log_file configuration parameter to \*(L"Log::Log4perl\*(R".
.Sp
If the magic name \*(L"Log::Log4perl\*(R" is used, all logging will be
directed to the Log4perl system.  If used, the \f(CW\*(C`log4perl_conf\*(C'\fR,
\&\f(CW\*(C`log4perl_poll\*(C'\fR, \f(CW\*(C`log4perl_logger\*(C'\fR may also be defined.
.IP "log4perl_conf" 4
.IX Item "log4perl_conf"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Log::Log4perl\*(R".  This is
the filename of the log4perl configuration file \- see
Log::Log4perl. If this is not set, will die on startup. If the file
is not readable, will die.
.IP "log4perl_poll" 4
.IX Item "log4perl_poll"
If set to a value, will initialise with Log::Log4perl::init_and_watch
with this polling value. This can also be the string \*(L"\s-1HUP\*(R"\s0 to re-read
the log4perl_conf when a \s-1HUP\s0 signal is received. If set to 0, no
polling is done. See Log::Log4perl for more details.
.IP "log4perl_logger" 4
.IX Item "log4perl_logger"
This is the facility name. Defaults to \*(L"Net::Server\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## log4perl parameters (if log_file eq Log::Log4perl)
\&    log4perl_conf     "filename"               will die if not set
\&    log4perl_poll     number or HUP            0 (no polling)
\&    log4perl_logger   "name"                   "Net::Server"
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Sys::Syslog.3pm            0100644 0001750 0001750 00000016655 12566241464 026517  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Sys::Syslog 3"
.TH Net::Server::Log::Sys::Syslog 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Sys::Syslog \- log via Syslog
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqSys::Syslog\*(Aq,
\&        syslog_ident => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Sys::Syslog logging to the Net::Server system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "log_file" 4
.IX Item "log_file"
To begin using Sys::Syslog logging, simply set the Net::Server
log_file configuration parameter to \*(L"Sys::Syslog\*(R".
.Sp
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Sys::Syslog module.  If syslog is used the parameters
\&\f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and \f(CW\*(C`syslog_logopt\*(C'\fR,and
\&\f(CW\*(C`syslog_facility\*(C'\fR may also be defined.
.IP "syslog_logsock" 4
.IX Item "syslog_logsock"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either unix, inet, native, console, stream, udp, or tcp, or an
arrayref of the types to try.  Default is \*(L"unix\*(R" if the version of
Sys::Syslog < 0.15 \- otherwise the default is to not call setlogsock.
.Sp
See Sys::Syslog.
.IP "syslog_ident" 4
.IX Item "syslog_ident"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  Id to
prepend on syslog entries.  Default is \*(L"net_server\*(R".  See
Sys::Syslog.
.IP "syslog_logopt" 4
.IX Item "syslog_logopt"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either zero or more of \*(L"pid\*(R",\*(L"cons\*(R",\*(L"ndelay\*(R",\*(L"nowait\*(R".  Default is
\&\*(L"pid\*(R".  See Sys::Syslog.
.IP "syslog_facility" 4
.IX Item "syslog_facility"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  See
Sys::Syslog and syslog.  Default is \*(L"daemon\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.ie n .IP """handle_log_error""" 4
.el .IP "\f(CWhandle_log_error\fR" 4
.IX Item "handle_log_error"
This method is called if the log_function fails for some reason.  It
is passed the Net::Server object, the error that occurred while
logging and an arrayref containing the log level and the message.  In
turn, this calls the legacy Net::Server::handle_syslog_error method.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Sys::Syslog5.16.3pm        0100644 0001750 0001750 00000017006 12566241464 027020  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Sys::Syslog 3"
.TH Net::Server::Log::Sys::Syslog 3 "2012-06-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Sys::Syslog \- log via Syslog
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqSys::Syslog\*(Aq,
\&        syslog_ident => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Sys::Syslog logging to the Net::Server system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SH "log_file"
.IX Header "log_file"
To begin using Sys::Syslog logging, simply set the Net::Server
log_file configuration parameter to \*(L"Sys::Syslog\*(R".
.PP
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Sys::Syslog module.  If syslog is used the parameters
\&\f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and \f(CW\*(C`syslog_logopt\*(C'\fR,and
\&\f(CW\*(C`syslog_facility\*(C'\fR may also be defined.
.IP "syslog_logsock" 4
.IX Item "syslog_logsock"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either unix, inet, native, console, stream, udp, or tcp, or an
arrayref of the types to try.  Default is \*(L"unix\*(R" if the version of
Sys::Syslog < 0.15 \- otherwise the default is to not call setlogsock.
.Sp
See Sys::Syslog.
.IP "syslog_ident" 4
.IX Item "syslog_ident"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  Id to
prepend on syslog entries.  Default is \*(L"net_server\*(R".  See
Sys::Syslog.
.IP "syslog_logopt" 4
.IX Item "syslog_logopt"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either zero or more of \*(L"pid\*(R",\*(L"cons\*(R",\*(L"ndelay\*(R",\*(L"nowait\*(R".  Default is
\&\*(L"pid\*(R".  See Sys::Syslog.
.IP "syslog_facility" 4
.IX Item "syslog_facility"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  See
Sys::Syslog and syslog.  Default is \*(L"daemon\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.ie n .IP """handle_log_error""" 4
.el .IP "\f(CWhandle_log_error\fR" 4
.IX Item "handle_log_error"
This method is called if the log_function fails for some reason.  It
is passed the Net::Server object, the error that occurred while
logging and an arrayref containing the log level and the message.  In
turn, this calls the legacy Net::Server::handle_syslog_error method.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 104:" 4
.IX Item "Around line 104:"
You forgot a '=back' before '=head1'
.IP "Around line 114:" 4
.IX Item "Around line 114:"
\&'=item' outside of any '=over'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Log::Sys::Syslog5.18.3pm        0100644 0001750 0001750 00000016655 12566241464 027033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Log::Sys::Syslog 3"
.TH Net::Server::Log::Sys::Syslog 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Log::Sys::Syslog \- log via Syslog
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        log_file => \*(AqSys::Syslog\*(Aq,
\&        syslog_ident => \*(Aqmyapp\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides Sys::Syslog logging to the Net::Server system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "log_file" 4
.IX Item "log_file"
To begin using Sys::Syslog logging, simply set the Net::Server
log_file configuration parameter to \*(L"Sys::Syslog\*(R".
.Sp
If the magic name \*(L"Sys::Syslog\*(R" is used, all logging will take place
via the Sys::Syslog module.  If syslog is used the parameters
\&\f(CW\*(C`syslog_logsock\*(C'\fR, \f(CW\*(C`syslog_ident\*(C'\fR, and \f(CW\*(C`syslog_logopt\*(C'\fR,and
\&\f(CW\*(C`syslog_facility\*(C'\fR may also be defined.
.IP "syslog_logsock" 4
.IX Item "syslog_logsock"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either unix, inet, native, console, stream, udp, or tcp, or an
arrayref of the types to try.  Default is \*(L"unix\*(R" if the version of
Sys::Syslog < 0.15 \- otherwise the default is to not call setlogsock.
.Sp
See Sys::Syslog.
.IP "syslog_ident" 4
.IX Item "syslog_ident"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  Id to
prepend on syslog entries.  Default is \*(L"net_server\*(R".  See
Sys::Syslog.
.IP "syslog_logopt" 4
.IX Item "syslog_logopt"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  May be
either zero or more of \*(L"pid\*(R",\*(L"cons\*(R",\*(L"ndelay\*(R",\*(L"nowait\*(R".  Default is
\&\*(L"pid\*(R".  See Sys::Syslog.
.IP "syslog_facility" 4
.IX Item "syslog_facility"
Only available if \f(CW\*(C`log_file\*(C'\fR is equal to \*(L"Sys::Syslog\*(R".  See
Sys::Syslog and syslog.  Default is \*(L"daemon\*(R".
.SH "DEFAULT ARGUMENTS FOR Net::Server"
.IX Header "DEFAULT ARGUMENTS FOR Net::Server"
The following arguments are available in the default \f(CW\*(C`Net::Server\*(C'\fR or
\&\f(CW\*(C`Net::Server::Single\*(C'\fR modules.  (Other personalities may use
additional parameters and may optionally not use parameters from the
base class.)
.PP
.Vb 1
\&    Key               Value                    Default
\&
\&    ## syslog parameters (if log_file eq Sys::Syslog)
\&    syslog_logsock    (native|unix|inet|udp
\&                       |tcp|stream|console)    unix (on Sys::Syslog < 0.15)
\&    syslog_ident      "identity"               "net_server"
\&    syslog_logopt     (cons|ndelay|nowait|pid) pid
\&    syslog_facility   \ew+                      daemon
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """initialize""" 4
.el .IP "\f(CWinitialize\fR" 4
.IX Item "initialize"
This method is called during the initilize_logging method of
Net::Server.  It returns a single code ref that will be stored under
the log_function property of the Net::Server object.  That code ref
takes log_level and message as arguments and calls the initialized
log4perl system.
.ie n .IP """handle_log_error""" 4
.el .IP "\f(CWhandle_log_error\fR" 4
.IX Item "handle_log_error"
This method is called if the log_function fails for some reason.  It
is passed the Net::Server object, the error that occurred while
logging and an arrayref containing the log level and the message.  In
turn, this calls the legacy Net::Server::handle_syslog_error method.
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::MultiType.3pm                   0100644 0001750 0001750 00000015630 12566241464 025452  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::MultiType 3"
.TH Net::Server::MultiType 3 "2012-06-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::MultiType \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::MultiType);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    my @types = qw(PreFork Fork Single);
\&
\&    Net::Server::MultiType\->run(server_type => \e@types);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended to allow for easy use of multiple
Net::Server personalities.  Given a list of server types,
Net::Server::MultiType will require one at a time until it finds one
that is installed on the system.  It then adds that package to its
\&\f(CW@ISA\fR, thus inheriting the methods of that personality.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::MultiType contains one other configurable
parameter.
.PP
.Vb 2
\&    Key               Value            Default
\&    server_type       \*(Aqserver_type\*(Aq    \*(AqSingle\*(Aq
.Ve
.IP "server_type" 4
.IX Item "server_type"
May be called many times to build up an array or possible
server_types.  At execution, Net::Server::MultiType will find the
first available one and then inherit the methods of that personality
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::MultiType\*(C'\fR allows for the use of a configuration file
to read in server parameters.  The format of this conf file is simple
key value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### multi type info
\&    ### try PreFork first, then go to Single
\&    server_type PreFork
\&    server_type Single
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    spare_servers 10
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::MultiType.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::MultiType5.16.3pm               0100644 0001750 0001750 00000015307 12566241464 025765  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::MultiType 3"
.TH Net::Server::MultiType 3 "2012-06-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::MultiType \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::MultiType);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    my @types = qw(PreFork Fork Single);
\&
\&    Net::Server::MultiType\->run(server_type => \e@types);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended to allow for easy use of multiple
Net::Server personalities.  Given a list of server types,
Net::Server::MultiType will require one at a time until it finds one
that is installed on the system.  It then adds that package to its
\&\f(CW@ISA\fR, thus inheriting the methods of that personality.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::MultiType contains one other configurable
parameter.
.PP
.Vb 2
\&    Key               Value            Default
\&    server_type       \*(Aqserver_type\*(Aq    \*(AqSingle\*(Aq
.Ve
.IP "server_type" 4
.IX Item "server_type"
May be called many times to build up an array or possible
server_types.  At execution, Net::Server::MultiType will find the
first available one and then inherit the methods of that personality
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::MultiType\*(C'\fR allows for the use of a configuration file
to read in server parameters.  The format of this conf file is simple
key value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### multi type info
\&    ### try PreFork first, then go to Single
\&    server_type PreFork
\&    server_type Single
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    spare_servers 10
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::MultiType.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::MultiType5.18.3pm               0100644 0001750 0001750 00000015630 12566241464 025766  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::MultiType 3"
.TH Net::Server::MultiType 3 "2012-06-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::MultiType \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::MultiType);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    my @types = qw(PreFork Fork Single);
\&
\&    Net::Server::MultiType\->run(server_type => \e@types);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality is intended to allow for easy use of multiple
Net::Server personalities.  Given a list of server types,
Net::Server::MultiType will require one at a time until it finds one
that is installed on the system.  It then adds that package to its
\&\f(CW@ISA\fR, thus inheriting the methods of that personality.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::MultiType contains one other configurable
parameter.
.PP
.Vb 2
\&    Key               Value            Default
\&    server_type       \*(Aqserver_type\*(Aq    \*(AqSingle\*(Aq
.Ve
.IP "server_type" 4
.IX Item "server_type"
May be called many times to build up an array or possible
server_types.  At execution, Net::Server::MultiType will find the
first available one and then inherit the methods of that personality
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::MultiType\*(C'\fR allows for the use of a configuration file
to read in server parameters.  The format of this conf file is simple
key value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### multi type info
\&    ### try PreFork first, then go to Single
\&    server_type PreFork
\&    server_type Single
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    spare_servers 10
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
See Net::Server
.SH "HOOKS"
.IX Header "HOOKS"
There are no additional hooks in Net::Server::MultiType.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Multiplex.3pm                   0100644 0001750 0001750 00000031033 12566241464 025474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Multiplex 3"
.TH Net::Server::Multiplex 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Multiplex \- Multiplex several connections within one process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyPlexer;
\&
\&    use base qw(Net::Server::Multiplex);
\&
\&    sub mux_input {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This personality is designed to handle multiple connections all within
one process.  It should only be used with protocols that are
guaranteed to be able to respond quickly on a packet by packet basis.
If determining a response could take a while or an unknown period of
time, all other connections established will block until the response
completes.  If this condition might ever occur, this personality
should probably not be used.
.PP
This takes some nice features of Net::Server (like the server listen
socket setup, configuration file processing, safe signal handling,
convenient inet style \s-1STDIN/STDOUT\s0 handling, logging features,
deamonization and pid tracking, and restartability \-SIGHUP) and some
nice features of IO::Multiplex (automatic buffered \s-1IO\s0 and
per-file-handle objects) and combines them for an easy-to-use
interace.
.PP
See examples/samplechat.pl distributed with Net::Server for a simple
chat server that uses several of these features.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to override, easy to
hook, fashion.  The basic flow is shown below.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    if (Restarting server) {
\&        $self\->restart_open_hook();
\&    }
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop; # This basically just runs IO::Multiplex::loop
\&    # For routines inside a $self\->loop
\&    # See CLIENT PROCESSING below
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    $self\->server_close;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&        # Redo process again starting with configure_hook
\&  }
.Ve
.PP
The server then exits.
.SH "CLIENT PROCESSING"
.IX Header "CLIENT PROCESSING"
The following represents the client processing program flow:
.PP
.Vb 1
\&    $self\->{server}\->{client} = Net::Server::Proto::TCP\->accept();  # NOTE: Multiplexed with mux_input() below
\&
\&    if (check_for_dequeue seconds have passed) {
\&        $self\->run_dequeue();
\&    }
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook; # Net::Server style
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&      # (Net::Server style $self\->process_request() is never called.)
\&
\&      # A unique client specific object is created
\&      # for all mux_* methods from this point on.
\&      $self = _\|_PACKAGE_\|_\->new($self, client);
\&
\&      $self\->mux_connection; # IO::Multiplex style
\&
\&      for (every packet received) {
\&        $self\->mux_input;  # NOTE: Multiplexed with accept() above
\&      }
\&
\&    } else {
\&
\&      $self\->request_denied_hook;
\&
\&      # Notice that if either allow_deny or allow_deny_hook fails, then
\&      # new(), mux_connection(), and mux_input() will never be called.
\&      # mux_eof() and mux_close() will still be called, but using a
\&      # common listen socket callback object instead of a unique client
\&      # specific object.
\&
\&    }
\&
\&    $self\->mux_eof;
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->mux_close;
.Ve
.PP
This process then loops multiplexing between the \fIaccept()\fR for the next
connection and \fImux_input()\fR when input arrives to avoid blocking either
one.
.SH "HOOKS"
.IX Header "HOOKS"
The *_hook methods mentioned above are meant to be overridden with
your own subroutines if you desire to provide additional
functionality.
.PP
The \fIloop()\fR method of Net::Server has been overridden to run the loop
routine of IO::Multiplex instead.  The Net::Server methods may access
the IO::Multiplex object at \f(CW\*(C`$self\->{mux}\*(C'\fR if desired.  The
IO::Multiplex methods may access the Net::Server object at
\&\f(CW\*(C`$self\->{net_server}\*(C'\fR if desired.
.PP
The \fIprocess_request()\fR method is never used with this personality.
.PP
The other Net::Server hooks and methods should work the same.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.  It will run every check_for_dequeue seconds.  Since no
forking is done, this hook should run fast in order to prevent
blocking the rest of the processing.
.SH "TIMEOUTS"
.IX Header "TIMEOUTS"
.SS "set_timeout"
.IX Subsection "set_timeout"
To utilize the optional timeout feature of IO::Multiplex, you need to
specify a timeout by using the set_timeout method.
.PP
\&\f(CW$self\fR\->{net_server}\->{mux}\->set_timeout($fh, \f(CW$seconds_from_now\fR);
.PP
\&\f(CW$fh\fR may be either a client socket or a listen socket file descriptor
within the mux.  \f(CW$seconds_from_now\fR may be fractional to achieve more
precise timeouts.  This is used in conjunction with mux_timeout, which
you should define yourself.
.SS "mux_timeout"
.IX Subsection "mux_timeout"
The main \fIloop()\fR routine will call \f(CW$obj\fR\->mux_timeout($mux, \f(CW$fh\fR) when
the timeout specified in set_timeout is reached where \f(CW$fh\fR is the same
as the one specified in \fIset_timeout()\fR and \f(CW$obj\fR is its corresponding
object (either the unique client specific object or the main listen
callback object) and \f(CW$mux\fR is the main IO::Multiplex object itself.
.SH "CALLBACK INTERFACE"
.IX Header "CALLBACK INTERFACE"
Callback objects should support the following interface.  You do not
have to provide all of these methods, just provide the ones you are
interested in.  These are just like the IO::Multiplex hooks except
that \s-1STDOUT\s0 is tied to the corresponding client socket handle for your
convenience and to more closely emulate the Net::Server model.
However, unlike some other Net::Server personalities, you should never
read directly from \s-1STDIN\s0 yourself.  You should define one or more of
the following methods:
.SS "mux_connection ($mux,$fh)"
.IX Subsection "mux_connection ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the client first connects if the allow_deny
passes.  Note that the \f(CW\*(C`$self\->{net_server}\->{server}\*(C'\fR
property hash may be modified by future connections through
Net::Server.  Any values within it that this object may need to use
later should be copied within its own object at this point.
.PP
.Vb 2
\&  Example:
\&  $self\->{peerport} = $self\->{net_server}\->{server}\->{peerport};
.Ve
.SS "mux_input ($mux,$fh,\e$data)"
.IX Subsection "mux_input ($mux,$fh,$data)"
(\s-1REQUIRED\s0) Run each time a packet is read.  It should consume \f(CW$data\fR
starting at the left and leave unconsumed data in the scalar for
future calls to mux_input.
.SS "mux_eof ($mux,$fh,\e$data)"
.IX Subsection "mux_eof ($mux,$fh,$data)"
(\s-1OPTIONAL\s0) Run once when the client is done writing.  It should
consume the rest of \f(CW$data\fR since \fImux_input()\fR will never be run again.
.SS "mux_close ($mux,$fh)"
.IX Subsection "mux_close ($mux,$fh)"
(\s-1OPTIONAL\s0) Run after the entire client socket has been closed.  No
more attempts should be made to read or write to the client or to
\&\s-1STDOUT.\s0
.SS "mux_timeout ($mux,$fh)"
.IX Subsection "mux_timeout ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the set_timeout setting expires as explained
above.
.SH "BUGS"
.IX Header "BUGS"
This is only known to work with \s-1TCP\s0 servers.
.PP
If you need to use the IO::Multiplex style set_timeout / mux_timeout
interface, you cannot use the Net::Server style check_for_dequeue /
run_dequeue interface.  It will not work if the check_for_dequeue
option is specified.  The run_dequeue method is just a compatibility
interface to comply with the Net::Server::Fork style run_dequeue but
is implemented in terms of the IO::Multiplex style set_timeout and
mux_timeout methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Brown <bbb@cpan.org>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Paul Seamons <paul@seamons.com>
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&     or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server by Paul Seamons <paul@seamons.com>,
.PP
IO::Multiplex by Bruce Keeler <bruce@gridpoint.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Multiplex5.16.3pm               0100644 0001750 0001750 00000030510 12566241464 026005  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Multiplex 3"
.TH Net::Server::Multiplex 3 "2012-05-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Multiplex \- Multiplex several connections within one process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyPlexer;
\&
\&    use base qw(Net::Server::Multiplex);
\&
\&    sub mux_input {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This personality is designed to handle multiple connections all within
one process.  It should only be used with protocols that are
guaranteed to be able to respond quickly on a packet by packet basis.
If determining a response could take a while or an unknown period of
time, all other connections established will block until the response
completes.  If this condition might ever occur, this personality
should probably not be used.
.PP
This takes some nice features of Net::Server (like the server listen
socket setup, configuration file processing, safe signal handling,
convenient inet style \s-1STDIN/STDOUT\s0 handling, logging features,
deamonization and pid tracking, and restartability \-SIGHUP) and some
nice features of IO::Multiplex (automatic buffered \s-1IO\s0 and
per-file-handle objects) and combines them for an easy-to-use
interace.
.PP
See examples/samplechat.pl distributed with Net::Server for a simple
chat server that uses several of these features.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to override, easy to
hook, fashion.  The basic flow is shown below.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    if (Restarting server) {
\&        $self\->restart_open_hook();
\&    }
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop; # This basically just runs IO::Multiplex::loop
\&    # For routines inside a $self\->loop
\&    # See CLIENT PROCESSING below
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    $self\->server_close;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&        # Redo process again starting with configure_hook
\&  }
.Ve
.PP
The server then exits.
.SH "CLIENT PROCESSING"
.IX Header "CLIENT PROCESSING"
The following represents the client processing program flow:
.PP
.Vb 1
\&    $self\->{server}\->{client} = Net::Server::Proto::TCP\->accept();  # NOTE: Multiplexed with mux_input() below
\&
\&    if (check_for_dequeue seconds have passed) {
\&        $self\->run_dequeue();
\&    }
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook; # Net::Server style
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&      # (Net::Server style $self\->process_request() is never called.)
\&
\&      # A unique client specific object is created
\&      # for all mux_* methods from this point on.
\&      $self = _\|_PACKAGE_\|_\->new($self, client);
\&
\&      $self\->mux_connection; # IO::Multiplex style
\&
\&      for (every packet received) {
\&        $self\->mux_input;  # NOTE: Multiplexed with accept() above
\&      }
\&
\&    } else {
\&
\&      $self\->request_denied_hook;
\&
\&      # Notice that if either allow_deny or allow_deny_hook fails, then
\&      # new(), mux_connection(), and mux_input() will never be called.
\&      # mux_eof() and mux_close() will still be called, but using a
\&      # common listen socket callback object instead of a unique client
\&      # specific object.
\&
\&    }
\&
\&    $self\->mux_eof;
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->mux_close;
.Ve
.PP
This process then loops multiplexing between the \fIaccept()\fR for the next
connection and \fImux_input()\fR when input arrives to avoid blocking either
one.
.SH "HOOKS"
.IX Header "HOOKS"
The *_hook methods mentioned above are meant to be overridden with
your own subroutines if you desire to provide additional
functionality.
.PP
The \fIloop()\fR method of Net::Server has been overridden to run the loop
routine of IO::Multiplex instead.  The Net::Server methods may access
the IO::Multiplex object at \f(CW\*(C`$self\->{mux}\*(C'\fR if desired.  The
IO::Multiplex methods may access the Net::Server object at
\&\f(CW\*(C`$self\->{net_server}\*(C'\fR if desired.
.PP
The \fIprocess_request()\fR method is never used with this personality.
.PP
The other Net::Server hooks and methods should work the same.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjuction with the check_for_dequeue
setting.  It will run every check_for_dequeue seconds.  Since no
forking is done, this hook should run fast in order to prevent
blocking the rest of the processing.
.SH "TIMEOUTS"
.IX Header "TIMEOUTS"
.SS "set_timeout"
.IX Subsection "set_timeout"
To utilize the optional timeout feature of IO::Multiplex, you need to
specify a timeout by using the set_timeout method.
.PP
\&\f(CW$self\fR\->{net_server}\->{mux}\->set_timeout($fh, \f(CW$seconds_from_now\fR);
.PP
\&\f(CW$fh\fR may be either a client socket or a listen socket file descriptor
within the mux.  \f(CW$seconds_from_now\fR may be fractional to achieve more
precise timeouts.  This is used in conjuction with mux_timeout, which
you should define yourself.
.SS "mux_timeout"
.IX Subsection "mux_timeout"
The main \fIloop()\fR routine will call \f(CW$obj\fR\->mux_timeout($mux, \f(CW$fh\fR) when
the timeout specified in set_timeout is reached where \f(CW$fh\fR is the same
as the one specified in \fIset_timeout()\fR and \f(CW$obj\fR is its corresponding
object (either the unique client specific object or the main listen
callback object) and \f(CW$mux\fR is the main IO::Multiplex object itself.
.SH "CALLBACK INTERFACE"
.IX Header "CALLBACK INTERFACE"
Callback objects should support the following interface.  You do not
have to provide all of these methods, just provide the ones you are
interested in.  These are just like the IO::Multiplex hooks except
that \s-1STDOUT\s0 is tied to the corresponding client socket handle for your
convenience and to more closely emulate the Net::Server model.
However, unlike some other Net::Server personalities, you should never
read directly from \s-1STDIN\s0 yourself.  You should define one or more of
the following methods:
.SS "mux_connection ($mux,$fh)"
.IX Subsection "mux_connection ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the client first connects if the allow_deny
passes.  Note that the \f(CW\*(C`$self\->{net_server}\->{server}\*(C'\fR
property hash may be modified by future connections through
Net::Server.  Any values within it that this object may need to use
later should be copied within its own object at this point.
.PP
.Vb 2
\&  Example:
\&  $self\->{peerport} = $self\->{net_server}\->{server}\->{peerport};
.Ve
.SS "mux_input ($mux,$fh,\e$data)"
.IX Subsection "mux_input ($mux,$fh,$data)"
(\s-1REQUIRED\s0) Run each time a packet is read.  It should consume \f(CW$data\fR
starting at the left and leave unconsumed data in the scalar for
future calls to mux_input.
.SS "mux_eof ($mux,$fh,\e$data)"
.IX Subsection "mux_eof ($mux,$fh,$data)"
(\s-1OPTIONAL\s0) Run once when the client is done writing.  It should
consume the rest of \f(CW$data\fR since \fImux_input()\fR will never be run again.
.SS "mux_close ($mux,$fh)"
.IX Subsection "mux_close ($mux,$fh)"
(\s-1OPTIONAL\s0) Run after the entire client socket has been closed.  No
more attempts should be made to read or write to the client or to
\&\s-1STDOUT\s0.
.SS "mux_timeout ($mux,$fh)"
.IX Subsection "mux_timeout ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the set_timeout setting expires as explained
above.
.SH "BUGS"
.IX Header "BUGS"
This is only known to work with \s-1TCP\s0 servers.
.PP
If you need to use the IO::Multiplex style set_timeout / mux_timeout
interface, you cannot use the Net::Server style check_for_dequeue /
run_dequeue interface.  It will not work if the check_for_dequeue
option is specified.  The run_dequeue method is just a compatibility
interface to comply with the Net::Server::Fork style run_dequeue but
is implemented in terms of the IO::Multiplex style set_timeout and
mux_timeout methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Brown <bbb@cpan.org>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Paul Seamons <paul@seamons.com>
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&     or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server by Paul Seamons <paul@seamons.com>,
.PP
IO::Multiplex by Bruce Keeler <bruce@gridpoint.com>.
                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Multiplex5.18.3pm               0100644 0001750 0001750 00000031033 12566241464 026010  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Multiplex 3"
.TH Net::Server::Multiplex 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Multiplex \- Multiplex several connections within one process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyPlexer;
\&
\&    use base qw(Net::Server::Multiplex);
\&
\&    sub mux_input {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This personality is designed to handle multiple connections all within
one process.  It should only be used with protocols that are
guaranteed to be able to respond quickly on a packet by packet basis.
If determining a response could take a while or an unknown period of
time, all other connections established will block until the response
completes.  If this condition might ever occur, this personality
should probably not be used.
.PP
This takes some nice features of Net::Server (like the server listen
socket setup, configuration file processing, safe signal handling,
convenient inet style \s-1STDIN/STDOUT\s0 handling, logging features,
deamonization and pid tracking, and restartability \-SIGHUP) and some
nice features of IO::Multiplex (automatic buffered \s-1IO\s0 and
per-file-handle objects) and combines them for an easy-to-use
interace.
.PP
See examples/samplechat.pl distributed with Net::Server for a simple
chat server that uses several of these features.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
The process flow is written in an open, easy to override, easy to
hook, fashion.  The basic flow is shown below.
.PP
.Vb 1
\&    $self\->configure_hook;
\&
\&    $self\->configure(@_);
\&
\&    $self\->post_configure;
\&
\&    $self\->post_configure_hook;
\&
\&    $self\->pre_bind;
\&
\&    $self\->bind;
\&
\&    if (Restarting server) {
\&        $self\->restart_open_hook();
\&    }
\&
\&    $self\->post_bind_hook;
\&
\&    $self\->post_bind;
\&
\&    $self\->pre_loop_hook;
\&
\&    $self\->loop; # This basically just runs IO::Multiplex::loop
\&    # For routines inside a $self\->loop
\&    # See CLIENT PROCESSING below
\&
\&    $self\->pre_server_close_hook;
\&
\&    $self\->post_child_cleanup_hook;
\&
\&    $self\->server_close;
\&
\&    if (Restarting server) {
\&        $self\->restart_close_hook();
\&        $self\->hup_server;
\&        # Redo process again starting with configure_hook
\&  }
.Ve
.PP
The server then exits.
.SH "CLIENT PROCESSING"
.IX Header "CLIENT PROCESSING"
The following represents the client processing program flow:
.PP
.Vb 1
\&    $self\->{server}\->{client} = Net::Server::Proto::TCP\->accept();  # NOTE: Multiplexed with mux_input() below
\&
\&    if (check_for_dequeue seconds have passed) {
\&        $self\->run_dequeue();
\&    }
\&
\&    $self\->get_client_info;
\&
\&    $self\->post_accept_hook; # Net::Server style
\&
\&    if ($self\->allow_deny
\&        && $self\->allow_deny_hook) {
\&
\&      # (Net::Server style $self\->process_request() is never called.)
\&
\&      # A unique client specific object is created
\&      # for all mux_* methods from this point on.
\&      $self = _\|_PACKAGE_\|_\->new($self, client);
\&
\&      $self\->mux_connection; # IO::Multiplex style
\&
\&      for (every packet received) {
\&        $self\->mux_input;  # NOTE: Multiplexed with accept() above
\&      }
\&
\&    } else {
\&
\&      $self\->request_denied_hook;
\&
\&      # Notice that if either allow_deny or allow_deny_hook fails, then
\&      # new(), mux_connection(), and mux_input() will never be called.
\&      # mux_eof() and mux_close() will still be called, but using a
\&      # common listen socket callback object instead of a unique client
\&      # specific object.
\&
\&    }
\&
\&    $self\->mux_eof;
\&
\&    $self\->post_process_request_hook;
\&
\&    $self\->mux_close;
.Ve
.PP
This process then loops multiplexing between the \fIaccept()\fR for the next
connection and \fImux_input()\fR when input arrives to avoid blocking either
one.
.SH "HOOKS"
.IX Header "HOOKS"
The *_hook methods mentioned above are meant to be overridden with
your own subroutines if you desire to provide additional
functionality.
.PP
The \fIloop()\fR method of Net::Server has been overridden to run the loop
routine of IO::Multiplex instead.  The Net::Server methods may access
the IO::Multiplex object at \f(CW\*(C`$self\->{mux}\*(C'\fR if desired.  The
IO::Multiplex methods may access the Net::Server object at
\&\f(CW\*(C`$self\->{net_server}\*(C'\fR if desired.
.PP
The \fIprocess_request()\fR method is never used with this personality.
.PP
The other Net::Server hooks and methods should work the same.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.  It will run every check_for_dequeue seconds.  Since no
forking is done, this hook should run fast in order to prevent
blocking the rest of the processing.
.SH "TIMEOUTS"
.IX Header "TIMEOUTS"
.SS "set_timeout"
.IX Subsection "set_timeout"
To utilize the optional timeout feature of IO::Multiplex, you need to
specify a timeout by using the set_timeout method.
.PP
\&\f(CW$self\fR\->{net_server}\->{mux}\->set_timeout($fh, \f(CW$seconds_from_now\fR);
.PP
\&\f(CW$fh\fR may be either a client socket or a listen socket file descriptor
within the mux.  \f(CW$seconds_from_now\fR may be fractional to achieve more
precise timeouts.  This is used in conjunction with mux_timeout, which
you should define yourself.
.SS "mux_timeout"
.IX Subsection "mux_timeout"
The main \fIloop()\fR routine will call \f(CW$obj\fR\->mux_timeout($mux, \f(CW$fh\fR) when
the timeout specified in set_timeout is reached where \f(CW$fh\fR is the same
as the one specified in \fIset_timeout()\fR and \f(CW$obj\fR is its corresponding
object (either the unique client specific object or the main listen
callback object) and \f(CW$mux\fR is the main IO::Multiplex object itself.
.SH "CALLBACK INTERFACE"
.IX Header "CALLBACK INTERFACE"
Callback objects should support the following interface.  You do not
have to provide all of these methods, just provide the ones you are
interested in.  These are just like the IO::Multiplex hooks except
that \s-1STDOUT\s0 is tied to the corresponding client socket handle for your
convenience and to more closely emulate the Net::Server model.
However, unlike some other Net::Server personalities, you should never
read directly from \s-1STDIN\s0 yourself.  You should define one or more of
the following methods:
.SS "mux_connection ($mux,$fh)"
.IX Subsection "mux_connection ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the client first connects if the allow_deny
passes.  Note that the \f(CW\*(C`$self\->{net_server}\->{server}\*(C'\fR
property hash may be modified by future connections through
Net::Server.  Any values within it that this object may need to use
later should be copied within its own object at this point.
.PP
.Vb 2
\&  Example:
\&  $self\->{peerport} = $self\->{net_server}\->{server}\->{peerport};
.Ve
.SS "mux_input ($mux,$fh,\e$data)"
.IX Subsection "mux_input ($mux,$fh,$data)"
(\s-1REQUIRED\s0) Run each time a packet is read.  It should consume \f(CW$data\fR
starting at the left and leave unconsumed data in the scalar for
future calls to mux_input.
.SS "mux_eof ($mux,$fh,\e$data)"
.IX Subsection "mux_eof ($mux,$fh,$data)"
(\s-1OPTIONAL\s0) Run once when the client is done writing.  It should
consume the rest of \f(CW$data\fR since \fImux_input()\fR will never be run again.
.SS "mux_close ($mux,$fh)"
.IX Subsection "mux_close ($mux,$fh)"
(\s-1OPTIONAL\s0) Run after the entire client socket has been closed.  No
more attempts should be made to read or write to the client or to
\&\s-1STDOUT.\s0
.SS "mux_timeout ($mux,$fh)"
.IX Subsection "mux_timeout ($mux,$fh)"
(\s-1OPTIONAL\s0) Run once when the set_timeout setting expires as explained
above.
.SH "BUGS"
.IX Header "BUGS"
This is only known to work with \s-1TCP\s0 servers.
.PP
If you need to use the IO::Multiplex style set_timeout / mux_timeout
interface, you cannot use the Net::Server style check_for_dequeue /
run_dequeue interface.  It will not work if the check_for_dequeue
option is specified.  The run_dequeue method is just a compatibility
interface to comply with the Net::Server::Fork style run_dequeue but
is implemented in terms of the IO::Multiplex style set_timeout and
mux_timeout methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Brown <bbb@cpan.org>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Paul Seamons <paul@seamons.com>
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 4
\&  This package may be distributed under the terms of either the
\&  GNU General Public License
\&     or the
\&  Perl Artistic License
\&
\&  All rights reserved.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server by Paul Seamons <paul@seamons.com>,
.PP
IO::Multiplex by Bruce Keeler <bruce@gridpoint.com>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PSGI.3pm                        0100644 0001750 0001750 00000023372 12566241464 024262  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PSGI 3"
.TH Net::Server::PSGI 3 "2012-06-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PSGI \- basic Net::Server based PSGI HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::PSGI); main\->run(port => 8080, ipv => "*")\*(Aq
\&    # runs a default echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::PSGI);
\&    _\|_PACKAGE_\|_\->run(app => \e&my_echo_handler); # will bind IPv4 port 80
\&
\&    sub my_echo_handler {
\&        my $env = shift;
\&        my $txt = qq{<form method="post" action="/bam"><input type="text" name="foo"><input type="submit"></form>\en};
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI::PSGI;
\&        my $form = {};
\&        my $q = CGI::PSGI\->new($env);
\&        $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        $txt .= "<pre>".Data::Dumper\->Dump([$env, $form], [\*(Aqenv\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], [$txt]];
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want a more fully featured \s-1PSGI\s0 experience, it would be wise to
look at the Plack and Starman set of modules.  Net::Server::PSGI
is intended as an easy gateway into \s-1PSGI. \s0 But to get the most out of
all that \s-1PSGI\s0 has to offer, you should review the Plack and
Plack::Middleware.  If you only need something a little more
rudimentary, then Net::Server::PSGI may be good for you.
.PP
Net::Server::PSGI takes Net::Server::HTTP one level farther.  It
begins with base type MultiType defaulting to Net::Server::Fork.  It
is easy to change it to any of the other Net::Server flavors by
passing server_type => \f(CW$other_flavor\fR in the server configurtation.
The port has also been defaulted to port 80 \- but could easily be
changed to another through the server configuration.  You can also
very easily add ssl by including, proto=>\*(L"ssl\*(R" and provide a
SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::PSGI);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::PSGI \- you should not
use it while using Net::Server::PSGI.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_psgi_request once the request is ready and headers
have been parsed.
.ie n .IP """process_psgi_request""" 4
.el .IP "\f(CWprocess_psgi_request\fR" 4
.IX Item "process_psgi_request"
Used when psgi_enabled is true.  During this method, find_psgi_handler
will be called to return the appropriate psgi response handler.  Once
finished, print_psgi_headers and print_psgi_body are used to print out
the response.  See \s-1PSGI\s0.
.Sp
Typically this method should not be overridden.  Instead, an appropriate
method for finding the app should be given to find_psgi_handler or app.
.ie n .IP """find_psgi_handler""" 4
.el .IP "\f(CWfind_psgi_handler\fR" 4
.IX Item "find_psgi_handler"
Used to lookup the appropriate \s-1PSGI\s0 handler.  A reference to the
already parsed \f(CW$env\fR hashref is passed.  \s-1PATH_INFO\s0 will be initialized
to the full path portion of the \s-1URI.  SCRIPT_NAME\s0 will be initialized
to the empty string.  This handler should set the appropriate values
for \s-1SCRIPT_NAME\s0 and \s-1PATH_INFO\s0 depending upon the path matched.  A code
reference for the handler should be returned.  The default
find_psgi_handler will call the \f(CW\*(C`app\*(C'\fR method.  If that fails a
reference to the psgi_echo_handler is returned as the default
application.
.Sp
.Vb 2
\&    sub find_psgi_handler {
\&        my ($self, $env) = @_;
\&
\&        if ($env\->{\*(AqPATH_INFO\*(Aq} && $env\->{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&            $env\->{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&            return \e&foo_app;
\&        }
\&
\&        return $self\->SUPER::find_psgi_handler($env);
\&    }
.Ve
.ie n .IP """app""" 4
.el .IP "\f(CWapp\fR" 4
.IX Item "app"
Return a reference to the application being served.  This should
be a valid \s-1PSGI\s0 application.  See \s-1PSGI\s0.  By default it will look
at the value of the \f(CW\*(C`app\*(C'\fR configuration option.  The \f(CW\*(C`app\*(C'\fR method
may also be used to set the \f(CW\*(C`app\*(C'\fR configuration option.
.Sp
.Vb 2
\&    package MyApp;
\&    use base qw(Net::Server::PSGI);
\&
\&    sub default_server_type { \*(AqPrefork\*(Aq }
\&
\&    sub my_app {
\&        my $env = shift;
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], ["Hello world"]];
\&    }
\&
\&
\&    MyApp\->run(app => \e&my_app);
\&
\&
\&    # OR
\&    sub app { \e&my_app }
\&    MyApp\->run;
\&
\&
\&    # OR
\&    my $server = MyApp\->new;
\&    $server\->app(\e&my_app);
\&    $server\->run;
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server::HTTP
base classes you can also set the following options.
.IP "app" 4
.IX Item "app"
Should return a coderef of the \s-1PSGI\s0 application.  Is returned by the
app method.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Plack,
Starman,
.PP
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
Net::Server::HTTP
                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PSGI5.16.3pm                    0100644 0001750 0001750 00000023060 12566241464 024566  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PSGI 3"
.TH Net::Server::PSGI 3 "2012-06-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PSGI \- basic Net::Server based PSGI HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::PSGI); main\->run(port => 8080, ipv => "*")\*(Aq
\&    # runs a default echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::PSGI);
\&    _\|_PACKAGE_\|_\->run(app => \e&my_echo_handler); # will bind IPv4 port 80
\&
\&    sub my_echo_handler {
\&        my $env = shift;
\&        my $txt = qq{<form method="post" action="/bam"><input type="text" name="foo"><input type="submit"></form>\en};
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI::PSGI;
\&        my $form = {};
\&        my $q = CGI::PSGI\->new($env);
\&        $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        $txt .= "<pre>".Data::Dumper\->Dump([$env, $form], [\*(Aqenv\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], [$txt]];
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want a more fully featured \s-1PSGI\s0 experience, it would be wise to
look at the Plack and Starman set of modules.  Net::Server::PSGI
is intended as an easy gateway into \s-1PSGI\s0.  But to get the most out of
all that \s-1PSGI\s0 has to offer, you should review the Plack and
Plack::Middleware.  If you only need something a little more
rudimentary, then Net::Server::PSGI may be good for you.
.PP
Net::Server::PSGI takes Net::Server::HTTP one level farther.  It
begins with base type MultiType defaulting to Net::Server::Fork.  It
is easy to change it to any of the other Net::Server flavors by
passing server_type => \f(CW$other_flavor\fR in the server configurtation.
The port has also been defaulted to port 80 \- but could easily be
changed to another through the server configuration.  You can also
very easily add ssl by including, proto=>\*(L"ssl\*(R" and provide a
SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::PSGI);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::PSGI \- you should not
use it while using Net::Server::PSGI.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_psgi_request once the request is ready and headers
have been parsed.
.ie n .IP """process_psgi_request""" 4
.el .IP "\f(CWprocess_psgi_request\fR" 4
.IX Item "process_psgi_request"
Used when psgi_enabled is true.  During this method, find_psgi_handler
will be called to return the appropriate psgi response handler.  Once
finished, print_psgi_headers and print_psgi_body are used to print out
the response.  See \s-1PSGI\s0.
.Sp
Typically this method should not be overridden.  Instead, an appropriate
method for finding the app should be given to find_psgi_handler or app.
.ie n .IP """find_psgi_handler""" 4
.el .IP "\f(CWfind_psgi_handler\fR" 4
.IX Item "find_psgi_handler"
Used to lookup the appropriate \s-1PSGI\s0 handler.  A reference to the
already parsed \f(CW$env\fR hashref is passed.  \s-1PATH_INFO\s0 will be initialized
to the full path portion of the \s-1URI\s0.  \s-1SCRIPT_NAME\s0 will be initialized
to the empty string.  This handler should set the appropriate values
for \s-1SCRIPT_NAME\s0 and \s-1PATH_INFO\s0 depending upon the path matched.  A code
reference for the handler should be returned.  The default
find_psgi_handler will call the \f(CW\*(C`app\*(C'\fR method.  If that fails a
reference to the psgi_echo_handler is returned as the default
application.
.Sp
.Vb 2
\&    sub find_psgi_handler {
\&        my ($self, $env) = @_;
\&
\&        if ($env\->{\*(AqPATH_INFO\*(Aq} && $env\->{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&            $env\->{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&            return \e&foo_app;
\&        }
\&
\&        return $self\->SUPER::find_psgi_handler($env);
\&    }
.Ve
.ie n .IP """app""" 4
.el .IP "\f(CWapp\fR" 4
.IX Item "app"
Return a reference to the application being served.  This should
be a valid \s-1PSGI\s0 application.  See \s-1PSGI\s0.  By default it will look
at the value of the \f(CW\*(C`app\*(C'\fR configuration option.  The \f(CW\*(C`app\*(C'\fR method
may also be used to set the \f(CW\*(C`app\*(C'\fR configuration option.
.Sp
.Vb 2
\&    package MyApp;
\&    use base qw(Net::Server::PSGI);
\&
\&    sub default_server_type { \*(AqPrefork\*(Aq }
\&
\&    sub my_app {
\&        my $env = shift;
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], ["Hello world"]];
\&    }
\&
\&
\&    MyApp\->run(app => \e&my_app);
\&
\&
\&    # OR
\&    sub app { \e&my_app }
\&    MyApp\->run;
\&
\&
\&    # OR
\&    my $server = MyApp\->new;
\&    $server\->app(\e&my_app);
\&    $server\->run;
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server::HTTP
base classes you can also set the following options.
.IP "app" 4
.IX Item "app"
Should return a coderef of the \s-1PSGI\s0 application.  Is returned by the
app method.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Plack,
Starman,
.PP
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
Net::Server::HTTP
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PSGI5.18.3pm                    0100644 0001750 0001750 00000023372 12566241464 024576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PSGI 3"
.TH Net::Server::PSGI 3 "2012-06-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PSGI \- basic Net::Server based PSGI HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 2
\&    perl \-e \*(Aquse base qw(Net::Server::PSGI); main\->run(port => 8080, ipv => "*")\*(Aq
\&    # runs a default echo server
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::PSGI);
\&    _\|_PACKAGE_\|_\->run(app => \e&my_echo_handler); # will bind IPv4 port 80
\&
\&    sub my_echo_handler {
\&        my $env = shift;
\&        my $txt = qq{<form method="post" action="/bam"><input type="text" name="foo"><input type="submit"></form>\en};
\&
\&        require Data::Dumper;
\&        local $Data::Dumper::Sortkeys = 1;
\&
\&        require CGI::PSGI;
\&        my $form = {};
\&        my $q = CGI::PSGI\->new($env);
\&        $form\->{$_} = $q\->param($_) for $q\->param;
\&
\&        $txt .= "<pre>".Data::Dumper\->Dump([$env, $form], [\*(Aqenv\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], [$txt]];
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want a more fully featured \s-1PSGI\s0 experience, it would be wise to
look at the Plack and Starman set of modules.  Net::Server::PSGI
is intended as an easy gateway into \s-1PSGI. \s0 But to get the most out of
all that \s-1PSGI\s0 has to offer, you should review the Plack and
Plack::Middleware.  If you only need something a little more
rudimentary, then Net::Server::PSGI may be good for you.
.PP
Net::Server::PSGI takes Net::Server::HTTP one level farther.  It
begins with base type MultiType defaulting to Net::Server::Fork.  It
is easy to change it to any of the other Net::Server flavors by
passing server_type => \f(CW$other_flavor\fR in the server configurtation.
The port has also been defaulted to port 80 \- but could easily be
changed to another through the server configuration.  You can also
very easily add ssl by including, proto=>\*(L"ssl\*(R" and provide a
SSL_cert_file and SSL_key_file.
.PP
For example, here is a basic server that will bind to all interfaces,
will speak both \s-1HTTP\s0 on port 8080 as well as \s-1HTTPS\s0 on 8443, and will
speak both IPv4, as well as IPv6 if it is available.
.PP
.Vb 1
\&    use base qw(Net::Server::PSGI);
\&
\&    _\|_PACKAGE_\|_\->run(
\&        port  => [8080, "8443/ssl"],
\&        ipv   => \*(Aq*\*(Aq, # IPv6 if available
\&        SSL_key_file  => \*(Aq/my/key\*(Aq,
\&        SSL_cert_file => \*(Aq/my/cert\*(Aq,
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::PSGI \- you should not
use it while using Net::Server::PSGI.  This overridden method parses
the environment and sets up request alarms and handles dying failures.
It calls process_psgi_request once the request is ready and headers
have been parsed.
.ie n .IP """process_psgi_request""" 4
.el .IP "\f(CWprocess_psgi_request\fR" 4
.IX Item "process_psgi_request"
Used when psgi_enabled is true.  During this method, find_psgi_handler
will be called to return the appropriate psgi response handler.  Once
finished, print_psgi_headers and print_psgi_body are used to print out
the response.  See \s-1PSGI\s0.
.Sp
Typically this method should not be overridden.  Instead, an appropriate
method for finding the app should be given to find_psgi_handler or app.
.ie n .IP """find_psgi_handler""" 4
.el .IP "\f(CWfind_psgi_handler\fR" 4
.IX Item "find_psgi_handler"
Used to lookup the appropriate \s-1PSGI\s0 handler.  A reference to the
already parsed \f(CW$env\fR hashref is passed.  \s-1PATH_INFO\s0 will be initialized
to the full path portion of the \s-1URI.  SCRIPT_NAME\s0 will be initialized
to the empty string.  This handler should set the appropriate values
for \s-1SCRIPT_NAME\s0 and \s-1PATH_INFO\s0 depending upon the path matched.  A code
reference for the handler should be returned.  The default
find_psgi_handler will call the \f(CW\*(C`app\*(C'\fR method.  If that fails a
reference to the psgi_echo_handler is returned as the default
application.
.Sp
.Vb 2
\&    sub find_psgi_handler {
\&        my ($self, $env) = @_;
\&
\&        if ($env\->{\*(AqPATH_INFO\*(Aq} && $env\->{\*(AqPATH_INFO\*(Aq} =~ s{^ (/foo) (?= $ | /) }{}x) {
\&            $env\->{\*(AqSCRIPT_NAME\*(Aq} = $1;
\&            return \e&foo_app;
\&        }
\&
\&        return $self\->SUPER::find_psgi_handler($env);
\&    }
.Ve
.ie n .IP """app""" 4
.el .IP "\f(CWapp\fR" 4
.IX Item "app"
Return a reference to the application being served.  This should
be a valid \s-1PSGI\s0 application.  See \s-1PSGI\s0.  By default it will look
at the value of the \f(CW\*(C`app\*(C'\fR configuration option.  The \f(CW\*(C`app\*(C'\fR method
may also be used to set the \f(CW\*(C`app\*(C'\fR configuration option.
.Sp
.Vb 2
\&    package MyApp;
\&    use base qw(Net::Server::PSGI);
\&
\&    sub default_server_type { \*(AqPrefork\*(Aq }
\&
\&    sub my_app {
\&        my $env = shift;
\&        return [200, [\*(AqContent\-type\*(Aq, \*(Aqtext/html\*(Aq], ["Hello world"]];
\&    }
\&
\&
\&    MyApp\->run(app => \e&my_app);
\&
\&
\&    # OR
\&    sub app { \e&my_app }
\&    MyApp\->run;
\&
\&
\&    # OR
\&    my $server = MyApp\->new;
\&    $server\->app(\e&my_app);
\&    $server\->run;
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
In addition to the command line arguments of the Net::Server::HTTP
base classes you can also set the following options.
.IP "app" 4
.IX Item "app"
Should return a coderef of the \s-1PSGI\s0 application.  Is returned by the
app method.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Plack,
Starman,
.PP
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
Net::Server::HTTP
                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreFork.3pm                     0100644 0001750 0001750 00000027540 12566241464 025071  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreFork 3"
.TH Net::Server::PreFork 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreFork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server and Net::Server::PreForkSimple
first.  This module is a personality, or extension, or sub class, of
the Net::Server::PreForkSimple class which is a sub class of
Net::Server.  See Net::Server::PreForkSimple.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure that at any
given time there are \f(CW\*(C`min_spare_servers\*(C'\fR available to receive a
client request, up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will
process up to \f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good
for a heavily hit site, and should scale well for most applications.
(Multi port accept is accomplished using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class and the Net::Server::PreForkSimple parent class,
Net::Server::PreFork contains several other configurable parameters.
You really should also see Net::Server::PreForkSimple.
.PP
.Vb 6
\&    Key                 Value                   Default
\&    min_servers         \ed+                     5
\&    min_spare_servers   \ed+                     2
\&    max_spare_servers   \ed+                     10
\&    max_servers         \ed+                     50
\&    max_requests        \ed+                     1000
\&
\&    serialize           (flock|semaphore
\&                         |pipe|none)            undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file           "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead      \ed+                     30
\&    check_for_waiting   \ed+                     10
\&
\&    max_dequeue         \ed+                     undef
\&    check_for_dequeue   \ed+                     undef
\&
\&    child_communication 1                       undef
.Ve
.IP "min_servers" 4
.IX Item "min_servers"
The minimum number of servers to keep running.
.IP "min_spare_servers" 4
.IX Item "min_spare_servers"
The minimum number of servers to have waiting for requests.  Minimum
and maximum numbers should not be set to close to each other or the
server will fork and kill children too often.
.IP "max_spare_servers" 4
.IX Item "max_spare_servers"
The maximum number of servers to have waiting for requests.  See
\&\fImin_spare_servers\fR.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start.  This does not apply to
dequeue processes.
.IP "check_for_waiting" 4
.IX Item "check_for_waiting"
Seconds to wait before checking to see if we can kill off some waiting
servers.
.IP "check_for_spawn" 4
.IX Item "check_for_spawn"
Seconds between checking to see if we need to spawn more children
.IP "min_child_ttl" 4
.IX Item "min_child_ttl"
Minimum number of seconds between starting children and killing a
child process
.IP "child_communication" 4
.IX Item "child_communication"
Enable child communication to parent via unix sockets.  If set to
true, will let children write to the socket contained in
\&\f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The parent will be notified
through child_is_talking_hook where the first argument is the socket
to the child.  The child's socket is stored in
\&\f(CW$self\fR\->{'server'}\->{'children'}\->{$child_pid}\->{'sock'}.
.IP "serialize" 4
.IX Item "serialize"
See the documentation under Net::Server::PreForkSimple.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    min_spare_servers 10
\&    min_spare_servers 15
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    ### enable child communication ?
\&    # child_communication
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`min_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are enough children to fulfill \f(CW\*(C`min_servers\*(C'\fR, \f(CW\*(C`min_spare_servers\*(C'\fR,
\&\f(CW\*(C`max_spare_servers\*(C'\fR, and \f(CW\*(C`max_servers\*(C'\fR.
.SH "HOOKS"
.IX Header "HOOKS"
The PreFork server has the following hooks in addition to the hooks
provided by PreForkSimple.  See Net::Server::PreForkSimple.
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->parent_read_hook()""" 4
.el .IP "\f(CW$self\->parent_read_hook()\fR" 4
.IX Item "$self->parent_read_hook()"
This hook occurs any time that the parent reads information from the
child.  The line from the child is sent as an argument.
.ie n .IP """$self\->child_is_talking_hook()""" 4
.el .IP "\f(CW$self\->child_is_talking_hook()\fR" 4
.IX Item "$self->child_is_talking_hook()"
This hook occurs if child_communication is true and the child has
written to \f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The first argument
will be the open socket to the child.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop,
every \f(CW\*(C`check_for_waiting\*(C'\fR seconds.  The first argument is a reference
to an array of file descriptors that can be read at the moment.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreFork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the min and max_servers are
increased by 1.  If a \s-1TTOU\s0 signal is received the min max_servers are
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreFork5.16.3pm                 0100644 0001750 0001750 00000027005 12566241464 025377  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreFork 3"
.TH Net::Server::PreFork 3 "2012-05-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreFork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server and Net::Server::PreForkSimple
first.  This module is a personality, or extension, or sub class, of
the Net::Server::PreForkSimple class which is a sub class of
Net::Server.  See Net::Server::PreForkSimple.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure that at any
given time there are \f(CW\*(C`min_spare_servers\*(C'\fR available to receive a
client request, up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will
process up to \f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good
for a heavily hit site, and should scale well for most applications.
(Multi port accept is accomplished using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class and the Net::Server::PreForkSimple parent class,
Net::Server::PreFork contains several other configurable parameters.
You really should also see Net::Server::PreForkSimple.
.PP
.Vb 6
\&    Key                 Value                   Default
\&    min_servers         \ed+                     5
\&    min_spare_servers   \ed+                     2
\&    max_spare_servers   \ed+                     10
\&    max_servers         \ed+                     50
\&    max_requests        \ed+                     1000
\&
\&    serialize           (flock|semaphore|pipe)  undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file           "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead      \ed+                     30
\&    check_for_waiting   \ed+                     10
\&
\&    max_dequeue         \ed+                     undef
\&    check_for_dequeue   \ed+                     undef
\&
\&    child_communication 1                       undef
.Ve
.IP "min_servers" 4
.IX Item "min_servers"
The minimum number of servers to keep running.
.IP "min_spare_servers" 4
.IX Item "min_spare_servers"
The minimum number of servers to have waiting for requests.  Minimum
and maximum numbers should not be set to close to each other or the
server will fork and kill children too often.
.IP "max_spare_servers" 4
.IX Item "max_spare_servers"
The maximum number of servers to have waiting for requests.  See
\&\fImin_spare_servers\fR.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start.  This does not apply to
dequeue processes.
.IP "check_for_waiting" 4
.IX Item "check_for_waiting"
Seconds to wait before checking to see if we can kill off some waiting
servers.
.IP "check_for_spawn" 4
.IX Item "check_for_spawn"
Seconds between checking to see if we need to spawn more children
.IP "min_child_ttl" 4
.IX Item "min_child_ttl"
Minimum number of seconds between starting children and killing a
child process
.IP "child_communication" 4
.IX Item "child_communication"
Enable child communication to parent via unix sockets.  If set to
true, will let children write to the socket contained in
\&\f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The parent will be notified
through child_is_talking_hook where the first argument is the socket
to the child.  The child's socket is stored in
\&\f(CW$self\fR\->{'server'}\->{'children'}\->{$child_pid}\->{'sock'}.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    min_spare_servers 10
\&    min_spare_servers 15
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    ### enable child communication ?
\&    # child_communication
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`min_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are enough children to fulfill \f(CW\*(C`min_servers\*(C'\fR, \f(CW\*(C`min_spare_servers\*(C'\fR,
\&\f(CW\*(C`max_spare_servers\*(C'\fR, and \f(CW\*(C`max_servers\*(C'\fR.
.SH "HOOKS"
.IX Header "HOOKS"
The PreFork server has the following hooks in addition to the hooks
provided by PreForkSimple.  See Net::Server::PreForkSimple.
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->parent_read_hook()""" 4
.el .IP "\f(CW$self\->parent_read_hook()\fR" 4
.IX Item "$self->parent_read_hook()"
This hook occurs any time that the parent reads information from the
child.  The line from the child is sent as an argument.
.ie n .IP """$self\->child_is_talking_hook()""" 4
.el .IP "\f(CW$self\->child_is_talking_hook()\fR" 4
.IX Item "$self->child_is_talking_hook()"
This hook occurs if child_communication is true and the child has
written to \f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The first argument
will be the open socket to the child.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop,
every \f(CW\*(C`check_for_waiting\*(C'\fR seconds.  The first argument is a reference
to an array of file descriptors that can be read at the moment.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreFork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the min and max_servers are
increased by 1.  If a \s-1TTOU\s0 signal is received the min max_servers are
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreFork5.18.3pm                 0100644 0001750 0001750 00000027540 12566241464 025405  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreFork 3"
.TH Net::Server::PreFork 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreFork \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreFork);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server and Net::Server::PreForkSimple
first.  This module is a personality, or extension, or sub class, of
the Net::Server::PreForkSimple class which is a sub class of
Net::Server.  See Net::Server::PreForkSimple.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`min_servers\*(C'\fR child process.  The server will make sure that at any
given time there are \f(CW\*(C`min_spare_servers\*(C'\fR available to receive a
client request, up to \f(CW\*(C`max_servers\*(C'\fR.  Each of these children will
process up to \f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good
for a heavily hit site, and should scale well for most applications.
(Multi port accept is accomplished using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class and the Net::Server::PreForkSimple parent class,
Net::Server::PreFork contains several other configurable parameters.
You really should also see Net::Server::PreForkSimple.
.PP
.Vb 6
\&    Key                 Value                   Default
\&    min_servers         \ed+                     5
\&    min_spare_servers   \ed+                     2
\&    max_spare_servers   \ed+                     10
\&    max_servers         \ed+                     50
\&    max_requests        \ed+                     1000
\&
\&    serialize           (flock|semaphore
\&                         |pipe|none)            undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file           "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead      \ed+                     30
\&    check_for_waiting   \ed+                     10
\&
\&    max_dequeue         \ed+                     undef
\&    check_for_dequeue   \ed+                     undef
\&
\&    child_communication 1                       undef
.Ve
.IP "min_servers" 4
.IX Item "min_servers"
The minimum number of servers to keep running.
.IP "min_spare_servers" 4
.IX Item "min_spare_servers"
The minimum number of servers to have waiting for requests.  Minimum
and maximum numbers should not be set to close to each other or the
server will fork and kill children too often.
.IP "max_spare_servers" 4
.IX Item "max_spare_servers"
The maximum number of servers to have waiting for requests.  See
\&\fImin_spare_servers\fR.
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start.  This does not apply to
dequeue processes.
.IP "check_for_waiting" 4
.IX Item "check_for_waiting"
Seconds to wait before checking to see if we can kill off some waiting
servers.
.IP "check_for_spawn" 4
.IX Item "check_for_spawn"
Seconds between checking to see if we need to spawn more children
.IP "min_child_ttl" 4
.IX Item "min_child_ttl"
Minimum number of seconds between starting children and killing a
child process
.IP "child_communication" 4
.IX Item "child_communication"
Enable child communication to parent via unix sockets.  If set to
true, will let children write to the socket contained in
\&\f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The parent will be notified
through child_is_talking_hook where the first argument is the socket
to the child.  The child's socket is stored in
\&\f(CW$self\fR\->{'server'}\->{'children'}\->{$child_pid}\->{'sock'}.
.IP "serialize" 4
.IX Item "serialize"
See the documentation under Net::Server::PreForkSimple.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    min_servers   20
\&    max_servers   80
\&    min_spare_servers 10
\&    min_spare_servers 15
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    ### enable child communication ?
\&    # child_communication
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`min_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are enough children to fulfill \f(CW\*(C`min_servers\*(C'\fR, \f(CW\*(C`min_spare_servers\*(C'\fR,
\&\f(CW\*(C`max_spare_servers\*(C'\fR, and \f(CW\*(C`max_servers\*(C'\fR.
.SH "HOOKS"
.IX Header "HOOKS"
The PreFork server has the following hooks in addition to the hooks
provided by PreForkSimple.  See Net::Server::PreForkSimple.
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->parent_read_hook()""" 4
.el .IP "\f(CW$self\->parent_read_hook()\fR" 4
.IX Item "$self->parent_read_hook()"
This hook occurs any time that the parent reads information from the
child.  The line from the child is sent as an argument.
.ie n .IP """$self\->child_is_talking_hook()""" 4
.el .IP "\f(CW$self\->child_is_talking_hook()\fR" 4
.IX Item "$self->child_is_talking_hook()"
This hook occurs if child_communication is true and the child has
written to \f(CW$self\fR\->{'server'}\->{'parent_sock'}.  The first argument
will be the open socket to the child.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop,
every \f(CW\*(C`check_for_waiting\*(C'\fR seconds.  The first argument is a reference
to an array of file descriptors that can be read at the moment.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreFork server has accepted the \s-1TTIN\s0 and \s-1TTOU\s0
signals.  When a \s-1TTIN\s0 is received, the min and max_servers are
increased by 1.  If a \s-1TTOU\s0 signal is received the min max_servers are
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreForkSimple.3pm               0100644 0001750 0001750 00000027711 12566241464 026243  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreForkSimple 3"
.TH Net::Server::PreForkSimple 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreForkSimple \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreForkSimple);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`max_servers\*(C'\fR child processes.  The server will make sure that at any
given time there are always \f(CW\*(C`max_servers\*(C'\fR available to receive a
client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can keep \f(CW\*(C`max_servers\*(C'\fR processes dedicated to the
serving.  (Multi port accept defaults to using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::PreFork contains several other configurable
parameters.
.PP
.Vb 3
\&    Key               Value                   Default
\&    max_servers       \ed+                     50
\&    max_requests      \ed+                     1000
\&
\&    serialize         (flock|semaphore
\&                       |pipe|none)  undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file         "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead    \ed+                     30
\&
\&    max_dequeue       \ed+                     undef
\&    check_for_dequeue \ed+                     undef
.Ve
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start and maintain.  This does
not apply to dequeue processes.
.IP "max_requests" 4
.IX Item "max_requests"
The number of client connections to receive before a child terminates.
.IP "serialize" 4
.IX Item "serialize"
Determines whether the server serializes child connections.  Options
are undef, flock, semaphore, pipe, or none.  Default is undef.  On
multi_port servers or on servers running on Solaris, the default is
flock.  The flock option uses blocking exclusive flock on the file
specified in \fIlock_file\fR (see below).  The semaphore option uses
IPC::Semaphore (thanks to Bennett Todd) for giving some sample code.
The pipe option reads on a pipe to choose the next.  the flock option
should be the most bulletproof while the pipe option should be the
most portable.  (Flock is able to reliquish the block if the process
dies between accept on the socket and reading of the client connection
\&\- semaphore and pipe do not).  An option of none will not perform
any serialization.  If \*(L"none\*(R" is passed and there are multiple ports
then a the default serialization will be used insted of \*(L"none.\*(R"
.IP "lock_file" 4
.IX Item "lock_file"
Filename to use in flock serialized accept in order to serialize the
accept sequece between the children.  This will default to a generated
temporary filename.  If default value is used the lock_file will be
removed when the server closes.
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Seconds to wait before checking to see if a child died without letting
the parent know.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  The run_dequeue
hook must be defined when using this setting.  It is intended to use
the dequeue process to take care of items such as mail queues.  If a
value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    max_servers   80
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`max_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are always \f(CW\*(C`max_servers\*(C'\fR running.
.SH "HOOKS"
.IX Header "HOOKS"
The PreForkSimple server has the following hooks in addition to the
hooks provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook takes place immeditately after the child process forks from
the parent and before the child begins accepting connections.  It is
intended for any addiotional chrooting or other security measures.  It
is suggested that all perl modules be used by this point, so that the
most shared memory possible is used.
.ie n .IP """$self\->child_finish_hook()""" 4
.el .IP "\f(CW$self\->child_finish_hook()\fR" 4
.IX Item "$self->child_finish_hook()"
This hook takes place immediately before the child tells the parent
that it is exiting.  It is intended for saving out logged information
or other general cleanup.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreForkSimple server has accepted the \s-1TTIN\s0
and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers is
increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreForkSimple5.16.3pm           0100644 0001750 0001750 00000027030 12566241464 026547  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreForkSimple 3"
.TH Net::Server::PreForkSimple 3 "2012-05-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreForkSimple \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreForkSimple);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`max_servers\*(C'\fR child processes.  The server will make sure that at any
given time there are always \f(CW\*(C`max_servers\*(C'\fR available to receive a
client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can keep \f(CW\*(C`max_servers\*(C'\fR processes dedicated to the
serving.  (Multi port accept defaults to using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::PreFork contains several other configurable
parameters.
.PP
.Vb 3
\&    Key               Value                   Default
\&    max_servers       \ed+                     50
\&    max_requests      \ed+                     1000
\&
\&    serialize         (flock|semaphore|pipe)  undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file         "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead    \ed+                     30
\&
\&    max_dequeue       \ed+                     undef
\&    check_for_dequeue \ed+                     undef
.Ve
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start and maintain.  This does
not apply to dequeue processes.
.IP "max_requests" 4
.IX Item "max_requests"
The number of client connections to receive before a child terminates.
.IP "serialize" 4
.IX Item "serialize"
Determines whether the server serializes child connections.  Options
are undef, flock, semaphore, or pipe.  Default is undef.  On
multi_port servers or on servers running on Solaris, the default is
flock.  The flock option uses blocking exclusive flock on the file
specified in \fIlock_file\fR (see below).  The semaphore option uses
IPC::Semaphore (thanks to Bennett Todd) for giving some sample code.
The pipe option reads on a pipe to choose the next.  the flock option
should be the most bulletproof while the pipe option should be the
most portable.  (Flock is able to reliquish the block if the process
dies between accept on the socket and reading of the client connection
\&\- semaphore and pipe do not)
.IP "lock_file" 4
.IX Item "lock_file"
Filename to use in flock serialized accept in order to serialize the
accept sequece between the children.  This will default to a generated
temporary filename.  If default value is used the lock_file will be
removed when the server closes.
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Seconds to wait before checking to see if a child died without letting
the parent know.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  The run_dequeue
hook must be defined when using this setting.  It is intended to use
the dequeue process to take care of items such as mail queues.  If a
value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    max_servers   80
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`max_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are always \f(CW\*(C`max_servers\*(C'\fR running.
.SH "HOOKS"
.IX Header "HOOKS"
The PreForkSimple server has the following hooks in addition to the
hooks provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook takes place immeditately after the child process forks from
the parent and before the child begins accepting connections.  It is
intended for any addiotional chrooting or other security measures.  It
is suggested that all perl modules be used by this point, so that the
most shared memory possible is used.
.ie n .IP """$self\->child_finish_hook()""" 4
.el .IP "\f(CW$self\->child_finish_hook()\fR" 4
.IX Item "$self->child_finish_hook()"
This hook takes place immediately before the child tells the parent
that it is exiting.  It is intended for saving out logged information
or other general cleanup.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjuction with the check_for_dequeue
setting.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreForkSimple server has accepted the \s-1TTIN\s0
and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers is
increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::PreForkSimple5.18.3pm           0100644 0001750 0001750 00000027711 12566241464 026557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::PreForkSimple 3"
.TH Net::Server::PreForkSimple 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::PreForkSimple \- Net::Server personality
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::PreForkSimple);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then forks
\&\f(CW\*(C`max_servers\*(C'\fR child processes.  The server will make sure that at any
given time there are always \f(CW\*(C`max_servers\*(C'\fR available to receive a
client request.  Each of these children will process up to
\&\f(CW\*(C`max_requests\*(C'\fR client connections.  This type is good for a heavily
hit site that can keep \f(CW\*(C`max_servers\*(C'\fR processes dedicated to the
serving.  (Multi port accept defaults to using flock to serialize the
children).
.PP
At this time, it does not appear that this module will pass tests on
Win32 systems.  Any ideas or patches for making the tests pass would
be welcome.
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
Please see the sample listed in Net::Server.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server base
class, Net::Server::PreFork contains several other configurable
parameters.
.PP
.Vb 3
\&    Key               Value                   Default
\&    max_servers       \ed+                     50
\&    max_requests      \ed+                     1000
\&
\&    serialize         (flock|semaphore
\&                       |pipe|none)  undef
\&    # serialize defaults to flock on multi_port or on Solaris
\&    lock_file         "filename"              File::Temp::tempfile or POSIX::tmpnam
\&
\&    check_for_dead    \ed+                     30
\&
\&    max_dequeue       \ed+                     undef
\&    check_for_dequeue \ed+                     undef
.Ve
.IP "max_servers" 4
.IX Item "max_servers"
The maximum number of child servers to start and maintain.  This does
not apply to dequeue processes.
.IP "max_requests" 4
.IX Item "max_requests"
The number of client connections to receive before a child terminates.
.IP "serialize" 4
.IX Item "serialize"
Determines whether the server serializes child connections.  Options
are undef, flock, semaphore, pipe, or none.  Default is undef.  On
multi_port servers or on servers running on Solaris, the default is
flock.  The flock option uses blocking exclusive flock on the file
specified in \fIlock_file\fR (see below).  The semaphore option uses
IPC::Semaphore (thanks to Bennett Todd) for giving some sample code.
The pipe option reads on a pipe to choose the next.  the flock option
should be the most bulletproof while the pipe option should be the
most portable.  (Flock is able to reliquish the block if the process
dies between accept on the socket and reading of the client connection
\&\- semaphore and pipe do not).  An option of none will not perform
any serialization.  If \*(L"none\*(R" is passed and there are multiple ports
then a the default serialization will be used insted of \*(L"none.\*(R"
.IP "lock_file" 4
.IX Item "lock_file"
Filename to use in flock serialized accept in order to serialize the
accept sequece between the children.  This will default to a generated
temporary filename.  If default value is used the lock_file will be
removed when the server closes.
.IP "check_for_dead" 4
.IX Item "check_for_dead"
Seconds to wait before checking to see if a child died without letting
the parent know.
.IP "max_dequeue" 4
.IX Item "max_dequeue"
The maximum number of dequeue processes to start.  If a value of zero
or undef is given, no dequeue processes will be started.  The number
of running dequeue processes will be checked by the check_for_dead
variable.
.IP "check_for_dequeue" 4
.IX Item "check_for_dequeue"
Seconds to wait before forking off a dequeue process.  The run_dequeue
hook must be defined when using this setting.  It is intended to use
the dequeue process to take care of items such as mail queues.  If a
value of undef is given, no dequeue processes will be started.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
\&\f(CW\*(C`Net::Server::PreFork\*(C'\fR allows for the use of a configuration file to
read in server parameters.  The format of this conf file is simple key
value pairs.  Comments and white space are ignored.
.PP
.Vb 1
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    ### server information
\&    max_servers   80
\&
\&    max_requests  1000
\&
\&    ### user and group to become
\&    user        somebody
\&    group       everybody
\&
\&    ### logging ?
\&    log_file    /var/log/server.log
\&    log_level   3
\&    pid_file    /tmp/server.pid
\&
\&    ### access control
\&    allow       .+\e.(net|com)
\&    allow       domain\e.com
\&    deny        a.+
\&
\&    ### background the process?
\&    background  1
\&
\&    ### ports to bind
\&    host        127.0.0.1
\&    port        localhost:20204
\&    port        20205
\&
\&    ### reverse lookups ?
\&    # reverse_lookups on
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\- file test.conf \-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the loop phase.  At this point
\&\f(CW\*(C`max_servers\*(C'\fR are forked and wait for connections.  When a child
accepts a connection, finishs processing a client, or exits, it relays
that information to the parent, which keeps track and makes sure there
are always \f(CW\*(C`max_servers\*(C'\fR running.
.SH "HOOKS"
.IX Header "HOOKS"
The PreForkSimple server has the following hooks in addition to the
hooks provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->run_n_children_hook()""" 4
.el .IP "\f(CW$self\->run_n_children_hook()\fR" 4
.IX Item "$self->run_n_children_hook()"
This hook occurs at the top of run_n_children which is called each
time the server goes to start more child processes.  This gives the
parent to do a little of its own accountting (as desired).  Idea for
this hook came from James FitzGibbon.
.ie n .IP """$self\->child_init_hook()""" 4
.el .IP "\f(CW$self\->child_init_hook()\fR" 4
.IX Item "$self->child_init_hook()"
This hook takes place immeditately after the child process forks from
the parent and before the child begins accepting connections.  It is
intended for any addiotional chrooting or other security measures.  It
is suggested that all perl modules be used by this point, so that the
most shared memory possible is used.
.ie n .IP """$self\->child_finish_hook()""" 4
.el .IP "\f(CW$self\->child_finish_hook()\fR" 4
.IX Item "$self->child_finish_hook()"
This hook takes place immediately before the child tells the parent
that it is exiting.  It is intended for saving out logged information
or other general cleanup.
.ie n .IP """$self\->run_dequeue()""" 4
.el .IP "\f(CW$self\->run_dequeue()\fR" 4
.IX Item "$self->run_dequeue()"
This hook only gets called in conjunction with the check_for_dequeue
setting.
.ie n .IP """$self\->idle_loop_hook()""" 4
.el .IP "\f(CW$self\->idle_loop_hook()\fR" 4
.IX Item "$self->idle_loop_hook()"
This hook is called in every pass through the main process wait loop.
.SH "HOT DEPLOY"
.IX Header "HOT DEPLOY"
Since version 2.000, the PreForkSimple server has accepted the \s-1TTIN\s0
and \s-1TTOU\s0 signals.  When a \s-1TTIN\s0 is received, the max_servers is
increased by 1.  If a \s-1TTOU\s0 signal is received the max_servers is
decreased by 1.  This allows for adjusting the number of handling
processes without having to restart the server.
.SH "BUGS"
.IX Header "BUGS"
Tests don't seem to work on Win32.  Any ideas or patches would be
welcome.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Proto.3pm                       0100644 0001750 0001750 00000056235 12566241464 024627  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Proto 3"
.TH Net::Server::Proto 3 "2013-01-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Proto \- Net::Server Protocol compatibility layer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, all available socket types will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
\&
\&    # Net::Server::Proto and its accompanying modules are not
\&    # intended to be used outside the scope of Net::Server.
\&
\&    # That being said, here is how you use them.  This is
\&    # only intended for anybody wishing to extend the
\&    # protocols to include some other set (ie maybe a
\&    # database connection protocol)
\&
\&    use Net::Server::Proto;
\&
\&    my @info = Net::Server::Proto\->parse_info(
\&        $port,            # port to connect to
\&        $default_host,    # host to use if none found in port
\&        $default_proto,   # proto to use if none found in port
\&        $default_ipv,     # default of IPv6 or IPv4 if none found in port
\&        $server_obj,      # Net::Server object
\&    );
\&
\&    my @raw_info = Net::Server::Proto\->get_addr_info($host, $port, $proto);
\&    # returns arrayref of resolved ips, ports, and ipv values
\&
\&    my $sock = Net::Server::Proto\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => $ipv, # * (IPv*) if false (default false)
\&    }, $server);
\&
\&    # Net::Server::Proto will attempt to interface with
\&    # sub modules named similar to Net::Server::Proto::TCP
\&    # Individual sub modules will be loaded by
\&    # Net::Server::Proto as they are needed.
\&
\&    use Net::Server::Proto::TCP; # or UDP or UNIX etc
\&
\&    # Return an object which is a sub class of IO::Socket
\&    # At this point the object is not connected.
\&    # The method can gather any other information that it
\&    # needs from the server object.
\&    my $sock = Net::Server::Proto::TCP\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => 6, # IPv6 \- default is * \- can also be \*(Aq4\*(Aq
\&    }, $server);
\&
\&
\&    # Log that a connection is about to occur.
\&    # Use the facilities of the passed Net::Server object.
\&    $sock\->log_connect( $server );
\&
\&    # Actually bind to port or socket file.  This
\&    # is typically done by calling the configure method.
\&    $sock\->connect();
\&
\&    # Allow for rebinding to an already open fileno.
\&    # Typically will just do an fdopen.
\&    $sock\->reconnect();
\&
\&    ### Return a unique identifying string for this sock that
\&    # can be used when reconnecting.
\&    my $str = $sock\->hup_string();
\&
\&    # Return the proto that is being used by this module.
\&    my $proto = $sock\->NS_proto();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Server::Proto is an intermediate module which returns IO::Socket
style objects blessed into its own set of classes (ie
Net::Server::Proto::TCP, Net::Server::Proto::UNIX).
.PP
Only three or four protocols come bundled with Net::Server.  \s-1TCP, UDP,
UNIX, UNIXDGRAM,\s0 and \s-1SSLEAY.  TCP\s0 is an implementation of \s-1SOCK_STREAM\s0
across an \s-1INET\s0 socket.  \s-1UDP\s0 is an implementation of \s-1SOCK_DGRAM\s0 across
an \s-1INET\s0 socket.  \s-1UNIX\s0 uses a unix style socket file with the
\&\s-1SOCK_STREAM\s0 protocol.  \s-1UNIXGRAM\s0 uses a unix style socket file with the
\&\s-1SOCK_DGRAM\s0 protocol.  \s-1SSLEAY\s0 is actually just a layer on top of \s-1TCP\s0
but uses Net::SSLeay to read and write from the stream.
.PP
The protocol that is passed to Net::Server can be the name of another
module which contains the protocol bindings.  If a protocol of
MyServer::MyTCP was passed, the socket would be blessed into that
class.  If Net::Server::Proto::TCP was passed, it would get that
class.  If a bareword, such as tcp, udp, unix, unixdgram or ssleay, is
passed, the word is uppercased, and post pended to
\&\*(L"Net::Server::Proto::\*(R" (ie tcp = Net::Server::Proto::TCP).
.SH "METHODS"
.IX Header "METHODS"
Protocol names used by the Net::Server::Proto should be sub classes of
IO::Socket.  These classes should also contain, as a minimum, the
following methods should be provided:
.IP "object" 4
.IX Item "object"
Return an object which is a sub class of IO::Socket At this point the
object is not connected.  The method can gather any other information
that it needs from the server object.  Arguments are default_host,
port, and a Net::Server style server object.
.IP "log_connect" 4
.IX Item "log_connect"
Log that a connection is about to occur.  Use the facilities of the
passed Net::Server object.  This should be an informative string
explaining which properties are being used.
.IP "connect" 4
.IX Item "connect"
Actually bind to port or socket file.  This is typically done
internally by calling the configure method of the IO::Socket super
class.
.IP "reconnect" 4
.IX Item "reconnect"
Allow for rebinding to an already open fileno.  Typically will just do
an fdopen using the IO::Socket super class.
.IP "hup_string" 4
.IX Item "hup_string"
Return a unique identifying string for this sock that can be used when
reconnecting.  This is done to allow information including the file
descriptor of the open sockets to be passed via \f(CW%ENV\fR during an exec.
This string should always be the same based upon the configuration
parameters.
.IP "NS_port" 4
.IX Item "NS_port"
Net::Server protocol.  Return the port that is being used by this
module.  If the underlying type is \s-1UNIX\s0 then port will actually be
the path to the unix socket file.
.IP "NS_host" 4
.IX Item "NS_host"
Net::Server protocol.  Return the protocol that is being used by this
module.  This does not have to be a registered or known protocol.
.IP "NS_proto" 4
.IX Item "NS_proto"
Net::Server protocol.  Return the protocol that is being used by this
module.  This does not have to be a registered or known protocol.
.IP "show" 4
.IX Item "show"
Similar to log_connect, but simply shows a listing of which
properties were found.  Can be used at any time.
.SH "HOST"
.IX Header "HOST"
The hostname may be either blank, '*', be an IPv4 address, an IPv6 address,
a bare hostname, or a hostname with IPv* specifications.
.PP
.Vb 1
\&    host => "127.0.0.1",  # an IPv4 address
\&
\&    host => "::1",        # an IPv6 address
\&
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (default IPv* \- IPv4 and/or IPv6)
\&
\&    host => \*(Aqlocalhost/IPv*\*(Aq,  # same
\&
\&    ipv  => \*(Aq*\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # same
\&
\&    ipv  => 6,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (IPv6)
\&
\&    ipv  => \*(AqIPv4 IPv6\*(Aq,
\&    host => \*(Aqlocalhost\*(Aq,  # addresses returned by localhost (requires IPv6 and IPv4)
\&
\&
\&    host => \*(Aq*\*(Aq,          # any local interfaces (default IPv*)
\&
\&    ipv  => \*(Aq*\*(Aq,
\&    host => \*(Aq*\*(Aq,          # any local interfaces (any IPv6 or IPv4)
\&
\&    host => \*(Aq*/IPv*\*(Aq,     # same
.Ve
.SH "IPV"
.IX Header "IPV"
In addition to being able to specify \s-1IPV\s0 as a separate parameter, ipv may
also be passed as a part of the host, as part of the port, as part of the protocol
or may be specified via \f(CW$ENV\fR{'\s-1IPV\s0'}.  The order of precidence is as follows:
.PP
.Vb 7
\&     1) Explicit IPv4 or IPv6 address \- wins
\&     2) ipv specified in port
\&     3) ipv specified in host
\&     4) ipv specified in proto
\&     5) ipv specified in default settings
\&     6) ipv specified in $ENV{\*(AqIPV\*(Aq}
\&     7) default to IPv*
.Ve
.SH "PORT"
.IX Header "PORT"
The port is the most important argument passed to the sub
module classes and to Net::Server::Proto itself.  For tcp,
udp, and ssleay style ports, the form is generally host:port/protocol,
[host]:port/protocol, host|port|protocol, host/port, or port.
If \fIhost\fR is a numerical IPv6 address it should be enclosed in square
brackets to avoid ambiguity in parsing a port number, e.g.: \*(L"[::1]:80\*(R".
Separating with spaces, commas, or pipes is also allowed, e.g. \*(L"::1, 80\*(R".
For unix sockets the form is generally socket_file|unix or socket_file.
.PP
To help overcome parsing ambiguity, it is also possible to pass port as
a hashref (or as an array of hashrefs) of information such as:
.PP
.Vb 6
\&    port => {
\&        host  => "localhost",
\&        ipv   => 6, # could also pass IPv6 (* is default)
\&        port  => 20203,
\&        proto => \*(Aqtcp\*(Aq,
\&    }
.Ve
.PP
If a hashref does not include host, ipv, or proto \- it will use the default
value supplied by the general configuration.
.PP
A socket protocol family \s-1PF_INET\s0 or \s-1PF_INET6\s0 is derived from a specified
address family of the binding address. A \s-1PF_INET\s0 socket can only accept
IPv4 connections. A \s-1PF_INET6\s0 socket accepts IPv6 connections, but may also
accept IPv4 connections, depending on \s-1OS\s0 and its settings. For example,
on FreeBSD systems setting a sysctl net.inet6.ip6.v6only to 0 will allow
IPv4 connections to a \s-1PF_INET6\s0 socket.  By default on linux, binding to
host [::] will accept IPv4 or IPv6 connections.
.PP
The Net::Server::Proto::object method returns a list of objects corresponding
to created sockets. For Unix and \s-1INET\s0 sockets the list typically contains
just one element, but may return multiple objects when multiple protocol
families are allowed or when a host name resolves to multiple local
binding addresses.  This is particularly true when an ipv value of '*' is
passed in allowing hostname resolution.
.PP
You can see what Net::Server::Proto parsed out by looking at
the logs to see what log_connect said.  You could also include
a post_bind_hook similar to the following to debug what happened:
.PP
.Vb 6
\&    sub post_bind_hook {
\&        my $self = shift;
\&        foreach my $sock ( @{ $self\->{server}\->{sock} } ){
\&            $self\->log(2,$sock\->show);
\&        }
\&    }
.Ve
.PP
Rather than try to explain further, please look at the following
examples:
.PP
.Vb 1
\&    # example 1 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = undef;
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqdefault\-domain.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => *, # IPv*
\&    # };
\&
\&    # example 2 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => *,
\&    # };
\&
\&    # example 3 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/udp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqudp\*(Aq, # will use Net::Server::Proto::UDP
\&    #     ipv   => *,
\&    # };
\&
\&    # example 4 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/Net::Server::Proto::UDP";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "TCP";
\&    $def_ipv   = 4;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(AqNet::Server::Proto::UDP\*(Aq,
\&    #     ipv   => 4,
\&    # };
\&
\&    # example 5 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "someother.com:20203/MyObject::TCP";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(AqMyObject::TCP\*(Aq,
\&    # };
\&
\&    # example 6 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|unix";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIX
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 7 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|unixdgram";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunixdgram\*(Aq, # will use Net::Server::Proto::UNIXDGRAM
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 8 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|SOCK_STREAM|unix"; # legacy
\&    $def_host  = "";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIX
\&    #     unix_type => \*(AqSOCK_STREAM\*(Aq,
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 9 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port      = "/tmp/mysock.file|SOCK_DGRAM|unix"; # legacy
\&    $def_host  = "";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    #     port  => \*(Aq/tmp/mysock.file\*(Aq, # not really a port
\&    #     proto => \*(Aqunix\*(Aq, # will use Net::Server::Proto::UNIXDGRAM
\&    #     unix_type => \*(AqSOCK_DGRAM\*(Aq,
\&    #     ipv   => \*(Aq*\*(Aq, # irrelevant for UNIX socket
\&    # };
\&
\&    # example 10 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "someother.com:20203/ssleay";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqssleay\*(Aq, # will use Net::Server::Proto::SSLEAY
\&    #     ipv   => *,
\&    # };
\&
\&    # example 11 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[::1]:20203 ipv6 tcp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # };
\&
\&    # example 12 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[::1]:20203 tcp";
\&    $def_host  = "default\-domain.com/IPv6";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # };
\&
\&    # example 13 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $port = "[someother.com]:20203 ipv6 ipv4 tcp";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4,
\&    # }, {
\&    #     host  => \*(Aqsomeother.com\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6,
\&    # });
\&
\&    # example 14 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # }, {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6, # IPv6
\&    # });
\&
\&    # example 15 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com IPv*";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # }, {
\&    #     host  => \*(Aq::1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 6, # IPv6
\&    # });
\&
\&    # example 16 #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    # depending upon your configuration
\&    $ENV{\*(AqIPV\*(Aq} = \*(Aq4\*(Aq;
\&    $port = "localhost:20203";
\&    $def_host  = "default\-domain.com";
\&    $def_proto = "tcp";
\&    $def_ipv   = undef;
\&    @info = Net::Server::Proto\->parse_info($port,$def_host,$def_proto,$def_ipv);
\&    # @info = ({
\&    #     host  => \*(Aq127.0.0.1\*(Aq,
\&    #     port  => 20203,
\&    #     proto => \*(Aqtcp\*(Aq, # will use Net::Server::Proto::TCP
\&    #     ipv   => 4, # IPv4
\&    # });
.Ve
.SH "LICENCE"
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Net::Server::Proto5.16.3pm                   0100644 0001750 0001750 00000055752 12566241464 025144  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::Proto 3"
.TH Net::Server::Proto 3 "2012-06-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::Proto \- Net::Server Protocol compatibility layer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    NOTE: beginning in Net::Server 2.005, the default value for
\&          ipv is IPv* meaning that if no host is passed, or
\&          a hostname is past, all available socket types will be
\&          bound.  You can force IPv4 only by adding an ipv => 4
\&          configuration in any of the half dozen ways we let you
\&          specify it.
\&
\&    # Net::Server::Proto and its accompanying modules are not
\&    # intended to be used outside the scope of Net::Server.
\&
\&    # That being said, here is how you use them.  This is
\&    # only intended for anybody wishing to extend the
\&    # protocols to include some other set (ie maybe a
\&    # database connection protocol)
\&
\&    use Net::Server::Proto;
\&
\&    my @info = Net::Server::Proto\->parse_info(
\&        $port,            # port to connect to
\&        $default_host,    # host to use if none found in port
\&        $default_proto,   # proto to use if none found in port
\&        $default_ipv,     # default of IPv6 or IPv4 if none found in port
\&        $server_obj,      # Net::Server object
\&    );
\&
\&    my @raw_info = Net::Server::Proto\->get_addr_info($host, $port, $proto);
\&    # returns arrayref of resolved ips, ports, and ipv values
\&
\&    my $sock = Net::Server::Proto\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => $ipv, # * (IPv*) if false (default false)
\&    }, $server);
\&
\&    # Net::Server::Proto will attempt to interface with
\&    # sub modules named similar to Net::Server::Proto::TCP
\&    # Individual sub modules will be loaded by
\&    # Net::Server::Proto as they are needed.
\&
\&    use Net::Server::Proto::TCP; # or UDP or UNIX etc
\&
\&    # Return an object which is a sub class of IO::Socket
\&    # At this point the object is not connected.
\&    # The method can gather any other information that it
\&    # needs from the server object.
\&    my $sock = Net::Server::Proto::TCP\->object({
\&        port  => $port,
\&        host  => $host,
\&        proto => $proto,
\&        ipv   => 6, # IPv6 \- default is * \- can also be \*(Aq4\*(Aq
\&    }, $server);
\&
\&
\&    # Log that a connection is about to occur.
\&    # Use the facilities of the passed Net::Server object.
\&    $sock\->log_connect( $server );
\&
\&    # Actually bind to port or socket file.  This
\&    # is typically done by calling the configure method.
\&    $sock\->connect();
\&
\&    # Allow for rebinding to an already open fileno.
\&    # Typically will just do an fdopen.
\&    $sock\->reconnect();
\&
\&    ### Return a unique identifying string for this sock that
\&    # can be used when reconnecting.
\&    my $str = $sock\->hup_string();
\&
\&    # Return the proto that is being used by this module.
\&    my $proto = $sock\->NS_proto();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Server::Proto is an intermediate module which returns IO::Socket
style objects blessed into its own set of classes (ie
Net::Server::Proto::TCP, Net::Server::Proto::UNIX).
.PP
Only three or four protocols come bundled with Net::Server.  \s-1TCP\s0, \s-1UDP\s0,
\&\s-1UNIX\s0, \s-1UNIXDGRAM\s0, and \s-1SSLEAY\s0.  \s-1TCP\s0 is an implementation of \s-1SOCK_STREA