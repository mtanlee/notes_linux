˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
â˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜ºâ˜º
`

var gettysburg = "  Four score and seven years ago our fathers brought forth on\n" +
	"this continent, a new nation, conceived in Liberty, and dedicated\n" +
	"to the proposition that all men are created equal.\n" +
	"  Now we are engaged in a great Civil War, testing whether that\n" +
	"nation, or any nation so conceived and so dedicated, can long\n" +
	"endure.\n" +
	"  We are met on a great battle-field of that war.\n" +
	"  We have come to dedicate a portion of that field, as a final\n" +
	"resting place for those who here gave their lives that that\n" +
	"nation might live.  It is altogether fitting and proper that\n" +
	"we should do this.\n" +
	"  But, in a larger sense, we can not dedicate â€” we can not\n" +
	"consecrate â€” we can not hallow â€” this ground.\n" +
	"  The brave men, living and dead, who struggled here, have\n" +
	"consecrated it, far above our poor power to add or detract.\n" +
	"The world will little note, nor long remember what we say here,\n" +
	"but it can never forget what they did here.\n" +
	"  It is for us the living, rather, to be dedicated here to the\n" +
	"unfinished work which they who fought here have thus far so\n" +
	"nobly advanced.  It is rather for us to be here dedicated to\n" +
	"the great task remaining before us â€” that from these honored\n" +
	"dead we take increased devotion to that cause for which they\n" +
	"gave the last full measure of devotion â€”\n" +
	"  that we here highly resolve that these dead shall not have\n" +
	"died in vain â€” that this nation, under God, shall have a new\n" +
	"birth of freedom â€” and that government of the people, by the\n" +
	"people, for the people, shall not perish from this earth.\n" +
	"\n" +
	"Abraham Lincoln, November 19, 1863, Gettysburg, Pennsylvania\n"

func main() {
	m := md5.New()
	io.WriteString(m, data)
	hash := fmt.Sprintf("%x", m.Sum(nil))
	if hash != "525f06bc62a65017cd2217d7584e5920" {
		println("BUG a", hash)
		return
	}

	m = md5.New()
	io.WriteString(m, gettysburg)
	hash = fmt.Sprintf("%x", m.Sum(nil))
	if hash != "d7ec5d9d47a4d166091e8d9ebd7ea0aa" {
		println("BUG gettysburg", hash)
		println(len(gettysburg))
		fmt.Println(gettysburg)
		return
	}

}
                                                                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug258.go                                                               0100644 0000000 0000000 00000001010 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "math"

func f() float64 {
	math.Pow(2, 2)
	return 1
}

func main() {
	for i := 0; i < 10; i++ {
		// 386 float register bug used to load constant before call
		if -5 < f() {
		} else {
			println("BUG 1")
			return
		}
		if f() > -7 {
		} else {
			println("BUG 2")
		}
		
		if math.Pow(2, 3) != 8 {
			println("BUG 3")
		}
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug259.go                                                               0100644 0000000 0000000 00000000450 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

var x = uint32(0x01020304)
var y = [...]uint32{1,2,3,4,5}

func main() {
	fmt.Sprint(y[byte(x)])
}
                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug260.go                                                               0100644 0000000 0000000 00000002463 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

// Test that structures pack densely, according to the alignment of the largest field.

package main

import (
	"fmt"
	"os"
	"strconv"
)

type T1 struct {
	x uint8
}
type T2 struct {
	x uint16
}
type T4 struct {
	x uint32
}

func main() {
	report := len(os.Args) > 1
	status := 0
	var b1 [10]T1
	a0, _ := strconv.ParseUint(fmt.Sprintf("%p", &b1[0])[2:], 16, 64)
	a1, _ := strconv.ParseUint(fmt.Sprintf("%p", &b1[1])[2:], 16, 64)
	if a1 != a0+1 {
		fmt.Println("FAIL")
		if report {
			fmt.Println("alignment should be 1, is", a1-a0)
		}
		status = 1
	}
	var b2 [10]T2
	a0, _ = strconv.ParseUint(fmt.Sprintf("%p", &b2[0])[2:], 16, 64)
	a1, _ = strconv.ParseUint(fmt.Sprintf("%p", &b2[1])[2:], 16, 64)
	if a1 != a0+2 {
		if status == 0 {
			fmt.Println("FAIL")
			status = 1
		}
		if report {
			fmt.Println("alignment should be 2, is", a1-a0)
		}
	}
	var b4 [10]T4
	a0, _ = strconv.ParseUint(fmt.Sprintf("%p", &b4[0])[2:], 16, 64)
	a1, _ = strconv.ParseUint(fmt.Sprintf("%p", &b4[1])[2:], 16, 64)
	if a1 != a0+4 {
		if status == 0 {
			fmt.Println("FAIL")
			status = 1
		}
		if report {
			fmt.Println("alignment should be 4, is", a1-a0)
		}
	}
	os.Exit(status)
}
                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug261.go                                                               0100644 0000000 0000000 00000000567 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var n int

func f() int {
	n++
	return n
}

func main() {
	x := []int{0,1,2,3,4,5,6,7,8,9,10}
	n = 5
	y := x[f():f()]
	if len(y) != 1 || y[0] != 6 {
		println("BUG bug261", len(y), y[0])
	}
}
                                                                                                                                         usr/local/go/test/fixedbugs/bug262.go                                                               0100644 0000000 0000000 00000001467 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"errors"
	"strconv"
)

var trace string

func f() string {
	trace += "f"
	return "abc"
}

func g() *error {
	trace += "g"
	var x error
	return &x
}

func h() string {
	trace += "h"
	return "123"
}

func i() *int {
	trace += "i"
	var i int
	return &i
}

func main() {
	m := make(map[string]int)
	m[f()], *g() = strconv.Atoi(h())
	if m["abc"] != 123 || trace != "fgh" {
		println("BUG", m["abc"], trace)
		panic("fail")
	}
	mm := make(map[string]error)
	trace = ""
	mm["abc"] = errors.New("invalid")
	*i(), mm[f()] = strconv.Atoi(h())
	if mm["abc"] != nil || trace != "ifh" {
		println("BUG1", mm["abc"], trace)
		panic("fail")
	}
}
                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug263.go                                                               0100644 0000000 0000000 00000000520 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	data := make(map[int]string, 1)
	data[0] = "hello, "
	data[0] += "world!"
	if data[0] != "hello, world!" {
		panic("BUG: " + data[0])
	}
}
                                                                                                                                                                                usr/local/go/test/fixedbugs/bug264.go                                                               0100644 0000000 0000000 00000001315 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for https://golang.org/issue/692

package main

var fooCount = 0
var barCount = 0
var balCount = 0

func foo() (int, int) {
	fooCount++
	return 0, 0
}

func bar() (int, int) {
	barCount++
	return 0, 0
}

func bal() (int, int) {
	balCount++
	return 0, 0
}

var a, b = foo() // foo is called once
var c, _ = bar() // bar is called twice
var _, _ = bal() // bal is called twice

func main() {
	if fooCount != 1 {
		panic("fooCount != 1")
	}
	if barCount != 1 {
		panic("barCount != 1")
	}
	if balCount != 1 {
		panic("balCount != 1")
	}
}
                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/bug265.go                                                               0100644 0000000 0000000 00000000515 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for https://golang.org/issue/700

package main

import "os"

func f() (e int) {
	_ = &e
	return 999
}

func main() {
	if f() != 999 {
		os.Exit(1)
	}
}
                                                                                                                                                                                   usr/local/go/test/fixedbugs/bug266.go                                                               0100644 0000000 0000000 00000000554 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func f() int {
	defer func() {
		recover()
	}()
	panic("oops")
}

func g() int {	
	return 12345
}

func main() {
	g()	// leave 12345 on stack
	x := f()
	if x != 0 {
		panic(x)
	}
}
                                                                                                                                                    usr/local/go/test/fixedbugs/bug267.go                                                               0100644 0000000 0000000 00000000570 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package bug267

type T []int

var a []bool

func _() {
	if a[T{42}[0]] {
	}
	// if (a[T{42}[0]]) {}  // this compiles
}

/*
6g bugs/bug267.go
bugs/bug267.go:14: syntax error: unexpected {, expecting :
*/
                                                                                                                                        usr/local/go/test/fixedbugs/bug269.go                                                               0100644 0000000 0000000 00000000521 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/749

package main

func f() (ok bool) { return false }

func main() {
	var i interface{}
	i = f
	_ = i.(func()bool)
	_ = i.(func()(bool))
}
                                                                                                                                                                               usr/local/go/test/fixedbugs/bug271.go                                                               0100644 0000000 0000000 00000000557 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/662

package main

import "fmt"

func f() (int, int) { return 1, 2 }

func main() {
	s := fmt.Sprint(f())
	if s != "1 2" {	// with bug, was "{1 2}"
		println("BUG")
	}
}
                                                                                                                                                 usr/local/go/test/fixedbugs/bug272.go                                                               0100644 0000000 0000000 00000000630 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/589

package main

func main() {	
	n := int64(100)
	x := make([]int, n)
	x[99] = 234;	
	z := x[n-1]
	if z != 234 {
		println("BUG")
	}
	n |= 1<<32
	defer func() {
		recover()
	}()
	z = x[n-1]
	println("BUG2")
}
                                                                                                        usr/local/go/test/fixedbugs/bug273.go                                                               0100644 0000000 0000000 00000002625 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/589

package main

var bug = false

var minus1 = -1
var five = 5
var big int64 = 10 | 1<<32

type block [1<<19]byte

var g1 []block

func shouldfail(f func(), desc string) {
	defer func() { recover() }()
	f()
	if !bug {
		println("BUG")
		bug = true
	}
	println("didn't crash: ", desc)
}

func badlen() {
	g1 = make([]block, minus1)
}

func biglen() {
	g1 = make([]block, big)
}

func badcap() {
	g1 = make([]block, 10, minus1)
}

func badcap1() {
	g1 = make([]block, 10, five)
}

func bigcap() {
	g1 = make([]block, 10, big)
}

var g3 map[block]block
func badmapcap() {
	g3 = make(map[block]block, minus1)
}

func bigmapcap() {
	g3 = make(map[block]block, big)
}

type cblock [1<<16-1]byte

var g4 chan cblock
func badchancap() {
	g4 = make(chan cblock, minus1)
}

func bigchancap() {
	g4 = make(chan cblock, big)
}

func overflowchan() {
	g4 = make(chan cblock, 1<<30)
}

func main() {
	shouldfail(badlen, "badlen")
	shouldfail(biglen, "biglen")
	shouldfail(badcap, "badcap")
	shouldfail(badcap1, "badcap1")
	shouldfail(bigcap, "bigcap")
	shouldfail(badmapcap, "badmapcap")
	shouldfail(bigmapcap, "bigmapcap")
	shouldfail(badchancap, "badchancap")
	shouldfail(bigchancap, "bigchancap")
	shouldfail(overflowchan, "overflowchan")
}
                                                                                                           usr/local/go/test/fixedbugs/bug274.go                                                               0100644 0000000 0000000 00000001571 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// 6g accepts the program below even though it is syntactically incorrect:
// Each statement in the list of statements for each case clause must be
// terminated with a semicolon. No semicolon is present for the labeled
// statements and because the last token is a colon ":", no semicolon is
// inserted automatically.
//
// Both gccgo and gofmt correctly refuse this program as is and accept it
// when the semicolons are present.

// This is a test case for issue 777 ( https://golang.org/issue/777 ).

package main

func main() {
	switch 0 {
	case 0:
		L0:  // ERROR "statement"
	case 1:
		L1:  // ERROR "statement"
	default:
		     // correct since no semicolon is required before a '}'
		goto L2
		L2:
	}
}
                                                                                                                                       usr/local/go/test/fixedbugs/bug275.go                                                               0100644 0000000 0000000 00000000615 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a test case for issue 788.

package main

func main() {
	var a [1]complex64

	t := a[0]
	_ = real(t) // this works

	_ = real(a[0]) // this doesn't
}

// bug275.go:17: internal compiler error: subnode not addable
                                                                                                                   usr/local/go/test/fixedbugs/bug276.go                                                               0100644 0000000 0000000 00000000567 13020111414 016052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for issue 789. The bug only appeared for GOARCH=386.

package main

func main() {
	i := 0
	x := 0

	a := (x & 1) << uint(1-i)
	
	s := uint(1-i)
	b := (x & 1) << s
	
	if a != b {
		panic(0)
	}
}
                                                                                                                                         usr/local/go/test/fixedbugs/bug277.go                                                               0100644 0000000 0000000 00000002665 13020111414 016054  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test cases for conversion syntax.

package main

type (
	A [3]int
	S struct {
		x int
	}
	P *S
	F func(x int) int
	I interface {
		m(x int) int
	}
	L []int
	M map[string]int
	C chan int
)

func (s S) m(x int) int { return x }

var (
	a A = [...]int{1, 2, 3}
	s S = struct{ x int }{0}
	p P = &s
	f F = func(x int) int { return x }
	i I = s
	l L = []int{}
	m M = map[string]int{"foo": 0}
	c C = make(chan int)
)

func main() {
	a = A(a)
	a = [3]int(a)
	s = struct {
		x int
	}(s)
	p = (*S)(p)
	f = func(x int) int(f)
	i = (interface {
		m(x int) int
	})(s) // this is accepted by 6g
	i = interface {
		m(x int) int
	}(s) // this is not accepted by 6g (but should be)
	l = []int(l)
	m = map[string]int(m)
	c = chan int(c)
	_ = chan<- int(c)
	_ = <-(chan int)(c)
	_ = <-(<-chan int)(c)
}

/*
6g bug277.go
bug277.go:46: syntax error: unexpected (, expecting {
bug277.go:50: syntax error: unexpected interface
bug277.go:53: non-declaration statement outside function body
bug277.go:54: non-declaration statement outside function body
bug277.go:55: syntax error: unexpected LCHAN
bug277.go:56: syntax error: unexpected LCHAN
bug277.go:57: non-declaration statement outside function body
bug277.go:58: non-declaration statement outside function body
bug277.go:59: syntax error: unexpected }
*/
                                                                           usr/local/go/test/fixedbugs/bug278.go                                                               0100644 0000000 0000000 00000000744 13020111414 016051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a test case for issue 804.

package main

func f() [10]int {
	return [10]int{}
}

var m map[int][10]int

func main() {
	f()[1] = 2	// ERROR "cannot|invalid"
	f()[2:3][0] = 4	// ERROR "cannot|addressable"
	var x = "abc"
	x[2] = 3	// ERROR "cannot|invalid"
	m[0][5] = 6  // ERROR "cannot|invalid"
}
                            usr/local/go/test/fixedbugs/bug279.go                                                               0100644 0000000 0000000 00000001142 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/799

package main

import "unsafe"

func main() {
	n := unsafe.Sizeof(0)
	if n != 4 && n != 8 {
		println("BUG sizeof 0", n)
		return
	}
	n = unsafe.Alignof(0)
	if n != 4 && n != 8 {
		println("BUG alignof 0", n)
		return
	}
	
	n = unsafe.Sizeof("")
	if n != 8 && n != 16 {
		println("BUG sizeof \"\"", n)
		return
	}
	n = unsafe.Alignof("")
	if n != 4 && n != 8 {
		println("BUG alignof \"\"", n)
		return
	}
}

                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug280.go                                                               0100644 0000000 0000000 00000000425 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/808

package main

type A [...]int	// ERROR "outside of array literal"


                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug281.go                                                               0100644 0000000 0000000 00000001611 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/807

package main

type Point struct {
	X, Y int64
}

type Rect struct {
	Min, Max Point
}

func (p Point) Sub(q Point) Point {
	return Point{p.X-q.X, p.Y-q.Y}
}

type Obj struct {
	bbox Rect
}

func (o *Obj) Bbox() Rect {
	return o.bbox
}

func (o *Obj) Points() [2]Point{
	return [2]Point{o.bbox.Min, o.bbox.Max}
}

var x = 0

func main() {
	o := &Obj{Rect{Point{800, 0}, Point{}}}
	p := Point{800, 300}
	q := p.Sub(o.Bbox().Min)
	if q.X != 0 || q.Y != 300 {
		println("BUG dot: ", q.X, q.Y)
		return
	}
	
	q = p.Sub(o.Points()[0])
	if q.X != 0 || q.Y != 300 {
		println("BUG index const: ", q.X, q.Y)
	}
	
	q = p.Sub(o.Points()[x])
	if q.X != 0 || q.Y != 300 {
		println("BUG index var: ", q.X, q.Y)
	}
}
                                                                                                                       usr/local/go/test/fixedbugs/bug282.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016270  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug282.dir/p1.go                                                        0100644 0000000 0000000 00000000316 13020111414 017134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

type T struct {
	f func() "x"
}

                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug282.dir/p2.go                                                        0100644 0000000 0000000 00000000276 13020111414 017142  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p2

import _ "./p1"

                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug282.go                                                               0100644 0000000 0000000 00000000267 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

ignored
                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug283.go                                                               0100644 0000000 0000000 00000000616 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/806
// triggered out of registers on 8g

package bug283

type Point struct {
	x int
	y int
}

func dist(p0, p1 Point) float64 {
	return float64((p0.x-p1.x)*(p0.x-p1.x) + (p0.y-p1.y)*(p0.y-p1.y))
}
                                                                                                                  usr/local/go/test/fixedbugs/bug284.go                                                               0100644 0000000 0000000 00000006763 13020111414 016055  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test cases for revised conversion rules.

package main

func main() {
	type NewInt int
	i0 := 0
	var i1 int = 1
	var i2 NewInt = 1
	i0 = i0
	i0 = i1
	i0 = int(i2)
	i1 = i0
	i1 = i1
	i1 = int(i2)
	i2 = NewInt(i0)
	i2 = NewInt(i1)
	i2 = i2

	type A1 [3]int
	type A2 [3]NewInt
	var a0 [3]int
	var a1 A1
	var a2 A2
	a0 = a0
	a0 = a1
	a0 = [3]int(a2) // ERROR "cannot|invalid"
	a1 = a0
	a1 = a1
	a1 = A1(a2) // ERROR "cannot|invalid"
	a2 = A2(a0) // ERROR "cannot|invalid"
	a2 = A2(a1) // ERROR "cannot|invalid"
	a2 = a2

	type S1 struct {
		x int
	}
	type S2 struct {
		x NewInt
	}
	var s0 struct {
		x int
	}
	var s1 S1
	var s2 S2
	s0 = s0
	s0 = s1
	s0 = struct {
		x int
	}(s2) // ERROR "cannot|invalid"
	s1 = s0
	s1 = s1
	s1 = S1(s2) // ERROR "cannot|invalid"
	s2 = S2(s0) // ERROR "cannot|invalid"
	s2 = S2(s1) // ERROR "cannot|invalid"
	s2 = s2

	type P1 *int
	type P2 *NewInt
	var p0 *int
	var p1 P1
	var p2 P2
	p0 = p0
	p0 = p1
	p0 = (*int)(p2) // ERROR "cannot|invalid"
	p1 = p0
	p1 = p1
	p1 = P1(p2) // ERROR "cannot|invalid"
	p2 = P2(p0) // ERROR "cannot|invalid"
	p2 = P2(p1) // ERROR "cannot|invalid"
	p2 = p2

	type Q1 *struct {
		x int
	}
	type Q2 *S1
	var q0 *struct {
		x int
	}
	var q1 Q1
	var q2 Q2
	var ps1 *S1
	q0 = q0
	q0 = q1
	q0 = (*struct {
		x int
	})(ps1) // legal because of special conversion exception for pointers
	q0 = (*struct {
		x int
	})(q2) // ERROR "cannot|invalid"
	q1 = q0
	q1 = q1
	q1 = Q1(q2)    // ERROR "cannot|invalid"
	q2 = (*S1)(q0) // legal because of special conversion exception for pointers
	q2 = Q2(q1)    // ERROR "cannot|invalid"
	q2 = q2

	type F1 func(x NewInt) int
	type F2 func(x int) NewInt
	var f0 func(x NewInt) int
	var f1 F1
	var f2 F2
	f0 = f0
	f0 = f1
	f0 = func(x NewInt) int(f2) // ERROR "cannot|invalid"
	f1 = f0
	f1 = f1
	f1 = F1(f2) // ERROR "cannot|invalid"
	f2 = F2(f0) // ERROR "cannot|invalid"
	f2 = F2(f1) // ERROR "cannot|invalid"
	f2 = f2

	type X1 interface {
		f() int
	}
	type X2 interface {
		f() NewInt
	}
	var x0 interface {
		f() int
	}
	var x1 X1
	var x2 X2
	x0 = x0
	x0 = x1
	x0 = interface {
		f() int
	}(x2) // ERROR "cannot|need type assertion|incompatible"
	x1 = x0
	x1 = x1
	x1 = X1(x2) // ERROR "cannot|need type assertion|incompatible"
	x2 = X2(x0) // ERROR "cannot|need type assertion|incompatible"
	x2 = X2(x1) // ERROR "cannot|need type assertion|incompatible"
	x2 = x2

	type L1 []int
	type L2 []NewInt
	var l0 []int
	var l1 L1
	var l2 L2
	l0 = l0
	l0 = l1
	l0 = []int(l2) // ERROR "cannot|invalid"
	l1 = l0
	l1 = l1
	l1 = L1(l2) // ERROR "cannot|invalid"
	l2 = L2(l0) // ERROR "cannot|invalid"
	l2 = L2(l1) // ERROR "cannot|invalid"
	l2 = l2

	type M1 map[string]int
	type M2 map[string]NewInt
	var m0 []int
	var m1 L1
	var m2 L2
	m0 = m0
	m0 = m1
	m0 = []int(m2) // ERROR "cannot|invalid"
	m1 = m0
	m1 = m1
	m1 = L1(m2) // ERROR "cannot|invalid"
	m2 = L2(m0) // ERROR "cannot|invalid"
	m2 = L2(m1) // ERROR "cannot|invalid"
	m2 = m2

	type C1 chan int
	type C2 chan NewInt
	var c0 chan int
	var c1 C1
	var c2 C2
	c0 = c0
	c0 = c1
	c0 = chan int(c2) // ERROR "cannot|invalid"
	c1 = c0
	c1 = c1
	c1 = C1(c2) // ERROR "cannot|invalid"
	c2 = C2(c0) // ERROR "cannot|invalid"
	c2 = C2(c1) // ERROR "cannot|invalid"
	c2 = c2

	// internal compiler error (6g and gccgo)
	type T interface{}
	var _ T = 17 // assignment compatible
	_ = T(17)    // internal compiler error even though assignment compatible
}
             usr/local/go/test/fixedbugs/bug285.go                                                               0100644 0000000 0000000 00000005550 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test for issue 778: Map key values that are assignment
// compatible with the map key type must be accepted according
// to the spec: https://golang.org/doc/go_spec.html#Indexes .

package main

type T2 struct {
	x int
}

func (t *T2) f() int { return t.x }

func main() {
	type B bool
	b := B(false)
	mb := make(map[B]int)
	mb[false] = 42 // this should work: false is assignment compatible with B
	mb[b] = 42

	type Z int
	z := Z(0)
	mz := make(map[Z]int)
	mz[0] = 42
	mz[z] = 42

	type S string
	s := S("foo")
	ms := make(map[S]int)
	ms["foo"] = 42
	ms[s] = 42

	type T struct {
		x int
	}
	type P *T
	p := P(nil)
	mp := make(map[P]int)
	mp[nil] = 42
	mp[p] = 42
	mp[&T{7}] = 42

	type C chan int
	c := make(C)
	mc := make(map[C]int)
	mc[nil] = 42
	mc[c] = 42
	mc[make(C)] = 42

	type I1 interface{}
	type I2 interface {
		f() int
	}
	var i0 interface{} = z
	var i1 I1 = p
	m0 := make(map[interface{}]int)
	m1 := make(map[I1]int)
	m2 := make(map[I2]int)
	m0[i0] = 42
	m0[i1] = 42
	m0[z] = 42 // this should work: z is assignment-compatible with interface{}
	m0[new(struct {
		x int
	})] = 42       // this should work: *struct{x int} is assignment-compatible with interface{}
	m0[p] = 42     // this should work: p is assignment-compatible with interface{}
	m0[false] = 42 // this should work: false is assignment-compatible with interface{}
	m0[17] = 42    // this should work: 17 is assignment-compatible with interface{}
	m0["foo"] = 42 // this should work: "foo" is assignment-compatible with interface{}

	m1[i0] = 42
	m1[i1] = 42
	m1[new(struct {
		x int
	})] = 42       // this should work: *struct{x int} is assignment-compatible with I1
	m1[false] = 42 // this should work: false is assignment-compatible with I1
	m1[17] = 42    // this should work: 17 is assignment-compatible with I1
	m1["foo"] = 42 // this should work: "foo" is assignment-compatible with I1

	m2[new(T2)] = 42 // this should work: *T2 is assignment-compatible with I2
}

/*
6g -e bug286.go
bug286.go:23: invalid map index false - need type B
bug286.go:80: invalid map index z - need type interface { }
bug286.go:83: invalid map index new(struct { x int }) - need type interface { }
bug286.go:84: invalid map index p - need type interface { }
bug286.go:85: invalid map index false - need type interface { }
bug286.go:86: invalid map index 17 - need type interface { }
bug286.go:87: invalid map index "foo" - need type interface { }
bug286.go:93: invalid map index new(struct { x int }) - need type I1
bug286.go:94: invalid map index false - need type I1
bug286.go:95: invalid map index 17 - need type I1
bug286.go:96: invalid map index "foo" - need type I1
bug286.go:99: invalid map index new(T2) - need type I2
bug286.go:100: invalid map index t2 - need type I2
*/
                                                                                                                                                        usr/local/go/test/fixedbugs/bug286.go                                                               0100644 0000000 0000000 00000002730 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for issue 849.

package main

type I interface {
	f()
}

var callee string
var error_ bool

type T int

func (t *T) f() { callee = "f" }
func (i *T) g() { callee = "g" }

// test1 and test2 are the same except that in the interface J
// the entries are swapped. test2 and test3 are the same except
// that in test3 the interface J is declared outside the function.
//
// Error: test2 calls g instead of f

func test1(x I) {
	type J interface {
		I
		g()
	}
	x.(J).f()
	if callee != "f" {
		println("test1 called", callee)
		error_ = true
	}
}

func test2(x I) {
	type J interface {
		g()
		I
	}
	x.(J).f()
	if callee != "f" {
		println("test2 called", callee)
		error_ = true
	}
}

type J interface {
	g()
	I
}

func test3(x I) {
	x.(J).f()
	if callee != "f" {
		println("test3 called", callee)
		error_ = true
	}
}

func main() {
	x := new(T)
	test1(x)
	test2(x)
	test3(x)
	if error_ {
		panic("wrong method called")
	}
}

/*
6g bug286.go && 6l bug286.6 && 6.out
test2 called g
panic: wrong method called

panic PC=0x24e040
runtime.panic+0x7c /home/gri/go1/src/pkg/runtime/proc.c:1012
	runtime.panic(0x0, 0x24e0a0)
main.main+0xef /home/gri/go1/test/bugs/bug286.go:76
	main.main()
mainstart+0xf /home/gri/go1/src/pkg/runtime/amd64/asm.s:60
	mainstart()
goexit /home/gri/go1/src/pkg/runtime/proc.c:145
	goexit()
*/
                                        usr/local/go/test/fixedbugs/bug287.go                                                               0100644 0000000 0000000 00000000442 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to die dividing by zero; issue 879.

package main

var mult [3][...]byte = [3][5]byte{}	// ERROR "\.\.\."
                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug288.go                                                               0100644 0000000 0000000 00000000616 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to run out of registers on 8g.  Issue 868.

package main

func main() {
	var r uint32
	var buf [4]byte
	a := buf[0:4]
	r = (((((uint32(a[3]) << 8) | uint32(a[2])) << 8) |
		uint32(a[1])) << 8) | uint32(a[0])
	_ = r
}
                                                                                                                  usr/local/go/test/fixedbugs/bug289.go                                                               0100644 0000000 0000000 00000000675 13020111414 016056  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://code.google.com/p/gofrontend/issues/detail?id=1

package main

func f1() {
	a, b := f()	// ERROR "mismatch|does not match"
	_ = a
	_ = b
}

func f2() {
	var a, b int
	a, b = f()	// ERROR "mismatch|does not match"
	_ = a
	_ = b
}

func f() int {
	return 1;
}
                                                                   usr/local/go/test/fixedbugs/bug290.go                                                               0100644 0000000 0000000 00000000500 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/920

package main

type X struct { x []X }

func main() {
	type Y struct { x []Y }	// used to get invalid recursive type
}
                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug291.go                                                               0100644 0000000 0000000 00000000556 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/915

package main

type T struct {
	x int
}

var t = &T{42}
var i interface{} = t
var tt, ok = i.(*T)

func main() {
	if tt == nil || tt.x != 42 {
		println("BUG")
	}
}
                                                                                                                                                  usr/local/go/test/fixedbugs/bug292.go                                                               0100644 0000000 0000000 00000000636 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/843

package main

import "unsafe"

type T struct {
	X, Y uint8
}

func main() {
	var t T
	if unsafe.Offsetof(t.X) != 0 || unsafe.Offsetof(t.Y) != 1 {
		println("BUG", unsafe.Offsetof(t.X), unsafe.Offsetof(t.Y))
	}
}
                                                                                                  usr/local/go/test/fixedbugs/bug293.go                                                               0100644 0000000 0000000 00000001007 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/846

package main

func x() (a int, b bool) {
	defer func(){
		a++
	}()
	a, b = y()
	return
}

func x2() (a int, b bool) {
	defer func(){
		a++
	}()
	return y()
}

func y() (int, bool) {
	return 4, false
}

func main() {
	if a, _ := x(); a != 5 {
		println("BUG", a)
	}
	if a, _ := x2(); a != 5 {
		println("BUG", a)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug294.go                                                               0100644 0000000 0000000 00000002036 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/800

package main

var log string

type T int

func (t T) a(s string) T {
	log += "a(" + s + ")"
	return t
}

func (T) b(s string) string {
	log += "b"
	return s
}

type F func(s string) F

func a(s string) F {
	log += "a(" + s + ")"
	return F(a)
}

func b(s string) string {
	log += "b"
	return s
}

type I interface {
	a(s string) I
	b(s string) string
}

type T1 int

func (t T1) a(s string) I {
	log += "a(" + s + ")"
	return t
}

func (T1) b(s string) string {
	log += "b"
	return s
}

var ok = true

func bad() {
	if !ok {
		println("BUG")
		ok = false
	}
	println(log)
}

func main() {
	var t T
	if t.a("1").a(t.b("2")); log != "a(1)ba(2)" {
		bad()
	}
	log = ""
	if a("3")(b("4"))(b("5")); log != "a(3)ba(4)ba(5)" {
		bad()
	}
	log = ""
	var i I = T1(0)
	if i.a("6").a(i.b("7")).a(i.b("8")).a(i.b("9")); log != "a(6)ba(7)ba(8)ba(9)" {
		bad()
	}
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug295.go                                                               0100644 0000000 0000000 00000000555 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import . "testing"  // defines file-level T

type _ B // make use of package "testing" (but don't refer to T)

type S struct {
	T int
}

func main() {
	_ = &S{T: 1}	// should work
}
                                                                                                                                                   usr/local/go/test/fixedbugs/bug296.go                                                               0100644 0000000 0000000 00000003545 13020111414 016053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type I interface {
	m(a, b, c, d, e, f, g, h byte)
}

type Int8 int8

func (x Int8) m(a, b, c, d, e, f, g, h byte) {
	check("Int8", int64(x), 0x01, a, b, c, d, e, f, g, h)
}

type Uint8 uint8

func (x Uint8) m(a, b, c, d, e, f, g, h byte) {
	check("Uint8", int64(x), 0x01, a, b, c, d, e, f, g, h)
}

type Int16 int16

func (x Int16) m(a, b, c, d, e, f, g, h byte) {
	check("Int16", int64(x), 0x0102, a, b, c, d, e, f, g, h)
}

type Uint16 uint16

func (x Uint16) m(a, b, c, d, e, f, g, h byte) {
	check("Uint16", int64(x), 0x0102, a, b, c, d, e, f, g, h)
}

type Int32 int32

func (x Int32) m(a, b, c, d, e, f, g, h byte) {
	check("Int32", int64(x), 0x01020304, a, b, c, d, e, f, g, h)
}

type Uint32 uint32

func (x Uint32) m(a, b, c, d, e, f, g, h byte) {
	check("Uint32", int64(x), 0x01020304, a, b, c, d, e, f, g, h)
}

type Int64 int64

func (x Int64) m(a, b, c, d, e, f, g, h byte) {
	check("Int64", int64(x), 0x0102030405060708, a, b, c, d, e, f, g, h)
}

type Uint64 uint64

func (x Uint64) m(a, b, c, d, e, f, g, h byte) {
	check("Uint64", int64(x), 0x0102030405060708, a, b, c, d, e, f, g, h)
}

var test = []I{
	Int8(0x01),
	Uint8(0x01),
	Int16(0x0102),
	Uint16(0x0102),
	Int32(0x01020304),
	Uint32(0x01020304),
	Int64(0x0102030405060708),
	Uint64(0x0102030405060708),
}

func main() {
	for _, t := range test {
		t.m(0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17)
	}
}

var bug = false

func check(desc string, have, want int64, a, b, c, d, e, f, g, h byte) {
	if have != want || a != 0x10 || b != 0x11 || c != 0x12 || d != 0x13 || e != 0x14 || f != 0x15 || g != 0x16 || h != 0x17 {
		if !bug {
			bug = true
			println("BUG")
		}
		println(desc, "check", have, want, a, b, c, d, e, f, g, h)
	}
}
                                                                                                                                                           usr/local/go/test/fixedbugs/bug297.go                                                               0100644 0000000 0000000 00000000623 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to crash; issue 961.

package main

type ByteSize float64
const (
	_ = iota;   // ignore first value by assigning to blank identifier
	KB ByteSize = 1<<(10*X) // ERROR "undefined" "is not a constant|as type ByteSize"
)
                                                                                                             usr/local/go/test/fixedbugs/bug298.go                                                               0100644 0000000 0000000 00000000442 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ddd

func Sum() int
	for i := range []int{} { return i }  // ERROR "statement outside function|expected"

                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug299.go                                                               0100644 0000000 0000000 00000001233 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T struct {
	// legal according to spec
	x int
	y (int)
	int
	*float64
	// not legal according to spec
	(complex128)  // ERROR "non-declaration|expected|parenthesize"
	(*string)  // ERROR "non-declaration|expected|parenthesize"
	*(bool)    // ERROR "non-declaration|expected|parenthesize"
}

// legal according to spec
func (p T) m() {}

// now legal according to spec
func (p (T)) f() {}
func (p *(T)) g() {}
func (p (*T)) h() {}
func (p (*(T))) i() {}
func ((T),) j() {}
                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug300.go                                                               0100644 0000000 0000000 00000001272 13020111414 016030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T struct {
	x, y *T
}

func main() {
	// legal composite literals
	_ = struct{}{}
	_ = [42]int{}
	_ = [...]int{}
	_ = []int{}
	_ = map[int]int{}
	_ = T{}

	// illegal composite literals: parentheses not allowed around literal type
	_ = (struct{}){}    // ERROR "parenthesize"
	_ = ([42]int){}     // ERROR "parenthesize"
	_ = ([...]int){}    // ERROR "parenthesize"
	_ = ([]int){}       // ERROR "parenthesize"
	_ = (map[int]int){} // ERROR "parenthesize"
	_ = (T){}           // ERROR "parenthesize"
}
                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug301.go                                                               0100644 0000000 0000000 00000000505 13020111414 016027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/990

package main

func main() {
	defer func() {
		if recover() != nil {
			panic("non-nil recover")
		}
	}()
	panic(nil)
}
                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug302.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016261  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug302.dir/main.go                                                      0100644 0000000 0000000 00000000503 13020111414 017527  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Check that the export information is correct in p.6.
import _ "p"

// Check that it's still correct in pp.a (which contains p.6).
import _ "pp"

                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug302.dir/p.go                                                         0100644 0000000 0000000 00000023570 13020111414 017053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type T struct {
	x1 int
	x2 int
	x3 int
	x4 int
	x5 int
	x6 int
	x7 int
	x8 int
	x9 int
	x10 int
	x11 int
	x12 int
	x13 int
	x14 int
	x15 int
	x16 int
	x17 int
	x18 int
	x19 int
	x20 int
	x21 int
	x22 int
	x23 int
	x24 int
	x25 int
	x26 int
	x27 int
	x28 int
	x29 int
	x30 int
	x31 int
	x32 int
	x33 int
	x34 int
	x35 int
	x36 int
	x37 int
	x38 int
	x39 int
	x40 int
	x41 int
	x42 int
	x43 int
	x44 int
	x45 int
	x46 int
	x47 int
	x48 int
	x49 int
	x50 int
	x51 int
	x52 int
	x53 int
	x54 int
	x55 int
	x56 int
	x57 int
	x58 int
	x59 int
	x60 int
	x61 int
	x62 int
	x63 int
	x64 int
	x65 int
	x66 int
	x67 int
	x68 int
	x69 int
	x70 int
	x71 int
	x72 int
	x73 int
	x74 int
	x75 int
	x76 int
	x77 int
	x78 int
	x79 int
	x80 int
	x81 int
	x82 int
	x83 int
	x84 int
	x85 int
	x86 int
	x87 int
	x88 int
	x89 int
	x90 int
	x91 int
	x92 int
	x93 int
	x94 int
	x95 int
	x96 int
	x97 int
	x98 int
	x99 int
	x100 int
	x101 int
	x102 int
	x103 int
	x104 int
	x105 int
	x106 int
	x107 int
	x108 int
	x109 int
	x110 int
	x111 int
	x112 int
	x113 int
	x114 int
	x115 int
	x116 int
	x117 int
	x118 int
	x119 int
	x120 int
	x121 int
	x122 int
	x123 int
	x124 int
	x125 int
	x126 int
	x127 int
	x128 int
	x129 int
	x130 int
	x131 int
	x132 int
	x133 int
	x134 int
	x135 int
	x136 int
	x137 int
	x138 int
	x139 int
	x140 int
	x141 int
	x142 int
	x143 int
	x144 int
	x145 int
	x146 int
	x147 int
	x148 int
	x149 int
	x150 int
	x151 int
	x152 int
	x153 int
	x154 int
	x155 int
	x156 int
	x157 int
	x158 int
	x159 int
	x160 int
	x161 int
	x162 int
	x163 int
	x164 int
	x165 int
	x166 int
	x167 int
	x168 int
	x169 int
	x170 int
	x171 int
	x172 int
	x173 int
	x174 int
	x175 int
	x176 int
	x177 int
	x178 int
	x179 int
	x180 int
	x181 int
	x182 int
	x183 int
	x184 int
	x185 int
	x186 int
	x187 int
	x188 int
	x189 int
	x190 int
	x191 int
	x192 int
	x193 int
	x194 int
	x195 int
	x196 int
	x197 int
	x198 int
	x199 int
	x200 int
	x201 int
	x202 int
	x203 int
	x204 int
	x205 int
	x206 int
	x207 int
	x208 int
	x209 int
	x210 int
	x211 int
	x212 int
	x213 int
	x214 int
	x215 int
	x216 int
	x217 int
	x218 int
	x219 int
	x220 int
	x221 int
	x222 int
	x223 int
	x224 int
	x225 int
	x226 int
	x227 int
	x228 int
	x229 int
	x230 int
	x231 int
	x232 int
	x233 int
	x234 int
	x235 int
	x236 int
	x237 int
	x238 int
	x239 int
	x240 int
	x241 int
	x242 int
	x243 int
	x244 int
	x245 int
	x246 int
	x247 int
	x248 int
	x249 int
	x250 int
	x251 int
	x252 int
	x253 int
	x254 int
	x255 int
	x256 int
	x257 int
	x258 int
	x259 int
	x260 int
	x261 int
	x262 int
	x263 int
	x264 int
	x265 int
	x266 int
	x267 int
	x268 int
	x269 int
	x270 int
	x271 int
	x272 int
	x273 int
	x274 int
	x275 int
	x276 int
	x277 int
	x278 int
	x279 int
	x280 int
	x281 int
	x282 int
	x283 int
	x284 int
	x285 int
	x286 int
	x287 int
	x288 int
	x289 int
	x290 int
	x291 int
	x292 int
	x293 int
	x294 int
	x295 int
	x296 int
	x297 int
	x298 int
	x299 int
	x300 int
	x301 int
	x302 int
	x303 int
	x304 int
	x305 int
	x306 int
	x307 int
	x308 int
	x309 int
	x310 int
	x311 int
	x312 int
	x313 int
	x314 int
	x315 int
	x316 int
	x317 int
	x318 int
	x319 int
	x320 int
	x321 int
	x322 int
	x323 int
	x324 int
	x325 int
	x326 int
	x327 int
	x328 int
	x329 int
	x330 int
	x331 int
	x332 int
	x333 int
	x334 int
	x335 int
	x336 int
	x337 int
	x338 int
	x339 int
	x340 int
	x341 int
	x342 int
	x343 int
	x344 int
	x345 int
	x346 int
	x347 int
	x348 int
	x349 int
	x350 int
	x351 int
	x352 int
	x353 int
	x354 int
	x355 int
	x356 int
	x357 int
	x358 int
	x359 int
	x360 int
	x361 int
	x362 int
	x363 int
	x364 int
	x365 int
	x366 int
	x367 int
	x368 int
	x369 int
	x370 int
	x371 int
	x372 int
	x373 int
	x374 int
	x375 int
	x376 int
	x377 int
	x378 int
	x379 int
	x380 int
	x381 int
	x382 int
	x383 int
	x384 int
	x385 int
	x386 int
	x387 int
	x388 int
	x389 int
	x390 int
	x391 int
	x392 int
	x393 int
	x394 int
	x395 int
	x396 int
	x397 int
	x398 int
	x399 int
	x400 int
	x401 int
	x402 int
	x403 int
	x404 int
	x405 int
	x406 int
	x407 int
	x408 int
	x409 int
	x410 int
	x411 int
	x412 int
	x413 int
	x414 int
	x415 int
	x416 int
	x417 int
	x418 int
	x419 int
	x420 int
	x421 int
	x422 int
	x423 int
	x424 int
	x425 int
	x426 int
	x427 int
	x428 int
	x429 int
	x430 int
	x431 int
	x432 int
	x433 int
	x434 int
	x435 int
	x436 int
	x437 int
	x438 int
	x439 int
	x440 int
	x441 int
	x442 int
	x443 int
	x444 int
	x445 int
	x446 int
	x447 int
	x448 int
	x449 int
	x450 int
	x451 int
	x452 int
	x453 int
	x454 int
	x455 int
	x456 int
	x457 int
	x458 int
	x459 int
	x460 int
	x461 int
	x462 int
	x463 int
	x464 int
	x465 int
	x466 int
	x467 int
	x468 int
	x469 int
	x470 int
	x471 int
	x472 int
	x473 int
	x474 int
	x475 int
	x476 int
	x477 int
	x478 int
	x479 int
	x480 int
	x481 int
	x482 int
	x483 int
	x484 int
	x485 int
	x486 int
	x487 int
	x488 int
	x489 int
	x490 int
	x491 int
	x492 int
	x493 int
	x494 int
	x495 int
	x496 int
	x497 int
	x498 int
	x499 int
	x500 int
	x501 int
	x502 int
	x503 int
	x504 int
	x505 int
	x506 int
	x507 int
	x508 int
	x509 int
	x510 int
	x511 int
	x512 int
	x513 int
	x514 int
	x515 int
	x516 int
	x517 int
	x518 int
	x519 int
	x520 int
	x521 int
	x522 int
	x523 int
	x524 int
	x525 int
	x526 int
	x527 int
	x528 int
	x529 int
	x530 int
	x531 int
	x532 int
	x533 int
	x534 int
	x535 int
	x536 int
	x537 int
	x538 int
	x539 int
	x540 int
	x541 int
	x542 int
	x543 int
	x544 int
	x545 int
	x546 int
	x547 int
	x548 int
	x549 int
	x550 int
	x551 int
	x552 int
	x553 int
	x554 int
	x555 int
	x556 int
	x557 int
	x558 int
	x559 int
	x560 int
	x561 int
	x562 int
	x563 int
	x564 int
	x565 int
	x566 int
	x567 int
	x568 int
	x569 int
	x570 int
	x571 int
	x572 int
	x573 int
	x574 int
	x575 int
	x576 int
	x577 int
	x578 int
	x579 int
	x580 int
	x581 int
	x582 int
	x583 int
	x584 int
	x585 int
	x586 int
	x587 int
	x588 int
	x589 int
	x590 int
	x591 int
	x592 int
	x593 int
	x594 int
	x595 int
	x596 int
	x597 int
	x598 int
	x599 int
	x600 int
	x601 int
	x602 int
	x603 int
	x604 int
	x605 int
	x606 int
	x607 int
	x608 int
	x609 int
	x610 int
	x611 int
	x612 int
	x613 int
	x614 int
	x615 int
	x616 int
	x617 int
	x618 int
	x619 int
	x620 int
	x621 int
	x622 int
	x623 int
	x624 int
	x625 int
	x626 int
	x627 int
	x628 int
	x629 int
	x630 int
	x631 int
	x632 int
	x633 int
	x634 int
	x635 int
	x636 int
	x637 int
	x638 int
	x639 int
	x640 int
	x641 int
	x642 int
	x643 int
	x644 int
	x645 int
	x646 int
	x647 int
	x648 int
	x649 int
	x650 int
	x651 int
	x652 int
	x653 int
	x654 int
	x655 int
	x656 int
	x657 int
	x658 int
	x659 int
	x660 int
	x661 int
	x662 int
	x663 int
	x664 int
	x665 int
	x666 int
	x667 int
	x668 int
	x669 int
	x670 int
	x671 int
	x672 int
	x673 int
	x674 int
	x675 int
	x676 int
	x677 int
	x678 int
	x679 int
	x680 int
	x681 int
	x682 int
	x683 int
	x684 int
	x685 int
	x686 int
	x687 int
	x688 int
	x689 int
	x690 int
	x691 int
	x692 int
	x693 int
	x694 int
	x695 int
	x696 int
	x697 int
	x698 int
	x699 int
	x700 int
	x701 int
	x702 int
	x703 int
	x704 int
	x705 int
	x706 int
	x707 int
	x708 int
	x709 int
	x710 int
	x711 int
	x712 int
	x713 int
	x714 int
	x715 int
	x716 int
	x717 int
	x718 int
	x719 int
	x720 int
	x721 int
	x722 int
	x723 int
	x724 int
	x725 int
	x726 int
	x727 int
	x728 int
	x729 int
	x730 int
	x731 int
	x732 int
	x733 int
	x734 int
	x735 int
	x736 int
	x737 int
	x738 int
	x739 int
	x740 int
	x741 int
	x742 int
	x743 int
	x744 int
	x745 int
	x746 int
	x747 int
	x748 int
	x749 int
	x750 int
	x751 int
	x752 int
	x753 int
	x754 int
	x755 int
	x756 int
	x757 int
	x758 int
	x759 int
	x760 int
	x761 int
	x762 int
	x763 int
	x764 int
	x765 int
	x766 int
	x767 int
	x768 int
	x769 int
	x770 int
	x771 int
	x772 int
	x773 int
	x774 int
	x775 int
	x776 int
	x777 int
	x778 int
	x779 int
	x780 int
	x781 int
	x782 int
	x783 int
	x784 int
	x785 int
	x786 int
	x787 int
	x788 int
	x789 int
	x790 int
	x791 int
	x792 int
	x793 int
	x794 int
	x795 int
	x796 int
	x797 int
	x798 int
	x799 int
	x800 int
	x801 int
	x802 int
	x803 int
	x804 int
	x805 int
	x806 int
	x807 int
	x808 int
	x809 int
	x810 int
	x811 int
	x812 int
	x813 int
	x814 int
	x815 int
	x816 int
	x817 int
	x818 int
	x819 int
	x820 int
	x821 int
	x822 int
	x823 int
	x824 int
	x825 int
	x826 int
	x827 int
	x828 int
	x829 int
	x830 int
	x831 int
	x832 int
	x833 int
	x834 int
	x835 int
	x836 int
	x837 int
	x838 int
	x839 int
	x840 int
	x841 int
	x842 int
	x843 int
	x844 int
	x845 int
	x846 int
	x847 int
	x848 int
	x849 int
	x850 int
	x851 int
	x852 int
	x853 int
	x854 int
	x855 int
	x856 int
	x857 int
	x858 int
	x859 int
	x860 int
	x861 int
	x862 int
	x863 int
	x864 int
	x865 int
	x866 int
	x867 int
	x868 int
	x869 int
	x870 int
	x871 int
	x872 int
	x873 int
	x874 int
	x875 int
	x876 int
	x877 int
	x878 int
	x879 int
	x880 int
	x881 int
	x882 int
	x883 int
	x884 int
	x885 int
	x886 int
	x887 int
	x888 int
	x889 int
	x890 int
	x891 int
	x892 int
	x893 int
	x894 int
	x895 int
	x896 int
	x897 int
	x898 int
	x899 int
	x900 int
	x901 int
	x902 int
	x903 int
	x904 int
	x905 int
	x906 int
	x907 int
	x908 int
	x909 int
	x910 int
	x911 int
	x912 int
	x913 int
	x914 int
	x915 int
	x916 int
	x917 int
	x918 int
	x919 int
	x920 int
	x921 int
	x922 int
	x923 int
	x924 int
	x925 int
	x926 int
	x927 int
	x928 int
	x929 int
	x930 int
	x931 int
	x932 int
	x933 int
	x934 int
	x935 int
	x936 int
	x937 int
	x938 int
	x939 int
	x940 int
	x941 int
	x942 int
	x943 int
	x944 int
	x945 int
	x946 int
	x947 int
	x948 int
	x949 int
	x950 int
	x951 int
	x952 int
	x953 int
	x954 int
	x955 int
	x956 int
	x957 int
	x958 int
	x959 int
	x960 int
	x961 int
	x962 int
	x963 int
	x964 int
	x965 int
	x966 int
	x967 int
	x968 int
	x969 int
	x970 int
	x971 int
	x972 int
	x973 int
	x974 int
	x975 int
	x976 int
	x977 int
	x978 int
	x979 int
	x980 int
	x981 int
	x982 int
	x983 int
	x984 int
	x985 int
	x986 int
	x987 int
	x988 int
	x989 int
	x990 int
	x991 int
	x992 int
	x993 int
	x994 int
	x995 int
	x996 int
	x997 int
	x998 int
	x999 int
	x1000 int
}

func (t *T) M() {
}
                                                                                                                                        usr/local/go/test/fixedbugs/bug302.go                                                               0100644 0000000 0000000 00000001327 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !nacl
// run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	run("go", "tool", "compile", filepath.Join("fixedbugs", "bug302.dir", "p.go"))
	run("go", "tool", "pack", "grc", "pp.a", "p.o")
	run("go", "tool", "compile", "-I", ".", filepath.Join("fixedbugs", "bug302.dir", "main.go"))
	os.Remove("p.o")
	os.Remove("pp.a")
	os.Remove("main.o")
}

func run(cmd string, args ...string) {
	out, err := exec.Command(cmd, args...).CombinedOutput()
	if err != nil {
		fmt.Println(string(out))
		fmt.Println(err)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug303.go                                                               0100644 0000000 0000000 00000001266 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1011.  Removing either #1 or #3 avoided the crash at #2.

package main

import (
	"io"
	"strings"
)

func readU16BE(b []byte) uint16 {
	b[0] = 0
	b[1] = 1
	return uint16(b[0])<<8 + uint16(b[1]) // #1
	n := uint16(b[0])<<8 + uint16(b[1])
	return n
}

func readStr(r io.Reader, b []byte) string {
	n := readU16BE(b)
	if int(n) > len(b) {
		return "err: n>b"
	}
	io.ReadFull(r, b[0:n]) // #2
	return string(b[0:n])  // #3
	return "ok"
}

func main() {
	br := strings.NewReader("abcd")
	readStr(br, make([]byte, 256))
}
                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug304.go                                                               0100644 0000000 0000000 00000000661 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Caused a gccgo crash on compilation.
// bug304.go: In function â€˜p.fâ€™:
// bug304.go:15:2: internal compiler error: in copy_tree_r, at tree-inline.c:4114

package p
type S struct {
	v interface{}
}
func g(e interface{}) { }
func f(s S) {
	g(s.v.(*int))
}
                                                                               usr/local/go/test/fixedbugs/bug305.go                                                               0100644 0000000 0000000 00000000712 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use //line to set the line number of the next line to 20.
//line fixedbugs/bug305.go:20

package p

// Introduce an error which should be reported on line 24.
var a int = "bogus"

// Line 15 of file.
// 16
// 17
// 18
// 19
// 20
// 21
// 22
// 23
// ERROR "cannot|incompatible"
                                                      usr/local/go/test/fixedbugs/bug306.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016265  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug306.dir/p1.go                                                        0100644 0000000 0000000 00000000325 13020111414 017131  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

type T <-chan int
var x = make(chan T)

                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug306.dir/p2.go                                                        0100644 0000000 0000000 00000000276 13020111414 017137  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p2

import _ "./p1"

                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug306.go                                                               0100644 0000000 0000000 00000000267 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

ignored
                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug307.go                                                               0100644 0000000 0000000 00000000540 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Valid program, gccgo reported an error.
// bug307.go:14:6: error: complex arguments must have identical types

package main

func main() {
	var f float64
	_ = complex(1/f, 0)
}
                                                                                                                                                                usr/local/go/test/fixedbugs/bug308.go                                                               0100644 0000000 0000000 00000000530 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1136

package main

import "fmt"

func log1(f string, argv ...interface{}) {
	fmt.Printf("log: %s\n", fmt.Sprintf(f, argv...))
}

func main() {
	log1("%d", 42)
}
                                                                                                                                                                        usr/local/go/test/fixedbugs/bug309.go                                                               0100644 0000000 0000000 00000000611 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1016

package bug309

func foo(t interface{}, c chan int) {
	switch v := t.(type) {
	case int:
		select {
		case <-c:
			// bug was: internal compiler error: var without type, init: v
		}
	default:
		_ = v
	}
}
                                                                                                                       usr/local/go/test/fixedbugs/bug311.go                                                               0100644 0000000 0000000 00000000572 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	m := make(map[string][1000]byte)
	m["hi"] = [1000]byte{1}
	
	v := m["hi"]
	
	for k, vv := range m {
		if k != "hi" || string(v[:]) != string(vv[:]) {
			panic("bad iter")
		}
	}
}
                                                                                                                                      usr/local/go/test/fixedbugs/bug312.go                                                               0100644 0000000 0000000 00000000560 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1172

package main

func main() {
	var i interface{}
	c := make(chan int, 1)
	c <- 1
	select {
	case i = <-c: // error on this line
	}
	if i != 1 {
		println("bad i", i)
		panic("BUG")
	}
}
                                                                                                                                                usr/local/go/test/fixedbugs/bug313.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016263  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug313.dir/a.go                                                         0100644 0000000 0000000 00000000363 13020111414 017031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func a() {
	fmt.DoesNotExist() // ERROR "undefined"
}
                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug313.dir/b.go                                                         0100644 0000000 0000000 00000000327 13020111414 017032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import . "fmt"

func b() {
	Println()
}
                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug313.go                                                               0100644 0000000 0000000 00000000537 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1284

package bug313

/*
6g bug313.dir/[ab].go

Before:
bug313.dir/b.go:7: internal compiler error: fault

Now:
bug313.dir/a.go:10: undefined: fmt.DoesNotExist
*/
                                                                                                                                                                 usr/local/go/test/fixedbugs/bug314.go                                                               0100644 0000000 0000000 00000000727 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to call wrong methods; issue 1290.

package main

type S struct {
}
func (S) a() int{
	return 0
}
func (S) b() int{
	return 1
}

func main() {
	var i interface {
		b() int
		a() int
	} = S{}
	if i.a() != 0 {
		panic("wrong method called")
	}
	if i.b() != 1 {
		panic("wrong method called")
	}
}
                                         usr/local/go/test/fixedbugs/bug315.go                                                               0100644 0000000 0000000 00000000501 13020111414 016030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1368.

package main

func main() {
	a := complex(2, 2)
	a /= 2
}

/*
bug315.go:13: internal compiler error: optoas: no entry DIV-complex
*/
                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug316.go                                                               0100644 0000000 0000000 00000000547 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1369.

package main

const (
	c = complex(1, 2)
	r = real(c) // was: const initializer must be constant
	i = imag(c) // was: const initializer must be constant
)

func main() {}
                                                                                                                                                         usr/local/go/test/fixedbugs/bug317.go                                                               0100644 0000000 0000000 00000000446 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	x := []uint{0}
	x[0] &^= f()
}

func f() uint {
	return 1<<31 // doesn't panic with 1<<31 - 1
}
                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug318.go                                                               0100644 0000000 0000000 00000000400 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1411.

package main

const ui uint = 0
const i int = ui // ERROR "type"
                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug319.go                                                               0100644 0000000 0000000 00000001010 13020111414 016030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "unsafe"

func main() {
	var x int
	
	a := uint64(uintptr(unsafe.Pointer(&x)))
	b := uint32(uintptr(unsafe.Pointer(&x)))
	c := uint16(uintptr(unsafe.Pointer(&x)))
	d := int64(uintptr(unsafe.Pointer(&x)))
	e := int32(uintptr(unsafe.Pointer(&x)))
	f := int16(uintptr(unsafe.Pointer(&x)))

	_, _, _, _, _, _ = a, b, c, d, e, f
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug320.go                                                               0100644 0000000 0000000 00000001704 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	c := make(chan int, 1)
	dummy := make(chan int)
	v := 0x12345678
	for i := 0; i < 10; i++ {
		// 6g had a bug that caused select to pass &t to
		// selectrecv before allocating the memory for t,
		// which caused non-deterministic crashes.
		// This test looks for the bug by checking that the
		// value received actually ends up in t.
		// If the allocation happens after storing through
		// whatever garbage &t holds, the later reference
		// to t in the case body will use the new pointer and
		// not see the received value.
		v += 0x1020304
		c <- v
		select {
		case t := <-c:
			go func() {
				f(t)
			}()
			escape(&t)
			if t != v {
				println(i, v, t)
				panic("wrong values")
			}
		case dummy <- 1:
		}
	}
}

func escape(*int) {
}

func f(int) {
}

                                                            usr/local/go/test/fixedbugs/bug321.go                                                               0100644 0000000 0000000 00000001477 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Troublesome floating point constants. Issue 1463.

package main

import "fmt"

func check(test string, got, want float64) bool {
	if got != want {
		fmt.Println(test, "got", got, "want", want)
		return false
	}
	return true
}

func main() {
	good := true
	// http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308/
	good = good && check("2.2250738585072012e-308", 2.2250738585072012e-308, 2.2250738585072014e-308)
	// http://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/
	good = good && check("2.2250738585072011e-308", 2.2250738585072011e-308, 2.225073858507201e-308)
	if !good {
		panic("fail")
	}
}
                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug322.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016263  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug322.dir/lib.go                                                       0100644 0000000 0000000 00000000407 13020111414 017356  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package lib

type T struct {
	x int  // non-exported field
}

func (t T) M() {
}

func (t *T) PM() {
}
                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug322.dir/main.go                                                      0100644 0000000 0000000 00000001034 13020111414 017531  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./lib"

type I interface {
	M()
}

type PI interface {
	PM()
}

func main() {
	var t lib.T
	t.M()
	t.PM()

	// This is still an error.
	// var i1 I = t
	// i1.M()
	
	// This combination is illegal because
	// PM requires a pointer receiver.
	// var pi1 PI = t
	// pi1.PM()

	var pt = &t
	pt.M()
	pt.PM()

	var i2 I = pt
	i2.M()

	var pi2 PI = pt
	pi2.PM()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug322.go                                                               0100644 0000000 0000000 00000000330 13020111414 016026  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for issue 1402.
package ignored
                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug323.go                                                               0100644 0000000 0000000 00000000554 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T struct{}
type P *T

func (t *T) Meth() {}
func (t T) Meth2() {}

func main() {
	t := &T{}
	p := P(t)
	p.Meth()  // ERROR "undefined"
	p.Meth2() // ERROR "undefined"
}
                                                                                                                                                    usr/local/go/test/fixedbugs/bug324.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016265  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug324.dir/p.go                                                         0100644 0000000 0000000 00000000533 13020111414 017051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type Exported interface {
	private()
}

type Implementation struct{}

func (p *Implementation) private() { println("p.Implementation.private()") }

var X = new(Implementation)
                                                                                                                                                                     usr/local/go/test/fixedbugs/bug324.dir/prog.go                                                      0100644 0000000 0000000 00000002303 13020111414 017556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"./p"
)

type Exported interface {
	private()
}

type Implementation struct{}

func (p *Implementation) private() {}


func main() {
	// nothing unusual here
	var x Exported
	x = new(Implementation)
	x.private()  //  main.Implementation.private()

	// same here - should be and is legal
	var px p.Exported
	px = p.X
	
	// this assignment is correctly illegal:
	//	px.private undefined (cannot refer to unexported field or method private)
	// px.private()

	// this assignment is correctly illegal:
	//	*Implementation does not implement p.Exported (missing p.private method)
	// px = new(Implementation)

	// this assignment is correctly illegal:
	//	p.Exported does not implement Exported (missing private method)
	// x = px

	// this assignment unexpectedly compiles and then executes
	defer func() {
		recover()
	}()
	x = px.(Exported)
	
	println("should not get this far")

	// this is a legitimate call, but because of the previous assignment,
	// it invokes the method private in p!
	x.private()  // p.Implementation.private()
}
                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug324.go                                                               0100644 0000000 0000000 00000000520 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case for issue 1550: a type cannot implement an interface
// from another package with a private method, and type assertions
// should fail.
package ignored
                                                                                                                                                                                usr/local/go/test/fixedbugs/bug325.go                                                               0100644 0000000 0000000 00000000541 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "unsafe"

func main() {
	var x unsafe.Pointer
	println(*x) // ERROR "invalid indirect.*unsafe.Pointer"
	var _ = (unsafe.Pointer)(nil).foo  // ERROR "foo"
}
                                                                                                                                                               usr/local/go/test/fixedbugs/bug326.go                                                               0100644 0000000 0000000 00000001070 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func f() (_ int, err error) {
	return
}

func g() (x int, _ error) {
	return
}

func h() (_ int, _ error) {
	return
}

func i() (int, error) {
	return // ERROR "not enough arguments to return"
}

func f1() (_ int, err error) {
	return 1, nil
}

func g1() (x int, _ error) {
	return 1, nil
}

func h1() (_ int, _ error) {
	return 1, nil
}

func ii() (int, error) {
	return 1, nil
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug327.go                                                               0100644 0000000 0000000 00000000707 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Conversion between identical interfaces.
// Issue 1647.

// The compiler used to not realize this was a no-op,
// so it generated a call to the non-existent function runtime.convE2E.

package main

type (
	a interface{}
	b interface{}
)

func main() {
	x := a(1)
	z := b(x)
	_ = z
}
                                                         usr/local/go/test/fixedbugs/bug328.go                                                               0100644 0000000 0000000 00000000375 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // cmpout

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "unsafe"

func main() {
	var p unsafe.Pointer
	println(p)
}
                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/bug328.out                                                              0100644 0000000 0000000 00000000004 13020111414 016234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        0x0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug329.go                                                               0100644 0000000 0000000 00000001304 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type Value struct {
	X interface{}
	Y int
}

type Struct struct {
	X complex128
}

const magic = 1 + 2i

func (Value) Complex(x complex128) {
	if x != magic {
		println(x)
		panic("bad complex magic")
	}
}

func f(x *byte, y, z int) complex128 {
	return magic
}

func (Value) Struct(x Struct) {
	if x.X != magic {
		println(x.X)
		panic("bad struct magic")
	}
}

func f1(x *byte, y, z int) Struct {
	return Struct{magic}
}

func main() {
	var v Value
	v.Struct(f1(nil, 0, 0)) // ok
	v.Complex(f(nil, 0, 0)) // used to fail
}
                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug330.go                                                               0100644 0000000 0000000 00000000533 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	x := ""
	x = +"hello"  // ERROR "invalid operation.*string|expected numeric"
	x = +x  // ERROR "invalid operation.*string|expected numeric"
}
                                                                                                                                                                     usr/local/go/test/fixedbugs/bug331.go                                                               0100644 0000000 0000000 00000001445 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "io"

func f() (_ string, x float64, err error) {
	return
}

func g() (_ string, x float64, err error) {
	return "hello", 3.14, io.EOF
}

var _ func() (string, float64, error) = f
var _ func() (string, float64, error) = g

func main() {
	x, y, z := g()
	if x != "hello" || y != 3.14 || z != io.EOF {
		println("wrong", x, len(x), y, z)
	}
}

/*
issue 1712

bug331.go:12: cannot use "hello" (type string) as type float64 in assignment
bug331.go:12: cannot use 0 (type float64) as type os.Error in assignment:
	float64 does not implement os.Error (missing String method)
bug331.go:12: error in shape across RETURN
*/
                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug332.go                                                               0100644 0000000 0000000 00000000564 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// type T int

func main() {}

// issue 1474

// important: no newline on end of next line.
// 6g used to print <epoch> instead of bug332.go:111 
func (t *T) F() {} // ERROR "bug332"                                                                                                                                            usr/local/go/test/fixedbugs/bug333.go                                                               0100644 0000000 0000000 00000000544 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1709

package main

func main() {
       type Ts string
       var ts Ts
       _ = []byte(ts)
}

/*
bug333.go:14: cannot use ts (type Ts) as type string in function argument
*/
                                                                                                                                                            usr/local/go/test/fixedbugs/bug334.go                                                               0100644 0000000 0000000 00000001153 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1716

package main

type (
	cplx64  complex64
	cplx128 complex128
)

func (c cplx64) Foo()  {}
func (c cplx128) Foo() {}

func main() {
	var c64 cplx128
	var c128 cplx64
	c64.Foo()
	c128.Foo()
}

/*
bug334.go:16: invalid receiver type cplx64
bug334.go:17: invalid receiver type cplx128
bug334.go:22: c64.Foo undefined (type cplx128 has no field or method Foo)
bug334.go:23: c128.Foo undefined (type cplx64 has no field or method Foo)
*/
                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug335.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016267  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug335.dir/a.go                                                         0100644 0000000 0000000 00000000353 13020111414 017034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type T interface{}

func f() T { return nil }

var Foo T = f()
                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug335.dir/b.go                                                         0100644 0000000 0000000 00000000312 13020111414 017030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

var Bar = a.Foo
                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug335.go                                                               0100644 0000000 0000000 00000000320 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1705.

package ignored
                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug336.go                                                               0100644 0000000 0000000 00000002240 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T1 struct {
	Next *T2
}

type T2 T1

type T3 struct {
	Next *T4
}

type T4 T5
type T5 T6
type T6 T7
type T7 T8
type T8 T9
type T9 T3

type T10 struct {
	x struct {
		y ***struct {
			z *struct {
				Next *T11
			}
		}
	}
}

type T11 T10

type T12 struct {
	F1 *T15
	F2 *T13
	F3 *T16
}

type T13 T14
type T14 T15
type T15 T16
type T16 T17
type T17 T12

// issue 1672
type T18 *[10]T19
type T19 T18

func main() {
	_ = &T1{&T2{}}
	_ = &T2{&T2{}}
	_ = &T3{&T4{}}
	_ = &T4{&T4{}}
	_ = &T5{&T4{}}
	_ = &T6{&T4{}}
	_ = &T7{&T4{}}
	_ = &T8{&T4{}}
	_ = &T9{&T4{}}
	_ = &T12{&T15{}, &T13{}, &T16{}}

	var (
		tn    struct{ Next *T11 }
		tz    struct{ z *struct{ Next *T11 } }
		tpz   *struct{ z *struct{ Next *T11 } }
		tppz  **struct{ z *struct{ Next *T11 } }
		tpppz ***struct{ z *struct{ Next *T11 } }
		ty    struct {
			y ***struct{ z *struct{ Next *T11 } }
		}
	)
	tn.Next = &T11{}
	tz.z = &tn
	tpz = &tz
	tppz = &tpz
	tpppz = &tppz
	ty.y = tpppz
	_ = &T10{ty}

	t19s := &[10]T19{}
	_ = T18(t19s)
}
                                                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug337.go                                                               0100644 0000000 0000000 00000000611 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1722.

// Check that the error messages says 
//	bug337.go:16: len("foo") not used
// and not
//	bug337.go:16: 3 not used

package main

func main() {
	len("foo")	// ERROR "len|value computed is not used"
}

                                                                                                                       usr/local/go/test/fixedbugs/bug338.go                                                               0100644 0000000 0000000 00000000533 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1787.

package main

import "unsafe"

const x = unsafe.Sizeof([8]byte{})

func main() {
	var b [x]int
	_ = b
}

/*
bug338.go:14: array bound must be non-negative
*/
                                                                                                                                                                     usr/local/go/test/fixedbugs/bug339.go                                                               0100644 0000000 0000000 00000000607 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1608.
// Size used to be -1000000000.

package main

import "unsafe"

func main() {
	var a interface{} = 0
	size := unsafe.Sizeof(a)
	if size != 2*unsafe.Sizeof((*int)(nil)) {
		println("wrong size: ", size)
	}
}
                                                                                                                         usr/local/go/test/fixedbugs/bug340.go                                                               0100644 0000000 0000000 00000000566 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1606.

package main

func main() {
	var x interface{}
	switch t := x.(type) {
	case 0:		// ERROR "type"
		t.x = 1 // ERROR "type interface \{\}|reference to undefined field or method"
	}
}
                                                                                                                                          usr/local/go/test/fixedbugs/bug341.go                                                               0100644 0000000 0000000 00000000714 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to panic because 8g was generating incorrect
// code for converting a negative float to a uint64.

package main

func main() {
	var x float32 = -2.5

	_ = uint64(x)
	_ = float32(0)
}
/*
panic: runtime error: floating point error

[signal 0x8 code=0x6 addr=0x8048c64 pc=0x8048c64]
*/
                                                    usr/local/go/test/fixedbugs/bug342.go                                                               0100644 0000000 0000000 00000000573 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1871.

package p

type a interface {
	foo(x int) (x int) // ERROR "duplicate argument|redefinition"
}

/*
Previously:

bug.go:1 x redclared in this block
    previous declaration at bug.go:1
*/
                                                                                                                                     usr/local/go/test/fixedbugs/bug343.go                                                               0100644 0000000 0000000 00000001322 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1900

package main

func getArgs(data map[string]interface{}, keys ...string) map[string]string {
       ret := map[string]string{}
       var ok bool
       for _, k := range keys {
               ret[k], ok = data[k].(string)
               if !ok {}
       }
       return ret
}

func main() {
	x := getArgs(map[string]interface{}{"x":"y"}, "x")
	if x["x"] != "y" {
		println("BUG bug343", x)
	}
}
	

/*
typecheck [1008592b0]
.   INDREG a(1) l(15) x(24) tc(2) runtime.ret G0 string
bug343.go:15: internal compiler error: typecheck INDREG
*/
                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug344.go                                                               0100644 0000000 0000000 00000000723 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func main() {
	// invalid use of goto.
	// do whatever you like, just don't crash.
	i := 42
	a := []*int{&i, &i, &i, &i}
	x := a[0]
	goto start  // ERROR "jumps into block"
	z := 1
	_ = z
	for _, x = range a {	// GCCGO_ERROR "block"
	start:
		fmt.Sprint(*x)
	}
}
                                             usr/local/go/test/fixedbugs/bug345.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016270  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug345.dir/io.go                                                        0100644 0000000 0000000 00000000427 13020111414 017226  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package io

type Writer interface {
	WrongWrite()
}

type SectionReader struct {
	X int
}

func SR(*SectionReader) {}
                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug345.dir/main.go                                                      0100644 0000000 0000000 00000001662 13020111414 017545  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bufio"
	"./io"
	goio "io"
)

func main() {
	// The errors here complain that io.X != io.X
	// for different values of io so they should be
	// showing the full import path, which for the
	// "./io" import is really ..../go/test/io.
	// For example:
	//
	// main.go:25: cannot use w (type "/Users/rsc/g/go/test/fixedbugs/bug345.dir/io".Writer) as type "io".Writer in function argument:
	//	io.Writer does not implement io.Writer (missing Write method)
	// main.go:27: cannot use &x (type *"io".SectionReader) as type *"/Users/rsc/g/go/test/fixedbugs/bug345.dir/io".SectionReader in function argument

	var w io.Writer
	bufio.NewWriter(w)  // ERROR "test/io|has incompatible type"
	var x goio.SectionReader
	io.SR(&x)  // ERROR "test/io|has incompatible type"
}
                                                                              usr/local/go/test/fixedbugs/bug345.go                                                               0100644 0000000 0000000 00000001552 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !nacl,!plan9,!windows
// run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	// TODO: If we get rid of errchk, re-enable this test on Plan 9 and Windows.
	errchk, err := filepath.Abs("errchk")
	check(err)

	err = os.Chdir(filepath.Join(".", "fixedbugs", "bug345.dir"))
	check(err)

	run("go", "tool", "compile", "io.go")
	run(errchk, "go", "tool", "compile", "-e", "main.go")
	os.Remove("io.o")
}

func run(name string, args ...string) {
	cmd := exec.Command(name, args...)
	out, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println(string(out))
		fmt.Println(err)
		os.Exit(1)
	}
}

func check(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
                                                                                                                                                      usr/local/go/test/fixedbugs/bug346.go                                                               0100644 0000000 0000000 00000001347 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "os"

func main() {
	// Test unclosed closure.
	{
		x := 4
		a, b, c, d := func(i int) (p int, q int, r int, s int) { return 1, i, 3, x }(2)

		if a != 1 || b != 2 || c != 3 || d != 4 {
			println("1# abcd: expected 1 2 3 4 got", a, b, c, d)
			os.Exit(1)
		}
	}
	// Test real closure.
	{
		x := 4
		gf = func(i int) (p int, q int, r int, s int) { return 1, i, 3, x }

		a, b, c, d := gf(2)

		if a != 1 || b != 2 || c != 3 || d != 4 {
			println("2# abcd: expected 1 2 3 4 got", a, b, c, d)
			os.Exit(1)
		}
	}
}

var gf func(int) (int, int, int, int)
                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug347.go                                                               0100644 0000000 0000000 00000001462 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"runtime"
	"strings"
)

var t *struct {
	c chan int
}

var c chan int

func f() {
	select {
	case <-t.c:  // THIS IS LINE 22
		break
	case <-c:
		break
	}
}

func main() {
	defer func() {
		recover()
		for i := 0;; i++ {
			pc, file, line, ok := runtime.Caller(i)
			if !ok {
				print("BUG: bug347: cannot find caller\n")
				return
			}
			if !strings.Contains(file, "bug347.go") || runtime.FuncForPC(pc).Name() != "main.f" {
				// walk past runtime frames
				continue
			}
			if line != 22 {
				print("BUG: bug347: panic at ", file, ":", line, " in ", runtime.FuncForPC(pc).Name(), "\n")
			}
			return
		}
	}()
	f()
}
                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug348.go                                                               0100644 0000000 0000000 00000001441 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"runtime"
	"strings"
)

func f() {
	var x *string
	
	for _, i := range *x {  // THIS IS LINE 17
		println(i)
	}
}

func g() {
}

func main() {
	defer func() {
		for i := 0;; i++ {
			pc, file, line, ok := runtime.Caller(i)
			if !ok {
				print("BUG: bug348: cannot find caller\n")
				return
			}
			if !strings.Contains(file, "bug348.go") || runtime.FuncForPC(pc).Name() != "main.f" {
				// walk past runtime frames
				continue
			}
			if line != 17 {
				print("BUG: bug348: panic at ", file, ":", line, " in ", runtime.FuncForPC(pc).Name(), "\n")
				return
			}
			recover()
			return
		}
	}()
	f()
}
                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug349.go                                                               0100644 0000000 0000000 00000000560 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1192 - detail in error

package main

func foo() (a, b, c int) {
	return 0, 1 2.01  // ERROR "unexpected literal 2.01|expected ';' or '}' or newline|not enough arguments to return"
}
                                                                                                                                                usr/local/go/test/fixedbugs/bug350.go                                                               0100644 0000000 0000000 00000000634 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T int

func (T) m() {} // GCCGO_ERROR "previous"
func (T) m() {} // ERROR "T[.]m redeclared|redefinition"

func (*T) p() {} // GCCGO_ERROR "previous"
func (*T) p() {} // ERROR "[(][*]T[)][.]p redeclared|redefinition"
                                                                                                    usr/local/go/test/fixedbugs/bug351.go                                                               0100644 0000000 0000000 00000000426 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var x int

func main() {
	(x) := 0  // ERROR "non-name [(]x[)]|non-name on left side"
}
                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug352.go                                                               0100644 0000000 0000000 00000000552 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var x [10][0]byte
var y = make([]struct{}, 10)

func main() {
	if &x[1] != &x[2] {
		println("BUG: bug352 [0]byte")
	}
	if &y[1] != &y[2] {
		println("BUG: bug352 struct{}")
	}
}
                                                                                                                                                      usr/local/go/test/fixedbugs/bug353.go                                                               0100644 0000000 0000000 00000000760 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 2089 - internal compiler error

package main

import (
	"io"
	"os"
)

func echo(fd io.ReadWriterCloser) { // ERROR "undefined.*io.ReadWriterCloser"
	var buf [1024]byte
	for {
		n, err := fd.Read(buf)
		if err != nil {
			break
		}
		fd.Write(buf[0:n])
	}
}

func main() {
	fd, _ := os.Open("a.txt")
	echo(fd)
}
                usr/local/go/test/fixedbugs/bug354.go                                                               0100644 0000000 0000000 00000000663 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 2086
// was calling makeclosure twice on the closure

package bug354

type Inner struct {
	F func() error
}

type Outer struct {
	Inners []Inner
}

// calls makeclosure twice on same closure

var Foo = Outer{[]Inner{Inner{func() error { return nil }}}}
                                                                             usr/local/go/test/fixedbugs/bug355.go                                                               0100644 0000000 0000000 00000000440 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var f = func() int {
	type S int
	return 42
}

func main() {
	if f() != 42 {
		panic("BUG: bug355")
	}
}
                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug356.go                                                               0100644 0000000 0000000 00000001247 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1808

package main

func main() {
	var i uint64
	var x int = 12345

	if y := x << (i&5); y != 12345<<0 {
		println("BUG bug344", y)
		return
	}
	
	i++
	if y := x << (i&5); y != 12345<<1 {
		println("BUG bug344a", y)
	}
	
	i = 70
	if y := x << i; y != 0 {
		println("BUG bug344b", y)
	}
	
	i = 1<<32
	if y := x << i; y != 0 {
		println("BUG bug344c", y)
	}
}
	

/*
typecheck [1008592b0]
.   INDREG a(1) l(15) x(24) tc(2) runtime.ret G0 string
bug343.go:15: internal compiler error: typecheck INDREG
*/
                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug357.go                                                               0100644 0000000 0000000 00000000702 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1993.
// error used to have last line number in file

package main

func bla1() bool {
	return false
}

func bla5() bool {
	_ = 1
	false  // ERROR "false evaluated but not used|value computed is not used"
	_ = 2
	return false
}

func main() {
	x := bla1()
	_ = x
}
                                                              usr/local/go/test/fixedbugs/bug358.go                                                               0100644 0000000 0000000 00000001121 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1979
// used to get internal compiler error too

package main

import (
	// avoid imported and not used errors
	// "io/ioutil"
	"net/http"
	// "os"
)

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request)  // ERROR "syntax error|not an expression|invalid use of type"
}

type Page struct {
	Title string
	Body []byte
}

                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug361.go                                                               0100644 0000000 0000000 00000000462 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1908
// unreasonable width used to be internal fatal error

package test

func main() {
	buf := [1<<30]byte{}
	_ = buf[:]
}
                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug362.go                                                               0100644 0000000 0000000 00000000664 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1662
// iota inside var

package main

var (
	a = iota  // ERROR "undefined: iota|iota is only defined in const"
	b = iota  // ERROR "undefined: iota|iota is only defined in const"
	c = iota  // ERROR "undefined: iota|iota is only defined in const"
)
                                                                            usr/local/go/test/fixedbugs/bug363.go                                                               0100644 0000000 0000000 00000000727 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1664

package main

func main() {
	var i uint = 33
	var a = (1<<i) + 4.5  // ERROR "shift of type float64|invalid.*shift"
	println(a)
	
	var b = (1<<i) + 4.0  // ERROR "shift of type float64|invalid.*shift"
	println(b)

	var c int64 = (1<<i) + 4.0  // ok - it's all int64
	println(c)
}
                                         usr/local/go/test/fixedbugs/bug364.go                                                               0100644 0000000 0000000 00000000713 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

var s string

func accum(args ...interface{}) {
	s += fmt.Sprintln(args...)
}

func f(){
	v := 0.0
	for i := 0; i < 3; i++ {
		v += 0.1
		defer accum(v)
	}
}

func main() {
	f()
	if s != "0.30000000000000004\n0.2\n0.1\n" {
		println("BUG: defer")
		print(s)
	}
}
                                                     usr/local/go/test/fixedbugs/bug365.go                                                               0100644 0000000 0000000 00000000665 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// check that compiler doesn't stop reading struct def
// after first unknown type.

// Fixes issue 2110.

package main

type S struct {
	err foo.Bar // ERROR "undefined|expected package"
	Num int
}

func main() {
	s := S{}
	_ = s.Num // no error here please
}
                                                                           usr/local/go/test/fixedbugs/bug366.go                                                               0100644 0000000 0000000 00000001440 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2206.  Incorrect sign extension of div arguments.

package main

func five(x int64) {
	if x != 5 {
		panic(x)
	}
}

func main() {
       // 5
       five(int64(5 / (5 / 3)))

       // 5
       five(int64(byte(5) / (byte(5) / byte(3))))

       // 5
       var a, b byte = 5, 3
       five(int64(a / (a / b)))
       
       // integer divide by zero in golang.org sandbox
       // 0 on windows/amd64
       x := [3]byte{2, 3, 5}
       five(int64(x[2] / (x[2] / x[1])))

       // integer divide by zero in golang.org sandbox
       // crash on windows/amd64
       y := x[1:3]
       five(int64(y[1] / (y[1] / y[0])))
}                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug367.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016274  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug367.dir/p.go                                                         0100644 0000000 0000000 00000000437 13020111414 017063  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

package p

type T struct{ x int }
type S struct{}

func (p *S) get() {
}

type I interface {
	get()
}

func F(i I) {
	i.get()
}
                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug367.dir/prog.go                                                      0100644 0000000 0000000 00000000650 13020111414 017570  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

package main

import (
	"./p"
)

type T struct{ *p.S }
type I interface {
	get()
}

func main() {
	var t T
	p.F(t)
	var x interface{} = t
	_, ok := x.(I)
	if ok {
		panic("should not satisfy main.I")
	}
	_, ok = x.(p.I)
	if !ok {
		panic("should satisfy p.I")
	}
}
                                                                                        usr/local/go/test/fixedbugs/bug367.go                                                               0100644 0000000 0000000 00000000412 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1536: bug when handling imported interfaces with
// private methods.

package ignored
                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug368.go                                                               0100644 0000000 0000000 00000000700 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// 5g bug used to set up the 0 for -f() before calling f,
// and the call to f smashed the register.

func f(n int) int {
	s := 0
	for i := 0; i < n; i++ {
		s += i>>1
	}
	return s
}

func main() {
	x := -f(100)
	if x != -2450 {
		println(x)
		panic("broken")
	}
}
                                                                usr/local/go/test/fixedbugs/bug369.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016276  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug369.dir/main.go                                                      0100644 0000000 0000000 00000002305 13020111414 017546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"flag"
	"os"
	"runtime"
	"testing"

	fast "./fast"
	slow "./slow"
)

var buf = make([]byte, 1048576)

func BenchmarkFastNonASCII(b *testing.B) {
	for i := 0; i < b.N; i++ {
		fast.NonASCII(buf, 0)
	}
}

func BenchmarkSlowNonASCII(b *testing.B) {
	for i := 0; i < b.N; i++ {
		slow.NonASCII(buf, 0)
	}
}

func main() {
	os.Args = []string{os.Args[0], "-test.benchtime=100ms"}
	flag.Parse()

	rslow := testing.Benchmark(BenchmarkSlowNonASCII)
	rfast := testing.Benchmark(BenchmarkFastNonASCII)
	tslow := rslow.NsPerOp()
	tfast := rfast.NsPerOp()

	// Optimization should be good for at least 2x, but be forgiving.
	// On the ARM simulator we see closer to 1.5x.
	speedup := float64(tslow) / float64(tfast)
	want := 1.8
	if runtime.GOARCH == "arm" {
		want = 1.3
	}
	if speedup < want {
		// TODO(rsc): doesn't work on linux-amd64 or darwin-amd64 builders, nor on
		// a Lenovo x200 (linux-amd64) laptop.
		// println("fast:", tfast, "slow:", tslow, "speedup:", speedup, "want:", want)
		// println("not fast enough")
		// os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug369.dir/pkg.go                                                       0100644 0000000 0000000 00000000442 13020111414 017403  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg

func NonASCII(b []byte, i int) int {
	for i = 0; i < len(b); i++ {
		if b[i] >= 0x80 {
			break
		}
	}
	return i
}

                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug369.go                                                               0100644 0000000 0000000 00000002043 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !nacl,!windows
// run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that compiling with optimization turned on produces faster code.

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	err := os.Chdir(filepath.Join(".", "fixedbugs", "bug369.dir"))
	check(err)

	run("go", "tool", "compile", "-N", "-o", "slow.o", "pkg.go")
	run("go", "tool", "compile", "-o", "fast.o", "pkg.go")
	run("go", "tool", "compile", "-o", "main.o", "main.go")
	run("go", "tool", "link", "-o", "a.exe", "main.o")
	run("." + string(filepath.Separator) + "a.exe")

	os.Remove("slow.o")
	os.Remove("fast.o")
	os.Remove("main.o")
	os.Remove("a.exe")
}

func run(name string, args ...string) {
	cmd := exec.Command(name, args...)
	out, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println(string(out))
		fmt.Println(err)
		os.Exit(1)
	}
}

func check(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug370.go                                                               0100644 0000000 0000000 00000000477 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// issue 2337
// The program deadlocked.

import "runtime"

func main() {
	runtime.GOMAXPROCS(2)
	runtime.GC()
	runtime.GOMAXPROCS(1)
}
                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug371.go                                                               0100644 0000000 0000000 00000000635 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 2343

package main

type T struct{}

func (t *T) pm() {}
func (t T) m()   {}

func main() {
	p := &T{}
	p.pm()
	p.m()

	q := &p
	q.m()  // ERROR "requires explicit dereference"
	q.pm() // ERROR "requires explicit dereference"
}
                                                                                                   usr/local/go/test/fixedbugs/bug372.go                                                               0100644 0000000 0000000 00000000643 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2355
package main

type T struct {}
func (T) m() string { return "T" }

type TT struct {
	T
	m func() string
}


func ff() string { return "ff" }

func main() {
	var tt TT
	tt.m = ff

	if tt.m() != "ff" {
		println(tt.m(), "!= \"ff\"")
	}
}
                                                                                             usr/local/go/test/fixedbugs/bug373.go                                                               0100644 0000000 0000000 00000000767 13020111414 016052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 873, 2162

package foo

func f(x interface{}) {
	switch t := x.(type) {  // ERROR "declared and not used"
	case int:
	}
}

func g(x interface{}) {
	switch t := x.(type) {
	case int:
	case float32:
		println(t)
	}
}

func h(x interface{}) {
	switch t := x.(type) {
	case int:
	case float32:
	default:
		println(t)
	}
}
         usr/local/go/test/fixedbugs/bug374.go                                                               0100644 0000000 0000000 00000000557 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1556
package foo

type I interface {
	m() int
}

type T int

var _ I = T(0)	// GCCGO_ERROR "incompatible"

func (T) m(buf []byte) (a int, b xxxx) {  // ERROR "xxxx"
	return 0, nil
}
                                                                                                                                                 usr/local/go/test/fixedbugs/bug375.go                                                               0100644 0000000 0000000 00000000456 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2423

package main

func main() {
	var x interface{} = "hello"

	switch x {
	case "hello":
	default:
		println("FAIL")
	}
}
                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug376.go                                                               0100644 0000000 0000000 00000000414 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 1951
package foo
import "unsafe"
var v = unsafe.Sizeof  // ERROR "must be called"

                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug377.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016275  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug377.dir/one.go                                                       0100644 0000000 0000000 00000000336 13020111414 017404  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

package one

func Foo() (n int64, _ *int) {
	return 42, nil
}

                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug377.dir/two.go                                                       0100644 0000000 0000000 00000000276 13020111414 017437  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

package two

import _ "./one"

                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug377.go                                                               0100644 0000000 0000000 00000000316 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1802

package ignored
                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug378.go                                                               0100644 0000000 0000000 00000000522 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2497

package main

type Header struct{}
func (h Header) Method() {}

var _ interface{} = Header{}

func main() {
  	type X Header
  	var _ interface{} = X{}
}
                                                                                                                                                                              usr/local/go/test/fixedbugs/bug379.go                                                               0100644 0000000 0000000 00000000630 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2452.

// Check that the error messages says 
//	bug378.go:17: 1 + 2 not used
// and not
//	bug378.go:17: 1 not used

package main

func main() {
	1 + 2 // ERROR "1 \+ 2 evaluated but not used|value computed is not used"
}
                                                                                                        usr/local/go/test/fixedbugs/bug380.go                                                               0100644 0000000 0000000 00000000411 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to cause a typechecking loop error.

package pkg
type T map[int]string
var q = &T{}
                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug381.go                                                               0100644 0000000 0000000 00000001354 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2276.

// Check that the error messages says 
//	bug381.go:29: unsafe.Alignof(0) not used
// and not
//	bug381.go:29: 4 not used

// Issue 2768: previously got
//    bug381.go:30: cannot use 3 (type time.Weekday) as type int in function argument
// want
//    bug381.go:30: cannot use time.Wednesday (type time.Weekday) as type int in function argument

package main

import (
	"time"
	"unsafe"
)

func f(int)

func main() {
	unsafe.Alignof(0) // ERROR "unsafe\.Alignof|value computed is not used"
	f(time.Wednesday) // ERROR "time.Wednesday|incompatible type"
}
                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug382.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016271  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug382.dir/pkg.go                                                       0100644 0000000 0000000 00000000306 13020111414 017375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg
type T struct {}
var E T
                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug382.dir/prog.go                                                      0100644 0000000 0000000 00000000374 13020111414 017570  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

// Issue 2529

package main

import "./pkg"

var x = pkg.E

var fo = struct{ F pkg.T }{F: x}
                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug382.go                                                               0100644 0000000 0000000 00000000316 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file

// Issue 2529.

package ignored
                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug383.go                                                               0100644 0000000 0000000 00000000500 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2520

package main
func main() {
	if 2e9 { }      // ERROR "2e.09|expected bool"
	if 3.14+1i { }  // ERROR "3.14 . 1i|expected bool"
}
                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug384.go                                                               0100644 0000000 0000000 00000000544 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2500

package foo

// Check that we only get root cause message, no further complaints about r undefined
func (r *indexWriter) foo() {}  // ERROR "undefined.*indexWriter"
                                                                                                                                                            usr/local/go/test/fixedbugs/bug385_32.go                                                            0100644 0000000 0000000 00000000521 13020111414 016345  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build 386 amd64p32 arm
// errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2444

package main
func main() {
	var arr [1000200030]int   // GC_ERROR "type .* too large"
	arr_bkup := arr
	_ = arr_bkup
}
                                                                                                                                                                               usr/local/go/test/fixedbugs/bug385_64.go                                                            0100644 0000000 0000000 00000015505 13020111414 016362  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build amd64
// errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2444
// Issue 4666: issue with arrays of exactly 4GB.

package main

var z [10<<20]byte

func main() { // GC_ERROR "stack frame too large"
	// seq 1 206 | sed 's/.*/	var x& [10<<20]byte; z = x&/'
	var x1 [10<<20]byte; z = x1
	var x2 [10<<20]byte; z = x2
	var x3 [10<<20]byte; z = x3
	var x4 [10<<20]byte; z = x4
	var x5 [10<<20]byte; z = x5
	var x6 [10<<20]byte; z = x6
	var x7 [10<<20]byte; z = x7
	var x8 [10<<20]byte; z = x8
	var x9 [10<<20]byte; z = x9
	var x10 [10<<20]byte; z = x10
	var x11 [10<<20]byte; z = x11
	var x12 [10<<20]byte; z = x12
	var x13 [10<<20]byte; z = x13
	var x14 [10<<20]byte; z = x14
	var x15 [10<<20]byte; z = x15
	var x16 [10<<20]byte; z = x16
	var x17 [10<<20]byte; z = x17
	var x18 [10<<20]byte; z = x18
	var x19 [10<<20]byte; z = x19
	var x20 [10<<20]byte; z = x20
	var x21 [10<<20]byte; z = x21
	var x22 [10<<20]byte; z = x22
	var x23 [10<<20]byte; z = x23
	var x24 [10<<20]byte; z = x24
	var x25 [10<<20]byte; z = x25
	var x26 [10<<20]byte; z = x26
	var x27 [10<<20]byte; z = x27
	var x28 [10<<20]byte; z = x28
	var x29 [10<<20]byte; z = x29
	var x30 [10<<20]byte; z = x30
	var x31 [10<<20]byte; z = x31
	var x32 [10<<20]byte; z = x32
	var x33 [10<<20]byte; z = x33
	var x34 [10<<20]byte; z = x34
	var x35 [10<<20]byte; z = x35
	var x36 [10<<20]byte; z = x36
	var x37 [10<<20]byte; z = x37
	var x38 [10<<20]byte; z = x38
	var x39 [10<<20]byte; z = x39
	var x40 [10<<20]byte; z = x40
	var x41 [10<<20]byte; z = x41
	var x42 [10<<20]byte; z = x42
	var x43 [10<<20]byte; z = x43
	var x44 [10<<20]byte; z = x44
	var x45 [10<<20]byte; z = x45
	var x46 [10<<20]byte; z = x46
	var x47 [10<<20]byte; z = x47
	var x48 [10<<20]byte; z = x48
	var x49 [10<<20]byte; z = x49
	var x50 [10<<20]byte; z = x50
	var x51 [10<<20]byte; z = x51
	var x52 [10<<20]byte; z = x52
	var x53 [10<<20]byte; z = x53
	var x54 [10<<20]byte; z = x54
	var x55 [10<<20]byte; z = x55
	var x56 [10<<20]byte; z = x56
	var x57 [10<<20]byte; z = x57
	var x58 [10<<20]byte; z = x58
	var x59 [10<<20]byte; z = x59
	var x60 [10<<20]byte; z = x60
	var x61 [10<<20]byte; z = x61
	var x62 [10<<20]byte; z = x62
	var x63 [10<<20]byte; z = x63
	var x64 [10<<20]byte; z = x64
	var x65 [10<<20]byte; z = x65
	var x66 [10<<20]byte; z = x66
	var x67 [10<<20]byte; z = x67
	var x68 [10<<20]byte; z = x68
	var x69 [10<<20]byte; z = x69
	var x70 [10<<20]byte; z = x70
	var x71 [10<<20]byte; z = x71
	var x72 [10<<20]byte; z = x72
	var x73 [10<<20]byte; z = x73
	var x74 [10<<20]byte; z = x74
	var x75 [10<<20]byte; z = x75
	var x76 [10<<20]byte; z = x76
	var x77 [10<<20]byte; z = x77
	var x78 [10<<20]byte; z = x78
	var x79 [10<<20]byte; z = x79
	var x80 [10<<20]byte; z = x80
	var x81 [10<<20]byte; z = x81
	var x82 [10<<20]byte; z = x82
	var x83 [10<<20]byte; z = x83
	var x84 [10<<20]byte; z = x84
	var x85 [10<<20]byte; z = x85
	var x86 [10<<20]byte; z = x86
	var x87 [10<<20]byte; z = x87
	var x88 [10<<20]byte; z = x88
	var x89 [10<<20]byte; z = x89
	var x90 [10<<20]byte; z = x90
	var x91 [10<<20]byte; z = x91
	var x92 [10<<20]byte; z = x92
	var x93 [10<<20]byte; z = x93
	var x94 [10<<20]byte; z = x94
	var x95 [10<<20]byte; z = x95
	var x96 [10<<20]byte; z = x96
	var x97 [10<<20]byte; z = x97
	var x98 [10<<20]byte; z = x98
	var x99 [10<<20]byte; z = x99
	var x100 [10<<20]byte; z = x100
	var x101 [10<<20]byte; z = x101
	var x102 [10<<20]byte; z = x102
	var x103 [10<<20]byte; z = x103
	var x104 [10<<20]byte; z = x104
	var x105 [10<<20]byte; z = x105
	var x106 [10<<20]byte; z = x106
	var x107 [10<<20]byte; z = x107
	var x108 [10<<20]byte; z = x108
	var x109 [10<<20]byte; z = x109
	var x110 [10<<20]byte; z = x110
	var x111 [10<<20]byte; z = x111
	var x112 [10<<20]byte; z = x112
	var x113 [10<<20]byte; z = x113
	var x114 [10<<20]byte; z = x114
	var x115 [10<<20]byte; z = x115
	var x116 [10<<20]byte; z = x116
	var x117 [10<<20]byte; z = x117
	var x118 [10<<20]byte; z = x118
	var x119 [10<<20]byte; z = x119
	var x120 [10<<20]byte; z = x120
	var x121 [10<<20]byte; z = x121
	var x122 [10<<20]byte; z = x122
	var x123 [10<<20]byte; z = x123
	var x124 [10<<20]byte; z = x124
	var x125 [10<<20]byte; z = x125
	var x126 [10<<20]byte; z = x126
	var x127 [10<<20]byte; z = x127
	var x128 [10<<20]byte; z = x128
	var x129 [10<<20]byte; z = x129
	var x130 [10<<20]byte; z = x130
	var x131 [10<<20]byte; z = x131
	var x132 [10<<20]byte; z = x132
	var x133 [10<<20]byte; z = x133
	var x134 [10<<20]byte; z = x134
	var x135 [10<<20]byte; z = x135
	var x136 [10<<20]byte; z = x136
	var x137 [10<<20]byte; z = x137
	var x138 [10<<20]byte; z = x138
	var x139 [10<<20]byte; z = x139
	var x140 [10<<20]byte; z = x140
	var x141 [10<<20]byte; z = x141
	var x142 [10<<20]byte; z = x142
	var x143 [10<<20]byte; z = x143
	var x144 [10<<20]byte; z = x144
	var x145 [10<<20]byte; z = x145
	var x146 [10<<20]byte; z = x146
	var x147 [10<<20]byte; z = x147
	var x148 [10<<20]byte; z = x148
	var x149 [10<<20]byte; z = x149
	var x150 [10<<20]byte; z = x150
	var x151 [10<<20]byte; z = x151
	var x152 [10<<20]byte; z = x152
	var x153 [10<<20]byte; z = x153
	var x154 [10<<20]byte; z = x154
	var x155 [10<<20]byte; z = x155
	var x156 [10<<20]byte; z = x156
	var x157 [10<<20]byte; z = x157
	var x158 [10<<20]byte; z = x158
	var x159 [10<<20]byte; z = x159
	var x160 [10<<20]byte; z = x160
	var x161 [10<<20]byte; z = x161
	var x162 [10<<20]byte; z = x162
	var x163 [10<<20]byte; z = x163
	var x164 [10<<20]byte; z = x164
	var x165 [10<<20]byte; z = x165
	var x166 [10<<20]byte; z = x166
	var x167 [10<<20]byte; z = x167
	var x168 [10<<20]byte; z = x168
	var x169 [10<<20]byte; z = x169
	var x170 [10<<20]byte; z = x170
	var x171 [10<<20]byte; z = x171
	var x172 [10<<20]byte; z = x172
	var x173 [10<<20]byte; z = x173
	var x174 [10<<20]byte; z = x174
	var x175 [10<<20]byte; z = x175
	var x176 [10<<20]byte; z = x176
	var x177 [10<<20]byte; z = x177
	var x178 [10<<20]byte; z = x178
	var x179 [10<<20]byte; z = x179
	var x180 [10<<20]byte; z = x180
	var x181 [10<<20]byte; z = x181
	var x182 [10<<20]byte; z = x182
	var x183 [10<<20]byte; z = x183
	var x184 [10<<20]byte; z = x184
	var x185 [10<<20]byte; z = x185
	var x186 [10<<20]byte; z = x186
	var x187 [10<<20]byte; z = x187
	var x188 [10<<20]byte; z = x188
	var x189 [10<<20]byte; z = x189
	var x190 [10<<20]byte; z = x190
	var x191 [10<<20]byte; z = x191
	var x192 [10<<20]byte; z = x192
	var x193 [10<<20]byte; z = x193
	var x194 [10<<20]byte; z = x194
	var x195 [10<<20]byte; z = x195
	var x196 [10<<20]byte; z = x196
	var x197 [10<<20]byte; z = x197
	var x198 [10<<20]byte; z = x198
	var x199 [10<<20]byte; z = x199
	var x200 [10<<20]byte; z = x200
	var x201 [10<<20]byte; z = x201
	var x202 [10<<20]byte; z = x202
	var x203 [10<<20]byte; z = x203
	var x204 [10<<20]byte; z = x204
	var x205 [10<<20]byte; z = x205
	var x206 [10<<20]byte; z = x206
}
                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug386.go                                                               0100644 0000000 0000000 00000000562 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2451, 2452 
package foo

func f() error { return 0 } // ERROR "cannot use 0 .type int.|has no methods"

func g() error { return -1 }  // ERROR "cannot use -1 .type int.|has no methods"
                                                                                                                                              usr/local/go/test/fixedbugs/bug387.go                                                               0100644 0000000 0000000 00000001162 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2549

/*  Used to die with
missing typecheck: [7f5bf07b4438]

.   AS l(45)
.   .   NAME-main.autotmp_0017 u(1) a(1) l(45) x(0+0) class(PAUTO)
esc(N) tc(1) used(1) ARRAY-[2]string
internal compiler error: missing typecheck 
*/
package main

import (
        "fmt"
        "path/filepath"
)

func main() {
        switch _, err := filepath.Glob(filepath.Join(".", "vnc")); {
        case err != nil:
                fmt.Println(err)
        }
}

                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug388.go                                                               0100644 0000000 0000000 00000001740 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2231

package main
import "runtime"

func foo(runtime.UintType, i int) {  // ERROR "cannot declare name runtime.UintType|named/anonymous mix|undefined identifier"
	println(i, runtime.UintType) // GCCGO_ERROR "undefined identifier"
}

func bar(i int) {
	runtime.UintType := i       // ERROR "cannot declare name runtime.UintType|non-name on left side|undefined identifier"
	println(runtime.UintType)	// GCCGO_ERROR "invalid use of type|undefined identifier"
}

func baz() {
	main.i := 1	// ERROR "non-name main.i|non-name on left side"
	println(main.i)	// GCCGO_ERROR "no fields or methods"
}

func qux() {
	var main.i	// ERROR "unexpected [.]|expected type"
	println(main.i)
}

func corge() {
	var foo.i int  // ERROR "unexpected [.]|expected type"
	println(foo.i)
}

func main() {
	foo(42,43)
	bar(1969)
}
                                usr/local/go/test/fixedbugs/bug389.go                                                               0100644 0000000 0000000 00000000544 13020111414 016052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2563
package foo

func fn(a float32) {}

var f func(arg int) = fn  // ERROR "cannot use fn .type func.float32.. as type func.int. in assignment|different parameter types"
                                                                                                                                                            usr/local/go/test/fixedbugs/bug390.go                                                               0100644 0000000 0000000 00000000677 13020111414 016051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2627 -- unsafe.Pointer type isn't handled nicely in some errors

package main

import "unsafe"

func main() {
	var x *int
	_ = unsafe.Pointer(x) - unsafe.Pointer(x) // ERROR "operator - not defined on unsafe.Pointer|expected integer, floating, or complex type"
}
                                                                 usr/local/go/test/fixedbugs/bug391.go                                                               0100644 0000000 0000000 00000000423 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2576
package bug

type T struct { a int }

func f(t T) {
        switch _, _ = t.a, t.a; {}
}                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug392.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016272  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug392.dir/one.go                                                       0100644 0000000 0000000 00000001524 13020111414 017401  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Functions that the inliner exported incorrectly.

package one

type T int

// Issue 2678
func F1(T *T) bool { return T == nil }

// Issue 2682.
func F2(c chan int) bool { return c == (<-chan int)(nil) }

// Use of single named return value.
func F3() (ret []int) { return append(ret, 1) }

// Call of inlined method with blank receiver.
func (_ *T) M() int { return 1 }
func (t *T) MM() int { return t.M() }


// One more like issue 2678
type S struct { x, y int }
type U []S

func F4(S int) U { return U{{S,S}} }

func F5() []*S {
	return []*S{ {1,2}, { 3, 4} }
}

func F6(S int) *U {
	return &U{{S,S}}
}

// Bug in the fix.

type PB struct { x int }

func (t *PB) Reset() { *t = PB{} }
                                                                                                                                                                            usr/local/go/test/fixedbugs/bug392.dir/pkg2.go                                                      0100644 0000000 0000000 00000000626 13020111414 017465  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use the functions in one.go so that the inlined
// forms get type-checked.

package pkg2

import "./one"

func use() {
	one.F1(nil)
	one.F2(nil)
	one.F3()
	one.F4(1)

	var t *one.T
	t.M()
	t.MM()
}

var V = []one.PB{{}, {}}

func F() *one.PB
                                                                                                          usr/local/go/test/fixedbugs/bug392.dir/pkg3.go                                                      0100644 0000000 0000000 00000000460 13020111414 017462  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use the functions in pkg2.go so that the inlined
// forms get type-checked.

package pkg3

import "./pkg2"

var x = pkg2.F()
var v = pkg2.V
                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug392.go                                                               0100644 0000000 0000000 00000000277 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug393.go                                                               0100644 0000000 0000000 00000000716 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 2672
// was trying binary search with an interface type

package bug393

func f(x interface{}) int {
	switch x {
	case 1:
		return 1
	case 2:
		return 2
	case 3:
		return 3
	case 4:
		return 4
	case "5":
		return 5
	case "6":
		return 6
	default:
		return 7
	}
	panic("switch")
}
                                                  usr/local/go/test/fixedbugs/bug394.go                                                               0100644 0000000 0000000 00000000446 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2598
package foo

return nil // ERROR "non-declaration statement outside function body|expected declaration"
                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug396.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016276  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug396.dir/one.go                                                       0100644 0000000 0000000 00000000365 13020111414 017407  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package one

// Issue 2687
type T struct { int }

func New(i int) T { return T{i} }
                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug396.dir/two.go                                                       0100644 0000000 0000000 00000000453 13020111414 017435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use the functions in one.go so that the inlined
// forms get type-checked.

package two

import "./one"

func use() {
	_ = one.New(1)
}                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug396.go                                                               0100644 0000000 0000000 00000000277 13020111414 016053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug397.go                                                               0100644 0000000 0000000 00000000474 13020111414 016053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Issue 2623
var m = map[string]int {
	"abc":1,
	1:2, // ERROR "cannot use 1.*as type string in map key|incompatible type"
}
                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug398.go                                                               0100644 0000000 0000000 00000000630 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to crash compiler in interface type equality check.

package p

type I1 interface {
      F() interface{I1}
}

type I2 interface {
      F() interface{I2}
}       

var v1 I1
var v2 I2

func f() bool {
       return v1 == v2
}
                                                                                                        usr/local/go/test/fixedbugs/bug399.go                                                               0100644 0000000 0000000 00000000410 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2674

package main
const dow = "\000\003"

func main() {
	println(int(dow[1]))
}

                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug401.go                                                               0100644 0000000 0000000 00000001345 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2011 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2582
package main

type T struct{}

//go:noinline
func (T) cplx() complex128 {
	return complex(1, 0)
}

func (T) cplx2() complex128 {
	return complex(0, 1)
}

type I interface {
	cplx() complex128
}

func main() {

	var t T

	if v := real(t.cplx()); v != 1 {
		panic("not-inlined complex call failed")
	}
	_ = imag(t.cplx())

	_ = real(t.cplx2())
	if v := imag(t.cplx2()); v != 1 {
		panic("potentially inlined complex call failed")
	}

	var i I
	i = t
	if v := real(i.cplx()); v != 1 {
		panic("potentially inlined complex call failed")
	}
	_ = imag(i.cplx())
}
                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug402.go                                                               0100644 0000000 0000000 00000001007 13020111414 016027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

var a = []int64{
	0.0005 * 1e9,
	0.001 * 1e9,
	0.005 * 1e9,
	0.01 * 1e9,
	0.05 * 1e9,
	0.1 * 1e9,
	0.5 * 1e9,
	1 * 1e9,
	5 * 1e9,
}

func main() {
	s := ""
	for _, v := range a {
		s += fmt.Sprint(v) + " "
	}
	if s != "500000 1000000 5000000 10000000 50000000 100000000 500000000 1000000000 5000000000 " {
		panic(s)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug403.go                                                               0100644 0000000 0000000 00000000526 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Crashed gccgo.

package p

type S struct {
	f interface{}
}

func F(p *S) bool {
	v := p.f
	switch a := v.(type) {
	case nil:
		_ = a
		return true
	}
	return true
}
                                                                                                                                                                          usr/local/go/test/fixedbugs/bug404.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016264  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug404.dir/one.go                                                       0100644 0000000 0000000 00000000437 13020111414 017375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package one

type T1 int
type T2 []T1
type T3 T2

func F1(T2) {
}

func (p *T1) M1() T3 {
	return nil
}

func (p T3) M2() {
}
                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug404.dir/two.go                                                       0100644 0000000 0000000 00000000501 13020111414 017415  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo compiler would fail on the import statement.
// two.go:10:13: error: use of undefined type â€˜one.T2â€™

package two

import "./one"

var V one.T3
                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug404.go                                                               0100644 0000000 0000000 00000000277 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug405.go                                                               0100644 0000000 0000000 00000000557 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test using _ receiver.  Failed with gccgo.

package main

type S struct {}

func (_ S) F(i int) int {
	return i
}

func main() {
	s := S{}
	const c = 123
	i := s.F(c)
	if i != c {
		panic(i)
	}
}
                                                                                                                                                 usr/local/go/test/fixedbugs/bug406.go                                                               0100644 0000000 0000000 00000000620 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2821
package main

type matrix struct {
	e []int
}

func (a matrix) equal() bool {
	for _ = range a.e {
	}
	for range a.e {
	}
	return true
}

func main() {
	var a matrix
	var i interface{}
	i = true && a.equal()
	_ = i
}
                                                                                                                usr/local/go/test/fixedbugs/bug407.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016267  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug407.dir/one.go                                                       0100644 0000000 0000000 00000000572 13020111414 017400  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package one

// Issue 2877
type T struct {
	f func(t *T, arg int)
	g func(t T, arg int)
}

func (t *T) foo(arg int) {}
func (t T) goo(arg int) {}

func (t *T) F() { t.f = (*T).foo }
func (t *T) G() { t.g = T.goo }



                                                                                                                                      usr/local/go/test/fixedbugs/bug407.dir/two.go                                                       0100644 0000000 0000000 00000000460 13020111414 017424  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use the functions in one.go so that the inlined
// forms get type-checked.

package two

import "./one"

func use() {
	var r one.T
	r.F()
}
                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug407.go                                                               0100644 0000000 0000000 00000000277 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug409.go                                                               0100644 0000000 0000000 00000000664 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // cmpout

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Multiple inlined calls to a function that causes
// redundant address loads.

package main

func F(v [2]float64) [2]float64 {
	return [2]float64{v[0], v[1]}
}

func main() {
	a := F([2]float64{1, 2})
	b := F([2]float64{3, 4})
	println(a[0], a[1], b[0], b[1])
}
                                                                            usr/local/go/test/fixedbugs/bug409.out                                                              0100644 0000000 0000000 00000000074 13020111414 016243  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        +1.000000e+000 +2.000000e+000 +3.000000e+000 +4.000000e+000
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug410.go                                                               0100644 0000000 0000000 00000000730 13020111414 016030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to run 6g out of registers.  Issue 2669.

package p

type y struct {
	num int
}

func zzz () {
    k := make([]byte, 10)
	arr := make ([]*y, 0)
    for s := range arr {
        x := make([]byte, 10)
        for i := 0; i < 100 ; i++ {
            x[i] ^= k[i-arr[s].num%3]
        }
    }
}
                                        usr/local/go/test/fixedbugs/bug411.go                                                               0100644 0000000 0000000 00000000667 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2588.  Used to trigger internal compiler error on 8g,
// because the compiler tried to registerize the int64 being
// used as a memory operand of a int64->float64 move.

package p

func f1(a int64) {
	f2(float64(a), float64(a))
}

func f2(a,b float64) {
}

                                                                         usr/local/go/test/fixedbugs/bug412.go                                                               0100644 0000000 0000000 00000000557 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type t struct {
	x int  // GCCGO_ERROR "duplicate field name .x."
	x int  // GC_ERROR "duplicate field x"
}

func f(t *t) int {
	return t.x  // GC_ERROR "ambiguous selector t.x"
}
                                                                                                                                                 usr/local/go/test/fixedbugs/bug413.go                                                               0100644 0000000 0000000 00000000472 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func f(i int) int { return i }

var i = func() int {a := f(i); return a}()  // ERROR "initialization loop|depends upon itself"
                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug414.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016265  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug414.dir/p1.go                                                        0100644 0000000 0000000 00000000536 13020111414 017135  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

import "fmt"

type Fer interface {
	f() string
}

type Object struct{}

func (this *Object) f() string {
	return "Object.f"
}

func PrintFer(fer Fer) {
	fmt.Sprintln(fer.f())
}
                                                                                                                                                                  usr/local/go/test/fixedbugs/bug414.dir/prog.go                                                      0100644 0000000 0000000 00000000512 13020111414 017556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./p1"

type MyObject struct {
	p1.Fer
}

func main() {
	var b p1.Fer = &p1.Object{}
	p1.PrintFer(b)
	var c p1.Fer = &MyObject{b}
	p1.PrintFer(c)
}
                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug414.go                                                               0100644 0000000 0000000 00000000403 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1743: test embedding of imported types with private methods.

package ignored
                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug415.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016266  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug415.dir/p.go                                                         0100644 0000000 0000000 00000000371 13020111414 017052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type A struct {
	s struct{int}
}

func (a *A) f() {
	a.s = struct{int}{0}
}

                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug415.dir/prog.go                                                      0100644 0000000 0000000 00000000325 13020111414 017561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main
import "./p"
func main() {}
var _ p.A

                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug415.go                                                               0100644 0000000 0000000 00000000401 13020111414 016030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2716.  Export metadata error made main.go not compile.

package ignored
                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug416.go                                                               0100644 0000000 0000000 00000000471 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type T struct {
	X int
}

func (t *T) X() {} // ERROR "type T has both field and method named X|redeclares struct field name"
                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug417.go                                                               0100644 0000000 0000000 00000001242 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Some indirect uses of types crashed gccgo, because it assumed that
// the size of the type was known before it had been computed.

package p

type S1 struct {
	p *[1]S3
	s [][1]S3
	m map[int][1]S3
	c chan [1]S3
	i interface { f([1]S3) [1]S3 }
	f func([1]S3) [1]S3
}

type S2 struct {
	p *struct { F S3 }
	s []struct { F S3 }
	m map[int]struct { F S3 }
	c chan struct { F S3 }
	i interface { f(struct { F S3 }) struct { F S3 } }
	f func(struct { F S3 } ) struct { F S3 }
}

type S3 struct {
	I int
}
                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug418.go                                                               0100644 0000000 0000000 00000001031 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3044.
// Multiple valued expressions in return lists.

package p

func Two() (a, b int)

// F used to compile.
func F() (x interface{}, y int) {
	return Two(), 0 // ERROR "single-value context"
}

// Recursive used to trigger an internal compiler error.
func Recursive() (x interface{}, y int) {
	return Recursive(), 0 // ERROR "single-value context"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug419.go                                                               0100644 0000000 0000000 00000000427 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1811.
// gccgo failed to compile this.

package p

type E interface{}

type I interface {
	E
	E
}
                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug420.go                                                               0100644 0000000 0000000 00000000410 13020111414 016024  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1757.
// gccgo failed to compile this.

package main

func main() {
     (_) = 0
}
                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug421.go                                                               0100644 0000000 0000000 00000000575 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 1927.
// gccgo failed to issue the first error below.

package main

func main() {
	println(int(1) == uint(1))	// ERROR "types"
	var x int = 1
	var y uint = 1
	println(x == y)			// ERROR "types"
}
                                                                                                                                   usr/local/go/test/fixedbugs/bug422.go                                                               0100644 0000000 0000000 00000000360 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gccgo crashed compiling this file.

package p

var V = "a" > "b"
                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug423.go                                                               0100644 0000000 0000000 00000004411 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gc used to overflow a counter when a variable was
// mentioned 256 times, and generate stack corruption.

package main

func main() {
	F(1)
}

func F(arg int) {
	var X interface{}
	_ = X // used once
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 32 times
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 64 times
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 96 times
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 128 times
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 200 times
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0
	X = 0 // used 256 times
	if arg != 1 {
		panic("argument was changed")
	}
}
                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug424.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016266  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug424.dir/lib.go                                                       0100644 0000000 0000000 00000000500 13020111414 017353  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package lib

type I interface {
	m() string
}

type T struct{}

// m is not accessible from outside this package.
func (t *T) m() string {
	return "lib.T.m"
}
                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug424.dir/main.go                                                      0100644 0000000 0000000 00000003216 13020111414 017540  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Tests that method calls through an interface always
// call the locally defined method localT.m independent
// at which embedding level it is and in which order
// embedding is done.

package main

import "./lib"
import "reflect"
import "fmt"

type localI interface {
	m() string
}

type localT struct{}

func (t *localT) m() string {
	return "main.localT.m"
}

type myT1 struct {
	localT
}

type myT2 struct {
	localT
	lib.T
}

type myT3 struct {
	lib.T
	localT
}

func main() {
	var i localI

	i = new(localT)
	if i.m() != "main.localT.m" {
		println("BUG: localT:", i.m(), "called")
	}

	i = new(myT1)
	if i.m() != "main.localT.m" {
		println("BUG: myT1:", i.m(), "called")
	}

	i = new(myT2)
	if i.m() != "main.localT.m" {
		println("BUG: myT2:", i.m(), "called")
	}

	t3 := new(myT3)
	if t3.m() != "main.localT.m" {
		println("BUG: t3:", t3.m(), "called")
	}
	
	i = new(myT3)
	if i.m() != "main.localT.m" {
		t := reflect.TypeOf(i)
		n := t.NumMethod()
		for j := 0; j < n; j++ {
			m := t.Method(j)
			fmt.Printf("#%d: %s.%s %s\n", j, m.PkgPath, m.Name, m.Type)
		}
		println("BUG: myT3:", i.m(), "called")
	}
	
	var t4 struct {
		localT
		lib.T
	}
	if t4.m() != "main.localT.m" {
		println("BUG: t4:", t4.m(), "called")
	}
	i = &t4
	if i.m() != "main.localT.m" {
		println("BUG: myT4:", i.m(), "called")
	}
	
	var t5 struct {
		lib.T
		localT
	}
	if t5.m() != "main.localT.m" {
		println("BUG: t5:", t5.m(), "called")
	}
	i = &t5
	if i.m() != "main.localT.m" {
		println("BUG: myT5:", i.m(), "called")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug424.go                                                               0100644 0000000 0000000 00000000570 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Tests that method calls through an interface always
// call the locally defined method localT.m independent
// at which embedding level it is and in which order
// embedding is done.

package ignored

                                                                                                                                        usr/local/go/test/fixedbugs/bug425.go                                                               0100644 0000000 0000000 00000000503 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/3119

package main

import "fmt"

func main() {
	s := "hello"
	fmt.Println(s == "")
	fmt.Println(s + "world" == "world")
}
                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug426.go                                                               0100644 0000000 0000000 00000000404 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gccgo crashed compiling this.

package p

type T *T

func f(t T) {
	println(t, *t)
}
                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug427.go                                                               0100644 0000000 0000000 00000001146 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://golang.org/issue/3351

package main

// struct with four fields of basic type
type S struct {a, b, c, d int}

// struct with five fields of basic type
type T struct {a, b, c, d, e int}

// array with four elements
type A [4]int

// array with five elements
type B [5]int

func main() {
	var i interface{}

	var s1, s2 S
	i = s1 == s2

	var t1, t2 T
	i = t1 == t2

	var a1, a2 A
	i = a1 == a2

	var b1, b2 B
	i = b1 == b2

	_ = i
}
                                                                                                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug428.go                                                               0100644 0000000 0000000 00000000700 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that when the compiler expands append inline it does not
// overwrite a value before it needs it (issue 3369).

package main

func main() {
	s := make([]byte, 5, 6)
	copy(s, "12346")
	s = append(s[:len(s)-1], '5', s[len(s)-1])
	if string(s) != "123456" {
		panic(s)
	}
}
                                                                usr/local/go/test/fixedbugs/bug429.go                                                               0100644 0000000 0000000 00000000446 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // skip

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Should print deadlock message, not hang.
// This test is run by bug429_run.go.

package main

func main() {
	select {}
}
                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug429_run.go                                                           0100644 0000000 0000000 00000001244 13020111414 016727  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !nacl
// run

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Run the bug429.go test.

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	cmd := exec.Command("go", "run", filepath.Join("fixedbugs", "bug429.go"))
	out, err := cmd.CombinedOutput()
	if err == nil {
		fmt.Println("expected deadlock")
		os.Exit(1)
	}

	want := "fatal error: all goroutines are asleep - deadlock!"
	got := string(out)
	if !strings.Contains(got, want) {
		fmt.Printf("got:\n%q\nshould contain:\n%q\n", got, want)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug430.go                                                               0100644 0000000 0000000 00000000507 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gccgo crashed compiling this.

package main

type S struct {
	f [2][]int
}

func F() (r [2][]int) {
	return
}

func main() {
	var a []S
	a[0].f = F()
}
                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug431.go                                                               0100644 0000000 0000000 00000000557 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gccgo gave an invalid error ("floating point constant truncated to
// integer") compiling this.

package p

const C = 1<<63 - 1

func F(i int64) int64 {
	return i
}

var V = F(int64(C) / 1e6)
                                                                                                                                                 usr/local/go/test/fixedbugs/bug432.go                                                               0100644 0000000 0000000 00000000377 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// gccgo crashed compiling this.

package p

var v struct{ I }

type I interface{}
                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug433.go                                                               0100644 0000000 0000000 00000001050 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that initializing struct fields out of order still runs
// functions in the right order.  This failed with gccgo.

package main

type S struct {
	i1, i2, i3 int
}

var G int

func v(i int) int {
	if i != G {
		panic(i)
	}
	G = i + 1
	return G
}

func F() S {
	return S{
		i1: v(0),
		i3: v(1),
		i2: v(2),
	}
}

func main() {
	s := F()
	if s != (S{1, 3, 2}) {
		panic(s)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug434.go                                                               0100644 0000000 0000000 00000001065 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that typed and untyped negative zero floating point constants
// are treated as equivalent to zero constants.

package main

import "math"

const zero = 0.0

func main() {
	x := -zero
	b := math.Float64bits(x)
	if b != 0 {
		panic(b)
	}
	x = -float64(zero)
	b = math.Float64bits(x)
	if b != 0 {
		panic(b)
	}
	v := x
	b = math.Float64bits(-v)
	if b != 0x8000000000000000 {
		panic(b)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug435.go                                                               0100644 0000000 0000000 00000000617 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that a syntax error caused by an unexpected EOF
// gives an error message with the correct line number.
//
// https://golang.org/issue/3392

package main

func foo() {
	bar(1, // ERROR "unexpected|missing|undefined"                                                                                                                 usr/local/go/test/fixedbugs/bug436.go                                                               0100644 0000000 0000000 00000000654 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to crash compiling this.

package main

func foo() (int, int) {
	return 1, 2
}

var c = b
var a, b = foo()
var d = b + 1

func main() {
	if a != 1 {
		panic(a)
	}
	if b != 2 {
		panic(b)
	}
	if c != 2 {
		panic(c)
	}
	if d != 3 {
		panic(d)
	}
}
                                                                                    usr/local/go/test/fixedbugs/bug437.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016272  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug437.dir/one.go                                                       0100644 0000000 0000000 00000000406 13020111414 017377  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package one

type I1 interface {
	f()
}

type S1 struct {
}

func (s S1) f() {
}

func F1(i1 I1) {
}
                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug437.dir/two.go                                                       0100644 0000000 0000000 00000000331 13020111414 017424  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package two

import "./one"

type S2 struct {
	one.S1
}
                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug437.dir/x.go                                                         0100644 0000000 0000000 00000000764 13020111414 017074  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test converting a type defined in a different package to an
// interface defined in a third package, where the interface has a
// hidden method.  This used to cause a link error with gccgo.

package main

import (
	"./one"
	"./two"
)

func F(i1 one.I1) {
	switch v := i1.(type) {
	case two.S2:
		one.F1(v)
	}
}

func main() {
	F(nil)
}
            usr/local/go/test/fixedbugs/bug437.go                                                               0100644 0000000 0000000 00000000576 13020111414 016051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test converting a type defined in a different package to an
// interface defined in a third package, where the interface has a
// hidden method.  This used to cause a link error with gccgo.

package ignored
                                                                                                                                  usr/local/go/test/fixedbugs/bug438.go                                                               0100644 0000000 0000000 00000000511 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to incorrectly give an error when compiling this.

package p

func F() (i int) {
	for first := true; first; first = false {
		i++
	}
	return
}
                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug439.go                                                               0100644 0000000 0000000 00000000511 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to crash compiling this.

package p

type E int

func (e E) P() *E { return &e }

const (
	C1 E = 0
	C2 = C1
)

func F() *E {
	return C2.P()
}
                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug440_32.go                                                            0100644 0000000 0000000 00000001002 13020111414 016330  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Test for 8g register move bug.  The optimizer gets confused
// about 16- vs 32-bit moves during splitContractIndex.

// Issue 3910.

package main

func main() {
	const c = 0x12345678
	index, n, offset := splitContractIndex(c)
	if index != int((c&0xffff)>>5) || n != int(c&(1<<5-1)) || offset != (c>>16)&(1<<14-1) {
		println("BUG", index, n, offset)
	}
}

func splitContractIndex(ce uint32) (index, n, offset int) {
	h := uint16(ce)
	return int(h >> 5), int(h & (1<<5 - 1)), int(ce>>16) & (1<<14 - 1)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug440_64.go                                                            0100644 0000000 0000000 00000000663 13020111414 016351  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Test for 6g register move bug.  The optimizer gets confused
// about 32- vs 64-bit moves during splitContractIndex.

// Issue 3918.

package main

func main() {
	const c = 0x123400005678
	index, offset := splitContractIndex(c)
	if index != (c&0xffffffff)>>5 || offset != c+1 {
		println("BUG", index, offset)
	}
}

func splitContractIndex(ce uint64) (index uint32, offset uint64) {
	h := uint32(ce)
	return h >> 5, ce + 1
}
                                                                             usr/local/go/test/fixedbugs/bug441.go                                                               0100644 0000000 0000000 00000001202 13020111414 016027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Was discarding function calls made for arguments named _
// in inlined functions.  Issue 3593.

package main

var did int

func main() {
	foo(side())
	foo2(side(), side())
	foo3(side(), side())
	T.m1(T(side()))
	T(1).m2(side())
	const want = 7
	if did != want {
		println("BUG: missing", want-did, "calls")
	}
}

func foo(_ int) {}
func foo2(_, _ int) {}
func foo3(int, int) {}
type T int
func (_ T) m1() {}
func (t T) m2(_ int) {}

func side() int {
	did++
	return 1
}
                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug442.go                                                               0100644 0000000 0000000 00000000776 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to crash generating hash and == functions for struct
// with leading _ field.  Issue 3607.

package main

type T struct {
	_ int
	X interface{}
	_ string
	Y float64
}

func main() {
	m := map[T]int{}
	m[T{X: 1, Y: 2}] = 1
	m[T{X: 2, Y: 3}] = 2
	m[T{X: 1, Y: 2}] = 3  // overwrites first entry
	if len(m) != 2 {
		println("BUG")
	}
}
  usr/local/go/test/fixedbugs/bug443.go                                                               0100644 0000000 0000000 00000000602 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Was failing to compile with 'invalid receiver' due to
// incomplete type definition evaluation.  Issue 3709.

package p

type T1 struct { F *T2 }
type T2 T1

type T3 T2
func (*T3) M()  // was invalid receiver

                                                                                                                              usr/local/go/test/fixedbugs/bug444.go                                                               0100644 0000000 0000000 00000001206 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The no-op conversion here used to confuse the compiler
// into doing a load-effective-address of nil.
// See issue 3670.

package main

import "reflect"

type T interface {}

var x bool

func main() {
        reflect.TypeOf(nil)
        reflect.TypeOf(T(nil)) // used to miscompile
        shouldPanic()
}

func f() byte {
	return []byte(nil)[0] // used to miscompile
}

func shouldPanic() {
	defer func() {
		if recover() == nil {
			panic("not panicking")
		}
	}()
	f()
}
                                                                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug445.go                                                               0100644 0000000 0000000 00000000402 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3765

package main

func f(x uint) uint {
	m := ^(1 << x)
	return uint(m)
}
                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug446.go                                                               0100644 0000000 0000000 00000001273 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3824.
// Method calls are ignored when deciding initialization
// order.

package main

type T int

func (r T) Method1() int { return a }
func (r T) Method2() int { return b }

// dummy1 and dummy2 must be initialized after a and b.
var dummy1 = T(0).Method1()
var dummy2 = T.Method2(0)

// Use a function call to force generating code.
var a = identity(1)
var b = identity(2)

func identity(a int) int { return a }

func main() {
	if dummy1 != 1 {
		panic("dummy1 != 1")
	}
	if dummy2 != 2 {
		panic("dummy2 != 2")
	}
}

                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug447.go                                                               0100644 0000000 0000000 00000003742 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3804
// test all possible float -> integer conversions

package main

import (
	"bytes"
	"fmt"
	"strings"
)

var (
	intWidths = []int{8, 16, 32, 64} // int%d and uint%d
	floatWidths = []int{32, 64} // float%d
)

func main() {

	var names, funcs bytes.Buffer

	for _, iWidth := range intWidths {
		for _, typ := range []string{"int", "uint"} {
			var segs bytes.Buffer
			itype := fmt.Sprintf("%s%d", typ, iWidth)
			names.WriteString("\ttest" + itype + ",\n")
			for _, fWidth := range floatWidths {
				ftype := fmt.Sprintf("float%d", fWidth)
				seg := strings.Replace(testSegment, "$F", ftype, -1)
				seg = strings.Replace(seg, "$I", itype, -1)
				segs.WriteString(seg)
			}
			body := strings.Replace(testFunc, "$I", itype, -1)
			if typ[0] == 'u' {
				body = strings.Replace(body, "$TEST", " || i < 0", 1)
			} else {
				body = strings.Replace(body, "$TEST", "", 1)
			}
			body = strings.Replace(body, "$TESTSEGMENTS", segs.String(), 1)
			funcs.WriteString(body)
		}
	}

	program = strings.Replace(program, "$NAMES", names.String(), 1)
	program = strings.Replace(program, "$FUNCS", funcs.String(), 1)
	fmt.Print(program)
}

const testSegment = `
	f$F := $F(f)
	if math.Abs(float64(f$F) - f) < 0.05 {
		if v := $I(f$F); v != $I(i) {
			fmt.Printf("$I($F(%f)) = %v, expected %v\n", f, v, i)
		}
	}`

const testFunc =
`func test$I(f float64, i int64) {
	if i != int64($I(i))$TEST {
		return
	}
$TESTSEGMENTS
}
`

var program =
`package main

import (
	"fmt"
	"math"
)

var tests = []struct {
	f float64
	i int64
}{
	{39.7, 39},
	{-39.7, -39},
	{258.6, 258},
	{-258.6, -258},
	{65538.9, 65538},
	{-65538.9, -65538},
	{4294967298.8, 4294967298},
	{-4294967298.8, -4294967298},
}

var funcs = []func(float64, int64){
$NAMES
}

$FUNCS
func main() {
	for _, t := range tests {
		for _, f := range funcs {
			f(t.f, t.i)
		}
	}
}
`
                              usr/local/go/test/fixedbugs/bug448.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016274  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug448.dir/pkg1.go                                                      0100644 0000000 0000000 00000000365 13020111414 017466  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg1

var x = make(chan interface{})

func Do() int {
	return (<-x).(int)
}
                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug448.dir/pkg2.go                                                      0100644 0000000 0000000 00000000440 13020111414 017461  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3843: inlining bug due to wrong receive operator precedence.

package pkg2

import "./pkg1"

func F() {
	pkg1.Do()
}

                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug448.go                                                               0100644 0000000 0000000 00000000300 13020111414 016034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug449.go                                                               0100644 0000000 0000000 00000002732 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3866
// runtime.equal failed to take padding between arguments and
// return values into account, so in certain cases gc-generated
// code will read a random bool from the stack as the result of
// the comparison.
// This program generates a lot of equality tests and hopes to
// catch this.
// NOTE: this program assumes comparing instance of T and T's
// underlying []byte will make gc emit calls to runtime.equal,
// and if gc optimizes this case, then the test will no longer
// be correct (in the sense that it no longer tests runtime.equal).

package main

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"
)

const ntest = 1024

func main() {
	var decls, calls bytes.Buffer

	for i := 1; i <= ntest; i++ {
		s := strconv.Itoa(i)
		decls.WriteString(strings.Replace(decl, "$", s, -1))
		calls.WriteString(strings.Replace("call(test$)\n\t", "$", s, -1))
	}

	program = strings.Replace(program, "$DECLS", decls.String(), 1)
	program = strings.Replace(program, "$CALLS", calls.String(), 1)
	fmt.Print(program)
}

var program = `package main

var count int

func call(f func() bool) {
	if f() {
		count++
	}
}

$DECLS

func main() {
	$CALLS
	if count != 0 {
		println("failed", count, "case(s)")
	}
}
`

const decl = `
type T$ [$]uint8
func test$() bool {
	v := T${1}
	return v == [$]uint8{2} || v != [$]uint8{1}
}`
                                      usr/local/go/test/fixedbugs/bug450.go                                                               0100644 0000000 0000000 00000000761 13020111414 016040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3899: 8g incorrectly thinks a variable is
// "set but not used" and elides an assignment, causing
// variables to end up with wrong data.
//
// The reason is a miscalculation of variable width.

package main

func bar(f func()) {
	f()
}

func foo() {
	f := func() {}
	if f == nil {
	}
	bar(f)
}

func main() {
	foo()
}
               usr/local/go/test/fixedbugs/bug451.go                                                               0100644 0000000 0000000 00000000421 13020111414 016032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T x.T // ERROR "undefined|expected package"

// bogus "invalid recursive type"
                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug452.go                                                               0100644 0000000 0000000 00000001624 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3835: 8g tries to optimize arithmetic involving integer
// constants, but can run out of registers in the process.

package main

var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G int

func foo() int {
	return a + 1 + b + 2 + c + 3 + d + 4 + e + 5 + f + 6 + g + 7 + h + 8 + i + 9 + j + 10 +
		k + 1 + l + 2 + m + 3 + n + 4 + o + 5 + p + 6 + q + 7 + r + 8 + s + 9 + t + 10 +
		u + 1 + v + 2 + w + 3 + x + 4 + y + 5 + z + 6 + A + 7 + B + 8 + C + 9 + D + 10 +
		E + 1 + F + 2 + G + 3
}

func bar() int8 {
	var (
		W int16
		X int32
		Y int32
		Z int32
	)
	return int8(W+int16(X+3)+3) * int8(Y+3+Z*3)
}

func main() {
	if foo() == 0 {
		panic("foo")
	}
	if bar() == 0 {
		panic("bar")
	}
}
                                                                                                            usr/local/go/test/fixedbugs/bug453.go                                                               0100644 0000000 0000000 00000001300 13020111414 016031  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4138: bug in floating-point registers numbering.
// Makes 6g unable to use more than 11 registers.

package main

func formula() float32 {
	mA := [1]float32{1.0}
	det1 := mA[0]
	det2 := mA[0]
	det3 := mA[0]
	det4 := mA[0]
	det5 := mA[0]
	det6 := mA[0]
	det7 := mA[0]
	det8 := mA[0]
	det9 := mA[0]
	det10 := mA[0]
	det11 := mA[0]
	det12 := mA[0]

	return det1 + det2*det3 +
		det4*det5 + det6*det7 +
		det8*det9 + det10*det11 +
		det12
}

func main() {
	x := formula()
	if x != 7.0 {
		println(x, 7.0)
		panic("x != 7.0")
	}
}
                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug454.go                                                               0100644 0000000 0000000 00000000542 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4173

package main

func main() {
	var arr *[10]int
	s := 0
	for i, _ := range arr {
		// used to panic trying to access arr[i]
		s += i
	}
	if s != 45 {
		println("BUG")
	}
}
                                                                                                                                                              usr/local/go/test/fixedbugs/bug455.go                                                               0100644 0000000 0000000 00000001412 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4156: out of fixed registers when chaining method calls.
// Used to happen with 6g.

package main

type test_i interface {
	Test() test_i
	Result() bool
}

type test_t struct {
}

func newTest() *test_t {
	return &test_t{}
}

type testFn func(string) testFn

func main() {
	test := newTest()

	switch {
	case test.
		Test().
		Test().
		Test().
		Test().
		Test().
		Test().
		Test().
		Test().
		Test().
		Test().
		Result():
		// case worked
	default:
		panic("Result returned false unexpectedly")
	}
}

func (t *test_t) Test() test_i {
	return t
}

func (t *test_t) Result() bool {
	return true
}
                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug456.go                                                               0100644 0000000 0000000 00000001041 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3907: out of fixed registers in nested byte multiply.
// Used to happen with both 6g and 8g.

package main

func F(a, b, c, d uint8) uint8 {
	return a * (b * (c * (d *
		(a * (b * (c * (d *
			(a * (b * (c * (d *
				a * (b * (c * d)))))))))))))
}

func main() {
	var a, b, c, d uint8 = 1, 1, 1, 1
	x := F(a, b, c, d)
	if x != 1 {
		println(x)
		panic("x != 1")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug457.go                                                               0100644 0000000 0000000 00000000514 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4197: growing a slice of zero-width elements
// panics on a division by zero.

package main

func main() {
	var x []struct{}
	x = append(x, struct{}{})
}
                                                                                                                                                                                    usr/local/go/test/fixedbugs/bug458.go                                                               0100644 0000000 0000000 00000001002 13020111414 016035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4200: 6g crashes when a type is larger than 4GB.

package main

import "unsafe"

// N=16 on 32-bit arches, 256 on 64-bit arches.
// On 32-bit arches we don't want to test types
// that are over 4GB large.
const N = 1 << unsafe.Sizeof(uintptr(0))

type T [N][10][10][10][10][3]byte

func F(t *T) byte {
	return t[0][0][0][0][0][0]
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug459.go                                                               0100644 0000000 0000000 00000001231 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3890: missing detection of init loop involving
// method calls in function bodies.

package flag

var commandLine = NewFlagSet() // ERROR "loop|depends upon itself"

type FlagSet struct {
}

func (f *FlagSet) failf(format string, a ...interface{}) {
	f.usage()
}

func (f *FlagSet) usage() {
	if f == commandLine {
		panic(3)
	}
}

func NewFlagSet() *FlagSet {
	f := &FlagSet{}
	f.setErrorHandling(true)
	return f
}

func (f *FlagSet) setErrorHandling(b bool) {
	f.failf("DIE")
}
                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug460.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016266  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug460.dir/a.go                                                         0100644 0000000 0000000 00000000336 13020111414 017034  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type Foo struct {
	int
	int8
	error
	rune
	byte
}
                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug460.dir/b.go                                                         0100644 0000000 0000000 00000000656 13020111414 017042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

var x a.Foo

func main() {
	x.int = 20    // ERROR "unexported field"
	x.int8 = 20   // ERROR "unexported field"
	x.error = nil // ERROR "unexported field"
	x.rune = 'a'  // ERROR "unexported field"
	x.byte = 20   // ERROR "unexported field"
}
                                                                                  usr/local/go/test/fixedbugs/bug460.go                                                               0100644 0000000 0000000 00000000425 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// part one of issue 4124. Make sure that the compiler rejects access attempts.

package ignored

                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/bug461.go                                                               0100644 0000000 0000000 00000000653 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// part two of issue 4124. Make sure reflect doesn't mark the field as exported.

package main

import "reflect"

var T struct {
	int
}

func main() {
	v := reflect.ValueOf(&T)
	v = v.Elem().Field(0)
	if v.CanSet() {
		panic("int should be unexported")
	}
}
                                                                                     usr/local/go/test/fixedbugs/bug462.go                                                               0100644 0000000 0000000 00000000457 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "os"

type T struct {
	File int
}

func main() {
	_ = T {
		os.File: 1, // ERROR "unknown T? ?field"
	}
}
                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug463.go                                                               0100644 0000000 0000000 00000000710 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3757: unhelpful typechecking loop message
// for constants that refer to themselves.

package main

const a = a // ERROR "refers to itself|definition loop"

const (
	X    = A
	A    = B // ERROR "refers to itself|definition loop"
	B    = D
	C, D = 1, A
)

func main() {
}
                                                        usr/local/go/test/fixedbugs/bug464.go                                                               0100644 0000000 0000000 00000000523 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3937: unhelpful typechecking loop message
// for identifiers wrongly used as types.

package main

func foo(x foo) {} // ERROR "expected type|not a type"
                                                                                                                                                                             usr/local/go/test/fixedbugs/bug465.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016273  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug465.dir/a.go                                                         0100644 0000000 0000000 00000001646 13020111414 017046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type T struct{ A, B int }

type A []int

type M map[int]int

func F1() int {
	if (T{1, 2}) == (T{3, 4}) {
		return 1
	}
	return 0
}

func F2() int {
	if (M{1: 2}) == nil {
		return 1
	}
	return 0
}

func F3() int {
	if nil == (A{}) {
		return 1
	}
	return 0
}

func F4() int {
	if a := (A{}); a == nil {
		return 1
	}
	return 0
}

func F5() int {
	for k, v := range (M{1: 2}) {
		return v - k
	}
	return 0
}

func F6() int {
	switch a := (T{1, 1}); a == (T{1, 2}) {
	default:
		return 1
	}
	return 0
}

func F7() int {
	for m := (M{}); len(m) < (T{1, 2}).A; m[1] = (A{1})[0] {
		return 1
	}
	return 0
}

func F8() int {
	if a := (&T{1, 1}); a != nil {
		return 1
	}
	return 0
}

func F9() int {
	var a *T
	if a = (&T{1, 1}); a != nil {
		return 1
	}
	return 0
}
                                                                                          usr/local/go/test/fixedbugs/bug465.dir/b.go                                                         0100644 0000000 0000000 00000000524 13020111414 017041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	for _, f := range []func() int{
		a.F1, a.F2, a.F3, a.F4,
		a.F5, a.F6, a.F7, a.F8, a.F9} {
		if f() > 1 {
			panic("f() > 1")
		}
	}
}
                                                                                                                                                                            usr/local/go/test/fixedbugs/bug465.go                                                               0100644 0000000 0000000 00000000421 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4230: inlining bug for composite literal in
// if, for, switch statements.

package ignored
                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug466.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016274  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug466.dir/a.go                                                         0100644 0000000 0000000 00000000513 13020111414 017037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

const N = 2+3i

func Func() []complex128 {
	return []complex128{1, complex(2, 3), complex(4, 5)}
}

func Mul(z complex128) complex128 {
	return z * (3 + 4i)
}
                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug466.dir/b.go                                                         0100644 0000000 0000000 00000000764 13020111414 017050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	s := a.Func()
	if s[0] != 1 {
		println(s[0])
		panic("s[0] != 1")
	}
	if s[1] != 2+3i {
		println(s[1])
		panic("s[1] != 2+3i")
	}
	if s[2] != 4+5i {
		println(s[2])
		panic("s[2] != 4+5i")
	}

	x := 1 + 2i
	y := a.Mul(x)
	if y != (1+2i)*(3+4i) {
		println(y)
		panic("y != (1+2i)*(3+4i)")
	}
}
            usr/local/go/test/fixedbugs/bug466.go                                                               0100644 0000000 0000000 00000000426 13020111414 016045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4159: exported inlinable functions squash
// complex literals "a+bi" to "a+b".

package ignored

                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug467.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016275  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug467.dir/p1.go                                                        0100644 0000000 0000000 00000000132 13020111414 017135  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package p1

type SockaddrUnix int

func (s SockaddrUnix) Error() string { return "blah" }
                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug467.dir/p2.go                                                        0100644 0000000 0000000 00000000126 13020111414 017141  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package p2

import "./p1"

func SockUnix() error { var s *p1.SockaddrUnix; return s }
                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug467.dir/p3.go                                                        0100644 0000000 0000000 00000000100 13020111414 017132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import "./p2"

func main() {
	_ = p2.SockUnix()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug467.go                                                               0100644 0000000 0000000 00000000446 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Exported data for inlining could forget types of
// local variables declared in inlinable bodies.

package ignored
                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug468.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016276  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug468.dir/p1.go                                                        0100644 0000000 0000000 00000000310 13020111414 017134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

type S struct { X, Y int }
                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug468.dir/p2.go                                                        0100644 0000000 0000000 00000000647 13020111414 017152  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"reflect"

	"./p1"
)

func main() {
	var v1 = p1.S{1, 2}
	var v2 = struct { X, Y int }{1, 2}
	v1 = v2
	t1 := reflect.TypeOf(v1)
	t2 := reflect.TypeOf(v2)
	if !t1.AssignableTo(t2) {
		panic(0)
	}
	if !t2.AssignableTo(t1) {
		panic(1)
	}
}
                                                                                         usr/local/go/test/fixedbugs/bug468.go                                                               0100644 0000000 0000000 00000000446 13020111414 016051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The reflect package was not correctly checking field names
// when checking for struct assignability.

package ignored
                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug470.go                                                               0100644 0000000 0000000 00000001141 13020111414 016033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Converting constants between types must introduce rounding.

package main

import "fmt"

const (
    F32 = 0.00999999977648258209228515625
    F64 = 0.01000000000000000020816681711721685132943093776702880859375
)

var F = float64(float32(0.01))

func main() {
	// 0.01 rounded to float32 then to float64 is F32.
	// 0.01 represented directly in float64 is F64.
	if F != F32 {
		panic(fmt.Sprintf("F=%.1000g, want %.1000g", F, F32))
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug471.go                                                               0100644 0000000 0000000 00000000477 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Caused an internal compiler error in gccgo.

package p

type C chan struct{}

func (c C) F() {
	select {
	case c <- struct{}{}:
	default:
	}
}
                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug472.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016271  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug472.dir/p1.go                                                        0100644 0000000 0000000 00000000645 13020111414 017142  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

import "runtime"

func E() func() int { return runtime.NumCPU }

func F() func() { return runtime.Gosched }

func G() func() string { return runtime.GOROOT }

func H() func() { return runtime.GC }

func I() func() string { return runtime.Version }
                                                                                           usr/local/go/test/fixedbugs/bug472.dir/p2.go                                                        0100644 0000000 0000000 00000000645 13020111414 017143  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p2

import "runtime"

func E() func() int { return runtime.NumCPU }

func F() func() { return runtime.GC }

func G() func() string { return runtime.GOROOT }

func H() func() { return runtime.Gosched }

func I() func() string { return runtime.Version }
                                                                                           usr/local/go/test/fixedbugs/bug472.dir/z.go                                                         0100644 0000000 0000000 00000000337 13020111414 017071  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	_ "./p1"
	_ "./p2"
)

func main() {
}
                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/bug472.go                                                               0100644 0000000 0000000 00000000426 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Linker would incorrectly parse export data and think
// definitions are inconsistent.

package ignored
                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug473.go                                                               0100644 0000000 0000000 00000002044 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to be miscompiled by gccgo, due to a bug in handling
// initialization ordering.

package main

func F(a ...interface{}) interface{} {
	s := 0
	for _, v := range a {
		s += v.(int)
	}
	return s
}

var V1 = F(V10, V4, V3, V11)

var V2 = F(V1)

var V3 = F(1)

var V4 = F(2)

var V5 = F(3)

var V6 = F(4)

var V7 = F(5)

var V8 = F(V14, V7, V3, V6, V5)

var V9 = F(V4, F(V12))

var V10 = F(V4, V9)

var V11 = F(6)

var V12 = F(V5, V3, V8)

var V13 = F(7)

var V14 = F(8)

func expect(name string, a interface{}, b int) {
	if a.(int) != b {
		panic(name)
	}
}

func main() {
	expect("V1", V1, 38)
	expect("V2", V2, 38)
	expect("V3", V3, 1)
	expect("V4", V4, 2)
	expect("V5", V5, 3)
	expect("V6", V6, 4)
	expect("V7", V7, 5)
	expect("V8", V8, 21)
	expect("V9", V9, 27)
	expect("V10", V10, 29)
	expect("V11", V11, 6)
	expect("V12", V12, 25)
	expect("V13", V13, 7)
	expect("V14", V14, 8)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug474.go                                                               0100644 0000000 0000000 00000000644 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Bug in method values: escape analysis was off.

package main

import "sync"

var called = false

type T struct {
	once sync.Once
}

func (t *T) M() {
	called = true
}

func main() {
	var t T
	t.once.Do(t.M)
	if !called {
		panic("not called")
	}
}
                                                                                            usr/local/go/test/fixedbugs/bug475.go                                                               0100644 0000000 0000000 00000000576 13020111414 016053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Variable in enclosing function with same name as field in struct
// composite literal confused gccgo.

package p

type s1 struct {
	f *s1
}

func F() {
	var f *s1
	_ = func() {
		_ = s1{f: nil}
	}
	_ = f
}
                                                                                                                                  usr/local/go/test/fixedbugs/bug476.go                                                               0100644 0000000 0000000 00000000663 13020111414 016051  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Logical operation on named boolean type returns the same type,
// supporting an implicit conversion to an interface type.  This used
// to crash gccgo.

package p

type B bool

func (b B) M() {}

type I interface {
	M()
}

func F(a, b B) I {
	return a && b
}
                                                                             usr/local/go/test/fixedbugs/bug477.go                                                               0100644 0000000 0000000 00000000754 13020111414 016053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test multiple identical unnamed structs with methods.  This caused
// a compilation error with gccgo.

package p

type S1 struct{}

func (s S1) M() {}

type S2 struct {
	F1 struct {
		S1
	}
	F2 struct {
		S1
	}
}

type I interface {
	M()
}

func F() {
	var s2 S2
	var i1 I = s2.F1
	var i2 I = s2.F2
	_, _ = i1, i2
}
                    usr/local/go/test/fixedbugs/bug478.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016277  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug478.dir/a.go                                                         0100644 0000000 0000000 00000000322 13020111414 017040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

type S1 struct{}

func (s S1) f() {}
                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug478.dir/b.go                                                         0100644 0000000 0000000 00000000351 13020111414 017043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p2

import "./a"

type S2 struct {
	p1.S1
}

func (s S2) f() {}
                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug478.go                                                               0100644 0000000 0000000 00000000500 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Using the same unexported name for a method as a method on an
// imported embedded type caused a gccgo compilation failure.

package ignored
                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug479.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016300  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug479.dir/a.go                                                         0100644 0000000 0000000 00000000406 13020111414 017044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

import "unsafe"

type S2 struct {}

const C = unsafe.Sizeof(S2{})

type S1 struct {
	S2
}
                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug479.dir/b.go                                                         0100644 0000000 0000000 00000000410 13020111414 017040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

type S3 struct {
	p.S1
}

func main() {
	var i interface{} = S3{}
	_ = i
}
                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug479.go                                                               0100644 0000000 0000000 00000000500 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo was not consistent in deciding how to compare a struct type
// for equality, leading to an undefined symbol at link time.

package ignored
                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug480.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016270  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug480.dir/a.go                                                         0100644 0000000 0000000 00000000367 13020111414 017042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type S interface{
	F() T
}

type T struct {
	S
}

type U struct {
	error
}
                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug480.dir/b.go                                                         0100644 0000000 0000000 00000000346 13020111414 017040  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

var t a.T

func F() error {
	return a.U{}
}
                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/bug480.go                                                               0100644 0000000 0000000 00000000373 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo mishandled an import of a forward declared type.

package ignored
                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug481.go                                                               0100644 0000000 0000000 00000000607 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Returning an index into a conversion from string to slice caused a
// compilation error when using gccgo.

package p

func F1(s string) byte {
	return []byte(s)[0]
}

func F2(s string) rune {
	return []rune(s)[0]
}
                                                                                                                         usr/local/go/test/fixedbugs/bug482.go                                                               0100644 0000000 0000000 00000000710 13020111414 016037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Using the same name for a field in a composite literal and for a
// global variable that depends on the variable being initialized
// caused gccgo to erroneously report "variable initializer refers to
// itself".

package p

type S struct {
	F int
}

var V = S{F: 1}

var F = V.F
                                                        usr/local/go/test/fixedbugs/bug483.go                                                               0100644 0000000 0000000 00000001251 13020111414 016041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test for a garbage collection bug involving not
// marking x as having its address taken by &x[0]
// when x is an array value.

package main

import (
	"bytes"
	"fmt"
	"runtime"
)

func main() {
	var x = [4]struct{ x, y interface{} }{
		{"a", "b"},
		{"c", "d"},
		{"e", "f"},
		{"g", "h"},
	}

	var buf bytes.Buffer
	for _, z := range x {
		runtime.GC()
		fmt.Fprintf(&buf, "%s %s ", z.x.(string), z.y.(string))
	}

	if buf.String() != "a b c d e f g h " {
		println("BUG wrong output\n", buf.String())
	}
}
                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/bug484.go                                                               0100644 0000000 0000000 00000003253 13020111414 016046  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The liveness code used to say that, in func g, s was live
// starting at its declaration, because it appears to have its
// address taken by the closure (different s, but the parser
// gets slightly confused, a separate bug). The liveness analysis
// saw s as having its address taken but the register optimizer
// did not. This mismatch meant that s would be marked live
// (and therefore initialized) at the call to f, but the register optimizer
// would optimize away the initialization of s before f, causing the
// garbage collector to use unused data.
// The register optimizer has been changed to respect the
// same "address taken" flag that the liveness analysis uses,
// even if it cannot see any address being taken in the actual
// machine code. This is conservative but keeps the two consistent,
// which is the most important thing.

package main

import "runtime"

//go:noinline
func f() interface{} {
	runtime.GC()
	return nil
}

//go:noinline
func g() {
	var s interface{}
	_ = func() {
		s := f()
		_ = s
	}
	s = f()
	useiface(s)
	useiface(s)
}

//go:noinline
func useiface(x interface{}) {
}

//go:noinline
func h() {
	var x [16]uintptr
	for i := range x {
		x[i] = 1
	}

	useint(x[0])
	useint(x[1])
	useint(x[2])
	useint(x[3])
}

//go:noinline
func useint(x uintptr) {
}

func main() {
	// scribble non-zero values on stack
	h()
	// call function that used to let the garbage collector
	// see uninitialized stack values; it will see the
	// nonzero values.
	g()
}

func big(x int) {
	if x >= 0 {
		big(x - 1)
	}
}
                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug485.go                                                               0100644 0000000 0000000 00000001161 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo chose the wrong embedded method when the same type appeared
// at different levels and the correct choice was not the first
// appearance of the type in a depth-first search.

package main

type embedded string

func (s embedded) val() string {
	return string(s)
}

type A struct {
	embedded
}

type B struct {
	A
	embedded
}

func main() {
	b := &B{
		A: A{
			embedded: "a",
		},
		embedded: "b",
	}
	s := b.val()
	if s != "b" {
		panic(s)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/bug486.go                                                               0100644 0000000 0000000 00000000534 13020111414 016047  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo lexer had a bug handling nested comments.
// http://gcc.gnu.org/PR61746
// http://code.google.com/p/gofrontend/issues/detail?id=35

package main

/*// comment
*/
                                                                                                                                                                    usr/local/go/test/fixedbugs/bug487.go                                                               0100644 0000000 0000000 00000001016 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo compiler did not reliably report mismatches between the
// number of function results and the number of expected results.

package p

func G() (int, int, int) {
	return 0, 0, 0
}

func F() {
	a, b := G()	// ERROR "mismatch"
	a, b = G()	// ERROR "mismatch"
	_, _ = a, b
}

func H() (int, int) {
	return G()	// ERROR "too many|mismatch"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/bug488.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016300  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug488.dir/a.go                                                         0100644 0000000 0000000 00000000322 13020111414 017041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

var p2 = Printf		// ERROR "undefined"
                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/bug488.dir/b.go                                                         0100644 0000000 0000000 00000000313 13020111414 017042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

import . "fmt"

var p1 = Print
                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/bug488.go                                                               0100644 0000000 0000000 00000000625 13020111414 016052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo compiler had a bug: if one file in a package did a dot
// import, then an earlier file in the package would incorrectly
// resolve to the imported names rather than reporting undefined
// errors.

package ignored
                                                                                                           usr/local/go/test/fixedbugs/bug489.go                                                               0100644 0000000 0000000 00000000754 13020111414 016056  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo compiler had a bug: mentioning a function type in an
// expression in a function literal messed up the list of variables
// referenced in enclosing functions.

package main

func main() {
	v1, v2 := 0, 0
	f := func() {
		a := v1
		g := (func())(nil)
		b := v2
		_, _, _ = a, g, b
	}
	_, _, _ = v1, v2, f
}
                    usr/local/go/test/fixedbugs/bug490.go                                                               0100644 0000000 0000000 00000000552 13020111414 016042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The gccgo compiler used to crash building a comparison between an
// interface and an empty struct literal.

package p
 
type S struct{}

func F(v interface{}) bool {
	return v == S{}
}
                                                                                                                                                      usr/local/go/test/fixedbugs/bug491.go                                                               0100644 0000000 0000000 00000004012 13020111414 016036  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test order of calls to builtin functions.
// Discovered during CL 144530045 review.

package main

func main() {
	// append
	{
		x := make([]int, 0)
		f := func() int { x = make([]int, 2); return 2 }
		a, b, c := append(x, 1), f(), append(x, 1)
		if len(a) != 1 || len(c) != 3 {
			bug()
			println("append call not ordered:", len(a), b, len(c))
		}
	}

	// cap
	{
		x := make([]int, 1)
		f := func() int { x = make([]int, 3); return 2 }
		a, b, c := cap(x), f(), cap(x)
		if a != 1 || c != 3 {
			bug()
			println("cap call not ordered:", a, b, c)
		}
	}

	// complex
	{
		x := 1.0
		f := func() int { x = 3; return 2 }
		a, b, c := complex(x, 0), f(), complex(x, 0)
		if real(a) != 1 || real(c) != 3 {
			bug()
			println("complex call not ordered:", a, b, c)
		}
	}

	// copy
	{
		tmp := make([]int, 100)
		x := make([]int, 1)
		f := func() int { x = make([]int, 3); return 2 }
		a, b, c := copy(tmp, x), f(), copy(tmp, x)
		if a != 1 || c != 3 {
			bug()
			println("copy call not ordered:", a, b, c)
		}
	}

	// imag
	{
		x := 1i
		f := func() int { x = 3i; return 2 }
		a, b, c := imag(x), f(), imag(x)
		if a != 1 || c != 3 {
			bug()
			println("imag call not ordered:", a, b, c)
		}
	}

	// len
	{
		x := make([]int, 1)
		f := func() int { x = make([]int, 3); return 2 }
		a, b, c := len(x), f(), len(x)
		if a != 1 || c != 3 {
			bug()
			println("len call not ordered:", a, b, c)
		}
	}

	// make
	{
		x := 1
		f := func() int { x = 3; return 2 }
		a, b, c := make([]int, x), f(), make([]int, x)
		if len(a) != 1 || len(c) != 3 {
			bug()
			println("make call not ordered:", len(a), b, len(c))
		}
	}

	// real
	{
		x := 1 + 0i
		f := func() int { x = 3; return 2 }
		a, b, c := real(x), f(), real(x)
		if a != 1 || c != 3 {
			bug()
			println("real call not ordered:", a, b, c)
		}
	}
}

var bugged = false

func bug() {
	if !bugged {
		println("BUG")
		bugged = true
	}
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/bug492.dir/                                                             0040755 0000000 0000000 00000000000 13020111414 016273  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/bug492.dir/a.go                                                         0100644 0000000 0000000 00000000370 13020111414 017037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type s struct {
	s string
}

func F1(s s) {
}

func F2() s {
	return s{""}
}
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/bug492.dir/b.go                                                         0100644 0000000 0000000 00000000340 13020111414 017035  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	defer a.F1(a.F2())
}
                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/bug492.go                                                               0100644 0000000 0000000 00000000344 13020111414 016043  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case that gccgo failed to link.

package ignored
                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/bug493.go                                                               0100644 0000000 0000000 00000000443 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test case that gccgo failed to compile.

package p

func F() []string {
	return []string{""}
}

var V = append(F())
                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/bug494.go                                                               0100644 0000000 0000000 00000001267 13020111414 016052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo incorrectly executed functions multiple times when they
// appeared in a composite literal that required a conversion between
// different interface types.

package main

type MyInt int

var c MyInt

func (c *MyInt) S(i int) {
	*c = MyInt(i)
}

func (c *MyInt) V() int {
	return int(*c)
}

type i1 interface {
	S(int)
	V() int
}

type i2 interface {
	V() int
}

type s struct {
	i i2
}

func f() i1 {
	c++
	return &c
}

func main() {
	p := &s{f()}
	if v := p.i.V(); v != 1 {
		panic(v)
	}
	if c != 1 {
		panic(c)
	}
}
                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/bug495.go                                                               0100644 0000000 0000000 00000000553 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to give an incorrect error
// bug495.go:16:2: error: missing statement after label

package p

func F(i int) {
	switch i {
	case 0:
		goto lab
	lab:
		fallthrough
	case 1:
	}
}
                                                                                                                                                     usr/local/go/test/fixedbugs/bug496.go                                                               0100644 0000000 0000000 00000001115 13020111414 016044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to give an error:
// <built-in>: error: redefinition of â€˜s$F$hashâ€™
// <built-in>: note: previous definition of â€˜s$F$hashâ€™ was here
// <built-in>: error: redefinition of â€˜s$F$equalâ€™
// <built-in>: note: previous definition of â€˜s$F$equalâ€™ was here

package p

type T1 int

func (t T1) F() {
	type s struct {
		f string
	}
}

type T2 int

func (t T2) F() {
	type s struct {
		f string
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/bug497.go                                                               0100644 0000000 0000000 00000000704 13020111414 016050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Gccgo used to miscompile passing a global variable with a
// zero-sized type to a function.

package main

type T struct {
	field s
}

type s struct{}

var X T

func F(_ T, c interface{}) int {
	return len(c.(string))
}

func main() {
	if v := F(X, "hi"); v != 2 {
		panic(v)
	}
}
                                                            usr/local/go/test/fixedbugs/gcc61204.go                                                             0100644 0000000 0000000 00000000604 13020111414 016157  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61204: Making temporaries for zero-sized types caused an ICE in gccgo.
// This is a reduction of a program reported by GoSmith.

package main

func main() {
	type t [0]int
	var v t
	v, _ = [0]int{}, 0
	_ = v
}
                                                                                                                            usr/local/go/test/fixedbugs/gcc61244.go                                                             0100644 0000000 0000000 00000000723 13020111414 016165  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61244: Type descriptors expressions were not traversed, causing an ICE
// in gccgo when producing the backend representation.
// This is a reduction of a program reported by GoSmith.

package main

const a = 0

func main() {
	switch i := (interface{})(a); i.(type) {
	case [0]string:
	}
}
                                             usr/local/go/test/fixedbugs/gcc61246.go                                                             0100644 0000000 0000000 00000000630 13020111414 016164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61246: Switch conditions could be untyped, causing an ICE when the
// conditions were lowered into temporaries.
// This is a reduction of a program reported by GoSmith.

package main

func main() {
	switch 1 != 1 {
	default:
	}
}
                                                                                                        usr/local/go/test/fixedbugs/gcc61248.go                                                             0100644 0000000 0000000 00000000521 13020111414 016165  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61248: Transformations to recover calls made them fail typechecking in gccgo.

package main

func main() {
	var f func(int, interface{})
	go f(0, recover())
}
                                                                                                                                                                               usr/local/go/test/fixedbugs/gcc61253.go                                                             0100644 0000000 0000000 00000000607 13020111414 016166  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61253: gccgo incorrectly parsed the
// `RecvStmt = ExpressionList "=" RecvExpr` production.

package main

func main() {
	c := make(chan int)
	v := new(int)
	b := new(bool)
	select {
	case (*v), (*b) = <-c:
	}

}
                                                                                                                         usr/local/go/test/fixedbugs/gcc61254.go                                                             0100644 0000000 0000000 00000000457 13020111414 016172  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61254: gccgo failed to compile a slice expression with missing indices.

package main

func main() {
	[][]int{}[:][0][0]++
}
                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/gcc61255.go                                                             0100644 0000000 0000000 00000000463 13020111414 016170  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61255: gccgo failed to compile IncDec statements on variadic functions.

package main

func main() {
	append([]byte{}, 0)[0]++
}
                                                                                                                                                                                                             usr/local/go/test/fixedbugs/gcc61258.go                                                             0100644 0000000 0000000 00000000467 13020111414 016177  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61258: gccgo crashed when deleting a zero-sized key from a map.

package main

func main() {
	delete(make(map[[0]bool]int), [0]bool{})
}
                                                                                                                                                                                                         usr/local/go/test/fixedbugs/gcc61264.go                                                             0100644 0000000 0000000 00000000472 13020111414 016170  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61264: IncDec statements involving composite literals caused in ICE in gccgo.

package main

func main() {
        map[int]int{}[0]++
}
                                                                                                                                                                                                      usr/local/go/test/fixedbugs/gcc61265.go                                                             0100644 0000000 0000000 00000000703 13020111414 016166  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61265: The gccgo middle-end failed to represent array composite literals
// where the elements are zero-sized values.
// This is a reduction of a program reported by GoSmith.

package p

var a = [1][0]int{B}[0]
var B = [0]int{}
var c = [1]struct{}{D}[0]
var D = struct{}{}
                                                             usr/local/go/test/fixedbugs/gcc61273.go                                                             0100644 0000000 0000000 00000000570 13020111414 016167  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR61273: gccgo failed to compile a SendStmt in the PostStmt of a ForClause
// that involved predefined constants.

package main

func main() {
	c := make(chan bool, 1)
	for ; false; c <- false {
	}
}
                                                                                                                                        usr/local/go/test/fixedbugs/gcc65755.go                                                             0100644 0000000 0000000 00000001136 13020111414 016177  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// PR65755: Incorrect type descriptor for type defined within method.

package main

import "reflect"

type S1 struct{}

func (S1) Fix() string {
	type s struct {
		f int
	}
	return reflect.TypeOf(s{}).Field(0).Name
}

type S2 struct{}

func (S2) Fix() string {
	type s struct {
		g bool
	}
	return reflect.TypeOf(s{}).Field(0).Name
}

func main() {
	f1 := S1{}.Fix()
	f2 := S2{}.Fix()
	if f1 != "f" || f2 != "g" {
		panic(f1 + f2)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/gcc67968.dir/                                                           0040755 0000000 0000000 00000000000 13020111414 016437  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/gcc67968.dir/a.go                                                       0100644 0000000 0000000 00000000362 13020111414 017204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type T int

func (a *T) Foo() [1]string {
	var r [1]string
	return r
}
                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/gcc67968.dir/b.go                                                       0100644 0000000 0000000 00000000370 13020111414 017204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

func F() (interface{}) {
     var v *a.T
     return v.Foo()
}
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/gcc67968.go                                                             0100644 0000000 0000000 00000000710 13020111414 016204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// https://gcc.gnu.org/PR67968

// gccgo compiler crash building the equality and hash functions for a
// type when a return statement requires a conversion to interface
// type of a call of function defined in a different package that
// returns an unnamed type.

package ignored
                                                        usr/local/go/test/fixedbugs/issue10047.go                                                           0100644 0000000 0000000 00000000641 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10047: gccgo failed to compile a type switch where the switch variable
// and the base type of a case share the same identifier.

package main

func main() {
	type t int
	var p interface{}
	switch t := p.(type) {
	case t:
		_ = t
	}
}
                                                                                               usr/local/go/test/fixedbugs/issue10066.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017004  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue10066.dir/a.go                                                     0100644 0000000 0000000 00000000157 13020111414 017553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package a

import "log"

func Do() {
	Do2()
}

func Do2() {
	println(log.Ldate | log.Ltime | log.Lshortfile)
}
                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue10066.dir/b.go                                                     0100644 0000000 0000000 00000000061 13020111414 017546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package b

import "./a"

func test() {
	a.Do()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue10066.go                                                           0100644 0000000 0000000 00000000462 13020111414 016555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10066: constants are printed in the original form
// in export data. This is the opposite of issue 9076.

package ignored
                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue10135.go                                                           0100644 0000000 0000000 00000001125 13020111414 016547  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10135: append a slice with zero-sized element used
// to always return a slice with the same data pointer as the
// old slice, even if it's nil, so this program used to panic
// with nil pointer dereference because after append, s is a
// slice with nil data pointer but non-zero len and cap.

package main

type empty struct{}

func main() {
	var s []empty

	s = append(s, empty{})

	for _, v := range s {
		_ = v
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/issue10219.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017004  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue10219.dir/a.go                                                     0100644 0000000 0000000 00000000470 13020111414 017551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type m struct {
	S string
}

var g = struct {
	m
	P string
}{
	m{"a"},
	"",
}

type S struct{}

func (s *S) M(p string) {
	r := g
	r.P = p
}
                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue10219.dir/b.go                                                     0100644 0000000 0000000 00000000332 13020111414 017547  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

func F() *a.S {
	return &a.S{}
}
                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue10219.dir/c.go                                                     0100644 0000000 0000000 00000000334 13020111414 017552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package c

import "./b"

func F() {
	s := b.F()
	s.M("c")
}
                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue10219.go                                                           0100644 0000000 0000000 00000000451 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10219: failure of inlinable function that uses embedded types
// in an anonymous struct via :=.

package ignored
                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue10253.go                                                           0100644 0000000 0000000 00000000642 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 10253: cmd/7g: bad codegen, probably regopt related

package main

func main() {
	if !eq() {
		panic("wrong value")
	}
}

var text = "abc"
var s = &str{text}

func eq() bool {
	return text[0] == s.text[0]
}

type str struct {
	text string
}
                                                                                              usr/local/go/test/fixedbugs/issue10284.go                                                           0100644 0000000 0000000 00000000602 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10284: gccgo failed to allow converting a user-defined
// type whose underlying type is uintptr to unsafe.Pointer.

package p

import "unsafe"

type T uintptr

var _ unsafe.Pointer = unsafe.Pointer(T(0))
                                                                                                                              usr/local/go/test/fixedbugs/issue10320.go                                                           0100644 0000000 0000000 00000001572 13020111414 016551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10320: 7g failed to compile a program because it attempted
// to use ZR as register. Other programs compiled but failed to
// execute correctly because they clobbered the g register.

package main

func main() {
	var x00, x01, x02, x03, x04, x05, x06, x07, x08, x09 int
	var x10, x11, x12, x13, x14, x15, x16, x17, x18, x19 int
	var x20, x21, x22, x23, x24, x25, x26, x27, x28, x29 int
	var x30, x31, x32 int

	_ = x00
	_ = x01
	_ = x02
	_ = x03
	_ = x04
	_ = x05
	_ = x06
	_ = x07
	_ = x08
	_ = x09

	_ = x10
	_ = x11
	_ = x12
	_ = x13
	_ = x14
	_ = x15
	_ = x16
	_ = x17
	_ = x18
	_ = x19

	_ = x20
	_ = x21
	_ = x22
	_ = x23
	_ = x24
	_ = x25
	_ = x26
	_ = x27
	_ = x28
	_ = x29

	_ = x30
	_ = x31
	_ = x32
}
                                                                                                                                      usr/local/go/test/fixedbugs/issue10332.go                                                           0100644 0000000 0000000 00000000746 13020111414 016556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// The PkgPath of unexported fields of types defined in package main was incorrectly ""

package main

import (
	"fmt"
	"reflect"
)

type foo struct {
	bar int
}

func main() {
	pkgpath := reflect.ValueOf(foo{}).Type().Field(0).PkgPath
	if pkgpath != "main" {
		fmt.Printf("BUG: incorrect PkgPath: %v", pkgpath)
	}
}
                          usr/local/go/test/fixedbugs/issue10353.go                                                           0100644 0000000 0000000 00000001625 13020111414 016556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 10253: cmd/gc: incorrect escape analysis of closures
// Partial call x.foo was not promoted to heap.

package main

func main() {
	c := make(chan bool)
	// Create a new goroutine to get a default-size stack segment.
	go func() {
		x := new(X)
		clos(x.foo)()
		c <- true
	}()
	<-c
}

type X int

func (x *X) foo() {
}

func clos(x func()) func() {
	f := func() {
		print("")
		x() // This statement crashed, because the partial call was allocated on the old stack.
	}
	// Grow stack so that partial call x becomes invalid if allocated on stack.
	growstack(10000)
	c := make(chan bool)
	// Spoil the previous stack segment.
	go func() {
		c <- true
	}()
	<-c
	return f
}

func growstack(x int) {
	if x == 0 {
		return
	}
	growstack(x - 1)
}
                                                                                                           usr/local/go/test/fixedbugs/issue10407.go                                                           0100644 0000000 0000000 00000000611 13020111414 016550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10407: gccgo failed to remove carriage returns
// from raw string literals.

package main

import "fmt"

func main() {
	fmt.Println("package main\nfunc main() { if `a\rb\r\nc` != \"ab\\nc\" { panic(42) }}")
}
                                                                                                                       usr/local/go/test/fixedbugs/issue10441.go                                                           0100644 0000000 0000000 00000000426 13020111414 016552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // build

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func bar() {
	f := func() {}
	foo(&f)
}

//go:noinline
func foo(f *func()) func() {
	return *f
}
                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue10486.go                                                           0100644 0000000 0000000 00000001007 13020111414 016557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10486.
// Check stack walk during div by zero fault,
// especially on software divide systems.

package main

import "runtime"

var A, B int

func divZero() int {
	defer func() {
		if p := recover(); p != nil {
			var pcs [512]uintptr
			runtime.Callers(2, pcs[:])
			runtime.GC()
		}
	}()
	return A / B
}

func main() {
	A = 1
	divZero()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue10607.go                                                           0100644 0000000 0000000 00000001312 13020111414 016551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build linux,!ppc64,!ppc64le,!mips64,!mips64le
// run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that a -B option is passed through when using both internal
// and external linking mode.

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	test("internal")
	test("external")
}

func test(linkmode string) {
	out, err := exec.Command("go", "run", "-ldflags", "-B=0x12345678 -linkmode="+linkmode, filepath.Join("fixedbugs", "issue10607a.go")).CombinedOutput()
	if err != nil {
		fmt.Printf("BUG: linkmode=%s %v\n%s\n", linkmode, err, out)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue10607a.go                                                          0100644 0000000 0000000 00000003142 13020111414 016715  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // skip

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is built by issue10607.go with a -B option.
// Verify that we have one build-id note with the expected value.

package main

import (
	"bytes"
	"debug/elf"
	"fmt"
	"os"
)

func main() {
	f, err := elf.Open("/proc/self/exe")
	if err != nil {
		if os.IsNotExist(err) {
			return
		}
		fmt.Fprintln(os.Stderr, "opening /proc/self/exe:", err)
		os.Exit(1)
	}

	c := 0
	fail := false
	for i, s := range f.Sections {
		if s.Type != elf.SHT_NOTE {
			continue
		}

		d, err := s.Data()
		if err != nil {
			fmt.Fprintln(os.Stderr, "reading data of note section %d: %v", i, err)
			continue
		}

		for len(d) > 0 {
			namesz := f.ByteOrder.Uint32(d)
			descsz := f.ByteOrder.Uint32(d[4:])
			typ := f.ByteOrder.Uint32(d[8:])

			an := (namesz + 3) &^ 3
			ad := (descsz + 3) &^ 3

			if int(12+an+ad) > len(d) {
				fmt.Fprintf(os.Stderr, "note section %d too short for header (%d < 12 + align(%d,4) + align(%d,4))\n", i, len(d), namesz, descsz)
				break
			}

			// 3 == NT_GNU_BUILD_ID
			if typ == 3 && namesz == 4 && bytes.Equal(d[12:16], []byte("GNU\000")) {
				id := string(d[12+an:12+an+descsz])
				if id == "\x12\x34\x56\x78" {
					c++
				} else {
					fmt.Fprintf(os.Stderr, "wrong build ID data: %q\n", id)
					fail = true
				}
			}

			d = d[12+an+ad:]
		}
	}

	if c == 0 {
		fmt.Fprintln(os.Stderr, "no build-id note")
		fail = true
	} else if c > 1 {
		fmt.Fprintln(os.Stderr, c, "build-id notes")
		fail = true
	}

	if fail {
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue10654.go                                                           0100644 0000000 0000000 00000000537 13020111414 016563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10654: Failure to use generated temps
// for function calls etc. in boolean codegen.

package main

var s string

func main() {
	if (s == "this") != (s == "that") {
	}
}
                                                                                                                                                                 usr/local/go/test/fixedbugs/issue10700.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 016777  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue10700.dir/other.go                                                 0100644 0000000 0000000 00000000333 13020111414 020443  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package other

type Exported interface {
	Do()
	secret()
}
                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue10700.dir/test.go                                                  0100644 0000000 0000000 00000003706 13020111414 020310  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -m -l

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./other"

type Imported interface {
	Do()
}

type HasAMethod struct {
	x int
}

func (me *HasAMethod) Do() {
	println(me.x)
}

func InMyCode(x *Imported, y *HasAMethod, z *other.Exported) {
	x.Do() // ERROR "x\.Do undefined \(type \*Imported is pointer to interface, not interface\)"
	x.do() // ERROR "x\.do undefined \(type \*Imported is pointer to interface, not interface\)"
	(*x).Do()
	x.Dont()    // ERROR "x\.Dont undefined \(type \*Imported is pointer to interface, not interface\)"
	(*x).Dont() // ERROR "\(\*x\)\.Dont undefined \(type Imported has no field or method Dont\)"

	y.Do()
	y.do() // ERROR "y\.do undefined \(type \*HasAMethod has no field or method do, but does have Do\)"
	(*y).Do()
	(*y).do()   // ERROR "\(\*y\)\.do undefined \(type HasAMethod has no field or method do, but does have Do\)"
	y.Dont()    // ERROR "y\.Dont undefined \(type \*HasAMethod has no field or method Dont\)"
	(*y).Dont() // ERROR "\(\*y\)\.Dont undefined \(type HasAMethod has no field or method Dont\)"

	z.Do() // ERROR "z\.Do undefined \(type \*other\.Exported is pointer to interface, not interface\)"
	z.do() // ERROR "z\.do undefined \(type \*other\.Exported is pointer to interface, not interface\)"
	(*z).Do()
	(*z).do()     // ERROR "\(\*z\)\.do undefined \(type other.Exported has no field or method do, but does have Do\)"
	z.Dont()      // ERROR "z\.Dont undefined \(type \*other\.Exported is pointer to interface, not interface\)"
	(*z).Dont()   // ERROR "\(\*z\)\.Dont undefined \(type other\.Exported has no field or method Dont\)"
	z.secret()    // ERROR "z\.secret undefined \(type \*other\.Exported is pointer to interface, not interface\)"
	(*z).secret() // ERROR "\(\*z\)\.secret undefined \(cannot refer to unexported field or method secret\)"

}

func main() {
}
                                                          usr/local/go/test/fixedbugs/issue10700.go                                                           0100644 0000000 0000000 00000000302 13020111414 016541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue10925.go                                                           0100644 0000000 0000000 00000001114 13020111414 016554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func prototype(xyz []string) {}
func main() {
	var got [][]string
	f := prototype
	f = func(ss []string) { got = append(got, ss) }
	for _, s := range []string{"one", "two", "three"} {
		f([]string{s})
	}
	if got[0][0] != "one" || got[1][0] != "two" || got[2][0] != "three" {
		// Bug's wrong output was [[three] [three] [three]]
		fmt.Println("Expected [[one] [two] [three]], got", got)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue10975.go                                                           0100644 0000000 0000000 00000000646 13020111414 016572  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 10975: Returning an invalid interface would cause
// `internal compiler error: getinarg: not a func`.

package main

type I interface {
	int // ERROR "interface contains embedded non-interface int"
}

func New() I {
	return struct{}{}
}
                                                                                          usr/local/go/test/fixedbugs/issue10977.go                                                           0100644 0000000 0000000 00000000476 13020111414 016575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type T struct{}

var (
	t = T{}
	u = t.New()
)

func x(T) (int, int) { return 0, 0 }

var _, _ = x(u)

func (T) New() T { return T{} }
                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue11053.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017001  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue11053.dir/p.go                                                     0100644 0000000 0000000 00000000326 13020111414 017565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func Int32(i int32) *int32 {
	return &i
}
                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue11053.dir/p_test.go                                                0100644 0000000 0000000 00000001473 13020111414 020630  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"p"
)

type I interface {
	Add(out *P)
}

type P struct {
	V *int32
}

type T struct{}

var x int32 = 42

func Int32x(i int32) *int32 {
	return &i
}

func (T) Add(out *P) {
	out.V = p.Int32(x) // inlined, p.i.2 moved to heap
}

var PP P
var out *P = &PP

func F(s I) interface{} {
	s.Add(out) // not inlined.
	return out
}

var s T

func main() {
	println("Starting")
	fmt.Sprint(new(int32))
	resp := F(s).(*P)
	println("Before, *resp.V=", *resp.V) // Trashes *resp.V in process of printing.
	println("After,  *resp.V=", *resp.V)
	if got, want := *resp.V, int32(42); got != want {
		fmt.Printf("FAIL, got %v, want %v", got, want)
	}
}
                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue11053.go                                                           0100644 0000000 0000000 00000000435 13020111414 016552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11053: Compiler does not run escape analysis on an inlined
// generated method wrapper.

package ignored
                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue11053.out                                                          0100644 0000000 0000000 00000000061 13020111414 016747  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Starting
Before, *resp.V= 42
After,  *resp.V= 42
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue11256.go                                                           0100644 0000000 0000000 00000002210 13020111414 016550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that stack barriers are reset when a goroutine exits without
// returning.

package main

import (
	"runtime"
	"sync/atomic"
	"time"
)

func main() {
	// Let the garbage collector run concurrently.
	runtime.GOMAXPROCS(2)

	var x [100][]byte

	for i := range x {
		var done int32

		go func() {
			// Use enough stack to get stack barriers, but
			// not so much that we go over _FixedStack.
			// There's a very narrow window here on most
			// OSs, so we basically can't do anything (not
			// even a time.Sleep or a channel).
			var buf [1024]byte
			buf[0]++
			for atomic.LoadInt32(&done) == 0 {
				runtime.Gosched()
			}
			atomic.StoreInt32(&done, 0)
			// Exit without unwinding stack barriers.
			runtime.Goexit()
		}()

		// Generate some garbage.
		x[i] = make([]byte, 1024*1024)

		// Give GC some time to install stack barriers in the G.
		time.Sleep(50 * time.Microsecond)
		atomic.StoreInt32(&done, 1)
		for atomic.LoadInt32(&done) == 1 {
			runtime.Gosched()
		}
	}
}
                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue11286.go                                                           0100644 0000000 0000000 00000001130 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that pointer bitmaps of types with large scalar tails are
// correctly repeated when unrolled into the heap bitmap.

package main

import "runtime"

const D = 57

type T struct {
	a [D]float64
	b map[string]int
	c [D]float64
}

var ts []T

func main() {
	ts = make([]T, 4)
	for i := range ts {
		ts[i].b = make(map[string]int)
	}
	ts[3].b["abc"] = 42
	runtime.GC()
	if ts[3].b["abc"] != 42 {
		panic("bad field value")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue11326.go                                                           0100644 0000000 0000000 00000002350 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Tests for golang.org/issue/11326.

package main

func main() {
	// The gc compiler implementation uses the minimally required 32bit
	// binary exponent, so these constants cannot be represented anymore
	// internally. However, the language spec does not preclude other
	// implementations from handling these. Don't check the error.
	// var _ = 1e2147483647 // "constant too large"
	// var _ = 1e646456993  // "constant too large"

	// Any implementation must be able to handle these constants at
	// compile time (even though they cannot be assigned to a float64).
	var _ = 1e646456992  // ERROR "1e\+646456992 overflows float64"
	var _ = 1e64645699   // ERROR "1e\+64645699 overflows float64"
	var _ = 1e6464569    // ERROR "1e\+6464569 overflows float64"
	var _ = 1e646456     // ERROR "1e\+646456 overflows float64"
	var _ = 1e64645      // ERROR "1e\+64645 overflows float64"
	var _ = 1e6464       // ERROR "1e\+6464 overflows float64"
	var _ = 1e646        // ERROR "1e\+646 overflows float64"
	var _ = 1e309        // ERROR "1e\+309 overflows float64"

	var _ = 1e308
}
                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue11326b.go                                                          0100644 0000000 0000000 00000001311 13020111414 016711  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Tests for golang.org/issue/11326.

func main() {
	{
		const n = 1e646456992
		const d = 1e646456991
		x := n / d
		if x != 10.0 {
			println("incorrect value:", x)
		}
	}
	{
		const n = 1e64645699
		const d = 1e64645698
		x := n / d
		if x != 10.0 {
			println("incorrect value:", x)
		}
	}
	{
		const n = 1e6464569
		const d = 1e6464568
		x := n / d
		if x != 10.0 {
			println("incorrect value:", x)
		}
	}
	{
		const n = 1e646456
		const d = 1e646455
		x := n / d
		if x != 10.0 {
			println("incorrect value:", x)
		}
	}
}
                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue11359.go                                                           0100644 0000000 0000000 00000000515 13020111414 016562  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// identifiers beginning with non-ASCII digits were incorrectly accepted.
// issue 11359.

package p
var Û¶ = 0 // ERROR "identifier cannot begin with digit"
                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue11362.go                                                           0100644 0000000 0000000 00000000624 13020111414 016555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11362: prints empty canonical import path

package main

import _ "unicode//utf8" // ERROR "non-canonical import path .unicode//utf8. \(should be .unicode/utf8.\)" "can't find import: .unicode//utf8."

func main() {
}

                                                                                                            usr/local/go/test/fixedbugs/issue11369.go                                                           0100644 0000000 0000000 00000001067 13020111414 016566  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that the half multiply resulting from a division
// by a constant generates correct code.

package main

func main() {
	var _ = 7 / "0"[0] // test case from #11369
	var _ = 1 / "."[0] // test case from #11358
	var x = 0 / "0"[0]
	var y = 48 / "0"[0]
	var z = 5 * 48 / "0"[0]
	if x != 0 {
		panic("expected 0")
	}
	if y != 1 {
		panic("expected 1")
	}
	if z != 5 {
		panic("expected 5")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue11590.go                                                           0100644 0000000 0000000 00000000674 13020111414 016565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

var _ = int8(4) * 300         // ERROR "constant 300 overflows int8" "constant 1200 overflows int8"
var _ = complex64(1) * 1e200  // ERROR "constant 1e\+200 overflows complex64"
var _ = complex128(1) * 1e500 // ERROR "constant 1e\+500 overflows complex128"
                                                                    usr/local/go/test/fixedbugs/issue11610.go                                                           0100644 0000000 0000000 00000000637 13020111414 016555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test an internal compiler error on ? symbol in declaration
// following an empty import.

package a
import""  // ERROR "import path is empty"
var?      // ERROR "invalid declaration"

var x int // ERROR "unexpected var"

func main() {
}
                                                                                                 usr/local/go/test/fixedbugs/issue11614.go                                                           0100644 0000000 0000000 00000001153 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that incorrect expressions involving wrong anonymous interface
// do not generate panics in Type Stringer.
// Does not compile.

package main

type I interface {
	int // ERROR "interface contains embedded non-interface int"
}

func n() {
	(I) // ERROR "type I is not an expression"
}

func m() {
	(interface{int}) // ERROR "interface contains embedded non-interface int" "type interface { int } is not an expression"
}

func main() {
}
                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue11656.go                                                           0100644 0000000 0000000 00000003400 13020111414 016556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// windows doesn't work, because Windows exception handling
// delivers signals based on the current PC, and that current PC
// doesn't go into the Go runtime.
// +build !windows

package main

import (
	"encoding/binary"
	"runtime"
	"runtime/debug"
	"unsafe"
)

func main() {
	debug.SetPanicOnFault(true)
	defer func() {
		if err := recover(); err == nil {
			panic("not panicking")
		}
		pc, _, _, _ := runtime.Caller(10)
		f := runtime.FuncForPC(pc)
		if f == nil || f.Name() != "main.f" {
			if f == nil {
				println("no func for ", unsafe.Pointer(pc))
			} else {
				println("found func:", f.Name())
			}
			panic("cannot find main.f on stack")
		}
	}()
	f(20)
}

func f(n int) {
	if n > 0 {
		f(n - 1)
	}
	var f struct {
		x uintptr
	}

	// We want to force an illegal instruction, to get a crash
	// at a PC value != 0.
	// Not all systems make the data section non-executable.
	ill := make([]byte, 64)
	switch runtime.GOARCH {
	case "386", "amd64":
		binary.LittleEndian.PutUint16(ill, 0x0b0f) // ud2
	case "arm":
		binary.LittleEndian.PutUint32(ill, 0xe7f000f0) // no name, but permanently undefined
	case "arm64":
		binary.LittleEndian.PutUint32(ill, 0xd4207d00) // brk #1000
	case "ppc64":
		binary.BigEndian.PutUint32(ill, 0x7fe00008) // trap
	case "ppc64le":
		binary.LittleEndian.PutUint32(ill, 0x7fe00008) // trap
	case "mips64":
		binary.BigEndian.PutUint32(ill, 0x00000034) // trap
	case "mips64le":
		binary.LittleEndian.PutUint32(ill, 0x00000034) // trap
	default:
		// Just leave it as 0 and hope for the best.
	}

	f.x = uintptr(unsafe.Pointer(&ill[0]))
	fn := *(*func())(unsafe.Pointer(&f))
	fn()
}
                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue11699.go                                                           0100644 0000000 0000000 00000000420 13020111414 016564  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 11699; used to fail with duplicate _.args_stackmap symbols.

package p

func _()
func _()
                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue11737.go                                                           0100644 0000000 0000000 00000000632 13020111414 016562  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11737 - invalid == not being caught until generated switch code was compiled

package p

func f()

func s(x interface{}) {
	switch x {
	case f: // ERROR "invalid case f \(type func\(\)\) in switch \(incomparable type\)"
	}
}
                                                                                                      usr/local/go/test/fixedbugs/issue11750.go                                                           0100644 0000000 0000000 00000000565 13020111414 016562  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11750: mkdotargslice: typecheck failed

package main

func main() {
	fn := func(names string) {

	}
	func(names ...string) {
		for _, name := range names {
			fn(name)
		}
	}("one", "two")
}
                                                                                                                                           usr/local/go/test/fixedbugs/issue11771.go                                                           0100644 0000000 0000000 00000002367 13020111414 016567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !nacl
// run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11771: Magic comments should ignore carriage returns.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
)

func main() {
	if runtime.Compiler != "gc" {
		return
	}

	dir, err := ioutil.TempDir("", "go-issue11771")
	if err != nil {
		log.Fatalf("creating temp dir: %v\n", err)
	}
	defer os.RemoveAll(dir)

	// The go:nowritebarrier magic comment is only permitted in
	// the runtime package.  So we confirm that the compilation
	// fails.

	var buf bytes.Buffer
	fmt.Fprintln(&buf, `
package main

func main() {
}
`)
	fmt.Fprintln(&buf, "//go:nowritebarrier\r")
	fmt.Fprintln(&buf, `
func x() {
}
`)

	if err := ioutil.WriteFile(filepath.Join(dir, "x.go"), buf.Bytes(), 0666); err != nil {
		log.Fatal(err)
	}

	cmd := exec.Command("go", "tool", "compile", "x.go")
	cmd.Dir = dir
	output, err := cmd.CombinedOutput()
	if err == nil {
		log.Fatal("compile succeeded unexpectedly")
	}
	if !bytes.Contains(output, []byte("only allowed in runtime")) {
		log.Fatalf("wrong error message from compiler; got:\n%s\n", output)
	}
}
                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue11790.go                                                           0100644 0000000 0000000 00000001117 13020111414 016560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11790: Incorrect error following named pointer dereference on field

package main

import "fmt"

type T0 struct {
	x int
}

func (*T0) M0() {
	fmt.Println("M0")
}

type T2 struct {
	*T0
}

type Q *T2

func main() {
	// If run, expected output is
	// 42
	// M0
	t0 := T0{42}
	t2 := T2{&t0}
	var q Q = &t2
	fmt.Println(q.x) // Comment out either this line or the next line and the program works
	(*q).T0.M0()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue11987.go                                                           0100644 0000000 0000000 00000001156 13020111414 016573  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 11987. The ppc64 SRADCC instruction was misassembled in a way
// lost bit 5 of the immediate so v>>32 was assembled as v>>0.  SRADCC
// is only ever inserted by peep so it's hard to be sure when it will
// be used. This formulation worked when the bug was fixed.

package main

import "fmt"

var v int64 = 0x80000000

func main() {
	s := fmt.Sprintf("%v", v>>32 == 0)
	if s != "true" {
		fmt.Printf("BUG: v>>32 == 0 evaluated as %q\n", s)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue12006.go                                                           0100644 0000000 0000000 00000011013 13020111414 016543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -m -l

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test escape analysis through ... parameters.

package foo

func FooN(vals ...*int) (s int) { // ERROR "FooN vals does not escape"
	for _, v := range vals {
		s += *v
	}
	return s
}

// Append forces heap allocation and copies entries in vals to heap, therefore they escape to heap.
func FooNx(x *int, vals ...*int) (s int) { // ERROR "leaking param: x" "leaking param content: vals"
	vals = append(vals, x)
	return FooN(vals...)
}

var sink []*int

func FooNy(x *int, vals ...*int) (s int) { // ERROR "leaking param: x" "leaking param: vals" "leaking param content: vals"
	vals = append(vals, x)
	sink = vals
	return FooN(vals...)
}

func FooNz(vals ...*int) (s int) { // ERROR "leaking param: vals"
	sink = vals
	return FooN(vals...)
}

func TFooN() {
	for i := 0; i < 1000; i++ {
		var i, j int
		FooN(&i, &j) // ERROR "TFooN &i does not escape" "TFooN &j does not escape" "TFooN ... argument does not escape"
	}
}

func TFooNx() {
	for i := 0; i < 1000; i++ {
		var i, j, k int   // ERROR "moved to heap: i" "moved to heap: j" "moved to heap: k"
		FooNx(&k, &i, &j) // ERROR "&k escapes to heap" "&i escapes to heap" "&j escapes to heap" "TFooNx ... argument does not escape"
	}
}

func TFooNy() {
	for i := 0; i < 1000; i++ {
		var i, j, k int   // ERROR "moved to heap: i" "moved to heap: j" "moved to heap: k"
		FooNy(&k, &i, &j) // ERROR "&i escapes to heap" "&j escapes to heap" "&k escapes to heap" "... argument escapes to heap"
	}
}

func TFooNz() {
	for i := 0; i < 1000; i++ {
		var i, j int  // ERROR "moved to heap: i" "moved to heap: j"
		FooNz(&i, &j) // ERROR "&i escapes to heap" "&j escapes to heap" "... argument escapes to heap"
	}
}

var isink *int32

func FooI(args ...interface{}) { // ERROR "leaking param content: args"
	for i := 0; i < len(args); i++ {
		switch x := args[i].(type) {
		case nil:
			println("is nil")
		case int32:
			println("is int32")
		case *int32:
			println("is *int32")
			isink = x
		case string:
			println("is string")
		}
	}
}

func TFooI() {
	a := int32(1) // ERROR "moved to heap: a"
	b := "cat"
	c := &a       // ERROR "&a escapes to heap"
	FooI(a, b, c) // ERROR "a escapes to heap" "b escapes to heap" "c escapes to heap" "TFooI ... argument does not escape"
}

func FooJ(args ...interface{}) *int32 { // ERROR "leaking param: args to result ~r1 level=1"
	for i := 0; i < len(args); i++ {
		switch x := args[i].(type) {
		case nil:
			println("is nil")
		case int32:
			println("is int32")
		case *int32:
			println("is *int32")
			return x
		case string:
			println("is string")
		}
	}
	return nil
}

func TFooJ1() {
	a := int32(1)
	b := "cat"
	c := &a       // ERROR "TFooJ1 &a does not escape"
	FooJ(a, b, c) // ERROR "TFooJ1 a does not escape" "TFooJ1 b does not escape" "TFooJ1 c does not escape" "TFooJ1 ... argument does not escape"
}

func TFooJ2() {
	a := int32(1) // ERROR "moved to heap: a"
	b := "cat"
	c := &a               // ERROR "&a escapes to heap"
	isink = FooJ(a, b, c) // ERROR "a escapes to heap" "b escapes to heap" "c escapes to heap" "TFooJ2 ... argument does not escape"
}

type fakeSlice struct {
	l int
	a *[4]interface{}
}

func FooK(args fakeSlice) *int32 { // ERROR "leaking param: args to result ~r1 level=1"
	for i := 0; i < args.l; i++ {
		switch x := (*args.a)[i].(type) {
		case nil:
			println("is nil")
		case int32:
			println("is int32")
		case *int32:
			println("is *int32")
			return x
		case string:
			println("is string")
		}
	}
	return nil
}

func TFooK2() {
	a := int32(1) // ERROR "moved to heap: a"
	b := "cat"
	c := &a                                           // ERROR "&a escapes to heap"
	fs := fakeSlice{3, &[4]interface{}{a, b, c, nil}} // ERROR "a escapes to heap" "b escapes to heap" "c escapes to heap" "TFooK2 &\[4\]interface {} literal does not escape"
	isink = FooK(fs)
}

func FooL(args []interface{}) *int32 { // ERROR "leaking param: args to result ~r1 level=1"
	for i := 0; i < len(args); i++ {
		switch x := args[i].(type) {
		case nil:
			println("is nil")
		case int32:
			println("is int32")
		case *int32:
			println("is *int32")
			return x
		case string:
			println("is string")
		}
	}
	return nil
}

func TFooL2() {
	a := int32(1) // ERROR "moved to heap: a"
	b := "cat"
	c := &a                     // ERROR "&a escapes to heap"
	s := []interface{}{a, b, c} // ERROR "a escapes to heap" "b escapes to heap" "c escapes to heap" "TFooL2 \[\]interface {} literal does not escape"
	isink = FooL(s)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue12108.go                                                           0100644 0000000 0000000 00000001166 13020111414 016556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// A generated method with a return value large enough to be
// initialized by duffzero is not a leaf method, which violated
// assumptions made by cmd/internal/obj/ppc64.

package main

const N = 9 // values > 8 cause (Super).Method to use duffzero

type Base struct {
}

func (b *Base) Method() (x [N]uintptr) {
	return
}

type Super struct {
	Base
}

type T interface {
	Method() [N]uintptr
}

func f(q T) {
	q.Method()
}

func main() {
	var s Super
	f(&s)
}
                                                                                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue12133.go                                                           0100644 0000000 0000000 00000001013 13020111414 016543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 12133.  The CX register was getting clobbered
// because we did not keep track of its allocation correctly.

package main

import "fmt"

func main() {
	want := uint(48)
	got := f1(48)
	if got != want {
		fmt.Println("got", got, ", wanted", want)
		panic("bad")
	}
}

//go:noinline
func f1(v1 uint) uint {
	return v1 >> ((1 >> v1) + (1 >> v1))
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue12226.go                                                           0100644 0000000 0000000 00000000513 13020111414 016552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func main() {
	if []byte("foo")[0] == []byte("b")[0] {
		fmt.Println("BUG: \"foo\" and \"b\" appear to have the same first byte")
	}
}
                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue12411.go                                                           0100644 0000000 0000000 00000000754 13020111414 016555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build !386
// run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 12411. Loss of AX during %.

package main

func main() {
	x := f(4)
	if x != 0 {
		println("BUG: x=", x)
	}
}

//go:noinline
func f(x int) int {
	// AX was live on entry to one of the % code generations,
	// and the % code generation smashed it.
	return ((2 * x) % 3) % (2 % ((x << 2) ^ (x % 3)))
}
                    usr/local/go/test/fixedbugs/issue12413.go                                                           0100644 0000000 0000000 00000000714 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 12413: invalid variable name x in type switch: code would fail
// to compile if the variable used in the short variable declaration was
// previously declared as a constant.

package main

func main() {
	const x = 42
	switch x := interface{}(nil).(type) {
	default:
		_ = x
	}
}
                                                    usr/local/go/test/fixedbugs/issue12577.go                                                           0100644 0000000 0000000 00000001763 13020111414 016573  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 12577: Test that there are no -0 floating-point constants.

package main

import "math"

const (
	z0 = 0.0
	z1 = -0.0
	z2 = -z0
	z3 = -z2
)

var (
	x0 float32 = z0
	x1 float32 = z1
	x2 float32 = z2
	x3 float32 = z3

	y0 float64 = z0
	y1 float64 = z1
	y2 float64 = z2
	y3 float64 = z3
)

func test32(f float32) {
	if f != 0 || math.Signbit(float64(f)) {
		println("BUG: got", f, "want 0.0")
		return
	}
}

func test64(f float64) {
	if f != 0 || math.Signbit(f) {
		println("BUG: got", f, "want 0.0")
		return
	}
}

func main() {
	if f := -x0; f != 0 || !math.Signbit(float64(f)) {
		println("BUG: got", f, "want -0.0")
	}

	test32(-0.0)
	test32(x0)
	test32(x1)
	test32(x2)
	test32(x3)

	if f := -y0; f != 0 || !math.Signbit(f) {
		println("BUG: got", f, "want -0.0")
	}

	test64(-0.0)
	test64(y0)
	test64(y1)
	test64(y2)
	test64(y3)
}
             usr/local/go/test/fixedbugs/issue12588.go                                                           0100644 0000000 0000000 00000004027 13020111414 016571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -m -l

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Tests escape analysis for range of arrays.
// Compiles but need not run.  Inlining is disabled.

package main

type A struct {
	b [3]uint64
}

type B struct {
	b [3]*uint64
}

func f(a A) int {
	for i, x := range &a.b { // ERROR "f &a.b does not escape"
		if x != 0 {
			return 64*i + int(x)
		}
	}
	return 0
}

func g(a *A) int { // ERROR "g a does not escape"
	for i, x := range &a.b { // ERROR "g &a.b does not escape"
		if x != 0 {
			return 64*i + int(x)
		}
	}
	return 0
}

func h(a *B) *uint64 { // ERROR "leaking param: a to result ~r1 level=1"
	for i, x := range &a.b { // ERROR "h &a.b does not escape"
		if i == 0 {
			return x
		}
	}
	return nil
}

func h2(a *B) *uint64 { // ERROR "leaking param: a to result ~r1 level=1"
	p := &a.b // ERROR "h2 &a.b does not escape"
	for i, x := range p {
		if i == 0 {
			return x
		}
	}
	return nil
}

// Seems like below should be level=1, not 0.
func k(a B) *uint64 { // ERROR "leaking param: a to result ~r1 level=0"
	for i, x := range &a.b { // ERROR "k &a.b does not escape"
		if i == 0 {
			return x
		}
	}
	return nil
}

var sink *uint64

func main() {
	var a1, a2 A
	var b1, b2, b3, b4 B
	var x1, x2, x3, x4 uint64 // ERROR "moved to heap: x1" "moved to heap: x3"
	b1.b[0] = &x1             // ERROR "&x1 escapes to heap"
	b2.b[0] = &x2             // ERROR "main &x2 does not escape"
	b3.b[0] = &x3             // ERROR "&x3 escapes to heap"
	b4.b[0] = &x4             // ERROR "main &x4 does not escape"
	f(a1)
	g(&a2)         // ERROR "main &a2 does not escape"
	sink = h(&b1)  // ERROR "main &b1 does not escape"
	h(&b2)         // ERROR "main &b2 does not escape"
	sink = h2(&b1) // ERROR "main &b1 does not escape"
	h2(&b4)        // ERROR "main &b4 does not escape"
	x1 = 17
	println("*sink=", *sink) // Verify that sink addresses x1
	x3 = 42
	sink = k(b3)
	println("*sink=", *sink) // Verify that sink addresses x3
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue12677.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017016  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue12677.dir/p.go                                                     0100644 0000000 0000000 00000000360 13020111414 017600  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p
func Baz(f int) float64 {
    return 1 / float64(int(1)<<(uint(f)))
}
                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue12677.dir/q.go                                                     0100644 0000000 0000000 00000000326 13020111414 017603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package q
import "./p"
func f() { println(p.Baz(2)) }
                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue12677.go                                                           0100644 0000000 0000000 00000000411 13020111414 016561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 12677: Type loss during export/import of inlined function body.

package ignored
                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue12686.go                                                           0100644 0000000 0000000 00000000612 13020111414 016564  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// golang.org/issue/12686.
// interesting because it's a non-constant but ideal value
// and we used to incorrectly attach a constant Val to the Node.

package p

func f(i uint) uint {
	x := []uint{1 << i}
	return x[0]
}
                                                                                                                      usr/local/go/test/fixedbugs/issue12944.go                                                           0100644 0000000 0000000 00000000422 13020111414 016560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "unsafe"

const (
	_ = unsafe.Sizeof([0]byte{}[0]) // ERROR "out of bounds"
)
                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue1304.go                                                            0100644 0000000 0000000 00000000513 13020111414 016465  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var a = 1

func main() {
	defer func() {
		recover()
		if a != 2 {
			println("BUG a =", a)
		}
	}()
	a = 2
	b := a - a
	c := 4
	a = c / b
	a = 3
}
                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue13160.go                                                           0100644 0000000 0000000 00000002740 13020111414 016554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"runtime"
)

const N = 100000

func main() {
	// Allocate more Ps than processors.  This raises
	// the chance that we get interrupted by the OS
	// in exactly the right (wrong!) place.
	p := runtime.NumCPU()
	runtime.GOMAXPROCS(2 * p)

	// Allocate some pointers.
	ptrs := make([]*int, p)
	for i := 0; i < p; i++ {
		ptrs[i] = new(int)
	}

	// Arena where we read and write pointers like crazy.
	collider := make([]*int, p)

	done := make(chan struct{}, 2*p)

	// Start writers.  They alternately write a pointer
	// and nil to a slot in the collider.
	for i := 0; i < p; i++ {
		i := i
		go func() {
			for j := 0; j < N; j++ {
				// Write a pointer using memmove.
				copy(collider[i:i+1], ptrs[i:i+1])
				// Write nil using memclr.
				// (This is a magic loop that gets lowered to memclr.)
				r := collider[i : i+1]
				for k := range r {
					r[k] = nil
				}
			}
			done <- struct{}{}
		}()
	}
	// Start readers.  They read pointers from slots
	// and make sure they are valid.
	for i := 0; i < p; i++ {
		i := i
		go func() {
			for j := 0; j < N; j++ {
				var ptr [1]*int
				copy(ptr[:], collider[i:i+1])
				if ptr[0] != nil && ptr[0] != ptrs[i] {
					panic(fmt.Sprintf("bad pointer read %p!", ptr[0]))
				}
			}
			done <- struct{}{}
		}()
	}
	for i := 0; i < 2*p; i++ {
		<-done
	}
}
                                usr/local/go/test/fixedbugs/issue13169.go                                                           0100644 0000000 0000000 00000001300 13020111414 016554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T struct {
	a, b, c int
}

func usestack() {
	usestack1(32)
}
func usestack1(d int) byte {
	if d == 0 {
		return 0
	}
	var b [1024]byte
	usestack1(d - 1)
	return b[3]
}

const n = 100000

func main() {
	c := make(chan interface{})
	done := make(chan bool)

	for i := 0; i < 10; i++ {
		go func() {
			for j := 0; j < n; j++ {
				c <- new(T)
			}
			done <- true
		}()
		go func() {
			for j := 0; j < n; j++ {
				_ = (<-c).(*T)
				usestack()
			}
			done <- true
		}()
	}
	for i := 0; i < 20; i++ {
		<-done
	}
}
                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue13171.go                                                           0100644 0000000 0000000 00000001115 13020111414 016551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Make sure the compiler knows that DUFFCOPY clobbers X0

import "fmt"

//go:noinline
func f(x float64) float64 {
	// y is allocated to X0
	y := x + 5
	// marshals z before y.  Marshalling z
	// calls DUFFCOPY.
	return g(z, y)
}

//go:noinline
func g(b [64]byte, y float64) float64 {
	return y
}

var z [64]byte

func main() {
	got := f(5)
	if got != 10 {
		panic(fmt.Sprintf("want 10, got %f", got))
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue13248.go                                                           0100644 0000000 0000000 00000000473 13020111414 016564  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This program caused an infinite loop with the recursive-descent parser.

package main

func main() {
    foo(
} // ERROR "unexpected }"
                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue13261.go                                                           0100644 0000000 0000000 00000001011 13020111414 016544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Taking the address of a parenthesized composite literal is permitted.

package main

type T struct{}

func main() {
	_ = &T{}
	_ = &(T{})
	_ = &((T{}))

	_ = &struct{}{}
	_ = &(struct{}{})
	_ = &((struct{}{}))

	switch (&T{}) {}
	switch &(T{}) {}
	switch &((T{})) {}

	switch &struct{}{} {}
	switch &(struct{}{}) {}
	switch &((struct{}{})) {}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue13266.go                                                           0100644 0000000 0000000 00000000473 13020111414 016564  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Offending character % must not be interpreted as
// start of format verb when emitting error message.

package% // ERROR "unexpected %"
                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue13268.go                                                           0100644 0000000 0000000 00000002061 13020111414 016561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test error message when EOF is encountered in the
// middle of a BOM.
//
// Since the error requires an EOF, we cannot use the
// errorcheckoutput mechanism.

package main

import (
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"runtime"
	"strings"
)

func main() {
	// cannot use temp file on nacl via child process
	if runtime.GOOS == "nacl" {
		return
	}

	// create source
	f, err := ioutil.TempFile("", "issue13268-")
	if err != nil {
		log.Fatalf("could not create source file: %v", err)
	}
	f.Write([]byte("package p\n\nfunc \xef\xef")) // if this fails, we will die later
	f.Close()
	defer os.Remove(f.Name())

	// compile and test output
	cmd := exec.Command("go", "tool", "compile", f.Name())
	out, err := cmd.CombinedOutput()
	if err == nil {
		log.Fatalf("expected cmd/compile to fail")
	}
	if strings.HasPrefix(string(out), "illegal UTF-8 sequence") {
		log.Fatalf("error %q not found", out)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue13273.go                                                           0100644 0000000 0000000 00000003261 13020111414 016560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check that we correctly construct (and report errors)
// for unary expressions of the form <-x where we only
// know after parsing x whether <-x is a receive operation
// or a channel type.

package n

func f() {
	// test case from issue 13273
	<-chan int((chan int)(nil))

	<-chan int(nil)
	<-chan chan int(nil)
	<-chan chan chan int(nil)
	<-chan chan chan chan int(nil)
	<-chan chan chan chan chan int(nil)

	<-chan<-chan int(nil)
	<-chan<-chan<-chan int(nil)
	<-chan<-chan<-chan<-chan int(nil)
	<-chan<-chan<-chan<-chan<-chan int(nil)

	<-chan (<-chan int)(nil)
	<-chan (<-chan (<-chan int))(nil)
	<-chan (<-chan (<-chan (<-chan int)))(nil)
	<-chan (<-chan (<-chan (<-chan (<-chan int))))(nil)

	<-(<-chan int)(nil)
	<-(<-chan chan int)(nil)
	<-(<-chan chan chan int)(nil)
	<-(<-chan chan chan chan int)(nil)
	<-(<-chan chan chan chan chan int)(nil)

	<-(<-chan<-chan int)(nil)
	<-(<-chan<-chan<-chan int)(nil)
	<-(<-chan<-chan<-chan<-chan int)(nil)
	<-(<-chan<-chan<-chan<-chan<-chan int)(nil)

	<-(<-chan (<-chan int))(nil)
	<-(<-chan (<-chan (<-chan int)))(nil)
	<-(<-chan (<-chan (<-chan (<-chan int))))(nil)
	<-(<-chan (<-chan (<-chan (<-chan (<-chan int)))))(nil)

	type _ <-<-chan int // ERROR "unexpected <-, expecting chan"
	<-<-chan int // ERROR "unexpected <-, expecting chan|expecting {" (new parser: same error as for type decl)

	type _ <-chan<-int // ERROR "unexpected int, expecting chan|expecting chan"
	<-chan<-int // ERROR "unexpected int, expecting chan|expecting {" (new parser: same error as for type decl)
}
                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue13274.go                                                           0100644 0000000 0000000 00000000411 13020111414 016553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check that we don't ignore EOF.

package p

var f = func() { // ERROR "unexpected EOF"                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue13319.go                                                           0100644 0000000 0000000 00000000632 13020111414 016560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func f(int, int) {
    switch x {
    case 1:
        f(1, g()   // ERROR "expecting \)|expecting comma or \)"
    case 2:
        f()
    case 3:
        f(1, g()   // ERROR "expecting \)|expecting comma or \)"
    }
}
                                                                                                      usr/local/go/test/fixedbugs/issue13365.go                                                           0100644 0000000 0000000 00000001527 13020111414 016565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 13365: confusing error message (array vs slice)

package main

var t struct{}

func main() {
	_ = []int{-1: 0}    // ERROR "index must be non\-negative integer constant"
	_ = [10]int{-1: 0}  // ERROR "index must be non\-negative integer constant"
	_ = [...]int{-1: 0} // ERROR "index must be non\-negative integer constant"

	_ = []int{100: 0}
	_ = [10]int{100: 0} // ERROR "array index 100 out of bounds"
	_ = [...]int{100: 0}

	_ = []int{t}    // ERROR "cannot use .* as type int in array or slice literal"
	_ = [10]int{t}  // ERROR "cannot use .* as type int in array or slice literal"
	_ = [...]int{t} // ERROR "cannot use .* as type int in array or slice literal"
}
                                                                                                                                                                         usr/local/go/test/fixedbugs/issue13415.go                                                           0100644 0000000 0000000 00000000721 13020111414 016554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that error message regarding := appears on
// correct line (and not on the line of the 2nd :=).

package p

func f() {
    select {
    case x, x := <-func() chan int { // ERROR "x repeated on left side of :="
            c := make(chan int)
            return c
    }():
    }
}
                                               usr/local/go/test/fixedbugs/issue13471.go                                                           0100644 0000000 0000000 00000001765 13020111414 016567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Tests for golang.org/issue/13471

package main

func main() {
	const _ int64 = 1e646456992 // ERROR "1e\+646456992 overflows integer"
	const _ int32 = 1e64645699  // ERROR "1e\+64645699 overflows integer"
	const _ int16 = 1e6464569   // ERROR "1e\+6464569 overflows integer"
	const _ int8 = 1e646456     // ERROR "1e\+646456 overflows integer"
	const _ int = 1e64645       // ERROR "1e\+64645 overflows integer"

	const _ uint64 = 1e646456992 // ERROR "1e\+646456992 overflows integer"
	const _ uint32 = 1e64645699  // ERROR "1e\+64645699 overflows integer"
	const _ uint16 = 1e6464569   // ERROR "1e\+6464569 overflows integer"
	const _ uint8 = 1e646456     // ERROR "1e\+646456 overflows integer"
	const _ uint = 1e64645       // ERROR "1e\+64645 overflows integer"

	const _ rune = 1e64645 // ERROR "1e\+64645 overflows integer"
}
           usr/local/go/test/fixedbugs/issue13480.go                                                           0100644 0000000 0000000 00000001466 13020111414 016565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that comparisons of slice/map/func values against converted nil
// values are properly rejected.

package p

func bug() {
	type S []byte
	type M map[int]int
	type F func()

	var s S
	var m M
	var f F

	_ = s == S(nil) // ERROR "compare.*to nil"
	_ = S(nil) == s // ERROR "compare.*to nil"
	switch s {
	case S(nil): // ERROR "compare.*to nil"
	}

	_ = m == M(nil) // ERROR "compare.*to nil"
	_ = M(nil) == m // ERROR "compare.*to nil"
	switch m {
	case M(nil): // ERROR "compare.*to nil"
	}

	_ = f == F(nil) // ERROR "compare.*to nil"
	_ = F(nil) == f // ERROR "compare.*to nil"
	switch f {
	case F(nil): // ERROR "compare.*to nil"
	}
}
                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue13539.go                                                           0100644 0000000 0000000 00000000641 13020111414 016564  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that a label named like a package is recognized
// as a label rather than a package and that the package
// remains unused.

package main

import "math" // ERROR "imported and not used"

func main() {
math:
	for {
		break math
	}
}
                                                                                               usr/local/go/test/fixedbugs/issue13559.go                                                           0100644 0000000 0000000 00000010457 13020111414 016574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that error messages print meaningful values
// for various extreme floating-point constants.

package p

// failure case in issue
const _ int64 = 1e-10000 // ERROR "1e\-10000 truncated"

const (
	_ int64 = 1e10000000 // ERROR "1e\+10000000 overflows"
	_ int64 = 1e1000000  // ERROR "1e\+1000000 overflows"
	_ int64 = 1e100000   // ERROR "1e\+100000 overflows"
	_ int64 = 1e10000    // ERROR "1e\+10000 overflows"
	_ int64 = 1e1000     // ERROR "1e\+1000 overflows"
	_ int64 = 1e100      // ERROR "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 overflows"
	_ int64 = 1e10
	_ int64 = 1e1
	_ int64 = 1e0
	_ int64 = 1e-1       // ERROR "0\.1 truncated"
	_ int64 = 1e-10      // ERROR "1e\-10 truncated"
	_ int64 = 1e-100     // ERROR "1e\-100 truncated"
	_ int64 = 1e-1000    // ERROR "1e\-1000 truncated"
	_ int64 = 1e-10000   // ERROR "1e\-10000 truncated"
	_ int64 = 1e-100000  // ERROR "1e\-100000 truncated"
	_ int64 = 1e-1000000 // ERROR "1e\-1000000 truncated"
)

const (
	_ int64 = -1e10000000 // ERROR "\-1e\+10000000 overflows"
	_ int64 = -1e1000000  // ERROR "\-1e\+1000000 overflows"
	_ int64 = -1e100000   // ERROR "\-1e\+100000 overflows"
	_ int64 = -1e10000    // ERROR "\-1e\+10000 overflows"
	_ int64 = -1e1000     // ERROR "\-1e\+1000 overflows"
	_ int64 = -1e100      // ERROR "\-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 overflows"
	_ int64 = -1e10
	_ int64 = -1e1
	_ int64 = -1e0
	_ int64 = -1e-1       // ERROR "\-0\.1 truncated"
	_ int64 = -1e-10      // ERROR "\-1e\-10 truncated"
	_ int64 = -1e-100     // ERROR "\-1e\-100 truncated"
	_ int64 = -1e-1000    // ERROR "\-1e\-1000 truncated"
	_ int64 = -1e-10000   // ERROR "\-1e\-10000 truncated"
	_ int64 = -1e-100000  // ERROR "\-1e\-100000 truncated"
	_ int64 = -1e-1000000 // ERROR "\-1e\-1000000 truncated"
)

const (
	_ int64 = 1.23456789e10000000 // ERROR "1\.23457e\+10000000 overflows"
	_ int64 = 1.23456789e1000000  // ERROR "1\.23457e\+1000000 overflows"
	_ int64 = 1.23456789e100000   // ERROR "1\.23457e\+100000 overflows"
	_ int64 = 1.23456789e10000    // ERROR "1\.23457e\+10000 overflows"
	_ int64 = 1.23456789e1000     // ERROR "1\.23457e\+1000 overflows"
	_ int64 = 1.23456789e100      // ERROR "12345678900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 overflows"
	_ int64 = 1.23456789e10
	_ int64 = 1.23456789e1        // ERROR "12\.3457 truncated"
	_ int64 = 1.23456789e0        // ERROR "1\.23457 truncated"
	_ int64 = 1.23456789e-1       // ERROR "0\.123457 truncated"
	_ int64 = 1.23456789e-10      // ERROR "1\.23457e\-10 truncated"
	_ int64 = 1.23456789e-100     // ERROR "1\.23457e\-100 truncated"
	_ int64 = 1.23456789e-1000    // ERROR "1\.23457e\-1000 truncated"
	_ int64 = 1.23456789e-10000   // ERROR "1\.23457e\-10000 truncated"
	_ int64 = 1.23456789e-100000  // ERROR "1\.23457e\-100000 truncated"
	_ int64 = 1.23456789e-1000000 // ERROR "1\.23457e\-1000000 truncated"
)

const (
	_ int64 = -1.23456789e10000000 // ERROR "\-1\.23457e\+10000000 overflows"
	_ int64 = -1.23456789e1000000  // ERROR "\-1\.23457e\+1000000 overflows"
	_ int64 = -1.23456789e100000   // ERROR "\-1\.23457e\+100000 overflows"
	_ int64 = -1.23456789e10000    // ERROR "\-1\.23457e\+10000 overflows"
	_ int64 = -1.23456789e1000     // ERROR "\-1\.23457e\+1000 overflows"
	_ int64 = -1.23456789e100      // ERROR "\-12345678900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 overflows"
	_ int64 = -1.23456789e10
	_ int64 = -1.23456789e1        // ERROR "\-12\.3457 truncated"
	_ int64 = -1.23456789e0        // ERROR "\-1\.23457 truncated"
	_ int64 = -1.23456789e-1       // ERROR "\-0\.123457 truncated"
	_ int64 = -1.23456789e-10      // ERROR "\-1\.23457e\-10 truncated"
	_ int64 = -1.23456789e-100     // ERROR "\-1\.23457e\-100 truncated"
	_ int64 = -1.23456789e-1000    // ERROR "\-1\.23457e\-1000 truncated"
	_ int64 = -1.23456789e-10000   // ERROR "\-1\.23457e\-10000 truncated"
	_ int64 = -1.23456789e-100000  // ERROR "\-1\.23457e\-100000 truncated"
	_ int64 = -1.23456789e-1000000 // ERROR "\-1\.23457e\-1000000 truncated"
)
                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue13587.go                                                           0100644 0000000 0000000 00000000673 13020111414 016574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -l -d=wb

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test write barrier for implicit assignments to result parameters
// that have escaped to the heap.

package issue13587

import "errors"

func escape(p *error)

func F() (err error) {
	escape(&err)
	return errors.New("error") // ERROR "write barrier"
}
                                                                     usr/local/go/test/fixedbugs/issue13684.go                                                           0100644 0000000 0000000 00000000476 13020111414 016573  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that a label name matching a constant name
// is permitted.

package main

const labelname = 1

func main() {
	goto labelname
labelname:
}
                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue13777.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017020  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue13777.dir/burnin.go                                                0100644 0000000 0000000 00000000443 13020111414 020642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package burnin

type sendCmdFunc func(string)

func sendCommand(c string) {}

func NewSomething() {
	// This works...
	// var sendCmd sendCmdFunc
	// sendCmd = sendCommand

	// So does this...
	//sendCmd := sendCmdFunc(sendCommand)

	// This fails...
	sendCmd := sendCommand

	_ = sendCmd
}
                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue13777.dir/main.go                                                  0100644 0000000 0000000 00000000124 13020111414 020265  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // build

package main

import (
	x "./burnin"
)

func main() {
	x.NewSomething()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue13777.go                                                           0100644 0000000 0000000 00000000273 13020111414 016571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue13799.go                                                           0100644 0000000 0000000 00000012143 13020111414 016574  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -m -l

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test, using compiler diagnostic flags, that the escape analysis is working.
// Compiles but does not run.  Inlining is disabled.
// Registerization is disabled too (-N), which should
// have no effect on escape analysis.

package main

import "fmt"

func main() {
	// Just run test over and over again. This main func is just for
	// convenience; if test were the main func, we could also trigger
	// the panic just by running the program over and over again
	// (sometimes it takes 1 time, sometimes it takes ~4,000+).
	for iter := 0; ; iter++ {
		if iter%50 == 0 {
			fmt.Println(iter) // ERROR "iter escapes to heap$" "main ... argument does not escape$"
		}
		test1(iter)
		test2(iter)
		test3(iter)
		test4(iter)
		test5(iter)
		test6(iter)
	}
}

func test1(iter int) {

	const maxI = 500
	m := make(map[int][]int) // ERROR "make\(map\[int\]\[\]int\) escapes to heap$"

	// The panic seems to be triggered when m is modified inside a
	// closure that is both recursively called and reassigned to in a
	// loop.

	// Cause of bug -- escape of closure failed to escape (shared) data structures
	// of map.  Assign to fn declared outside of loop triggers escape of closure.
	// Heap -> stack pointer eventually causes badness when stack reallocation
	// occurs.

	var fn func()               // ERROR "moved to heap: fn$"
	for i := 0; i < maxI; i++ { // ERROR "moved to heap: i$"
		// var fn func() // this makes it work, because fn stays off heap
		j := 0        // ERROR "moved to heap: j$"
		fn = func() { // ERROR "func literal escapes to heap$"
			m[i] = append(m[i], 0) // ERROR "&i escapes to heap$"
			if j < 25 {            // ERROR "&j escapes to heap$"
				j++
				fn() // ERROR "&fn escapes to heap$"
			}
		}
		fn()
	}

	if len(m) != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, len(m) = %d", iter, maxI, len(m))) // ERROR "iter escapes to heap$" "len\(m\) escapes to heap$" "maxI escapes to heap$" "test1 ... argument does not escape$"
	}
}

func test2(iter int) {

	const maxI = 500
	m := make(map[int][]int) // ERROR "test2 make\(map\[int\]\[\]int\) does not escape$"

	// var fn func()
	for i := 0; i < maxI; i++ {
		var fn func() // this makes it work, because fn stays off heap
		j := 0
		fn = func() { // ERROR "test2 func literal does not escape$"
			m[i] = append(m[i], 0)
			if j < 25 {
				j++
				fn()
			}
		}
		fn()
	}

	if len(m) != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, len(m) = %d", iter, maxI, len(m))) // ERROR "iter escapes to heap$" "len\(m\) escapes to heap$" "maxI escapes to heap$" "test2 ... argument does not escape$"
	}
}

func test3(iter int) {

	const maxI = 500
	var x int // ERROR "moved to heap: x$"
	m := &x   // ERROR "&x escapes to heap$"

	var fn func() // ERROR "moved to heap: fn$"
	for i := 0; i < maxI; i++ {
		// var fn func() // this makes it work, because fn stays off heap
		j := 0        // ERROR "moved to heap: j$"
		fn = func() { // ERROR "func literal escapes to heap$"
			if j < 100 { // ERROR "&j escapes to heap$"
				j++
				fn() // ERROR "&fn escapes to heap$"
			} else {
				*m = *m + 1
			}
		}
		fn()
	}

	if *m != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, *m = %d", iter, maxI, *m)) // ERROR "\*m escapes to heap$" "iter escapes to heap$" "maxI escapes to heap$" "test3 ... argument does not escape$"
	}
}

func test4(iter int) {

	const maxI = 500
	var x int
	m := &x // ERROR "test4 &x does not escape$"

	// var fn func()
	for i := 0; i < maxI; i++ {
		var fn func() // this makes it work, because fn stays off heap
		j := 0
		fn = func() { // ERROR "test4 func literal does not escape$"
			if j < 100 {
				j++
				fn()
			} else {
				*m = *m + 1
			}
		}
		fn()
	}

	if *m != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, *m = %d", iter, maxI, *m)) // ERROR "\*m escapes to heap$" "iter escapes to heap$" "maxI escapes to heap$" "test4 ... argument does not escape$"
	}
}

type str struct {
	m *int
}

func recur1(j int, s *str) { // ERROR "recur1 s does not escape"
	if j < 100 {
		j++
		recur1(j, s)
	} else {
		*s.m++
	}
}

func test5(iter int) {

	const maxI = 500
	var x int // ERROR "moved to heap: x$"
	m := &x   // ERROR "&x escapes to heap$"

	var fn *str
	for i := 0; i < maxI; i++ {
		// var fn *str // this makes it work, because fn stays off heap
		fn = &str{m} // ERROR "&str literal escapes to heap"
		recur1(0, fn)
	}

	if *m != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, *m = %d", iter, maxI, *m)) // ERROR "\*m escapes to heap$" "iter escapes to heap$" "maxI escapes to heap$" "test5 ... argument does not escape$"
	}
}

func test6(iter int) {

	const maxI = 500
	var x int
	m := &x // ERROR "&x does not escape$"

	// var fn *str
	for i := 0; i < maxI; i++ {
		var fn *str  // this makes it work, because fn stays off heap
		fn = &str{m} // ERROR "&str literal does not escape"
		recur1(0, fn)
	}

	if *m != maxI {
		panic(fmt.Sprintf("iter %d: maxI = %d, *m = %d", iter, maxI, *m)) // ERROR "\*m escapes to heap$" "iter escapes to heap$" "maxI escapes to heap$" "test6 ... argument does not escape$"
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue13821.go                                                           0100644 0000000 0000000 00000000455 13020111414 016561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 13821.  Compiler rejected "bool(true)" as not a constant.

package p

const (
	A = true
	B = bool(A)
	C = bool(true)
)
                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue13821b.go                                                          0100644 0000000 0000000 00000001330 13020111414 016714  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 13821.  Additional regress tests.

package p

type B bool
type B2 bool

var b B
var b2 B2
var x1 = b && 1 < 2 // x1 has type B, not ideal bool
var x2 = 1 < 2 && b // x2 has type B, not ideal bool
var x3 = b && b2    // ERROR "mismatched types B and B2"
var x4 = x1 && b2   // ERROR "mismatched types B and B2"
var x5 = x2 && b2   // ERROR "mismatched types B and B2"
var x6 = b2 && x1   // ERROR "mismatched types B2 and B"
var x7 = b2 && x2   // ERROR "mismatched types B2 and B"

var x8 = b && !B2(true) // ERROR "mismatched types B and B2"
                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue14006.go                                                           0100644 0000000 0000000 00000001633 13020111414 016554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2016 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Literals that happen to resolve to named constants
// may be used as label names (see issue 13684). Make
// sure that other literals don't crash the compiler.

package main

const labelname = 1

func main() {
	goto labelname
labelname:
}

func f() {
	var x int
	switch x {
	case 1:
		2:	// ERROR "unexpected :"
	case 2:
	}

	switch x {
	case 1:
		2: ;	// ERROR "unexpected :"
	case 2:
	}

	var y string
	switch y {
	case "foo":
		"bar":	// ERROR "unexpected :"
	case "bar":
	}

	switch y {
	case "foo":
		"bar": ;	// ERROR "unexpected :"
	case "bar":
	}

	var z bool
	switch {
	case z:
		labelname:	// ERROR "missing statement after label"
	case false:
	}

	switch {
	case z:
		labelname:
	}

	switch {
	case z:
		labelname: ;
	case false:
	}
}                                                                                                     usr/local/go/test/fixedbugs/issue14010.go                                                           0100644 0000000 0000000 00000000630 13020111414 016543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2016 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that built-in types don't get printed with
// (empty) package qualification.

package main

func main() {
	true = false // ERROR "cannot assign to true"
	byte = 0     // ERROR "not an expression" "cannot assign to byte"
}
                                                                                                        usr/local/go/test/fixedbugs/issue14164.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017007  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue14164.dir/a.go                                                     0100644 0000000 0000000 00000002147 13020111414 017557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

// F is an exported function, small enough to be inlined.
// It defines a local interface with an unexported method
// f, which will appear with a package-qualified method
// name in the export data.
func F(x interface{}) bool {
	_, ok := x.(interface {
		f()
	})
	return ok
}

// Like F but with the unexported interface method f
// defined via an embedded interface t. The compiler
// always flattens embedded interfaces so there should
// be no difference between F and G. Alas, currently
// G is not inlineable (at least via export data), so
// the issue is moot, here.
func G(x interface{}) bool {
	type t0 interface {
		f()
	}
	_, ok := x.(interface {
		t0
	})
	return ok
}

// Like G but now the embedded interface is declared
// at package level. This function is inlineable via
// export data. The export data representation is like
// for F.
func H(x interface{}) bool {
	_, ok := x.(interface {
		t1
	})
	return ok
}

type t1 interface {
	f()
}
                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue14164.dir/main.go                                                  0100644 0000000 0000000 00000000536 13020111414 020263  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

// Verify that we can import package "a" containing an inlineable
// function F that declares a local interface with a non-exported
// method f.
import _ "./a"

func main() {}
                                                                                                                                                                  usr/local/go/test/fixedbugs/issue14164.go                                                           0100644 0000000 0000000 00000000267 13020111414 016563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

ignored
                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue14331.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017003  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue14331.dir/a.go                                                     0100644 0000000 0000000 00000000372 13020111414 017551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2016 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

var S struct {
	Str string `tag`
}

func F() string {
	v := S
	return v.Str
}
                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue14331.dir/b.go                                                     0100644 0000000 0000000 00000000334 13020111414 017550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2016 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

func G() string {
	return a.F()
}
                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue14331.go                                                           0100644 0000000 0000000 00000000350 13020111414 016550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2016 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Inline function misses struct tags.

package ignored
                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue2615.go                                                            0100644 0000000 0000000 00000027060 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 2615: a long chain of else if's causes an overflow
// in the parser stack.

package main

// test returns the index of the lowest set bit in a 256-bit vector.
func test(x [4]uint64) int {
	if x[0]&(1<<0) != 0 {
		return 0
	} else if x[0]&(1<<1) != 0 {
		return 1
	} else if x[0]&(1<<2) != 0 {
		return 2
	} else if x[0]&(1<<3) != 0 {
		return 3
	} else if x[0]&(1<<4) != 0 {
		return 4
	} else if x[0]&(1<<5) != 0 {
		return 5
	} else if x[0]&(1<<6) != 0 {
		return 6
	} else if x[0]&(1<<7) != 0 {
		return 7
	} else if x[0]&(1<<8) != 0 {
		return 8
	} else if x[0]&(1<<9) != 0 {
		return 9
	} else if x[0]&(1<<10) != 0 {
		return 10
	} else if x[0]&(1<<11) != 0 {
		return 11
	} else if x[0]&(1<<12) != 0 {
		return 12
	} else if x[0]&(1<<13) != 0 {
		return 13
	} else if x[0]&(1<<14) != 0 {
		return 14
	} else if x[0]&(1<<15) != 0 {
		return 15
	} else if x[0]&(1<<16) != 0 {
		return 16
	} else if x[0]&(1<<17) != 0 {
		return 17
	} else if x[0]&(1<<18) != 0 {
		return 18
	} else if x[0]&(1<<19) != 0 {
		return 19
	} else if x[0]&(1<<20) != 0 {
		return 20
	} else if x[0]&(1<<21) != 0 {
		return 21
	} else if x[0]&(1<<22) != 0 {
		return 22
	} else if x[0]&(1<<23) != 0 {
		return 23
	} else if x[0]&(1<<24) != 0 {
		return 24
	} else if x[0]&(1<<25) != 0 {
		return 25
	} else if x[0]&(1<<26) != 0 {
		return 26
	} else if x[0]&(1<<27) != 0 {
		return 27
	} else if x[0]&(1<<28) != 0 {
		return 28
	} else if x[0]&(1<<29) != 0 {
		return 29
	} else if x[0]&(1<<30) != 0 {
		return 30
	} else if x[0]&(1<<31) != 0 {
		return 31
	} else if x[0]&(1<<32) != 0 {
		return 32
	} else if x[0]&(1<<33) != 0 {
		return 33
	} else if x[0]&(1<<34) != 0 {
		return 34
	} else if x[0]&(1<<35) != 0 {
		return 35
	} else if x[0]&(1<<36) != 0 {
		return 36
	} else if x[0]&(1<<37) != 0 {
		return 37
	} else if x[0]&(1<<38) != 0 {
		return 38
	} else if x[0]&(1<<39) != 0 {
		return 39
	} else if x[0]&(1<<40) != 0 {
		return 40
	} else if x[0]&(1<<41) != 0 {
		return 41
	} else if x[0]&(1<<42) != 0 {
		return 42
	} else if x[0]&(1<<43) != 0 {
		return 43
	} else if x[0]&(1<<44) != 0 {
		return 44
	} else if x[0]&(1<<45) != 0 {
		return 45
	} else if x[0]&(1<<46) != 0 {
		return 46
	} else if x[0]&(1<<47) != 0 {
		return 47
	} else if x[0]&(1<<48) != 0 {
		return 48
	} else if x[0]&(1<<49) != 0 {
		return 49
	} else if x[0]&(1<<50) != 0 {
		return 50
	} else if x[0]&(1<<51) != 0 {
		return 51
	} else if x[0]&(1<<52) != 0 {
		return 52
	} else if x[0]&(1<<53) != 0 {
		return 53
	} else if x[0]&(1<<54) != 0 {
		return 54
	} else if x[0]&(1<<55) != 0 {
		return 55
	} else if x[0]&(1<<56) != 0 {
		return 56
	} else if x[0]&(1<<57) != 0 {
		return 57
	} else if x[0]&(1<<58) != 0 {
		return 58
	} else if x[0]&(1<<59) != 0 {
		return 59
	} else if x[0]&(1<<60) != 0 {
		return 60
	} else if x[0]&(1<<61) != 0 {
		return 61
	} else if x[0]&(1<<62) != 0 {
		return 62
	} else if x[0]&(1<<63) != 0 {
		return 63
	} else if x[1]&(1<<0) != 0 {
		return 64
	} else if x[1]&(1<<1) != 0 {
		return 65
	} else if x[1]&(1<<2) != 0 {
		return 66
	} else if x[1]&(1<<3) != 0 {
		return 67
	} else if x[1]&(1<<4) != 0 {
		return 68
	} else if x[1]&(1<<5) != 0 {
		return 69
	} else if x[1]&(1<<6) != 0 {
		return 70
	} else if x[1]&(1<<7) != 0 {
		return 71
	} else if x[1]&(1<<8) != 0 {
		return 72
	} else if x[1]&(1<<9) != 0 {
		return 73
	} else if x[1]&(1<<10) != 0 {
		return 74
	} else if x[1]&(1<<11) != 0 {
		return 75
	} else if x[1]&(1<<12) != 0 {
		return 76
	} else if x[1]&(1<<13) != 0 {
		return 77
	} else if x[1]&(1<<14) != 0 {
		return 78
	} else if x[1]&(1<<15) != 0 {
		return 79
	} else if x[1]&(1<<16) != 0 {
		return 80
	} else if x[1]&(1<<17) != 0 {
		return 81
	} else if x[1]&(1<<18) != 0 {
		return 82
	} else if x[1]&(1<<19) != 0 {
		return 83
	} else if x[1]&(1<<20) != 0 {
		return 84
	} else if x[1]&(1<<21) != 0 {
		return 85
	} else if x[1]&(1<<22) != 0 {
		return 86
	} else if x[1]&(1<<23) != 0 {
		return 87
	} else if x[1]&(1<<24) != 0 {
		return 88
	} else if x[1]&(1<<25) != 0 {
		return 89
	} else if x[1]&(1<<26) != 0 {
		return 90
	} else if x[1]&(1<<27) != 0 {
		return 91
	} else if x[1]&(1<<28) != 0 {
		return 92
	} else if x[1]&(1<<29) != 0 {
		return 93
	} else if x[1]&(1<<30) != 0 {
		return 94
	} else if x[1]&(1<<31) != 0 {
		return 95
	} else if x[1]&(1<<32) != 0 {
		return 96
	} else if x[1]&(1<<33) != 0 {
		return 97
	} else if x[1]&(1<<34) != 0 {
		return 98
	} else if x[1]&(1<<35) != 0 {
		return 99
	} else if x[1]&(1<<36) != 0 {
		return 100
	} else if x[1]&(1<<37) != 0 {
		return 101
	} else if x[1]&(1<<38) != 0 {
		return 102
	} else if x[1]&(1<<39) != 0 {
		return 103
	} else if x[1]&(1<<40) != 0 {
		return 104
	} else if x[1]&(1<<41) != 0 {
		return 105
	} else if x[1]&(1<<42) != 0 {
		return 106
	} else if x[1]&(1<<43) != 0 {
		return 107
	} else if x[1]&(1<<44) != 0 {
		return 108
	} else if x[1]&(1<<45) != 0 {
		return 109
	} else if x[1]&(1<<46) != 0 {
		return 110
	} else if x[1]&(1<<47) != 0 {
		return 111
	} else if x[1]&(1<<48) != 0 {
		return 112
	} else if x[1]&(1<<49) != 0 {
		return 113
	} else if x[1]&(1<<50) != 0 {
		return 114
	} else if x[1]&(1<<51) != 0 {
		return 115
	} else if x[1]&(1<<52) != 0 {
		return 116
	} else if x[1]&(1<<53) != 0 {
		return 117
	} else if x[1]&(1<<54) != 0 {
		return 118
	} else if x[1]&(1<<55) != 0 {
		return 119
	} else if x[1]&(1<<56) != 0 {
		return 120
	} else if x[1]&(1<<57) != 0 {
		return 121
	} else if x[1]&(1<<58) != 0 {
		return 122
	} else if x[1]&(1<<59) != 0 {
		return 123
	} else if x[1]&(1<<60) != 0 {
		return 124
	} else if x[1]&(1<<61) != 0 {
		return 125
	} else if x[1]&(1<<62) != 0 {
		return 126
	} else if x[1]&(1<<63) != 0 {
		return 127
	} else if x[2]&(1<<0) != 0 {
		return 128
	} else if x[2]&(1<<1) != 0 {
		return 129
	} else if x[2]&(1<<2) != 0 {
		return 130
	} else if x[2]&(1<<3) != 0 {
		return 131
	} else if x[2]&(1<<4) != 0 {
		return 132
	} else if x[2]&(1<<5) != 0 {
		return 133
	} else if x[2]&(1<<6) != 0 {
		return 134
	} else if x[2]&(1<<7) != 0 {
		return 135
	} else if x[2]&(1<<8) != 0 {
		return 136
	} else if x[2]&(1<<9) != 0 {
		return 137
	} else if x[2]&(1<<10) != 0 {
		return 138
	} else if x[2]&(1<<11) != 0 {
		return 139
	} else if x[2]&(1<<12) != 0 {
		return 140
	} else if x[2]&(1<<13) != 0 {
		return 141
	} else if x[2]&(1<<14) != 0 {
		return 142
	} else if x[2]&(1<<15) != 0 {
		return 143
	} else if x[2]&(1<<16) != 0 {
		return 144
	} else if x[2]&(1<<17) != 0 {
		return 145
	} else if x[2]&(1<<18) != 0 {
		return 146
	} else if x[2]&(1<<19) != 0 {
		return 147
	} else if x[2]&(1<<20) != 0 {
		return 148
	} else if x[2]&(1<<21) != 0 {
		return 149
	} else if x[2]&(1<<22) != 0 {
		return 150
	} else if x[2]&(1<<23) != 0 {
		return 151
	} else if x[2]&(1<<24) != 0 {
		return 152
	} else if x[2]&(1<<25) != 0 {
		return 153
	} else if x[2]&(1<<26) != 0 {
		return 154
	} else if x[2]&(1<<27) != 0 {
		return 155
	} else if x[2]&(1<<28) != 0 {
		return 156
	} else if x[2]&(1<<29) != 0 {
		return 157
	} else if x[2]&(1<<30) != 0 {
		return 158
	} else if x[2]&(1<<31) != 0 {
		return 159
	} else if x[2]&(1<<32) != 0 {
		return 160
	} else if x[2]&(1<<33) != 0 {
		return 161
	} else if x[2]&(1<<34) != 0 {
		return 162
	} else if x[2]&(1<<35) != 0 {
		return 163
	} else if x[2]&(1<<36) != 0 {
		return 164
	} else if x[2]&(1<<37) != 0 {
		return 165
	} else if x[2]&(1<<38) != 0 {
		return 166
	} else if x[2]&(1<<39) != 0 {
		return 167
	} else if x[2]&(1<<40) != 0 {
		return 168
	} else if x[2]&(1<<41) != 0 {
		return 169
	} else if x[2]&(1<<42) != 0 {
		return 170
	} else if x[2]&(1<<43) != 0 {
		return 171
	} else if x[2]&(1<<44) != 0 {
		return 172
	} else if x[2]&(1<<45) != 0 {
		return 173
	} else if x[2]&(1<<46) != 0 {
		return 174
	} else if x[2]&(1<<47) != 0 {
		return 175
	} else if x[2]&(1<<48) != 0 {
		return 176
	} else if x[2]&(1<<49) != 0 {
		return 177
	} else if x[2]&(1<<50) != 0 {
		return 178
	} else if x[2]&(1<<51) != 0 {
		return 179
	} else if x[2]&(1<<52) != 0 {
		return 180
	} else if x[2]&(1<<53) != 0 {
		return 181
	} else if x[2]&(1<<54) != 0 {
		return 182
	} else if x[2]&(1<<55) != 0 {
		return 183
	} else if x[2]&(1<<56) != 0 {
		return 184
	} else if x[2]&(1<<57) != 0 {
		return 185
	} else if x[2]&(1<<58) != 0 {
		return 186
	} else if x[2]&(1<<59) != 0 {
		return 187
	} else if x[2]&(1<<60) != 0 {
		return 188
	} else if x[2]&(1<<61) != 0 {
		return 189
	} else if x[2]&(1<<62) != 0 {
		return 190
	} else if x[2]&(1<<63) != 0 {
		return 191
	} else if x[3]&(1<<0) != 0 {
		return 192
	} else if x[3]&(1<<1) != 0 {
		return 193
	} else if x[3]&(1<<2) != 0 {
		return 194
	} else if x[3]&(1<<3) != 0 {
		return 195
	} else if x[3]&(1<<4) != 0 {
		return 196
	} else if x[3]&(1<<5) != 0 {
		return 197
	} else if x[3]&(1<<6) != 0 {
		return 198
	} else if x[3]&(1<<7) != 0 {
		return 199
	} else if x[3]&(1<<8) != 0 {
		return 200
	} else if x[3]&(1<<9) != 0 {
		return 201
	} else if x[3]&(1<<10) != 0 {
		return 202
	} else if x[3]&(1<<11) != 0 {
		return 203
	} else if x[3]&(1<<12) != 0 {
		return 204
	} else if x[3]&(1<<13) != 0 {
		return 205
	} else if x[3]&(1<<14) != 0 {
		return 206
	} else if x[3]&(1<<15) != 0 {
		return 207
	} else if x[3]&(1<<16) != 0 {
		return 208
	} else if x[3]&(1<<17) != 0 {
		return 209
	} else if x[3]&(1<<18) != 0 {
		return 210
	} else if x[3]&(1<<19) != 0 {
		return 211
	} else if x[3]&(1<<20) != 0 {
		return 212
	} else if x[3]&(1<<21) != 0 {
		return 213
	} else if x[3]&(1<<22) != 0 {
		return 214
	} else if x[3]&(1<<23) != 0 {
		return 215
	} else if x[3]&(1<<24) != 0 {
		return 216
	} else if x[3]&(1<<25) != 0 {
		return 217
	} else if x[3]&(1<<26) != 0 {
		return 218
	} else if x[3]&(1<<27) != 0 {
		return 219
	} else if x[3]&(1<<28) != 0 {
		return 220
	} else if x[3]&(1<<29) != 0 {
		return 221
	} else if x[3]&(1<<30) != 0 {
		return 222
	} else if x[3]&(1<<31) != 0 {
		return 223
	} else if x[3]&(1<<32) != 0 {
		return 224
	} else if x[3]&(1<<33) != 0 {
		return 225
	} else if x[3]&(1<<34) != 0 {
		return 226
	} else if x[3]&(1<<35) != 0 {
		return 227
	} else if x[3]&(1<<36) != 0 {
		return 228
	} else if x[3]&(1<<37) != 0 {
		return 229
	} else if x[3]&(1<<38) != 0 {
		return 230
	} else if x[3]&(1<<39) != 0 {
		return 231
	} else if x[3]&(1<<40) != 0 {
		return 232
	} else if x[3]&(1<<41) != 0 {
		return 233
	} else if x[3]&(1<<42) != 0 {
		return 234
	} else if x[3]&(1<<43) != 0 {
		return 235
	} else if x[3]&(1<<44) != 0 {
		return 236
	} else if x[3]&(1<<45) != 0 {
		return 237
	} else if x[3]&(1<<46) != 0 {
		return 238
	} else if x[3]&(1<<47) != 0 {
		return 239
	} else if x[3]&(1<<48) != 0 {
		return 240
	} else if x[3]&(1<<49) != 0 {
		return 241
	} else if x[3]&(1<<50) != 0 {
		return 242
	} else if x[3]&(1<<51) != 0 {
		return 243
	} else if x[3]&(1<<52) != 0 {
		return 244
	} else if x[3]&(1<<53) != 0 {
		return 245
	} else if x[3]&(1<<54) != 0 {
		return 246
	} else if x[3]&(1<<55) != 0 {
		return 247
	} else if x[3]&(1<<56) != 0 {
		return 248
	} else if x[3]&(1<<57) != 0 {
		return 249
	} else if x[3]&(1<<58) != 0 {
		return 250
	} else if x[3]&(1<<59) != 0 {
		return 251
	} else if x[3]&(1<<60) != 0 {
		return 252
	} else if x[3]&(1<<61) != 0 {
		return 253
	} else if x[3]&(1<<62) != 0 {
		return 254
	} else if x[3]&(1<<63) != 0 {
		return 255
	}
	return -1
}

func main() {
	const ones = ^uint64(0)
	for i := 0; i < 256; i++ {
		bits := [4]uint64{ones, ones, ones, ones}

		// clear bottom i bits
		bits[i/64] ^= 1<<(uint(i)&63) - 1
		for j := i/64 - 1; j >= 0; j-- {
			bits[j] = 0
		}

		k := test(bits)
		if k != i {
			print("test(bits)=", k, " want ", i, "\n")
			panic("failed")
		}
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue3552.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016726  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue3552.dir/one.go                                                    0100644 0000000 0000000 00000000725 13020111414 020037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package one

// Issue 3552

type T struct { int }

func (t T) F() int { return t.int }

type U struct { int int }

func (u U) F() int { return u.int }

type lint int

type V struct { lint }

func (v V) F() int { return int(v.lint) }

type W struct { lint lint }

func (w W) F() int { return int(w.lint) }



                                           usr/local/go/test/fixedbugs/issue3552.dir/two.go                                                    0100644 0000000 0000000 00000000575 13020111414 020072  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Use the functions in one.go so that the inlined
// forms get type-checked.

package two

import "./one"

func use() {
	var t one.T
	var u one.U
	var v one.V
	var w one.W

	_ = t.F()
	_ = u.F()
	_ = v.F()
	_ = w.F()
}
                                                                                                                                   usr/local/go/test/fixedbugs/issue3552.go                                                            0100644 0000000 0000000 00000000430 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3552: cross-package inlining misbehaves when
// referencing embedded builtins.

package ignored
                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue3705.go                                                            0100644 0000000 0000000 00000000374 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func init() // ERROR "missing function body|cannot declare init"
                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue3783.go                                                            0100644 0000000 0000000 00000000375 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package foo

var i int

func (*i) bar() // ERROR "not a type|expected type"

                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue3925.go                                                            0100644 0000000 0000000 00000001011 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 3925: wrong line number for error message "missing key in map literal"

// also a test for correct line number in other malformed composite literals.

package foo

var _ = map[string]string{
	"1": "2",
	"3", "4", // ERROR "missing key|must have keys"
}

var _ = []string{
	"foo",
	"bar",
	20, // ERROR "cannot use|incompatible type"
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue4066.go                                                            0100644 0000000 0000000 00000001037 13020111414 016477  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 4066: return values not being spilled eagerly enough

package main

func main() {
	n := foo()
	if n != 2 {
		println(n)
		panic("wrong return value")
	}
}

type terr struct{}

func foo() (val int) {
	val = 0
	defer func() {
		if x := recover(); x != nil {
			_ = x.(terr)
		}
	}()
	for {
		val = 2
		foo1()
	}
	panic("unreachable")
}

func foo1() {
	panic(terr{})
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4085a.go                                                           0100644 0000000 0000000 00000001015 13020111414 016635  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type T []int

func main() {
	_ = make(T, -1)    // ERROR "negative"
	_ = make(T, 0.5)   // ERROR "constant 0.5 truncated to integer|non-integer len argument"
	_ = make(T, 1.0)   // ok
	_ = make(T, 1<<63) // ERROR "len argument too large"
	_ = make(T, 0, -1) // ERROR "negative cap"
	_ = make(T, 10, 0) // ERROR "len larger than cap"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue4085b.go                                                           0100644 0000000 0000000 00000002101 13020111414 016633  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"strings"
	"unsafe"
)

type T []int

func main() {
	n := -1
	shouldPanic("len out of range", func() {_ = make(T, n)})
	shouldPanic("cap out of range", func() {_ = make(T, 0, n)})
	var t *byte
	if unsafe.Sizeof(t) == 8 {
		n = 1<<20
		n <<= 20
		shouldPanic("len out of range", func() {_ = make(T, n)})
		shouldPanic("cap out of range", func() {_ = make(T, 0, n)})
		n <<= 20
		shouldPanic("len out of range", func() {_ = make(T, n)})
		shouldPanic("cap out of range", func() {_ = make(T, 0, n)})
	} else {
		n = 1<<31 - 1
		shouldPanic("len out of range", func() {_ = make(T, n)})
		shouldPanic("cap out of range", func() {_ = make(T, 0, n)})
	}
}

func shouldPanic(str string, f func()) {
	defer func() {
		err := recover()
		if err == nil {
			panic("did not panic")
		}
		s := err.(error).Error()
		if !strings.Contains(s, str) {
			panic("got panic " + s + ", want " + str)
		}
	}()
	
	f()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue4097.go                                                            0100644 0000000 0000000 00000000427 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package foo

var s [][10]int
const m = len(s[len(s)-1]) // ERROR "is not a constant|is not constant" 

                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue4099.go                                                            0100644 0000000 0000000 00000001032 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck -0 -m

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check go:noescape annotations.

package p

// The noescape comment only applies to the next func,
// which must not have a body.

//go:noescape

func F1([]byte)

func F2([]byte)

func G() {
	var buf1 [10]byte
	F1(buf1[:]) // ERROR "buf1 does not escape"
	
	var buf2 [10]byte // ERROR "moved to heap: buf2"
	F2(buf2[:]) // ERROR "buf2 escapes to heap"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue4162.go                                                            0100644 0000000 0000000 00000001015 13020111414 016470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4162. Trailing commas now allowed in conversions.

package p

// All these are valid now.
var (
	_ = int(1.0,)      // comma was always permitted (like function call)
	_ = []byte("foo",) // was syntax error: unexpected comma
	_ = chan int(nil,) // was syntax error: unexpected comma
	_ = (func())(nil,) // was syntax error: unexpected comma
)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue4167.go                                                            0100644 0000000 0000000 00000001555 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4167: inlining of a (*T).Method expression taking
// its arguments from a multiple return breaks the compiler.

package main

type pa []int

type p int

func (this *pa) func1() (v *p, c int) {
	for _ = range *this {
		c++
	}
	v = (*p)(&c)
	return
}

func (this *pa) func2() p {
	return (*p).func3(this.func1())
}

func (this *p) func3(f int) p {
	return *this
}

func (this *pa) func2dots() p {
	return (*p).func3(this.func1())
}

func (this *p) func3dots(f ...int) p {
	return *this
}

func main() {
	arr := make(pa, 13)
	length := arr.func2()
	if int(length) != len(arr) {
		panic("length != len(arr)")
	}
	length = arr.func2dots()
	if int(length) != len(arr) {
		panic("length != len(arr)")
	}
}
                                                                                                                                                   usr/local/go/test/fixedbugs/issue4232.go                                                            0100644 0000000 0000000 00000004111 13020111414 016466  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 4232
// issue 7200

package p

func f() {
	var a [10]int
	_ = a[-1]  // ERROR "invalid array index -1|index out of bounds"
	_ = a[-1:] // ERROR "invalid slice index -1|index out of bounds"
	_ = a[:-1] // ERROR "invalid slice index -1|index out of bounds"
	_ = a[10]  // ERROR "invalid array index 10|index out of bounds"
	_ = a[9:10]
	_ = a[10:10]
	_ = a[9:12]            // ERROR "invalid slice index 12|index out of bounds"
	_ = a[11:12]           // ERROR "invalid slice index 11|index out of bounds"
	_ = a[1<<100 : 1<<110] // ERROR "overflows int" "invalid slice index 1 << 100|index out of bounds"

	var s []int
	_ = s[-1]  // ERROR "invalid slice index -1|index out of bounds"
	_ = s[-1:] // ERROR "invalid slice index -1|index out of bounds"
	_ = s[:-1] // ERROR "invalid slice index -1|index out of bounds"
	_ = s[10]
	_ = s[9:10]
	_ = s[10:10]
	_ = s[9:12]
	_ = s[11:12]
	_ = s[1<<100 : 1<<110] // ERROR "overflows int" "invalid slice index 1 << 100|index out of bounds"

	const c = "foofoofoof"
	_ = c[-1]  // ERROR "invalid string index -1|index out of bounds"
	_ = c[-1:] // ERROR "invalid slice index -1|index out of bounds"
	_ = c[:-1] // ERROR "invalid slice index -1|index out of bounds"
	_ = c[10]  // ERROR "invalid string index 10|index out of bounds"
	_ = c[9:10]
	_ = c[10:10]
	_ = c[9:12]            // ERROR "invalid slice index 12|index out of bounds"
	_ = c[11:12]           // ERROR "invalid slice index 11|index out of bounds"
	_ = c[1<<100 : 1<<110] // ERROR "overflows int" "invalid slice index 1 << 100|index out of bounds"

	var t string
	_ = t[-1]  // ERROR "invalid string index -1|index out of bounds"
	_ = t[-1:] // ERROR "invalid slice index -1|index out of bounds"
	_ = t[:-1] // ERROR "invalid slice index -1|index out of bounds"
	_ = t[10]
	_ = t[9:10]
	_ = t[10:10]
	_ = t[9:12]
	_ = t[11:12]
	_ = t[1<<100 : 1<<110] // ERROR "overflows int" "invalid slice index 1 << 100|index out of bounds"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue4251.go                                                            0100644 0000000 0000000 00000001031 13020111414 016465  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4251: slice with inverted range is an error.

package p

func F1(s []byte) []byte {
	return s[2:1]		// ERROR "invalid slice index|inverted slice range"
}

func F2(a [10]byte) []byte {
	return a[2:1]		// ERROR "invalid slice index|inverted slice range"
}

func F3(s string) string {
	return s[2:1]		// ERROR "invalid slice index|inverted slice range"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue4252.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016724  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4252.dir/a.go                                                      0100644 0000000 0000000 00000001450 13020111414 017470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// A package that redeclares common builtin names.
package a

var true = 0 == 1
var false = 0 == 0
var nil = 1

const append = 42

type error bool
type int interface{}

func len(interface{}) int32 { return 42 }

func Test() {
	var array [append]int
	if true {
		panic("unexpected builtin true instead of redeclared one")
	}
	if !false {
		panic("unexpected builtin false instead of redeclared one")
	}
	if len(array) != 42 {
		println(len(array))
		panic("unexpected call of builtin len")
	}
}

func InlinedFakeTrue() error  { return error(true) }
func InlinedFakeFalse() error { return error(false) }
func InlinedFakeNil() int     { return nil }
                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4252.dir/main.go                                                   0100644 0000000 0000000 00000000664 13020111414 020202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	if a.InlinedFakeTrue() {
		panic("returned true was the real one")
	}
	if !a.InlinedFakeFalse() {
		panic("returned false was the real one")
	}
	if a.InlinedFakeNil() == nil {
		panic("returned nil was the real one")
	}
	a.Test()
}
                                                                            usr/local/go/test/fixedbugs/issue4252.go                                                            0100644 0000000 0000000 00000000472 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4252: tests that fixing the issue still allow
// builtins to be redeclared and are not corrupted
// in export data.

package ignored
                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue4264.go                                                            0100644 0000000 0000000 00000000556 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 4264: reject int division by const 0

package main

func main() {
	var x int
	var y float64
	var z complex128

	println(x/0) // ERROR "division by zero"
	println(y/0)
	println(z/0)
}                                                                                                                                                  usr/local/go/test/fixedbugs/issue4283.go                                                            0100644 0000000 0000000 00000000557 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4283: nil == nil can't be done as the type is unknown.

package p

func F1() bool {
	return nil == nil	// ERROR "invalid"
}

func F2() bool {
	return nil != nil	// ERROR "invalid"
}
                                                                                                                                                 usr/local/go/test/fixedbugs/issue4313.go                                                            0100644 0000000 0000000 00000001043 13020111414 016467  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Order of operations in select.

package main

func main() {
	c := make(chan int, 1)
	x := 0
	select {
	case c <- x: // should see x = 0, not x = 42 (after makec)
	case <-makec(&x): // should be evaluated only after c and x on previous line
	}
	y := <-c
	if y != 0 {
		panic(y)
	}
}

func makec(px *int) chan bool {
	if false { for {} }
	*px = 42
	return make(chan bool, 0)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue4316.go                                                            0100644 0000000 0000000 00000001715 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4316: the stack overflow check in the linker
// is confused when it encounters a split-stack function
// that needs 0 bytes of stack space.

package main

type Peano *Peano

func makePeano(n int) *Peano {
	if n == 0 {
		return nil
	}
	p := Peano(makePeano(n - 1))
	return &p
}

var countArg Peano
var countResult int

func countPeano() {
	if countArg == nil {
		countResult = 0
		return
	}
	countArg = *countArg
	countPeano()
	countResult++
}

var s = "(())"
var pT = 0

func p() {
	if pT >= len(s) {
		return
	}
	if s[pT] == '(' {
		pT += 1
		p()
		if pT < len(s) && s[pT] == ')' {
			pT += 1
		} else {
			return
		}
		p()
	}
}

func main() {
	countArg = makePeano(4096)
	countPeano()
	if countResult != 4096 {
		println("countResult =", countResult)
		panic("countResult != 4096")
	}

	p()
}
                                                   usr/local/go/test/fixedbugs/issue4323.go                                                            0100644 0000000 0000000 00000001143 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4323: inlining of functions with local variables
// forgets to typecheck the declarations in the inlined copy.

package main

type reader struct {
	C chan T
}

type T struct{ C chan []byte }

var r = newReader()

func newReader() *reader { return new(reader) }

func (r *reader) Read(n int) ([]byte, error) {
	req := T{C: make(chan []byte)}
	r.C <- req
	return <-req.C, nil
}

func main() {
	s, err := r.Read(1)
	_, _ = s, err
}
                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue4326.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016726  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4326.dir/p1.go                                                     0100644 0000000 0000000 00000000326 13020111414 017573  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package p1

type O map[string]map[string]string

func (opts O) RemoveOption(sect, opt string) bool {
	if _, ok := opts[sect]; !ok {
		return false
	}
	_, ok := opts[sect][opt]
	delete(opts[sect], opt)
	return ok
}
                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue4326.dir/p2.go                                                     0100644 0000000 0000000 00000000073 13020111414 017573  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package p2

import "./p1"

func NewO() p1.O { return nil }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue4326.dir/q1.go                                                     0100644 0000000 0000000 00000000216 13020111414 017572  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package q1

func Deref(typ interface{}) interface{} {
      if typ, ok := typ.(*int); ok {
            return *typ
      }
      return typ
}
                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4326.dir/q2.go                                                     0100644 0000000 0000000 00000000210 13020111414 017565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import "./q1"

func main() {
      x := 1
      y := q1.Deref(&x)
      if y != 1 {
            panic("y != 1")
      }
}
                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4326.dir/z.go                                                      0100644 0000000 0000000 00000000124 13020111414 017520  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package z

import "./p2"

func main() {
	p2.NewO().RemoveOption("hello", "world")
}
                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue4326.go                                                            0100644 0000000 0000000 00000000376 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Printing local variables in inliner shadows global names.

package ignored
                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4348.go                                                            0100644 0000000 0000000 00000001021 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4348. After switch to 64-bit ints the compiler generates
// illegal instructions when using large array bounds or indexes.

package main

// 1<<32 on a 64-bit machine, 1 otherwise.
const LARGE = ^uint(0)>>32 + 1

func A() int {
	var a []int
	return a[LARGE]
}

var b [LARGE]int

func B(i int) int {
	return b[i]
}

func main() {
	n := A()
	B(n)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue4353.go                                                            0100644 0000000 0000000 00000000643 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4353. An optimizer bug in 8g triggers a runtime fault
// instead of an out of bounds panic.

package main

var aib [100000]int
var paib *[100000]int = &aib
var i64 int64 = 100023

func main() {
	defer func() { recover() }()
	_ = paib[i64]
}
                                                                                             usr/local/go/test/fixedbugs/issue4359.go                                                            0100644 0000000 0000000 00000000572 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4359: wrong handling of broken struct fields
// causes "internal compiler error: lookdot badwidth".

package main

type T struct {
	x T1 // ERROR "undefined"
}

func f() {
	var t *T
	_ = t.x
}
                                                                                                                                      usr/local/go/test/fixedbugs/issue4365.go                                                            0100644 0000000 0000000 00000000726 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that fields hide promoted methods.
// https://golang.org/issue/4365

package main

type T interface {
        M()
}

type M struct{}

func (M) M() {}

type Foo struct {
        M
}

func main() {
        var v T = Foo{} // ERROR "has no methods|not a method|cannot use"
        _ = v
}
                                          usr/local/go/test/fixedbugs/issue4370.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016725  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4370.dir/p1.go                                                     0100644 0000000 0000000 00000000467 13020111414 017600  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

type Magic int

type T struct {
	x interface{}
}

func (t *T) M() bool {
	_, ok := t.x.(Magic)
	return ok
}

func F(t *T) {
	println(t)
}
                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue4370.dir/p2.go                                                     0100644 0000000 0000000 00000000367 13020111414 017600  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p2

import "./p1"

type T struct {
	p1.T
}

func F() {
	var t T
	p1.F(&t.T)
}
                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue4370.dir/p3.go                                                     0100644 0000000 0000000 00000000357 13020111414 017600  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p3

import "./p2"

func F() {
	p2.F()
	var t p2.T
	println(t.T.M())
}
                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4370.go                                                            0100644 0000000 0000000 00000000413 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Re-exporting inlined function bodies missed types in x, ok := v.(Type)

package ignored
                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue4388.go                                                            0100644 0000000 0000000 00000001776 13020111414 016520  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"io"
	"runtime"
)

type T struct {
	io.Closer
}

func f1() {
	// The 5 here and below depends on the number of internal runtime frames
	// that sit between a deferred function called during panic and
	// the original frame. If that changes, this test will start failing and
	// the number here will need to be updated.
	defer checkLine(5)
	var t *T
	var c io.Closer = t
	c.Close()
}

func f2() {
	defer checkLine(5)
	var t T
	var c io.Closer = t
	c.Close()
}

func main() {
	f1()
	f2()
}

func checkLine(n int) {
	if err := recover(); err == nil {
		panic("did not panic")
	}
	var file string
	var line int
	for i := 1; i <= n; i++ {
		_, file, line, _ = runtime.Caller(i)
		if file != "<autogenerated>" || line != 1 {
			continue
		}
		return
	}
	panic(fmt.Sprintf("expected <autogenerated>:1 have %s:%d", file, line))
}
  usr/local/go/test/fixedbugs/issue4396a.go                                                           0100644 0000000 0000000 00000001164 13020111414 016647  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4396. Arrays of bytes are not required to be
// word aligned. 5g should use MOVB to load the address
// of s.g[0] for its nil check.
//
// This test _may_ fail on arm, but requires the host to 
// trap unaligned loads. This is generally done with
//
// echo "4" > /proc/cpu/alignment

package main

var s = struct {
	// based on lzw.decoder
	a, b, c, d, e uint16
	f             [4096]uint8
	g             [4096]uint8
}{}

func main() {
	s.g[0] = 1
}
                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue4396b.go                                                           0100644 0000000 0000000 00000000761 13020111414 016652  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This test _may_ fail on arm, but requires the host to
// trap unaligned loads. This is generally done with
//
// echo "4" > /proc/cpu/alignment

package main

type T struct {
	U uint16
	V T2
}

type T2 struct {
	pad    [4096]byte
	A, B byte
}

var s, t = new(T), new(T)

func main() {
	var u, v *T2 = &s.V, &t.V
	u.B = v.B
}
               usr/local/go/test/fixedbugs/issue4399.go                                                            0100644 0000000 0000000 00000000456 13020111414 016514  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4399: 8g would print "gins LEAQ nil *A".

package main

type A struct{ a int }

func main() {
	println(((*A)(nil)).a)
}
                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4405.go                                                            0100644 0000000 0000000 00000000636 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

const (
	_ = iota
	_ // ERROR "illegal character|invalid character"
	_  // ERROR "illegal character|invalid character"
	_  // ERROR "illegal character|invalid character"
	_  // ERROR "illegal character|invalid character"
)
                                                                                                  usr/local/go/test/fixedbugs/issue4429.go                                                            0100644 0000000 0000000 00000000456 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type a struct {
  a int
}

func main() {
  av := a{};
  _ = *a(av); // ERROR "invalid indirect|expected pointer"
}
                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4448.go                                                            0100644 0000000 0000000 00000001317 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4448: 64-bit indices that are statically known
// to be bounded make 5g and 8g generate a dangling branch.

package main

const b26 uint64 = 0x022fdd63cc95386d

var bitPos [64]int

func init() {
	for p := uint(0); p < 64; p++ {
		bitPos[b26<<p>>58] = int(p)
	}
}

func MinPos(w uint64) int {
	if w == 0 {
		panic("bit: MinPos(0) undefined")
	}
	return bitPos[((w&-w)*b26)>>58]
}

func main() {
	const one = uint64(1)
	for i := 0; i < 64; i++ {
		if MinPos(1<<uint(i)) != i {
			println("i =", i)
			panic("MinPos(1<<uint(i)) != i")
		}
	}
}
                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4452.go                                                            0100644 0000000 0000000 00000000510 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4452. Used to print many errors, now just one.

package main

func main() {
	_ = [...]int(4) // ERROR "\[\.\.\.\].*outside of array literal"
}
                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4458.go                                                            0100644 0000000 0000000 00000000647 13020111414 016512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4458: gc accepts invalid method expressions
// like (**T).Method.

package main

type T struct{}

func (T) foo() {}

func main() {
	av := T{}
	pav := &av
	(**T).foo(&pav) // ERROR "no method foo|requires named type or pointer to named"
}
                                                                                         usr/local/go/test/fixedbugs/issue4463.go                                                            0100644 0000000 0000000 00000004573 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4463: test builtin functions in statement context and in
// go/defer functions.

package p

import "unsafe"

func F() {
	var a []int
	var c chan int
	var m map[int]int
	var s struct{ f int }

	append(a, 0)			// ERROR "not used"
	cap(a)				// ERROR "not used"
	complex(1, 2)			// ERROR "not used"
	imag(1i)			// ERROR "not used"
	len(a)				// ERROR "not used"
	make([]int, 10)			// ERROR "not used"
	new(int)			// ERROR "not used"
	real(1i)			// ERROR "not used"
	unsafe.Alignof(a)		// ERROR "not used"
	unsafe.Offsetof(s.f)		// ERROR "not used"
	unsafe.Sizeof(a)		// ERROR "not used"

	close(c)
	copy(a, a)
	delete(m, 0)
	panic(0)
	print("foo")
	println("bar")
	recover()

	(close(c))
	(copy(a, a))
	(delete(m, 0))
	(panic(0))
	(print("foo"))
	(println("bar"))
	(recover())

	go append(a, 0)			// ERROR "not used|discards result"
	go cap(a)			// ERROR "not used|discards result"
	go complex(1, 2)		// ERROR "not used|discards result"
	go imag(1i)			// ERROR "not used|discards result"
	go len(a)			// ERROR "not used|discards result"
	go make([]int, 10)		// ERROR "not used|discards result"
	go new(int)			// ERROR "not used|discards result"
	go real(1i)			// ERROR "not used|discards result"
	go unsafe.Alignof(a)		// ERROR "not used|discards result"
	go unsafe.Offsetof(s.f)		// ERROR "not used|discards result"
	go unsafe.Sizeof(a)		// ERROR "not used|discards result"

	go close(c)
	go copy(a, a)
	go delete(m, 0)
	go panic(0)
	go print("foo")
	go println("bar")
	go recover()

	defer append(a, 0)		// ERROR "not used|discards result"
	defer cap(a)			// ERROR "not used|discards result"
	defer complex(1, 2)		// ERROR "not used|discards result"
	defer imag(1i)			// ERROR "not used|discards result"
	defer len(a)			// ERROR "not used|discards result"
	defer make([]int, 10)		// ERROR "not used|discards result"
	defer new(int)			// ERROR "not used|discards result"
	defer real(1i)			// ERROR "not used|discards result"
	defer unsafe.Alignof(a)		// ERROR "not used|discards result"
	defer unsafe.Offsetof(s.f)	// ERROR "not used|discards result"
	defer unsafe.Sizeof(a)		// ERROR "not used|discards result"

	defer close(c)
	defer copy(a, a)
	defer delete(m, 0)
	defer panic(0)
	defer print("foo")
	defer println("bar")
	defer recover()
}
                                                                                                                                     usr/local/go/test/fixedbugs/issue4468.go                                                            0100644 0000000 0000000 00000001370 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4468: go/defer calls may not be parenthesized.

package p

type T int

func (t *T) F() T {
	return *t
}

type S struct {
	t T
}

func F() {
	go F            // ERROR "must be function call"
	defer F         // ERROR "must be function call"
	go (F)		// ERROR "must be function call|must not be parenthesized"
	defer (F)	// ERROR "must be function call|must not be parenthesized"
	go (F())	// ERROR "must be function call|must not be parenthesized"
	defer (F())	// ERROR "must be function call|must not be parenthesized"
	var s S
	(&s.t).F()
	go (&s.t).F()
	defer (&s.t).F()
}
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4470.go                                                            0100644 0000000 0000000 00000000546 13020111414 016502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4470: parens are not allowed around .(type) "expressions"

package main

func main() {
	var i interface{}
	switch (i.(type)) { // ERROR "outside type switch"
	default:
	}
}
                                                                                                                                                          usr/local/go/test/fixedbugs/issue4495.go                                                            0100644 0000000 0000000 00000000562 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type I interface {
	m() int
}

type T struct{}

func (T) m() int {
	return 3
}

var t T

var ret = I.m(t)

func main() {
	if ret != 3 {
		println("ret = ", ret)
		panic("ret != 3")
	}
}

                                                                                                                                              usr/local/go/test/fixedbugs/issue4510.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016721  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4510.dir/f1.go                                                     0100644 0000000 0000000 00000000357 13020111414 017560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

import "fmt" // ERROR "fmt redeclared|imported"

var _ = fmt.Printf
                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4510.dir/f2.go                                                     0100644 0000000 0000000 00000000271 13020111414 017554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func fmt() {}
                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue4510.go                                                            0100644 0000000 0000000 00000000302 13020111414 016463  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue4517a.go                                                           0100644 0000000 0000000 00000000366 13020111414 016645  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

var init = 1 // ERROR "cannot declare init - must be func"
                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue4517b.go                                                           0100644 0000000 0000000 00000000370 13020111414 016641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

const init = 1 // ERROR "cannot declare init - must be func"
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4517c.go                                                           0100644 0000000 0000000 00000000370 13020111414 016642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type init byte // ERROR "cannot declare init - must be func"
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4517d.go                                                           0100644 0000000 0000000 00000000366 13020111414 016650  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

import init "fmt" // ERROR "cannot import package as init"
                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue4518.go                                                            0100644 0000000 0000000 00000001657 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4518. In some circumstances "return F(...)"
// where F has multiple returns is miscompiled by 6g due to
// bold assumptions in componentgen.

package main

//go:noinline
func F(e interface{}) (int, int) {
	return 3, 7
}

//go:noinline
func G() (int, int) {
	return 3, 7
}

func bogus1(d interface{}) (int, int) {
	switch {
	default:
		return F(d)
	}
	return 0, 0
}

func bogus2() (int, int) {
	switch {
	default:
		return F(3)
	}
	return 0, 0
}

func bogus3(d interface{}) (int, int) {
	switch {
	default:
		return G()
	}
	return 0, 0
}

func bogus4() (int, int) {
	switch {
	default:
		return G()
	}
	return 0, 0
}

func check(a, b int) {
	if a != 3 || b != 7 {
		println(a, b)
		panic("a != 3 || b != 7")
	}
}

func main() {
	check(bogus1(42))
	check(bogus2())
}
                                                                                 usr/local/go/test/fixedbugs/issue4529.go                                                            0100644 0000000 0000000 00000001075 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4529: escape analysis crashes on "go f(g())"
// when g has multiple returns.

package main

type M interface{}

type A struct {
	a string
	b chan M
}

func (a *A) I() (b <-chan M, c chan<- M) {
	a.b, c = make(chan M), make(chan M)
	b = a.b

	return
}

func Init(a string, b *A, c interface {
	I() (<-chan M, chan<- M)
}) {
	b.a = a
	go b.c(c.I())
}

func (a *A) c(b <-chan M, _ chan<- M) {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue4545.go                                                            0100644 0000000 0000000 00000001000 13020111414 016467  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4545: untyped constants are incorrectly coerced
// to concrete types when used in interface{} context.

package main

import "fmt"

func main() {
	var s uint
	fmt.Println(1.0 + 1<<s) // ERROR "invalid operation|non-integer type|incompatible type"
	x := 1.0 + 1<<s         // ERROR "invalid operation|non-integer type"
	_ = x
}
usr/local/go/test/fixedbugs/issue4562.go                                                            0100644 0000000 0000000 00000001562 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"runtime"
	"strings"
)

type T struct {
	val int
}

func main() {
	defer expectError(22)
	var pT *T
	switch pT.val { // error should be here - line 22
	case 0:
		fmt.Println("0")
	case 1: // used to show up here instead
		fmt.Println("1")
	case 2:
		fmt.Println("2")
	}
	fmt.Println("finished")
}

func expectError(expectLine int) {
	if recover() == nil {
		panic("did not crash")
	}
	for i := 1;; i++ {
		_, file, line, ok := runtime.Caller(i)
		if !ok {
			panic("cannot find issue4562.go on stack")
		}
		if strings.HasSuffix(file, "issue4562.go") {
			if line != expectLine {
				panic(fmt.Sprintf("crashed at line %d, wanted line %d", line, expectLine))
			}
			break
		}
	}
}
                                                                                                                                              usr/local/go/test/fixedbugs/issue4585.go                                                            0100644 0000000 0000000 00000004725 13020111414 016514  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4585: comparisons and hashes process blank
// fields and padding in structs.

package main

import "unsafe"

// T is a structure with padding.
type T struct {
	A     int16
	B     int64
	C     int16
	D     int64
	Dummy [64]byte
}

// U is a structure with a blank field
type U struct {
	A, _, B int
	Dummy   [64]byte
}

// USmall is like U but the frontend will inline comparison
// instead of calling the generated eq function.
type USmall struct {
	A, _, B int32
}

// V has padding but not on the first field.
type V struct {
	A1, A2, A3 int32
	B          int16
	C          int32
}

// W has padding at the end.
type W struct {
	A1, A2, A3 int32
	B          int32
	C          int8
}

func test1() {
	var a, b U
	m := make(map[U]int)
	copy((*[16]byte)(unsafe.Pointer(&a))[:], "hello world!")
	a.A, a.B = 1, 2
	b.A, b.B = 1, 2
	if a != b {
		panic("broken equality: a != b")
	}

	m[a] = 1
	m[b] = 2
	if len(m) == 2 {
		panic("broken hash: len(m) == 2")
	}
	if m[a] != 2 {
		panic("m[a] != 2")
	}
}

func test2() {
	var a, b T
	m := make(map[T]int)

	copy((*[16]byte)(unsafe.Pointer(&a))[:], "hello world!")
	a.A, a.B, a.C, a.D = 1, 2, 3, 4
	b.A, b.B, b.C, b.D = 1, 2, 3, 4

	if a != b {
		panic("broken equality: a != b")
	}

	m[a] = 1
	m[b] = 2
	if len(m) == 2 {
		panic("broken hash: len(m) == 2")
	}
	if m[a] != 2 {
		panic("m[a] != 2")
	}
}

func test3() {
	var a, b USmall
	copy((*[12]byte)(unsafe.Pointer(&a))[:], "hello world!")
	a.A, a.B = 1, 2
	b.A, b.B = 1, 2
	if a != b {
		panic("broken equality: a != b")
	}
}

func test4() {
	var a, b V
	m := make(map[V]int)

	copy((*[20]byte)(unsafe.Pointer(&a))[:], "Hello World, Gopher!")
	a.A1, a.A2, a.A3, a.B, a.C = 1, 2, 3, 4, 5
	b.A1, b.A2, b.A3, b.B, b.C = 1, 2, 3, 4, 5

	if a != b {
		panic("broken equality: a != b")
	}

	m[a] = 1
	m[b] = 2
	if len(m) == 2 {
		panic("broken hash: len(m) == 2")
	}
	if m[a] != 2 {
		panic("m[a] != 2")
	}
}

func test5() {
	var a, b W
	m := make(map[W]int)

	copy((*[20]byte)(unsafe.Pointer(&a))[:], "Hello World, Gopher!")
	a.A1, a.A2, a.A3, a.B, a.C = 1, 2, 3, 4, 5
	b.A1, b.A2, b.A3, b.B, b.C = 1, 2, 3, 4, 5

	if a != b {
		panic("broken equality: a != b")
	}

	m[a] = 1
	m[b] = 2
	if len(m) == 2 {
		panic("broken hash: len(m) == 2")
	}
	if m[a] != 2 {
		panic("m[a] != 2")
	}
}

func main() {
	test1()
	test2()
	test3()
	test4()
	test5()
}
                                           usr/local/go/test/fixedbugs/issue4590.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016731  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4590.dir/pkg1.go                                                   0100644 0000000 0000000 00000000667 13020111414 020130  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg1

type A interface {
	Write() error
}

type B interface {
	Hello()
	world()
}

type C struct{}

func (c C) Write() error { return nil }

var T = struct{ A }{nil}
var U = struct{ B }{nil}
var V A = struct{ *C }{nil}
var W = interface {
	Write() error
	Hello()
}(nil)
                                                                         usr/local/go/test/fixedbugs/issue4590.dir/pkg2.go                                                   0100644 0000000 0000000 00000000525 13020111414 020122  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg2

import "./pkg1"

var T = struct{ pkg1.A }{nil}
var U = struct{ pkg1.B }{nil}
var V pkg1.A = struct{ *pkg1.C }{nil}
var W = interface {
	Write() error
	Hello()
}(nil)
                                                                                                                                                                           usr/local/go/test/fixedbugs/issue4590.dir/prog.go                                                   0100644 0000000 0000000 00000000667 13020111414 020235  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"./pkg1"
	"./pkg2"
)

func main() {
	if pkg1.T != pkg2.T {
		panic("pkg1.T != pkg2.T")
	}
	if pkg1.U != pkg2.U {
		panic("pkg1.U != pkg2.U")
	}
	if pkg1.V != pkg2.V {
		panic("pkg1.V != pkg2.V")
	}
	if pkg1.W != pkg2.W {
		panic("pkg1.W != pkg2.W")
	}
}
                                                                         usr/local/go/test/fixedbugs/issue4590.go                                                            0100644 0000000 0000000 00000000424 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4590: linker fails on multiple imports of
// an anonymous struct with methods.

package ignored
                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue4610.go                                                            0100644 0000000 0000000 00000000517 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type bar struct {
	x int
}

func main() {
	var foo bar
	_ = &foo{} // ERROR "is not a type|expected .;."
} // GCCGO_ERROR "expected declaration"

                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4614.go                                                            0100644 0000000 0000000 00000000644 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4614: slicing of nil slices confuses the compiler
// with a uintptr(nil) node.

package p

import "unsafe"

var n int

var _ = []int(nil)[1:]
var _ = []int(nil)[n:]

var _ = uintptr(unsafe.Pointer(nil))
var _ = unsafe.Pointer(uintptr(0))
                                                                                            usr/local/go/test/fixedbugs/issue4618.go                                                            0100644 0000000 0000000 00000001215 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"runtime"
	"testing"
)

type T struct { int }

var globl *T

func F() {
	t := &T{}
	globl = t
}

func G() {
	t := &T{}
	_ = t
}

func main() {
	nf := testing.AllocsPerRun(100, F)
	ng := testing.AllocsPerRun(100, G)
	if int(nf) > 1 {
		fmt.Printf("AllocsPerRun(100, F) = %v, want 1\n", nf)
		os.Exit(1)
	}
	if int(ng) != 0 && (runtime.Compiler != "gccgo" || int(ng) != 1) {
		fmt.Printf("AllocsPerRun(100, G) = %v, want 0\n", ng)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue4620.go                                                            0100644 0000000 0000000 00000000617 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4620: map indexes are not evaluated before assignment of other elements

package main

import "fmt"

func main() {
	m := map[int]int{0:1}
	i := 0
	i, m[i] = 1, 2
	if m[0] != 2 {
		fmt.Println(m)
		panic("m[i] != 2")
	}
}
                                                                                                                 usr/local/go/test/fixedbugs/issue4654.go                                                            0100644 0000000 0000000 00000005376 13020111414 016514  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4654.
// Check error for conversion and 'not used' in defer/go.

package p

import "unsafe"

func f() {
	defer int(0) // ERROR "defer requires function call, not conversion|is not used"
	go string([]byte("abc")) // ERROR "go requires function call, not conversion|is not used"
	
	var c complex128
	var f float64
	var t struct {X int}

	var x []int
	defer append(x, 1) // ERROR "defer discards result of append|is not used"
	defer cap(x) // ERROR "defer discards result of cap|is not used"
	defer complex(1, 2) // ERROR "defer discards result of complex|is not used"
	defer complex(f, 1) // ERROR "defer discards result of complex|is not used"
	defer imag(1i) // ERROR "defer discards result of imag|is not used"
	defer imag(c) // ERROR "defer discards result of imag|is not used"
	defer len(x) // ERROR "defer discards result of len|is not used"
	defer make([]int, 1) // ERROR "defer discards result of make|is not used"
	defer make(chan bool) // ERROR "defer discards result of make|is not used"
	defer make(map[string]int) // ERROR "defer discards result of make|is not used"
	defer new(int) // ERROR "defer discards result of new|is not used"
	defer real(1i) // ERROR "defer discards result of real|is not used"
	defer real(c) // ERROR "defer discards result of real|is not used"
	defer append(x, 1) // ERROR "defer discards result of append|is not used"
	defer append(x, 1) // ERROR "defer discards result of append|is not used"
	defer unsafe.Alignof(t.X) // ERROR "defer discards result of unsafe.Alignof|is not used"
	defer unsafe.Offsetof(t.X) // ERROR "defer discards result of unsafe.Offsetof|is not used"
	defer unsafe.Sizeof(t) // ERROR "defer discards result of unsafe.Sizeof|is not used"
	
	defer copy(x, x) // ok
	m := make(map[int]int)
	defer delete(m, 1) // ok
	defer panic(1) // ok
	defer print(1) // ok
	defer println(1) // ok
	defer recover() // ok

	int(0) // ERROR "int\(0\) evaluated but not used|is not used"
	string([]byte("abc")) // ERROR "string\(.*\) evaluated but not used|is not used"

	append(x, 1) // ERROR "not used"
	cap(x) // ERROR "not used"
	complex(1, 2) // ERROR "not used"
	complex(f, 1) // ERROR "not used"
	imag(1i) // ERROR "not used"
	imag(c) // ERROR "not used"
	len(x) // ERROR "not used"
	make([]int, 1) // ERROR "not used"
	make(chan bool) // ERROR "not used"
	make(map[string]int) // ERROR "not used"
	new(int) // ERROR "not used"
	real(1i) // ERROR "not used"
	real(c) // ERROR "not used"
	append(x, 1) // ERROR "not used"
	append(x, 1) // ERROR "not used"
	unsafe.Alignof(t.X) // ERROR "not used"
	unsafe.Offsetof(t.X) // ERROR "not used"
	unsafe.Sizeof(t) // ERROR "not used"
}
                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4663.go                                                            0100644 0000000 0000000 00000000476 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4663.
// Make sure 'not used' message is placed correctly.

package main

func a(b int) int64 {
  b // ERROR "not used"
  return 0
}
                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4667.go                                                            0100644 0000000 0000000 00000001057 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"testing"
)

var globl *int

func G() {
	F()
}

func F() {
	var x int
	globl = &x
}

func main() {
	nf := testing.AllocsPerRun(100, F)
	ng := testing.AllocsPerRun(100, G)
	if int(nf) > 1 {
		fmt.Printf("AllocsPerRun(100, F) = %v, want 1\n", nf)
		os.Exit(1)
	}
	if int(ng) > 1 {
		fmt.Printf("AllocsPerRun(100, G) = %v, want 1\n", ng)
		os.Exit(1)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4734.go                                                            0100644 0000000 0000000 00000000550 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Caused gccgo to emit multiple definitions of the same symbol.

package p

type S1 struct{}

func (s *S1) M() {}

type S2 struct {
	F struct{ *S1 }
}

func F() {
	_ = struct{ *S1 }{}
}
                                                                                                                                                        usr/local/go/test/fixedbugs/issue4748.go                                                            0100644 0000000 0000000 00000000567 13020111414 016515  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4748.
// This program used to complain because inlining created two exit labels.

package main

func jump() {
        goto exit
exit:
        return
}
func main() {
        jump()
        jump()
}
                                                                                                                                         usr/local/go/test/fixedbugs/issue4752.go                                                            0100644 0000000 0000000 00000001002 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func F(xi, yi interface{}) uint64 {
	x, y := xi.(uint64), yi.(uint64)
	return x &^ y
}

func G(xi, yi interface{}) uint64 {
	return xi.(uint64) &^ yi.(uint64) // generates incorrect code
}

func main() {
	var x, y uint64 = 0, 1 << 63
	f := F(x, y)
	g := G(x, y)
	if f != 0 || g != 0 {
		println("F", f, "G", g)
		panic("bad")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue4776.go                                                            0100644 0000000 0000000 00000000477 13020111414 016516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4776: missing package declaration error should be fatal.

type MyInt int32 // ERROR "package statement must be first|package clause"

                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4785.go                                                            0100644 0000000 0000000 00000000573 13020111414 016513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 4785: used to fail to compile

package main

func t(x, y interface{}) interface{} {
	return x.(float64) > y.(float64)
}

func main() {
	v := t(1.0, 2.0)
	if v != false {
		panic("bad comparison")
	}
}
                                                                                                                                     usr/local/go/test/fixedbugs/issue4813.go                                                            0100644 0000000 0000000 00000002104 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4813: use of constant floats as indices.

package main

var A [3]int
var S []int
var T string

const (
	i  = 1
	f  = 2.0
	f2 = 2.1
	c  = complex(2, 0)
	c2 = complex(2, 1)
)

var (
	vf = f
	vc = c
)

var (
	a1 = A[i]
	a2 = A[f]
	a3 = A[f2] // ERROR "truncated|must be integer"
	a4 = A[c]
	a5 = A[c2] // ERROR "truncated|must be integer"
	a6 = A[vf] // ERROR "non-integer|must be integer"
	a7 = A[vc] // ERROR "non-integer|must be integer"

	s1 = S[i]
	s2 = S[f]
	s3 = S[f2] // ERROR "truncated|must be integer"
	s4 = S[c]
	s5 = S[c2] // ERROR "truncated|must be integer"
	s6 = S[vf] // ERROR "non-integer|must be integer"
	s7 = S[vc] // ERROR "non-integer|must be integer"

	t1 = T[i]
	t2 = T[f]
	t3 = T[f2] // ERROR "truncated|must be integer"
	t4 = T[c]
	t5 = T[c2] // ERROR "truncated|must be integer"
	t6 = T[vf] // ERROR "non-integer|must be integer"
	t7 = T[vc] // ERROR "non-integer|must be integer"
)
                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue4847.go                                                            0100644 0000000 0000000 00000001005 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4847: initialization loop is not detected.

package p

type (
	E int
	S int
)

type matcher func(s *S) E

func matchList(s *S) E { return matcher(matchAnyFn)(s) }

var foo = matcher(matchList)

var matchAny = matcher(matchList) // ERROR "initialization loop|depends upon itself"

func matchAnyFn(s *S) (err E) { return matchAny(s) }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/issue4879.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016743  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4879.dir/a.go                                                      0100644 0000000 0000000 00000000722 13020111414 017510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package a

import (
	"unsafe"
)

type Collection struct {
	root unsafe.Pointer
}

type nodeLoc struct{}

type slice []int

type maptype map[int]int

func MakePrivateCollection() *Collection {
	return &Collection{
		root: unsafe.Pointer(&nodeLoc{}),
	}
}

func MakePrivateCollection2() *Collection {
	return &Collection{
		root: unsafe.Pointer(&slice{}),
	}
}
func MakePrivateCollection3() *Collection {
	return &Collection{
		root: unsafe.Pointer(&maptype{}),
	}
}

                                              usr/local/go/test/fixedbugs/issue4879.dir/b.go                                                      0100644 0000000 0000000 00000000210 13020111414 017501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package b

import "./a"

func F() {
      a.MakePrivateCollection()
      a.MakePrivateCollection2()
      a.MakePrivateCollection3()
}
                                                                                                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4879.go                                                            0100644 0000000 0000000 00000000434 13020111414 016513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4879: export data misses the '&' for some
// composite literals in inlined bodies.

package ignored
                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue4909a.go                                                           0100644 0000000 0000000 00000001372 13020111414 016650  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4909: compiler incorrectly accepts unsafe.Offsetof(t.x)
// where x is a field of an embedded pointer field.

package p

import (
	"unsafe"
)

type T struct {
	A int
	*B
}

func (t T) Method() {}

type B struct {
	X, Y int
}

var t T
var p *T

const N1 = unsafe.Offsetof(t.X)      // ERROR "indirection"
const N2 = unsafe.Offsetof(p.X)      // ERROR "indirection"
const N3 = unsafe.Offsetof(t.B.X)    // valid
const N4 = unsafe.Offsetof(p.B.X)    // valid
const N5 = unsafe.Offsetof(t.Method) // ERROR "method value"
const N6 = unsafe.Offsetof(p.Method) // ERROR "method value"
                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue4909b.go                                                           0100644 0000000 0000000 00000002457 13020111414 016656  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckoutput

package main

import "fmt"

// We are going to define 256 types T(n),
// such that T(n) embeds T(2n) and *T(2n+1).

func main() {
	fmt.Printf("// errorcheck\n\n")
	fmt.Printf("package p\n\n")
	fmt.Println(`import "unsafe"`)

	// Dump types.
	for n := 1; n < 256; n++ {
		writeStruct(n)
	}
	// Dump leaves
	for n := 256; n < 512; n++ {
		fmt.Printf("type T%d int\n", n)
	}

	fmt.Printf("var t T1\n")
	fmt.Printf("var p *T1\n")

	// Simple selectors
	for n := 2; n < 256; n++ {
		writeDot(n)
	}

	// Double selectors
	for n := 128; n < 256; n++ {
		writeDot(n/16, n)
	}

	// Triple selectors
	for n := 128; n < 256; n++ {
		writeDot(n/64, n/8, n)
	}
}

const structTpl = `
type T%d struct {
	A%d int
	T%d
	*T%d
}
`

func writeStruct(n int) {
	fmt.Printf(structTpl, n, n, 2*n, 2*n+1)
}

func writeDot(ns ...int) {
	for _, root := range []string{"t", "p"} {
		fmt.Printf("const _ = unsafe.Offsetof(%s", root)
		for _, n := range ns {
			fmt.Printf(".T%d", n)
		}
		// Does it involve an indirection?
		nlast := ns[len(ns)-1]
		nprev := 1
		if len(ns) > 1 {
			nprev = ns[len(ns)-2]
		}
		isIndirect := false
		for n := nlast / 2; n > nprev; n /= 2 {
			if n%2 == 1 {
				isIndirect = true
				break
			}
		}
		fmt.Print(")")
		if isIndirect {
			fmt.Print(` // ERROR "indirection"`)
		}
		fmt.Print("\n")
	}
}
                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue4932.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016731  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4932.dir/foo.go                                                    0100644 0000000 0000000 00000000276 13020111414 020045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package foo

type Op struct{}
                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue4932.dir/state.go                                                  0100644 0000000 0000000 00000000662 13020111414 020401  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package state

import "./foo"

func Public() {
	var s Settings
	s.op()
}

type State struct{}

func (s *State) x(*Settings) {}

type Settings struct{}

func (c *Settings) x() {
	run([]foo.Op{{}})
}

func run([]foo.Op) {}

func (s *Settings) op() foo.Op {
	return foo.Op{}
}
                                                                              usr/local/go/test/fixedbugs/issue4932.dir/state2.go                                                 0100644 0000000 0000000 00000000330 13020111414 020453  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package state2

import "./state"

type Foo *state.State
                                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4932.go                                                            0100644 0000000 0000000 00000000373 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4932: regression in export of composite literals.

package ignored
                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue4964.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016736  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue4964.dir/a.go                                                      0100644 0000000 0000000 00000000573 13020111414 017507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

var global, global2 *int

type T struct {
	Pointer *int
}

//go:noinline
func Store(t *T) {
	global = t.Pointer
}

//go:noinline
func Store2(t *T) {
	global2 = t.Pointer
}

func Get() *int {
	return global
}
                                                                                                                                     usr/local/go/test/fixedbugs/issue4964.dir/b.go                                                      0100644 0000000 0000000 00000000744 13020111414 017510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func F() {
	// store 1 in a.global
	x, y := 1, 2
	t := a.T{Pointer: &x}
	a.Store(&t)
	_ = y
}

func G() {
	// store 4 in a.global2
	x, y := 3, 4
	t := a.T{Pointer: &y}
	a.Store2(&t)
	_ = x
}

func main() {
	F()
	G()
	p := a.Get()
	n := *p
	if n != 1 {
		println(n, "!= 1")
		panic("n != 1")
	}
}
                            usr/local/go/test/fixedbugs/issue4964.go                                                            0100644 0000000 0000000 00000000430 13020111414 016502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 4964: exported escape analysis result is not enough
// for cross package analysis.

package ignored
                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5002.go                                                            0100644 0000000 0000000 00000000467 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // build

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5002: 8g produces invalid CMPL $0, $0.
// Used to fail at link time.

package main

func main() {
	var y int64
	if y%1 == 0 {
	}
}
                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue5056.go                                                            0100644 0000000 0000000 00000001006 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5056: escape analysis not applied to wrapper functions

package main

type Foo int16

func (f Foo) Esc() *int{
	x := int(f)
	return &x
}

type iface interface {
	Esc() *int
}

var bar, foobar *int

func main() {
	var quux iface
	var x Foo
	
	quux = x
	bar = quux.Esc()
	foobar = quux.Esc()
	if bar == foobar {
		panic("bar == foobar")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue5089.go                                                            0100644 0000000 0000000 00000000605 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5089: gc allows methods on non-locals if symbol already exists

package p

import "bufio"	// GCCGO_ERROR "previous"

func (b *bufio.Reader) Buffered() int { // ERROR "non-local|redefinition"
	return -1
}
                                                                                                                           usr/local/go/test/fixedbugs/issue5105.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016722  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5105.dir/a.go                                                      0100644 0000000 0000000 00000000317 13020111414 017467  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

var A = [2]string{"hello", "world"}
                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue5105.dir/b.go                                                      0100644 0000000 0000000 00000000436 13020111414 017472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

var B = [2]string{"world", "hello"}

func main() {
	if a.A[0] != B[1] {
		panic("bad hello")
	}
}
                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue5105.go                                                            0100644 0000000 0000000 00000000423 13020111414 016470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5105: linker segfaults on duplicate definition
// of a type..hash.* function.

package ignored
                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5125.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016724  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5125.dir/bug.go                                                    0100644 0000000 0000000 00000000444 13020111414 020027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package bug

type Node interface {
	Eval(s *Scene)
}

type plug struct {
	node Node
}

type Scene struct {
	changed map[plug]bool
}
                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue5125.dir/main.go                                                   0100644 0000000 0000000 00000000320 13020111414 020167  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import _ "./bug"

func main() {
}
                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5125.go                                                            0100644 0000000 0000000 00000000440 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5125: cyclic dependencies between types confuse
// the hashability test during import.

package ignored
                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5162.go                                                            0100644 0000000 0000000 00000004461 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5162: bad array equality when multiple comparisons
// happen in the same expression.

package main

import (
	"fmt"
	"strings"
)

const template = `
func CheckEqNNN_TTT() {
	onesA := [NNN]ttt{ONES}
	onesB := [NNN]ttt{ONES}
	twos := [NNN]ttt{TWOS}
	if onesA != onesB {
		println("onesA != onesB in CheckEqNNN_TTT")
	}
	if onesA == twos {
		println("onesA == twos in CheckEqNNN_TTT")
	}
	if onesB == twos {
		println("onesB == twos in CheckEqNNN_TTT")
	}
	if s := fmt.Sprint(onesA == onesB, onesA != twos, onesB != twos); s != "true true true" {
		println("fail in CheckEqNNN_TTT:", s)
	}
}

func CheckEqNNN_TTTExtraVar() {
	onesA := [NNN]ttt{ONES}
	onesB := [NNN]ttt{ONES}
	twos := [NNN]ttt{TWOS}
	onesX := onesA
	if onesA != onesB {
		println("onesA != onesB in CheckEqNNN_TTTExtraVar")
	}
	if onesA == twos {
		println("onesA == twos in CheckEqNNN_TTTExtraVar")
	}
	if onesB == twos {
		println("onesB == twos in CheckEqNNN_TTTExtraVar")
	}
	if s := fmt.Sprint(onesA == onesB, onesA != twos, onesB != twos); s != "true true true" {
		println("fail in CheckEqNNN_TTTExtraVar:", s)
	}
	if s := fmt.Sprint(onesB == onesX); s != "true" {
		println("extra var fail in CheckEqNNN_TTTExtraVar")
	}
}
`

func main() {
	fmt.Print("// run\n\n")
	fmt.Print("// THIS FILE IS AUTO-GENERATED\n\n")
	fmt.Print("package main\n\n")
	fmt.Println(`import "fmt"`)

	types := []string{
		"int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64"}
	tocall := make([]string, 0, 32*len(types))
	for i := 1; i <= 32; i++ {
		for _, typ := range types {
			src := template
			src = strings.Replace(src, "NNN", fmt.Sprint(i), -1)
			src = strings.Replace(src, "TTT", strings.Title(typ), -1)
			src = strings.Replace(src, "ttt", typ, -1)
			src = strings.Replace(src, "ONES", "1"+strings.Repeat(", 1", i-1), -1)
			src = strings.Replace(src, "TWOS", "2"+strings.Repeat(", 2", i-1), -1)
			fmt.Print(src)
			tocall = append(tocall, fmt.Sprintf("CheckEq%d_%s", i, strings.Title(typ)))
		}
	}
	fmt.Println("func main() {")
	for _, fun := range tocall {
		fmt.Printf("\t%s()\n", fun)
		fmt.Printf("\t%sExtraVar()\n", fun)
	}
	fmt.Println("}")
}
                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue5172.go                                                            0100644 0000000 0000000 00000000661 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5172: spurious warn about type conversion on broken type inside go and defer

package main

type foo struct {
	x bar // ERROR "undefined"
}

func main() {
	var f foo
	go f.bar()	// GCCGO_ERROR "undefined"
	defer f.bar()	// GCCGO_ERROR "undefined"
}
                                                                               usr/local/go/test/fixedbugs/issue5231.go                                                            0100644 0000000 0000000 00000001347 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5231: method values lose their variadic property.

package p

type T int

func (t T) NotVariadic(s []int) int {
	return int(t) + s[0]
}

func (t T) Variadic(s ...int) int {
	return int(t) + s[0]
}

type I interface {
	NotVariadic(s []int) int
	Variadic(s ...int) int
}

func F() {
	var t T
	var p *T = &t
	var i I = p

	nv := t.NotVariadic
	nv = p.NotVariadic
	nv = i.NotVariadic
	var s int = nv([]int{1, 2, 3})

	v := t.Variadic
	v = p.Variadic
	v = i.Variadic
	s = v(1, 2, 3)

	var f1 func([]int) int = nv
	var f2 func(...int) int = v

	_, _, _ = f1, f2, s
}
                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue5244.go                                                            0100644 0000000 0000000 00000000761 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5244: the init order computation uses the wrong
// order for top-level blank identifier assignments.
// The example used to panic because it tries calling a
// nil function instead of assigning to f before.

package main

var f = func() int { return 1 }
var _ = f() + g()
var g = func() int { return 2 }

func main() {}
               usr/local/go/test/fixedbugs/issue5259.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016734  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5259.dir/bug.go                                                    0100644 0000000 0000000 00000000421 13020111414 020032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package bug

type S struct {
	F func()
}

type X interface {
	Bar()
}

func Foo(x X) *S {
	return &S{F: x.Bar}
}
                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue5259.dir/main.go                                                   0100644 0000000 0000000 00000000410 13020111414 020177  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./bug"

type foo int

func (f *foo) Bar() {
}

func main() {
	bug.Foo(new(foo))
}
                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5259.go                                                            0100644 0000000 0000000 00000000407 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5259: Inlining of method value causes internal compiler error

package ignored
                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue5260.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016724  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5260.dir/a.go                                                      0100644 0000000 0000000 00000000300 13020111414 017461  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

const BOM = "\uFEFF"
                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5260.dir/b.go                                                      0100644 0000000 0000000 00000000327 13020111414 017473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	_ = a.BOM
}
                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue5260.go                                                            0100644 0000000 0000000 00000000441 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5260: Unicode BOM in exported string constant
// cannot be read back during package import.

package ignored
                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue5291.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016730  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5291.dir/pkg1.go                                                   0100644 0000000 0000000 00000001003 13020111414 020110  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg1

import (
	"runtime"
)

type T2 *[]string

type Data struct {
	T1 *[]T2
}

func CrashCall() (err error) {
	var d Data

	for count := 0; count < 10; count++ {
		runtime.GC()

		len := 2 // crash when >=2
		x := make([]T2, len)

		d = Data{T1: &x}

		for j := 0; j < len; j++ {
			y := make([]string, 1)
			(*d.T1)[j] = &y
		}
	}
	return nil
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5291.dir/prog.go                                                   0100644 0000000 0000000 00000000463 13020111414 020226  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"./pkg1"
)

type message struct { // Presence of this creates a crash
	data pkg1.Data
}

func main() {
	pkg1.CrashCall()
}
                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5291.go                                                            0100644 0000000 0000000 00000000324 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5291: GC crash

package ignored
                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue5358.go                                                            0100644 0000000 0000000 00000000601 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5358: incorrect error message when using f(g()) form on ... args.

package main

func f(x int, y ...int) {}

func g() (int, []int)

func main() {
	f(g()) // ERROR "as type int in|incompatible type"
}
                                                                                                                               usr/local/go/test/fixedbugs/issue5373.go                                                            0100644 0000000 0000000 00000002616 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Ensure that zeroing range loops have the requisite side-effects.

package main

import (
	"fmt"
	"os"
)

func check(n int) {
	// When n == 0, i is untouched by the range loop.
	// Picking an initial value of -1 for i makes the
	// "want" calculation below correct in all cases.
	i := -1
	s := make([]byte, n)
	for i = range s {
		s[i] = 0
	}
	if want := n - 1; i != want {
		fmt.Printf("index after range with side-effect = %d want %d\n", i, want)
		os.Exit(1)
	}

	i = n + 1
	// i is shadowed here, so its value should be unchanged.
	for i := range s {
		s[i] = 0
	}
	if want := n + 1; i != want {
		fmt.Printf("index after range without side-effect = %d want %d\n", i, want)
		os.Exit(1)
	}

	// Index variable whose evaluation has side-effects
	var x int
	f := func() int {
		x++
		return 0
	}
	var a [1]int
	for a[f()] = range s {
		s[a[f()]] = 0
	}
	if want := n * 2; x != want {
		fmt.Printf("index function calls = %d want %d\n", x, want)
		os.Exit(1)
	}

	// Range expression whose evaluation has side-effects
	x = 0
	b := [1][]byte{s}
	for i := range b[f()] {
		b[f()][i] = 0
	}
	if want := n + 1; x != n+1 {
		fmt.Printf("range expr function calls = %d want %d\n", x, want)
		os.Exit(1)
	}
}

func main() {
	check(0)
	check(1)
	check(15)
}
                                                                                                                  usr/local/go/test/fixedbugs/issue5470.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016727  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5470.dir/a.go                                                      0100644 0000000 0000000 00000001024 13020111414 017470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type Foo interface {
	Hi() string
}

func Test1() Foo { return make(tst1) }

type tst1 map[string]bool

func (r tst1) Hi() string { return "Hi!" }

func Test2() Foo { return make(tst2, 0) }

type tst2 []string

func (r tst2) Hi() string { return "Hi!" }

func Test3() Foo { return make(tst3) }

type tst3 chan string

func (r tst3) Hi() string { return "Hi!" }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue5470.dir/b.go                                                      0100644 0000000 0000000 00000000352 13020111414 017474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

func main() {
	a.Test1()
	a.Test2()
	a.Test3()
}
                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue5470.go                                                            0100644 0000000 0000000 00000000421 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5470: exported data for inlining may miss
// the type argument of make.

package ignored
                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue5493.go                                                            0100644 0000000 0000000 00000001751 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"runtime"
	"sync"
	"sync/atomic"
	"time"
)

const N = 10
var count int64

func run() error {
	f1 := func() {}
	f2 := func() {
		func() {
			f1()
		}()
	}
	runtime.SetFinalizer(&f1, func(f *func()) {
		atomic.AddInt64(&count, -1)
	})
	go f2()
	return nil
}

func main() {
	// Does not work on 32-bits, or with gccgo, due to partially
	// conservative GC.
	// Try to enable when we have fully precise GC.
	if runtime.GOARCH != "amd64" || runtime.Compiler == "gccgo" {
		return
	}
	count = N
	var wg sync.WaitGroup
	wg.Add(N)
	for i := 0; i < N; i++ {
		go func() {
			run()
			wg.Done()
		}()
	}
	wg.Wait()
	for i := 0; i < 2*N; i++ {
		time.Sleep(10 * time.Millisecond)
		runtime.GC()
	}
	if count != 0 {
		println(count, "out of", N, "finalizer are not called")
		panic("not all finalizers are called")
	}
}

                       usr/local/go/test/fixedbugs/issue5515.go                                                            0100644 0000000 0000000 00000001125 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5515: miscompilation doing inlining in generated method wrapper

package main

type T uint32

func main() {
        b := make([]T, 8)
        b[0] = 0xdeadbeef
        rs := Slice(b)
        sort(rs)
}

type Slice []T

func (s Slice) Swap(i, j int) {
        tmp := s[i]
        s[i] = s[j]
        s[j] = tmp
}

type Interface interface {
        Swap(i, j int)
}

func sort(data Interface) {
        data.Swap(0, 4)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/issue5581.go                                                            0100644 0000000 0000000 00000001100 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Used to emit a spurious "invalid recursive type" error.
// See golang.org/issue/5581.

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func NewBar() *Bar { return nil }

func (x *Foo) Method() (int, error) {
	for y := range x.m {
		_ = y.A
	}
	return 0, nil
}

type Foo struct {
	m map[*Bar]int
}

type Bar struct {
	A *Foo
	B chan Blah // ERROR "undefined.*Blah"
}

func main() {
	fmt.Println("Hello, playground")
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5607.go                                                            0100644 0000000 0000000 00000001411 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5607: generation of init() function incorrectly
// uses initializers of blank variables inside closures.

package main

var Test = func() {
	var mymap = map[string]string{"a": "b"}

	var innerTest = func() {
		// Used to crash trying to compile this line as
		// part of init() (funcdepth mismatch).
		var _, x = mymap["a"]
		println(x)
	}
	innerTest()
}

var Test2 = func() {
	// The following initializer should not be part of init()
	// The compiler used to generate a call to Panic() in init().
	var _, x = Panic()
	_ = x
}

func Panic() (int, int) {
	panic("omg")
	return 1, 2
}

func main() {}
                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue5609.go                                                            0100644 0000000 0000000 00000000554 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5609: overflow when calculating array size

package pkg

const Large uint64 = 18446744073709551615

var foo [Large]uint64 // ERROR "array bound is too large|array bound overflows"
                                                                                                                                                    usr/local/go/test/fixedbugs/issue5614.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016727  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5614.dir/rethinkgo.go                                              0100644 0000000 0000000 00000000377 13020111414 021254  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package rethinkgo

type Session struct {
}

func (s *Session) Run(query Exp) *int { return nil }

type List []interface{}

type Exp struct {
	args []interface{}
}

func (e Exp) UseOutdated(useOutdated bool) Exp {
	return Exp{args: List{e, useOutdated}}
}
                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue5614.dir/x.go                                                      0100644 0000000 0000000 00000000074 13020111414 017523  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package x

import "./rethinkgo"

var S *rethinkgo.Session


                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue5614.dir/y.go                                                      0100644 0000000 0000000 00000000045 13020111414 017522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package y

import "./x"

var T = x.S
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/go/test/fixedbugs/issue5614.go                                                            0100644 0000000 0000000 00000000500 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5614: exported data for inlining may miss
// named types when used in implicit conversion to
// their underlying type.

package ignored
                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5698.go                                                            0100644 0000000 0000000 00000000615 13020111414 016514  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5698: can define a key type with slices.

package main

type Key struct {
	a int16 // the compiler was confused by the padding.
	b []int
}

type Val struct{}

type Map map[Key]Val // ERROR "invalid map key type"
                                                                                                                   usr/local/go/test/fixedbugs/issue5704.go                                                            0100644 0000000 0000000 00000002015 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5704: Conversions of empty strings to byte
// or rune slices return empty but non-nil slices.

package main

type (
	mystring string
	mybytes  []byte
	myrunes  []rune
)

func checkBytes(s []byte, arg string) {
	if len(s) != 0 {
		panic("len(" + arg + ") != 0")
	}
	if s == nil {
		panic(arg + " == nil")
	}
}

func checkRunes(s []rune, arg string) {
	if len(s) != 0 {
		panic("len(" + arg + ") != 0")
	}
	if s == nil {
		panic(arg + " == nil")
	}
}

func main() {
	checkBytes([]byte(""), `[]byte("")`)
	checkBytes([]byte(mystring("")), `[]byte(mystring(""))`)
	checkBytes(mybytes(""), `mybytes("")`)
	checkBytes(mybytes(mystring("")), `mybytes(mystring(""))`)

	checkRunes([]rune(""), `[]rune("")`)
	checkRunes([]rune(mystring("")), `[]rune(mystring(""))`)
	checkRunes(myrunes(""), `myrunes("")`)
	checkRunes(myrunes(mystring("")), `myrunes(mystring(""))`)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue5753.go                                                            0100644 0000000 0000000 00000000766 13020111414 016513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5753: bad typecheck info causes escape analysis to
// not run on method thunks.

package main

type Thing struct{}

func (t *Thing) broken(s string) []string {
	foo := [1]string{s}
	return foo[:]
}

func main() {
	t := &Thing{}

	f := t.broken
	s := f("foo")
	_ = f("bar")
	if s[0] != "foo" {
		panic(`s[0] != "foo"`)
	}
	
}
          usr/local/go/test/fixedbugs/issue5755.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016735  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5755.dir/a.go                                                      0100644 0000000 0000000 00000002420 13020111414 017477  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type I interface {
	F()
}

type foo1 []byte
type foo2 []rune
type foo3 []uint8
type foo4 []int32
type foo5 string
type foo6 string
type foo7 string
type foo8 string
type foo9 string

func (f foo1) F() { return }
func (f foo2) F() { return }
func (f foo3) F() { return }
func (f foo4) F() { return }
func (f foo5) F() { return }
func (f foo6) F() { return }
func (f foo7) F() { return }
func (f foo8) F() { return }
func (f foo9) F() { return }

func Test1(s string) I  { return foo1(s) }
func Test2(s string) I  { return foo2(s) }
func Test3(s string) I  { return foo3(s) }
func Test4(s string) I  { return foo4(s) }
func Test5(s []byte) I  { return foo5(s) }
func Test6(s []rune) I  { return foo6(s) }
func Test7(s []uint8) I { return foo7(s) }
func Test8(s []int32) I { return foo8(s) }
func Test9(s int) I     { return foo9(s) }

type bar map[int]int

func (b bar) F() { return }

func TestBar() I { return bar{1: 2} }

type baz int

func IsBaz(x interface{}) bool { _, ok := x.(baz); return ok }

type baz2 int

func IsBaz2(x interface{}) bool {
	switch x.(type) {
	case baz2:
		return true
	default:
		return false
	}
}
                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5755.dir/main.go                                                   0100644 0000000 0000000 00000000601 13020111414 020202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

func main() {
	a.Test1("frumious")
	a.Test2("frumious")
	a.Test3("frumious")
	a.Test4("frumious")

	a.Test5(nil)
	a.Test6(nil)
	a.Test7(nil)
	a.Test8(nil)
	a.Test9(0)

	a.TestBar()
	a.IsBaz(nil)
}
                                                                                                                               usr/local/go/test/fixedbugs/issue5755.go                                                            0100644 0000000 0000000 00000000443 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5755: exported data for inlining may miss
// named types when used in string conversions.

package ignored
                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5793.go                                                            0100644 0000000 0000000 00000001432 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5793: calling 2-arg builtin with multiple-result f() call expression gives
// spurious error.

package main

func complexArgs() (float64, float64) {
	return 5, 7
}

func appendArgs() ([]string, string) {
	return []string{"foo"}, "bar"
}

func appendMultiArgs() ([]byte, byte, byte) {
	return []byte{'a', 'b'}, '1', '2'
}

func main() {
	if c := complex(complexArgs()); c != 5+7i {
		panic(c)
	}

	if s := append(appendArgs()); len(s) != 2 || s[0] != "foo" || s[1] != "bar" {
		panic(s)
	}

	if b := append(appendMultiArgs()); len(b) != 4 || b[0] != 'a' || b[1] != 'b' || b[2] != '1' || b[3] != '2' {
		panic(b)
	}
}
                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue5809.go                                                            0100644 0000000 0000000 00000001022 13020111414 016477  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5809: 6g and 8g attempted to constant propagate indexed LEA

package main

import "fmt"

func main() {
	const d16 = "0123456789ABCDEF"
	k := 0x1234
	var x [4]byte
	
	x[0] = d16[k>>12&0xf]
	x[1] = d16[k>>8&0xf]
	x[2] = d16[k>>4&0xf]
	x[3] = d16[k&0xf]
	
	if x != [4]byte{'1','2','3','4'} {
		fmt.Println(x)
		panic("x != [4]byte{'1','2','3','4'}")
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue5820.go                                                            0100644 0000000 0000000 00000000623 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 5820: register clobber when clearfat and 64 bit arithmetic is interleaved.

package main

func main() {
	array := make([][]int, 2)
	index := uint64(1)
	array[index] = nil
	if array[1] != nil {
		panic("array[1] != nil")
	}
}
                                                                                                             usr/local/go/test/fixedbugs/issue5841.go                                                            0100644 0000000 0000000 00000000514 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // build

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5841: 8g produces invalid CMPL $0, $0.
// Similar to issue 5002, used to fail at link time.

package main

func main() {
	var y int
	if y%1 == 0 {
	}
}
                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue5856.go                                                            0100644 0000000 0000000 00000001113 13020111414 016502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"runtime"
	"strings"
)

func main() {
	f()
	panic("deferred function not run")
}

var x = 1

func f() {
	if x == 0 {
		return
	}
	defer g()
	panic("panic")
}

func g() {
	_, file, line, _ := runtime.Caller(3)
	if !strings.HasSuffix(file, "issue5856.go") || line != 28 {
		fmt.Printf("BUG: defer called from %s:%d, want issue5856.go:28\n", file, line)
		os.Exit(1)
	}
	os.Exit(0)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue5910.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016726  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5910.dir/a.go                                                      0100644 0000000 0000000 00000000624 13020111414 017474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type Package struct {
	name string
}

type Future struct {
	result chan struct {
		*Package
		error
	}
}

func (t *Future) Result() (*Package, error) {
	result := <-t.result
	t.result <- result
	return result.Package, result.error
}
                                                                                                            usr/local/go/test/fixedbugs/issue5910.dir/main.go                                                   0100644 0000000 0000000 00000000352 13020111414 020176  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "a"

func main() {
	f := new(a.Future)
	f.Result()
}
                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue5910.go                                                            0100644 0000000 0000000 00000000420 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 5910: parsing of unnamed struct types
// in inlined bodies was broken.

package ignored
                                                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue5957.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016741  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue5957.dir/a.go                                                      0100644 0000000 0000000 00000000034 13020111414 017502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package surprise

var X int
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue5957.dir/b.go                                                      0100644 0000000 0000000 00000000023 13020111414 017501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package surprise2

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5957.dir/c.go                                                      0100644 0000000 0000000 00000001023 13020111414 017503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package p

import (
	"./a" // ERROR "imported and not used: \x22a\x22 as surprise|imported and not used: surprise"
	"./b" // ERROR "imported and not used: \x22b\x22 as surprise2|imported and not used: surprise2"
	b "./b" // ERROR "imported and not used: \x22b\x22$|imported and not used: surprise2"
	foo "math" // ERROR "imported and not used: \x22math\x22 as foo|imported and not used: math"
	"fmt" // actually used
	"strings" // ERROR "imported and not used: \x22strings\x22|imported and not used: strings"
)

var _ = fmt.Printf
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue5957.go                                                            0100644 0000000 0000000 00000000302 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheckdir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ignored
                                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue5963.go                                                            0100644 0000000 0000000 00000001642 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Used to die in runtime due to init goroutine exiting while
// locked to main thread.

package main

import (
	"os"
	"runtime"
)

func init() {
	c := make(chan int, 1)
	defer func() {
		c <- 0
	}()
	go func() {
		os.Exit(<-c)
	}()
	runtime.Goexit()
}

func main() {
}

/* Before fix:

invalid m->locked = 2
fatal error: internal lockOSThread error

goroutine 2 [runnable]:
runtime.MHeap_Scavenger()
	/Users/rsc/g/go/src/pkg/runtime/mheap.c:438
runtime.goexit()
	/Users/rsc/g/go/src/pkg/runtime/proc.c:1313
created by runtime.main
	/Users/rsc/g/go/src/pkg/runtime/proc.c:165

goroutine 3 [runnable]:
main.funcÂ·002()
	/Users/rsc/g/go/test/fixedbugs/issue5963.go:22
created by main.initÂ·1
	/Users/rsc/g/go/test/fixedbugs/issue5963.go:24 +0xb9
exit status 2
*/
                                                                                              usr/local/go/test/fixedbugs/issue6004.go                                                            0100644 0000000 0000000 00000000601 13020111414 016465  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	_ = nil // ERROR "use of untyped nil"
	_, _ = nil, 1 // ERROR "use of untyped nil"
	_, _ = 1, nil // ERROR "use of untyped nil"
	_ = append(nil, 1, 2, 3) // ERROR "untyped nil"
}

                                                                                                                               usr/local/go/test/fixedbugs/issue6036.go                                                            0100644 0000000 0000000 00000001143 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // +build amd64
// compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6036: 6g's backend generates OINDREG with
// offsets larger than 32-bit.

package main

type T struct {
	Large [1 << 31]byte
	A     int
	B     int
}

func F(t *T) {
	t.B = t.A
}

type T2 [1<<31 + 2]byte

func F2(t *T2) {
	t[1<<31+1] = 42
}

type T3 [1<<15 + 1][1<<15 + 1]int

func F3(t *T3) {
	t[1<<15][1<<15] = 42
}

type S struct {
	A int32
	B int32
}

type T4 [1<<29 + 1]S

func F4(t *T4) {
	t[1<<29].B = 42
}
                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue6055.go                                                            0100644 0000000 0000000 00000001064 13020111414 016477  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "runtime"

type Closer interface {
	Close()
}

func nilInterfaceDeferCall() {
	defer func() {
		// make sure a traceback happens with jmpdefer on the stack
		runtime.GC()
	}()
	var x Closer
	defer x.Close()
}

func shouldPanic(f func()) {
	defer func() {
		if recover() == nil {
			panic("did not panic")
		}
	}()
	f()
}

func main() {
	shouldPanic(nilInterfaceDeferCall)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue6131.go                                                            0100644 0000000 0000000 00000000564 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6131: missing typecheck after reducing
// n%1 == 0 to a constant value.

package main

func isGood(n int) bool {
	return n%1 == 0
}

func main() {
	if !isGood(256) {
		panic("!isGood")
	}
}
                                                                                                                                            usr/local/go/test/fixedbugs/issue6140.go                                                            0100644 0000000 0000000 00000000723 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6140: compiler incorrectly rejects method values
// whose receiver has an unnamed interface type.

package p

type T *interface {
	m() int
}

var x T

var _ = (*x).m

var y interface {
	m() int
}

var _ = y.m

type I interface {
	String() string
}

var z *struct{ I }
var _ = z.String
                                             usr/local/go/test/fixedbugs/issue6247.go                                                            0100644 0000000 0000000 00000000576 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6247: 5g used to be confused by the numbering
// of floating-point registers.

package main

var p map[string]interface{}
var v interface{}

func F() {
	p["hello"] = v.(complex128) * v.(complex128)
}
                                                                                                                                  usr/local/go/test/fixedbugs/issue6269.go                                                            0100644 0000000 0000000 00000001164 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 6269: name collision on method names for function local types.

package main

type foo struct{}

func (foo) Error() string {
	return "ok"
}

type bar struct{}

func (bar) Error() string {
	return "fail"
}

func unused() {
	type collision struct {
		bar
	}
	_ = collision{}
}

func main() {
	type collision struct {
		foo
	}
	s := error(collision{})
	if str := s.Error(); str != "ok" {
		println("s.Error() ==", str)
		panic(`s.Error() != "ok"`)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue6295.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016735  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue6295.dir/p0.go                                                     0100644 0000000 0000000 00000000356 13020111414 017604  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p0

type T0 interface {
	m0()
}

type S0 struct{}

func (S0) m0() {}
                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue6295.dir/p1.go                                                     0100644 0000000 0000000 00000000524 13020111414 017602  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p1

import "./p0"

type T1 interface {
	p0.T0
	m1()
}

type S1 struct {
	p0.S0
}

func (S1) m1() {}

func NewT0() p0.T0 {
	return S1{}
}

func NewT1() T1 {
	return S1{}
}
                                                                                                                                                                            usr/local/go/test/fixedbugs/issue6295.dir/p2.go                                                     0100644 0000000 0000000 00000000510 13020111414 017576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"./p0"
	"./p1"
)

var (
	_ p0.T0 = p0.S0{}
	_ p0.T0 = p1.S1{}
	_ p0.T0 = p1.NewT0()
	_ p0.T0 = p1.NewT1() // same as p1.S1{}
)

func main() {}
                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue6295.go                                                            0100644 0000000 0000000 00000000423 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6295: qualified name of unexported methods
// is corrupted during import.

package ignored
                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue6298.go                                                            0100644 0000000 0000000 00000000511 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// golang.org/issue/6298.
// Used to cause "internal error: typename ideal bool"

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	var x interface{} = "abc"[0] == 'a'
	_ = x
}
                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue6399.go                                                            0100644 0000000 0000000 00000000442 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

package main

type Foo interface {
	Print()
}

type Bar struct{}

func (b Bar) Print() {}

func main() {
	b := make([]Bar, 20)
	f := make([]Foo, 20)
	for i := range f {
		f[i] = b[i]
	}
	T(f)
	_ = make([]struct{}, 1)
}

func T(f []Foo) {
	for i := range f {
		f[i].Print()
	}
}
                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue6402.go                                                            0100644 0000000 0000000 00000000514 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6402: spurious 'use of untyped nil' error

package p

func f() uintptr {
	return nil // ERROR "cannot use nil as type uintptr in return argument"
}
                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue6403.go                                                            0100644 0000000 0000000 00000000603 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6403: fix spurious 'const initializer is not a constant' error

package p

import "syscall"

const A int = syscall.X // ERROR "undefined: syscall.X"
const B int = voidpkg.X // ERROR "undefined: voidpkg"
                                                                                                                             usr/local/go/test/fixedbugs/issue6405.go                                                            0100644 0000000 0000000 00000000511 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6405: spurious 'not enough arguments to return' error

package p

func Open() (int, error) {
	return OpenFile() // ERROR "undefined: OpenFile"
}
                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue6406.go                                                            0100644 0000000 0000000 00000000417 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	s = "bob" // ERROR "undefined.*s"
	_ = s // ERROR "undefined.*s"
}
                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6500.go                                                            0100644 0000000 0000000 00000000703 13020111414 016471  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6500: missing error when fallthrough appears in a block.

package main

func main() {
	var x int
	switch x {
	case 0:
		{
			fallthrough // ERROR "fallthrough"
		}
	case 1:
		{
			switch x {
			case 2:
				fallthrough
			case 3:
			}
		}
		fallthrough
	default:
	}
}
                                                             usr/local/go/test/fixedbugs/issue6513.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016726  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue6513.dir/a.go                                                      0100644 0000000 0000000 00000000301 13020111414 017464  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type T struct{ int }
                                                                                                                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue6513.dir/b.go                                                      0100644 0000000 0000000 00000000317 13020111414 017474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "./a"

type U struct{ a.T }
                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6513.dir/main.go                                                   0100644 0000000 0000000 00000000374 13020111414 020202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"./a"
	"./b"
)

func main() {
	var t a.T
	var u b.U
	_, _ = t, u
}
                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue6513.go                                                            0100644 0000000 0000000 00000000432 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6513: embedded builtins may get incorrect qualified
// field name during import.

package ignored
                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue6572.go                                                            0100644 0000000 0000000 00000000647 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func foo() (T, T) { // ERROR "undefined"
	return 0, 0
}

func bar() (T, string, T) { // ERROR "undefined"
	return 0, "", 0
}

func main() {
	var x, y, z int
	x, y = foo()
	x, y, z = bar() // ERROR "cannot (use type|assign) string"
}
                                                                                         usr/local/go/test/fixedbugs/issue6671.go                                                            0100644 0000000 0000000 00000002007 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6671: Logical operators should produce untyped bool for untyped operands.

package p

type mybool bool

func _(x, y int) {
	type mybool bool
	var b mybool
	_ = b
	b = bool(true)             // ERROR "cannot use"
	b = true                   // permitted as expected
	b = bool(true) && true     // ERROR "cannot use"
	b = true && true           // permitted => && returns an untyped bool
	b = x < y                  // permitted => x < y returns an untyped bool
	b = true && x < y          // permitted => result of && returns untyped bool
	b = x < y && x < y         // permitted => result of && returns untyped bool
	b = x < y || x < y         // permitted => result of || returns untyped bool
	var c bool = true && x < y // permitted => result of && is bool
	c = false || x < y         // permitted => result of || returns untyped bool
	_ = c
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue6703a.go                                                           0100644 0000000 0000000 00000000517 13020111414 016642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a function value.

package funcvalue

func fx() int {
	_ = x
	return 0
}

var x = fx // ERROR "initialization loop|depends upon itself"
                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6703b.go                                                           0100644 0000000 0000000 00000000517 13020111414 016643  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a function call.

package funccall

func fx() int {
	_ = x
	return 0
}

var x = fx() // ERROR "initialization loop|depends upon itself"
                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6703c.go                                                           0100644 0000000 0000000 00000000541 13020111414 016641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a method expression.

package methexpr

type T int

func (T) m() int {
	_ = x
	return 0
}

var x = T.m // ERROR "initialization loop|depends upon itself"
                                                                                                                                                               usr/local/go/test/fixedbugs/issue6703d.go                                                           0100644 0000000 0000000 00000000555 13020111414 016647  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a method expression call.

package methexprcall

type T int

func (T) m() int {
	_ = x
	return 0
}

var x = T.m(0) // ERROR "initialization loop|depends upon itself"
                                                                                                                                                   usr/local/go/test/fixedbugs/issue6703e.go                                                           0100644 0000000 0000000 00000000570 13020111414 016645  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method value of a value literal.

package litmethvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

var x = T(0).m // ERROR "initialization loop|depends upon itself"
                                                                                                                                        usr/local/go/test/fixedbugs/issue6703f.go                                                           0100644 0000000 0000000 00000000570 13020111414 016646  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method call of a value literal.

package litmethcall

type T int

func (T) m() int {
	_ = x
	return 0
}

var x = T(0).m() // ERROR "initialization loop|depends upon itself"
                                                                                                                                        usr/local/go/test/fixedbugs/issue6703g.go                                                           0100644 0000000 0000000 00000000605 13020111414 016646  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in an embedded method expression.

package embedmethexpr

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var x = E.m // ERROR "initialization loop|depends upon itself" 
                                                                                                                           usr/local/go/test/fixedbugs/issue6703h.go                                                           0100644 0000000 0000000 00000000631 13020111414 016646  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles when calling an embedded method expression.

package embedmethexprcall

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var x = E.m(E{0}) // ERROR "initialization loop|depends upon itself" 
                                                                                                       usr/local/go/test/fixedbugs/issue6703i.go                                                           0100644 0000000 0000000 00000000627 13020111414 016654  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in an embedded struct literal's method value.

package embedlitmethvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var x = E{}.m // ERROR "initialization loop|depends upon itself" 
                                                                                                         usr/local/go/test/fixedbugs/issue6703j.go                                                           0100644 0000000 0000000 00000000626 13020111414 016654  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in an embedded struct literal's method call.

package embedlitmethcall

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var x = E{}.m() // ERROR "initialization loop|depends upon itself"
                                                                                                          usr/local/go/test/fixedbugs/issue6703k.go                                                           0100644 0000000 0000000 00000000547 13020111414 016657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a method value.

package methvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

var (
	t T
	x = t.m // ERROR "initialization loop|depends upon itself"
)
                                                                                                                                                         usr/local/go/test/fixedbugs/issue6703l.go                                                           0100644 0000000 0000000 00000000547 13020111414 016660  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a method call.

package methcall

type T int

func (T) m() int {
	_ = x
	return 0
}

var (
	t T
	x = t.m() // ERROR "initialization loop|depends upon itself"
)
                                                                                                                                                         usr/local/go/test/fixedbugs/issue6703m.go                                                           0100644 0000000 0000000 00000000665 13020111414 016662  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method value of a value returned from a function call.

package funcmethvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

func f() T {
	return T(0)
}

var (
	t T
	x = f().m // ERROR "initialization loop|depends upon itself"
)
                                                                           usr/local/go/test/fixedbugs/issue6703n.go                                                           0100644 0000000 0000000 00000000665 13020111414 016663  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method call of a value returned from a function call.

package funcmethcall

type T int

func (T) m() int {
	_ = x
	return 0
}

func f() T {
	return T(0)
}

var (
	t T
	x = f().m() // ERROR "initialization loop|depends upon itself"
)
                                                                           usr/local/go/test/fixedbugs/issue6703o.go                                                           0100644 0000000 0000000 00000000624 13020111414 016657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in an embedded struct's method value.

package embedmethvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var (
	e E
	x = e.m // ERROR "initialization loop|depends upon itself" 
)
                                                                                                            usr/local/go/test/fixedbugs/issue6703p.go                                                           0100644 0000000 0000000 00000000624 13020111414 016660  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in an embedded struct's method call.

package embedmethcall

type T int

func (T) m() int {
	_ = x
	return 0
}

type E struct{ T }

var (
	e E
	x = e.m() // ERROR "initialization loop|depends upon itself" 
)
                                                                                                            usr/local/go/test/fixedbugs/issue6703q.go                                                           0100644 0000000 0000000 00000000735 13020111414 016664  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method value of an embedded struct returned
// from a function call.

package funcembedmethvalue

type T int

func (T) m() int {
	_ = x
	return 0
}

func g() E {
	return E{0}
}

type E struct{ T }

var (
	e E
	x = g().m // ERROR "initialization loop|depends upon itself" 
)
                                   usr/local/go/test/fixedbugs/issue6703r.go                                                           0100644 0000000 0000000 00000000735 13020111414 016665  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method call of an embedded struct returned
// from a function call.

package funcembedmethcall

type T int

func (T) m() int {
	_ = x
	return 0
}

func g() E {
	return E{0}
}

type E struct{ T }

var (
	e E
	x = g().m() // ERROR "initialization loop|depends upon itself" 
)
                                   usr/local/go/test/fixedbugs/issue6703s.go                                                           0100644 0000000 0000000 00000000562 13020111414 016664  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a pointer method expression.

package ptrmethexpr

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var x = (*T).pm // ERROR "initialization loop|depends upon itself"
                                                                                                                                              usr/local/go/test/fixedbugs/issue6703t.go                                                           0100644 0000000 0000000 00000000607 13020111414 016665  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the call of a pointer method expression.

package ptrmethexprcall

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var x = (*T).pm(nil) // ERROR "initialization loop|depends upon itself"
                                                                                                                         usr/local/go/test/fixedbugs/issue6703u.go                                                           0100644 0000000 0000000 00000000600 13020111414 016657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a pointer literal's method value.

package ptrlitmethvalue

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var x = (*T)(nil).pm // ERROR "initialization loop|depends upon itself"
                                                                                                                                usr/local/go/test/fixedbugs/issue6703v.go                                                           0100644 0000000 0000000 00000000600 13020111414 016660  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a pointer literal's method call.

package ptrlitmethcall

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var x = (*T)(nil).pm() // ERROR "initialization loop|depends upon itself"
                                                                                                                                usr/local/go/test/fixedbugs/issue6703w.go                                                           0100644 0000000 0000000 00000000576 13020111414 016675  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a pointer value's method value.

package ptrmethvalue

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var (
	p *T
	x = p.pm // ERROR "initialization loop|depends upon itself"
)
                                                                                                                                  usr/local/go/test/fixedbugs/issue6703x.go                                                           0100644 0000000 0000000 00000000576 13020111414 016676  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in a pointer value's method call.

package ptrmethcall

type T int

func (*T) pm() int {
	_ = x
	return 0
}

var (
	p *T
	x = p.pm() // ERROR "initialization loop|depends upon itself"
)
                                                                                                                                  usr/local/go/test/fixedbugs/issue6703y.go                                                           0100644 0000000 0000000 00000000677 13020111414 016701  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method value of a pointer value returned
// from a function call.

package funcptrmethvalue

type T int

func (*T) pm() int {
	_ = x
	return 0
}

func pf() *T {
	return nil
}

var x = pf().pm // ERROR "initialization loop|depends upon itself" 
                                                                 usr/local/go/test/fixedbugs/issue6703z.go                                                           0100644 0000000 0000000 00000000677 13020111414 016702  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Check for cycles in the method call of a pointer value returned
// from a function call.

package funcptrmethcall

type T int

func (*T) pm() int {
	_ = x
	return 0
}

func pf() *T {
	return nil
}

var x = pf().pm() // ERROR "initialization loop|depends upon itself" 
                                                                 usr/local/go/test/fixedbugs/issue6789.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016745  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue6789.dir/a.go                                                      0100644 0000000 0000000 00000000416 13020111414 017512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

type unexported struct {
        a int
        b bool
}

type Struct struct {
        unexported
}
                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue6789.dir/b.go                                                      0100644 0000000 0000000 00000000335 13020111414 017513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "./a"

type s a.Struct

func main() {
}
                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue6789.go                                                            0100644 0000000 0000000 00000000456 13020111414 016521  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6789: gccgo failed to find the hash function for an
// unexported struct embedded in an exported struct.

package ignored
                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue6847.go                                                            0100644 0000000 0000000 00000002257 13020111414 016515  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6847: select clauses involving implicit conversion
// of channels trigger a spurious typechecking error during walk.

package p

type I1 interface {
	String()
}
type I2 interface {
	String()
}

func F() {
	var (
		cr <-chan int
		cs chan<- int
		c  chan int

		ccr chan (<-chan int)
		ccs chan chan<- int
		cc  chan chan int

		ok bool
	)
	// Send cases.
	select {
	case ccr <- cr:
	case ccr <- c:
	}
	select {
	case ccs <- cs:
	case ccs <- c:
	}
	select {
	case ccr <- c:
	default:
	}
	// Receive cases.
	select {
	case cr = <-cc:
	case cs = <-cc:
	case c = <-cc:
	}
	select {
	case cr = <-cc:
	default:
	}
	select {
	case cr, ok = <-cc:
	case cs, ok = <-cc:
	case c = <-cc:
	}
      // Interfaces.
	var (
		c1 chan I1
		c2 chan I2
		x1 I1
		x2 I2
	)
	select {
	case c1 <- x1:
	case c1 <- x2:
	case c2 <- x1:
	case c2 <- x2:
	}
	select {
	case x1 = <-c1:
	case x1 = <-c2:
	case x2 = <-c1:
	case x2 = <-c2:
	}
	select {
	case x1, ok = <-c1:
	case x1, ok = <-c2:
	case x2, ok = <-c1:
	case x2, ok = <-c2:
	}
	_ = ok
}
                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6866.go                                                            0100644 0000000 0000000 00000002754 13020111414 016520  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// WARNING: GENERATED FILE - DO NOT MODIFY MANUALLY!
// (To generate, in go/types directory: go test -run=Hilbert -H=2 -out="h2.src")

// This program tests arbitrary precision constant arithmetic
// by generating the constant elements of a Hilbert matrix H,
// its inverse I, and the product P = H*I. The product should
// be the identity matrix.
package main

func main() {
	if !ok {
		print()
		return
	}
}

// Hilbert matrix, n = 2
const (
	h0_0, h0_1 = 1.0 / (iota + 1), 1.0 / (iota + 2)
	h1_0, h1_1
)

// Inverse Hilbert matrix
const (
	i0_0 = +1 * b2_1 * b2_1 * b0_0 * b0_0
	i0_1 = -2 * b2_0 * b3_1 * b1_0 * b1_0

	i1_0 = -2 * b3_1 * b2_0 * b1_1 * b1_1
	i1_1 = +3 * b3_0 * b3_0 * b2_1 * b2_1
)

// Product matrix
const (
	p0_0 = h0_0*i0_0 + h0_1*i1_0
	p0_1 = h0_0*i0_1 + h0_1*i1_1

	p1_0 = h1_0*i0_0 + h1_1*i1_0
	p1_1 = h1_0*i0_1 + h1_1*i1_1
)

// Verify that product is identity matrix
const ok = p0_0 == 1 && p0_1 == 0 &&
	p1_0 == 0 && p1_1 == 1 &&
	true

func print() {
	println(p0_0, p0_1)
	println(p1_0, p1_1)
}

// Binomials
const (
	b0_0 = f0 / (f0 * f0)

	b1_0 = f1 / (f0 * f1)
	b1_1 = f1 / (f1 * f0)

	b2_0 = f2 / (f0 * f2)
	b2_1 = f2 / (f1 * f1)
	b2_2 = f2 / (f2 * f0)

	b3_0 = f3 / (f0 * f3)
	b3_1 = f3 / (f1 * f2)
	b3_2 = f3 / (f2 * f1)
	b3_3 = f3 / (f3 * f0)
)

// Factorials
const (
	f0 = 1
	f1 = 1
	f2 = f1 * 2
	f3 = f2 * 3
)
                    usr/local/go/test/fixedbugs/issue6889.go                                                            0100644 0000000 0000000 00000003453 13020111414 016522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6889: confusing error message: ovf in mpaddxx

package main

const (
	f1  = 1
	f2  = f1 * 2
	f3  = f2 * 3
	f4  = f3 * 4
	f5  = f4 * 5
	f6  = f5 * 6
	f7  = f6 * 7
	f8  = f7 * 8
	f9  = f8 * 9
	f10 = f9 * 10
	f11 = f10 * 11
	f12 = f11 * 12
	f13 = f12 * 13
	f14 = f13 * 14
	f15 = f14 * 15
	f16 = f15 * 16
	f17 = f16 * 17
	f18 = f17 * 18
	f19 = f18 * 19
	f20 = f19 * 20
	f21 = f20 * 21
	f22 = f21 * 22
	f23 = f22 * 23
	f24 = f23 * 24
	f25 = f24 * 25
	f26 = f25 * 26
	f27 = f26 * 27
	f28 = f27 * 28
	f29 = f28 * 29
	f30 = f29 * 30
	f31 = f30 * 31
	f32 = f31 * 32
	f33 = f32 * 33
	f34 = f33 * 34
	f35 = f34 * 35
	f36 = f35 * 36
	f37 = f36 * 37
	f38 = f37 * 38
	f39 = f38 * 39
	f40 = f39 * 40
	f41 = f40 * 41
	f42 = f41 * 42
	f43 = f42 * 43
	f44 = f43 * 44
	f45 = f44 * 45
	f46 = f45 * 46
	f47 = f46 * 47
	f48 = f47 * 48
	f49 = f48 * 49
	f50 = f49 * 50
	f51 = f50 * 51
	f52 = f51 * 52
	f53 = f52 * 53
	f54 = f53 * 54
	f55 = f54 * 55
	f56 = f55 * 56
	f57 = f56 * 57
	f58 = f57 * 58
	f59 = f58 * 59
	f60 = f59 * 60
	f61 = f60 * 61
	f62 = f61 * 62
	f63 = f62 * 63
	f64 = f63 * 64
	f65 = f64 * 65
	f66 = f65 * 66
	f67 = f66 * 67
	f68 = f67 * 68
	f69 = f68 * 69
	f70 = f69 * 70
	f71 = f70 * 71
	f72 = f71 * 72
	f73 = f72 * 73
	f74 = f73 * 74
	f75 = f74 * 75
	f76 = f75 * 76
	f77 = f76 * 77
	f78 = f77 * 78
	f79 = f78 * 79
	f80 = f79 * 80
	f81 = f80 * 81
	f82 = f81 * 82
	f83 = f82 * 83
	f84 = f83 * 84
	f85 = f84 * 85
	f86 = f85 * 86
	f87 = f86 * 87
	f88 = f87 * 88
	f89 = f88 * 89
	f90 = f89 * 90
	f91 = f90 * 91
	f92 = f91 * 92
	f93 = f92 * 93
	f94 = f93 * 94
	f95 = f94 * 95
	f96 = f95 * 96
	f97 = f96 * 97
	f98 = f97 * 98
	f99 = f98 * 99 // ERROR "overflow"
)
                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue6899.go                                                            0100644 0000000 0000000 00000000370 13020111414 016516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // cmpout

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "math"

func main() {
	println(math.Copysign(0, -1))
}
                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue6899.out                                                           0100644 0000000 0000000 00000000017 13020111414 016716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        -0.000000e+000
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue6902.go                                                            0100644 0000000 0000000 00000000515 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 6902: confusing printing of large floating point constants

package main

import (
	"os"
)

var x = -1e-10000

func main() {
	if x != 0 {
		os.Exit(1)
	}
}
                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue6964.go                                                            0100644 0000000 0000000 00000000373 13020111414 016512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2013 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	_ = string(-4 + 2i + 2) // ERROR "-4 \+ 2i"
}
                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue7023.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016723  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue7023.dir/a.go                                                      0100644 0000000 0000000 00000000311 13020111414 017462  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

func Foo() {
	goto bar
bar:
}
                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue7023.dir/b.go                                                      0100644 0000000 0000000 00000000314 13020111414 017466  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import (
	"./a"
)

var f = a.Foo
                                                                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue7023.go                                                            0100644 0000000 0000000 00000000422 13020111414 016470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7023: corrupted export data when an inlined function
// contains a goto.

package ignored
                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue7044.go                                                            0100644 0000000 0000000 00000004277 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7044: bad AMOVFD and AMOVDF assembly generation on
// arm for registers above 7.

package main

import (
	"fmt"
	"reflect"
)

func f() [16]float32 {
	f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15 :=
		float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1), float32(1)
	// Use all 16 registers to do float32 --> float64 conversion.
	d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15 :=
		float64(f0), float64(f1), float64(f2), float64(f3), float64(f4), float64(f5), float64(f6), float64(f7), float64(f8), float64(f9), float64(f10), float64(f11), float64(f12), float64(f13), float64(f14), float64(f15)
	// Use all 16 registers to do float64 --> float32 conversion.
	g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g15 :=
		float32(d0), float32(d1), float32(d2), float32(d3), float32(d4), float32(d5), float32(d6), float32(d7), float32(d8), float32(d9), float32(d10), float32(d11), float32(d12), float32(d13), float32(d14), float32(d15)
	// Force another conversion, so that the previous conversion doesn't
	// get optimized away into constructing the returned array. With current
	// optimizations, constructing the returned array uses only
	// a single register.
	e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15 :=
		float64(g0), float64(g1), float64(g2), float64(g3), float64(g4), float64(g5), float64(g6), float64(g7), float64(g8), float64(g9), float64(g10), float64(g11), float64(g12), float64(g13), float64(g14), float64(g15)
	return [16]float32{
		float32(e0), float32(e1), float32(e2), float32(e3), float32(e4), float32(e5), float32(e6), float32(e7), float32(e8), float32(e9), float32(e10), float32(e11), float32(e12), float32(e13), float32(e14), float32(e15),
	}
}

func main() {
	want := [16]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	got := f()
	if !reflect.DeepEqual(got, want) {
		fmt.Printf("f() = %#v; want %#v\n", got, want)
	}
}
                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue7050.go                                                            0100644 0000000 0000000 00000000512 13020111414 016470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
)

func main() {
	_, err := os.Stdout.Write(nil)
	if err != nil {
		fmt.Printf("BUG: os.Stdout.Write(nil) = %v\n", err)
	}
}
                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue7083.go                                                            0100644 0000000 0000000 00000000457 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

package main

import "runtime/debug"

func f(m map[int]*string, i int) {
	s := ""
	m[i] = &s
}

func main() {
	debug.SetGCPercent(0)
	m := map[int]*string{}
	for i := 0; i < 40; i++ {
		f(m, i)
		if len(*m[i]) != 0 {
			println("bad length", i, m[i], len(*m[i]))
			panic("bad length")
		}
	}
}
                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue7129.go                                                            0100644 0000000 0000000 00000000742 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7129: inconsistent "wrong arg type" error for multivalued g in f(g())

package main

func f(int) {}

func g() bool { return true }

func h(int, int) {}

func main() {
	f(g())        // ERROR "in argument to f"
	f(true)       // ERROR "in argument to f"
	h(true, true) // ERROR "in argument to h"
}
                              usr/local/go/test/fixedbugs/issue7150.go                                                            0100644 0000000 0000000 00000001215 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 7150: array index out of bounds error off by one

package main

func main() {
	_ = [0]int{-1: 50}              // ERROR "index must be non-negative integer constant"
	_ = [0]int{0: 0}                // ERROR "index 0 out of bounds \[0:0\]"
	_ = [0]int{5: 25}               // ERROR "index 5 out of bounds \[0:0\]"
	_ = [10]int{2: 10, 15: 30}      // ERROR "index 15 out of bounds \[0:10\]"
	_ = [10]int{5: 5, 1: 1, 12: 12} // ERROR "index 12 out of bounds \[0:10\]"
}
                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue7153.go                                                            0100644 0000000 0000000 00000000603 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7153: array invalid index error duplicated on successive bad values

package p

var _ = []int{a: true, true} // ERROR "undefined: a" "cannot use true \(type bool\) as type int in array or slice literal"
                                                                                                                             usr/local/go/test/fixedbugs/issue7214.go                                                            0100644 0000000 0000000 00000001461 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7214: No duplicate key error for maps with interface{} key type

package p

var _ = map[interface{}]int{2: 1, 2: 1} // ERROR "duplicate key"
var _ = map[interface{}]int{int(2): 1, int16(2): 1}
var _ = map[interface{}]int{int16(2): 1, int16(2): 1} // ERROR "duplicate key"

type S string

var _ = map[interface{}]int{"a": 1, "a": 1} // ERROR "duplicate key"
var _ = map[interface{}]int{"a": 1, S("a"): 1}
var _ = map[interface{}]int{S("a"): 1, S("a"): 1} // ERROR "duplicate key"

type I interface {
	f()
}

type N int

func (N) f() {}

var _ = map[I]int{N(0): 1, N(2): 1}
var _ = map[I]int{N(2): 1, N(2): 1} // ERROR "duplicate key"
                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue7223.go                                                            0100644 0000000 0000000 00000001071 13020111414 016473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var bits1 uint = 10
const bits2 uint = 10

func main() {
	_ = make([]byte, 1<<bits1)
	_ = make([]byte, 1<<bits2)
	_ = make([]byte, nil) // ERROR "non-integer.*len"
	_ = make([]byte, nil, 2) // ERROR "non-integer.*len"
	_ = make([]byte, 1, nil) // ERROR "non-integer.*cap"
	_ = make([]byte, true) // ERROR "non-integer.*len"
	_ = make([]byte, "abc") // ERROR "non-integer.*len"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue7272.go                                                            0100644 0000000 0000000 00000001374 13020111414 016505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2012 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7272: test builtin functions in statement context and in
// go/defer functions.

package p

func F() {
	var a []int
	var c chan int
	var m map[int]int

	close(c)
	copy(a, a)
	delete(m, 0)
	panic(0)
	print("foo")
	println("bar")
	recover()

	(close(c))
	(copy(a, a))
	(delete(m, 0))
	(panic(0))
	(print("foo"))
	(println("bar"))
	(recover())

	go close(c)
	go copy(a, a)
	go delete(m, 0)
	go panic(0)
	go print("foo")
	go println("bar")
	go recover()

	defer close(c)
	defer copy(a, a)
	defer delete(m, 0)
	defer panic(0)
	defer print("foo")
	defer println("bar")
	defer recover()
}
                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue7310.go                                                            0100644 0000000 0000000 00000000711 13020111414 016470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Internal compiler crash used to stop errors during second copy.

package main

func main() {
	_ = copy(nil, []int{}) // ERROR "use of untyped nil"
	_ = copy([]int{}, nil) // ERROR "use of untyped nil"
	_ = 1+true // ERROR "cannot convert true" "mismatched types int and bool"
}
                                                       usr/local/go/test/fixedbugs/issue7316.go                                                            0100644 0000000 0000000 00000001412 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7316
// This test exercises all types of numeric conversions, which was one
// of the sources of etype mismatch during register allocation in 8g.

package main

import "fmt"

const tpl = `
func init() {
	var i %s
	j := %s(i)
	_ = %s(j)
}
`

func main() {
	fmt.Println("package main")
	ntypes := []string{
		"byte", "rune", "uintptr",
		"float32", "float64",
		"int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
	}
	for i, from := range ntypes {
		for _, to := range ntypes[i:] {
			fmt.Printf(tpl, from, to, from)
		}
	}
	fmt.Println("func main() {}")
}
                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue7346.go                                                            0100644 0000000 0000000 00000000460 13020111414 016502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 7346 : internal error "doasm" error due to checknil
// of a nil literal.

package main

func main() {
	_ = *(*int)(nil)
}
                                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue7366.go                                                            0100644 0000000 0000000 00000000554 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 7366: generates a temporary with ideal type
// during comparison of small structs.

package main

type T struct {
	data [10]byte
}

func main() {
	var a T
	var b T
	if a == b {
	}
}
                                                                                                                                                    usr/local/go/test/fixedbugs/issue7405.go                                                            0100644 0000000 0000000 00000001176 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7405: the equality function for struct with many
// embedded fields became more complex after fixing issue 7366,
// leading to out of registers on 386.

package p

type T1 struct {
	T2
	T3
	T4
}

type T2 struct {
	Conn
}

type T3 struct {
	PacketConn
}

type T4 struct {
	PacketConn
	T5
}

type T5 struct {
	x int
	T6
}

type T6 struct {
	y, z int
}

type Conn interface {
	A()
}

type PacketConn interface {
	B()
}

func F(a, b T1) bool {
	return a == b
}
                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue7419.go                                                            0100644 0000000 0000000 00000000572 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7419: odd behavior for float constants underflowing to 0

package main

import (
	"os"
)

var x = 1e-779137
var y = 1e-779138

func main() {
	if x != 0 {
		os.Exit(1)
	}
	if y != 0 {
		os.Exit(2)
	}
}
                                                                                                                                      usr/local/go/test/fixedbugs/issue7525.go                                                            0100644 0000000 0000000 00000001112 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7525: self-referential array types.

package main

import "unsafe"

var x struct {
	a [unsafe.Sizeof(x.a)]int // ERROR "array bound|typechecking loop|invalid expression"
	b [unsafe.Offsetof(x.b)]int // ERROR "array bound"
	c [unsafe.Alignof(x.c)]int // ERROR "array bound|invalid expression"
	d [len(x.d)]int // ERROR "array bound|invalid array"
	e [cap(x.e)]int // ERROR "array bound|invalid array"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue7538a.go                                                           0100644 0000000 0000000 00000000441 13020111414 016645  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7538: blank (_) labels handled incorrectly

package p

func f() {
_:
_:
	goto _ // ERROR "not defined"
}
                                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue7538b.go                                                           0100644 0000000 0000000 00000000374 13020111414 016653  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7538: blank (_) labels handled incorrectly

package p

func f() {
_:
}
                                                                                                                                                                                                                                                                    usr/local/go/test/fixedbugs/issue7547.go                                                            0100644 0000000 0000000 00000000461 13020111414 016506  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func f() map[string]interface{} {
	var p *map[string]map[string]interface{}
	_ = p
	return nil
}

func main() {
	f()
}
                                                                                                                                                                                                               usr/local/go/test/fixedbugs/issue7550.go                                                            0100644 0000000 0000000 00000001047 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func shouldPanic(f func()) {
        defer func() {
                if recover() == nil {
                        panic("not panicking")
                }
        }()
        f()
}

func f() {
        length := int(^uint(0) >> 1)
        a := make([]struct{}, length)
        b := make([]struct{}, length)
        _ = append(a, b...)
}

func main() {
	shouldPanic(f)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue7590.go                                                            0100644 0000000 0000000 00000000536 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7590: gccgo incorrectly traverses nested composite literals.

package p

type S struct {
	F int
}

var M = map[string]S{
	"a": { F: 1 },
}

var P = M["a"]

var F = P.F
                                                                                                                                                                  usr/local/go/test/fixedbugs/issue7648.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016740  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue7648.dir/a.go                                                      0100644 0000000 0000000 00000000423 13020111414 017503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

const (
	sinPi4 = 0.70710678118654752440084436210484903928483593768847
	A = complex(sinPi4, -sinPi4)
)

                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue7648.dir/b.go                                                      0100644 0000000 0000000 00000000322 13020111414 017502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "a"

func f() {
	println(a.A)
}
                                                                                                                                                                                                                                                                                                              usr/local/go/test/fixedbugs/issue7648.go                                                            0100644 0000000 0000000 00000000406 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7648: spurious "bad negated constant" for complex constants.

package ignored
                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue7675.go                                                            0100644 0000000 0000000 00000001264 13020111414 016512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7675: fewer errors for wrong argument count

package p

func f(string, int, float64, string)

func g(string, int, float64, ...string)

func main() {
	f(1, 0.5, "hello") // ERROR "not enough arguments"
	f("1", 2, 3.1, "4")
	f(1, 0.5, "hello", 4, 5) // ERROR "too many arguments"
	g(1, 0.5)                // ERROR "not enough arguments"
	g("1", 2, 3.1)
	g(1, 0.5, []int{3, 4}...) // ERROR "not enough arguments"
	g("1", 2, 3.1, "4", "5")
	g(1, 0.5, "hello", 4, []int{5, 6}...) // ERROR "too many arguments"
}
                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue7690.go                                                            0100644 0000000 0000000 00000002331 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 7690 - Stack and other routines did not back up initial PC
// into CALL instruction, instead reporting line number of next instruction,
// which might be on a different line.

package main

import (
	"bytes"
	"regexp"
	"runtime"
	"strconv"
)

func main() {
	buf1 := make([]byte, 1000)
	buf2 := make([]byte, 1000)

	runtime.Stack(buf1, false)      // CALL is last instruction on this line
	n := runtime.Stack(buf2, false) // CALL is followed by load of result from stack

	buf1 = buf1[:bytes.IndexByte(buf1, 0)]
	buf2 = buf2[:n]

	re := regexp.MustCompile(`(?m)^main\.main\(\)\n.*/issue7690.go:([0-9]+)`)
	m1 := re.FindStringSubmatch(string(buf1))
	if m1 == nil {
		println("BUG: cannot find main.main in first trace")
		return
	}
	m2 := re.FindStringSubmatch(string(buf2))
	if m2 == nil {
		println("BUG: cannot find main.main in second trace")
		return
	}

	n1, _ := strconv.Atoi(m1[1])
	n2, _ := strconv.Atoi(m2[1])
	if n1+1 != n2 {
		println("BUG: expect runtime.Stack on back to back lines, have", n1, n2)
		println(string(buf1))
		println(string(buf2))
	}
}
                                                                                                                                                                                                                                                                                                       usr/local/go/test/fixedbugs/issue7740.go                                                            0100644 0000000 0000000 00000001253 13020111414 016501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This test computes the precision of the compiler's internal multiprecision floats.

package main

import (
	"fmt"
	"math"
	"runtime"
)

const ulp = (1.0 + (2.0 / 3.0)) - (5.0 / 3.0)

func main() {
	// adjust precision depending on compiler
	var prec float64
	switch runtime.Compiler {
	case "gc":
		prec = 512
	case "gccgo":
		prec = 256
	default:
		// unknown compiler
		return
	}
	p := 1 - math.Log(math.Abs(ulp))/math.Log(2)
	if math.Abs(p-prec) > 1e-10 {
		fmt.Printf("BUG: got %g; want %g\n", p, prec)
	}
}
                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue7742.go                                                            0100644 0000000 0000000 00000000552 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7742: cannot use &autotmp_0001 (type *map[string]string) as type *string in function argument

package main

var (
	m map[string]string
	v string
)

func main() {
	m[v], _ = v, v
}
                                                                                                                                                      usr/local/go/test/fixedbugs/issue7746.go                                                            0100644 0000000 0000000 00000004535 13020111414 016515  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

const (
	c0   = 1 << 100
	c1   = c0 * c0
	c2   = c1 * c1
	c3   = c2 * c2 // ERROR "overflow"
	c4   = c3 * c3
	c5   = c4 * c4
	c6   = c5 * c5
	c7   = c6 * c6
	c8   = c7 * c7
	c9   = c8 * c8
	c10  = c9 * c9
	c11  = c10 * c10
	c12  = c11 * c11
	c13  = c12 * c12
	c14  = c13 * c13
	c15  = c14 * c14
	c16  = c15 * c15
	c17  = c16 * c16
	c18  = c17 * c17
	c19  = c18 * c18
	c20  = c19 * c19
	c21  = c20 * c20
	c22  = c21 * c21
	c23  = c22 * c22
	c24  = c23 * c23
	c25  = c24 * c24
	c26  = c25 * c25
	c27  = c26 * c26
	c28  = c27 * c27
	c29  = c28 * c28
	c30  = c29 * c29
	c31  = c30 * c30
	c32  = c31 * c31
	c33  = c32 * c32
	c34  = c33 * c33
	c35  = c34 * c34
	c36  = c35 * c35
	c37  = c36 * c36
	c38  = c37 * c37
	c39  = c38 * c38
	c40  = c39 * c39
	c41  = c40 * c40
	c42  = c41 * c41
	c43  = c42 * c42
	c44  = c43 * c43
	c45  = c44 * c44
	c46  = c45 * c45
	c47  = c46 * c46
	c48  = c47 * c47
	c49  = c48 * c48
	c50  = c49 * c49
	c51  = c50 * c50
	c52  = c51 * c51
	c53  = c52 * c52
	c54  = c53 * c53
	c55  = c54 * c54
	c56  = c55 * c55
	c57  = c56 * c56
	c58  = c57 * c57
	c59  = c58 * c58
	c60  = c59 * c59
	c61  = c60 * c60
	c62  = c61 * c61
	c63  = c62 * c62
	c64  = c63 * c63
	c65  = c64 * c64
	c66  = c65 * c65
	c67  = c66 * c66
	c68  = c67 * c67
	c69  = c68 * c68
	c70  = c69 * c69
	c71  = c70 * c70
	c72  = c71 * c71
	c73  = c72 * c72
	c74  = c73 * c73
	c75  = c74 * c74
	c76  = c75 * c75
	c77  = c76 * c76
	c78  = c77 * c77
	c79  = c78 * c78
	c80  = c79 * c79
	c81  = c80 * c80
	c82  = c81 * c81
	c83  = c82 * c82
	c84  = c83 * c83
	c85  = c84 * c84
	c86  = c85 * c85
	c87  = c86 * c86
	c88  = c87 * c87
	c89  = c88 * c88
	c90  = c89 * c89
	c91  = c90 * c90
	c92  = c91 * c91
	c93  = c92 * c92
	c94  = c93 * c93
	c95  = c94 * c94
	c96  = c95 * c95
	c97  = c96 * c96
	c98  = c97 * c97
	c99  = c98 * c98
	c100 = c99 * c99
)

func main() {
	println(c1 / c1)
	println(c2 / c2)
	println(c3 / c3)
	println(c4 / c4)
	println(c5 / c5)
	println(c6 / c6)
	println(c7 / c7)
	println(c8 / c8)
	println(c9 / c9)
	println(c10 / c10)
	println(c20 / c20)
	println(c30 / c30)
	println(c40 / c40)
	println(c50 / c50)
	println(c60 / c60)
	println(c70 / c70)
	println(c80 / c80)
	println(c90 / c90)
	println(c100 / c100)
}
                                                                                                                                                                   usr/local/go/test/fixedbugs/issue7760.go                                                            0100644 0000000 0000000 00000001500 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // errorcheck

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Verify that pointers can't be used as constants.

package main

import "unsafe"

type myPointer unsafe.Pointer

const _ = unsafe.Pointer(uintptr(1)) // ERROR "is not (a )?constant"
const _ = myPointer(uintptr(1)) // ERROR "is not (a )?constant"

const _ = (*int)(unsafe.Pointer(uintptr(1))) // ERROR "is not (a )?constant"
const _ = (*int)(myPointer(uintptr(1))) // ERROR "is not (a )?constant"

const _ = uintptr(unsafe.Pointer(uintptr(1))) // ERROR "is not (a )?constant"
const _ = uintptr(myPointer(uintptr(1))) // ERROR "is not (a )?constant"

const _ = []byte("") // ERROR "is not (a )?constant"
const _ = []rune("") // ERROR "is not (a )?constant"
                                                                                                                                                                                                usr/local/go/test/fixedbugs/issue7794.go                                                            0100644 0000000 0000000 00000000355 13020111414 016514  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	var a [10]int
	const ca = len(a)
}
                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue7863.go                                                            0100644 0000000 0000000 00000001427 13020111414 016512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
)

type Foo int64

func (f *Foo) F() int64 {
	return int64(*f)
}

type Bar int64

func (b Bar) F() int64 {
	return int64(b)
}

type Baz int32

func (b Baz) F() int64 {
	return int64(b)
}

func main() {
	foo := Foo(123)
	f := foo.F
	if foo.F() != f() {
		bug()
		fmt.Println("foo.F", foo.F(), f())
	}
	bar := Bar(123)
	f = bar.F
	if bar.F() != f() {
		bug()
		fmt.Println("bar.F", bar.F(), f()) // duh!
	}

	baz := Baz(123)
	f = baz.F
	if baz.F() != f() {
		bug()
		fmt.Println("baz.F", baz.F(), f())
	}
}

var bugged bool

func bug() {
	if !bugged {
		bugged = true
		fmt.Println("BUG")
	}
}
                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue7867.go                                                            0100644 0000000 0000000 00000001472 13020111414 016516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // runoutput

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7867.

package main

import "fmt"

const tpl = `
func Test%d(t %s) {
	_ = t
	_ = t
}
`

func main() {
	fmt.Println("package main")
	types := []string{
		// These types always passed
		"bool", "int", "rune",
		"*int", "uintptr",
		"float32", "float64",
		"chan struct{}",
		"map[string]struct{}",
		"func()", "func(string)error",

		// These types caused compilation failures
		"complex64", "complex128",
		"struct{}", "struct{n int}", "struct{e error}", "struct{m map[string]string}",
		"string",
		"[4]byte",
		"[]byte",
		"interface{}", "error",
	}
	for i, typ := range types {
		fmt.Printf(tpl, i, typ)
	}
	fmt.Println("func main() {}")
}
                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue7884.go                                                            0100644 0000000 0000000 00000000444 13020111414 016513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import "fmt"

func main() {
	var ii interface{} = 5
	zz, err := ii.(interface{})
	fmt.Println(zz, err)
}
                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue7944.go                                                            0100644 0000000 0000000 00000001057 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7944:
// Liveness bitmaps said b was live at call to g,
// but no one told the register optimizer.

package main

import "runtime"

func f(b []byte) {
	for len(b) > 0 {
		n := len(b)
		n = f1(n)
		f2(b[n:])
		b = b[n:]
	}
	g()
}

func f1(n int) int {
	runtime.GC()
	return n
}

func f2(b []byte) {
	runtime.GC()
}

func g() {
	runtime.GC()
}

func main() {
	f(make([]byte, 100))
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue7995.go                                                            0100644 0000000 0000000 00000000574 13020111414 016522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7995: globals not flushed quickly enough.

package main

import "fmt"

var (
	p = 1
	q = &p
)

func main() {
	p = 50
	*q = 100
	s := fmt.Sprintln(p, *q)
	if s != "100 100\n" {
		println("BUG:", s)
	}
}
                                                                                                                                    usr/local/go/test/fixedbugs/issue7995b.dir/                                                         0040755 0000000 0000000 00000000000 13020111414 017107  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue7995b.dir/x1.go                                                    0100644 0000000 0000000 00000000173 13020111414 017764  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package x1

import "fmt"

var P int

//go:noinline
func F(x *int) string {
	P = 50
	*x = 100
	return fmt.Sprintln(P, *x)
}
                                                                                                                                                                                                                                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue7995b.dir/x2.go                                                    0100644 0000000 0000000 00000000156 13020111414 017766  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package main

import "./x1"

func main() {
	s := x1.F(&x1.P)
	if s != "100 100\n" {
		println("BUG:", s)
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/go/test/fixedbugs/issue7995b.go                                                           0100644 0000000 0000000 00000000357 13020111414 016663  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // rundir

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 7995: globals not flushed quickly enough.

package ignored
                                                                                                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue7996.go                                                            0100644 0000000 0000000 00000000465 13020111414 016522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// /tmp/x.go:5: illegal constant expression: bool == interface {}

package p

var m = map[interface{}]struct{}{
	nil:  {},
	true: {},
}
                                                                                                                                                                                                           usr/local/go/test/fixedbugs/issue7997.go                                                            0100644 0000000 0000000 00000001335 13020111414 016520  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// /tmp/x.go:3: internal error: f &p (type *int) recorded as live on entry

package p

func f(ch chan int) *int {
	select {
	case p1x := <-ch:
		return &p1x
	default:
		// ok
	}
	select {
	case p1 := <-ch:
		return &p1
	default:
		// ok
	}
	select {
	case p2 := <-ch:
		return &p2
	case p3 := <-ch:
		return &p3
	default:
		// ok
	}
	select {
	case p4, ok := <-ch:
		if ok {
			return &p4
		}
	default:
		// ok
	}
	select {
	case p5, ok := <-ch:
		if ok {
			return &p5
		}
	case p6, ok := <-ch:
		if !ok {
			return &p6
		}
	default:
		// ok
	}
	return nil
}
                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue7998.go                                                            0100644 0000000 0000000 00000000575 13020111414 016526  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// /tmp/x.go:5: cannot use _ as value

package p

func f(ch chan int) bool {
	select {
	case _, ok := <-ch:
		return ok
	}
	_, ok := <-ch
	_ = ok
	select {
	case _, _ = <-ch:
		return true
	}
	return false
}
                                                                                                                                   usr/local/go/test/fixedbugs/issue8004.go                                                            0100644 0000000 0000000 00000002147 13020111414 016476  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"reflect"
	"runtime"
	"unsafe"
)

func main() {
	test1()
	test2()
}

func test1() {
	var all []interface{}
	for i := 0; i < 100; i++ {
		p := new([]int)
		*p = append(*p, 1, 2, 3, 4)
		h := (*reflect.SliceHeader)(unsafe.Pointer(p))
		all = append(all, h, p)
	}
	runtime.GC()
	for i := 0; i < 100; i++ {
		p := *all[2*i+1].(*[]int)
		if p[0] != 1 || p[1] != 2 || p[2] != 3 || p[3] != 4 {
			println("BUG test1: bad slice at index", i, p[0], p[1], p[2], p[3])
			return
		}
	}
}

type T struct {
	H *reflect.SliceHeader
	P *[]int
}

func test2() {
	var all []T
	for i := 0; i < 100; i++ {
		p := new([]int)
		*p = append(*p, 1, 2, 3, 4)
		h := (*reflect.SliceHeader)(unsafe.Pointer(p))
		all = append(all, T{H: h}, T{P: p})
	}
	runtime.GC()
	for i := 0; i < 100; i++ {
		p := *all[2*i+1].P
		if p[0] != 1 || p[1] != 2 || p[2] != 3 || p[3] != 4 {
			println("BUG test2: bad slice at index", i, p[0], p[1], p[2], p[3])
			return
		}
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue8011.go                                                            0100644 0000000 0000000 00000000513 13020111414 016467  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

func main() {
	c := make(chan chan int, 1)
	c1 := make(chan int, 1)
	c1 <- 42
	c <- c1
	x := <-<-c
	if x != 42 {
		println("BUG:", x, "!= 42")
	}
}
                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue8017.go                                                            0100644 0000000 0000000 00000001035 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issues 8017 and 8058: walk modifies nodes generated
// by slicelit and causes an internal error afterwards
// when gen_as_init parses it back.

package main

func F() {
	var ch chan int
	select {
	case <-ch:
	case <-make(chan int, len([2][]int{([][]int{})[len(ch)], []int{}})):
	}
}

func G() {
	select {
	case <-([1][]chan int{[]chan int{}})[0][0]:
	default:
	}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/local/go/test/fixedbugs/issue8028.go                                                            0100644 0000000 0000000 00000000653 13020111414 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8028. Used to fail in -race mode with "non-orig name" error.

package p

var (
	t2 = T{F, "s1"}
	t1 = T{F, "s2"}

	tt = [...]T{t1, t2}
)

type I interface{}

type T struct {
	F func() I
	S string
}

type E struct{}

func F() I { return new(E) }
                                                                                     usr/local/go/test/fixedbugs/issue8036.go                                                            0100644 0000000 0000000 00000001172 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8036. Stores necessary for stack scan being eliminated as redundant by optimizer.

package main

import "runtime"

type T struct {
	X *int
	Y *int
	Z *int
}

type TI [3]uintptr

//go:noinline
func G() (t TI) {
	t[0] = 1
	t[1] = 2
	t[2] = 3
	return
}

//go:noinline
func F() (t T) {
	t.X = newint()
	t.Y = t.X
	t.Z = t.Y
	return
}

func newint() *int {
	runtime.GC()
	return nil
}

func main() {
	G() // leave non-pointers where F's return values go
	F()
}
                                                                                                                                                                                                                                                                                                                                                                                                      usr/local/go/test/fixedbugs/issue8039.go                                                            0100644 0000000 0000000 00000000637 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 8039. defer copy(x, <-c) did not rewrite <-c properly.

package main

func f(s []int) {
	c := make(chan []int, 1)
	c <- []int{1}
	defer copy(s, <-c)
}

func main() {
	x := make([]int, 1)
	f(x)
	if x[0] != 1 {
		println("BUG", x[0])
	}
}
                                                                                                 usr/local/go/test/fixedbugs/issue8047.go                                                            0100644 0000000 0000000 00000001023 13020111414 016475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8047.  Stack copier shouldn't crash if there
// is a nil defer.

package main

func stackit(n int) {
	if n == 0 {
		return
	}
	stackit(n - 1)
}

func main() {
	defer func() {
		// catch & ignore panic from nil defer below
		err := recover()
		if err == nil {
			panic("defer of nil func didn't panic")
		}
	}()
	defer ((func())(nil))()
	stackit(1000)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/local/go/test/fixedbugs/issue8047b.go                                                           0100644 0000000 0000000 00000000546 13020111414 016650  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8047. Defer setup during panic shouldn't crash for nil defer.

package main

func main() {
	defer func() {
		recover()
	}()
	f()
}

func f() {
	var g func()
	defer g()
	panic(1)
}
                                                                                                                                                          usr/local/go/test/fixedbugs/issue8048.go                                                            0100644 0000000 0000000 00000004004 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8048. Incorrect handling of liveness when walking stack
// containing faulting frame.

package main

import "runtime"

func main() {
	test1()
	test2()
	test3()
}

func test1() {
	// test1f will panic without its own defer.
	// The runtime.GC checks that we can walk the stack
	// at that point and not get confused.
	// The recover lets test1 exit normally.
	defer func() {
		runtime.GC()
		recover()
	}()
	test1f()
}

func test1f() {
	// Because b == false, the if does not execute,
	// so x == nil, so the println(*x) faults reading
	// from nil. The compiler will lay out the code
	// so that the if body occurs above the *x,
	// so if the liveness info at the *x is used, it will
	// find the liveness at the call to runtime.GC.
	// It will think y is live, but y is uninitialized,
	// and the runtime will crash detecting a bad slice.
	// The runtime should see that there are no defers
	// corresponding to this panicked frame and ignore
	// the frame entirely.
	var x *int
	var b bool
	if b {
		y := make([]int, 1)
		runtime.GC()
		x = &y[0]
	}
	println(*x)
}

func test2() {
	// Same as test1, but the fault happens in the function with the defer.
	// The runtime should see the defer and garbage collect the frame
	// as if the PC were immediately after the defer statement.
	defer func() {
		runtime.GC()
		recover()
	}()
	var x *int
	var b bool
	if b {
		y := make([]int, 1)
		runtime.GC()
		x = &y[0]
	}
	println(*x)
}

func test3() {
	// Like test1 but avoid array index, which does not
	// move to end of function on ARM.
	defer func() {
		runtime.GC()
		recover()
	}()
	test3setup()
	test3f()
}

func test3setup() {
	var x uintptr
	var b bool
	b = true
	if b {
		y := uintptr(123)
		runtime.GC()
		x = y
	}
	runtime.GC()
	globl = x
}

var globl uintptr

func test3f() {
	var x *int
	var b bool
	if b {
		y := new(int)
		runtime.GC()
		x = y
	}
	println(*x)
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/local/go/test/fixedbugs/issue8060.dir/                                                          0040755 0000000 0000000 00000000000 13020111414 016725  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/go/test/fixedbugs/issue8060.dir/a.go                                                      0100644 0000000 0000000 00000000306 13020111414 017470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package a

var A = []*[2][1]float64{}
                                                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue8060.dir/b.go                                                      0100644 0000000 0000000 00000000346 13020111414 017475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package b

import "a"

var X = a.A

func b() {
	_ = [3][1]float64{}
}
                                                                                                                                                                                                                                                                                          usr/local/go/test/fixedbugs/issue8060.go                                                            0100644 0000000 0000000 00000000350 13020111414 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compiledir

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8060: internal compiler error.

package ignored
                                                                                                                                                                                                                                                                                        usr/local/go/test/fixedbugs/issue8073.go                                                            0100644 0000000 0000000 00000000477 13020111414 016510  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 8073.
// was "internal compiler error: overflow: float64 integer constant"

package main

func main() {
	var x int
	_ = float64(x * 0)
}
                                                                                                                                                                                                 usr/local/go/test/fixedbugs/issue8074.go                                                            0100644 0000000 0000000 00000000513 13020111414 016500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 8074.
// was "cannot take the address of 1"

package main

func main() {
	a := make([]byte, 10)
	m := make(map[float64][]byte)
	go copy(a, m[1.0])
}
                                                                                                                                                                                     usr/local/go/test/fixedbugs/issue8076.go                                                            0100644 0000000 0000000 00000000527 13020111414 016507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8076. nilwalkfwd walked forward forever
// on the instruction loop following the dereference.

package main

func main() {
	_ = *(*int)(nil)
L:
	_ = 0
	goto L
}
                                                                                                                                                                         usr/local/go/test/fixedbugs/issue8079.go                                                            0100644 0000000 0000000 00000000427 13020111414 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // compile

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8079: gccgo crashes when compiling interface with blank type name.

package p

type _ interface{}
                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue8132.go                                                            0100644 0000000 0000000 00000001027 13020111414 016474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// issue 8132. stack walk handling of panic stack was confused
// about what was legal.

package main

import "runtime"

var p *int

func main() {
	func() {
		defer func() {
			runtime.GC()
			recover()
		}()
		var x [8192]byte
		func(x [8192]byte) {
			defer func() {
				if err := recover(); err != nil {
					println(*p)
				}
			}()
			println(*p)
		}(x)
	}()
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/go/test/fixedbugs/issue8139.go                                                            0100644 0000000 0000000 00000001441 13020111414 016503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // run

// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Issue 8139. The x.(T) assertions used to write 1 (unexpected)
// return byte for the 0-byte return value T.

package main

import "fmt"

type T struct{}

func (T) M() {}

type M interface {
	M()
}

var e interface{} = T{}
var i M = T{}
var b bool

func f1() int {
	if b {
		return f1() // convince inliner not to inline
	}
	z := 0x11223344
